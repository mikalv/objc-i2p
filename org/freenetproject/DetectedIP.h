//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/freenetproject/DetectedIP.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgFreenetprojectDetectedIP")
#ifdef RESTRICT_OrgFreenetprojectDetectedIP
#define INCLUDE_ALL_OrgFreenetprojectDetectedIP 0
#else
#define INCLUDE_ALL_OrgFreenetprojectDetectedIP 1
#endif
#undef RESTRICT_OrgFreenetprojectDetectedIP

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgFreenetprojectDetectedIP_) && (INCLUDE_ALL_OrgFreenetprojectDetectedIP || defined(INCLUDE_OrgFreenetprojectDetectedIP))
#define OrgFreenetprojectDetectedIP_

@class JavaNetInetAddress;

@interface OrgFreenetprojectDetectedIP : NSObject {
 @public
  JavaNetInetAddress *publicAddress_;
  jshort natType_;
  jint mtu_;
}
@property (readonly, class) jshort NOT_SUPPORTED NS_SWIFT_NAME(NOT_SUPPORTED);
@property (readonly, class) jshort FULL_INTERNET NS_SWIFT_NAME(FULL_INTERNET);
@property (readonly, class) jshort FULL_CONE_NAT NS_SWIFT_NAME(FULL_CONE_NAT);
@property (readonly, class) jshort RESTRICTED_CONE_NAT NS_SWIFT_NAME(RESTRICTED_CONE_NAT);
@property (readonly, class) jshort PORT_RESTRICTED_NAT NS_SWIFT_NAME(PORT_RESTRICTED_NAT);
@property (readonly, class) jshort SYMMETRIC_NAT NS_SWIFT_NAME(SYMMETRIC_NAT);
@property (readonly, class) jshort SYMMETRIC_UDP_FIREWALL NS_SWIFT_NAME(SYMMETRIC_UDP_FIREWALL);
@property (readonly, class) jshort NO_UDP NS_SWIFT_NAME(NO_UDP);

+ (jshort)NOT_SUPPORTED;

+ (jshort)FULL_INTERNET;

+ (jshort)FULL_CONE_NAT;

+ (jshort)RESTRICTED_CONE_NAT;

+ (jshort)PORT_RESTRICTED_NAT;

+ (jshort)SYMMETRIC_NAT;

+ (jshort)SYMMETRIC_UDP_FIREWALL;

+ (jshort)NO_UDP;

#pragma mark Public

- (instancetype __nonnull)initWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                                           withShort:(jshort)type;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgFreenetprojectDetectedIP)

J2OBJC_FIELD_SETTER(OrgFreenetprojectDetectedIP, publicAddress_, JavaNetInetAddress *)

inline jshort OrgFreenetprojectDetectedIP_get_NOT_SUPPORTED(void);
#define OrgFreenetprojectDetectedIP_NOT_SUPPORTED 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, NOT_SUPPORTED, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_FULL_INTERNET(void);
#define OrgFreenetprojectDetectedIP_FULL_INTERNET 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, FULL_INTERNET, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_FULL_CONE_NAT(void);
#define OrgFreenetprojectDetectedIP_FULL_CONE_NAT 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, FULL_CONE_NAT, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_RESTRICTED_CONE_NAT(void);
#define OrgFreenetprojectDetectedIP_RESTRICTED_CONE_NAT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, RESTRICTED_CONE_NAT, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_PORT_RESTRICTED_NAT(void);
#define OrgFreenetprojectDetectedIP_PORT_RESTRICTED_NAT 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, PORT_RESTRICTED_NAT, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_SYMMETRIC_NAT(void);
#define OrgFreenetprojectDetectedIP_SYMMETRIC_NAT 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, SYMMETRIC_NAT, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_SYMMETRIC_UDP_FIREWALL(void);
#define OrgFreenetprojectDetectedIP_SYMMETRIC_UDP_FIREWALL 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, SYMMETRIC_UDP_FIREWALL, jshort)

inline jshort OrgFreenetprojectDetectedIP_get_NO_UDP(void);
#define OrgFreenetprojectDetectedIP_NO_UDP 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgFreenetprojectDetectedIP, NO_UDP, jshort)

FOUNDATION_EXPORT void OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(OrgFreenetprojectDetectedIP *self, JavaNetInetAddress *addr, jshort type);

FOUNDATION_EXPORT OrgFreenetprojectDetectedIP *new_OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(JavaNetInetAddress *addr, jshort type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgFreenetprojectDetectedIP *create_OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(JavaNetInetAddress *addr, jshort type);

J2OBJC_TYPE_LITERAL_HEADER(OrgFreenetprojectDetectedIP)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgFreenetprojectDetectedIP")
