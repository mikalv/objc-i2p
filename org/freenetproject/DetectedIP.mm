//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/freenetproject/DetectedIP.java
//

#include "J2ObjC_source.h"
#include "java/net/InetAddress.h"
#include "org/freenetproject/DetectedIP.h"

@implementation OrgFreenetprojectDetectedIP

+ (jshort)NOT_SUPPORTED {
  return OrgFreenetprojectDetectedIP_NOT_SUPPORTED;
}

+ (jshort)FULL_INTERNET {
  return OrgFreenetprojectDetectedIP_FULL_INTERNET;
}

+ (jshort)FULL_CONE_NAT {
  return OrgFreenetprojectDetectedIP_FULL_CONE_NAT;
}

+ (jshort)RESTRICTED_CONE_NAT {
  return OrgFreenetprojectDetectedIP_RESTRICTED_CONE_NAT;
}

+ (jshort)PORT_RESTRICTED_NAT {
  return OrgFreenetprojectDetectedIP_PORT_RESTRICTED_NAT;
}

+ (jshort)SYMMETRIC_NAT {
  return OrgFreenetprojectDetectedIP_SYMMETRIC_NAT;
}

+ (jshort)SYMMETRIC_UDP_FIREWALL {
  return OrgFreenetprojectDetectedIP_SYMMETRIC_UDP_FIREWALL;
}

+ (jshort)NO_UDP {
  return OrgFreenetprojectDetectedIP_NO_UDP;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                                 withShort:(jshort)type {
  OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(self, addr, type);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgFreenetprojectDetectedIP class]])) {
    return false;
  }
  OrgFreenetprojectDetectedIP *d = (OrgFreenetprojectDetectedIP *) cast_chk(o, [OrgFreenetprojectDetectedIP class]);
  return ((((OrgFreenetprojectDetectedIP *) nil_chk(d))->natType_ == natType_) && [((JavaNetInetAddress *) nil_chk(d->publicAddress_)) isEqual:publicAddress_]);
}

- (NSUInteger)hash {
  return ((jint) [((JavaNetInetAddress *) nil_chk(publicAddress_)) hash]) ^ natType_;
}

- (NSString *)description {
  return JreStrcat("$CSCI", [((JavaNetInetAddress *) nil_chk(publicAddress_)) description], ':', natType_, ':', mtu_);
}

- (void)dealloc {
  RELEASE_(publicAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetInetAddress:withShort:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "natType_", "S", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "mtu_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "NOT_SUPPORTED", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_NOT_SUPPORTED, 0x19, -1, -1, -1, -1 },
    { "FULL_INTERNET", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_FULL_INTERNET, 0x19, -1, -1, -1, -1 },
    { "FULL_CONE_NAT", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_FULL_CONE_NAT, 0x19, -1, -1, -1, -1 },
    { "RESTRICTED_CONE_NAT", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_RESTRICTED_CONE_NAT, 0x19, -1, -1, -1, -1 },
    { "PORT_RESTRICTED_NAT", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_PORT_RESTRICTED_NAT, 0x19, -1, -1, -1, -1 },
    { "SYMMETRIC_NAT", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_SYMMETRIC_NAT, 0x19, -1, -1, -1, -1 },
    { "SYMMETRIC_UDP_FIREWALL", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_SYMMETRIC_UDP_FIREWALL, 0x19, -1, -1, -1, -1 },
    { "NO_UDP", "S", .constantValue.asShort = OrgFreenetprojectDetectedIP_NO_UDP, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInetAddress;S", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgFreenetprojectDetectedIP = { "DetectedIP", "org.freenetproject", ptrTable, methods, fields, 7, 0x1, 4, 11, -1, -1, -1, -1, -1 };
  return &_OrgFreenetprojectDetectedIP;
}

@end

void OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(OrgFreenetprojectDetectedIP *self, JavaNetInetAddress *addr, jshort type) {
  NSObject_init(self);
  JreStrongAssign(&self->publicAddress_, addr);
  self->natType_ = type;
  self->mtu_ = 1500;
}

OrgFreenetprojectDetectedIP *new_OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(JavaNetInetAddress *addr, jshort type) {
  J2OBJC_NEW_IMPL(OrgFreenetprojectDetectedIP, initWithJavaNetInetAddress_withShort_, addr, type)
}

OrgFreenetprojectDetectedIP *create_OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(JavaNetInetAddress *addr, jshort type) {
  J2OBJC_CREATE_IMPL(OrgFreenetprojectDetectedIP, initWithJavaNetInetAddress_withShort_, addr, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgFreenetprojectDetectedIP)
