//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/util/Args.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/http/util/Args.h"

@implementation OrgApacheHttpUtilArgs

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheHttpUtilArgs_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)notNullWithId:(id)argument
       withNSString:(NSString *)name {
  return OrgApacheHttpUtilArgs_notNullWithId_withNSString_(argument, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(notNullWithId:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "notNull", "LNSObject;LNSString;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)TT;" };
  static const J2ObjcClassInfo _OrgApacheHttpUtilArgs = { "Args", "org.apache.http.util", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheHttpUtilArgs;
}

@end

void OrgApacheHttpUtilArgs_init(OrgApacheHttpUtilArgs *self) {
  NSObject_init(self);
}

OrgApacheHttpUtilArgs *new_OrgApacheHttpUtilArgs_init() {
  J2OBJC_NEW_IMPL(OrgApacheHttpUtilArgs, init)
}

OrgApacheHttpUtilArgs *create_OrgApacheHttpUtilArgs_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHttpUtilArgs, init)
}

id OrgApacheHttpUtilArgs_notNullWithId_withNSString_(id argument, NSString *name) {
  OrgApacheHttpUtilArgs_initialize();
  if (argument == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @" may not be null"));
  }
  return argument;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHttpUtilArgs)
