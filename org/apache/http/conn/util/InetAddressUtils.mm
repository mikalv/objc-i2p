//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/util/InetAddressUtils.java
//

#include "J2ObjC_source.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/http/conn/util/InetAddressUtils.h"

@interface OrgApacheHttpConnUtilInetAddressUtils ()

- (instancetype)init;

@end

inline NSString *OrgApacheHttpConnUtilInetAddressUtils_get_IPV4_BASIC_PATTERN_STRING(void);
static NSString *OrgApacheHttpConnUtilInetAddressUtils_IPV4_BASIC_PATTERN_STRING = @"(([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){1}(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheHttpConnUtilInetAddressUtils, IPV4_BASIC_PATTERN_STRING, NSString *)

inline JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_get_IPV4_PATTERN(void);
static JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_IPV4_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheHttpConnUtilInetAddressUtils, IPV4_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_get_IPV4_MAPPED_IPV6_PATTERN(void);
static JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_IPV4_MAPPED_IPV6_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheHttpConnUtilInetAddressUtils, IPV4_MAPPED_IPV6_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_get_IPV6_STD_PATTERN(void);
static JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_IPV6_STD_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheHttpConnUtilInetAddressUtils, IPV6_STD_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_get_IPV6_HEX_COMPRESSED_PATTERN(void);
static JavaUtilRegexPattern *OrgApacheHttpConnUtilInetAddressUtils_IPV6_HEX_COMPRESSED_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheHttpConnUtilInetAddressUtils, IPV6_HEX_COMPRESSED_PATTERN, JavaUtilRegexPattern *)

inline jchar OrgApacheHttpConnUtilInetAddressUtils_get_COLON_CHAR(void);
#define OrgApacheHttpConnUtilInetAddressUtils_COLON_CHAR ':'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHttpConnUtilInetAddressUtils, COLON_CHAR, jchar)

inline jint OrgApacheHttpConnUtilInetAddressUtils_get_MAX_COLON_COUNT(void);
#define OrgApacheHttpConnUtilInetAddressUtils_MAX_COLON_COUNT 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHttpConnUtilInetAddressUtils, MAX_COLON_COUNT, jint)

__attribute__((unused)) static void OrgApacheHttpConnUtilInetAddressUtils_init(OrgApacheHttpConnUtilInetAddressUtils *self);

__attribute__((unused)) static OrgApacheHttpConnUtilInetAddressUtils *new_OrgApacheHttpConnUtilInetAddressUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheHttpConnUtilInetAddressUtils *create_OrgApacheHttpConnUtilInetAddressUtils_init(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheHttpConnUtilInetAddressUtils)

@implementation OrgApacheHttpConnUtilInetAddressUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheHttpConnUtilInetAddressUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isIPv4AddressWithNSString:(NSString *)input {
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv4AddressWithNSString_(input);
}

+ (jboolean)isIPv4MappedIPv64AddressWithNSString:(NSString *)input {
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv4MappedIPv64AddressWithNSString_(input);
}

+ (jboolean)isIPv6StdAddressWithNSString:(NSString *)input {
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv6StdAddressWithNSString_(input);
}

+ (jboolean)isIPv6HexCompressedAddressWithNSString:(NSString *)input {
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv6HexCompressedAddressWithNSString_(input);
}

+ (jboolean)isIPv6AddressWithNSString:(NSString *)input {
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv6AddressWithNSString_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isIPv4AddressWithNSString:);
  methods[2].selector = @selector(isIPv4MappedIPv64AddressWithNSString:);
  methods[3].selector = @selector(isIPv6StdAddressWithNSString:);
  methods[4].selector = @selector(isIPv6HexCompressedAddressWithNSString:);
  methods[5].selector = @selector(isIPv6AddressWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPV4_BASIC_PATTERN_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "IPV4_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "IPV4_MAPPED_IPV6_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "IPV6_STD_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "IPV6_HEX_COMPRESSED_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "COLON_CHAR", "C", .constantValue.asUnichar = OrgApacheHttpConnUtilInetAddressUtils_COLON_CHAR, 0x1a, -1, -1, -1, -1 },
    { "MAX_COLON_COUNT", "I", .constantValue.asInt = OrgApacheHttpConnUtilInetAddressUtils_MAX_COLON_COUNT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isIPv4Address", "LNSString;", "isIPv4MappedIPv64Address", "isIPv6StdAddress", "isIPv6HexCompressedAddress", "isIPv6Address", &OrgApacheHttpConnUtilInetAddressUtils_IPV4_BASIC_PATTERN_STRING, &OrgApacheHttpConnUtilInetAddressUtils_IPV4_PATTERN, &OrgApacheHttpConnUtilInetAddressUtils_IPV4_MAPPED_IPV6_PATTERN, &OrgApacheHttpConnUtilInetAddressUtils_IPV6_STD_PATTERN, &OrgApacheHttpConnUtilInetAddressUtils_IPV6_HEX_COMPRESSED_PATTERN };
  static const J2ObjcClassInfo _OrgApacheHttpConnUtilInetAddressUtils = { "InetAddressUtils", "org.apache.http.conn.util", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheHttpConnUtilInetAddressUtils;
}

+ (void)initialize {
  if (self == [OrgApacheHttpConnUtilInetAddressUtils class]) {
    JreStrongAssign(&OrgApacheHttpConnUtilInetAddressUtils_IPV4_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$C", '^', OrgApacheHttpConnUtilInetAddressUtils_IPV4_BASIC_PATTERN_STRING, '$')));
    JreStrongAssign(&OrgApacheHttpConnUtilInetAddressUtils_IPV4_MAPPED_IPV6_PATTERN, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$C", @"^::[fF]{4}:", OrgApacheHttpConnUtilInetAddressUtils_IPV4_BASIC_PATTERN_STRING, '$')));
    JreStrongAssign(&OrgApacheHttpConnUtilInetAddressUtils_IPV6_STD_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^[0-9a-fA-F]{1,4}(:[0-9a-fA-F]{1,4}){7}$"));
    JreStrongAssign(&OrgApacheHttpConnUtilInetAddressUtils_IPV6_HEX_COMPRESSED_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?)::(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?)$"));
    J2OBJC_SET_INITIALIZED(OrgApacheHttpConnUtilInetAddressUtils)
  }
}

@end

void OrgApacheHttpConnUtilInetAddressUtils_init(OrgApacheHttpConnUtilInetAddressUtils *self) {
  NSObject_init(self);
}

OrgApacheHttpConnUtilInetAddressUtils *new_OrgApacheHttpConnUtilInetAddressUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheHttpConnUtilInetAddressUtils, init)
}

OrgApacheHttpConnUtilInetAddressUtils *create_OrgApacheHttpConnUtilInetAddressUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHttpConnUtilInetAddressUtils, init)
}

jboolean OrgApacheHttpConnUtilInetAddressUtils_isIPv4AddressWithNSString_(NSString *input) {
  OrgApacheHttpConnUtilInetAddressUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgApacheHttpConnUtilInetAddressUtils_IPV4_PATTERN)) matcherWithJavaLangCharSequence:input])) matches];
}

jboolean OrgApacheHttpConnUtilInetAddressUtils_isIPv4MappedIPv64AddressWithNSString_(NSString *input) {
  OrgApacheHttpConnUtilInetAddressUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgApacheHttpConnUtilInetAddressUtils_IPV4_MAPPED_IPV6_PATTERN)) matcherWithJavaLangCharSequence:input])) matches];
}

jboolean OrgApacheHttpConnUtilInetAddressUtils_isIPv6StdAddressWithNSString_(NSString *input) {
  OrgApacheHttpConnUtilInetAddressUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgApacheHttpConnUtilInetAddressUtils_IPV6_STD_PATTERN)) matcherWithJavaLangCharSequence:input])) matches];
}

jboolean OrgApacheHttpConnUtilInetAddressUtils_isIPv6HexCompressedAddressWithNSString_(NSString *input) {
  OrgApacheHttpConnUtilInetAddressUtils_initialize();
  jint colonCount = 0;
  for (jint i = 0; i < [((NSString *) nil_chk(input)) java_length]; i++) {
    if ([input charAtWithInt:i] == OrgApacheHttpConnUtilInetAddressUtils_COLON_CHAR) {
      colonCount++;
    }
  }
  return colonCount <= OrgApacheHttpConnUtilInetAddressUtils_MAX_COLON_COUNT && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgApacheHttpConnUtilInetAddressUtils_IPV6_HEX_COMPRESSED_PATTERN)) matcherWithJavaLangCharSequence:input])) matches];
}

jboolean OrgApacheHttpConnUtilInetAddressUtils_isIPv6AddressWithNSString_(NSString *input) {
  OrgApacheHttpConnUtilInetAddressUtils_initialize();
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv6StdAddressWithNSString_(input) || OrgApacheHttpConnUtilInetAddressUtils_isIPv6HexCompressedAddressWithNSString_(input);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHttpConnUtilInetAddressUtils)
