//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/util/PublicSuffixMatcher.java
//

#include "J2ObjC_source.h"
#include "java/net/IDN.h"
#include "java/util/Collection.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/apache/http/conn/util/PublicSuffixMatcher.h"
#include "org/apache/http/util/Args.h"

@interface OrgApacheHttpConnUtilPublicSuffixMatcher () {
 @public
  id<JavaUtilMap> rules_;
  id<JavaUtilMap> exceptions_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheHttpConnUtilPublicSuffixMatcher, rules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheHttpConnUtilPublicSuffixMatcher, exceptions_, id<JavaUtilMap>)

@implementation OrgApacheHttpConnUtilPublicSuffixMatcher

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)rules
                    withJavaUtilCollection:(id<JavaUtilCollection>)exceptions {
  OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_(self, rules, exceptions);
  return self;
}

- (NSString *)getDomainRootWithNSString:(NSString *)domain {
  if (domain == nil) {
    return nil;
  }
  if ([domain java_hasPrefix:@"."]) {
    return nil;
  }
  NSString *domainName = nil;
  NSString *segment = [domain java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  while (segment != nil) {
    if (self->exceptions_ != nil && [self->exceptions_ containsKeyWithId:JavaNetIDN_toUnicodeWithNSString_(segment)]) {
      return segment;
    }
    if ([((id<JavaUtilMap>) nil_chk(self->rules_)) containsKeyWithId:JavaNetIDN_toUnicodeWithNSString_(segment)]) {
      break;
    }
    jint nextdot = [segment java_indexOf:'.'];
    NSString *nextSegment = nextdot != -1 ? [segment java_substring:nextdot + 1] : nil;
    if (nextSegment != nil) {
      if ([self->rules_ containsKeyWithId:JreStrcat("$$", @"*.", JavaNetIDN_toUnicodeWithNSString_(nextSegment))]) {
        break;
      }
    }
    if (nextdot != -1) {
      domainName = segment;
    }
    segment = nextSegment;
  }
  return domainName;
}

- (jboolean)matchesWithNSString:(NSString *)domain {
  if (domain == nil) {
    return false;
  }
  NSString *domainRoot = [self getDomainRootWithNSString:[domain java_hasPrefix:@"."] ? [domain java_substring:1] : domain];
  return domainRoot == nil;
}

- (void)dealloc {
  RELEASE_(rules_);
  RELEASE_(exceptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCollection:withJavaUtilCollection:);
  methods[1].selector = @selector(getDomainRootWithNSString:);
  methods[2].selector = @selector(matchesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "exceptions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;Ljava/util/Collection<Ljava/lang/String;>;)V", "getDomainRoot", "LNSString;", "matches", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheHttpConnUtilPublicSuffixMatcher = { "PublicSuffixMatcher", "org.apache.http.conn.util", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheHttpConnUtilPublicSuffixMatcher;
}

@end

void OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_(OrgApacheHttpConnUtilPublicSuffixMatcher *self, id<JavaUtilCollection> rules, id<JavaUtilCollection> exceptions) {
  NSObject_init(self);
  OrgApacheHttpUtilArgs_notNullWithId_withNSString_(rules, @"Domain suffix rules");
  JreStrongAssignAndConsume(&self->rules_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_([((id<JavaUtilCollection>) nil_chk(rules)) size]));
  for (NSString * __strong rule in rules) {
    [self->rules_ putWithId:rule withId:rule];
  }
  if (exceptions != nil) {
    JreStrongAssignAndConsume(&self->exceptions_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_([exceptions size]));
    for (NSString * __strong exception in exceptions) {
      [self->exceptions_ putWithId:exception withId:exception];
    }
  }
  else {
    JreStrongAssign(&self->exceptions_, nil);
  }
}

OrgApacheHttpConnUtilPublicSuffixMatcher *new_OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> rules, id<JavaUtilCollection> exceptions) {
  J2OBJC_NEW_IMPL(OrgApacheHttpConnUtilPublicSuffixMatcher, initWithJavaUtilCollection_withJavaUtilCollection_, rules, exceptions)
}

OrgApacheHttpConnUtilPublicSuffixMatcher *create_OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> rules, id<JavaUtilCollection> exceptions) {
  J2OBJC_CREATE_IMPL(OrgApacheHttpConnUtilPublicSuffixMatcher, initWithJavaUtilCollection_withJavaUtilCollection_, rules, exceptions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHttpConnUtilPublicSuffixMatcher)
