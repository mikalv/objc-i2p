//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/util/PublicSuffixList.java
//

#include "J2ObjC_source.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/http/conn/util/PublicSuffixList.h"
#include "org/apache/http/util/Args.h"

@interface OrgApacheHttpConnUtilPublicSuffixList () {
 @public
  id<JavaUtilList> rules_;
  id<JavaUtilList> exceptions_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheHttpConnUtilPublicSuffixList, rules_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheHttpConnUtilPublicSuffixList, exceptions_, id<JavaUtilList>)

@implementation OrgApacheHttpConnUtilPublicSuffixList

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rules
                    withJavaUtilList:(id<JavaUtilList>)exceptions {
  OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(self, rules, exceptions);
  return self;
}

- (id<JavaUtilList>)getRules {
  return rules_;
}

- (id<JavaUtilList>)getExceptions {
  return exceptions_;
}

- (void)dealloc {
  RELEASE_(rules_);
  RELEASE_(exceptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(getRules);
  methods[2].selector = @selector(getExceptions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rules_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "exceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)V", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheHttpConnUtilPublicSuffixList = { "PublicSuffixList", "org.apache.http.conn.util", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheHttpConnUtilPublicSuffixList;
}

@end

void OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(OrgApacheHttpConnUtilPublicSuffixList *self, id<JavaUtilList> rules, id<JavaUtilList> exceptions) {
  NSObject_init(self);
  JreStrongAssign(&self->rules_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgApacheHttpUtilArgs_notNullWithId_withNSString_(rules, @"Domain suffix rules")));
  JreStrongAssign(&self->exceptions_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgApacheHttpUtilArgs_notNullWithId_withNSString_(exceptions, @"Domain suffix exceptions")));
}

OrgApacheHttpConnUtilPublicSuffixList *new_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> rules, id<JavaUtilList> exceptions) {
  J2OBJC_NEW_IMPL(OrgApacheHttpConnUtilPublicSuffixList, initWithJavaUtilList_withJavaUtilList_, rules, exceptions)
}

OrgApacheHttpConnUtilPublicSuffixList *create_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> rules, id<JavaUtilList> exceptions) {
  J2OBJC_CREATE_IMPL(OrgApacheHttpConnUtilPublicSuffixList, initWithJavaUtilList_withJavaUtilList_, rules, exceptions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHttpConnUtilPublicSuffixList)
