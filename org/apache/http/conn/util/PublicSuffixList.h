//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/util/PublicSuffixList.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheHttpConnUtilPublicSuffixList")
#ifdef RESTRICT_OrgApacheHttpConnUtilPublicSuffixList
#define INCLUDE_ALL_OrgApacheHttpConnUtilPublicSuffixList 0
#else
#define INCLUDE_ALL_OrgApacheHttpConnUtilPublicSuffixList 1
#endif
#undef RESTRICT_OrgApacheHttpConnUtilPublicSuffixList

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheHttpConnUtilPublicSuffixList_) && (INCLUDE_ALL_OrgApacheHttpConnUtilPublicSuffixList || defined(INCLUDE_OrgApacheHttpConnUtilPublicSuffixList))
#define OrgApacheHttpConnUtilPublicSuffixList_

@protocol JavaUtilList;

@interface OrgApacheHttpConnUtilPublicSuffixList : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)rules
                              withJavaUtilList:(id<JavaUtilList>)exceptions;

- (id<JavaUtilList>)getExceptions;

- (id<JavaUtilList>)getRules;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheHttpConnUtilPublicSuffixList)

FOUNDATION_EXPORT void OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(OrgApacheHttpConnUtilPublicSuffixList *self, id<JavaUtilList> rules, id<JavaUtilList> exceptions);

FOUNDATION_EXPORT OrgApacheHttpConnUtilPublicSuffixList *new_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> rules, id<JavaUtilList> exceptions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheHttpConnUtilPublicSuffixList *create_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> rules, id<JavaUtilList> exceptions);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHttpConnUtilPublicSuffixList)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheHttpConnUtilPublicSuffixList")
