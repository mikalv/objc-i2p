//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/ssl/DefaultHostnameVerifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheHttpConnSslDefaultHostnameVerifier")
#ifdef RESTRICT_OrgApacheHttpConnSslDefaultHostnameVerifier
#define INCLUDE_ALL_OrgApacheHttpConnSslDefaultHostnameVerifier 0
#else
#define INCLUDE_ALL_OrgApacheHttpConnSslDefaultHostnameVerifier 1
#endif
#undef RESTRICT_OrgApacheHttpConnSslDefaultHostnameVerifier

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheHttpConnSslDefaultHostnameVerifier_) && (INCLUDE_ALL_OrgApacheHttpConnSslDefaultHostnameVerifier || defined(INCLUDE_OrgApacheHttpConnSslDefaultHostnameVerifier))
#define OrgApacheHttpConnSslDefaultHostnameVerifier_

#define RESTRICT_JavaxNetSslHostnameVerifier 1
#define INCLUDE_JavaxNetSslHostnameVerifier 1
#include "javax/net/ssl/HostnameVerifier.h"

@class JavaSecurityCertX509Certificate;
@class OrgApacheHttpConnUtilPublicSuffixMatcher;
@protocol JavaUtilList;
@protocol JavaxNetSslSSLSession;

@interface OrgApacheHttpConnSslDefaultHostnameVerifier : NSObject < JavaxNetSslHostnameVerifier >
@property (readonly, class) jint DNS_NAME_TYPE NS_SWIFT_NAME(DNS_NAME_TYPE);
@property (readonly, class) jint IP_ADDRESS_TYPE NS_SWIFT_NAME(IP_ADDRESS_TYPE);

+ (jint)DNS_NAME_TYPE;

+ (jint)IP_ADDRESS_TYPE;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher;

- (jboolean)verifyWithNSString:(NSString *)host
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session;

- (void)verifyWithNSString:(NSString *)host
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

#pragma mark Package-Private

+ (NSString *)extractCNWithNSString:(NSString *)subjectPrincipal;

+ (id<JavaUtilList>)extractSubjectAltsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                  withInt:(jint)subjectType;

+ (void)matchCNWithNSString:(NSString *)host
               withNSString:(NSString *)cn
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher;

+ (void)matchDNSNameWithNSString:(NSString *)host
                withJavaUtilList:(id<JavaUtilList>)subjectAlts
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher;

+ (jboolean)matchDomainRootWithNSString:(NSString *)host
                           withNSString:(NSString *)domainRoot;

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity;

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher;

+ (jboolean)matchIdentityStrictWithNSString:(NSString *)host
                               withNSString:(NSString *)identity;

+ (jboolean)matchIdentityStrictWithNSString:(NSString *)host
                               withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher;

+ (void)matchIPAddressWithNSString:(NSString *)host
                  withJavaUtilList:(id<JavaUtilList>)subjectAlts;

+ (void)matchIPv6AddressWithNSString:(NSString *)host
                    withJavaUtilList:(id<JavaUtilList>)subjectAlts;

+ (NSString *)normaliseAddressWithNSString:(NSString *)hostname;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheHttpConnSslDefaultHostnameVerifier)

inline jint OrgApacheHttpConnSslDefaultHostnameVerifier_get_DNS_NAME_TYPE(void);
#define OrgApacheHttpConnSslDefaultHostnameVerifier_DNS_NAME_TYPE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHttpConnSslDefaultHostnameVerifier, DNS_NAME_TYPE, jint)

inline jint OrgApacheHttpConnSslDefaultHostnameVerifier_get_IP_ADDRESS_TYPE(void);
#define OrgApacheHttpConnSslDefaultHostnameVerifier_IP_ADDRESS_TYPE 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHttpConnSslDefaultHostnameVerifier, IP_ADDRESS_TYPE, jint)

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnSslDefaultHostnameVerifier *self, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT OrgApacheHttpConnSslDefaultHostnameVerifier *new_OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheHttpConnSslDefaultHostnameVerifier *create_OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_init(OrgApacheHttpConnSslDefaultHostnameVerifier *self);

FOUNDATION_EXPORT OrgApacheHttpConnSslDefaultHostnameVerifier *new_OrgApacheHttpConnSslDefaultHostnameVerifier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheHttpConnSslDefaultHostnameVerifier *create_OrgApacheHttpConnSslDefaultHostnameVerifier_init(void);

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPAddressWithNSString_withJavaUtilList_(NSString *host, id<JavaUtilList> subjectAlts);

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPv6AddressWithNSString_withJavaUtilList_(NSString *host, id<JavaUtilList> subjectAlts);

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_matchDNSNameWithNSString_withJavaUtilList_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, id<JavaUtilList> subjectAlts, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT void OrgApacheHttpConnSslDefaultHostnameVerifier_matchCNWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *cn, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchDomainRootWithNSString_withNSString_(NSString *host, NSString *domainRoot);

FOUNDATION_EXPORT jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_(NSString *host, NSString *identity);

FOUNDATION_EXPORT jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher);

FOUNDATION_EXPORT jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_(NSString *host, NSString *identity);

FOUNDATION_EXPORT NSString *OrgApacheHttpConnSslDefaultHostnameVerifier_extractCNWithNSString_(NSString *subjectPrincipal);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheHttpConnSslDefaultHostnameVerifier_extractSubjectAltsWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *cert, jint subjectType);

FOUNDATION_EXPORT NSString *OrgApacheHttpConnSslDefaultHostnameVerifier_normaliseAddressWithNSString_(NSString *hostname);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheHttpConnSslDefaultHostnameVerifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheHttpConnSslDefaultHostnameVerifier")
