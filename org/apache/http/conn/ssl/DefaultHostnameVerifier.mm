//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/apache/http/conn/ssl/DefaultHostnameVerifier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/NoSuchElementException.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/directory/Attribute.h"
#include "javax/naming/directory/Attributes.h"
#include "javax/naming/ldap/LdapName.h"
#include "javax/naming/ldap/Rdn.h"
#include "javax/net/ssl/SSLException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "org/apache/http/conn/ssl/DefaultHostnameVerifier.h"
#include "org/apache/http/conn/util/InetAddressUtils.h"
#include "org/apache/http/conn/util/PublicSuffixMatcher.h"

@interface OrgApacheHttpConnSslDefaultHostnameVerifier () {
 @public
  NetI2pUtilLog *log_;
  OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher_;
}

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher
                          withBoolean:(jboolean)strict;

@end

J2OBJC_FIELD_SETTER(OrgApacheHttpConnSslDefaultHostnameVerifier, log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(OrgApacheHttpConnSslDefaultHostnameVerifier, publicSuffixMatcher_, OrgApacheHttpConnUtilPublicSuffixMatcher *)

__attribute__((unused)) static void OrgApacheHttpConnSslDefaultHostnameVerifier_verifyWithNSString_withJavaSecurityCertX509Certificate_(OrgApacheHttpConnSslDefaultHostnameVerifier *self, NSString *host, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher, jboolean strict);

@implementation OrgApacheHttpConnSslDefaultHostnameVerifier

+ (jint)DNS_NAME_TYPE {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_DNS_NAME_TYPE;
}

+ (jint)IP_ADDRESS_TYPE {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_IP_ADDRESS_TYPE;
}

- (instancetype)initWithOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(self, publicSuffixMatcher);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheHttpConnSslDefaultHostnameVerifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)verifyWithNSString:(NSString *)host
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  @try {
    IOSObjectArray *certs = [((id<JavaxNetSslSSLSession>) nil_chk(session)) getPeerCertificates];
    JavaSecurityCertX509Certificate *x509 = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(certs), 0), [JavaSecurityCertX509Certificate class]);
    OrgApacheHttpConnSslDefaultHostnameVerifier_verifyWithNSString_withJavaSecurityCertX509Certificate_(self, host, x509);
    return true;
  }
  @catch (JavaxNetSslSSLException *ex) {
    if ([((NetI2pUtilLog *) nil_chk(log_)) shouldWarn]) {
      [log_ warnWithNSString:[ex getMessage] withJavaLangThrowable:ex];
    }
    return false;
  }
}

- (void)verifyWithNSString:(NSString *)host
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  OrgApacheHttpConnSslDefaultHostnameVerifier_verifyWithNSString_withJavaSecurityCertX509Certificate_(self, host, cert);
}

+ (void)matchIPAddressWithNSString:(NSString *)host
                  withJavaUtilList:(id<JavaUtilList>)subjectAlts {
  OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPAddressWithNSString_withJavaUtilList_(host, subjectAlts);
}

+ (void)matchIPv6AddressWithNSString:(NSString *)host
                    withJavaUtilList:(id<JavaUtilList>)subjectAlts {
  OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPv6AddressWithNSString_withJavaUtilList_(host, subjectAlts);
}

+ (void)matchDNSNameWithNSString:(NSString *)host
                withJavaUtilList:(id<JavaUtilList>)subjectAlts
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher {
  OrgApacheHttpConnSslDefaultHostnameVerifier_matchDNSNameWithNSString_withJavaUtilList_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, subjectAlts, publicSuffixMatcher);
}

+ (void)matchCNWithNSString:(NSString *)host
               withNSString:(NSString *)cn
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher {
  OrgApacheHttpConnSslDefaultHostnameVerifier_matchCNWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, cn, publicSuffixMatcher);
}

+ (jboolean)matchDomainRootWithNSString:(NSString *)host
                           withNSString:(NSString *)domainRoot {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchDomainRootWithNSString_withNSString_(host, domainRoot);
}

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher
                          withBoolean:(jboolean)strict {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(host, identity, publicSuffixMatcher, strict);
}

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, identity, publicSuffixMatcher);
}

+ (jboolean)matchIdentityWithNSString:(NSString *)host
                         withNSString:(NSString *)identity {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_(host, identity);
}

+ (jboolean)matchIdentityStrictWithNSString:(NSString *)host
                               withNSString:(NSString *)identity
withOrgApacheHttpConnUtilPublicSuffixMatcher:(OrgApacheHttpConnUtilPublicSuffixMatcher *)publicSuffixMatcher {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, identity, publicSuffixMatcher);
}

+ (jboolean)matchIdentityStrictWithNSString:(NSString *)host
                               withNSString:(NSString *)identity {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_(host, identity);
}

+ (NSString *)extractCNWithNSString:(NSString *)subjectPrincipal {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_extractCNWithNSString_(subjectPrincipal);
}

+ (id<JavaUtilList>)extractSubjectAltsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                  withInt:(jint)subjectType {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_extractSubjectAltsWithJavaSecurityCertX509Certificate_withInt_(cert, subjectType);
}

+ (NSString *)normaliseAddressWithNSString:(NSString *)hostname {
  return OrgApacheHttpConnSslDefaultHostnameVerifier_normaliseAddressWithNSString_(hostname);
}

- (void)dealloc {
  RELEASE_(log_);
  RELEASE_(publicSuffixMatcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 6, 4, 7, -1, -1 },
    { NULL, "V", 0x8, 8, 6, 4, 7, -1, -1 },
    { NULL, "V", 0x8, 9, 10, 4, 11, -1, -1 },
    { NULL, "V", 0x8, 12, 13, 4, -1, -1, -1 },
    { NULL, "Z", 0x8, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 16, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 18, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 18, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 19, 20, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSString;", 0x8, 24, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheHttpConnUtilPublicSuffixMatcher:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(verifyWithNSString:withJavaxNetSslSSLSession:);
  methods[3].selector = @selector(verifyWithNSString:withJavaSecurityCertX509Certificate:);
  methods[4].selector = @selector(matchIPAddressWithNSString:withJavaUtilList:);
  methods[5].selector = @selector(matchIPv6AddressWithNSString:withJavaUtilList:);
  methods[6].selector = @selector(matchDNSNameWithNSString:withJavaUtilList:withOrgApacheHttpConnUtilPublicSuffixMatcher:);
  methods[7].selector = @selector(matchCNWithNSString:withNSString:withOrgApacheHttpConnUtilPublicSuffixMatcher:);
  methods[8].selector = @selector(matchDomainRootWithNSString:withNSString:);
  methods[9].selector = @selector(matchIdentityWithNSString:withNSString:withOrgApacheHttpConnUtilPublicSuffixMatcher:withBoolean:);
  methods[10].selector = @selector(matchIdentityWithNSString:withNSString:withOrgApacheHttpConnUtilPublicSuffixMatcher:);
  methods[11].selector = @selector(matchIdentityWithNSString:withNSString:);
  methods[12].selector = @selector(matchIdentityStrictWithNSString:withNSString:withOrgApacheHttpConnUtilPublicSuffixMatcher:);
  methods[13].selector = @selector(matchIdentityStrictWithNSString:withNSString:);
  methods[14].selector = @selector(extractCNWithNSString:);
  methods[15].selector = @selector(extractSubjectAltsWithJavaSecurityCertX509Certificate:withInt:);
  methods[16].selector = @selector(normaliseAddressWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DNS_NAME_TYPE", "I", .constantValue.asInt = OrgApacheHttpConnSslDefaultHostnameVerifier_DNS_NAME_TYPE, 0x18, -1, -1, -1, -1 },
    { "IP_ADDRESS_TYPE", "I", .constantValue.asInt = OrgApacheHttpConnSslDefaultHostnameVerifier_IP_ADDRESS_TYPE, 0x18, -1, -1, -1, -1 },
    { "log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "publicSuffixMatcher_", "LOrgApacheHttpConnUtilPublicSuffixMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheHttpConnUtilPublicSuffixMatcher;", "verify", "LNSString;LJavaxNetSslSSLSession;", "LNSString;LJavaSecurityCertX509Certificate;", "LJavaxNetSslSSLException;", "matchIPAddress", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)V", "matchIPv6Address", "matchDNSName", "LNSString;LJavaUtilList;LOrgApacheHttpConnUtilPublicSuffixMatcher;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Lorg/apache/http/conn/util/PublicSuffixMatcher;)V", "matchCN", "LNSString;LNSString;LOrgApacheHttpConnUtilPublicSuffixMatcher;", "matchDomainRoot", "LNSString;LNSString;", "matchIdentity", "LNSString;LNSString;LOrgApacheHttpConnUtilPublicSuffixMatcher;Z", "matchIdentityStrict", "extractCN", "LNSString;", "extractSubjectAlts", "LJavaSecurityCertX509Certificate;I", "(Ljava/security/cert/X509Certificate;I)Ljava/util/List<Ljava/lang/String;>;", "normaliseAddress" };
  static const J2ObjcClassInfo _OrgApacheHttpConnSslDefaultHostnameVerifier = { "DefaultHostnameVerifier", "org.apache.http.conn.ssl", ptrTable, methods, fields, 7, 0x11, 17, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheHttpConnSslDefaultHostnameVerifier;
}

@end

void OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnSslDefaultHostnameVerifier *self, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  NSObject_init(self);
  JreStrongAssign(&self->log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->publicSuffixMatcher_, publicSuffixMatcher);
}

OrgApacheHttpConnSslDefaultHostnameVerifier *new_OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  J2OBJC_NEW_IMPL(OrgApacheHttpConnSslDefaultHostnameVerifier, initWithOrgApacheHttpConnUtilPublicSuffixMatcher_, publicSuffixMatcher)
}

OrgApacheHttpConnSslDefaultHostnameVerifier *create_OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  J2OBJC_CREATE_IMPL(OrgApacheHttpConnSslDefaultHostnameVerifier, initWithOrgApacheHttpConnUtilPublicSuffixMatcher_, publicSuffixMatcher)
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_init(OrgApacheHttpConnSslDefaultHostnameVerifier *self) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(self, nil);
}

OrgApacheHttpConnSslDefaultHostnameVerifier *new_OrgApacheHttpConnSslDefaultHostnameVerifier_init() {
  J2OBJC_NEW_IMPL(OrgApacheHttpConnSslDefaultHostnameVerifier, init)
}

OrgApacheHttpConnSslDefaultHostnameVerifier *create_OrgApacheHttpConnSslDefaultHostnameVerifier_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHttpConnSslDefaultHostnameVerifier, init)
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_verifyWithNSString_withJavaSecurityCertX509Certificate_(OrgApacheHttpConnSslDefaultHostnameVerifier *self, NSString *host, JavaSecurityCertX509Certificate *cert) {
  jboolean ipv4 = OrgApacheHttpConnUtilInetAddressUtils_isIPv4AddressWithNSString_(host);
  jboolean ipv6 = OrgApacheHttpConnUtilInetAddressUtils_isIPv6AddressWithNSString_(host);
  jint subjectType = ipv4 || ipv6 ? OrgApacheHttpConnSslDefaultHostnameVerifier_IP_ADDRESS_TYPE : OrgApacheHttpConnSslDefaultHostnameVerifier_DNS_NAME_TYPE;
  id<JavaUtilList> subjectAlts = OrgApacheHttpConnSslDefaultHostnameVerifier_extractSubjectAltsWithJavaSecurityCertX509Certificate_withInt_(cert, subjectType);
  if (subjectAlts != nil && ![subjectAlts isEmpty]) {
    if (ipv4) {
      OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPAddressWithNSString_withJavaUtilList_(host, subjectAlts);
    }
    else if (ipv6) {
      OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPv6AddressWithNSString_withJavaUtilList_(host, subjectAlts);
    }
    else {
      OrgApacheHttpConnSslDefaultHostnameVerifier_matchDNSNameWithNSString_withJavaUtilList_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, subjectAlts, self->publicSuffixMatcher_);
    }
  }
  else {
    JavaxSecurityAuthX500X500Principal *subjectPrincipal = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal];
    NSString *cn = OrgApacheHttpConnSslDefaultHostnameVerifier_extractCNWithNSString_([((JavaxSecurityAuthX500X500Principal *) nil_chk(subjectPrincipal)) getNameWithNSString:JavaxSecurityAuthX500X500Principal_RFC2253]);
    if (cn == nil) {
      @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$$", @"Certificate subject for <", host, @"> doesn't contain a common name and does not have alternative names"));
    }
    OrgApacheHttpConnSslDefaultHostnameVerifier_matchCNWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, cn, self->publicSuffixMatcher_);
  }
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPAddressWithNSString_withJavaUtilList_(NSString *host, id<JavaUtilList> subjectAlts) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(subjectAlts)) size]; i++) {
    NSString *subjectAlt = [subjectAlts getWithInt:i];
    if ([((NSString *) nil_chk(host)) isEqual:subjectAlt]) {
      return;
    }
  }
  @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$$@", @"Certificate for <", host, @"> doesn't match any of the subject alternative names: ", subjectAlts));
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_matchIPv6AddressWithNSString_withJavaUtilList_(NSString *host, id<JavaUtilList> subjectAlts) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  NSString *normalisedHost = OrgApacheHttpConnSslDefaultHostnameVerifier_normaliseAddressWithNSString_(host);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(subjectAlts)) size]; i++) {
    NSString *subjectAlt = [subjectAlts getWithInt:i];
    NSString *normalizedSubjectAlt = OrgApacheHttpConnSslDefaultHostnameVerifier_normaliseAddressWithNSString_(subjectAlt);
    if ([((NSString *) nil_chk(normalisedHost)) isEqual:normalizedSubjectAlt]) {
      return;
    }
  }
  @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$$@", @"Certificate for <", host, @"> doesn't match any of the subject alternative names: ", subjectAlts));
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_matchDNSNameWithNSString_withJavaUtilList_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, id<JavaUtilList> subjectAlts, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  NSString *normalizedHost = [((NSString *) nil_chk(host)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(subjectAlts)) size]; i++) {
    NSString *subjectAlt = [subjectAlts getWithInt:i];
    NSString *normalizedSubjectAlt = [((NSString *) nil_chk(subjectAlt)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
    if (OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(normalizedHost, normalizedSubjectAlt, publicSuffixMatcher)) {
      return;
    }
  }
  @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$$@", @"Certificate for <", host, @"> doesn't match any of the subject alternative names: ", subjectAlts));
}

void OrgApacheHttpConnSslDefaultHostnameVerifier_matchCNWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *cn, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  if (!OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(host, cn, publicSuffixMatcher)) {
    @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$$$", @"Certificate for <", host, @"> doesn't match common name of the certificate subject: ", cn));
  }
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchDomainRootWithNSString_withNSString_(NSString *host, NSString *domainRoot) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  if (domainRoot == nil) {
    return false;
  }
  return [((NSString *) nil_chk(host)) java_hasSuffix:domainRoot] && ([host java_length] == [domainRoot java_length] || [host charAtWithInt:[host java_length] - [domainRoot java_length] - 1] == '.');
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher, jboolean strict) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  if (publicSuffixMatcher != nil && [((NSString *) nil_chk(host)) java_contains:@"."]) {
    if (!OrgApacheHttpConnSslDefaultHostnameVerifier_matchDomainRootWithNSString_withNSString_(host, [publicSuffixMatcher getDomainRootWithNSString:identity])) {
      return false;
    }
  }
  jint asteriskIdx = [((NSString *) nil_chk(identity)) java_indexOf:'*'];
  if (asteriskIdx != -1) {
    NSString *prefix = [identity java_substring:0 endIndex:asteriskIdx];
    NSString *suffix = [identity java_substring:asteriskIdx + 1];
    if (![((NSString *) nil_chk(prefix)) java_isEmpty] && ![((NSString *) nil_chk(host)) java_hasPrefix:prefix]) {
      return false;
    }
    if (![((NSString *) nil_chk(suffix)) java_isEmpty] && ![((NSString *) nil_chk(host)) java_hasSuffix:suffix]) {
      return false;
    }
    if (strict) {
      NSString *remainder = [((NSString *) nil_chk(host)) java_substring:[prefix java_length] endIndex:[host java_length] - [suffix java_length]];
      if ([((NSString *) nil_chk(remainder)) java_contains:@"."]) {
        return false;
      }
    }
    return true;
  }
  return [((NSString *) nil_chk(host)) java_equalsIgnoreCase:identity];
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(host, identity, publicSuffixMatcher, false);
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_(NSString *host, NSString *identity) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(host, identity, nil, false);
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_(NSString *host, NSString *identity, OrgApacheHttpConnUtilPublicSuffixMatcher *publicSuffixMatcher) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(host, identity, publicSuffixMatcher, true);
}

jboolean OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityStrictWithNSString_withNSString_(NSString *host, NSString *identity) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  return OrgApacheHttpConnSslDefaultHostnameVerifier_matchIdentityWithNSString_withNSString_withOrgApacheHttpConnUtilPublicSuffixMatcher_withBoolean_(host, identity, nil, true);
}

NSString *OrgApacheHttpConnSslDefaultHostnameVerifier_extractCNWithNSString_(NSString *subjectPrincipal) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  if (subjectPrincipal == nil) {
    return nil;
  }
  @try {
    JavaxNamingLdapLdapName *subjectDN = create_JavaxNamingLdapLdapName_initWithNSString_(subjectPrincipal);
    id<JavaUtilList> rdns = [subjectDN getRdns];
    for (jint i = [((id<JavaUtilList>) nil_chk(rdns)) size] - 1; i >= 0; i--) {
      JavaxNamingLdapRdn *rds = [rdns getWithInt:i];
      id<JavaxNamingDirectoryAttributes> attributes = [((JavaxNamingLdapRdn *) nil_chk(rds)) toAttributes];
      id<JavaxNamingDirectoryAttribute> cn = [((id<JavaxNamingDirectoryAttributes>) nil_chk(attributes)) getWithNSString:@"cn"];
      if (cn != nil) {
        @try {
          id value = [cn get];
          if (value != nil) {
            return [value description];
          }
        }
        @catch (JavaUtilNoSuchElementException *ignore) {
        }
        @catch (JavaxNamingNamingException *ignore) {
        }
      }
    }
    return nil;
  }
  @catch (JavaxNamingInvalidNameException *e) {
    @throw create_JavaxNetSslSSLException_initWithNSString_(JreStrcat("$$", subjectPrincipal, @" is not a valid X500 distinguished name"));
  }
}

id<JavaUtilList> OrgApacheHttpConnSslDefaultHostnameVerifier_extractSubjectAltsWithJavaSecurityCertX509Certificate_withInt_(JavaSecurityCertX509Certificate *cert, jint subjectType) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  id<JavaUtilCollection> c = nil;
  @try {
    c = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectAlternativeNames];
  }
  @catch (JavaSecurityCertCertificateParsingException *ignore) {
  }
  id<JavaUtilList> subjectAltList = nil;
  if (c != nil) {
    for (id<JavaUtilList> __strong aC in c) {
      id<JavaUtilList> list = aC;
      jint type = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:0], [JavaLangInteger class])))) intValue];
      if (type == subjectType) {
        NSString *s = (NSString *) cast_chk([list getWithInt:1], [NSString class]);
        if (subjectAltList == nil) {
          subjectAltList = create_JavaUtilArrayList_init();
        }
        [subjectAltList addWithId:s];
      }
    }
  }
  return subjectAltList;
}

NSString *OrgApacheHttpConnSslDefaultHostnameVerifier_normaliseAddressWithNSString_(NSString *hostname) {
  OrgApacheHttpConnSslDefaultHostnameVerifier_initialize();
  if (hostname == nil) {
    return hostname;
  }
  @try {
    JavaNetInetAddress *inetAddress = JavaNetInetAddress_getByNameWithNSString_(hostname);
    return [((JavaNetInetAddress *) nil_chk(inetAddress)) getHostAddress];
  }
  @catch (JavaNetUnknownHostException *unexpected) {
    return hostname;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHttpConnSslDefaultHostnameVerifier)
