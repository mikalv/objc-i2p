//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/xlattice/crypto/filters/KeySelector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/xlattice/crypto/filters/KeySelector.h"

@interface OrgXlatticeCryptoFiltersKeySelector () {
 @public
  jint m_;
  jint k_;
  id<OrgXlatticeCryptoFiltersKeySelector_BitSelector> bitSel_;
  id<OrgXlatticeCryptoFiltersKeySelector_WordSelector> wordSel_;
}

@end

J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersKeySelector, bitSel_, id<OrgXlatticeCryptoFiltersKeySelector_BitSelector>)
J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersKeySelector, wordSel_, id<OrgXlatticeCryptoFiltersKeySelector_WordSelector>)

inline IOSIntArray *OrgXlatticeCryptoFiltersKeySelector_get_UNMASK(void);
static IOSIntArray *OrgXlatticeCryptoFiltersKeySelector_UNMASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgXlatticeCryptoFiltersKeySelector, UNMASK, IOSIntArray *)

inline IOSIntArray *OrgXlatticeCryptoFiltersKeySelector_get_MASK(void);
static IOSIntArray *OrgXlatticeCryptoFiltersKeySelector_MASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgXlatticeCryptoFiltersKeySelector, MASK, IOSIntArray *)

inline jint OrgXlatticeCryptoFiltersKeySelector_get_TWO_UP_15(void);
#define OrgXlatticeCryptoFiltersKeySelector_TWO_UP_15 32768
J2OBJC_STATIC_FIELD_CONSTANT(OrgXlatticeCryptoFiltersKeySelector, TWO_UP_15, jint)

@interface OrgXlatticeCryptoFiltersKeySelector_BitSelector : NSObject

@end

@interface OrgXlatticeCryptoFiltersKeySelector_WordSelector : NSObject

@end

@interface OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector () {
 @public
  OrgXlatticeCryptoFiltersKeySelector *this$0_;
}

@end

@interface OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector () {
 @public
  OrgXlatticeCryptoFiltersKeySelector *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgXlatticeCryptoFiltersKeySelector)

@implementation OrgXlatticeCryptoFiltersKeySelector

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k {
  OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(self, m, k);
  return self;
}

- (void)getOffsetsWithByteArray:(IOSByteArray *)key
                   withIntArray:(IOSIntArray *)bitOffset
                   withIntArray:(IOSIntArray *)wordOffset {
  [self getOffsetsWithByteArray:key withInt:0 withInt:((IOSByteArray *) nil_chk(key))->size_ withIntArray:bitOffset withIntArray:wordOffset];
}

- (void)getOffsetsWithByteArray:(IOSByteArray *)key
                        withInt:(jint)off
                        withInt:(jint)len
                   withIntArray:(IOSIntArray *)bitOffset
                   withIntArray:(IOSIntArray *)wordOffset {
  [((id<OrgXlatticeCryptoFiltersKeySelector_BitSelector>) nil_chk(bitSel_)) getBitSelectorsWithByteArray:key withInt:off withInt:len withIntArray:bitOffset];
  [((id<OrgXlatticeCryptoFiltersKeySelector_WordSelector>) nil_chk(wordSel_)) getWordSelectorsWithByteArray:key withInt:off withInt:len withIntArray:wordOffset];
}

- (void)dealloc {
  RELEASE_(bitSel_);
  RELEASE_(wordSel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(getOffsetsWithByteArray:withIntArray:withIntArray:);
  methods[2].selector = @selector(getOffsetsWithByteArray:withInt:withInt:withIntArray:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bitSel_", "LOrgXlatticeCryptoFiltersKeySelector_BitSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wordSel_", "LOrgXlatticeCryptoFiltersKeySelector_WordSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "UNMASK", "[I", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "MASK", "[I", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "TWO_UP_15", "I", .constantValue.asInt = OrgXlatticeCryptoFiltersKeySelector_TWO_UP_15, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "getOffsets", "[B[I[I", "[BII[I[I", &OrgXlatticeCryptoFiltersKeySelector_UNMASK, &OrgXlatticeCryptoFiltersKeySelector_MASK, "LOrgXlatticeCryptoFiltersKeySelector_BitSelector;LOrgXlatticeCryptoFiltersKeySelector_WordSelector;LOrgXlatticeCryptoFiltersKeySelector_GenericBitSelector;LOrgXlatticeCryptoFiltersKeySelector_GenericWordSelector;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersKeySelector = { "KeySelector", "org.xlattice.crypto.filters", ptrTable, methods, fields, 7, 0x1, 3, 7, -1, 6, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersKeySelector;
}

+ (void)initialize {
  if (self == [OrgXlatticeCryptoFiltersKeySelector class]) {
    JreStrongAssignAndConsume(&OrgXlatticeCryptoFiltersKeySelector_UNMASK, [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767 } count:16]);
    JreStrongAssignAndConsume(&OrgXlatticeCryptoFiltersKeySelector_MASK, [IOSIntArray newArrayWithInts:(jint[]){ ~0, ~1, ~3, ~7, ~15, ~31, ~63, ~127, ~255, ~511, ~1023, ~2047, ~4095, ~8191, ~16383, ~32767 } count:16]);
    J2OBJC_SET_INITIALIZED(OrgXlatticeCryptoFiltersKeySelector)
  }
}

@end

void OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(OrgXlatticeCryptoFiltersKeySelector *self, jint m, jint k) {
  NSObject_init(self);
  self->m_ = m;
  self->k_ = k;
  JreStrongAssignAndConsume(&self->bitSel_, new_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(self));
  JreStrongAssignAndConsume(&self->wordSel_, new_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(self));
}

OrgXlatticeCryptoFiltersKeySelector *new_OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(jint m, jint k) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersKeySelector, initWithInt_withInt_, m, k)
}

OrgXlatticeCryptoFiltersKeySelector *create_OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(jint m, jint k) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersKeySelector, initWithInt_withInt_, m, k)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersKeySelector)

@implementation OrgXlatticeCryptoFiltersKeySelector_BitSelector

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBitSelectorsWithByteArray:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getBitSelectors", "[BII[I", "LOrgXlatticeCryptoFiltersKeySelector;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersKeySelector_BitSelector = { "BitSelector", "org.xlattice.crypto.filters", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersKeySelector_BitSelector;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersKeySelector_BitSelector)

@implementation OrgXlatticeCryptoFiltersKeySelector_WordSelector

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWordSelectorsWithByteArray:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getWordSelectors", "[BII[I", "LOrgXlatticeCryptoFiltersKeySelector;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersKeySelector_WordSelector = { "WordSelector", "org.xlattice.crypto.filters", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersKeySelector_WordSelector;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersKeySelector_WordSelector)

@implementation OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector

- (instancetype)initWithOrgXlatticeCryptoFiltersKeySelector:(OrgXlatticeCryptoFiltersKeySelector *)outer$ {
  OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(self, outer$);
  return self;
}

- (void)getBitSelectorsWithByteArray:(IOSByteArray *)b
                             withInt:(jint)offset
                             withInt:(jint)length
                        withIntArray:(IOSIntArray *)bitOffset {
  jint curBit = 8 * offset;
  jint curByte;
  for (jint j = 0; j < this$0_->k_; j++) {
    curByte = curBit / 8;
    jint bitsUnused = ((curByte + 1) * 8) - curBit;
    if (bitsUnused > 5) {
      *IOSIntArray_GetRef(nil_chk(bitOffset), j) = (JreRShift32(((jint) 0xff & IOSByteArray_Get(nil_chk(b), curByte)), (bitsUnused - 5))) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), 5);
    }
    else if (bitsUnused == 5) {
      *IOSIntArray_GetRef(nil_chk(bitOffset), j) = IOSByteArray_Get(nil_chk(b), curByte) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), 5);
    }
    else {
      *IOSIntArray_GetRef(nil_chk(bitOffset), j) = (IOSByteArray_Get(nil_chk(b), curByte) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), bitsUnused)) | ((JreRShift32(((jint) 0xff & IOSByteArray_Get(b, curByte + 1)), 3)) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, MASK)), bitsUnused));
    }
    curBit += 5;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgXlatticeCryptoFiltersKeySelector:);
  methods[1].selector = @selector(getBitSelectorsWithByteArray:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgXlatticeCryptoFiltersKeySelector;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getBitSelectors", "[BII[I", "LOrgXlatticeCryptoFiltersKeySelector;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector = { "GenericBitSelector", "org.xlattice.crypto.filters", ptrTable, methods, fields, 7, 0x1, 2, 1, 2, -1, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector;
}

@end

void OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *self, OrgXlatticeCryptoFiltersKeySelector *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *new_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector, initWithOrgXlatticeCryptoFiltersKeySelector_, outer$)
}

OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *create_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector, initWithOrgXlatticeCryptoFiltersKeySelector_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector)

@implementation OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector

- (instancetype)initWithOrgXlatticeCryptoFiltersKeySelector:(OrgXlatticeCryptoFiltersKeySelector *)outer$ {
  OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(self, outer$);
  return self;
}

- (void)getWordSelectorsWithByteArray:(IOSByteArray *)b
                              withInt:(jint)offset
                              withInt:(jint)length
                         withIntArray:(IOSIntArray *)wordOffset {
  jint stride = this$0_->m_ - 5;
  jint curBit = (this$0_->k_ * 5) + (offset * 8);
  jint curByte;
  for (jint j = 0; j < this$0_->k_; j++) {
    curByte = curBit / 8;
    jint bitsUnused = ((curByte + 1) * 8) - curBit;
    if (bitsUnused > stride) {
      *IOSIntArray_GetRef(nil_chk(wordOffset), j) = (JreRShift32(((jint) 0xff & IOSByteArray_Get(nil_chk(b), curByte)), (bitsUnused - stride))) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), stride);
    }
    else if (bitsUnused == stride) {
      *IOSIntArray_GetRef(nil_chk(wordOffset), j) = IOSByteArray_Get(nil_chk(b), curByte) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), stride);
    }
    else {
      *IOSIntArray_GetRef(nil_chk(wordOffset), j) = IOSByteArray_Get(nil_chk(b), curByte) & IOSIntArray_Get(nil_chk(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK)), bitsUnused);
      jint bitsToGet = stride - bitsUnused;
      if (bitsToGet >= 8) {
        *IOSIntArray_GetRef(wordOffset, j) |= JreLShift32(((jint) 0xff & IOSByteArray_Get(b, curByte + 1)), bitsUnused);
        bitsToGet -= 8;
        if (bitsToGet > 0) {
          *IOSIntArray_GetRef(wordOffset, j) |= JreLShift32((JreRShift32(((jint) 0xff & IOSByteArray_Get(b, curByte + 2)), (8 - bitsToGet))), (stride - bitsToGet));
        }
      }
      else {
        *IOSIntArray_GetRef(wordOffset, j) |= JreLShift32(((JreRShift32(IOSByteArray_Get(b, curByte + 1), (8 - bitsToGet))) & IOSIntArray_Get(JreLoadStatic(OrgXlatticeCryptoFiltersKeySelector, UNMASK), bitsToGet)), bitsUnused);
      }
    }
    curBit += stride;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgXlatticeCryptoFiltersKeySelector:);
  methods[1].selector = @selector(getWordSelectorsWithByteArray:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgXlatticeCryptoFiltersKeySelector;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getWordSelectors", "[BII[I", "LOrgXlatticeCryptoFiltersKeySelector;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector = { "GenericWordSelector", "org.xlattice.crypto.filters", ptrTable, methods, fields, 7, 0x1, 2, 1, 2, -1, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector;
}

@end

void OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *self, OrgXlatticeCryptoFiltersKeySelector *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *new_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector, initWithOrgXlatticeCryptoFiltersKeySelector_, outer$)
}

OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *create_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector, initWithOrgXlatticeCryptoFiltersKeySelector_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector)
