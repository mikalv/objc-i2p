//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/xlattice/crypto/filters/BloomSHA1.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/xlattice/crypto/filters/BloomSHA1.h"
#include "org/xlattice/crypto/filters/KeySelector.h"

@interface OrgXlatticeCryptoFiltersBloomSHA1 () {
 @public
  jint m_;
  jint k_;
  jint count_;
  IOSIntArray *filter_;
  OrgXlatticeCryptoFiltersKeySelector *ks_;
  jint filterBits_;
  jint filterWords_;
  id<JavaUtilConcurrentBlockingQueue> buf_;
}

- (void)doClear;

- (jboolean)isMemberWithByteArray:(IOSByteArray *)b;

- (jboolean)isMemberWithByteArray:(IOSByteArray *)b
                          withInt:(jint)offset
                          withInt:(jint)len;

- (IOSIntArray *)acquire;

@end

J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersBloomSHA1, filter_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersBloomSHA1, ks_, OrgXlatticeCryptoFiltersKeySelector *)
J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersBloomSHA1, buf_, id<JavaUtilConcurrentBlockingQueue>)

__attribute__((unused)) static void OrgXlatticeCryptoFiltersBloomSHA1_doClear(OrgXlatticeCryptoFiltersBloomSHA1 *self);

__attribute__((unused)) static void OrgXlatticeCryptoFiltersBloomSHA1_locked_insertWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static jboolean OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b);

__attribute__((unused)) static jboolean OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static jboolean OrgXlatticeCryptoFiltersBloomSHA1_memberWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static IOSIntArray *OrgXlatticeCryptoFiltersBloomSHA1_acquire(OrgXlatticeCryptoFiltersBloomSHA1 *self);

__attribute__((unused)) static jdouble OrgXlatticeCryptoFiltersBloomSHA1_falsePositivesWithInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, jint n);

@interface OrgXlatticeCryptoFiltersBloomSHA1_FilterKey () {
 @public
  IOSIntArray *bitOffset_;
  IOSIntArray *wordOffset_;
}

- (instancetype)initWithIntArray:(IOSIntArray *)bitOffset
                    withIntArray:(IOSIntArray *)wordOffset;

@end

J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey, bitOffset_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey, wordOffset_, IOSIntArray *)

__attribute__((unused)) static void OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *self, IOSIntArray *bitOffset, IOSIntArray *wordOffset);

__attribute__((unused)) static OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *new_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(IOSIntArray *bitOffset, IOSIntArray *wordOffset) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *create_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(IOSIntArray *bitOffset, IOSIntArray *wordOffset);

@implementation OrgXlatticeCryptoFiltersBloomSHA1

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k {
  OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(self, m, k);
  return self;
}

- (instancetype)initWithInt:(jint)m {
  OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_(self, m);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgXlatticeCryptoFiltersBloomSHA1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doClear {
  OrgXlatticeCryptoFiltersBloomSHA1_doClear(self);
}

- (void)clear {
  @synchronized(self) {
    OrgXlatticeCryptoFiltersBloomSHA1_doClear(self);
  }
}

- (jint)size {
  @synchronized(self) {
    return count_;
  }
}

- (jint)capacity {
  return filterBits_;
}

- (void)insertWithByteArray:(IOSByteArray *)b {
  [self insertWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (void)insertWithByteArray:(IOSByteArray *)b
                    withInt:(jint)offset
                    withInt:(jint)len {
  @synchronized(self) {
    OrgXlatticeCryptoFiltersBloomSHA1_locked_insertWithByteArray_withInt_withInt_(self, b, offset, len);
  }
}

- (void)locked_insertWithByteArray:(IOSByteArray *)b {
  OrgXlatticeCryptoFiltersBloomSHA1_locked_insertWithByteArray_withInt_withInt_(self, b, 0, ((IOSByteArray *) nil_chk(b))->size_);
}

- (void)locked_insertWithByteArray:(IOSByteArray *)b
                           withInt:(jint)offset
                           withInt:(jint)len {
  OrgXlatticeCryptoFiltersBloomSHA1_locked_insertWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (jboolean)isMemberWithByteArray:(IOSByteArray *)b {
  return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_(self, b);
}

- (jboolean)isMemberWithByteArray:(IOSByteArray *)b
                          withInt:(jint)offset
                          withInt:(jint)len {
  return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (jboolean)locked_memberWithByteArray:(IOSByteArray *)b {
  return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_(self, b);
}

- (jboolean)locked_memberWithByteArray:(IOSByteArray *)b
                               withInt:(jint)offset
                               withInt:(jint)len {
  return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (jboolean)memberWithByteArray:(IOSByteArray *)b {
  return OrgXlatticeCryptoFiltersBloomSHA1_memberWithByteArray_withInt_withInt_(self, b, 0, ((IOSByteArray *) nil_chk(b))->size_);
}

- (jboolean)memberWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)len {
  return OrgXlatticeCryptoFiltersBloomSHA1_memberWithByteArray_withInt_withInt_(self, b, offset, len);
}

- (OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *)getFilterKeyWithByteArray:(IOSByteArray *)b
                                                                   withInt:(jint)offset
                                                                   withInt:(jint)len {
  IOSIntArray *bitOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  IOSIntArray *wordOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  [((OrgXlatticeCryptoFiltersKeySelector *) nil_chk(ks_)) getOffsetsWithByteArray:b withInt:offset withInt:len withIntArray:bitOffset withIntArray:wordOffset];
  return create_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(bitOffset, wordOffset);
}

- (void)locked_insertWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *)fk {
  for (jint i = 0; i < k_; i++) {
    *IOSIntArray_GetRef(nil_chk(filter_), IOSIntArray_Get(nil_chk(((OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *) nil_chk(fk))->wordOffset_), i)) |= JreLShift32(1, IOSIntArray_Get(nil_chk(fk->bitOffset_), i));
  }
  count_++;
}

- (jboolean)locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *)fk {
  for (jint i = 0; i < k_; i++) {
    if (!((IOSIntArray_Get(nil_chk(filter_), IOSIntArray_Get(nil_chk(((OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *) nil_chk(fk))->wordOffset_), i)) & (JreLShift32(1, IOSIntArray_Get(nil_chk(fk->bitOffset_), i)))) != 0)) return false;
  }
  return true;
}

- (IOSIntArray *)acquire {
  return OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
}

- (void)release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *)fk {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(buf_)) offerWithId:((OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *) nil_chk(fk))->bitOffset_];
  [buf_ offerWithId:fk->wordOffset_];
}

- (jdouble)falsePositivesWithInt:(jint)n {
  return OrgXlatticeCryptoFiltersBloomSHA1_falsePositivesWithInt_(self, n);
}

- (jdouble)falsePositives {
  return OrgXlatticeCryptoFiltersBloomSHA1_falsePositivesWithInt_(self, count_);
}

- (void)dealloc {
  RELEASE_(filter_);
  RELEASE_(ks_);
  RELEASE_(buf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 8, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 8, 4, -1, -1, -1, -1 },
    { NULL, "LOrgXlatticeCryptoFiltersBloomSHA1_FilterKey;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x11, 12, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(doClear);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(capacity);
  methods[7].selector = @selector(insertWithByteArray:);
  methods[8].selector = @selector(insertWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(locked_insertWithByteArray:);
  methods[10].selector = @selector(locked_insertWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(isMemberWithByteArray:);
  methods[12].selector = @selector(isMemberWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(locked_memberWithByteArray:);
  methods[14].selector = @selector(locked_memberWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(memberWithByteArray:);
  methods[16].selector = @selector(memberWithByteArray:withInt:withInt:);
  methods[17].selector = @selector(getFilterKeyWithByteArray:withInt:withInt:);
  methods[18].selector = @selector(locked_insertWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:);
  methods[19].selector = @selector(locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:);
  methods[20].selector = @selector(acquire);
  methods[21].selector = @selector(release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:);
  methods[22].selector = @selector(falsePositivesWithInt:);
  methods[23].selector = @selector(falsePositives);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filter_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ks_", "LOrgXlatticeCryptoFiltersKeySelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filterBits_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filterWords_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buf_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "II", "I", "insert", "[B", "[BII", "locked_insert", "isMember", "locked_member", "member", "getFilterKey", "LOrgXlatticeCryptoFiltersBloomSHA1_FilterKey;", "release", "falsePositives", "Ljava/util/concurrent/BlockingQueue<[I>;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersBloomSHA1 = { "BloomSHA1", "org.xlattice.crypto.filters", ptrTable, methods, fields, 7, 0x1, 24, 8, -1, 10, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersBloomSHA1;
}

@end

void OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, jint m, jint k) {
  NSObject_init(self);
  self->m_ = m;
  self->k_ = k;
  self->filterBits_ = JreLShift32(1, m);
  self->filterWords_ = (self->filterBits_ + 31) / 32;
  JreStrongAssignAndConsume(&self->filter_, [IOSIntArray newArrayWithLength:self->filterWords_]);
  JreStrongAssignAndConsume(&self->ks_, new_OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(m, k));
  JreStrongAssignAndConsume(&self->buf_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(16));
}

OrgXlatticeCryptoFiltersBloomSHA1 *new_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(jint m, jint k) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, initWithInt_withInt_, m, k)
}

OrgXlatticeCryptoFiltersBloomSHA1 *create_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(jint m, jint k) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, initWithInt_withInt_, m, k)
}

void OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, jint m) {
  OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(self, m, 8);
}

OrgXlatticeCryptoFiltersBloomSHA1 *new_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_(jint m) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, initWithInt_, m)
}

OrgXlatticeCryptoFiltersBloomSHA1 *create_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_(jint m) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, initWithInt_, m)
}

void OrgXlatticeCryptoFiltersBloomSHA1_init(OrgXlatticeCryptoFiltersBloomSHA1 *self) {
  OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(self, 20, 8);
}

OrgXlatticeCryptoFiltersBloomSHA1 *new_OrgXlatticeCryptoFiltersBloomSHA1_init() {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, init)
}

OrgXlatticeCryptoFiltersBloomSHA1 *create_OrgXlatticeCryptoFiltersBloomSHA1_init() {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersBloomSHA1, init)
}

void OrgXlatticeCryptoFiltersBloomSHA1_doClear(OrgXlatticeCryptoFiltersBloomSHA1 *self) {
  JavaUtilArrays_fillWithIntArray_withInt_(self->filter_, 0);
  self->count_ = 0;
}

void OrgXlatticeCryptoFiltersBloomSHA1_locked_insertWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len) {
  IOSIntArray *bitOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  IOSIntArray *wordOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  [((OrgXlatticeCryptoFiltersKeySelector *) nil_chk(self->ks_)) getOffsetsWithByteArray:b withInt:offset withInt:len withIntArray:bitOffset withIntArray:wordOffset];
  for (jint i = 0; i < self->k_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->filter_), IOSIntArray_Get(nil_chk(wordOffset), i)) |= JreLShift32(1, IOSIntArray_Get(nil_chk(bitOffset), i));
  }
  self->count_++;
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->buf_)) offerWithId:bitOffset];
  [self->buf_ offerWithId:wordOffset];
}

jboolean OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b) {
  return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(self, b, 0, ((IOSByteArray *) nil_chk(b))->size_);
}

jboolean OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len) {
  IOSIntArray *bitOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  IOSIntArray *wordOffset = OrgXlatticeCryptoFiltersBloomSHA1_acquire(self);
  [((OrgXlatticeCryptoFiltersKeySelector *) nil_chk(self->ks_)) getOffsetsWithByteArray:b withInt:offset withInt:len withIntArray:bitOffset withIntArray:wordOffset];
  for (jint i = 0; i < self->k_; i++) {
    if (!((IOSIntArray_Get(nil_chk(self->filter_), IOSIntArray_Get(nil_chk(wordOffset), i)) & (JreLShift32(1, IOSIntArray_Get(nil_chk(bitOffset), i)))) != 0)) {
      [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->buf_)) offerWithId:bitOffset];
      [self->buf_ offerWithId:wordOffset];
      return false;
    }
  }
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->buf_)) offerWithId:bitOffset];
  [self->buf_ offerWithId:wordOffset];
  return true;
}

jboolean OrgXlatticeCryptoFiltersBloomSHA1_memberWithByteArray_withInt_withInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, IOSByteArray *b, jint offset, jint len) {
  @synchronized(self) {
    return OrgXlatticeCryptoFiltersBloomSHA1_isMemberWithByteArray_withInt_withInt_(self, b, offset, len);
  }
}

IOSIntArray *OrgXlatticeCryptoFiltersBloomSHA1_acquire(OrgXlatticeCryptoFiltersBloomSHA1 *self) {
  IOSIntArray *rv = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->buf_)) poll];
  if (rv != nil) return rv;
  return [IOSIntArray arrayWithLength:self->k_];
}

jdouble OrgXlatticeCryptoFiltersBloomSHA1_falsePositivesWithInt_(OrgXlatticeCryptoFiltersBloomSHA1 *self, jint n) {
  return JavaLangMath_powWithDouble_withDouble_((1l - JavaLangMath_expWithDouble_(0.0 - ((jdouble) self->k_) * (jlong) n / self->filterBits_)), self->k_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersBloomSHA1)

@implementation OrgXlatticeCryptoFiltersBloomSHA1_FilterKey

- (instancetype)initWithIntArray:(IOSIntArray *)bitOffset
                    withIntArray:(IOSIntArray *)wordOffset {
  OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(self, bitOffset, wordOffset);
  return self;
}

- (void)dealloc {
  RELEASE_(bitOffset_);
  RELEASE_(wordOffset_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIntArray:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitOffset_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wordOffset_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[I[I", "LOrgXlatticeCryptoFiltersBloomSHA1;" };
  static const J2ObjcClassInfo _OrgXlatticeCryptoFiltersBloomSHA1_FilterKey = { "FilterKey", "org.xlattice.crypto.filters", ptrTable, methods, fields, 7, 0x9, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey;
}

@end

void OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *self, IOSIntArray *bitOffset, IOSIntArray *wordOffset) {
  NSObject_init(self);
  JreStrongAssign(&self->bitOffset_, bitOffset);
  JreStrongAssign(&self->wordOffset_, wordOffset);
}

OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *new_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(IOSIntArray *bitOffset, IOSIntArray *wordOffset) {
  J2OBJC_NEW_IMPL(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey, initWithIntArray_withIntArray_, bitOffset, wordOffset)
}

OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *create_OrgXlatticeCryptoFiltersBloomSHA1_FilterKey_initWithIntArray_withIntArray_(IOSIntArray *bitOffset, IOSIntArray *wordOffset) {
  J2OBJC_CREATE_IMPL(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey, initWithIntArray_withIntArray_, bitOffset, wordOffset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgXlatticeCryptoFiltersBloomSHA1_FilterKey)
