//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/xlattice/crypto/filters/KeySelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector")
#ifdef RESTRICT_OrgXlatticeCryptoFiltersKeySelector
#define INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector 0
#else
#define INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector 1
#endif
#undef RESTRICT_OrgXlatticeCryptoFiltersKeySelector
#ifdef INCLUDE_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector
#define INCLUDE_OrgXlatticeCryptoFiltersKeySelector_WordSelector 1
#endif
#ifdef INCLUDE_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector
#define INCLUDE_OrgXlatticeCryptoFiltersKeySelector_BitSelector 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXlatticeCryptoFiltersKeySelector_) && (INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector || defined(INCLUDE_OrgXlatticeCryptoFiltersKeySelector))
#define OrgXlatticeCryptoFiltersKeySelector_

@class IOSByteArray;
@class IOSIntArray;

@interface OrgXlatticeCryptoFiltersKeySelector : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)m
                              withInt:(jint)k;

- (void)getOffsetsWithByteArray:(IOSByteArray *)key
                        withInt:(jint)off
                        withInt:(jint)len
                   withIntArray:(IOSIntArray *)bitOffset
                   withIntArray:(IOSIntArray *)wordOffset;

- (void)getOffsetsWithByteArray:(IOSByteArray *)key
                   withIntArray:(IOSIntArray *)bitOffset
                   withIntArray:(IOSIntArray *)wordOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgXlatticeCryptoFiltersKeySelector)

FOUNDATION_EXPORT void OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(OrgXlatticeCryptoFiltersKeySelector *self, jint m, jint k);

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector *new_OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(jint m, jint k) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector *create_OrgXlatticeCryptoFiltersKeySelector_initWithInt_withInt_(jint m, jint k);

J2OBJC_TYPE_LITERAL_HEADER(OrgXlatticeCryptoFiltersKeySelector)

#endif

#if !defined (OrgXlatticeCryptoFiltersKeySelector_BitSelector_) && (INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector || defined(INCLUDE_OrgXlatticeCryptoFiltersKeySelector_BitSelector))
#define OrgXlatticeCryptoFiltersKeySelector_BitSelector_

@class IOSByteArray;
@class IOSIntArray;

@protocol OrgXlatticeCryptoFiltersKeySelector_BitSelector < JavaObject >

- (void)getBitSelectorsWithByteArray:(IOSByteArray *)b
                             withInt:(jint)offset
                             withInt:(jint)length
                        withIntArray:(IOSIntArray *)bitOffset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXlatticeCryptoFiltersKeySelector_BitSelector)

J2OBJC_TYPE_LITERAL_HEADER(OrgXlatticeCryptoFiltersKeySelector_BitSelector)

#endif

#if !defined (OrgXlatticeCryptoFiltersKeySelector_WordSelector_) && (INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector || defined(INCLUDE_OrgXlatticeCryptoFiltersKeySelector_WordSelector))
#define OrgXlatticeCryptoFiltersKeySelector_WordSelector_

@class IOSByteArray;
@class IOSIntArray;

@protocol OrgXlatticeCryptoFiltersKeySelector_WordSelector < JavaObject >

- (void)getWordSelectorsWithByteArray:(IOSByteArray *)b
                              withInt:(jint)offset
                              withInt:(jint)length
                         withIntArray:(IOSIntArray *)wordOffset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXlatticeCryptoFiltersKeySelector_WordSelector)

J2OBJC_TYPE_LITERAL_HEADER(OrgXlatticeCryptoFiltersKeySelector_WordSelector)

#endif

#if !defined (OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_) && (INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector || defined(INCLUDE_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector))
#define OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_

@class IOSByteArray;
@class IOSIntArray;
@class OrgXlatticeCryptoFiltersKeySelector;

@interface OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector : NSObject < OrgXlatticeCryptoFiltersKeySelector_BitSelector >

#pragma mark Public

- (instancetype __nonnull)initWithOrgXlatticeCryptoFiltersKeySelector:(OrgXlatticeCryptoFiltersKeySelector *)outer$;

- (void)getBitSelectorsWithByteArray:(IOSByteArray *)b
                             withInt:(jint)offset
                             withInt:(jint)length
                        withIntArray:(IOSIntArray *)bitOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector)

FOUNDATION_EXPORT void OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *self, OrgXlatticeCryptoFiltersKeySelector *outer$);

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *new_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector *create_OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgXlatticeCryptoFiltersKeySelector_GenericBitSelector)

#endif

#if !defined (OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_) && (INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector || defined(INCLUDE_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector))
#define OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_

@class IOSByteArray;
@class IOSIntArray;
@class OrgXlatticeCryptoFiltersKeySelector;

@interface OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector : NSObject < OrgXlatticeCryptoFiltersKeySelector_WordSelector >

#pragma mark Public

- (instancetype __nonnull)initWithOrgXlatticeCryptoFiltersKeySelector:(OrgXlatticeCryptoFiltersKeySelector *)outer$;

- (void)getWordSelectorsWithByteArray:(IOSByteArray *)b
                              withInt:(jint)offset
                              withInt:(jint)length
                         withIntArray:(IOSIntArray *)wordOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector)

FOUNDATION_EXPORT void OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *self, OrgXlatticeCryptoFiltersKeySelector *outer$);

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *new_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector *create_OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector_initWithOrgXlatticeCryptoFiltersKeySelector_(OrgXlatticeCryptoFiltersKeySelector *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgXlatticeCryptoFiltersKeySelector_GenericWordSelector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgXlatticeCryptoFiltersKeySelector")
