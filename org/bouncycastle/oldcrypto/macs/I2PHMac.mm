//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/org/bouncycastle/oldcrypto/macs/I2PHMac.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/security/DigestException.h"
#include "java/security/MessageDigest.h"
#include "java/util/Arrays.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "org/bouncycastle/oldcrypto/macs/I2PHMac.h"

@interface OrgBouncycastleOldcryptoMacsI2PHMac () {
 @public
  JavaSecurityMessageDigest *digest_;
  jint digestSize_;
  IOSByteArray *inputPad_;
  IOSByteArray *outputPad_;
}

+ (IOSByteArray *)acquireTmpWithInt:(jint)sz;

+ (void)releaseTmpWithByteArray:(IOSByteArray *)buf;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleOldcryptoMacsI2PHMac, digest_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(OrgBouncycastleOldcryptoMacsI2PHMac, inputPad_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleOldcryptoMacsI2PHMac, outputPad_, IOSByteArray *)

inline jint OrgBouncycastleOldcryptoMacsI2PHMac_get_BLOCK_LENGTH(void);
#define OrgBouncycastleOldcryptoMacsI2PHMac_BLOCK_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleOldcryptoMacsI2PHMac, BLOCK_LENGTH, jint)

inline jbyte OrgBouncycastleOldcryptoMacsI2PHMac_get_IPAD(void);
#define OrgBouncycastleOldcryptoMacsI2PHMac_IPAD 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleOldcryptoMacsI2PHMac, IPAD, jbyte)

inline jbyte OrgBouncycastleOldcryptoMacsI2PHMac_get_OPAD(void);
#define OrgBouncycastleOldcryptoMacsI2PHMac_OPAD 92
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleOldcryptoMacsI2PHMac, OPAD, jbyte)

__attribute__((unused)) static IOSByteArray *OrgBouncycastleOldcryptoMacsI2PHMac_acquireTmpWithInt_(jint sz);

__attribute__((unused)) static void OrgBouncycastleOldcryptoMacsI2PHMac_releaseTmpWithByteArray_(IOSByteArray *buf);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleOldcryptoMacsI2PHMac__Annotations$0(void);

@implementation OrgBouncycastleOldcryptoMacsI2PHMac

- (instancetype)initWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest {
  OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_(self, digest);
  return self;
}

- (instancetype)initWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest
                                          withInt:(jint)sz {
  OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_withInt_(self, digest, sz);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((JavaSecurityMessageDigest *) nil_chk(digest_)) getAlgorithm], @"/HMAC");
}

- (JavaSecurityMessageDigest *)getUnderlyingDigest {
  return digest_;
}

- (void)init__WithByteArray:(IOSByteArray *)key {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) reset];
  if (((IOSByteArray *) nil_chk(key))->size_ > OrgBouncycastleOldcryptoMacsI2PHMac_BLOCK_LENGTH) {
    [digest_ updateWithByteArray:key withInt:0 withInt:key->size_];
    @try {
      [digest_ digestWithByteArray:inputPad_ withInt:0 withInt:digestSize_];
    }
    @catch (JavaSecurityDigestException *de) {
      [digest_ reset];
      @throw create_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(de);
    }
    for (jint i = digestSize_; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
      *IOSByteArray_GetRef(inputPad_, i) = 0;
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, inputPad_, 0, key->size_);
    for (jint i = key->size_; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
      *IOSByteArray_GetRef(inputPad_, i) = 0;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputPad_, 0, outputPad_, 0, inputPad_->size_);
  for (jint i = 0; i < inputPad_->size_; i++) {
    *IOSByteArray_GetRef(inputPad_, i) ^= OrgBouncycastleOldcryptoMacsI2PHMac_IPAD;
  }
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(outputPad_))->size_; i++) {
    *IOSByteArray_GetRef(outputPad_, i) ^= OrgBouncycastleOldcryptoMacsI2PHMac_OPAD;
  }
  [digest_ updateWithByteArray:inputPad_ withInt:0 withInt:inputPad_->size_];
}

- (jint)getMacSize {
  return digestSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  IOSByteArray *tmp = OrgBouncycastleOldcryptoMacsI2PHMac_acquireTmpWithInt_(digestSize_);
  @try {
    [((JavaSecurityMessageDigest *) nil_chk(digest_)) digestWithByteArray:tmp withInt:0 withInt:digestSize_];
    [digest_ updateWithByteArray:outputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(outputPad_))->size_];
    [digest_ updateWithByteArray:tmp withInt:0 withInt:((IOSByteArray *) nil_chk(tmp))->size_];
    return [digest_ digestWithByteArray:outArg withInt:outOff withInt:digestSize_];
  }
  @catch (JavaSecurityDigestException *de) {
    @throw create_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(de);
  }
  @finally {
    OrgBouncycastleOldcryptoMacsI2PHMac_releaseTmpWithByteArray_(tmp);
    [self reset];
  }
}

+ (IOSByteArray *)acquireTmpWithInt:(jint)sz {
  return OrgBouncycastleOldcryptoMacsI2PHMac_acquireTmpWithInt_(sz);
}

+ (void)releaseTmpWithByteArray:(IOSByteArray *)buf {
  OrgBouncycastleOldcryptoMacsI2PHMac_releaseTmpWithByteArray_(buf);
}

- (void)reset {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) reset];
  [digest_ updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
}

- (void)dealloc {
  RELEASE_(digest_);
  RELEASE_(inputPad_);
  RELEASE_(outputPad_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityMessageDigest:);
  methods[1].selector = @selector(initWithJavaSecurityMessageDigest:withInt:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getUnderlyingDigest);
  methods[4].selector = @selector(init__WithByteArray:);
  methods[5].selector = @selector(getMacSize);
  methods[6].selector = @selector(updateWithByte:);
  methods[7].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:);
  methods[9].selector = @selector(acquireTmpWithInt:);
  methods[10].selector = @selector(releaseTmpWithByteArray:);
  methods[11].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_LENGTH", "I", .constantValue.asInt = OrgBouncycastleOldcryptoMacsI2PHMac_BLOCK_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "IPAD", "B", .constantValue.asChar = OrgBouncycastleOldcryptoMacsI2PHMac_IPAD, 0x1a, -1, -1, -1, -1 },
    { "OPAD", "B", .constantValue.asChar = OrgBouncycastleOldcryptoMacsI2PHMac_OPAD, 0x1a, -1, -1, -1, -1 },
    { "digest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digestSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "inputPad_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputPad_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityMessageDigest;", (void *)&OrgBouncycastleOldcryptoMacsI2PHMac__Annotations$0, "LJavaSecurityMessageDigest;I", "init", "[B", "update", "B", "[BII", "doFinal", "[BI", "acquireTmp", "I", "releaseTmp" };
  static const J2ObjcClassInfo _OrgBouncycastleOldcryptoMacsI2PHMac = { "I2PHMac", "org.bouncycastle.oldcrypto.macs", ptrTable, methods, fields, 7, 0x1, 12, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleOldcryptoMacsI2PHMac;
}

@end

void OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_(OrgBouncycastleOldcryptoMacsI2PHMac *self, JavaSecurityMessageDigest *digest) {
  OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_withInt_(self, digest, [((JavaSecurityMessageDigest *) nil_chk(digest)) getDigestLength]);
}

OrgBouncycastleOldcryptoMacsI2PHMac *new_OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_NEW_IMPL(OrgBouncycastleOldcryptoMacsI2PHMac, initWithJavaSecurityMessageDigest_, digest)
}

OrgBouncycastleOldcryptoMacsI2PHMac *create_OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleOldcryptoMacsI2PHMac, initWithJavaSecurityMessageDigest_, digest)
}

void OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_withInt_(OrgBouncycastleOldcryptoMacsI2PHMac *self, JavaSecurityMessageDigest *digest, jint sz) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->inputPad_, [IOSByteArray newArrayWithLength:OrgBouncycastleOldcryptoMacsI2PHMac_BLOCK_LENGTH]);
  JreStrongAssignAndConsume(&self->outputPad_, [IOSByteArray newArrayWithLength:OrgBouncycastleOldcryptoMacsI2PHMac_BLOCK_LENGTH]);
  JreStrongAssign(&self->digest_, digest);
  self->digestSize_ = sz;
}

OrgBouncycastleOldcryptoMacsI2PHMac *new_OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_withInt_(JavaSecurityMessageDigest *digest, jint sz) {
  J2OBJC_NEW_IMPL(OrgBouncycastleOldcryptoMacsI2PHMac, initWithJavaSecurityMessageDigest_withInt_, digest, sz)
}

OrgBouncycastleOldcryptoMacsI2PHMac *create_OrgBouncycastleOldcryptoMacsI2PHMac_initWithJavaSecurityMessageDigest_withInt_(JavaSecurityMessageDigest *digest, jint sz) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleOldcryptoMacsI2PHMac, initWithJavaSecurityMessageDigest_withInt_, digest, sz)
}

IOSByteArray *OrgBouncycastleOldcryptoMacsI2PHMac_acquireTmpWithInt_(jint sz) {
  OrgBouncycastleOldcryptoMacsI2PHMac_initialize();
  IOSByteArray *rv = NetI2pUtilSimpleByteCache_acquireWithInt_(sz);
  JavaUtilArrays_fillWithByteArray_withByte_(rv, (jbyte) (jint) 0x0);
  return rv;
}

void OrgBouncycastleOldcryptoMacsI2PHMac_releaseTmpWithByteArray_(IOSByteArray *buf) {
  OrgBouncycastleOldcryptoMacsI2PHMac_initialize();
  NetI2pUtilSimpleByteCache_release__WithByteArray_(buf);
}

IOSObjectArray *OrgBouncycastleOldcryptoMacsI2PHMac__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleOldcryptoMacsI2PHMac)
