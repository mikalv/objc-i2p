//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/util/TimerUtil.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "org/cybergarage/util/TimerUtil.h"

@implementation OrgCybergarageUtilTimerUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUtilTimerUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)waitWithInt:(jint)waitTime {
  OrgCybergarageUtilTimerUtil_waitWithInt_(waitTime);
}

+ (void)waitRandomWithInt:(jint)time {
  OrgCybergarageUtilTimerUtil_waitRandomWithInt_(time);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(waitWithInt:);
  methods[2].selector = @selector(waitRandomWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "wait", "I", "waitRandom" };
  static const J2ObjcClassInfo _OrgCybergarageUtilTimerUtil = { "TimerUtil", "org.cybergarage.util", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUtilTimerUtil;
}

@end

void OrgCybergarageUtilTimerUtil_init(OrgCybergarageUtilTimerUtil *self) {
  NSObject_init(self);
}

OrgCybergarageUtilTimerUtil *new_OrgCybergarageUtilTimerUtil_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUtilTimerUtil, init)
}

OrgCybergarageUtilTimerUtil *create_OrgCybergarageUtilTimerUtil_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUtilTimerUtil, init)
}

void OrgCybergarageUtilTimerUtil_waitWithInt_(jint waitTime) {
  OrgCybergarageUtilTimerUtil_initialize();
  @try {
    JavaLangThread_sleepWithLong_(waitTime);
  }
  @catch (JavaLangException *e) {
  }
}

void OrgCybergarageUtilTimerUtil_waitRandomWithInt_(jint time) {
  OrgCybergarageUtilTimerUtil_initialize();
  jint waitTime = JreFpToInt((JavaLangMath_random() * (jdouble) time));
  @try {
    JavaLangThread_sleepWithLong_(waitTime);
  }
  @catch (JavaLangException *e) {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUtilTimerUtil)
