//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/util/ThreadCore.java
//

#include "J2ObjC_source.h"
#include "java/lang/Thread.h"
#include "org/cybergarage/util/ThreadCore.h"

@interface OrgCybergarageUtilThreadCore () {
 @public
  JavaLangThread *mThreadObject_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUtilThreadCore, mThreadObject_, JavaLangThread *)

@implementation OrgCybergarageUtilThreadCore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUtilThreadCore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setThreadObjectWithJavaLangThread:(JavaLangThread *)obj {
  JreStrongAssign(&mThreadObject_, obj);
}

- (JavaLangThread *)getThreadObject {
  return mThreadObject_;
}

- (void)start {
  JavaLangThread *threadObject = [self getThreadObject];
  if (threadObject == nil) {
    threadObject = create_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, @"Cyber.ThreadCore");
    [self setThreadObjectWithJavaLangThread:threadObject];
    [threadObject start];
  }
}

- (void)run {
}

- (jboolean)isRunnable {
  return (JavaLangThread_currentThread() == [self getThreadObject]) ? true : false;
}

- (void)stop {
  JavaLangThread *threadObject = [self getThreadObject];
  if (threadObject != nil) {
    [threadObject interrupt];
    [self setThreadObjectWithJavaLangThread:nil];
    [threadObject interrupt];
  }
}

- (void)restart {
  [self stop];
  [self start];
}

- (void)dealloc {
  RELEASE_(mThreadObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setThreadObjectWithJavaLangThread:);
  methods[2].selector = @selector(getThreadObject);
  methods[3].selector = @selector(start);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(isRunnable);
  methods[6].selector = @selector(stop);
  methods[7].selector = @selector(restart);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mThreadObject_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setThreadObject", "LJavaLangThread;" };
  static const J2ObjcClassInfo _OrgCybergarageUtilThreadCore = { "ThreadCore", "org.cybergarage.util", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUtilThreadCore;
}

@end

void OrgCybergarageUtilThreadCore_init(OrgCybergarageUtilThreadCore *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mThreadObject_, nil);
}

OrgCybergarageUtilThreadCore *new_OrgCybergarageUtilThreadCore_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUtilThreadCore, init)
}

OrgCybergarageUtilThreadCore *create_OrgCybergarageUtilThreadCore_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUtilThreadCore, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUtilThreadCore)
