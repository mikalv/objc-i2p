//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTP.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "org/cybergarage/http/HTTP.h"

inline jint OrgCybergarageHttpHTTP_get_chunkSize(void);
inline jint OrgCybergarageHttpHTTP_set_chunkSize(jint value);
inline jint *OrgCybergarageHttpHTTP_getRef_chunkSize(void);
static jint OrgCybergarageHttpHTTP_chunkSize = 524288;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgCybergarageHttpHTTP, chunkSize, jint)

NSString *OrgCybergarageHttpHTTP_HOST = @"HOST";
NSString *OrgCybergarageHttpHTTP_VERSION = @"1.1";
NSString *OrgCybergarageHttpHTTP_VERSION_10 = @"1.0";
NSString *OrgCybergarageHttpHTTP_VERSION_11 = @"1.1";
NSString *OrgCybergarageHttpHTTP_CRLF = @"\x0d\n";
NSString *OrgCybergarageHttpHTTP_TAB = @"\t";
NSString *OrgCybergarageHttpHTTP_SOAP_ACTION = @"SOAPACTION";
NSString *OrgCybergarageHttpHTTP_M_SEARCH = @"M-SEARCH";
NSString *OrgCybergarageHttpHTTP_NOTIFY = @"NOTIFY";
NSString *OrgCybergarageHttpHTTP_POST = @"POST";
NSString *OrgCybergarageHttpHTTP_GET = @"GET";
NSString *OrgCybergarageHttpHTTP_HEAD = @"HEAD";
NSString *OrgCybergarageHttpHTTP_SUBSCRIBE = @"SUBSCRIBE";
NSString *OrgCybergarageHttpHTTP_UNSUBSCRIBE = @"UNSUBSCRIBE";
NSString *OrgCybergarageHttpHTTP_DATE = @"Date";
NSString *OrgCybergarageHttpHTTP_CACHE_CONTROL = @"Cache-Control";
NSString *OrgCybergarageHttpHTTP_NO_CACHE = @"no-cache";
NSString *OrgCybergarageHttpHTTP_MAX_AGE = @"max-age";
NSString *OrgCybergarageHttpHTTP_CONNECTION = @"Connection";
NSString *OrgCybergarageHttpHTTP_CLOSE = @"close";
NSString *OrgCybergarageHttpHTTP_KEEP_ALIVE = @"Keep-Alive";
NSString *OrgCybergarageHttpHTTP_CONTENT_TYPE = @"Content-Type";
NSString *OrgCybergarageHttpHTTP_CHARSET = @"charset";
NSString *OrgCybergarageHttpHTTP_CONTENT_LENGTH = @"Content-Length";
NSString *OrgCybergarageHttpHTTP_CONTENT_LANGUAGE = @"Content-Language";
NSString *OrgCybergarageHttpHTTP_CONTENT_RANGE = @"Content-Range";
NSString *OrgCybergarageHttpHTTP_CONTENT_RANGE_BYTES = @"bytes";
NSString *OrgCybergarageHttpHTTP_RANGE = @"Range";
NSString *OrgCybergarageHttpHTTP_TRANSFER_ENCODING = @"Transfer-Encoding";
NSString *OrgCybergarageHttpHTTP_CHUNKED = @"Chunked";
NSString *OrgCybergarageHttpHTTP_LOCATION = @"Location";
NSString *OrgCybergarageHttpHTTP_SERVER = @"Server";
NSString *OrgCybergarageHttpHTTP_ST = @"ST";
NSString *OrgCybergarageHttpHTTP_MX = @"MX";
NSString *OrgCybergarageHttpHTTP_MAN = @"MAN";
NSString *OrgCybergarageHttpHTTP_NT = @"NT";
NSString *OrgCybergarageHttpHTTP_NTS = @"NTS";
NSString *OrgCybergarageHttpHTTP_USN = @"USN";
NSString *OrgCybergarageHttpHTTP_EXT = @"EXT";
NSString *OrgCybergarageHttpHTTP_SID = @"SID";
NSString *OrgCybergarageHttpHTTP_SEQ = @"SEQ";
NSString *OrgCybergarageHttpHTTP_CALLBACK = @"CALLBACK";
NSString *OrgCybergarageHttpHTTP_TIMEOUT = @"TIMEOUT";
NSString *OrgCybergarageHttpHTTP_BOOTID_UPNP_ORG = @"BOOTID.UPNP.ORG";
NSString *OrgCybergarageHttpHTTP_MYNAME = @"MYNAME";
NSString *OrgCybergarageHttpHTTP_REQEST_LINE_DELIM = @" ";
NSString *OrgCybergarageHttpHTTP_HEADER_LINE_DELIM = @" :";
NSString *OrgCybergarageHttpHTTP_STATUS_LINE_DELIM = @" ";

@implementation OrgCybergarageHttpHTTP

+ (NSString *)HOST {
  return OrgCybergarageHttpHTTP_HOST;
}

+ (NSString *)VERSION {
  return OrgCybergarageHttpHTTP_VERSION;
}

+ (NSString *)VERSION_10 {
  return OrgCybergarageHttpHTTP_VERSION_10;
}

+ (NSString *)VERSION_11 {
  return OrgCybergarageHttpHTTP_VERSION_11;
}

+ (NSString *)CRLF {
  return OrgCybergarageHttpHTTP_CRLF;
}

+ (jbyte)CR {
  return OrgCybergarageHttpHTTP_CR;
}

+ (jbyte)LF {
  return OrgCybergarageHttpHTTP_LF;
}

+ (NSString *)TAB {
  return OrgCybergarageHttpHTTP_TAB;
}

+ (NSString *)SOAP_ACTION {
  return OrgCybergarageHttpHTTP_SOAP_ACTION;
}

+ (NSString *)M_SEARCH {
  return OrgCybergarageHttpHTTP_M_SEARCH;
}

+ (NSString *)NOTIFY {
  return OrgCybergarageHttpHTTP_NOTIFY;
}

+ (NSString *)POST {
  return OrgCybergarageHttpHTTP_POST;
}

+ (NSString *)GET {
  return OrgCybergarageHttpHTTP_GET;
}

+ (NSString *)HEAD {
  return OrgCybergarageHttpHTTP_HEAD;
}

+ (NSString *)SUBSCRIBE {
  return OrgCybergarageHttpHTTP_SUBSCRIBE;
}

+ (NSString *)UNSUBSCRIBE {
  return OrgCybergarageHttpHTTP_UNSUBSCRIBE;
}

+ (NSString *)DATE {
  return OrgCybergarageHttpHTTP_DATE;
}

+ (NSString *)CACHE_CONTROL {
  return OrgCybergarageHttpHTTP_CACHE_CONTROL;
}

+ (NSString *)NO_CACHE {
  return OrgCybergarageHttpHTTP_NO_CACHE;
}

+ (NSString *)MAX_AGE {
  return OrgCybergarageHttpHTTP_MAX_AGE;
}

+ (NSString *)CONNECTION {
  return OrgCybergarageHttpHTTP_CONNECTION;
}

+ (NSString *)CLOSE {
  return OrgCybergarageHttpHTTP_CLOSE;
}

+ (NSString *)KEEP_ALIVE {
  return OrgCybergarageHttpHTTP_KEEP_ALIVE;
}

+ (NSString *)CONTENT_TYPE {
  return OrgCybergarageHttpHTTP_CONTENT_TYPE;
}

+ (NSString *)CHARSET {
  return OrgCybergarageHttpHTTP_CHARSET;
}

+ (NSString *)CONTENT_LENGTH {
  return OrgCybergarageHttpHTTP_CONTENT_LENGTH;
}

+ (NSString *)CONTENT_LANGUAGE {
  return OrgCybergarageHttpHTTP_CONTENT_LANGUAGE;
}

+ (NSString *)CONTENT_RANGE {
  return OrgCybergarageHttpHTTP_CONTENT_RANGE;
}

+ (NSString *)CONTENT_RANGE_BYTES {
  return OrgCybergarageHttpHTTP_CONTENT_RANGE_BYTES;
}

+ (NSString *)RANGE {
  return OrgCybergarageHttpHTTP_RANGE;
}

+ (NSString *)TRANSFER_ENCODING {
  return OrgCybergarageHttpHTTP_TRANSFER_ENCODING;
}

+ (NSString *)CHUNKED {
  return OrgCybergarageHttpHTTP_CHUNKED;
}

+ (NSString *)LOCATION {
  return OrgCybergarageHttpHTTP_LOCATION;
}

+ (NSString *)SERVER {
  return OrgCybergarageHttpHTTP_SERVER;
}

+ (NSString *)ST {
  return OrgCybergarageHttpHTTP_ST;
}

+ (NSString *)MX {
  return OrgCybergarageHttpHTTP_MX;
}

+ (NSString *)MAN {
  return OrgCybergarageHttpHTTP_MAN;
}

+ (NSString *)NT {
  return OrgCybergarageHttpHTTP_NT;
}

+ (NSString *)NTS {
  return OrgCybergarageHttpHTTP_NTS;
}

+ (NSString *)USN {
  return OrgCybergarageHttpHTTP_USN;
}

+ (NSString *)EXT {
  return OrgCybergarageHttpHTTP_EXT;
}

+ (NSString *)SID {
  return OrgCybergarageHttpHTTP_SID;
}

+ (NSString *)SEQ {
  return OrgCybergarageHttpHTTP_SEQ;
}

+ (NSString *)CALLBACK {
  return OrgCybergarageHttpHTTP_CALLBACK;
}

+ (NSString *)TIMEOUT {
  return OrgCybergarageHttpHTTP_TIMEOUT;
}

+ (NSString *)BOOTID_UPNP_ORG {
  return OrgCybergarageHttpHTTP_BOOTID_UPNP_ORG;
}

+ (NSString *)MYNAME {
  return OrgCybergarageHttpHTTP_MYNAME;
}

+ (NSString *)REQEST_LINE_DELIM {
  return OrgCybergarageHttpHTTP_REQEST_LINE_DELIM;
}

+ (NSString *)HEADER_LINE_DELIM {
  return OrgCybergarageHttpHTTP_HEADER_LINE_DELIM;
}

+ (NSString *)STATUS_LINE_DELIM {
  return OrgCybergarageHttpHTTP_STATUS_LINE_DELIM;
}

+ (jint)DEFAULT_PORT {
  return OrgCybergarageHttpHTTP_DEFAULT_PORT;
}

+ (jint)DEFAULT_CHUNK_SIZE {
  return OrgCybergarageHttpHTTP_DEFAULT_CHUNK_SIZE;
}

+ (jint)DEFAULT_TIMEOUT {
  return OrgCybergarageHttpHTTP_DEFAULT_TIMEOUT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageHttpHTTP_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isAbsoluteURLWithNSString:(NSString *)urlStr {
  return OrgCybergarageHttpHTTP_isAbsoluteURLWithNSString_(urlStr);
}

+ (NSString *)getHostWithNSString:(NSString *)urlStr {
  return OrgCybergarageHttpHTTP_getHostWithNSString_(urlStr);
}

+ (jint)getPortWithNSString:(NSString *)urlStr {
  return OrgCybergarageHttpHTTP_getPortWithNSString_(urlStr);
}

+ (NSString *)getRequestHostURLWithNSString:(NSString *)host
                                    withInt:(jint)port {
  return OrgCybergarageHttpHTTP_getRequestHostURLWithNSString_withInt_(host, port);
}

+ (NSString *)toRelativeURLWithNSString:(NSString *)urlStr
                            withBoolean:(jboolean)withParam {
  return OrgCybergarageHttpHTTP_toRelativeURLWithNSString_withBoolean_(urlStr, withParam);
}

+ (NSString *)toRelativeURLWithNSString:(NSString *)urlStr {
  return OrgCybergarageHttpHTTP_toRelativeURLWithNSString_(urlStr);
}

+ (NSString *)getAbsoluteURLWithNSString:(NSString *)baseURLStr
                            withNSString:(NSString *)relURlStr {
  return OrgCybergarageHttpHTTP_getAbsoluteURLWithNSString_withNSString_(baseURLStr, relURlStr);
}

+ (void)setChunkSizeWithInt:(jint)size {
  OrgCybergarageHttpHTTP_setChunkSizeWithInt_(size);
}

+ (jint)getChunkSize {
  return OrgCybergarageHttpHTTP_getChunkSize();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x19, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isAbsoluteURLWithNSString:);
  methods[2].selector = @selector(getHostWithNSString:);
  methods[3].selector = @selector(getPortWithNSString:);
  methods[4].selector = @selector(getRequestHostURLWithNSString:withInt:);
  methods[5].selector = @selector(toRelativeURLWithNSString:withBoolean:);
  methods[6].selector = @selector(toRelativeURLWithNSString:);
  methods[7].selector = @selector(getAbsoluteURLWithNSString:withNSString:);
  methods[8].selector = @selector(setChunkSizeWithInt:);
  methods[9].selector = @selector(getChunkSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "VERSION_10", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "VERSION_11", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CRLF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "CR", "B", .constantValue.asChar = OrgCybergarageHttpHTTP_CR, 0x19, -1, -1, -1, -1 },
    { "LF", "B", .constantValue.asChar = OrgCybergarageHttpHTTP_LF, 0x19, -1, -1, -1, -1 },
    { "TAB", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "SOAP_ACTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "M_SEARCH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "NOTIFY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "POST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "GET", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "HEAD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "SUBSCRIBE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "UNSUBSCRIBE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "DATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "CACHE_CONTROL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "NO_CACHE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "MAX_AGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "CONNECTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "CLOSE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "KEEP_ALIVE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "CONTENT_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "CHARSET", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "CONTENT_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "CONTENT_LANGUAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "CONTENT_RANGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "CONTENT_RANGE_BYTES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "RANGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "TRANSFER_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "CHUNKED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "LOCATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "SERVER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "ST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "MX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "MAN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "NT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "NTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "USN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "EXT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "SID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "SEQ", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "CALLBACK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "TIMEOUT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "BOOTID_UPNP_ORG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "MYNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "REQEST_LINE_DELIM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "HEADER_LINE_DELIM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "STATUS_LINE_DELIM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "DEFAULT_PORT", "I", .constantValue.asInt = OrgCybergarageHttpHTTP_DEFAULT_PORT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_CHUNK_SIZE", "I", .constantValue.asInt = OrgCybergarageHttpHTTP_DEFAULT_CHUNK_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_TIMEOUT", "I", .constantValue.asInt = OrgCybergarageHttpHTTP_DEFAULT_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "chunkSize", "I", .constantValue.asLong = 0, 0xa, -1, 60, -1, -1 },
  };
  static const void *ptrTable[] = { "isAbsoluteURL", "LNSString;", "getHost", "getPort", "getRequestHostURL", "LNSString;I", "toRelativeURL", "LNSString;Z", "getAbsoluteURL", "LNSString;LNSString;", "setChunkSize", "I", &OrgCybergarageHttpHTTP_HOST, &OrgCybergarageHttpHTTP_VERSION, &OrgCybergarageHttpHTTP_VERSION_10, &OrgCybergarageHttpHTTP_VERSION_11, &OrgCybergarageHttpHTTP_CRLF, &OrgCybergarageHttpHTTP_TAB, &OrgCybergarageHttpHTTP_SOAP_ACTION, &OrgCybergarageHttpHTTP_M_SEARCH, &OrgCybergarageHttpHTTP_NOTIFY, &OrgCybergarageHttpHTTP_POST, &OrgCybergarageHttpHTTP_GET, &OrgCybergarageHttpHTTP_HEAD, &OrgCybergarageHttpHTTP_SUBSCRIBE, &OrgCybergarageHttpHTTP_UNSUBSCRIBE, &OrgCybergarageHttpHTTP_DATE, &OrgCybergarageHttpHTTP_CACHE_CONTROL, &OrgCybergarageHttpHTTP_NO_CACHE, &OrgCybergarageHttpHTTP_MAX_AGE, &OrgCybergarageHttpHTTP_CONNECTION, &OrgCybergarageHttpHTTP_CLOSE, &OrgCybergarageHttpHTTP_KEEP_ALIVE, &OrgCybergarageHttpHTTP_CONTENT_TYPE, &OrgCybergarageHttpHTTP_CHARSET, &OrgCybergarageHttpHTTP_CONTENT_LENGTH, &OrgCybergarageHttpHTTP_CONTENT_LANGUAGE, &OrgCybergarageHttpHTTP_CONTENT_RANGE, &OrgCybergarageHttpHTTP_CONTENT_RANGE_BYTES, &OrgCybergarageHttpHTTP_RANGE, &OrgCybergarageHttpHTTP_TRANSFER_ENCODING, &OrgCybergarageHttpHTTP_CHUNKED, &OrgCybergarageHttpHTTP_LOCATION, &OrgCybergarageHttpHTTP_SERVER, &OrgCybergarageHttpHTTP_ST, &OrgCybergarageHttpHTTP_MX, &OrgCybergarageHttpHTTP_MAN, &OrgCybergarageHttpHTTP_NT, &OrgCybergarageHttpHTTP_NTS, &OrgCybergarageHttpHTTP_USN, &OrgCybergarageHttpHTTP_EXT, &OrgCybergarageHttpHTTP_SID, &OrgCybergarageHttpHTTP_SEQ, &OrgCybergarageHttpHTTP_CALLBACK, &OrgCybergarageHttpHTTP_TIMEOUT, &OrgCybergarageHttpHTTP_BOOTID_UPNP_ORG, &OrgCybergarageHttpHTTP_MYNAME, &OrgCybergarageHttpHTTP_REQEST_LINE_DELIM, &OrgCybergarageHttpHTTP_HEADER_LINE_DELIM, &OrgCybergarageHttpHTTP_STATUS_LINE_DELIM, &OrgCybergarageHttpHTTP_chunkSize };
  static const J2ObjcClassInfo _OrgCybergarageHttpHTTP = { "HTTP", "org.cybergarage.http", ptrTable, methods, fields, 7, 0x1, 10, 54, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageHttpHTTP;
}

@end

void OrgCybergarageHttpHTTP_init(OrgCybergarageHttpHTTP *self) {
  NSObject_init(self);
}

OrgCybergarageHttpHTTP *new_OrgCybergarageHttpHTTP_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpHTTP, init)
}

OrgCybergarageHttpHTTP *create_OrgCybergarageHttpHTTP_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpHTTP, init)
}

jboolean OrgCybergarageHttpHTTP_isAbsoluteURLWithNSString_(NSString *urlStr) {
  OrgCybergarageHttpHTTP_initialize();
  @try {
    create_JavaNetURL_initWithNSString_(urlStr);
    return true;
  }
  @catch (JavaLangException *e) {
    return false;
  }
}

NSString *OrgCybergarageHttpHTTP_getHostWithNSString_(NSString *urlStr) {
  OrgCybergarageHttpHTTP_initialize();
  @try {
    JavaNetURL *url = create_JavaNetURL_initWithNSString_(urlStr);
    return [url getHost];
  }
  @catch (JavaLangException *e) {
    return @"";
  }
}

jint OrgCybergarageHttpHTTP_getPortWithNSString_(NSString *urlStr) {
  OrgCybergarageHttpHTTP_initialize();
  @try {
    JavaNetURL *url = create_JavaNetURL_initWithNSString_(urlStr);
    jint port = [url getPort];
    if (port <= 0) port = OrgCybergarageHttpHTTP_DEFAULT_PORT;
    return port;
  }
  @catch (JavaLangException *e) {
    return OrgCybergarageHttpHTTP_DEFAULT_PORT;
  }
}

NSString *OrgCybergarageHttpHTTP_getRequestHostURLWithNSString_withInt_(NSString *host, jint port) {
  OrgCybergarageHttpHTTP_initialize();
  NSString *reqHost = JreStrcat("$$CI", @"http://", host, ':', port);
  return reqHost;
}

NSString *OrgCybergarageHttpHTTP_toRelativeURLWithNSString_withBoolean_(NSString *urlStr, jboolean withParam) {
  OrgCybergarageHttpHTTP_initialize();
  NSString *uri = urlStr;
  if (OrgCybergarageHttpHTTP_isAbsoluteURLWithNSString_(urlStr) == false) {
    if (0 < [((NSString *) nil_chk(urlStr)) java_length] && [urlStr charAtWithInt:0] != '/') uri = JreStrcat("C$", '/', urlStr);
  }
  else {
    @try {
      JavaNetURL *url = create_JavaNetURL_initWithNSString_(urlStr);
      uri = [url getPath];
      if (withParam == true) {
        NSString *queryStr = [url getQuery];
        if (![((NSString *) nil_chk(queryStr)) isEqual:@""]) {
          JreStrAppend(&uri, "C$", '?', queryStr);
        }
      }
      if ([((NSString *) nil_chk(uri)) java_hasSuffix:@"/"]) uri = [uri java_substring:0 endIndex:[uri java_length] - 1];
    }
    @catch (JavaLangException *e) {
    }
  }
  return uri;
}

NSString *OrgCybergarageHttpHTTP_toRelativeURLWithNSString_(NSString *urlStr) {
  OrgCybergarageHttpHTTP_initialize();
  return OrgCybergarageHttpHTTP_toRelativeURLWithNSString_withBoolean_(urlStr, true);
}

NSString *OrgCybergarageHttpHTTP_getAbsoluteURLWithNSString_withNSString_(NSString *baseURLStr, NSString *relURlStr) {
  OrgCybergarageHttpHTTP_initialize();
  @try {
    JavaNetURL *baseURL = create_JavaNetURL_initWithNSString_(baseURLStr);
    NSString *url = JreStrcat("$$$CI$", [baseURL getProtocol], @"://", [baseURL getHost], ':', [baseURL getPort], OrgCybergarageHttpHTTP_toRelativeURLWithNSString_(relURlStr));
    return url;
  }
  @catch (JavaLangException *e) {
    return @"";
  }
}

void OrgCybergarageHttpHTTP_setChunkSizeWithInt_(jint size) {
  OrgCybergarageHttpHTTP_initialize();
  OrgCybergarageHttpHTTP_chunkSize = size;
}

jint OrgCybergarageHttpHTTP_getChunkSize() {
  OrgCybergarageHttpHTTP_initialize();
  return OrgCybergarageHttpHTTP_chunkSize;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageHttpHTTP)
