//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTPServerThread.java
//

#include "J2ObjC_source.h"
#include "java/lang/Thread.h"
#include "java/net/Socket.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/http/HTTPServer.h"
#include "org/cybergarage/http/HTTPServerThread.h"
#include "org/cybergarage/http/HTTPSocket.h"

@interface OrgCybergarageHttpHTTPServerThread () {
 @public
  OrgCybergarageHttpHTTPServer *httpServer_;
  JavaNetSocket *sock_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServerThread, httpServer_, OrgCybergarageHttpHTTPServer *)
J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServerThread, sock_, JavaNetSocket *)

@implementation OrgCybergarageHttpHTTPServerThread

- (instancetype)initWithOrgCybergarageHttpHTTPServer:(OrgCybergarageHttpHTTPServer *)httpServer
                                   withJavaNetSocket:(JavaNetSocket *)sock {
  OrgCybergarageHttpHTTPServerThread_initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_(self, httpServer, sock);
  return self;
}

- (void)run {
  OrgCybergarageHttpHTTPSocket *httpSock = create_OrgCybergarageHttpHTTPSocket_initWithJavaNetSocket_(sock_);
  if ([httpSock open] == false) return;
  OrgCybergarageHttpHTTPRequest *httpReq = create_OrgCybergarageHttpHTTPRequest_init();
  [httpReq setSocketWithOrgCybergarageHttpHTTPSocket:httpSock];
  while ([httpReq read] == true) {
    [((OrgCybergarageHttpHTTPServer *) nil_chk(httpServer_)) performRequestListenerWithOrgCybergarageHttpHTTPRequest:httpReq];
    if ([httpReq isKeepAlive] == false) break;
  }
  [httpSock close];
}

- (void)dealloc {
  RELEASE_(httpServer_);
  RELEASE_(sock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgCybergarageHttpHTTPServer:withJavaNetSocket:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "httpServer_", "LOrgCybergarageHttpHTTPServer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sock_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgCybergarageHttpHTTPServer;LJavaNetSocket;" };
  static const J2ObjcClassInfo _OrgCybergarageHttpHTTPServerThread = { "HTTPServerThread", "org.cybergarage.http", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageHttpHTTPServerThread;
}

@end

void OrgCybergarageHttpHTTPServerThread_initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_(OrgCybergarageHttpHTTPServerThread *self, OrgCybergarageHttpHTTPServer *httpServer, JavaNetSocket *sock) {
  JavaLangThread_initWithNSString_(self, @"Cyber.HTTPServerThread");
  JreStrongAssign(&self->httpServer_, httpServer);
  JreStrongAssign(&self->sock_, sock);
}

OrgCybergarageHttpHTTPServerThread *new_OrgCybergarageHttpHTTPServerThread_initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_(OrgCybergarageHttpHTTPServer *httpServer, JavaNetSocket *sock) {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpHTTPServerThread, initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_, httpServer, sock)
}

OrgCybergarageHttpHTTPServerThread *create_OrgCybergarageHttpHTTPServerThread_initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_(OrgCybergarageHttpHTTPServer *httpServer, JavaNetSocket *sock) {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpHTTPServerThread, initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_, httpServer, sock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageHttpHTTPServerThread)
