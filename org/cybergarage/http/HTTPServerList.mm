//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTPServerList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/net/InetAddress.h"
#include "java/util/Vector.h"
#include "org/cybergarage/http/HTTPRequestListener.h"
#include "org/cybergarage/http/HTTPServer.h"
#include "org/cybergarage/http/HTTPServerList.h"
#include "org/cybergarage/net/HostInterface.h"
#include "org/cybergarage/upnp/Device.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgCybergarageHttpHTTPServerList () {
 @public
  IOSObjectArray *binds_;
  jint port_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServerList, binds_, IOSObjectArray *)

@implementation OrgCybergarageHttpHTTPServerList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageHttpHTTPServerList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaNetInetAddressArray:(IOSObjectArray *)list
                                        withInt:(jint)port {
  OrgCybergarageHttpHTTPServerList_initWithJavaNetInetAddressArray_withInt_(self, list, port);
  return self;
}

- (void)addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:(id<OrgCybergarageHttpHTTPRequestListener>)listener {
  jint nServers = [self size];
  for (jint n = 0; n < nServers; n++) {
    OrgCybergarageHttpHTTPServer *server = [self getHTTPServerWithInt:n];
    [((OrgCybergarageHttpHTTPServer *) nil_chk(server)) addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:listener];
  }
}

- (OrgCybergarageHttpHTTPServer *)getHTTPServerWithInt:(jint)n {
  return [self getWithInt:n];
}

- (void)close {
  jint nServers = [self size];
  for (jint n = 0; n < nServers; n++) {
    OrgCybergarageHttpHTTPServer *server = [self getHTTPServerWithInt:n];
    [((OrgCybergarageHttpHTTPServer *) nil_chk(server)) close];
  }
}

- (jint)open {
  IOSObjectArray *binds = self->binds_;
  IOSObjectArray *bindAddresses;
  if (binds != nil) {
    bindAddresses = [IOSObjectArray arrayWithLength:binds->size_ type:NSString_class_()];
    for (jint i = 0; i < binds->size_; i++) {
      IOSObjectArray_Set(bindAddresses, i, [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(binds, i))) getHostAddress]);
    }
  }
  else {
    jint nHostAddrs = OrgCybergarageNetHostInterface_getNHostAddresses();
    bindAddresses = [IOSObjectArray arrayWithLength:nHostAddrs type:NSString_class_()];
    for (jint n = 0; n < nHostAddrs; n++) {
      IOSObjectArray_Set(bindAddresses, n, OrgCybergarageNetHostInterface_getHostAddressWithInt_(n));
    }
  }
  jint j = 0;
  for (jint i = 0; i < bindAddresses->size_; i++) {
    OrgCybergarageHttpHTTPServer *httpServer = create_OrgCybergarageHttpHTTPServer_init();
    if ((IOSObjectArray_Get(bindAddresses, i) == nil) || ([httpServer openWithNSString:IOSObjectArray_Get(bindAddresses, i) withInt:port_] == false)) {
      [self close];
      [self clear];
    }
    else {
      [self addWithId:httpServer];
      j++;
    }
  }
  return j;
}

- (jboolean)openWithInt:(jint)port {
  self->port_ = port;
  return [self open] != 0;
}

- (void)start {
  jint nServers = [self size];
  for (jint n = 0; n < nServers; n++) {
    OrgCybergarageHttpHTTPServer *server = [self getHTTPServerWithInt:n];
    [((OrgCybergarageHttpHTTPServer *) nil_chk(server)) start];
  }
}

- (void)stop {
  jint nServers = [self size];
  for (jint n = 0; n < nServers; n++) {
    OrgCybergarageHttpHTTPServer *server = [self getHTTPServerWithInt:n];
    [((OrgCybergarageHttpHTTPServer *) nil_chk(server)) stop];
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(binds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageHttpHTTPServer;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaNetInetAddressArray:withInt:);
  methods[2].selector = @selector(addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:);
  methods[3].selector = @selector(getHTTPServerWithInt:);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(open);
  methods[6].selector = @selector(openWithInt:);
  methods[7].selector = @selector(start);
  methods[8].selector = @selector(stop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "binds_", "[LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaNetInetAddress;I", "addRequestListener", "LOrgCybergarageHttpHTTPRequestListener;", "getHTTPServer", "I", "open", "Ljava/util/Vector<Lorg/cybergarage/http/HTTPServer;>;" };
  static const J2ObjcClassInfo _OrgCybergarageHttpHTTPServerList = { "HTTPServerList", "org.cybergarage.http", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, 6, -1 };
  return &_OrgCybergarageHttpHTTPServerList;
}

@end

void OrgCybergarageHttpHTTPServerList_init(OrgCybergarageHttpHTTPServerList *self) {
  JavaUtilVector_init(self);
  JreStrongAssign(&self->binds_, nil);
  self->port_ = OrgCybergarageUpnpDevice_HTTP_DEFAULT_PORT;
}

OrgCybergarageHttpHTTPServerList *new_OrgCybergarageHttpHTTPServerList_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpHTTPServerList, init)
}

OrgCybergarageHttpHTTPServerList *create_OrgCybergarageHttpHTTPServerList_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpHTTPServerList, init)
}

void OrgCybergarageHttpHTTPServerList_initWithJavaNetInetAddressArray_withInt_(OrgCybergarageHttpHTTPServerList *self, IOSObjectArray *list, jint port) {
  JavaUtilVector_init(self);
  JreStrongAssign(&self->binds_, nil);
  self->port_ = OrgCybergarageUpnpDevice_HTTP_DEFAULT_PORT;
  JreStrongAssign(&self->binds_, list);
  self->port_ = port;
}

OrgCybergarageHttpHTTPServerList *new_OrgCybergarageHttpHTTPServerList_initWithJavaNetInetAddressArray_withInt_(IOSObjectArray *list, jint port) {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpHTTPServerList, initWithJavaNetInetAddressArray_withInt_, list, port)
}

OrgCybergarageHttpHTTPServerList *create_OrgCybergarageHttpHTTPServerList_initWithJavaNetInetAddressArray_withInt_(IOSObjectArray *list, jint port) {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpHTTPServerList, initWithJavaNetInetAddressArray_withInt_, list, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageHttpHTTPServerList)
