//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTPServer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgCybergarageHttpHTTPServer")
#ifdef RESTRICT_OrgCybergarageHttpHTTPServer
#define INCLUDE_ALL_OrgCybergarageHttpHTTPServer 0
#else
#define INCLUDE_ALL_OrgCybergarageHttpHTTPServer 1
#endif
#undef RESTRICT_OrgCybergarageHttpHTTPServer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgCybergarageHttpHTTPServer_) && (INCLUDE_ALL_OrgCybergarageHttpHTTPServer || defined(INCLUDE_OrgCybergarageHttpHTTPServer))
#define OrgCybergarageHttpHTTPServer_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaNetInetAddress;
@class JavaNetServerSocket;
@class JavaNetSocket;
@class OrgCybergarageHttpHTTPRequest;
@protocol OrgCybergarageHttpHTTPRequestListener;

@interface OrgCybergarageHttpHTTPServer : NSObject < JavaLangRunnable > {
 @public
  jint timeout_;
}
@property (readonly, copy, class) NSString *NAME NS_SWIFT_NAME(NAME);
@property (readonly, copy, class) NSString *VERSION NS_SWIFT_NAME(VERSION);
@property (readonly, class) jint DEFAULT_PORT NS_SWIFT_NAME(DEFAULT_PORT);
@property (readonly, class) jint DEFAULT_TIMEOUT NS_SWIFT_NAME(DEFAULT_TIMEOUT);

+ (NSString *)NAME;

+ (NSString *)VERSION;

+ (jint)DEFAULT_PORT;

+ (jint)DEFAULT_TIMEOUT;

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaNetSocket *)accept;

- (void)addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:(id<OrgCybergarageHttpHTTPRequestListener>)listener;

- (jboolean)close;

- (NSString *)getBindAddress;

- (jint)getBindPort;

+ (NSString *)getName;

- (JavaNetServerSocket *)getServerSock;

- (jint)getTimeout;

- (jboolean)isOpened;

- (jboolean)openWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                               withInt:(jint)port;

- (jboolean)openWithNSString:(NSString *)addr
                     withInt:(jint)port;

- (void)performRequestListenerWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq;

- (void)removeRequestListenerWithOrgCybergarageHttpHTTPRequestListener:(id<OrgCybergarageHttpHTTPRequestListener>)listener;

- (void)run;

- (void)setTimeoutWithInt:(jint)timeout;

- (jboolean)start;

- (jboolean)stop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgCybergarageHttpHTTPServer)

inline NSString *OrgCybergarageHttpHTTPServer_get_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgCybergarageHttpHTTPServer_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageHttpHTTPServer, NAME, NSString *)

inline NSString *OrgCybergarageHttpHTTPServer_get_VERSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgCybergarageHttpHTTPServer_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageHttpHTTPServer, VERSION, NSString *)

inline jint OrgCybergarageHttpHTTPServer_get_DEFAULT_PORT(void);
#define OrgCybergarageHttpHTTPServer_DEFAULT_PORT 80
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPServer, DEFAULT_PORT, jint)

inline jint OrgCybergarageHttpHTTPServer_get_DEFAULT_TIMEOUT(void);
#define OrgCybergarageHttpHTTPServer_DEFAULT_TIMEOUT 10000
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPServer, DEFAULT_TIMEOUT, jint)

FOUNDATION_EXPORT NSString *OrgCybergarageHttpHTTPServer_getName(void);

FOUNDATION_EXPORT void OrgCybergarageHttpHTTPServer_init(OrgCybergarageHttpHTTPServer *self);

FOUNDATION_EXPORT OrgCybergarageHttpHTTPServer *new_OrgCybergarageHttpHTTPServer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgCybergarageHttpHTTPServer *create_OrgCybergarageHttpHTTPServer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgCybergarageHttpHTTPServer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgCybergarageHttpHTTPServer")
