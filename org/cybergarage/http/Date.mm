//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/Date.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Calendar.h"
#include "java/util/TimeZone.h"
#include "org/cybergarage/http/Date.h"

@interface OrgCybergarageHttpDate () {
 @public
  JavaUtilCalendar *cal_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageHttpDate, cal_, JavaUtilCalendar *)

inline IOSObjectArray *OrgCybergarageHttpDate_get_MONTH_STRING(void);
static IOSObjectArray *OrgCybergarageHttpDate_MONTH_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageHttpDate, MONTH_STRING, IOSObjectArray *)

inline IOSObjectArray *OrgCybergarageHttpDate_get_WEEK_STRING(void);
static IOSObjectArray *OrgCybergarageHttpDate_WEEK_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageHttpDate, WEEK_STRING, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(OrgCybergarageHttpDate)

@implementation OrgCybergarageHttpDate

- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)cal {
  OrgCybergarageHttpDate_initWithJavaUtilCalendar_(self, cal);
  return self;
}

- (JavaUtilCalendar *)getCalendar {
  return cal_;
}

- (jint)getHour {
  return [((JavaUtilCalendar *) nil_chk([self getCalendar])) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
}

- (jint)getMinute {
  return [((JavaUtilCalendar *) nil_chk([self getCalendar])) getWithInt:JavaUtilCalendar_MINUTE];
}

- (jint)getSecond {
  return [((JavaUtilCalendar *) nil_chk([self getCalendar])) getWithInt:JavaUtilCalendar_SECOND];
}

+ (OrgCybergarageHttpDate *)getLocalInstance {
  return OrgCybergarageHttpDate_getLocalInstance();
}

+ (OrgCybergarageHttpDate *)getInstance {
  return OrgCybergarageHttpDate_getInstance();
}

+ (NSString *)toDateStringWithInt:(jint)value {
  return OrgCybergarageHttpDate_toDateStringWithInt_(value);
}

+ (NSString *)toMonthStringWithInt:(jint)value {
  return OrgCybergarageHttpDate_toMonthStringWithInt_(value);
}

+ (NSString *)toWeekStringWithInt:(jint)value {
  return OrgCybergarageHttpDate_toWeekStringWithInt_(value);
}

+ (NSString *)toTimeStringWithInt:(jint)value {
  return OrgCybergarageHttpDate_toTimeStringWithInt_(value);
}

- (NSString *)getDateString {
  JavaUtilCalendar *cal = [self getCalendar];
  return JreStrcat("$$$C$C$C$C$C$$", OrgCybergarageHttpDate_toWeekStringWithInt_([((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK]), @", ", OrgCybergarageHttpDate_toTimeStringWithInt_([cal getWithInt:JavaUtilCalendar_DATE]), ' ', OrgCybergarageHttpDate_toMonthStringWithInt_([cal getWithInt:JavaUtilCalendar_MONTH]), ' ', JavaLangInteger_toStringWithInt_([cal getWithInt:JavaUtilCalendar_YEAR]), ' ', OrgCybergarageHttpDate_toTimeStringWithInt_([cal getWithInt:JavaUtilCalendar_HOUR_OF_DAY]), ':', OrgCybergarageHttpDate_toTimeStringWithInt_([cal getWithInt:JavaUtilCalendar_MINUTE]), ':', OrgCybergarageHttpDate_toTimeStringWithInt_([cal getWithInt:JavaUtilCalendar_SECOND]), @" GMT");
}

- (NSString *)getTimeString {
  JavaUtilCalendar *cal = [self getCalendar];
  return JreStrcat("$$$", OrgCybergarageHttpDate_toDateStringWithInt_([((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY]), ((([cal getWithInt:JavaUtilCalendar_SECOND] % 2) == 0) ? @":" : @" "), OrgCybergarageHttpDate_toDateStringWithInt_([cal getWithInt:JavaUtilCalendar_MINUTE]));
}

- (void)dealloc {
  RELEASE_(cal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageHttpDate;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageHttpDate;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCalendar:);
  methods[1].selector = @selector(getCalendar);
  methods[2].selector = @selector(getHour);
  methods[3].selector = @selector(getMinute);
  methods[4].selector = @selector(getSecond);
  methods[5].selector = @selector(getLocalInstance);
  methods[6].selector = @selector(getInstance);
  methods[7].selector = @selector(toDateStringWithInt:);
  methods[8].selector = @selector(toMonthStringWithInt:);
  methods[9].selector = @selector(toWeekStringWithInt:);
  methods[10].selector = @selector(toTimeStringWithInt:);
  methods[11].selector = @selector(getDateString);
  methods[12].selector = @selector(getTimeString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cal_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MONTH_STRING", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "WEEK_STRING", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCalendar;", "toDateString", "I", "toMonthString", "toWeekString", "toTimeString", &OrgCybergarageHttpDate_MONTH_STRING, &OrgCybergarageHttpDate_WEEK_STRING };
  static const J2ObjcClassInfo _OrgCybergarageHttpDate = { "Date", "org.cybergarage.http", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageHttpDate;
}

+ (void)initialize {
  if (self == [OrgCybergarageHttpDate class]) {
    JreStrongAssignAndConsume(&OrgCybergarageHttpDate_MONTH_STRING, [IOSObjectArray newArrayWithObjects:(id[]){ @"Jan", @"Feb", @"Mar", @"Apr", @"May", @"Jun", @"Jul", @"Aug", @"Sep", @"Oct", @"Nov", @"Dec" } count:12 type:NSString_class_()]);
    JreStrongAssignAndConsume(&OrgCybergarageHttpDate_WEEK_STRING, [IOSObjectArray newArrayWithObjects:(id[]){ @"Sun", @"Mon", @"Tue", @"Wed", @"Thu", @"Fri", @"Sat" } count:7 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgCybergarageHttpDate)
  }
}

@end

void OrgCybergarageHttpDate_initWithJavaUtilCalendar_(OrgCybergarageHttpDate *self, JavaUtilCalendar *cal) {
  NSObject_init(self);
  JreStrongAssign(&self->cal_, cal);
}

OrgCybergarageHttpDate *new_OrgCybergarageHttpDate_initWithJavaUtilCalendar_(JavaUtilCalendar *cal) {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpDate, initWithJavaUtilCalendar_, cal)
}

OrgCybergarageHttpDate *create_OrgCybergarageHttpDate_initWithJavaUtilCalendar_(JavaUtilCalendar *cal) {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpDate, initWithJavaUtilCalendar_, cal)
}

OrgCybergarageHttpDate *OrgCybergarageHttpDate_getLocalInstance() {
  OrgCybergarageHttpDate_initialize();
  return create_OrgCybergarageHttpDate_initWithJavaUtilCalendar_(JavaUtilCalendar_getInstance());
}

OrgCybergarageHttpDate *OrgCybergarageHttpDate_getInstance() {
  OrgCybergarageHttpDate_initialize();
  return create_OrgCybergarageHttpDate_initWithJavaUtilCalendar_(JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT")));
}

NSString *OrgCybergarageHttpDate_toDateStringWithInt_(jint value) {
  OrgCybergarageHttpDate_initialize();
  if (value < 10) return JreStrcat("C$", '0', JavaLangInteger_toStringWithInt_(value));
  return JavaLangInteger_toStringWithInt_(value);
}

NSString *OrgCybergarageHttpDate_toMonthStringWithInt_(jint value) {
  OrgCybergarageHttpDate_initialize();
  value -= JavaUtilCalendar_JANUARY;
  if (0 <= value && value < 12) return IOSObjectArray_Get(nil_chk(OrgCybergarageHttpDate_MONTH_STRING), value);
  return @"";
}

NSString *OrgCybergarageHttpDate_toWeekStringWithInt_(jint value) {
  OrgCybergarageHttpDate_initialize();
  value -= JavaUtilCalendar_SUNDAY;
  if (0 <= value && value < 7) return IOSObjectArray_Get(nil_chk(OrgCybergarageHttpDate_WEEK_STRING), value);
  return @"";
}

NSString *OrgCybergarageHttpDate_toTimeStringWithInt_(jint value) {
  OrgCybergarageHttpDate_initialize();
  NSString *str = @"";
  if (value < 10) JreStrAppend(&str, "$", @"0");
  JreStrAppend(&str, "$", JavaLangInteger_toStringWithInt_(value));
  return str;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageHttpDate)
