//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTPServer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/http/HTTPRequestListener.h"
#include "org/cybergarage/http/HTTPServer.h"
#include "org/cybergarage/http/HTTPServerThread.h"
#include "org/cybergarage/util/Debug.h"
#include "org/cybergarage/util/ListenerList.h"

@interface OrgCybergarageHttpHTTPServer () {
 @public
  JavaNetServerSocket *serverSock_;
  JavaNetInetAddress *bindAddr_;
  jint bindPort_;
  OrgCybergarageUtilListenerList *httpRequestListenerList_;
  JavaLangThread *httpServerThread_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServer, serverSock_, JavaNetServerSocket *)
J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServer, bindAddr_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServer, httpRequestListenerList_, OrgCybergarageUtilListenerList *)
J2OBJC_FIELD_SETTER(OrgCybergarageHttpHTTPServer, httpServerThread_, JavaLangThread *)

NSString *OrgCybergarageHttpHTTPServer_NAME = @"CyberHTTP";
NSString *OrgCybergarageHttpHTTPServer_VERSION = @"1.0";

@implementation OrgCybergarageHttpHTTPServer

+ (NSString *)NAME {
  return OrgCybergarageHttpHTTPServer_NAME;
}

+ (NSString *)VERSION {
  return OrgCybergarageHttpHTTPServer_VERSION;
}

+ (jint)DEFAULT_PORT {
  return OrgCybergarageHttpHTTPServer_DEFAULT_PORT;
}

+ (jint)DEFAULT_TIMEOUT {
  return OrgCybergarageHttpHTTPServer_DEFAULT_TIMEOUT;
}

+ (NSString *)getName {
  return OrgCybergarageHttpHTTPServer_getName();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageHttpHTTPServer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaNetServerSocket *)getServerSock {
  return serverSock_;
}

- (NSString *)getBindAddress {
  if (bindAddr_ == nil) return @"";
  return [bindAddr_ description];
}

- (jint)getBindPort {
  return bindPort_;
}

- (jint)getTimeout {
  @synchronized(self) {
    return timeout_;
  }
}

- (void)setTimeoutWithInt:(jint)timeout {
  @synchronized(self) {
    self->timeout_ = timeout;
  }
}

- (jboolean)openWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                               withInt:(jint)port {
  if (serverSock_ != nil) return true;
  @try {
    JreStrongAssignAndConsume(&serverSock_, new_JavaNetServerSocket_initWithInt_withInt_withJavaNetInetAddress_(bindPort_, 0, bindAddr_));
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
  return true;
}

- (jboolean)openWithNSString:(NSString *)addr
                     withInt:(jint)port {
  if (serverSock_ != nil) return true;
  @try {
    JreStrongAssign(&bindAddr_, JavaNetInetAddress_getByNameWithNSString_(addr));
    bindPort_ = port;
    JreStrongAssignAndConsume(&serverSock_, new_JavaNetServerSocket_initWithInt_withInt_withJavaNetInetAddress_(bindPort_, 0, bindAddr_));
  }
  @catch (JavaIoIOException *e) {
    OrgCybergarageUtilDebug_warningWithNSString_withJavaLangException_(JreStrcat("$$CI", @"HTTP server open failed ", addr, ' ', port), e);
    return false;
  }
  return true;
}

- (jboolean)close {
  if (serverSock_ == nil) return true;
  @try {
    [serverSock_ close];
    JreStrongAssign(&serverSock_, nil);
    JreStrongAssign(&bindAddr_, nil);
    bindPort_ = 0;
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  return true;
}

- (JavaNetSocket *)accept {
  if (serverSock_ == nil) return nil;
  @try {
    JavaNetSocket *sock = [serverSock_ accept];
    [((JavaNetSocket *) nil_chk(sock)) setSoTimeoutWithInt:[self getTimeout]];
    return sock;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (jboolean)isOpened {
  return (serverSock_ != nil) ? true : false;
}

- (void)addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:(id<OrgCybergarageHttpHTTPRequestListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(httpRequestListenerList_)) addWithId:listener];
}

- (void)removeRequestListenerWithOrgCybergarageHttpHTTPRequestListener:(id<OrgCybergarageHttpHTTPRequestListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(httpRequestListenerList_)) removeWithId:listener];
}

- (void)performRequestListenerWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(httpRequestListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageHttpHTTPRequestListener> listener = (id<OrgCybergarageHttpHTTPRequestListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(httpRequestListenerList_)) getWithInt:n], OrgCybergarageHttpHTTPRequestListener_class_());
    [((id<OrgCybergarageHttpHTTPRequestListener>) nil_chk(listener)) httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:httpReq];
  }
}

- (void)run {
  if ([self isOpened] == false) return;
  JavaLangThread *thisThread = JavaLangThread_currentThread();
  while (httpServerThread_ == thisThread) {
    JavaLangThread_yield();
    JavaNetSocket *sock;
    @try {
      OrgCybergarageUtilDebug_messageWithNSString_(@"accept ...");
      sock = [self accept];
      if (sock != nil) OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$@", @"sock = ", [sock getRemoteSocketAddress]));
    }
    @catch (JavaLangException *e) {
      OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
      break;
    }
    OrgCybergarageHttpHTTPServerThread *httpServThread = create_OrgCybergarageHttpHTTPServerThread_initWithOrgCybergarageHttpHTTPServer_withJavaNetSocket_(self, sock);
    [httpServThread start];
    OrgCybergarageUtilDebug_messageWithNSString_(@"httpServThread ...");
  }
}

- (jboolean)start {
  JavaLangStringBuffer *name = create_JavaLangStringBuffer_initWithNSString_(@"Cyber.HTTPServer/");
  JreStrongAssignAndConsume(&httpServerThread_, new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, [name description]));
  [httpServerThread_ start];
  return true;
}

- (jboolean)stop {
  JreStrongAssign(&httpServerThread_, nil);
  return true;
}

- (void)dealloc {
  RELEASE_(serverSock_);
  RELEASE_(bindAddr_);
  RELEASE_(httpRequestListenerList_);
  RELEASE_(httpServerThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetServerSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getName);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getServerSock);
  methods[3].selector = @selector(getBindAddress);
  methods[4].selector = @selector(getBindPort);
  methods[5].selector = @selector(getTimeout);
  methods[6].selector = @selector(setTimeoutWithInt:);
  methods[7].selector = @selector(openWithJavaNetInetAddress:withInt:);
  methods[8].selector = @selector(openWithNSString:withInt:);
  methods[9].selector = @selector(close);
  methods[10].selector = @selector(accept);
  methods[11].selector = @selector(isOpened);
  methods[12].selector = @selector(addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:);
  methods[13].selector = @selector(removeRequestListenerWithOrgCybergarageHttpHTTPRequestListener:);
  methods[14].selector = @selector(performRequestListenerWithOrgCybergarageHttpHTTPRequest:);
  methods[15].selector = @selector(run);
  methods[16].selector = @selector(start);
  methods[17].selector = @selector(stop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "DEFAULT_PORT", "I", .constantValue.asInt = OrgCybergarageHttpHTTPServer_DEFAULT_PORT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_TIMEOUT", "I", .constantValue.asInt = OrgCybergarageHttpHTTPServer_DEFAULT_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "serverSock_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bindAddr_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bindPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "httpRequestListenerList_", "LOrgCybergarageUtilListenerList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "httpServerThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTimeout", "I", "open", "LJavaNetInetAddress;I", "LNSString;I", "addRequestListener", "LOrgCybergarageHttpHTTPRequestListener;", "removeRequestListener", "performRequestListener", "LOrgCybergarageHttpHTTPRequest;", &OrgCybergarageHttpHTTPServer_NAME, &OrgCybergarageHttpHTTPServer_VERSION };
  static const J2ObjcClassInfo _OrgCybergarageHttpHTTPServer = { "HTTPServer", "org.cybergarage.http", ptrTable, methods, fields, 7, 0x1, 18, 10, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageHttpHTTPServer;
}

@end

NSString *OrgCybergarageHttpHTTPServer_getName() {
  OrgCybergarageHttpHTTPServer_initialize();
  NSString *osName = JavaLangSystem_getPropertyWithNSString_(@"os.name");
  NSString *osVer = JavaLangSystem_getPropertyWithNSString_(@"os.version");
  return JreStrcat("$C$C$C$", osName, '/', osVer, ' ', OrgCybergarageHttpHTTPServer_NAME, '/', OrgCybergarageHttpHTTPServer_VERSION);
}

void OrgCybergarageHttpHTTPServer_init(OrgCybergarageHttpHTTPServer *self) {
  NSObject_init(self);
  JreStrongAssign(&self->serverSock_, nil);
  JreStrongAssign(&self->bindAddr_, nil);
  self->bindPort_ = 0;
  self->timeout_ = OrgCybergarageHttpHTTPServer_DEFAULT_TIMEOUT;
  JreStrongAssignAndConsume(&self->httpRequestListenerList_, new_OrgCybergarageUtilListenerList_init());
  JreStrongAssign(&self->httpServerThread_, nil);
  JreStrongAssign(&self->serverSock_, nil);
}

OrgCybergarageHttpHTTPServer *new_OrgCybergarageHttpHTTPServer_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageHttpHTTPServer, init)
}

OrgCybergarageHttpHTTPServer *create_OrgCybergarageHttpHTTPServer_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageHttpHTTPServer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageHttpHTTPServer)
