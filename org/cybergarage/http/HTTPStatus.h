//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/http/HTTPStatus.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgCybergarageHttpHTTPStatus")
#ifdef RESTRICT_OrgCybergarageHttpHTTPStatus
#define INCLUDE_ALL_OrgCybergarageHttpHTTPStatus 0
#else
#define INCLUDE_ALL_OrgCybergarageHttpHTTPStatus 1
#endif
#undef RESTRICT_OrgCybergarageHttpHTTPStatus

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgCybergarageHttpHTTPStatus_) && (INCLUDE_ALL_OrgCybergarageHttpHTTPStatus || defined(INCLUDE_OrgCybergarageHttpHTTPStatus))
#define OrgCybergarageHttpHTTPStatus_

@interface OrgCybergarageHttpHTTPStatus : NSObject
@property (readonly, class) jint CONTINUE NS_SWIFT_NAME(CONTINUE);
@property (readonly, class) jint OK NS_SWIFT_NAME(OK);
@property (readonly, class) jint PARTIAL_CONTENT NS_SWIFT_NAME(PARTIAL_CONTENT);
@property (readonly, class) jint BAD_REQUEST NS_SWIFT_NAME(BAD_REQUEST);
@property (readonly, class) jint NOT_FOUND NS_SWIFT_NAME(NOT_FOUND);
@property (readonly, class) jint PRECONDITION_FAILED NS_SWIFT_NAME(PRECONDITION_FAILED);
@property (readonly, class) jint INVALID_RANGE NS_SWIFT_NAME(INVALID_RANGE);
@property (readonly, class) jint INTERNAL_SERVER_ERROR NS_SWIFT_NAME(INTERNAL_SERVER_ERROR);

+ (jint)CONTINUE;

+ (jint)OK;

+ (jint)PARTIAL_CONTENT;

+ (jint)BAD_REQUEST;

+ (jint)NOT_FOUND;

+ (jint)PRECONDITION_FAILED;

+ (jint)INVALID_RANGE;

+ (jint)INTERNAL_SERVER_ERROR;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)lineStr;

- (instancetype __nonnull)initWithNSString:(NSString *)ver
                                   withInt:(jint)code
                              withNSString:(NSString *)reason;

+ (NSString *)code2StringWithInt:(jint)code;

- (NSString *)getReasonPhrase;

- (jint)getStatusCode;

- (NSString *)getVersion;

- (jboolean)isSuccessful;

+ (jboolean)isSuccessfulWithInt:(jint)statCode;

- (void)setWithNSString:(NSString *)lineStr;

- (void)setReasonPhraseWithNSString:(NSString *)value;

- (void)setStatusCodeWithInt:(jint)value;

- (void)setVersionWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgCybergarageHttpHTTPStatus)

inline jint OrgCybergarageHttpHTTPStatus_get_CONTINUE(void);
#define OrgCybergarageHttpHTTPStatus_CONTINUE 100
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, CONTINUE, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_OK(void);
#define OrgCybergarageHttpHTTPStatus_OK 200
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, OK, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_PARTIAL_CONTENT(void);
#define OrgCybergarageHttpHTTPStatus_PARTIAL_CONTENT 206
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, PARTIAL_CONTENT, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_BAD_REQUEST(void);
#define OrgCybergarageHttpHTTPStatus_BAD_REQUEST 400
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, BAD_REQUEST, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_NOT_FOUND(void);
#define OrgCybergarageHttpHTTPStatus_NOT_FOUND 404
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, NOT_FOUND, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_PRECONDITION_FAILED(void);
#define OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED 412
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, PRECONDITION_FAILED, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_INVALID_RANGE(void);
#define OrgCybergarageHttpHTTPStatus_INVALID_RANGE 416
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, INVALID_RANGE, jint)

inline jint OrgCybergarageHttpHTTPStatus_get_INTERNAL_SERVER_ERROR(void);
#define OrgCybergarageHttpHTTPStatus_INTERNAL_SERVER_ERROR 500
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageHttpHTTPStatus, INTERNAL_SERVER_ERROR, jint)

FOUNDATION_EXPORT NSString *OrgCybergarageHttpHTTPStatus_code2StringWithInt_(jint code);

FOUNDATION_EXPORT void OrgCybergarageHttpHTTPStatus_init(OrgCybergarageHttpHTTPStatus *self);

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *new_OrgCybergarageHttpHTTPStatus_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *create_OrgCybergarageHttpHTTPStatus_init(void);

FOUNDATION_EXPORT void OrgCybergarageHttpHTTPStatus_initWithNSString_withInt_withNSString_(OrgCybergarageHttpHTTPStatus *self, NSString *ver, jint code, NSString *reason);

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *new_OrgCybergarageHttpHTTPStatus_initWithNSString_withInt_withNSString_(NSString *ver, jint code, NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *create_OrgCybergarageHttpHTTPStatus_initWithNSString_withInt_withNSString_(NSString *ver, jint code, NSString *reason);

FOUNDATION_EXPORT void OrgCybergarageHttpHTTPStatus_initWithNSString_(OrgCybergarageHttpHTTPStatus *self, NSString *lineStr);

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *new_OrgCybergarageHttpHTTPStatus_initWithNSString_(NSString *lineStr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgCybergarageHttpHTTPStatus *create_OrgCybergarageHttpHTTPStatus_initWithNSString_(NSString *lineStr);

FOUNDATION_EXPORT jboolean OrgCybergarageHttpHTTPStatus_isSuccessfulWithInt_(jint statCode);

J2OBJC_TYPE_LITERAL_HEADER(OrgCybergarageHttpHTTPStatus)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgCybergarageHttpHTTPStatus")
