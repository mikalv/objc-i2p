//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ControlPoint.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/http/HTTPServerList.h"
#include "org/cybergarage/net/HostInterface.h"
#include "org/cybergarage/upnp/ControlPoint.h"
#include "org/cybergarage/upnp/Device.h"
#include "org/cybergarage/upnp/DeviceList.h"
#include "org/cybergarage/upnp/Service.h"
#include "org/cybergarage/upnp/ServiceList.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/upnp/control/RenewSubscriber.h"
#include "org/cybergarage/upnp/device/DeviceChangeListener.h"
#include "org/cybergarage/upnp/device/Disposer.h"
#include "org/cybergarage/upnp/device/NotifyListener.h"
#include "org/cybergarage/upnp/device/ST.h"
#include "org/cybergarage/upnp/device/SearchResponseListener.h"
#include "org/cybergarage/upnp/device/USN.h"
#include "org/cybergarage/upnp/event/EventListener.h"
#include "org/cybergarage/upnp/event/NotifyRequest.h"
#include "org/cybergarage/upnp/event/Property.h"
#include "org/cybergarage/upnp/event/PropertyList.h"
#include "org/cybergarage/upnp/event/Subscription.h"
#include "org/cybergarage/upnp/event/SubscriptionRequest.h"
#include "org/cybergarage/upnp/event/SubscriptionResponse.h"
#include "org/cybergarage/upnp/ssdp/SSDP.h"
#include "org/cybergarage/upnp/ssdp/SSDPNotifySocketList.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchRequest.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchResponseSocketList.h"
#include "org/cybergarage/util/Debug.h"
#include "org/cybergarage/util/ListenerList.h"
#include "org/cybergarage/util/Mutex.h"
#include "org/cybergarage/xml/Node.h"
#include "org/cybergarage/xml/NodeList.h"
#include "org/cybergarage/xml/Parser.h"
#include "org/cybergarage/xml/ParserException.h"

@interface OrgCybergarageUpnpControlPoint () {
 @public
  OrgCybergarageUpnpSsdpSSDPNotifySocketList *ssdpNotifySocketList_;
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *ssdpSearchResponseSocketList_;
  OrgCybergarageUtilMutex *mutex_;
  jint ssdpPort_;
  jint httpPort_;
  jboolean nmprMode_;
  OrgCybergarageXmlNodeList *devNodeList_;
  OrgCybergarageUpnpDeviceDisposer *deviceDisposer_;
  jlong expiredDeviceMonitoringInterval_;
  OrgCybergarageUtilListenerList *deviceNotifyListenerList_;
  OrgCybergarageUtilListenerList *deviceSearchResponseListenerList_;
  jint searchMx_;
  OrgCybergarageHttpHTTPServerList *httpServerList_;
  OrgCybergarageUtilListenerList *eventListenerList_;
  NSString *eventSubURI_;
  OrgCybergarageUpnpControlRenewSubscriber *renewSubscriber_;
  id userData_;
}

- (OrgCybergarageUpnpSsdpSSDPNotifySocketList *)getSSDPNotifySocketList;

- (OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *)getSSDPSearchResponseSocketList;

- (void)addDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode;

- (void)addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket;

- (OrgCybergarageUpnpDevice *)getDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode;

- (void)removeDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode;

- (void)removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)packet;

- (OrgCybergarageHttpHTTPServerList *)getHTTPServerList;

- (NSString *)getEventSubCallbackURLWithNSString:(NSString *)host;

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, ssdpNotifySocketList_, OrgCybergarageUpnpSsdpSSDPNotifySocketList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, ssdpSearchResponseSocketList_, OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, mutex_, OrgCybergarageUtilMutex *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, devNodeList_, OrgCybergarageXmlNodeList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, deviceDisposer_, OrgCybergarageUpnpDeviceDisposer *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, deviceNotifyListenerList_, OrgCybergarageUtilListenerList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, deviceSearchResponseListenerList_, OrgCybergarageUtilListenerList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, httpServerList_, OrgCybergarageHttpHTTPServerList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, eventListenerList_, OrgCybergarageUtilListenerList *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, eventSubURI_, NSString *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, renewSubscriber_, OrgCybergarageUpnpControlRenewSubscriber *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpControlPoint, userData_, id)

inline jint OrgCybergarageUpnpControlPoint_get_DEFAULT_EVENTSUB_PORT(void);
#define OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_PORT 8058
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageUpnpControlPoint, DEFAULT_EVENTSUB_PORT, jint)

inline jint OrgCybergarageUpnpControlPoint_get_DEFAULT_SSDP_PORT(void);
#define OrgCybergarageUpnpControlPoint_DEFAULT_SSDP_PORT 8008
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageUpnpControlPoint, DEFAULT_SSDP_PORT, jint)

inline jint OrgCybergarageUpnpControlPoint_get_DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL(void);
#define OrgCybergarageUpnpControlPoint_DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL 60
J2OBJC_STATIC_FIELD_CONSTANT(OrgCybergarageUpnpControlPoint, DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL, jint)

inline NSString *OrgCybergarageUpnpControlPoint_get_DEFAULT_EVENTSUB_URI(void);
static NSString *OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_URI = @"/evetSub";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpControlPoint, DEFAULT_EVENTSUB_URI, NSString *)

__attribute__((unused)) static OrgCybergarageUpnpSsdpSSDPNotifySocketList *OrgCybergarageUpnpControlPoint_getSSDPNotifySocketList(OrgCybergarageUpnpControlPoint *self);

__attribute__((unused)) static OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(OrgCybergarageUpnpControlPoint *self);

__attribute__((unused)) static void OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode);

__attribute__((unused)) static void OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageUpnpSsdpSSDPPacket *ssdpPacket);

__attribute__((unused)) static OrgCybergarageUpnpDevice *OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode);

__attribute__((unused)) static void OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode);

__attribute__((unused)) static void OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageUpnpSsdpSSDPPacket *packet);

__attribute__((unused)) static OrgCybergarageHttpHTTPServerList *OrgCybergarageUpnpControlPoint_getHTTPServerList(OrgCybergarageUpnpControlPoint *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpControlPoint_getEventSubCallbackURLWithNSString_(OrgCybergarageUpnpControlPoint *self, NSString *host);

J2OBJC_INITIALIZED_DEFN(OrgCybergarageUpnpControlPoint)

@implementation OrgCybergarageUpnpControlPoint

- (OrgCybergarageUpnpSsdpSSDPNotifySocketList *)getSSDPNotifySocketList {
  return OrgCybergarageUpnpControlPoint_getSSDPNotifySocketList(self);
}

- (OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *)getSSDPSearchResponseSocketList {
  return OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(self);
}

- (instancetype)initWithInt:(jint)ssdpPort
                    withInt:(jint)httpPort
withJavaNetInetAddressArray:(IOSObjectArray *)binds {
  OrgCybergarageUpnpControlPoint_initWithInt_withInt_withJavaNetInetAddressArray_(self, ssdpPort, httpPort, binds);
  return self;
}

- (instancetype)initWithInt:(jint)ssdpPort
                    withInt:(jint)httpPort {
  OrgCybergarageUpnpControlPoint_initWithInt_withInt_(self, ssdpPort, httpPort);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpControlPoint_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)java_finalize {
  [self stop];
}

- (void)lock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) lock];
}

- (void)unlock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) unlock];
}

- (jint)getSSDPPort {
  return ssdpPort_;
}

- (void)setSSDPPortWithInt:(jint)port {
  ssdpPort_ = port;
}

- (jint)getHTTPPort {
  return httpPort_;
}

- (void)setHTTPPortWithInt:(jint)port {
  httpPort_ = port;
}

- (void)setNMPRModeWithBoolean:(jboolean)flag {
  nmprMode_ = flag;
}

- (jboolean)isNMPRMode {
  return nmprMode_;
}

- (void)addDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode {
  OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageXmlNode_(self, rootNode);
}

- (void)addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(self, ssdpPacket);
}

- (OrgCybergarageUpnpDevice *)getDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode {
  return OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(self, rootNode);
}

- (OrgCybergarageUpnpDeviceList *)getDeviceList {
  OrgCybergarageUpnpDeviceList *devList = create_OrgCybergarageUpnpDeviceList_init();
  jint nRoots = [((OrgCybergarageXmlNodeList *) nil_chk(devNodeList_)) size];
  for (jint n = 0; n < nRoots; n++) {
    OrgCybergarageXmlNode *rootNode;
    @try {
      rootNode = [((OrgCybergarageXmlNodeList *) nil_chk(devNodeList_)) getNodeWithInt:n];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *aioob) {
      break;
    }
    OrgCybergarageUpnpDevice *dev = OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(self, rootNode);
    if (dev == nil) continue;
    [devList addWithId:dev];
  }
  return devList;
}

- (OrgCybergarageUpnpDevice *)getDeviceWithNSString:(NSString *)name {
  jint nRoots = [((OrgCybergarageXmlNodeList *) nil_chk(devNodeList_)) size];
  for (jint n = 0; n < nRoots; n++) {
    OrgCybergarageXmlNode *rootNode;
    @try {
      rootNode = [((OrgCybergarageXmlNodeList *) nil_chk(devNodeList_)) getNodeWithInt:n];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *aioob) {
      break;
    }
    OrgCybergarageUpnpDevice *dev = OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(self, rootNode);
    if (dev == nil) continue;
    if ([dev isDeviceWithNSString:name] == true) return dev;
    OrgCybergarageUpnpDevice *cdev = [dev getDeviceWithNSString:name];
    if (cdev != nil) return cdev;
  }
  return nil;
}

- (jboolean)hasDeviceWithNSString:(NSString *)name {
  return ([self getDeviceWithNSString:name] != nil) ? true : false;
}

- (void)removeDeviceWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)rootNode {
  OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageXmlNode_(self, rootNode);
}

- (void)removeDeviceWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  if (dev == nil) return;
  OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageXmlNode_(self, [dev getRootNode]);
}

- (void)removeDeviceWithNSString:(NSString *)name {
  OrgCybergarageUpnpDevice *dev = [self getDeviceWithNSString:name];
  [self removeDeviceWithOrgCybergarageUpnpDevice:dev];
}

- (void)removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)packet {
  OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(self, packet);
}

- (void)removeExpiredDevices {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  IOSObjectArray *dev = [IOSObjectArray arrayWithLength:devCnt type:OrgCybergarageUpnpDevice_class_()];
  for (jint n = 0; n < devCnt; n++) IOSObjectArray_Set(dev, n, [devList getDeviceWithInt:n]);
  for (jint n = 0; n < devCnt; n++) {
    if ([((OrgCybergarageUpnpDevice *) nil_chk(IOSObjectArray_Get(dev, n))) isExpired] == true) {
      OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$$", @"Expired device = ", [((OrgCybergarageUpnpDevice *) nil_chk(IOSObjectArray_Get(dev, n))) getFriendlyName]));
      [self removeDeviceWithOrgCybergarageUpnpDevice:IOSObjectArray_Get(dev, n)];
    }
  }
}

- (void)setExpiredDeviceMonitoringIntervalWithLong:(jlong)interval {
  expiredDeviceMonitoringInterval_ = interval;
}

- (jlong)getExpiredDeviceMonitoringInterval {
  return expiredDeviceMonitoringInterval_;
}

- (void)setDeviceDisposerWithOrgCybergarageUpnpDeviceDisposer:(OrgCybergarageUpnpDeviceDisposer *)disposer {
  JreStrongAssign(&deviceDisposer_, disposer);
}

- (OrgCybergarageUpnpDeviceDisposer *)getDeviceDisposer {
  return deviceDisposer_;
}

- (void)addNotifyListenerWithOrgCybergarageUpnpDeviceNotifyListener:(id<OrgCybergarageUpnpDeviceNotifyListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceNotifyListenerList_)) addWithId:listener];
}

- (void)removeNotifyListenerWithOrgCybergarageUpnpDeviceNotifyListener:(id<OrgCybergarageUpnpDeviceNotifyListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceNotifyListenerList_)) removeWithId:listener];
}

- (void)performNotifyListenerWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(deviceNotifyListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageUpnpDeviceNotifyListener> listener = (id<OrgCybergarageUpnpDeviceNotifyListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(deviceNotifyListenerList_)) getWithInt:n], OrgCybergarageUpnpDeviceNotifyListener_class_());
    @try {
      [((id<OrgCybergarageUpnpDeviceNotifyListener>) nil_chk(listener)) deviceNotifyReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
    }
    @catch (JavaLangException *e) {
      OrgCybergarageUtilDebug_warningWithNSString_withJavaLangException_(@"NotifyListener returned an error:", e);
    }
  }
}

- (void)addSearchResponseListenerWithOrgCybergarageUpnpDeviceSearchResponseListener:(id<OrgCybergarageUpnpDeviceSearchResponseListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceSearchResponseListenerList_)) addWithId:listener];
}

- (void)removeSearchResponseListenerWithOrgCybergarageUpnpDeviceSearchResponseListener:(id<OrgCybergarageUpnpDeviceSearchResponseListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceSearchResponseListenerList_)) removeWithId:listener];
}

- (void)performSearchResponseListenerWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(deviceSearchResponseListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageUpnpDeviceSearchResponseListener> listener = (id<OrgCybergarageUpnpDeviceSearchResponseListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(deviceSearchResponseListenerList_)) getWithInt:n], OrgCybergarageUpnpDeviceSearchResponseListener_class_());
    @try {
      [((id<OrgCybergarageUpnpDeviceSearchResponseListener>) nil_chk(listener)) deviceSearchResponseReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
    }
    @catch (JavaLangException *e) {
      OrgCybergarageUtilDebug_warningWithNSString_withJavaLangException_(@"SearchResponseListener returned an error:", e);
    }
  }
}

- (void)addDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:(id<OrgCybergarageUpnpDeviceDeviceChangeListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) addWithId:listener];
}

- (void)removeDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:(id<OrgCybergarageUpnpDeviceDeviceChangeListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) removeWithId:listener];
}

- (void)performAddDeviceListenerWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageUpnpDeviceDeviceChangeListener> listener = (id<OrgCybergarageUpnpDeviceDeviceChangeListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) getWithInt:n], OrgCybergarageUpnpDeviceDeviceChangeListener_class_());
    [((id<OrgCybergarageUpnpDeviceDeviceChangeListener>) nil_chk(listener)) deviceAddedWithOrgCybergarageUpnpDevice:dev];
  }
}

- (void)performRemoveDeviceListenerWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageUpnpDeviceDeviceChangeListener> listener = (id<OrgCybergarageUpnpDeviceDeviceChangeListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(deviceChangeListenerList_)) getWithInt:n], OrgCybergarageUpnpDeviceDeviceChangeListener_class_());
    [((id<OrgCybergarageUpnpDeviceDeviceChangeListener>) nil_chk(listener)) deviceRemovedWithOrgCybergarageUpnpDevice:dev];
  }
}

- (void)notifyReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)packet {
  if ([((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(packet)) isRootDevice] == true) {
    if ([packet isAlive] == true) {
      OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(self, packet);
    }
    else if ([packet isByeBye] == true) {
      OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(self, packet);
    }
  }
  [self performNotifyListenerWithOrgCybergarageUpnpSsdpSSDPPacket:packet];
}

- (void)searchResponseReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)packet {
  if ([((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(packet)) isRootDevice] == true) OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(self, packet);
  [self performSearchResponseListenerWithOrgCybergarageUpnpSsdpSSDPPacket:packet];
}

- (jint)getSearchMx {
  return searchMx_;
}

- (void)setSearchMxWithInt:(jint)mx {
  searchMx_ = mx;
}

- (void)searchWithNSString:(NSString *)target
                   withInt:(jint)mx {
  OrgCybergarageUpnpSsdpSSDPSearchRequest *msReq = create_OrgCybergarageUpnpSsdpSSDPSearchRequest_initWithNSString_withInt_(target, mx);
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *ssdpSearchResponseSocketList = OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(self);
  [((OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *) nil_chk(ssdpSearchResponseSocketList)) postWithOrgCybergarageUpnpSsdpSSDPSearchRequest:msReq];
}

- (void)searchWithNSString:(NSString *)target {
  [self searchWithNSString:target withInt:OrgCybergarageUpnpSsdpSSDP_DEFAULT_MSEARCH_MX];
}

- (void)search {
  [self searchWithNSString:OrgCybergarageUpnpDeviceST_ROOT_DEVICE withInt:OrgCybergarageUpnpSsdpSSDP_DEFAULT_MSEARCH_MX];
}

- (OrgCybergarageHttpHTTPServerList *)getHTTPServerList {
  return OrgCybergarageUpnpControlPoint_getHTTPServerList(self);
}

- (void)httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) print];
  if ([((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) isNotifyRequest] == true) {
    OrgCybergarageUpnpEventNotifyRequest *notifyReq = create_OrgCybergarageUpnpEventNotifyRequest_initWithOrgCybergarageHttpHTTPRequest_(httpReq);
    NSString *uuid = [notifyReq getSID];
    jlong seq = [notifyReq getSEQ];
    OrgCybergarageUpnpEventPropertyList *props = [notifyReq getPropertyList];
    jint propCnt = [((OrgCybergarageUpnpEventPropertyList *) nil_chk(props)) size];
    for (jint n = 0; n < propCnt; n++) {
      OrgCybergarageUpnpEventProperty *prop = [props getPropertyWithInt:n];
      NSString *varName = [((OrgCybergarageUpnpEventProperty *) nil_chk(prop)) getName];
      NSString *varValue = [prop getValue];
      [self performEventListenerWithNSString:uuid withLong:seq withNSString:varName withNSString:varValue];
    }
    [httpReq returnOK];
    return;
  }
  [httpReq returnBadRequest];
}

- (void)addEventListenerWithOrgCybergarageUpnpEventEventListener:(id<OrgCybergarageUpnpEventEventListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(eventListenerList_)) addWithId:listener];
}

- (void)removeEventListenerWithOrgCybergarageUpnpEventEventListener:(id<OrgCybergarageUpnpEventEventListener>)listener {
  [((OrgCybergarageUtilListenerList *) nil_chk(eventListenerList_)) removeWithId:listener];
}

- (void)performEventListenerWithNSString:(NSString *)uuid
                                withLong:(jlong)seq
                            withNSString:(NSString *)name
                            withNSString:(NSString *)value {
  jint listenerSize = [((OrgCybergarageUtilListenerList *) nil_chk(eventListenerList_)) size];
  for (jint n = 0; n < listenerSize; n++) {
    id<OrgCybergarageUpnpEventEventListener> listener = (id<OrgCybergarageUpnpEventEventListener>) cast_check([((OrgCybergarageUtilListenerList *) nil_chk(eventListenerList_)) getWithInt:n], OrgCybergarageUpnpEventEventListener_class_());
    [((id<OrgCybergarageUpnpEventEventListener>) nil_chk(listener)) eventNotifyReceivedWithNSString:uuid withLong:seq withNSString:name withNSString:value];
  }
}

- (NSString *)getEventSubURI {
  return eventSubURI_;
}

- (void)setEventSubURIWithNSString:(NSString *)url {
  JreStrongAssign(&eventSubURI_, url);
}

- (NSString *)getEventSubCallbackURLWithNSString:(NSString *)host {
  return OrgCybergarageUpnpControlPoint_getEventSubCallbackURLWithNSString_(self, host);
}

- (jboolean)subscribeWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                                          withLong:(jlong)timeout {
  if ([((OrgCybergarageUpnpService *) nil_chk(service)) isSubscribed] == true) {
    NSString *sid = [service getSID];
    return [self subscribeWithOrgCybergarageUpnpService:service withNSString:sid withLong:timeout];
  }
  OrgCybergarageUpnpDevice *rootDev = [service getRootDevice];
  if (rootDev == nil) return false;
  NSString *ifAddress = [rootDev getInterfaceAddress];
  OrgCybergarageUpnpEventSubscriptionRequest *subReq = create_OrgCybergarageUpnpEventSubscriptionRequest_init();
  [subReq setSubscribeRequestWithOrgCybergarageUpnpService:service withNSString:OrgCybergarageUpnpControlPoint_getEventSubCallbackURLWithNSString_(self, ifAddress) withLong:timeout];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = [subReq post];
  if ([((OrgCybergarageUpnpEventSubscriptionResponse *) nil_chk(subRes)) isSuccessful] == true) {
    [service setSIDWithNSString:[subRes getSID]];
    [service setTimeoutWithLong:[subRes getTimeout]];
    return true;
  }
  [service clearSID];
  return false;
}

- (jboolean)subscribeWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  return [self subscribeWithOrgCybergarageUpnpService:service withLong:OrgCybergarageUpnpEventSubscription_INFINITE_VALUE];
}

- (jboolean)subscribeWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                                      withNSString:(NSString *)uuid
                                          withLong:(jlong)timeout {
  OrgCybergarageUpnpEventSubscriptionRequest *subReq = create_OrgCybergarageUpnpEventSubscriptionRequest_init();
  [subReq setRenewRequestWithOrgCybergarageUpnpService:service withNSString:uuid withLong:timeout];
  if (OrgCybergarageUtilDebug_isOn() == true) [subReq print];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = [subReq post];
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageUpnpEventSubscriptionResponse *) nil_chk(subRes)) print];
  if ([((OrgCybergarageUpnpEventSubscriptionResponse *) nil_chk(subRes)) isSuccessful] == true) {
    [((OrgCybergarageUpnpService *) nil_chk(service)) setSIDWithNSString:[subRes getSID]];
    [service setTimeoutWithLong:[subRes getTimeout]];
    return true;
  }
  [((OrgCybergarageUpnpService *) nil_chk(service)) clearSID];
  return false;
}

- (jboolean)subscribeWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                                      withNSString:(NSString *)uuid {
  return [self subscribeWithOrgCybergarageUpnpService:service withNSString:uuid withLong:OrgCybergarageUpnpEventSubscription_INFINITE_VALUE];
}

- (jboolean)isSubscribedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  if (service == nil) return false;
  return [service isSubscribed];
}

- (jboolean)unsubscribeWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  OrgCybergarageUpnpEventSubscriptionRequest *subReq = create_OrgCybergarageUpnpEventSubscriptionRequest_init();
  [subReq setUnsubscribeRequestWithOrgCybergarageUpnpService:service];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = [subReq post];
  if ([((OrgCybergarageUpnpEventSubscriptionResponse *) nil_chk(subRes)) isSuccessful] == true) {
    [((OrgCybergarageUpnpService *) nil_chk(service)) clearSID];
    return true;
  }
  return false;
}

- (void)unsubscribeWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)device {
  OrgCybergarageUpnpServiceList *serviceList = [((OrgCybergarageUpnpDevice *) nil_chk(device)) getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) hasSID] == true) [self unsubscribeWithOrgCybergarageUpnpService:service];
  }
  OrgCybergarageUpnpDeviceList *childDevList = [device getDeviceList];
  jint childDevCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(childDevList)) size];
  for (jint n = 0; n < childDevCnt; n++) {
    OrgCybergarageUpnpDevice *cdev = [childDevList getDeviceWithInt:n];
    [self unsubscribeWithOrgCybergarageUpnpDevice:cdev];
  }
}

- (void)unsubscribe {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    [self unsubscribeWithOrgCybergarageUpnpDevice:dev];
  }
}

- (OrgCybergarageUpnpService *)getSubscriberServiceWithNSString:(NSString *)uuid {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getSubscriberServiceWithNSString:uuid];
    if (service != nil) return service;
  }
  return nil;
}

- (void)renewSubscriberServiceWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev
                                                  withLong:(jlong)timeout {
  OrgCybergarageUpnpServiceList *serviceList = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) isSubscribed] == false) continue;
    NSString *sid = [service getSID];
    jboolean isRenewed = [self subscribeWithOrgCybergarageUpnpService:service withNSString:sid withLong:timeout];
    if (isRenewed == false) [self subscribeWithOrgCybergarageUpnpService:service withLong:timeout];
  }
  OrgCybergarageUpnpDeviceList *cdevList = [dev getDeviceList];
  jint cdevCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(cdevList)) size];
  for (jint n = 0; n < cdevCnt; n++) {
    OrgCybergarageUpnpDevice *cdev = [cdevList getDeviceWithInt:n];
    [self renewSubscriberServiceWithOrgCybergarageUpnpDevice:cdev withLong:timeout];
  }
}

- (void)renewSubscriberServiceWithLong:(jlong)timeout {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    [self renewSubscriberServiceWithOrgCybergarageUpnpDevice:dev withLong:timeout];
  }
}

- (void)renewSubscriberService {
  [self renewSubscriberServiceWithLong:OrgCybergarageUpnpEventSubscription_INFINITE_VALUE];
}

- (void)setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:(OrgCybergarageUpnpControlRenewSubscriber *)sub {
  JreStrongAssign(&renewSubscriber_, sub);
}

- (OrgCybergarageUpnpControlRenewSubscriber *)getRenewSubscriber {
  return renewSubscriber_;
}

- (jboolean)startWithNSString:(NSString *)target
                      withInt:(jint)mx {
  [self stop];
  jint retryCnt = 0;
  jint bindPort = [self getHTTPPort];
  OrgCybergarageHttpHTTPServerList *httpServerList = OrgCybergarageUpnpControlPoint_getHTTPServerList(self);
  while ([((OrgCybergarageHttpHTTPServerList *) nil_chk(httpServerList)) openWithInt:bindPort] == false) {
    retryCnt++;
    if (OrgCybergarageUpnpUPnP_SERVER_RETRY_COUNT < retryCnt) {
      OrgCybergarageUtilDebug_warningWithNSString_(JreStrcat("$I", @"Failed to open HTTP event listener port ", bindPort));
      return false;
    }
    [self setHTTPPortWithInt:bindPort - 1];
    bindPort = [self getHTTPPort];
  }
  [httpServerList addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:self];
  [httpServerList start];
  OrgCybergarageUpnpSsdpSSDPNotifySocketList *ssdpNotifySocketList = OrgCybergarageUpnpControlPoint_getSSDPNotifySocketList(self);
  if ([((OrgCybergarageUpnpSsdpSSDPNotifySocketList *) nil_chk(ssdpNotifySocketList)) open] == false) {
    OrgCybergarageUtilDebug_warningWithNSString_(@"Failed to open SSDP notify port 1900");
    return false;
  }
  [ssdpNotifySocketList setControlPointWithOrgCybergarageUpnpControlPoint:self];
  [ssdpNotifySocketList start];
  jint ssdpPort = [self getSSDPPort];
  retryCnt = 0;
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *ssdpSearchResponseSocketList = OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(self);
  while ([((OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *) nil_chk(ssdpSearchResponseSocketList)) openWithInt:ssdpPort] == false) {
    retryCnt++;
    if (OrgCybergarageUpnpUPnP_SERVER_RETRY_COUNT < retryCnt) {
      OrgCybergarageUtilDebug_warningWithNSString_(JreStrcat("$I", @"Failed to open SSDP search response port ", ssdpPort));
      return false;
    }
    [self setSSDPPortWithInt:ssdpPort - 1];
    ssdpPort = [self getSSDPPort];
  }
  [ssdpSearchResponseSocketList setControlPointWithOrgCybergarageUpnpControlPoint:self];
  [ssdpSearchResponseSocketList start];
  [self searchWithNSString:target withInt:mx];
  OrgCybergarageUpnpDeviceDisposer *disposer = create_OrgCybergarageUpnpDeviceDisposer_initWithOrgCybergarageUpnpControlPoint_(self);
  [self setDeviceDisposerWithOrgCybergarageUpnpDeviceDisposer:disposer];
  [disposer start];
  if ([self isNMPRMode] == true) {
    OrgCybergarageUpnpControlRenewSubscriber *renewSub = create_OrgCybergarageUpnpControlRenewSubscriber_initWithOrgCybergarageUpnpControlPoint_(self);
    [self setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:renewSub];
    [renewSub start];
  }
  return true;
}

- (jboolean)startWithNSString:(NSString *)target {
  return [self startWithNSString:target withInt:OrgCybergarageUpnpSsdpSSDP_DEFAULT_MSEARCH_MX];
}

- (jboolean)start {
  return [self startWithNSString:OrgCybergarageUpnpDeviceST_ROOT_DEVICE withInt:OrgCybergarageUpnpSsdpSSDP_DEFAULT_MSEARCH_MX];
}

- (jboolean)stop {
  [self unsubscribe];
  OrgCybergarageUpnpSsdpSSDPNotifySocketList *ssdpNotifySocketList = OrgCybergarageUpnpControlPoint_getSSDPNotifySocketList(self);
  [((OrgCybergarageUpnpSsdpSSDPNotifySocketList *) nil_chk(ssdpNotifySocketList)) stop];
  [ssdpNotifySocketList close];
  [ssdpNotifySocketList clear];
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *ssdpSearchResponseSocketList = OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(self);
  [((OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *) nil_chk(ssdpSearchResponseSocketList)) stop];
  [ssdpSearchResponseSocketList close];
  [ssdpSearchResponseSocketList clear];
  OrgCybergarageHttpHTTPServerList *httpServerList = OrgCybergarageUpnpControlPoint_getHTTPServerList(self);
  [((OrgCybergarageHttpHTTPServerList *) nil_chk(httpServerList)) stop];
  [httpServerList close];
  [httpServerList clear];
  OrgCybergarageUpnpDeviceDisposer *disposer = [self getDeviceDisposer];
  if (disposer != nil) {
    [disposer stop];
    [self setDeviceDisposerWithOrgCybergarageUpnpDeviceDisposer:nil];
  }
  OrgCybergarageUpnpControlRenewSubscriber *renewSub = [self getRenewSubscriber];
  if (renewSub != nil) {
    [renewSub stop];
    [self setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:nil];
  }
  OrgCybergarageUpnpDeviceList *dl = [self getDeviceList];
  for (jint i = 0; i < [((OrgCybergarageUpnpDeviceList *) nil_chk(dl)) size]; i++) {
    [self removeDeviceWithOrgCybergarageUpnpDevice:[dl getDeviceWithInt:i]];
  }
  return true;
}

- (void)setUserDataWithId:(id)data {
  JreStrongAssign(&userData_, data);
}

- (id)getUserData {
  return userData_;
}

- (void)print {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$I", @"Device Num = ", devCnt));
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("CI$$$I$J", '[', n, @"] ", [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getFriendlyName], @", ", [dev getLeaseTime], @", ", [dev getElapsedTime]));
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgCybergarageUpnpControlPoint class]);
  RELEASE_(ssdpNotifySocketList_);
  RELEASE_(ssdpSearchResponseSocketList_);
  RELEASE_(mutex_);
  RELEASE_(devNodeList_);
  RELEASE_(deviceDisposer_);
  RELEASE_(deviceNotifyListenerList_);
  RELEASE_(deviceSearchResponseListenerList_);
  RELEASE_(deviceChangeListenerList_);
  RELEASE_(httpServerList_);
  RELEASE_(eventListenerList_);
  RELEASE_(eventSubURI_);
  RELEASE_(renewSubscriber_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgCybergarageUpnpSsdpSSDPNotifySocketList;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPSearchResponseSocketList;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 8, 10, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x2, 11, 9, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDeviceList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDeviceDisposer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageHttpHTTPServerList;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 46, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 50, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 51, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 52, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 53, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 54, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpControlRenewSubscriber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 59, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 59, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getSSDPNotifySocketList);
  methods[1].selector = @selector(getSSDPSearchResponseSocketList);
  methods[2].selector = @selector(initWithInt:withInt:withJavaNetInetAddressArray:);
  methods[3].selector = @selector(initWithInt:withInt:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(java_finalize);
  methods[6].selector = @selector(lock);
  methods[7].selector = @selector(unlock);
  methods[8].selector = @selector(getSSDPPort);
  methods[9].selector = @selector(setSSDPPortWithInt:);
  methods[10].selector = @selector(getHTTPPort);
  methods[11].selector = @selector(setHTTPPortWithInt:);
  methods[12].selector = @selector(setNMPRModeWithBoolean:);
  methods[13].selector = @selector(isNMPRMode);
  methods[14].selector = @selector(addDeviceWithOrgCybergarageXmlNode:);
  methods[15].selector = @selector(addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[16].selector = @selector(getDeviceWithOrgCybergarageXmlNode:);
  methods[17].selector = @selector(getDeviceList);
  methods[18].selector = @selector(getDeviceWithNSString:);
  methods[19].selector = @selector(hasDeviceWithNSString:);
  methods[20].selector = @selector(removeDeviceWithOrgCybergarageXmlNode:);
  methods[21].selector = @selector(removeDeviceWithOrgCybergarageUpnpDevice:);
  methods[22].selector = @selector(removeDeviceWithNSString:);
  methods[23].selector = @selector(removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[24].selector = @selector(removeExpiredDevices);
  methods[25].selector = @selector(setExpiredDeviceMonitoringIntervalWithLong:);
  methods[26].selector = @selector(getExpiredDeviceMonitoringInterval);
  methods[27].selector = @selector(setDeviceDisposerWithOrgCybergarageUpnpDeviceDisposer:);
  methods[28].selector = @selector(getDeviceDisposer);
  methods[29].selector = @selector(addNotifyListenerWithOrgCybergarageUpnpDeviceNotifyListener:);
  methods[30].selector = @selector(removeNotifyListenerWithOrgCybergarageUpnpDeviceNotifyListener:);
  methods[31].selector = @selector(performNotifyListenerWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[32].selector = @selector(addSearchResponseListenerWithOrgCybergarageUpnpDeviceSearchResponseListener:);
  methods[33].selector = @selector(removeSearchResponseListenerWithOrgCybergarageUpnpDeviceSearchResponseListener:);
  methods[34].selector = @selector(performSearchResponseListenerWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[35].selector = @selector(addDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:);
  methods[36].selector = @selector(removeDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:);
  methods[37].selector = @selector(performAddDeviceListenerWithOrgCybergarageUpnpDevice:);
  methods[38].selector = @selector(performRemoveDeviceListenerWithOrgCybergarageUpnpDevice:);
  methods[39].selector = @selector(notifyReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[40].selector = @selector(searchResponseReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[41].selector = @selector(getSearchMx);
  methods[42].selector = @selector(setSearchMxWithInt:);
  methods[43].selector = @selector(searchWithNSString:withInt:);
  methods[44].selector = @selector(searchWithNSString:);
  methods[45].selector = @selector(search);
  methods[46].selector = @selector(getHTTPServerList);
  methods[47].selector = @selector(httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[48].selector = @selector(addEventListenerWithOrgCybergarageUpnpEventEventListener:);
  methods[49].selector = @selector(removeEventListenerWithOrgCybergarageUpnpEventEventListener:);
  methods[50].selector = @selector(performEventListenerWithNSString:withLong:withNSString:withNSString:);
  methods[51].selector = @selector(getEventSubURI);
  methods[52].selector = @selector(setEventSubURIWithNSString:);
  methods[53].selector = @selector(getEventSubCallbackURLWithNSString:);
  methods[54].selector = @selector(subscribeWithOrgCybergarageUpnpService:withLong:);
  methods[55].selector = @selector(subscribeWithOrgCybergarageUpnpService:);
  methods[56].selector = @selector(subscribeWithOrgCybergarageUpnpService:withNSString:withLong:);
  methods[57].selector = @selector(subscribeWithOrgCybergarageUpnpService:withNSString:);
  methods[58].selector = @selector(isSubscribedWithOrgCybergarageUpnpService:);
  methods[59].selector = @selector(unsubscribeWithOrgCybergarageUpnpService:);
  methods[60].selector = @selector(unsubscribeWithOrgCybergarageUpnpDevice:);
  methods[61].selector = @selector(unsubscribe);
  methods[62].selector = @selector(getSubscriberServiceWithNSString:);
  methods[63].selector = @selector(renewSubscriberServiceWithOrgCybergarageUpnpDevice:withLong:);
  methods[64].selector = @selector(renewSubscriberServiceWithLong:);
  methods[65].selector = @selector(renewSubscriberService);
  methods[66].selector = @selector(setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:);
  methods[67].selector = @selector(getRenewSubscriber);
  methods[68].selector = @selector(startWithNSString:withInt:);
  methods[69].selector = @selector(startWithNSString:);
  methods[70].selector = @selector(start);
  methods[71].selector = @selector(stop);
  methods[72].selector = @selector(setUserDataWithId:);
  methods[73].selector = @selector(getUserData);
  methods[74].selector = @selector(print);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_EVENTSUB_PORT", "I", .constantValue.asInt = OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_PORT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SSDP_PORT", "I", .constantValue.asInt = OrgCybergarageUpnpControlPoint_DEFAULT_SSDP_PORT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL", "I", .constantValue.asInt = OrgCybergarageUpnpControlPoint_DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_EVENTSUB_URI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "ssdpNotifySocketList_", "LOrgCybergarageUpnpSsdpSSDPNotifySocketList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ssdpSearchResponseSocketList_", "LOrgCybergarageUpnpSsdpSSDPSearchResponseSocketList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mutex_", "LOrgCybergarageUtilMutex;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ssdpPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "httpPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nmprMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "devNodeList_", "LOrgCybergarageXmlNodeList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceDisposer_", "LOrgCybergarageUpnpDeviceDisposer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "expiredDeviceMonitoringInterval_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceNotifyListenerList_", "LOrgCybergarageUtilListenerList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceSearchResponseListenerList_", "LOrgCybergarageUtilListenerList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceChangeListenerList_", "LOrgCybergarageUtilListenerList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "searchMx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "httpServerList_", "LOrgCybergarageHttpHTTPServerList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventListenerList_", "LOrgCybergarageUtilListenerList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventSubURI_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "renewSubscriber_", "LOrgCybergarageUpnpControlRenewSubscriber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II[LJavaNetInetAddress;", "II", "finalize", "setSSDPPort", "I", "setHTTPPort", "setNMPRMode", "Z", "addDevice", "LOrgCybergarageXmlNode;", "LOrgCybergarageUpnpSsdpSSDPPacket;", "getDevice", "LNSString;", "hasDevice", "removeDevice", "LOrgCybergarageUpnpDevice;", "setExpiredDeviceMonitoringInterval", "J", "setDeviceDisposer", "LOrgCybergarageUpnpDeviceDisposer;", "addNotifyListener", "LOrgCybergarageUpnpDeviceNotifyListener;", "removeNotifyListener", "performNotifyListener", "addSearchResponseListener", "LOrgCybergarageUpnpDeviceSearchResponseListener;", "removeSearchResponseListener", "performSearchResponseListener", "addDeviceChangeListener", "LOrgCybergarageUpnpDeviceDeviceChangeListener;", "removeDeviceChangeListener", "performAddDeviceListener", "performRemoveDeviceListener", "notifyReceived", "searchResponseReceived", "setSearchMx", "search", "LNSString;I", "httpRequestRecieved", "LOrgCybergarageHttpHTTPRequest;", "addEventListener", "LOrgCybergarageUpnpEventEventListener;", "removeEventListener", "performEventListener", "LNSString;JLNSString;LNSString;", "setEventSubURI", "getEventSubCallbackURL", "subscribe", "LOrgCybergarageUpnpService;J", "LOrgCybergarageUpnpService;", "LOrgCybergarageUpnpService;LNSString;J", "LOrgCybergarageUpnpService;LNSString;", "isSubscribed", "unsubscribe", "getSubscriberService", "renewSubscriberService", "LOrgCybergarageUpnpDevice;J", "setRenewSubscriber", "LOrgCybergarageUpnpControlRenewSubscriber;", "start", "setUserData", "LNSObject;", &OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_URI };
  static const J2ObjcClassInfo _OrgCybergarageUpnpControlPoint = { "ControlPoint", "org.cybergarage.upnp", ptrTable, methods, fields, 7, 0x1, 75, 22, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpControlPoint;
}

+ (void)initialize {
  if (self == [OrgCybergarageUpnpControlPoint class]) {
    {
      OrgCybergarageUpnpUPnP_initialize__();
    }
    J2OBJC_SET_INITIALIZED(OrgCybergarageUpnpControlPoint)
  }
}

@end

OrgCybergarageUpnpSsdpSSDPNotifySocketList *OrgCybergarageUpnpControlPoint_getSSDPNotifySocketList(OrgCybergarageUpnpControlPoint *self) {
  return self->ssdpNotifySocketList_;
}

OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList *OrgCybergarageUpnpControlPoint_getSSDPSearchResponseSocketList(OrgCybergarageUpnpControlPoint *self) {
  return self->ssdpSearchResponseSocketList_;
}

void OrgCybergarageUpnpControlPoint_initWithInt_withInt_withJavaNetInetAddressArray_(OrgCybergarageUpnpControlPoint *self, jint ssdpPort, jint httpPort, IOSObjectArray *binds) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  self->ssdpPort_ = 0;
  self->httpPort_ = 0;
  JreStrongAssignAndConsume(&self->devNodeList_, new_OrgCybergarageXmlNodeList_init());
  JreStrongAssignAndConsume(&self->deviceNotifyListenerList_, new_OrgCybergarageUtilListenerList_init());
  JreStrongAssignAndConsume(&self->deviceSearchResponseListenerList_, new_OrgCybergarageUtilListenerList_init());
  JreStrongAssignAndConsume(&self->deviceChangeListenerList_, new_OrgCybergarageUtilListenerList_init());
  self->searchMx_ = OrgCybergarageUpnpSsdpSSDP_DEFAULT_MSEARCH_MX;
  JreStrongAssignAndConsume(&self->httpServerList_, new_OrgCybergarageHttpHTTPServerList_init());
  JreStrongAssignAndConsume(&self->eventListenerList_, new_OrgCybergarageUtilListenerList_init());
  JreStrongAssign(&self->eventSubURI_, OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_URI);
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssignAndConsume(&self->ssdpNotifySocketList_, new_OrgCybergarageUpnpSsdpSSDPNotifySocketList_initWithJavaNetInetAddressArray_(binds));
  JreStrongAssignAndConsume(&self->ssdpSearchResponseSocketList_, new_OrgCybergarageUpnpSsdpSSDPSearchResponseSocketList_initWithJavaNetInetAddressArray_(binds));
  [self setSSDPPortWithInt:ssdpPort];
  [self setHTTPPortWithInt:httpPort];
  [self setDeviceDisposerWithOrgCybergarageUpnpDeviceDisposer:nil];
  [self setExpiredDeviceMonitoringIntervalWithLong:OrgCybergarageUpnpControlPoint_DEFAULT_EXPIRED_DEVICE_MONITORING_INTERVAL];
  [self setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:nil];
  [self setNMPRModeWithBoolean:false];
  [self setRenewSubscriberWithOrgCybergarageUpnpControlRenewSubscriber:nil];
}

OrgCybergarageUpnpControlPoint *new_OrgCybergarageUpnpControlPoint_initWithInt_withInt_withJavaNetInetAddressArray_(jint ssdpPort, jint httpPort, IOSObjectArray *binds) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpControlPoint, initWithInt_withInt_withJavaNetInetAddressArray_, ssdpPort, httpPort, binds)
}

OrgCybergarageUpnpControlPoint *create_OrgCybergarageUpnpControlPoint_initWithInt_withInt_withJavaNetInetAddressArray_(jint ssdpPort, jint httpPort, IOSObjectArray *binds) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpControlPoint, initWithInt_withInt_withJavaNetInetAddressArray_, ssdpPort, httpPort, binds)
}

void OrgCybergarageUpnpControlPoint_initWithInt_withInt_(OrgCybergarageUpnpControlPoint *self, jint ssdpPort, jint httpPort) {
  OrgCybergarageUpnpControlPoint_initWithInt_withInt_withJavaNetInetAddressArray_(self, ssdpPort, httpPort, nil);
}

OrgCybergarageUpnpControlPoint *new_OrgCybergarageUpnpControlPoint_initWithInt_withInt_(jint ssdpPort, jint httpPort) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpControlPoint, initWithInt_withInt_, ssdpPort, httpPort)
}

OrgCybergarageUpnpControlPoint *create_OrgCybergarageUpnpControlPoint_initWithInt_withInt_(jint ssdpPort, jint httpPort) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpControlPoint, initWithInt_withInt_, ssdpPort, httpPort)
}

void OrgCybergarageUpnpControlPoint_init(OrgCybergarageUpnpControlPoint *self) {
  OrgCybergarageUpnpControlPoint_initWithInt_withInt_(self, OrgCybergarageUpnpControlPoint_DEFAULT_SSDP_PORT, OrgCybergarageUpnpControlPoint_DEFAULT_EVENTSUB_PORT);
}

OrgCybergarageUpnpControlPoint *new_OrgCybergarageUpnpControlPoint_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpControlPoint, init)
}

OrgCybergarageUpnpControlPoint *create_OrgCybergarageUpnpControlPoint_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpControlPoint, init)
}

void OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode) {
  [((OrgCybergarageXmlNodeList *) nil_chk(self->devNodeList_)) addWithId:rootNode];
}

void OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageUpnpSsdpSSDPPacket *ssdpPacket) {
  @synchronized(self) {
    if ([((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(ssdpPacket)) isRootDevice] == false) return;
    NSString *usn = [ssdpPacket getUSN];
    NSString *udn = OrgCybergarageUpnpDeviceUSN_getUDNWithNSString_(usn);
    OrgCybergarageUpnpDevice *dev = [self getDeviceWithNSString:udn];
    if (dev != nil) {
      [dev setSSDPPacketWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
      return;
    }
    NSString *location = [ssdpPacket getLocation];
    @try {
      JavaNetURL *locationUrl = create_JavaNetURL_initWithNSString_(location);
      OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
      OrgCybergarageXmlNode *rootNode = [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaNetURL:locationUrl];
      OrgCybergarageUpnpDevice *rootDev = OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(self, rootNode);
      if (rootDev == nil) return;
      [rootDev setSSDPPacketWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
      OrgCybergarageUtilDebug_warningWithNSString_withJavaLangException_(@"Add root device", create_JavaLangException_initWithNSString_(JreStrcat("$$", @"received on ", [ssdpPacket getLocalAddress])));
      OrgCybergarageUpnpControlPoint_addDeviceWithOrgCybergarageXmlNode_(self, rootNode);
      [self performAddDeviceListenerWithOrgCybergarageUpnpDevice:rootDev];
    }
    @catch (JavaNetMalformedURLException *me) {
      OrgCybergarageUtilDebug_warningWithNSString_([ssdpPacket description]);
      OrgCybergarageUtilDebug_warningWithJavaLangException_(me);
    }
    @catch (OrgCybergarageXmlParserException *pe) {
      OrgCybergarageUtilDebug_warningWithNSString_([ssdpPacket description]);
      OrgCybergarageUtilDebug_warningWithJavaLangException_(pe);
    }
  }
}

OrgCybergarageUpnpDevice *OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode) {
  if (rootNode == nil) return nil;
  OrgCybergarageXmlNode *devNode = [rootNode getNodeWithNSString:OrgCybergarageUpnpDevice_ELEM_NAME];
  if (devNode == nil) return nil;
  return create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(rootNode, devNode);
}

void OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageXmlNode_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageXmlNode *rootNode) {
  OrgCybergarageUpnpDevice *dev = OrgCybergarageUpnpControlPoint_getDeviceWithOrgCybergarageXmlNode_(self, rootNode);
  if (dev != nil && [dev isRootDevice]) [self performRemoveDeviceListenerWithOrgCybergarageUpnpDevice:dev];
  [((OrgCybergarageXmlNodeList *) nil_chk(self->devNodeList_)) removeWithId:rootNode];
}

void OrgCybergarageUpnpControlPoint_removeDeviceWithOrgCybergarageUpnpSsdpSSDPPacket_(OrgCybergarageUpnpControlPoint *self, OrgCybergarageUpnpSsdpSSDPPacket *packet) {
  if ([((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(packet)) isByeBye] == false) return;
  NSString *usn = [packet getUSN];
  NSString *udn = OrgCybergarageUpnpDeviceUSN_getUDNWithNSString_(usn);
  [self removeDeviceWithNSString:udn];
}

OrgCybergarageHttpHTTPServerList *OrgCybergarageUpnpControlPoint_getHTTPServerList(OrgCybergarageUpnpControlPoint *self) {
  return self->httpServerList_;
}

NSString *OrgCybergarageUpnpControlPoint_getEventSubCallbackURLWithNSString_(OrgCybergarageUpnpControlPoint *self, NSString *host) {
  return OrgCybergarageNetHostInterface_getHostURLWithNSString_withInt_withNSString_(host, [self getHTTPPort], [self getEventSubURI]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpControlPoint)
