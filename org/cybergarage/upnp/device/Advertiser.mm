//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/device/Advertiser.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "org/cybergarage/upnp/Device.h"
#include "org/cybergarage/upnp/device/Advertiser.h"
#include "org/cybergarage/util/ThreadCore.h"

@interface OrgCybergarageUpnpDeviceAdvertiser () {
 @public
  OrgCybergarageUpnpDevice *device_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDeviceAdvertiser, device_, OrgCybergarageUpnpDevice *)

@implementation OrgCybergarageUpnpDeviceAdvertiser

- (instancetype)initWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  OrgCybergarageUpnpDeviceAdvertiser_initWithOrgCybergarageUpnpDevice_(self, dev);
  return self;
}

- (void)setDeviceWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  JreStrongAssign(&device_, dev);
}

- (OrgCybergarageUpnpDevice *)getDevice {
  return device_;
}

- (void)run {
  OrgCybergarageUpnpDevice *dev = [self getDevice];
  jlong leaseTime = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getLeaseTime];
  jlong notifyInterval;
  while ([self isRunnable] == true) {
    notifyInterval = (leaseTime / 4) + JreFpToLong(((jfloat) leaseTime * (JavaLangMath_random() * 0.25f)));
    notifyInterval *= 1000;
    @try {
      JavaLangThread_sleepWithLong_(notifyInterval);
    }
    @catch (JavaLangInterruptedException *e) {
    }
    [dev announce];
  }
}

- (void)dealloc {
  RELEASE_(device_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgCybergarageUpnpDevice:);
  methods[1].selector = @selector(setDeviceWithOrgCybergarageUpnpDevice:);
  methods[2].selector = @selector(getDevice);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "device_", "LOrgCybergarageUpnpDevice;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgCybergarageUpnpDevice;", "setDevice" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpDeviceAdvertiser = { "Advertiser", "org.cybergarage.upnp.device", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpDeviceAdvertiser;
}

@end

void OrgCybergarageUpnpDeviceAdvertiser_initWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDeviceAdvertiser *self, OrgCybergarageUpnpDevice *dev) {
  OrgCybergarageUtilThreadCore_init(self);
  [self setDeviceWithOrgCybergarageUpnpDevice:dev];
}

OrgCybergarageUpnpDeviceAdvertiser *new_OrgCybergarageUpnpDeviceAdvertiser_initWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *dev) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDeviceAdvertiser, initWithOrgCybergarageUpnpDevice_, dev)
}

OrgCybergarageUpnpDeviceAdvertiser *create_OrgCybergarageUpnpDeviceAdvertiser_initWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *dev) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDeviceAdvertiser, initWithOrgCybergarageUpnpDevice_, dev)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpDeviceAdvertiser)
