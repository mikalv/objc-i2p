//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/Device.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/URL.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "org/cybergarage/http/HTTP.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/http/HTTPResponse.h"
#include "org/cybergarage/http/HTTPServerList.h"
#include "org/cybergarage/http/HTTPStatus.h"
#include "org/cybergarage/net/HostInterface.h"
#include "org/cybergarage/soap/SOAPResponse.h"
#include "org/cybergarage/upnp/Action.h"
#include "org/cybergarage/upnp/ActionList.h"
#include "org/cybergarage/upnp/ArgumentList.h"
#include "org/cybergarage/upnp/Device.h"
#include "org/cybergarage/upnp/DeviceList.h"
#include "org/cybergarage/upnp/Icon.h"
#include "org/cybergarage/upnp/IconList.h"
#include "org/cybergarage/upnp/RootDescription.h"
#include "org/cybergarage/upnp/Service.h"
#include "org/cybergarage/upnp/ServiceList.h"
#include "org/cybergarage/upnp/StateVariable.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/upnp/UPnPStatus.h"
#include "org/cybergarage/upnp/control/ActionListener.h"
#include "org/cybergarage/upnp/control/ActionRequest.h"
#include "org/cybergarage/upnp/control/ActionResponse.h"
#include "org/cybergarage/upnp/control/ControlRequest.h"
#include "org/cybergarage/upnp/control/ControlResponse.h"
#include "org/cybergarage/upnp/control/QueryListener.h"
#include "org/cybergarage/upnp/control/QueryRequest.h"
#include "org/cybergarage/upnp/device/Advertiser.h"
#include "org/cybergarage/upnp/device/Description.h"
#include "org/cybergarage/upnp/device/InvalidDescriptionException.h"
#include "org/cybergarage/upnp/device/NTS.h"
#include "org/cybergarage/upnp/device/PresentationListener.h"
#include "org/cybergarage/upnp/device/ST.h"
#include "org/cybergarage/upnp/device/USN.h"
#include "org/cybergarage/upnp/event/Subscriber.h"
#include "org/cybergarage/upnp/event/Subscription.h"
#include "org/cybergarage/upnp/event/SubscriptionRequest.h"
#include "org/cybergarage/upnp/event/SubscriptionResponse.h"
#include "org/cybergarage/upnp/ssdp/SSDPNotifyRequest.h"
#include "org/cybergarage/upnp/ssdp/SSDPNotifySocket.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchResponse.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchResponseSocket.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchSocketList.h"
#include "org/cybergarage/upnp/xml/DeviceData.h"
#include "org/cybergarage/util/Debug.h"
#include "org/cybergarage/util/Mutex.h"
#include "org/cybergarage/util/TimerUtil.h"
#include "org/cybergarage/xml/Node.h"
#include "org/cybergarage/xml/Parser.h"
#include "org/cybergarage/xml/ParserException.h"
#include "org/cybergarage/xml/XML.h"

@interface OrgCybergarageUpnpDevice () {
 @public
  OrgCybergarageXmlNode *rootNode_;
  OrgCybergarageXmlNode *deviceNode_;
  OrgCybergarageUtilMutex *mutex_;
  jboolean wirelessMode_;
  NSString *devUUID_;
  jint bootId_;
  id<OrgCybergarageUpnpDevicePresentationListener> presentationListener_;
  JavaUtilHashMap *iconBytesMap_;
  id userData_;
}

- (void)setUUIDWithNSString:(NSString *)uuid;

- (void)updateUDN;

- (void)updateBootId;

- (void)updateConfigIdWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev;

- (OrgCybergarageUpnpXmlDeviceData *)getDeviceData;

- (void)setDescriptionFileWithJavaIoFile:(JavaIoFile *)file;

- (void)setDescriptionURIWithNSString:(NSString *)uri;

- (NSString *)getDescriptionURI;

- (jboolean)isDescriptionURIWithNSString:(NSString *)uri;

- (jboolean)initializeLoadedDescription OBJC_METHOD_FAMILY_NONE;

- (void)setURLBaseWithNSString:(NSString *)value;

- (void)updateURLBaseWithNSString:(NSString *)host;

- (jboolean)isPresentationRequestWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq;

- (NSString *)getNotifyDeviceNT;

- (NSString *)getNotifyDeviceUSN;

- (NSString *)getNotifyDeviceTypeNT;

- (NSString *)getNotifyDeviceTypeUSN;

- (IOSByteArray *)getDescriptionDataWithNSString:(NSString *)host;

- (void)httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq;

- (void)httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq;

- (void)soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)soapReq;

- (void)soapActionRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)soapReq;

- (void)deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq
                                                  withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service;

- (void)invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq;

- (void)invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq;

- (void)deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest:(OrgCybergarageUpnpControlActionRequest *)ctlReq
                                                withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service;

- (void)deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest:(OrgCybergarageUpnpControlQueryRequest *)ctlReq
                                              withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service;

- (void)upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq
                                                                          withInt:(jint)code;

- (void)deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq;

- (void)deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                         withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq;

- (void)deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                           withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq;

- (void)deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                        withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq;

- (OrgCybergarageHttpHTTPServerList *)getHTTPServerList;

- (OrgCybergarageUpnpSsdpSSDPSearchSocketList *)getSSDPSearchSocketList;

- (void)setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser:(OrgCybergarageUpnpDeviceAdvertiser *)adv;

- (OrgCybergarageUpnpDeviceAdvertiser *)getAdvertiser;

- (jboolean)stopWithBoolean:(jboolean)doByeBye;

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, rootNode_, OrgCybergarageXmlNode *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, deviceNode_, OrgCybergarageXmlNode *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, mutex_, OrgCybergarageUtilMutex *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, devUUID_, NSString *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, presentationListener_, id<OrgCybergarageUpnpDevicePresentationListener>)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, iconBytesMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpDevice, userData_, id)

inline NSString *OrgCybergarageUpnpDevice_get_CONFIG_ID(void);
static NSString *OrgCybergarageUpnpDevice_CONFIG_ID = @"configId";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, CONFIG_ID, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_URLBASE_NAME(void);
static NSString *OrgCybergarageUpnpDevice_URLBASE_NAME = @"URLBase";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, URLBASE_NAME, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_DEVICE_TYPE(void);
static NSString *OrgCybergarageUpnpDevice_DEVICE_TYPE = @"deviceType";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, DEVICE_TYPE, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_FRIENDLY_NAME(void);
static NSString *OrgCybergarageUpnpDevice_FRIENDLY_NAME = @"friendlyName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, FRIENDLY_NAME, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MANUFACTURE(void);
static NSString *OrgCybergarageUpnpDevice_MANUFACTURE = @"manufacturer";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MANUFACTURE, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MANUFACTURE_URL(void);
static NSString *OrgCybergarageUpnpDevice_MANUFACTURE_URL = @"manufacturerURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MANUFACTURE_URL, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MODEL_DESCRIPTION(void);
static NSString *OrgCybergarageUpnpDevice_MODEL_DESCRIPTION = @"modelDescription";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MODEL_DESCRIPTION, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MODEL_NAME(void);
static NSString *OrgCybergarageUpnpDevice_MODEL_NAME = @"modelName";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MODEL_NAME, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MODEL_NUMBER(void);
static NSString *OrgCybergarageUpnpDevice_MODEL_NUMBER = @"modelNumber";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MODEL_NUMBER, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_MODEL_URL(void);
static NSString *OrgCybergarageUpnpDevice_MODEL_URL = @"modelURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, MODEL_URL, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_SERIAL_NUMBER(void);
static NSString *OrgCybergarageUpnpDevice_SERIAL_NUMBER = @"serialNumber";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, SERIAL_NUMBER, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_UDN(void);
static NSString *OrgCybergarageUpnpDevice_UDN = @"UDN";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, UDN, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_UPC(void);
static NSString *OrgCybergarageUpnpDevice_UPC = @"UPC";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, UPC, NSString *)

inline NSString *OrgCybergarageUpnpDevice_get_presentationURL(void);
static NSString *OrgCybergarageUpnpDevice_presentationURL = @"presentationURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpDevice, presentationURL, NSString *)

inline JavaUtilCalendar *OrgCybergarageUpnpDevice_get_cal(void);
inline JavaUtilCalendar *OrgCybergarageUpnpDevice_set_cal(JavaUtilCalendar *value);
static JavaUtilCalendar *OrgCybergarageUpnpDevice_cal;
J2OBJC_STATIC_FIELD_OBJ(OrgCybergarageUpnpDevice, cal, JavaUtilCalendar *)

__attribute__((unused)) static void OrgCybergarageUpnpDevice_setUUIDWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uuid);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_updateUDN(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_updateBootId(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_updateConfigIdWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpDevice *dev);

__attribute__((unused)) static OrgCybergarageUpnpXmlDeviceData *OrgCybergarageUpnpDevice_getDeviceData(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(OrgCybergarageUpnpDevice *self, JavaIoFile *file);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_setDescriptionURIWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uri);

__attribute__((unused)) static NSString *OrgCybergarageUpnpDevice_getDescriptionURI(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static jboolean OrgCybergarageUpnpDevice_isDescriptionURIWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uri);

__attribute__((unused)) static jboolean OrgCybergarageUpnpDevice_initializeLoadedDescription(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_setURLBaseWithNSString_(OrgCybergarageUpnpDevice *self, NSString *value);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_updateURLBaseWithNSString_(OrgCybergarageUpnpDevice *self, NSString *host);

__attribute__((unused)) static jboolean OrgCybergarageUpnpDevice_isPresentationRequestWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq);

__attribute__((unused)) static NSString *OrgCybergarageUpnpDevice_getNotifyDeviceNT(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpDevice_getNotifyDeviceUSN(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpDevice_getNotifyDeviceTypeNT(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpDevice_getNotifyDeviceTypeUSN(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static IOSByteArray *OrgCybergarageUpnpDevice_getDescriptionDataWithNSString_(OrgCybergarageUpnpDevice *self, NSString *host);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *soapReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_soapActionRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *soapReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq, OrgCybergarageUpnpService *service);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlActionRequest *ctlReq, OrgCybergarageUpnpService *service);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlQueryRequest *ctlReq, OrgCybergarageUpnpService *service);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpEventSubscriptionRequest *subReq, jint code);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpEventSubscriptionRequest *subReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq);

__attribute__((unused)) static OrgCybergarageHttpHTTPServerList *OrgCybergarageUpnpDevice_getHTTPServerList(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static OrgCybergarageUpnpSsdpSSDPSearchSocketList *OrgCybergarageUpnpDevice_getSSDPSearchSocketList(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static void OrgCybergarageUpnpDevice_setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpDeviceAdvertiser *adv);

__attribute__((unused)) static OrgCybergarageUpnpDeviceAdvertiser *OrgCybergarageUpnpDevice_getAdvertiser(OrgCybergarageUpnpDevice *self);

__attribute__((unused)) static jboolean OrgCybergarageUpnpDevice_stopWithBoolean_(OrgCybergarageUpnpDevice *self, jboolean doByeBye);

J2OBJC_INITIALIZED_DEFN(OrgCybergarageUpnpDevice)

NSString *OrgCybergarageUpnpDevice_ELEM_NAME = @"device";
NSString *OrgCybergarageUpnpDevice_UPNP_ROOTDEVICE = @"upnp:rootdevice";
NSString *OrgCybergarageUpnpDevice_DEFAULT_DESCRIPTION_URI = @"/description.xml";
NSString *OrgCybergarageUpnpDevice_DEFAULT_PRESENTATION_URI = @"/presentation";

@implementation OrgCybergarageUpnpDevice

+ (NSString *)ELEM_NAME {
  return OrgCybergarageUpnpDevice_ELEM_NAME;
}

+ (NSString *)UPNP_ROOTDEVICE {
  return OrgCybergarageUpnpDevice_UPNP_ROOTDEVICE;
}

+ (jint)DEFAULT_STARTUP_WAIT_TIME {
  return OrgCybergarageUpnpDevice_DEFAULT_STARTUP_WAIT_TIME;
}

+ (jint)DEFAULT_DISCOVERY_WAIT_TIME {
  return OrgCybergarageUpnpDevice_DEFAULT_DISCOVERY_WAIT_TIME;
}

+ (jint)DEFAULT_LEASE_TIME {
  return OrgCybergarageUpnpDevice_DEFAULT_LEASE_TIME;
}

+ (jint)HTTP_DEFAULT_PORT {
  return OrgCybergarageUpnpDevice_HTTP_DEFAULT_PORT;
}

+ (NSString *)DEFAULT_DESCRIPTION_URI {
  return OrgCybergarageUpnpDevice_DEFAULT_DESCRIPTION_URI;
}

+ (NSString *)DEFAULT_PRESENTATION_URI {
  return OrgCybergarageUpnpDevice_DEFAULT_PRESENTATION_URI;
}

- (OrgCybergarageXmlNode *)getRootNode {
  if (rootNode_ != nil) return rootNode_;
  if (deviceNode_ == nil) return nil;
  return [deviceNode_ getRootNode];
}

- (OrgCybergarageXmlNode *)getDeviceNode {
  return deviceNode_;
}

- (void)setRootNodeWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  JreStrongAssign(&rootNode_, node);
}

- (void)setDeviceNodeWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  JreStrongAssign(&deviceNode_, node);
}

- (instancetype)initWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)root
                    withOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)device {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, root, device);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpDevice_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)device {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(self, device);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)descriptionFile {
  OrgCybergarageUpnpDevice_initWithJavaIoFile_(self, descriptionFile);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input {
  OrgCybergarageUpnpDevice_initWithJavaIoInputStream_(self, input);
  return self;
}

- (instancetype)initWithNSString:(NSString *)descriptionFileName {
  OrgCybergarageUpnpDevice_initWithNSString_(self, descriptionFileName);
  return self;
}

- (void)lock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) lock];
}

- (void)unlock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) unlock];
}

- (NSString *)getAbsoluteURLWithNSString:(NSString *)urlString
                            withNSString:(NSString *)baseURLStr
                            withNSString:(NSString *)locationURLStr {
  if ((urlString == nil) || ([((NSString *) nil_chk(urlString)) java_length] <= 0)) return @"";
  @try {
    JavaNetURL *url = create_JavaNetURL_initWithNSString_(urlString);
    return [url description];
  }
  @catch (JavaLangException *e) {
  }
  if ((baseURLStr == nil) || ([((NSString *) nil_chk(baseURLStr)) java_length] <= 0)) {
    if ((locationURLStr != nil) && (0 < [((NSString *) nil_chk(locationURLStr)) java_length])) {
      if (![((NSString *) nil_chk(locationURLStr)) java_hasSuffix:@"/"] || ![((NSString *) nil_chk(urlString)) java_hasPrefix:@"/"]) {
        NSString *absUrl;
        if (![locationURLStr java_hasSuffix:@"/"]) {
          if ([((NSString *) nil_chk(urlString)) java_hasPrefix:@"/"]) absUrl = JreStrcat("$$", [locationURLStr java_substring:0 endIndex:[locationURLStr java_lastIndexOf:'/']], urlString);
          else absUrl = JreStrcat("$$", [locationURLStr java_substring:0 endIndex:[locationURLStr java_lastIndexOf:'/'] + 1], urlString);
        }
        else {
          absUrl = JreStrcat("$$", locationURLStr, urlString);
        }
        @try {
          JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
          return [url description];
        }
        @catch (JavaLangException *e) {
        }
      }
      else {
        NSString *absUrl = JreStrcat("$$", locationURLStr, [((NSString *) nil_chk(urlString)) java_substring:1]);
        @try {
          JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
          return [url description];
        }
        @catch (JavaLangException *e) {
        }
      }
      NSString *absUrl = OrgCybergarageHttpHTTP_getAbsoluteURLWithNSString_withNSString_(locationURLStr, urlString);
      @try {
        JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
        return [url description];
      }
      @catch (JavaLangException *e) {
      }
      OrgCybergarageUpnpDevice *rootDev = [self getRootDevice];
      if (rootDev != nil) {
        NSString *location = [rootDev getLocation];
        NSString *locationHost = OrgCybergarageHttpHTTP_getHostWithNSString_(location);
        jint locationPort = OrgCybergarageHttpHTTP_getPortWithNSString_(location);
        baseURLStr = OrgCybergarageHttpHTTP_getRequestHostURLWithNSString_withInt_(locationHost, locationPort);
      }
    }
  }
  if ((baseURLStr != nil) && (0 < [((NSString *) nil_chk(baseURLStr)) java_length])) {
    if (![((NSString *) nil_chk(baseURLStr)) java_hasSuffix:@"/"] || ![((NSString *) nil_chk(urlString)) java_hasPrefix:@"/"]) {
      NSString *absUrl = JreStrcat("$$", baseURLStr, urlString);
      @try {
        JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
        return [url description];
      }
      @catch (JavaLangException *e) {
      }
    }
    else {
      NSString *absUrl = JreStrcat("$$", baseURLStr, [((NSString *) nil_chk(urlString)) java_substring:1]);
      @try {
        JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
        return [url description];
      }
      @catch (JavaLangException *e) {
      }
    }
    NSString *absUrl = OrgCybergarageHttpHTTP_getAbsoluteURLWithNSString_withNSString_(baseURLStr, urlString);
    @try {
      JavaNetURL *url = create_JavaNetURL_initWithNSString_(absUrl);
      return [url description];
    }
    @catch (JavaLangException *e) {
    }
  }
  return urlString;
}

- (NSString *)getAbsoluteURLWithNSString:(NSString *)urlString {
  NSString *baseURLStr = nil;
  NSString *locationURLStr = nil;
  OrgCybergarageUpnpDevice *rootDev = [self getRootDevice];
  if (rootDev != nil) {
    baseURLStr = [rootDev getURLBase];
    locationURLStr = [rootDev getLocation];
  }
  return [self getAbsoluteURLWithNSString:urlString withNSString:baseURLStr withNSString:locationURLStr];
}

- (void)setNMPRModeWithBoolean:(jboolean)flag {
  OrgCybergarageXmlNode *devNode = [self getDeviceNode];
  if (devNode == nil) return;
  if (flag == true) {
    [devNode setNodeWithNSString:OrgCybergarageUpnpUPnP_INMPR03 withNSString:OrgCybergarageUpnpUPnP_INMPR03_VERSION];
    [devNode removeNodeWithNSString:OrgCybergarageUpnpDevice_URLBASE_NAME];
  }
  else {
    [devNode removeNodeWithNSString:OrgCybergarageUpnpUPnP_INMPR03];
  }
}

- (jboolean)isNMPRMode {
  OrgCybergarageXmlNode *devNode = [self getDeviceNode];
  if (devNode == nil) return false;
  return ([devNode getNodeWithNSString:OrgCybergarageUpnpUPnP_INMPR03] != nil) ? true : false;
}

- (void)setWirelessModeWithBoolean:(jboolean)flag {
  wirelessMode_ = flag;
}

- (jboolean)isWirelessMode {
  return wirelessMode_;
}

- (jint)getSSDPAnnounceCount {
  if ([self isNMPRMode] == true && [self isWirelessMode] == true) return OrgCybergarageUpnpUPnP_INMPR03_DISCOVERY_OVER_WIRELESS_COUNT;
  return 1;
}

- (void)setUUIDWithNSString:(NSString *)uuid {
  OrgCybergarageUpnpDevice_setUUIDWithNSString_(self, uuid);
}

- (NSString *)getUUID {
  return self->devUUID_;
}

- (void)updateUDN {
  OrgCybergarageUpnpDevice_updateUDN(self);
}

- (void)updateBootId {
  OrgCybergarageUpnpDevice_updateBootId(self);
}

- (jint)getBootId {
  return self->bootId_;
}

- (void)updateConfigIdWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  OrgCybergarageUpnpDevice_updateConfigIdWithOrgCybergarageUpnpDevice_(self, dev);
}

- (void)updateConfigId {
  OrgCybergarageUpnpDevice_updateConfigIdWithOrgCybergarageUpnpDevice_(self, self);
}

- (jint)getConfigId {
  OrgCybergarageXmlNode *devNode = [self getDeviceNode];
  if (devNode == nil) return 0;
  return [devNode getAttributeIntegerValueWithNSString:OrgCybergarageUpnpDevice_CONFIG_ID];
}

- (OrgCybergarageUpnpDevice *)getRootDevice {
  OrgCybergarageXmlNode *rootNode = [self getRootNode];
  if (rootNode == nil) return nil;
  OrgCybergarageXmlNode *devNode = [rootNode getNodeWithNSString:OrgCybergarageUpnpDevice_ELEM_NAME];
  if (devNode == nil) return nil;
  return create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(rootNode, devNode);
}

- (OrgCybergarageUpnpDevice *)getParentDevice {
  if ([self isRootDevice]) return nil;
  OrgCybergarageXmlNode *devNode = [self getDeviceNode];
  OrgCybergarageXmlNode *aux = nil;
  aux = [((OrgCybergarageXmlNode *) nil_chk([((OrgCybergarageXmlNode *) nil_chk(devNode)) getParentNode])) getParentNode];
  return create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(aux);
}

- (void)addServiceWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)s {
  OrgCybergarageXmlNode *serviceListNode = [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeWithNSString:OrgCybergarageUpnpServiceList_ELEM_NAME];
  if (serviceListNode == nil) {
    serviceListNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpServiceList_ELEM_NAME);
    [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) addNodeWithOrgCybergarageXmlNode:serviceListNode];
  }
  [serviceListNode addNodeWithOrgCybergarageXmlNode:[((OrgCybergarageUpnpService *) nil_chk(s)) getServiceNode]];
}

- (void)addDeviceWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)d {
  OrgCybergarageXmlNode *deviceListNode = [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeWithNSString:OrgCybergarageUpnpDeviceList_ELEM_NAME];
  if (deviceListNode == nil) {
    deviceListNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpDeviceList_ELEM_NAME);
    [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) addNodeWithOrgCybergarageXmlNode:deviceListNode];
  }
  [deviceListNode addNodeWithOrgCybergarageXmlNode:[((OrgCybergarageUpnpDevice *) nil_chk(d)) getDeviceNode]];
  [d setRootNodeWithOrgCybergarageXmlNode:nil];
  if ([self getRootNode] == nil) {
    OrgCybergarageXmlNode *root = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpRootDescription_ROOT_ELEMENT);
    [root setNameSpaceWithNSString:@"" withNSString:OrgCybergarageUpnpRootDescription_ROOT_ELEMENT_NAMESPACE];
    OrgCybergarageXmlNode *spec = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpRootDescription_SPECVERSION_ELEMENT);
    OrgCybergarageXmlNode *maj = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpRootDescription_MAJOR_ELEMENT);
    [maj setValueWithNSString:@"1"];
    OrgCybergarageXmlNode *min = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpRootDescription_MINOR_ELEMENT);
    [min setValueWithNSString:@"0"];
    [spec addNodeWithOrgCybergarageXmlNode:maj];
    [spec addNodeWithOrgCybergarageXmlNode:min];
    [root addNodeWithOrgCybergarageXmlNode:spec];
    [self setRootNodeWithOrgCybergarageXmlNode:root];
  }
}

- (OrgCybergarageUpnpXmlDeviceData *)getDeviceData {
  return OrgCybergarageUpnpDevice_getDeviceData(self);
}

- (void)setDescriptionFileWithJavaIoFile:(JavaIoFile *)file {
  OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(self, file);
}

- (JavaIoFile *)getDescriptionFile {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getDescriptionFile];
}

- (void)setDescriptionURIWithNSString:(NSString *)uri {
  OrgCybergarageUpnpDevice_setDescriptionURIWithNSString_(self, uri);
}

- (NSString *)getDescriptionURI {
  return OrgCybergarageUpnpDevice_getDescriptionURI(self);
}

- (jboolean)isDescriptionURIWithNSString:(NSString *)uri {
  return OrgCybergarageUpnpDevice_isDescriptionURIWithNSString_(self, uri);
}

- (NSString *)getDescriptionFilePath {
  JavaIoFile *descriptionFile = [self getDescriptionFile];
  if (descriptionFile == nil) return @"";
  return [((JavaIoFile *) nil_chk([descriptionFile getAbsoluteFile])) getParent];
}

- (jboolean)loadDescriptionWithJavaIoInputStream:(JavaIoInputStream *)input {
  @try {
    OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
    JreStrongAssign(&rootNode_, [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaIoInputStream:input]);
    if (rootNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_(OrgCybergarageUpnpDeviceDescription_NOROOT_EXCEPTION);
    JreStrongAssign(&deviceNode_, [rootNode_ getNodeWithNSString:OrgCybergarageUpnpDevice_ELEM_NAME]);
    if (deviceNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_(OrgCybergarageUpnpDeviceDescription_NOROOTDEVICE_EXCEPTION);
  }
  @catch (OrgCybergarageXmlParserException *e) {
    @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithJavaLangException_(e);
  }
  if (OrgCybergarageUpnpDevice_initializeLoadedDescription(self) == false) return false;
  OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(self, nil);
  return true;
}

- (jboolean)loadDescriptionWithNSString:(NSString *)descString {
  @try {
    OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
    JreStrongAssign(&rootNode_, [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithNSString:descString]);
    if (rootNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_(OrgCybergarageUpnpDeviceDescription_NOROOT_EXCEPTION);
    JreStrongAssign(&deviceNode_, [rootNode_ getNodeWithNSString:OrgCybergarageUpnpDevice_ELEM_NAME]);
    if (deviceNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_(OrgCybergarageUpnpDeviceDescription_NOROOTDEVICE_EXCEPTION);
  }
  @catch (OrgCybergarageXmlParserException *e) {
    @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithJavaLangException_(e);
  }
  if (OrgCybergarageUpnpDevice_initializeLoadedDescription(self) == false) return false;
  OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(self, nil);
  return true;
}

- (jboolean)loadDescriptionWithJavaIoFile:(JavaIoFile *)file {
  @try {
    OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
    JreStrongAssign(&rootNode_, [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaIoFile:file]);
    if (rootNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_withJavaIoFile_(OrgCybergarageUpnpDeviceDescription_NOROOT_EXCEPTION, file);
    JreStrongAssign(&deviceNode_, [rootNode_ getNodeWithNSString:OrgCybergarageUpnpDevice_ELEM_NAME]);
    if (deviceNode_ == nil) @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithNSString_withJavaIoFile_(OrgCybergarageUpnpDeviceDescription_NOROOTDEVICE_EXCEPTION, file);
  }
  @catch (OrgCybergarageXmlParserException *e) {
    @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithJavaLangException_(e);
  }
  if (OrgCybergarageUpnpDevice_initializeLoadedDescription(self) == false) return false;
  OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(self, file);
  return true;
}

- (jboolean)initializeLoadedDescription {
  return OrgCybergarageUpnpDevice_initializeLoadedDescription(self);
}

+ (jboolean)isDeviceNodeWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  return OrgCybergarageUpnpDevice_isDeviceNodeWithOrgCybergarageXmlNode_(node);
}

- (jboolean)isRootDevice {
  return [((NSString *) nil_chk([((OrgCybergarageXmlNode *) nil_chk([((OrgCybergarageXmlNode *) nil_chk([self getRootNode])) getNodeWithNSString:@"device"])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_UDN])) isEqual:[self getUDN]];
}

- (void)setSSDPPacketWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)packet {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setSSDPPacketWithOrgCybergarageUpnpSsdpSSDPPacket:packet];
}

- (OrgCybergarageUpnpSsdpSSDPPacket *)getSSDPPacket {
  if ([self isRootDevice] == false) return nil;
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getSSDPPacket];
}

- (void)setLocationWithNSString:(NSString *)value {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setLocationWithNSString:value];
}

- (NSString *)getLocation {
  OrgCybergarageUpnpSsdpSSDPPacket *packet = [self getSSDPPacket];
  if (packet != nil) return [packet getLocation];
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getLocation];
}

- (void)setLeaseTimeWithInt:(jint)value {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setLeaseTimeWithInt:value];
  OrgCybergarageUpnpDeviceAdvertiser *adv = OrgCybergarageUpnpDevice_getAdvertiser(self);
  if (adv != nil) {
    [self announce];
    [adv restart];
  }
}

- (jint)getLeaseTime {
  OrgCybergarageUpnpSsdpSSDPPacket *packet = [self getSSDPPacket];
  if (packet != nil) return [packet getLeaseTime];
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getLeaseTime];
}

- (jlong)getTimeStamp {
  OrgCybergarageUpnpSsdpSSDPPacket *packet = [self getSSDPPacket];
  if (packet != nil) return [packet getTimeStamp];
  return 0;
}

- (jlong)getElapsedTime {
  return (JavaLangSystem_currentTimeMillis() - [self getTimeStamp]) / 1000;
}

- (jboolean)isExpired {
  jlong elipsedTime = [self getElapsedTime];
  jlong leaseTime = [self getLeaseTime] + OrgCybergarageUpnpUPnP_DEFAULT_EXPIRED_DEVICE_EXTRA_TIME;
  if (leaseTime < elipsedTime) return true;
  return false;
}

- (void)setURLBaseWithNSString:(NSString *)value {
  OrgCybergarageUpnpDevice_setURLBaseWithNSString_(self, value);
}

- (void)updateURLBaseWithNSString:(NSString *)host {
  OrgCybergarageUpnpDevice_updateURLBaseWithNSString_(self, host);
}

- (NSString *)getURLBase {
  if ([self isRootDevice] == true) return [((OrgCybergarageXmlNode *) nil_chk([self getRootNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_URLBASE_NAME];
  return @"";
}

- (void)setDeviceTypeWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_DEVICE_TYPE withNSString:value];
}

- (NSString *)getDeviceType {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_DEVICE_TYPE];
}

- (jboolean)isDeviceTypeWithNSString:(NSString *)value {
  if (value == nil) return false;
  return [value isEqual:[self getDeviceType]];
}

- (void)setFriendlyNameWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_FRIENDLY_NAME withNSString:value];
}

- (NSString *)getFriendlyName {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_FRIENDLY_NAME];
}

- (void)setManufactureWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MANUFACTURE withNSString:value];
}

- (NSString *)getManufacture {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MANUFACTURE];
}

- (void)setManufactureURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MANUFACTURE_URL withNSString:value];
}

- (NSString *)getManufactureURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MANUFACTURE_URL];
}

- (void)setModelDescriptionWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MODEL_DESCRIPTION withNSString:value];
}

- (NSString *)getModelDescription {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MODEL_DESCRIPTION];
}

- (void)setModelNameWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MODEL_NAME withNSString:value];
}

- (NSString *)getModelName {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MODEL_NAME];
}

- (void)setModelNumberWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MODEL_NUMBER withNSString:value];
}

- (NSString *)getModelNumber {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MODEL_NUMBER];
}

- (void)setModelURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_MODEL_URL withNSString:value];
}

- (NSString *)getModelURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_MODEL_URL];
}

- (void)setSerialNumberWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_SERIAL_NUMBER withNSString:value];
}

- (NSString *)getSerialNumber {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_SERIAL_NUMBER];
}

- (void)setUDNWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_UDN withNSString:value];
}

- (NSString *)getUDN {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_UDN];
}

- (jboolean)hasUDN {
  NSString *udn = [self getUDN];
  if (udn == nil || [udn java_length] <= 0) return false;
  return true;
}

- (void)setUPCWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_UPC withNSString:value];
}

- (NSString *)getUPC {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_UPC];
}

- (void)setPresentationURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) setNodeWithNSString:OrgCybergarageUpnpDevice_presentationURL withNSString:value];
}

- (NSString *)getPresentationURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeValueWithNSString:OrgCybergarageUpnpDevice_presentationURL];
}

- (jboolean)removePresentationURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) removeNodeWithNSString:OrgCybergarageUpnpDevice_presentationURL];
}

- (jboolean)isPresentationRequestWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  return OrgCybergarageUpnpDevice_isPresentationRequestWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
}

- (void)setPresentationListenerWithOrgCybergarageUpnpDevicePresentationListener:(id<OrgCybergarageUpnpDevicePresentationListener>)listener {
  JreStrongAssign(&self->presentationListener_, listener);
  if (listener != nil) {
    [self setPresentationURLWithNSString:OrgCybergarageUpnpDevice_DEFAULT_PRESENTATION_URI];
  }
  else {
    [self removePresentationURL];
  }
}

- (jboolean)hasPresentationListener {
  return (self->presentationListener_ != nil) ? true : false;
}

- (id<OrgCybergarageUpnpDevicePresentationListener>)getPresentationListener {
  return self->presentationListener_;
}

- (OrgCybergarageUpnpDeviceList *)getDeviceList {
  OrgCybergarageUpnpDeviceList *devList = create_OrgCybergarageUpnpDeviceList_init();
  OrgCybergarageXmlNode *devListNode = [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeWithNSString:OrgCybergarageUpnpDeviceList_ELEM_NAME];
  if (devListNode == nil) return devList;
  jint nNode = [devListNode getNNodes];
  for (jint n = 0; n < nNode; n++) {
    OrgCybergarageXmlNode *node = [devListNode getNodeWithInt:n];
    if (OrgCybergarageUpnpDevice_isDeviceNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpDevice *dev = create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(node);
    [devList addWithId:dev];
  }
  return devList;
}

- (jboolean)isDeviceWithNSString:(NSString *)name {
  if (name == nil) return false;
  if ([name java_hasSuffix:[self getUDN]] == true) return true;
  if ([name isEqual:[self getFriendlyName]] == true) return true;
  if ([name java_hasSuffix:[self getDeviceType]] == true) return true;
  return false;
}

- (OrgCybergarageUpnpDevice *)getDeviceWithNSString:(NSString *)name {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    if ([((OrgCybergarageUpnpDevice *) nil_chk(dev)) isDeviceWithNSString:name] == true) return dev;
    OrgCybergarageUpnpDevice *cdev = [dev getDeviceWithNSString:name];
    if (cdev != nil) return cdev;
  }
  return nil;
}

- (OrgCybergarageUpnpDevice *)getDeviceByDescriptionURIWithNSString:(NSString *)uri {
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    if (OrgCybergarageUpnpDevice_isDescriptionURIWithNSString_(nil_chk(dev), uri) == true) return dev;
    OrgCybergarageUpnpDevice *cdev = [dev getDeviceByDescriptionURIWithNSString:uri];
    if (cdev != nil) return cdev;
  }
  return nil;
}

- (OrgCybergarageUpnpServiceList *)getServiceList {
  OrgCybergarageUpnpServiceList *serviceList = create_OrgCybergarageUpnpServiceList_init();
  OrgCybergarageXmlNode *serviceListNode = [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeWithNSString:OrgCybergarageUpnpServiceList_ELEM_NAME];
  if (serviceListNode == nil) return serviceList;
  jint nNode = [serviceListNode getNNodes];
  for (jint n = 0; n < nNode; n++) {
    OrgCybergarageXmlNode *node = [serviceListNode getNodeWithInt:n];
    if (OrgCybergarageUpnpService_isServiceNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpService *service = create_OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(node);
    [serviceList addWithId:service];
  }
  return serviceList;
}

- (OrgCybergarageUpnpService *)getServiceWithNSString:(NSString *)name {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) isServiceWithNSString:name] == true) return service;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceWithNSString:name];
    if (service != nil) return service;
  }
  return nil;
}

- (OrgCybergarageUpnpService *)getServiceBySCPDURLWithNSString:(NSString *)searchUrl {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) isSCPDURLWithNSString:searchUrl] == true) return service;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceBySCPDURLWithNSString:searchUrl];
    if (service != nil) return service;
  }
  return nil;
}

- (OrgCybergarageUpnpService *)getServiceByControlURLWithNSString:(NSString *)searchUrl {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) isControlURLWithNSString:searchUrl] == true) return service;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceByControlURLWithNSString:searchUrl];
    if (service != nil) return service;
  }
  return nil;
}

- (OrgCybergarageUpnpService *)getServiceByEventSubURLWithNSString:(NSString *)searchUrl {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if ([((OrgCybergarageUpnpService *) nil_chk(service)) isEventSubURLWithNSString:searchUrl] == true) return service;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceByEventSubURLWithNSString:searchUrl];
    if (service != nil) return service;
  }
  return nil;
}

- (OrgCybergarageUpnpService *)getSubscriberServiceWithNSString:(NSString *)uuid {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    NSString *sid = [((OrgCybergarageUpnpService *) nil_chk(service)) getSID];
    if ([((NSString *) nil_chk(uuid)) isEqual:sid] == true) return service;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpService *service = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getSubscriberServiceWithNSString:uuid];
    if (service != nil) return service;
  }
  return nil;
}

- (OrgCybergarageUpnpStateVariable *)getStateVariableWithNSString:(NSString *)serviceType
                                                     withNSString:(NSString *)name {
  if (serviceType == nil && name == nil) return nil;
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    if (serviceType != nil) {
      if ([((NSString *) nil_chk([((OrgCybergarageUpnpService *) nil_chk(service)) getServiceType])) isEqual:serviceType] == false) continue;
    }
    OrgCybergarageUpnpStateVariable *stateVar = [((OrgCybergarageUpnpService *) nil_chk(service)) getStateVariableWithNSString:name];
    if (stateVar != nil) return stateVar;
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpStateVariable *stateVar = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getStateVariableWithNSString:serviceType withNSString:name];
    if (stateVar != nil) return stateVar;
  }
  return nil;
}

- (OrgCybergarageUpnpStateVariable *)getStateVariableWithNSString:(NSString *)name {
  return [self getStateVariableWithNSString:nil withNSString:name];
}

- (OrgCybergarageUpnpAction *)getActionWithNSString:(NSString *)name {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    OrgCybergarageUpnpActionList *actionList = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionList];
    jint actionCnt = [((OrgCybergarageUpnpActionList *) nil_chk(actionList)) size];
    for (jint i = 0; i < actionCnt; i++) {
      OrgCybergarageUpnpAction *action = [actionList getActionWithInt:i];
      NSString *actionName = [((OrgCybergarageUpnpAction *) nil_chk(action)) getName];
      if (actionName == nil) continue;
      if ([actionName isEqual:name] == true) return action;
    }
  }
  OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
  jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
  for (jint n = 0; n < devCnt; n++) {
    OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
    OrgCybergarageUpnpAction *action = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getActionWithNSString:name];
    if (action != nil) return action;
  }
  return nil;
}

- (jboolean)isIconBytesURIWithNSString:(NSString *)uri {
  IOSByteArray *iconBytes = [((JavaUtilHashMap *) nil_chk(iconBytesMap_)) getWithId:uri];
  if (iconBytes == nil) return false;
  return true;
}

- (OrgCybergarageUpnpIcon *)getIconByURIWithNSString:(NSString *)uri {
  OrgCybergarageUpnpIconList *iconList = [self getIconList];
  if ([((OrgCybergarageUpnpIconList *) nil_chk(iconList)) size] <= 0) return nil;
  jint nIcon = [iconList size];
  for (jint n = 0; n < nIcon; n++) {
    OrgCybergarageUpnpIcon *icon = [iconList getIconWithInt:n];
    if ([((OrgCybergarageUpnpIcon *) nil_chk(icon)) isURLWithNSString:uri]) return icon;
  }
  return nil;
}

- (jboolean)addIconWithOrgCybergarageUpnpIcon:(OrgCybergarageUpnpIcon *)icon {
  OrgCybergarageXmlNode *deviceNode = [self getDeviceNode];
  if (deviceNode == nil) return false;
  OrgCybergarageXmlNode *iconListNode = [deviceNode getNodeWithNSString:OrgCybergarageUpnpIconList_ELEM_NAME];
  if (iconListNode == nil) {
    iconListNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpIconList_ELEM_NAME);
    [deviceNode addNodeWithOrgCybergarageXmlNode:iconListNode];
  }
  OrgCybergarageXmlNode *iconNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpIcon_ELEM_NAME);
  if ([((OrgCybergarageUpnpIcon *) nil_chk(icon)) getIconNode] != nil) {
    [iconNode setWithOrgCybergarageXmlNode:[icon getIconNode]];
  }
  [iconListNode addNodeWithOrgCybergarageXmlNode:iconNode];
  if ([icon hasURL] && [icon hasBytes]) {
    [((JavaUtilHashMap *) nil_chk(iconBytesMap_)) putWithId:[icon getURL] withId:[icon getBytes]];
  }
  return true;
}

- (OrgCybergarageUpnpIconList *)getIconList {
  OrgCybergarageUpnpIconList *iconList = create_OrgCybergarageUpnpIconList_init();
  OrgCybergarageXmlNode *iconListNode = [((OrgCybergarageXmlNode *) nil_chk([self getDeviceNode])) getNodeWithNSString:OrgCybergarageUpnpIconList_ELEM_NAME];
  if (iconListNode == nil) return iconList;
  jint nNode = [iconListNode getNNodes];
  for (jint n = 0; n < nNode; n++) {
    OrgCybergarageXmlNode *node = [iconListNode getNodeWithInt:n];
    if (OrgCybergarageUpnpIcon_isIconNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpIcon *icon = create_OrgCybergarageUpnpIcon_initWithOrgCybergarageXmlNode_(node);
    if ([icon hasURL]) {
      NSString *iconURL = [icon getURL];
      IOSByteArray *iconBytes = [((JavaUtilHashMap *) nil_chk(iconBytesMap_)) getWithId:iconURL];
      if (iconBytes != nil) {
        [icon setBytesWithByteArray:iconBytes];
      }
    }
    [iconList addWithId:icon];
  }
  return iconList;
}

- (OrgCybergarageUpnpIcon *)getIconWithInt:(jint)n {
  OrgCybergarageUpnpIconList *iconList = [self getIconList];
  if (n < 0 && ([((OrgCybergarageUpnpIconList *) nil_chk(iconList)) size] - 1) < n) return nil;
  return [((OrgCybergarageUpnpIconList *) nil_chk(iconList)) getIconWithInt:n];
}

- (OrgCybergarageUpnpIcon *)getSmallestIcon {
  OrgCybergarageUpnpIcon *smallestIcon = nil;
  OrgCybergarageUpnpIconList *iconList = [self getIconList];
  jint iconCount = [((OrgCybergarageUpnpIconList *) nil_chk(iconList)) size];
  for (jint n = 0; n < iconCount; n++) {
    OrgCybergarageUpnpIcon *icon = [iconList getIconWithInt:n];
    if (nil == smallestIcon) {
      smallestIcon = icon;
      continue;
    }
    if ([((OrgCybergarageUpnpIcon *) nil_chk(icon)) getWidth] < [smallestIcon getWidth]) smallestIcon = icon;
  }
  return smallestIcon;
}

- (NSString *)getLocationURLWithNSString:(NSString *)host {
  return OrgCybergarageNetHostInterface_getHostURLWithNSString_withInt_withNSString_(host, [self getHTTPPort], OrgCybergarageUpnpDevice_getDescriptionURI(self));
}

- (NSString *)getNotifyDeviceNT {
  return OrgCybergarageUpnpDevice_getNotifyDeviceNT(self);
}

- (NSString *)getNotifyDeviceUSN {
  return OrgCybergarageUpnpDevice_getNotifyDeviceUSN(self);
}

- (NSString *)getNotifyDeviceTypeNT {
  return OrgCybergarageUpnpDevice_getNotifyDeviceTypeNT(self);
}

- (NSString *)getNotifyDeviceTypeUSN {
  return OrgCybergarageUpnpDevice_getNotifyDeviceTypeUSN(self);
}

+ (void)notifyWait {
  OrgCybergarageUpnpDevice_notifyWait();
}

- (void)announceWithNSString:(NSString *)bindAddr {
  NSString *devLocation = [self getLocationURLWithNSString:bindAddr];
  OrgCybergarageUpnpSsdpSSDPNotifySocket *ssdpSock = create_OrgCybergarageUpnpSsdpSSDPNotifySocket_initWithNSString_(bindAddr);
  OrgCybergarageUpnpSsdpSSDPNotifyRequest *ssdpReq = create_OrgCybergarageUpnpSsdpSSDPNotifyRequest_init();
  [ssdpReq setServerWithNSString:OrgCybergarageUpnpUPnP_getServerName()];
  [ssdpReq setLeaseTimeWithInt:[self getLeaseTime]];
  [ssdpReq setLocationWithNSString:devLocation];
  [ssdpReq setNTSWithNSString:OrgCybergarageUpnpDeviceNTS_ALIVE];
  [ssdpReq setBootIdWithInt:[self getBootId]];
  if ([self isRootDevice] == true) {
    NSString *devNT = OrgCybergarageUpnpDevice_getNotifyDeviceNT(self);
    NSString *devUSN = OrgCybergarageUpnpDevice_getNotifyDeviceUSN(self);
    [ssdpReq setNTWithNSString:devNT];
    [ssdpReq setUSNWithNSString:devUSN];
    [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
    NSString *devUDN = [self getUDN];
    [ssdpReq setNTWithNSString:devUDN];
    [ssdpReq setUSNWithNSString:devUDN];
    [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
  }
  NSString *devNT = OrgCybergarageUpnpDevice_getNotifyDeviceTypeNT(self);
  NSString *devUSN = OrgCybergarageUpnpDevice_getNotifyDeviceTypeUSN(self);
  [ssdpReq setNTWithNSString:devNT];
  [ssdpReq setUSNWithNSString:devUSN];
  [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
  [ssdpSock close];
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) announceWithNSString:bindAddr];
  }
  OrgCybergarageUpnpDeviceList *childDeviceList = [self getDeviceList];
  jint childDeviceCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(childDeviceList)) size];
  for (jint n = 0; n < childDeviceCnt; n++) {
    OrgCybergarageUpnpDevice *childDevice = [childDeviceList getDeviceWithInt:n];
    [((OrgCybergarageUpnpDevice *) nil_chk(childDevice)) announceWithNSString:bindAddr];
  }
}

- (void)announce {
  OrgCybergarageUpnpDevice_notifyWait();
  IOSObjectArray *binds = [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getHTTPBindAddress];
  IOSObjectArray *bindAddresses;
  if (binds != nil) {
    bindAddresses = [IOSObjectArray arrayWithLength:binds->size_ type:NSString_class_()];
    for (jint i = 0; i < binds->size_; i++) {
      IOSObjectArray_Set(bindAddresses, i, [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(binds, i))) getHostAddress]);
    }
  }
  else {
    jint nHostAddrs = OrgCybergarageNetHostInterface_getNHostAddresses();
    bindAddresses = [IOSObjectArray arrayWithLength:nHostAddrs type:NSString_class_()];
    for (jint n = 0; n < nHostAddrs; n++) {
      IOSObjectArray_Set(bindAddresses, n, OrgCybergarageNetHostInterface_getHostAddressWithInt_(n));
    }
  }
  for (jint j = 0; j < bindAddresses->size_; j++) {
    if (IOSObjectArray_Get(bindAddresses, j) == nil || [((NSString *) nil_chk(IOSObjectArray_Get(bindAddresses, j))) java_length] == 0) continue;
    jint ssdpCount = [self getSSDPAnnounceCount];
    for (jint i = 0; i < ssdpCount; i++) [self announceWithNSString:IOSObjectArray_Get(bindAddresses, j)];
  }
}

- (void)byebyeWithNSString:(NSString *)bindAddr {
  OrgCybergarageUpnpSsdpSSDPNotifySocket *ssdpSock = create_OrgCybergarageUpnpSsdpSSDPNotifySocket_initWithNSString_(bindAddr);
  OrgCybergarageUpnpSsdpSSDPNotifyRequest *ssdpReq = create_OrgCybergarageUpnpSsdpSSDPNotifyRequest_init();
  [ssdpReq setNTSWithNSString:OrgCybergarageUpnpDeviceNTS_BYEBYE];
  if ([self isRootDevice] == true) {
    NSString *devNT = OrgCybergarageUpnpDevice_getNotifyDeviceNT(self);
    NSString *devUSN = OrgCybergarageUpnpDevice_getNotifyDeviceUSN(self);
    [ssdpReq setNTWithNSString:devNT];
    [ssdpReq setUSNWithNSString:devUSN];
    [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
  }
  NSString *devNT = OrgCybergarageUpnpDevice_getNotifyDeviceTypeNT(self);
  NSString *devUSN = OrgCybergarageUpnpDevice_getNotifyDeviceTypeUSN(self);
  [ssdpReq setNTWithNSString:devNT];
  [ssdpReq setUSNWithNSString:devUSN];
  [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
  [ssdpSock close];
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) byebyeWithNSString:bindAddr];
  }
  OrgCybergarageUpnpDeviceList *childDeviceList = [self getDeviceList];
  jint childDeviceCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(childDeviceList)) size];
  for (jint n = 0; n < childDeviceCnt; n++) {
    OrgCybergarageUpnpDevice *childDevice = [childDeviceList getDeviceWithInt:n];
    [((OrgCybergarageUpnpDevice *) nil_chk(childDevice)) byebyeWithNSString:bindAddr];
  }
}

- (void)byebye {
  IOSObjectArray *binds = [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getHTTPBindAddress];
  IOSObjectArray *bindAddresses;
  if (binds != nil) {
    bindAddresses = [IOSObjectArray arrayWithLength:binds->size_ type:NSString_class_()];
    for (jint i = 0; i < binds->size_; i++) {
      IOSObjectArray_Set(bindAddresses, i, [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(binds, i))) getHostAddress]);
    }
  }
  else {
    jint nHostAddrs = OrgCybergarageNetHostInterface_getNHostAddresses();
    bindAddresses = [IOSObjectArray arrayWithLength:nHostAddrs type:NSString_class_()];
    for (jint n = 0; n < nHostAddrs; n++) {
      IOSObjectArray_Set(bindAddresses, n, OrgCybergarageNetHostInterface_getHostAddressWithInt_(n));
    }
  }
  for (jint j = 0; j < bindAddresses->size_; j++) {
    if (IOSObjectArray_Get(bindAddresses, j) == nil || [((NSString *) nil_chk(IOSObjectArray_Get(bindAddresses, j))) java_length] <= 0) continue;
    jint ssdpCount = [self getSSDPAnnounceCount];
    for (jint i = 0; i < ssdpCount; i++) [self byebyeWithNSString:IOSObjectArray_Get(bindAddresses, j)];
  }
}

- (jboolean)postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket
                                                      withNSString:(NSString *)st
                                                      withNSString:(NSString *)usn {
  NSString *localAddr = [((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(ssdpPacket)) getLocalAddress];
  OrgCybergarageUpnpDevice *rootDev = [self getRootDevice];
  NSString *rootDevLocation = [((OrgCybergarageUpnpDevice *) nil_chk(rootDev)) getLocationURLWithNSString:localAddr];
  OrgCybergarageUpnpSsdpSSDPSearchResponse *ssdpRes = create_OrgCybergarageUpnpSsdpSSDPSearchResponse_init();
  [ssdpRes setLeaseTimeWithInt:[self getLeaseTime]];
  [ssdpRes setDateWithJavaUtilCalendar:OrgCybergarageUpnpDevice_cal];
  [ssdpRes setSTWithNSString:st];
  [ssdpRes setUSNWithNSString:usn];
  [ssdpRes setLocationWithNSString:rootDevLocation];
  [ssdpRes setBootIdWithInt:[self getBootId]];
  [ssdpRes setMYNAMEWithNSString:[self getFriendlyName]];
  jint mx = [ssdpPacket getMX];
  OrgCybergarageUtilTimerUtil_waitRandomWithInt_(mx * 1000);
  NSString *remoteAddr = [ssdpPacket getRemoteAddress];
  jint remotePort = [ssdpPacket getRemotePort];
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *ssdpResSock = create_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_init();
  if (OrgCybergarageUtilDebug_isOn() == true) [ssdpRes print];
  jint ssdpCount = [self getSSDPAnnounceCount];
  for (jint i = 0; i < ssdpCount; i++) [ssdpResSock postWithNSString:remoteAddr withInt:remotePort withOrgCybergarageUpnpSsdpSSDPSearchResponse:ssdpRes];
  return true;
}

- (void)deviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  NSString *ssdpST = [((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(ssdpPacket)) getST];
  if (ssdpST == nil) return;
  jboolean isRootDevice = [self isRootDevice];
  NSString *devUSN = [self getUDN];
  if (isRootDevice == true) JreStrAppend(&devUSN, "$$", @"::", OrgCybergarageUpnpDeviceUSN_ROOTDEVICE);
  if (OrgCybergarageUpnpDeviceST_isAllDeviceWithNSString_(ssdpST) == true) {
    NSString *devNT = OrgCybergarageUpnpDevice_getNotifyDeviceNT(self);
    jint repeatCnt = (isRootDevice == true) ? 3 : 2;
    for (jint n = 0; n < repeatCnt; n++) [self postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:devNT withNSString:devUSN];
  }
  else if (OrgCybergarageUpnpDeviceST_isRootDeviceWithNSString_(ssdpST) == true) {
    if (isRootDevice == true) [self postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:OrgCybergarageUpnpDeviceST_ROOT_DEVICE withNSString:devUSN];
  }
  else if (OrgCybergarageUpnpDeviceST_isUUIDDeviceWithNSString_(ssdpST) == true) {
    NSString *devUDN = [self getUDN];
    if ([ssdpST isEqual:devUDN] == true) [self postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:devUDN withNSString:devUSN];
  }
  else if (OrgCybergarageUpnpDeviceST_isURNDeviceWithNSString_(ssdpST) == true) {
    NSString *devType = [self getDeviceType];
    if ([ssdpST isEqual:devType] == true) {
      devUSN = JreStrcat("$$$", [self getUDN], @"::", devType);
      [self postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:devType withNSString:devUSN];
    }
  }
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) serviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
  }
  OrgCybergarageUpnpDeviceList *childDeviceList = [self getDeviceList];
  jint childDeviceCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(childDeviceList)) size];
  for (jint n = 0; n < childDeviceCnt; n++) {
    OrgCybergarageUpnpDevice *childDevice = [childDeviceList getDeviceWithInt:n];
    [((OrgCybergarageUpnpDevice *) nil_chk(childDevice)) deviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
  }
}

- (void)deviceSearchReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  [self deviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket];
}

- (void)setHTTPPortWithInt:(jint)port {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setHTTPPortWithInt:port];
}

- (jint)getHTTPPort {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getHTTPPort];
}

- (void)setHTTPBindAddressWithJavaNetInetAddressArray:(IOSObjectArray *)inets {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setHTTPBindAddressWithJavaNetInetAddressArray:inets];
}

- (IOSObjectArray *)getHTTPBindAddress {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getHTTPBindAddress];
}

- (NSString *)getSSDPIPv4MulticastAddress {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getMulticastIPv4Address];
}

- (void)getSSDPIPv4MulticastAddressWithNSString:(NSString *)ip {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setMulticastIPv4AddressWithNSString:ip];
}

- (NSString *)getSSDPIPv6MulticastAddress {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getMulticastIPv6Address];
}

- (void)getSSDPIPv6MulticastAddressWithNSString:(NSString *)ip {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setMulticastIPv6AddressWithNSString:ip];
}

- (void)httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) print];
  if ([self hasPresentationListener] && OrgCybergarageUpnpDevice_isPresentationRequestWithOrgCybergarageHttpHTTPRequest_(self, httpReq)) {
    id<OrgCybergarageUpnpDevicePresentationListener> listener = [self getPresentationListener];
    [((id<OrgCybergarageUpnpDevicePresentationListener>) nil_chk(listener)) httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:httpReq];
    return;
  }
  if ([((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) isGetRequest] == true || [httpReq isHeadRequest] == true) {
    OrgCybergarageUpnpDevice_httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
    return;
  }
  if ([httpReq isPostRequest] == true) {
    OrgCybergarageUpnpDevice_httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
    return;
  }
  if ([httpReq isSubscribeRequest] == true || [httpReq isUnsubscribeRequest] == true) {
    OrgCybergarageUpnpEventSubscriptionRequest *subReq = create_OrgCybergarageUpnpEventSubscriptionRequest_initWithOrgCybergarageHttpHTTPRequest_(httpReq);
    OrgCybergarageUpnpDevice_deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_(self, subReq);
    return;
  }
  [httpReq returnBadRequest];
}

- (IOSByteArray *)getDescriptionDataWithNSString:(NSString *)host {
  return OrgCybergarageUpnpDevice_getDescriptionDataWithNSString_(self, host);
}

- (void)httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  OrgCybergarageUpnpDevice_httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
}

- (void)httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)httpReq {
  OrgCybergarageUpnpDevice_httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
}

- (void)soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)soapReq {
  OrgCybergarageUpnpDevice_soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest_(self, soapReq);
}

- (void)soapActionRecievedWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)soapReq {
  OrgCybergarageUpnpDevice_soapActionRecievedWithOrgCybergarageHttpHTTPRequest_(self, soapReq);
}

- (void)deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq
                                                  withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  OrgCybergarageUpnpDevice_deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest_withOrgCybergarageUpnpService_(self, ctlReq, service);
}

- (void)invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq {
  OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
}

- (void)invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest:(OrgCybergarageUpnpControlControlRequest *)ctlReq {
  OrgCybergarageUpnpDevice_invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
}

- (void)deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest:(OrgCybergarageUpnpControlActionRequest *)ctlReq
                                                withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  OrgCybergarageUpnpDevice_deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest_withOrgCybergarageUpnpService_(self, ctlReq, service);
}

- (void)deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest:(OrgCybergarageUpnpControlQueryRequest *)ctlReq
                                              withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service {
  OrgCybergarageUpnpDevice_deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest_withOrgCybergarageUpnpService_(self, ctlReq, service);
}

- (void)upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq
                                                                          withInt:(jint)code {
  OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, code);
}

- (void)deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq {
  OrgCybergarageUpnpDevice_deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_(self, subReq);
}

- (void)deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                         withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq {
  OrgCybergarageUpnpDevice_deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
}

- (void)deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                           withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq {
  OrgCybergarageUpnpDevice_deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
}

- (void)deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                        withOrgCybergarageUpnpEventSubscriptionRequest:(OrgCybergarageUpnpEventSubscriptionRequest *)subReq {
  OrgCybergarageUpnpDevice_deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
}

- (OrgCybergarageHttpHTTPServerList *)getHTTPServerList {
  return OrgCybergarageUpnpDevice_getHTTPServerList(self);
}

- (void)setSSDPPortWithInt:(jint)port {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setSSDPPortWithInt:port];
}

- (jint)getSSDPPort {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getSSDPPort];
}

- (void)setSSDPBindAddressWithJavaNetInetAddressArray:(IOSObjectArray *)inets {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setSSDPBindAddressWithJavaNetInetAddressArray:inets];
}

- (IOSObjectArray *)getSSDPBindAddress {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getSSDPBindAddress];
}

- (void)setMulticastIPv4AddressWithNSString:(NSString *)ip {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setMulticastIPv4AddressWithNSString:ip];
}

- (NSString *)getMulticastIPv4Address {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getMulticastIPv4Address];
}

- (void)setMulticastIPv6AddressWithNSString:(NSString *)ip {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setMulticastIPv6AddressWithNSString:ip];
}

- (NSString *)getMulticastIPv6Address {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getMulticastIPv6Address];
}

- (OrgCybergarageUpnpSsdpSSDPSearchSocketList *)getSSDPSearchSocketList {
  return OrgCybergarageUpnpDevice_getSSDPSearchSocketList(self);
}

- (void)setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser:(OrgCybergarageUpnpDeviceAdvertiser *)adv {
  OrgCybergarageUpnpDevice_setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser_(self, adv);
}

- (OrgCybergarageUpnpDeviceAdvertiser *)getAdvertiser {
  return OrgCybergarageUpnpDevice_getAdvertiser(self);
}

- (jboolean)start {
  OrgCybergarageUpnpDevice_stopWithBoolean_(self, true);
  jint retryCnt = 0;
  jint bindPort = [self getHTTPPort];
  OrgCybergarageHttpHTTPServerList *httpServerList = OrgCybergarageUpnpDevice_getHTTPServerList(self);
  while ([((OrgCybergarageHttpHTTPServerList *) nil_chk(httpServerList)) openWithInt:bindPort] == false) {
    retryCnt++;
    if (OrgCybergarageUpnpUPnP_SERVER_RETRY_COUNT < retryCnt) return false;
    [self setHTTPPortWithInt:bindPort + 1];
    bindPort = [self getHTTPPort];
  }
  [httpServerList addRequestListenerWithOrgCybergarageHttpHTTPRequestListener:self];
  [httpServerList start];
  OrgCybergarageUpnpSsdpSSDPSearchSocketList *ssdpSearchSockList = OrgCybergarageUpnpDevice_getSSDPSearchSocketList(self);
  if ([((OrgCybergarageUpnpSsdpSSDPSearchSocketList *) nil_chk(ssdpSearchSockList)) open] == false) return false;
  [ssdpSearchSockList addSearchListenerWithOrgCybergarageUpnpDeviceSearchListener:self];
  [ssdpSearchSockList start];
  OrgCybergarageUpnpDevice_updateBootId(self);
  [self updateConfigId];
  [self announce];
  OrgCybergarageUpnpDeviceAdvertiser *adv = create_OrgCybergarageUpnpDeviceAdvertiser_initWithOrgCybergarageUpnpDevice_(self);
  OrgCybergarageUpnpDevice_setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser_(self, adv);
  [adv start];
  return true;
}

- (jboolean)stopWithBoolean:(jboolean)doByeBye {
  return OrgCybergarageUpnpDevice_stopWithBoolean_(self, doByeBye);
}

- (jboolean)stop {
  return OrgCybergarageUpnpDevice_stopWithBoolean_(self, true);
}

- (jboolean)isRunning {
  return (OrgCybergarageUpnpDevice_getAdvertiser(self) != nil) ? true : false;
}

- (NSString *)getInterfaceAddress {
  OrgCybergarageUpnpSsdpSSDPPacket *ssdpPacket = [self getSSDPPacket];
  if (ssdpPacket == nil) return @"";
  return [ssdpPacket getLocalAddress];
}

- (void)setActionListenerWithOrgCybergarageUpnpControlActionListener:(id<OrgCybergarageUpnpControlActionListener>)listener {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint nServices = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < nServices; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) setActionListenerWithOrgCybergarageUpnpControlActionListener:listener];
  }
}

- (void)setQueryListenerWithOrgCybergarageUpnpControlQueryListener:(id<OrgCybergarageUpnpControlQueryListener>)listener {
  OrgCybergarageUpnpServiceList *serviceList = [self getServiceList];
  jint nServices = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < nServices; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) setQueryListenerWithOrgCybergarageUpnpControlQueryListener:listener];
  }
}

- (void)setActionListenerWithOrgCybergarageUpnpControlActionListener:(id<OrgCybergarageUpnpControlActionListener>)listener
                                                         withBoolean:(jboolean)includeSubDevices {
  [self setActionListenerWithOrgCybergarageUpnpControlActionListener:listener];
  if (includeSubDevices == true) {
    OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
    jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
    for (jint n = 0; n < devCnt; n++) {
      OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
      [((OrgCybergarageUpnpDevice *) nil_chk(dev)) setActionListenerWithOrgCybergarageUpnpControlActionListener:listener withBoolean:true];
    }
  }
}

- (void)setQueryListenerWithOrgCybergarageUpnpControlQueryListener:(id<OrgCybergarageUpnpControlQueryListener>)listener
                                                       withBoolean:(jboolean)includeSubDevices {
  [self setQueryListenerWithOrgCybergarageUpnpControlQueryListener:listener];
  if (includeSubDevices == true) {
    OrgCybergarageUpnpDeviceList *devList = [self getDeviceList];
    jint devCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(devList)) size];
    for (jint n = 0; n < devCnt; n++) {
      OrgCybergarageUpnpDevice *dev = [devList getDeviceWithInt:n];
      [((OrgCybergarageUpnpDevice *) nil_chk(dev)) setQueryListenerWithOrgCybergarageUpnpControlQueryListener:listener withBoolean:true];
    }
  }
}

- (void)setUserDataWithId:(id)data {
  JreStrongAssign(&userData_, data);
}

- (id)getUserData {
  return userData_;
}

- (void)dealloc {
  RELEASE_(rootNode_);
  RELEASE_(deviceNode_);
  RELEASE_(mutex_);
  RELEASE_(devUUID_);
  RELEASE_(presentationListener_);
  RELEASE_(iconBytesMap_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgCybergarageXmlNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, 5, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpXmlDeviceData;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 4, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 6, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 7, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 23, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevicePresentationListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDeviceList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 48, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, 49, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, 50, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpServiceList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 51, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 52, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 53, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 54, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, 55, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpStateVariable;", 0x1, 56, 57, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpStateVariable;", 0x1, 56, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpAction;", 0x1, 58, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 59, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpIcon;", 0x1, 60, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpIconList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpIcon;", 0x1, 63, 28, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpIcon;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 64, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 45, -1, -1, -1, -1 },
    { NULL, "[B", 0x22, 77, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 92, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 96, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 97, 96, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 96, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageHttpHTTPServerList;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 73, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 102, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPSearchSocketList;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 104, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDeviceAdvertiser;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 105, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 107, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 108, 109, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 110, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 108, 111, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 112, 113, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getRootNode);
  methods[1].selector = @selector(getDeviceNode);
  methods[2].selector = @selector(setRootNodeWithOrgCybergarageXmlNode:);
  methods[3].selector = @selector(setDeviceNodeWithOrgCybergarageXmlNode:);
  methods[4].selector = @selector(initWithOrgCybergarageXmlNode:withOrgCybergarageXmlNode:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(initWithOrgCybergarageXmlNode:);
  methods[7].selector = @selector(initWithJavaIoFile:);
  methods[8].selector = @selector(initWithJavaIoInputStream:);
  methods[9].selector = @selector(initWithNSString:);
  methods[10].selector = @selector(lock);
  methods[11].selector = @selector(unlock);
  methods[12].selector = @selector(getAbsoluteURLWithNSString:withNSString:withNSString:);
  methods[13].selector = @selector(getAbsoluteURLWithNSString:);
  methods[14].selector = @selector(setNMPRModeWithBoolean:);
  methods[15].selector = @selector(isNMPRMode);
  methods[16].selector = @selector(setWirelessModeWithBoolean:);
  methods[17].selector = @selector(isWirelessMode);
  methods[18].selector = @selector(getSSDPAnnounceCount);
  methods[19].selector = @selector(setUUIDWithNSString:);
  methods[20].selector = @selector(getUUID);
  methods[21].selector = @selector(updateUDN);
  methods[22].selector = @selector(updateBootId);
  methods[23].selector = @selector(getBootId);
  methods[24].selector = @selector(updateConfigIdWithOrgCybergarageUpnpDevice:);
  methods[25].selector = @selector(updateConfigId);
  methods[26].selector = @selector(getConfigId);
  methods[27].selector = @selector(getRootDevice);
  methods[28].selector = @selector(getParentDevice);
  methods[29].selector = @selector(addServiceWithOrgCybergarageUpnpService:);
  methods[30].selector = @selector(addDeviceWithOrgCybergarageUpnpDevice:);
  methods[31].selector = @selector(getDeviceData);
  methods[32].selector = @selector(setDescriptionFileWithJavaIoFile:);
  methods[33].selector = @selector(getDescriptionFile);
  methods[34].selector = @selector(setDescriptionURIWithNSString:);
  methods[35].selector = @selector(getDescriptionURI);
  methods[36].selector = @selector(isDescriptionURIWithNSString:);
  methods[37].selector = @selector(getDescriptionFilePath);
  methods[38].selector = @selector(loadDescriptionWithJavaIoInputStream:);
  methods[39].selector = @selector(loadDescriptionWithNSString:);
  methods[40].selector = @selector(loadDescriptionWithJavaIoFile:);
  methods[41].selector = @selector(initializeLoadedDescription);
  methods[42].selector = @selector(isDeviceNodeWithOrgCybergarageXmlNode:);
  methods[43].selector = @selector(isRootDevice);
  methods[44].selector = @selector(setSSDPPacketWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[45].selector = @selector(getSSDPPacket);
  methods[46].selector = @selector(setLocationWithNSString:);
  methods[47].selector = @selector(getLocation);
  methods[48].selector = @selector(setLeaseTimeWithInt:);
  methods[49].selector = @selector(getLeaseTime);
  methods[50].selector = @selector(getTimeStamp);
  methods[51].selector = @selector(getElapsedTime);
  methods[52].selector = @selector(isExpired);
  methods[53].selector = @selector(setURLBaseWithNSString:);
  methods[54].selector = @selector(updateURLBaseWithNSString:);
  methods[55].selector = @selector(getURLBase);
  methods[56].selector = @selector(setDeviceTypeWithNSString:);
  methods[57].selector = @selector(getDeviceType);
  methods[58].selector = @selector(isDeviceTypeWithNSString:);
  methods[59].selector = @selector(setFriendlyNameWithNSString:);
  methods[60].selector = @selector(getFriendlyName);
  methods[61].selector = @selector(setManufactureWithNSString:);
  methods[62].selector = @selector(getManufacture);
  methods[63].selector = @selector(setManufactureURLWithNSString:);
  methods[64].selector = @selector(getManufactureURL);
  methods[65].selector = @selector(setModelDescriptionWithNSString:);
  methods[66].selector = @selector(getModelDescription);
  methods[67].selector = @selector(setModelNameWithNSString:);
  methods[68].selector = @selector(getModelName);
  methods[69].selector = @selector(setModelNumberWithNSString:);
  methods[70].selector = @selector(getModelNumber);
  methods[71].selector = @selector(setModelURLWithNSString:);
  methods[72].selector = @selector(getModelURL);
  methods[73].selector = @selector(setSerialNumberWithNSString:);
  methods[74].selector = @selector(getSerialNumber);
  methods[75].selector = @selector(setUDNWithNSString:);
  methods[76].selector = @selector(getUDN);
  methods[77].selector = @selector(hasUDN);
  methods[78].selector = @selector(setUPCWithNSString:);
  methods[79].selector = @selector(getUPC);
  methods[80].selector = @selector(setPresentationURLWithNSString:);
  methods[81].selector = @selector(getPresentationURL);
  methods[82].selector = @selector(removePresentationURL);
  methods[83].selector = @selector(isPresentationRequestWithOrgCybergarageHttpHTTPRequest:);
  methods[84].selector = @selector(setPresentationListenerWithOrgCybergarageUpnpDevicePresentationListener:);
  methods[85].selector = @selector(hasPresentationListener);
  methods[86].selector = @selector(getPresentationListener);
  methods[87].selector = @selector(getDeviceList);
  methods[88].selector = @selector(isDeviceWithNSString:);
  methods[89].selector = @selector(getDeviceWithNSString:);
  methods[90].selector = @selector(getDeviceByDescriptionURIWithNSString:);
  methods[91].selector = @selector(getServiceList);
  methods[92].selector = @selector(getServiceWithNSString:);
  methods[93].selector = @selector(getServiceBySCPDURLWithNSString:);
  methods[94].selector = @selector(getServiceByControlURLWithNSString:);
  methods[95].selector = @selector(getServiceByEventSubURLWithNSString:);
  methods[96].selector = @selector(getSubscriberServiceWithNSString:);
  methods[97].selector = @selector(getStateVariableWithNSString:withNSString:);
  methods[98].selector = @selector(getStateVariableWithNSString:);
  methods[99].selector = @selector(getActionWithNSString:);
  methods[100].selector = @selector(isIconBytesURIWithNSString:);
  methods[101].selector = @selector(getIconByURIWithNSString:);
  methods[102].selector = @selector(addIconWithOrgCybergarageUpnpIcon:);
  methods[103].selector = @selector(getIconList);
  methods[104].selector = @selector(getIconWithInt:);
  methods[105].selector = @selector(getSmallestIcon);
  methods[106].selector = @selector(getLocationURLWithNSString:);
  methods[107].selector = @selector(getNotifyDeviceNT);
  methods[108].selector = @selector(getNotifyDeviceUSN);
  methods[109].selector = @selector(getNotifyDeviceTypeNT);
  methods[110].selector = @selector(getNotifyDeviceTypeUSN);
  methods[111].selector = @selector(notifyWait);
  methods[112].selector = @selector(announceWithNSString:);
  methods[113].selector = @selector(announce);
  methods[114].selector = @selector(byebyeWithNSString:);
  methods[115].selector = @selector(byebye);
  methods[116].selector = @selector(postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:withNSString:withNSString:);
  methods[117].selector = @selector(deviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[118].selector = @selector(deviceSearchReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[119].selector = @selector(setHTTPPortWithInt:);
  methods[120].selector = @selector(getHTTPPort);
  methods[121].selector = @selector(setHTTPBindAddressWithJavaNetInetAddressArray:);
  methods[122].selector = @selector(getHTTPBindAddress);
  methods[123].selector = @selector(getSSDPIPv4MulticastAddress);
  methods[124].selector = @selector(getSSDPIPv4MulticastAddressWithNSString:);
  methods[125].selector = @selector(getSSDPIPv6MulticastAddress);
  methods[126].selector = @selector(getSSDPIPv6MulticastAddressWithNSString:);
  methods[127].selector = @selector(httpRequestRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[128].selector = @selector(getDescriptionDataWithNSString:);
  methods[129].selector = @selector(httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[130].selector = @selector(httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[131].selector = @selector(soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[132].selector = @selector(soapActionRecievedWithOrgCybergarageHttpHTTPRequest:);
  methods[133].selector = @selector(deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest:withOrgCybergarageUpnpService:);
  methods[134].selector = @selector(invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest:);
  methods[135].selector = @selector(invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest:);
  methods[136].selector = @selector(deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest:withOrgCybergarageUpnpService:);
  methods[137].selector = @selector(deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest:withOrgCybergarageUpnpService:);
  methods[138].selector = @selector(upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:withInt:);
  methods[139].selector = @selector(deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest:);
  methods[140].selector = @selector(deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService:withOrgCybergarageUpnpEventSubscriptionRequest:);
  methods[141].selector = @selector(deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService:withOrgCybergarageUpnpEventSubscriptionRequest:);
  methods[142].selector = @selector(deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService:withOrgCybergarageUpnpEventSubscriptionRequest:);
  methods[143].selector = @selector(getHTTPServerList);
  methods[144].selector = @selector(setSSDPPortWithInt:);
  methods[145].selector = @selector(getSSDPPort);
  methods[146].selector = @selector(setSSDPBindAddressWithJavaNetInetAddressArray:);
  methods[147].selector = @selector(getSSDPBindAddress);
  methods[148].selector = @selector(setMulticastIPv4AddressWithNSString:);
  methods[149].selector = @selector(getMulticastIPv4Address);
  methods[150].selector = @selector(setMulticastIPv6AddressWithNSString:);
  methods[151].selector = @selector(getMulticastIPv6Address);
  methods[152].selector = @selector(getSSDPSearchSocketList);
  methods[153].selector = @selector(setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser:);
  methods[154].selector = @selector(getAdvertiser);
  methods[155].selector = @selector(start);
  methods[156].selector = @selector(stopWithBoolean:);
  methods[157].selector = @selector(stop);
  methods[158].selector = @selector(isRunning);
  methods[159].selector = @selector(getInterfaceAddress);
  methods[160].selector = @selector(setActionListenerWithOrgCybergarageUpnpControlActionListener:);
  methods[161].selector = @selector(setQueryListenerWithOrgCybergarageUpnpControlQueryListener:);
  methods[162].selector = @selector(setActionListenerWithOrgCybergarageUpnpControlActionListener:withBoolean:);
  methods[163].selector = @selector(setQueryListenerWithOrgCybergarageUpnpControlQueryListener:withBoolean:);
  methods[164].selector = @selector(setUserDataWithId:);
  methods[165].selector = @selector(getUserData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ELEM_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 114, -1, -1 },
    { "UPNP_ROOTDEVICE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 115, -1, -1 },
    { "DEFAULT_STARTUP_WAIT_TIME", "I", .constantValue.asInt = OrgCybergarageUpnpDevice_DEFAULT_STARTUP_WAIT_TIME, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_DISCOVERY_WAIT_TIME", "I", .constantValue.asInt = OrgCybergarageUpnpDevice_DEFAULT_DISCOVERY_WAIT_TIME, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_LEASE_TIME", "I", .constantValue.asInt = OrgCybergarageUpnpDevice_DEFAULT_LEASE_TIME, 0x19, -1, -1, -1, -1 },
    { "HTTP_DEFAULT_PORT", "I", .constantValue.asInt = OrgCybergarageUpnpDevice_HTTP_DEFAULT_PORT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_DESCRIPTION_URI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 116, -1, -1 },
    { "DEFAULT_PRESENTATION_URI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 117, -1, -1 },
    { "rootNode_", "LOrgCybergarageXmlNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceNode_", "LOrgCybergarageXmlNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mutex_", "LOrgCybergarageUtilMutex;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wirelessMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "devUUID_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bootId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CONFIG_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 118, -1, -1 },
    { "URLBASE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 119, -1, -1 },
    { "DEVICE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 120, -1, -1 },
    { "FRIENDLY_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 121, -1, -1 },
    { "MANUFACTURE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 122, -1, -1 },
    { "MANUFACTURE_URL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 123, -1, -1 },
    { "MODEL_DESCRIPTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 124, -1, -1 },
    { "MODEL_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 125, -1, -1 },
    { "MODEL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 126, -1, -1 },
    { "MODEL_URL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 127, -1, -1 },
    { "SERIAL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 128, -1, -1 },
    { "UDN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 129, -1, -1 },
    { "UPC", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 130, -1, -1 },
    { "presentationURL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 131, -1, -1 },
    { "presentationListener_", "LOrgCybergarageUpnpDevicePresentationListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iconBytesMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 132, -1 },
    { "cal", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0xa, -1, 133, -1, -1 },
    { "userData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRootNode", "LOrgCybergarageXmlNode;", "setDeviceNode", "LOrgCybergarageXmlNode;LOrgCybergarageXmlNode;", "LJavaIoFile;", "LOrgCybergarageUpnpDeviceInvalidDescriptionException;", "LJavaIoInputStream;", "LNSString;", "getAbsoluteURL", "LNSString;LNSString;LNSString;", "setNMPRMode", "Z", "setWirelessMode", "setUUID", "updateConfigId", "LOrgCybergarageUpnpDevice;", "addService", "LOrgCybergarageUpnpService;", "addDevice", "setDescriptionFile", "setDescriptionURI", "isDescriptionURI", "loadDescription", "isDeviceNode", "setSSDPPacket", "LOrgCybergarageUpnpSsdpSSDPPacket;", "setLocation", "setLeaseTime", "I", "setURLBase", "updateURLBase", "setDeviceType", "isDeviceType", "setFriendlyName", "setManufacture", "setManufactureURL", "setModelDescription", "setModelName", "setModelNumber", "setModelURL", "setSerialNumber", "setUDN", "setUPC", "setPresentationURL", "isPresentationRequest", "LOrgCybergarageHttpHTTPRequest;", "setPresentationListener", "LOrgCybergarageUpnpDevicePresentationListener;", "isDevice", "getDevice", "getDeviceByDescriptionURI", "getService", "getServiceBySCPDURL", "getServiceByControlURL", "getServiceByEventSubURL", "getSubscriberService", "getStateVariable", "LNSString;LNSString;", "getAction", "isIconBytesURI", "getIconByURI", "addIcon", "LOrgCybergarageUpnpIcon;", "getIcon", "getLocationURL", "announce", "byebye", "postSearchResponse", "LOrgCybergarageUpnpSsdpSSDPPacket;LNSString;LNSString;", "deviceSearchResponse", "deviceSearchReceived", "setHTTPPort", "setHTTPBindAddress", "[LJavaNetInetAddress;", "getSSDPIPv4MulticastAddress", "getSSDPIPv6MulticastAddress", "httpRequestRecieved", "getDescriptionData", "httpGetRequestRecieved", "httpPostRequestRecieved", "soapBadActionRecieved", "soapActionRecieved", "deviceControlRequestRecieved", "LOrgCybergarageUpnpControlControlRequest;LOrgCybergarageUpnpService;", "invalidActionControlRecieved", "LOrgCybergarageUpnpControlControlRequest;", "invalidArgumentsControlRecieved", "deviceActionControlRecieved", "LOrgCybergarageUpnpControlActionRequest;LOrgCybergarageUpnpService;", "deviceQueryControlRecieved", "LOrgCybergarageUpnpControlQueryRequest;LOrgCybergarageUpnpService;", "upnpBadSubscriptionRecieved", "LOrgCybergarageUpnpEventSubscriptionRequest;I", "deviceEventSubscriptionRecieved", "LOrgCybergarageUpnpEventSubscriptionRequest;", "deviceEventNewSubscriptionRecieved", "LOrgCybergarageUpnpService;LOrgCybergarageUpnpEventSubscriptionRequest;", "deviceEventRenewSubscriptionRecieved", "deviceEventUnsubscriptionRecieved", "setSSDPPort", "setSSDPBindAddress", "setMulticastIPv4Address", "setMulticastIPv6Address", "setAdvertiser", "LOrgCybergarageUpnpDeviceAdvertiser;", "stop", "setActionListener", "LOrgCybergarageUpnpControlActionListener;", "setQueryListener", "LOrgCybergarageUpnpControlQueryListener;", "LOrgCybergarageUpnpControlActionListener;Z", "LOrgCybergarageUpnpControlQueryListener;Z", "setUserData", "LNSObject;", &OrgCybergarageUpnpDevice_ELEM_NAME, &OrgCybergarageUpnpDevice_UPNP_ROOTDEVICE, &OrgCybergarageUpnpDevice_DEFAULT_DESCRIPTION_URI, &OrgCybergarageUpnpDevice_DEFAULT_PRESENTATION_URI, &OrgCybergarageUpnpDevice_CONFIG_ID, &OrgCybergarageUpnpDevice_URLBASE_NAME, &OrgCybergarageUpnpDevice_DEVICE_TYPE, &OrgCybergarageUpnpDevice_FRIENDLY_NAME, &OrgCybergarageUpnpDevice_MANUFACTURE, &OrgCybergarageUpnpDevice_MANUFACTURE_URL, &OrgCybergarageUpnpDevice_MODEL_DESCRIPTION, &OrgCybergarageUpnpDevice_MODEL_NAME, &OrgCybergarageUpnpDevice_MODEL_NUMBER, &OrgCybergarageUpnpDevice_MODEL_URL, &OrgCybergarageUpnpDevice_SERIAL_NUMBER, &OrgCybergarageUpnpDevice_UDN, &OrgCybergarageUpnpDevice_UPC, &OrgCybergarageUpnpDevice_presentationURL, "Ljava/util/HashMap<Ljava/lang/String;[B>;", &OrgCybergarageUpnpDevice_cal };
  static const J2ObjcClassInfo _OrgCybergarageUpnpDevice = { "Device", "org.cybergarage.upnp", ptrTable, methods, fields, 7, 0x1, 166, 32, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpDevice;
}

+ (void)initialize {
  if (self == [OrgCybergarageUpnpDevice class]) {
    {
      OrgCybergarageUpnpUPnP_initialize__();
    }
    JreStrongAssign(&OrgCybergarageUpnpDevice_cal, JavaUtilCalendar_getInstance());
    J2OBJC_SET_INITIALIZED(OrgCybergarageUpnpDevice)
  }
}

@end

void OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageUpnpDevice *self, OrgCybergarageXmlNode *root, OrgCybergarageXmlNode *device) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  JreStrongAssignAndConsume(&self->iconBytesMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssign(&self->rootNode_, root);
  JreStrongAssign(&self->deviceNode_, device);
  OrgCybergarageUpnpDevice_setUUIDWithNSString_(self, OrgCybergarageUpnpUPnP_createUUID());
  [self setWirelessModeWithBoolean:false];
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageXmlNode *root, OrgCybergarageXmlNode *device) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_, root, device)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageXmlNode *root, OrgCybergarageXmlNode *device) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_, root, device)
}

void OrgCybergarageUpnpDevice_init(OrgCybergarageUpnpDevice *self) {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, nil, nil);
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, init)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, init)
}

void OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(OrgCybergarageUpnpDevice *self, OrgCybergarageXmlNode *device) {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, nil, device);
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *device) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, initWithOrgCybergarageXmlNode_, device)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *device) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, initWithOrgCybergarageXmlNode_, device)
}

void OrgCybergarageUpnpDevice_initWithJavaIoFile_(OrgCybergarageUpnpDevice *self, JavaIoFile *descriptionFile) {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, nil, nil);
  [self loadDescriptionWithJavaIoFile:descriptionFile];
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_initWithJavaIoFile_(JavaIoFile *descriptionFile) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, initWithJavaIoFile_, descriptionFile)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_initWithJavaIoFile_(JavaIoFile *descriptionFile) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, initWithJavaIoFile_, descriptionFile)
}

void OrgCybergarageUpnpDevice_initWithJavaIoInputStream_(OrgCybergarageUpnpDevice *self, JavaIoInputStream *input) {
  OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, nil, nil);
  [self loadDescriptionWithJavaIoInputStream:input];
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_initWithJavaIoInputStream_(JavaIoInputStream *input) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, initWithJavaIoInputStream_, input)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_initWithJavaIoInputStream_(JavaIoInputStream *input) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, initWithJavaIoInputStream_, input)
}

void OrgCybergarageUpnpDevice_initWithNSString_(OrgCybergarageUpnpDevice *self, NSString *descriptionFileName) {
  OrgCybergarageUpnpDevice_initWithJavaIoFile_(self, create_JavaIoFile_initWithNSString_(descriptionFileName));
}

OrgCybergarageUpnpDevice *new_OrgCybergarageUpnpDevice_initWithNSString_(NSString *descriptionFileName) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpDevice, initWithNSString_, descriptionFileName)
}

OrgCybergarageUpnpDevice *create_OrgCybergarageUpnpDevice_initWithNSString_(NSString *descriptionFileName) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpDevice, initWithNSString_, descriptionFileName)
}

void OrgCybergarageUpnpDevice_setUUIDWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uuid) {
  JreStrongAssign(&self->devUUID_, uuid);
}

void OrgCybergarageUpnpDevice_updateUDN(OrgCybergarageUpnpDevice *self) {
  [self setUDNWithNSString:JreStrcat("$$", @"uuid:", [self getUUID])];
}

void OrgCybergarageUpnpDevice_updateBootId(OrgCybergarageUpnpDevice *self) {
  self->bootId_ = OrgCybergarageUpnpUPnP_createBootId();
}

void OrgCybergarageUpnpDevice_updateConfigIdWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpDevice *dev) {
  jint configId = 0;
  OrgCybergarageUpnpDeviceList *cdevList = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getDeviceList];
  jint cdevCnt = [((OrgCybergarageUpnpDeviceList *) nil_chk(cdevList)) size];
  for (jint n = 0; n < cdevCnt; n++) {
    OrgCybergarageUpnpDevice *cdev = [cdevList getDeviceWithInt:n];
    OrgCybergarageUpnpDevice_updateConfigIdWithOrgCybergarageUpnpDevice_(self, cdev);
    configId += [((OrgCybergarageUpnpDevice *) nil_chk(cdev)) getConfigId];
    configId &= OrgCybergarageUpnpUPnP_CONFIGID_UPNP_ORG_MAX;
  }
  OrgCybergarageUpnpServiceList *serviceList = [dev getServiceList];
  jint serviceCnt = [((OrgCybergarageUpnpServiceList *) nil_chk(serviceList)) size];
  for (jint n = 0; n < serviceCnt; n++) {
    OrgCybergarageUpnpService *service = [serviceList getServiceWithInt:n];
    [((OrgCybergarageUpnpService *) nil_chk(service)) updateConfigId];
    configId += [service getConfigId];
    configId &= OrgCybergarageUpnpUPnP_CONFIGID_UPNP_ORG_MAX;
  }
  OrgCybergarageXmlNode *devNode = [self getDeviceNode];
  if (devNode == nil) return;
  NSString *devDescXml = [devNode description];
  configId += OrgCybergarageUpnpUPnP_caluculateConfigIdWithNSString_(devDescXml);
  configId &= OrgCybergarageUpnpUPnP_CONFIGID_UPNP_ORG_MAX;
  [devNode setAttributeWithNSString:OrgCybergarageUpnpDevice_CONFIG_ID withInt:configId];
}

OrgCybergarageUpnpXmlDeviceData *OrgCybergarageUpnpDevice_getDeviceData(OrgCybergarageUpnpDevice *self) {
  OrgCybergarageXmlNode *node = [self getDeviceNode];
  OrgCybergarageUpnpXmlDeviceData *userData = (OrgCybergarageUpnpXmlDeviceData *) cast_chk([((OrgCybergarageXmlNode *) nil_chk(node)) getUserData], [OrgCybergarageUpnpXmlDeviceData class]);
  if (userData == nil) {
    userData = create_OrgCybergarageUpnpXmlDeviceData_init();
    [node setUserDataWithId:userData];
    [userData setNodeWithOrgCybergarageXmlNode:node];
  }
  return userData;
}

void OrgCybergarageUpnpDevice_setDescriptionFileWithJavaIoFile_(OrgCybergarageUpnpDevice *self, JavaIoFile *file) {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setDescriptionFileWithJavaIoFile:file];
}

void OrgCybergarageUpnpDevice_setDescriptionURIWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uri) {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setDescriptionURIWithNSString:uri];
}

NSString *OrgCybergarageUpnpDevice_getDescriptionURI(OrgCybergarageUpnpDevice *self) {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getDescriptionURI];
}

jboolean OrgCybergarageUpnpDevice_isDescriptionURIWithNSString_(OrgCybergarageUpnpDevice *self, NSString *uri) {
  NSString *descriptionURI = OrgCybergarageUpnpDevice_getDescriptionURI(self);
  if (uri == nil || descriptionURI == nil) return false;
  return [descriptionURI isEqual:uri];
}

jboolean OrgCybergarageUpnpDevice_initializeLoadedDescription(OrgCybergarageUpnpDevice *self) {
  OrgCybergarageUpnpDevice_setDescriptionURIWithNSString_(self, OrgCybergarageUpnpDevice_DEFAULT_DESCRIPTION_URI);
  [self setLeaseTimeWithInt:OrgCybergarageUpnpDevice_DEFAULT_LEASE_TIME];
  [self setHTTPPortWithInt:OrgCybergarageUpnpDevice_HTTP_DEFAULT_PORT];
  if ([self hasUDN] == false) OrgCybergarageUpnpDevice_updateUDN(self);
  return true;
}

jboolean OrgCybergarageUpnpDevice_isDeviceNodeWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *node) {
  OrgCybergarageUpnpDevice_initialize();
  return [((NSString *) nil_chk(OrgCybergarageUpnpDevice_ELEM_NAME)) isEqual:[((OrgCybergarageXmlNode *) nil_chk(node)) getName]];
}

void OrgCybergarageUpnpDevice_setURLBaseWithNSString_(OrgCybergarageUpnpDevice *self, NSString *value) {
  if ([self isRootDevice] == true) {
    OrgCybergarageXmlNode *node = [((OrgCybergarageXmlNode *) nil_chk([self getRootNode])) getNodeWithNSString:OrgCybergarageUpnpDevice_URLBASE_NAME];
    if (node != nil) {
      [node setValueWithNSString:value];
      return;
    }
    node = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpDevice_URLBASE_NAME);
    [node setValueWithNSString:value];
    jint index = 1;
    if ([((OrgCybergarageXmlNode *) nil_chk([self getRootNode])) hasNodes] == false) index = 1;
    [((OrgCybergarageXmlNode *) nil_chk([self getRootNode])) insertNodeWithOrgCybergarageXmlNode:node withInt:index];
  }
}

void OrgCybergarageUpnpDevice_updateURLBaseWithNSString_(OrgCybergarageUpnpDevice *self, NSString *host) {
  NSString *urlBase = OrgCybergarageNetHostInterface_getHostURLWithNSString_withInt_withNSString_(host, [self getHTTPPort], @"");
  OrgCybergarageUpnpDevice_setURLBaseWithNSString_(self, urlBase);
}

jboolean OrgCybergarageUpnpDevice_isPresentationRequestWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq) {
  if (![((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) isGetRequest]) return false;
  NSString *urlPath = [httpReq getURI];
  if (urlPath == nil) return false;
  NSString *presentationURL = [self getPresentationURL];
  if (presentationURL == nil) return false;
  return [urlPath java_hasPrefix:presentationURL];
}

NSString *OrgCybergarageUpnpDevice_getNotifyDeviceNT(OrgCybergarageUpnpDevice *self) {
  if ([self isRootDevice] == false) return [self getUDN];
  return OrgCybergarageUpnpDevice_UPNP_ROOTDEVICE;
}

NSString *OrgCybergarageUpnpDevice_getNotifyDeviceUSN(OrgCybergarageUpnpDevice *self) {
  if ([self isRootDevice] == false) return [self getUDN];
  return JreStrcat("$$$", [self getUDN], @"::", OrgCybergarageUpnpDevice_UPNP_ROOTDEVICE);
}

NSString *OrgCybergarageUpnpDevice_getNotifyDeviceTypeNT(OrgCybergarageUpnpDevice *self) {
  return [self getDeviceType];
}

NSString *OrgCybergarageUpnpDevice_getNotifyDeviceTypeUSN(OrgCybergarageUpnpDevice *self) {
  return JreStrcat("$$$", [self getUDN], @"::", [self getDeviceType]);
}

void OrgCybergarageUpnpDevice_notifyWait() {
  OrgCybergarageUpnpDevice_initialize();
  OrgCybergarageUtilTimerUtil_waitRandomWithInt_(OrgCybergarageUpnpDevice_DEFAULT_DISCOVERY_WAIT_TIME);
}

IOSByteArray *OrgCybergarageUpnpDevice_getDescriptionDataWithNSString_(OrgCybergarageUpnpDevice *self, NSString *host) {
  @synchronized(self) {
    if ([self isNMPRMode] == false) OrgCybergarageUpnpDevice_updateURLBaseWithNSString_(self, host);
    OrgCybergarageXmlNode *rootNode = [self getRootNode];
    if (rootNode == nil) return JreRetainedLocalValue([IOSByteArray arrayWithLength:0]);
    NSString *desc = [NSString string];
    JreStrAppend(&desc, "$", OrgCybergarageUpnpUPnP_XML_DECLARATION);
    JreStrAppend(&desc, "$", @"\n");
    JreStrAppend(&desc, "$", [rootNode description]);
    return JreRetainedLocalValue([desc java_getBytes]);
  }
}

void OrgCybergarageUpnpDevice_httpGetRequestRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq) {
  NSString *uri = [((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) getURI];
  OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$$", @"httpGetRequestRecieved = ", uri));
  if (uri == nil) {
    [httpReq returnBadRequest];
    return;
  }
  OrgCybergarageUpnpDevice *embDev;
  OrgCybergarageUpnpService *embService;
  IOSByteArray *fileByte = [IOSByteArray arrayWithLength:0];
  NSString *contentType = nil;
  NSString *contentLanguage = nil;
  if (OrgCybergarageUpnpDevice_isDescriptionURIWithNSString_(self, uri) == true) {
    NSString *localAddr = [httpReq getLocalAddress];
    if ((localAddr == nil) || ([((NSString *) nil_chk(localAddr)) java_length] <= 0)) localAddr = OrgCybergarageNetHostInterface_getInterface();
    contentType = OrgCybergarageXmlXML_DEFAULT_CONTENT_TYPE;
    contentLanguage = OrgCybergarageXmlXML_DEFAULT_CONTENT_LANGUAGE;
    fileByte = OrgCybergarageUpnpDevice_getDescriptionDataWithNSString_(self, localAddr);
  }
  else if ((embDev = [self getDeviceByDescriptionURIWithNSString:uri]) != nil) {
    NSString *localAddr = [httpReq getLocalAddress];
    contentType = OrgCybergarageXmlXML_DEFAULT_CONTENT_TYPE;
    contentLanguage = OrgCybergarageXmlXML_DEFAULT_CONTENT_LANGUAGE;
    fileByte = OrgCybergarageUpnpDevice_getDescriptionDataWithNSString_(nil_chk(embDev), localAddr);
  }
  else if ((embService = [self getServiceBySCPDURLWithNSString:uri]) != nil) {
    contentType = OrgCybergarageXmlXML_DEFAULT_CONTENT_TYPE;
    contentLanguage = OrgCybergarageXmlXML_DEFAULT_CONTENT_LANGUAGE;
    fileByte = [((OrgCybergarageUpnpService *) nil_chk(embService)) getSCPDData];
  }
  else if ([self isIconBytesURIWithNSString:uri] == true) {
    OrgCybergarageUpnpIcon *devIcon = [self getIconByURIWithNSString:uri];
    if (devIcon != nil) {
      contentType = [devIcon getMimeType];
      fileByte = [devIcon getBytes];
    }
  }
  else {
    [httpReq returnBadRequest];
    return;
  }
  OrgCybergarageHttpHTTPResponse *httpRes = create_OrgCybergarageHttpHTTPResponse_init();
  [httpRes setStatusCodeWithInt:OrgCybergarageHttpHTTPStatus_OK];
  if (contentType != nil) {
    [httpRes setContentTypeWithNSString:contentType];
  }
  if (contentLanguage != nil) {
    [httpRes setContentLanguageWithNSString:contentLanguage];
  }
  [httpRes setContentWithByteArray:fileByte];
  [httpReq postWithOrgCybergarageHttpHTTPResponse:httpRes];
}

void OrgCybergarageUpnpDevice_httpPostRequestRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *httpReq) {
  if ([((OrgCybergarageHttpHTTPRequest *) nil_chk(httpReq)) isSOAPAction] == true) {
    OrgCybergarageUpnpDevice_soapActionRecievedWithOrgCybergarageHttpHTTPRequest_(self, httpReq);
    return;
  }
  [httpReq returnBadRequest];
}

void OrgCybergarageUpnpDevice_soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *soapReq) {
  OrgCybergarageSoapSOAPResponse *soapRes = create_OrgCybergarageSoapSOAPResponse_init();
  [soapRes setStatusCodeWithInt:OrgCybergarageHttpHTTPStatus_BAD_REQUEST];
  [((OrgCybergarageHttpHTTPRequest *) nil_chk(soapReq)) postWithOrgCybergarageHttpHTTPResponse:soapRes];
}

void OrgCybergarageUpnpDevice_soapActionRecievedWithOrgCybergarageHttpHTTPRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageHttpHTTPRequest *soapReq) {
  NSString *uri = [((OrgCybergarageHttpHTTPRequest *) nil_chk(soapReq)) getURI];
  OrgCybergarageUpnpService *ctlService = [self getServiceByControlURLWithNSString:uri];
  if (ctlService != nil) {
    OrgCybergarageUpnpControlActionRequest *crlReq = create_OrgCybergarageUpnpControlActionRequest_initWithOrgCybergarageHttpHTTPRequest_(soapReq);
    OrgCybergarageUpnpDevice_deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest_withOrgCybergarageUpnpService_(self, crlReq, ctlService);
    return;
  }
  OrgCybergarageUpnpDevice_soapBadActionRecievedWithOrgCybergarageHttpHTTPRequest_(self, soapReq);
}

void OrgCybergarageUpnpDevice_deviceControlRequestRecievedWithOrgCybergarageUpnpControlControlRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq, OrgCybergarageUpnpService *service) {
  if ([((OrgCybergarageUpnpControlControlRequest *) nil_chk(ctlReq)) isQueryControl] == true) OrgCybergarageUpnpDevice_deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest_withOrgCybergarageUpnpService_(self, create_OrgCybergarageUpnpControlQueryRequest_initWithOrgCybergarageHttpHTTPRequest_(ctlReq), service);
  else OrgCybergarageUpnpDevice_deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest_withOrgCybergarageUpnpService_(self, create_OrgCybergarageUpnpControlActionRequest_initWithOrgCybergarageHttpHTTPRequest_(ctlReq), service);
}

void OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq) {
  OrgCybergarageUpnpControlControlResponse *actRes = create_OrgCybergarageUpnpControlActionResponse_init();
  [actRes setFaultResponseWithInt:OrgCybergarageUpnpUPnPStatus_INVALID_ACTION];
  [((OrgCybergarageUpnpControlControlRequest *) nil_chk(ctlReq)) postWithOrgCybergarageHttpHTTPResponse:actRes];
}

void OrgCybergarageUpnpDevice_invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlControlRequest *ctlReq) {
  OrgCybergarageUpnpControlControlResponse *actRes = create_OrgCybergarageUpnpControlActionResponse_init();
  [actRes setFaultResponseWithInt:OrgCybergarageUpnpUPnPStatus_INVALID_ARGS];
  [((OrgCybergarageUpnpControlControlRequest *) nil_chk(ctlReq)) postWithOrgCybergarageHttpHTTPResponse:actRes];
}

void OrgCybergarageUpnpDevice_deviceActionControlRecievedWithOrgCybergarageUpnpControlActionRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlActionRequest *ctlReq, OrgCybergarageUpnpService *service) {
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageUpnpControlActionRequest *) nil_chk(ctlReq)) print];
  NSString *actionName = [((OrgCybergarageUpnpControlActionRequest *) nil_chk(ctlReq)) getActionName];
  OrgCybergarageUpnpAction *action = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:actionName];
  if (action == nil) {
    OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
    return;
  }
  OrgCybergarageUpnpArgumentList *actionArgList = [action getArgumentList];
  OrgCybergarageUpnpArgumentList *reqArgList = [ctlReq getArgumentList];
  @try {
    [((OrgCybergarageUpnpArgumentList *) nil_chk(actionArgList)) setReqArgsWithOrgCybergarageUpnpArgumentList:reqArgList];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgCybergarageUpnpDevice_invalidArgumentsControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
    return;
  }
  if ([action performActionListenerWithOrgCybergarageUpnpControlActionRequest:ctlReq] == false) OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
}

void OrgCybergarageUpnpDevice_deviceQueryControlRecievedWithOrgCybergarageUpnpControlQueryRequest_withOrgCybergarageUpnpService_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpControlQueryRequest *ctlReq, OrgCybergarageUpnpService *service) {
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageUpnpControlQueryRequest *) nil_chk(ctlReq)) print];
  NSString *varName = [((OrgCybergarageUpnpControlQueryRequest *) nil_chk(ctlReq)) getVarName];
  if ([((OrgCybergarageUpnpService *) nil_chk(service)) hasStateVariableWithNSString:varName] == false) {
    OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
    return;
  }
  OrgCybergarageUpnpStateVariable *stateVar = [self getStateVariableWithNSString:varName];
  if ([((OrgCybergarageUpnpStateVariable *) nil_chk(stateVar)) performQueryListenerWithOrgCybergarageUpnpControlQueryRequest:ctlReq] == false) OrgCybergarageUpnpDevice_invalidActionControlRecievedWithOrgCybergarageUpnpControlControlRequest_(self, ctlReq);
}

void OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpEventSubscriptionRequest *subReq, jint code) {
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = create_OrgCybergarageUpnpEventSubscriptionResponse_init();
  [subRes setErrorResponseWithInt:code];
  [((OrgCybergarageUpnpEventSubscriptionRequest *) nil_chk(subReq)) postWithOrgCybergarageUpnpEventSubscriptionResponse:subRes];
}

void OrgCybergarageUpnpDevice_deviceEventSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpEventSubscriptionRequest *subReq) {
  NSString *uri = [((OrgCybergarageUpnpEventSubscriptionRequest *) nil_chk(subReq)) getURI];
  OrgCybergarageUpnpService *service = [self getServiceByEventSubURLWithNSString:uri];
  if (service == nil) {
    [subReq returnBadRequest];
    return;
  }
  if ([subReq hasCallback] == false && [subReq hasSID] == false) {
    OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED);
    return;
  }
  if ([subReq isUnsubscribeRequest] == true) {
    OrgCybergarageUpnpDevice_deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
    return;
  }
  if ([subReq hasCallback] == true) {
    OrgCybergarageUpnpDevice_deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
    return;
  }
  if ([subReq hasSID] == true) {
    OrgCybergarageUpnpDevice_deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(self, service, subReq);
    return;
  }
  OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED);
}

void OrgCybergarageUpnpDevice_deviceEventNewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq) {
  NSString *callback = [((OrgCybergarageUpnpEventSubscriptionRequest *) nil_chk(subReq)) getCallback];
  @try {
    create_JavaNetURL_initWithNSString_(callback);
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED);
    return;
  }
  jlong timeOut = [subReq getTimeout];
  NSString *sid = OrgCybergarageUpnpEventSubscription_createSID();
  OrgCybergarageUpnpEventSubscriber *sub = create_OrgCybergarageUpnpEventSubscriber_init();
  [sub setDeliveryURLWithNSString:callback];
  [sub setTimeOutWithLong:timeOut];
  [sub setSIDWithNSString:sid];
  [((OrgCybergarageUpnpService *) nil_chk(service)) addSubscriberWithOrgCybergarageUpnpEventSubscriber:sub];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = create_OrgCybergarageUpnpEventSubscriptionResponse_init();
  [subRes setStatusCodeWithInt:OrgCybergarageHttpHTTPStatus_OK];
  [subRes setSIDWithNSString:sid];
  [subRes setTimeoutWithLong:timeOut];
  if (OrgCybergarageUtilDebug_isOn() == true) [subRes print];
  [subReq postWithOrgCybergarageUpnpEventSubscriptionResponse:subRes];
  if (OrgCybergarageUtilDebug_isOn() == true) [subRes print];
  [service notifyAllStateVariables];
}

void OrgCybergarageUpnpDevice_deviceEventRenewSubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq) {
  NSString *sid = [((OrgCybergarageUpnpEventSubscriptionRequest *) nil_chk(subReq)) getSID];
  OrgCybergarageUpnpEventSubscriber *sub = [((OrgCybergarageUpnpService *) nil_chk(service)) getSubscriberWithNSString:sid];
  if (sub == nil) {
    OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED);
    return;
  }
  jlong timeOut = [subReq getTimeout];
  [sub setTimeOutWithLong:timeOut];
  [sub renew];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = create_OrgCybergarageUpnpEventSubscriptionResponse_init();
  [subRes setStatusCodeWithInt:OrgCybergarageHttpHTTPStatus_OK];
  [subRes setSIDWithNSString:sid];
  [subRes setTimeoutWithLong:timeOut];
  [subReq postWithOrgCybergarageUpnpEventSubscriptionResponse:subRes];
  if (OrgCybergarageUtilDebug_isOn() == true) [subRes print];
}

void OrgCybergarageUpnpDevice_deviceEventUnsubscriptionRecievedWithOrgCybergarageUpnpService_withOrgCybergarageUpnpEventSubscriptionRequest_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpService *service, OrgCybergarageUpnpEventSubscriptionRequest *subReq) {
  NSString *sid = [((OrgCybergarageUpnpEventSubscriptionRequest *) nil_chk(subReq)) getSID];
  OrgCybergarageUpnpEventSubscriber *sub = [((OrgCybergarageUpnpService *) nil_chk(service)) getSubscriberWithNSString:sid];
  if (sub == nil) {
    OrgCybergarageUpnpDevice_upnpBadSubscriptionRecievedWithOrgCybergarageUpnpEventSubscriptionRequest_withInt_(self, subReq, OrgCybergarageHttpHTTPStatus_PRECONDITION_FAILED);
    return;
  }
  [service removeSubscriberWithOrgCybergarageUpnpEventSubscriber:sub];
  OrgCybergarageUpnpEventSubscriptionResponse *subRes = create_OrgCybergarageUpnpEventSubscriptionResponse_init();
  [subRes setStatusCodeWithInt:OrgCybergarageHttpHTTPStatus_OK];
  [subReq postWithOrgCybergarageUpnpEventSubscriptionResponse:subRes];
  if (OrgCybergarageUtilDebug_isOn() == true) [subRes print];
}

OrgCybergarageHttpHTTPServerList *OrgCybergarageUpnpDevice_getHTTPServerList(OrgCybergarageUpnpDevice *self) {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getHTTPServerList];
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *OrgCybergarageUpnpDevice_getSSDPSearchSocketList(OrgCybergarageUpnpDevice *self) {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getSSDPSearchSocketList];
}

void OrgCybergarageUpnpDevice_setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser_(OrgCybergarageUpnpDevice *self, OrgCybergarageUpnpDeviceAdvertiser *adv) {
  [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser:adv];
}

OrgCybergarageUpnpDeviceAdvertiser *OrgCybergarageUpnpDevice_getAdvertiser(OrgCybergarageUpnpDevice *self) {
  return [((OrgCybergarageUpnpXmlDeviceData *) nil_chk(OrgCybergarageUpnpDevice_getDeviceData(self))) getAdvertiser];
}

jboolean OrgCybergarageUpnpDevice_stopWithBoolean_(OrgCybergarageUpnpDevice *self, jboolean doByeBye) {
  if (doByeBye == true) [self byebye];
  OrgCybergarageHttpHTTPServerList *httpServerList = OrgCybergarageUpnpDevice_getHTTPServerList(self);
  [((OrgCybergarageHttpHTTPServerList *) nil_chk(httpServerList)) stop];
  [httpServerList close];
  [httpServerList clear];
  OrgCybergarageUpnpSsdpSSDPSearchSocketList *ssdpSearchSockList = OrgCybergarageUpnpDevice_getSSDPSearchSocketList(self);
  [((OrgCybergarageUpnpSsdpSSDPSearchSocketList *) nil_chk(ssdpSearchSockList)) stop];
  [ssdpSearchSockList close];
  [ssdpSearchSockList clear];
  OrgCybergarageUpnpDeviceAdvertiser *adv = OrgCybergarageUpnpDevice_getAdvertiser(self);
  if (adv != nil) {
    [adv stop];
    OrgCybergarageUpnpDevice_setAdvertiserWithOrgCybergarageUpnpDeviceAdvertiser_(self, nil);
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpDevice)
