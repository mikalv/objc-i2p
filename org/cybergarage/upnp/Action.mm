//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/Action.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Iterator.h"
#include "org/cybergarage/upnp/Action.h"
#include "org/cybergarage/upnp/Argument.h"
#include "org/cybergarage/upnp/ArgumentList.h"
#include "org/cybergarage/upnp/Service.h"
#include "org/cybergarage/upnp/UPnPStatus.h"
#include "org/cybergarage/upnp/control/ActionListener.h"
#include "org/cybergarage/upnp/control/ActionRequest.h"
#include "org/cybergarage/upnp/control/ActionResponse.h"
#include "org/cybergarage/upnp/control/ControlResponse.h"
#include "org/cybergarage/upnp/xml/ActionData.h"
#include "org/cybergarage/util/Debug.h"
#include "org/cybergarage/util/Mutex.h"
#include "org/cybergarage/xml/Node.h"

@interface OrgCybergarageUpnpAction () {
 @public
  OrgCybergarageXmlNode *serviceNode_;
  OrgCybergarageXmlNode *actionNode_;
  OrgCybergarageUtilMutex *mutex_;
  OrgCybergarageUpnpUPnPStatus *upnpStatus_;
  id userData_;
}

- (OrgCybergarageXmlNode *)getServiceNode;

- (void)clearOutputAgumentValues;

- (OrgCybergarageUpnpXmlActionData *)getActionData;

- (OrgCybergarageUpnpControlControlResponse *)getControlResponse;

- (void)setControlResponseWithOrgCybergarageUpnpControlControlResponse:(OrgCybergarageUpnpControlControlResponse *)res;

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpAction, serviceNode_, OrgCybergarageXmlNode *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpAction, actionNode_, OrgCybergarageXmlNode *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpAction, mutex_, OrgCybergarageUtilMutex *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpAction, upnpStatus_, OrgCybergarageUpnpUPnPStatus *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpAction, userData_, id)

inline NSString *OrgCybergarageUpnpAction_get_NAME(void);
static NSString *OrgCybergarageUpnpAction_NAME = @"name";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpAction, NAME, NSString *)

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpAction_getServiceNode(OrgCybergarageUpnpAction *self);

__attribute__((unused)) static void OrgCybergarageUpnpAction_clearOutputAgumentValues(OrgCybergarageUpnpAction *self);

__attribute__((unused)) static OrgCybergarageUpnpXmlActionData *OrgCybergarageUpnpAction_getActionData(OrgCybergarageUpnpAction *self);

__attribute__((unused)) static OrgCybergarageUpnpControlControlResponse *OrgCybergarageUpnpAction_getControlResponse(OrgCybergarageUpnpAction *self);

__attribute__((unused)) static void OrgCybergarageUpnpAction_setControlResponseWithOrgCybergarageUpnpControlControlResponse_(OrgCybergarageUpnpAction *self, OrgCybergarageUpnpControlControlResponse *res);

__attribute__((unused)) static IOSObjectArray *OrgCybergarageUpnpAction__Annotations$0(void);

NSString *OrgCybergarageUpnpAction_ELEM_NAME = @"action";

@implementation OrgCybergarageUpnpAction

+ (NSString *)ELEM_NAME {
  return OrgCybergarageUpnpAction_ELEM_NAME;
}

- (OrgCybergarageXmlNode *)getServiceNode {
  return OrgCybergarageUpnpAction_getServiceNode(self);
}

- (OrgCybergarageUpnpService *)getService {
  return create_OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(OrgCybergarageUpnpAction_getServiceNode(self));
}

- (void)setServiceWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)s {
  JreStrongAssign(&serviceNode_, [((OrgCybergarageUpnpService *) nil_chk(s)) getServiceNode]);
  id<JavaUtilIterator> i = [((OrgCybergarageUpnpArgumentList *) nil_chk([self getArgumentList])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgCybergarageUpnpArgument *arg = [i next];
    [((OrgCybergarageUpnpArgument *) nil_chk(arg)) setServiceWithOrgCybergarageUpnpService:s];
  }
}

- (OrgCybergarageXmlNode *)getActionNode {
  return actionNode_;
}

- (instancetype)initWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)serviceNode {
  OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_(self, serviceNode);
  return self;
}

- (instancetype)initWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)serviceNode
                    withOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)actionNode {
  OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(self, serviceNode, actionNode);
  return self;
}

- (instancetype)initWithOrgCybergarageUpnpAction:(OrgCybergarageUpnpAction *)action {
  OrgCybergarageUpnpAction_initWithOrgCybergarageUpnpAction_(self, action);
  return self;
}

- (void)lock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) lock];
}

- (void)unlock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) unlock];
}

+ (jboolean)isActionNodeWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  return OrgCybergarageUpnpAction_isActionNodeWithOrgCybergarageXmlNode_(node);
}

- (void)setNameWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getActionNode])) setNodeWithNSString:OrgCybergarageUpnpAction_NAME withNSString:value];
}

- (NSString *)getName {
  return [((OrgCybergarageXmlNode *) nil_chk([self getActionNode])) getNodeValueWithNSString:OrgCybergarageUpnpAction_NAME];
}

- (OrgCybergarageUpnpArgumentList *)getArgumentList {
  OrgCybergarageUpnpArgumentList *argumentList = create_OrgCybergarageUpnpArgumentList_init();
  OrgCybergarageXmlNode *argumentListNode = [((OrgCybergarageXmlNode *) nil_chk([self getActionNode])) getNodeWithNSString:OrgCybergarageUpnpArgumentList_ELEM_NAME];
  if (argumentListNode == nil) return argumentList;
  jint nodeCnt = [argumentListNode getNNodes];
  for (jint n = 0; n < nodeCnt; n++) {
    OrgCybergarageXmlNode *node = [argumentListNode getNodeWithInt:n];
    if (OrgCybergarageUpnpArgument_isArgumentNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpArgument *argument = create_OrgCybergarageUpnpArgument_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageUpnpAction_getServiceNode(self), node);
    [argumentList addWithId:argument];
  }
  return argumentList;
}

- (void)setArgumentListWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)al {
  OrgCybergarageXmlNode *argumentListNode = [((OrgCybergarageXmlNode *) nil_chk([self getActionNode])) getNodeWithNSString:OrgCybergarageUpnpArgumentList_ELEM_NAME];
  if (argumentListNode == nil) {
    argumentListNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpArgumentList_ELEM_NAME);
    [((OrgCybergarageXmlNode *) nil_chk([self getActionNode])) addNodeWithOrgCybergarageXmlNode:argumentListNode];
  }
  else {
    [argumentListNode removeAllNodes];
  }
  id<JavaUtilIterator> i = [((OrgCybergarageUpnpArgumentList *) nil_chk(al)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgCybergarageUpnpArgument *a = [i next];
    [((OrgCybergarageUpnpArgument *) nil_chk(a)) setServiceWithOrgCybergarageUpnpService:[self getService]];
    [argumentListNode addNodeWithOrgCybergarageXmlNode:[a getArgumentNode]];
  }
}

- (OrgCybergarageUpnpArgumentList *)getInputArgumentList {
  OrgCybergarageUpnpArgumentList *allArgList = [self getArgumentList];
  jint allArgCnt = [((OrgCybergarageUpnpArgumentList *) nil_chk(allArgList)) size];
  OrgCybergarageUpnpArgumentList *argList = create_OrgCybergarageUpnpArgumentList_init();
  for (jint n = 0; n < allArgCnt; n++) {
    OrgCybergarageUpnpArgument *arg = [allArgList getArgumentWithInt:n];
    if ([((OrgCybergarageUpnpArgument *) nil_chk(arg)) isInDirection] == false) continue;
    [argList addWithId:arg];
  }
  return argList;
}

- (OrgCybergarageUpnpArgumentList *)getOutputArgumentList {
  OrgCybergarageUpnpArgumentList *allArgList = [self getArgumentList];
  jint allArgCnt = [((OrgCybergarageUpnpArgumentList *) nil_chk(allArgList)) size];
  OrgCybergarageUpnpArgumentList *argList = create_OrgCybergarageUpnpArgumentList_init();
  for (jint n = 0; n < allArgCnt; n++) {
    OrgCybergarageUpnpArgument *arg = [allArgList getArgumentWithInt:n];
    if ([((OrgCybergarageUpnpArgument *) nil_chk(arg)) isOutDirection] == false) continue;
    [argList addWithId:arg];
  }
  return argList;
}

- (OrgCybergarageUpnpArgument *)getArgumentWithNSString:(NSString *)name {
  OrgCybergarageUpnpArgumentList *argList = [self getArgumentList];
  jint nArgs = [((OrgCybergarageUpnpArgumentList *) nil_chk(argList)) size];
  for (jint n = 0; n < nArgs; n++) {
    OrgCybergarageUpnpArgument *arg = [argList getArgumentWithInt:n];
    NSString *argName = [((OrgCybergarageUpnpArgument *) nil_chk(arg)) getName];
    if (argName == nil) continue;
    if ([((NSString *) nil_chk(name)) isEqual:argName] == true) return arg;
  }
  return nil;
}

- (void)setArgumentValuesWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)argList {
  [((OrgCybergarageUpnpArgumentList *) nil_chk([self getArgumentList])) setWithOrgCybergarageUpnpArgumentList:argList];
}

- (void)setInArgumentValuesWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)argList {
  [((OrgCybergarageUpnpArgumentList *) nil_chk([self getArgumentList])) setReqArgsWithOrgCybergarageUpnpArgumentList:argList];
}

- (void)setOutArgumentValuesWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)argList {
  [((OrgCybergarageUpnpArgumentList *) nil_chk([self getArgumentList])) setResArgsWithOrgCybergarageUpnpArgumentList:argList];
}

- (void)setArgumentValueWithNSString:(NSString *)name
                        withNSString:(NSString *)value {
  OrgCybergarageUpnpArgument *arg = [self getArgumentWithNSString:name];
  if (arg == nil) return;
  [arg setValueWithNSString:value];
}

- (void)setArgumentValueWithNSString:(NSString *)name
                             withInt:(jint)value {
  [self setArgumentValueWithNSString:name withNSString:JavaLangInteger_toStringWithInt_(value)];
}

- (void)clearOutputAgumentValues {
  OrgCybergarageUpnpAction_clearOutputAgumentValues(self);
}

- (NSString *)getArgumentValueWithNSString:(NSString *)name {
  OrgCybergarageUpnpArgument *arg = [self getArgumentWithNSString:name];
  if (arg == nil) return @"";
  return [arg getValue];
}

- (jint)getArgumentIntegerValueWithNSString:(NSString *)name {
  OrgCybergarageUpnpArgument *arg = [self getArgumentWithNSString:name];
  if (arg == nil) return 0;
  return [arg getIntegerValue];
}

- (OrgCybergarageUpnpXmlActionData *)getActionData {
  return OrgCybergarageUpnpAction_getActionData(self);
}

- (id<OrgCybergarageUpnpControlActionListener>)getActionListener {
  return [((OrgCybergarageUpnpXmlActionData *) nil_chk(OrgCybergarageUpnpAction_getActionData(self))) getActionListener];
}

- (void)setActionListenerWithOrgCybergarageUpnpControlActionListener:(id<OrgCybergarageUpnpControlActionListener>)listener {
  [((OrgCybergarageUpnpXmlActionData *) nil_chk(OrgCybergarageUpnpAction_getActionData(self))) setActionListenerWithOrgCybergarageUpnpControlActionListener:listener];
}

- (jboolean)performActionListenerWithOrgCybergarageUpnpControlActionRequest:(OrgCybergarageUpnpControlActionRequest *)actionReq {
  id<OrgCybergarageUpnpControlActionListener> listener = [self getActionListener];
  if (listener == nil) return false;
  OrgCybergarageUpnpControlActionResponse *actionRes = create_OrgCybergarageUpnpControlActionResponse_init();
  [self setStatusWithInt:OrgCybergarageUpnpUPnPStatus_INVALID_ACTION];
  OrgCybergarageUpnpAction_clearOutputAgumentValues(self);
  if ([listener actionControlReceivedWithOrgCybergarageUpnpAction:self] == true) {
    [actionRes setResponseWithOrgCybergarageUpnpAction:self];
  }
  else {
    OrgCybergarageUpnpUPnPStatus *upnpStatus = [self getStatus];
    [actionRes setFaultResponseWithInt:[((OrgCybergarageUpnpUPnPStatus *) nil_chk(upnpStatus)) getCode] withNSString:[upnpStatus getDescription]];
  }
  if (OrgCybergarageUtilDebug_isOn() == true) [actionRes print];
  [((OrgCybergarageUpnpControlActionRequest *) nil_chk(actionReq)) postWithOrgCybergarageHttpHTTPResponse:actionRes];
  return true;
}

- (OrgCybergarageUpnpControlControlResponse *)getControlResponse {
  return OrgCybergarageUpnpAction_getControlResponse(self);
}

- (void)setControlResponseWithOrgCybergarageUpnpControlControlResponse:(OrgCybergarageUpnpControlControlResponse *)res {
  OrgCybergarageUpnpAction_setControlResponseWithOrgCybergarageUpnpControlControlResponse_(self, res);
}

- (OrgCybergarageUpnpUPnPStatus *)getControlStatus {
  return [((OrgCybergarageUpnpControlControlResponse *) nil_chk(OrgCybergarageUpnpAction_getControlResponse(self))) getUPnPError];
}

- (jboolean)postControlAction {
  OrgCybergarageUpnpArgumentList *actionArgList = [self getArgumentList];
  OrgCybergarageUpnpArgumentList *actionInputArgList = [self getInputArgumentList];
  OrgCybergarageUpnpControlActionRequest *ctrlReq = create_OrgCybergarageUpnpControlActionRequest_init();
  [ctrlReq setRequestWithOrgCybergarageUpnpAction:self withOrgCybergarageUpnpArgumentList:actionInputArgList];
  if (OrgCybergarageUtilDebug_isOn() == true) [ctrlReq print];
  OrgCybergarageUpnpControlActionResponse *ctrlRes = [ctrlReq post];
  if (OrgCybergarageUtilDebug_isOn() == true) [((OrgCybergarageUpnpControlActionResponse *) nil_chk(ctrlRes)) print];
  OrgCybergarageUpnpAction_setControlResponseWithOrgCybergarageUpnpControlControlResponse_(self, ctrlRes);
  jint statCode = [((OrgCybergarageUpnpControlActionResponse *) nil_chk(ctrlRes)) getStatusCode];
  [self setStatusWithInt:statCode];
  if ([ctrlRes isSuccessful] == false) return false;
  OrgCybergarageUpnpArgumentList *outArgList = [ctrlRes getResponse];
  @try {
    [((OrgCybergarageUpnpArgumentList *) nil_chk(actionArgList)) setResArgsWithOrgCybergarageUpnpArgumentList:outArgList];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    [self setStatusWithInt:OrgCybergarageUpnpUPnPStatus_INVALID_ARGS withNSString:@"Action succesfully delivered but invalid arguments returned."];
    return false;
  }
  return true;
}

- (void)print {
  OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$$", @"Action : ", [self getName]));
  OrgCybergarageUpnpArgumentList *argList = [self getArgumentList];
  jint nArgs = [((OrgCybergarageUpnpArgumentList *) nil_chk(argList)) size];
  for (jint n = 0; n < nArgs; n++) {
    OrgCybergarageUpnpArgument *arg = [argList getArgumentWithInt:n];
    NSString *name = [((OrgCybergarageUpnpArgument *) nil_chk(arg)) getName];
    NSString *value = [arg getValue];
    NSString *dir = [arg getDirection];
    OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$I$$$$$$", @" [", n, @"] = ", dir, @", ", name, @", ", value));
  }
}

- (void)setStatusWithInt:(jint)code
            withNSString:(NSString *)descr {
  [((OrgCybergarageUpnpUPnPStatus *) nil_chk(upnpStatus_)) setCodeWithInt:code];
  [((OrgCybergarageUpnpUPnPStatus *) nil_chk(upnpStatus_)) setDescriptionWithNSString:descr];
}

- (void)setStatusWithInt:(jint)code {
  [self setStatusWithInt:code withNSString:OrgCybergarageUpnpUPnPStatus_code2StringWithInt_(code)];
}

- (OrgCybergarageUpnpUPnPStatus *)getStatus {
  return upnpStatus_;
}

- (void)setUserDataWithId:(id)data {
  JreStrongAssign(&userData_, data);
}

- (id)getUserData {
  return userData_;
}

- (void)dealloc {
  RELEASE_(serviceNode_);
  RELEASE_(actionNode_);
  RELEASE_(mutex_);
  RELEASE_(upnpStatus_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgCybergarageXmlNode;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpService;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgumentList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgumentList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgumentList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgument;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, 12, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpXmlActionData;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpControlActionListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpControlControlResponse;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpUPnPStatus;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 28, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpUPnPStatus;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getServiceNode);
  methods[1].selector = @selector(getService);
  methods[2].selector = @selector(setServiceWithOrgCybergarageUpnpService:);
  methods[3].selector = @selector(getActionNode);
  methods[4].selector = @selector(initWithOrgCybergarageXmlNode:);
  methods[5].selector = @selector(initWithOrgCybergarageXmlNode:withOrgCybergarageXmlNode:);
  methods[6].selector = @selector(initWithOrgCybergarageUpnpAction:);
  methods[7].selector = @selector(lock);
  methods[8].selector = @selector(unlock);
  methods[9].selector = @selector(isActionNodeWithOrgCybergarageXmlNode:);
  methods[10].selector = @selector(setNameWithNSString:);
  methods[11].selector = @selector(getName);
  methods[12].selector = @selector(getArgumentList);
  methods[13].selector = @selector(setArgumentListWithOrgCybergarageUpnpArgumentList:);
  methods[14].selector = @selector(getInputArgumentList);
  methods[15].selector = @selector(getOutputArgumentList);
  methods[16].selector = @selector(getArgumentWithNSString:);
  methods[17].selector = @selector(setArgumentValuesWithOrgCybergarageUpnpArgumentList:);
  methods[18].selector = @selector(setInArgumentValuesWithOrgCybergarageUpnpArgumentList:);
  methods[19].selector = @selector(setOutArgumentValuesWithOrgCybergarageUpnpArgumentList:);
  methods[20].selector = @selector(setArgumentValueWithNSString:withNSString:);
  methods[21].selector = @selector(setArgumentValueWithNSString:withInt:);
  methods[22].selector = @selector(clearOutputAgumentValues);
  methods[23].selector = @selector(getArgumentValueWithNSString:);
  methods[24].selector = @selector(getArgumentIntegerValueWithNSString:);
  methods[25].selector = @selector(getActionData);
  methods[26].selector = @selector(getActionListener);
  methods[27].selector = @selector(setActionListenerWithOrgCybergarageUpnpControlActionListener:);
  methods[28].selector = @selector(performActionListenerWithOrgCybergarageUpnpControlActionRequest:);
  methods[29].selector = @selector(getControlResponse);
  methods[30].selector = @selector(setControlResponseWithOrgCybergarageUpnpControlControlResponse:);
  methods[31].selector = @selector(getControlStatus);
  methods[32].selector = @selector(postControlAction);
  methods[33].selector = @selector(print);
  methods[34].selector = @selector(setStatusWithInt:withNSString:);
  methods[35].selector = @selector(setStatusWithInt:);
  methods[36].selector = @selector(getStatus);
  methods[37].selector = @selector(setUserDataWithId:);
  methods[38].selector = @selector(getUserData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ELEM_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "serviceNode_", "LOrgCybergarageXmlNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionNode_", "LOrgCybergarageXmlNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mutex_", "LOrgCybergarageUtilMutex;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "upnpStatus_", "LOrgCybergarageUpnpUPnPStatus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setService", "LOrgCybergarageUpnpService;", "LOrgCybergarageXmlNode;", "LOrgCybergarageXmlNode;LOrgCybergarageXmlNode;", "LOrgCybergarageUpnpAction;", "isActionNode", "setName", "LNSString;", "setArgumentList", "LOrgCybergarageUpnpArgumentList;", "getArgument", "setArgumentValues", (void *)&OrgCybergarageUpnpAction__Annotations$0, "setInArgumentValues", "setOutArgumentValues", "setArgumentValue", "LNSString;LNSString;", "LNSString;I", "getArgumentValue", "getArgumentIntegerValue", "setActionListener", "LOrgCybergarageUpnpControlActionListener;", "performActionListener", "LOrgCybergarageUpnpControlActionRequest;", "setControlResponse", "LOrgCybergarageUpnpControlControlResponse;", "setStatus", "ILNSString;", "I", "setUserData", "LNSObject;", &OrgCybergarageUpnpAction_ELEM_NAME, &OrgCybergarageUpnpAction_NAME };
  static const J2ObjcClassInfo _OrgCybergarageUpnpAction = { "Action", "org.cybergarage.upnp", ptrTable, methods, fields, 7, 0x1, 39, 7, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpAction;
}

@end

OrgCybergarageXmlNode *OrgCybergarageUpnpAction_getServiceNode(OrgCybergarageUpnpAction *self) {
  return self->serviceNode_;
}

void OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_(OrgCybergarageUpnpAction *self, OrgCybergarageXmlNode *serviceNode) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  JreStrongAssignAndConsume(&self->upnpStatus_, new_OrgCybergarageUpnpUPnPStatus_init());
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssign(&self->serviceNode_, serviceNode);
  JreStrongAssignAndConsume(&self->actionNode_, new_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpAction_ELEM_NAME));
}

OrgCybergarageUpnpAction *new_OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *serviceNode) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageXmlNode_, serviceNode)
}

OrgCybergarageUpnpAction *create_OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *serviceNode) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageXmlNode_, serviceNode)
}

void OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageUpnpAction *self, OrgCybergarageXmlNode *serviceNode, OrgCybergarageXmlNode *actionNode) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  JreStrongAssignAndConsume(&self->upnpStatus_, new_OrgCybergarageUpnpUPnPStatus_init());
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssign(&self->serviceNode_, serviceNode);
  JreStrongAssign(&self->actionNode_, actionNode);
}

OrgCybergarageUpnpAction *new_OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageXmlNode *serviceNode, OrgCybergarageXmlNode *actionNode) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_, serviceNode, actionNode)
}

OrgCybergarageUpnpAction *create_OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageXmlNode *serviceNode, OrgCybergarageXmlNode *actionNode) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_, serviceNode, actionNode)
}

void OrgCybergarageUpnpAction_initWithOrgCybergarageUpnpAction_(OrgCybergarageUpnpAction *self, OrgCybergarageUpnpAction *action) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  JreStrongAssignAndConsume(&self->upnpStatus_, new_OrgCybergarageUpnpUPnPStatus_init());
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssign(&self->serviceNode_, OrgCybergarageUpnpAction_getServiceNode(nil_chk(action)));
  JreStrongAssign(&self->actionNode_, [action getActionNode]);
}

OrgCybergarageUpnpAction *new_OrgCybergarageUpnpAction_initWithOrgCybergarageUpnpAction_(OrgCybergarageUpnpAction *action) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageUpnpAction_, action)
}

OrgCybergarageUpnpAction *create_OrgCybergarageUpnpAction_initWithOrgCybergarageUpnpAction_(OrgCybergarageUpnpAction *action) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpAction, initWithOrgCybergarageUpnpAction_, action)
}

jboolean OrgCybergarageUpnpAction_isActionNodeWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *node) {
  OrgCybergarageUpnpAction_initialize();
  return [((NSString *) nil_chk(OrgCybergarageUpnpAction_ELEM_NAME)) isEqual:[((OrgCybergarageXmlNode *) nil_chk(node)) getName]];
}

void OrgCybergarageUpnpAction_clearOutputAgumentValues(OrgCybergarageUpnpAction *self) {
  OrgCybergarageUpnpArgumentList *allArgList = [self getArgumentList];
  jint allArgCnt = [((OrgCybergarageUpnpArgumentList *) nil_chk(allArgList)) size];
  for (jint n = 0; n < allArgCnt; n++) {
    OrgCybergarageUpnpArgument *arg = [allArgList getArgumentWithInt:n];
    if ([((OrgCybergarageUpnpArgument *) nil_chk(arg)) isOutDirection] == false) continue;
    [arg setValueWithNSString:@""];
  }
}

OrgCybergarageUpnpXmlActionData *OrgCybergarageUpnpAction_getActionData(OrgCybergarageUpnpAction *self) {
  OrgCybergarageXmlNode *node = [self getActionNode];
  OrgCybergarageUpnpXmlActionData *userData = (OrgCybergarageUpnpXmlActionData *) cast_chk([((OrgCybergarageXmlNode *) nil_chk(node)) getUserData], [OrgCybergarageUpnpXmlActionData class]);
  if (userData == nil) {
    userData = create_OrgCybergarageUpnpXmlActionData_init();
    [node setUserDataWithId:userData];
    [userData setNodeWithOrgCybergarageXmlNode:node];
  }
  return userData;
}

OrgCybergarageUpnpControlControlResponse *OrgCybergarageUpnpAction_getControlResponse(OrgCybergarageUpnpAction *self) {
  return [((OrgCybergarageUpnpXmlActionData *) nil_chk(OrgCybergarageUpnpAction_getActionData(self))) getControlResponse];
}

void OrgCybergarageUpnpAction_setControlResponseWithOrgCybergarageUpnpControlControlResponse_(OrgCybergarageUpnpAction *self, OrgCybergarageUpnpControlControlResponse *res) {
  [((OrgCybergarageUpnpXmlActionData *) nil_chk(OrgCybergarageUpnpAction_getActionData(self))) setControlResponseWithOrgCybergarageUpnpControlControlResponse:res];
}

IOSObjectArray *OrgCybergarageUpnpAction__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpAction)
