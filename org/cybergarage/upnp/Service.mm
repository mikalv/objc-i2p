//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/Service.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "java/util/Iterator.h"
#include "org/cybergarage/http/HTTP.h"
#include "org/cybergarage/http/HTTPResponse.h"
#include "org/cybergarage/upnp/Action.h"
#include "org/cybergarage/upnp/ActionList.h"
#include "org/cybergarage/upnp/Argument.h"
#include "org/cybergarage/upnp/ArgumentList.h"
#include "org/cybergarage/upnp/Device.h"
#include "org/cybergarage/upnp/Service.h"
#include "org/cybergarage/upnp/ServiceStateTable.h"
#include "org/cybergarage/upnp/StateVariable.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/upnp/control/ActionListener.h"
#include "org/cybergarage/upnp/control/QueryListener.h"
#include "org/cybergarage/upnp/device/InvalidDescriptionException.h"
#include "org/cybergarage/upnp/device/NTS.h"
#include "org/cybergarage/upnp/device/ST.h"
#include "org/cybergarage/upnp/event/NotifyRequest.h"
#include "org/cybergarage/upnp/event/Subscriber.h"
#include "org/cybergarage/upnp/event/SubscriberList.h"
#include "org/cybergarage/upnp/ssdp/SSDPNotifyRequest.h"
#include "org/cybergarage/upnp/ssdp/SSDPNotifySocket.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/upnp/xml/ServiceData.h"
#include "org/cybergarage/util/Debug.h"
#include "org/cybergarage/util/Mutex.h"
#include "org/cybergarage/util/StringUtil.h"
#include "org/cybergarage/xml/Node.h"
#include "org/cybergarage/xml/Parser.h"
#include "org/cybergarage/xml/ParserException.h"

@interface OrgCybergarageUpnpService () {
 @public
  OrgCybergarageXmlNode *serviceNode_;
  OrgCybergarageUtilMutex *mutex_;
  id userData_;
}

- (OrgCybergarageXmlNode *)getDeviceNode;

- (OrgCybergarageXmlNode *)getRootNode;

- (jboolean)isURLWithNSString:(NSString *)referenceUrl
                 withNSString:(NSString *)url;

- (OrgCybergarageXmlNode *)getSCPDNodeWithJavaNetURL:(JavaNetURL *)scpdUrl;

- (OrgCybergarageXmlNode *)getSCPDNodeWithJavaIoFile:(JavaIoFile *)scpdFile;

- (OrgCybergarageXmlNode *)getSCPDNode;

- (OrgCybergarageUpnpXmlServiceData *)getServiceData;

- (NSString *)getNotifyServiceTypeNT;

- (NSString *)getNotifyServiceTypeUSN;

- (jboolean)notifyWithOrgCybergarageUpnpEventSubscriber:(OrgCybergarageUpnpEventSubscriber *)sub
                    withOrgCybergarageUpnpStateVariable:(OrgCybergarageUpnpStateVariable *)stateVar;

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpService, serviceNode_, OrgCybergarageXmlNode *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpService, mutex_, OrgCybergarageUtilMutex *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpService, userData_, id)

inline NSString *OrgCybergarageUpnpService_get_SERVICE_TYPE(void);
static NSString *OrgCybergarageUpnpService_SERVICE_TYPE = @"serviceType";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, SERVICE_TYPE, NSString *)

inline NSString *OrgCybergarageUpnpService_get_SERVICE_ID(void);
static NSString *OrgCybergarageUpnpService_SERVICE_ID = @"serviceId";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, SERVICE_ID, NSString *)

inline NSString *OrgCybergarageUpnpService_get_CONFIG_ID(void);
static NSString *OrgCybergarageUpnpService_CONFIG_ID = @"configId";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, CONFIG_ID, NSString *)

inline NSString *OrgCybergarageUpnpService_get_SCPDURL(void);
static NSString *OrgCybergarageUpnpService_SCPDURL = @"SCPDURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, SCPDURL, NSString *)

inline NSString *OrgCybergarageUpnpService_get_CONTROL_URL(void);
static NSString *OrgCybergarageUpnpService_CONTROL_URL = @"controlURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, CONTROL_URL, NSString *)

inline NSString *OrgCybergarageUpnpService_get_EVENT_SUB_URL(void);
static NSString *OrgCybergarageUpnpService_EVENT_SUB_URL = @"eventSubURL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgCybergarageUpnpService, EVENT_SUB_URL, NSString *)

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpService_getDeviceNode(OrgCybergarageUpnpService *self);

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpService_getRootNode(OrgCybergarageUpnpService *self);

__attribute__((unused)) static jboolean OrgCybergarageUpnpService_isURLWithNSString_withNSString_(OrgCybergarageUpnpService *self, NSString *referenceUrl, NSString *url);

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNodeWithJavaNetURL_(OrgCybergarageUpnpService *self, JavaNetURL *scpdUrl);

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNodeWithJavaIoFile_(OrgCybergarageUpnpService *self, JavaIoFile *scpdFile);

__attribute__((unused)) static OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNode(OrgCybergarageUpnpService *self);

__attribute__((unused)) static OrgCybergarageUpnpXmlServiceData *OrgCybergarageUpnpService_getServiceData(OrgCybergarageUpnpService *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpService_getNotifyServiceTypeNT(OrgCybergarageUpnpService *self);

__attribute__((unused)) static NSString *OrgCybergarageUpnpService_getNotifyServiceTypeUSN(OrgCybergarageUpnpService *self);

__attribute__((unused)) static jboolean OrgCybergarageUpnpService_notifyWithOrgCybergarageUpnpEventSubscriber_withOrgCybergarageUpnpStateVariable_(OrgCybergarageUpnpService *self, OrgCybergarageUpnpEventSubscriber *sub, OrgCybergarageUpnpStateVariable *stateVar);

NSString *OrgCybergarageUpnpService_ELEM_NAME = @"service";
NSString *OrgCybergarageUpnpService_SCPD_ROOTNODE = @"scpd";
NSString *OrgCybergarageUpnpService_SCPD_ROOTNODE_NS = @"urn:schemas-upnp-org:service-1-0";
NSString *OrgCybergarageUpnpService_SPEC_VERSION = @"specVersion";
NSString *OrgCybergarageUpnpService_MAJOR = @"major";
NSString *OrgCybergarageUpnpService_MAJOR_VALUE = @"1";
NSString *OrgCybergarageUpnpService_MINOR = @"minor";
NSString *OrgCybergarageUpnpService_MINOR_VALUE = @"0";

@implementation OrgCybergarageUpnpService

+ (NSString *)ELEM_NAME {
  return OrgCybergarageUpnpService_ELEM_NAME;
}

+ (NSString *)SCPD_ROOTNODE {
  return OrgCybergarageUpnpService_SCPD_ROOTNODE;
}

+ (NSString *)SCPD_ROOTNODE_NS {
  return OrgCybergarageUpnpService_SCPD_ROOTNODE_NS;
}

+ (NSString *)SPEC_VERSION {
  return OrgCybergarageUpnpService_SPEC_VERSION;
}

+ (NSString *)MAJOR {
  return OrgCybergarageUpnpService_MAJOR;
}

+ (NSString *)MAJOR_VALUE {
  return OrgCybergarageUpnpService_MAJOR_VALUE;
}

+ (NSString *)MINOR {
  return OrgCybergarageUpnpService_MINOR;
}

+ (NSString *)MINOR_VALUE {
  return OrgCybergarageUpnpService_MINOR_VALUE;
}

- (OrgCybergarageXmlNode *)getServiceNode {
  return serviceNode_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(self, node);
  return self;
}

- (void)lock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) lock];
}

- (void)unlock {
  [((OrgCybergarageUtilMutex *) nil_chk(mutex_)) unlock];
}

+ (jboolean)isServiceNodeWithOrgCybergarageXmlNode:(OrgCybergarageXmlNode *)node {
  return OrgCybergarageUpnpService_isServiceNodeWithOrgCybergarageXmlNode_(node);
}

- (OrgCybergarageXmlNode *)getDeviceNode {
  return OrgCybergarageUpnpService_getDeviceNode(self);
}

- (OrgCybergarageXmlNode *)getRootNode {
  return OrgCybergarageUpnpService_getRootNode(self);
}

- (OrgCybergarageUpnpDevice *)getDevice {
  return create_OrgCybergarageUpnpDevice_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(OrgCybergarageUpnpService_getRootNode(self), OrgCybergarageUpnpService_getDeviceNode(self));
}

- (OrgCybergarageUpnpDevice *)getRootDevice {
  return [((OrgCybergarageUpnpDevice *) nil_chk([self getDevice])) getRootDevice];
}

- (void)setServiceTypeWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) setNodeWithNSString:OrgCybergarageUpnpService_SERVICE_TYPE withNSString:value];
}

- (NSString *)getServiceType {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getNodeValueWithNSString:OrgCybergarageUpnpService_SERVICE_TYPE];
}

- (void)setServiceIDWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) setNodeWithNSString:OrgCybergarageUpnpService_SERVICE_ID withNSString:value];
}

- (NSString *)getServiceID {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getNodeValueWithNSString:OrgCybergarageUpnpService_SERVICE_ID];
}

- (void)updateConfigId {
  OrgCybergarageXmlNode *scpdNode = OrgCybergarageUpnpService_getSCPDNode(self);
  if (scpdNode == nil) return;
  NSString *scpdXml = [scpdNode description];
  jint configId = OrgCybergarageUpnpUPnP_caluculateConfigIdWithNSString_(scpdXml);
  [scpdNode setAttributeWithNSString:OrgCybergarageUpnpService_CONFIG_ID withInt:configId];
}

- (jint)getConfigId {
  OrgCybergarageXmlNode *scpdNode = OrgCybergarageUpnpService_getSCPDNode(self);
  if (scpdNode == nil) return 0;
  return [scpdNode getAttributeIntegerValueWithNSString:OrgCybergarageUpnpService_CONFIG_ID];
}

- (jboolean)isURLWithNSString:(NSString *)referenceUrl
                 withNSString:(NSString *)url {
  return OrgCybergarageUpnpService_isURLWithNSString_withNSString_(self, referenceUrl, url);
}

- (void)setSCPDURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) setNodeWithNSString:OrgCybergarageUpnpService_SCPDURL withNSString:value];
}

- (NSString *)getSCPDURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getNodeValueWithNSString:OrgCybergarageUpnpService_SCPDURL];
}

- (jboolean)isSCPDURLWithNSString:(NSString *)url {
  return OrgCybergarageUpnpService_isURLWithNSString_withNSString_(self, [self getSCPDURL], url);
}

- (void)setControlURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) setNodeWithNSString:OrgCybergarageUpnpService_CONTROL_URL withNSString:value];
}

- (NSString *)getControlURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getNodeValueWithNSString:OrgCybergarageUpnpService_CONTROL_URL];
}

- (jboolean)isControlURLWithNSString:(NSString *)url {
  return OrgCybergarageUpnpService_isURLWithNSString_withNSString_(self, [self getControlURL], url);
}

- (void)setEventSubURLWithNSString:(NSString *)value {
  [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) setNodeWithNSString:OrgCybergarageUpnpService_EVENT_SUB_URL withNSString:value];
}

- (NSString *)getEventSubURL {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getNodeValueWithNSString:OrgCybergarageUpnpService_EVENT_SUB_URL];
}

- (jboolean)isEventSubURLWithNSString:(NSString *)url {
  return OrgCybergarageUpnpService_isURLWithNSString_withNSString_(self, [self getEventSubURL], url);
}

- (jboolean)loadSCPDWithNSString:(NSString *)scpdStr {
  @try {
    OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
    OrgCybergarageXmlNode *scpdNode = [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithNSString:scpdStr];
    if (scpdNode == nil) return false;
    OrgCybergarageUpnpXmlServiceData *data = OrgCybergarageUpnpService_getServiceData(self);
    [((OrgCybergarageUpnpXmlServiceData *) nil_chk(data)) setSCPDNodeWithOrgCybergarageXmlNode:scpdNode];
  }
  @catch (OrgCybergarageXmlParserException *e) {
    @throw create_OrgCybergarageUpnpDeviceInvalidDescriptionException_initWithJavaLangException_(e);
  }
  return true;
}

- (jboolean)loadSCPDWithJavaIoFile:(JavaIoFile *)file {
  OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
  OrgCybergarageXmlNode *scpdNode = [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaIoFile:file];
  if (scpdNode == nil) return false;
  OrgCybergarageUpnpXmlServiceData *data = OrgCybergarageUpnpService_getServiceData(self);
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(data)) setSCPDNodeWithOrgCybergarageXmlNode:scpdNode];
  return true;
}

- (jboolean)loadSCPDWithJavaIoInputStream:(JavaIoInputStream *)input {
  OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
  OrgCybergarageXmlNode *scpdNode = [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaIoInputStream:input];
  if (scpdNode == nil) return false;
  OrgCybergarageUpnpXmlServiceData *data = OrgCybergarageUpnpService_getServiceData(self);
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(data)) setSCPDNodeWithOrgCybergarageXmlNode:scpdNode];
  return true;
}

- (void)setDescriptionURLWithNSString:(NSString *)value {
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) setDescriptionURLWithNSString:value];
}

- (NSString *)getDescriptionURL {
  return [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) getDescriptionURL];
}

- (OrgCybergarageXmlNode *)getSCPDNodeWithJavaNetURL:(JavaNetURL *)scpdUrl {
  return OrgCybergarageUpnpService_getSCPDNodeWithJavaNetURL_(self, scpdUrl);
}

- (OrgCybergarageXmlNode *)getSCPDNodeWithJavaIoFile:(JavaIoFile *)scpdFile {
  return OrgCybergarageUpnpService_getSCPDNodeWithJavaIoFile_(self, scpdFile);
}

- (OrgCybergarageXmlNode *)getSCPDNode {
  return OrgCybergarageUpnpService_getSCPDNode(self);
}

- (IOSByteArray *)getSCPDData {
  OrgCybergarageXmlNode *scpdNode = OrgCybergarageUpnpService_getSCPDNode(self);
  if (scpdNode == nil) return [IOSByteArray arrayWithLength:0];
  NSString *desc = [NSString string];
  JreStrAppend(&desc, "$", OrgCybergarageUpnpUPnP_XML_DECLARATION);
  JreStrAppend(&desc, "$", @"\n");
  JreStrAppend(&desc, "$", [scpdNode description]);
  return [desc java_getBytes];
}

- (OrgCybergarageUpnpActionList *)getActionList {
  OrgCybergarageUpnpActionList *actionList = create_OrgCybergarageUpnpActionList_init();
  OrgCybergarageXmlNode *scdpNode = OrgCybergarageUpnpService_getSCPDNode(self);
  if (scdpNode == nil) return actionList;
  OrgCybergarageXmlNode *actionListNode = [scdpNode getNodeWithNSString:OrgCybergarageUpnpActionList_ELEM_NAME];
  if (actionListNode == nil) return actionList;
  jint nNode = [actionListNode getNNodes];
  for (jint n = 0; n < nNode; n++) {
    OrgCybergarageXmlNode *node = [actionListNode getNodeWithInt:n];
    if (OrgCybergarageUpnpAction_isActionNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpAction *action = create_OrgCybergarageUpnpAction_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(serviceNode_, node);
    [actionList addWithId:action];
  }
  return actionList;
}

- (OrgCybergarageUpnpAction *)getActionWithNSString:(NSString *)actionName {
  OrgCybergarageUpnpActionList *actionList = [self getActionList];
  jint nActions = [((OrgCybergarageUpnpActionList *) nil_chk(actionList)) size];
  for (jint n = 0; n < nActions; n++) {
    OrgCybergarageUpnpAction *action = [actionList getActionWithInt:n];
    NSString *name = [((OrgCybergarageUpnpAction *) nil_chk(action)) getName];
    if (name == nil) continue;
    if ([name isEqual:actionName] == true) return action;
  }
  return nil;
}

- (void)addActionWithOrgCybergarageUpnpAction:(OrgCybergarageUpnpAction *)a {
  id<JavaUtilIterator> i = [((OrgCybergarageUpnpArgumentList *) nil_chk([((OrgCybergarageUpnpAction *) nil_chk(a)) getArgumentList])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgCybergarageUpnpArgument *arg = [i next];
    [((OrgCybergarageUpnpArgument *) nil_chk(arg)) setServiceWithOrgCybergarageUpnpService:self];
  }
  OrgCybergarageXmlNode *scdpNode = OrgCybergarageUpnpService_getSCPDNode(self);
  OrgCybergarageXmlNode *actionListNode = [((OrgCybergarageXmlNode *) nil_chk(scdpNode)) getNodeWithNSString:OrgCybergarageUpnpActionList_ELEM_NAME];
  if (actionListNode == nil) {
    actionListNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpActionList_ELEM_NAME);
    [scdpNode addNodeWithOrgCybergarageXmlNode:actionListNode];
  }
  [actionListNode addNodeWithOrgCybergarageXmlNode:[a getActionNode]];
}

- (OrgCybergarageUpnpServiceStateTable *)getServiceStateTable {
  OrgCybergarageUpnpServiceStateTable *stateTable = create_OrgCybergarageUpnpServiceStateTable_init();
  OrgCybergarageXmlNode *stateTableNode = [((OrgCybergarageXmlNode *) nil_chk(OrgCybergarageUpnpService_getSCPDNode(self))) getNodeWithNSString:OrgCybergarageUpnpServiceStateTable_ELEM_NAME];
  if (stateTableNode == nil) return stateTable;
  OrgCybergarageXmlNode *serviceNode = [self getServiceNode];
  jint nNode = [stateTableNode getNNodes];
  for (jint n = 0; n < nNode; n++) {
    OrgCybergarageXmlNode *node = [stateTableNode getNodeWithInt:n];
    if (OrgCybergarageUpnpStateVariable_isStateVariableNodeWithOrgCybergarageXmlNode_(node) == false) continue;
    OrgCybergarageUpnpStateVariable *serviceVar = create_OrgCybergarageUpnpStateVariable_initWithOrgCybergarageXmlNode_withOrgCybergarageXmlNode_(serviceNode, node);
    [stateTable addWithId:serviceVar];
  }
  return stateTable;
}

- (OrgCybergarageUpnpStateVariable *)getStateVariableWithNSString:(NSString *)name {
  OrgCybergarageUpnpServiceStateTable *stateTable = [self getServiceStateTable];
  jint tableSize = [((OrgCybergarageUpnpServiceStateTable *) nil_chk(stateTable)) size];
  for (jint n = 0; n < tableSize; n++) {
    OrgCybergarageUpnpStateVariable *var = [stateTable getStateVariableWithInt:n];
    NSString *varName = [((OrgCybergarageUpnpStateVariable *) nil_chk(var)) getName];
    if (varName == nil) continue;
    if ([varName isEqual:name] == true) return var;
  }
  return nil;
}

- (jboolean)hasStateVariableWithNSString:(NSString *)name {
  return ([self getStateVariableWithNSString:name] != nil) ? true : false;
}

- (jboolean)isServiceWithNSString:(NSString *)name {
  if (name == nil) return false;
  if ([name java_hasSuffix:[self getServiceType]] == true) return true;
  if ([name java_hasSuffix:[self getServiceID]] == true) return true;
  return false;
}

- (OrgCybergarageUpnpXmlServiceData *)getServiceData {
  return OrgCybergarageUpnpService_getServiceData(self);
}

- (NSString *)getNotifyServiceTypeNT {
  return OrgCybergarageUpnpService_getNotifyServiceTypeNT(self);
}

- (NSString *)getNotifyServiceTypeUSN {
  return OrgCybergarageUpnpService_getNotifyServiceTypeUSN(self);
}

- (void)announceWithNSString:(NSString *)bindAddr {
  OrgCybergarageUpnpDevice *rootDev = [self getRootDevice];
  NSString *devLocation = [((OrgCybergarageUpnpDevice *) nil_chk(rootDev)) getLocationURLWithNSString:bindAddr];
  NSString *serviceNT = OrgCybergarageUpnpService_getNotifyServiceTypeNT(self);
  NSString *serviceUSN = OrgCybergarageUpnpService_getNotifyServiceTypeUSN(self);
  OrgCybergarageUpnpDevice *dev = [self getDevice];
  OrgCybergarageUpnpSsdpSSDPNotifyRequest *ssdpReq = create_OrgCybergarageUpnpSsdpSSDPNotifyRequest_init();
  [ssdpReq setServerWithNSString:OrgCybergarageUpnpUPnP_getServerName()];
  [ssdpReq setLeaseTimeWithInt:[((OrgCybergarageUpnpDevice *) nil_chk(dev)) getLeaseTime]];
  [ssdpReq setLocationWithNSString:devLocation];
  [ssdpReq setNTSWithNSString:OrgCybergarageUpnpDeviceNTS_ALIVE];
  [ssdpReq setNTWithNSString:serviceNT];
  [ssdpReq setUSNWithNSString:serviceUSN];
  OrgCybergarageUpnpSsdpSSDPNotifySocket *ssdpSock = create_OrgCybergarageUpnpSsdpSSDPNotifySocket_initWithNSString_(bindAddr);
  OrgCybergarageUpnpDevice_notifyWait();
  [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
}

- (void)byebyeWithNSString:(NSString *)bindAddr {
  NSString *devNT = OrgCybergarageUpnpService_getNotifyServiceTypeNT(self);
  NSString *devUSN = OrgCybergarageUpnpService_getNotifyServiceTypeUSN(self);
  OrgCybergarageUpnpSsdpSSDPNotifyRequest *ssdpReq = create_OrgCybergarageUpnpSsdpSSDPNotifyRequest_init();
  [ssdpReq setNTSWithNSString:OrgCybergarageUpnpDeviceNTS_BYEBYE];
  [ssdpReq setNTWithNSString:devNT];
  [ssdpReq setUSNWithNSString:devUSN];
  OrgCybergarageUpnpSsdpSSDPNotifySocket *ssdpSock = create_OrgCybergarageUpnpSsdpSSDPNotifySocket_initWithNSString_(bindAddr);
  OrgCybergarageUpnpDevice_notifyWait();
  [ssdpSock postWithOrgCybergarageUpnpSsdpSSDPNotifyRequest:ssdpReq];
}

- (jboolean)serviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:(OrgCybergarageUpnpSsdpSSDPPacket *)ssdpPacket {
  NSString *ssdpST = [((OrgCybergarageUpnpSsdpSSDPPacket *) nil_chk(ssdpPacket)) getST];
  if (ssdpST == nil) return false;
  OrgCybergarageUpnpDevice *dev = [self getDevice];
  NSString *serviceNT = OrgCybergarageUpnpService_getNotifyServiceTypeNT(self);
  NSString *serviceUSN = OrgCybergarageUpnpService_getNotifyServiceTypeUSN(self);
  if (OrgCybergarageUpnpDeviceST_isAllDeviceWithNSString_(ssdpST) == true) {
    [((OrgCybergarageUpnpDevice *) nil_chk(dev)) postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:serviceNT withNSString:serviceUSN];
  }
  else if (OrgCybergarageUpnpDeviceST_isURNServiceWithNSString_(ssdpST) == true) {
    NSString *serviceType = [self getServiceType];
    if ([ssdpST isEqual:serviceType] == true) [((OrgCybergarageUpnpDevice *) nil_chk(dev)) postSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:ssdpPacket withNSString:serviceType withNSString:serviceUSN];
  }
  return true;
}

- (void)setQueryListenerWithOrgCybergarageUpnpControlQueryListener:(id<OrgCybergarageUpnpControlQueryListener>)queryListener {
  OrgCybergarageUpnpServiceStateTable *stateTable = [self getServiceStateTable];
  jint tableSize = [((OrgCybergarageUpnpServiceStateTable *) nil_chk(stateTable)) size];
  for (jint n = 0; n < tableSize; n++) {
    OrgCybergarageUpnpStateVariable *var = [stateTable getStateVariableWithInt:n];
    [((OrgCybergarageUpnpStateVariable *) nil_chk(var)) setQueryListenerWithOrgCybergarageUpnpControlQueryListener:queryListener];
  }
}

- (OrgCybergarageUpnpEventSubscriberList *)getSubscriberList {
  return [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) getSubscriberList];
}

- (void)addSubscriberWithOrgCybergarageUpnpEventSubscriber:(OrgCybergarageUpnpEventSubscriber *)sub {
  [((OrgCybergarageUpnpEventSubscriberList *) nil_chk([self getSubscriberList])) addWithId:sub];
}

- (void)removeSubscriberWithOrgCybergarageUpnpEventSubscriber:(OrgCybergarageUpnpEventSubscriber *)sub {
  [((OrgCybergarageUpnpEventSubscriberList *) nil_chk([self getSubscriberList])) removeWithId:sub];
}

- (OrgCybergarageUpnpEventSubscriber *)getSubscriberWithNSString:(NSString *)name {
  OrgCybergarageUpnpEventSubscriberList *subList = [self getSubscriberList];
  jint subListCnt = [((OrgCybergarageUpnpEventSubscriberList *) nil_chk(subList)) size];
  for (jint n = 0; n < subListCnt; n++) {
    OrgCybergarageUpnpEventSubscriber *sub = [subList getSubscriberWithInt:n];
    if (sub == nil) continue;
    NSString *sid = [sub getSID];
    if (sid == nil) continue;
    if ([sid isEqual:name] == true) return sub;
  }
  return nil;
}

- (jboolean)notifyWithOrgCybergarageUpnpEventSubscriber:(OrgCybergarageUpnpEventSubscriber *)sub
                    withOrgCybergarageUpnpStateVariable:(OrgCybergarageUpnpStateVariable *)stateVar {
  return OrgCybergarageUpnpService_notifyWithOrgCybergarageUpnpEventSubscriber_withOrgCybergarageUpnpStateVariable_(self, sub, stateVar);
}

- (void)notifyWithOrgCybergarageUpnpStateVariable:(OrgCybergarageUpnpStateVariable *)stateVar {
  OrgCybergarageUpnpEventSubscriberList *subList = [self getSubscriberList];
  jint subListCnt;
  IOSObjectArray *subs;
  subListCnt = [((OrgCybergarageUpnpEventSubscriberList *) nil_chk(subList)) size];
  subs = [IOSObjectArray arrayWithLength:subListCnt type:OrgCybergarageUpnpEventSubscriber_class_()];
  for (jint n = 0; n < subListCnt; n++) IOSObjectArray_Set(subs, n, [subList getSubscriberWithInt:n]);
  for (jint n = 0; n < subListCnt; n++) {
    OrgCybergarageUpnpEventSubscriber *sub = IOSObjectArray_Get(subs, n);
    if (sub == nil) continue;
    if ([sub isExpired] == true) [self removeSubscriberWithOrgCybergarageUpnpEventSubscriber:sub];
  }
  subListCnt = [subList size];
  subs = [IOSObjectArray arrayWithLength:subListCnt type:OrgCybergarageUpnpEventSubscriber_class_()];
  for (jint n = 0; n < subListCnt; n++) IOSObjectArray_Set(subs, n, [subList getSubscriberWithInt:n]);
  for (jint n = 0; n < subListCnt; n++) {
    OrgCybergarageUpnpEventSubscriber *sub = IOSObjectArray_Get(subs, n);
    if (sub == nil) continue;
    if (OrgCybergarageUpnpService_notifyWithOrgCybergarageUpnpEventSubscriber_withOrgCybergarageUpnpStateVariable_(self, sub, stateVar) == false) {
    }
  }
}

- (void)notifyAllStateVariables {
  OrgCybergarageUpnpServiceStateTable *stateTable = [self getServiceStateTable];
  jint tableSize = [((OrgCybergarageUpnpServiceStateTable *) nil_chk(stateTable)) size];
  for (jint n = 0; n < tableSize; n++) {
    OrgCybergarageUpnpStateVariable *var = [stateTable getStateVariableWithInt:n];
    if ([((OrgCybergarageUpnpStateVariable *) nil_chk(var)) isSendEvents] == true) [self notifyWithOrgCybergarageUpnpStateVariable:var];
  }
}

- (NSString *)getSID {
  return [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) getSID];
}

- (void)setSIDWithNSString:(NSString *)id_ {
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) setSIDWithNSString:id_];
}

- (void)clearSID {
  [self setSIDWithNSString:@""];
  [self setTimeoutWithLong:0];
}

- (jboolean)hasSID {
  return OrgCybergarageUtilStringUtil_hasDataWithNSString_([self getSID]);
}

- (jboolean)isSubscribed {
  return [self hasSID];
}

- (jlong)getTimeout {
  return [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) getTimeout];
}

- (void)setTimeoutWithLong:(jlong)value {
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) setTimeoutWithLong:value];
}

- (void)setActionListenerWithOrgCybergarageUpnpControlActionListener:(id<OrgCybergarageUpnpControlActionListener>)listener {
  OrgCybergarageUpnpActionList *actionList = [self getActionList];
  jint nActions = [((OrgCybergarageUpnpActionList *) nil_chk(actionList)) size];
  for (jint n = 0; n < nActions; n++) {
    OrgCybergarageUpnpAction *action = [actionList getActionWithInt:n];
    [((OrgCybergarageUpnpAction *) nil_chk(action)) setActionListenerWithOrgCybergarageUpnpControlActionListener:listener];
  }
}

- (void)addStateVariableWithOrgCybergarageUpnpStateVariable:(OrgCybergarageUpnpStateVariable *)var {
  OrgCybergarageXmlNode *stateTableNode = [((OrgCybergarageXmlNode *) nil_chk(OrgCybergarageUpnpService_getSCPDNode(self))) getNodeWithNSString:OrgCybergarageUpnpServiceStateTable_ELEM_NAME];
  if (stateTableNode == nil) {
    stateTableNode = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpServiceStateTable_ELEM_NAME);
    [((OrgCybergarageXmlNode *) nil_chk(OrgCybergarageUpnpService_getSCPDNode(self))) addNodeWithOrgCybergarageXmlNode:stateTableNode];
  }
  [((OrgCybergarageUpnpStateVariable *) nil_chk(var)) setServiceNodeWithOrgCybergarageXmlNode:[self getServiceNode]];
  [stateTableNode addNodeWithOrgCybergarageXmlNode:[var getStateVariableNode]];
}

- (void)setUserDataWithId:(id)data {
  JreStrongAssign(&userData_, data);
}

- (id)getUserData {
  return userData_;
}

- (void)dealloc {
  RELEASE_(serviceNode_);
  RELEASE_(mutex_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgCybergarageXmlNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpDevice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 3, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 15, 16, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 17, 16, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x2, 19, 20, 16, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x2, 19, 15, 16, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpActionList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpAction;", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpServiceStateTable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpStateVariable;", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 3, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpXmlServiceData;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpEventSubscriberList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 34, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpEventSubscriber;", 0x1, 36, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getServiceNode);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgCybergarageXmlNode:);
  methods[3].selector = @selector(lock);
  methods[4].selector = @selector(unlock);
  methods[5].selector = @selector(isServiceNodeWithOrgCybergarageXmlNode:);
  methods[6].selector = @selector(getDeviceNode);
  methods[7].selector = @selector(getRootNode);
  methods[8].selector = @selector(getDevice);
  methods[9].selector = @selector(getRootDevice);
  methods[10].selector = @selector(setServiceTypeWithNSString:);
  methods[11].selector = @selector(getServiceType);
  methods[12].selector = @selector(setServiceIDWithNSString:);
  methods[13].selector = @selector(getServiceID);
  methods[14].selector = @selector(updateConfigId);
  methods[15].selector = @selector(getConfigId);
  methods[16].selector = @selector(isURLWithNSString:withNSString:);
  methods[17].selector = @selector(setSCPDURLWithNSString:);
  methods[18].selector = @selector(getSCPDURL);
  methods[19].selector = @selector(isSCPDURLWithNSString:);
  methods[20].selector = @selector(setControlURLWithNSString:);
  methods[21].selector = @selector(getControlURL);
  methods[22].selector = @selector(isControlURLWithNSString:);
  methods[23].selector = @selector(setEventSubURLWithNSString:);
  methods[24].selector = @selector(getEventSubURL);
  methods[25].selector = @selector(isEventSubURLWithNSString:);
  methods[26].selector = @selector(loadSCPDWithNSString:);
  methods[27].selector = @selector(loadSCPDWithJavaIoFile:);
  methods[28].selector = @selector(loadSCPDWithJavaIoInputStream:);
  methods[29].selector = @selector(setDescriptionURLWithNSString:);
  methods[30].selector = @selector(getDescriptionURL);
  methods[31].selector = @selector(getSCPDNodeWithJavaNetURL:);
  methods[32].selector = @selector(getSCPDNodeWithJavaIoFile:);
  methods[33].selector = @selector(getSCPDNode);
  methods[34].selector = @selector(getSCPDData);
  methods[35].selector = @selector(getActionList);
  methods[36].selector = @selector(getActionWithNSString:);
  methods[37].selector = @selector(addActionWithOrgCybergarageUpnpAction:);
  methods[38].selector = @selector(getServiceStateTable);
  methods[39].selector = @selector(getStateVariableWithNSString:);
  methods[40].selector = @selector(hasStateVariableWithNSString:);
  methods[41].selector = @selector(isServiceWithNSString:);
  methods[42].selector = @selector(getServiceData);
  methods[43].selector = @selector(getNotifyServiceTypeNT);
  methods[44].selector = @selector(getNotifyServiceTypeUSN);
  methods[45].selector = @selector(announceWithNSString:);
  methods[46].selector = @selector(byebyeWithNSString:);
  methods[47].selector = @selector(serviceSearchResponseWithOrgCybergarageUpnpSsdpSSDPPacket:);
  methods[48].selector = @selector(setQueryListenerWithOrgCybergarageUpnpControlQueryListener:);
  methods[49].selector = @selector(getSubscriberList);
  methods[50].selector = @selector(addSubscriberWithOrgCybergarageUpnpEventSubscriber:);
  methods[51].selector = @selector(removeSubscriberWithOrgCybergarageUpnpEventSubscriber:);
  methods[52].selector = @selector(getSubscriberWithNSString:);
  methods[53].selector = @selector(notifyWithOrgCybergarageUpnpEventSubscriber:withOrgCybergarageUpnpStateVariable:);
  methods[54].selector = @selector(notifyWithOrgCybergarageUpnpStateVariable:);
  methods[55].selector = @selector(notifyAllStateVariables);
  methods[56].selector = @selector(getSID);
  methods[57].selector = @selector(setSIDWithNSString:);
  methods[58].selector = @selector(clearSID);
  methods[59].selector = @selector(hasSID);
  methods[60].selector = @selector(isSubscribed);
  methods[61].selector = @selector(getTimeout);
  methods[62].selector = @selector(setTimeoutWithLong:);
  methods[63].selector = @selector(setActionListenerWithOrgCybergarageUpnpControlActionListener:);
  methods[64].selector = @selector(addStateVariableWithOrgCybergarageUpnpStateVariable:);
  methods[65].selector = @selector(setUserDataWithId:);
  methods[66].selector = @selector(getUserData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ELEM_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "serviceNode_", "LOrgCybergarageXmlNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SCPD_ROOTNODE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "SCPD_ROOTNODE_NS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "SPEC_VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "MAJOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "MAJOR_VALUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "MINOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "MINOR_VALUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "mutex_", "LOrgCybergarageUtilMutex;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SERVICE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "SERVICE_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "CONFIG_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "SCPDURL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "CONTROL_URL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "EVENT_SUB_URL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "userData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgCybergarageXmlNode;", "isServiceNode", "setServiceType", "LNSString;", "setServiceID", "isURL", "LNSString;LNSString;", "setSCPDURL", "isSCPDURL", "setControlURL", "isControlURL", "setEventSubURL", "isEventSubURL", "loadSCPD", "LOrgCybergarageUpnpDeviceInvalidDescriptionException;", "LJavaIoFile;", "LOrgCybergarageXmlParserException;", "LJavaIoInputStream;", "setDescriptionURL", "getSCPDNode", "LJavaNetURL;", "getAction", "addAction", "LOrgCybergarageUpnpAction;", "getStateVariable", "hasStateVariable", "isService", "announce", "byebye", "serviceSearchResponse", "LOrgCybergarageUpnpSsdpSSDPPacket;", "setQueryListener", "LOrgCybergarageUpnpControlQueryListener;", "addSubscriber", "LOrgCybergarageUpnpEventSubscriber;", "removeSubscriber", "getSubscriber", "notify", "LOrgCybergarageUpnpEventSubscriber;LOrgCybergarageUpnpStateVariable;", "LOrgCybergarageUpnpStateVariable;", "setSID", "setTimeout", "J", "setActionListener", "LOrgCybergarageUpnpControlActionListener;", "addStateVariable", "setUserData", "LNSObject;", &OrgCybergarageUpnpService_ELEM_NAME, &OrgCybergarageUpnpService_SCPD_ROOTNODE, &OrgCybergarageUpnpService_SCPD_ROOTNODE_NS, &OrgCybergarageUpnpService_SPEC_VERSION, &OrgCybergarageUpnpService_MAJOR, &OrgCybergarageUpnpService_MAJOR_VALUE, &OrgCybergarageUpnpService_MINOR, &OrgCybergarageUpnpService_MINOR_VALUE, &OrgCybergarageUpnpService_SERVICE_TYPE, &OrgCybergarageUpnpService_SERVICE_ID, &OrgCybergarageUpnpService_CONFIG_ID, &OrgCybergarageUpnpService_SCPDURL, &OrgCybergarageUpnpService_CONTROL_URL, &OrgCybergarageUpnpService_EVENT_SUB_URL };
  static const J2ObjcClassInfo _OrgCybergarageUpnpService = { "Service", "org.cybergarage.upnp", ptrTable, methods, fields, 7, 0x1, 67, 17, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpService;
}

@end

void OrgCybergarageUpnpService_init(OrgCybergarageUpnpService *self) {
  OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(self, create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpService_ELEM_NAME));
  OrgCybergarageXmlNode *sp = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpService_SPEC_VERSION);
  OrgCybergarageXmlNode *M = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpService_MAJOR);
  [M setValueWithNSString:OrgCybergarageUpnpService_MAJOR_VALUE];
  [sp addNodeWithOrgCybergarageXmlNode:M];
  OrgCybergarageXmlNode *m = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpService_MINOR);
  [m setValueWithNSString:OrgCybergarageUpnpService_MINOR_VALUE];
  [sp addNodeWithOrgCybergarageXmlNode:m];
  OrgCybergarageXmlNode *scpd = create_OrgCybergarageXmlNode_initWithNSString_(OrgCybergarageUpnpService_SCPD_ROOTNODE);
  [scpd addAttributeWithNSString:@"xmlns" withNSString:OrgCybergarageUpnpService_SCPD_ROOTNODE_NS];
  [scpd addNodeWithOrgCybergarageXmlNode:sp];
  [((OrgCybergarageUpnpXmlServiceData *) nil_chk(OrgCybergarageUpnpService_getServiceData(self))) setSCPDNodeWithOrgCybergarageXmlNode:scpd];
}

OrgCybergarageUpnpService *new_OrgCybergarageUpnpService_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpService, init)
}

OrgCybergarageUpnpService *create_OrgCybergarageUpnpService_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpService, init)
}

void OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(OrgCybergarageUpnpService *self, OrgCybergarageXmlNode *node) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mutex_, new_OrgCybergarageUtilMutex_init());
  JreStrongAssign(&self->userData_, nil);
  JreStrongAssign(&self->serviceNode_, node);
}

OrgCybergarageUpnpService *new_OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *node) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpService, initWithOrgCybergarageXmlNode_, node)
}

OrgCybergarageUpnpService *create_OrgCybergarageUpnpService_initWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *node) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpService, initWithOrgCybergarageXmlNode_, node)
}

jboolean OrgCybergarageUpnpService_isServiceNodeWithOrgCybergarageXmlNode_(OrgCybergarageXmlNode *node) {
  OrgCybergarageUpnpService_initialize();
  return [((NSString *) nil_chk(OrgCybergarageUpnpService_ELEM_NAME)) isEqual:[((OrgCybergarageXmlNode *) nil_chk(node)) getName]];
}

OrgCybergarageXmlNode *OrgCybergarageUpnpService_getDeviceNode(OrgCybergarageUpnpService *self) {
  OrgCybergarageXmlNode *node = [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getParentNode];
  if (node == nil) return nil;
  return [node getParentNode];
}

OrgCybergarageXmlNode *OrgCybergarageUpnpService_getRootNode(OrgCybergarageUpnpService *self) {
  return [((OrgCybergarageXmlNode *) nil_chk([self getServiceNode])) getRootNode];
}

jboolean OrgCybergarageUpnpService_isURLWithNSString_withNSString_(OrgCybergarageUpnpService *self, NSString *referenceUrl, NSString *url) {
  if (referenceUrl == nil || url == nil) return false;
  jboolean ret = [url isEqual:referenceUrl];
  if (ret == true) return true;
  NSString *relativeRefUrl = OrgCybergarageHttpHTTP_toRelativeURLWithNSString_withBoolean_(referenceUrl, false);
  ret = [url isEqual:relativeRefUrl];
  if (ret == true) return true;
  return false;
}

OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNodeWithJavaNetURL_(OrgCybergarageUpnpService *self, JavaNetURL *scpdUrl) {
  OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
  return [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaNetURL:scpdUrl];
}

OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNodeWithJavaIoFile_(OrgCybergarageUpnpService *self, JavaIoFile *scpdFile) {
  OrgCybergarageXmlParser *parser = OrgCybergarageUpnpUPnP_getXMLParser();
  return [((OrgCybergarageXmlParser *) nil_chk(parser)) parseWithJavaIoFile:scpdFile];
}

OrgCybergarageXmlNode *OrgCybergarageUpnpService_getSCPDNode(OrgCybergarageUpnpService *self) {
  OrgCybergarageUpnpXmlServiceData *data = OrgCybergarageUpnpService_getServiceData(self);
  OrgCybergarageXmlNode *scpdNode = [((OrgCybergarageUpnpXmlServiceData *) nil_chk(data)) getSCPDNode];
  if (scpdNode != nil) return scpdNode;
  OrgCybergarageUpnpDevice *rootDev = [self getRootDevice];
  if (rootDev == nil) return nil;
  NSString *scpdURLStr = [self getSCPDURL];
  @try {
    JavaNetURL *scpdUrl = create_JavaNetURL_initWithNSString_([rootDev getAbsoluteURLWithNSString:scpdURLStr]);
    scpdNode = OrgCybergarageUpnpService_getSCPDNodeWithJavaNetURL_(self, scpdUrl);
    if (scpdNode != nil) {
      [data setSCPDNodeWithOrgCybergarageXmlNode:scpdNode];
      return scpdNode;
    }
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
  }
  return nil;
}

OrgCybergarageUpnpXmlServiceData *OrgCybergarageUpnpService_getServiceData(OrgCybergarageUpnpService *self) {
  OrgCybergarageXmlNode *node = [self getServiceNode];
  OrgCybergarageUpnpXmlServiceData *userData = (OrgCybergarageUpnpXmlServiceData *) cast_chk([((OrgCybergarageXmlNode *) nil_chk(node)) getUserData], [OrgCybergarageUpnpXmlServiceData class]);
  if (userData == nil) {
    userData = create_OrgCybergarageUpnpXmlServiceData_init();
    [node setUserDataWithId:userData];
    [userData setNodeWithOrgCybergarageXmlNode:node];
  }
  return userData;
}

NSString *OrgCybergarageUpnpService_getNotifyServiceTypeNT(OrgCybergarageUpnpService *self) {
  return [self getServiceType];
}

NSString *OrgCybergarageUpnpService_getNotifyServiceTypeUSN(OrgCybergarageUpnpService *self) {
  return JreStrcat("$$$", [((OrgCybergarageUpnpDevice *) nil_chk([self getDevice])) getUDN], @"::", [self getServiceType]);
}

jboolean OrgCybergarageUpnpService_notifyWithOrgCybergarageUpnpEventSubscriber_withOrgCybergarageUpnpStateVariable_(OrgCybergarageUpnpService *self, OrgCybergarageUpnpEventSubscriber *sub, OrgCybergarageUpnpStateVariable *stateVar) {
  NSString *varName = [((OrgCybergarageUpnpStateVariable *) nil_chk(stateVar)) getName];
  NSString *value = [stateVar getValue];
  NSString *host = [((OrgCybergarageUpnpEventSubscriber *) nil_chk(sub)) getDeliveryHost];
  jint port = [sub getDeliveryPort];
  OrgCybergarageUpnpEventNotifyRequest *notifyReq = create_OrgCybergarageUpnpEventNotifyRequest_init();
  [notifyReq setRequestWithOrgCybergarageUpnpEventSubscriber:sub withNSString:varName withNSString:value];
  OrgCybergarageHttpHTTPResponse *res = [notifyReq postWithNSString:host withInt:port];
  if ([((OrgCybergarageHttpHTTPResponse *) nil_chk(res)) isSuccessful] == false) return false;
  [sub incrementNotifyCount];
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpService)
