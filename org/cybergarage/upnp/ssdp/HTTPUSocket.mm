//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ssdp/HTTPUSocket.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "org/cybergarage/upnp/ssdp/HTTPUSocket.h"
#include "org/cybergarage/upnp/ssdp/SSDP.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/util/Debug.h"

@interface OrgCybergarageUpnpSsdpHTTPUSocket () {
 @public
  JavaNetDatagramSocket *ssdpUniSock_;
  NSString *localAddr_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpHTTPUSocket, ssdpUniSock_, JavaNetDatagramSocket *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpHTTPUSocket, localAddr_, NSString *)

@implementation OrgCybergarageUpnpSsdpHTTPUSocket

- (JavaNetDatagramSocket *)getDatagramSocket {
  return ssdpUniSock_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpSsdpHTTPUSocket_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)bindAddr
                         withInt:(jint)bindPort {
  OrgCybergarageUpnpSsdpHTTPUSocket_initWithNSString_withInt_(self, bindAddr, bindPort);
  return self;
}

- (instancetype)initWithInt:(jint)bindPort {
  OrgCybergarageUpnpSsdpHTTPUSocket_initWithInt_(self, bindPort);
  return self;
}

- (void)java_finalize {
  [self close];
}

- (void)setLocalAddressWithNSString:(NSString *)addr {
  JreStrongAssign(&localAddr_, addr);
}

- (JavaNetDatagramSocket *)getUDPSocket {
  return ssdpUniSock_;
}

- (NSString *)getLocalAddress {
  if (0 < [((NSString *) nil_chk(localAddr_)) java_length]) return localAddr_;
  if (ssdpUniSock_ == nil) return @"";
  return [((JavaNetInetAddress *) nil_chk([ssdpUniSock_ getLocalAddress])) getHostAddress];
}

- (jboolean)open {
  [self close];
  @try {
    JreStrongAssignAndConsume(&ssdpUniSock_, new_JavaNetDatagramSocket_init());
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  return true;
}

- (jboolean)openWithNSString:(NSString *)bindAddr
                     withInt:(jint)bindPort {
  [self close];
  @try {
    JavaNetInetSocketAddress *bindInetAddr = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByNameWithNSString_(bindAddr), bindPort);
    JreStrongAssignAndConsume(&ssdpUniSock_, new_JavaNetDatagramSocket_initWithJavaNetSocketAddress_(bindInetAddr));
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  [self setLocalAddressWithNSString:bindAddr];
  return true;
}

- (jboolean)openWithInt:(jint)bindPort {
  [self close];
  @try {
    JavaNetInetSocketAddress *bindSock = create_JavaNetInetSocketAddress_initWithInt_(bindPort);
    JreStrongAssignAndConsume(&ssdpUniSock_, new_JavaNetDatagramSocket_initWithJavaNetSocketAddress_(nil));
    [ssdpUniSock_ setReuseAddressWithBoolean:true];
    [((JavaNetDatagramSocket *) nil_chk(ssdpUniSock_)) bindWithJavaNetSocketAddress:bindSock];
  }
  @catch (JavaLangException *e) {
    return false;
  }
  return true;
}

- (jboolean)close {
  if (ssdpUniSock_ == nil) return true;
  @try {
    [ssdpUniSock_ close];
    JreStrongAssign(&ssdpUniSock_, nil);
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  return true;
}

- (jboolean)postWithNSString:(NSString *)addr
                     withInt:(jint)port
                withNSString:(NSString *)msg {
  @try {
    JavaNetInetAddress *inetAddr = JavaNetInetAddress_getByNameWithNSString_(addr);
    JavaNetDatagramPacket *dgmPacket = create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_([((NSString *) nil_chk(msg)) java_getBytes], [msg java_length], inetAddr, port);
    [((JavaNetDatagramSocket *) nil_chk(ssdpUniSock_)) sendWithJavaNetDatagramPacket:dgmPacket];
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithNSString_(JreStrcat("$$", @"addr = ", [((JavaNetInetAddress *) nil_chk([((JavaNetDatagramSocket *) nil_chk(ssdpUniSock_)) getLocalAddress])) getHostName]));
    OrgCybergarageUtilDebug_warningWithNSString_(JreStrcat("$I", @"port = ", [((JavaNetDatagramSocket *) nil_chk(ssdpUniSock_)) getLocalPort]));
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  return true;
}

- (OrgCybergarageUpnpSsdpSSDPPacket *)receive {
  IOSByteArray *ssdvRecvBuf = [IOSByteArray arrayWithLength:OrgCybergarageUpnpSsdpSSDP_RECV_MESSAGE_BUFSIZE];
  OrgCybergarageUpnpSsdpSSDPPacket *recvPacket = create_OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(ssdvRecvBuf, ssdvRecvBuf->size_);
  [recvPacket setLocalAddressWithNSString:[self getLocalAddress]];
  @try {
    [((JavaNetDatagramSocket *) nil_chk(ssdpUniSock_)) receiveWithJavaNetDatagramPacket:[recvPacket getDatagramPacket]];
    [recvPacket setTimeStampWithLong:JavaLangSystem_currentTimeMillis()];
    OrgCybergarageUtilDebug_messageWithNSString_(JreStrcat("$$$$", @"Received SSDP unicast packet on ", [self getLocalAddress], @" from ", [recvPacket getRemoteAddress]));
  }
  @catch (JavaLangException *e) {
    return nil;
  }
  return recvPacket;
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgCybergarageUpnpSsdpHTTPUSocket class]);
  RELEASE_(ssdpUniSock_);
  RELEASE_(localAddr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaNetDatagramSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getDatagramSocket);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:withInt:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(java_finalize);
  methods[5].selector = @selector(setLocalAddressWithNSString:);
  methods[6].selector = @selector(getUDPSocket);
  methods[7].selector = @selector(getLocalAddress);
  methods[8].selector = @selector(open);
  methods[9].selector = @selector(openWithNSString:withInt:);
  methods[10].selector = @selector(openWithInt:);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(postWithNSString:withInt:withNSString:);
  methods[13].selector = @selector(receive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ssdpUniSock_", "LJavaNetDatagramSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localAddr_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "I", "finalize", "setLocalAddress", "LNSString;", "open", "post", "LNSString;ILNSString;" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpSsdpHTTPUSocket = { "HTTPUSocket", "org.cybergarage.upnp.ssdp", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpSsdpHTTPUSocket;
}

@end

void OrgCybergarageUpnpSsdpHTTPUSocket_init(OrgCybergarageUpnpSsdpHTTPUSocket *self) {
  NSObject_init(self);
  JreStrongAssign(&self->ssdpUniSock_, nil);
  JreStrongAssign(&self->localAddr_, @"");
  [self open];
}

OrgCybergarageUpnpSsdpHTTPUSocket *new_OrgCybergarageUpnpSsdpHTTPUSocket_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, init)
}

OrgCybergarageUpnpSsdpHTTPUSocket *create_OrgCybergarageUpnpSsdpHTTPUSocket_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, init)
}

void OrgCybergarageUpnpSsdpHTTPUSocket_initWithNSString_withInt_(OrgCybergarageUpnpSsdpHTTPUSocket *self, NSString *bindAddr, jint bindPort) {
  NSObject_init(self);
  JreStrongAssign(&self->ssdpUniSock_, nil);
  JreStrongAssign(&self->localAddr_, @"");
  [self openWithNSString:bindAddr withInt:bindPort];
}

OrgCybergarageUpnpSsdpHTTPUSocket *new_OrgCybergarageUpnpSsdpHTTPUSocket_initWithNSString_withInt_(NSString *bindAddr, jint bindPort) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, initWithNSString_withInt_, bindAddr, bindPort)
}

OrgCybergarageUpnpSsdpHTTPUSocket *create_OrgCybergarageUpnpSsdpHTTPUSocket_initWithNSString_withInt_(NSString *bindAddr, jint bindPort) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, initWithNSString_withInt_, bindAddr, bindPort)
}

void OrgCybergarageUpnpSsdpHTTPUSocket_initWithInt_(OrgCybergarageUpnpSsdpHTTPUSocket *self, jint bindPort) {
  NSObject_init(self);
  JreStrongAssign(&self->ssdpUniSock_, nil);
  JreStrongAssign(&self->localAddr_, @"");
  [self openWithInt:bindPort];
}

OrgCybergarageUpnpSsdpHTTPUSocket *new_OrgCybergarageUpnpSsdpHTTPUSocket_initWithInt_(jint bindPort) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, initWithInt_, bindPort)
}

OrgCybergarageUpnpSsdpHTTPUSocket *create_OrgCybergarageUpnpSsdpHTTPUSocket_initWithInt_(jint bindPort) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpHTTPUSocket, initWithInt_, bindPort)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpSsdpHTTPUSocket)
