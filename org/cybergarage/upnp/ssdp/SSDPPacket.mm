//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ssdp/SSDPPacket.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/net/DatagramPacket.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "org/cybergarage/http/HTTP.h"
#include "org/cybergarage/http/HTTPHeader.h"
#include "org/cybergarage/upnp/device/MAN.h"
#include "org/cybergarage/upnp/device/NT.h"
#include "org/cybergarage/upnp/device/NTS.h"
#include "org/cybergarage/upnp/device/ST.h"
#include "org/cybergarage/upnp/device/USN.h"
#include "org/cybergarage/upnp/ssdp/SSDP.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"

@interface OrgCybergarageUpnpSsdpSSDPPacket () {
 @public
  JavaNetDatagramPacket *dgmPacket_;
  NSString *localAddr_;
  jlong timeStamp_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPPacket, dgmPacket_, JavaNetDatagramPacket *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPPacket, localAddr_, NSString *)

@implementation OrgCybergarageUpnpSsdpSSDPPacket

- (instancetype)initWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)length {
  OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(self, buf, length);
  return self;
}

- (JavaNetDatagramPacket *)getDatagramPacket {
  return dgmPacket_;
}

- (void)setLocalAddressWithNSString:(NSString *)addr {
  JreStrongAssign(&localAddr_, addr);
}

- (NSString *)getLocalAddress {
  return localAddr_;
}

- (void)setTimeStampWithLong:(jlong)value {
  timeStamp_ = value;
}

- (jlong)getTimeStamp {
  return timeStamp_;
}

- (JavaNetInetAddress *)getRemoteInetAddress {
  return [((JavaNetDatagramPacket *) nil_chk([self getDatagramPacket])) getAddress];
}

- (NSString *)getRemoteAddress {
  return [((JavaNetInetAddress *) nil_chk([((JavaNetDatagramPacket *) nil_chk([self getDatagramPacket])) getAddress])) getHostAddress];
}

- (jint)getRemotePort {
  return [((JavaNetDatagramPacket *) nil_chk([self getDatagramPacket])) getPort];
}

- (IOSByteArray *)getData {
  if (packetBytes_ != nil) return packetBytes_;
  JavaNetDatagramPacket *packet = [self getDatagramPacket];
  jint packetLen = [((JavaNetDatagramPacket *) nil_chk(packet)) getLength];
  NSString *packetData = [NSString java_stringWithBytes:[packet getData] offset:0 length:packetLen];
  JreStrongAssign(&packetBytes_, [packetData java_getBytes]);
  return packetBytes_;
}

- (NSString *)getHost {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_HOST);
}

- (NSString *)getCacheControl {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_CACHE_CONTROL);
}

- (NSString *)getLocation {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_LOCATION);
}

- (NSString *)getMAN {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_MAN);
}

- (NSString *)getST {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_ST);
}

- (NSString *)getNT {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_NT);
}

- (NSString *)getNTS {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_NTS);
}

- (NSString *)getServer {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_SERVER);
}

- (NSString *)getUSN {
  return OrgCybergarageHttpHTTPHeader_getValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_USN);
}

- (jint)getMX {
  return OrgCybergarageHttpHTTPHeader_getIntegerValueWithByteArray_withNSString_([self getData], OrgCybergarageHttpHTTP_MX);
}

- (JavaNetInetAddress *)getHostInetAddress {
  NSString *addrStr = @"127.0.0.1";
  NSString *host = [self getHost];
  jint canmaIdx = [((NSString *) nil_chk(host)) java_lastIndexOfString:@":"];
  if (0 <= canmaIdx) {
    addrStr = [host java_substring:0 endIndex:canmaIdx];
    if ([((NSString *) nil_chk(addrStr)) charAtWithInt:0] == '[') addrStr = [addrStr java_substring:1 endIndex:[addrStr java_length]];
    if ([((NSString *) nil_chk(addrStr)) charAtWithInt:[addrStr java_length] - 1] == ']') addrStr = [addrStr java_substring:0 endIndex:[addrStr java_length] - 1];
  }
  JavaNetInetSocketAddress *isockaddr = create_JavaNetInetSocketAddress_initWithNSString_withInt_(addrStr, 0);
  return [isockaddr getAddress];
}

- (jboolean)isRootDevice {
  if (OrgCybergarageUpnpDeviceNT_isRootDeviceWithNSString_([self getNT]) == true) return true;
  if (OrgCybergarageUpnpDeviceST_isRootDeviceWithNSString_([self getST]) == true) return true;
  return OrgCybergarageUpnpDeviceUSN_isRootDeviceWithNSString_([self getUSN]);
}

- (jboolean)isDiscover {
  return OrgCybergarageUpnpDeviceMAN_isDiscoverWithNSString_([self getMAN]);
}

- (jboolean)isAlive {
  return OrgCybergarageUpnpDeviceNTS_isAliveWithNSString_([self getNTS]);
}

- (jboolean)isByeBye {
  return OrgCybergarageUpnpDeviceNTS_isByeByeWithNSString_([self getNTS]);
}

- (jint)getLeaseTime {
  return OrgCybergarageUpnpSsdpSSDP_getLeaseTimeWithNSString_([self getCacheControl]);
}

- (NSString *)description {
  return [NSString java_stringWithBytes:[self getData]];
}

- (void)dealloc {
  RELEASE_(dgmPacket_);
  RELEASE_(localAddr_);
  RELEASE_(packetBytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaNetDatagramPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:);
  methods[1].selector = @selector(getDatagramPacket);
  methods[2].selector = @selector(setLocalAddressWithNSString:);
  methods[3].selector = @selector(getLocalAddress);
  methods[4].selector = @selector(setTimeStampWithLong:);
  methods[5].selector = @selector(getTimeStamp);
  methods[6].selector = @selector(getRemoteInetAddress);
  methods[7].selector = @selector(getRemoteAddress);
  methods[8].selector = @selector(getRemotePort);
  methods[9].selector = @selector(getData);
  methods[10].selector = @selector(getHost);
  methods[11].selector = @selector(getCacheControl);
  methods[12].selector = @selector(getLocation);
  methods[13].selector = @selector(getMAN);
  methods[14].selector = @selector(getST);
  methods[15].selector = @selector(getNT);
  methods[16].selector = @selector(getNTS);
  methods[17].selector = @selector(getServer);
  methods[18].selector = @selector(getUSN);
  methods[19].selector = @selector(getMX);
  methods[20].selector = @selector(getHostInetAddress);
  methods[21].selector = @selector(isRootDevice);
  methods[22].selector = @selector(isDiscover);
  methods[23].selector = @selector(isAlive);
  methods[24].selector = @selector(isByeBye);
  methods[25].selector = @selector(getLeaseTime);
  methods[26].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dgmPacket_", "LJavaNetDatagramPacket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localAddr_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeStamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "packetBytes_", "[B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BI", "setLocalAddress", "LNSString;", "setTimeStamp", "J", "toString" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpSsdpSSDPPacket = { "SSDPPacket", "org.cybergarage.upnp.ssdp", ptrTable, methods, fields, 7, 0x1, 27, 4, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpSsdpSSDPPacket;
}

@end

void OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(OrgCybergarageUpnpSsdpSSDPPacket *self, IOSByteArray *buf, jint length) {
  NSObject_init(self);
  JreStrongAssign(&self->dgmPacket_, nil);
  JreStrongAssign(&self->localAddr_, @"");
  JreStrongAssign(&self->packetBytes_, nil);
  JreStrongAssignAndConsume(&self->dgmPacket_, new_JavaNetDatagramPacket_initWithByteArray_withInt_(buf, length));
}

OrgCybergarageUpnpSsdpSSDPPacket *new_OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(IOSByteArray *buf, jint length) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPPacket, initWithByteArray_withInt_, buf, length)
}

OrgCybergarageUpnpSsdpSSDPPacket *create_OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(IOSByteArray *buf, jint length) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPPacket, initWithByteArray_withInt_, buf, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpSsdpSSDPPacket)
