//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ssdp/SSDPSearchSocketList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/net/InetAddress.h"
#include "java/util/Vector.h"
#include "org/cybergarage/net/HostInterface.h"
#include "org/cybergarage/upnp/device/SearchListener.h"
#include "org/cybergarage/upnp/ssdp/SSDP.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchSocket.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchSocketList.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgCybergarageUpnpSsdpSSDPSearchSocketList () {
 @public
  IOSObjectArray *binds_;
  NSString *multicastIPv4_;
  NSString *multicastIPv6_;
  jint port_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPSearchSocketList, binds_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPSearchSocketList, multicastIPv4_, NSString *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPSearchSocketList, multicastIPv6_, NSString *)

@implementation OrgCybergarageUpnpSsdpSSDPSearchSocketList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpSsdpSSDPSearchSocketList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaNetInetAddressArray:(IOSObjectArray *)binds {
  OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_(self, binds);
  return self;
}

- (instancetype)initWithJavaNetInetAddressArray:(IOSObjectArray *)binds
                                        withInt:(jint)port
                                   withNSString:(NSString *)multicastIPv4
                                   withNSString:(NSString *)multicastIPv6 {
  OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_(self, binds, port, multicastIPv4, multicastIPv6);
  return self;
}

- (OrgCybergarageUpnpSsdpSSDPSearchSocket *)getSSDPSearchSocketWithInt:(jint)n {
  return [self getWithInt:n];
}

- (void)addSearchListenerWithOrgCybergarageUpnpDeviceSearchListener:(id<OrgCybergarageUpnpDeviceSearchListener>)listener {
  jint nServers = [self size];
  for (jint n = 0; n < nServers; n++) {
    OrgCybergarageUpnpSsdpSSDPSearchSocket *sock = [self getSSDPSearchSocketWithInt:n];
    [((OrgCybergarageUpnpSsdpSSDPSearchSocket *) nil_chk(sock)) addSearchListenerWithOrgCybergarageUpnpDeviceSearchListener:listener];
  }
}

- (jboolean)open {
  IOSObjectArray *binds = self->binds_;
  IOSObjectArray *bindAddresses;
  if (binds != nil) {
    bindAddresses = [IOSObjectArray arrayWithLength:binds->size_ type:NSString_class_()];
    for (jint i = 0; i < binds->size_; i++) {
      IOSObjectArray_Set(bindAddresses, i, [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(binds, i))) getHostAddress]);
    }
  }
  else {
    jint nHostAddrs = OrgCybergarageNetHostInterface_getNHostAddresses();
    bindAddresses = [IOSObjectArray arrayWithLength:nHostAddrs type:NSString_class_()];
    for (jint n = 0; n < nHostAddrs; n++) {
      IOSObjectArray_Set(bindAddresses, n, OrgCybergarageNetHostInterface_getHostAddressWithInt_(n));
    }
  }
  for (jint i = 0; i < bindAddresses->size_; i++) {
    if (IOSObjectArray_Get(bindAddresses, i) != nil) {
      OrgCybergarageUpnpSsdpSSDPSearchSocket *ssdpSearchSocket;
      if (OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(IOSObjectArray_Get(bindAddresses, i))) ssdpSearchSocket = create_OrgCybergarageUpnpSsdpSSDPSearchSocket_initWithNSString_withInt_withNSString_(IOSObjectArray_Get(bindAddresses, i), port_, multicastIPv6_);
      else ssdpSearchSocket = create_OrgCybergarageUpnpSsdpSSDPSearchSocket_initWithNSString_withInt_withNSString_(IOSObjectArray_Get(bindAddresses, i), port_, multicastIPv4_);
      [self addWithId:ssdpSearchSocket];
    }
  }
  return true;
}

- (void)close {
  jint nSockets = [self size];
  for (jint n = 0; n < nSockets; n++) {
    OrgCybergarageUpnpSsdpSSDPSearchSocket *sock = [self getSSDPSearchSocketWithInt:n];
    [((OrgCybergarageUpnpSsdpSSDPSearchSocket *) nil_chk(sock)) close];
  }
  [self clear];
}

- (void)start {
  jint nSockets = [self size];
  for (jint n = 0; n < nSockets; n++) {
    OrgCybergarageUpnpSsdpSSDPSearchSocket *sock = [self getSSDPSearchSocketWithInt:n];
    [((OrgCybergarageUpnpSsdpSSDPSearchSocket *) nil_chk(sock)) start];
  }
}

- (void)stop {
  jint nSockets = [self size];
  for (jint n = 0; n < nSockets; n++) {
    OrgCybergarageUpnpSsdpSSDPSearchSocket *sock = [self getSSDPSearchSocketWithInt:n];
    [((OrgCybergarageUpnpSsdpSSDPSearchSocket *) nil_chk(sock)) stop];
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(binds_);
  RELEASE_(multicastIPv4_);
  RELEASE_(multicastIPv6_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPSearchSocket;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaNetInetAddressArray:);
  methods[2].selector = @selector(initWithJavaNetInetAddressArray:withInt:withNSString:withNSString:);
  methods[3].selector = @selector(getSSDPSearchSocketWithInt:);
  methods[4].selector = @selector(addSearchListenerWithOrgCybergarageUpnpDeviceSearchListener:);
  methods[5].selector = @selector(open);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(start);
  methods[8].selector = @selector(stop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "binds_", "[LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "multicastIPv4_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "multicastIPv6_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaNetInetAddress;", "[LJavaNetInetAddress;ILNSString;LNSString;", "getSSDPSearchSocket", "I", "addSearchListener", "LOrgCybergarageUpnpDeviceSearchListener;", "Ljava/util/Vector<Lorg/cybergarage/upnp/ssdp/SSDPSearchSocket;>;" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpSsdpSSDPSearchSocketList = { "SSDPSearchSocketList", "org.cybergarage.upnp.ssdp", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, 6, -1 };
  return &_OrgCybergarageUpnpSsdpSSDPSearchSocketList;
}

@end

void OrgCybergarageUpnpSsdpSSDPSearchSocketList_init(OrgCybergarageUpnpSsdpSSDPSearchSocketList *self) {
  JavaUtilVector_init(self);
  JreStrongAssign(&self->binds_, nil);
  JreStrongAssign(&self->multicastIPv4_, OrgCybergarageUpnpSsdpSSDP_ADDRESS);
  JreStrongAssign(&self->multicastIPv6_, OrgCybergarageUpnpSsdpSSDP_getIPv6Address());
  self->port_ = OrgCybergarageUpnpSsdpSSDP_PORT;
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *new_OrgCybergarageUpnpSsdpSSDPSearchSocketList_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, init)
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *create_OrgCybergarageUpnpSsdpSSDPSearchSocketList_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, init)
}

void OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_(OrgCybergarageUpnpSsdpSSDPSearchSocketList *self, IOSObjectArray *binds) {
  JavaUtilVector_init(self);
  JreStrongAssign(&self->binds_, nil);
  JreStrongAssign(&self->multicastIPv4_, OrgCybergarageUpnpSsdpSSDP_ADDRESS);
  JreStrongAssign(&self->multicastIPv6_, OrgCybergarageUpnpSsdpSSDP_getIPv6Address());
  self->port_ = OrgCybergarageUpnpSsdpSSDP_PORT;
  JreStrongAssign(&self->binds_, binds);
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *new_OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_(IOSObjectArray *binds) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, initWithJavaNetInetAddressArray_, binds)
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *create_OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_(IOSObjectArray *binds) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, initWithJavaNetInetAddressArray_, binds)
}

void OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_(OrgCybergarageUpnpSsdpSSDPSearchSocketList *self, IOSObjectArray *binds, jint port, NSString *multicastIPv4, NSString *multicastIPv6) {
  JavaUtilVector_init(self);
  JreStrongAssign(&self->binds_, nil);
  JreStrongAssign(&self->multicastIPv4_, OrgCybergarageUpnpSsdpSSDP_ADDRESS);
  JreStrongAssign(&self->multicastIPv6_, OrgCybergarageUpnpSsdpSSDP_getIPv6Address());
  self->port_ = OrgCybergarageUpnpSsdpSSDP_PORT;
  JreStrongAssign(&self->binds_, binds);
  self->port_ = port;
  JreStrongAssign(&self->multicastIPv4_, multicastIPv4);
  JreStrongAssign(&self->multicastIPv6_, multicastIPv6);
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *new_OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_(IOSObjectArray *binds, jint port, NSString *multicastIPv4, NSString *multicastIPv6) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_, binds, port, multicastIPv4, multicastIPv6)
}

OrgCybergarageUpnpSsdpSSDPSearchSocketList *create_OrgCybergarageUpnpSsdpSSDPSearchSocketList_initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_(IOSObjectArray *binds, jint port, NSString *multicastIPv4, NSString *multicastIPv6) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPSearchSocketList, initWithJavaNetInetAddressArray_withInt_withNSString_withNSString_, binds, port, multicastIPv4, multicastIPv6)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpSsdpSSDPSearchSocketList)
