//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ssdp/SSDPSearchResponseSocket.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramSocket.h"
#include "org/cybergarage/upnp/ControlPoint.h"
#include "org/cybergarage/upnp/ssdp/HTTPUSocket.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchRequest.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchResponse.h"
#include "org/cybergarage/upnp/ssdp/SSDPSearchResponseSocket.h"

@interface OrgCybergarageUpnpSsdpSSDPSearchResponseSocket () {
 @public
  OrgCybergarageUpnpControlPoint *controlPoint_;
  JavaLangThread *deviceSearchResponseThread_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, controlPoint_, OrgCybergarageUpnpControlPoint *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, deviceSearchResponseThread_, JavaLangThread *)

@implementation OrgCybergarageUpnpSsdpSSDPSearchResponseSocket

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)bindAddr
                         withInt:(jint)port {
  OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_initWithNSString_withInt_(self, bindAddr, port);
  return self;
}

- (void)setControlPointWithOrgCybergarageUpnpControlPoint:(OrgCybergarageUpnpControlPoint *)ctrlp {
  JreStrongAssign(&self->controlPoint_, ctrlp);
}

- (OrgCybergarageUpnpControlPoint *)getControlPoint {
  return controlPoint_;
}

- (void)run {
  JavaLangThread *thisThread = JavaLangThread_currentThread();
  OrgCybergarageUpnpControlPoint *ctrlPoint = [self getControlPoint];
  while (deviceSearchResponseThread_ == thisThread) {
    JavaLangThread_yield();
    OrgCybergarageUpnpSsdpSSDPPacket *packet = [self receive];
    if (packet == nil) break;
    if (ctrlPoint != nil) [ctrlPoint searchResponseReceivedWithOrgCybergarageUpnpSsdpSSDPPacket:packet];
  }
}

- (void)start {
  JavaLangStringBuffer *name = create_JavaLangStringBuffer_initWithNSString_(@"Cyber.SSDPSearchResponseSocket/");
  JavaNetDatagramSocket *s = [self getDatagramSocket];
  JreStrongAssignAndConsume(&deviceSearchResponseThread_, new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, [name description]));
  [deviceSearchResponseThread_ start];
}

- (void)stop {
  JreStrongAssign(&deviceSearchResponseThread_, nil);
}

- (jboolean)postWithNSString:(NSString *)addr
                     withInt:(jint)port
withOrgCybergarageUpnpSsdpSSDPSearchResponse:(OrgCybergarageUpnpSsdpSSDPSearchResponse *)res {
  return [self postWithNSString:addr withInt:port withNSString:[((OrgCybergarageUpnpSsdpSSDPSearchResponse *) nil_chk(res)) getHeader]];
}

- (jboolean)postWithNSString:(NSString *)addr
                     withInt:(jint)port
withOrgCybergarageUpnpSsdpSSDPSearchRequest:(OrgCybergarageUpnpSsdpSSDPSearchRequest *)req {
  return [self postWithNSString:addr withInt:port withNSString:[((OrgCybergarageUpnpSsdpSSDPSearchRequest *) nil_chk(req)) description]];
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgCybergarageUpnpSsdpSSDPSearchResponseSocket class]);
  RELEASE_(controlPoint_);
  RELEASE_(deviceSearchResponseThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpControlPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(setControlPointWithOrgCybergarageUpnpControlPoint:);
  methods[3].selector = @selector(getControlPoint);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(start);
  methods[6].selector = @selector(stop);
  methods[7].selector = @selector(postWithNSString:withInt:withOrgCybergarageUpnpSsdpSSDPSearchResponse:);
  methods[8].selector = @selector(postWithNSString:withInt:withOrgCybergarageUpnpSsdpSSDPSearchRequest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "controlPoint_", "LOrgCybergarageUpnpControlPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deviceSearchResponseThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "setControlPoint", "LOrgCybergarageUpnpControlPoint;", "post", "LNSString;ILOrgCybergarageUpnpSsdpSSDPSearchResponse;", "LNSString;ILOrgCybergarageUpnpSsdpSSDPSearchRequest;" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpSsdpSSDPSearchResponseSocket = { "SSDPSearchResponseSocket", "org.cybergarage.upnp.ssdp", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket;
}

@end

void OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_init(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *self) {
  OrgCybergarageUpnpSsdpHTTPUSocket_init(self);
  JreStrongAssign(&self->controlPoint_, nil);
  JreStrongAssign(&self->deviceSearchResponseThread_, nil);
  [self setControlPointWithOrgCybergarageUpnpControlPoint:nil];
}

OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *new_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, init)
}

OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *create_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, init)
}

void OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_initWithNSString_withInt_(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *self, NSString *bindAddr, jint port) {
  OrgCybergarageUpnpSsdpHTTPUSocket_initWithNSString_withInt_(self, bindAddr, port);
  JreStrongAssign(&self->controlPoint_, nil);
  JreStrongAssign(&self->deviceSearchResponseThread_, nil);
  [self setControlPointWithOrgCybergarageUpnpControlPoint:nil];
}

OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *new_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_initWithNSString_withInt_(NSString *bindAddr, jint port) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, initWithNSString_withInt_, bindAddr, port)
}

OrgCybergarageUpnpSsdpSSDPSearchResponseSocket *create_OrgCybergarageUpnpSsdpSSDPSearchResponseSocket_initWithNSString_withInt_(NSString *bindAddr, jint port) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket, initWithNSString_withInt_, bindAddr, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpSsdpSSDPSearchResponseSocket)
