//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ssdp/HTTPMUSocket.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/MulticastSocket.h"
#include "java/net/NetworkInterface.h"
#include "java/util/Enumeration.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/upnp/ssdp/HTTPMUSocket.h"
#include "org/cybergarage/upnp/ssdp/SSDP.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/util/Debug.h"

@interface OrgCybergarageUpnpSsdpHTTPMUSocket () {
 @public
  JavaNetInetSocketAddress *ssdpMultiGroup_;
  JavaNetMulticastSocket *ssdpMultiSock_;
  JavaNetNetworkInterface *ssdpMultiIf_;
}

@end

J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpHTTPMUSocket, ssdpMultiGroup_, JavaNetInetSocketAddress *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpHTTPMUSocket, ssdpMultiSock_, JavaNetMulticastSocket *)
J2OBJC_FIELD_SETTER(OrgCybergarageUpnpSsdpHTTPMUSocket, ssdpMultiIf_, JavaNetNetworkInterface *)

@implementation OrgCybergarageUpnpSsdpHTTPMUSocket

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpSsdpHTTPMUSocket_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)addr
                         withInt:(jint)port
                    withNSString:(NSString *)bindAddr {
  OrgCybergarageUpnpSsdpHTTPMUSocket_initWithNSString_withInt_withNSString_(self, addr, port, bindAddr);
  return self;
}

- (void)java_finalize {
  [self close];
}

- (NSString *)getLocalAddress {
  if (ssdpMultiGroup_ == nil || ssdpMultiIf_ == nil) return @"";
  JavaNetInetAddress *mcastAddr = [ssdpMultiGroup_ getAddress];
  id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ssdpMultiIf_)) getInetAddresses];
  while ([((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]) {
    JavaNetInetAddress *addr = [addrs nextElement];
    if ([mcastAddr isKindOfClass:[JavaNetInet6Address class]] && [addr isKindOfClass:[JavaNetInet6Address class]]) return [((JavaNetInetAddress *) nil_chk(addr)) getHostAddress];
    if ([mcastAddr isKindOfClass:[JavaNetInet4Address class]] && [addr isKindOfClass:[JavaNetInet4Address class]]) return [((JavaNetInetAddress *) nil_chk(addr)) getHostAddress];
  }
  return @"";
}

- (jint)getMulticastPort {
  return [((JavaNetInetSocketAddress *) nil_chk(ssdpMultiGroup_)) getPort];
}

- (jint)getLocalPort {
  return [((JavaNetMulticastSocket *) nil_chk(ssdpMultiSock_)) getLocalPort];
}

- (JavaNetMulticastSocket *)getSocket {
  return ssdpMultiSock_;
}

- (JavaNetInetAddress *)getMulticastInetAddress {
  return [((JavaNetInetSocketAddress *) nil_chk(ssdpMultiGroup_)) getAddress];
}

- (NSString *)getMulticastAddress {
  return [((JavaNetInetAddress *) nil_chk([self getMulticastInetAddress])) getHostAddress];
}

- (jboolean)openWithNSString:(NSString *)addr
                     withInt:(jint)port
      withJavaNetInetAddress:(JavaNetInetAddress *)bindAddr {
  @try {
    JreStrongAssignAndConsume(&ssdpMultiSock_, new_JavaNetMulticastSocket_initWithJavaNetSocketAddress_(nil));
    [ssdpMultiSock_ setReuseAddressWithBoolean:true];
    JavaNetInetSocketAddress *bindSockAddr = create_JavaNetInetSocketAddress_initWithInt_(port);
    [((JavaNetMulticastSocket *) nil_chk(ssdpMultiSock_)) bindWithJavaNetSocketAddress:bindSockAddr];
    JreStrongAssignAndConsume(&ssdpMultiGroup_, new_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByNameWithNSString_(addr), port));
    JreStrongAssign(&ssdpMultiIf_, JavaNetNetworkInterface_getByInetAddressWithJavaNetInetAddress_(bindAddr));
    [((JavaNetMulticastSocket *) nil_chk(ssdpMultiSock_)) joinGroupWithJavaNetSocketAddress:ssdpMultiGroup_ withJavaNetNetworkInterface:ssdpMultiIf_];
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  return true;
}

- (jboolean)openWithNSString:(NSString *)addr
                     withInt:(jint)port
                withNSString:(NSString *)bindAddr {
  @try {
    return [self openWithNSString:addr withInt:port withJavaNetInetAddress:JavaNetInetAddress_getByNameWithNSString_(bindAddr)];
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
}

- (jboolean)close {
  if (ssdpMultiSock_ == nil) return true;
  @try {
    [ssdpMultiSock_ leaveGroupWithJavaNetSocketAddress:ssdpMultiGroup_ withJavaNetNetworkInterface:ssdpMultiIf_];
    [((JavaNetMulticastSocket *) nil_chk(ssdpMultiSock_)) close];
    JreStrongAssign(&ssdpMultiSock_, nil);
  }
  @catch (JavaLangException *e) {
    return false;
  }
  return true;
}

- (jboolean)sendWithNSString:(NSString *)msg
                withNSString:(NSString *)bindAddr
                     withInt:(jint)bindPort {
  JavaNetMulticastSocket *msock = nil;
  @try {
    if ((bindAddr) != nil && (0 < bindPort)) {
      msock = create_JavaNetMulticastSocket_initWithJavaNetSocketAddress_(nil);
      [msock bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithNSString_withInt_(bindAddr, bindPort)];
    }
    else {
      msock = create_JavaNetMulticastSocket_init();
    }
    JavaNetDatagramPacket *dgmPacket = create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetSocketAddress_([((NSString *) nil_chk(msg)) java_getBytes], [msg java_length], ssdpMultiGroup_);
    [msock setTimeToLiveWithInt:OrgCybergarageUpnpUPnP_getTimeToLive()];
    [msock sendWithJavaNetDatagramPacket:dgmPacket];
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
    return false;
  }
  @finally {
    if (msock != nil) [msock close];
  }
  return true;
}

- (jboolean)sendWithNSString:(NSString *)msg {
  return [self sendWithNSString:msg withNSString:nil withInt:-1];
}

- (jboolean)postWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)req
                                     withNSString:(NSString *)bindAddr
                                          withInt:(jint)bindPort {
  return [self sendWithNSString:[((OrgCybergarageHttpHTTPRequest *) nil_chk(req)) description] withNSString:bindAddr withInt:bindPort];
}

- (jboolean)postWithOrgCybergarageHttpHTTPRequest:(OrgCybergarageHttpHTTPRequest *)req {
  return [self sendWithNSString:[((OrgCybergarageHttpHTTPRequest *) nil_chk(req)) description] withNSString:nil withInt:-1];
}

- (OrgCybergarageUpnpSsdpSSDPPacket *)receive {
  IOSByteArray *ssdvRecvBuf = [IOSByteArray arrayWithLength:OrgCybergarageUpnpSsdpSSDP_RECV_MESSAGE_BUFSIZE];
  OrgCybergarageUpnpSsdpSSDPPacket *recvPacket = create_OrgCybergarageUpnpSsdpSSDPPacket_initWithByteArray_withInt_(ssdvRecvBuf, ssdvRecvBuf->size_);
  [recvPacket setLocalAddressWithNSString:[self getLocalAddress]];
  if (ssdpMultiSock_ != nil) [ssdpMultiSock_ receiveWithJavaNetDatagramPacket:[recvPacket getDatagramPacket]];
  else @throw create_JavaIoIOException_initWithNSString_(@"Multicast socket has already been closed.");
  [recvPacket setTimeStampWithLong:JavaLangSystem_currentTimeMillis()];
  return recvPacket;
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgCybergarageUpnpSsdpHTTPMUSocket class]);
  RELEASE_(ssdpMultiGroup_);
  RELEASE_(ssdpMultiSock_);
  RELEASE_(ssdpMultiIf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetMulticastSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpSsdpSSDPPacket;", 0x1, -1, -1, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withInt:withNSString:);
  methods[2].selector = @selector(java_finalize);
  methods[3].selector = @selector(getLocalAddress);
  methods[4].selector = @selector(getMulticastPort);
  methods[5].selector = @selector(getLocalPort);
  methods[6].selector = @selector(getSocket);
  methods[7].selector = @selector(getMulticastInetAddress);
  methods[8].selector = @selector(getMulticastAddress);
  methods[9].selector = @selector(openWithNSString:withInt:withJavaNetInetAddress:);
  methods[10].selector = @selector(openWithNSString:withInt:withNSString:);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(sendWithNSString:withNSString:withInt:);
  methods[13].selector = @selector(sendWithNSString:);
  methods[14].selector = @selector(postWithOrgCybergarageHttpHTTPRequest:withNSString:withInt:);
  methods[15].selector = @selector(postWithOrgCybergarageHttpHTTPRequest:);
  methods[16].selector = @selector(receive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ssdpMultiGroup_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ssdpMultiSock_", "LJavaNetMulticastSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ssdpMultiIf_", "LJavaNetNetworkInterface;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;", "finalize", "open", "LNSString;ILJavaNetInetAddress;", "send", "LNSString;LNSString;I", "LNSString;", "post", "LOrgCybergarageHttpHTTPRequest;LNSString;I", "LOrgCybergarageHttpHTTPRequest;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpSsdpHTTPMUSocket = { "HTTPMUSocket", "org.cybergarage.upnp.ssdp", ptrTable, methods, fields, 7, 0x1, 17, 3, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageUpnpSsdpHTTPMUSocket;
}

@end

void OrgCybergarageUpnpSsdpHTTPMUSocket_init(OrgCybergarageUpnpSsdpHTTPMUSocket *self) {
  NSObject_init(self);
  JreStrongAssign(&self->ssdpMultiGroup_, nil);
  JreStrongAssign(&self->ssdpMultiSock_, nil);
  JreStrongAssign(&self->ssdpMultiIf_, nil);
}

OrgCybergarageUpnpSsdpHTTPMUSocket *new_OrgCybergarageUpnpSsdpHTTPMUSocket_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpHTTPMUSocket, init)
}

OrgCybergarageUpnpSsdpHTTPMUSocket *create_OrgCybergarageUpnpSsdpHTTPMUSocket_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpHTTPMUSocket, init)
}

void OrgCybergarageUpnpSsdpHTTPMUSocket_initWithNSString_withInt_withNSString_(OrgCybergarageUpnpSsdpHTTPMUSocket *self, NSString *addr, jint port, NSString *bindAddr) {
  NSObject_init(self);
  JreStrongAssign(&self->ssdpMultiGroup_, nil);
  JreStrongAssign(&self->ssdpMultiSock_, nil);
  JreStrongAssign(&self->ssdpMultiIf_, nil);
  [self openWithNSString:addr withInt:port withNSString:bindAddr];
}

OrgCybergarageUpnpSsdpHTTPMUSocket *new_OrgCybergarageUpnpSsdpHTTPMUSocket_initWithNSString_withInt_withNSString_(NSString *addr, jint port, NSString *bindAddr) {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpSsdpHTTPMUSocket, initWithNSString_withInt_withNSString_, addr, port, bindAddr)
}

OrgCybergarageUpnpSsdpHTTPMUSocket *create_OrgCybergarageUpnpSsdpHTTPMUSocket_initWithNSString_withInt_withNSString_(NSString *addr, jint port, NSString *bindAddr) {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpSsdpHTTPMUSocket, initWithNSString_withInt_withNSString_, addr, port, bindAddr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpSsdpHTTPMUSocket)
