//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/upnp/ArgumentList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Vector.h"
#include "org/cybergarage/upnp/Argument.h"
#include "org/cybergarage/upnp/ArgumentList.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *OrgCybergarageUpnpArgumentList__Annotations$0(void);

NSString *OrgCybergarageUpnpArgumentList_ELEM_NAME = @"argumentList";

@implementation OrgCybergarageUpnpArgumentList

+ (NSString *)ELEM_NAME {
  return OrgCybergarageUpnpArgumentList_ELEM_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageUpnpArgumentList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgCybergarageUpnpArgument *)getArgumentWithInt:(jint)n {
  return [self getWithInt:n];
}

- (OrgCybergarageUpnpArgument *)getArgumentWithNSString:(NSString *)name {
  jint nArgs = [self size];
  for (jint n = 0; n < nArgs; n++) {
    OrgCybergarageUpnpArgument *arg = [self getArgumentWithInt:n];
    NSString *argName = [((OrgCybergarageUpnpArgument *) nil_chk(arg)) getName];
    if (argName == nil) continue;
    if ([argName isEqual:name] == true) return arg;
  }
  return nil;
}

- (void)setWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)inArgList {
  jint nInArgs = [((OrgCybergarageUpnpArgumentList *) nil_chk(inArgList)) size];
  for (jint n = 0; n < nInArgs; n++) {
    OrgCybergarageUpnpArgument *inArg = [inArgList getArgumentWithInt:n];
    NSString *inArgName = [((OrgCybergarageUpnpArgument *) nil_chk(inArg)) getName];
    OrgCybergarageUpnpArgument *arg = [self getArgumentWithNSString:inArgName];
    if (arg == nil) continue;
    [arg setValueWithNSString:[inArg getValue]];
  }
}

- (void)setReqArgsWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)inArgList {
  jint nArgs = [self size];
  for (jint n = 0; n < nArgs; n++) {
    OrgCybergarageUpnpArgument *arg = [self getArgumentWithInt:n];
    if ([((OrgCybergarageUpnpArgument *) nil_chk(arg)) isInDirection]) {
      NSString *argName = [arg getName];
      OrgCybergarageUpnpArgument *inArg = [((OrgCybergarageUpnpArgumentList *) nil_chk(inArgList)) getArgumentWithNSString:argName];
      if (inArg == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Argument \"", argName, @"\" missing."));
      [arg setValueWithNSString:[inArg getValue]];
    }
  }
}

- (void)setResArgsWithOrgCybergarageUpnpArgumentList:(OrgCybergarageUpnpArgumentList *)outArgList {
  jint nArgs = [self size];
  for (jint n = 0; n < nArgs; n++) {
    OrgCybergarageUpnpArgument *arg = [self getArgumentWithInt:n];
    if ([((OrgCybergarageUpnpArgument *) nil_chk(arg)) isOutDirection]) {
      NSString *argName = [arg getName];
      OrgCybergarageUpnpArgument *outArg = [((OrgCybergarageUpnpArgumentList *) nil_chk(outArgList)) getArgumentWithNSString:argName];
      if (outArg == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Argument \"", argName, @"\" missing."));
      [arg setValueWithNSString:[outArg getValue]];
    }
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgument;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageUpnpArgument;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, 5, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getArgumentWithInt:);
  methods[2].selector = @selector(getArgumentWithNSString:);
  methods[3].selector = @selector(setWithOrgCybergarageUpnpArgumentList:);
  methods[4].selector = @selector(setReqArgsWithOrgCybergarageUpnpArgumentList:);
  methods[5].selector = @selector(setResArgsWithOrgCybergarageUpnpArgumentList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ELEM_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "getArgument", "I", "LNSString;", "set", "LOrgCybergarageUpnpArgumentList;", (void *)&OrgCybergarageUpnpArgumentList__Annotations$0, "setReqArgs", "setResArgs", &OrgCybergarageUpnpArgumentList_ELEM_NAME, "Ljava/util/Vector<Lorg/cybergarage/upnp/Argument;>;" };
  static const J2ObjcClassInfo _OrgCybergarageUpnpArgumentList = { "ArgumentList", "org.cybergarage.upnp", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, 9, -1 };
  return &_OrgCybergarageUpnpArgumentList;
}

@end

void OrgCybergarageUpnpArgumentList_init(OrgCybergarageUpnpArgumentList *self) {
  JavaUtilVector_init(self);
}

OrgCybergarageUpnpArgumentList *new_OrgCybergarageUpnpArgumentList_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageUpnpArgumentList, init)
}

OrgCybergarageUpnpArgumentList *create_OrgCybergarageUpnpArgumentList_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageUpnpArgumentList, init)
}

IOSObjectArray *OrgCybergarageUpnpArgumentList__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageUpnpArgumentList)
