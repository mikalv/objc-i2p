//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/net/HostInterface.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/net/SocketException.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"
#include "org/cybergarage/net/HostInterface.h"
#include "org/cybergarage/util/Debug.h"

@interface OrgCybergarageNetHostInterface ()

+ (jboolean)hasAssignedInterface;

+ (jboolean)isUsableAddressWithJavaNetInetAddress:(JavaNetInetAddress *)addr;

@end

inline NSString *OrgCybergarageNetHostInterface_get_ifAddress(void);
inline NSString *OrgCybergarageNetHostInterface_set_ifAddress(NSString *value);
static NSString *OrgCybergarageNetHostInterface_ifAddress = @"";
J2OBJC_STATIC_FIELD_OBJ(OrgCybergarageNetHostInterface, ifAddress, NSString *)

__attribute__((unused)) static jboolean OrgCybergarageNetHostInterface_hasAssignedInterface(void);

__attribute__((unused)) static jboolean OrgCybergarageNetHostInterface_isUsableAddressWithJavaNetInetAddress_(JavaNetInetAddress *addr);

jboolean OrgCybergarageNetHostInterface_USE_LOOPBACK_ADDR = false;
jboolean OrgCybergarageNetHostInterface_USE_ONLY_IPV4_ADDR = false;
jboolean OrgCybergarageNetHostInterface_USE_ONLY_IPV6_ADDR = false;

@implementation OrgCybergarageNetHostInterface

+ (jboolean)USE_LOOPBACK_ADDR {
  return OrgCybergarageNetHostInterface_USE_LOOPBACK_ADDR;
}

+ (void)setUSE_LOOPBACK_ADDR:(jboolean)value {
  OrgCybergarageNetHostInterface_USE_LOOPBACK_ADDR = value;
}

+ (jboolean)USE_ONLY_IPV4_ADDR {
  return OrgCybergarageNetHostInterface_USE_ONLY_IPV4_ADDR;
}

+ (void)setUSE_ONLY_IPV4_ADDR:(jboolean)value {
  OrgCybergarageNetHostInterface_USE_ONLY_IPV4_ADDR = value;
}

+ (jboolean)USE_ONLY_IPV6_ADDR {
  return OrgCybergarageNetHostInterface_USE_ONLY_IPV6_ADDR;
}

+ (void)setUSE_ONLY_IPV6_ADDR:(jboolean)value {
  OrgCybergarageNetHostInterface_USE_ONLY_IPV6_ADDR = value;
}

+ (jint)IPV4_BITMASK {
  return OrgCybergarageNetHostInterface_IPV4_BITMASK;
}

+ (jint)IPV6_BITMASK {
  return OrgCybergarageNetHostInterface_IPV6_BITMASK;
}

+ (jint)LOCAL_BITMASK {
  return OrgCybergarageNetHostInterface_LOCAL_BITMASK;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageNetHostInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setInterfaceWithNSString:(NSString *)ifaddr {
  OrgCybergarageNetHostInterface_setInterfaceWithNSString_(ifaddr);
}

+ (NSString *)getInterface {
  return OrgCybergarageNetHostInterface_getInterface();
}

+ (jboolean)hasAssignedInterface {
  return OrgCybergarageNetHostInterface_hasAssignedInterface();
}

+ (jboolean)isUsableAddressWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return OrgCybergarageNetHostInterface_isUsableAddressWithJavaNetInetAddress_(addr);
}

+ (jint)getNHostAddresses {
  return OrgCybergarageNetHostInterface_getNHostAddresses();
}

+ (IOSObjectArray *)getInetAddressWithInt:(jint)ipfilter
                        withNSStringArray:(IOSObjectArray *)interfaces {
  return OrgCybergarageNetHostInterface_getInetAddressWithInt_withNSStringArray_(ipfilter, interfaces);
}

+ (NSString *)getHostAddressWithInt:(jint)n {
  return OrgCybergarageNetHostInterface_getHostAddressWithInt_(n);
}

+ (jboolean)isIPv6AddressWithNSString:(NSString *)host {
  return OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(host);
}

+ (jboolean)isIPv4AddressWithNSString:(NSString *)host {
  return OrgCybergarageNetHostInterface_isIPv4AddressWithNSString_(host);
}

+ (jboolean)hasIPv4Addresses {
  return OrgCybergarageNetHostInterface_hasIPv4Addresses();
}

+ (jboolean)hasIPv6Addresses {
  return OrgCybergarageNetHostInterface_hasIPv6Addresses();
}

+ (NSString *)getIPv4Address {
  return OrgCybergarageNetHostInterface_getIPv4Address();
}

+ (NSString *)getIPv6Address {
  return OrgCybergarageNetHostInterface_getIPv6Address();
}

+ (NSString *)getHostURLWithNSString:(NSString *)host
                             withInt:(jint)port
                        withNSString:(NSString *)uri {
  return OrgCybergarageNetHostInterface_getHostURLWithNSString_withInt_withNSString_(host, port, uri);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x19, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 9, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setInterfaceWithNSString:);
  methods[2].selector = @selector(getInterface);
  methods[3].selector = @selector(hasAssignedInterface);
  methods[4].selector = @selector(isUsableAddressWithJavaNetInetAddress:);
  methods[5].selector = @selector(getNHostAddresses);
  methods[6].selector = @selector(getInetAddressWithInt:withNSStringArray:);
  methods[7].selector = @selector(getHostAddressWithInt:);
  methods[8].selector = @selector(isIPv6AddressWithNSString:);
  methods[9].selector = @selector(isIPv4AddressWithNSString:);
  methods[10].selector = @selector(hasIPv4Addresses);
  methods[11].selector = @selector(hasIPv6Addresses);
  methods[12].selector = @selector(getIPv4Address);
  methods[13].selector = @selector(getIPv6Address);
  methods[14].selector = @selector(getHostURLWithNSString:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "USE_LOOPBACK_ADDR", "Z", .constantValue.asLong = 0, 0x9, -1, 12, -1, -1 },
    { "USE_ONLY_IPV4_ADDR", "Z", .constantValue.asLong = 0, 0x9, -1, 13, -1, -1 },
    { "USE_ONLY_IPV6_ADDR", "Z", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
    { "ifAddress", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "IPV4_BITMASK", "I", .constantValue.asInt = OrgCybergarageNetHostInterface_IPV4_BITMASK, 0x19, -1, -1, -1, -1 },
    { "IPV6_BITMASK", "I", .constantValue.asInt = OrgCybergarageNetHostInterface_IPV6_BITMASK, 0x19, -1, -1, -1, -1 },
    { "LOCAL_BITMASK", "I", .constantValue.asInt = OrgCybergarageNetHostInterface_LOCAL_BITMASK, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setInterface", "LNSString;", "isUsableAddress", "LJavaNetInetAddress;", "getInetAddress", "I[LNSString;", "getHostAddress", "I", "isIPv6Address", "isIPv4Address", "getHostURL", "LNSString;ILNSString;", &OrgCybergarageNetHostInterface_USE_LOOPBACK_ADDR, &OrgCybergarageNetHostInterface_USE_ONLY_IPV4_ADDR, &OrgCybergarageNetHostInterface_USE_ONLY_IPV6_ADDR, &OrgCybergarageNetHostInterface_ifAddress };
  static const J2ObjcClassInfo _OrgCybergarageNetHostInterface = { "HostInterface", "org.cybergarage.net", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageNetHostInterface;
}

@end

void OrgCybergarageNetHostInterface_init(OrgCybergarageNetHostInterface *self) {
  NSObject_init(self);
}

OrgCybergarageNetHostInterface *new_OrgCybergarageNetHostInterface_init() {
  J2OBJC_NEW_IMPL(OrgCybergarageNetHostInterface, init)
}

OrgCybergarageNetHostInterface *create_OrgCybergarageNetHostInterface_init() {
  J2OBJC_CREATE_IMPL(OrgCybergarageNetHostInterface, init)
}

void OrgCybergarageNetHostInterface_setInterfaceWithNSString_(NSString *ifaddr) {
  OrgCybergarageNetHostInterface_initialize();
  JreStrongAssign(&OrgCybergarageNetHostInterface_ifAddress, ifaddr);
}

NSString *OrgCybergarageNetHostInterface_getInterface() {
  OrgCybergarageNetHostInterface_initialize();
  return OrgCybergarageNetHostInterface_ifAddress;
}

jboolean OrgCybergarageNetHostInterface_hasAssignedInterface() {
  OrgCybergarageNetHostInterface_initialize();
  return (0 < [((NSString *) nil_chk(OrgCybergarageNetHostInterface_ifAddress)) java_length]) ? true : false;
}

jboolean OrgCybergarageNetHostInterface_isUsableAddressWithJavaNetInetAddress_(JavaNetInetAddress *addr) {
  OrgCybergarageNetHostInterface_initialize();
  if (OrgCybergarageNetHostInterface_USE_LOOPBACK_ADDR == false) {
    if ([((JavaNetInetAddress *) nil_chk(addr)) isLoopbackAddress] == true) return false;
  }
  if (OrgCybergarageNetHostInterface_USE_ONLY_IPV4_ADDR == true) {
    if ([addr isKindOfClass:[JavaNetInet6Address class]]) return false;
  }
  if (OrgCybergarageNetHostInterface_USE_ONLY_IPV6_ADDR == true) {
    if ([addr isKindOfClass:[JavaNetInet4Address class]]) return false;
  }
  return true;
}

jint OrgCybergarageNetHostInterface_getNHostAddresses() {
  OrgCybergarageNetHostInterface_initialize();
  if (OrgCybergarageNetHostInterface_hasAssignedInterface() == true) return 1;
  jint nHostAddrs = 0;
  @try {
    id<JavaUtilEnumeration> nis = JavaNetNetworkInterface_getNetworkInterfaces();
    while ([((id<JavaUtilEnumeration>) nil_chk(nis)) hasMoreElements]) {
      JavaNetNetworkInterface *ni = [nis nextElement];
      id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ni)) getInetAddresses];
      while ([((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]) {
        JavaNetInetAddress *addr = [addrs nextElement];
        if (OrgCybergarageNetHostInterface_isUsableAddressWithJavaNetInetAddress_(addr) == false) continue;
        nHostAddrs++;
      }
    }
  }
  @catch (JavaLangException *e) {
    OrgCybergarageUtilDebug_warningWithJavaLangException_(e);
  }
  
  ;
  return nHostAddrs;
}

IOSObjectArray *OrgCybergarageNetHostInterface_getInetAddressWithInt_withNSStringArray_(jint ipfilter, IOSObjectArray *interfaces) {
  OrgCybergarageNetHostInterface_initialize();
  id<JavaUtilEnumeration> nis;
  if (interfaces != nil) {
    JavaUtilVector *iflist = create_JavaUtilVector_init();
    for (jint i = 0; i < interfaces->size_; i++) {
      JavaNetNetworkInterface *ni;
      @try {
        ni = JavaNetNetworkInterface_getByNameWithNSString_(IOSObjectArray_Get(interfaces, i));
      }
      @catch (JavaNetSocketException *e) {
        continue;
      }
      if (ni != nil) [iflist addWithId:ni];
    }
    nis = [iflist elements];
  }
  else {
    @try {
      nis = JavaNetNetworkInterface_getNetworkInterfaces();
    }
    @catch (JavaNetSocketException *e) {
      return nil;
    }
  }
  JavaUtilArrayList *addresses = create_JavaUtilArrayList_init();
  while ([((id<JavaUtilEnumeration>) nil_chk(nis)) hasMoreElements]) {
    JavaNetNetworkInterface *ni = [nis nextElement];
    id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ni)) getInetAddresses];
    while ([((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]) {
      JavaNetInetAddress *addr = [addrs nextElement];
      if (((ipfilter & OrgCybergarageNetHostInterface_LOCAL_BITMASK) == 0) && [((JavaNetInetAddress *) nil_chk(addr)) isLoopbackAddress]) continue;
      if (((ipfilter & OrgCybergarageNetHostInterface_IPV4_BITMASK) != 0) && [addr isKindOfClass:[JavaNetInet4Address class]]) {
        [addresses addWithId:addr];
      }
      else if (((ipfilter & OrgCybergarageNetHostInterface_IPV6_BITMASK) != 0) && [addr isKindOfClass:[JavaNetInetAddress class]]) {
        [addresses addWithId:addr];
      }
    }
  }
  return [addresses toArrayWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaNetInetAddress_class_()]];
}

NSString *OrgCybergarageNetHostInterface_getHostAddressWithInt_(jint n) {
  OrgCybergarageNetHostInterface_initialize();
  if (OrgCybergarageNetHostInterface_hasAssignedInterface() == true) return OrgCybergarageNetHostInterface_getInterface();
  jint hostAddrCnt = 0;
  @try {
    id<JavaUtilEnumeration> nis = JavaNetNetworkInterface_getNetworkInterfaces();
    while ([((id<JavaUtilEnumeration>) nil_chk(nis)) hasMoreElements]) {
      JavaNetNetworkInterface *ni = [nis nextElement];
      id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ni)) getInetAddresses];
      while ([((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]) {
        JavaNetInetAddress *addr = [addrs nextElement];
        if (OrgCybergarageNetHostInterface_isUsableAddressWithJavaNetInetAddress_(addr) == false) continue;
        if (hostAddrCnt < n) {
          hostAddrCnt++;
          continue;
        }
        NSString *host = [((JavaNetInetAddress *) nil_chk(addr)) getHostAddress];
        return host;
      }
    }
  }
  @catch (JavaLangException *e) {
  }
  
  ;
  return @"";
}

jboolean OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(NSString *host) {
  OrgCybergarageNetHostInterface_initialize();
  @try {
    JavaNetInetAddress *addr = JavaNetInetAddress_getByNameWithNSString_(host);
    if ([addr isKindOfClass:[JavaNetInet6Address class]]) return true;
    return false;
  }
  @catch (JavaLangException *e) {
  }
  return false;
}

jboolean OrgCybergarageNetHostInterface_isIPv4AddressWithNSString_(NSString *host) {
  OrgCybergarageNetHostInterface_initialize();
  @try {
    JavaNetInetAddress *addr = JavaNetInetAddress_getByNameWithNSString_(host);
    if ([addr isKindOfClass:[JavaNetInet4Address class]]) return true;
    return false;
  }
  @catch (JavaLangException *e) {
  }
  return false;
}

jboolean OrgCybergarageNetHostInterface_hasIPv4Addresses() {
  OrgCybergarageNetHostInterface_initialize();
  jint addrCnt = OrgCybergarageNetHostInterface_getNHostAddresses();
  for (jint n = 0; n < addrCnt; n++) {
    NSString *addr = OrgCybergarageNetHostInterface_getHostAddressWithInt_(n);
    if (OrgCybergarageNetHostInterface_isIPv4AddressWithNSString_(addr) == true) return true;
  }
  return false;
}

jboolean OrgCybergarageNetHostInterface_hasIPv6Addresses() {
  OrgCybergarageNetHostInterface_initialize();
  jint addrCnt = OrgCybergarageNetHostInterface_getNHostAddresses();
  for (jint n = 0; n < addrCnt; n++) {
    NSString *addr = OrgCybergarageNetHostInterface_getHostAddressWithInt_(n);
    if (OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(addr) == true) return true;
  }
  return false;
}

NSString *OrgCybergarageNetHostInterface_getIPv4Address() {
  OrgCybergarageNetHostInterface_initialize();
  jint addrCnt = OrgCybergarageNetHostInterface_getNHostAddresses();
  for (jint n = 0; n < addrCnt; n++) {
    NSString *addr = OrgCybergarageNetHostInterface_getHostAddressWithInt_(n);
    if (OrgCybergarageNetHostInterface_isIPv4AddressWithNSString_(addr) == true) return addr;
  }
  return @"";
}

NSString *OrgCybergarageNetHostInterface_getIPv6Address() {
  OrgCybergarageNetHostInterface_initialize();
  jint addrCnt = OrgCybergarageNetHostInterface_getNHostAddresses();
  for (jint n = 0; n < addrCnt; n++) {
    NSString *addr = OrgCybergarageNetHostInterface_getHostAddressWithInt_(n);
    if (OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(addr) == true) return addr;
  }
  return @"";
}

NSString *OrgCybergarageNetHostInterface_getHostURLWithNSString_withInt_withNSString_(NSString *host, jint port, NSString *uri) {
  OrgCybergarageNetHostInterface_initialize();
  NSString *hostAddr = host;
  if (OrgCybergarageNetHostInterface_isIPv6AddressWithNSString_(host) == true) hostAddr = JreStrcat("C$C", '[', host, ']');
  return JreStrcat("$$C$$", @"http://", hostAddr, ':', JavaLangInteger_toStringWithInt_(port), uri);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageNetHostInterface)
