//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/org/cybergarage/xml/Parser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "org/cybergarage/http/HTTP.h"
#include "org/cybergarage/http/HTTPRequest.h"
#include "org/cybergarage/http/HTTPResponse.h"
#include "org/cybergarage/xml/Node.h"
#include "org/cybergarage/xml/Parser.h"
#include "org/cybergarage/xml/ParserException.h"

@implementation OrgCybergarageXmlParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgCybergarageXmlParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgCybergarageXmlNode *)parseWithJavaIoInputStream:(JavaIoInputStream *)inStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgCybergarageXmlNode *)parseWithJavaNetURL:(JavaNetURL *)locationURL {
  NSString *host = [((JavaNetURL *) nil_chk(locationURL)) getHost];
  jint port = [locationURL getPort];
  if (port == -1) port = 80;
  NSString *uri = [locationURL getPath];
  @try {
    JavaNetHttpURLConnection *urlCon = (JavaNetHttpURLConnection *) cast_chk([locationURL openConnection], [JavaNetHttpURLConnection class]);
    [((JavaNetHttpURLConnection *) nil_chk(urlCon)) setConnectTimeoutWithInt:2 * 1000];
    [urlCon setReadTimeoutWithInt:1000];
    [urlCon setRequestMethodWithNSString:@"GET"];
    [urlCon setRequestPropertyWithNSString:OrgCybergarageHttpHTTP_CONTENT_LENGTH withNSString:@"0"];
    if (host != nil) [urlCon setRequestPropertyWithNSString:OrgCybergarageHttpHTTP_HOST withNSString:host];
    JavaIoInputStream *urlIn = [urlCon getInputStream];
    OrgCybergarageXmlNode *rootElem = [self parseWithJavaIoInputStream:urlIn];
    [((JavaIoInputStream *) nil_chk(urlIn)) close];
    [urlCon disconnect];
    return rootElem;
  }
  @catch (JavaLangException *e) {
  }
  OrgCybergarageHttpHTTPRequest *httpReq = create_OrgCybergarageHttpHTTPRequest_init();
  [httpReq setMethodWithNSString:OrgCybergarageHttpHTTP_GET];
  [httpReq setURIWithNSString:uri];
  OrgCybergarageHttpHTTPResponse *httpRes = [httpReq postWithNSString:host withInt:port];
  if ([((OrgCybergarageHttpHTTPResponse *) nil_chk(httpRes)) isSuccessful] == false) @throw create_OrgCybergarageXmlParserException_initWithNSString_(JreStrcat("$$", @"HTTP comunication failed: no answer from peer.Unable to retrive resoure -> ", [locationURL description]));
  NSString *content = [NSString java_stringWithBytes:[httpRes getContent]];
  JavaIoByteArrayInputStream *strBuf = create_JavaIoByteArrayInputStream_initWithByteArray_([content java_getBytes]);
  return [self parseWithJavaIoInputStream:strBuf];
}

- (OrgCybergarageXmlNode *)parseWithJavaIoFile:(JavaIoFile *)descriptionFile {
  @try {
    JavaIoInputStream *fileIn = create_JavaIoFileInputStream_initWithJavaIoFile_(descriptionFile);
    OrgCybergarageXmlNode *root = [self parseWithJavaIoInputStream:fileIn];
    [fileIn close];
    return root;
  }
  @catch (JavaLangException *e) {
    @throw create_OrgCybergarageXmlParserException_initWithJavaLangException_(e);
  }
}

- (OrgCybergarageXmlNode *)parseWithNSString:(NSString *)descr {
  @try {
    JavaIoInputStream *decrIn = create_JavaIoByteArrayInputStream_initWithByteArray_([((NSString *) nil_chk(descr)) java_getBytes]);
    OrgCybergarageXmlNode *root = [self parseWithJavaIoInputStream:decrIn];
    return root;
  }
  @catch (JavaLangException *e) {
    @throw create_OrgCybergarageXmlParserException_initWithJavaLangException_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x1, 0, 4, 2, -1, -1, -1 },
    { NULL, "LOrgCybergarageXmlNode;", 0x1, 0, 5, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithJavaIoInputStream:);
  methods[2].selector = @selector(parseWithJavaNetURL:);
  methods[3].selector = @selector(parseWithJavaIoFile:);
  methods[4].selector = @selector(parseWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parse", "LJavaIoInputStream;", "LOrgCybergarageXmlParserException;", "LJavaNetURL;", "LJavaIoFile;", "LNSString;" };
  static const J2ObjcClassInfo _OrgCybergarageXmlParser = { "Parser", "org.cybergarage.xml", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgCybergarageXmlParser;
}

@end

void OrgCybergarageXmlParser_init(OrgCybergarageXmlParser *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgCybergarageXmlParser)
