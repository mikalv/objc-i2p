//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/CannotProceedException.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Hashtable.h"
#include "javax/naming/CannotProceedException.h"
#include "javax/naming/Context.h"
#include "javax/naming/Name.h"
#include "javax/naming/NamingException.h"

inline jlong JavaxNamingCannotProceedException_get_serialVersionUID(void);
#define JavaxNamingCannotProceedException_serialVersionUID 1219724816191576813LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingCannotProceedException, serialVersionUID, jlong)

@implementation JavaxNamingCannotProceedException

- (instancetype)initWithNSString:(NSString *)explanation {
  JavaxNamingCannotProceedException_initWithNSString_(self, explanation);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingCannotProceedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilHashtable *)getEnvironment {
  return environment_;
}

- (void)setEnvironmentWithJavaUtilHashtable:(JavaUtilHashtable *)environment {
  JreStrongAssign(&self->environment_, environment);
}

- (id<JavaxNamingName>)getRemainingNewName {
  return remainingNewName_;
}

- (void)setRemainingNewNameWithJavaxNamingName:(id<JavaxNamingName>)newName {
  if (newName != nil) JreStrongAssign(&self->remainingNewName_, (id<JavaxNamingName>) cast_check(([newName clone]), JavaxNamingName_class_()));
  else JreStrongAssign(&self->remainingNewName_, nil);
}

- (id<JavaxNamingName>)getAltName {
  return altName_;
}

- (void)setAltNameWithJavaxNamingName:(id<JavaxNamingName>)altName {
  JreStrongAssign(&self->altName_, altName);
}

- (id<JavaxNamingContext>)getAltNameCtx {
  return altNameCtx_;
}

- (void)setAltNameCtxWithJavaxNamingContext:(id<JavaxNamingContext>)altNameCtx {
  JreStrongAssign(&self->altNameCtx_, altNameCtx);
}

- (void)dealloc {
  RELEASE_(remainingNewName_);
  RELEASE_(environment_);
  RELEASE_(altName_);
  RELEASE_(altNameCtx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getEnvironment);
  methods[3].selector = @selector(setEnvironmentWithJavaUtilHashtable:);
  methods[4].selector = @selector(getRemainingNewName);
  methods[5].selector = @selector(setRemainingNewNameWithJavaxNamingName:);
  methods[6].selector = @selector(getAltName);
  methods[7].selector = @selector(setAltNameWithJavaxNamingName:);
  methods[8].selector = @selector(getAltNameCtx);
  methods[9].selector = @selector(setAltNameCtxWithJavaxNamingContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "remainingNewName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "environment_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, 10, -1 },
    { "altName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "altNameCtx_", "LJavaxNamingContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingCannotProceedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "()Ljava/util/Hashtable<**>;", "setEnvironment", "LJavaUtilHashtable;", "(Ljava/util/Hashtable<**>;)V", "setRemainingNewName", "LJavaxNamingName;", "setAltName", "setAltNameCtx", "LJavaxNamingContext;", "Ljava/util/Hashtable<**>;" };
  static const J2ObjcClassInfo _JavaxNamingCannotProceedException = { "CannotProceedException", "javax.naming", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_JavaxNamingCannotProceedException;
}

@end

void JavaxNamingCannotProceedException_initWithNSString_(JavaxNamingCannotProceedException *self, NSString *explanation) {
  JavaxNamingNamingException_initWithNSString_(self, explanation);
  JreStrongAssign(&self->remainingNewName_, nil);
  JreStrongAssign(&self->environment_, nil);
  JreStrongAssign(&self->altName_, nil);
  JreStrongAssign(&self->altNameCtx_, nil);
}

JavaxNamingCannotProceedException *new_JavaxNamingCannotProceedException_initWithNSString_(NSString *explanation) {
  J2OBJC_NEW_IMPL(JavaxNamingCannotProceedException, initWithNSString_, explanation)
}

JavaxNamingCannotProceedException *create_JavaxNamingCannotProceedException_initWithNSString_(NSString *explanation) {
  J2OBJC_CREATE_IMPL(JavaxNamingCannotProceedException, initWithNSString_, explanation)
}

void JavaxNamingCannotProceedException_init(JavaxNamingCannotProceedException *self) {
  JavaxNamingNamingException_init(self);
  JreStrongAssign(&self->remainingNewName_, nil);
  JreStrongAssign(&self->environment_, nil);
  JreStrongAssign(&self->altName_, nil);
  JreStrongAssign(&self->altNameCtx_, nil);
}

JavaxNamingCannotProceedException *new_JavaxNamingCannotProceedException_init() {
  J2OBJC_NEW_IMPL(JavaxNamingCannotProceedException, init)
}

JavaxNamingCannotProceedException *create_JavaxNamingCannotProceedException_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingCannotProceedException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingCannotProceedException)
