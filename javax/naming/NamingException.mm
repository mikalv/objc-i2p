//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/NamingException.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "javax/naming/CompositeName.h"
#include "javax/naming/Name.h"
#include "javax/naming/NamingException.h"

inline jlong JavaxNamingNamingException_get_serialVersionUID(void);
#define JavaxNamingNamingException_serialVersionUID -1299181962103167177LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNamingException, serialVersionUID, jlong)

@implementation JavaxNamingNamingException

- (instancetype)initWithNSString:(NSString *)explanation {
  JavaxNamingNamingException_initWithNSString_(self, explanation);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingNamingException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaxNamingName>)getResolvedName {
  return resolvedName_;
}

- (id<JavaxNamingName>)getRemainingName {
  return remainingName_;
}

- (id)getResolvedObj {
  return resolvedObj_;
}

- (NSString *)getExplanation {
  return [self getMessage];
}

- (void)setResolvedNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) JreStrongAssign(&resolvedName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  else JreStrongAssign(&resolvedName_, nil);
}

- (void)setRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) JreStrongAssign(&remainingName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  else JreStrongAssign(&remainingName_, nil);
}

- (void)setResolvedObjWithId:(id)obj {
  JreStrongAssign(&resolvedObj_, obj);
}

- (void)appendRemainingComponentWithNSString:(NSString *)name {
  if (name != nil) {
    @try {
      if (remainingName_ == nil) {
        JreStrongAssignAndConsume(&remainingName_, new_JavaxNamingCompositeName_init());
      }
      [remainingName_ addWithNSString:name];
    }
    @catch (JavaxNamingNamingException *e) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_([e description]);
    }
  }
}

- (void)appendRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name == nil) {
    return;
  }
  if (remainingName_ != nil) {
    @try {
      [remainingName_ addAllWithJavaxNamingName:name];
    }
    @catch (JavaxNamingNamingException *e) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_([e description]);
    }
  }
  else {
    JreStrongAssign(&remainingName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  }
}

- (JavaLangThrowable *)getRootCause {
  return rootException_;
}

- (void)setRootCauseWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (e != self) {
    JreStrongAssign(&rootException_, e);
  }
}

- (JavaLangThrowable *)getCause {
  return [self getRootCause];
}

- (JavaLangThrowable *)initCauseWithJavaLangThrowable:(JavaLangThrowable *)cause {
  [super initCauseWithJavaLangThrowable:cause];
  [self setRootCauseWithJavaLangThrowable:cause];
  return self;
}

- (NSString *)description {
  NSString *answer = [super description];
  if (rootException_ != nil) {
    JreStrAppend(&answer, "$@C", @" [Root exception is ", rootException_, ']');
  }
  if (remainingName_ != nil) {
    JreStrAppend(&answer, "$@C", @"; remaining name '", remainingName_, '\'');
  }
  return answer;
}

- (NSString *)toStringWithBoolean:(jboolean)detail {
  if (!detail || resolvedObj_ == nil) {
    return [self description];
  }
  else {
    return (JreStrcat("$$@", [self description], @"; resolved object ", resolvedObj_));
  }
}

- (void)dealloc {
  RELEASE_(resolvedName_);
  RELEASE_(resolvedObj_);
  RELEASE_(remainingName_);
  RELEASE_(rootException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getResolvedName);
  methods[3].selector = @selector(getRemainingName);
  methods[4].selector = @selector(getResolvedObj);
  methods[5].selector = @selector(getExplanation);
  methods[6].selector = @selector(setResolvedNameWithJavaxNamingName:);
  methods[7].selector = @selector(setRemainingNameWithJavaxNamingName:);
  methods[8].selector = @selector(setResolvedObjWithId:);
  methods[9].selector = @selector(appendRemainingComponentWithNSString:);
  methods[10].selector = @selector(appendRemainingNameWithJavaxNamingName:);
  methods[11].selector = @selector(getRootCause);
  methods[12].selector = @selector(setRootCauseWithJavaLangThrowable:);
  methods[13].selector = @selector(getCause);
  methods[14].selector = @selector(initCauseWithJavaLangThrowable:);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(toStringWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resolvedName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "resolvedObj_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remainingName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "rootException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingNamingException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setResolvedName", "LJavaxNamingName;", "setRemainingName", "setResolvedObj", "LNSObject;", "appendRemainingComponent", "appendRemainingName", "setRootCause", "LJavaLangThrowable;", "initCause", "toString", "Z" };
  static const J2ObjcClassInfo _JavaxNamingNamingException = { "NamingException", "javax.naming", ptrTable, methods, fields, 7, 0x1, 17, 5, -1, -1, -1, -1, -1 };
  return &_JavaxNamingNamingException;
}

@end

void JavaxNamingNamingException_initWithNSString_(JavaxNamingNamingException *self, NSString *explanation) {
  JavaLangException_initWithNSString_(self, explanation);
  JreStrongAssign(&self->rootException_, nil);
  JreStrongAssign(&self->resolvedName_, JreStrongAssign(&self->remainingName_, nil));
  JreStrongAssign(&self->resolvedObj_, nil);
}

JavaxNamingNamingException *new_JavaxNamingNamingException_initWithNSString_(NSString *explanation) {
  J2OBJC_NEW_IMPL(JavaxNamingNamingException, initWithNSString_, explanation)
}

JavaxNamingNamingException *create_JavaxNamingNamingException_initWithNSString_(NSString *explanation) {
  J2OBJC_CREATE_IMPL(JavaxNamingNamingException, initWithNSString_, explanation)
}

void JavaxNamingNamingException_init(JavaxNamingNamingException *self) {
  JavaLangException_init(self);
  JreStrongAssign(&self->rootException_, nil);
  JreStrongAssign(&self->resolvedName_, JreStrongAssign(&self->remainingName_, nil));
  JreStrongAssign(&self->resolvedObj_, nil);
}

JavaxNamingNamingException *new_JavaxNamingNamingException_init() {
  J2OBJC_NEW_IMPL(JavaxNamingNamingException, init)
}

JavaxNamingNamingException *create_JavaxNamingNamingException_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingNamingException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingNamingException)
