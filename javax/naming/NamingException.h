//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/NamingException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingNamingException")
#ifdef RESTRICT_JavaxNamingNamingException
#define INCLUDE_ALL_JavaxNamingNamingException 0
#else
#define INCLUDE_ALL_JavaxNamingNamingException 1
#endif
#undef RESTRICT_JavaxNamingNamingException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingNamingException_) && (INCLUDE_ALL_JavaxNamingNamingException || defined(INCLUDE_JavaxNamingNamingException))
#define JavaxNamingNamingException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;
@protocol JavaxNamingName;

@interface JavaxNamingNamingException : JavaLangException {
 @public
  id<JavaxNamingName> resolvedName_;
  id resolvedObj_;
  id<JavaxNamingName> remainingName_;
  JavaLangThrowable *rootException_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)explanation;

- (void)appendRemainingComponentWithNSString:(NSString *)name;

- (void)appendRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name;

- (JavaLangThrowable *)getCause;

- (NSString *)getExplanation;

- (id<JavaxNamingName>)getRemainingName;

- (id<JavaxNamingName>)getResolvedName;

- (id)getResolvedObj;

- (JavaLangThrowable *)getRootCause;

- (JavaLangThrowable *)initCauseWithJavaLangThrowable:(JavaLangThrowable *)cause OBJC_METHOD_FAMILY_NONE;

- (void)setRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)setResolvedNameWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)setResolvedObjWithId:(id)obj;

- (void)setRootCauseWithJavaLangThrowable:(JavaLangThrowable *)e;

- (NSString *)description;

- (NSString *)toStringWithBoolean:(jboolean)detail;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingNamingException)

J2OBJC_FIELD_SETTER(JavaxNamingNamingException, resolvedName_, id<JavaxNamingName>)
J2OBJC_FIELD_SETTER(JavaxNamingNamingException, resolvedObj_, id)
J2OBJC_FIELD_SETTER(JavaxNamingNamingException, remainingName_, id<JavaxNamingName>)
J2OBJC_FIELD_SETTER(JavaxNamingNamingException, rootException_, JavaLangThrowable *)

FOUNDATION_EXPORT void JavaxNamingNamingException_initWithNSString_(JavaxNamingNamingException *self, NSString *explanation);

FOUNDATION_EXPORT JavaxNamingNamingException *new_JavaxNamingNamingException_initWithNSString_(NSString *explanation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNamingException *create_JavaxNamingNamingException_initWithNSString_(NSString *explanation);

FOUNDATION_EXPORT void JavaxNamingNamingException_init(JavaxNamingNamingException *self);

FOUNDATION_EXPORT JavaxNamingNamingException *new_JavaxNamingNamingException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNamingException *create_JavaxNamingNamingException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingNamingException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingNamingException")
