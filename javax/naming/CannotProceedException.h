//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/CannotProceedException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingCannotProceedException")
#ifdef RESTRICT_JavaxNamingCannotProceedException
#define INCLUDE_ALL_JavaxNamingCannotProceedException 0
#else
#define INCLUDE_ALL_JavaxNamingCannotProceedException 1
#endif
#undef RESTRICT_JavaxNamingCannotProceedException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingCannotProceedException_) && (INCLUDE_ALL_JavaxNamingCannotProceedException || defined(INCLUDE_JavaxNamingCannotProceedException))
#define JavaxNamingCannotProceedException_

#define RESTRICT_JavaxNamingNamingException 1
#define INCLUDE_JavaxNamingNamingException 1
#include "javax/naming/NamingException.h"

@class JavaUtilHashtable;
@protocol JavaxNamingContext;
@protocol JavaxNamingName;

@interface JavaxNamingCannotProceedException : JavaxNamingNamingException {
 @public
  id<JavaxNamingName> remainingNewName_;
  JavaUtilHashtable *environment_;
  id<JavaxNamingName> altName_;
  id<JavaxNamingContext> altNameCtx_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)explanation;

- (id<JavaxNamingName>)getAltName;

- (id<JavaxNamingContext>)getAltNameCtx;

- (JavaUtilHashtable *)getEnvironment;

- (id<JavaxNamingName>)getRemainingNewName;

- (void)setAltNameWithJavaxNamingName:(id<JavaxNamingName>)altName;

- (void)setAltNameCtxWithJavaxNamingContext:(id<JavaxNamingContext>)altNameCtx;

- (void)setEnvironmentWithJavaUtilHashtable:(JavaUtilHashtable *)environment;

- (void)setRemainingNewNameWithJavaxNamingName:(id<JavaxNamingName>)newName;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingCannotProceedException)

J2OBJC_FIELD_SETTER(JavaxNamingCannotProceedException, remainingNewName_, id<JavaxNamingName>)
J2OBJC_FIELD_SETTER(JavaxNamingCannotProceedException, environment_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(JavaxNamingCannotProceedException, altName_, id<JavaxNamingName>)
J2OBJC_FIELD_SETTER(JavaxNamingCannotProceedException, altNameCtx_, id<JavaxNamingContext>)

FOUNDATION_EXPORT void JavaxNamingCannotProceedException_initWithNSString_(JavaxNamingCannotProceedException *self, NSString *explanation);

FOUNDATION_EXPORT JavaxNamingCannotProceedException *new_JavaxNamingCannotProceedException_initWithNSString_(NSString *explanation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCannotProceedException *create_JavaxNamingCannotProceedException_initWithNSString_(NSString *explanation);

FOUNDATION_EXPORT void JavaxNamingCannotProceedException_init(JavaxNamingCannotProceedException *self);

FOUNDATION_EXPORT JavaxNamingCannotProceedException *new_JavaxNamingCannotProceedException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCannotProceedException *create_JavaxNamingCannotProceedException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingCannotProceedException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingCannotProceedException")
