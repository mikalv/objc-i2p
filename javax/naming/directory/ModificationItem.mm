//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/directory/ModificationItem.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/naming/directory/Attribute.h"
#include "javax/naming/directory/DirContext.h"
#include "javax/naming/directory/ModificationItem.h"

@interface JavaxNamingDirectoryModificationItem () {
 @public
  jint mod_op_;
  id<JavaxNamingDirectoryAttribute> attr_;
}

@end

J2OBJC_FIELD_SETTER(JavaxNamingDirectoryModificationItem, attr_, id<JavaxNamingDirectoryAttribute>)

inline jlong JavaxNamingDirectoryModificationItem_get_serialVersionUID(void);
#define JavaxNamingDirectoryModificationItem_serialVersionUID 7573258562534746850LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingDirectoryModificationItem, serialVersionUID, jlong)

@implementation JavaxNamingDirectoryModificationItem

- (instancetype)initWithInt:(jint)mod_op
withJavaxNamingDirectoryAttribute:(id<JavaxNamingDirectoryAttribute>)attr {
  JavaxNamingDirectoryModificationItem_initWithInt_withJavaxNamingDirectoryAttribute_(self, mod_op, attr);
  return self;
}

- (jint)getModificationOp {
  return mod_op_;
}

- (id<JavaxNamingDirectoryAttribute>)getAttribute {
  return attr_;
}

- (NSString *)description {
  switch (mod_op_) {
    case JavaxNamingDirectoryDirContext_ADD_ATTRIBUTE:
    return (JreStrcat("$$", @"Add attribute: ", [((id<JavaxNamingDirectoryAttribute>) nil_chk(attr_)) description]));
    case JavaxNamingDirectoryDirContext_REPLACE_ATTRIBUTE:
    return (JreStrcat("$$", @"Replace attribute: ", [((id<JavaxNamingDirectoryAttribute>) nil_chk(attr_)) description]));
    case JavaxNamingDirectoryDirContext_REMOVE_ATTRIBUTE:
    return (JreStrcat("$$", @"Remove attribute: ", [((id<JavaxNamingDirectoryAttribute>) nil_chk(attr_)) description]));
  }
  return @"";
}

- (void)dealloc {
  RELEASE_(attr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryAttribute;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaxNamingDirectoryAttribute:);
  methods[1].selector = @selector(getModificationOp);
  methods[2].selector = @selector(getAttribute);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mod_op_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attr_", "LJavaxNamingDirectoryAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingDirectoryModificationItem_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaxNamingDirectoryAttribute;", "toString" };
  static const J2ObjcClassInfo _JavaxNamingDirectoryModificationItem = { "ModificationItem", "javax.naming.directory", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingDirectoryModificationItem;
}

@end

void JavaxNamingDirectoryModificationItem_initWithInt_withJavaxNamingDirectoryAttribute_(JavaxNamingDirectoryModificationItem *self, jint mod_op, id<JavaxNamingDirectoryAttribute> attr) {
  NSObject_init(self);
  switch (mod_op) {
    case JavaxNamingDirectoryDirContext_ADD_ATTRIBUTE:
    case JavaxNamingDirectoryDirContext_REPLACE_ATTRIBUTE:
    case JavaxNamingDirectoryDirContext_REMOVE_ATTRIBUTE:
    if (attr == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must specify non-null attribute for modification");
    self->mod_op_ = mod_op;
    JreStrongAssign(&self->attr_, attr);
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid modification code ", mod_op));
  }
}

JavaxNamingDirectoryModificationItem *new_JavaxNamingDirectoryModificationItem_initWithInt_withJavaxNamingDirectoryAttribute_(jint mod_op, id<JavaxNamingDirectoryAttribute> attr) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryModificationItem, initWithInt_withJavaxNamingDirectoryAttribute_, mod_op, attr)
}

JavaxNamingDirectoryModificationItem *create_JavaxNamingDirectoryModificationItem_initWithInt_withJavaxNamingDirectoryAttribute_(jint mod_op, id<JavaxNamingDirectoryAttribute> attr) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryModificationItem, initWithInt_withJavaxNamingDirectoryAttribute_, mod_op, attr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingDirectoryModificationItem)
