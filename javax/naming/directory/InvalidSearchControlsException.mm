//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/directory/InvalidSearchControlsException.java
//

#include "J2ObjC_source.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/directory/InvalidSearchControlsException.h"

inline jlong JavaxNamingDirectoryInvalidSearchControlsException_get_serialVersionUID(void);
#define JavaxNamingDirectoryInvalidSearchControlsException_serialVersionUID -5124108943352665777LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingDirectoryInvalidSearchControlsException, serialVersionUID, jlong)

@implementation JavaxNamingDirectoryInvalidSearchControlsException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingDirectoryInvalidSearchControlsException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)msg {
  JavaxNamingDirectoryInvalidSearchControlsException_initWithNSString_(self, msg);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingDirectoryInvalidSearchControlsException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _JavaxNamingDirectoryInvalidSearchControlsException = { "InvalidSearchControlsException", "javax.naming.directory", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_JavaxNamingDirectoryInvalidSearchControlsException;
}

@end

void JavaxNamingDirectoryInvalidSearchControlsException_init(JavaxNamingDirectoryInvalidSearchControlsException *self) {
  JavaxNamingNamingException_init(self);
}

JavaxNamingDirectoryInvalidSearchControlsException *new_JavaxNamingDirectoryInvalidSearchControlsException_init() {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryInvalidSearchControlsException, init)
}

JavaxNamingDirectoryInvalidSearchControlsException *create_JavaxNamingDirectoryInvalidSearchControlsException_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryInvalidSearchControlsException, init)
}

void JavaxNamingDirectoryInvalidSearchControlsException_initWithNSString_(JavaxNamingDirectoryInvalidSearchControlsException *self, NSString *msg) {
  JavaxNamingNamingException_initWithNSString_(self, msg);
}

JavaxNamingDirectoryInvalidSearchControlsException *new_JavaxNamingDirectoryInvalidSearchControlsException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryInvalidSearchControlsException, initWithNSString_, msg)
}

JavaxNamingDirectoryInvalidSearchControlsException *create_JavaxNamingDirectoryInvalidSearchControlsException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryInvalidSearchControlsException, initWithNSString_, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingDirectoryInvalidSearchControlsException)
