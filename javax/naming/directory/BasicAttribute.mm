//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/directory/BasicAttribute.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Enumeration.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Vector.h"
#include "javax/naming/NamingEnumeration.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/OperationNotSupportedException.h"
#include "javax/naming/directory/Attribute.h"
#include "javax/naming/directory/BasicAttribute.h"
#include "javax/naming/directory/DirContext.h"

@interface JavaxNamingDirectoryBasicAttribute ()

- (jint)findWithId:(id)target;

+ (jboolean)valueEqualsWithId:(id)obj1
                       withId:(id)obj2;

+ (jboolean)arrayEqualsWithId:(id)a1
                       withId:(id)a2;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

@end

inline jlong JavaxNamingDirectoryBasicAttribute_get_serialVersionUID(void);
#define JavaxNamingDirectoryBasicAttribute_serialVersionUID 6743528196119291326LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingDirectoryBasicAttribute, serialVersionUID, jlong)

__attribute__((unused)) static jint JavaxNamingDirectoryBasicAttribute_findWithId_(JavaxNamingDirectoryBasicAttribute *self, id target);

__attribute__((unused)) static jboolean JavaxNamingDirectoryBasicAttribute_valueEqualsWithId_withId_(id obj1, id obj2);

__attribute__((unused)) static jboolean JavaxNamingDirectoryBasicAttribute_arrayEqualsWithId_withId_(id a1, id a2);

__attribute__((unused)) static void JavaxNamingDirectoryBasicAttribute_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingDirectoryBasicAttribute *self, JavaIoObjectOutputStream *s);

__attribute__((unused)) static void JavaxNamingDirectoryBasicAttribute_readObjectWithJavaIoObjectInputStream_(JavaxNamingDirectoryBasicAttribute *self, JavaIoObjectInputStream *s);

@implementation JavaxNamingDirectoryBasicAttribute

- (id)java_clone {
  JavaxNamingDirectoryBasicAttribute *attr;
  @try {
    attr = (JavaxNamingDirectoryBasicAttribute *) cast_chk([super java_clone], [JavaxNamingDirectoryBasicAttribute class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    attr = create_JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(attrID_, ordered_);
  }
  JreStrongAssign(&((JavaxNamingDirectoryBasicAttribute *) nil_chk(attr))->values_, (JavaUtilVector *) cast_chk([((JavaUtilVector *) nil_chk(values_)) java_clone], [JavaUtilVector class]));
  return attr;
}

- (jboolean)isEqual:(id)obj {
  if ((obj != nil) && ([JavaxNamingDirectoryAttribute_class_() isInstance:obj])) {
    id<JavaxNamingDirectoryAttribute> target = (id<JavaxNamingDirectoryAttribute>) cast_check(obj, JavaxNamingDirectoryAttribute_class_());
    if ([self isOrdered] != [((id<JavaxNamingDirectoryAttribute>) nil_chk(target)) isOrdered]) {
      return false;
    }
    jint len;
    if ([((NSString *) nil_chk(attrID_)) isEqual:[target getID]] && (len = [self size]) == [target size]) {
      @try {
        if ([self isOrdered]) {
          for (jint i = 0; i < len; i++) {
            if (!JavaxNamingDirectoryBasicAttribute_valueEqualsWithId_withId_([self getWithInt:i], [target getWithInt:i])) {
              return false;
            }
          }
        }
        else {
          id<JavaUtilEnumeration> theirs = [target getAll];
          while ([((id<JavaUtilEnumeration>) nil_chk(theirs)) hasMoreElements]) {
            if (JavaxNamingDirectoryBasicAttribute_findWithId_(self, [theirs nextElement]) < 0) return false;
          }
        }
      }
      @catch (JavaxNamingNamingException *e) {
        return false;
      }
      return true;
    }
  }
  return false;
}

- (NSUInteger)hash {
  jint hash_ = ((jint) [((NSString *) nil_chk(attrID_)) hash]);
  jint num = [((JavaUtilVector *) nil_chk(values_)) size];
  id val;
  for (jint i = 0; i < num; i++) {
    val = [((JavaUtilVector *) nil_chk(values_)) elementAtWithInt:i];
    if (val != nil) {
      if ([[val java_getClass] isArray]) {
        id it;
        jint len = JavaLangReflectArray_getLengthWithId_(val);
        for (jint j = 0; j < len; j++) {
          it = JavaLangReflectArray_getWithId_withInt_(val, j);
          if (it != nil) {
            hash_ += ((jint) [it hash]);
          }
        }
      }
      else {
        hash_ += ((jint) [val hash]);
      }
    }
  }
  return hash_;
}

- (NSString *)description {
  JavaLangStringBuffer *answer = create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$", attrID_, @": "));
  if ([((JavaUtilVector *) nil_chk(values_)) size] == 0) {
    [answer appendWithNSString:@"No values"];
  }
  else {
    jboolean start = true;
    for (id<JavaUtilEnumeration> e = [((JavaUtilVector *) nil_chk(values_)) elements]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
      if (!start) [answer appendWithNSString:@", "];
      [answer appendWithId:[e nextElement]];
      start = false;
    }
  }
  return [answer description];
}

- (instancetype)initWithNSString:(NSString *)id_ {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_(self, id_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)id_
                          withId:(id)value {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_(self, id_, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)id_
                     withBoolean:(jboolean)ordered {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(self, id_, ordered);
  return self;
}

- (instancetype)initWithNSString:(NSString *)id_
                          withId:(id)value
                     withBoolean:(jboolean)ordered {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_withBoolean_(self, id_, value, ordered);
  return self;
}

- (id<JavaxNamingNamingEnumeration>)getAll {
  return create_JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl_initWithJavaxNamingDirectoryBasicAttribute_(self);
}

- (id)get {
  if ([((JavaUtilVector *) nil_chk(values_)) size] == 0) {
    @throw create_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("$$$", @"Attribute ", [self getID], @" has no value"));
  }
  else {
    return [((JavaUtilVector *) nil_chk(values_)) elementAtWithInt:0];
  }
}

- (jint)size {
  return [((JavaUtilVector *) nil_chk(values_)) size];
}

- (NSString *)getID {
  return attrID_;
}

- (jboolean)containsWithId:(id)attrVal {
  return (JavaxNamingDirectoryBasicAttribute_findWithId_(self, attrVal) >= 0);
}

- (jint)findWithId:(id)target {
  return JavaxNamingDirectoryBasicAttribute_findWithId_(self, target);
}

+ (jboolean)valueEqualsWithId:(id)obj1
                       withId:(id)obj2 {
  return JavaxNamingDirectoryBasicAttribute_valueEqualsWithId_withId_(obj1, obj2);
}

+ (jboolean)arrayEqualsWithId:(id)a1
                       withId:(id)a2 {
  return JavaxNamingDirectoryBasicAttribute_arrayEqualsWithId_withId_(a1, a2);
}

- (jboolean)addWithId:(id)attrVal {
  if ([self isOrdered] || (JavaxNamingDirectoryBasicAttribute_findWithId_(self, attrVal) < 0)) {
    [((JavaUtilVector *) nil_chk(values_)) addElementWithId:attrVal];
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)removeWithId:(id)attrval {
  jint i = JavaxNamingDirectoryBasicAttribute_findWithId_(self, attrval);
  if (i >= 0) {
    [((JavaUtilVector *) nil_chk(values_)) removeElementAtWithInt:i];
    return true;
  }
  return false;
}

- (void)clear {
  [((JavaUtilVector *) nil_chk(values_)) setSizeWithInt:0];
}

- (jboolean)isOrdered {
  return ordered_;
}

- (id)getWithInt:(jint)ix {
  return [((JavaUtilVector *) nil_chk(values_)) elementAtWithInt:ix];
}

- (id)removeWithInt:(jint)ix {
  id answer = [((JavaUtilVector *) nil_chk(values_)) elementAtWithInt:ix];
  [((JavaUtilVector *) nil_chk(values_)) removeElementAtWithInt:ix];
  return answer;
}

- (void)addWithInt:(jint)ix
            withId:(id)attrVal {
  if (![self isOrdered] && [self containsWithId:attrVal]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot add duplicate to unordered attribute");
  }
  [((JavaUtilVector *) nil_chk(values_)) insertElementAtWithId:attrVal withInt:ix];
}

- (id)setWithInt:(jint)ix
          withId:(id)attrVal {
  if (![self isOrdered] && [self containsWithId:attrVal]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot add duplicate to unordered attribute");
  }
  id answer = [((JavaUtilVector *) nil_chk(values_)) elementAtWithInt:ix];
  [((JavaUtilVector *) nil_chk(values_)) setElementAtWithId:attrVal withInt:ix];
  return answer;
}

- (id<JavaxNamingDirectoryDirContext>)getAttributeSyntaxDefinition {
  @throw create_JavaxNamingOperationNotSupportedException_initWithNSString_(@"attribute syntax");
}

- (id<JavaxNamingDirectoryDirContext>)getAttributeDefinition {
  @throw create_JavaxNamingOperationNotSupportedException_initWithNSString_(@"attribute definition");
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s {
  JavaxNamingDirectoryBasicAttribute_writeObjectWithJavaIoObjectOutputStream_(self, s);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  JavaxNamingDirectoryBasicAttribute_readObjectWithJavaIoObjectInputStream_(self, s);
}

- (id)clone {
  return [self java_clone];
}

- (void)dealloc {
  RELEASE_(attrID_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, -1, -1, 9, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 15, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 19, 9, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 24, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, 27, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(java_clone);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(initWithNSString:);
  methods[5].selector = @selector(initWithNSString:withId:);
  methods[6].selector = @selector(initWithNSString:withBoolean:);
  methods[7].selector = @selector(initWithNSString:withId:withBoolean:);
  methods[8].selector = @selector(getAll);
  methods[9].selector = @selector(get);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(getID);
  methods[12].selector = @selector(containsWithId:);
  methods[13].selector = @selector(findWithId:);
  methods[14].selector = @selector(valueEqualsWithId:withId:);
  methods[15].selector = @selector(arrayEqualsWithId:withId:);
  methods[16].selector = @selector(addWithId:);
  methods[17].selector = @selector(removeWithId:);
  methods[18].selector = @selector(clear);
  methods[19].selector = @selector(isOrdered);
  methods[20].selector = @selector(getWithInt:);
  methods[21].selector = @selector(removeWithInt:);
  methods[22].selector = @selector(addWithInt:withId:);
  methods[23].selector = @selector(setWithInt:withId:);
  methods[24].selector = @selector(getAttributeSyntaxDefinition);
  methods[25].selector = @selector(getAttributeDefinition);
  methods[26].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[27].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "attrID_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "values_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x84, -1, -1, 28, -1 },
    { "ordered_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingDirectoryBasicAttribute_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "clone", "equals", "LNSObject;", "hashCode", "toString", "LNSString;", "LNSString;LNSObject;", "LNSString;Z", "LNSString;LNSObject;Z", "LJavaxNamingNamingException;", "()Ljavax/naming/NamingEnumeration<*>;", "contains", "find", "valueEquals", "LNSObject;LNSObject;", "arrayEquals", "add", "remove", "get", "I", "ILNSObject;", "set", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "Ljava/util/Vector<Ljava/lang/Object;>;", "LJavaxNamingDirectoryBasicAttribute_ValuesEnumImpl;" };
  static const J2ObjcClassInfo _JavaxNamingDirectoryBasicAttribute = { "BasicAttribute", "javax.naming.directory", ptrTable, methods, fields, 7, 0x1, 28, 4, -1, 29, -1, -1, -1 };
  return &_JavaxNamingDirectoryBasicAttribute;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void JavaxNamingDirectoryBasicAttribute_initWithNSString_(JavaxNamingDirectoryBasicAttribute *self, NSString *id_) {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(self, id_, false);
}

JavaxNamingDirectoryBasicAttribute *new_JavaxNamingDirectoryBasicAttribute_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_, id_)
}

JavaxNamingDirectoryBasicAttribute *create_JavaxNamingDirectoryBasicAttribute_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_, id_)
}

void JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_(JavaxNamingDirectoryBasicAttribute *self, NSString *id_, id value) {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_withBoolean_(self, id_, value, false);
}

JavaxNamingDirectoryBasicAttribute *new_JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_(NSString *id_, id value) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withId_, id_, value)
}

JavaxNamingDirectoryBasicAttribute *create_JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_(NSString *id_, id value) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withId_, id_, value)
}

void JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(JavaxNamingDirectoryBasicAttribute *self, NSString *id_, jboolean ordered) {
  NSObject_init(self);
  self->ordered_ = false;
  JreStrongAssign(&self->attrID_, id_);
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilVector_init());
  self->ordered_ = ordered;
}

JavaxNamingDirectoryBasicAttribute *new_JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(NSString *id_, jboolean ordered) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withBoolean_, id_, ordered)
}

JavaxNamingDirectoryBasicAttribute *create_JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(NSString *id_, jboolean ordered) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withBoolean_, id_, ordered)
}

void JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_withBoolean_(JavaxNamingDirectoryBasicAttribute *self, NSString *id_, id value, jboolean ordered) {
  JavaxNamingDirectoryBasicAttribute_initWithNSString_withBoolean_(self, id_, ordered);
  [((JavaUtilVector *) nil_chk(self->values_)) addElementWithId:value];
}

JavaxNamingDirectoryBasicAttribute *new_JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_withBoolean_(NSString *id_, id value, jboolean ordered) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withId_withBoolean_, id_, value, ordered)
}

JavaxNamingDirectoryBasicAttribute *create_JavaxNamingDirectoryBasicAttribute_initWithNSString_withId_withBoolean_(NSString *id_, id value, jboolean ordered) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryBasicAttribute, initWithNSString_withId_withBoolean_, id_, value, ordered)
}

jint JavaxNamingDirectoryBasicAttribute_findWithId_(JavaxNamingDirectoryBasicAttribute *self, id target) {
  IOSClass *cl;
  if (target == nil) {
    jint ct = [((JavaUtilVector *) nil_chk(self->values_)) size];
    for (jint i = 0; i < ct; i++) {
      if ([((JavaUtilVector *) nil_chk(self->values_)) elementAtWithInt:i] == nil) return i;
    }
  }
  else if ([(cl = [target java_getClass]) isArray]) {
    jint ct = [((JavaUtilVector *) nil_chk(self->values_)) size];
    id it;
    for (jint i = 0; i < ct; i++) {
      it = [((JavaUtilVector *) nil_chk(self->values_)) elementAtWithInt:i];
      if (it != nil && cl == [it java_getClass] && JavaxNamingDirectoryBasicAttribute_arrayEqualsWithId_withId_(target, it)) return i;
    }
  }
  else {
    return [((JavaUtilVector *) nil_chk(self->values_)) indexOfWithId:target withInt:0];
  }
  return -1;
}

jboolean JavaxNamingDirectoryBasicAttribute_valueEqualsWithId_withId_(id obj1, id obj2) {
  JavaxNamingDirectoryBasicAttribute_initialize();
  if (obj1 == obj2) {
    return true;
  }
  if (obj1 == nil) {
    return false;
  }
  if ([[obj1 java_getClass] isArray] && [[nil_chk(obj2) java_getClass] isArray]) {
    return JavaxNamingDirectoryBasicAttribute_arrayEqualsWithId_withId_(obj1, obj2);
  }
  return ([obj1 isEqual:obj2]);
}

jboolean JavaxNamingDirectoryBasicAttribute_arrayEqualsWithId_withId_(id a1, id a2) {
  JavaxNamingDirectoryBasicAttribute_initialize();
  jint len;
  if ((len = JavaLangReflectArray_getLengthWithId_(a1)) != JavaLangReflectArray_getLengthWithId_(a2)) return false;
  for (jint j = 0; j < len; j++) {
    id i1 = JavaLangReflectArray_getWithId_withInt_(a1, j);
    id i2 = JavaLangReflectArray_getWithId_withInt_(a2, j);
    if (i1 == nil || i2 == nil) {
      if (i1 != i2) return false;
    }
    else if (![i1 isEqual:i2]) {
      return false;
    }
  }
  return true;
}

void JavaxNamingDirectoryBasicAttribute_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingDirectoryBasicAttribute *self, JavaIoObjectOutputStream *s) {
  [((JavaIoObjectOutputStream *) nil_chk(s)) defaultWriteObject];
  [s writeIntWithInt:[((JavaUtilVector *) nil_chk(self->values_)) size]];
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(self->values_)) size]; i++) {
    [s writeObjectWithId:[((JavaUtilVector *) nil_chk(self->values_)) elementAtWithInt:i]];
  }
}

void JavaxNamingDirectoryBasicAttribute_readObjectWithJavaIoObjectInputStream_(JavaxNamingDirectoryBasicAttribute *self, JavaIoObjectInputStream *s) {
  [((JavaIoObjectInputStream *) nil_chk(s)) defaultReadObject];
  jint n = [s readInt];
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilVector_initWithInt_(JavaLangMath_minWithInt_withInt_(1024, n)));
  while (--n >= 0) {
    [((JavaUtilVector *) nil_chk(self->values_)) addElementWithId:[s readObject]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingDirectoryBasicAttribute)

@implementation JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl

- (instancetype)initWithJavaxNamingDirectoryBasicAttribute:(JavaxNamingDirectoryBasicAttribute *)outer$ {
  JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl_initWithJavaxNamingDirectoryBasicAttribute_(self, outer$);
  return self;
}

- (jboolean)hasMoreElements {
  return [((id<JavaUtilEnumeration>) nil_chk(list_)) hasMoreElements];
}

- (id)nextElement {
  return ([((id<JavaUtilEnumeration>) nil_chk(list_)) nextElement]);
}

- (id)next {
  return [((id<JavaUtilEnumeration>) nil_chk(list_)) nextElement];
}

- (jboolean)hasMore {
  return [((id<JavaUtilEnumeration>) nil_chk(list_)) hasMoreElements];
}

- (void)close {
  JreStrongAssign(&list_, nil);
}

- (void)dealloc {
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingDirectoryBasicAttribute:);
  methods[1].selector = @selector(hasMoreElements);
  methods[2].selector = @selector(nextElement);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(hasMore);
  methods[5].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "list_", "LJavaUtilEnumeration;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingNamingException;", "Ljava/util/Enumeration<Ljava/lang/Object;>;", "LJavaxNamingDirectoryBasicAttribute;", "Ljava/lang/Object;Ljavax/naming/NamingEnumeration<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl = { "ValuesEnumImpl", "javax.naming.directory", ptrTable, methods, fields, 7, 0x0, 6, 1, 2, -1, -1, 3, -1 };
  return &_JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl;
}

@end

void JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl_initWithJavaxNamingDirectoryBasicAttribute_(JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl *self, JavaxNamingDirectoryBasicAttribute *outer$) {
  NSObject_init(self);
  JreStrongAssign(&self->list_, [((JavaUtilVector *) nil_chk(outer$->values_)) elements]);
}

JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl *new_JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl_initWithJavaxNamingDirectoryBasicAttribute_(JavaxNamingDirectoryBasicAttribute *outer$) {
  J2OBJC_NEW_IMPL(JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl, initWithJavaxNamingDirectoryBasicAttribute_, outer$)
}

JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl *create_JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl_initWithJavaxNamingDirectoryBasicAttribute_(JavaxNamingDirectoryBasicAttribute *outer$) {
  J2OBJC_CREATE_IMPL(JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl, initWithJavaxNamingDirectoryBasicAttribute_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingDirectoryBasicAttribute_ValuesEnumImpl)
