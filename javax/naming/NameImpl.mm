//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/NameImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Locale.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Properties.h"
#include "java/util/Vector.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/NameImpl.h"

@interface JavaxNamingNameImpl () {
 @public
  JavaUtilVector *components_;
  jbyte syntaxDirection_;
  NSString *syntaxSeparator_;
  NSString *syntaxSeparator2_;
  jboolean syntaxCaseInsensitive_;
  jboolean syntaxTrimBlanks_;
  NSString *syntaxEscape_;
  NSString *syntaxBeginQuote1_;
  NSString *syntaxEndQuote1_;
  NSString *syntaxBeginQuote2_;
  NSString *syntaxEndQuote2_;
  NSString *syntaxAvaSeparator_;
  NSString *syntaxTypevalSeparator_;
  jint escapingStyle_;
}

- (jboolean)isAWithNSString:(NSString *)n
                    withInt:(jint)i
               withNSString:(NSString *)match;

- (jboolean)isMetaWithNSString:(NSString *)n
                       withInt:(jint)i;

- (jboolean)isSeparatorWithNSString:(NSString *)n
                            withInt:(jint)i;

- (jint)skipSeparatorWithNSString:(NSString *)name
                          withInt:(jint)i;

- (jint)extractCompWithNSString:(NSString *)name
                        withInt:(jint)i
                        withInt:(jint)len
             withJavaUtilVector:(JavaUtilVector *)comps;

+ (jboolean)getBooleanWithJavaUtilProperties:(JavaUtilProperties *)p
                                withNSString:(NSString *)name;

+ (jboolean)toBooleanWithNSString:(NSString *)name;

- (void)recordNamingConventionWithJavaUtilProperties:(JavaUtilProperties *)p;

- (NSString *)stringifyCompWithNSString:(NSString *)comp;

@end

J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, components_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxSeparator_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxSeparator2_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxEscape_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxBeginQuote1_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxEndQuote1_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxBeginQuote2_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxEndQuote2_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxAvaSeparator_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingNameImpl, syntaxTypevalSeparator_, NSString *)

inline jbyte JavaxNamingNameImpl_get_LEFT_TO_RIGHT(void);
#define JavaxNamingNameImpl_LEFT_TO_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, LEFT_TO_RIGHT, jbyte)

inline jbyte JavaxNamingNameImpl_get_RIGHT_TO_LEFT(void);
#define JavaxNamingNameImpl_RIGHT_TO_LEFT 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, RIGHT_TO_LEFT, jbyte)

inline jbyte JavaxNamingNameImpl_get_FLAT(void);
#define JavaxNamingNameImpl_FLAT 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, FLAT, jbyte)

inline jint JavaxNamingNameImpl_get_STYLE_NONE(void);
#define JavaxNamingNameImpl_STYLE_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, STYLE_NONE, jint)

inline jint JavaxNamingNameImpl_get_STYLE_QUOTE1(void);
#define JavaxNamingNameImpl_STYLE_QUOTE1 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, STYLE_QUOTE1, jint)

inline jint JavaxNamingNameImpl_get_STYLE_QUOTE2(void);
#define JavaxNamingNameImpl_STYLE_QUOTE2 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, STYLE_QUOTE2, jint)

inline jint JavaxNamingNameImpl_get_STYLE_ESCAPE(void);
#define JavaxNamingNameImpl_STYLE_ESCAPE 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingNameImpl, STYLE_ESCAPE, jint)

__attribute__((unused)) static jboolean JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(JavaxNamingNameImpl *self, NSString *n, jint i, NSString *match);

__attribute__((unused)) static jboolean JavaxNamingNameImpl_isMetaWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *n, jint i);

__attribute__((unused)) static jboolean JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *n, jint i);

__attribute__((unused)) static jint JavaxNamingNameImpl_skipSeparatorWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *name, jint i);

__attribute__((unused)) static jint JavaxNamingNameImpl_extractCompWithNSString_withInt_withInt_withJavaUtilVector_(JavaxNamingNameImpl *self, NSString *name, jint i, jint len, JavaUtilVector *comps);

__attribute__((unused)) static jboolean JavaxNamingNameImpl_getBooleanWithJavaUtilProperties_withNSString_(JavaUtilProperties *p, NSString *name);

__attribute__((unused)) static jboolean JavaxNamingNameImpl_toBooleanWithNSString_(NSString *name);

__attribute__((unused)) static void JavaxNamingNameImpl_recordNamingConventionWithJavaUtilProperties_(JavaxNamingNameImpl *self, JavaUtilProperties *p);

__attribute__((unused)) static NSString *JavaxNamingNameImpl_stringifyCompWithNSString_(JavaxNamingNameImpl *self, NSString *comp);

@implementation JavaxNamingNameImpl

- (jboolean)isAWithNSString:(NSString *)n
                    withInt:(jint)i
               withNSString:(NSString *)match {
  return JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, match);
}

- (jboolean)isMetaWithNSString:(NSString *)n
                       withInt:(jint)i {
  return JavaxNamingNameImpl_isMetaWithNSString_withInt_(self, n, i);
}

- (jboolean)isSeparatorWithNSString:(NSString *)n
                            withInt:(jint)i {
  return JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(self, n, i);
}

- (jint)skipSeparatorWithNSString:(NSString *)name
                          withInt:(jint)i {
  return JavaxNamingNameImpl_skipSeparatorWithNSString_withInt_(self, name, i);
}

- (jint)extractCompWithNSString:(NSString *)name
                        withInt:(jint)i
                        withInt:(jint)len
             withJavaUtilVector:(JavaUtilVector *)comps {
  return JavaxNamingNameImpl_extractCompWithNSString_withInt_withInt_withJavaUtilVector_(self, name, i, len, comps);
}

+ (jboolean)getBooleanWithJavaUtilProperties:(JavaUtilProperties *)p
                                withNSString:(NSString *)name {
  return JavaxNamingNameImpl_getBooleanWithJavaUtilProperties_withNSString_(p, name);
}

+ (jboolean)toBooleanWithNSString:(NSString *)name {
  return JavaxNamingNameImpl_toBooleanWithNSString_(name);
}

- (void)recordNamingConventionWithJavaUtilProperties:(JavaUtilProperties *)p {
  JavaxNamingNameImpl_recordNamingConventionWithJavaUtilProperties_(self, p);
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)syntax {
  JavaxNamingNameImpl_initWithJavaUtilProperties_(self, syntax);
  return self;
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)syntax
                              withNSString:(NSString *)n {
  JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(self, syntax, n);
  return self;
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)syntax
                   withJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps {
  JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(self, syntax, comps);
  return self;
}

- (NSString *)stringifyCompWithNSString:(NSString *)comp {
  return JavaxNamingNameImpl_stringifyCompWithNSString_(self, comp);
}

- (NSString *)description {
  JavaLangStringBuffer *answer = create_JavaLangStringBuffer_init();
  NSString *comp;
  jboolean compsAllEmpty = true;
  jint size = [((JavaUtilVector *) nil_chk(components_)) size];
  for (jint i = 0; i < size; i++) {
    if (syntaxDirection_ == JavaxNamingNameImpl_RIGHT_TO_LEFT) {
      comp = JavaxNamingNameImpl_stringifyCompWithNSString_(self, [((JavaUtilVector *) nil_chk(components_)) elementAtWithInt:size - 1 - i]);
    }
    else {
      comp = JavaxNamingNameImpl_stringifyCompWithNSString_(self, [((JavaUtilVector *) nil_chk(components_)) elementAtWithInt:i]);
    }
    if ((i != 0) && (syntaxSeparator_ != nil)) [((JavaLangStringBuffer *) nil_chk(answer)) appendWithNSString:syntaxSeparator_];
    if ([((NSString *) nil_chk(comp)) java_length] >= 1) compsAllEmpty = false;
    answer = [((JavaLangStringBuffer *) nil_chk(answer)) appendWithNSString:comp];
  }
  if (compsAllEmpty && (size >= 1) && (syntaxSeparator_ != nil)) answer = [((JavaLangStringBuffer *) nil_chk(answer)) appendWithNSString:syntaxSeparator_];
  return ([((JavaLangStringBuffer *) nil_chk(answer)) description]);
}

- (jboolean)isEqual:(id)obj {
  if ((obj != nil) && ([obj isKindOfClass:[JavaxNamingNameImpl class]])) {
    JavaxNamingNameImpl *target = (JavaxNamingNameImpl *) cast_chk(obj, [JavaxNamingNameImpl class]);
    if ([((JavaxNamingNameImpl *) nil_chk(target)) size] == [self size]) {
      id<JavaUtilEnumeration> mycomps = [self getAll];
      id<JavaUtilEnumeration> comps = [target getAll];
      while ([((id<JavaUtilEnumeration>) nil_chk(mycomps)) hasMoreElements]) {
        NSString *my = [mycomps nextElement];
        NSString *his = [((id<JavaUtilEnumeration>) nil_chk(comps)) nextElement];
        if (syntaxTrimBlanks_) {
          my = [((NSString *) nil_chk(my)) java_trim];
          his = [((NSString *) nil_chk(his)) java_trim];
        }
        if (syntaxCaseInsensitive_) {
          if (!([((NSString *) nil_chk(my)) java_equalsIgnoreCase:his])) return false;
        }
        else {
          if (!([((NSString *) nil_chk(my)) isEqual:his])) return false;
        }
      }
      return true;
    }
  }
  return false;
}

- (jint)compareToWithJavaxNamingNameImpl:(JavaxNamingNameImpl *)obj {
  if (self == obj) {
    return 0;
  }
  jint len1 = [self size];
  jint len2 = [((JavaxNamingNameImpl *) nil_chk(obj)) size];
  jint n = JavaLangMath_minWithInt_withInt_(len1, len2);
  jint index1 = 0;
  jint index2 = 0;
  while (n-- != 0) {
    NSString *comp1 = [self getWithInt:index1++];
    NSString *comp2 = [obj getWithInt:index2++];
    if (syntaxTrimBlanks_) {
      comp1 = [((NSString *) nil_chk(comp1)) java_trim];
      comp2 = [((NSString *) nil_chk(comp2)) java_trim];
    }
    jint local;
    if (syntaxCaseInsensitive_) {
      local = [((NSString *) nil_chk(comp1)) java_compareToIgnoreCase:comp2];
    }
    else {
      local = [((NSString *) nil_chk(comp1)) compareToWithId:comp2];
    }
    if (local != 0) {
      return local;
    }
  }
  return len1 - len2;
}

- (jint)size {
  return ([((JavaUtilVector *) nil_chk(components_)) size]);
}

- (id<JavaUtilEnumeration>)getAll {
  return [((JavaUtilVector *) nil_chk(components_)) elements];
}

- (NSString *)getWithInt:(jint)posn {
  return [((JavaUtilVector *) nil_chk(components_)) elementAtWithInt:posn];
}

- (id<JavaUtilEnumeration>)getPrefixWithInt:(jint)posn {
  if (posn < 0 || posn > [self size]) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_initWithInt_(posn);
  }
  return create_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(components_, 0, posn);
}

- (id<JavaUtilEnumeration>)getSuffixWithInt:(jint)posn {
  jint cnt = [self size];
  if (posn < 0 || posn > cnt) {
    @throw create_JavaLangArrayIndexOutOfBoundsException_initWithInt_(posn);
  }
  return create_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(components_, posn, cnt);
}

- (jboolean)isEmpty {
  return ([((JavaUtilVector *) nil_chk(components_)) isEmpty]);
}

- (jboolean)startsWithWithInt:(jint)posn
      withJavaUtilEnumeration:(id<JavaUtilEnumeration>)prefix {
  if (posn < 0 || posn > [self size]) {
    return false;
  }
  @try {
    id<JavaUtilEnumeration> mycomps = [self getPrefixWithInt:posn];
    while ([((id<JavaUtilEnumeration>) nil_chk(mycomps)) hasMoreElements]) {
      NSString *my = [mycomps nextElement];
      NSString *his = [((id<JavaUtilEnumeration>) nil_chk(prefix)) nextElement];
      if (syntaxTrimBlanks_) {
        my = [((NSString *) nil_chk(my)) java_trim];
        his = [((NSString *) nil_chk(his)) java_trim];
      }
      if (syntaxCaseInsensitive_) {
        if (!([((NSString *) nil_chk(my)) java_equalsIgnoreCase:his])) return false;
      }
      else {
        if (!([((NSString *) nil_chk(my)) isEqual:his])) return false;
      }
    }
  }
  @catch (JavaUtilNoSuchElementException *e) {
    return false;
  }
  return true;
}

- (jboolean)endsWithWithInt:(jint)posn
    withJavaUtilEnumeration:(id<JavaUtilEnumeration>)suffix {
  jint startIndex = [self size] - posn;
  if (startIndex < 0 || startIndex > [self size]) {
    return false;
  }
  @try {
    id<JavaUtilEnumeration> mycomps = [self getSuffixWithInt:startIndex];
    while ([((id<JavaUtilEnumeration>) nil_chk(mycomps)) hasMoreElements]) {
      NSString *my = [mycomps nextElement];
      NSString *his = [((id<JavaUtilEnumeration>) nil_chk(suffix)) nextElement];
      if (syntaxTrimBlanks_) {
        my = [((NSString *) nil_chk(my)) java_trim];
        his = [((NSString *) nil_chk(his)) java_trim];
      }
      if (syntaxCaseInsensitive_) {
        if (!([((NSString *) nil_chk(my)) java_equalsIgnoreCase:his])) return false;
      }
      else {
        if (!([((NSString *) nil_chk(my)) isEqual:his])) return false;
      }
    }
  }
  @catch (JavaUtilNoSuchElementException *e) {
    return false;
  }
  return true;
}

- (jboolean)addAllWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps {
  jboolean added = false;
  while ([((id<JavaUtilEnumeration>) nil_chk(comps)) hasMoreElements]) {
    @try {
      NSString *comp = [comps nextElement];
      if ([self size] > 0 && syntaxDirection_ == JavaxNamingNameImpl_FLAT) {
        @throw create_JavaxNamingInvalidNameException_initWithNSString_(@"A flat name can only have a single component");
      }
      [((JavaUtilVector *) nil_chk(components_)) addElementWithId:comp];
      added = true;
    }
    @catch (JavaUtilNoSuchElementException *e) {
      break;
    }
  }
  return added;
}

- (jboolean)addAllWithInt:(jint)posn
  withJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps {
  jboolean added = false;
  for (jint i = posn; [((id<JavaUtilEnumeration>) nil_chk(comps)) hasMoreElements]; i++) {
    @try {
      NSString *comp = [comps nextElement];
      if ([self size] > 0 && syntaxDirection_ == JavaxNamingNameImpl_FLAT) {
        @throw create_JavaxNamingInvalidNameException_initWithNSString_(@"A flat name can only have a single component");
      }
      [((JavaUtilVector *) nil_chk(components_)) insertElementAtWithId:comp withInt:i];
      added = true;
    }
    @catch (JavaUtilNoSuchElementException *e) {
      break;
    }
  }
  return added;
}

- (void)addWithNSString:(NSString *)comp {
  if ([self size] > 0 && syntaxDirection_ == JavaxNamingNameImpl_FLAT) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(@"A flat name can only have a single component");
  }
  [((JavaUtilVector *) nil_chk(components_)) addElementWithId:comp];
}

- (void)addWithInt:(jint)posn
      withNSString:(NSString *)comp {
  if ([self size] > 0 && syntaxDirection_ == JavaxNamingNameImpl_FLAT) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(@"A flat name can only zero or one component");
  }
  [((JavaUtilVector *) nil_chk(components_)) insertElementAtWithId:comp withInt:posn];
}

- (id)removeWithInt:(jint)posn {
  id r = [((JavaUtilVector *) nil_chk(components_)) elementAtWithInt:posn];
  [((JavaUtilVector *) nil_chk(components_)) removeElementAtWithInt:posn];
  return r;
}

- (NSUInteger)hash {
  jint hash_ = 0;
  for (id<JavaUtilEnumeration> e = [self getAll]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
    NSString *comp = [e nextElement];
    if (syntaxTrimBlanks_) {
      comp = [((NSString *) nil_chk(comp)) java_trim];
    }
    if (syntaxCaseInsensitive_) {
      comp = [((NSString *) nil_chk(comp)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
    }
    hash_ += ((jint) [((NSString *) nil_chk(comp)) hash]);
  }
  return hash_;
}

- (void)dealloc {
  RELEASE_(components_);
  RELEASE_(syntaxSeparator_);
  RELEASE_(syntaxSeparator2_);
  RELEASE_(syntaxEscape_);
  RELEASE_(syntaxBeginQuote1_);
  RELEASE_(syntaxEndQuote1_);
  RELEASE_(syntaxBeginQuote2_);
  RELEASE_(syntaxEndQuote2_);
  RELEASE_(syntaxAvaSeparator_);
  RELEASE_(syntaxTypevalSeparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x12, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 6, 7, 8, 9, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 14, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 11, 8, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 16, -1, 17, -1, -1 },
    { NULL, "LNSString;", 0x12, 18, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, 27, 26, -1, 28, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, 29, 26, -1, 28, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 31, -1, 32, -1, -1 },
    { NULL, "Z", 0x1, 33, 31, -1, 32, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, 8, 36, -1, -1 },
    { NULL, "Z", 0x1, 34, 31, 8, 32, -1, -1 },
    { NULL, "V", 0x1, 37, 13, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, 8, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 39, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isAWithNSString:withInt:withNSString:);
  methods[1].selector = @selector(isMetaWithNSString:withInt:);
  methods[2].selector = @selector(isSeparatorWithNSString:withInt:);
  methods[3].selector = @selector(skipSeparatorWithNSString:withInt:);
  methods[4].selector = @selector(extractCompWithNSString:withInt:withInt:withJavaUtilVector:);
  methods[5].selector = @selector(getBooleanWithJavaUtilProperties:withNSString:);
  methods[6].selector = @selector(toBooleanWithNSString:);
  methods[7].selector = @selector(recordNamingConventionWithJavaUtilProperties:);
  methods[8].selector = @selector(initWithJavaUtilProperties:);
  methods[9].selector = @selector(initWithJavaUtilProperties:withNSString:);
  methods[10].selector = @selector(initWithJavaUtilProperties:withJavaUtilEnumeration:);
  methods[11].selector = @selector(stringifyCompWithNSString:);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(isEqual:);
  methods[14].selector = @selector(compareToWithJavaxNamingNameImpl:);
  methods[15].selector = @selector(size);
  methods[16].selector = @selector(getAll);
  methods[17].selector = @selector(getWithInt:);
  methods[18].selector = @selector(getPrefixWithInt:);
  methods[19].selector = @selector(getSuffixWithInt:);
  methods[20].selector = @selector(isEmpty);
  methods[21].selector = @selector(startsWithWithInt:withJavaUtilEnumeration:);
  methods[22].selector = @selector(endsWithWithInt:withJavaUtilEnumeration:);
  methods[23].selector = @selector(addAllWithJavaUtilEnumeration:);
  methods[24].selector = @selector(addAllWithInt:withJavaUtilEnumeration:);
  methods[25].selector = @selector(addWithNSString:);
  methods[26].selector = @selector(addWithInt:withNSString:);
  methods[27].selector = @selector(removeWithInt:);
  methods[28].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT_TO_RIGHT", "B", .constantValue.asChar = JavaxNamingNameImpl_LEFT_TO_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_TO_LEFT", "B", .constantValue.asChar = JavaxNamingNameImpl_RIGHT_TO_LEFT, 0x1a, -1, -1, -1, -1 },
    { "FLAT", "B", .constantValue.asChar = JavaxNamingNameImpl_FLAT, 0x1a, -1, -1, -1, -1 },
    { "components_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, 41, -1 },
    { "syntaxDirection_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxSeparator_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxSeparator2_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxCaseInsensitive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxTrimBlanks_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxEscape_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxBeginQuote1_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxEndQuote1_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxBeginQuote2_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxEndQuote2_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxAvaSeparator_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "syntaxTypevalSeparator_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "STYLE_NONE", "I", .constantValue.asInt = JavaxNamingNameImpl_STYLE_NONE, 0x1a, -1, -1, -1, -1 },
    { "STYLE_QUOTE1", "I", .constantValue.asInt = JavaxNamingNameImpl_STYLE_QUOTE1, 0x1a, -1, -1, -1, -1 },
    { "STYLE_QUOTE2", "I", .constantValue.asInt = JavaxNamingNameImpl_STYLE_QUOTE2, 0x1a, -1, -1, -1, -1 },
    { "STYLE_ESCAPE", "I", .constantValue.asInt = JavaxNamingNameImpl_STYLE_ESCAPE, 0x1a, -1, -1, -1, -1 },
    { "escapingStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isA", "LNSString;ILNSString;", "isMeta", "LNSString;I", "isSeparator", "skipSeparator", "extractComp", "LNSString;IILJavaUtilVector;", "LJavaxNamingInvalidNameException;", "(Ljava/lang/String;IILjava/util/Vector<Ljava/lang/String;>;)I", "getBoolean", "LJavaUtilProperties;LNSString;", "toBoolean", "LNSString;", "recordNamingConvention", "LJavaUtilProperties;", "LJavaUtilProperties;LJavaUtilEnumeration;", "(Ljava/util/Properties;Ljava/util/Enumeration<Ljava/lang/String;>;)V", "stringifyComp", "toString", "equals", "LNSObject;", "compareTo", "LJavaxNamingNameImpl;", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "get", "I", "getPrefix", "(I)Ljava/util/Enumeration<Ljava/lang/String;>;", "getSuffix", "startsWith", "ILJavaUtilEnumeration;", "(ILjava/util/Enumeration<Ljava/lang/String;>;)Z", "endsWith", "addAll", "LJavaUtilEnumeration;", "(Ljava/util/Enumeration<Ljava/lang/String;>;)Z", "add", "ILNSString;", "remove", "hashCode", "Ljava/util/Vector<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _JavaxNamingNameImpl = { "NameImpl", "javax.naming", ptrTable, methods, fields, 7, 0x0, 29, 21, -1, -1, -1, -1, -1 };
  return &_JavaxNamingNameImpl;
}

@end

jboolean JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(JavaxNamingNameImpl *self, NSString *n, jint i, NSString *match) {
  return (match != nil && [((NSString *) nil_chk(n)) java_hasPrefix:match offset:i]);
}

jboolean JavaxNamingNameImpl_isMetaWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *n, jint i) {
  return (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, self->syntaxEscape_) || JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, self->syntaxBeginQuote1_) || JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, self->syntaxBeginQuote2_) || JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(self, n, i));
}

jboolean JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *n, jint i) {
  return (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, self->syntaxSeparator_) || JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, n, i, self->syntaxSeparator2_));
}

jint JavaxNamingNameImpl_skipSeparatorWithNSString_withInt_(JavaxNamingNameImpl *self, NSString *name, jint i) {
  if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxSeparator_)) {
    i += [((NSString *) nil_chk(self->syntaxSeparator_)) java_length];
  }
  else if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxSeparator2_)) {
    i += [((NSString *) nil_chk(self->syntaxSeparator2_)) java_length];
  }
  return (i);
}

jint JavaxNamingNameImpl_extractCompWithNSString_withInt_withInt_withJavaUtilVector_(JavaxNamingNameImpl *self, NSString *name, jint i, jint len, JavaUtilVector *comps) {
  NSString *beginQuote;
  NSString *endQuote;
  jboolean start = true;
  jboolean one = false;
  JavaLangStringBuffer *answer = create_JavaLangStringBuffer_initWithInt_(len);
  while (i < len) {
    if (start && ((one = JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxBeginQuote1_)) || JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxBeginQuote2_))) {
      beginQuote = one ? self->syntaxBeginQuote1_ : self->syntaxBeginQuote2_;
      endQuote = one ? self->syntaxEndQuote1_ : self->syntaxEndQuote2_;
      if (self->escapingStyle_ == JavaxNamingNameImpl_STYLE_NONE) {
        self->escapingStyle_ = one ? JavaxNamingNameImpl_STYLE_QUOTE1 : JavaxNamingNameImpl_STYLE_QUOTE2;
      }
      for (i += [beginQuote java_length]; ((i < len) && ![((NSString *) nil_chk(name)) java_hasPrefix:endQuote offset:i]); i++) {
        if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxEscape_) && JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length], endQuote)) {
          i += [((NSString *) nil_chk(self->syntaxEscape_)) java_length];
        }
        [answer appendWithChar:[((NSString *) nil_chk(name)) charAtWithInt:i]];
      }
      if (i >= len) @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", name, @": no close quote"));
      i += [endQuote java_length];
      if (i == len || JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(self, name, i)) {
        break;
      }
      @throw (create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", name, @": close quote appears before end of component")));
    }
    else if (JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(self, name, i)) {
      break;
    }
    else if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxEscape_)) {
      if (JavaxNamingNameImpl_isMetaWithNSString_withInt_(self, name, i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length])) {
        i += [((NSString *) nil_chk(self->syntaxEscape_)) java_length];
        if (self->escapingStyle_ == JavaxNamingNameImpl_STYLE_NONE) {
          self->escapingStyle_ = JavaxNamingNameImpl_STYLE_ESCAPE;
        }
      }
      else if (i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length] >= len) {
        @throw (create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$$$", name, @": unescaped ", self->syntaxEscape_, @" at end of component")));
      }
    }
    else if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxTypevalSeparator_) && ((one = JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i + [((NSString *) nil_chk(self->syntaxTypevalSeparator_)) java_length], self->syntaxBeginQuote1_)) || JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i + [((NSString *) nil_chk(self->syntaxTypevalSeparator_)) java_length], self->syntaxBeginQuote2_))) {
      beginQuote = one ? self->syntaxBeginQuote1_ : self->syntaxBeginQuote2_;
      endQuote = one ? self->syntaxEndQuote1_ : self->syntaxEndQuote2_;
      i += [((NSString *) nil_chk(self->syntaxTypevalSeparator_)) java_length];
      [answer appendWithNSString:JreStrcat("$$", self->syntaxTypevalSeparator_, beginQuote)];
      for (i += [beginQuote java_length]; ((i < len) && ![((NSString *) nil_chk(name)) java_hasPrefix:endQuote offset:i]); i++) {
        if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i, self->syntaxEscape_) && JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, name, i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length], endQuote)) {
          i += [((NSString *) nil_chk(self->syntaxEscape_)) java_length];
        }
        [answer appendWithChar:[((NSString *) nil_chk(name)) charAtWithInt:i]];
      }
      if (i >= len) @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", name, @": typeval no close quote"));
      i += [endQuote java_length];
      [answer appendWithNSString:endQuote];
      if (i == len || JavaxNamingNameImpl_isSeparatorWithNSString_withInt_(self, name, i)) {
        break;
      }
      @throw (create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", [((NSString *) nil_chk(name)) java_substring:i], @": typeval close quote appears before end of component")));
    }
    [answer appendWithChar:[((NSString *) nil_chk(name)) charAtWithInt:i++]];
    start = false;
  }
  if (self->syntaxDirection_ == JavaxNamingNameImpl_RIGHT_TO_LEFT) [((JavaUtilVector *) nil_chk(comps)) insertElementAtWithId:[answer description] withInt:0];
  else [((JavaUtilVector *) nil_chk(comps)) addElementWithId:[answer description]];
  return i;
}

jboolean JavaxNamingNameImpl_getBooleanWithJavaUtilProperties_withNSString_(JavaUtilProperties *p, NSString *name) {
  JavaxNamingNameImpl_initialize();
  return JavaxNamingNameImpl_toBooleanWithNSString_([((JavaUtilProperties *) nil_chk(p)) getPropertyWithNSString:name]);
}

jboolean JavaxNamingNameImpl_toBooleanWithNSString_(NSString *name) {
  JavaxNamingNameImpl_initialize();
  return ((name != nil) && [((NSString *) nil_chk([((NSString *) nil_chk(name)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) isEqual:@"true"]);
}

void JavaxNamingNameImpl_recordNamingConventionWithJavaUtilProperties_(JavaxNamingNameImpl *self, JavaUtilProperties *p) {
  NSString *syntaxDirectionStr = [((JavaUtilProperties *) nil_chk(p)) getPropertyWithNSString:@"jndi.syntax.direction" withNSString:@"flat"];
  if ([((NSString *) nil_chk(syntaxDirectionStr)) isEqual:@"left_to_right"]) {
    self->syntaxDirection_ = JavaxNamingNameImpl_LEFT_TO_RIGHT;
  }
  else if ([syntaxDirectionStr isEqual:@"right_to_left"]) {
    self->syntaxDirection_ = JavaxNamingNameImpl_RIGHT_TO_LEFT;
  }
  else if ([syntaxDirectionStr isEqual:@"flat"]) {
    self->syntaxDirection_ = JavaxNamingNameImpl_FLAT;
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", syntaxDirectionStr, @"is not a valid value for the jndi.syntax.direction property"));
  }
  if (self->syntaxDirection_ != JavaxNamingNameImpl_FLAT) {
    JreStrongAssign(&self->syntaxSeparator_, [p getPropertyWithNSString:@"jndi.syntax.separator"]);
    JreStrongAssign(&self->syntaxSeparator2_, [p getPropertyWithNSString:@"jndi.syntax.separator2"]);
    if (self->syntaxSeparator_ == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"jndi.syntax.separator property required for non-flat syntax");
    }
  }
  else {
    JreStrongAssign(&self->syntaxSeparator_, nil);
  }
  JreStrongAssign(&self->syntaxEscape_, [p getPropertyWithNSString:@"jndi.syntax.escape"]);
  self->syntaxCaseInsensitive_ = JavaxNamingNameImpl_getBooleanWithJavaUtilProperties_withNSString_(p, @"jndi.syntax.ignorecase");
  self->syntaxTrimBlanks_ = JavaxNamingNameImpl_getBooleanWithJavaUtilProperties_withNSString_(p, @"jndi.syntax.trimblanks");
  JreStrongAssign(&self->syntaxBeginQuote1_, [p getPropertyWithNSString:@"jndi.syntax.beginquote"]);
  JreStrongAssign(&self->syntaxEndQuote1_, [p getPropertyWithNSString:@"jndi.syntax.endquote"]);
  if (self->syntaxEndQuote1_ == nil && self->syntaxBeginQuote1_ != nil) JreStrongAssign(&self->syntaxEndQuote1_, self->syntaxBeginQuote1_);
  else if (self->syntaxBeginQuote1_ == nil && self->syntaxEndQuote1_ != nil) JreStrongAssign(&self->syntaxBeginQuote1_, self->syntaxEndQuote1_);
  JreStrongAssign(&self->syntaxBeginQuote2_, [p getPropertyWithNSString:@"jndi.syntax.beginquote2"]);
  JreStrongAssign(&self->syntaxEndQuote2_, [p getPropertyWithNSString:@"jndi.syntax.endquote2"]);
  if (self->syntaxEndQuote2_ == nil && self->syntaxBeginQuote2_ != nil) JreStrongAssign(&self->syntaxEndQuote2_, self->syntaxBeginQuote2_);
  else if (self->syntaxBeginQuote2_ == nil && self->syntaxEndQuote2_ != nil) JreStrongAssign(&self->syntaxBeginQuote2_, self->syntaxEndQuote2_);
  JreStrongAssign(&self->syntaxAvaSeparator_, [p getPropertyWithNSString:@"jndi.syntax.separator.ava"]);
  JreStrongAssign(&self->syntaxTypevalSeparator_, [p getPropertyWithNSString:@"jndi.syntax.separator.typeval"]);
}

void JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax) {
  NSObject_init(self);
  self->syntaxDirection_ = JavaxNamingNameImpl_LEFT_TO_RIGHT;
  JreStrongAssign(&self->syntaxSeparator_, @"/");
  JreStrongAssign(&self->syntaxSeparator2_, nil);
  self->syntaxCaseInsensitive_ = false;
  self->syntaxTrimBlanks_ = false;
  JreStrongAssign(&self->syntaxEscape_, @"\\");
  JreStrongAssign(&self->syntaxBeginQuote1_, @"\"");
  JreStrongAssign(&self->syntaxEndQuote1_, @"\"");
  JreStrongAssign(&self->syntaxBeginQuote2_, @"'");
  JreStrongAssign(&self->syntaxEndQuote2_, @"'");
  JreStrongAssign(&self->syntaxAvaSeparator_, nil);
  JreStrongAssign(&self->syntaxTypevalSeparator_, nil);
  self->escapingStyle_ = JavaxNamingNameImpl_STYLE_NONE;
  if (syntax != nil) {
    JavaxNamingNameImpl_recordNamingConventionWithJavaUtilProperties_(self, syntax);
  }
  JreStrongAssignAndConsume(&self->components_, new_JavaUtilVector_init());
}

JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaUtilProperties *syntax) {
  J2OBJC_NEW_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_, syntax)
}

JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaUtilProperties *syntax) {
  J2OBJC_CREATE_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_, syntax)
}

void JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax, NSString *n) {
  JavaxNamingNameImpl_initWithJavaUtilProperties_(self, syntax);
  jboolean rToL = self->syntaxDirection_ == JavaxNamingNameImpl_RIGHT_TO_LEFT;
  jboolean compsAllEmpty = true;
  jint len = [((NSString *) nil_chk(n)) java_length];
  for (jint i = 0; i < len; ) {
    i = JavaxNamingNameImpl_extractCompWithNSString_withInt_withInt_withJavaUtilVector_(self, n, i, len, self->components_);
    NSString *comp = rToL ? [((JavaUtilVector *) nil_chk(self->components_)) firstElement] : [((JavaUtilVector *) nil_chk(self->components_)) lastElement];
    if ([comp java_length] >= 1) {
      compsAllEmpty = false;
    }
    if (i < len) {
      i = JavaxNamingNameImpl_skipSeparatorWithNSString_withInt_(self, n, i);
      if ((i == len) && !compsAllEmpty) {
        if (rToL) {
          [((JavaUtilVector *) nil_chk(self->components_)) insertElementAtWithId:@"" withInt:0];
        }
        else {
          [((JavaUtilVector *) nil_chk(self->components_)) addElementWithId:@""];
        }
      }
    }
  }
}

JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaUtilProperties *syntax, NSString *n) {
  J2OBJC_NEW_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_withNSString_, syntax, n)
}

JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaUtilProperties *syntax, NSString *n) {
  J2OBJC_CREATE_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_withNSString_, syntax, n)
}

void JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps) {
  JavaxNamingNameImpl_initWithJavaUtilProperties_(self, syntax);
  while ([((id<JavaUtilEnumeration>) nil_chk(comps)) hasMoreElements]) [((JavaUtilVector *) nil_chk(self->components_)) addElementWithId:[comps nextElement]];
}

JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps) {
  J2OBJC_NEW_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_withJavaUtilEnumeration_, syntax, comps)
}

JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps) {
  J2OBJC_CREATE_IMPL(JavaxNamingNameImpl, initWithJavaUtilProperties_withJavaUtilEnumeration_, syntax, comps)
}

NSString *JavaxNamingNameImpl_stringifyCompWithNSString_(JavaxNamingNameImpl *self, NSString *comp) {
  jint len = [((NSString *) nil_chk(comp)) java_length];
  jboolean escapeSeparator = false;
  jboolean escapeSeparator2 = false;
  NSString *beginQuote = nil;
  NSString *endQuote = nil;
  JavaLangStringBuffer *strbuf = create_JavaLangStringBuffer_initWithInt_(len);
  if (self->syntaxSeparator_ != nil && [comp java_indexOfString:self->syntaxSeparator_] >= 0) {
    if (self->syntaxBeginQuote1_ != nil) {
      beginQuote = self->syntaxBeginQuote1_;
      endQuote = self->syntaxEndQuote1_;
    }
    else if (self->syntaxBeginQuote2_ != nil) {
      beginQuote = self->syntaxBeginQuote2_;
      endQuote = self->syntaxEndQuote2_;
    }
    else if (self->syntaxEscape_ != nil) escapeSeparator = true;
  }
  if (self->syntaxSeparator2_ != nil && [comp java_indexOfString:self->syntaxSeparator2_] >= 0) {
    if (self->syntaxBeginQuote1_ != nil) {
      if (beginQuote == nil) {
        beginQuote = self->syntaxBeginQuote1_;
        endQuote = self->syntaxEndQuote1_;
      }
    }
    else if (self->syntaxBeginQuote2_ != nil) {
      if (beginQuote == nil) {
        beginQuote = self->syntaxBeginQuote2_;
        endQuote = self->syntaxEndQuote2_;
      }
    }
    else if (self->syntaxEscape_ != nil) escapeSeparator2 = true;
  }
  if (beginQuote != nil) {
    strbuf = [strbuf appendWithNSString:beginQuote];
    for (jint i = 0; i < len; ) {
      if ([comp java_hasPrefix:endQuote offset:i]) {
        [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(strbuf)) appendWithNSString:self->syntaxEscape_])) appendWithNSString:endQuote];
        i += [((NSString *) nil_chk(endQuote)) java_length];
      }
      else {
        [((JavaLangStringBuffer *) nil_chk(strbuf)) appendWithChar:[comp charAtWithInt:i++]];
      }
    }
    [((JavaLangStringBuffer *) nil_chk(strbuf)) appendWithNSString:endQuote];
  }
  else {
    jboolean start = true;
    for (jint i = 0; i < len; ) {
      if (start && JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, comp, i, self->syntaxBeginQuote1_)) {
        [((JavaLangStringBuffer *) nil_chk([strbuf appendWithNSString:self->syntaxEscape_])) appendWithNSString:self->syntaxBeginQuote1_];
        i += [((NSString *) nil_chk(self->syntaxBeginQuote1_)) java_length];
      }
      else if (start && JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, comp, i, self->syntaxBeginQuote2_)) {
        [((JavaLangStringBuffer *) nil_chk([strbuf appendWithNSString:self->syntaxEscape_])) appendWithNSString:self->syntaxBeginQuote2_];
        i += [((NSString *) nil_chk(self->syntaxBeginQuote2_)) java_length];
      }
      else if (JavaxNamingNameImpl_isAWithNSString_withInt_withNSString_(self, comp, i, self->syntaxEscape_)) {
        if (i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length] >= len) {
          [strbuf appendWithNSString:self->syntaxEscape_];
        }
        else if (JavaxNamingNameImpl_isMetaWithNSString_withInt_(self, comp, i + [((NSString *) nil_chk(self->syntaxEscape_)) java_length])) {
          [strbuf appendWithNSString:self->syntaxEscape_];
        }
        [strbuf appendWithNSString:self->syntaxEscape_];
        i += [((NSString *) nil_chk(self->syntaxEscape_)) java_length];
      }
      else if (escapeSeparator && [comp java_hasPrefix:self->syntaxSeparator_ offset:i]) {
        [((JavaLangStringBuffer *) nil_chk([strbuf appendWithNSString:self->syntaxEscape_])) appendWithNSString:self->syntaxSeparator_];
        i += [((NSString *) nil_chk(self->syntaxSeparator_)) java_length];
      }
      else if (escapeSeparator2 && [comp java_hasPrefix:self->syntaxSeparator2_ offset:i]) {
        [((JavaLangStringBuffer *) nil_chk([strbuf appendWithNSString:self->syntaxEscape_])) appendWithNSString:self->syntaxSeparator2_];
        i += [((NSString *) nil_chk(self->syntaxSeparator2_)) java_length];
      }
      else {
        [strbuf appendWithChar:[comp charAtWithInt:i++]];
      }
      start = false;
    }
  }
  return ([strbuf description]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingNameImpl)

@implementation JavaxNamingNameImplEnumerator

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)v
                               withInt:(jint)start
                               withInt:(jint)lim {
  JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(self, v, start, lim);
  return self;
}

- (jboolean)hasMoreElements {
  return count_ < limit_;
}

- (NSString *)nextElement {
  if (count_ < limit_) {
    return [((JavaUtilVector *) nil_chk(vector_)) elementAtWithInt:count_++];
  }
  @throw create_JavaUtilNoSuchElementException_initWithNSString_(@"NameImplEnumerator");
}

- (void)dealloc {
  RELEASE_(vector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilVector:withInt:withInt:);
  methods[1].selector = @selector(hasMoreElements);
  methods[2].selector = @selector(nextElement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "vector_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilVector;II", "(Ljava/util/Vector<Ljava/lang/String;>;II)V", "Ljava/util/Vector<Ljava/lang/String;>;", "Ljava/lang/Object;Ljava/util/Enumeration<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _JavaxNamingNameImplEnumerator = { "NameImplEnumerator", "javax.naming", ptrTable, methods, fields, 7, 0x10, 3, 3, -1, -1, -1, 3, -1 };
  return &_JavaxNamingNameImplEnumerator;
}

@end

void JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaxNamingNameImplEnumerator *self, JavaUtilVector *v, jint start, jint lim) {
  NSObject_init(self);
  JreStrongAssign(&self->vector_, v);
  self->count_ = start;
  self->limit_ = lim;
}

JavaxNamingNameImplEnumerator *new_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaUtilVector *v, jint start, jint lim) {
  J2OBJC_NEW_IMPL(JavaxNamingNameImplEnumerator, initWithJavaUtilVector_withInt_withInt_, v, start, lim)
}

JavaxNamingNameImplEnumerator *create_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaUtilVector *v, jint start, jint lim) {
  J2OBJC_CREATE_IMPL(JavaxNamingNameImplEnumerator, initWithJavaUtilVector_withInt_withInt_, v, start, lim)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingNameImplEnumerator)
