//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/Context.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingContext")
#ifdef RESTRICT_JavaxNamingContext
#define INCLUDE_ALL_JavaxNamingContext 0
#else
#define INCLUDE_ALL_JavaxNamingContext 1
#endif
#undef RESTRICT_JavaxNamingContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingContext_) && (INCLUDE_ALL_JavaxNamingContext || defined(INCLUDE_JavaxNamingContext))
#define JavaxNamingContext_

@class JavaUtilHashtable;
@protocol JavaxNamingName;
@protocol JavaxNamingNameParser;
@protocol JavaxNamingNamingEnumeration;

@protocol JavaxNamingContext < JavaObject >

- (id)lookupWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id)lookupWithNSString:(NSString *)name;

- (void)bindWithJavaxNamingName:(id<JavaxNamingName>)name
                         withId:(id)obj;

- (void)bindWithNSString:(NSString *)name
                  withId:(id)obj;

- (void)rebindWithJavaxNamingName:(id<JavaxNamingName>)name
                           withId:(id)obj;

- (void)rebindWithNSString:(NSString *)name
                    withId:(id)obj;

- (void)unbindWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)unbindWithNSString:(NSString *)name;

- (void)renameWithJavaxNamingName:(id<JavaxNamingName>)oldName
              withJavaxNamingName:(id<JavaxNamingName>)newName;

- (void)renameWithNSString:(NSString *)oldName
              withNSString:(NSString *)newName;

- (id<JavaxNamingNamingEnumeration>)listWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNamingEnumeration>)listWithNSString:(NSString *)name;

- (id<JavaxNamingNamingEnumeration>)listBindingsWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNamingEnumeration>)listBindingsWithNSString:(NSString *)name;

- (void)destroySubcontextWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)destroySubcontextWithNSString:(NSString *)name;

- (id<JavaxNamingContext>)createSubcontextWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingContext>)createSubcontextWithNSString:(NSString *)name;

- (id)lookupLinkWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id)lookupLinkWithNSString:(NSString *)name;

- (id<JavaxNamingNameParser>)getNameParserWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNameParser>)getNameParserWithNSString:(NSString *)name;

- (id<JavaxNamingName>)composeNameWithJavaxNamingName:(id<JavaxNamingName>)name
                                  withJavaxNamingName:(id<JavaxNamingName>)prefix;

- (NSString *)composeNameWithNSString:(NSString *)name
                         withNSString:(NSString *)prefix;

- (id)addToEnvironmentWithNSString:(NSString *)propName
                            withId:(id)propVal;

- (id)removeFromEnvironmentWithNSString:(NSString *)propName;

- (JavaUtilHashtable *)getEnvironment;

- (void)close;

- (NSString *)getNameInNamespace;

@end

@interface JavaxNamingContext : NSObject
@property (readonly, copy, class) NSString *INITIAL_CONTEXT_FACTORY NS_SWIFT_NAME(INITIAL_CONTEXT_FACTORY);
@property (readonly, copy, class) NSString *OBJECT_FACTORIES NS_SWIFT_NAME(OBJECT_FACTORIES);
@property (readonly, copy, class) NSString *STATE_FACTORIES NS_SWIFT_NAME(STATE_FACTORIES);
@property (readonly, copy, class) NSString *URL_PKG_PREFIXES NS_SWIFT_NAME(URL_PKG_PREFIXES);
@property (readonly, copy, class) NSString *PROVIDER_URL NS_SWIFT_NAME(PROVIDER_URL);
@property (readonly, copy, class) NSString *DNS_URL NS_SWIFT_NAME(DNS_URL);
@property (readonly, copy, class) NSString *AUTHORITATIVE NS_SWIFT_NAME(AUTHORITATIVE);
@property (readonly, copy, class) NSString *BATCHSIZE NS_SWIFT_NAME(BATCHSIZE);
@property (readonly, copy, class) NSString *REFERRAL NS_SWIFT_NAME(REFERRAL);
@property (readonly, copy, class) NSString *SECURITY_PROTOCOL NS_SWIFT_NAME(SECURITY_PROTOCOL);
@property (readonly, copy, class) NSString *SECURITY_AUTHENTICATION NS_SWIFT_NAME(SECURITY_AUTHENTICATION);
@property (readonly, copy, class) NSString *SECURITY_PRINCIPAL NS_SWIFT_NAME(SECURITY_PRINCIPAL);
@property (readonly, copy, class) NSString *SECURITY_CREDENTIALS NS_SWIFT_NAME(SECURITY_CREDENTIALS);
@property (readonly, copy, class) NSString *LANGUAGE NS_SWIFT_NAME(LANGUAGE);
@property (readonly, copy, class) NSString *APPLET NS_SWIFT_NAME(APPLET);

+ (NSString *)INITIAL_CONTEXT_FACTORY;

+ (NSString *)OBJECT_FACTORIES;

+ (NSString *)STATE_FACTORIES;

+ (NSString *)URL_PKG_PREFIXES;

+ (NSString *)PROVIDER_URL;

+ (NSString *)DNS_URL;

+ (NSString *)AUTHORITATIVE;

+ (NSString *)BATCHSIZE;

+ (NSString *)REFERRAL;

+ (NSString *)SECURITY_PROTOCOL;

+ (NSString *)SECURITY_AUTHENTICATION;

+ (NSString *)SECURITY_PRINCIPAL;

+ (NSString *)SECURITY_CREDENTIALS;

+ (NSString *)LANGUAGE;

+ (NSString *)APPLET;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingContext)

inline NSString *JavaxNamingContext_get_INITIAL_CONTEXT_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_INITIAL_CONTEXT_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, INITIAL_CONTEXT_FACTORY, NSString *)

inline NSString *JavaxNamingContext_get_OBJECT_FACTORIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_OBJECT_FACTORIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, OBJECT_FACTORIES, NSString *)

inline NSString *JavaxNamingContext_get_STATE_FACTORIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_STATE_FACTORIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, STATE_FACTORIES, NSString *)

inline NSString *JavaxNamingContext_get_URL_PKG_PREFIXES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_URL_PKG_PREFIXES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, URL_PKG_PREFIXES, NSString *)

inline NSString *JavaxNamingContext_get_PROVIDER_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_PROVIDER_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, PROVIDER_URL, NSString *)

inline NSString *JavaxNamingContext_get_DNS_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_DNS_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, DNS_URL, NSString *)

inline NSString *JavaxNamingContext_get_AUTHORITATIVE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_AUTHORITATIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, AUTHORITATIVE, NSString *)

inline NSString *JavaxNamingContext_get_BATCHSIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_BATCHSIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, BATCHSIZE, NSString *)

inline NSString *JavaxNamingContext_get_REFERRAL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_REFERRAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, REFERRAL, NSString *)

inline NSString *JavaxNamingContext_get_SECURITY_PROTOCOL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_SECURITY_PROTOCOL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, SECURITY_PROTOCOL, NSString *)

inline NSString *JavaxNamingContext_get_SECURITY_AUTHENTICATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_SECURITY_AUTHENTICATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, SECURITY_AUTHENTICATION, NSString *)

inline NSString *JavaxNamingContext_get_SECURITY_PRINCIPAL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_SECURITY_PRINCIPAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, SECURITY_PRINCIPAL, NSString *)

inline NSString *JavaxNamingContext_get_SECURITY_CREDENTIALS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_SECURITY_CREDENTIALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, SECURITY_CREDENTIALS, NSString *)

inline NSString *JavaxNamingContext_get_LANGUAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_LANGUAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, LANGUAGE, NSString *)

inline NSString *JavaxNamingContext_get_APPLET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingContext_APPLET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingContext, APPLET, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingContext")
