//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/ldap/LdapName.java
//

#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/StreamCorruptedException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/Name.h"
#include "javax/naming/ldap/LdapName.h"
#include "javax/naming/ldap/Rdn.h"
#include "javax/naming/ldap/Rfc2253Parser.h"

@interface JavaxNamingLdapLdapName () {
 @public
  id<JavaUtilList> rdns_;
  NSString *unparsed_;
}

- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)rdns
                         withInt:(jint)beg
                         withInt:(jint)end;

- (jboolean)doesListMatchWithInt:(jint)beg
                         withInt:(jint)end
                withJavaUtilList:(id<JavaUtilList>)rdns;

- (jboolean)matchesWithInt:(jint)beg
                   withInt:(jint)end
       withJavaxNamingName:(id<JavaxNamingName>)n;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

- (void)parse;

@end

J2OBJC_FIELD_SETTER(JavaxNamingLdapLdapName, rdns_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(JavaxNamingLdapLdapName, unparsed_, NSString *)

inline jlong JavaxNamingLdapLdapName_get_serialVersionUID(void);
#define JavaxNamingLdapLdapName_serialVersionUID -1595520034788997356LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingLdapLdapName, serialVersionUID, jlong)

__attribute__((unused)) static void JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(JavaxNamingLdapLdapName *self, NSString *name, id<JavaUtilList> rdns, jint beg, jint end);

__attribute__((unused)) static JavaxNamingLdapLdapName *new_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(NSString *name, id<JavaUtilList> rdns, jint beg, jint end) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxNamingLdapLdapName *create_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(NSString *name, id<JavaUtilList> rdns, jint beg, jint end);

__attribute__((unused)) static jboolean JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(JavaxNamingLdapLdapName *self, jint beg, jint end, id<JavaUtilList> rdns);

__attribute__((unused)) static jboolean JavaxNamingLdapLdapName_matchesWithInt_withInt_withJavaxNamingName_(JavaxNamingLdapLdapName *self, jint beg, jint end, id<JavaxNamingName> n);

__attribute__((unused)) static void JavaxNamingLdapLdapName_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingLdapLdapName *self, JavaIoObjectOutputStream *s);

__attribute__((unused)) static void JavaxNamingLdapLdapName_readObjectWithJavaIoObjectInputStream_(JavaxNamingLdapLdapName *self, JavaIoObjectInputStream *s);

__attribute__((unused)) static void JavaxNamingLdapLdapName_parse(JavaxNamingLdapLdapName *self);

@interface JavaxNamingLdapLdapName_1 : NSObject < JavaUtilEnumeration > {
 @public
  id<JavaUtilIterator> val$iter_;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0;

- (jboolean)hasMoreElements;

- (NSString *)nextElement;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingLdapLdapName_1)

__attribute__((unused)) static void JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(JavaxNamingLdapLdapName_1 *self, id<JavaUtilIterator> capture$0);

__attribute__((unused)) static JavaxNamingLdapLdapName_1 *new_JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxNamingLdapLdapName_1 *create_JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0);

@implementation JavaxNamingLdapLdapName

- (instancetype)initWithNSString:(NSString *)name {
  JavaxNamingLdapLdapName_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rdns {
  JavaxNamingLdapLdapName_initWithJavaUtilList_(self, rdns);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)rdns
                         withInt:(jint)beg
                         withInt:(jint)end {
  JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(self, name, rdns, beg, end);
  return self;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(rdns_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk(rdns_)) isEmpty];
}

- (id<JavaUtilEnumeration>)getAll {
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(rdns_)) iterator];
  return create_JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(iter);
}

- (NSString *)getWithInt:(jint)posn {
  return [((JavaxNamingLdapRdn *) nil_chk([((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:posn])) description];
}

- (JavaxNamingLdapRdn *)getRdnWithInt:(jint)posn {
  return [((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:posn];
}

- (id<JavaxNamingName>)getPrefixWithInt:(jint)posn {
  @try {
    return create_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(nil, rdns_, 0, posn);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Posn: ", posn, @", Size: ", [((id<JavaUtilList>) nil_chk(rdns_)) size]));
  }
}

- (id<JavaxNamingName>)getSuffixWithInt:(jint)posn {
  @try {
    return create_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(nil, rdns_, posn, [((id<JavaUtilList>) nil_chk(rdns_)) size]);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Posn: ", posn, @", Size: ", [((id<JavaUtilList>) nil_chk(rdns_)) size]));
  }
}

- (jboolean)startsWithWithJavaxNamingName:(id<JavaxNamingName>)n {
  if (n == nil) {
    return false;
  }
  jint len1 = [((id<JavaUtilList>) nil_chk(rdns_)) size];
  jint len2 = [n size];
  return (len1 >= len2 && JavaxNamingLdapLdapName_matchesWithInt_withInt_withJavaxNamingName_(self, 0, len2, n));
}

- (jboolean)startsWithWithJavaUtilList:(id<JavaUtilList>)rdns {
  if (rdns == nil) {
    return false;
  }
  jint len1 = [((id<JavaUtilList>) nil_chk(self->rdns_)) size];
  jint len2 = [rdns size];
  return (len1 >= len2 && JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(self, 0, len2, rdns));
}

- (jboolean)endsWithWithJavaxNamingName:(id<JavaxNamingName>)n {
  if (n == nil) {
    return false;
  }
  jint len1 = [((id<JavaUtilList>) nil_chk(rdns_)) size];
  jint len2 = [n size];
  return (len1 >= len2 && JavaxNamingLdapLdapName_matchesWithInt_withInt_withJavaxNamingName_(self, len1 - len2, len1, n));
}

- (jboolean)endsWithWithJavaUtilList:(id<JavaUtilList>)rdns {
  if (rdns == nil) {
    return false;
  }
  jint len1 = [((id<JavaUtilList>) nil_chk(self->rdns_)) size];
  jint len2 = [rdns size];
  return (len1 >= len2 && JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(self, len1 - len2, len1, rdns));
}

- (jboolean)doesListMatchWithInt:(jint)beg
                         withInt:(jint)end
                withJavaUtilList:(id<JavaUtilList>)rdns {
  return JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(self, beg, end, rdns);
}

- (jboolean)matchesWithInt:(jint)beg
                   withInt:(jint)end
       withJavaxNamingName:(id<JavaxNamingName>)n {
  return JavaxNamingLdapLdapName_matchesWithInt_withInt_withJavaxNamingName_(self, beg, end, n);
}

- (id<JavaxNamingName>)addAllWithJavaxNamingName:(id<JavaxNamingName>)suffix {
  return [self addAllWithInt:[self size] withJavaxNamingName:suffix];
}

- (id<JavaxNamingName>)addAllWithJavaUtilList:(id<JavaUtilList>)suffixRdns {
  return [self addAllWithInt:[self size] withJavaUtilList:suffixRdns];
}

- (id<JavaxNamingName>)addAllWithInt:(jint)posn
                 withJavaxNamingName:(id<JavaxNamingName>)suffix {
  JreStrongAssign(&unparsed_, nil);
  if ([suffix isKindOfClass:[JavaxNamingLdapLdapName class]]) {
    JavaxNamingLdapLdapName *s = (JavaxNamingLdapLdapName *) cast_chk(suffix, [JavaxNamingLdapLdapName class]);
    [((id<JavaUtilList>) nil_chk(rdns_)) addAllWithInt:posn withJavaUtilCollection:((JavaxNamingLdapLdapName *) nil_chk(s))->rdns_];
  }
  else {
    id<JavaUtilEnumeration> comps = [((id<JavaxNamingName>) nil_chk(suffix)) getAll];
    while ([((id<JavaUtilEnumeration>) nil_chk(comps)) hasMoreElements]) {
      [((id<JavaUtilList>) nil_chk(rdns_)) addWithInt:posn++ withId:([create_JavaxNamingLdapRfc2253Parser_initWithNSString_([comps nextElement]) parseRdn])];
    }
  }
  return self;
}

- (id<JavaxNamingName>)addAllWithInt:(jint)posn
                    withJavaUtilList:(id<JavaUtilList>)suffixRdns {
  JreStrongAssign(&unparsed_, nil);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(suffixRdns)) size]; i++) {
    id obj = [suffixRdns getWithInt:i];
    if (!([obj isKindOfClass:[JavaxNamingLdapRdn class]])) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Entry:", obj, @"  not a valid type;suffix list entries must be of type Rdn"));
    }
    [((id<JavaUtilList>) nil_chk(rdns_)) addWithInt:i + posn withId:(JavaxNamingLdapRdn *) cast_chk(obj, [JavaxNamingLdapRdn class])];
  }
  return self;
}

- (id<JavaxNamingName>)addWithNSString:(NSString *)comp {
  return [self addWithInt:[self size] withNSString:comp];
}

- (id<JavaxNamingName>)addWithJavaxNamingLdapRdn:(JavaxNamingLdapRdn *)comp {
  return [self addWithInt:[self size] withJavaxNamingLdapRdn:comp];
}

- (id<JavaxNamingName>)addWithInt:(jint)posn
                     withNSString:(NSString *)comp {
  JavaxNamingLdapRdn *rdn = [(create_JavaxNamingLdapRfc2253Parser_initWithNSString_(comp)) parseRdn];
  [((id<JavaUtilList>) nil_chk(rdns_)) addWithInt:posn withId:rdn];
  JreStrongAssign(&unparsed_, nil);
  return self;
}

- (id<JavaxNamingName>)addWithInt:(jint)posn
           withJavaxNamingLdapRdn:(JavaxNamingLdapRdn *)comp {
  if (comp == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Cannot set comp to null");
  }
  [((id<JavaUtilList>) nil_chk(rdns_)) addWithInt:posn withId:comp];
  JreStrongAssign(&unparsed_, nil);
  return self;
}

- (id)removeWithInt:(jint)posn {
  JreStrongAssign(&unparsed_, nil);
  return [((JavaxNamingLdapRdn *) nil_chk([((id<JavaUtilList>) nil_chk(rdns_)) removeWithInt:posn])) description];
}

- (id<JavaUtilList>)getRdns {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(rdns_);
}

- (id)java_clone {
  return create_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(unparsed_, rdns_, 0, [((id<JavaUtilList>) nil_chk(rdns_)) size]);
}

- (NSString *)description {
  if (unparsed_ != nil) {
    return unparsed_;
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  jint size = [((id<JavaUtilList>) nil_chk(rdns_)) size];
  if ((size - 1) >= 0) {
    [builder appendWithId:[((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:size - 1]];
  }
  for (jint next = size - 2; next >= 0; next--) {
    [builder appendWithChar:','];
    [builder appendWithId:[((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:next]];
  }
  JreStrongAssign(&unparsed_, [builder description]);
  return unparsed_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return true;
  }
  if (!([obj isKindOfClass:[JavaxNamingLdapLdapName class]])) {
    return false;
  }
  JavaxNamingLdapLdapName *that = (JavaxNamingLdapLdapName *) cast_chk(obj, [JavaxNamingLdapLdapName class]);
  if ([((id<JavaUtilList>) nil_chk(rdns_)) size] != [((id<JavaUtilList>) nil_chk(((JavaxNamingLdapLdapName *) nil_chk(that))->rdns_)) size]) {
    return false;
  }
  if (unparsed_ != nil && [unparsed_ java_equalsIgnoreCase:that->unparsed_]) {
    return true;
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rdns_)) size]; i++) {
    JavaxNamingLdapRdn *rdn1 = [((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:i];
    JavaxNamingLdapRdn *rdn2 = [((id<JavaUtilList>) nil_chk(that->rdns_)) getWithInt:i];
    if (![((JavaxNamingLdapRdn *) nil_chk(rdn1)) isEqual:rdn2]) {
      return false;
    }
  }
  return true;
}

- (jint)compareToWithId:(id)obj {
  cast_chk(obj, [NSObject class]);
  if (!([obj isKindOfClass:[JavaxNamingLdapLdapName class]])) {
    @throw create_JavaLangClassCastException_initWithNSString_(@"The obj is not a LdapName");
  }
  if (obj == self) {
    return 0;
  }
  JavaxNamingLdapLdapName *that = (JavaxNamingLdapLdapName *) cast_chk(obj, [JavaxNamingLdapLdapName class]);
  if (unparsed_ != nil && [unparsed_ java_equalsIgnoreCase:((JavaxNamingLdapLdapName *) nil_chk(that))->unparsed_]) {
    return 0;
  }
  jint minSize = JavaLangMath_minWithInt_withInt_([((id<JavaUtilList>) nil_chk(rdns_)) size], [((id<JavaUtilList>) nil_chk(((JavaxNamingLdapLdapName *) nil_chk(that))->rdns_)) size]);
  for (jint i = 0; i < minSize; i++) {
    JavaxNamingLdapRdn *rdn1 = [((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:i];
    JavaxNamingLdapRdn *rdn2 = [((id<JavaUtilList>) nil_chk(that->rdns_)) getWithInt:i];
    jint diff = [((JavaxNamingLdapRdn *) nil_chk(rdn1)) compareToWithId:rdn2];
    if (diff != 0) {
      return diff;
    }
  }
  return ([((id<JavaUtilList>) nil_chk(rdns_)) size] - [((id<JavaUtilList>) nil_chk(that->rdns_)) size]);
}

- (NSUInteger)hash {
  jint hash_ = 0;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rdns_)) size]; i++) {
    JavaxNamingLdapRdn *rdn = [((id<JavaUtilList>) nil_chk(rdns_)) getWithInt:i];
    hash_ += ((jint) [((JavaxNamingLdapRdn *) nil_chk(rdn)) hash]);
  }
  return hash_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s {
  JavaxNamingLdapLdapName_writeObjectWithJavaIoObjectOutputStream_(self, s);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  JavaxNamingLdapLdapName_readObjectWithJavaIoObjectInputStream_(self, s);
}

- (void)parse {
  JavaxNamingLdapLdapName_parse(self);
}

- (id)clone {
  return [self java_clone];
}

- (void)dealloc {
  RELEASE_(rdns_);
  RELEASE_(unparsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingLdapRdn;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 2, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 2, -1, 14, -1, -1 },
    { NULL, "Z", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 21, 13, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 21, 2, -1, 22, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 21, 23, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 21, 24, -1, 25, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 26, 0, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 26, 28, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 26, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 30, 8, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, 40, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, 43, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithNSString:withJavaUtilList:withInt:withInt:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(getAll);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(getRdnWithInt:);
  methods[8].selector = @selector(getPrefixWithInt:);
  methods[9].selector = @selector(getSuffixWithInt:);
  methods[10].selector = @selector(startsWithWithJavaxNamingName:);
  methods[11].selector = @selector(startsWithWithJavaUtilList:);
  methods[12].selector = @selector(endsWithWithJavaxNamingName:);
  methods[13].selector = @selector(endsWithWithJavaUtilList:);
  methods[14].selector = @selector(doesListMatchWithInt:withInt:withJavaUtilList:);
  methods[15].selector = @selector(matchesWithInt:withInt:withJavaxNamingName:);
  methods[16].selector = @selector(addAllWithJavaxNamingName:);
  methods[17].selector = @selector(addAllWithJavaUtilList:);
  methods[18].selector = @selector(addAllWithInt:withJavaxNamingName:);
  methods[19].selector = @selector(addAllWithInt:withJavaUtilList:);
  methods[20].selector = @selector(addWithNSString:);
  methods[21].selector = @selector(addWithJavaxNamingLdapRdn:);
  methods[22].selector = @selector(addWithInt:withNSString:);
  methods[23].selector = @selector(addWithInt:withJavaxNamingLdapRdn:);
  methods[24].selector = @selector(removeWithInt:);
  methods[25].selector = @selector(getRdns);
  methods[26].selector = @selector(java_clone);
  methods[27].selector = @selector(description);
  methods[28].selector = @selector(isEqual:);
  methods[29].selector = @selector(compareToWithId:);
  methods[30].selector = @selector(hash);
  methods[31].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[32].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[33].selector = @selector(parse);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rdns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x82, -1, -1, 44, -1 },
    { "unparsed_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingLdapLdapName_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaxNamingInvalidNameException;", "LJavaUtilList;", "(Ljava/util/List<Ljavax/naming/ldap/Rdn;>;)V", "LNSString;LJavaUtilList;II", "(Ljava/lang/String;Ljava/util/List<Ljavax/naming/ldap/Rdn;>;II)V", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "get", "I", "getRdn", "getPrefix", "getSuffix", "startsWith", "LJavaxNamingName;", "(Ljava/util/List<Ljavax/naming/ldap/Rdn;>;)Z", "endsWith", "doesListMatch", "IILJavaUtilList;", "(IILjava/util/List<Ljavax/naming/ldap/Rdn;>;)Z", "matches", "IILJavaxNamingName;", "addAll", "(Ljava/util/List<Ljavax/naming/ldap/Rdn;>;)Ljavax/naming/Name;", "ILJavaxNamingName;", "ILJavaUtilList;", "(ILjava/util/List<Ljavax/naming/ldap/Rdn;>;)Ljavax/naming/Name;", "add", "LJavaxNamingLdapRdn;", "ILNSString;", "ILJavaxNamingLdapRdn;", "remove", "()Ljava/util/List<Ljavax/naming/ldap/Rdn;>;", "clone", "toString", "equals", "LNSObject;", "compareTo", "hashCode", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "Ljava/util/List<Ljavax/naming/ldap/Rdn;>;" };
  static const J2ObjcClassInfo _JavaxNamingLdapLdapName = { "LdapName", "javax.naming.ldap", ptrTable, methods, fields, 7, 0x1, 34, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingLdapLdapName;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void JavaxNamingLdapLdapName_initWithNSString_(JavaxNamingLdapLdapName *self, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->unparsed_, name);
  JavaxNamingLdapLdapName_parse(self);
}

JavaxNamingLdapLdapName *new_JavaxNamingLdapLdapName_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(JavaxNamingLdapLdapName, initWithNSString_, name)
}

JavaxNamingLdapLdapName *create_JavaxNamingLdapLdapName_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(JavaxNamingLdapLdapName, initWithNSString_, name)
}

void JavaxNamingLdapLdapName_initWithJavaUtilList_(JavaxNamingLdapLdapName *self, id<JavaUtilList> rdns) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->rdns_, new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(rdns)) size]));
  for (jint i = 0; i < [rdns size]; i++) {
    id obj = [rdns getWithInt:i];
    if (!([obj isKindOfClass:[JavaxNamingLdapRdn class]])) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Entry:", obj, @"  not a valid type;list entries must be of type Rdn"));
    }
    [((id<JavaUtilList>) nil_chk(self->rdns_)) addWithId:(JavaxNamingLdapRdn *) cast_chk(obj, [JavaxNamingLdapRdn class])];
  }
}

JavaxNamingLdapLdapName *new_JavaxNamingLdapLdapName_initWithJavaUtilList_(id<JavaUtilList> rdns) {
  J2OBJC_NEW_IMPL(JavaxNamingLdapLdapName, initWithJavaUtilList_, rdns)
}

JavaxNamingLdapLdapName *create_JavaxNamingLdapLdapName_initWithJavaUtilList_(id<JavaUtilList> rdns) {
  J2OBJC_CREATE_IMPL(JavaxNamingLdapLdapName, initWithJavaUtilList_, rdns)
}

void JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(JavaxNamingLdapLdapName *self, NSString *name, id<JavaUtilList> rdns, jint beg, jint end) {
  NSObject_init(self);
  JreStrongAssign(&self->unparsed_, name);
  id<JavaUtilList> sList = [((id<JavaUtilList>) nil_chk(rdns)) subListWithInt:beg withInt:end];
  JreStrongAssignAndConsume(&self->rdns_, new_JavaUtilArrayList_initWithJavaUtilCollection_(sList));
}

JavaxNamingLdapLdapName *new_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(NSString *name, id<JavaUtilList> rdns, jint beg, jint end) {
  J2OBJC_NEW_IMPL(JavaxNamingLdapLdapName, initWithNSString_withJavaUtilList_withInt_withInt_, name, rdns, beg, end)
}

JavaxNamingLdapLdapName *create_JavaxNamingLdapLdapName_initWithNSString_withJavaUtilList_withInt_withInt_(NSString *name, id<JavaUtilList> rdns, jint beg, jint end) {
  J2OBJC_CREATE_IMPL(JavaxNamingLdapLdapName, initWithNSString_withJavaUtilList_withInt_withInt_, name, rdns, beg, end)
}

jboolean JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(JavaxNamingLdapLdapName *self, jint beg, jint end, id<JavaUtilList> rdns) {
  for (jint i = beg; i < end; i++) {
    if (![((JavaxNamingLdapRdn *) nil_chk([((id<JavaUtilList>) nil_chk(self->rdns_)) getWithInt:i])) isEqual:[((id<JavaUtilList>) nil_chk(rdns)) getWithInt:i - beg]]) {
      return false;
    }
  }
  return true;
}

jboolean JavaxNamingLdapLdapName_matchesWithInt_withInt_withJavaxNamingName_(JavaxNamingLdapLdapName *self, jint beg, jint end, id<JavaxNamingName> n) {
  if ([n isKindOfClass:[JavaxNamingLdapLdapName class]]) {
    JavaxNamingLdapLdapName *ln = (JavaxNamingLdapLdapName *) cast_chk(n, [JavaxNamingLdapLdapName class]);
    return JavaxNamingLdapLdapName_doesListMatchWithInt_withInt_withJavaUtilList_(self, beg, end, ((JavaxNamingLdapLdapName *) nil_chk(ln))->rdns_);
  }
  else {
    for (jint i = beg; i < end; i++) {
      JavaxNamingLdapRdn *rdn;
      NSString *rdnString = [((id<JavaxNamingName>) nil_chk(n)) getWithInt:i - beg];
      @try {
        rdn = [(create_JavaxNamingLdapRfc2253Parser_initWithNSString_(rdnString)) parseRdn];
      }
      @catch (JavaxNamingInvalidNameException *e) {
        return false;
      }
      if (![((JavaxNamingLdapRdn *) nil_chk(rdn)) isEqual:[((id<JavaUtilList>) nil_chk(self->rdns_)) getWithInt:i]]) {
        return false;
      }
    }
  }
  return true;
}

void JavaxNamingLdapLdapName_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingLdapLdapName *self, JavaIoObjectOutputStream *s) {
  [((JavaIoObjectOutputStream *) nil_chk(s)) defaultWriteObject];
  [s writeObjectWithId:[self description]];
}

void JavaxNamingLdapLdapName_readObjectWithJavaIoObjectInputStream_(JavaxNamingLdapLdapName *self, JavaIoObjectInputStream *s) {
  [((JavaIoObjectInputStream *) nil_chk(s)) defaultReadObject];
  JreStrongAssign(&self->unparsed_, (NSString *) cast_chk([s readObject], [NSString class]));
  @try {
    JavaxNamingLdapLdapName_parse(self);
  }
  @catch (JavaxNamingInvalidNameException *e) {
    @throw create_JavaIoStreamCorruptedException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", self->unparsed_));
  }
}

void JavaxNamingLdapLdapName_parse(JavaxNamingLdapLdapName *self) {
  JreStrongAssign(&self->rdns_, [create_JavaxNamingLdapRfc2253Parser_initWithNSString_(self->unparsed_) parseDn]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingLdapLdapName)

@implementation JavaxNamingLdapLdapName_1

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(self, capture$0);
  return self;
}

- (jboolean)hasMoreElements {
  return [((id<JavaUtilIterator>) nil_chk(val$iter_)) hasNext];
}

- (NSString *)nextElement {
  return [((JavaxNamingLdapRdn *) nil_chk([((id<JavaUtilIterator>) nil_chk(val$iter_)) next])) description];
}

- (void)dealloc {
  RELEASE_(val$iter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilIterator:);
  methods[1].selector = @selector(hasMoreElements);
  methods[2].selector = @selector(nextElement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Iterator<Ljavax/naming/ldap/Rdn;>;", "LJavaxNamingLdapLdapName;", "getAll", "Ljava/lang/Object;Ljava/util/Enumeration<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _JavaxNamingLdapLdapName_1 = { "", "javax.naming.ldap", ptrTable, methods, fields, 7, 0x8018, 3, 1, 1, -1, 2, 3, -1 };
  return &_JavaxNamingLdapLdapName_1;
}

@end

void JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(JavaxNamingLdapLdapName_1 *self, id<JavaUtilIterator> capture$0) {
  JreStrongAssign(&self->val$iter_, capture$0);
  NSObject_init(self);
}

JavaxNamingLdapLdapName_1 *new_JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_NEW_IMPL(JavaxNamingLdapLdapName_1, initWithJavaUtilIterator_, capture$0)
}

JavaxNamingLdapLdapName_1 *create_JavaxNamingLdapLdapName_1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_CREATE_IMPL(JavaxNamingLdapLdapName_1, initWithJavaUtilIterator_, capture$0)
}
