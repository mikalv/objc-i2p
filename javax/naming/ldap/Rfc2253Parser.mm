//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/ldap/Rfc2253Parser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/ldap/Rdn.h"
#include "javax/naming/ldap/Rfc2253Parser.h"

@interface JavaxNamingLdapRfc2253Parser () {
 @public
  NSString *name_;
  IOSCharArray *chars_;
  jint len_;
  jint cur_;
}

- (JavaxNamingLdapRdn *)doParseWithJavaxNamingLdapRdn:(JavaxNamingLdapRdn *)rdn;

- (NSString *)parseAttrType;

- (NSString *)parseAttrValue;

- (NSString *)parseBinaryAttrValue;

- (NSString *)parseQuotedAttrValue;

- (NSString *)parseStringAttrValue;

- (void)consumeWhitespace;

- (jboolean)atTerminator;

+ (jboolean)isWhitespaceWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(JavaxNamingLdapRfc2253Parser, name_, NSString *)
J2OBJC_FIELD_SETTER(JavaxNamingLdapRfc2253Parser, chars_, IOSCharArray *)

__attribute__((unused)) static JavaxNamingLdapRdn *JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(JavaxNamingLdapRfc2253Parser *self, JavaxNamingLdapRdn *rdn);

__attribute__((unused)) static NSString *JavaxNamingLdapRfc2253Parser_parseAttrType(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static NSString *JavaxNamingLdapRfc2253Parser_parseAttrValue(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static NSString *JavaxNamingLdapRfc2253Parser_parseBinaryAttrValue(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static NSString *JavaxNamingLdapRfc2253Parser_parseQuotedAttrValue(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static NSString *JavaxNamingLdapRfc2253Parser_parseStringAttrValue(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static void JavaxNamingLdapRfc2253Parser_consumeWhitespace(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static jboolean JavaxNamingLdapRfc2253Parser_atTerminator(JavaxNamingLdapRfc2253Parser *self);

__attribute__((unused)) static jboolean JavaxNamingLdapRfc2253Parser_isWhitespaceWithChar_(jchar c);

@implementation JavaxNamingLdapRfc2253Parser

- (instancetype)initWithNSString:(NSString *)name {
  JavaxNamingLdapRfc2253Parser_initWithNSString_(self, name);
  return self;
}

- (id<JavaUtilList>)parseDn {
  cur_ = 0;
  JavaUtilArrayList *rdns = create_JavaUtilArrayList_initWithInt_(len_ / 3 + 10);
  if (len_ == 0) {
    return rdns;
  }
  [rdns addWithId:JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(self, create_JavaxNamingLdapRdn_init())];
  while (cur_ < len_) {
    if (IOSCharArray_Get(nil_chk(chars_), cur_) == ',' || IOSCharArray_Get(chars_, cur_) == ';') {
      ++cur_;
      [rdns addWithInt:0 withId:JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(self, create_JavaxNamingLdapRdn_init())];
    }
    else {
      @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", name_));
    }
  }
  return rdns;
}

- (JavaxNamingLdapRdn *)parseRdn {
  return [self parseRdnWithJavaxNamingLdapRdn:create_JavaxNamingLdapRdn_init()];
}

- (JavaxNamingLdapRdn *)parseRdnWithJavaxNamingLdapRdn:(JavaxNamingLdapRdn *)rdn {
  rdn = JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(self, rdn);
  if (cur_ < len_) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid RDN: ", name_));
  }
  return rdn;
}

- (JavaxNamingLdapRdn *)doParseWithJavaxNamingLdapRdn:(JavaxNamingLdapRdn *)rdn {
  return JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(self, rdn);
}

- (NSString *)parseAttrType {
  return JavaxNamingLdapRfc2253Parser_parseAttrType(self);
}

- (NSString *)parseAttrValue {
  return JavaxNamingLdapRfc2253Parser_parseAttrValue(self);
}

- (NSString *)parseBinaryAttrValue {
  return JavaxNamingLdapRfc2253Parser_parseBinaryAttrValue(self);
}

- (NSString *)parseQuotedAttrValue {
  return JavaxNamingLdapRfc2253Parser_parseQuotedAttrValue(self);
}

- (NSString *)parseStringAttrValue {
  return JavaxNamingLdapRfc2253Parser_parseStringAttrValue(self);
}

- (void)consumeWhitespace {
  JavaxNamingLdapRfc2253Parser_consumeWhitespace(self);
}

- (jboolean)atTerminator {
  return JavaxNamingLdapRfc2253Parser_atTerminator(self);
}

+ (jboolean)isWhitespaceWithChar:(jchar)c {
  return JavaxNamingLdapRfc2253Parser_isWhitespaceWithChar_(c);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(chars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, 1, 2, -1, -1 },
    { NULL, "LJavaxNamingLdapRdn;", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingLdapRdn;", 0x0, 3, 4, 1, -1, -1, -1 },
    { NULL, "LJavaxNamingLdapRdn;", 0x2, 5, 4, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(parseDn);
  methods[2].selector = @selector(parseRdn);
  methods[3].selector = @selector(parseRdnWithJavaxNamingLdapRdn:);
  methods[4].selector = @selector(doParseWithJavaxNamingLdapRdn:);
  methods[5].selector = @selector(parseAttrType);
  methods[6].selector = @selector(parseAttrValue);
  methods[7].selector = @selector(parseBinaryAttrValue);
  methods[8].selector = @selector(parseQuotedAttrValue);
  methods[9].selector = @selector(parseStringAttrValue);
  methods[10].selector = @selector(consumeWhitespace);
  methods[11].selector = @selector(atTerminator);
  methods[12].selector = @selector(isWhitespaceWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chars_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cur_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaxNamingInvalidNameException;", "()Ljava/util/List<Ljavax/naming/ldap/Rdn;>;", "parseRdn", "LJavaxNamingLdapRdn;", "doParse", "isWhitespace", "C" };
  static const J2ObjcClassInfo _JavaxNamingLdapRfc2253Parser = { "Rfc2253Parser", "javax.naming.ldap", ptrTable, methods, fields, 7, 0x10, 13, 4, -1, -1, -1, -1, -1 };
  return &_JavaxNamingLdapRfc2253Parser;
}

@end

void JavaxNamingLdapRfc2253Parser_initWithNSString_(JavaxNamingLdapRfc2253Parser *self, NSString *name) {
  NSObject_init(self);
  self->cur_ = 0;
  JreStrongAssign(&self->name_, name);
  self->len_ = [((NSString *) nil_chk(name)) java_length];
  JreStrongAssign(&self->chars_, [name java_toCharArray]);
}

JavaxNamingLdapRfc2253Parser *new_JavaxNamingLdapRfc2253Parser_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(JavaxNamingLdapRfc2253Parser, initWithNSString_, name)
}

JavaxNamingLdapRfc2253Parser *create_JavaxNamingLdapRfc2253Parser_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(JavaxNamingLdapRfc2253Parser, initWithNSString_, name)
}

JavaxNamingLdapRdn *JavaxNamingLdapRfc2253Parser_doParseWithJavaxNamingLdapRdn_(JavaxNamingLdapRfc2253Parser *self, JavaxNamingLdapRdn *rdn) {
  while (self->cur_ < self->len_) {
    JavaxNamingLdapRfc2253Parser_consumeWhitespace(self);
    NSString *attrType = JavaxNamingLdapRfc2253Parser_parseAttrType(self);
    JavaxNamingLdapRfc2253Parser_consumeWhitespace(self);
    if (self->cur_ >= self->len_ || IOSCharArray_Get(nil_chk(self->chars_), self->cur_) != '=') {
      @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", self->name_));
    }
    ++self->cur_;
    JavaxNamingLdapRfc2253Parser_consumeWhitespace(self);
    NSString *value = JavaxNamingLdapRfc2253Parser_parseAttrValue(self);
    JavaxNamingLdapRfc2253Parser_consumeWhitespace(self);
    [((JavaxNamingLdapRdn *) nil_chk(rdn)) putWithNSString:attrType withId:JavaxNamingLdapRdn_unescapeValueWithNSString_(value)];
    if (self->cur_ >= self->len_ || IOSCharArray_Get(nil_chk(self->chars_), self->cur_) != '+') {
      break;
    }
    ++self->cur_;
  }
  [((JavaxNamingLdapRdn *) nil_chk(rdn)) sort];
  return rdn;
}

NSString *JavaxNamingLdapRfc2253Parser_parseAttrType(JavaxNamingLdapRfc2253Parser *self) {
  jint beg = self->cur_;
  while (self->cur_ < self->len_) {
    jchar c = IOSCharArray_Get(nil_chk(self->chars_), self->cur_);
    if (JavaLangCharacter_isLetterOrDigitWithChar_(c) || c == '.' || c == '-' || c == ' ') {
      ++self->cur_;
    }
    else {
      break;
    }
  }
  while ((self->cur_ > beg) && (IOSCharArray_Get(nil_chk(self->chars_), self->cur_ - 1) == ' ')) {
    --self->cur_;
  }
  if (beg == self->cur_) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", self->name_));
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:beg length:self->cur_ - beg];
}

NSString *JavaxNamingLdapRfc2253Parser_parseAttrValue(JavaxNamingLdapRfc2253Parser *self) {
  if (self->cur_ < self->len_ && IOSCharArray_Get(nil_chk(self->chars_), self->cur_) == '#') {
    return JavaxNamingLdapRfc2253Parser_parseBinaryAttrValue(self);
  }
  else if (self->cur_ < self->len_ && IOSCharArray_Get(nil_chk(self->chars_), self->cur_) == '"') {
    return JavaxNamingLdapRfc2253Parser_parseQuotedAttrValue(self);
  }
  else {
    return JavaxNamingLdapRfc2253Parser_parseStringAttrValue(self);
  }
}

NSString *JavaxNamingLdapRfc2253Parser_parseBinaryAttrValue(JavaxNamingLdapRfc2253Parser *self) {
  jint beg = self->cur_;
  ++self->cur_;
  while ((self->cur_ < self->len_) && JavaLangCharacter_isLetterOrDigitWithChar_(IOSCharArray_Get(nil_chk(self->chars_), self->cur_))) {
    ++self->cur_;
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:beg length:self->cur_ - beg];
}

NSString *JavaxNamingLdapRfc2253Parser_parseQuotedAttrValue(JavaxNamingLdapRfc2253Parser *self) {
  jint beg = self->cur_;
  ++self->cur_;
  while ((self->cur_ < self->len_) && IOSCharArray_Get(nil_chk(self->chars_), self->cur_) != '"') {
    if (IOSCharArray_Get(nil_chk(self->chars_), self->cur_) == '\\') {
      ++self->cur_;
    }
    ++self->cur_;
  }
  if (self->cur_ >= self->len_) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", self->name_));
  }
  ++self->cur_;
  return [NSString java_stringWithCharacters:self->chars_ offset:beg length:self->cur_ - beg];
}

NSString *JavaxNamingLdapRfc2253Parser_parseStringAttrValue(JavaxNamingLdapRfc2253Parser *self) {
  jint beg = self->cur_;
  jint esc = -1;
  while ((self->cur_ < self->len_) && !JavaxNamingLdapRfc2253Parser_atTerminator(self)) {
    if (IOSCharArray_Get(nil_chk(self->chars_), self->cur_) == '\\') {
      ++self->cur_;
      esc = self->cur_;
    }
    ++self->cur_;
  }
  if (self->cur_ > self->len_) {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Invalid name: ", self->name_));
  }
  jint end;
  for (end = self->cur_; end > beg; end--) {
    if (!JavaxNamingLdapRfc2253Parser_isWhitespaceWithChar_(IOSCharArray_Get(nil_chk(self->chars_), end - 1)) || (esc == end - 1)) {
      break;
    }
  }
  return [NSString java_stringWithCharacters:self->chars_ offset:beg length:end - beg];
}

void JavaxNamingLdapRfc2253Parser_consumeWhitespace(JavaxNamingLdapRfc2253Parser *self) {
  while ((self->cur_ < self->len_) && JavaxNamingLdapRfc2253Parser_isWhitespaceWithChar_(IOSCharArray_Get(nil_chk(self->chars_), self->cur_))) {
    ++self->cur_;
  }
}

jboolean JavaxNamingLdapRfc2253Parser_atTerminator(JavaxNamingLdapRfc2253Parser *self) {
  return (self->cur_ < self->len_ && (IOSCharArray_Get(nil_chk(self->chars_), self->cur_) == ',' || IOSCharArray_Get(self->chars_, self->cur_) == ';' || IOSCharArray_Get(self->chars_, self->cur_) == '+'));
}

jboolean JavaxNamingLdapRfc2253Parser_isWhitespaceWithChar_(jchar c) {
  JavaxNamingLdapRfc2253Parser_initialize();
  return (c == ' ' || c == 0x000d);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingLdapRfc2253Parser)
