//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/ldap/ControlFactory.java
//

#include "J2ObjC_source.h"
#include "com/sun/naming/internal/FactoryEnumeration.h"
#include "com/sun/naming/internal/ResourceManager.h"
#include "java/util/Hashtable.h"
#include "javax/naming/Context.h"
#include "javax/naming/ldap/Control.h"
#include "javax/naming/ldap/ControlFactory.h"
#include "javax/naming/ldap/LdapContext.h"

@implementation JavaxNamingLdapControlFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingLdapControlFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaxNamingLdapControl>)getControlInstanceWithJavaxNamingLdapControl:(id<JavaxNamingLdapControl>)ctl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (id<JavaxNamingLdapControl>)getControlInstanceWithJavaxNamingLdapControl:(id<JavaxNamingLdapControl>)ctl
                                                    withJavaxNamingContext:(id<JavaxNamingContext>)ctx
                                                     withJavaUtilHashtable:(JavaUtilHashtable *)env {
  return JavaxNamingLdapControlFactory_getControlInstanceWithJavaxNamingLdapControl_withJavaxNamingContext_withJavaUtilHashtable_(ctl, ctx, env);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingLdapControl;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingLdapControl;", 0x9, 0, 3, 2, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getControlInstanceWithJavaxNamingLdapControl:);
  methods[2].selector = @selector(getControlInstanceWithJavaxNamingLdapControl:withJavaxNamingContext:withJavaUtilHashtable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getControlInstance", "LJavaxNamingLdapControl;", "LJavaxNamingNamingException;", "LJavaxNamingLdapControl;LJavaxNamingContext;LJavaUtilHashtable;", "(Ljavax/naming/ldap/Control;Ljavax/naming/Context;Ljava/util/Hashtable<**>;)Ljavax/naming/ldap/Control;" };
  static const J2ObjcClassInfo _JavaxNamingLdapControlFactory = { "ControlFactory", "javax.naming.ldap", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_JavaxNamingLdapControlFactory;
}

@end

void JavaxNamingLdapControlFactory_init(JavaxNamingLdapControlFactory *self) {
  NSObject_init(self);
}

id<JavaxNamingLdapControl> JavaxNamingLdapControlFactory_getControlInstanceWithJavaxNamingLdapControl_withJavaxNamingContext_withJavaUtilHashtable_(id<JavaxNamingLdapControl> ctl, id<JavaxNamingContext> ctx, JavaUtilHashtable *env) {
  JavaxNamingLdapControlFactory_initialize();
  ComSunNamingInternalFactoryEnumeration *factories = ComSunNamingInternalResourceManager_getFactoriesWithNSString_withJavaUtilHashtable_withJavaxNamingContext_(JavaxNamingLdapLdapContext_CONTROL_FACTORIES, env, ctx);
  if (factories == nil) {
    return ctl;
  }
  id<JavaxNamingLdapControl> answer = nil;
  JavaxNamingLdapControlFactory *factory;
  while (answer == nil && [factories hasMore]) {
    factory = (JavaxNamingLdapControlFactory *) cast_chk([factories next], [JavaxNamingLdapControlFactory class]);
    answer = [((JavaxNamingLdapControlFactory *) nil_chk(factory)) getControlInstanceWithJavaxNamingLdapControl:ctl];
  }
  return (answer != nil) ? answer : ctl;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingLdapControlFactory)
