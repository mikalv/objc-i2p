//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/LinkException.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "javax/naming/LinkException.h"
#include "javax/naming/Name.h"
#include "javax/naming/NamingException.h"

inline jlong JavaxNamingLinkException_get_serialVersionUID(void);
#define JavaxNamingLinkException_serialVersionUID -7967662604076777712LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingLinkException, serialVersionUID, jlong)

@implementation JavaxNamingLinkException

- (instancetype)initWithNSString:(NSString *)explanation {
  JavaxNamingLinkException_initWithNSString_(self, explanation);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingLinkException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaxNamingName>)getLinkResolvedName {
  return self->linkResolvedName_;
}

- (id<JavaxNamingName>)getLinkRemainingName {
  return self->linkRemainingName_;
}

- (id)getLinkResolvedObj {
  return self->linkResolvedObj_;
}

- (NSString *)getLinkExplanation {
  return self->linkExplanation_;
}

- (void)setLinkExplanationWithNSString:(NSString *)msg {
  JreStrongAssign(&self->linkExplanation_, msg);
}

- (void)setLinkResolvedNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) {
    JreStrongAssign(&self->linkResolvedName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  }
  else {
    JreStrongAssign(&self->linkResolvedName_, nil);
  }
}

- (void)setLinkRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) JreStrongAssign(&self->linkRemainingName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  else JreStrongAssign(&self->linkRemainingName_, nil);
}

- (void)setLinkResolvedObjWithId:(id)obj {
  JreStrongAssign(&self->linkResolvedObj_, obj);
}

- (NSString *)description {
  return JreStrcat("$$@C", [super description], @"; Link Remaining Name: '", self->linkRemainingName_, '\'');
}

- (NSString *)toStringWithBoolean:(jboolean)detail {
  if (!detail || self->linkResolvedObj_ == nil) return [self description];
  return JreStrcat("$$@", [self description], @"; Link Resolved Object: ", self->linkResolvedObj_);
}

- (void)dealloc {
  RELEASE_(linkResolvedName_);
  RELEASE_(linkResolvedObj_);
  RELEASE_(linkRemainingName_);
  RELEASE_(linkExplanation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getLinkResolvedName);
  methods[3].selector = @selector(getLinkRemainingName);
  methods[4].selector = @selector(getLinkResolvedObj);
  methods[5].selector = @selector(getLinkExplanation);
  methods[6].selector = @selector(setLinkExplanationWithNSString:);
  methods[7].selector = @selector(setLinkResolvedNameWithJavaxNamingName:);
  methods[8].selector = @selector(setLinkRemainingNameWithJavaxNamingName:);
  methods[9].selector = @selector(setLinkResolvedObjWithId:);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(toStringWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "linkResolvedName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "linkResolvedObj_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "linkRemainingName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "linkExplanation_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingLinkException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setLinkExplanation", "setLinkResolvedName", "LJavaxNamingName;", "setLinkRemainingName", "setLinkResolvedObj", "LNSObject;", "toString", "Z" };
  static const J2ObjcClassInfo _JavaxNamingLinkException = { "LinkException", "javax.naming", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_JavaxNamingLinkException;
}

@end

void JavaxNamingLinkException_initWithNSString_(JavaxNamingLinkException *self, NSString *explanation) {
  JavaxNamingNamingException_initWithNSString_(self, explanation);
  JreStrongAssign(&self->linkResolvedName_, nil);
  JreStrongAssign(&self->linkResolvedObj_, nil);
  JreStrongAssign(&self->linkRemainingName_, nil);
  JreStrongAssign(&self->linkExplanation_, nil);
}

JavaxNamingLinkException *new_JavaxNamingLinkException_initWithNSString_(NSString *explanation) {
  J2OBJC_NEW_IMPL(JavaxNamingLinkException, initWithNSString_, explanation)
}

JavaxNamingLinkException *create_JavaxNamingLinkException_initWithNSString_(NSString *explanation) {
  J2OBJC_CREATE_IMPL(JavaxNamingLinkException, initWithNSString_, explanation)
}

void JavaxNamingLinkException_init(JavaxNamingLinkException *self) {
  JavaxNamingNamingException_init(self);
  JreStrongAssign(&self->linkResolvedName_, nil);
  JreStrongAssign(&self->linkResolvedObj_, nil);
  JreStrongAssign(&self->linkRemainingName_, nil);
  JreStrongAssign(&self->linkExplanation_, nil);
}

JavaxNamingLinkException *new_JavaxNamingLinkException_init() {
  J2OBJC_NEW_IMPL(JavaxNamingLinkException, init)
}

JavaxNamingLinkException *create_JavaxNamingLinkException_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingLinkException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingLinkException)
