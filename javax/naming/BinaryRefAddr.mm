//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/BinaryRefAddr.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "javax/naming/BinaryRefAddr.h"
#include "javax/naming/RefAddr.h"

@interface JavaxNamingBinaryRefAddr () {
 @public
  IOSByteArray *buf_;
}

@end

J2OBJC_FIELD_SETTER(JavaxNamingBinaryRefAddr, buf_, IOSByteArray *)

inline jlong JavaxNamingBinaryRefAddr_get_serialVersionUID(void);
#define JavaxNamingBinaryRefAddr_serialVersionUID -3415254970957330361LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingBinaryRefAddr, serialVersionUID, jlong)

@implementation JavaxNamingBinaryRefAddr

- (instancetype)initWithNSString:(NSString *)addrType
                   withByteArray:(IOSByteArray *)src {
  JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_(self, addrType, src);
  return self;
}

- (instancetype)initWithNSString:(NSString *)addrType
                   withByteArray:(IOSByteArray *)src
                         withInt:(jint)offset
                         withInt:(jint)count {
  JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_withInt_withInt_(self, addrType, src, offset, count);
  return self;
}

- (id)getContent {
  return buf_;
}

- (jboolean)isEqual:(id)obj {
  if ((obj != nil) && ([obj isKindOfClass:[JavaxNamingBinaryRefAddr class]])) {
    JavaxNamingBinaryRefAddr *target = (JavaxNamingBinaryRefAddr *) cast_chk(obj, [JavaxNamingBinaryRefAddr class]);
    if ([((NSString *) nil_chk(addrType_)) compareToWithId:((JavaxNamingBinaryRefAddr *) nil_chk(target))->addrType_] == 0) {
      if (buf_ == nil && target->buf_ == nil) return true;
      if (buf_ == nil || target->buf_ == nil || buf_->size_ != target->buf_->size_) return false;
      for (jint i = 0; i < buf_->size_; i++) if (IOSByteArray_Get(buf_, i) != IOSByteArray_Get(target->buf_, i)) return false;
      return true;
    }
  }
  return false;
}

- (NSUInteger)hash {
  jint hash_ = ((jint) [((NSString *) nil_chk(addrType_)) hash]);
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    hash_ += IOSByteArray_Get(buf_, i);
  }
  return hash_;
}

- (NSString *)description {
  JavaLangStringBuffer *str = create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$C", @"Address Type: ", addrType_, 0x000a));
  [str appendWithNSString:@"AddressContents: "];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_ && i < 32; i++) {
    [str appendWithNSString:JreStrcat("$C", JavaLangInteger_toHexStringWithInt_(IOSByteArray_Get(buf_, i)), ' ')];
  }
  if (buf_->size_ >= 32) [str appendWithNSString:@" ...\n"];
  return ([str description]);
}

- (void)dealloc {
  RELEASE_(buf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withByteArray:);
  methods[1].selector = @selector(initWithNSString:withByteArray:withInt:withInt:);
  methods[2].selector = @selector(getContent);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingBinaryRefAddr_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B", "LNSString;[BII", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _JavaxNamingBinaryRefAddr = { "BinaryRefAddr", "javax.naming", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_JavaxNamingBinaryRefAddr;
}

@end

void JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_(JavaxNamingBinaryRefAddr *self, NSString *addrType, IOSByteArray *src) {
  JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_withInt_withInt_(self, addrType, src, 0, ((IOSByteArray *) nil_chk(src))->size_);
}

JavaxNamingBinaryRefAddr *new_JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_(NSString *addrType, IOSByteArray *src) {
  J2OBJC_NEW_IMPL(JavaxNamingBinaryRefAddr, initWithNSString_withByteArray_, addrType, src)
}

JavaxNamingBinaryRefAddr *create_JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_(NSString *addrType, IOSByteArray *src) {
  J2OBJC_CREATE_IMPL(JavaxNamingBinaryRefAddr, initWithNSString_withByteArray_, addrType, src)
}

void JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_withInt_withInt_(JavaxNamingBinaryRefAddr *self, NSString *addrType, IOSByteArray *src, jint offset, jint count) {
  JavaxNamingRefAddr_initWithNSString_(self, addrType);
  JreStrongAssign(&self->buf_, nil);
  JreStrongAssignAndConsume(&self->buf_, [IOSByteArray newArrayWithLength:count]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, offset, self->buf_, 0, count);
}

JavaxNamingBinaryRefAddr *new_JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_withInt_withInt_(NSString *addrType, IOSByteArray *src, jint offset, jint count) {
  J2OBJC_NEW_IMPL(JavaxNamingBinaryRefAddr, initWithNSString_withByteArray_withInt_withInt_, addrType, src, offset, count)
}

JavaxNamingBinaryRefAddr *create_JavaxNamingBinaryRefAddr_initWithNSString_withByteArray_withInt_withInt_(NSString *addrType, IOSByteArray *src, jint offset, jint count) {
  J2OBJC_CREATE_IMPL(JavaxNamingBinaryRefAddr, initWithNSString_withByteArray_withInt_withInt_, addrType, src, offset, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingBinaryRefAddr)
