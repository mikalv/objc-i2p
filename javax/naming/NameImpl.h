//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/NameImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingNameImpl")
#ifdef RESTRICT_JavaxNamingNameImpl
#define INCLUDE_ALL_JavaxNamingNameImpl 0
#else
#define INCLUDE_ALL_JavaxNamingNameImpl 1
#endif
#undef RESTRICT_JavaxNamingNameImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingNameImpl_) && (INCLUDE_ALL_JavaxNamingNameImpl || defined(INCLUDE_JavaxNamingNameImpl))
#define JavaxNamingNameImpl_

@class JavaUtilProperties;
@protocol JavaUtilEnumeration;

@interface JavaxNamingNameImpl : NSObject

#pragma mark Public

- (void)addWithInt:(jint)posn
      withNSString:(NSString *)comp;

- (void)addWithNSString:(NSString *)comp;

- (jboolean)addAllWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps;

- (jboolean)addAllWithInt:(jint)posn
  withJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps;

- (jint)compareToWithJavaxNamingNameImpl:(JavaxNamingNameImpl *)obj;

- (jboolean)endsWithWithInt:(jint)posn
    withJavaUtilEnumeration:(id<JavaUtilEnumeration>)suffix;

- (jboolean)isEqual:(id)obj;

- (NSString *)getWithInt:(jint)posn;

- (id<JavaUtilEnumeration>)getAll;

- (id<JavaUtilEnumeration>)getPrefixWithInt:(jint)posn;

- (id<JavaUtilEnumeration>)getSuffixWithInt:(jint)posn;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id)removeWithInt:(jint)posn;

- (jint)size;

- (jboolean)startsWithWithInt:(jint)posn
      withJavaUtilEnumeration:(id<JavaUtilEnumeration>)prefix;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilProperties:(JavaUtilProperties *)syntax;

- (instancetype __nonnull)initWithJavaUtilProperties:(JavaUtilProperties *)syntax
                             withJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps;

- (instancetype __nonnull)initWithJavaUtilProperties:(JavaUtilProperties *)syntax
                                        withNSString:(NSString *)n;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingNameImpl)

FOUNDATION_EXPORT void JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax);

FOUNDATION_EXPORT JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaUtilProperties *syntax) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_(JavaUtilProperties *syntax);

FOUNDATION_EXPORT void JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax, NSString *n);

FOUNDATION_EXPORT JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaUtilProperties *syntax, NSString *n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(JavaUtilProperties *syntax, NSString *n);

FOUNDATION_EXPORT void JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaxNamingNameImpl *self, JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps);

FOUNDATION_EXPORT JavaxNamingNameImpl *new_JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameImpl *create_JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(JavaUtilProperties *syntax, id<JavaUtilEnumeration> comps);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingNameImpl)

#endif

#if !defined (JavaxNamingNameImplEnumerator_) && (INCLUDE_ALL_JavaxNamingNameImpl || defined(INCLUDE_JavaxNamingNameImplEnumerator))
#define JavaxNamingNameImplEnumerator_

#define RESTRICT_JavaUtilEnumeration 1
#define INCLUDE_JavaUtilEnumeration 1
#include "java/util/Enumeration.h"

@class JavaUtilVector;

@interface JavaxNamingNameImplEnumerator : NSObject < JavaUtilEnumeration > {
 @public
  JavaUtilVector *vector_;
  jint count_;
  jint limit_;
}

#pragma mark Public

- (jboolean)hasMoreElements;

- (NSString *)nextElement;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)v
                                         withInt:(jint)start
                                         withInt:(jint)lim;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingNameImplEnumerator)

J2OBJC_FIELD_SETTER(JavaxNamingNameImplEnumerator, vector_, JavaUtilVector *)

FOUNDATION_EXPORT void JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaxNamingNameImplEnumerator *self, JavaUtilVector *v, jint start, jint lim);

FOUNDATION_EXPORT JavaxNamingNameImplEnumerator *new_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaUtilVector *v, jint start, jint lim) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameImplEnumerator *create_JavaxNamingNameImplEnumerator_initWithJavaUtilVector_withInt_withInt_(JavaUtilVector *v, jint start, jint lim);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingNameImplEnumerator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingNameImpl")
