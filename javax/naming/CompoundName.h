//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/CompoundName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingCompoundName")
#ifdef RESTRICT_JavaxNamingCompoundName
#define INCLUDE_ALL_JavaxNamingCompoundName 0
#else
#define INCLUDE_ALL_JavaxNamingCompoundName 1
#endif
#undef RESTRICT_JavaxNamingCompoundName

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingCompoundName_) && (INCLUDE_ALL_JavaxNamingCompoundName || defined(INCLUDE_JavaxNamingCompoundName))
#define JavaxNamingCompoundName_

#define RESTRICT_JavaxNamingName 1
#define INCLUDE_JavaxNamingName 1
#include "javax/naming/Name.h"

@class JavaUtilProperties;
@class JavaxNamingNameImpl;
@protocol JavaUtilEnumeration;

@interface JavaxNamingCompoundName : NSObject < JavaxNamingName > {
 @public
  JavaxNamingNameImpl *impl_;
  JavaUtilProperties *mySyntax_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)n
                    withJavaUtilProperties:(JavaUtilProperties *)syntax;

- (id<JavaxNamingName>)addWithInt:(jint)posn
                     withNSString:(NSString *)comp;

- (id<JavaxNamingName>)addWithNSString:(NSString *)comp;

- (id<JavaxNamingName>)addAllWithInt:(jint)posn
                 withJavaxNamingName:(id<JavaxNamingName>)n;

- (id<JavaxNamingName>)addAllWithJavaxNamingName:(id<JavaxNamingName>)suffix;

- (id)java_clone;

- (jint)compareToWithId:(id)obj;

- (jboolean)endsWithWithJavaxNamingName:(id<JavaxNamingName>)n;

- (jboolean)isEqual:(id)obj;

- (NSString *)getWithInt:(jint)posn;

- (id<JavaUtilEnumeration>)getAll;

- (id<JavaxNamingName>)getPrefixWithInt:(jint)posn;

- (id<JavaxNamingName>)getSuffixWithInt:(jint)posn;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id)removeWithInt:(jint)posn;

- (jint)size;

- (jboolean)startsWithWithJavaxNamingName:(id<JavaxNamingName>)n;

- (NSString *)description;

#pragma mark Protected

- (instancetype __nonnull)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps
                               withJavaUtilProperties:(JavaUtilProperties *)syntax;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingCompoundName)

J2OBJC_FIELD_SETTER(JavaxNamingCompoundName, impl_, JavaxNamingNameImpl *)
J2OBJC_FIELD_SETTER(JavaxNamingCompoundName, mySyntax_, JavaUtilProperties *)

FOUNDATION_EXPORT void JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(JavaxNamingCompoundName *self, id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax);

FOUNDATION_EXPORT JavaxNamingCompoundName *new_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCompoundName *create_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax);

FOUNDATION_EXPORT void JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(JavaxNamingCompoundName *self, NSString *n, JavaUtilProperties *syntax);

FOUNDATION_EXPORT JavaxNamingCompoundName *new_JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(NSString *n, JavaUtilProperties *syntax) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCompoundName *create_JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(NSString *n, JavaUtilProperties *syntax);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingCompoundName)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingCompoundName")
