//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/RefAddr.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "javax/naming/RefAddr.h"

inline jlong JavaxNamingRefAddr_get_serialVersionUID(void);
#define JavaxNamingRefAddr_serialVersionUID -1468165120479154358LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingRefAddr, serialVersionUID, jlong)

@implementation JavaxNamingRefAddr

- (instancetype)initWithNSString:(NSString *)addrType {
  JavaxNamingRefAddr_initWithNSString_(self, addrType);
  return self;
}

- (NSString *)getType {
  return addrType_;
}

- (id)getContent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)obj {
  if ((obj != nil) && ([obj isKindOfClass:[JavaxNamingRefAddr class]])) {
    JavaxNamingRefAddr *target = (JavaxNamingRefAddr *) cast_chk(obj, [JavaxNamingRefAddr class]);
    if ([((NSString *) nil_chk(addrType_)) compareToWithId:((JavaxNamingRefAddr *) nil_chk(target))->addrType_] == 0) {
      id thisobj = [self getContent];
      id thatobj = [target getContent];
      if (thisobj == thatobj) return true;
      if (thisobj != nil) return [thisobj isEqual:thatobj];
    }
  }
  return false;
}

- (NSUInteger)hash {
  return ([self getContent] == nil) ? ((jint) [((NSString *) nil_chk(addrType_)) hash]) : ((jint) [((NSString *) nil_chk(addrType_)) hash]) + ((jint) [nil_chk([self getContent]) hash]);
}

- (NSString *)description {
  JavaLangStringBuffer *str = create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$C", @"Type: ", addrType_, 0x000a));
  [str appendWithNSString:JreStrcat("$@C", @"Content: ", [self getContent], 0x000a)];
  return ([str description]);
}

- (void)dealloc {
  RELEASE_(addrType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getContent);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "addrType_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingRefAddr_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _JavaxNamingRefAddr = { "RefAddr", "javax.naming", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, -1, -1, -1, -1 };
  return &_JavaxNamingRefAddr;
}

@end

void JavaxNamingRefAddr_initWithNSString_(JavaxNamingRefAddr *self, NSString *addrType) {
  NSObject_init(self);
  JreStrongAssign(&self->addrType_, addrType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingRefAddr)
