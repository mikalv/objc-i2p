//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/NameClassPair.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingNameClassPair")
#ifdef RESTRICT_JavaxNamingNameClassPair
#define INCLUDE_ALL_JavaxNamingNameClassPair 0
#else
#define INCLUDE_ALL_JavaxNamingNameClassPair 1
#endif
#undef RESTRICT_JavaxNamingNameClassPair

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingNameClassPair_) && (INCLUDE_ALL_JavaxNamingNameClassPair || defined(INCLUDE_JavaxNamingNameClassPair))
#define JavaxNamingNameClassPair_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@interface JavaxNamingNameClassPair : NSObject < JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)className_;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)className_
                               withBoolean:(jboolean)isRelative;

- (NSString *)getClassName;

- (NSString *)getName;

- (NSString *)getNameInNamespace;

- (jboolean)isRelative;

- (void)setClassNameWithNSString:(NSString *)name;

- (void)setNameWithNSString:(NSString *)name;

- (void)setNameInNamespaceWithNSString:(NSString *)fullName;

- (void)setRelativeWithBoolean:(jboolean)r;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingNameClassPair)

FOUNDATION_EXPORT void JavaxNamingNameClassPair_initWithNSString_withNSString_(JavaxNamingNameClassPair *self, NSString *name, NSString *className_);

FOUNDATION_EXPORT JavaxNamingNameClassPair *new_JavaxNamingNameClassPair_initWithNSString_withNSString_(NSString *name, NSString *className_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameClassPair *create_JavaxNamingNameClassPair_initWithNSString_withNSString_(NSString *name, NSString *className_);

FOUNDATION_EXPORT void JavaxNamingNameClassPair_initWithNSString_withNSString_withBoolean_(JavaxNamingNameClassPair *self, NSString *name, NSString *className_, jboolean isRelative);

FOUNDATION_EXPORT JavaxNamingNameClassPair *new_JavaxNamingNameClassPair_initWithNSString_withNSString_withBoolean_(NSString *name, NSString *className_, jboolean isRelative) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingNameClassPair *create_JavaxNamingNameClassPair_initWithNSString_withNSString_withBoolean_(NSString *name, NSString *className_, jboolean isRelative);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingNameClassPair)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingNameClassPair")
