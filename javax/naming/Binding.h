//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/Binding.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingBinding")
#ifdef RESTRICT_JavaxNamingBinding
#define INCLUDE_ALL_JavaxNamingBinding 0
#else
#define INCLUDE_ALL_JavaxNamingBinding 1
#endif
#undef RESTRICT_JavaxNamingBinding

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingBinding_) && (INCLUDE_ALL_JavaxNamingBinding || defined(INCLUDE_JavaxNamingBinding))
#define JavaxNamingBinding_

#define RESTRICT_JavaxNamingNameClassPair 1
#define INCLUDE_JavaxNamingNameClassPair 1
#include "javax/naming/NameClassPair.h"

@interface JavaxNamingBinding : JavaxNamingNameClassPair

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                    withId:(id)obj;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                    withId:(id)obj
                               withBoolean:(jboolean)isRelative;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)className_
                                    withId:(id)obj;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)className_
                                    withId:(id)obj
                               withBoolean:(jboolean)isRelative;

- (NSString *)getClassName;

- (id)getObject;

- (void)setObjectWithId:(id)obj;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
                               withBoolean:(jboolean)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingBinding)

FOUNDATION_EXPORT void JavaxNamingBinding_initWithNSString_withId_(JavaxNamingBinding *self, NSString *name, id obj);

FOUNDATION_EXPORT JavaxNamingBinding *new_JavaxNamingBinding_initWithNSString_withId_(NSString *name, id obj) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingBinding *create_JavaxNamingBinding_initWithNSString_withId_(NSString *name, id obj);

FOUNDATION_EXPORT void JavaxNamingBinding_initWithNSString_withId_withBoolean_(JavaxNamingBinding *self, NSString *name, id obj, jboolean isRelative);

FOUNDATION_EXPORT JavaxNamingBinding *new_JavaxNamingBinding_initWithNSString_withId_withBoolean_(NSString *name, id obj, jboolean isRelative) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingBinding *create_JavaxNamingBinding_initWithNSString_withId_withBoolean_(NSString *name, id obj, jboolean isRelative);

FOUNDATION_EXPORT void JavaxNamingBinding_initWithNSString_withNSString_withId_(JavaxNamingBinding *self, NSString *name, NSString *className_, id obj);

FOUNDATION_EXPORT JavaxNamingBinding *new_JavaxNamingBinding_initWithNSString_withNSString_withId_(NSString *name, NSString *className_, id obj) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingBinding *create_JavaxNamingBinding_initWithNSString_withNSString_withId_(NSString *name, NSString *className_, id obj);

FOUNDATION_EXPORT void JavaxNamingBinding_initWithNSString_withNSString_withId_withBoolean_(JavaxNamingBinding *self, NSString *name, NSString *className_, id obj, jboolean isRelative);

FOUNDATION_EXPORT JavaxNamingBinding *new_JavaxNamingBinding_initWithNSString_withNSString_withId_withBoolean_(NSString *name, NSString *className_, id obj, jboolean isRelative) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingBinding *create_JavaxNamingBinding_initWithNSString_withNSString_withId_withBoolean_(NSString *name, NSString *className_, id obj, jboolean isRelative);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingBinding)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingBinding")
