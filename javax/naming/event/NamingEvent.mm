//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/event/NamingEvent.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/EventObject.h"
#include "javax/naming/Binding.h"
#include "javax/naming/event/EventContext.h"
#include "javax/naming/event/NamespaceChangeListener.h"
#include "javax/naming/event/NamingEvent.h"
#include "javax/naming/event/NamingListener.h"
#include "javax/naming/event/ObjectChangeListener.h"

inline jlong JavaxNamingEventNamingEvent_get_serialVersionUID(void);
#define JavaxNamingEventNamingEvent_serialVersionUID -7126752885365133499LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingEventNamingEvent, serialVersionUID, jlong)

@implementation JavaxNamingEventNamingEvent

+ (jint)OBJECT_ADDED {
  return JavaxNamingEventNamingEvent_OBJECT_ADDED;
}

+ (jint)OBJECT_REMOVED {
  return JavaxNamingEventNamingEvent_OBJECT_REMOVED;
}

+ (jint)OBJECT_RENAMED {
  return JavaxNamingEventNamingEvent_OBJECT_RENAMED;
}

+ (jint)OBJECT_CHANGED {
  return JavaxNamingEventNamingEvent_OBJECT_CHANGED;
}

- (instancetype)initWithJavaxNamingEventEventContext:(id<JavaxNamingEventEventContext>)source
                                             withInt:(jint)type
                              withJavaxNamingBinding:(JavaxNamingBinding *)newBd
                              withJavaxNamingBinding:(JavaxNamingBinding *)oldBd
                                              withId:(id)changeInfo {
  JavaxNamingEventNamingEvent_initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_(self, source, type, newBd, oldBd, changeInfo);
  return self;
}

- (jint)getType {
  return type_;
}

- (id<JavaxNamingEventEventContext>)getEventContext {
  return (id<JavaxNamingEventEventContext>) cast_check([self getSource], JavaxNamingEventEventContext_class_());
}

- (JavaxNamingBinding *)getOldBinding {
  return oldBinding_;
}

- (JavaxNamingBinding *)getNewBinding {
  return newBinding_;
}

- (id)getChangeInfo {
  return changeInfo_;
}

- (void)dispatchWithJavaxNamingEventNamingListener:(id<JavaxNamingEventNamingListener>)listener {
  switch (type_) {
    case JavaxNamingEventNamingEvent_OBJECT_ADDED:
    [((id<JavaxNamingEventNamespaceChangeListener>) nil_chk(((id<JavaxNamingEventNamespaceChangeListener>) cast_check(listener, JavaxNamingEventNamespaceChangeListener_class_())))) objectAddedWithJavaxNamingEventNamingEvent:self];
    break;
    case JavaxNamingEventNamingEvent_OBJECT_REMOVED:
    [((id<JavaxNamingEventNamespaceChangeListener>) nil_chk(((id<JavaxNamingEventNamespaceChangeListener>) cast_check(listener, JavaxNamingEventNamespaceChangeListener_class_())))) objectRemovedWithJavaxNamingEventNamingEvent:self];
    break;
    case JavaxNamingEventNamingEvent_OBJECT_RENAMED:
    [((id<JavaxNamingEventNamespaceChangeListener>) nil_chk(((id<JavaxNamingEventNamespaceChangeListener>) cast_check(listener, JavaxNamingEventNamespaceChangeListener_class_())))) objectRenamedWithJavaxNamingEventNamingEvent:self];
    break;
    case JavaxNamingEventNamingEvent_OBJECT_CHANGED:
    [((id<JavaxNamingEventObjectChangeListener>) nil_chk(((id<JavaxNamingEventObjectChangeListener>) cast_check(listener, JavaxNamingEventObjectChangeListener_class_())))) objectChangedWithJavaxNamingEventNamingEvent:self];
    break;
  }
}

- (void)dealloc {
  RELEASE_(changeInfo_);
  RELEASE_(oldBinding_);
  RELEASE_(newBinding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingEventEventContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingBinding;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingBinding;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingEventEventContext:withInt:withJavaxNamingBinding:withJavaxNamingBinding:withId:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getEventContext);
  methods[3].selector = @selector(getOldBinding);
  methods[4].selector = @selector(getNewBinding);
  methods[5].selector = @selector(getChangeInfo);
  methods[6].selector = @selector(dispatchWithJavaxNamingEventNamingListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OBJECT_ADDED", "I", .constantValue.asInt = JavaxNamingEventNamingEvent_OBJECT_ADDED, 0x19, -1, -1, -1, -1 },
    { "OBJECT_REMOVED", "I", .constantValue.asInt = JavaxNamingEventNamingEvent_OBJECT_REMOVED, 0x19, -1, -1, -1, -1 },
    { "OBJECT_RENAMED", "I", .constantValue.asInt = JavaxNamingEventNamingEvent_OBJECT_RENAMED, 0x19, -1, -1, -1, -1 },
    { "OBJECT_CHANGED", "I", .constantValue.asInt = JavaxNamingEventNamingEvent_OBJECT_CHANGED, 0x19, -1, -1, -1, -1 },
    { "changeInfo_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "oldBinding_", "LJavaxNamingBinding;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "newBinding_", "LJavaxNamingBinding;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingEventNamingEvent_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingEventEventContext;ILJavaxNamingBinding;LJavaxNamingBinding;LNSObject;", "dispatch", "LJavaxNamingEventNamingListener;" };
  static const J2ObjcClassInfo _JavaxNamingEventNamingEvent = { "NamingEvent", "javax.naming.event", ptrTable, methods, fields, 7, 0x1, 7, 9, -1, -1, -1, -1, -1 };
  return &_JavaxNamingEventNamingEvent;
}

@end

void JavaxNamingEventNamingEvent_initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_(JavaxNamingEventNamingEvent *self, id<JavaxNamingEventEventContext> source, jint type, JavaxNamingBinding *newBd, JavaxNamingBinding *oldBd, id changeInfo) {
  JavaUtilEventObject_initWithId_(self, source);
  self->type_ = type;
  JreStrongAssign(&self->oldBinding_, oldBd);
  JreStrongAssign(&self->newBinding_, newBd);
  JreStrongAssign(&self->changeInfo_, changeInfo);
}

JavaxNamingEventNamingEvent *new_JavaxNamingEventNamingEvent_initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_(id<JavaxNamingEventEventContext> source, jint type, JavaxNamingBinding *newBd, JavaxNamingBinding *oldBd, id changeInfo) {
  J2OBJC_NEW_IMPL(JavaxNamingEventNamingEvent, initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_, source, type, newBd, oldBd, changeInfo)
}

JavaxNamingEventNamingEvent *create_JavaxNamingEventNamingEvent_initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_(id<JavaxNamingEventEventContext> source, jint type, JavaxNamingBinding *newBd, JavaxNamingBinding *oldBd, id changeInfo) {
  J2OBJC_CREATE_IMPL(JavaxNamingEventNamingEvent, initWithJavaxNamingEventEventContext_withInt_withJavaxNamingBinding_withJavaxNamingBinding_withId_, source, type, newBd, oldBd, changeInfo)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingEventNamingEvent)
