//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/event/NamingExceptionEvent.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/EventObject.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/event/EventContext.h"
#include "javax/naming/event/NamingExceptionEvent.h"
#include "javax/naming/event/NamingListener.h"

@interface JavaxNamingEventNamingExceptionEvent () {
 @public
  JavaxNamingNamingException *exception_;
}

@end

J2OBJC_FIELD_SETTER(JavaxNamingEventNamingExceptionEvent, exception_, JavaxNamingNamingException *)

inline jlong JavaxNamingEventNamingExceptionEvent_get_serialVersionUID(void);
#define JavaxNamingEventNamingExceptionEvent_serialVersionUID -4877678086134736336LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingEventNamingExceptionEvent, serialVersionUID, jlong)

@implementation JavaxNamingEventNamingExceptionEvent

- (instancetype)initWithJavaxNamingEventEventContext:(id<JavaxNamingEventEventContext>)source
                      withJavaxNamingNamingException:(JavaxNamingNamingException *)exc {
  JavaxNamingEventNamingExceptionEvent_initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_(self, source, exc);
  return self;
}

- (JavaxNamingNamingException *)getException {
  return exception_;
}

- (id<JavaxNamingEventEventContext>)getEventContext {
  return (id<JavaxNamingEventEventContext>) cast_check([self getSource], JavaxNamingEventEventContext_class_());
}

- (void)dispatchWithJavaxNamingEventNamingListener:(id<JavaxNamingEventNamingListener>)listener {
  [((id<JavaxNamingEventNamingListener>) nil_chk(listener)) namingExceptionThrownWithJavaxNamingEventNamingExceptionEvent:self];
}

- (void)dealloc {
  RELEASE_(exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingNamingException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingEventEventContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingEventEventContext:withJavaxNamingNamingException:);
  methods[1].selector = @selector(getException);
  methods[2].selector = @selector(getEventContext);
  methods[3].selector = @selector(dispatchWithJavaxNamingEventNamingListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exception_", "LJavaxNamingNamingException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingEventNamingExceptionEvent_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingEventEventContext;LJavaxNamingNamingException;", "dispatch", "LJavaxNamingEventNamingListener;" };
  static const J2ObjcClassInfo _JavaxNamingEventNamingExceptionEvent = { "NamingExceptionEvent", "javax.naming.event", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_JavaxNamingEventNamingExceptionEvent;
}

@end

void JavaxNamingEventNamingExceptionEvent_initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_(JavaxNamingEventNamingExceptionEvent *self, id<JavaxNamingEventEventContext> source, JavaxNamingNamingException *exc) {
  JavaUtilEventObject_initWithId_(self, source);
  JreStrongAssign(&self->exception_, exc);
}

JavaxNamingEventNamingExceptionEvent *new_JavaxNamingEventNamingExceptionEvent_initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_(id<JavaxNamingEventEventContext> source, JavaxNamingNamingException *exc) {
  J2OBJC_NEW_IMPL(JavaxNamingEventNamingExceptionEvent, initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_, source, exc)
}

JavaxNamingEventNamingExceptionEvent *create_JavaxNamingEventNamingExceptionEvent_initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_(id<JavaxNamingEventEventContext> source, JavaxNamingNamingException *exc) {
  J2OBJC_CREATE_IMPL(JavaxNamingEventNamingExceptionEvent, initWithJavaxNamingEventEventContext_withJavaxNamingNamingException_, source, exc)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingEventNamingExceptionEvent)
