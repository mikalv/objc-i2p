//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/LinkRef.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "javax/naming/LinkRef.h"
#include "javax/naming/MalformedLinkException.h"
#include "javax/naming/Name.h"
#include "javax/naming/RefAddr.h"
#include "javax/naming/Reference.h"
#include "javax/naming/StringRefAddr.h"

inline jlong JavaxNamingLinkRef_get_serialVersionUID(void);
#define JavaxNamingLinkRef_serialVersionUID -5386290613498931298LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingLinkRef, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(JavaxNamingLinkRef)

NSString *JavaxNamingLinkRef_linkClassName;
NSString *JavaxNamingLinkRef_linkAddrType = @"LinkAddress";

@implementation JavaxNamingLinkRef

+ (NSString *)linkClassName {
  return JavaxNamingLinkRef_linkClassName;
}

+ (NSString *)linkAddrType {
  return JavaxNamingLinkRef_linkAddrType;
}

- (instancetype)initWithJavaxNamingName:(id<JavaxNamingName>)linkName {
  JavaxNamingLinkRef_initWithJavaxNamingName_(self, linkName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)linkName {
  JavaxNamingLinkRef_initWithNSString_(self, linkName);
  return self;
}

- (NSString *)getLinkName {
  if (className__ != nil && [className__ isEqual:JavaxNamingLinkRef_linkClassName]) {
    JavaxNamingRefAddr *addr = [self getWithNSString:JavaxNamingLinkRef_linkAddrType];
    if (addr != nil && [addr isKindOfClass:[JavaxNamingStringRefAddr class]]) {
      return (NSString *) cast_chk([((JavaxNamingStringRefAddr *) cast_chk(addr, [JavaxNamingStringRefAddr class])) getContent], [NSString class]);
    }
  }
  @throw create_JavaxNamingMalformedLinkException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingName:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(getLinkName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "linkClassName", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "linkAddrType", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingLinkRef_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingName;", "LNSString;", "LJavaxNamingNamingException;", &JavaxNamingLinkRef_linkClassName, &JavaxNamingLinkRef_linkAddrType };
  static const J2ObjcClassInfo _JavaxNamingLinkRef = { "LinkRef", "javax.naming", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingLinkRef;
}

+ (void)initialize {
  if (self == [JavaxNamingLinkRef class]) {
    JreStrongAssign(&JavaxNamingLinkRef_linkClassName, [JavaxNamingLinkRef_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxNamingLinkRef)
  }
}

@end

void JavaxNamingLinkRef_initWithJavaxNamingName_(JavaxNamingLinkRef *self, id<JavaxNamingName> linkName) {
  JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(self, JavaxNamingLinkRef_linkClassName, create_JavaxNamingStringRefAddr_initWithNSString_withNSString_(JavaxNamingLinkRef_linkAddrType, [((id<JavaxNamingName>) nil_chk(linkName)) description]));
}

JavaxNamingLinkRef *new_JavaxNamingLinkRef_initWithJavaxNamingName_(id<JavaxNamingName> linkName) {
  J2OBJC_NEW_IMPL(JavaxNamingLinkRef, initWithJavaxNamingName_, linkName)
}

JavaxNamingLinkRef *create_JavaxNamingLinkRef_initWithJavaxNamingName_(id<JavaxNamingName> linkName) {
  J2OBJC_CREATE_IMPL(JavaxNamingLinkRef, initWithJavaxNamingName_, linkName)
}

void JavaxNamingLinkRef_initWithNSString_(JavaxNamingLinkRef *self, NSString *linkName) {
  JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(self, JavaxNamingLinkRef_linkClassName, create_JavaxNamingStringRefAddr_initWithNSString_withNSString_(JavaxNamingLinkRef_linkAddrType, linkName));
}

JavaxNamingLinkRef *new_JavaxNamingLinkRef_initWithNSString_(NSString *linkName) {
  J2OBJC_NEW_IMPL(JavaxNamingLinkRef, initWithNSString_, linkName)
}

JavaxNamingLinkRef *create_JavaxNamingLinkRef_initWithNSString_(NSString *linkName) {
  J2OBJC_CREATE_IMPL(JavaxNamingLinkRef, initWithNSString_, linkName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingLinkRef)
