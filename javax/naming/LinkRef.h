//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/LinkRef.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingLinkRef")
#ifdef RESTRICT_JavaxNamingLinkRef
#define INCLUDE_ALL_JavaxNamingLinkRef 0
#else
#define INCLUDE_ALL_JavaxNamingLinkRef 1
#endif
#undef RESTRICT_JavaxNamingLinkRef

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingLinkRef_) && (INCLUDE_ALL_JavaxNamingLinkRef || defined(INCLUDE_JavaxNamingLinkRef))
#define JavaxNamingLinkRef_

#define RESTRICT_JavaxNamingReference 1
#define INCLUDE_JavaxNamingReference 1
#include "javax/naming/Reference.h"

@class JavaxNamingRefAddr;
@protocol JavaxNamingName;

@interface JavaxNamingLinkRef : JavaxNamingReference
@property (readonly, copy, class) NSString *linkClassName NS_SWIFT_NAME(linkClassName);
@property (readonly, copy, class) NSString *linkAddrType NS_SWIFT_NAME(linkAddrType);

+ (NSString *)linkClassName;

+ (NSString *)linkAddrType;

#pragma mark Public

- (instancetype __nonnull)initWithJavaxNamingName:(id<JavaxNamingName>)linkName;

- (instancetype __nonnull)initWithNSString:(NSString *)linkName;

- (NSString *)getLinkName;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                    withJavaxNamingRefAddr:(JavaxNamingRefAddr *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                    withJavaxNamingRefAddr:(JavaxNamingRefAddr *)arg1
                              withNSString:(NSString *)arg2
                              withNSString:(NSString *)arg3 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
                              withNSString:(NSString *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaxNamingLinkRef)

inline NSString *JavaxNamingLinkRef_get_linkClassName(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingLinkRef_linkClassName;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingLinkRef, linkClassName, NSString *)

inline NSString *JavaxNamingLinkRef_get_linkAddrType(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingLinkRef_linkAddrType;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingLinkRef, linkAddrType, NSString *)

FOUNDATION_EXPORT void JavaxNamingLinkRef_initWithJavaxNamingName_(JavaxNamingLinkRef *self, id<JavaxNamingName> linkName);

FOUNDATION_EXPORT JavaxNamingLinkRef *new_JavaxNamingLinkRef_initWithJavaxNamingName_(id<JavaxNamingName> linkName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingLinkRef *create_JavaxNamingLinkRef_initWithJavaxNamingName_(id<JavaxNamingName> linkName);

FOUNDATION_EXPORT void JavaxNamingLinkRef_initWithNSString_(JavaxNamingLinkRef *self, NSString *linkName);

FOUNDATION_EXPORT JavaxNamingLinkRef *new_JavaxNamingLinkRef_initWithNSString_(NSString *linkName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingLinkRef *create_JavaxNamingLinkRef_initWithNSString_(NSString *linkName);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingLinkRef)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingLinkRef")
