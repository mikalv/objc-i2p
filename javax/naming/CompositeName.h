//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/CompositeName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingCompositeName")
#ifdef RESTRICT_JavaxNamingCompositeName
#define INCLUDE_ALL_JavaxNamingCompositeName 0
#else
#define INCLUDE_ALL_JavaxNamingCompositeName 1
#endif
#undef RESTRICT_JavaxNamingCompositeName

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingCompositeName_) && (INCLUDE_ALL_JavaxNamingCompositeName || defined(INCLUDE_JavaxNamingCompositeName))
#define JavaxNamingCompositeName_

#define RESTRICT_JavaxNamingName 1
#define INCLUDE_JavaxNamingName 1
#include "javax/naming/Name.h"

@protocol JavaUtilEnumeration;

@interface JavaxNamingCompositeName : NSObject < JavaxNamingName >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)n;

- (id<JavaxNamingName>)addWithInt:(jint)posn
                     withNSString:(NSString *)comp;

- (id<JavaxNamingName>)addWithNSString:(NSString *)comp;

- (id<JavaxNamingName>)addAllWithInt:(jint)posn
                 withJavaxNamingName:(id<JavaxNamingName>)n;

- (id<JavaxNamingName>)addAllWithJavaxNamingName:(id<JavaxNamingName>)suffix;

- (id)java_clone;

- (jint)compareToWithId:(id)obj;

- (jboolean)endsWithWithJavaxNamingName:(id<JavaxNamingName>)n;

- (jboolean)isEqual:(id)obj;

- (NSString *)getWithInt:(jint)posn;

- (id<JavaUtilEnumeration>)getAll;

- (id<JavaxNamingName>)getPrefixWithInt:(jint)posn;

- (id<JavaxNamingName>)getSuffixWithInt:(jint)posn;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id)removeWithInt:(jint)posn;

- (jint)size;

- (jboolean)startsWithWithJavaxNamingName:(id<JavaxNamingName>)n;

- (NSString *)description;

#pragma mark Protected

- (instancetype __nonnull)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingCompositeName)

FOUNDATION_EXPORT void JavaxNamingCompositeName_initWithJavaUtilEnumeration_(JavaxNamingCompositeName *self, id<JavaUtilEnumeration> comps);

FOUNDATION_EXPORT JavaxNamingCompositeName *new_JavaxNamingCompositeName_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> comps) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCompositeName *create_JavaxNamingCompositeName_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> comps);

FOUNDATION_EXPORT void JavaxNamingCompositeName_initWithNSString_(JavaxNamingCompositeName *self, NSString *n);

FOUNDATION_EXPORT JavaxNamingCompositeName *new_JavaxNamingCompositeName_initWithNSString_(NSString *n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCompositeName *create_JavaxNamingCompositeName_initWithNSString_(NSString *n);

FOUNDATION_EXPORT void JavaxNamingCompositeName_init(JavaxNamingCompositeName *self);

FOUNDATION_EXPORT JavaxNamingCompositeName *new_JavaxNamingCompositeName_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingCompositeName *create_JavaxNamingCompositeName_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingCompositeName)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingCompositeName")
