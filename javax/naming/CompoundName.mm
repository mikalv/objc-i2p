//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/CompoundName.java
//

#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/StreamCorruptedException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Enumeration.h"
#include "java/util/Properties.h"
#include "javax/naming/CompoundName.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/Name.h"
#include "javax/naming/NameImpl.h"

@interface JavaxNamingCompoundName ()

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

@end

inline jlong JavaxNamingCompoundName_get_serialVersionUID(void);
#define JavaxNamingCompoundName_serialVersionUID 3513100557083972036LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingCompoundName, serialVersionUID, jlong)

__attribute__((unused)) static void JavaxNamingCompoundName_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingCompoundName *self, JavaIoObjectOutputStream *s);

__attribute__((unused)) static void JavaxNamingCompoundName_readObjectWithJavaIoObjectInputStream_(JavaxNamingCompoundName *self, JavaIoObjectInputStream *s);

@implementation JavaxNamingCompoundName

- (instancetype)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)comps
                     withJavaUtilProperties:(JavaUtilProperties *)syntax {
  JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(self, comps, syntax);
  return self;
}

- (instancetype)initWithNSString:(NSString *)n
          withJavaUtilProperties:(JavaUtilProperties *)syntax {
  JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(self, n, syntax);
  return self;
}

- (NSString *)description {
  return ([((JavaxNamingNameImpl *) nil_chk(impl_)) description]);
}

- (jboolean)isEqual:(id)obj {
  return (obj != nil && [obj isKindOfClass:[JavaxNamingCompoundName class]] && [((JavaxNamingNameImpl *) nil_chk(impl_)) isEqual:((JavaxNamingCompoundName *) cast_chk(obj, [JavaxNamingCompoundName class]))->impl_]);
}

- (NSUInteger)hash {
  return ((jint) [((JavaxNamingNameImpl *) nil_chk(impl_)) hash]);
}

- (id)java_clone {
  return (create_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_([self getAll], mySyntax_));
}

- (jint)compareToWithId:(id)obj {
  cast_chk(obj, [NSObject class]);
  if (!([obj isKindOfClass:[JavaxNamingCompoundName class]])) {
    @throw create_JavaLangClassCastException_initWithNSString_(@"Not a CompoundName");
  }
  return [((JavaxNamingNameImpl *) nil_chk(impl_)) compareToWithJavaxNamingNameImpl:((JavaxNamingCompoundName *) nil_chk(((JavaxNamingCompoundName *) cast_chk(obj, [JavaxNamingCompoundName class]))))->impl_];
}

- (jint)size {
  return ([((JavaxNamingNameImpl *) nil_chk(impl_)) size]);
}

- (jboolean)isEmpty {
  return ([((JavaxNamingNameImpl *) nil_chk(impl_)) isEmpty]);
}

- (id<JavaUtilEnumeration>)getAll {
  return ([((JavaxNamingNameImpl *) nil_chk(impl_)) getAll]);
}

- (NSString *)getWithInt:(jint)posn {
  return ([((JavaxNamingNameImpl *) nil_chk(impl_)) getWithInt:posn]);
}

- (id<JavaxNamingName>)getPrefixWithInt:(jint)posn {
  id<JavaUtilEnumeration> comps = [((JavaxNamingNameImpl *) nil_chk(impl_)) getPrefixWithInt:posn];
  return (create_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(comps, mySyntax_));
}

- (id<JavaxNamingName>)getSuffixWithInt:(jint)posn {
  id<JavaUtilEnumeration> comps = [((JavaxNamingNameImpl *) nil_chk(impl_)) getSuffixWithInt:posn];
  return (create_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(comps, mySyntax_));
}

- (jboolean)startsWithWithJavaxNamingName:(id<JavaxNamingName>)n {
  if ([n isKindOfClass:[JavaxNamingCompoundName class]]) {
    return ([((JavaxNamingNameImpl *) nil_chk(impl_)) startsWithWithInt:[((id<JavaxNamingName>) nil_chk(n)) size] withJavaUtilEnumeration:[n getAll]]);
  }
  else {
    return false;
  }
}

- (jboolean)endsWithWithJavaxNamingName:(id<JavaxNamingName>)n {
  if ([n isKindOfClass:[JavaxNamingCompoundName class]]) {
    return ([((JavaxNamingNameImpl *) nil_chk(impl_)) endsWithWithInt:[((id<JavaxNamingName>) nil_chk(n)) size] withJavaUtilEnumeration:[n getAll]]);
  }
  else {
    return false;
  }
}

- (id<JavaxNamingName>)addAllWithJavaxNamingName:(id<JavaxNamingName>)suffix {
  if ([suffix isKindOfClass:[JavaxNamingCompoundName class]]) {
    [((JavaxNamingNameImpl *) nil_chk(impl_)) addAllWithJavaUtilEnumeration:[((id<JavaxNamingName>) nil_chk(suffix)) getAll]];
    return self;
  }
  else {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Not a compound name: ", [((id<JavaxNamingName>) nil_chk(suffix)) description]));
  }
}

- (id<JavaxNamingName>)addAllWithInt:(jint)posn
                 withJavaxNamingName:(id<JavaxNamingName>)n {
  if ([n isKindOfClass:[JavaxNamingCompoundName class]]) {
    [((JavaxNamingNameImpl *) nil_chk(impl_)) addAllWithInt:posn withJavaUtilEnumeration:[((id<JavaxNamingName>) nil_chk(n)) getAll]];
    return self;
  }
  else {
    @throw create_JavaxNamingInvalidNameException_initWithNSString_(JreStrcat("$$", @"Not a compound name: ", [((id<JavaxNamingName>) nil_chk(n)) description]));
  }
}

- (id<JavaxNamingName>)addWithNSString:(NSString *)comp {
  [((JavaxNamingNameImpl *) nil_chk(impl_)) addWithNSString:comp];
  return self;
}

- (id<JavaxNamingName>)addWithInt:(jint)posn
                     withNSString:(NSString *)comp {
  [((JavaxNamingNameImpl *) nil_chk(impl_)) addWithInt:posn withNSString:comp];
  return self;
}

- (id)removeWithInt:(jint)posn {
  return [((JavaxNamingNameImpl *) nil_chk(impl_)) removeWithInt:posn];
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s {
  JavaxNamingCompoundName_writeObjectWithJavaIoObjectOutputStream_(self, s);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  JavaxNamingCompoundName_readObjectWithJavaIoObjectInputStream_(self, s);
}

- (id)clone {
  return [self java_clone];
}

- (void)dealloc {
  RELEASE_(impl_);
  RELEASE_(mySyntax_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 18, 16, 3, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 18, 19, 3, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 20, 21, 3, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 20, 22, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 12, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, 29, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilEnumeration:withJavaUtilProperties:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilProperties:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(compareToWithId:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(getAll);
  methods[10].selector = @selector(getWithInt:);
  methods[11].selector = @selector(getPrefixWithInt:);
  methods[12].selector = @selector(getSuffixWithInt:);
  methods[13].selector = @selector(startsWithWithJavaxNamingName:);
  methods[14].selector = @selector(endsWithWithJavaxNamingName:);
  methods[15].selector = @selector(addAllWithJavaxNamingName:);
  methods[16].selector = @selector(addAllWithInt:withJavaxNamingName:);
  methods[17].selector = @selector(addWithNSString:);
  methods[18].selector = @selector(addWithInt:withNSString:);
  methods[19].selector = @selector(removeWithInt:);
  methods[20].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[21].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "impl_", "LJavaxNamingNameImpl;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "mySyntax_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingCompoundName_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilEnumeration;LJavaUtilProperties;", "(Ljava/util/Enumeration<Ljava/lang/String;>;Ljava/util/Properties;)V", "LNSString;LJavaUtilProperties;", "LJavaxNamingInvalidNameException;", "toString", "equals", "LNSObject;", "hashCode", "clone", "compareTo", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "get", "I", "getPrefix", "getSuffix", "startsWith", "LJavaxNamingName;", "endsWith", "addAll", "ILJavaxNamingName;", "add", "LNSString;", "ILNSString;", "remove", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;" };
  static const J2ObjcClassInfo _JavaxNamingCompoundName = { "CompoundName", "javax.naming", ptrTable, methods, fields, 7, 0x1, 22, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingCompoundName;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(JavaxNamingCompoundName *self, id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax) {
  NSObject_init(self);
  if (syntax == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JreStrongAssign(&self->mySyntax_, syntax);
  JreStrongAssignAndConsume(&self->impl_, new_JavaxNamingNameImpl_initWithJavaUtilProperties_withJavaUtilEnumeration_(syntax, comps));
}

JavaxNamingCompoundName *new_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax) {
  J2OBJC_NEW_IMPL(JavaxNamingCompoundName, initWithJavaUtilEnumeration_withJavaUtilProperties_, comps, syntax)
}

JavaxNamingCompoundName *create_JavaxNamingCompoundName_initWithJavaUtilEnumeration_withJavaUtilProperties_(id<JavaUtilEnumeration> comps, JavaUtilProperties *syntax) {
  J2OBJC_CREATE_IMPL(JavaxNamingCompoundName, initWithJavaUtilEnumeration_withJavaUtilProperties_, comps, syntax)
}

void JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(JavaxNamingCompoundName *self, NSString *n, JavaUtilProperties *syntax) {
  NSObject_init(self);
  if (syntax == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JreStrongAssign(&self->mySyntax_, syntax);
  JreStrongAssignAndConsume(&self->impl_, new_JavaxNamingNameImpl_initWithJavaUtilProperties_withNSString_(syntax, n));
}

JavaxNamingCompoundName *new_JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(NSString *n, JavaUtilProperties *syntax) {
  J2OBJC_NEW_IMPL(JavaxNamingCompoundName, initWithNSString_withJavaUtilProperties_, n, syntax)
}

JavaxNamingCompoundName *create_JavaxNamingCompoundName_initWithNSString_withJavaUtilProperties_(NSString *n, JavaUtilProperties *syntax) {
  J2OBJC_CREATE_IMPL(JavaxNamingCompoundName, initWithNSString_withJavaUtilProperties_, n, syntax)
}

void JavaxNamingCompoundName_writeObjectWithJavaIoObjectOutputStream_(JavaxNamingCompoundName *self, JavaIoObjectOutputStream *s) {
  [((JavaIoObjectOutputStream *) nil_chk(s)) writeObjectWithId:self->mySyntax_];
  [s writeIntWithInt:[self size]];
  id<JavaUtilEnumeration> comps = [self getAll];
  while ([((id<JavaUtilEnumeration>) nil_chk(comps)) hasMoreElements]) {
    [s writeObjectWithId:[comps nextElement]];
  }
}

void JavaxNamingCompoundName_readObjectWithJavaIoObjectInputStream_(JavaxNamingCompoundName *self, JavaIoObjectInputStream *s) {
  JreStrongAssign(&self->mySyntax_, (JavaUtilProperties *) cast_chk([((JavaIoObjectInputStream *) nil_chk(s)) readObject], [JavaUtilProperties class]));
  JreStrongAssignAndConsume(&self->impl_, new_JavaxNamingNameImpl_initWithJavaUtilProperties_(self->mySyntax_));
  jint n = [s readInt];
  @try {
    while (--n >= 0) {
      [self addWithNSString:(NSString *) cast_chk([s readObject], [NSString class])];
    }
  }
  @catch (JavaxNamingInvalidNameException *e) {
    @throw (create_JavaIoStreamCorruptedException_initWithNSString_(@"Invalid name"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingCompoundName)
