//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/Reference.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Vector.h"
#include "javax/naming/RefAddr.h"
#include "javax/naming/Reference.h"

inline jlong JavaxNamingReference_get_serialVersionUID(void);
#define JavaxNamingReference_serialVersionUID -1673475790065791735LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingReference, serialVersionUID, jlong)

@implementation JavaxNamingReference

- (instancetype)initWithNSString:(NSString *)className_ {
  JavaxNamingReference_initWithNSString_(self, className_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)className_
          withJavaxNamingRefAddr:(JavaxNamingRefAddr *)addr {
  JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(self, className_, addr);
  return self;
}

- (instancetype)initWithNSString:(NSString *)className_
                    withNSString:(NSString *)factory
                    withNSString:(NSString *)factoryLocation {
  JavaxNamingReference_initWithNSString_withNSString_withNSString_(self, className_, factory, factoryLocation);
  return self;
}

- (instancetype)initWithNSString:(NSString *)className_
          withJavaxNamingRefAddr:(JavaxNamingRefAddr *)addr
                    withNSString:(NSString *)factory
                    withNSString:(NSString *)factoryLocation {
  JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_(self, className_, addr, factory, factoryLocation);
  return self;
}

- (NSString *)getClassName {
  return className__;
}

- (NSString *)getFactoryClassName {
  return classFactory_;
}

- (NSString *)getFactoryClassLocation {
  return classFactoryLocation_;
}

- (JavaxNamingRefAddr *)getWithNSString:(NSString *)addrType {
  jint len = [((JavaUtilVector *) nil_chk(addrs_)) size];
  JavaxNamingRefAddr *addr;
  for (jint i = 0; i < len; i++) {
    addr = [((JavaUtilVector *) nil_chk(addrs_)) elementAtWithInt:i];
    if ([((NSString *) nil_chk([((JavaxNamingRefAddr *) nil_chk(addr)) getType])) compareToWithId:addrType] == 0) return addr;
  }
  return nil;
}

- (JavaxNamingRefAddr *)getWithInt:(jint)posn {
  return [((JavaUtilVector *) nil_chk(addrs_)) elementAtWithInt:posn];
}

- (id<JavaUtilEnumeration>)getAll {
  return [((JavaUtilVector *) nil_chk(addrs_)) elements];
}

- (jint)size {
  return [((JavaUtilVector *) nil_chk(addrs_)) size];
}

- (void)addWithJavaxNamingRefAddr:(JavaxNamingRefAddr *)addr {
  [((JavaUtilVector *) nil_chk(addrs_)) addElementWithId:addr];
}

- (void)addWithInt:(jint)posn
withJavaxNamingRefAddr:(JavaxNamingRefAddr *)addr {
  [((JavaUtilVector *) nil_chk(addrs_)) insertElementAtWithId:addr withInt:posn];
}

- (id)removeWithInt:(jint)posn {
  id r = [((JavaUtilVector *) nil_chk(addrs_)) elementAtWithInt:posn];
  [((JavaUtilVector *) nil_chk(addrs_)) removeElementAtWithInt:posn];
  return r;
}

- (void)clear {
  [((JavaUtilVector *) nil_chk(addrs_)) setSizeWithInt:0];
}

- (jboolean)isEqual:(id)obj {
  if ((obj != nil) && ([obj isKindOfClass:[JavaxNamingReference class]])) {
    JavaxNamingReference *target = (JavaxNamingReference *) cast_chk(obj, [JavaxNamingReference class]);
    if ([((NSString *) nil_chk(((JavaxNamingReference *) nil_chk(target))->className__)) isEqual:self->className__] && [target size] == [self size]) {
      id<JavaUtilEnumeration> mycomps = [self getAll];
      id<JavaUtilEnumeration> comps = [target getAll];
      while ([((id<JavaUtilEnumeration>) nil_chk(mycomps)) hasMoreElements]) if (!([((JavaxNamingRefAddr *) nil_chk([mycomps nextElement])) isEqual:[((id<JavaUtilEnumeration>) nil_chk(comps)) nextElement]])) return false;
      return true;
    }
  }
  return false;
}

- (NSUInteger)hash {
  jint hash_ = ((jint) [((NSString *) nil_chk(className__)) hash]);
  for (id<JavaUtilEnumeration> e = [self getAll]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) hash_ += ((jint) [((JavaxNamingRefAddr *) nil_chk([e nextElement])) hash]);
  return hash_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = create_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$C", @"Reference Class Name: ", className__, 0x000a));
  jint len = [((JavaUtilVector *) nil_chk(addrs_)) size];
  for (jint i = 0; i < len; i++) [buf appendWithNSString:[((JavaxNamingRefAddr *) nil_chk([self getWithInt:i])) description]];
  return [buf description];
}

- (id)java_clone {
  JavaxNamingReference *r = create_JavaxNamingReference_initWithNSString_withNSString_withNSString_(className__, classFactory_, classFactoryLocation_);
  id<JavaUtilEnumeration> a = [self getAll];
  JreStrongAssignAndConsume(&r->addrs_, new_JavaUtilVector_init());
  while ([((id<JavaUtilEnumeration>) nil_chk(a)) hasMoreElements]) [((JavaUtilVector *) nil_chk(r->addrs_)) addElementWithId:[a nextElement]];
  return r;
}

- (void)dealloc {
  RELEASE_(className__);
  RELEASE_(addrs_);
  RELEASE_(classFactory_);
  RELEASE_(classFactoryLocation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingRefAddr;", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingRefAddr;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaxNamingRefAddr:);
  methods[2].selector = @selector(initWithNSString:withNSString:withNSString:);
  methods[3].selector = @selector(initWithNSString:withJavaxNamingRefAddr:withNSString:withNSString:);
  methods[4].selector = @selector(getClassName);
  methods[5].selector = @selector(getFactoryClassName);
  methods[6].selector = @selector(getFactoryClassLocation);
  methods[7].selector = @selector(getWithNSString:);
  methods[8].selector = @selector(getWithInt:);
  methods[9].selector = @selector(getAll);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(addWithJavaxNamingRefAddr:);
  methods[12].selector = @selector(addWithInt:withJavaxNamingRefAddr:);
  methods[13].selector = @selector(removeWithInt:);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(isEqual:);
  methods[16].selector = @selector(hash);
  methods[17].selector = @selector(description);
  methods[18].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "className__", "LNSString;", .constantValue.asLong = 0, 0x4, 16, -1, -1, -1 },
    { "addrs_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, 17, -1 },
    { "classFactory_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "classFactoryLocation_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingReference_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaxNamingRefAddr;", "LNSString;LNSString;LNSString;", "LNSString;LJavaxNamingRefAddr;LNSString;LNSString;", "get", "I", "()Ljava/util/Enumeration<Ljavax/naming/RefAddr;>;", "add", "LJavaxNamingRefAddr;", "ILJavaxNamingRefAddr;", "remove", "equals", "LNSObject;", "hashCode", "toString", "clone", "className", "Ljava/util/Vector<Ljavax/naming/RefAddr;>;" };
  static const J2ObjcClassInfo _JavaxNamingReference = { "Reference", "javax.naming", ptrTable, methods, fields, 7, 0x1, 19, 5, -1, -1, -1, -1, -1 };
  return &_JavaxNamingReference;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void JavaxNamingReference_initWithNSString_(JavaxNamingReference *self, NSString *className_) {
  NSObject_init(self);
  JreStrongAssign(&self->addrs_, nil);
  JreStrongAssign(&self->classFactory_, nil);
  JreStrongAssign(&self->classFactoryLocation_, nil);
  JreStrongAssign(&self->className__, className_);
  JreStrongAssignAndConsume(&self->addrs_, new_JavaUtilVector_init());
}

JavaxNamingReference *new_JavaxNamingReference_initWithNSString_(NSString *className_) {
  J2OBJC_NEW_IMPL(JavaxNamingReference, initWithNSString_, className_)
}

JavaxNamingReference *create_JavaxNamingReference_initWithNSString_(NSString *className_) {
  J2OBJC_CREATE_IMPL(JavaxNamingReference, initWithNSString_, className_)
}

void JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(JavaxNamingReference *self, NSString *className_, JavaxNamingRefAddr *addr) {
  NSObject_init(self);
  JreStrongAssign(&self->addrs_, nil);
  JreStrongAssign(&self->classFactory_, nil);
  JreStrongAssign(&self->classFactoryLocation_, nil);
  JreStrongAssign(&self->className__, className_);
  JreStrongAssignAndConsume(&self->addrs_, new_JavaUtilVector_init());
  [self->addrs_ addElementWithId:addr];
}

JavaxNamingReference *new_JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(NSString *className_, JavaxNamingRefAddr *addr) {
  J2OBJC_NEW_IMPL(JavaxNamingReference, initWithNSString_withJavaxNamingRefAddr_, className_, addr)
}

JavaxNamingReference *create_JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(NSString *className_, JavaxNamingRefAddr *addr) {
  J2OBJC_CREATE_IMPL(JavaxNamingReference, initWithNSString_withJavaxNamingRefAddr_, className_, addr)
}

void JavaxNamingReference_initWithNSString_withNSString_withNSString_(JavaxNamingReference *self, NSString *className_, NSString *factory, NSString *factoryLocation) {
  JavaxNamingReference_initWithNSString_(self, className_);
  JreStrongAssign(&self->classFactory_, factory);
  JreStrongAssign(&self->classFactoryLocation_, factoryLocation);
}

JavaxNamingReference *new_JavaxNamingReference_initWithNSString_withNSString_withNSString_(NSString *className_, NSString *factory, NSString *factoryLocation) {
  J2OBJC_NEW_IMPL(JavaxNamingReference, initWithNSString_withNSString_withNSString_, className_, factory, factoryLocation)
}

JavaxNamingReference *create_JavaxNamingReference_initWithNSString_withNSString_withNSString_(NSString *className_, NSString *factory, NSString *factoryLocation) {
  J2OBJC_CREATE_IMPL(JavaxNamingReference, initWithNSString_withNSString_withNSString_, className_, factory, factoryLocation)
}

void JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_(JavaxNamingReference *self, NSString *className_, JavaxNamingRefAddr *addr, NSString *factory, NSString *factoryLocation) {
  JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_(self, className_, addr);
  JreStrongAssign(&self->classFactory_, factory);
  JreStrongAssign(&self->classFactoryLocation_, factoryLocation);
}

JavaxNamingReference *new_JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_(NSString *className_, JavaxNamingRefAddr *addr, NSString *factory, NSString *factoryLocation) {
  J2OBJC_NEW_IMPL(JavaxNamingReference, initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_, className_, addr, factory, factoryLocation)
}

JavaxNamingReference *create_JavaxNamingReference_initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_(NSString *className_, JavaxNamingRefAddr *addr, NSString *factory, NSString *factoryLocation) {
  J2OBJC_CREATE_IMPL(JavaxNamingReference, initWithNSString_withJavaxNamingRefAddr_withNSString_withNSString_, className_, addr, factory, factoryLocation)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingReference)
