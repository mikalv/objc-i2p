//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/ContinuationContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingSpiContinuationContext")
#ifdef RESTRICT_JavaxNamingSpiContinuationContext
#define INCLUDE_ALL_JavaxNamingSpiContinuationContext 0
#else
#define INCLUDE_ALL_JavaxNamingSpiContinuationContext 1
#endif
#undef RESTRICT_JavaxNamingSpiContinuationContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingSpiContinuationContext_) && (INCLUDE_ALL_JavaxNamingSpiContinuationContext || defined(INCLUDE_JavaxNamingSpiContinuationContext))
#define JavaxNamingSpiContinuationContext_

#define RESTRICT_JavaxNamingContext 1
#define INCLUDE_JavaxNamingContext 1
#include "javax/naming/Context.h"

#define RESTRICT_JavaxNamingSpiResolver 1
#define INCLUDE_JavaxNamingSpiResolver 1
#include "javax/naming/spi/Resolver.h"

@class IOSClass;
@class JavaUtilHashtable;
@class JavaxNamingCannotProceedException;
@class JavaxNamingSpiResolveResult;
@protocol JavaxNamingName;
@protocol JavaxNamingNameParser;
@protocol JavaxNamingNamingEnumeration;

@interface JavaxNamingSpiContinuationContext : NSObject < JavaxNamingContext, JavaxNamingSpiResolver > {
 @public
  JavaxNamingCannotProceedException *cpe_;
  JavaUtilHashtable *env_;
  id<JavaxNamingContext> contCtx_;
}

#pragma mark Public

- (id)addToEnvironmentWithNSString:(NSString *)propName
                            withId:(id)value;

- (void)bindWithJavaxNamingName:(id<JavaxNamingName>)name
                         withId:(id)newObj;

- (void)bindWithNSString:(NSString *)name
                  withId:(id)newObj;

- (void)close;

- (id<JavaxNamingName>)composeNameWithJavaxNamingName:(id<JavaxNamingName>)name
                                  withJavaxNamingName:(id<JavaxNamingName>)prefix;

- (NSString *)composeNameWithNSString:(NSString *)name
                         withNSString:(NSString *)prefix;

- (id<JavaxNamingContext>)createSubcontextWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingContext>)createSubcontextWithNSString:(NSString *)name;

- (void)destroySubcontextWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)destroySubcontextWithNSString:(NSString *)name;

- (JavaUtilHashtable *)getEnvironment;

- (NSString *)getNameInNamespace;

- (id<JavaxNamingNameParser>)getNameParserWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNameParser>)getNameParserWithNSString:(NSString *)name;

- (id<JavaxNamingNamingEnumeration>)listWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNamingEnumeration>)listWithNSString:(NSString *)name;

- (id<JavaxNamingNamingEnumeration>)listBindingsWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingNamingEnumeration>)listBindingsWithNSString:(NSString *)name;

- (id)lookupWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id)lookupWithNSString:(NSString *)name;

- (id)lookupLinkWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id)lookupLinkWithNSString:(NSString *)name;

- (void)rebindWithJavaxNamingName:(id<JavaxNamingName>)name
                           withId:(id)newObj;

- (void)rebindWithNSString:(NSString *)name
                    withId:(id)newObj;

- (id)removeFromEnvironmentWithNSString:(NSString *)propName;

- (void)renameWithJavaxNamingName:(id<JavaxNamingName>)name
              withJavaxNamingName:(id<JavaxNamingName>)newName;

- (void)renameWithNSString:(NSString *)name
              withNSString:(NSString *)newName;

- (JavaxNamingSpiResolveResult *)resolveToClassWithJavaxNamingName:(id<JavaxNamingName>)name
                                                      withIOSClass:(IOSClass *)contextType;

- (JavaxNamingSpiResolveResult *)resolveToClassWithNSString:(NSString *)name
                                               withIOSClass:(IOSClass *)contextType;

- (void)unbindWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)unbindWithNSString:(NSString *)name;

#pragma mark Protected

- (instancetype __nonnull)initWithJavaxNamingCannotProceedException:(JavaxNamingCannotProceedException *)cpe
                                              withJavaUtilHashtable:(JavaUtilHashtable *)env;

- (id<JavaxNamingContext>)getTargetContext;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingSpiContinuationContext)

J2OBJC_FIELD_SETTER(JavaxNamingSpiContinuationContext, cpe_, JavaxNamingCannotProceedException *)
J2OBJC_FIELD_SETTER(JavaxNamingSpiContinuationContext, env_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(JavaxNamingSpiContinuationContext, contCtx_, id<JavaxNamingContext>)

FOUNDATION_EXPORT void JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingSpiContinuationContext *self, JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env);

FOUNDATION_EXPORT JavaxNamingSpiContinuationContext *new_JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingSpiContinuationContext *create_JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingSpiContinuationContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingSpiContinuationContext")
