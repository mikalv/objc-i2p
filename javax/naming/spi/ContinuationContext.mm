//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/ContinuationContext.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/Hashtable.h"
#include "javax/naming/CannotProceedException.h"
#include "javax/naming/Context.h"
#include "javax/naming/Name.h"
#include "javax/naming/NameParser.h"
#include "javax/naming/NamingEnumeration.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/spi/ContinuationContext.h"
#include "javax/naming/spi/NamingManager.h"
#include "javax/naming/spi/ResolveResult.h"
#include "javax/naming/spi/Resolver.h"

@implementation JavaxNamingSpiContinuationContext

- (instancetype)initWithJavaxNamingCannotProceedException:(JavaxNamingCannotProceedException *)cpe
                                    withJavaUtilHashtable:(JavaUtilHashtable *)env {
  JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(self, cpe, env);
  return self;
}

- (id<JavaxNamingContext>)getTargetContext {
  if (contCtx_ == nil) {
    if ([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj] == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
    JreStrongAssign(&contCtx_, JavaxNamingSpiNamingManager_getContextWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltName], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltNameCtx], env_));
    if (contCtx_ == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  }
  return contCtx_;
}

- (id)lookupWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) lookupWithJavaxNamingName:name];
}

- (id)lookupWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) lookupWithNSString:name];
}

- (void)bindWithJavaxNamingName:(id<JavaxNamingName>)name
                         withId:(id)newObj {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) bindWithJavaxNamingName:name withId:newObj];
}

- (void)bindWithNSString:(NSString *)name
                  withId:(id)newObj {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) bindWithNSString:name withId:newObj];
}

- (void)rebindWithJavaxNamingName:(id<JavaxNamingName>)name
                           withId:(id)newObj {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) rebindWithJavaxNamingName:name withId:newObj];
}

- (void)rebindWithNSString:(NSString *)name
                    withId:(id)newObj {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) rebindWithNSString:name withId:newObj];
}

- (void)unbindWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) unbindWithJavaxNamingName:name];
}

- (void)unbindWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) unbindWithNSString:name];
}

- (void)renameWithJavaxNamingName:(id<JavaxNamingName>)name
              withJavaxNamingName:(id<JavaxNamingName>)newName {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) renameWithJavaxNamingName:name withJavaxNamingName:newName];
}

- (void)renameWithNSString:(NSString *)name
              withNSString:(NSString *)newName {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) renameWithNSString:name withNSString:newName];
}

- (id<JavaxNamingNamingEnumeration>)listWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) listWithJavaxNamingName:name];
}

- (id<JavaxNamingNamingEnumeration>)listWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) listWithNSString:name];
}

- (id<JavaxNamingNamingEnumeration>)listBindingsWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) listBindingsWithJavaxNamingName:name];
}

- (id<JavaxNamingNamingEnumeration>)listBindingsWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) listBindingsWithNSString:name];
}

- (void)destroySubcontextWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) destroySubcontextWithJavaxNamingName:name];
}

- (void)destroySubcontextWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  [((id<JavaxNamingContext>) nil_chk(ctx)) destroySubcontextWithNSString:name];
}

- (id<JavaxNamingContext>)createSubcontextWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) createSubcontextWithJavaxNamingName:name];
}

- (id<JavaxNamingContext>)createSubcontextWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) createSubcontextWithNSString:name];
}

- (id)lookupLinkWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) lookupLinkWithJavaxNamingName:name];
}

- (id)lookupLinkWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) lookupLinkWithNSString:name];
}

- (id<JavaxNamingNameParser>)getNameParserWithJavaxNamingName:(id<JavaxNamingName>)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) getNameParserWithJavaxNamingName:name];
}

- (id<JavaxNamingNameParser>)getNameParserWithNSString:(NSString *)name {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) getNameParserWithNSString:name];
}

- (id<JavaxNamingName>)composeNameWithJavaxNamingName:(id<JavaxNamingName>)name
                                  withJavaxNamingName:(id<JavaxNamingName>)prefix {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) composeNameWithJavaxNamingName:name withJavaxNamingName:prefix];
}

- (NSString *)composeNameWithNSString:(NSString *)name
                         withNSString:(NSString *)prefix {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) composeNameWithNSString:name withNSString:prefix];
}

- (id)addToEnvironmentWithNSString:(NSString *)propName
                            withId:(id)value {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) addToEnvironmentWithNSString:propName withId:value];
}

- (id)removeFromEnvironmentWithNSString:(NSString *)propName {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) removeFromEnvironmentWithNSString:propName];
}

- (JavaUtilHashtable *)getEnvironment {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) getEnvironment];
}

- (NSString *)getNameInNamespace {
  id<JavaxNamingContext> ctx = [self getTargetContext];
  return [((id<JavaxNamingContext>) nil_chk(ctx)) getNameInNamespace];
}

- (JavaxNamingSpiResolveResult *)resolveToClassWithJavaxNamingName:(id<JavaxNamingName>)name
                                                      withIOSClass:(IOSClass *)contextType {
  if ([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj] == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  id<JavaxNamingSpiResolver> res = JavaxNamingSpiNamingManager_getResolverWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltName], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltNameCtx], env_);
  if (res == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  return [res resolveToClassWithJavaxNamingName:name withIOSClass:contextType];
}

- (JavaxNamingSpiResolveResult *)resolveToClassWithNSString:(NSString *)name
                                               withIOSClass:(IOSClass *)contextType {
  if ([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj] == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  id<JavaxNamingSpiResolver> res = JavaxNamingSpiNamingManager_getResolverWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltName], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltNameCtx], env_);
  if (res == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  return [res resolveToClassWithNSString:name withIOSClass:contextType];
}

- (void)close {
  JreStrongAssign(&cpe_, nil);
  JreStrongAssign(&env_, nil);
  if (contCtx_ != nil) {
    [contCtx_ close];
    JreStrongAssign(&contCtx_, nil);
  }
}

- (void)dealloc {
  RELEASE_(cpe_);
  RELEASE_(env_);
  RELEASE_(contCtx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaxNamingContext;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 14, 4, 2, 15, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 14, 5, 2, 16, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 17, 4, 2, 18, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 17, 5, 2, 19, -1, -1 },
    { NULL, "V", 0x1, 20, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 5, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingContext;", 0x1, 21, 4, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingContext;", 0x1, 21, 5, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 4, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 5, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingNameParser;", 0x1, 23, 4, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingNameParser;", 0x1, 23, 5, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, 24, 12, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 13, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 8, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 5, 2, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 2, 27, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaxNamingSpiResolveResult;", 0x1, 28, 29, 2, 30, -1, -1 },
    { NULL, "LJavaxNamingSpiResolveResult;", 0x1, 28, 31, 2, 32, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingCannotProceedException:withJavaUtilHashtable:);
  methods[1].selector = @selector(getTargetContext);
  methods[2].selector = @selector(lookupWithJavaxNamingName:);
  methods[3].selector = @selector(lookupWithNSString:);
  methods[4].selector = @selector(bindWithJavaxNamingName:withId:);
  methods[5].selector = @selector(bindWithNSString:withId:);
  methods[6].selector = @selector(rebindWithJavaxNamingName:withId:);
  methods[7].selector = @selector(rebindWithNSString:withId:);
  methods[8].selector = @selector(unbindWithJavaxNamingName:);
  methods[9].selector = @selector(unbindWithNSString:);
  methods[10].selector = @selector(renameWithJavaxNamingName:withJavaxNamingName:);
  methods[11].selector = @selector(renameWithNSString:withNSString:);
  methods[12].selector = @selector(listWithJavaxNamingName:);
  methods[13].selector = @selector(listWithNSString:);
  methods[14].selector = @selector(listBindingsWithJavaxNamingName:);
  methods[15].selector = @selector(listBindingsWithNSString:);
  methods[16].selector = @selector(destroySubcontextWithJavaxNamingName:);
  methods[17].selector = @selector(destroySubcontextWithNSString:);
  methods[18].selector = @selector(createSubcontextWithJavaxNamingName:);
  methods[19].selector = @selector(createSubcontextWithNSString:);
  methods[20].selector = @selector(lookupLinkWithJavaxNamingName:);
  methods[21].selector = @selector(lookupLinkWithNSString:);
  methods[22].selector = @selector(getNameParserWithJavaxNamingName:);
  methods[23].selector = @selector(getNameParserWithNSString:);
  methods[24].selector = @selector(composeNameWithJavaxNamingName:withJavaxNamingName:);
  methods[25].selector = @selector(composeNameWithNSString:withNSString:);
  methods[26].selector = @selector(addToEnvironmentWithNSString:withId:);
  methods[27].selector = @selector(removeFromEnvironmentWithNSString:);
  methods[28].selector = @selector(getEnvironment);
  methods[29].selector = @selector(getNameInNamespace);
  methods[30].selector = @selector(resolveToClassWithJavaxNamingName:withIOSClass:);
  methods[31].selector = @selector(resolveToClassWithNSString:withIOSClass:);
  methods[32].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cpe_", "LJavaxNamingCannotProceedException;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "env_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, 33, -1 },
    { "contCtx_", "LJavaxNamingContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingCannotProceedException;LJavaUtilHashtable;", "(Ljavax/naming/CannotProceedException;Ljava/util/Hashtable<**>;)V", "LJavaxNamingNamingException;", "lookup", "LJavaxNamingName;", "LNSString;", "bind", "LJavaxNamingName;LNSObject;", "LNSString;LNSObject;", "rebind", "unbind", "rename", "LJavaxNamingName;LJavaxNamingName;", "LNSString;LNSString;", "list", "(Ljavax/naming/Name;)Ljavax/naming/NamingEnumeration<Ljavax/naming/NameClassPair;>;", "(Ljava/lang/String;)Ljavax/naming/NamingEnumeration<Ljavax/naming/NameClassPair;>;", "listBindings", "(Ljavax/naming/Name;)Ljavax/naming/NamingEnumeration<Ljavax/naming/Binding;>;", "(Ljava/lang/String;)Ljavax/naming/NamingEnumeration<Ljavax/naming/Binding;>;", "destroySubcontext", "createSubcontext", "lookupLink", "getNameParser", "composeName", "addToEnvironment", "removeFromEnvironment", "()Ljava/util/Hashtable<**>;", "resolveToClass", "LJavaxNamingName;LIOSClass;", "(Ljavax/naming/Name;Ljava/lang/Class<+Ljavax/naming/Context;>;)Ljavax/naming/spi/ResolveResult;", "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<+Ljavax/naming/Context;>;)Ljavax/naming/spi/ResolveResult;", "Ljava/util/Hashtable<**>;" };
  static const J2ObjcClassInfo _JavaxNamingSpiContinuationContext = { "ContinuationContext", "javax.naming.spi", ptrTable, methods, fields, 7, 0x0, 33, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiContinuationContext;
}

@end

void JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingSpiContinuationContext *self, JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  NSObject_init(self);
  JreStrongAssign(&self->contCtx_, nil);
  JreStrongAssign(&self->cpe_, cpe);
  JreStrongAssign(&self->env_, env);
}

JavaxNamingSpiContinuationContext *new_JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiContinuationContext, initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_, cpe, env)
}

JavaxNamingSpiContinuationContext *create_JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiContinuationContext, initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_, cpe, env)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiContinuationContext)
