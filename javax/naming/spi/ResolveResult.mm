//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/ResolveResult.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "javax/naming/CompositeName.h"
#include "javax/naming/InvalidNameException.h"
#include "javax/naming/Name.h"
#include "javax/naming/spi/ResolveResult.h"

inline jlong JavaxNamingSpiResolveResult_get_serialVersionUID(void);
#define JavaxNamingSpiResolveResult_serialVersionUID -4552108072002407559LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxNamingSpiResolveResult, serialVersionUID, jlong)

@implementation JavaxNamingSpiResolveResult

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingSpiResolveResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithId:(id)robj
              withNSString:(NSString *)rcomp {
  JavaxNamingSpiResolveResult_initWithId_withNSString_(self, robj, rcomp);
  return self;
}

- (instancetype)initWithId:(id)robj
       withJavaxNamingName:(id<JavaxNamingName>)rname {
  JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(self, robj, rname);
  return self;
}

- (id<JavaxNamingName>)getRemainingName {
  return self->remainingName_;
}

- (id)getResolvedObj {
  return self->resolvedObj_;
}

- (void)setRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) JreStrongAssign(&self->remainingName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
  else {
    JreStrongAssign(&self->remainingName_, nil);
  }
}

- (void)appendRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name {
  if (name != nil) {
    if (self->remainingName_ != nil) {
      @try {
        [self->remainingName_ addAllWithJavaxNamingName:name];
      }
      @catch (JavaxNamingInvalidNameException *e) {
      }
    }
    else {
      JreStrongAssign(&self->remainingName_, (id<JavaxNamingName>) cast_check(([name clone]), JavaxNamingName_class_()));
    }
  }
}

- (void)appendRemainingComponentWithNSString:(NSString *)name {
  if (name != nil) {
    JavaxNamingCompositeName *rname = create_JavaxNamingCompositeName_init();
    @try {
      [rname addWithNSString:name];
    }
    @catch (JavaxNamingInvalidNameException *e) {
    }
    [self appendRemainingNameWithJavaxNamingName:rname];
  }
}

- (void)setResolvedObjWithId:(id)obj {
  JreStrongAssign(&self->resolvedObj_, obj);
}

- (void)dealloc {
  RELEASE_(resolvedObj_);
  RELEASE_(remainingName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithId:withNSString:);
  methods[2].selector = @selector(initWithId:withJavaxNamingName:);
  methods[3].selector = @selector(getRemainingName);
  methods[4].selector = @selector(getResolvedObj);
  methods[5].selector = @selector(setRemainingNameWithJavaxNamingName:);
  methods[6].selector = @selector(appendRemainingNameWithJavaxNamingName:);
  methods[7].selector = @selector(appendRemainingComponentWithNSString:);
  methods[8].selector = @selector(setResolvedObjWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resolvedObj_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "remainingName_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = JavaxNamingSpiResolveResult_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSString;", "LNSObject;LJavaxNamingName;", "setRemainingName", "LJavaxNamingName;", "appendRemainingName", "appendRemainingComponent", "LNSString;", "setResolvedObj", "LNSObject;" };
  static const J2ObjcClassInfo _JavaxNamingSpiResolveResult = { "ResolveResult", "javax.naming.spi", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiResolveResult;
}

@end

void JavaxNamingSpiResolveResult_init(JavaxNamingSpiResolveResult *self) {
  NSObject_init(self);
  JreStrongAssign(&self->resolvedObj_, nil);
  JreStrongAssign(&self->remainingName_, nil);
}

JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_init() {
  J2OBJC_NEW_IMPL(JavaxNamingSpiResolveResult, init)
}

JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiResolveResult, init)
}

void JavaxNamingSpiResolveResult_initWithId_withNSString_(JavaxNamingSpiResolveResult *self, id robj, NSString *rcomp) {
  NSObject_init(self);
  JreStrongAssign(&self->resolvedObj_, robj);
  @try {
    JreStrongAssignAndConsume(&self->remainingName_, new_JavaxNamingCompositeName_initWithNSString_(rcomp));
  }
  @catch (JavaxNamingInvalidNameException *e) {
  }
}

JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_initWithId_withNSString_(id robj, NSString *rcomp) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiResolveResult, initWithId_withNSString_, robj, rcomp)
}

JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_initWithId_withNSString_(id robj, NSString *rcomp) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiResolveResult, initWithId_withNSString_, robj, rcomp)
}

void JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(JavaxNamingSpiResolveResult *self, id robj, id<JavaxNamingName> rname) {
  NSObject_init(self);
  JreStrongAssign(&self->resolvedObj_, robj);
  [self setRemainingNameWithJavaxNamingName:rname];
}

JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(id robj, id<JavaxNamingName> rname) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiResolveResult, initWithId_withJavaxNamingName_, robj, rname)
}

JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(id robj, id<JavaxNamingName> rname) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiResolveResult, initWithId_withJavaxNamingName_, robj, rname)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiResolveResult)
