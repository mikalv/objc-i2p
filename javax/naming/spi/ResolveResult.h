//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/ResolveResult.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingSpiResolveResult")
#ifdef RESTRICT_JavaxNamingSpiResolveResult
#define INCLUDE_ALL_JavaxNamingSpiResolveResult 0
#else
#define INCLUDE_ALL_JavaxNamingSpiResolveResult 1
#endif
#undef RESTRICT_JavaxNamingSpiResolveResult

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingSpiResolveResult_) && (INCLUDE_ALL_JavaxNamingSpiResolveResult || defined(INCLUDE_JavaxNamingSpiResolveResult))
#define JavaxNamingSpiResolveResult_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol JavaxNamingName;

@interface JavaxNamingSpiResolveResult : NSObject < JavaIoSerializable > {
 @public
  id resolvedObj_;
  id<JavaxNamingName> remainingName_;
}

#pragma mark Public

- (instancetype __nonnull)initWithId:(id)robj
                 withJavaxNamingName:(id<JavaxNamingName>)rname;

- (instancetype __nonnull)initWithId:(id)robj
                        withNSString:(NSString *)rcomp;

- (void)appendRemainingComponentWithNSString:(NSString *)name;

- (void)appendRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name;

- (id<JavaxNamingName>)getRemainingName;

- (id)getResolvedObj;

- (void)setRemainingNameWithJavaxNamingName:(id<JavaxNamingName>)name;

- (void)setResolvedObjWithId:(id)obj;

#pragma mark Protected

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNamingSpiResolveResult)

J2OBJC_FIELD_SETTER(JavaxNamingSpiResolveResult, resolvedObj_, id)
J2OBJC_FIELD_SETTER(JavaxNamingSpiResolveResult, remainingName_, id<JavaxNamingName>)

FOUNDATION_EXPORT void JavaxNamingSpiResolveResult_init(JavaxNamingSpiResolveResult *self);

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_init(void);

FOUNDATION_EXPORT void JavaxNamingSpiResolveResult_initWithId_withNSString_(JavaxNamingSpiResolveResult *self, id robj, NSString *rcomp);

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_initWithId_withNSString_(id robj, NSString *rcomp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_initWithId_withNSString_(id robj, NSString *rcomp);

FOUNDATION_EXPORT void JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(JavaxNamingSpiResolveResult *self, id robj, id<JavaxNamingName> rname);

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *new_JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(id robj, id<JavaxNamingName> rname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingSpiResolveResult *create_JavaxNamingSpiResolveResult_initWithId_withJavaxNamingName_(id robj, id<JavaxNamingName> rname);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingSpiResolveResult)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingSpiResolveResult")
