//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/ContinuationDirContext.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "java/util/Hashtable.h"
#include "javax/naming/CannotProceedException.h"
#include "javax/naming/CompositeName.h"
#include "javax/naming/Context.h"
#include "javax/naming/Name.h"
#include "javax/naming/NamingEnumeration.h"
#include "javax/naming/NamingException.h"
#include "javax/naming/directory/Attributes.h"
#include "javax/naming/directory/DirContext.h"
#include "javax/naming/directory/SearchControls.h"
#include "javax/naming/spi/ContinuationContext.h"
#include "javax/naming/spi/ContinuationDirContext.h"
#include "javax/naming/spi/NamingManager.h"
#include "javax/naming/spi/ResolveResult.h"
#include "javax/naming/spi/Resolver.h"

@implementation JavaxNamingSpiContinuationDirContext

- (instancetype)initWithJavaxNamingCannotProceedException:(JavaxNamingCannotProceedException *)cpe
                                    withJavaUtilHashtable:(JavaUtilHashtable *)env {
  JavaxNamingSpiContinuationDirContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(self, cpe, env);
  return self;
}

- (JavaxNamingSpiDirContextNamePair *)getTargetContextWithJavaxNamingName:(id<JavaxNamingName>)name {
  if ([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj] == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  id<JavaxNamingContext> ctx = JavaxNamingSpiNamingManager_getContextWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltName], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltNameCtx], env_);
  if (ctx == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  if ([JavaxNamingDirectoryDirContext_class_() isInstance:ctx]) return create_JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_((id<JavaxNamingDirectoryDirContext>) cast_check(ctx, JavaxNamingDirectoryDirContext_class_()), name);
  if ([JavaxNamingSpiResolver_class_() isInstance:ctx]) {
    id<JavaxNamingSpiResolver> res = (id<JavaxNamingSpiResolver>) cast_check(ctx, JavaxNamingSpiResolver_class_());
    JavaxNamingSpiResolveResult *rr = [res resolveToClassWithJavaxNamingName:name withIOSClass:JavaxNamingDirectoryDirContext_class_()];
    id<JavaxNamingDirectoryDirContext> dctx = (id<JavaxNamingDirectoryDirContext>) cast_check([((JavaxNamingSpiResolveResult *) nil_chk(rr)) getResolvedObj], JavaxNamingDirectoryDirContext_class_());
    return (create_JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_(dctx, [rr getRemainingName]));
  }
  id ultimate = [ctx lookupWithJavaxNamingName:name];
  if ([JavaxNamingDirectoryDirContext_class_() isInstance:ultimate]) {
    return (create_JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_((id<JavaxNamingDirectoryDirContext>) cast_check(ultimate, JavaxNamingDirectoryDirContext_class_()), create_JavaxNamingCompositeName_init()));
  }
  @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
}

- (JavaxNamingSpiDirContextStringPair *)getTargetContextWithNSString:(NSString *)name {
  if ([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj] == nil) @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
  id<JavaxNamingContext> ctx = JavaxNamingSpiNamingManager_getContextWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getResolvedObj], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltName], [((JavaxNamingCannotProceedException *) nil_chk(cpe_)) getAltNameCtx], env_);
  if ([JavaxNamingDirectoryDirContext_class_() isInstance:ctx]) return create_JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_((id<JavaxNamingDirectoryDirContext>) cast_check(ctx, JavaxNamingDirectoryDirContext_class_()), name);
  if ([JavaxNamingSpiResolver_class_() isInstance:ctx]) {
    id<JavaxNamingSpiResolver> res = (id<JavaxNamingSpiResolver>) cast_check(ctx, JavaxNamingSpiResolver_class_());
    JavaxNamingSpiResolveResult *rr = [((id<JavaxNamingSpiResolver>) nil_chk(res)) resolveToClassWithNSString:name withIOSClass:JavaxNamingDirectoryDirContext_class_()];
    id<JavaxNamingDirectoryDirContext> dctx = (id<JavaxNamingDirectoryDirContext>) cast_check([((JavaxNamingSpiResolveResult *) nil_chk(rr)) getResolvedObj], JavaxNamingDirectoryDirContext_class_());
    id<JavaxNamingName> tmp = [rr getRemainingName];
    NSString *remains = (tmp != nil) ? [((id<JavaxNamingName>) nil_chk(tmp)) description] : @"";
    return (create_JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_(dctx, remains));
  }
  id ultimate = [((id<JavaxNamingContext>) nil_chk(ctx)) lookupWithNSString:name];
  if ([JavaxNamingDirectoryDirContext_class_() isInstance:ultimate]) {
    return (create_JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_((id<JavaxNamingDirectoryDirContext>) cast_check(ultimate, JavaxNamingDirectoryDirContext_class_()), @""));
  }
  @throw nil_chk((JavaxNamingNamingException *) cast_chk([((JavaxNamingCannotProceedException *) nil_chk(cpe_)) fillInStackTrace], [JavaxNamingNamingException class]));
}

- (id<JavaxNamingDirectoryAttributes>)getAttributesWithNSString:(NSString *)name {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) getAttributesWithNSString:[res getString]];
}

- (id<JavaxNamingDirectoryAttributes>)getAttributesWithNSString:(NSString *)name
                                              withNSStringArray:(IOSObjectArray *)attrIds {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) getAttributesWithNSString:[res getString] withNSStringArray:attrIds];
}

- (id<JavaxNamingDirectoryAttributes>)getAttributesWithJavaxNamingName:(id<JavaxNamingName>)name {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) getAttributesWithJavaxNamingName:[res getName]];
}

- (id<JavaxNamingDirectoryAttributes>)getAttributesWithJavaxNamingName:(id<JavaxNamingName>)name
                                                     withNSStringArray:(IOSObjectArray *)attrIds {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) getAttributesWithJavaxNamingName:[res getName] withNSStringArray:attrIds];
}

- (void)modifyAttributesWithJavaxNamingName:(id<JavaxNamingName>)name
                                    withInt:(jint)mod_op
         withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) modifyAttributesWithJavaxNamingName:[res getName] withInt:mod_op withJavaxNamingDirectoryAttributes:attrs];
}

- (void)modifyAttributesWithNSString:(NSString *)name
                             withInt:(jint)mod_op
  withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) modifyAttributesWithNSString:[res getString] withInt:mod_op withJavaxNamingDirectoryAttributes:attrs];
}

- (void)modifyAttributesWithJavaxNamingName:(id<JavaxNamingName>)name
withJavaxNamingDirectoryModificationItemArray:(IOSObjectArray *)mods {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) modifyAttributesWithJavaxNamingName:[res getName] withJavaxNamingDirectoryModificationItemArray:mods];
}

- (void)modifyAttributesWithNSString:(NSString *)name
withJavaxNamingDirectoryModificationItemArray:(IOSObjectArray *)mods {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) modifyAttributesWithNSString:[res getString] withJavaxNamingDirectoryModificationItemArray:mods];
}

- (void)bindWithJavaxNamingName:(id<JavaxNamingName>)name
                         withId:(id)obj
withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) bindWithJavaxNamingName:[res getName] withId:obj withJavaxNamingDirectoryAttributes:attrs];
}

- (void)bindWithNSString:(NSString *)name
                  withId:(id)obj
withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) bindWithNSString:[res getString] withId:obj withJavaxNamingDirectoryAttributes:attrs];
}

- (void)rebindWithJavaxNamingName:(id<JavaxNamingName>)name
                           withId:(id)obj
withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) rebindWithJavaxNamingName:[res getName] withId:obj withJavaxNamingDirectoryAttributes:attrs];
}

- (void)rebindWithNSString:(NSString *)name
                    withId:(id)obj
withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) rebindWithNSString:[res getString] withId:obj withJavaxNamingDirectoryAttributes:attrs];
}

- (id<JavaxNamingDirectoryDirContext>)createSubcontextWithJavaxNamingName:(id<JavaxNamingName>)name
                                       withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) createSubcontextWithJavaxNamingName:[res getName] withJavaxNamingDirectoryAttributes:attrs];
}

- (id<JavaxNamingDirectoryDirContext>)createSubcontextWithNSString:(NSString *)name
                                withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) createSubcontextWithNSString:[res getString] withJavaxNamingDirectoryAttributes:attrs];
}

- (id<JavaxNamingNamingEnumeration>)searchWithJavaxNamingName:(id<JavaxNamingName>)name
                           withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)matchingAttributes
                                            withNSStringArray:(IOSObjectArray *)attributesToReturn {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) searchWithJavaxNamingName:[res getName] withJavaxNamingDirectoryAttributes:matchingAttributes withNSStringArray:attributesToReturn];
}

- (id<JavaxNamingNamingEnumeration>)searchWithNSString:(NSString *)name
                    withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)matchingAttributes
                                     withNSStringArray:(IOSObjectArray *)attributesToReturn {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) searchWithNSString:[res getString] withJavaxNamingDirectoryAttributes:matchingAttributes withNSStringArray:attributesToReturn];
}

- (id<JavaxNamingNamingEnumeration>)searchWithJavaxNamingName:(id<JavaxNamingName>)name
                           withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)matchingAttributes {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) searchWithJavaxNamingName:[res getName] withJavaxNamingDirectoryAttributes:matchingAttributes];
}

- (id<JavaxNamingNamingEnumeration>)searchWithNSString:(NSString *)name
                    withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)matchingAttributes {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) searchWithNSString:[res getString] withJavaxNamingDirectoryAttributes:matchingAttributes];
}

- (id<JavaxNamingNamingEnumeration>)searchWithJavaxNamingName:(id<JavaxNamingName>)name
                                                 withNSString:(NSString *)filter
                       withJavaxNamingDirectorySearchControls:(JavaxNamingDirectorySearchControls *)cons {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) searchWithJavaxNamingName:[res getName] withNSString:filter withJavaxNamingDirectorySearchControls:cons];
}

- (id<JavaxNamingNamingEnumeration>)searchWithNSString:(NSString *)name
                                          withNSString:(NSString *)filter
                withJavaxNamingDirectorySearchControls:(JavaxNamingDirectorySearchControls *)cons {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) searchWithNSString:[res getString] withNSString:filter withJavaxNamingDirectorySearchControls:cons];
}

- (id<JavaxNamingNamingEnumeration>)searchWithJavaxNamingName:(id<JavaxNamingName>)name
                                                 withNSString:(NSString *)filterExpr
                                            withNSObjectArray:(IOSObjectArray *)args
                       withJavaxNamingDirectorySearchControls:(JavaxNamingDirectorySearchControls *)cons {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) searchWithJavaxNamingName:[res getName] withNSString:filterExpr withNSObjectArray:args withJavaxNamingDirectorySearchControls:cons];
}

- (id<JavaxNamingNamingEnumeration>)searchWithNSString:(NSString *)name
                                          withNSString:(NSString *)filterExpr
                                     withNSObjectArray:(IOSObjectArray *)args
                withJavaxNamingDirectorySearchControls:(JavaxNamingDirectorySearchControls *)cons {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) searchWithNSString:[res getString] withNSString:filterExpr withNSObjectArray:args withJavaxNamingDirectorySearchControls:cons];
}

- (id<JavaxNamingDirectoryDirContext>)getSchemaWithNSString:(NSString *)name {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) getSchemaWithNSString:[res getString]];
}

- (id<JavaxNamingDirectoryDirContext>)getSchemaWithJavaxNamingName:(id<JavaxNamingName>)name {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) getSchemaWithJavaxNamingName:[res getName]];
}

- (id<JavaxNamingDirectoryDirContext>)getSchemaClassDefinitionWithNSString:(NSString *)name {
  JavaxNamingSpiDirContextStringPair *res = [self getTargetContextWithNSString:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextStringPair *) nil_chk(res)) getDirContext])) getSchemaClassDefinitionWithNSString:[res getString]];
}

- (id<JavaxNamingDirectoryDirContext>)getSchemaClassDefinitionWithJavaxNamingName:(id<JavaxNamingName>)name {
  JavaxNamingSpiDirContextNamePair *res = [self getTargetContextWithJavaxNamingName:name];
  return [((id<JavaxNamingDirectoryDirContext>) nil_chk([((JavaxNamingSpiDirContextNamePair *) nil_chk(res)) getDirContext])) getSchemaClassDefinitionWithJavaxNamingName:[res getName]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaxNamingSpiDirContextNamePair;", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingSpiDirContextStringPair;", 0x4, 2, 5, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryAttributes;", 0x1, 6, 5, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryAttributes;", 0x1, 6, 7, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryAttributes;", 0x1, 6, 3, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryAttributes;", 0x1, 6, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 13, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 18, 19, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 18, 20, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 22, 4, 23, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 24, 4, 25, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 19, 4, 26, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 20, 4, 27, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 28, 4, 29, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 30, 4, 31, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 32, 4, 33, -1, -1 },
    { NULL, "LJavaxNamingNamingEnumeration;", 0x1, 21, 34, 4, 35, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 36, 5, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 36, 3, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 37, 5, 4, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x1, 37, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingCannotProceedException:withJavaUtilHashtable:);
  methods[1].selector = @selector(getTargetContextWithJavaxNamingName:);
  methods[2].selector = @selector(getTargetContextWithNSString:);
  methods[3].selector = @selector(getAttributesWithNSString:);
  methods[4].selector = @selector(getAttributesWithNSString:withNSStringArray:);
  methods[5].selector = @selector(getAttributesWithJavaxNamingName:);
  methods[6].selector = @selector(getAttributesWithJavaxNamingName:withNSStringArray:);
  methods[7].selector = @selector(modifyAttributesWithJavaxNamingName:withInt:withJavaxNamingDirectoryAttributes:);
  methods[8].selector = @selector(modifyAttributesWithNSString:withInt:withJavaxNamingDirectoryAttributes:);
  methods[9].selector = @selector(modifyAttributesWithJavaxNamingName:withJavaxNamingDirectoryModificationItemArray:);
  methods[10].selector = @selector(modifyAttributesWithNSString:withJavaxNamingDirectoryModificationItemArray:);
  methods[11].selector = @selector(bindWithJavaxNamingName:withId:withJavaxNamingDirectoryAttributes:);
  methods[12].selector = @selector(bindWithNSString:withId:withJavaxNamingDirectoryAttributes:);
  methods[13].selector = @selector(rebindWithJavaxNamingName:withId:withJavaxNamingDirectoryAttributes:);
  methods[14].selector = @selector(rebindWithNSString:withId:withJavaxNamingDirectoryAttributes:);
  methods[15].selector = @selector(createSubcontextWithJavaxNamingName:withJavaxNamingDirectoryAttributes:);
  methods[16].selector = @selector(createSubcontextWithNSString:withJavaxNamingDirectoryAttributes:);
  methods[17].selector = @selector(searchWithJavaxNamingName:withJavaxNamingDirectoryAttributes:withNSStringArray:);
  methods[18].selector = @selector(searchWithNSString:withJavaxNamingDirectoryAttributes:withNSStringArray:);
  methods[19].selector = @selector(searchWithJavaxNamingName:withJavaxNamingDirectoryAttributes:);
  methods[20].selector = @selector(searchWithNSString:withJavaxNamingDirectoryAttributes:);
  methods[21].selector = @selector(searchWithJavaxNamingName:withNSString:withJavaxNamingDirectorySearchControls:);
  methods[22].selector = @selector(searchWithNSString:withNSString:withJavaxNamingDirectorySearchControls:);
  methods[23].selector = @selector(searchWithJavaxNamingName:withNSString:withNSObjectArray:withJavaxNamingDirectorySearchControls:);
  methods[24].selector = @selector(searchWithNSString:withNSString:withNSObjectArray:withJavaxNamingDirectorySearchControls:);
  methods[25].selector = @selector(getSchemaWithNSString:);
  methods[26].selector = @selector(getSchemaWithJavaxNamingName:);
  methods[27].selector = @selector(getSchemaClassDefinitionWithNSString:);
  methods[28].selector = @selector(getSchemaClassDefinitionWithJavaxNamingName:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaxNamingCannotProceedException;LJavaUtilHashtable;", "(Ljavax/naming/CannotProceedException;Ljava/util/Hashtable<**>;)V", "getTargetContext", "LJavaxNamingName;", "LJavaxNamingNamingException;", "LNSString;", "getAttributes", "LNSString;[LNSString;", "LJavaxNamingName;[LNSString;", "modifyAttributes", "LJavaxNamingName;ILJavaxNamingDirectoryAttributes;", "LNSString;ILJavaxNamingDirectoryAttributes;", "LJavaxNamingName;[LJavaxNamingDirectoryModificationItem;", "LNSString;[LJavaxNamingDirectoryModificationItem;", "bind", "LJavaxNamingName;LNSObject;LJavaxNamingDirectoryAttributes;", "LNSString;LNSObject;LJavaxNamingDirectoryAttributes;", "rebind", "createSubcontext", "LJavaxNamingName;LJavaxNamingDirectoryAttributes;", "LNSString;LJavaxNamingDirectoryAttributes;", "search", "LJavaxNamingName;LJavaxNamingDirectoryAttributes;[LNSString;", "(Ljavax/naming/Name;Ljavax/naming/directory/Attributes;[Ljava/lang/String;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "LNSString;LJavaxNamingDirectoryAttributes;[LNSString;", "(Ljava/lang/String;Ljavax/naming/directory/Attributes;[Ljava/lang/String;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "(Ljavax/naming/Name;Ljavax/naming/directory/Attributes;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "(Ljava/lang/String;Ljavax/naming/directory/Attributes;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "LJavaxNamingName;LNSString;LJavaxNamingDirectorySearchControls;", "(Ljavax/naming/Name;Ljava/lang/String;Ljavax/naming/directory/SearchControls;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "LNSString;LNSString;LJavaxNamingDirectorySearchControls;", "(Ljava/lang/String;Ljava/lang/String;Ljavax/naming/directory/SearchControls;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "LJavaxNamingName;LNSString;[LNSObject;LJavaxNamingDirectorySearchControls;", "(Ljavax/naming/Name;Ljava/lang/String;[Ljava/lang/Object;Ljavax/naming/directory/SearchControls;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "LNSString;LNSString;[LNSObject;LJavaxNamingDirectorySearchControls;", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;Ljavax/naming/directory/SearchControls;)Ljavax/naming/NamingEnumeration<Ljavax/naming/directory/SearchResult;>;", "getSchema", "getSchemaClassDefinition" };
  static const J2ObjcClassInfo _JavaxNamingSpiContinuationDirContext = { "ContinuationDirContext", "javax.naming.spi", ptrTable, methods, NULL, 7, 0x0, 29, 0, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiContinuationDirContext;
}

@end

void JavaxNamingSpiContinuationDirContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingSpiContinuationDirContext *self, JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  JavaxNamingSpiContinuationContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(self, cpe, env);
}

JavaxNamingSpiContinuationDirContext *new_JavaxNamingSpiContinuationDirContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiContinuationDirContext, initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_, cpe, env)
}

JavaxNamingSpiContinuationDirContext *create_JavaxNamingSpiContinuationDirContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(JavaxNamingCannotProceedException *cpe, JavaUtilHashtable *env) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiContinuationDirContext, initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_, cpe, env)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiContinuationDirContext)

@implementation JavaxNamingSpiDirContextNamePair

- (instancetype)initWithJavaxNamingDirectoryDirContext:(id<JavaxNamingDirectoryDirContext>)ctx
                                   withJavaxNamingName:(id<JavaxNamingName>)name {
  JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_(self, ctx, name);
  return self;
}

- (id<JavaxNamingDirectoryDirContext>)getDirContext {
  return ctx_;
}

- (id<JavaxNamingName>)getName {
  return name_;
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingName;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingDirectoryDirContext:withJavaxNamingName:);
  methods[1].selector = @selector(getDirContext);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LJavaxNamingDirectoryDirContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "name_", "LJavaxNamingName;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingDirectoryDirContext;LJavaxNamingName;" };
  static const J2ObjcClassInfo _JavaxNamingSpiDirContextNamePair = { "DirContextNamePair", "javax.naming.spi", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiDirContextNamePair;
}

@end

void JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_(JavaxNamingSpiDirContextNamePair *self, id<JavaxNamingDirectoryDirContext> ctx, id<JavaxNamingName> name) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, ctx);
  JreStrongAssign(&self->name_, name);
}

JavaxNamingSpiDirContextNamePair *new_JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_(id<JavaxNamingDirectoryDirContext> ctx, id<JavaxNamingName> name) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiDirContextNamePair, initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_, ctx, name)
}

JavaxNamingSpiDirContextNamePair *create_JavaxNamingSpiDirContextNamePair_initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_(id<JavaxNamingDirectoryDirContext> ctx, id<JavaxNamingName> name) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiDirContextNamePair, initWithJavaxNamingDirectoryDirContext_withJavaxNamingName_, ctx, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiDirContextNamePair)

@implementation JavaxNamingSpiDirContextStringPair

- (instancetype)initWithJavaxNamingDirectoryDirContext:(id<JavaxNamingDirectoryDirContext>)ctx
                                          withNSString:(NSString *)str {
  JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_(self, ctx, str);
  return self;
}

- (id<JavaxNamingDirectoryDirContext>)getDirContext {
  return ctx_;
}

- (NSString *)getString {
  return str_;
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(str_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNamingDirectoryDirContext:withNSString:);
  methods[1].selector = @selector(getDirContext);
  methods[2].selector = @selector(getString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LJavaxNamingDirectoryDirContext;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "str_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxNamingDirectoryDirContext;LNSString;" };
  static const J2ObjcClassInfo _JavaxNamingSpiDirContextStringPair = { "DirContextStringPair", "javax.naming.spi", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiDirContextStringPair;
}

@end

void JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_(JavaxNamingSpiDirContextStringPair *self, id<JavaxNamingDirectoryDirContext> ctx, NSString *str) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, ctx);
  JreStrongAssign(&self->str_, str);
}

JavaxNamingSpiDirContextStringPair *new_JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_(id<JavaxNamingDirectoryDirContext> ctx, NSString *str) {
  J2OBJC_NEW_IMPL(JavaxNamingSpiDirContextStringPair, initWithJavaxNamingDirectoryDirContext_withNSString_, ctx, str)
}

JavaxNamingSpiDirContextStringPair *create_JavaxNamingSpiDirContextStringPair_initWithJavaxNamingDirectoryDirContext_withNSString_(id<JavaxNamingDirectoryDirContext> ctx, NSString *str) {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiDirContextStringPair, initWithJavaxNamingDirectoryDirContext_withNSString_, ctx, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiDirContextStringPair)
