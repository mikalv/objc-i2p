//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/DirectoryManager.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/sun/naming/internal/FactoryEnumeration.h"
#include "com/sun/naming/internal/ResourceManager.h"
#include "java/util/Hashtable.h"
#include "javax/naming/CannotProceedException.h"
#include "javax/naming/Context.h"
#include "javax/naming/Name.h"
#include "javax/naming/Reference.h"
#include "javax/naming/Referenceable.h"
#include "javax/naming/directory/Attributes.h"
#include "javax/naming/directory/DirContext.h"
#include "javax/naming/spi/ContinuationDirContext.h"
#include "javax/naming/spi/DirObjectFactory.h"
#include "javax/naming/spi/DirStateFactory.h"
#include "javax/naming/spi/DirectoryManager.h"
#include "javax/naming/spi/NamingManager.h"
#include "javax/naming/spi/ObjectFactory.h"
#include "javax/naming/spi/ObjectFactoryBuilder.h"
#include "javax/naming/spi/StateFactory.h"

@interface JavaxNamingSpiDirectoryManager ()

+ (id)createObjectFromFactoriesWithId:(id)obj
                  withJavaxNamingName:(id<JavaxNamingName>)name
               withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                withJavaUtilHashtable:(JavaUtilHashtable *)environment
   withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs;

@end

__attribute__((unused)) static id JavaxNamingSpiDirectoryManager_createObjectFromFactoriesWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment, id<JavaxNamingDirectoryAttributes> attrs);

@implementation JavaxNamingSpiDirectoryManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxNamingSpiDirectoryManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaxNamingDirectoryDirContext>)getContinuationDirContextWithJavaxNamingCannotProceedException:(JavaxNamingCannotProceedException *)cpe {
  return JavaxNamingSpiDirectoryManager_getContinuationDirContextWithJavaxNamingCannotProceedException_(cpe);
}

+ (id)getObjectInstanceWithId:(id)refInfo
          withJavaxNamingName:(id<JavaxNamingName>)name
       withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
        withJavaUtilHashtable:(JavaUtilHashtable *)environment
withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  return JavaxNamingSpiDirectoryManager_getObjectInstanceWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(refInfo, name, nameCtx, environment, attrs);
}

+ (id)createObjectFromFactoriesWithId:(id)obj
                  withJavaxNamingName:(id<JavaxNamingName>)name
               withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                withJavaUtilHashtable:(JavaUtilHashtable *)environment
   withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  return JavaxNamingSpiDirectoryManager_createObjectFromFactoriesWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(obj, name, nameCtx, environment, attrs);
}

+ (JavaxNamingSpiDirStateFactory_Result *)getStateToBindWithId:(id)obj
                                           withJavaxNamingName:(id<JavaxNamingName>)name
                                        withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                                         withJavaUtilHashtable:(JavaUtilHashtable *)environment
                            withJavaxNamingDirectoryAttributes:(id<JavaxNamingDirectoryAttributes>)attrs {
  return JavaxNamingSpiDirectoryManager_getStateToBindWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(obj, name, nameCtx, environment, attrs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxNamingDirectoryDirContext;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 3, 4, 5, 6, -1, -1 },
    { NULL, "LNSObject;", 0xa, 7, 4, 5, 6, -1, -1 },
    { NULL, "LJavaxNamingSpiDirStateFactory_Result;", 0x9, 8, 4, 2, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getContinuationDirContextWithJavaxNamingCannotProceedException:);
  methods[2].selector = @selector(getObjectInstanceWithId:withJavaxNamingName:withJavaxNamingContext:withJavaUtilHashtable:withJavaxNamingDirectoryAttributes:);
  methods[3].selector = @selector(createObjectFromFactoriesWithId:withJavaxNamingName:withJavaxNamingContext:withJavaUtilHashtable:withJavaxNamingDirectoryAttributes:);
  methods[4].selector = @selector(getStateToBindWithId:withJavaxNamingName:withJavaxNamingContext:withJavaUtilHashtable:withJavaxNamingDirectoryAttributes:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getContinuationDirContext", "LJavaxNamingCannotProceedException;", "LJavaxNamingNamingException;", "getObjectInstance", "LNSObject;LJavaxNamingName;LJavaxNamingContext;LJavaUtilHashtable;LJavaxNamingDirectoryAttributes;", "LJavaLangException;", "(Ljava/lang/Object;Ljavax/naming/Name;Ljavax/naming/Context;Ljava/util/Hashtable<**>;Ljavax/naming/directory/Attributes;)Ljava/lang/Object;", "createObjectFromFactories", "getStateToBind", "(Ljava/lang/Object;Ljavax/naming/Name;Ljavax/naming/Context;Ljava/util/Hashtable<**>;Ljavax/naming/directory/Attributes;)Ljavax/naming/spi/DirStateFactory$Result;" };
  static const J2ObjcClassInfo _JavaxNamingSpiDirectoryManager = { "DirectoryManager", "javax.naming.spi", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_JavaxNamingSpiDirectoryManager;
}

@end

void JavaxNamingSpiDirectoryManager_init(JavaxNamingSpiDirectoryManager *self) {
  JavaxNamingSpiNamingManager_init(self);
}

JavaxNamingSpiDirectoryManager *new_JavaxNamingSpiDirectoryManager_init() {
  J2OBJC_NEW_IMPL(JavaxNamingSpiDirectoryManager, init)
}

JavaxNamingSpiDirectoryManager *create_JavaxNamingSpiDirectoryManager_init() {
  J2OBJC_CREATE_IMPL(JavaxNamingSpiDirectoryManager, init)
}

id<JavaxNamingDirectoryDirContext> JavaxNamingSpiDirectoryManager_getContinuationDirContextWithJavaxNamingCannotProceedException_(JavaxNamingCannotProceedException *cpe) {
  JavaxNamingSpiDirectoryManager_initialize();
  JavaUtilHashtable *env = [((JavaxNamingCannotProceedException *) nil_chk(cpe)) getEnvironment];
  if (env == nil) {
    env = create_JavaUtilHashtable_initWithInt_(7);
  }
  else {
    env = (JavaUtilHashtable *) cast_chk([env java_clone], [JavaUtilHashtable class]);
  }
  [((JavaUtilHashtable *) nil_chk(env)) putWithId:JavaxNamingSpiNamingManager_CPE withId:cpe];
  return (create_JavaxNamingSpiContinuationDirContext_initWithJavaxNamingCannotProceedException_withJavaUtilHashtable_(cpe, env));
}

id JavaxNamingSpiDirectoryManager_getObjectInstanceWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(id refInfo, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment, id<JavaxNamingDirectoryAttributes> attrs) {
  JavaxNamingSpiDirectoryManager_initialize();
  id<JavaxNamingSpiObjectFactory> factory;
  id<JavaxNamingSpiObjectFactoryBuilder> builder = JavaxNamingSpiNamingManager_getObjectFactoryBuilder();
  if (builder != nil) {
    factory = [builder createObjectFactoryWithId:refInfo withJavaUtilHashtable:environment];
    if ([JavaxNamingSpiDirObjectFactory_class_() isInstance:factory]) {
      return [((id<JavaxNamingSpiDirObjectFactory>) nil_chk(((id<JavaxNamingSpiDirObjectFactory>) cast_check(factory, JavaxNamingSpiDirObjectFactory_class_())))) getObjectInstanceWithId:refInfo withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment withJavaxNamingDirectoryAttributes:attrs];
    }
    else {
      return [((id<JavaxNamingSpiObjectFactory>) nil_chk(factory)) getObjectInstanceWithId:refInfo withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment];
    }
  }
  JavaxNamingReference *ref = nil;
  if ([refInfo isKindOfClass:[JavaxNamingReference class]]) {
    ref = (JavaxNamingReference *) cast_chk(refInfo, [JavaxNamingReference class]);
  }
  else if ([JavaxNamingReferenceable_class_() isInstance:refInfo]) {
    ref = [((id<JavaxNamingReferenceable>) nil_chk(((id<JavaxNamingReferenceable>) cast_check((refInfo), JavaxNamingReferenceable_class_())))) getReference];
  }
  id answer;
  if (ref != nil) {
    NSString *f = [ref getFactoryClassName];
    if (f != nil) {
      factory = JavaxNamingSpiNamingManager_getObjectFactoryFromReferenceWithJavaxNamingReference_withNSString_(ref, f);
      if ([JavaxNamingSpiDirObjectFactory_class_() isInstance:factory]) {
        return [((id<JavaxNamingSpiDirObjectFactory>) nil_chk(((id<JavaxNamingSpiDirObjectFactory>) cast_check(factory, JavaxNamingSpiDirObjectFactory_class_())))) getObjectInstanceWithId:ref withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment withJavaxNamingDirectoryAttributes:attrs];
      }
      else if (factory != nil) {
        return [factory getObjectInstanceWithId:ref withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment];
      }
      return refInfo;
    }
    else {
      answer = JavaxNamingSpiNamingManager_processURLAddrsWithJavaxNamingReference_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(ref, name, nameCtx, environment);
      if (answer != nil) {
        return answer;
      }
    }
  }
  answer = JavaxNamingSpiDirectoryManager_createObjectFromFactoriesWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(refInfo, name, nameCtx, environment, attrs);
  return (answer != nil) ? answer : refInfo;
}

id JavaxNamingSpiDirectoryManager_createObjectFromFactoriesWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment, id<JavaxNamingDirectoryAttributes> attrs) {
  JavaxNamingSpiDirectoryManager_initialize();
  ComSunNamingInternalFactoryEnumeration *factories = ComSunNamingInternalResourceManager_getFactoriesWithNSString_withJavaUtilHashtable_withJavaxNamingContext_(JavaxNamingContext_OBJECT_FACTORIES, environment, nameCtx);
  if (factories == nil) return nil;
  id<JavaxNamingSpiObjectFactory> factory;
  id answer = nil;
  while (answer == nil && [factories hasMore]) {
    factory = (id<JavaxNamingSpiObjectFactory>) cast_check([factories next], JavaxNamingSpiObjectFactory_class_());
    if ([JavaxNamingSpiDirObjectFactory_class_() isInstance:factory]) {
      answer = [((id<JavaxNamingSpiDirObjectFactory>) nil_chk(((id<JavaxNamingSpiDirObjectFactory>) cast_check(factory, JavaxNamingSpiDirObjectFactory_class_())))) getObjectInstanceWithId:obj withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment withJavaxNamingDirectoryAttributes:attrs];
    }
    else {
      answer = [((id<JavaxNamingSpiObjectFactory>) nil_chk(factory)) getObjectInstanceWithId:obj withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment];
    }
  }
  return answer;
}

JavaxNamingSpiDirStateFactory_Result *JavaxNamingSpiDirectoryManager_getStateToBindWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_withJavaxNamingDirectoryAttributes_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment, id<JavaxNamingDirectoryAttributes> attrs) {
  JavaxNamingSpiDirectoryManager_initialize();
  ComSunNamingInternalFactoryEnumeration *factories = ComSunNamingInternalResourceManager_getFactoriesWithNSString_withJavaUtilHashtable_withJavaxNamingContext_(JavaxNamingContext_STATE_FACTORIES, environment, nameCtx);
  if (factories == nil) {
    return create_JavaxNamingSpiDirStateFactory_Result_initWithId_withJavaxNamingDirectoryAttributes_(obj, attrs);
  }
  id<JavaxNamingSpiStateFactory> factory;
  id objanswer;
  JavaxNamingSpiDirStateFactory_Result *answer = nil;
  while (answer == nil && [factories hasMore]) {
    factory = (id<JavaxNamingSpiStateFactory>) cast_check([factories next], JavaxNamingSpiStateFactory_class_());
    if ([JavaxNamingSpiDirStateFactory_class_() isInstance:factory]) {
      answer = [((id<JavaxNamingSpiDirStateFactory>) nil_chk(((id<JavaxNamingSpiDirStateFactory>) cast_check(factory, JavaxNamingSpiDirStateFactory_class_())))) getStateToBindWithId:obj withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment withJavaxNamingDirectoryAttributes:attrs];
    }
    else {
      objanswer = [((id<JavaxNamingSpiStateFactory>) nil_chk(factory)) getStateToBindWithId:obj withJavaxNamingName:name withJavaxNamingContext:nameCtx withJavaUtilHashtable:environment];
      if (objanswer != nil) {
        answer = create_JavaxNamingSpiDirStateFactory_Result_initWithId_withJavaxNamingDirectoryAttributes_(objanswer, attrs);
      }
    }
  }
  return (answer != nil) ? answer : create_JavaxNamingSpiDirStateFactory_Result_initWithId_withJavaxNamingDirectoryAttributes_(obj, attrs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxNamingSpiDirectoryManager)
