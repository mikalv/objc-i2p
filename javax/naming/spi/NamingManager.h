//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/javax/naming/spi/NamingManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNamingSpiNamingManager")
#ifdef RESTRICT_JavaxNamingSpiNamingManager
#define INCLUDE_ALL_JavaxNamingSpiNamingManager 0
#else
#define INCLUDE_ALL_JavaxNamingSpiNamingManager 1
#endif
#undef RESTRICT_JavaxNamingSpiNamingManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNamingSpiNamingManager_) && (INCLUDE_ALL_JavaxNamingSpiNamingManager || defined(INCLUDE_JavaxNamingSpiNamingManager))
#define JavaxNamingSpiNamingManager_

@class ComSunNamingInternalVersionHelper;
@class JavaUtilHashtable;
@class JavaxNamingCannotProceedException;
@class JavaxNamingReference;
@protocol JavaxNamingContext;
@protocol JavaxNamingName;
@protocol JavaxNamingSpiInitialContextFactoryBuilder;
@protocol JavaxNamingSpiObjectFactory;
@protocol JavaxNamingSpiObjectFactoryBuilder;
@protocol JavaxNamingSpiResolver;

@interface JavaxNamingSpiNamingManager : NSObject
@property (readonly, class, strong) ComSunNamingInternalVersionHelper *helper NS_SWIFT_NAME(helper);
@property (readonly, copy, class) NSString *CPE NS_SWIFT_NAME(CPE);

+ (ComSunNamingInternalVersionHelper *)helper;

+ (NSString *)CPE;

#pragma mark Public

+ (id<JavaxNamingContext>)getContinuationContextWithJavaxNamingCannotProceedException:(JavaxNamingCannotProceedException *)cpe;

+ (id<JavaxNamingContext>)getInitialContextWithJavaUtilHashtable:(JavaUtilHashtable *)env;

+ (id)getObjectInstanceWithId:(id)refInfo
          withJavaxNamingName:(id<JavaxNamingName>)name
       withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
        withJavaUtilHashtable:(JavaUtilHashtable *)environment;

+ (id)getStateToBindWithId:(id)obj
       withJavaxNamingName:(id<JavaxNamingName>)name
    withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
     withJavaUtilHashtable:(JavaUtilHashtable *)environment;

+ (id<JavaxNamingContext>)getURLContextWithNSString:(NSString *)scheme
                              withJavaUtilHashtable:(JavaUtilHashtable *)environment;

+ (jboolean)hasInitialContextFactoryBuilder;

+ (void)setInitialContextFactoryBuilderWithJavaxNamingSpiInitialContextFactoryBuilder:(id<JavaxNamingSpiInitialContextFactoryBuilder>)builder;

+ (void)setObjectFactoryBuilderWithJavaxNamingSpiObjectFactoryBuilder:(id<JavaxNamingSpiObjectFactoryBuilder>)builder;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (id<JavaxNamingContext>)getContextWithId:(id)obj
                       withJavaxNamingName:(id<JavaxNamingName>)name
                    withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                     withJavaUtilHashtable:(JavaUtilHashtable *)environment;

+ (id<JavaxNamingSpiObjectFactoryBuilder>)getObjectFactoryBuilder;

+ (id<JavaxNamingSpiObjectFactory>)getObjectFactoryFromReferenceWithJavaxNamingReference:(JavaxNamingReference *)ref
                                                                            withNSString:(NSString *)factoryName;

+ (id<JavaxNamingSpiResolver>)getResolverWithId:(id)obj
                            withJavaxNamingName:(id<JavaxNamingName>)name
                         withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                          withJavaUtilHashtable:(JavaUtilHashtable *)environment;

+ (id)processURLAddrsWithJavaxNamingReference:(JavaxNamingReference *)ref
                          withJavaxNamingName:(id<JavaxNamingName>)name
                       withJavaxNamingContext:(id<JavaxNamingContext>)nameCtx
                        withJavaUtilHashtable:(JavaUtilHashtable *)environment;

@end

J2OBJC_STATIC_INIT(JavaxNamingSpiNamingManager)

inline ComSunNamingInternalVersionHelper *JavaxNamingSpiNamingManager_get_helper(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComSunNamingInternalVersionHelper *JavaxNamingSpiNamingManager_helper;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingSpiNamingManager, helper, ComSunNamingInternalVersionHelper *)

inline NSString *JavaxNamingSpiNamingManager_get_CPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxNamingSpiNamingManager_CPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxNamingSpiNamingManager, CPE, NSString *)

FOUNDATION_EXPORT void JavaxNamingSpiNamingManager_init(JavaxNamingSpiNamingManager *self);

FOUNDATION_EXPORT JavaxNamingSpiNamingManager *new_JavaxNamingSpiNamingManager_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNamingSpiNamingManager *create_JavaxNamingSpiNamingManager_init(void);

FOUNDATION_EXPORT void JavaxNamingSpiNamingManager_setObjectFactoryBuilderWithJavaxNamingSpiObjectFactoryBuilder_(id<JavaxNamingSpiObjectFactoryBuilder> builder);

FOUNDATION_EXPORT id<JavaxNamingSpiObjectFactoryBuilder> JavaxNamingSpiNamingManager_getObjectFactoryBuilder(void);

FOUNDATION_EXPORT id<JavaxNamingSpiObjectFactory> JavaxNamingSpiNamingManager_getObjectFactoryFromReferenceWithJavaxNamingReference_withNSString_(JavaxNamingReference *ref, NSString *factoryName);

FOUNDATION_EXPORT id JavaxNamingSpiNamingManager_getObjectInstanceWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(id refInfo, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment);

FOUNDATION_EXPORT id JavaxNamingSpiNamingManager_processURLAddrsWithJavaxNamingReference_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(JavaxNamingReference *ref, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment);

FOUNDATION_EXPORT id<JavaxNamingContext> JavaxNamingSpiNamingManager_getContextWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment);

FOUNDATION_EXPORT id<JavaxNamingSpiResolver> JavaxNamingSpiNamingManager_getResolverWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment);

FOUNDATION_EXPORT id<JavaxNamingContext> JavaxNamingSpiNamingManager_getURLContextWithNSString_withJavaUtilHashtable_(NSString *scheme, JavaUtilHashtable *environment);

FOUNDATION_EXPORT id<JavaxNamingContext> JavaxNamingSpiNamingManager_getInitialContextWithJavaUtilHashtable_(JavaUtilHashtable *env);

FOUNDATION_EXPORT void JavaxNamingSpiNamingManager_setInitialContextFactoryBuilderWithJavaxNamingSpiInitialContextFactoryBuilder_(id<JavaxNamingSpiInitialContextFactoryBuilder> builder);

FOUNDATION_EXPORT jboolean JavaxNamingSpiNamingManager_hasInitialContextFactoryBuilder(void);

FOUNDATION_EXPORT id<JavaxNamingContext> JavaxNamingSpiNamingManager_getContinuationContextWithJavaxNamingCannotProceedException_(JavaxNamingCannotProceedException *cpe);

FOUNDATION_EXPORT id JavaxNamingSpiNamingManager_getStateToBindWithId_withJavaxNamingName_withJavaxNamingContext_withJavaUtilHashtable_(id obj, id<JavaxNamingName> name, id<JavaxNamingContext> nameCtx, JavaUtilHashtable *environment);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNamingSpiNamingManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNamingSpiNamingManager")
