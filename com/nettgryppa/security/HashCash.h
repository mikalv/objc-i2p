//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/com/nettgryppa/security/HashCash.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComNettgryppaSecurityHashCash")
#ifdef RESTRICT_ComNettgryppaSecurityHashCash
#define INCLUDE_ALL_ComNettgryppaSecurityHashCash 0
#else
#define INCLUDE_ALL_ComNettgryppaSecurityHashCash 1
#endif
#undef RESTRICT_ComNettgryppaSecurityHashCash

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComNettgryppaSecurityHashCash_) && (INCLUDE_ALL_ComNettgryppaSecurityHashCash || defined(INCLUDE_ComNettgryppaSecurityHashCash))
#define ComNettgryppaSecurityHashCash_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class JavaUtilCalendar;
@protocol JavaUtilMap;

@interface ComNettgryppaSecurityHashCash : NSObject < JavaLangComparable >
@property (readonly, class) jint DefaultVersion NS_SWIFT_NAME(DefaultVersion);

+ (jint)DefaultVersion;

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)cash;

- (jint)compareToWithId:(ComNettgryppaSecurityHashCash *)other;

- (jboolean)isEqual:(id)obj;

+ (jlong)estimateTimeWithInt:(jint)value;

+ (jint)estimateValueWithInt:(jint)secs;

- (JavaUtilCalendar *)getDate;

- (id<JavaUtilMap>)getExtensions;

- (NSString *)getResource;

- (jint)getValue;

- (jint)getVersion;

- (NSUInteger)hash;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value
                                                withInt:(jint)version_;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                                withInt:(jint)value;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                                withInt:(jint)value
                                                withInt:(jint)version_;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value
                                                withInt:(jint)version_;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                                withInt:(jint)value;

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                                withInt:(jint)value
                                                withInt:(jint)version_;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComNettgryppaSecurityHashCash)

inline jint ComNettgryppaSecurityHashCash_get_DefaultVersion(void);
#define ComNettgryppaSecurityHashCash_DefaultVersion 1
J2OBJC_STATIC_FIELD_CONSTANT(ComNettgryppaSecurityHashCash, DefaultVersion, jint)

FOUNDATION_EXPORT void ComNettgryppaSecurityHashCash_initWithNSString_(ComNettgryppaSecurityHashCash *self, NSString *cash);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *new_ComNettgryppaSecurityHashCash_initWithNSString_(NSString *cash) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *create_ComNettgryppaSecurityHashCash_initWithNSString_(NSString *cash);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_(NSString *resource, jint value);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_withInt_(NSString *resource, jint value, jint version_);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_(NSString *resource, JavaUtilCalendar *date, jint value);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_withInt_(NSString *resource, JavaUtilCalendar *date, jint value, jint version_);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_(NSString *resource, id<JavaUtilMap> extensions, jint value);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_withInt_(NSString *resource, id<JavaUtilMap> extensions, jint value, jint version_);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_(NSString *resource, id<JavaUtilMap> extensions, JavaUtilCalendar *date, jint value);

FOUNDATION_EXPORT ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(NSString *resource, id<JavaUtilMap> extensions, JavaUtilCalendar *date, jint value, jint version_);

FOUNDATION_EXPORT jlong ComNettgryppaSecurityHashCash_estimateTimeWithInt_(jint value);

FOUNDATION_EXPORT jint ComNettgryppaSecurityHashCash_estimateValueWithInt_(jint secs);

J2OBJC_TYPE_LITERAL_HEADER(ComNettgryppaSecurityHashCash)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComNettgryppaSecurityHashCash")
