//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/com/nettgryppa/security/HashCash.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/nettgryppa/security/HashCash.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/security/MessageDigest.h"
#include "java/security/SecureRandom.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "net/i2p/data/DataHelper.h"

@interface ComNettgryppaSecurityHashCash () {
 @public
  NSString *myToken_;
  jint myValue_;
  JavaUtilCalendar *myDate_;
  id<JavaUtilMap> myExtensions_;
  jint myVersion_;
  NSString *myResource_;
}

- (instancetype)init;

+ (NSString *)generateCashWithNSString:(NSString *)prefix
                               withInt:(jint)value
         withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)md;

+ (jlong)bytesToLongWithByteArray:(IOSByteArray *)b;

+ (NSString *)serializeExtensionsWithJavaUtilMap:(id<JavaUtilMap>)extensions;

+ (id<JavaUtilMap>)deserializeExtensionsWithNSString:(NSString *)extensions;

+ (jint)numberOfLeadingZerosWithByteArray:(IOSByteArray *)values;

+ (jint)numberOfLeadingZerosWithByte:(jbyte)value;

+ (void)initEstimates OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(ComNettgryppaSecurityHashCash, myToken_, NSString *)
J2OBJC_FIELD_SETTER(ComNettgryppaSecurityHashCash, myDate_, JavaUtilCalendar *)
J2OBJC_FIELD_SETTER(ComNettgryppaSecurityHashCash, myExtensions_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComNettgryppaSecurityHashCash, myResource_, NSString *)

inline jint ComNettgryppaSecurityHashCash_get_hashLength(void);
#define ComNettgryppaSecurityHashCash_hashLength 160
J2OBJC_STATIC_FIELD_CONSTANT(ComNettgryppaSecurityHashCash, hashLength, jint)

inline NSString *ComNettgryppaSecurityHashCash_get_dateFormatString(void);
static NSString *ComNettgryppaSecurityHashCash_dateFormatString = @"yyMMdd";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComNettgryppaSecurityHashCash, dateFormatString, NSString *)

inline jlong ComNettgryppaSecurityHashCash_get_milliFor16(void);
inline jlong ComNettgryppaSecurityHashCash_set_milliFor16(jlong value);
inline jlong *ComNettgryppaSecurityHashCash_getRef_milliFor16(void);
static jlong ComNettgryppaSecurityHashCash_milliFor16 = -1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComNettgryppaSecurityHashCash, milliFor16, jlong)

__attribute__((unused)) static void ComNettgryppaSecurityHashCash_init(ComNettgryppaSecurityHashCash *self);

__attribute__((unused)) static ComNettgryppaSecurityHashCash *new_ComNettgryppaSecurityHashCash_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComNettgryppaSecurityHashCash *create_ComNettgryppaSecurityHashCash_init(void);

__attribute__((unused)) static NSString *ComNettgryppaSecurityHashCash_generateCashWithNSString_withInt_withJavaSecurityMessageDigest_(NSString *prefix, jint value, JavaSecurityMessageDigest *md);

__attribute__((unused)) static jlong ComNettgryppaSecurityHashCash_bytesToLongWithByteArray_(IOSByteArray *b);

__attribute__((unused)) static NSString *ComNettgryppaSecurityHashCash_serializeExtensionsWithJavaUtilMap_(id<JavaUtilMap> extensions);

__attribute__((unused)) static id<JavaUtilMap> ComNettgryppaSecurityHashCash_deserializeExtensionsWithNSString_(NSString *extensions);

__attribute__((unused)) static jint ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_(IOSByteArray *values);

__attribute__((unused)) static jint ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByte_(jbyte value);

__attribute__((unused)) static void ComNettgryppaSecurityHashCash_initEstimates(void);

@implementation ComNettgryppaSecurityHashCash

+ (jint)DefaultVersion {
  return ComNettgryppaSecurityHashCash_DefaultVersion;
}

- (instancetype)initWithNSString:(NSString *)cash {
  ComNettgryppaSecurityHashCash_initWithNSString_(self, cash);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComNettgryppaSecurityHashCash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                                withInt:(jint)value {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_(resource, value);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                                withInt:(jint)value
                                                withInt:(jint)version_ {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_withInt_(resource, value, version_);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_(resource, date, value);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value
                                                withInt:(jint)version_ {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_withInt_(resource, date, value, version_);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                                withInt:(jint)value {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_(resource, extensions, value);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                                withInt:(jint)value
                                                withInt:(jint)version_ {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_withInt_(resource, extensions, value, version_);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_(resource, extensions, date, value);
}

+ (ComNettgryppaSecurityHashCash *)mintCashWithNSString:(NSString *)resource
                                        withJavaUtilMap:(id<JavaUtilMap>)extensions
                                   withJavaUtilCalendar:(JavaUtilCalendar *)date
                                                withInt:(jint)value
                                                withInt:(jint)version_ {
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, extensions, date, value, version_);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[ComNettgryppaSecurityHashCash class]]) return [((NSString *) nil_chk([self description])) isEqual:[nil_chk(obj) description]];
  else return [super isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [(JreStrcat("$$", @"HashCash:", [self description])) hash]);
}

- (NSString *)description {
  return myToken_;
}

- (id<JavaUtilMap>)getExtensions {
  return myExtensions_;
}

- (NSString *)getResource {
  return myResource_;
}

- (JavaUtilCalendar *)getDate {
  return myDate_;
}

- (jint)getValue {
  return myValue_;
}

- (jint)getVersion {
  return myVersion_;
}

+ (NSString *)generateCashWithNSString:(NSString *)prefix
                               withInt:(jint)value
         withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)md {
  return ComNettgryppaSecurityHashCash_generateCashWithNSString_withInt_withJavaSecurityMessageDigest_(prefix, value, md);
}

+ (jlong)bytesToLongWithByteArray:(IOSByteArray *)b {
  return ComNettgryppaSecurityHashCash_bytesToLongWithByteArray_(b);
}

+ (NSString *)serializeExtensionsWithJavaUtilMap:(id<JavaUtilMap>)extensions {
  return ComNettgryppaSecurityHashCash_serializeExtensionsWithJavaUtilMap_(extensions);
}

+ (id<JavaUtilMap>)deserializeExtensionsWithNSString:(NSString *)extensions {
  return ComNettgryppaSecurityHashCash_deserializeExtensionsWithNSString_(extensions);
}

+ (jint)numberOfLeadingZerosWithByteArray:(IOSByteArray *)values {
  return ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_(values);
}

+ (jint)numberOfLeadingZerosWithByte:(jbyte)value {
  return ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByte_(value);
}

+ (jlong)estimateTimeWithInt:(jint)value {
  return ComNettgryppaSecurityHashCash_estimateTimeWithInt_(value);
}

+ (jint)estimateValueWithInt:(jint)secs {
  return ComNettgryppaSecurityHashCash_estimateValueWithInt_(secs);
}

+ (void)initEstimates {
  ComNettgryppaSecurityHashCash_initEstimates();
}

- (jint)compareToWithId:(ComNettgryppaSecurityHashCash *)other {
  cast_chk(other, [ComNettgryppaSecurityHashCash class]);
  if (nil == other) @throw create_JavaLangNullPointerException_init();
  return [JavaLangInteger_valueOfWithInt_([self getValue]) compareToWithId:JavaLangInteger_valueOfWithInt_([other getValue])];
}

- (void)dealloc {
  RELEASE_(myToken_);
  RELEASE_(myDate_);
  RELEASE_(myExtensions_);
  RELEASE_(myResource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 3, 1, -1, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 4, 1, -1, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 5, 1, -1, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 6, 1, -1, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 7, 1, 8, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 9, 1, 10, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 11, 1, 12, -1, -1 },
    { NULL, "LComNettgryppaSecurityHashCash;", 0x9, 2, 13, 1, 14, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 20, 21, 1, -1, -1, -1 },
    { NULL, "J", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 24, 25, -1, 26, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 27, 0, -1, 28, -1, -1 },
    { NULL, "I", 0xa, 29, 23, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 29, 30, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 31, 32, 1, -1, -1, -1 },
    { NULL, "I", 0x9, 33, 32, 1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 34, 35, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(mintCashWithNSString:withInt:);
  methods[3].selector = @selector(mintCashWithNSString:withInt:withInt:);
  methods[4].selector = @selector(mintCashWithNSString:withJavaUtilCalendar:withInt:);
  methods[5].selector = @selector(mintCashWithNSString:withJavaUtilCalendar:withInt:withInt:);
  methods[6].selector = @selector(mintCashWithNSString:withJavaUtilMap:withInt:);
  methods[7].selector = @selector(mintCashWithNSString:withJavaUtilMap:withInt:withInt:);
  methods[8].selector = @selector(mintCashWithNSString:withJavaUtilMap:withJavaUtilCalendar:withInt:);
  methods[9].selector = @selector(mintCashWithNSString:withJavaUtilMap:withJavaUtilCalendar:withInt:withInt:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(getExtensions);
  methods[14].selector = @selector(getResource);
  methods[15].selector = @selector(getDate);
  methods[16].selector = @selector(getValue);
  methods[17].selector = @selector(getVersion);
  methods[18].selector = @selector(generateCashWithNSString:withInt:withJavaSecurityMessageDigest:);
  methods[19].selector = @selector(bytesToLongWithByteArray:);
  methods[20].selector = @selector(serializeExtensionsWithJavaUtilMap:);
  methods[21].selector = @selector(deserializeExtensionsWithNSString:);
  methods[22].selector = @selector(numberOfLeadingZerosWithByteArray:);
  methods[23].selector = @selector(numberOfLeadingZerosWithByte:);
  methods[24].selector = @selector(estimateTimeWithInt:);
  methods[25].selector = @selector(estimateValueWithInt:);
  methods[26].selector = @selector(initEstimates);
  methods[27].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DefaultVersion", "I", .constantValue.asInt = ComNettgryppaSecurityHashCash_DefaultVersion, 0x19, -1, -1, -1, -1 },
    { "hashLength", "I", .constantValue.asInt = ComNettgryppaSecurityHashCash_hashLength, 0x1a, -1, -1, -1, -1 },
    { "dateFormatString", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "milliFor16", "J", .constantValue.asLong = 0, 0xa, -1, 37, -1, -1 },
    { "myToken_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myDate_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myExtensions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "myVersion_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myResource_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "mintCash", "LNSString;I", "LNSString;II", "LNSString;LJavaUtilCalendar;I", "LNSString;LJavaUtilCalendar;II", "LNSString;LJavaUtilMap;I", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;I)Lcom/nettgryppa/security/HashCash;", "LNSString;LJavaUtilMap;II", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;II)Lcom/nettgryppa/security/HashCash;", "LNSString;LJavaUtilMap;LJavaUtilCalendar;I", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;Ljava/util/Calendar;I)Lcom/nettgryppa/security/HashCash;", "LNSString;LJavaUtilMap;LJavaUtilCalendar;II", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;Ljava/util/Calendar;II)Lcom/nettgryppa/security/HashCash;", "equals", "LNSObject;", "hashCode", "toString", "()Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "generateCash", "LNSString;ILJavaSecurityMessageDigest;", "bytesToLong", "[B", "serializeExtensions", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;)Ljava/lang/String;", "deserializeExtensions", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "numberOfLeadingZeros", "B", "estimateTime", "I", "estimateValue", "compareTo", "LComNettgryppaSecurityHashCash;", &ComNettgryppaSecurityHashCash_dateFormatString, &ComNettgryppaSecurityHashCash_milliFor16, "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "Ljava/lang/Object;Ljava/lang/Comparable<Lcom/nettgryppa/security/HashCash;>;" };
  static const J2ObjcClassInfo _ComNettgryppaSecurityHashCash = { "HashCash", "com.nettgryppa.security", ptrTable, methods, fields, 7, 0x1, 28, 10, -1, -1, -1, 39, -1 };
  return &_ComNettgryppaSecurityHashCash;
}

@end

void ComNettgryppaSecurityHashCash_initWithNSString_(ComNettgryppaSecurityHashCash *self, NSString *cash) {
  NSObject_init(self);
  JreStrongAssign(&self->myToken_, cash);
  IOSObjectArray *parts = [((NSString *) nil_chk(cash)) java_split:@":"];
  self->myVersion_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(parts), 0));
  if (self->myVersion_ < 0 || self->myVersion_ > 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Only supported versions are 0 and 1");
  if ((self->myVersion_ == 0 && parts->size_ != 6) || (self->myVersion_ == 1 && parts->size_ != 7)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Improperly formed HashCash");
  @try {
    jint index = 1;
    if (self->myVersion_ == 1) self->myValue_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(parts, index++));
    else self->myValue_ = 0;
    JavaTextSimpleDateFormat *dateFormat = create_JavaTextSimpleDateFormat_initWithNSString_(ComNettgryppaSecurityHashCash_dateFormatString);
    JavaUtilCalendar *tempCal = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
    [((JavaUtilCalendar *) nil_chk(tempCal)) setTimeWithJavaUtilDate:[dateFormat parseWithNSString:IOSObjectArray_Get(parts, index++)]];
    JreStrongAssign(&self->myResource_, IOSObjectArray_Get(parts, index++));
    JreStrongAssign(&self->myExtensions_, ComNettgryppaSecurityHashCash_deserializeExtensionsWithNSString_(IOSObjectArray_Get(parts, index++)));
    JavaSecurityMessageDigest *md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA1");
    [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(cash)];
    IOSByteArray *tempBytes = [md digest];
    jint tempValue = ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_(tempBytes);
    if (self->myVersion_ == 0) self->myValue_ = tempValue;
    else if (self->myVersion_ == 1) self->myValue_ = (tempValue > self->myValue_ ? self->myValue_ : tempValue);
  }
  @catch (JavaTextParseException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(@"Improperly formed HashCash", ex);
  }
}

ComNettgryppaSecurityHashCash *new_ComNettgryppaSecurityHashCash_initWithNSString_(NSString *cash) {
  J2OBJC_NEW_IMPL(ComNettgryppaSecurityHashCash, initWithNSString_, cash)
}

ComNettgryppaSecurityHashCash *create_ComNettgryppaSecurityHashCash_initWithNSString_(NSString *cash) {
  J2OBJC_CREATE_IMPL(ComNettgryppaSecurityHashCash, initWithNSString_, cash)
}

void ComNettgryppaSecurityHashCash_init(ComNettgryppaSecurityHashCash *self) {
  NSObject_init(self);
}

ComNettgryppaSecurityHashCash *new_ComNettgryppaSecurityHashCash_init() {
  J2OBJC_NEW_IMPL(ComNettgryppaSecurityHashCash, init)
}

ComNettgryppaSecurityHashCash *create_ComNettgryppaSecurityHashCash_init() {
  J2OBJC_CREATE_IMPL(ComNettgryppaSecurityHashCash, init)
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_(NSString *resource, jint value) {
  ComNettgryppaSecurityHashCash_initialize();
  JavaUtilCalendar *now = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, nil, now, value, ComNettgryppaSecurityHashCash_DefaultVersion);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_withInt_(NSString *resource, jint value, jint version_) {
  ComNettgryppaSecurityHashCash_initialize();
  JavaUtilCalendar *now = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, nil, now, value, version_);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_(NSString *resource, JavaUtilCalendar *date, jint value) {
  ComNettgryppaSecurityHashCash_initialize();
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, nil, date, value, ComNettgryppaSecurityHashCash_DefaultVersion);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilCalendar_withInt_withInt_(NSString *resource, JavaUtilCalendar *date, jint value, jint version_) {
  ComNettgryppaSecurityHashCash_initialize();
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, nil, date, value, version_);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_(NSString *resource, id<JavaUtilMap> extensions, jint value) {
  ComNettgryppaSecurityHashCash_initialize();
  JavaUtilCalendar *now = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, extensions, now, value, ComNettgryppaSecurityHashCash_DefaultVersion);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withInt_withInt_(NSString *resource, id<JavaUtilMap> extensions, jint value, jint version_) {
  ComNettgryppaSecurityHashCash_initialize();
  JavaUtilCalendar *now = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, extensions, now, value, version_);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_(NSString *resource, id<JavaUtilMap> extensions, JavaUtilCalendar *date, jint value) {
  ComNettgryppaSecurityHashCash_initialize();
  return ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(resource, extensions, date, value, ComNettgryppaSecurityHashCash_DefaultVersion);
}

ComNettgryppaSecurityHashCash *ComNettgryppaSecurityHashCash_mintCashWithNSString_withJavaUtilMap_withJavaUtilCalendar_withInt_withInt_(NSString *resource, id<JavaUtilMap> extensions, JavaUtilCalendar *date, jint value, jint version_) {
  ComNettgryppaSecurityHashCash_initialize();
  if (version_ < 0 || version_ > 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Only supported versions are 0 and 1");
  if (value < 0 || value > ComNettgryppaSecurityHashCash_hashLength) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Value must be between 0 and ", ComNettgryppaSecurityHashCash_hashLength));
  if ([((NSString *) nil_chk(resource)) java_contains:@":"]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Resource may not contain a colon.");
  ComNettgryppaSecurityHashCash *result = create_ComNettgryppaSecurityHashCash_init();
  JavaSecurityMessageDigest *md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA1");
  JreStrongAssign(&result->myResource_, resource);
  JreStrongAssign(&result->myExtensions_, (nil == extensions ? create_JavaUtilHashMap_init() : extensions));
  JreStrongAssign(&result->myDate_, date);
  result->myVersion_ = version_;
  NSString *prefix;
  JavaTextSimpleDateFormat *dateFormat = create_JavaTextSimpleDateFormat_initWithNSString_(ComNettgryppaSecurityHashCash_dateFormatString);
  switch (version_) {
    case 0:
    prefix = JreStrcat("IC$C$C$C", version_, ':', [dateFormat formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(date)) getTime]], ':', resource, ':', ComNettgryppaSecurityHashCash_serializeExtensionsWithJavaUtilMap_(extensions), ':');
    JreStrongAssign(&result->myToken_, ComNettgryppaSecurityHashCash_generateCashWithNSString_withInt_withJavaSecurityMessageDigest_(prefix, value, md));
    [((JavaSecurityMessageDigest *) nil_chk(md)) reset];
    [md updateWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(result->myToken_)];
    result->myValue_ = ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_([md digest]);
    break;
    case 1:
    result->myValue_ = value;
    prefix = JreStrcat("ICIC$C$C$C", version_, ':', value, ':', [dateFormat formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(date)) getTime]], ':', resource, ':', ComNettgryppaSecurityHashCash_serializeExtensionsWithJavaUtilMap_(extensions), ':');
    JreStrongAssign(&result->myToken_, ComNettgryppaSecurityHashCash_generateCashWithNSString_withInt_withJavaSecurityMessageDigest_(prefix, value, md));
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Only supported versions are 0 and 1");
  }
  return result;
}

NSString *ComNettgryppaSecurityHashCash_generateCashWithNSString_withInt_withJavaSecurityMessageDigest_(NSString *prefix, jint value, JavaSecurityMessageDigest *md) {
  ComNettgryppaSecurityHashCash_initialize();
  JavaSecuritySecureRandom *rnd = JavaSecuritySecureRandom_getInstanceWithNSString_(@"SHA1PRNG");
  IOSByteArray *tmpBytes = [IOSByteArray arrayWithLength:8];
  [((JavaSecuritySecureRandom *) nil_chk(rnd)) nextBytesWithByteArray:tmpBytes];
  jlong random = ComNettgryppaSecurityHashCash_bytesToLongWithByteArray_(tmpBytes);
  [rnd nextBytesWithByteArray:tmpBytes];
  jlong counter = ComNettgryppaSecurityHashCash_bytesToLongWithByteArray_(tmpBytes);
  prefix = JreStrcat("$$C", prefix, JavaLangLong_toHexStringWithLong_(random), ':');
  NSString *temp;
  jint tempValue;
  IOSByteArray *bArray;
  do {
    counter++;
    temp = JreStrcat("$$", prefix, JavaLangLong_toHexStringWithLong_(counter));
    [((JavaSecurityMessageDigest *) nil_chk(md)) reset];
    [md updateWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(temp)];
    bArray = [md digest];
    tempValue = ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_(bArray);
  }
  while (tempValue < value);
  return temp;
}

jlong ComNettgryppaSecurityHashCash_bytesToLongWithByteArray_(IOSByteArray *b) {
  ComNettgryppaSecurityHashCash_initialize();
  jlong l = 0;
  l |= IOSByteArray_Get(nil_chk(b), 0) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 1) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 2) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 3) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 4) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 5) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 6) & (jint) 0xFF;
  JreLShiftAssignLong(&l, 8);
  l |= IOSByteArray_Get(b, 7) & (jint) 0xFF;
  return l;
}

NSString *ComNettgryppaSecurityHashCash_serializeExtensionsWithJavaUtilMap_(id<JavaUtilMap> extensions) {
  ComNettgryppaSecurityHashCash_initialize();
  if (nil == extensions || [extensions isEmpty]) return @"";
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  id<JavaUtilList> tempList;
  jboolean first = true;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([extensions entrySet])) {
    NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if ([((NSString *) nil_chk(key)) java_contains:@":"] || [key java_contains:@";"] || [key java_contains:@"="]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Extension key contains an illegal character. ", key));
    if (!first) [result appendWithNSString:@";"];
    first = false;
    [result appendWithNSString:key];
    tempList = [entry_ getValue];
    if (nil != tempList) {
      [result appendWithNSString:@"="];
      for (jint i = 0; i < [tempList size]; i++) {
        if ([((NSString *) nil_chk([tempList getWithInt:i])) java_contains:@":"] || [((NSString *) nil_chk([tempList getWithInt:i])) java_contains:@";"] || [((NSString *) nil_chk([tempList getWithInt:i])) java_contains:@","]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Extension value contains an illegal character. ", [tempList getWithInt:i]));
        if (i > 0) [result appendWithNSString:@","];
        [result appendWithNSString:[tempList getWithInt:i]];
      }
    }
  }
  return [result description];
}

id<JavaUtilMap> ComNettgryppaSecurityHashCash_deserializeExtensionsWithNSString_(NSString *extensions) {
  ComNettgryppaSecurityHashCash_initialize();
  id<JavaUtilMap> result = create_JavaUtilHashMap_init();
  if (nil == extensions || [extensions java_length] == 0) return result;
  IOSObjectArray *items = [extensions java_split:@";"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(items))->size_; i++) {
    IOSObjectArray *parts = [((NSString *) nil_chk(IOSObjectArray_Get(items, i))) java_split:@"=" limit:2];
    if (((IOSObjectArray *) nil_chk(parts))->size_ == 1) [result putWithId:IOSObjectArray_Get(parts, 0) withId:nil];
    else [result putWithId:IOSObjectArray_Get(parts, 0) withId:JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(IOSObjectArray_Get(parts, 1))) java_split:@","])];
  }
  return result;
}

jint ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByteArray_(IOSByteArray *values) {
  ComNettgryppaSecurityHashCash_initialize();
  jint result = 0;
  jint temp = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(values))->size_; i++) {
    temp = ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByte_(IOSByteArray_Get(values, i));
    result += temp;
    if (temp != 8) break;
  }
  return result;
}

jint ComNettgryppaSecurityHashCash_numberOfLeadingZerosWithByte_(jbyte value) {
  ComNettgryppaSecurityHashCash_initialize();
  if (value < 0) return 0;
  if (value < 1) return 8;
  else if (value < 2) return 7;
  else if (value < 4) return 6;
  else if (value < 8) return 5;
  else if (value < 16) return 4;
  else if (value < 32) return 3;
  else if (value < 64) return 2;
  else if (value < 128) return 1;
  else return 0;
}

jlong ComNettgryppaSecurityHashCash_estimateTimeWithInt_(jint value) {
  ComNettgryppaSecurityHashCash_initialize();
  ComNettgryppaSecurityHashCash_initEstimates();
  return JreFpToLong((ComNettgryppaSecurityHashCash_milliFor16 * JavaLangMath_powWithDouble_withDouble_(2, value - 16)));
}

jint ComNettgryppaSecurityHashCash_estimateValueWithInt_(jint secs) {
  ComNettgryppaSecurityHashCash_initialize();
  ComNettgryppaSecurityHashCash_initEstimates();
  jint result = 0;
  jlong millis = secs * 1000LL * 65536;
  millis /= ComNettgryppaSecurityHashCash_milliFor16;
  while (millis > 1) {
    result++;
    millis /= 2;
  }
  return result;
}

void ComNettgryppaSecurityHashCash_initEstimates() {
  ComNettgryppaSecurityHashCash_initialize();
  if (ComNettgryppaSecurityHashCash_milliFor16 == -1) {
    jlong duration;
    duration = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis];
    for (jint i = 0; i < 11; i++) {
      ComNettgryppaSecurityHashCash_mintCashWithNSString_withInt_(@"estimation", 16);
    }
    duration = [((JavaUtilCalendar *) nil_chk(JavaUtilCalendar_getInstance())) getTimeInMillis] - duration;
    ComNettgryppaSecurityHashCash_milliFor16 = (duration / 10);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComNettgryppaSecurityHashCash)
