//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/maxmind/geoip/LookupService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/maxmind/geoip/Country.h"
#include "com/maxmind/geoip/DatabaseInfo.h"
#include "com/maxmind/geoip/InvalidDatabaseException.h"
#include "com/maxmind/geoip/Location.h"
#include "com/maxmind/geoip/LookupService.h"
#include "com/maxmind/geoip/Region.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComMaxmindGeoipLookupService () {
 @public
  JavaIoRandomAccessFile *file_;
  JavaIoFile *databaseFile_;
  ComMaxmindGeoipDatabaseInfo *databaseInfo_;
  JavaNioCharsetCharsetDecoder *charsetDecoder_;
  jbyte databaseType_;
  IOSIntArray *databaseSegments_;
  jint recordLength_;
  jint dboptions_;
  IOSByteArray *dbbuffer_;
  IOSByteArray *index_cache_;
  jlong mtime_;
  jint last_netmask_;
  ComMaxmindGeoipCountry *UNKNOWN_COUNTRY_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (ComMaxmindGeoipLocation *)readCityRecordWithInt:(jint)seekCountry;

- (JavaNioByteBuffer *)readRecordBufWithInt:(jint)seek
                                    withInt:(jint)maxLength;

- (NSString *)readStringWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

+ (jfloat)readAngleWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

+ (jint)readMetroAreaComboWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

- (NSString *)readOrgRecordWithInt:(jint)seekOrg;

- (jint)seekCountryV6WithJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (jint)seekCountryWithLong:(jlong)ipAddress;

- (void)readNodeWithByteArray:(IOSByteArray *)buf
                 withIntArray:(IOSIntArray *)x
                      withInt:(jint)offset;

+ (jlong)bytesToLongWithByteArray:(IOSByteArray *)address;

+ (jint)unsignedByteToIntWithByte:(jbyte)b;

@end

J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, file_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, databaseFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, databaseInfo_, ComMaxmindGeoipDatabaseInfo *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, charsetDecoder_, JavaNioCharsetCharsetDecoder *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, databaseSegments_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, dbbuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, index_cache_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComMaxmindGeoipLookupService, UNKNOWN_COUNTRY_, ComMaxmindGeoipCountry *)

inline JavaNioCharsetCharset *ComMaxmindGeoipLookupService_get_charset(void);
static JavaNioCharsetCharset *ComMaxmindGeoipLookupService_charset;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMaxmindGeoipLookupService, charset, JavaNioCharsetCharset *)

inline jint ComMaxmindGeoipLookupService_get_US_OFFSET(void);
#define ComMaxmindGeoipLookupService_US_OFFSET 1
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, US_OFFSET, jint)

inline jint ComMaxmindGeoipLookupService_get_CANADA_OFFSET(void);
#define ComMaxmindGeoipLookupService_CANADA_OFFSET 677
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, CANADA_OFFSET, jint)

inline jint ComMaxmindGeoipLookupService_get_WORLD_OFFSET(void);
#define ComMaxmindGeoipLookupService_WORLD_OFFSET 1353
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, WORLD_OFFSET, jint)

inline jint ComMaxmindGeoipLookupService_get_FIPS_RANGE(void);
#define ComMaxmindGeoipLookupService_FIPS_RANGE 360
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, FIPS_RANGE, jint)

inline jint ComMaxmindGeoipLookupService_get_COUNTRY_BEGIN(void);
#define ComMaxmindGeoipLookupService_COUNTRY_BEGIN 16776960
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, COUNTRY_BEGIN, jint)

inline jint ComMaxmindGeoipLookupService_get_STATE_BEGIN_REV0(void);
#define ComMaxmindGeoipLookupService_STATE_BEGIN_REV0 16700000
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, STATE_BEGIN_REV0, jint)

inline jint ComMaxmindGeoipLookupService_get_STATE_BEGIN_REV1(void);
#define ComMaxmindGeoipLookupService_STATE_BEGIN_REV1 16000000
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, STATE_BEGIN_REV1, jint)

inline jint ComMaxmindGeoipLookupService_get_STRUCTURE_INFO_MAX_SIZE(void);
#define ComMaxmindGeoipLookupService_STRUCTURE_INFO_MAX_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, STRUCTURE_INFO_MAX_SIZE, jint)

inline jint ComMaxmindGeoipLookupService_get_DATABASE_INFO_MAX_SIZE(void);
#define ComMaxmindGeoipLookupService_DATABASE_INFO_MAX_SIZE 100
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, DATABASE_INFO_MAX_SIZE, jint)

inline jint ComMaxmindGeoipLookupService_get_SEGMENT_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_SEGMENT_RECORD_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, SEGMENT_RECORD_LENGTH, jint)

inline jint ComMaxmindGeoipLookupService_get_STANDARD_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, STANDARD_RECORD_LENGTH, jint)

inline jint ComMaxmindGeoipLookupService_get_ORG_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_ORG_RECORD_LENGTH 4
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, ORG_RECORD_LENGTH, jint)

inline jint ComMaxmindGeoipLookupService_get_MAX_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_MAX_RECORD_LENGTH 4
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, MAX_RECORD_LENGTH, jint)

inline jint ComMaxmindGeoipLookupService_get_MAX_ORG_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_MAX_ORG_RECORD_LENGTH 300
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, MAX_ORG_RECORD_LENGTH, jint)

inline jint ComMaxmindGeoipLookupService_get_FULL_RECORD_LENGTH(void);
#define ComMaxmindGeoipLookupService_FULL_RECORD_LENGTH 60
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLookupService, FULL_RECORD_LENGTH, jint)

inline IOSObjectArray *ComMaxmindGeoipLookupService_get_countryCode(void);
static IOSObjectArray *ComMaxmindGeoipLookupService_countryCode;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMaxmindGeoipLookupService, countryCode, IOSObjectArray *)

inline IOSObjectArray *ComMaxmindGeoipLookupService_get_countryName(void);
static IOSObjectArray *ComMaxmindGeoipLookupService_countryName;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComMaxmindGeoipLookupService, countryName, IOSObjectArray *)

__attribute__((unused)) static void ComMaxmindGeoipLookupService_init__(ComMaxmindGeoipLookupService *self);

__attribute__((unused)) static ComMaxmindGeoipLocation *ComMaxmindGeoipLookupService_readCityRecordWithInt_(ComMaxmindGeoipLookupService *self, jint seekCountry);

__attribute__((unused)) static JavaNioByteBuffer *ComMaxmindGeoipLookupService_readRecordBufWithInt_withInt_(ComMaxmindGeoipLookupService *self, jint seek, jint maxLength);

__attribute__((unused)) static NSString *ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(ComMaxmindGeoipLookupService *self, JavaNioByteBuffer *buffer);

__attribute__((unused)) static jfloat ComMaxmindGeoipLookupService_readAngleWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer);

__attribute__((unused)) static jint ComMaxmindGeoipLookupService_readMetroAreaComboWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer);

__attribute__((unused)) static NSString *ComMaxmindGeoipLookupService_readOrgRecordWithInt_(ComMaxmindGeoipLookupService *self, jint seekOrg);

__attribute__((unused)) static jint ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(ComMaxmindGeoipLookupService *self, JavaNetInetAddress *addr);

__attribute__((unused)) static jint ComMaxmindGeoipLookupService_seekCountryWithLong_(ComMaxmindGeoipLookupService *self, jlong ipAddress);

__attribute__((unused)) static void ComMaxmindGeoipLookupService_readNodeWithByteArray_withIntArray_withInt_(ComMaxmindGeoipLookupService *self, IOSByteArray *buf, IOSIntArray *x, jint offset);

__attribute__((unused)) static jlong ComMaxmindGeoipLookupService_bytesToLongWithByteArray_(IOSByteArray *address);

__attribute__((unused)) static jint ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_(jbyte b);

J2OBJC_INITIALIZED_DEFN(ComMaxmindGeoipLookupService)

@implementation ComMaxmindGeoipLookupService

+ (jint)GEOIP_STANDARD {
  return ComMaxmindGeoipLookupService_GEOIP_STANDARD;
}

+ (jint)GEOIP_MEMORY_CACHE {
  return ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE;
}

+ (jint)GEOIP_CHECK_CACHE {
  return ComMaxmindGeoipLookupService_GEOIP_CHECK_CACHE;
}

+ (jint)GEOIP_INDEX_CACHE {
  return ComMaxmindGeoipLookupService_GEOIP_INDEX_CACHE;
}

+ (jint)GEOIP_UNKNOWN_SPEED {
  return ComMaxmindGeoipLookupService_GEOIP_UNKNOWN_SPEED;
}

+ (jint)GEOIP_DIALUP_SPEED {
  return ComMaxmindGeoipLookupService_GEOIP_DIALUP_SPEED;
}

+ (jint)GEOIP_CABLEDSL_SPEED {
  return ComMaxmindGeoipLookupService_GEOIP_CABLEDSL_SPEED;
}

+ (jint)GEOIP_CORPORATE_SPEED {
  return ComMaxmindGeoipLookupService_GEOIP_CORPORATE_SPEED;
}

- (instancetype)initWithNSString:(NSString *)databaseFile {
  ComMaxmindGeoipLookupService_initWithNSString_(self, databaseFile);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)databaseFile {
  ComMaxmindGeoipLookupService_initWithJavaIoFile_(self, databaseFile);
  return self;
}

- (instancetype)initWithNSString:(NSString *)databaseFile
                         withInt:(jint)options {
  ComMaxmindGeoipLookupService_initWithNSString_withInt_(self, databaseFile, options);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)databaseFile
                           withInt:(jint)options {
  ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(self, databaseFile, options);
  return self;
}

- (void)init__ {
  ComMaxmindGeoipLookupService_init__(self);
}

- (void)close {
  @synchronized(self) {
    @try {
      if (file_ != nil) {
        [file_ close];
      }
      JreStrongAssign(&file_, nil);
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

- (id<JavaUtilList>)getAllCountryNames {
  return JavaUtilArrays_asListWithNSObjectArray_(JavaUtilArrays_copyOfWithNSObjectArray_withInt_(ComMaxmindGeoipLookupService_countryName, ((IOSObjectArray *) nil_chk(ComMaxmindGeoipLookupService_countryName))->size_));
}

- (id<JavaUtilList>)getAllCountryCodes {
  return JavaUtilArrays_asListWithNSObjectArray_(JavaUtilArrays_copyOfWithNSObjectArray_withInt_(ComMaxmindGeoipLookupService_countryCode, ((IOSObjectArray *) nil_chk(ComMaxmindGeoipLookupService_countryCode))->size_));
}

- (ComMaxmindGeoipCountry *)getCountryV6WithNSString:(NSString *)ipAddress {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(ipAddress);
  }
  @catch (JavaNetUnknownHostException *e) {
    return UNKNOWN_COUNTRY_;
  }
  return [self getCountryV6WithJavaNetInetAddress:addr];
}

- (ComMaxmindGeoipCountry *)getCountryWithNSString:(NSString *)ipAddress {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(ipAddress);
  }
  @catch (JavaNetUnknownHostException *e) {
    return UNKNOWN_COUNTRY_;
  }
  return [self getCountryWithJavaNetInetAddress:addr];
}

- (ComMaxmindGeoipCountry *)getCountryWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress {
  @synchronized(self) {
    return JreRetainedLocalValue([self getCountryWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(ipAddress)) getAddress])]);
  }
}

- (ComMaxmindGeoipCountry *)getCountryV6WithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  @synchronized(self) {
    if (file_ == nil && (dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Database has been closed.");
    }
    jint ret = ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(self, addr) - ComMaxmindGeoipLookupService_COUNTRY_BEGIN;
    if (ret == 0) {
      return JreRetainedLocalValue(UNKNOWN_COUNTRY_);
    }
    else {
      return JreRetainedLocalValue(create_ComMaxmindGeoipCountry_initWithNSString_withNSString_(IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryCode), ret), IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryName), ret)));
    }
  }
}

- (ComMaxmindGeoipCountry *)getCountryWithLong:(jlong)ipAddress {
  @synchronized(self) {
    if (file_ == nil && (dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Database has been closed.");
    }
    jint ret = ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipAddress) - ComMaxmindGeoipLookupService_COUNTRY_BEGIN;
    if (ret == 0) {
      return JreRetainedLocalValue(UNKNOWN_COUNTRY_);
    }
    else {
      return JreRetainedLocalValue(create_ComMaxmindGeoipCountry_initWithNSString_withNSString_(IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryCode), ret), IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryName), ret)));
    }
  }
}

- (jint)getIDWithNSString:(NSString *)ipAddress {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(ipAddress);
  }
  @catch (JavaNetUnknownHostException *e) {
    return 0;
  }
  return [self getIDWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(addr)) getAddress])];
}

- (jint)getIDWithJavaNetInetAddress:(JavaNetInetAddress *)ipAddress {
  return [self getIDWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(ipAddress)) getAddress])];
}

- (jint)getIDWithLong:(jlong)ipAddress {
  @synchronized(self) {
    if (file_ == nil && (dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"Database has been closed.");
    }
    return ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipAddress) - IOSIntArray_Get(nil_chk(databaseSegments_), 0);
  }
}

- (jint)last_netmask {
  return last_netmask_;
}

- (void)netmaskWithInt:(jint)nm {
  last_netmask_ = nm;
}

- (ComMaxmindGeoipDatabaseInfo *)getDatabaseInfo {
  @synchronized(self) {
    if (databaseInfo_ != nil) {
      return JreRetainedLocalValue(databaseInfo_);
    }
    @try {
      [self _check_mtime];
      jboolean hasStructureInfo = false;
      IOSByteArray *delim = [IOSByteArray arrayWithLength:3];
      [((JavaIoRandomAccessFile *) nil_chk(file_)) seekWithLong:[file_ length] - 3];
      for (jint i = 0; i < ComMaxmindGeoipLookupService_STRUCTURE_INFO_MAX_SIZE; i++) {
        jint read = [((JavaIoRandomAccessFile *) nil_chk(file_)) readWithByteArray:delim];
        if (read == 3 && (IOSByteArray_Get(delim, 0) & (jint) 0xFF) == 255 && (IOSByteArray_Get(delim, 1) & (jint) 0xFF) == 255 && (IOSByteArray_Get(delim, 2) & (jint) 0xFF) == 255) {
          hasStructureInfo = true;
          break;
        }
        [((JavaIoRandomAccessFile *) nil_chk(file_)) seekWithLong:[file_ getFilePointer] - 4];
      }
      if (hasStructureInfo) {
        [((JavaIoRandomAccessFile *) nil_chk(file_)) seekWithLong:[file_ getFilePointer] - 6];
      }
      else {
        [((JavaIoRandomAccessFile *) nil_chk(file_)) seekWithLong:[file_ length] - 3];
      }
      for (jint i = 0; i < ComMaxmindGeoipLookupService_DATABASE_INFO_MAX_SIZE; i++) {
        [((JavaIoRandomAccessFile *) nil_chk(file_)) readFullyWithByteArray:delim];
        if (IOSByteArray_Get(delim, 0) == 0 && IOSByteArray_Get(delim, 1) == 0 && IOSByteArray_Get(delim, 2) == 0) {
          IOSByteArray *dbInfo = [IOSByteArray arrayWithLength:i];
          [((JavaIoRandomAccessFile *) nil_chk(file_)) readFullyWithByteArray:dbInfo];
          JreStrongAssignAndConsume(&databaseInfo_, new_ComMaxmindGeoipDatabaseInfo_initWithNSString_([NSString java_stringWithBytes:dbInfo charset:ComMaxmindGeoipLookupService_charset]));
          return JreRetainedLocalValue(databaseInfo_);
        }
        [((JavaIoRandomAccessFile *) nil_chk(file_)) seekWithLong:[file_ getFilePointer] - 4];
      }
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error reading database info", e);
    }
    return JreRetainedLocalValue(create_ComMaxmindGeoipDatabaseInfo_initWithNSString_(@""));
  }
}

- (void)_check_mtime {
  @synchronized(self) {
    @try {
      if ((dboptions_ & ComMaxmindGeoipLookupService_GEOIP_CHECK_CACHE) != 0) {
        jlong t = [((JavaIoFile *) nil_chk(databaseFile_)) lastModified];
        if (t != mtime_) {
          [self close];
          JreStrongAssignAndConsume(&file_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(databaseFile_, @"r"));
          JreStrongAssign(&databaseInfo_, nil);
          ComMaxmindGeoipLookupService_init__(self);
        }
      }
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Database not found", e);
    }
  }
}

- (ComMaxmindGeoipLocation *)getLocationV6WithNSString:(NSString *)str {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(str);
  }
  @catch (JavaNetUnknownHostException *e) {
    return nil;
  }
  return [self getLocationV6WithJavaNetInetAddress:addr];
}

- (ComMaxmindGeoipLocation *)getLocationWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return [self getLocationWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(addr)) getAddress])];
}

- (ComMaxmindGeoipLocation *)getLocationWithNSString:(NSString *)str {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(str);
  }
  @catch (JavaNetUnknownHostException *e) {
    return nil;
  }
  return [self getLocationWithJavaNetInetAddress:addr];
}

- (ComMaxmindGeoipRegion *)getRegionWithNSString:(NSString *)str {
  @synchronized(self) {
    JavaNetInetAddress *addr;
    @try {
      addr = JavaNetInetAddress_getByNameWithNSString_(str);
    }
    @catch (JavaNetUnknownHostException *e) {
      return JreRetainedLocalValue(nil);
    }
    return JreRetainedLocalValue([self getRegionWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(addr)) getAddress])]);
  }
}

- (ComMaxmindGeoipRegion *)getRegionWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  @synchronized(self) {
    return JreRetainedLocalValue([self getRegionWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(addr)) getAddress])]);
  }
}

- (ComMaxmindGeoipRegion *)getRegionWithLong:(jlong)ipnum {
  @synchronized(self) {
    ComMaxmindGeoipRegion *record = create_ComMaxmindGeoipRegion_init();
    jint seek_region;
    if (databaseType_ == ComMaxmindGeoipDatabaseInfo_REGION_EDITION_REV0) {
      seek_region = ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipnum) - ComMaxmindGeoipLookupService_STATE_BEGIN_REV0;
      IOSCharArray *ch = [IOSCharArray arrayWithLength:2];
      if (seek_region >= 1000) {
        JreStrongAssign(&record->countryCode_, @"US");
        JreStrongAssign(&record->countryName_, @"United States");
        *IOSCharArray_GetRef(ch, 0) = (jchar) (((seek_region - 1000) / 26) + 65);
        *IOSCharArray_GetRef(ch, 1) = (jchar) (((seek_region - 1000) % 26) + 65);
        JreStrongAssign(&record->region_, [NSString java_stringWithCharacters:ch]);
      }
      else {
        JreStrongAssign(&record->countryCode_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryCode), seek_region));
        JreStrongAssign(&record->countryName_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryName), seek_region));
        JreStrongAssign(&record->region_, @"");
      }
    }
    else if (databaseType_ == ComMaxmindGeoipDatabaseInfo_REGION_EDITION_REV1) {
      seek_region = ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipnum) - ComMaxmindGeoipLookupService_STATE_BEGIN_REV1;
      IOSCharArray *ch = [IOSCharArray arrayWithLength:2];
      if (seek_region < ComMaxmindGeoipLookupService_US_OFFSET) {
        JreStrongAssign(&record->countryCode_, @"");
        JreStrongAssign(&record->countryName_, @"");
        JreStrongAssign(&record->region_, @"");
      }
      else if (seek_region < ComMaxmindGeoipLookupService_CANADA_OFFSET) {
        JreStrongAssign(&record->countryCode_, @"US");
        JreStrongAssign(&record->countryName_, @"United States");
        *IOSCharArray_GetRef(ch, 0) = (jchar) (((seek_region - ComMaxmindGeoipLookupService_US_OFFSET) / 26) + 65);
        *IOSCharArray_GetRef(ch, 1) = (jchar) (((seek_region - ComMaxmindGeoipLookupService_US_OFFSET) % 26) + 65);
        JreStrongAssign(&record->region_, [NSString java_stringWithCharacters:ch]);
      }
      else if (seek_region < ComMaxmindGeoipLookupService_WORLD_OFFSET) {
        JreStrongAssign(&record->countryCode_, @"CA");
        JreStrongAssign(&record->countryName_, @"Canada");
        *IOSCharArray_GetRef(ch, 0) = (jchar) (((seek_region - ComMaxmindGeoipLookupService_CANADA_OFFSET) / 26) + 65);
        *IOSCharArray_GetRef(ch, 1) = (jchar) (((seek_region - ComMaxmindGeoipLookupService_CANADA_OFFSET) % 26) + 65);
        JreStrongAssign(&record->region_, [NSString java_stringWithCharacters:ch]);
      }
      else {
        JreStrongAssign(&record->countryCode_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryCode), (seek_region - ComMaxmindGeoipLookupService_WORLD_OFFSET) / ComMaxmindGeoipLookupService_FIPS_RANGE));
        JreStrongAssign(&record->countryName_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryName), (seek_region - ComMaxmindGeoipLookupService_WORLD_OFFSET) / ComMaxmindGeoipLookupService_FIPS_RANGE));
        JreStrongAssign(&record->region_, @"");
      }
    }
    return JreRetainedLocalValue(record);
  }
}

- (ComMaxmindGeoipLocation *)getLocationV6WithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  @synchronized(self) {
    jint seek_country;
    @try {
      seek_country = ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(self, addr);
      return JreRetainedLocalValue(ComMaxmindGeoipLookupService_readCityRecordWithInt_(self, seek_country));
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error while seting up segments", e);
    }
  }
}

- (ComMaxmindGeoipLocation *)getLocationWithLong:(jlong)ipnum {
  @synchronized(self) {
    jint seek_country;
    @try {
      seek_country = ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipnum);
      return JreRetainedLocalValue(ComMaxmindGeoipLookupService_readCityRecordWithInt_(self, seek_country));
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error while seting up segments", e);
    }
  }
}

- (ComMaxmindGeoipLocation *)readCityRecordWithInt:(jint)seekCountry {
  return ComMaxmindGeoipLookupService_readCityRecordWithInt_(self, seekCountry);
}

- (JavaNioByteBuffer *)readRecordBufWithInt:(jint)seek
                                    withInt:(jint)maxLength {
  return ComMaxmindGeoipLookupService_readRecordBufWithInt_withInt_(self, seek, maxLength);
}

- (NSString *)readStringWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  return ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(self, buffer);
}

+ (jfloat)readAngleWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  return ComMaxmindGeoipLookupService_readAngleWithJavaNioByteBuffer_(buffer);
}

+ (jint)readMetroAreaComboWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  return ComMaxmindGeoipLookupService_readMetroAreaComboWithJavaNioByteBuffer_(buffer);
}

- (NSString *)getOrgWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return [self getOrgWithLong:ComMaxmindGeoipLookupService_bytesToLongWithByteArray_([((JavaNetInetAddress *) nil_chk(addr)) getAddress])];
}

- (NSString *)getOrgWithNSString:(NSString *)str {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(str);
  }
  @catch (JavaNetUnknownHostException *e) {
    return nil;
  }
  return [self getOrgWithJavaNetInetAddress:addr];
}

- (NSString *)getOrgWithLong:(jlong)ipnum {
  @synchronized(self) {
    @try {
      jint seekOrg = ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipnum);
      return JreRetainedLocalValue(ComMaxmindGeoipLookupService_readOrgRecordWithInt_(self, seekOrg));
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error while reading org", e);
    }
  }
}

- (NSString *)getOrgV6WithNSString:(NSString *)str {
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByNameWithNSString_(str);
  }
  @catch (JavaNetUnknownHostException *e) {
    return nil;
  }
  return [self getOrgV6WithJavaNetInetAddress:addr];
}

- (NSString *)getOrgV6WithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  @synchronized(self) {
    @try {
      jint seekOrg = ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(self, addr);
      return JreRetainedLocalValue(ComMaxmindGeoipLookupService_readOrgRecordWithInt_(self, seekOrg));
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error while reading org", e);
    }
  }
}

- (NSString *)readOrgRecordWithInt:(jint)seekOrg {
  return ComMaxmindGeoipLookupService_readOrgRecordWithInt_(self, seekOrg);
}

- (jint)seekCountryV6WithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(self, addr);
}

- (jint)seekCountryWithLong:(jlong)ipAddress {
  return ComMaxmindGeoipLookupService_seekCountryWithLong_(self, ipAddress);
}

- (void)readNodeWithByteArray:(IOSByteArray *)buf
                 withIntArray:(IOSIntArray *)x
                      withInt:(jint)offset {
  ComMaxmindGeoipLookupService_readNodeWithByteArray_withIntArray_withInt_(self, buf, x, offset);
}

+ (jlong)bytesToLongWithByteArray:(IOSByteArray *)address {
  return ComMaxmindGeoipLookupService_bytesToLongWithByteArray_(address);
}

+ (jint)unsignedByteToIntWithByte:(jbyte)b {
  return ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_(b);
}

- (void)dealloc {
  RELEASE_(file_);
  RELEASE_(databaseFile_);
  RELEASE_(databaseInfo_);
  RELEASE_(charsetDecoder_);
  RELEASE_(databaseSegments_);
  RELEASE_(dbbuffer_);
  RELEASE_(index_cache_);
  RELEASE_(UNKNOWN_COUNTRY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x22, 5, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LComMaxmindGeoipCountry;", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipCountry;", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipCountry;", 0x21, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipCountry;", 0x21, 7, 9, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipCountry;", 0x21, 8, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 11, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipDatabaseInfo;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x1, 14, 0, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x1, 15, 0, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipRegion;", 0x21, 16, 0, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipRegion;", 0x21, 16, 9, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipRegion;", 0x21, 16, 10, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x21, 14, 9, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x21, 15, 10, -1, -1, -1, -1 },
    { NULL, "LComMaxmindGeoipLocation;", 0x2, 17, 13, 1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x2, 18, 19, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 20, 21, 22, -1, -1, -1 },
    { NULL, "F", 0xa, 23, 21, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 24, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 25, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 26, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 27, 13, 1, -1, -1, -1 },
    { NULL, "I", 0x22, 28, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x22, 29, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 34, 35, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaIoFile:);
  methods[2].selector = @selector(initWithNSString:withInt:);
  methods[3].selector = @selector(initWithJavaIoFile:withInt:);
  methods[4].selector = @selector(init__);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(getAllCountryNames);
  methods[7].selector = @selector(getAllCountryCodes);
  methods[8].selector = @selector(getCountryV6WithNSString:);
  methods[9].selector = @selector(getCountryWithNSString:);
  methods[10].selector = @selector(getCountryWithJavaNetInetAddress:);
  methods[11].selector = @selector(getCountryV6WithJavaNetInetAddress:);
  methods[12].selector = @selector(getCountryWithLong:);
  methods[13].selector = @selector(getIDWithNSString:);
  methods[14].selector = @selector(getIDWithJavaNetInetAddress:);
  methods[15].selector = @selector(getIDWithLong:);
  methods[16].selector = @selector(last_netmask);
  methods[17].selector = @selector(netmaskWithInt:);
  methods[18].selector = @selector(getDatabaseInfo);
  methods[19].selector = @selector(_check_mtime);
  methods[20].selector = @selector(getLocationV6WithNSString:);
  methods[21].selector = @selector(getLocationWithJavaNetInetAddress:);
  methods[22].selector = @selector(getLocationWithNSString:);
  methods[23].selector = @selector(getRegionWithNSString:);
  methods[24].selector = @selector(getRegionWithJavaNetInetAddress:);
  methods[25].selector = @selector(getRegionWithLong:);
  methods[26].selector = @selector(getLocationV6WithJavaNetInetAddress:);
  methods[27].selector = @selector(getLocationWithLong:);
  methods[28].selector = @selector(readCityRecordWithInt:);
  methods[29].selector = @selector(readRecordBufWithInt:withInt:);
  methods[30].selector = @selector(readStringWithJavaNioByteBuffer:);
  methods[31].selector = @selector(readAngleWithJavaNioByteBuffer:);
  methods[32].selector = @selector(readMetroAreaComboWithJavaNioByteBuffer:);
  methods[33].selector = @selector(getOrgWithJavaNetInetAddress:);
  methods[34].selector = @selector(getOrgWithNSString:);
  methods[35].selector = @selector(getOrgWithLong:);
  methods[36].selector = @selector(getOrgV6WithNSString:);
  methods[37].selector = @selector(getOrgV6WithJavaNetInetAddress:);
  methods[38].selector = @selector(readOrgRecordWithInt:);
  methods[39].selector = @selector(seekCountryV6WithJavaNetInetAddress:);
  methods[40].selector = @selector(seekCountryWithLong:);
  methods[41].selector = @selector(readNodeWithByteArray:withIntArray:withInt:);
  methods[42].selector = @selector(bytesToLongWithByteArray:);
  methods[43].selector = @selector(unsignedByteToIntWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "file_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "databaseFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "databaseInfo_", "LComMaxmindGeoipDatabaseInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charset", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "charsetDecoder_", "LJavaNioCharsetCharsetDecoder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "databaseType_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "databaseSegments_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recordLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dboptions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dbbuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_cache_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mtime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "last_netmask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "US_OFFSET", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_US_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "CANADA_OFFSET", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_CANADA_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "WORLD_OFFSET", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_WORLD_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "FIPS_RANGE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_FIPS_RANGE, 0x1a, -1, -1, -1, -1 },
    { "COUNTRY_BEGIN", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_COUNTRY_BEGIN, 0x1a, -1, -1, -1, -1 },
    { "STATE_BEGIN_REV0", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_STATE_BEGIN_REV0, 0x1a, -1, -1, -1, -1 },
    { "STATE_BEGIN_REV1", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_STATE_BEGIN_REV1, 0x1a, -1, -1, -1, -1 },
    { "STRUCTURE_INFO_MAX_SIZE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_STRUCTURE_INFO_MAX_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DATABASE_INFO_MAX_SIZE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_DATABASE_INFO_MAX_SIZE, 0x1a, -1, -1, -1, -1 },
    { "GEOIP_STANDARD", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_STANDARD, 0x19, -1, -1, -1, -1 },
    { "GEOIP_MEMORY_CACHE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE, 0x19, -1, -1, -1, -1 },
    { "GEOIP_CHECK_CACHE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_CHECK_CACHE, 0x19, -1, -1, -1, -1 },
    { "GEOIP_INDEX_CACHE", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_INDEX_CACHE, 0x19, -1, -1, -1, -1 },
    { "GEOIP_UNKNOWN_SPEED", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_UNKNOWN_SPEED, 0x19, -1, -1, -1, -1 },
    { "GEOIP_DIALUP_SPEED", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_DIALUP_SPEED, 0x19, -1, -1, -1, -1 },
    { "GEOIP_CABLEDSL_SPEED", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_CABLEDSL_SPEED, 0x19, -1, -1, -1, -1 },
    { "GEOIP_CORPORATE_SPEED", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_GEOIP_CORPORATE_SPEED, 0x19, -1, -1, -1, -1 },
    { "SEGMENT_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_SEGMENT_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "STANDARD_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "ORG_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_ORG_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_MAX_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_ORG_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_MAX_ORG_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "FULL_RECORD_LENGTH", "I", .constantValue.asInt = ComMaxmindGeoipLookupService_FULL_RECORD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "UNKNOWN_COUNTRY_", "LComMaxmindGeoipCountry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countryCode", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "countryName", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "LJavaIoFile;", "LNSString;I", "LJavaIoFile;I", "init", "()Ljava/util/List<Ljava/lang/String;>;", "getCountryV6", "getCountry", "LJavaNetInetAddress;", "J", "getID", "netmask", "I", "getLocationV6", "getLocation", "getRegion", "readCityRecord", "readRecordBuf", "II", "readString", "LJavaNioByteBuffer;", "LJavaNioCharsetCharacterCodingException;", "readAngle", "readMetroAreaCombo", "getOrg", "getOrgV6", "readOrgRecord", "seekCountryV6", "seekCountry", "readNode", "[B[II", "bytesToLong", "[B", "unsignedByteToInt", "B", &ComMaxmindGeoipLookupService_charset, &ComMaxmindGeoipLookupService_countryCode, &ComMaxmindGeoipLookupService_countryName };
  static const J2ObjcClassInfo _ComMaxmindGeoipLookupService = { "LookupService", "com.maxmind.geoip", ptrTable, methods, fields, 7, 0x1, 44, 39, -1, -1, -1, -1, -1 };
  return &_ComMaxmindGeoipLookupService;
}

+ (void)initialize {
  if (self == [ComMaxmindGeoipLookupService class]) {
    JreStrongAssign(&ComMaxmindGeoipLookupService_charset, JavaNioCharsetCharset_forNameWithNSString_(@"ISO-8859-1"));
    JreStrongAssignAndConsume(&ComMaxmindGeoipLookupService_countryCode, [IOSObjectArray newArrayWithObjects:(id[]){ @"--", @"AP", @"EU", @"AD", @"AE", @"AF", @"AG", @"AI", @"AL", @"AM", @"CW", @"AO", @"AQ", @"AR", @"AS", @"AT", @"AU", @"AW", @"AZ", @"BA", @"BB", @"BD", @"BE", @"BF", @"BG", @"BH", @"BI", @"BJ", @"BM", @"BN", @"BO", @"BR", @"BS", @"BT", @"BV", @"BW", @"BY", @"BZ", @"CA", @"CC", @"CD", @"CF", @"CG", @"CH", @"CI", @"CK", @"CL", @"CM", @"CN", @"CO", @"CR", @"CU", @"CV", @"CX", @"CY", @"CZ", @"DE", @"DJ", @"DK", @"DM", @"DO", @"DZ", @"EC", @"EE", @"EG", @"EH", @"ER", @"ES", @"ET", @"FI", @"FJ", @"FK", @"FM", @"FO", @"FR", @"SX", @"GA", @"GB", @"GD", @"GE", @"GF", @"GH", @"GI", @"GL", @"GM", @"GN", @"GP", @"GQ", @"GR", @"GS", @"GT", @"GU", @"GW", @"GY", @"HK", @"HM", @"HN", @"HR", @"HT", @"HU", @"ID", @"IE", @"IL", @"IN", @"IO", @"IQ", @"IR", @"IS", @"IT", @"JM", @"JO", @"JP", @"KE", @"KG", @"KH", @"KI", @"KM", @"KN", @"KP", @"KR", @"KW", @"KY", @"KZ", @"LA", @"LB", @"LC", @"LI", @"LK", @"LR", @"LS", @"LT", @"LU", @"LV", @"LY", @"MA", @"MC", @"MD", @"MG", @"MH", @"MK", @"ML", @"MM", @"MN", @"MO", @"MP", @"MQ", @"MR", @"MS", @"MT", @"MU", @"MV", @"MW", @"MX", @"MY", @"MZ", @"NA", @"NC", @"NE", @"NF", @"NG", @"NI", @"NL", @"NO", @"NP", @"NR", @"NU", @"NZ", @"OM", @"PA", @"PE", @"PF", @"PG", @"PH", @"PK", @"PL", @"PM", @"PN", @"PR", @"PS", @"PT", @"PW", @"PY", @"QA", @"RE", @"RO", @"RU", @"RW", @"SA", @"SB", @"SC", @"SD", @"SE", @"SG", @"SH", @"SI", @"SJ", @"SK", @"SL", @"SM", @"SN", @"SO", @"SR", @"ST", @"SV", @"SY", @"SZ", @"TC", @"TD", @"TF", @"TG", @"TH", @"TJ", @"TK", @"TM", @"TN", @"TO", @"TL", @"TR", @"TT", @"TV", @"TW", @"TZ", @"UA", @"UG", @"UM", @"US", @"UY", @"UZ", @"VA", @"VC", @"VE", @"VG", @"VI", @"VN", @"VU", @"WF", @"WS", @"YE", @"YT", @"RS", @"ZA", @"ZM", @"ME", @"ZW", @"A1", @"A2", @"O1", @"AX", @"GG", @"IM", @"JE", @"BL", @"MF", @"BQ", @"SS", @"O1" } count:256 type:NSString_class_()]);
    JreStrongAssignAndConsume(&ComMaxmindGeoipLookupService_countryName, [IOSObjectArray newArrayWithObjects:(id[]){ @"N/A", @"Asia/Pacific Region", @"Europe", @"Andorra", @"United Arab Emirates", @"Afghanistan", @"Antigua and Barbuda", @"Anguilla", @"Albania", @"Armenia", @"Curacao", @"Angola", @"Antarctica", @"Argentina", @"American Samoa", @"Austria", @"Australia", @"Aruba", @"Azerbaijan", @"Bosnia and Herzegovina", @"Barbados", @"Bangladesh", @"Belgium", @"Burkina Faso", @"Bulgaria", @"Bahrain", @"Burundi", @"Benin", @"Bermuda", @"Brunei Darussalam", @"Bolivia", @"Brazil", @"Bahamas", @"Bhutan", @"Bouvet Island", @"Botswana", @"Belarus", @"Belize", @"Canada", @"Cocos (Keeling) Islands", @"Congo, The Democratic Republic of the", @"Central African Republic", @"Congo", @"Switzerland", @"Cote D'Ivoire", @"Cook Islands", @"Chile", @"Cameroon", @"China", @"Colombia", @"Costa Rica", @"Cuba", @"Cape Verde", @"Christmas Island", @"Cyprus", @"Czech Republic", @"Germany", @"Djibouti", @"Denmark", @"Dominica", @"Dominican Republic", @"Algeria", @"Ecuador", @"Estonia", @"Egypt", @"Western Sahara", @"Eritrea", @"Spain", @"Ethiopia", @"Finland", @"Fiji", @"Falkland Islands (Malvinas)", @"Micronesia, Federated States of", @"Faroe Islands", @"France", @"Sint Maarten (Dutch part)", @"Gabon", @"United Kingdom", @"Grenada", @"Georgia", @"French Guiana", @"Ghana", @"Gibraltar", @"Greenland", @"Gambia", @"Guinea", @"Guadeloupe", @"Equatorial Guinea", @"Greece", @"South Georgia and the South Sandwich Islands", @"Guatemala", @"Guam", @"Guinea-Bissau", @"Guyana", @"Hong Kong", @"Heard Island and McDonald Islands", @"Honduras", @"Croatia", @"Haiti", @"Hungary", @"Indonesia", @"Ireland", @"Israel", @"India", @"British Indian Ocean Territory", @"Iraq", @"Iran, Islamic Republic of", @"Iceland", @"Italy", @"Jamaica", @"Jordan", @"Japan", @"Kenya", @"Kyrgyzstan", @"Cambodia", @"Kiribati", @"Comoros", @"Saint Kitts and Nevis", @"Korea, Democratic People's Republic of", @"Korea, Republic of", @"Kuwait", @"Cayman Islands", @"Kazakhstan", @"Lao People's Democratic Republic", @"Lebanon", @"Saint Lucia", @"Liechtenstein", @"Sri Lanka", @"Liberia", @"Lesotho", @"Lithuania", @"Luxembourg", @"Latvia", @"Libya", @"Morocco", @"Monaco", @"Moldova, Republic of", @"Madagascar", @"Marshall Islands", @"Macedonia", @"Mali", @"Myanmar", @"Mongolia", @"Macau", @"Northern Mariana Islands", @"Martinique", @"Mauritania", @"Montserrat", @"Malta", @"Mauritius", @"Maldives", @"Malawi", @"Mexico", @"Malaysia", @"Mozambique", @"Namibia", @"New Caledonia", @"Niger", @"Norfolk Island", @"Nigeria", @"Nicaragua", @"Netherlands", @"Norway", @"Nepal", @"Nauru", @"Niue", @"New Zealand", @"Oman", @"Panama", @"Peru", @"French Polynesia", @"Papua New Guinea", @"Philippines", @"Pakistan", @"Poland", @"Saint Pierre and Miquelon", @"Pitcairn Islands", @"Puerto Rico", @"Palestinian Territory", @"Portugal", @"Palau", @"Paraguay", @"Qatar", @"Reunion", @"Romania", @"Russian Federation", @"Rwanda", @"Saudi Arabia", @"Solomon Islands", @"Seychelles", @"Sudan", @"Sweden", @"Singapore", @"Saint Helena", @"Slovenia", @"Svalbard and Jan Mayen", @"Slovakia", @"Sierra Leone", @"San Marino", @"Senegal", @"Somalia", @"Suriname", @"Sao Tome and Principe", @"El Salvador", @"Syrian Arab Republic", @"Swaziland", @"Turks and Caicos Islands", @"Chad", @"French Southern Territories", @"Togo", @"Thailand", @"Tajikistan", @"Tokelau", @"Turkmenistan", @"Tunisia", @"Tonga", @"Timor-Leste", @"Turkey", @"Trinidad and Tobago", @"Tuvalu", @"Taiwan", @"Tanzania, United Republic of", @"Ukraine", @"Uganda", @"United States Minor Outlying Islands", @"United States", @"Uruguay", @"Uzbekistan", @"Holy See (Vatican City State)", @"Saint Vincent and the Grenadines", @"Venezuela", @"Virgin Islands, British", @"Virgin Islands, U.S.", @"Vietnam", @"Vanuatu", @"Wallis and Futuna", @"Samoa", @"Yemen", @"Mayotte", @"Serbia", @"South Africa", @"Zambia", @"Montenegro", @"Zimbabwe", @"Anonymous Proxy", @"Satellite Provider", @"Other", @"Aland Islands", @"Guernsey", @"Isle of Man", @"Jersey", @"Saint Barthelemy", @"Saint Martin", @"Bonaire, Saint Eustatius and Saba", @"South Sudan", @"Other" } count:256 type:NSString_class_()]);
    {
      if (ComMaxmindGeoipLookupService_countryCode->size_ != ComMaxmindGeoipLookupService_countryName->size_) {
        @throw create_JavaLangAssertionError_initWithId_(@"countryCode.length!=countryName.length");
      }
    }
    J2OBJC_SET_INITIALIZED(ComMaxmindGeoipLookupService)
  }
}

@end

void ComMaxmindGeoipLookupService_initWithNSString_(ComMaxmindGeoipLookupService *self, NSString *databaseFile) {
  ComMaxmindGeoipLookupService_initWithJavaIoFile_(self, create_JavaIoFile_initWithNSString_(databaseFile));
}

ComMaxmindGeoipLookupService *new_ComMaxmindGeoipLookupService_initWithNSString_(NSString *databaseFile) {
  J2OBJC_NEW_IMPL(ComMaxmindGeoipLookupService, initWithNSString_, databaseFile)
}

ComMaxmindGeoipLookupService *create_ComMaxmindGeoipLookupService_initWithNSString_(NSString *databaseFile) {
  J2OBJC_CREATE_IMPL(ComMaxmindGeoipLookupService, initWithNSString_, databaseFile)
}

void ComMaxmindGeoipLookupService_initWithJavaIoFile_(ComMaxmindGeoipLookupService *self, JavaIoFile *databaseFile) {
  NSObject_init(self);
  JreStrongAssign(&self->charsetDecoder_, [((JavaNioCharsetCharset *) nil_chk(ComMaxmindGeoipLookupService_charset)) newDecoder]);
  self->databaseType_ = ComMaxmindGeoipDatabaseInfo_COUNTRY_EDITION;
  JreStrongAssignAndConsume(&self->UNKNOWN_COUNTRY_, new_ComMaxmindGeoipCountry_initWithNSString_withNSString_(@"--", @"N/A"));
  JreStrongAssign(&self->databaseFile_, databaseFile);
  JreStrongAssignAndConsume(&self->file_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(databaseFile, @"r"));
  ComMaxmindGeoipLookupService_init__(self);
}

ComMaxmindGeoipLookupService *new_ComMaxmindGeoipLookupService_initWithJavaIoFile_(JavaIoFile *databaseFile) {
  J2OBJC_NEW_IMPL(ComMaxmindGeoipLookupService, initWithJavaIoFile_, databaseFile)
}

ComMaxmindGeoipLookupService *create_ComMaxmindGeoipLookupService_initWithJavaIoFile_(JavaIoFile *databaseFile) {
  J2OBJC_CREATE_IMPL(ComMaxmindGeoipLookupService, initWithJavaIoFile_, databaseFile)
}

void ComMaxmindGeoipLookupService_initWithNSString_withInt_(ComMaxmindGeoipLookupService *self, NSString *databaseFile, jint options) {
  ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(self, create_JavaIoFile_initWithNSString_(databaseFile), options);
}

ComMaxmindGeoipLookupService *new_ComMaxmindGeoipLookupService_initWithNSString_withInt_(NSString *databaseFile, jint options) {
  J2OBJC_NEW_IMPL(ComMaxmindGeoipLookupService, initWithNSString_withInt_, databaseFile, options)
}

ComMaxmindGeoipLookupService *create_ComMaxmindGeoipLookupService_initWithNSString_withInt_(NSString *databaseFile, jint options) {
  J2OBJC_CREATE_IMPL(ComMaxmindGeoipLookupService, initWithNSString_withInt_, databaseFile, options)
}

void ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(ComMaxmindGeoipLookupService *self, JavaIoFile *databaseFile, jint options) {
  NSObject_init(self);
  JreStrongAssign(&self->charsetDecoder_, [((JavaNioCharsetCharset *) nil_chk(ComMaxmindGeoipLookupService_charset)) newDecoder]);
  self->databaseType_ = ComMaxmindGeoipDatabaseInfo_COUNTRY_EDITION;
  JreStrongAssignAndConsume(&self->UNKNOWN_COUNTRY_, new_ComMaxmindGeoipCountry_initWithNSString_withNSString_(@"--", @"N/A"));
  JreStrongAssign(&self->databaseFile_, databaseFile);
  JreStrongAssignAndConsume(&self->file_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(databaseFile, @"r"));
  self->dboptions_ = options;
  ComMaxmindGeoipLookupService_init__(self);
}

ComMaxmindGeoipLookupService *new_ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(JavaIoFile *databaseFile, jint options) {
  J2OBJC_NEW_IMPL(ComMaxmindGeoipLookupService, initWithJavaIoFile_withInt_, databaseFile, options)
}

ComMaxmindGeoipLookupService *create_ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(JavaIoFile *databaseFile, jint options) {
  J2OBJC_CREATE_IMPL(ComMaxmindGeoipLookupService, initWithJavaIoFile_withInt_, databaseFile, options)
}

void ComMaxmindGeoipLookupService_init__(ComMaxmindGeoipLookupService *self) {
  @synchronized(self) {
    IOSByteArray *delim = [IOSByteArray arrayWithLength:3];
    IOSByteArray *buf = [IOSByteArray arrayWithLength:ComMaxmindGeoipLookupService_SEGMENT_RECORD_LENGTH];
    if (self->file_ == nil) {
      return;
    }
    if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_CHECK_CACHE) != 0) {
      self->mtime_ = [((JavaIoFile *) nil_chk(self->databaseFile_)) lastModified];
    }
    [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:[self->file_ length] - 3];
    for (jint i = 0; i < ComMaxmindGeoipLookupService_STRUCTURE_INFO_MAX_SIZE; i++) {
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readFullyWithByteArray:delim];
      if (IOSByteArray_Get(delim, 0) == -1 && IOSByteArray_Get(delim, 1) == -1 && IOSByteArray_Get(delim, 2) == -1) {
        self->databaseType_ = [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readByte];
        if (self->databaseType_ >= 106) {
          self->databaseType_ -= 105;
        }
        if (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_REGION_EDITION_REV0) {
          JreStrongAssignAndConsume(&self->databaseSegments_, [IOSIntArray newArrayWithLength:1]);
          *IOSIntArray_GetRef(self->databaseSegments_, 0) = ComMaxmindGeoipLookupService_STATE_BEGIN_REV0;
          self->recordLength_ = ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH;
        }
        else if (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_REGION_EDITION_REV1) {
          JreStrongAssignAndConsume(&self->databaseSegments_, [IOSIntArray newArrayWithLength:1]);
          *IOSIntArray_GetRef(self->databaseSegments_, 0) = ComMaxmindGeoipLookupService_STATE_BEGIN_REV1;
          self->recordLength_ = ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH;
        }
        else if (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV0 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV1 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ORG_EDITION || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ORG_EDITION_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ISP_EDITION || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ISP_EDITION_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_DOMAIN_EDITION || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_DOMAIN_EDITION_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ASNUM_EDITION || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ASNUM_EDITION_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_NETSPEED_EDITION_REV1 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_NETSPEED_EDITION_REV1_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV0_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV1_V6) {
          JreStrongAssignAndConsume(&self->databaseSegments_, [IOSIntArray newArrayWithLength:1]);
          *IOSIntArray_GetRef(self->databaseSegments_, 0) = 0;
          if (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV0 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV1 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ASNUM_EDITION_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_NETSPEED_EDITION_REV1 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_NETSPEED_EDITION_REV1_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV0_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV1_V6 || self->databaseType_ == ComMaxmindGeoipDatabaseInfo_ASNUM_EDITION) {
            self->recordLength_ = ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH;
          }
          else {
            self->recordLength_ = ComMaxmindGeoipLookupService_ORG_RECORD_LENGTH;
          }
          [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readFullyWithByteArray:buf];
          for (jint j = 0; j < ComMaxmindGeoipLookupService_SEGMENT_RECORD_LENGTH; j++) {
            *IOSIntArray_GetRef(nil_chk(self->databaseSegments_), 0) += (JreLShift32(ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_(IOSByteArray_Get(buf, j)), (j * 8)));
          }
        }
        break;
      }
      else {
        [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:[self->file_ getFilePointer] - 4];
      }
    }
    if ((self->databaseType_ == ComMaxmindGeoipDatabaseInfo_COUNTRY_EDITION) || (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_COUNTRY_EDITION_V6) || (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_PROXY_EDITION) || (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_NETSPEED_EDITION)) {
      JreStrongAssignAndConsume(&self->databaseSegments_, [IOSIntArray newArrayWithLength:1]);
      *IOSIntArray_GetRef(self->databaseSegments_, 0) = ComMaxmindGeoipLookupService_COUNTRY_BEGIN;
      self->recordLength_ = ComMaxmindGeoipLookupService_STANDARD_RECORD_LENGTH;
    }
    if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 1) {
      jint l = (jint) [((JavaIoRandomAccessFile *) nil_chk(self->file_)) length];
      JreStrongAssignAndConsume(&self->dbbuffer_, [IOSByteArray newArrayWithLength:l]);
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:0];
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readFullyWithByteArray:self->dbbuffer_ withInt:0 withInt:l];
      JreStrongAssign(&self->databaseInfo_, [self getDatabaseInfo]);
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) close];
    }
    if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_INDEX_CACHE) != 0) {
      jint l = IOSIntArray_Get(nil_chk(self->databaseSegments_), 0) * self->recordLength_ * 2;
      JreStrongAssignAndConsume(&self->index_cache_, [IOSByteArray newArrayWithLength:l]);
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:0];
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readFullyWithByteArray:self->index_cache_ withInt:0 withInt:l];
    }
    else {
      JreStrongAssign(&self->index_cache_, nil);
    }
  }
}

ComMaxmindGeoipLocation *ComMaxmindGeoipLookupService_readCityRecordWithInt_(ComMaxmindGeoipLookupService *self, jint seekCountry) {
  if (seekCountry == IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
    return nil;
  }
  JavaNioByteBuffer *buffer = ComMaxmindGeoipLookupService_readRecordBufWithInt_withInt_(self, seekCountry, ComMaxmindGeoipLookupService_FULL_RECORD_LENGTH);
  ComMaxmindGeoipLocation *record = create_ComMaxmindGeoipLocation_init();
  jint country = ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_([((JavaNioByteBuffer *) nil_chk(buffer)) get]);
  JreStrongAssign(&record->countryCode_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryCode), country));
  JreStrongAssign(&record->countryName_, IOSObjectArray_Get(nil_chk(ComMaxmindGeoipLookupService_countryName), country));
  JreStrongAssign(&record->region_, ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(self, buffer));
  JreStrongAssign(&record->city_, ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(self, buffer));
  JreStrongAssign(&record->postalCode_, ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(self, buffer));
  record->latitude_ = ComMaxmindGeoipLookupService_readAngleWithJavaNioByteBuffer_(buffer);
  record->longitude_ = ComMaxmindGeoipLookupService_readAngleWithJavaNioByteBuffer_(buffer);
  if (self->databaseType_ == ComMaxmindGeoipDatabaseInfo_CITY_EDITION_REV1) {
    if ([@"US" isEqual:record->countryCode_]) {
      jint metroarea_combo = ComMaxmindGeoipLookupService_readMetroAreaComboWithJavaNioByteBuffer_(buffer);
      record->metro_code_ = record->dma_code_ = metroarea_combo / 1000;
      record->area_code_ = metroarea_combo % 1000;
    }
  }
  return record;
}

JavaNioByteBuffer *ComMaxmindGeoipLookupService_readRecordBufWithInt_withInt_(ComMaxmindGeoipLookupService *self, jint seek, jint maxLength) {
  jint recordPointer = seek + (2 * self->recordLength_ - 1) * IOSIntArray_Get(nil_chk(self->databaseSegments_), 0);
  JavaNioByteBuffer *buffer;
  if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 1) {
    buffer = JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_(self->dbbuffer_, recordPointer, JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(self->dbbuffer_))->size_ - recordPointer, maxLength));
  }
  else {
    IOSByteArray *recordBuf = [IOSByteArray arrayWithLength:maxLength];
    [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:recordPointer];
    [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readWithByteArray:recordBuf];
    buffer = JavaNioByteBuffer_wrapWithByteArray_(recordBuf);
  }
  return buffer;
}

NSString *ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(ComMaxmindGeoipLookupService *self, JavaNioByteBuffer *buffer) {
  jint start = [((JavaNioByteBuffer *) nil_chk(buffer)) position];
  jint oldLimit = [buffer limit];
  while ([buffer hasRemaining] && [buffer get] != 0) {
  }
  jint end = [buffer position] - 1;
  NSString *str = nil;
  if (end > start) {
    [buffer positionWithInt:start];
    [buffer limitWithInt:end];
    str = [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk(self->charsetDecoder_)) decodeWithJavaNioByteBuffer:buffer])) description];
    [buffer limitWithInt:oldLimit];
  }
  [buffer positionWithInt:end + 1];
  return str;
}

jfloat ComMaxmindGeoipLookupService_readAngleWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  ComMaxmindGeoipLookupService_initialize();
  if ([((JavaNioByteBuffer *) nil_chk(buffer)) remaining] < 3) {
    @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_(@"Unexpected end of data record when reading angle");
  }
  jdouble num = 0;
  for (jint j = 0; j < 3; j++) {
    JrePlusAssignDoubleD(&num, JreLShift32(ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_([buffer get]), (j * 8)));
  }
  return (jfloat) num / 10000 - 180;
}

jint ComMaxmindGeoipLookupService_readMetroAreaComboWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  ComMaxmindGeoipLookupService_initialize();
  if ([((JavaNioByteBuffer *) nil_chk(buffer)) remaining] < 3) {
    @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_(@"Unexpected end of data record when reading metro area");
  }
  jint metroareaCombo = 0;
  for (jint j = 0; j < 3; j++) {
    metroareaCombo += JreLShift32(ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_([buffer get]), (j * 8));
  }
  return metroareaCombo;
}

NSString *ComMaxmindGeoipLookupService_readOrgRecordWithInt_(ComMaxmindGeoipLookupService *self, jint seekOrg) {
  if (seekOrg == IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
    return nil;
  }
  JavaNioByteBuffer *buf = ComMaxmindGeoipLookupService_readRecordBufWithInt_withInt_(self, seekOrg, ComMaxmindGeoipLookupService_MAX_ORG_RECORD_LENGTH);
  return ComMaxmindGeoipLookupService_readStringWithJavaNioByteBuffer_(self, buf);
}

jint ComMaxmindGeoipLookupService_seekCountryV6WithJavaNetInetAddress_(ComMaxmindGeoipLookupService *self, JavaNetInetAddress *addr) {
  @synchronized(self) {
    IOSByteArray *v6vec = [((JavaNetInetAddress *) nil_chk(addr)) getAddress];
    if (((IOSByteArray *) nil_chk(v6vec))->size_ == 4) {
      IOSByteArray *t = [IOSByteArray arrayWithLength:16];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v6vec, 0, t, 12, 4);
      v6vec = t;
    }
    IOSByteArray *buf = [IOSByteArray arrayWithLength:2 * ComMaxmindGeoipLookupService_MAX_RECORD_LENGTH];
    IOSIntArray *x = [IOSIntArray arrayWithLength:2];
    jint offset = 0;
    [self _check_mtime];
    for (jint depth = 127; depth >= 0; depth--) {
      ComMaxmindGeoipLookupService_readNodeWithByteArray_withIntArray_withInt_(self, buf, x, offset);
      jint bnum = 127 - depth;
      jint idx = JreRShift32(bnum, 3);
      jint b_mask = JreLShift32(1, (bnum & 7 ^ 7));
      if ((IOSByteArray_Get(v6vec, idx) & b_mask) > 0) {
        if (IOSIntArray_Get(x, 1) >= IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
          self->last_netmask_ = 128 - depth;
          return IOSIntArray_Get(x, 1);
        }
        offset = IOSIntArray_Get(x, 1);
      }
      else {
        if (IOSIntArray_Get(x, 0) >= IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
          self->last_netmask_ = 128 - depth;
          return IOSIntArray_Get(x, 0);
        }
        offset = IOSIntArray_Get(x, 0);
      }
    }
    @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_(JreStrcat("$$", @"Error seeking country while searching for ", [addr getHostAddress]));
  }
}

jint ComMaxmindGeoipLookupService_seekCountryWithLong_(ComMaxmindGeoipLookupService *self, jlong ipAddress) {
  @synchronized(self) {
    IOSByteArray *buf = [IOSByteArray arrayWithLength:2 * ComMaxmindGeoipLookupService_MAX_RECORD_LENGTH];
    IOSIntArray *x = [IOSIntArray arrayWithLength:2];
    jint offset = 0;
    [self _check_mtime];
    for (jint depth = 31; depth >= 0; depth--) {
      ComMaxmindGeoipLookupService_readNodeWithByteArray_withIntArray_withInt_(self, buf, x, offset);
      if ((ipAddress & (JreLShift32(1, depth))) > 0) {
        if (IOSIntArray_Get(x, 1) >= IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
          self->last_netmask_ = 32 - depth;
          return IOSIntArray_Get(x, 1);
        }
        offset = IOSIntArray_Get(x, 1);
      }
      else {
        if (IOSIntArray_Get(x, 0) >= IOSIntArray_Get(nil_chk(self->databaseSegments_), 0)) {
          self->last_netmask_ = 32 - depth;
          return IOSIntArray_Get(x, 0);
        }
        offset = IOSIntArray_Get(x, 0);
      }
    }
    @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_(JreStrcat("$J", @"Error seeking country while searching for ", ipAddress));
  }
}

void ComMaxmindGeoipLookupService_readNodeWithByteArray_withIntArray_withInt_(ComMaxmindGeoipLookupService *self, IOSByteArray *buf, IOSIntArray *x, jint offset) {
  if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_MEMORY_CACHE) == 1) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dbbuffer_, (2 * self->recordLength_ * offset), buf, 0, 2 * self->recordLength_);
  }
  else if ((self->dboptions_ & ComMaxmindGeoipLookupService_GEOIP_INDEX_CACHE) != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->index_cache_, (2 * self->recordLength_ * offset), buf, 0, 2 * self->recordLength_);
  }
  else {
    @try {
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) seekWithLong:2 * self->recordLength_ * offset];
      [((JavaIoRandomAccessFile *) nil_chk(self->file_)) readWithByteArray:buf];
    }
    @catch (JavaIoIOException *e) {
      @throw create_ComMaxmindGeoipInvalidDatabaseException_initWithNSString_withJavaLangThrowable_(@"Error seeking in database", e);
    }
  }
  for (jint i = 0; i < 2; i++) {
    *IOSIntArray_GetRef(nil_chk(x), i) = 0;
    for (jint j = 0; j < self->recordLength_; j++) {
      jint y = IOSByteArray_Get(nil_chk(buf), i * self->recordLength_ + j);
      if (y < 0) {
        y += 256;
      }
      *IOSIntArray_GetRef(x, i) += (JreLShift32(y, (j * 8)));
    }
  }
}

jlong ComMaxmindGeoipLookupService_bytesToLongWithByteArray_(IOSByteArray *address) {
  ComMaxmindGeoipLookupService_initialize();
  jlong ipnum = 0;
  for (jint i = 0; i < 4; ++i) {
    jlong y = IOSByteArray_Get(nil_chk(address), i);
    if (y < 0) {
      y += 256;
    }
    ipnum += JreLShift64(y, ((3 - i) * 8));
  }
  return ipnum;
}

jint ComMaxmindGeoipLookupService_unsignedByteToIntWithByte_(jbyte b) {
  ComMaxmindGeoipLookupService_initialize();
  return (jint) b & (jint) 0xFF;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMaxmindGeoipLookupService)
