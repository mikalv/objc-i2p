//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/maxmind/geoip/Location.java
//

#include "J2ObjC_source.h"
#include "com/maxmind/geoip/Location.h"
#include "java/lang/Math.h"

inline jdouble ComMaxmindGeoipLocation_get_EARTH_DIAMETER(void);
#define ComMaxmindGeoipLocation_EARTH_DIAMETER 12756.4
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLocation, EARTH_DIAMETER, jdouble)

inline jdouble ComMaxmindGeoipLocation_get_PI(void);
#define ComMaxmindGeoipLocation_PI 3.14159265
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLocation, PI, jdouble)

inline jdouble ComMaxmindGeoipLocation_get_RAD_CONVERT(void);
#define ComMaxmindGeoipLocation_RAD_CONVERT 0.017453292500000002
J2OBJC_STATIC_FIELD_CONSTANT(ComMaxmindGeoipLocation, RAD_CONVERT, jdouble)

@implementation ComMaxmindGeoipLocation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComMaxmindGeoipLocation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jdouble)distanceWithComMaxmindGeoipLocation:(ComMaxmindGeoipLocation *)loc {
  jdouble delta_lat;
  jdouble delta_lon;
  jdouble temp;
  jfloat lat1 = latitude_;
  jfloat lon1 = longitude_;
  jfloat lat2 = ((ComMaxmindGeoipLocation *) nil_chk(loc))->latitude_;
  jfloat lon2 = loc->longitude_;
  JreTimesAssignFloatD(&lat1, ComMaxmindGeoipLocation_RAD_CONVERT);
  JreTimesAssignFloatD(&lat2, ComMaxmindGeoipLocation_RAD_CONVERT);
  delta_lat = lat2 - lat1;
  delta_lon = (lon2 - lon1) * ComMaxmindGeoipLocation_RAD_CONVERT;
  temp = JavaLangMath_powWithDouble_withDouble_(JavaLangMath_sinWithDouble_(delta_lat / 2), 2) + JavaLangMath_cosWithDouble_(lat1) * JavaLangMath_cosWithDouble_(lat2) * JavaLangMath_powWithDouble_withDouble_(JavaLangMath_sinWithDouble_(delta_lon / 2), 2);
  return ComMaxmindGeoipLocation_EARTH_DIAMETER * JavaLangMath_atan2WithDouble_withDouble_(JavaLangMath_sqrtWithDouble_(temp), JavaLangMath_sqrtWithDouble_(1 - temp));
}

- (void)dealloc {
  RELEASE_(countryCode_);
  RELEASE_(countryName_);
  RELEASE_(region_);
  RELEASE_(city_);
  RELEASE_(postalCode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(distanceWithComMaxmindGeoipLocation:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "countryCode_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "countryName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "region_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "city_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "postalCode_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "latitude_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "longitude_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dma_code_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "area_code_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "metro_code_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "EARTH_DIAMETER", "D", .constantValue.asDouble = ComMaxmindGeoipLocation_EARTH_DIAMETER, 0x1a, -1, -1, -1, -1 },
    { "PI", "D", .constantValue.asDouble = ComMaxmindGeoipLocation_PI, 0x1a, -1, -1, -1, -1 },
    { "RAD_CONVERT", "D", .constantValue.asDouble = ComMaxmindGeoipLocation_RAD_CONVERT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "distance", "LComMaxmindGeoipLocation;" };
  static const J2ObjcClassInfo _ComMaxmindGeoipLocation = { "Location", "com.maxmind.geoip", ptrTable, methods, fields, 7, 0x1, 2, 13, -1, -1, -1, -1, -1 };
  return &_ComMaxmindGeoipLocation;
}

@end

void ComMaxmindGeoipLocation_init(ComMaxmindGeoipLocation *self) {
  NSObject_init(self);
}

ComMaxmindGeoipLocation *new_ComMaxmindGeoipLocation_init() {
  J2OBJC_NEW_IMPL(ComMaxmindGeoipLocation, init)
}

ComMaxmindGeoipLocation *create_ComMaxmindGeoipLocation_init() {
  J2OBJC_CREATE_IMPL(ComMaxmindGeoipLocation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComMaxmindGeoipLocation)
