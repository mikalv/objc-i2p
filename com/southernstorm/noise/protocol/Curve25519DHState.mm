//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/southernstorm/noise/protocol/Curve25519DHState.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/crypto/Curve25519.h"
#include "com/southernstorm/noise/protocol/Curve25519DHState.h"
#include "com/southernstorm/noise/protocol/DHState.h"
#include "com/southernstorm/noise/protocol/Noise.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/KeyPair.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/util/Arrays.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"

@interface ComSouthernstormNoiseProtocolCurve25519DHState () {
 @public
  IOSByteArray *publicKey_;
  IOSByteArray *privateKey_;
  jint mode_;
  NetI2pRouterTransportCryptoX25519KeyFactory *_xdh_;
}

@end

J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolCurve25519DHState, publicKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolCurve25519DHState, privateKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolCurve25519DHState, _xdh_, NetI2pRouterTransportCryptoX25519KeyFactory *)

@implementation ComSouthernstormNoiseProtocolCurve25519DHState

- (instancetype)initWithNetI2pRouterTransportCryptoX25519KeyFactory:(NetI2pRouterTransportCryptoX25519KeyFactory *)xdh {
  ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(self, xdh);
  return self;
}

- (void)destroy {
  [self clearKey];
}

- (NSString *)getDHName {
  return @"25519";
}

- (jint)getPublicKeyLength {
  return 32;
}

- (jint)getPrivateKeyLength {
  return 32;
}

- (jint)getSharedKeyLength {
  return 32;
}

- (void)generateKeyPair {
  JavaSecurityKeyPair *kp = [((NetI2pRouterTransportCryptoX25519KeyFactory *) nil_chk(_xdh_)) getKeys];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((id<JavaSecurityPrivateKey>) nil_chk([((JavaSecurityKeyPair *) nil_chk(kp)) getPrivate])) getEncoded], 0, privateKey_, 0, 32);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((id<JavaSecurityPublicKey>) nil_chk([kp getPublic])) getEncoded], 0, publicKey_, 0, 32);
  mode_ = (jint) 0x03;
}

- (void)getPublicKeyWithByteArray:(IOSByteArray *)key
                          withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(publicKey_, 0, key, offset, 32);
}

- (void)setPublicKeyWithByteArray:(IOSByteArray *)key
                          withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, offset, publicKey_, 0, 32);
  JavaUtilArrays_fillWithByteArray_withByte_(privateKey_, (jbyte) 0);
  mode_ = (jint) 0x01;
}

- (void)getPrivateKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey_, 0, key, offset, 32);
}

- (void)setPrivateKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, offset, privateKey_, 0, 32);
  ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(publicKey_, 0, privateKey_, nil);
  mode_ = (jint) 0x03;
}

- (void)setToNullPublicKey {
  JavaUtilArrays_fillWithByteArray_withByte_(publicKey_, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(privateKey_, (jbyte) 0);
  mode_ = (jint) 0x01;
}

- (void)clearKey {
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(publicKey_);
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(privateKey_);
  mode_ = 0;
}

- (jboolean)hasPublicKey {
  return (mode_ & (jint) 0x01) != 0;
}

- (jboolean)hasPrivateKey {
  return (mode_ & (jint) 0x02) != 0;
}

- (jboolean)isNullPublicKey {
  if ((mode_ & (jint) 0x01) == 0) return false;
  jint temp = 0;
  for (jint index = 0; index < 32; ++index) temp |= IOSByteArray_Get(nil_chk(publicKey_), index);
  return temp == 0;
}

- (void)calculateWithByteArray:(IOSByteArray *)sharedKey
                       withInt:(jint)offset
withComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)publicDH {
  if (!([publicDH isKindOfClass:[ComSouthernstormNoiseProtocolCurve25519DHState class]])) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Incompatible DH algorithms");
  ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(sharedKey, offset, privateKey_, ((ComSouthernstormNoiseProtocolCurve25519DHState *) nil_chk(((ComSouthernstormNoiseProtocolCurve25519DHState *) cast_chk(publicDH, [ComSouthernstormNoiseProtocolCurve25519DHState class]))))->publicKey_);
}

- (void)copyFromWithComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)other {
  if (!([other isKindOfClass:[ComSouthernstormNoiseProtocolCurve25519DHState class]])) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Mismatched DH key objects");
  if (other == self) return;
  ComSouthernstormNoiseProtocolCurve25519DHState *dh = (ComSouthernstormNoiseProtocolCurve25519DHState *) cast_chk(other, [ComSouthernstormNoiseProtocolCurve25519DHState class]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((ComSouthernstormNoiseProtocolCurve25519DHState *) nil_chk(dh))->privateKey_, 0, privateKey_, 0, 32);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dh->publicKey_, 0, publicKey_, 0, 32);
  mode_ = dh->mode_;
}

- (void)dealloc {
  RELEASE_(publicKey_);
  RELEASE_(privateKey_);
  RELEASE_(_xdh_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCryptoX25519KeyFactory:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getDHName);
  methods[3].selector = @selector(getPublicKeyLength);
  methods[4].selector = @selector(getPrivateKeyLength);
  methods[5].selector = @selector(getSharedKeyLength);
  methods[6].selector = @selector(generateKeyPair);
  methods[7].selector = @selector(getPublicKeyWithByteArray:withInt:);
  methods[8].selector = @selector(setPublicKeyWithByteArray:withInt:);
  methods[9].selector = @selector(getPrivateKeyWithByteArray:withInt:);
  methods[10].selector = @selector(setPrivateKeyWithByteArray:withInt:);
  methods[11].selector = @selector(setToNullPublicKey);
  methods[12].selector = @selector(clearKey);
  methods[13].selector = @selector(hasPublicKey);
  methods[14].selector = @selector(hasPrivateKey);
  methods[15].selector = @selector(isNullPublicKey);
  methods[16].selector = @selector(calculateWithByteArray:withInt:withComSouthernstormNoiseProtocolDHState:);
  methods[17].selector = @selector(copyFromWithComSouthernstormNoiseProtocolDHState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicKey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "privateKey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_xdh_", "LNetI2pRouterTransportCryptoX25519KeyFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCryptoX25519KeyFactory;", "getPublicKey", "[BI", "setPublicKey", "getPrivateKey", "setPrivateKey", "calculate", "[BILComSouthernstormNoiseProtocolDHState;", "copyFrom", "LComSouthernstormNoiseProtocolDHState;" };
  static const J2ObjcClassInfo _ComSouthernstormNoiseProtocolCurve25519DHState = { "Curve25519DHState", "com.southernstorm.noise.protocol", ptrTable, methods, fields, 7, 0x0, 18, 4, -1, -1, -1, -1, -1 };
  return &_ComSouthernstormNoiseProtocolCurve25519DHState;
}

@end

void ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(ComSouthernstormNoiseProtocolCurve25519DHState *self, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->publicKey_, [IOSByteArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->privateKey_, [IOSByteArray newArrayWithLength:32]);
  self->mode_ = 0;
  JreStrongAssign(&self->_xdh_, xdh);
}

ComSouthernstormNoiseProtocolCurve25519DHState *new_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_NEW_IMPL(ComSouthernstormNoiseProtocolCurve25519DHState, initWithNetI2pRouterTransportCryptoX25519KeyFactory_, xdh)
}

ComSouthernstormNoiseProtocolCurve25519DHState *create_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_CREATE_IMPL(ComSouthernstormNoiseProtocolCurve25519DHState, initWithNetI2pRouterTransportCryptoX25519KeyFactory_, xdh)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSouthernstormNoiseProtocolCurve25519DHState)
