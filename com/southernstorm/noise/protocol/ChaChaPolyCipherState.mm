//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/southernstorm/noise/protocol/ChaChaPolyCipherState.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/crypto/ChaChaCore.h"
#include "com/southernstorm/noise/crypto/Poly1305.h"
#include "com/southernstorm/noise/protocol/ChaChaPolyCipherState.h"
#include "com/southernstorm/noise/protocol/CipherState.h"
#include "com/southernstorm/noise/protocol/Noise.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "javax/crypto/ShortBufferException.h"
#include "net/i2p/data/Base64.h"

@interface ComSouthernstormNoiseProtocolChaChaPolyCipherState () {
 @public
  ComSouthernstormNoiseCryptoPoly1305 *poly_;
  IOSIntArray *input_;
  IOSIntArray *output_;
  IOSByteArray *polyKey_;
  jlong n_;
  jboolean haskey_;
}

+ (void)xorBlockWithByteArray:(IOSByteArray *)input
                      withInt:(jint)inputOffset
                withByteArray:(IOSByteArray *)output
                      withInt:(jint)outputOffset
                      withInt:(jint)length
                 withIntArray:(IOSIntArray *)block;

- (void)setupWithByteArray:(IOSByteArray *)ad;

+ (void)putLittleEndian64WithByteArray:(IOSByteArray *)output
                               withInt:(jint)offset
                              withLong:(jlong)value;

- (void)finishWithByteArray:(IOSByteArray *)ad
                    withInt:(jint)length;

- (void)encryptWithByteArray:(IOSByteArray *)plaintext
                     withInt:(jint)plaintextOffset
               withByteArray:(IOSByteArray *)ciphertext
                     withInt:(jint)ciphertextOffset
                     withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolChaChaPolyCipherState, poly_, ComSouthernstormNoiseCryptoPoly1305 *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolChaChaPolyCipherState, input_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolChaChaPolyCipherState, output_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolChaChaPolyCipherState, polyKey_, IOSByteArray *)

__attribute__((unused)) static void ComSouthernstormNoiseProtocolChaChaPolyCipherState_xorBlockWithByteArray_withInt_withByteArray_withInt_withInt_withIntArray_(IOSByteArray *input, jint inputOffset, IOSByteArray *output, jint outputOffset, jint length, IOSIntArray *block);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolChaChaPolyCipherState_setupWithByteArray_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *ad);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolChaChaPolyCipherState_putLittleEndian64WithByteArray_withInt_withLong_(IOSByteArray *output, jint offset, jlong value);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolChaChaPolyCipherState_finishWithByteArray_withInt_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *ad, jint length);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolChaChaPolyCipherState_encryptWithByteArray_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *plaintext, jint plaintextOffset, IOSByteArray *ciphertext, jint ciphertextOffset, jint length);

@implementation ComSouthernstormNoiseProtocolChaChaPolyCipherState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)destroy {
  [((ComSouthernstormNoiseCryptoPoly1305 *) nil_chk(poly_)) destroy];
  JavaUtilArrays_fillWithIntArray_withInt_(input_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(output_, 0);
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(polyKey_);
}

- (NSString *)getCipherName {
  return @"ChaChaPoly";
}

- (jint)getKeyLength {
  return 32;
}

- (jint)getMACLength {
  return haskey_ ? 16 : 0;
}

- (void)initializeKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset {
  ComSouthernstormNoiseCryptoChaChaCore_initKey256WithIntArray_withByteArray_withInt_(input_, key, offset);
  n_ = 0;
  haskey_ = true;
}

- (jboolean)hasKey {
  return haskey_;
}

+ (void)xorBlockWithByteArray:(IOSByteArray *)input
                      withInt:(jint)inputOffset
                withByteArray:(IOSByteArray *)output
                      withInt:(jint)outputOffset
                      withInt:(jint)length
                 withIntArray:(IOSIntArray *)block {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_xorBlockWithByteArray_withInt_withByteArray_withInt_withInt_withIntArray_(input, inputOffset, output, outputOffset, length, block);
}

- (void)setupWithByteArray:(IOSByteArray *)ad {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_setupWithByteArray_(self, ad);
}

+ (void)putLittleEndian64WithByteArray:(IOSByteArray *)output
                               withInt:(jint)offset
                              withLong:(jlong)value {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_putLittleEndian64WithByteArray_withInt_withLong_(output, offset, value);
}

- (void)finishWithByteArray:(IOSByteArray *)ad
                    withInt:(jint)length {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_finishWithByteArray_withInt_(self, ad, length);
}

- (void)encryptWithByteArray:(IOSByteArray *)plaintext
                     withInt:(jint)plaintextOffset
               withByteArray:(IOSByteArray *)ciphertext
                     withInt:(jint)ciphertextOffset
                     withInt:(jint)length {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_encryptWithByteArray_withInt_withByteArray_withInt_withInt_(self, plaintext, plaintextOffset, ciphertext, ciphertextOffset, length);
}

- (jint)encryptWithAdWithByteArray:(IOSByteArray *)ad
                     withByteArray:(IOSByteArray *)plaintext
                           withInt:(jint)plaintextOffset
                     withByteArray:(IOSByteArray *)ciphertext
                           withInt:(jint)ciphertextOffset
                           withInt:(jint)length {
  jint space;
  if (ciphertextOffset > ((IOSByteArray *) nil_chk(ciphertext))->size_) space = 0;
  else space = ciphertext->size_ - ciphertextOffset;
  if (!haskey_) {
    if (length > space) @throw create_JavaxCryptoShortBufferException_init();
    if (plaintext != ciphertext || plaintextOffset != ciphertextOffset) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(plaintext, plaintextOffset, ciphertext, ciphertextOffset, length);
    return length;
  }
  if (space < 16 || length > (space - 16)) @throw create_JavaxCryptoShortBufferException_init();
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_setupWithByteArray_(self, ad);
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_encryptWithByteArray_withInt_withByteArray_withInt_withInt_(self, plaintext, plaintextOffset, ciphertext, ciphertextOffset, length);
  [((ComSouthernstormNoiseCryptoPoly1305 *) nil_chk(poly_)) updateWithByteArray:ciphertext withInt:ciphertextOffset withInt:length];
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_finishWithByteArray_withInt_(self, ad, length);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(polyKey_, 0, ciphertext, ciphertextOffset + length, 16);
  return length + 16;
}

- (jint)decryptWithAdWithByteArray:(IOSByteArray *)ad
                     withByteArray:(IOSByteArray *)ciphertext
                           withInt:(jint)ciphertextOffset
                     withByteArray:(IOSByteArray *)plaintext
                           withInt:(jint)plaintextOffset
                           withInt:(jint)length {
  jint space;
  if (ciphertextOffset > ((IOSByteArray *) nil_chk(ciphertext))->size_) space = 0;
  else space = ciphertext->size_ - ciphertextOffset;
  if (length > space) @throw create_JavaxCryptoShortBufferException_init();
  if (plaintextOffset > ((IOSByteArray *) nil_chk(plaintext))->size_) space = 0;
  else space = plaintext->size_ - plaintextOffset;
  if (!haskey_) {
    if (length > space) @throw create_JavaxCryptoShortBufferException_init();
    if (plaintext != ciphertext || plaintextOffset != ciphertextOffset) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ciphertext, ciphertextOffset, plaintext, plaintextOffset, length);
    return length;
  }
  if (length < 16) ComSouthernstormNoiseProtocolNoise_throwBadTagException();
  jint dataLen = length - 16;
  if (dataLen > space) @throw create_JavaxCryptoShortBufferException_init();
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_setupWithByteArray_(self, ad);
  [((ComSouthernstormNoiseCryptoPoly1305 *) nil_chk(poly_)) updateWithByteArray:ciphertext withInt:ciphertextOffset withInt:dataLen];
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_finishWithByteArray_withInt_(self, ad, dataLen);
  jint temp = 0;
  for (jint index = 0; index < 16; ++index) temp |= (IOSByteArray_Get(nil_chk(polyKey_), index) ^ IOSByteArray_Get(ciphertext, ciphertextOffset + dataLen + index));
  if ((temp & (jint) 0xFF) != 0) ComSouthernstormNoiseProtocolNoise_throwBadTagException();
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_encryptWithByteArray_withInt_withByteArray_withInt_withInt_(self, ciphertext, ciphertextOffset, plaintext, plaintextOffset, dataLen);
  return dataLen;
}

- (id<ComSouthernstormNoiseProtocolCipherState>)forkWithByteArray:(IOSByteArray *)key
                                                          withInt:(jint)offset {
  id<ComSouthernstormNoiseProtocolCipherState> cipher = create_ComSouthernstormNoiseProtocolChaChaPolyCipherState_init();
  [cipher initializeKeyWithByteArray:key withInt:offset];
  return cipher;
}

- (void)setNonceWithLong:(jlong)nonce {
  n_ = nonce;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"  Cipher State:\n    nonce: "];
  [buf appendWithLong:n_];
  [buf appendWithNSString:@"\n    poly key: "];
  if (haskey_) [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(polyKey_)];
  else [buf appendWithNSString:@"null"];
  [buf appendWithChar:0x000a];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(input_);
  RELEASE_(output_);
  RELEASE_(polyKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 12, 15, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolCipherState;", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getCipherName);
  methods[3].selector = @selector(getKeyLength);
  methods[4].selector = @selector(getMACLength);
  methods[5].selector = @selector(initializeKeyWithByteArray:withInt:);
  methods[6].selector = @selector(hasKey);
  methods[7].selector = @selector(xorBlockWithByteArray:withInt:withByteArray:withInt:withInt:withIntArray:);
  methods[8].selector = @selector(setupWithByteArray:);
  methods[9].selector = @selector(putLittleEndian64WithByteArray:withInt:withLong:);
  methods[10].selector = @selector(finishWithByteArray:withInt:);
  methods[11].selector = @selector(encryptWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[12].selector = @selector(encryptWithAdWithByteArray:withByteArray:withInt:withByteArray:withInt:withInt:);
  methods[13].selector = @selector(decryptWithAdWithByteArray:withByteArray:withInt:withByteArray:withInt:withInt:);
  methods[14].selector = @selector(forkWithByteArray:withInt:);
  methods[15].selector = @selector(setNonceWithLong:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", "LComSouthernstormNoiseCryptoPoly1305;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "input_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "output_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "polyKey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "n_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "haskey_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initializeKey", "[BI", "xorBlock", "[BI[BII[I", "setup", "[B", "putLittleEndian64", "[BIJ", "finish", "encrypt", "[BI[BII", "encryptWithAd", "[B[BI[BII", "LJavaxCryptoShortBufferException;", "decryptWithAd", "LJavaxCryptoShortBufferException;LJavaxCryptoBadPaddingException;", "fork", "setNonce", "J", "toString" };
  static const J2ObjcClassInfo _ComSouthernstormNoiseProtocolChaChaPolyCipherState = { "ChaChaPolyCipherState", "com.southernstorm.noise.protocol", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_ComSouthernstormNoiseProtocolChaChaPolyCipherState;
}

@end

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_init(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->poly_, new_ComSouthernstormNoiseCryptoPoly1305_init());
  JreStrongAssignAndConsume(&self->input_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->output_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->polyKey_, [IOSByteArray newArrayWithLength:32]);
  self->n_ = 0;
  self->haskey_ = false;
}

ComSouthernstormNoiseProtocolChaChaPolyCipherState *new_ComSouthernstormNoiseProtocolChaChaPolyCipherState_init() {
  J2OBJC_NEW_IMPL(ComSouthernstormNoiseProtocolChaChaPolyCipherState, init)
}

ComSouthernstormNoiseProtocolChaChaPolyCipherState *create_ComSouthernstormNoiseProtocolChaChaPolyCipherState_init() {
  J2OBJC_CREATE_IMPL(ComSouthernstormNoiseProtocolChaChaPolyCipherState, init)
}

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_xorBlockWithByteArray_withInt_withByteArray_withInt_withInt_withIntArray_(IOSByteArray *input, jint inputOffset, IOSByteArray *output, jint outputOffset, jint length, IOSIntArray *block) {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_initialize();
  jint posn = 0;
  jint value;
  while (length >= 4) {
    value = IOSIntArray_Get(nil_chk(block), posn++);
    *IOSByteArray_GetRef(nil_chk(output), outputOffset) = (jbyte) (IOSByteArray_Get(nil_chk(input), inputOffset) ^ value);
    *IOSByteArray_GetRef(output, outputOffset + 1) = (jbyte) (IOSByteArray_Get(input, inputOffset + 1) ^ (JreRShift32(value, 8)));
    *IOSByteArray_GetRef(output, outputOffset + 2) = (jbyte) (IOSByteArray_Get(input, inputOffset + 2) ^ (JreRShift32(value, 16)));
    *IOSByteArray_GetRef(output, outputOffset + 3) = (jbyte) (IOSByteArray_Get(input, inputOffset + 3) ^ (JreRShift32(value, 24)));
    inputOffset += 4;
    outputOffset += 4;
    length -= 4;
  }
  if (length == 3) {
    value = IOSIntArray_Get(nil_chk(block), posn);
    *IOSByteArray_GetRef(nil_chk(output), outputOffset) = (jbyte) (IOSByteArray_Get(nil_chk(input), inputOffset) ^ value);
    *IOSByteArray_GetRef(output, outputOffset + 1) = (jbyte) (IOSByteArray_Get(input, inputOffset + 1) ^ (JreRShift32(value, 8)));
    *IOSByteArray_GetRef(output, outputOffset + 2) = (jbyte) (IOSByteArray_Get(input, inputOffset + 2) ^ (JreRShift32(value, 16)));
  }
  else if (length == 2) {
    value = IOSIntArray_Get(nil_chk(block), posn);
    *IOSByteArray_GetRef(nil_chk(output), outputOffset) = (jbyte) (IOSByteArray_Get(nil_chk(input), inputOffset) ^ value);
    *IOSByteArray_GetRef(output, outputOffset + 1) = (jbyte) (IOSByteArray_Get(input, inputOffset + 1) ^ (JreRShift32(value, 8)));
  }
  else if (length == 1) {
    value = IOSIntArray_Get(nil_chk(block), posn);
    *IOSByteArray_GetRef(nil_chk(output), outputOffset) = (jbyte) (IOSByteArray_Get(nil_chk(input), inputOffset) ^ value);
  }
}

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_setupWithByteArray_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *ad) {
  if (self->n_ == -1LL) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Nonce has wrapped around");
  ComSouthernstormNoiseCryptoChaChaCore_initIVWithIntArray_withLong_(self->input_, self->n_++);
  ComSouthernstormNoiseCryptoChaChaCore_hash__WithIntArray_withIntArray_(self->output_, self->input_);
  JavaUtilArrays_fillWithByteArray_withByte_(self->polyKey_, (jbyte) 0);
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_xorBlockWithByteArray_withInt_withByteArray_withInt_withInt_withIntArray_(self->polyKey_, 0, self->polyKey_, 0, 32, self->output_);
  [((ComSouthernstormNoiseCryptoPoly1305 *) nil_chk(self->poly_)) resetWithByteArray:self->polyKey_ withInt:0];
  if (ad != nil) {
    [self->poly_ updateWithByteArray:ad withInt:0 withInt:ad->size_];
    [self->poly_ pad];
  }
  if (++(*IOSIntArray_GetRef(nil_chk(self->input_), 12)) == 0) ++(*IOSIntArray_GetRef(self->input_, 13));
}

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_putLittleEndian64WithByteArray_withInt_withLong_(IOSByteArray *output, jint offset, jlong value) {
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_initialize();
  *IOSByteArray_GetRef(nil_chk(output), offset) = (jbyte) value;
  *IOSByteArray_GetRef(output, offset + 1) = (jbyte) (JreRShift64(value, 8));
  *IOSByteArray_GetRef(output, offset + 2) = (jbyte) (JreRShift64(value, 16));
  *IOSByteArray_GetRef(output, offset + 3) = (jbyte) (JreRShift64(value, 24));
  *IOSByteArray_GetRef(output, offset + 4) = (jbyte) (JreRShift64(value, 32));
  *IOSByteArray_GetRef(output, offset + 5) = (jbyte) (JreRShift64(value, 40));
  *IOSByteArray_GetRef(output, offset + 6) = (jbyte) (JreRShift64(value, 48));
  *IOSByteArray_GetRef(output, offset + 7) = (jbyte) (JreRShift64(value, 56));
}

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_finishWithByteArray_withInt_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *ad, jint length) {
  [((ComSouthernstormNoiseCryptoPoly1305 *) nil_chk(self->poly_)) pad];
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_putLittleEndian64WithByteArray_withInt_withLong_(self->polyKey_, 0, ad != nil ? ad->size_ : 0);
  ComSouthernstormNoiseProtocolChaChaPolyCipherState_putLittleEndian64WithByteArray_withInt_withLong_(self->polyKey_, 8, length);
  [self->poly_ updateWithByteArray:self->polyKey_ withInt:0 withInt:16];
  [self->poly_ finishWithByteArray:self->polyKey_ withInt:0];
}

void ComSouthernstormNoiseProtocolChaChaPolyCipherState_encryptWithByteArray_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolChaChaPolyCipherState *self, IOSByteArray *plaintext, jint plaintextOffset, IOSByteArray *ciphertext, jint ciphertextOffset, jint length) {
  while (length > 0) {
    jint tempLen = 64;
    if (tempLen > length) tempLen = length;
    ComSouthernstormNoiseCryptoChaChaCore_hash__WithIntArray_withIntArray_(self->output_, self->input_);
    ComSouthernstormNoiseProtocolChaChaPolyCipherState_xorBlockWithByteArray_withInt_withByteArray_withInt_withInt_withIntArray_(plaintext, plaintextOffset, ciphertext, ciphertextOffset, tempLen, self->output_);
    if (++(*IOSIntArray_GetRef(nil_chk(self->input_), 12)) == 0) ++(*IOSIntArray_GetRef(self->input_, 13));
    plaintextOffset += tempLen;
    ciphertextOffset += tempLen;
    length -= tempLen;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSouthernstormNoiseProtocolChaChaPolyCipherState)
