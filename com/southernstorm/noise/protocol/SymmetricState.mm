//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/southernstorm/noise/protocol/SymmetricState.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/protocol/CipherState.h"
#include "com/southernstorm/noise/protocol/CipherStatePair.h"
#include "com/southernstorm/noise/protocol/DHState.h"
#include "com/southernstorm/noise/protocol/HandshakeState.h"
#include "com/southernstorm/noise/protocol/Noise.h"
#include "com/southernstorm/noise/protocol/SymmetricState.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/DigestException.h"
#include "java/security/MessageDigest.h"
#include "java/util/Arrays.h"
#include "net/i2p/data/Base64.h"

@interface ComSouthernstormNoiseProtocolSymmetricState () {
 @public
  id<ComSouthernstormNoiseProtocolCipherState> cipher_;
  JavaSecurityMessageDigest *hash__;
  IOSByteArray *ck_;
  IOSByteArray *h_;
  IOSByteArray *prev_h_;
}

- (void)hashOneWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outputOffset
                     withInt:(jint)outputLength;

- (void)hashTwoWithByteArray:(IOSByteArray *)data1
                     withInt:(jint)offset1
                     withInt:(jint)length1
               withByteArray:(IOSByteArray *)data2
                     withInt:(jint)offset2
                     withInt:(jint)length2
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outputOffset
                     withInt:(jint)outputLength;

- (void)hmacWithByteArray:(IOSByteArray *)key
                  withInt:(jint)keyOffset
                  withInt:(jint)keyLength
            withByteArray:(IOSByteArray *)data
                  withInt:(jint)dataOffset
                  withInt:(jint)dataLength
            withByteArray:(IOSByteArray *)output
                  withInt:(jint)outputOffset
                  withInt:(jint)outputLength;

- (void)hkdfWithByteArray:(IOSByteArray *)key
                  withInt:(jint)keyOffset
                  withInt:(jint)keyLength
            withByteArray:(IOSByteArray *)data
                  withInt:(jint)dataOffset
                  withInt:(jint)dataLength
            withByteArray:(IOSByteArray *)output1
                  withInt:(jint)output1Offset
                  withInt:(jint)output1Length
            withByteArray:(IOSByteArray *)output2
                  withInt:(jint)output2Offset
                  withInt:(jint)output2Length;

@end

J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolSymmetricState, cipher_, id<ComSouthernstormNoiseProtocolCipherState>)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolSymmetricState, hash__, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolSymmetricState, ck_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolSymmetricState, h_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolSymmetricState, prev_h_, IOSByteArray *)

inline IOSByteArray *ComSouthernstormNoiseProtocolSymmetricState_get_INIT_HASH(void);
static IOSByteArray *ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolSymmetricState, INIT_HASH, IOSByteArray *)

__attribute__((unused)) static void ComSouthernstormNoiseProtocolSymmetricState_hashOneWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *data, jint offset, jint length, IOSByteArray *output, jint outputOffset, jint outputLength);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolSymmetricState_hashTwoWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *data1, jint offset1, jint length1, IOSByteArray *data2, jint offset2, jint length2, IOSByteArray *output, jint outputOffset, jint outputLength);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *key, jint keyOffset, jint keyLength, IOSByteArray *data, jint dataOffset, jint dataLength, IOSByteArray *output, jint outputOffset, jint outputLength);

__attribute__((unused)) static void ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *key, jint keyOffset, jint keyLength, IOSByteArray *data, jint dataOffset, jint dataLength, IOSByteArray *output1, jint output1Offset, jint output1Length, IOSByteArray *output2, jint output2Offset, jint output2Length);

J2OBJC_INITIALIZED_DEFN(ComSouthernstormNoiseProtocolSymmetricState)

@implementation ComSouthernstormNoiseProtocolSymmetricState

- (instancetype)initWithNSString:(NSString *)cipherName
                    withNSString:(NSString *)hashName {
  ComSouthernstormNoiseProtocolSymmetricState_initWithNSString_withNSString_(self, cipherName, hashName);
  return self;
}

- (NSString *)getProtocolName {
  return ComSouthernstormNoiseProtocolHandshakeState_protocolName;
}

- (jint)getMACLength {
  return [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) getMACLength];
}

- (void)mixKeyWithByteArray:(IOSByteArray *)data
                    withInt:(jint)offset
                    withInt:(jint)length {
  jint keyLength = [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) getKeyLength];
  IOSByteArray *tempKey = [IOSByteArray arrayWithLength:keyLength];
  @try {
    ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, ck_, 0, ((IOSByteArray *) nil_chk(ck_))->size_, data, offset, length, ck_, 0, ck_->size_, tempKey, 0, keyLength);
    [cipher_ initializeKeyWithByteArray:tempKey withInt:0];
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(tempKey);
  }
}

- (void)mixHashWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length {
  ComSouthernstormNoiseProtocolSymmetricState_hashTwoWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, h_, 0, ((IOSByteArray *) nil_chk(h_))->size_, data, offset, length, h_, 0, h_->size_);
}

- (void)mixPreSharedKeyWithByteArray:(IOSByteArray *)key {
  IOSByteArray *temp = [IOSByteArray arrayWithLength:[((JavaSecurityMessageDigest *) nil_chk(hash__)) getDigestLength]];
  @try {
    ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, ck_, 0, ((IOSByteArray *) nil_chk(ck_))->size_, key, 0, ((IOSByteArray *) nil_chk(key))->size_, ck_, 0, ck_->size_, temp, 0, temp->size_);
    [self mixHashWithByteArray:temp withInt:0 withInt:temp->size_];
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(temp);
  }
}

- (void)mixPublicKeyWithComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)dh {
  IOSByteArray *temp = [IOSByteArray arrayWithLength:[((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(dh)) getPublicKeyLength]];
  @try {
    [dh getPublicKeyWithByteArray:temp withInt:0];
    [self mixHashWithByteArray:temp withInt:0 withInt:temp->size_];
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(temp);
  }
}

- (void)mixPublicKeyIntoCKWithComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)dh {
  IOSByteArray *temp = [IOSByteArray arrayWithLength:[((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(dh)) getPublicKeyLength]];
  @try {
    [dh getPublicKeyWithByteArray:temp withInt:0];
    [self mixKeyWithByteArray:temp withInt:0 withInt:temp->size_];
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(temp);
  }
}

- (jint)encryptAndHashWithByteArray:(IOSByteArray *)plaintext
                            withInt:(jint)plaintextOffset
                      withByteArray:(IOSByteArray *)ciphertext
                            withInt:(jint)ciphertextOffset
                            withInt:(jint)length {
  jint ciphertextLength = [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) encryptWithAdWithByteArray:h_ withByteArray:plaintext withInt:plaintextOffset withByteArray:ciphertext withInt:ciphertextOffset withInt:length];
  [self mixHashWithByteArray:ciphertext withInt:ciphertextOffset withInt:ciphertextLength];
  return ciphertextLength;
}

- (jint)decryptAndHashWithByteArray:(IOSByteArray *)ciphertext
                            withInt:(jint)ciphertextOffset
                      withByteArray:(IOSByteArray *)plaintext
                            withInt:(jint)plaintextOffset
                            withInt:(jint)length {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(h_, 0, prev_h_, 0, ((IOSByteArray *) nil_chk(h_))->size_);
  [self mixHashWithByteArray:ciphertext withInt:ciphertextOffset withInt:length];
  return [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) decryptWithAdWithByteArray:prev_h_ withByteArray:ciphertext withInt:ciphertextOffset withByteArray:plaintext withInt:plaintextOffset withInt:length];
}

- (ComSouthernstormNoiseProtocolCipherStatePair *)split {
  return [self splitWithByteArray:[IOSByteArray arrayWithLength:0] withInt:0 withInt:0];
}

- (ComSouthernstormNoiseProtocolCipherStatePair *)splitWithByteArray:(IOSByteArray *)secondaryKey
                                                             withInt:(jint)offset
                                                             withInt:(jint)length {
  if (length != 0 && length != 32) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Secondary keys must be 0 or 32 bytes in length");
  jint keyLength = [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) getKeyLength];
  IOSByteArray *k1 = [IOSByteArray arrayWithLength:keyLength];
  IOSByteArray *k2 = [IOSByteArray arrayWithLength:keyLength];
  @try {
    ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, ck_, 0, ((IOSByteArray *) nil_chk(ck_))->size_, secondaryKey, offset, length, k1, 0, k1->size_, k2, 0, k2->size_);
    id<ComSouthernstormNoiseProtocolCipherState> c1 = nil;
    id<ComSouthernstormNoiseProtocolCipherState> c2 = nil;
    ComSouthernstormNoiseProtocolCipherStatePair *pair = nil;
    @try {
      c1 = [cipher_ forkWithByteArray:k1 withInt:0];
      c2 = [cipher_ forkWithByteArray:k2 withInt:0];
      pair = create_ComSouthernstormNoiseProtocolCipherStatePair_initWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_(c1, c2);
    }
    @finally {
      if (c1 == nil || c2 == nil || pair == nil) {
        if (c1 != nil) [c1 destroy];
        if (c2 != nil) [c2 destroy];
        pair = nil;
      }
    }
    return pair;
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(k1);
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(k2);
  }
}

- (IOSByteArray *)getHandshakeHash {
  return h_;
}

- (void)destroy {
  [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) destroy];
  [((JavaSecurityMessageDigest *) nil_chk(hash__)) reset];
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(ck_);
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(h_);
  ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(prev_h_);
}

- (void)hashOneWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outputOffset
                     withInt:(jint)outputLength {
  ComSouthernstormNoiseProtocolSymmetricState_hashOneWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, data, offset, length, output, outputOffset, outputLength);
}

- (void)hashTwoWithByteArray:(IOSByteArray *)data1
                     withInt:(jint)offset1
                     withInt:(jint)length1
               withByteArray:(IOSByteArray *)data2
                     withInt:(jint)offset2
                     withInt:(jint)length2
               withByteArray:(IOSByteArray *)output
                     withInt:(jint)outputOffset
                     withInt:(jint)outputLength {
  ComSouthernstormNoiseProtocolSymmetricState_hashTwoWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, data1, offset1, length1, data2, offset2, length2, output, outputOffset, outputLength);
}

- (void)hmacWithByteArray:(IOSByteArray *)key
                  withInt:(jint)keyOffset
                  withInt:(jint)keyLength
            withByteArray:(IOSByteArray *)data
                  withInt:(jint)dataOffset
                  withInt:(jint)dataLength
            withByteArray:(IOSByteArray *)output
                  withInt:(jint)outputOffset
                  withInt:(jint)outputLength {
  ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, key, keyOffset, keyLength, data, dataOffset, dataLength, output, outputOffset, outputLength);
}

- (void)hkdfWithByteArray:(IOSByteArray *)key
                  withInt:(jint)keyOffset
                  withInt:(jint)keyLength
            withByteArray:(IOSByteArray *)data
                  withInt:(jint)dataOffset
                  withInt:(jint)dataLength
            withByteArray:(IOSByteArray *)output1
                  withInt:(jint)output1Offset
                  withInt:(jint)output1Length
            withByteArray:(IOSByteArray *)output2
                  withInt:(jint)output2Offset
                  withInt:(jint)output2Length {
  ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, key, keyOffset, keyLength, data, dataOffset, dataLength, output1, output1Offset, output1Length, output2, output2Offset, output2Length);
}

- (IOSByteArray *)getChainingKey {
  IOSByteArray *rv = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(ck_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ck_, 0, rv, 0, ck_->size_);
  return rv;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"  Symmetric State:\n    ck: "];
  [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(ck_)];
  [buf appendWithNSString:@"\n    h:  "];
  [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(h_)];
  [buf appendWithChar:0x000a];
  [buf appendWithNSString:[((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(cipher_)) description]];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(cipher_);
  RELEASE_(hash__);
  RELEASE_(ck_);
  RELEASE_(h_);
  RELEASE_(prev_h_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 11, 14, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolCipherStatePair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolCipherStatePair;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getProtocolName);
  methods[2].selector = @selector(getMACLength);
  methods[3].selector = @selector(mixKeyWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(mixHashWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(mixPreSharedKeyWithByteArray:);
  methods[6].selector = @selector(mixPublicKeyWithComSouthernstormNoiseProtocolDHState:);
  methods[7].selector = @selector(mixPublicKeyIntoCKWithComSouthernstormNoiseProtocolDHState:);
  methods[8].selector = @selector(encryptAndHashWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[9].selector = @selector(decryptAndHashWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[10].selector = @selector(split);
  methods[11].selector = @selector(splitWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(getHandshakeHash);
  methods[13].selector = @selector(destroy);
  methods[14].selector = @selector(hashOneWithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[15].selector = @selector(hashTwoWithByteArray:withInt:withInt:withByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[16].selector = @selector(hmacWithByteArray:withInt:withInt:withByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[17].selector = @selector(hkdfWithByteArray:withInt:withInt:withByteArray:withInt:withInt:withByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[18].selector = @selector(getChainingKey);
  methods[19].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INIT_HASH", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "cipher_", "LComSouthernstormNoiseProtocolCipherState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hash__", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, 25, -1, -1, -1 },
    { "ck_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prev_h_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "mixKey", "[BII", "mixHash", "mixPreSharedKey", "[B", "mixPublicKey", "LComSouthernstormNoiseProtocolDHState;", "mixPublicKeyIntoCK", "encryptAndHash", "[BI[BII", "LJavaxCryptoShortBufferException;", "decryptAndHash", "LJavaxCryptoShortBufferException;LJavaxCryptoBadPaddingException;", "split", "hashOne", "[BII[BII", "hashTwo", "[BII[BII[BII", "hmac", "hkdf", "[BII[BII[BII[BII", "toString", &ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH, "hash" };
  static const J2ObjcClassInfo _ComSouthernstormNoiseProtocolSymmetricState = { "SymmetricState", "com.southernstorm.noise.protocol", ptrTable, methods, fields, 7, 0x0, 20, 6, -1, -1, -1, -1, -1 };
  return &_ComSouthernstormNoiseProtocolSymmetricState;
}

+ (void)initialize {
  if (self == [ComSouthernstormNoiseProtocolSymmetricState class]) {
    {
      IOSByteArray *protocolNameBytes;
      @try {
        protocolNameBytes = [((NSString *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_protocolName)) java_getBytesWithCharsetName:@"UTF-8"];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"UTF-8 encoding is not supported");
      }
      JreStrongAssignAndConsume(&ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH, [IOSByteArray newArrayWithLength:32]);
      if (((IOSByteArray *) nil_chk(protocolNameBytes))->size_ <= 32) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(protocolNameBytes, 0, ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH, 0, protocolNameBytes->size_);
        JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH, protocolNameBytes->size_, 32, (jbyte) 0);
      }
      else {
        @try {
          JavaSecurityMessageDigest *hash_ = ComSouthernstormNoiseProtocolNoise_createHashWithNSString_(@"SHA256");
          [((JavaSecurityMessageDigest *) nil_chk(hash_)) updateWithByteArray:protocolNameBytes withInt:0 withInt:protocolNameBytes->size_];
          [hash_ digestWithByteArray:ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH withInt:0 withInt:32];
        }
        @catch (JavaLangException *e) {
          @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(e);
        }
      }
    }
    J2OBJC_SET_INITIALIZED(ComSouthernstormNoiseProtocolSymmetricState)
  }
}

@end

void ComSouthernstormNoiseProtocolSymmetricState_initWithNSString_withNSString_(ComSouthernstormNoiseProtocolSymmetricState *self, NSString *cipherName, NSString *hashName) {
  NSObject_init(self);
  JreStrongAssign(&self->cipher_, ComSouthernstormNoiseProtocolNoise_createCipherWithNSString_(cipherName));
  JreStrongAssign(&self->hash__, ComSouthernstormNoiseProtocolNoise_createHashWithNSString_(hashName));
  jint hashLength = [((JavaSecurityMessageDigest *) nil_chk(self->hash__)) getDigestLength];
  JreStrongAssignAndConsume(&self->ck_, [IOSByteArray newArrayWithLength:hashLength]);
  JreStrongAssignAndConsume(&self->h_, [IOSByteArray newArrayWithLength:hashLength]);
  JreStrongAssignAndConsume(&self->prev_h_, [IOSByteArray newArrayWithLength:hashLength]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState_INIT_HASH, 0, self->h_, 0, hashLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->h_, 0, self->ck_, 0, hashLength);
}

ComSouthernstormNoiseProtocolSymmetricState *new_ComSouthernstormNoiseProtocolSymmetricState_initWithNSString_withNSString_(NSString *cipherName, NSString *hashName) {
  J2OBJC_NEW_IMPL(ComSouthernstormNoiseProtocolSymmetricState, initWithNSString_withNSString_, cipherName, hashName)
}

ComSouthernstormNoiseProtocolSymmetricState *create_ComSouthernstormNoiseProtocolSymmetricState_initWithNSString_withNSString_(NSString *cipherName, NSString *hashName) {
  J2OBJC_CREATE_IMPL(ComSouthernstormNoiseProtocolSymmetricState, initWithNSString_withNSString_, cipherName, hashName)
}

void ComSouthernstormNoiseProtocolSymmetricState_hashOneWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *data, jint offset, jint length, IOSByteArray *output, jint outputOffset, jint outputLength) {
  [((JavaSecurityMessageDigest *) nil_chk(self->hash__)) reset];
  [self->hash__ updateWithByteArray:data withInt:offset withInt:length];
  @try {
    [self->hash__ digestWithByteArray:output withInt:outputOffset withInt:outputLength];
  }
  @catch (JavaSecurityDigestException *e) {
    JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(output, outputOffset, outputLength, (jbyte) 0);
  }
}

void ComSouthernstormNoiseProtocolSymmetricState_hashTwoWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *data1, jint offset1, jint length1, IOSByteArray *data2, jint offset2, jint length2, IOSByteArray *output, jint outputOffset, jint outputLength) {
  [((JavaSecurityMessageDigest *) nil_chk(self->hash__)) reset];
  [self->hash__ updateWithByteArray:data1 withInt:offset1 withInt:length1];
  [self->hash__ updateWithByteArray:data2 withInt:offset2 withInt:length2];
  @try {
    [self->hash__ digestWithByteArray:output withInt:outputOffset withInt:outputLength];
  }
  @catch (JavaSecurityDigestException *e) {
    JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(output, outputOffset, outputLength, (jbyte) 0);
  }
}

void ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *key, jint keyOffset, jint keyLength, IOSByteArray *data, jint dataOffset, jint dataLength, IOSByteArray *output, jint outputOffset, jint outputLength) {
  jint hashLength = [((JavaSecurityMessageDigest *) nil_chk(self->hash__)) getDigestLength];
  jint blockLength = hashLength * 2;
  IOSByteArray *block = [IOSByteArray arrayWithLength:blockLength];
  jint index;
  @try {
    if (keyLength <= blockLength) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, keyOffset, block, 0, keyLength);
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(block, keyLength, blockLength, (jbyte) 0);
    }
    else {
      [self->hash__ reset];
      [self->hash__ updateWithByteArray:key withInt:keyOffset withInt:keyLength];
      [self->hash__ digestWithByteArray:block withInt:0 withInt:hashLength];
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(block, hashLength, blockLength, (jbyte) 0);
    }
    for (index = 0; index < blockLength; ++index) *IOSByteArray_GetRef(block, index) ^= (jbyte) (jint) 0x36;
    [self->hash__ reset];
    [self->hash__ updateWithByteArray:block withInt:0 withInt:blockLength];
    [self->hash__ updateWithByteArray:data withInt:dataOffset withInt:dataLength];
    [self->hash__ digestWithByteArray:output withInt:outputOffset withInt:hashLength];
    for (index = 0; index < blockLength; ++index) *IOSByteArray_GetRef(block, index) ^= (jbyte) ((jint) 0x36 ^ (jint) 0x5C);
    [self->hash__ reset];
    [self->hash__ updateWithByteArray:block withInt:0 withInt:blockLength];
    [self->hash__ updateWithByteArray:output withInt:outputOffset withInt:hashLength];
    [self->hash__ digestWithByteArray:output withInt:outputOffset withInt:outputLength];
  }
  @catch (JavaSecurityDigestException *e) {
    JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(output, outputOffset, outputLength, (jbyte) 0);
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(block);
  }
}

void ComSouthernstormNoiseProtocolSymmetricState_hkdfWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(ComSouthernstormNoiseProtocolSymmetricState *self, IOSByteArray *key, jint keyOffset, jint keyLength, IOSByteArray *data, jint dataOffset, jint dataLength, IOSByteArray *output1, jint output1Offset, jint output1Length, IOSByteArray *output2, jint output2Offset, jint output2Length) {
  jint hashLength = [((JavaSecurityMessageDigest *) nil_chk(self->hash__)) getDigestLength];
  IOSByteArray *tempKey = [IOSByteArray arrayWithLength:hashLength];
  IOSByteArray *tempHash = [IOSByteArray arrayWithLength:hashLength + 1];
  @try {
    ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, key, keyOffset, keyLength, data, dataOffset, dataLength, tempKey, 0, hashLength);
    *IOSByteArray_GetRef(tempHash, 0) = (jbyte) (jint) 0x01;
    ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, tempKey, 0, hashLength, tempHash, 0, 1, tempHash, 0, hashLength);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tempHash, 0, output1, output1Offset, output1Length);
    *IOSByteArray_GetRef(tempHash, hashLength) = (jbyte) (jint) 0x02;
    ComSouthernstormNoiseProtocolSymmetricState_hmacWithByteArray_withInt_withInt_withByteArray_withInt_withInt_withByteArray_withInt_withInt_(self, tempKey, 0, hashLength, tempHash, 0, hashLength + 1, tempHash, 0, hashLength);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tempHash, 0, output2, output2Offset, output2Length);
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(tempKey);
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(tempHash);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSouthernstormNoiseProtocolSymmetricState)
