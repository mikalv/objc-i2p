//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/southernstorm/noise/protocol/HandshakeState.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/protocol/CipherStatePair.h"
#include "com/southernstorm/noise/protocol/Curve25519DHState.h"
#include "com/southernstorm/noise/protocol/DHState.h"
#include "com/southernstorm/noise/protocol/HandshakeState.h"
#include "com/southernstorm/noise/protocol/Noise.h"
#include "com/southernstorm/noise/protocol/Pattern.h"
#include "com/southernstorm/noise/protocol/SymmetricState.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/ShortBufferException.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"

@interface ComSouthernstormNoiseProtocolHandshakeState () {
 @public
  ComSouthernstormNoiseProtocolSymmetricState *symmetric_;
  jboolean isInitiator_;
  id<ComSouthernstormNoiseProtocolDHState> localKeyPair_;
  id<ComSouthernstormNoiseProtocolDHState> localEphemeral_;
  id<ComSouthernstormNoiseProtocolDHState> remotePublicKey_;
  id<ComSouthernstormNoiseProtocolDHState> remoteEphemeral_;
  jint action_;
  jint requirements_;
  jint patternIndex_;
}

- (void)mixDHWithComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)local
             withComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)remote;

+ (jint)computeRequirementsWithShort:(jshort)flags
                        withNSString:(NSString *)prefix
                             withInt:(jint)role
                         withBoolean:(jboolean)isFallback;

@end

J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolHandshakeState, symmetric_, ComSouthernstormNoiseProtocolSymmetricState *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolHandshakeState, localKeyPair_, id<ComSouthernstormNoiseProtocolDHState>)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolHandshakeState, localEphemeral_, id<ComSouthernstormNoiseProtocolDHState>)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolHandshakeState, remotePublicKey_, id<ComSouthernstormNoiseProtocolDHState>)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseProtocolHandshakeState, remoteEphemeral_, id<ComSouthernstormNoiseProtocolDHState>)

inline IOSByteArray *ComSouthernstormNoiseProtocolHandshakeState_get_prologue(void);
static IOSByteArray *ComSouthernstormNoiseProtocolHandshakeState_prologue;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, prologue, IOSByteArray *)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_LOCAL_REQUIRED(void);
#define ComSouthernstormNoiseProtocolHandshakeState_LOCAL_REQUIRED 1
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, LOCAL_REQUIRED, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_REMOTE_REQUIRED(void);
#define ComSouthernstormNoiseProtocolHandshakeState_REMOTE_REQUIRED 2
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, REMOTE_REQUIRED, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_PSK_REQUIRED(void);
#define ComSouthernstormNoiseProtocolHandshakeState_PSK_REQUIRED 4
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, PSK_REQUIRED, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_FALLBACK_PREMSG(void);
#define ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG 8
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, FALLBACK_PREMSG, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_LOCAL_PREMSG(void);
#define ComSouthernstormNoiseProtocolHandshakeState_LOCAL_PREMSG 16
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, LOCAL_PREMSG, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_REMOTE_PREMSG(void);
#define ComSouthernstormNoiseProtocolHandshakeState_REMOTE_PREMSG 32
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, REMOTE_PREMSG, jint)

inline jint ComSouthernstormNoiseProtocolHandshakeState_get_FALLBACK_POSSIBLE(void);
#define ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_POSSIBLE 64
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseProtocolHandshakeState, FALLBACK_POSSIBLE, jint)

inline NSString *ComSouthernstormNoiseProtocolHandshakeState_get_prefix(void);
static NSString *ComSouthernstormNoiseProtocolHandshakeState_prefix;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, prefix, NSString *)

inline NSString *ComSouthernstormNoiseProtocolHandshakeState_get_patternId(void);
static NSString *ComSouthernstormNoiseProtocolHandshakeState_patternId;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, patternId, NSString *)

inline NSString *ComSouthernstormNoiseProtocolHandshakeState_get_dh(void);
inline NSString *ComSouthernstormNoiseProtocolHandshakeState_set_dh(NSString *value);
static NSString *ComSouthernstormNoiseProtocolHandshakeState_dh;
J2OBJC_STATIC_FIELD_OBJ(ComSouthernstormNoiseProtocolHandshakeState, dh, NSString *)

inline NSString *ComSouthernstormNoiseProtocolHandshakeState_get_cipher(void);
static NSString *ComSouthernstormNoiseProtocolHandshakeState_cipher;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, cipher, NSString *)

inline NSString *ComSouthernstormNoiseProtocolHandshakeState_get_hash(void);
static NSString *ComSouthernstormNoiseProtocolHandshakeState_hash;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, hash, NSString *)

inline IOSShortArray *ComSouthernstormNoiseProtocolHandshakeState_get_pattern(void);
static IOSShortArray *ComSouthernstormNoiseProtocolHandshakeState_pattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, pattern, IOSShortArray *)

inline IOSByteArray *ComSouthernstormNoiseProtocolHandshakeState_get_emptyPrologue(void);
static IOSByteArray *ComSouthernstormNoiseProtocolHandshakeState_emptyPrologue;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComSouthernstormNoiseProtocolHandshakeState, emptyPrologue, IOSByteArray *)

__attribute__((unused)) static void ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(ComSouthernstormNoiseProtocolHandshakeState *self, id<ComSouthernstormNoiseProtocolDHState> local, id<ComSouthernstormNoiseProtocolDHState> remote);

__attribute__((unused)) static jint ComSouthernstormNoiseProtocolHandshakeState_computeRequirementsWithShort_withNSString_withInt_withBoolean_(jshort flags, NSString *prefix, jint role, jboolean isFallback);

J2OBJC_INITIALIZED_DEFN(ComSouthernstormNoiseProtocolHandshakeState)

NSString *ComSouthernstormNoiseProtocolHandshakeState_protocolName = @"Noise_XKaesobfse+hs2+hs3_25519_ChaChaPoly_SHA256";

@implementation ComSouthernstormNoiseProtocolHandshakeState

+ (jint)INITIATOR {
  return ComSouthernstormNoiseProtocolHandshakeState_INITIATOR;
}

+ (jint)RESPONDER {
  return ComSouthernstormNoiseProtocolHandshakeState_RESPONDER;
}

+ (jint)NO_ACTION {
  return ComSouthernstormNoiseProtocolHandshakeState_NO_ACTION;
}

+ (jint)WRITE_MESSAGE {
  return ComSouthernstormNoiseProtocolHandshakeState_WRITE_MESSAGE;
}

+ (jint)READ_MESSAGE {
  return ComSouthernstormNoiseProtocolHandshakeState_READ_MESSAGE;
}

+ (jint)FAILED {
  return ComSouthernstormNoiseProtocolHandshakeState_FAILED;
}

+ (jint)SPLIT {
  return ComSouthernstormNoiseProtocolHandshakeState_SPLIT;
}

+ (jint)COMPLETE {
  return ComSouthernstormNoiseProtocolHandshakeState_COMPLETE;
}

+ (NSString *)protocolName {
  return ComSouthernstormNoiseProtocolHandshakeState_protocolName;
}

- (instancetype)initWithInt:(jint)role
withNetI2pRouterTransportCryptoX25519KeyFactory:(NetI2pRouterTransportCryptoX25519KeyFactory *)xdh {
  ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(self, role, xdh);
  return self;
}

- (NSString *)getProtocolName {
  return [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) getProtocolName];
}

- (jint)getRole {
  return isInitiator_ ? ComSouthernstormNoiseProtocolHandshakeState_INITIATOR : ComSouthernstormNoiseProtocolHandshakeState_RESPONDER;
}

- (id<ComSouthernstormNoiseProtocolDHState>)getLocalKeyPair {
  return localKeyPair_;
}

- (jboolean)needsLocalKeyPair {
  if (localKeyPair_ != nil) return ![localKeyPair_ hasPrivateKey];
  else return false;
}

- (jboolean)hasLocalKeyPair {
  if (localKeyPair_ != nil) return [localKeyPair_ hasPrivateKey];
  else return false;
}

- (id<ComSouthernstormNoiseProtocolDHState>)getRemotePublicKey {
  return remotePublicKey_;
}

- (jboolean)needsRemotePublicKey {
  if (remotePublicKey_ != nil) return ![remotePublicKey_ hasPublicKey];
  else return false;
}

- (jboolean)hasRemotePublicKey {
  if (remotePublicKey_ != nil) return [remotePublicKey_ hasPublicKey];
  else return false;
}

- (void)start {
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_NO_ACTION) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake has already started; cannot start again");
  }
  if ((IOSShortArray_Get(nil_chk(ComSouthernstormNoiseProtocolHandshakeState_pattern), 0) & ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_EPHEM_REQ) != 0 && (requirements_ & ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG) == 0) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot start a fallback pattern");
  }
  if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_LOCAL_REQUIRED) != 0) {
    if (localKeyPair_ == nil || ![localKeyPair_ hasPrivateKey]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Local static key required");
  }
  if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_REMOTE_REQUIRED) != 0) {
    if (remotePublicKey_ == nil || ![remotePublicKey_ hasPublicKey]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Remote static key required");
  }
  if (ComSouthernstormNoiseProtocolHandshakeState_prologue != nil) [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) mixHashWithByteArray:ComSouthernstormNoiseProtocolHandshakeState_prologue withInt:0 withInt:ComSouthernstormNoiseProtocolHandshakeState_prologue->size_];
  else [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) mixHashWithByteArray:ComSouthernstormNoiseProtocolHandshakeState_emptyPrologue withInt:0 withInt:0];
  if (isInitiator_) {
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_LOCAL_PREMSG) != 0) [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:localKeyPair_];
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG) != 0) {
      [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:remoteEphemeral_];
    }
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_REMOTE_PREMSG) != 0) [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:remotePublicKey_];
  }
  else {
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_REMOTE_PREMSG) != 0) [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:remotePublicKey_];
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG) != 0) {
      [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:localEphemeral_];
    }
    if ((requirements_ & ComSouthernstormNoiseProtocolHandshakeState_LOCAL_PREMSG) != 0) [symmetric_ mixPublicKeyWithComSouthernstormNoiseProtocolDHState:localKeyPair_];
  }
  if (isInitiator_) action_ = ComSouthernstormNoiseProtocolHandshakeState_WRITE_MESSAGE;
  else action_ = ComSouthernstormNoiseProtocolHandshakeState_READ_MESSAGE;
}

- (jint)getAction {
  return action_;
}

- (void)mixDHWithComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)local
             withComSouthernstormNoiseProtocolDHState:(id<ComSouthernstormNoiseProtocolDHState>)remote {
  ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, local, remote);
}

- (jint)writeMessageWithByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset
                    withByteArray:(IOSByteArray *)payload
                          withInt:(jint)payloadOffset
                          withInt:(jint)payloadLength {
  jint messagePosn = messageOffset;
  jboolean success = false;
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_WRITE_MESSAGE) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake state does not allow writing messages");
  }
  if (payload == nil && (payloadOffset != 0 || payloadLength != 0)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid payload argument");
  }
  if (messageOffset > ((IOSByteArray *) nil_chk(message))->size_) {
    @throw create_JavaxCryptoShortBufferException_init();
  }
  @try {
    for (; ; ) {
      if (patternIndex_ >= ((IOSShortArray *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_pattern))->size_) {
        action_ = ComSouthernstormNoiseProtocolHandshakeState_SPLIT;
        break;
      }
      jshort token = IOSShortArray_Get(ComSouthernstormNoiseProtocolHandshakeState_pattern, patternIndex_++);
      if (token == ComSouthernstormNoiseProtocolPattern_FLIP_DIR) {
        action_ = ComSouthernstormNoiseProtocolHandshakeState_READ_MESSAGE;
        break;
      }
      jint space = message->size_ - messagePosn;
      jint len;
      jint macLen;
      switch (token) {
        case ComSouthernstormNoiseProtocolPattern_E:
        {
          if (localEphemeral_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Pattern definition error");
          [localEphemeral_ generateKeyPair];
          len = [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(localEphemeral_)) getPublicKeyLength];
          if (space < len) @throw create_JavaxCryptoShortBufferException_init();
          [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(localEphemeral_)) getPublicKeyWithByteArray:message withInt:messagePosn];
          [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) mixHashWithByteArray:message withInt:messagePosn withInt:len];
          messagePosn += len;
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_S:
        {
          if (localKeyPair_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Pattern definition error");
          len = [localKeyPair_ getPublicKeyLength];
          macLen = [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) getMACLength];
          if (space < (len + macLen)) @throw create_JavaxCryptoShortBufferException_init();
          [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(localKeyPair_)) getPublicKeyWithByteArray:message withInt:messagePosn];
          messagePosn += [symmetric_ encryptAndHashWithByteArray:message withInt:messagePosn withByteArray:message withInt:messagePosn withInt:len];
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_EE:
        {
          ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remoteEphemeral_);
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_ES:
        {
          if (isInitiator_) ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remotePublicKey_);
          else ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localKeyPair_, remoteEphemeral_);
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_SE:
        {
          if (isInitiator_) ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localKeyPair_, remoteEphemeral_);
          else ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remotePublicKey_);
        }
        break;
        default:
        {
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unknown handshake token ", JavaLangInteger_toStringWithInt_(token)));
        }
      }
    }
    if (payload != nil) messagePosn += [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) encryptAndHashWithByteArray:payload withInt:payloadOffset withByteArray:message withInt:messagePosn withInt:payloadLength];
    else messagePosn += [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) encryptAndHashWithByteArray:message withInt:messagePosn withByteArray:message withInt:messagePosn withInt:0];
    success = true;
  }
  @finally {
    if (!success) {
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(message, messageOffset, message->size_ - messageOffset, (jbyte) 0);
      action_ = ComSouthernstormNoiseProtocolHandshakeState_FAILED;
    }
  }
  return messagePosn - messageOffset;
}

- (jint)readMessageWithByteArray:(IOSByteArray *)message
                         withInt:(jint)messageOffset
                         withInt:(jint)messageLength
                   withByteArray:(IOSByteArray *)payload
                         withInt:(jint)payloadOffset {
  jboolean success = false;
  jint messageEnd = messageOffset + messageLength;
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_READ_MESSAGE) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake state does not allow reading messages");
  }
  if (messageOffset > ((IOSByteArray *) nil_chk(message))->size_ || payloadOffset > ((IOSByteArray *) nil_chk(payload))->size_) {
    @throw create_JavaxCryptoShortBufferException_init();
  }
  if (messageLength > (message->size_ - messageOffset)) {
    @throw create_JavaxCryptoShortBufferException_init();
  }
  @try {
    for (; ; ) {
      if (patternIndex_ >= ((IOSShortArray *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_pattern))->size_) {
        action_ = ComSouthernstormNoiseProtocolHandshakeState_SPLIT;
        break;
      }
      jshort token = IOSShortArray_Get(ComSouthernstormNoiseProtocolHandshakeState_pattern, patternIndex_++);
      if (token == ComSouthernstormNoiseProtocolPattern_FLIP_DIR) {
        action_ = ComSouthernstormNoiseProtocolHandshakeState_WRITE_MESSAGE;
        break;
      }
      jint space = messageEnd - messageOffset;
      jint len;
      jint macLen;
      switch (token) {
        case ComSouthernstormNoiseProtocolPattern_E:
        {
          if (remoteEphemeral_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Pattern definition error");
          len = [remoteEphemeral_ getPublicKeyLength];
          if (space < len) @throw create_JavaxCryptoShortBufferException_init();
          [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) mixHashWithByteArray:message withInt:messageOffset withInt:len];
          [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(remoteEphemeral_)) setPublicKeyWithByteArray:message withInt:messageOffset];
          if ([((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(remoteEphemeral_)) isNullPublicKey]) {
            @throw create_JavaxCryptoBadPaddingException_initWithNSString_(@"Null remote public key");
          }
          messageOffset += len;
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_S:
        {
          if (remotePublicKey_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Pattern definition error");
          len = [remotePublicKey_ getPublicKeyLength];
          macLen = [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) getMACLength];
          if (space < (len + macLen)) @throw create_JavaxCryptoShortBufferException_init();
          IOSByteArray *temp = [IOSByteArray arrayWithLength:len];
          @try {
            if ([symmetric_ decryptAndHashWithByteArray:message withInt:messageOffset withByteArray:temp withInt:0 withInt:len + macLen] != len) @throw create_JavaxCryptoShortBufferException_init();
            [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk(remotePublicKey_)) setPublicKeyWithByteArray:temp withInt:0];
          }
          @finally {
            ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(temp);
          }
          messageOffset += len + macLen;
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_EE:
        {
          ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remoteEphemeral_);
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_ES:
        {
          if (isInitiator_) ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remotePublicKey_);
          else ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localKeyPair_, remoteEphemeral_);
        }
        break;
        case ComSouthernstormNoiseProtocolPattern_SE:
        {
          if (isInitiator_) ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localKeyPair_, remoteEphemeral_);
          else ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(self, localEphemeral_, remotePublicKey_);
        }
        break;
        default:
        {
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unknown handshake token ", JavaLangInteger_toStringWithInt_(token)));
        }
      }
    }
    jint payloadLength = [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) decryptAndHashWithByteArray:message withInt:messageOffset withByteArray:payload withInt:payloadOffset withInt:messageEnd - messageOffset];
    success = true;
    return payloadLength;
  }
  @finally {
    if (!success) {
      JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(payload, payloadOffset, ((IOSByteArray *) nil_chk(payload))->size_ - payloadOffset, (jbyte) 0);
      action_ = ComSouthernstormNoiseProtocolHandshakeState_FAILED;
    }
  }
}

- (ComSouthernstormNoiseProtocolCipherStatePair *)split {
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_SPLIT) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake has not finished");
  }
  ComSouthernstormNoiseProtocolCipherStatePair *pair = [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) split];
  if (!isInitiator_) [((ComSouthernstormNoiseProtocolCipherStatePair *) nil_chk(pair)) swap];
  action_ = ComSouthernstormNoiseProtocolHandshakeState_COMPLETE;
  return pair;
}

- (ComSouthernstormNoiseProtocolCipherStatePair *)splitWithByteArray:(IOSByteArray *)secondaryKey
                                                             withInt:(jint)offset
                                                             withInt:(jint)length {
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_SPLIT) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake has not finished");
  }
  ComSouthernstormNoiseProtocolCipherStatePair *pair = [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) splitWithByteArray:secondaryKey withInt:offset withInt:length];
  if (!isInitiator_) {
    [((ComSouthernstormNoiseProtocolCipherStatePair *) nil_chk(pair)) swap];
  }
  action_ = ComSouthernstormNoiseProtocolHandshakeState_COMPLETE;
  return pair;
}

- (IOSByteArray *)getHandshakeHash {
  if (action_ != ComSouthernstormNoiseProtocolHandshakeState_SPLIT && action_ != ComSouthernstormNoiseProtocolHandshakeState_COMPLETE) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Handshake has not completed");
  }
  return [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) getHandshakeHash];
}

- (void)destroy {
  if (symmetric_ != nil) [symmetric_ destroy];
  if (localKeyPair_ != nil) [localKeyPair_ destroy];
  if (localEphemeral_ != nil) [localEphemeral_ destroy];
  if (remotePublicKey_ != nil) [remotePublicKey_ destroy];
  if (remoteEphemeral_ != nil) [remoteEphemeral_ destroy];
  if (ComSouthernstormNoiseProtocolHandshakeState_prologue != nil) ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(ComSouthernstormNoiseProtocolHandshakeState_prologue);
}

+ (jint)computeRequirementsWithShort:(jshort)flags
                        withNSString:(NSString *)prefix
                             withInt:(jint)role
                         withBoolean:(jboolean)isFallback {
  return ComSouthernstormNoiseProtocolHandshakeState_computeRequirementsWithShort_withNSString_withInt_withBoolean_(flags, prefix, role, isFallback);
}

- (void)mixHashWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length {
  [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) mixHashWithByteArray:data withInt:offset withInt:length];
}

- (IOSByteArray *)getChainingKey {
  return [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) getChainingKey];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"Handshake State:\n"];
  [buf appendWithNSString:[((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(symmetric_)) description]];
  IOSByteArray *tmp = [IOSByteArray arrayWithLength:32];
  id<ComSouthernstormNoiseProtocolDHState> dh = localKeyPair_;
  [buf appendWithNSString:@"Local static public key (s) :      "];
  if (dh != nil && [dh hasPublicKey]) {
    [dh getPublicKeyWithByteArray:tmp withInt:0];
    [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(tmp)];
  }
  else {
    [buf appendWithNSString:@"null"];
  }
  [buf appendWithChar:0x000a];
  dh = remotePublicKey_;
  [buf appendWithNSString:@"Remote static public key (rs) :    "];
  if (dh != nil && [dh hasPublicKey]) {
    [dh getPublicKeyWithByteArray:tmp withInt:0];
    [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(tmp)];
  }
  else {
    [buf appendWithNSString:@"null"];
  }
  [buf appendWithChar:0x000a];
  dh = localEphemeral_;
  [buf appendWithNSString:@"Local ephemeral public key (e) :   "];
  if (dh != nil && [dh hasPublicKey]) {
    [dh getPublicKeyWithByteArray:tmp withInt:0];
    [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(tmp)];
  }
  else {
    [buf appendWithNSString:@"null"];
  }
  [buf appendWithChar:0x000a];
  dh = remoteEphemeral_;
  [buf appendWithNSString:@"Remote ephemeral public key (re) : "];
  if (dh != nil && [dh hasPublicKey]) {
    [dh getPublicKeyWithByteArray:tmp withInt:0];
    [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_(tmp)];
  }
  else {
    [buf appendWithNSString:@"null"];
  }
  [buf appendWithChar:0x000a];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(symmetric_);
  RELEASE_(localKeyPair_);
  RELEASE_(localEphemeral_);
  RELEASE_(remotePublicKey_);
  RELEASE_(remoteEphemeral_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolDHState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolDHState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolCipherStatePair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComSouthernstormNoiseProtocolCipherStatePair;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNetI2pRouterTransportCryptoX25519KeyFactory:);
  methods[1].selector = @selector(getProtocolName);
  methods[2].selector = @selector(getRole);
  methods[3].selector = @selector(getLocalKeyPair);
  methods[4].selector = @selector(needsLocalKeyPair);
  methods[5].selector = @selector(hasLocalKeyPair);
  methods[6].selector = @selector(getRemotePublicKey);
  methods[7].selector = @selector(needsRemotePublicKey);
  methods[8].selector = @selector(hasRemotePublicKey);
  methods[9].selector = @selector(start);
  methods[10].selector = @selector(getAction);
  methods[11].selector = @selector(mixDHWithComSouthernstormNoiseProtocolDHState:withComSouthernstormNoiseProtocolDHState:);
  methods[12].selector = @selector(writeMessageWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[13].selector = @selector(readMessageWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[14].selector = @selector(split);
  methods[15].selector = @selector(splitWithByteArray:withInt:withInt:);
  methods[16].selector = @selector(getHandshakeHash);
  methods[17].selector = @selector(destroy);
  methods[18].selector = @selector(computeRequirementsWithShort:withNSString:withInt:withBoolean:);
  methods[19].selector = @selector(mixHashWithByteArray:withInt:withInt:);
  methods[20].selector = @selector(getChainingKey);
  methods[21].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "symmetric_", "LComSouthernstormNoiseProtocolSymmetricState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isInitiator_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "localKeyPair_", "LComSouthernstormNoiseProtocolDHState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localEphemeral_", "LComSouthernstormNoiseProtocolDHState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remotePublicKey_", "LComSouthernstormNoiseProtocolDHState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remoteEphemeral_", "LComSouthernstormNoiseProtocolDHState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requirements_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "patternIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prologue", "[B", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "INITIATOR", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_INITIATOR, 0x19, -1, -1, -1, -1 },
    { "RESPONDER", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_RESPONDER, 0x19, -1, -1, -1, -1 },
    { "NO_ACTION", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_NO_ACTION, 0x19, -1, -1, -1, -1 },
    { "WRITE_MESSAGE", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_WRITE_MESSAGE, 0x19, -1, -1, -1, -1 },
    { "READ_MESSAGE", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_READ_MESSAGE, 0x19, -1, -1, -1, -1 },
    { "FAILED", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_FAILED, 0x19, -1, -1, -1, -1 },
    { "SPLIT", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_SPLIT, 0x19, -1, -1, -1, -1 },
    { "COMPLETE", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_COMPLETE, 0x19, -1, -1, -1, -1 },
    { "LOCAL_REQUIRED", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_LOCAL_REQUIRED, 0x1a, -1, -1, -1, -1 },
    { "REMOTE_REQUIRED", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_REMOTE_REQUIRED, 0x1a, -1, -1, -1, -1 },
    { "PSK_REQUIRED", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_PSK_REQUIRED, 0x1a, -1, -1, -1, -1 },
    { "FALLBACK_PREMSG", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG, 0x1a, -1, -1, -1, -1 },
    { "LOCAL_PREMSG", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_LOCAL_PREMSG, 0x1a, -1, -1, -1, -1 },
    { "REMOTE_PREMSG", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_REMOTE_PREMSG, 0x1a, -1, -1, -1, -1 },
    { "FALLBACK_POSSIBLE", "I", .constantValue.asInt = ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_POSSIBLE, 0x1a, -1, -1, -1, -1 },
    { "protocolName", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "prefix", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "patternId", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "dh", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "cipher", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "hash", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "pattern", "[S", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "emptyPrologue", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNetI2pRouterTransportCryptoX25519KeyFactory;", "LJavaSecurityNoSuchAlgorithmException;", "mixDH", "LComSouthernstormNoiseProtocolDHState;LComSouthernstormNoiseProtocolDHState;", "writeMessage", "[BI[BII", "LJavaxCryptoShortBufferException;", "readMessage", "[BII[BI", "LJavaxCryptoShortBufferException;LJavaxCryptoBadPaddingException;", "split", "[BII", "computeRequirements", "SLNSString;IZ", "mixHash", "toString", &ComSouthernstormNoiseProtocolHandshakeState_prologue, &ComSouthernstormNoiseProtocolHandshakeState_protocolName, &ComSouthernstormNoiseProtocolHandshakeState_prefix, &ComSouthernstormNoiseProtocolHandshakeState_patternId, &ComSouthernstormNoiseProtocolHandshakeState_dh, &ComSouthernstormNoiseProtocolHandshakeState_cipher, &ComSouthernstormNoiseProtocolHandshakeState_hash, &ComSouthernstormNoiseProtocolHandshakeState_pattern, &ComSouthernstormNoiseProtocolHandshakeState_emptyPrologue };
  static const J2ObjcClassInfo _ComSouthernstormNoiseProtocolHandshakeState = { "HandshakeState", "com.southernstorm.noise.protocol", ptrTable, methods, fields, 7, 0x1, 22, 33, -1, -1, -1, -1, -1 };
  return &_ComSouthernstormNoiseProtocolHandshakeState;
}

+ (void)initialize {
  if (self == [ComSouthernstormNoiseProtocolHandshakeState class]) {
    {
      IOSObjectArray *components = [((NSString *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_protocolName)) java_split:@"_"];
      if (((IOSObjectArray *) nil_chk(components))->size_ != 5) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Protocol name must have 5 components");
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_prefix, IOSObjectArray_Get(components, 0));
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_patternId, [((NSString *) nil_chk(IOSObjectArray_Get(components, 1))) java_substring:0 endIndex:2]);
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_dh, IOSObjectArray_Get(components, 2));
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_cipher, IOSObjectArray_Get(components, 3));
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_hash, IOSObjectArray_Get(components, 4));
      if (![((NSString *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_prefix)) isEqual:@"Noise"] && ![ComSouthernstormNoiseProtocolHandshakeState_prefix isEqual:@"NoisePSK"]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Prefix must be Noise or NoisePSK");
      JreStrongAssign(&ComSouthernstormNoiseProtocolHandshakeState_pattern, ComSouthernstormNoiseProtocolPattern_lookupWithNSString_(ComSouthernstormNoiseProtocolHandshakeState_patternId));
      if (ComSouthernstormNoiseProtocolHandshakeState_pattern == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Handshake pattern is not recognized");
      if (![((NSString *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_dh)) isEqual:@"25519"]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown Noise DH algorithm name: ", ComSouthernstormNoiseProtocolHandshakeState_dh));
    }
    JreStrongAssignAndConsume(&ComSouthernstormNoiseProtocolHandshakeState_emptyPrologue, [IOSByteArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(ComSouthernstormNoiseProtocolHandshakeState)
  }
}

@end

void ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(ComSouthernstormNoiseProtocolHandshakeState *self, jint role, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  NSObject_init(self);
  jshort flags = IOSShortArray_Get(nil_chk(ComSouthernstormNoiseProtocolHandshakeState_pattern), 0);
  jint extraReqs = 0;
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_REQUIRED) != 0 && [((NSString *) nil_chk(ComSouthernstormNoiseProtocolHandshakeState_patternId)) java_length] > 1) extraReqs |= ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_POSSIBLE;
  if (role == ComSouthernstormNoiseProtocolHandshakeState_RESPONDER) {
    flags = ComSouthernstormNoiseProtocolPattern_reverseFlagsWithShort_(flags);
  }
  if (role != ComSouthernstormNoiseProtocolHandshakeState_INITIATOR && role != ComSouthernstormNoiseProtocolHandshakeState_RESPONDER) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Role must be initiator or responder");
  JreStrongAssignAndConsume(&self->symmetric_, new_ComSouthernstormNoiseProtocolSymmetricState_initWithNSString_withNSString_(ComSouthernstormNoiseProtocolHandshakeState_cipher, ComSouthernstormNoiseProtocolHandshakeState_hash));
  self->isInitiator_ = (role == ComSouthernstormNoiseProtocolHandshakeState_INITIATOR);
  self->action_ = ComSouthernstormNoiseProtocolHandshakeState_NO_ACTION;
  self->requirements_ = extraReqs | ComSouthernstormNoiseProtocolHandshakeState_computeRequirementsWithShort_withNSString_withInt_withBoolean_(flags, ComSouthernstormNoiseProtocolHandshakeState_prefix, role, false);
  self->patternIndex_ = 1;
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_LOCAL_STATIC) != 0) JreStrongAssignAndConsume(&self->localKeyPair_, new_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(xdh));
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_LOCAL_EPHEMERAL) != 0) JreStrongAssignAndConsume(&self->localEphemeral_, new_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(xdh));
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_STATIC) != 0) JreStrongAssignAndConsume(&self->remotePublicKey_, new_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(xdh));
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_EPHEMERAL) != 0) JreStrongAssignAndConsume(&self->remoteEphemeral_, new_ComSouthernstormNoiseProtocolCurve25519DHState_initWithNetI2pRouterTransportCryptoX25519KeyFactory_(xdh));
}

ComSouthernstormNoiseProtocolHandshakeState *new_ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(jint role, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_NEW_IMPL(ComSouthernstormNoiseProtocolHandshakeState, initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_, role, xdh)
}

ComSouthernstormNoiseProtocolHandshakeState *create_ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(jint role, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_CREATE_IMPL(ComSouthernstormNoiseProtocolHandshakeState, initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_, role, xdh)
}

void ComSouthernstormNoiseProtocolHandshakeState_mixDHWithComSouthernstormNoiseProtocolDHState_withComSouthernstormNoiseProtocolDHState_(ComSouthernstormNoiseProtocolHandshakeState *self, id<ComSouthernstormNoiseProtocolDHState> local, id<ComSouthernstormNoiseProtocolDHState> remote) {
  if (local == nil || remote == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Pattern definition error");
  jint len = [local getSharedKeyLength];
  IOSByteArray *shared = [IOSByteArray arrayWithLength:len];
  @try {
    [local calculateWithByteArray:shared withInt:0 withComSouthernstormNoiseProtocolDHState:remote];
    [((ComSouthernstormNoiseProtocolSymmetricState *) nil_chk(self->symmetric_)) mixKeyWithByteArray:shared withInt:0 withInt:len];
  }
  @finally {
    ComSouthernstormNoiseProtocolNoise_destroyWithByteArray_(shared);
  }
}

jint ComSouthernstormNoiseProtocolHandshakeState_computeRequirementsWithShort_withNSString_withInt_withBoolean_(jshort flags, NSString *prefix, jint role, jboolean isFallback) {
  ComSouthernstormNoiseProtocolHandshakeState_initialize();
  jint requirements = 0;
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_LOCAL_STATIC) != 0) {
    requirements |= ComSouthernstormNoiseProtocolHandshakeState_LOCAL_REQUIRED;
  }
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_LOCAL_REQUIRED) != 0) {
    requirements |= ComSouthernstormNoiseProtocolHandshakeState_LOCAL_REQUIRED;
    requirements |= ComSouthernstormNoiseProtocolHandshakeState_LOCAL_PREMSG;
  }
  if ((flags & ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_REQUIRED) != 0) {
    requirements |= ComSouthernstormNoiseProtocolHandshakeState_REMOTE_REQUIRED;
    requirements |= ComSouthernstormNoiseProtocolHandshakeState_REMOTE_PREMSG;
  }
  if ((flags & (ComSouthernstormNoiseProtocolPattern_FLAG_REMOTE_EPHEM_REQ | ComSouthernstormNoiseProtocolPattern_FLAG_LOCAL_EPHEM_REQ)) != 0) {
    if (isFallback) requirements |= ComSouthernstormNoiseProtocolHandshakeState_FALLBACK_PREMSG;
  }
  return requirements;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSouthernstormNoiseProtocolHandshakeState)
