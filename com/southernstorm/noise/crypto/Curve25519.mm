//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/com/southernstorm/noise/crypto/Curve25519.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/crypto/Curve25519.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface ComSouthernstormNoiseCryptoCurve25519 () {
 @public
  IOSIntArray *x_1_;
  IOSIntArray *x_2_;
  IOSIntArray *x_3_;
  IOSIntArray *z_2_;
  IOSIntArray *z_3_;
  IOSIntArray *A_;
  IOSIntArray *B_;
  IOSIntArray *C_;
  IOSIntArray *D_;
  IOSIntArray *E_;
  IOSIntArray *AA_;
  IOSIntArray *BB_;
  IOSIntArray *DA_;
  IOSIntArray *CB_;
  IOSLongArray *t1_;
  IOSIntArray *t2_;
}

- (instancetype)init;

- (void)destroy;

- (void)reduceQuickWithIntArray:(IOSIntArray *)x;

- (void)reduceWithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x
                   withInt:(jint)size;

- (void)mulWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y;

- (void)squareWithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x;

- (void)mulA24WithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x;

- (void)addWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y;

- (void)subWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y;

+ (void)cswapWithInt:(jint)select
        withIntArray:(IOSIntArray *)x
        withIntArray:(IOSIntArray *)y;

- (void)pow250WithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x;

- (void)recipWithIntArray:(IOSIntArray *)result
             withIntArray:(IOSIntArray *)x;

- (void)evalCurveWithByteArray:(IOSByteArray *)s;

@end

J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, x_1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, x_2_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, x_3_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, z_2_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, z_3_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, A_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, B_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, C_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, D_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, E_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, AA_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, BB_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, DA_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, CB_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, t1_, IOSLongArray *)
J2OBJC_FIELD_SETTER(ComSouthernstormNoiseCryptoCurve25519, t2_, IOSIntArray *)

inline jint ComSouthernstormNoiseCryptoCurve25519_get_NUM_LIMBS_255BIT(void);
#define ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT 10
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseCryptoCurve25519, NUM_LIMBS_255BIT, jint)

inline jint ComSouthernstormNoiseCryptoCurve25519_get_NUM_LIMBS_510BIT(void);
#define ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_510BIT 20
J2OBJC_STATIC_FIELD_CONSTANT(ComSouthernstormNoiseCryptoCurve25519, NUM_LIMBS_510BIT, jint)

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_init(ComSouthernstormNoiseCryptoCurve25519 *self);

__attribute__((unused)) static ComSouthernstormNoiseCryptoCurve25519 *new_ComSouthernstormNoiseCryptoCurve25519_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComSouthernstormNoiseCryptoCurve25519 *create_ComSouthernstormNoiseCryptoCurve25519_init(void);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_destroy(ComSouthernstormNoiseCryptoCurve25519 *self);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *x);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_reduceWithIntArray_withIntArray_withInt_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, jint size);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_mulA24WithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(jint select, IOSIntArray *x, IOSIntArray *y);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_pow250WithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_recipWithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x);

__attribute__((unused)) static void ComSouthernstormNoiseCryptoCurve25519_evalCurveWithByteArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSByteArray *s);

@implementation ComSouthernstormNoiseCryptoCurve25519

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComSouthernstormNoiseCryptoCurve25519_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)destroy {
  ComSouthernstormNoiseCryptoCurve25519_destroy(self);
}

- (void)reduceQuickWithIntArray:(IOSIntArray *)x {
  ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(self, x);
}

- (void)reduceWithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x
                   withInt:(jint)size {
  ComSouthernstormNoiseCryptoCurve25519_reduceWithIntArray_withIntArray_withInt_(self, result, x, size);
}

- (void)mulWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y {
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, x, y);
}

- (void)squareWithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x {
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, x);
}

- (void)mulA24WithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x {
  ComSouthernstormNoiseCryptoCurve25519_mulA24WithIntArray_withIntArray_(self, result, x);
}

- (void)addWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y {
  ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(self, result, x, y);
}

- (void)subWithIntArray:(IOSIntArray *)result
           withIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y {
  ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(self, result, x, y);
}

+ (void)cswapWithInt:(jint)select
        withIntArray:(IOSIntArray *)x
        withIntArray:(IOSIntArray *)y {
  ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(select, x, y);
}

- (void)pow250WithIntArray:(IOSIntArray *)result
              withIntArray:(IOSIntArray *)x {
  ComSouthernstormNoiseCryptoCurve25519_pow250WithIntArray_withIntArray_(self, result, x);
}

- (void)recipWithIntArray:(IOSIntArray *)result
             withIntArray:(IOSIntArray *)x {
  ComSouthernstormNoiseCryptoCurve25519_recipWithIntArray_withIntArray_(self, result, x);
}

- (void)evalCurveWithByteArray:(IOSByteArray *)s {
  ComSouthernstormNoiseCryptoCurve25519_evalCurveWithByteArray_(self, s);
}

+ (void)evalWithByteArray:(IOSByteArray *)result
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)privateKey
            withByteArray:(IOSByteArray *)publicKey {
  ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(result, offset, privateKey, publicKey);
}

- (void)dealloc {
  RELEASE_(x_1_);
  RELEASE_(x_2_);
  RELEASE_(x_3_);
  RELEASE_(z_2_);
  RELEASE_(z_3_);
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(D_);
  RELEASE_(E_);
  RELEASE_(AA_);
  RELEASE_(BB_);
  RELEASE_(DA_);
  RELEASE_(CB_);
  RELEASE_(t1_);
  RELEASE_(t2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(reduceQuickWithIntArray:);
  methods[3].selector = @selector(reduceWithIntArray:withIntArray:withInt:);
  methods[4].selector = @selector(mulWithIntArray:withIntArray:withIntArray:);
  methods[5].selector = @selector(squareWithIntArray:withIntArray:);
  methods[6].selector = @selector(mulA24WithIntArray:withIntArray:);
  methods[7].selector = @selector(addWithIntArray:withIntArray:withIntArray:);
  methods[8].selector = @selector(subWithIntArray:withIntArray:withIntArray:);
  methods[9].selector = @selector(cswapWithInt:withIntArray:withIntArray:);
  methods[10].selector = @selector(pow250WithIntArray:withIntArray:);
  methods[11].selector = @selector(recipWithIntArray:withIntArray:);
  methods[12].selector = @selector(evalCurveWithByteArray:);
  methods[13].selector = @selector(evalWithByteArray:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUM_LIMBS_255BIT", "I", .constantValue.asInt = ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT, 0x1a, -1, -1, -1, -1 },
    { "NUM_LIMBS_510BIT", "I", .constantValue.asInt = ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_510BIT, 0x1a, -1, -1, -1, -1 },
    { "x_1_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "x_2_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "x_3_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "z_2_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "z_3_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "A_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "B_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "C_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "D_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "E_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "AA_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BB_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DA_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CB_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "t1_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "t2_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "reduceQuick", "[I", "reduce", "[I[II", "mul", "[I[I[I", "square", "[I[I", "mulA24", "add", "sub", "cswap", "I[I[I", "pow250", "recip", "evalCurve", "[B", "eval", "[BI[B[B" };
  static const J2ObjcClassInfo _ComSouthernstormNoiseCryptoCurve25519 = { "Curve25519", "com.southernstorm.noise.crypto", ptrTable, methods, fields, 7, 0x11, 14, 18, -1, -1, -1, -1, -1 };
  return &_ComSouthernstormNoiseCryptoCurve25519;
}

@end

void ComSouthernstormNoiseCryptoCurve25519_init(ComSouthernstormNoiseCryptoCurve25519 *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->x_1_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->x_2_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->x_3_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->z_2_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->z_3_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->A_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->B_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->C_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->D_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->E_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->AA_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->BB_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->DA_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->CB_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT]);
  JreStrongAssignAndConsume(&self->t1_, [IOSLongArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_510BIT]);
  JreStrongAssignAndConsume(&self->t2_, [IOSIntArray newArrayWithLength:ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_510BIT]);
}

ComSouthernstormNoiseCryptoCurve25519 *new_ComSouthernstormNoiseCryptoCurve25519_init() {
  J2OBJC_NEW_IMPL(ComSouthernstormNoiseCryptoCurve25519, init)
}

ComSouthernstormNoiseCryptoCurve25519 *create_ComSouthernstormNoiseCryptoCurve25519_init() {
  J2OBJC_CREATE_IMPL(ComSouthernstormNoiseCryptoCurve25519, init)
}

void ComSouthernstormNoiseCryptoCurve25519_destroy(ComSouthernstormNoiseCryptoCurve25519 *self) {
  JavaUtilArrays_fillWithIntArray_withInt_(self->x_1_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->x_2_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->x_3_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->z_2_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->z_3_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->A_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->B_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->C_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->D_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->E_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->AA_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->BB_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->DA_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->CB_, 0);
  JavaUtilArrays_fillWithLongArray_withLong_(self->t1_, 0LL);
  JavaUtilArrays_fillWithIntArray_withInt_(self->t2_, 0);
}

void ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *x) {
  jint index;
  jint carry;
  carry = 19;
  for (index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    carry += IOSIntArray_Get(nil_chk(x), index);
    *IOSIntArray_GetRef(nil_chk(self->t2_), index) = carry & (jint) 0x03FFFFFF;
    JreRShiftAssignInt(&carry, 26);
  }
  jint mask = -((JreRShift32(IOSIntArray_Get(nil_chk(self->t2_), ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1), 21)) & (jint) 0x01);
  jint nmask = ~mask;
  *IOSIntArray_GetRef(self->t2_, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1) &= (jint) 0x001FFFFF;
  for (index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) *IOSIntArray_GetRef(nil_chk(x), index) = (IOSIntArray_Get(x, index) & nmask) | (IOSIntArray_Get(self->t2_, index) & mask);
}

void ComSouthernstormNoiseCryptoCurve25519_reduceWithIntArray_withIntArray_withInt_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, jint size) {
  jint index;
  jint limb;
  jint carry;
  carry = 0;
  limb = JreRShift32(IOSIntArray_Get(nil_chk(x), ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1), 21);
  *IOSIntArray_GetRef(x, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1) &= (jint) 0x001FFFFF;
  for (index = 0; index < size; ++index) {
    limb += JreLShift32(IOSIntArray_Get(x, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT + index), 5);
    carry += (limb & (jint) 0x03FFFFFF) * 19 + IOSIntArray_Get(x, index);
    *IOSIntArray_GetRef(x, index) = carry & (jint) 0x03FFFFFF;
    JreRShiftAssignInt(&limb, 26);
    JreRShiftAssignInt(&carry, 26);
  }
  if (size < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT) {
    for (index = size; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
      carry += IOSIntArray_Get(x, index);
      *IOSIntArray_GetRef(x, index) = carry & (jint) 0x03FFFFFF;
      JreRShiftAssignInt(&carry, 26);
    }
  }
  carry = (JreRShift32(IOSIntArray_Get(x, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1), 21)) * 19;
  *IOSIntArray_GetRef(x, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1) &= (jint) 0x001FFFFF;
  for (index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    carry += IOSIntArray_Get(x, index);
    *IOSIntArray_GetRef(nil_chk(result), index) = carry & (jint) 0x03FFFFFF;
    JreRShiftAssignInt(&carry, 26);
  }
  ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(self, result);
}

void ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y) {
  jint i;
  jint j;
  jlong v = IOSIntArray_Get(nil_chk(x), 0);
  for (i = 0; i < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++i) {
    *IOSLongArray_GetRef(nil_chk(self->t1_), i) = v * IOSIntArray_Get(nil_chk(y), i);
  }
  for (i = 1; i < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++i) {
    v = IOSIntArray_Get(x, i);
    for (j = 0; j < (ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1); ++j) {
      *IOSLongArray_GetRef(nil_chk(self->t1_), i + j) += v * IOSIntArray_Get(nil_chk(y), j);
    }
    *IOSLongArray_GetRef(nil_chk(self->t1_), i + ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1) = v * IOSIntArray_Get(nil_chk(y), ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1);
  }
  v = IOSLongArray_Get(nil_chk(self->t1_), 0);
  *IOSIntArray_GetRef(nil_chk(self->t2_), 0) = ((jint) v) & (jint) 0x03FFFFFF;
  for (i = 1; i < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_510BIT; ++i) {
    v = (JreRShift64(v, 26)) + IOSLongArray_Get(self->t1_, i);
    *IOSIntArray_GetRef(self->t2_, i) = ((jint) v) & (jint) 0x03FFFFFF;
  }
  ComSouthernstormNoiseCryptoCurve25519_reduceWithIntArray_withIntArray_withInt_(self, result, self->t2_, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT);
}

void ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x) {
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, x, x);
}

void ComSouthernstormNoiseCryptoCurve25519_mulA24WithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x) {
  jlong a24 = 121665;
  jlong carry = 0;
  jint index;
  for (index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    carry += a24 * IOSIntArray_Get(nil_chk(x), index);
    *IOSIntArray_GetRef(nil_chk(self->t2_), index) = ((jint) carry) & (jint) 0x03FFFFFF;
    JreRShiftAssignLong(&carry, 26);
  }
  *IOSIntArray_GetRef(nil_chk(self->t2_), ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT) = ((jint) carry) & (jint) 0x03FFFFFF;
  ComSouthernstormNoiseCryptoCurve25519_reduceWithIntArray_withIntArray_withInt_(self, result, self->t2_, 1);
}

void ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y) {
  jint index;
  jint carry;
  carry = IOSIntArray_Get(nil_chk(x), 0) + IOSIntArray_Get(nil_chk(y), 0);
  *IOSIntArray_GetRef(nil_chk(result), 0) = carry & (jint) 0x03FFFFFF;
  for (index = 1; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    carry = (JreRShift32(carry, 26)) + IOSIntArray_Get(x, index) + IOSIntArray_Get(y, index);
    *IOSIntArray_GetRef(result, index) = carry & (jint) 0x03FFFFFF;
  }
  ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(self, result);
}

void ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x, IOSIntArray *y) {
  jint index;
  jint borrow;
  borrow = 0;
  for (index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    borrow = IOSIntArray_Get(nil_chk(x), index) - IOSIntArray_Get(nil_chk(y), index) - ((JreRShift32(borrow, 26)) & (jint) 0x01);
    *IOSIntArray_GetRef(nil_chk(result), index) = borrow & (jint) 0x03FFFFFF;
  }
  borrow = IOSIntArray_Get(nil_chk(result), 0) - ((-((JreRShift32(borrow, 26)) & (jint) 0x01)) & 19);
  *IOSIntArray_GetRef(result, 0) = borrow & (jint) 0x03FFFFFF;
  for (index = 1; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    borrow = IOSIntArray_Get(result, index) - ((JreRShift32(borrow, 26)) & (jint) 0x01);
    *IOSIntArray_GetRef(result, index) = borrow & (jint) 0x03FFFFFF;
  }
  *IOSIntArray_GetRef(result, ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT - 1) &= (jint) 0x001FFFFF;
}

void ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(jint select, IOSIntArray *x, IOSIntArray *y) {
  ComSouthernstormNoiseCryptoCurve25519_initialize();
  jint dummy;
  select = -select;
  for (jint index = 0; index < ComSouthernstormNoiseCryptoCurve25519_NUM_LIMBS_255BIT; ++index) {
    dummy = select & (IOSIntArray_Get(nil_chk(x), index) ^ IOSIntArray_Get(nil_chk(y), index));
    *IOSIntArray_GetRef(x, index) ^= dummy;
    *IOSIntArray_GetRef(y, index) ^= dummy;
  }
}

void ComSouthernstormNoiseCryptoCurve25519_pow250WithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x) {
  jint i;
  jint j;
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->A_, x);
  for (j = 0; j < 9; ++j) ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->A_, self->A_);
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, self->A_, x);
  for (i = 0; i < 23; ++i) {
    for (j = 0; j < 10; ++j) ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->A_, self->A_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, self->A_);
  }
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->A_, result);
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, self->A_);
  for (j = 0; j < 8; ++j) {
    ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->A_, self->A_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, self->A_);
  }
}

void ComSouthernstormNoiseCryptoCurve25519_recipWithIntArray_withIntArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSIntArray *result, IOSIntArray *x) {
  ComSouthernstormNoiseCryptoCurve25519_pow250WithIntArray_withIntArray_(self, result, x);
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, result);
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, result);
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, x);
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, result);
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, result);
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, x);
  ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, result, result);
  ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, result, result, x);
}

void ComSouthernstormNoiseCryptoCurve25519_evalCurveWithByteArray_(ComSouthernstormNoiseCryptoCurve25519 *self, IOSByteArray *s) {
  jint sposn = 31;
  jint sbit = 6;
  jint svalue = IOSByteArray_Get(nil_chk(s), sposn) | (jint) 0x40;
  jint swap = 0;
  jint select;
  for (; ; ) {
    select = (JreRShift32(svalue, sbit)) & (jint) 0x01;
    swap ^= select;
    ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(swap, self->x_2_, self->x_3_);
    ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(swap, self->z_2_, self->z_3_);
    swap = select;
    ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(self, self->A_, self->x_2_, self->z_2_);
    ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->AA_, self->A_);
    ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(self, self->B_, self->x_2_, self->z_2_);
    ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->BB_, self->B_);
    ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(self, self->E_, self->AA_, self->BB_);
    ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(self, self->C_, self->x_3_, self->z_3_);
    ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(self, self->D_, self->x_3_, self->z_3_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, self->DA_, self->D_, self->A_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, self->CB_, self->C_, self->B_);
    ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(self, self->x_3_, self->DA_, self->CB_);
    ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->x_3_, self->x_3_);
    ComSouthernstormNoiseCryptoCurve25519_subWithIntArray_withIntArray_withIntArray_(self, self->z_3_, self->DA_, self->CB_);
    ComSouthernstormNoiseCryptoCurve25519_squareWithIntArray_withIntArray_(self, self->z_3_, self->z_3_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, self->z_3_, self->z_3_, self->x_1_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, self->x_2_, self->AA_, self->BB_);
    ComSouthernstormNoiseCryptoCurve25519_mulA24WithIntArray_withIntArray_(self, self->z_2_, self->E_);
    ComSouthernstormNoiseCryptoCurve25519_addWithIntArray_withIntArray_withIntArray_(self, self->z_2_, self->z_2_, self->AA_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(self, self->z_2_, self->z_2_, self->E_);
    if (sbit > 0) {
      --sbit;
    }
    else if (sposn == 0) {
      break;
    }
    else if (sposn == 1) {
      --sposn;
      svalue = IOSByteArray_Get(s, sposn) & (jint) 0xF8;
      sbit = 7;
    }
    else {
      --sposn;
      svalue = IOSByteArray_Get(s, sposn);
      sbit = 7;
    }
  }
  ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(swap, self->x_2_, self->x_3_);
  ComSouthernstormNoiseCryptoCurve25519_cswapWithInt_withIntArray_withIntArray_(swap, self->z_2_, self->z_3_);
}

void ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(IOSByteArray *result, jint offset, IOSByteArray *privateKey, IOSByteArray *publicKey) {
  ComSouthernstormNoiseCryptoCurve25519_initialize();
  ComSouthernstormNoiseCryptoCurve25519 *state = create_ComSouthernstormNoiseCryptoCurve25519_init();
  @try {
    JavaUtilArrays_fillWithIntArray_withInt_(state->x_1_, 0);
    if (publicKey != nil) {
      for (jint index = 0; index < 32; ++index) {
        jint bit = (index * 8) % 26;
        jint word = (index * 8) / 26;
        jint value = IOSByteArray_Get(publicKey, index) & (jint) 0xFF;
        if (bit <= (26 - 8)) {
          *IOSIntArray_GetRef(nil_chk(state->x_1_), word) |= JreLShift32(value, bit);
        }
        else {
          *IOSIntArray_GetRef(nil_chk(state->x_1_), word) |= JreLShift32(value, bit);
          *IOSIntArray_GetRef(state->x_1_, word) &= (jint) 0x03FFFFFF;
          *IOSIntArray_GetRef(state->x_1_, word + 1) |= JreRShift32(value, (26 - bit));
        }
      }
      ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(state, state->x_1_);
      ComSouthernstormNoiseCryptoCurve25519_reduceQuickWithIntArray_(state, state->x_1_);
    }
    else {
      *IOSIntArray_GetRef(nil_chk(state->x_1_), 0) = 9;
    }
    JavaUtilArrays_fillWithIntArray_withInt_(state->x_2_, 0);
    *IOSIntArray_GetRef(nil_chk(state->x_2_), 0) = 1;
    JavaUtilArrays_fillWithIntArray_withInt_(state->z_2_, 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(state->x_1_, 0, state->x_3_, 0, ((IOSIntArray *) nil_chk(state->x_1_))->size_);
    JavaUtilArrays_fillWithIntArray_withInt_(state->z_3_, 0);
    *IOSIntArray_GetRef(nil_chk(state->z_3_), 0) = 1;
    ComSouthernstormNoiseCryptoCurve25519_evalCurveWithByteArray_(state, privateKey);
    ComSouthernstormNoiseCryptoCurve25519_recipWithIntArray_withIntArray_(state, state->z_3_, state->z_2_);
    ComSouthernstormNoiseCryptoCurve25519_mulWithIntArray_withIntArray_withIntArray_(state, state->x_2_, state->x_2_, state->z_3_);
    for (jint index = 0; index < 32; ++index) {
      jint bit = (index * 8) % 26;
      jint word = (index * 8) / 26;
      if (bit <= (26 - 8)) *IOSByteArray_GetRef(nil_chk(result), offset + index) = (jbyte) (JreRShift32(IOSIntArray_Get(state->x_2_, word), bit));
      else *IOSByteArray_GetRef(nil_chk(result), offset + index) = (jbyte) ((JreRShift32(IOSIntArray_Get(state->x_2_, word), bit)) | (JreLShift32(IOSIntArray_Get(state->x_2_, word + 1), (26 - bit))));
    }
  }
  @finally {
    ComSouthernstormNoiseCryptoCurve25519_destroy(state);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSouthernstormNoiseCryptoCurve25519)
