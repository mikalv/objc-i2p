//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/freenet/support/CPUInformation/VIAInfoImpl.java
//

#include "J2ObjC_source.h"
#include "freenet/support/CPUInformation/CPUID.h"
#include "freenet/support/CPUInformation/CPUIDCPUInfo.h"
#include "freenet/support/CPUInformation/UnknownCPUException.h"
#include "freenet/support/CPUInformation/VIAInfoImpl.h"

@interface FreenetSupportCPUInformationVIAInfoImpl ()

+ (NSString *)identifyCPU;

@end

inline jboolean FreenetSupportCPUInformationVIAInfoImpl_get_isC3Compatible(void);
inline jboolean FreenetSupportCPUInformationVIAInfoImpl_set_isC3Compatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationVIAInfoImpl_getRef_isC3Compatible(void);
static jboolean FreenetSupportCPUInformationVIAInfoImpl_isC3Compatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationVIAInfoImpl, isC3Compatible, jboolean)

inline jboolean FreenetSupportCPUInformationVIAInfoImpl_get_isNanoCompatible(void);
inline jboolean FreenetSupportCPUInformationVIAInfoImpl_set_isNanoCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationVIAInfoImpl_getRef_isNanoCompatible(void);
static jboolean FreenetSupportCPUInformationVIAInfoImpl_isNanoCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationVIAInfoImpl, isNanoCompatible, jboolean)

inline NSString *FreenetSupportCPUInformationVIAInfoImpl_get_smodel(void);
static NSString *FreenetSupportCPUInformationVIAInfoImpl_smodel;
J2OBJC_STATIC_FIELD_OBJ_FINAL(FreenetSupportCPUInformationVIAInfoImpl, smodel, NSString *)

__attribute__((unused)) static NSString *FreenetSupportCPUInformationVIAInfoImpl_identifyCPU(void);

J2OBJC_INITIALIZED_DEFN(FreenetSupportCPUInformationVIAInfoImpl)

@implementation FreenetSupportCPUInformationVIAInfoImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  FreenetSupportCPUInformationVIAInfoImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)IsC3Compatible {
  return FreenetSupportCPUInformationVIAInfoImpl_isC3Compatible;
}

- (jboolean)IsNanoCompatible {
  return FreenetSupportCPUInformationVIAInfoImpl_isNanoCompatible;
}

- (NSString *)getCPUModelString {
  if (FreenetSupportCPUInformationVIAInfoImpl_smodel != nil) return FreenetSupportCPUInformationVIAInfoImpl_smodel;
  @throw create_FreenetSupportCPUInformationUnknownCPUException_initWithNSString_(JreStrcat("$ICI$ICI", @"Unknown VIA CPU; Family=", FreenetSupportCPUInformationCPUID_getCPUFamily(), '/', FreenetSupportCPUInformationCPUID_getCPUExtendedFamily(), @", Model=", FreenetSupportCPUInformationCPUID_getCPUModel(), '/', FreenetSupportCPUInformationCPUID_getCPUExtendedModel()));
}

- (jboolean)hasX64 {
  return false;
}

+ (NSString *)identifyCPU {
  return FreenetSupportCPUInformationVIAInfoImpl_identifyCPU();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(IsC3Compatible);
  methods[2].selector = @selector(IsNanoCompatible);
  methods[3].selector = @selector(getCPUModelString);
  methods[4].selector = @selector(hasX64);
  methods[5].selector = @selector(identifyCPU);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isC3Compatible", "Z", .constantValue.asLong = 0, 0xa, -1, 0, -1, -1 },
    { "isNanoCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 1, -1, -1 },
    { "smodel", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { &FreenetSupportCPUInformationVIAInfoImpl_isC3Compatible, &FreenetSupportCPUInformationVIAInfoImpl_isNanoCompatible, &FreenetSupportCPUInformationVIAInfoImpl_smodel };
  static const J2ObjcClassInfo _FreenetSupportCPUInformationVIAInfoImpl = { "VIAInfoImpl", "freenet.support.CPUInformation", ptrTable, methods, fields, 7, 0x0, 6, 3, -1, -1, -1, -1, -1 };
  return &_FreenetSupportCPUInformationVIAInfoImpl;
}

+ (void)initialize {
  if (self == [FreenetSupportCPUInformationVIAInfoImpl class]) {
    JreStrongAssign(&FreenetSupportCPUInformationVIAInfoImpl_smodel, FreenetSupportCPUInformationVIAInfoImpl_identifyCPU());
    J2OBJC_SET_INITIALIZED(FreenetSupportCPUInformationVIAInfoImpl)
  }
}

@end

void FreenetSupportCPUInformationVIAInfoImpl_init(FreenetSupportCPUInformationVIAInfoImpl *self) {
  FreenetSupportCPUInformationCPUIDCPUInfo_init(self);
}

FreenetSupportCPUInformationVIAInfoImpl *new_FreenetSupportCPUInformationVIAInfoImpl_init() {
  J2OBJC_NEW_IMPL(FreenetSupportCPUInformationVIAInfoImpl, init)
}

FreenetSupportCPUInformationVIAInfoImpl *create_FreenetSupportCPUInformationVIAInfoImpl_init() {
  J2OBJC_CREATE_IMPL(FreenetSupportCPUInformationVIAInfoImpl, init)
}

NSString *FreenetSupportCPUInformationVIAInfoImpl_identifyCPU() {
  FreenetSupportCPUInformationVIAInfoImpl_initialize();
  NSString *modelString = nil;
  jint family = FreenetSupportCPUInformationCPUID_getCPUFamily();
  jint model = FreenetSupportCPUInformationCPUID_getCPUModel();
  if (family == 15) {
    family += FreenetSupportCPUInformationCPUID_getCPUExtendedFamily();
    model += JreLShift32(FreenetSupportCPUInformationCPUID_getCPUExtendedModel(), 4);
  }
  if (family == 6) {
    FreenetSupportCPUInformationVIAInfoImpl_isC3Compatible = true;
    switch (model) {
      case 5:
      modelString = @"Cyrix M2";
      break;
      case 6:
      modelString = @"C5 A/B";
      break;
      case 7:
      modelString = @"C5 C";
      break;
      case 8:
      modelString = @"C5 N";
      break;
      case 9:
      modelString = @"C5 XL/P";
      break;
      case 10:
      modelString = @"C5 J";
      break;
      case 15:
      FreenetSupportCPUInformationVIAInfoImpl_isNanoCompatible = true;
      modelString = @"Nano";
      break;
      default:
      modelString = JreStrcat("$I", @"Via model ", model);
      break;
    }
  }
  return modelString;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreenetSupportCPUInformationVIAInfoImpl)
