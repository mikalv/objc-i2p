//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/freenet/support/CPUInformation/CPUID.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "freenet/support/CPUInformation/AMDCPUInfo.h"
#include "freenet/support/CPUInformation/AMDInfoImpl.h"
#include "freenet/support/CPUInformation/CPUID.h"
#include "freenet/support/CPUInformation/CPUInfo.h"
#include "freenet/support/CPUInformation/IntelCPUInfo.h"
#include "freenet/support/CPUInformation/IntelInfoImpl.h"
#include "freenet/support/CPUInformation/UnknownCPUException.h"
#include "freenet/support/CPUInformation/VIAInfoImpl.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsatisfiedLinkError.h"
#include "java/net/URL.h"
#include "java/util/Locale.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/SystemVersion.h"

@interface FreenetSupportCPUInformationCPUID ()

+ (FreenetSupportCPUInformationCPUID_CPUIDResult *)doCPUIDWithInt:(jint)iFunction;

+ (jint)nativeJcpuidVersion;

+ (jint)fetchJcpuidVersion;

+ (void)loadNative;

+ (jboolean)loadGeneric;

+ (jboolean)loadFromResource;

+ (jboolean)extractLoadAndCopyWithNSString:(NSString *)resourceName;

+ (NSString *)getResourceName;

+ (NSString *)getResourceName64;

+ (NSString *)getLibraryPrefix;

+ (NSString *)getLibraryMiddlePart;

+ (NSString *)get64LibraryMiddlePart;

+ (NSString *)getLibrarySuffix;

@end

inline jboolean FreenetSupportCPUInformationCPUID_get__nativeOk(void);
inline jboolean FreenetSupportCPUInformationCPUID_set__nativeOk(jboolean value);
inline jboolean *FreenetSupportCPUInformationCPUID_getRef__nativeOk(void);
static jboolean FreenetSupportCPUInformationCPUID__nativeOk = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationCPUID, _nativeOk, jboolean)

inline jint FreenetSupportCPUInformationCPUID_get__jcpuidVersion(void);
inline jint FreenetSupportCPUInformationCPUID_set__jcpuidVersion(jint value);
inline jint *FreenetSupportCPUInformationCPUID_getRef__jcpuidVersion(void);
static jint FreenetSupportCPUInformationCPUID__jcpuidVersion;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationCPUID, _jcpuidVersion, jint)

inline jboolean FreenetSupportCPUInformationCPUID_get__doLog(void);
inline jboolean FreenetSupportCPUInformationCPUID_set__doLog(jboolean value);
inline jboolean *FreenetSupportCPUInformationCPUID_getRef__doLog(void);
static jboolean FreenetSupportCPUInformationCPUID__doLog;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationCPUID, _doLog, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isX86(void);
static jboolean FreenetSupportCPUInformationCPUID_isX86;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isX86, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isWindows(void);
static jboolean FreenetSupportCPUInformationCPUID_isWindows;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isWindows, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isLinux(void);
static jboolean FreenetSupportCPUInformationCPUID_isLinux;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isLinux, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isKFreebsd(void);
static jboolean FreenetSupportCPUInformationCPUID_isKFreebsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isKFreebsd, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isFreebsd(void);
static jboolean FreenetSupportCPUInformationCPUID_isFreebsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isFreebsd, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isNetbsd(void);
static jboolean FreenetSupportCPUInformationCPUID_isNetbsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isNetbsd, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isOpenbsd(void);
static jboolean FreenetSupportCPUInformationCPUID_isOpenbsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isOpenbsd, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isSunos(void);
static jboolean FreenetSupportCPUInformationCPUID_isSunos;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isSunos, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_isMac(void);
static jboolean FreenetSupportCPUInformationCPUID_isMac;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, isMac, jboolean)

inline jboolean FreenetSupportCPUInformationCPUID_get_is64(void);
static jboolean FreenetSupportCPUInformationCPUID_is64;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(FreenetSupportCPUInformationCPUID, is64, jboolean)

FreenetSupportCPUInformationCPUID_CPUIDResult *FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(jint iFunction);

jint FreenetSupportCPUInformationCPUID_nativeJcpuidVersion(void);

__attribute__((unused)) static jint FreenetSupportCPUInformationCPUID_fetchJcpuidVersion(void);

__attribute__((unused)) static void FreenetSupportCPUInformationCPUID_loadNative(void);

__attribute__((unused)) static jboolean FreenetSupportCPUInformationCPUID_loadGeneric(void);

__attribute__((unused)) static jboolean FreenetSupportCPUInformationCPUID_loadFromResource(void);

__attribute__((unused)) static jboolean FreenetSupportCPUInformationCPUID_extractLoadAndCopyWithNSString_(NSString *resourceName);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_getResourceName(void);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_getResourceName64(void);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_getLibraryPrefix(void);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_getLibraryMiddlePart(void);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_get64LibraryMiddlePart(void);

__attribute__((unused)) static NSString *FreenetSupportCPUInformationCPUID_getLibrarySuffix(void);

J2OBJC_INITIALIZED_DEFN(FreenetSupportCPUInformationCPUID)

@implementation FreenetSupportCPUInformationCPUID

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  FreenetSupportCPUInformationCPUID_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (FreenetSupportCPUInformationCPUID_CPUIDResult *)doCPUIDWithInt:(jint)iFunction {
  return FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(iFunction);
}

+ (jint)nativeJcpuidVersion {
  return FreenetSupportCPUInformationCPUID_nativeJcpuidVersion();
}

+ (jint)fetchJcpuidVersion {
  return FreenetSupportCPUInformationCPUID_fetchJcpuidVersion();
}

+ (jint)getJcpuidVersion {
  return FreenetSupportCPUInformationCPUID_getJcpuidVersion();
}

+ (NSString *)getCPUVendorID {
  return FreenetSupportCPUInformationCPUID_getCPUVendorID();
}

+ (jint)getCPUFamily {
  return FreenetSupportCPUInformationCPUID_getCPUFamily();
}

+ (jint)getCPUModel {
  return FreenetSupportCPUInformationCPUID_getCPUModel();
}

+ (jint)getCPUExtendedModel {
  return FreenetSupportCPUInformationCPUID_getCPUExtendedModel();
}

+ (jint)getCPUType {
  return FreenetSupportCPUInformationCPUID_getCPUType();
}

+ (jint)getCPUExtendedFamily {
  return FreenetSupportCPUInformationCPUID_getCPUExtendedFamily();
}

+ (jint)getCPUStepping {
  return FreenetSupportCPUInformationCPUID_getCPUStepping();
}

+ (jint)getEDXCPUFlags {
  return FreenetSupportCPUInformationCPUID_getEDXCPUFlags();
}

+ (jint)getECXCPUFlags {
  return FreenetSupportCPUInformationCPUID_getECXCPUFlags();
}

+ (jint)getExtendedECXCPUFlags {
  return FreenetSupportCPUInformationCPUID_getExtendedECXCPUFlags();
}

+ (jint)getExtendedEDXCPUFlags {
  return FreenetSupportCPUInformationCPUID_getExtendedEDXCPUFlags();
}

+ (jint)getExtendedEBXFeatureFlags {
  return FreenetSupportCPUInformationCPUID_getExtendedEBXFeatureFlags();
}

+ (jint)getExtendedECXFeatureFlags {
  return FreenetSupportCPUInformationCPUID_getExtendedECXFeatureFlags();
}

+ (NSString *)getCPUModelName {
  return FreenetSupportCPUInformationCPUID_getCPUModelName();
}

+ (id<FreenetSupportCPUInformationCPUInfo>)getInfo {
  return FreenetSupportCPUInformationCPUID_getInfo();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  FreenetSupportCPUInformationCPUID_mainWithNSStringArray_(args);
}

+ (void)loadNative {
  FreenetSupportCPUInformationCPUID_loadNative();
}

+ (jboolean)loadGeneric {
  return FreenetSupportCPUInformationCPUID_loadGeneric();
}

+ (jboolean)loadFromResource {
  return FreenetSupportCPUInformationCPUID_loadFromResource();
}

+ (jboolean)extractLoadAndCopyWithNSString:(NSString *)resourceName {
  return FreenetSupportCPUInformationCPUID_extractLoadAndCopyWithNSString_(resourceName);
}

+ (NSString *)getResourceName {
  return FreenetSupportCPUInformationCPUID_getResourceName();
}

+ (NSString *)getResourceName64 {
  return FreenetSupportCPUInformationCPUID_getResourceName64();
}

+ (NSString *)getLibraryPrefix {
  return FreenetSupportCPUInformationCPUID_getLibraryPrefix();
}

+ (NSString *)getLibraryMiddlePart {
  return FreenetSupportCPUInformationCPUID_getLibraryMiddlePart();
}

+ (NSString *)get64LibraryMiddlePart {
  return FreenetSupportCPUInformationCPUID_get64LibraryMiddlePart();
}

+ (NSString *)getLibrarySuffix {
  return FreenetSupportCPUInformationCPUID_getLibrarySuffix();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LFreenetSupportCPUInformationCPUID_CPUIDResult;", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LFreenetSupportCPUInformationCPUInfo;", 0x9, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doCPUIDWithInt:);
  methods[2].selector = @selector(nativeJcpuidVersion);
  methods[3].selector = @selector(fetchJcpuidVersion);
  methods[4].selector = @selector(getJcpuidVersion);
  methods[5].selector = @selector(getCPUVendorID);
  methods[6].selector = @selector(getCPUFamily);
  methods[7].selector = @selector(getCPUModel);
  methods[8].selector = @selector(getCPUExtendedModel);
  methods[9].selector = @selector(getCPUType);
  methods[10].selector = @selector(getCPUExtendedFamily);
  methods[11].selector = @selector(getCPUStepping);
  methods[12].selector = @selector(getEDXCPUFlags);
  methods[13].selector = @selector(getECXCPUFlags);
  methods[14].selector = @selector(getExtendedECXCPUFlags);
  methods[15].selector = @selector(getExtendedEDXCPUFlags);
  methods[16].selector = @selector(getExtendedEBXFeatureFlags);
  methods[17].selector = @selector(getExtendedECXFeatureFlags);
  methods[18].selector = @selector(getCPUModelName);
  methods[19].selector = @selector(getInfo);
  methods[20].selector = @selector(mainWithNSStringArray:);
  methods[21].selector = @selector(loadNative);
  methods[22].selector = @selector(loadGeneric);
  methods[23].selector = @selector(loadFromResource);
  methods[24].selector = @selector(extractLoadAndCopyWithNSString:);
  methods[25].selector = @selector(getResourceName);
  methods[26].selector = @selector(getResourceName64);
  methods[27].selector = @selector(getLibraryPrefix);
  methods[28].selector = @selector(getLibraryMiddlePart);
  methods[29].selector = @selector(get64LibraryMiddlePart);
  methods[30].selector = @selector(getLibrarySuffix);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_nativeOk", "Z", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "_jcpuidVersion", "I", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "_doLog", "Z", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "isX86", "Z", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "isWindows", "Z", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "isLinux", "Z", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "isKFreebsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "isFreebsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "isNetbsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "isOpenbsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "isSunos", "Z", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "isMac", "Z", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "is64", "Z", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "doCPUID", "I", "LFreenetSupportCPUInformationUnknownCPUException;", "main", "[LNSString;", "extractLoadAndCopy", "LNSString;", &FreenetSupportCPUInformationCPUID__nativeOk, &FreenetSupportCPUInformationCPUID__jcpuidVersion, &FreenetSupportCPUInformationCPUID__doLog, &FreenetSupportCPUInformationCPUID_isX86, &FreenetSupportCPUInformationCPUID_isWindows, &FreenetSupportCPUInformationCPUID_isLinux, &FreenetSupportCPUInformationCPUID_isKFreebsd, &FreenetSupportCPUInformationCPUID_isFreebsd, &FreenetSupportCPUInformationCPUID_isNetbsd, &FreenetSupportCPUInformationCPUID_isOpenbsd, &FreenetSupportCPUInformationCPUID_isSunos, &FreenetSupportCPUInformationCPUID_isMac, &FreenetSupportCPUInformationCPUID_is64, "LFreenetSupportCPUInformationCPUID_CPUIDResult;" };
  static const J2ObjcClassInfo _FreenetSupportCPUInformationCPUID = { "CPUID", "freenet.support.CPUInformation", ptrTable, methods, fields, 7, 0x1, 31, 13, -1, 20, -1, -1, -1 };
  return &_FreenetSupportCPUInformationCPUID;
}

+ (void)initialize {
  if (self == [FreenetSupportCPUInformationCPUID class]) {
    FreenetSupportCPUInformationCPUID__doLog = (JavaLangSystem_getPropertyWithNSString_(@"jcpuid.dontLog") == nil && [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) isRouterContext]);
    FreenetSupportCPUInformationCPUID_isX86 = NetI2pUtilSystemVersion_isX86();
    FreenetSupportCPUInformationCPUID_isWindows = NetI2pUtilSystemVersion_isWindows();
    FreenetSupportCPUInformationCPUID_isLinux = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"linux"];
    FreenetSupportCPUInformationCPUID_isKFreebsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"kfreebsd"];
    FreenetSupportCPUInformationCPUID_isFreebsd = ((!FreenetSupportCPUInformationCPUID_isKFreebsd) && [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"freebsd"]);
    FreenetSupportCPUInformationCPUID_isNetbsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"netbsd"];
    FreenetSupportCPUInformationCPUID_isOpenbsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"openbsd"];
    FreenetSupportCPUInformationCPUID_isSunos = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"sunos"];
    FreenetSupportCPUInformationCPUID_isMac = NetI2pUtilSystemVersion_isMac();
    FreenetSupportCPUInformationCPUID_is64 = NetI2pUtilSystemVersion_is64Bit();
    {
      FreenetSupportCPUInformationCPUID_loadNative();
    }
    J2OBJC_SET_INITIALIZED(FreenetSupportCPUInformationCPUID)
  }
}

@end

void FreenetSupportCPUInformationCPUID_init(FreenetSupportCPUInformationCPUID *self) {
  NSObject_init(self);
}

FreenetSupportCPUInformationCPUID *new_FreenetSupportCPUInformationCPUID_init() {
  J2OBJC_NEW_IMPL(FreenetSupportCPUInformationCPUID, init)
}

FreenetSupportCPUInformationCPUID *create_FreenetSupportCPUInformationCPUID_init() {
  J2OBJC_CREATE_IMPL(FreenetSupportCPUInformationCPUID, init)
}

JNIEXPORT jobject Java_freenet_support_CPUInformation_CPUID_doCPUID(JNIEnv *_env_, jclass _cls_, jint iFunction);

FreenetSupportCPUInformationCPUID_CPUIDResult *FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(jint iFunction) {
  return (FreenetSupportCPUInformationCPUID_CPUIDResult *) Java_freenet_support_CPUInformation_CPUID_doCPUID(&J2ObjC_JNIEnv, FreenetSupportCPUInformationCPUID_class_(), iFunction);
}

JNIEXPORT jint Java_freenet_support_CPUInformation_CPUID_nativeJcpuidVersion(JNIEnv *_env_, jclass _cls_);

jint FreenetSupportCPUInformationCPUID_nativeJcpuidVersion() {
  return Java_freenet_support_CPUInformation_CPUID_nativeJcpuidVersion(&J2ObjC_JNIEnv, FreenetSupportCPUInformationCPUID_class_());
}

jint FreenetSupportCPUInformationCPUID_fetchJcpuidVersion() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (!FreenetSupportCPUInformationCPUID__nativeOk) return 0;
  @try {
    return FreenetSupportCPUInformationCPUID_nativeJcpuidVersion();
  }
  @catch (JavaLangThrowable *t) {
    return 2;
  }
}

jint FreenetSupportCPUInformationCPUID_getJcpuidVersion() {
  FreenetSupportCPUInformationCPUID_initialize();
  return FreenetSupportCPUInformationCPUID__jcpuidVersion;
}

NSString *FreenetSupportCPUInformationCPUID_getCPUVendorID() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(0);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(13);
  [sb appendWithChar:(jchar) (((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EBX_ & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EBX_, 8)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EBX_, 16)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EBX_, 24)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) (c->EDX_ & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EDX_, 8)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EDX_, 16)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->EDX_, 24)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) (c->ECX_ & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->ECX_, 8)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->ECX_, 16)) & (jint) 0xFF)];
  [sb appendWithChar:(jchar) ((JreRShift32(c->ECX_, 24)) & (jint) 0xFF)];
  return [sb description];
}

jint FreenetSupportCPUInformationCPUID_getCPUFamily() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return (JreRShift32(((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_, 8)) & (jint) 0xf;
}

jint FreenetSupportCPUInformationCPUID_getCPUModel() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return (JreRShift32(((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_, 4)) & (jint) 0xf;
}

jint FreenetSupportCPUInformationCPUID_getCPUExtendedModel() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return (JreRShift32(((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_, 16)) & (jint) 0xf;
}

jint FreenetSupportCPUInformationCPUID_getCPUType() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return (JreRShift32(((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_, 12)) & (jint) 0xf;
}

jint FreenetSupportCPUInformationCPUID_getCPUExtendedFamily() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return (JreRShift32(((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_, 20)) & (jint) 0xff;
}

jint FreenetSupportCPUInformationCPUID_getCPUStepping() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_ & (jint) 0xf;
}

jint FreenetSupportCPUInformationCPUID_getEDXCPUFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EDX_;
}

jint FreenetSupportCPUInformationCPUID_getECXCPUFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(1);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->ECX_;
}

jint FreenetSupportCPUInformationCPUID_getExtendedECXCPUFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_((jint) 0x80000001);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->ECX_;
}

jint FreenetSupportCPUInformationCPUID_getExtendedEDXCPUFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_((jint) 0x80000001);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EDX_;
}

jint FreenetSupportCPUInformationCPUID_getExtendedEBXFeatureFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(7);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EBX_;
}

jint FreenetSupportCPUInformationCPUID_getExtendedECXFeatureFlags() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(7);
  return ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->ECX_;
}

NSString *FreenetSupportCPUInformationCPUID_getCPUModelName() {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID_CPUIDResult *c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(-0x7fffffff - 1);
  jlong maxSupported = ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_ & (jlong) 0xFFFFFFFFLL;
  if (maxSupported < (jlong) 0x80000004LL) return nil;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  IOSIntArray *regs = [IOSIntArray arrayWithLength:4];
  for (jint fn = (jint) 0x80000002; fn <= (jint) 0x80000004; fn++) {
    c = FreenetSupportCPUInformationCPUID_doCPUIDWithInt_(fn);
    *IOSIntArray_GetRef(regs, 0) = ((FreenetSupportCPUInformationCPUID_CPUIDResult *) nil_chk(c))->EAX_;
    *IOSIntArray_GetRef(regs, 1) = c->EBX_;
    *IOSIntArray_GetRef(regs, 2) = c->ECX_;
    *IOSIntArray_GetRef(regs, 3) = c->EDX_;
    for (jint i = 0; i < 4; i++) {
      jint reg = IOSIntArray_Get(regs, i);
      for (jint j = 0; j < 4; j++) {
        jchar ch = (jchar) (reg & (jint) 0xff);
        if (ch == 0) return [((NSString *) nil_chk([buf description])) java_trim];
        [buf appendWithChar:ch];
        JreRShiftAssignInt(&reg, 8);
      }
    }
  }
  return [((NSString *) nil_chk([buf description])) java_trim];
}

id<FreenetSupportCPUInformationCPUInfo> FreenetSupportCPUInformationCPUID_getInfo() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (!FreenetSupportCPUInformationCPUID__nativeOk) {
    @throw create_FreenetSupportCPUInformationUnknownCPUException_initWithNSString_(JreStrcat("$$$$$", @"Failed to read CPU information from the system. Please verify the existence of the ", FreenetSupportCPUInformationCPUID_getLibraryPrefix(), @"jcpuid ", FreenetSupportCPUInformationCPUID_getLibrarySuffix(), @" file."));
  }
  NSString *id_ = FreenetSupportCPUInformationCPUID_getCPUVendorID();
  if ([((NSString *) nil_chk(id_)) isEqual:@"CentaurHauls"]) return create_FreenetSupportCPUInformationVIAInfoImpl_init();
  if (!FreenetSupportCPUInformationCPUID_isX86) @throw create_FreenetSupportCPUInformationUnknownCPUException_initWithNSString_(@"Failed to read CPU information from the system. The CPUID instruction exists on x86 CPUs only.");
  if ([id_ isEqual:@"AuthenticAMD"] || [id_ isEqual:@"HygonGenuine"]) return create_FreenetSupportCPUInformationAMDInfoImpl_init();
  if ([id_ isEqual:@"GenuineIntel"]) return create_FreenetSupportCPUInformationIntelInfoImpl_init();
  @throw create_FreenetSupportCPUInformationUnknownCPUException_initWithNSString_(JreStrcat("$$C", @"Unknown CPU type: '", id_, '\''));
}

void FreenetSupportCPUInformationCPUID_mainWithNSStringArray_(IOSObjectArray *args) {
  FreenetSupportCPUInformationCPUID_initialize();
  FreenetSupportCPUInformationCPUID__doLog = true;
  NSString *path = JavaLangSystem_getPropertyWithNSString_(@"java.library.path");
  NSString *name = JreStrcat("$$$", FreenetSupportCPUInformationCPUID_getLibraryPrefix(), @"jcpuid", FreenetSupportCPUInformationCPUID_getLibrarySuffix());
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Native library search path: ", path)];
  if (FreenetSupportCPUInformationCPUID__nativeOk) {
    NSString *sep = JavaLangSystem_getPropertyWithNSString_(@"path.separator");
    IOSObjectArray *paths = NetI2pDataDataHelper_splitWithNSString_withNSString_(path, sep);
    {
      IOSObjectArray *a__ = paths;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *p = *b__++;
        JavaIoFile *f = create_JavaIoFile_initWithNSString_withNSString_(p, name);
        if ([f exists]) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Found native library: ", f)];
          break;
        }
      }
    }
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Failed to retrieve CPUInfo. Please verify the existence of the ", name, @" file in the library path, or set -Djava.library.path=. in the command line")];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"JCPUID Version: ", FreenetSupportCPUInformationCPUID__jcpuidVersion)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@" **CPUInfo**"];
  NSString *mname = FreenetSupportCPUInformationCPUID_getCPUModelName();
  if (mname != nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Model Name: ", mname)];
  NSString *vendor = FreenetSupportCPUInformationCPUID_getCPUVendorID();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Vendor: ", vendor)];
  jint family = FreenetSupportCPUInformationCPUID_getCPUFamily();
  jint model = FreenetSupportCPUInformationCPUID_getCPUModel();
  if (family == 15 || (family == 6 && [@"GenuineIntel" isEqual:vendor])) {
    model += JreLShift32(FreenetSupportCPUInformationCPUID_getCPUExtendedModel(), 4);
  }
  if (family == 15) {
    family += FreenetSupportCPUInformationCPUID_getCPUExtendedFamily();
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"CPU Family: ", family)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"CPU Model: ", model)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"CPU Stepping: ", FreenetSupportCPUInformationCPUID_getCPUStepping())];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Flags (EDX):      0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getEDXCPUFlags()))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Flags (ECX):      0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getECXCPUFlags()))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Ext. Info. (EDX): 0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getExtendedEDXCPUFlags()))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Ext. Info. (ECX): 0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getExtendedECXCPUFlags()))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Ext. Feat. (EBX): 0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getExtendedEBXFeatureFlags()))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU Ext. Feat. (ECX): 0x", JavaLangInteger_toHexStringWithInt_(FreenetSupportCPUInformationCPUID_getExtendedECXFeatureFlags()))];
  id<FreenetSupportCPUInformationCPUInfo> c = FreenetSupportCPUInformationCPUID_getInfo();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\n **More CPUInfo**"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"CPU model string: ", [((id<FreenetSupportCPUInformationCPUInfo>) nil_chk(c)) getCPUModelString])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has MMX:    ", [c hasMMX])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE:    ", [c hasSSE])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE2:   ", [c hasSSE2])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE3:   ", [c hasSSE3])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE4.1: ", [c hasSSE41])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE4.2: ", [c hasSSE42])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has SSE4A:  ", [c hasSSE4A])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has AES-NI: ", [c hasAES])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has AVX:    ", [c hasAVX])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has AVX2:   ", [c hasAVX2])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has AVX512: ", [c hasAVX512])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has ADX:    ", [c hasADX])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has TBM:    ", [c hasTBM])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has BMI1:   ", [c hasBMI1])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has BMI2:   ", [c hasBMI2])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has FMA3:   ", [c hasFMA3])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has MOVBE:  ", [c hasMOVBE])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"CPU has ABM:    ", [c hasABM])];
  if ([FreenetSupportCPUInformationIntelCPUInfo_class_() isInstance:c]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\n **Intel-info**"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is PII-compatible:       ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsPentium2Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is PIII-compatible:      ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsPentium3Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is PIV-compatible:       ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsPentium4Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Atom-compatible:      ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsAtomCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Pentium M compatible: ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsPentiumMCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Core2-compatible:     ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsCore2Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Corei-compatible:     ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsCoreiCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Sandy-compatible:     ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsSandyCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Ivy-compatible:       ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsIvyCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Haswell-compatible:   ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsHaswellCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Broadwell-compatible: ", [((id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_())) IsBroadwellCompatible])];
  }
  if ([FreenetSupportCPUInformationAMDCPUInfo_class_() isInstance:c]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\n **AMD-info**"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is K6-compatible:          ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsK6Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is K6_2-compatible:        ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsK6_2_Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is K6_3-compatible:        ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsK6_3_Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Geode-compatible:       ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsGeodeCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Athlon-compatible:      ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsAthlonCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Athlon64-compatible:    ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsAthlon64Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Bobcat-compatible:      ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsBobcatCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is K10-compatible:         ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsK10Compatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Jaguar-compatible:      ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsJaguarCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Bulldozer-compatible:   ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsBulldozerCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Piledriver-compatible:  ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsPiledriverCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Steamroller-compatible: ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsSteamrollerCompatible])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Is Excavator-compatible:   ", [((id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_())) IsExcavatorCompatible])];
  }
}

void FreenetSupportCPUInformationCPUID_loadNative() {
  FreenetSupportCPUInformationCPUID_initialize();
  @try {
    NSString *wantedProp = JavaLangSystem_getPropertyWithNSString_withNSString_(@"jcpuid.enable", @"true");
    jboolean wantNative = JavaLangBoolean_parseBooleanWithNSString_(wantedProp);
    if (wantNative) {
      jboolean loaded = FreenetSupportCPUInformationCPUID_loadGeneric();
      if (loaded) {
        FreenetSupportCPUInformationCPUID__nativeOk = true;
        if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"INFO: Native CPUID library ", FreenetSupportCPUInformationCPUID_getLibraryMiddlePart(), @" loaded from file")];
      }
      else {
        loaded = FreenetSupportCPUInformationCPUID_loadFromResource();
        if (loaded) {
          FreenetSupportCPUInformationCPUID__nativeOk = true;
          if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"INFO: Native CPUID library ", FreenetSupportCPUInformationCPUID_getResourceName(), @" loaded from resource")];
        }
        else {
          FreenetSupportCPUInformationCPUID__nativeOk = false;
          if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"WARNING: Native CPUID library jcpuid not loaded - will not be able to read CPU information using CPUID"];
        }
      }
      FreenetSupportCPUInformationCPUID__jcpuidVersion = FreenetSupportCPUInformationCPUID_fetchJcpuidVersion();
    }
    else {
      if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"INFO: Native CPUID library jcpuid not loaded - will not be able to read CPU information using CPUID"];
    }
  }
  @catch (JavaLangException *e) {
    if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"INFO: Native CPUID library jcpuid not loaded, reason: '", [e getMessage], @"' - will not be able to read CPU information using CPUID")];
  }
}

jboolean FreenetSupportCPUInformationCPUID_loadGeneric() {
  FreenetSupportCPUInformationCPUID_initialize();
  @try {
    JavaLangSystem_loadLibraryWithNSString_(@"jcpuid");
    return true;
  }
  @catch (JavaLangUnsatisfiedLinkError *ule) {
  }
  return false;
}

jboolean FreenetSupportCPUInformationCPUID_loadFromResource() {
  FreenetSupportCPUInformationCPUID_initialize();
  NSString *resourceName = FreenetSupportCPUInformationCPUID_getResourceName64();
  if (resourceName != nil) {
    jboolean success = FreenetSupportCPUInformationCPUID_extractLoadAndCopyWithNSString_(resourceName);
    if (success) return true;
    if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"WARNING: Resource name [", resourceName, @"] was not found")];
  }
  resourceName = FreenetSupportCPUInformationCPUID_getResourceName();
  jboolean success = FreenetSupportCPUInformationCPUID_extractLoadAndCopyWithNSString_(resourceName);
  if (success) return true;
  if (FreenetSupportCPUInformationCPUID__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"WARNING: Resource name [", resourceName, @"] was not found")];
  return false;
}

jboolean FreenetSupportCPUInformationCPUID_extractLoadAndCopyWithNSString_(NSString *resourceName) {
  FreenetSupportCPUInformationCPUID_initialize();
  JavaNetURL *resource = [((JavaLangClassLoader *) nil_chk([FreenetSupportCPUInformationCPUID_class_() getClassLoader])) getResourceWithNSString:resourceName];
  if (resource == nil) return false;
  JavaIoInputStream *libStream = nil;
  JavaIoFile *outFile = nil;
  JavaIoFileOutputStream *fos = nil;
  NSString *filename = JreStrcat("$$$", FreenetSupportCPUInformationCPUID_getLibraryPrefix(), @"jcpuid", FreenetSupportCPUInformationCPUID_getLibrarySuffix());
  @try {
    libStream = [resource openStream];
    outFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getTempDir], filename);
    fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(outFile);
    NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(libStream, fos);
    [fos close];
    fos = nil;
    JavaLangSystem_load__WithNSString_([outFile getAbsolutePath]);
  }
  @catch (JavaLangUnsatisfiedLinkError *ule) {
    if (FreenetSupportCPUInformationCPUID__doLog) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"WARNING: The resource ", resourceName, @" was not a valid library for this platform ", ule)];
    }
    if (outFile != nil) [outFile delete__];
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    if (FreenetSupportCPUInformationCPUID__doLog) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: Problem writing out the temporary native library data"];
      [ioe printStackTrace];
    }
    if (outFile != nil) [outFile delete__];
    return false;
  }
  @finally {
    if (libStream != nil) @try {
      [libStream close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (fos != nil) {
      @try {
        [fos close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  JavaIoFile *newFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBaseDir], filename);
  NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(outFile, newFile, false, true);
  return true;
}

NSString *FreenetSupportCPUInformationCPUID_getResourceName() {
  FreenetSupportCPUInformationCPUID_initialize();
  return JreStrcat("$$$", FreenetSupportCPUInformationCPUID_getLibraryPrefix(), FreenetSupportCPUInformationCPUID_getLibraryMiddlePart(), FreenetSupportCPUInformationCPUID_getLibrarySuffix());
}

NSString *FreenetSupportCPUInformationCPUID_getResourceName64() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (!FreenetSupportCPUInformationCPUID_is64 && !FreenetSupportCPUInformationCPUID_isMac) return nil;
  return JreStrcat("$$$", FreenetSupportCPUInformationCPUID_getLibraryPrefix(), FreenetSupportCPUInformationCPUID_get64LibraryMiddlePart(), FreenetSupportCPUInformationCPUID_getLibrarySuffix());
}

NSString *FreenetSupportCPUInformationCPUID_getLibraryPrefix() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (FreenetSupportCPUInformationCPUID_isWindows) return @"";
  else return @"lib";
}

NSString *FreenetSupportCPUInformationCPUID_getLibraryMiddlePart() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (FreenetSupportCPUInformationCPUID_isWindows) return @"jcpuid-x86-windows";
  if (FreenetSupportCPUInformationCPUID_isMac) {
    if (FreenetSupportCPUInformationCPUID_isX86) {
      return @"jcpuid-x86_64-osx";
    }
    return @"jcpuid-ppc-osx";
  }
  if (FreenetSupportCPUInformationCPUID_isKFreebsd) return @"jcpuid-x86-kfreebsd";
  if (FreenetSupportCPUInformationCPUID_isFreebsd) return @"jcpuid-x86-freebsd";
  if (FreenetSupportCPUInformationCPUID_isNetbsd) return @"jcpuid-x86-netbsd";
  if (FreenetSupportCPUInformationCPUID_isOpenbsd) return @"jcpuid-x86-openbsd";
  if (FreenetSupportCPUInformationCPUID_isSunos) return @"jcpuid-x86-solaris";
  return @"jcpuid-x86-linux";
}

NSString *FreenetSupportCPUInformationCPUID_get64LibraryMiddlePart() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (FreenetSupportCPUInformationCPUID_isWindows) return @"jcpuid-x86_64-windows";
  if (FreenetSupportCPUInformationCPUID_isKFreebsd) return @"jcpuid-x86_64-kfreebsd";
  if (FreenetSupportCPUInformationCPUID_isFreebsd) return @"jcpuid-x86_64-freebsd";
  if (FreenetSupportCPUInformationCPUID_isNetbsd) return @"jcpuid-x86_64-netbsd";
  if (FreenetSupportCPUInformationCPUID_isOpenbsd) return @"jcpuid-x86_64-openbsd";
  if (FreenetSupportCPUInformationCPUID_isMac) {
    if (FreenetSupportCPUInformationCPUID_isX86) {
      return @"jcpuid-x86_64-osx";
    }
    return @"jcpuid-ppc_64-osx";
  }
  if (FreenetSupportCPUInformationCPUID_isSunos) return @"jcpuid-x86_64-solaris";
  return @"jcpuid-x86_64-linux";
}

NSString *FreenetSupportCPUInformationCPUID_getLibrarySuffix() {
  FreenetSupportCPUInformationCPUID_initialize();
  if (FreenetSupportCPUInformationCPUID_isWindows) return @".dll";
  if (FreenetSupportCPUInformationCPUID_isMac) return @".jnilib";
  else return @".so";
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreenetSupportCPUInformationCPUID)

@implementation FreenetSupportCPUInformationCPUID_CPUIDResult

- (instancetype)initWithInt:(jint)EAX
                    withInt:(jint)EBX
                    withInt:(jint)ECX
                    withInt:(jint)EDX {
  FreenetSupportCPUInformationCPUID_CPUIDResult_initWithInt_withInt_withInt_withInt_(self, EAX, EBX, ECX, EDX);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EAX_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "EBX_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "ECX_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "EDX_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "LFreenetSupportCPUInformationCPUID;" };
  static const J2ObjcClassInfo _FreenetSupportCPUInformationCPUID_CPUIDResult = { "CPUIDResult", "freenet.support.CPUInformation", ptrTable, methods, fields, 7, 0xc, 1, 4, 1, -1, -1, -1, -1 };
  return &_FreenetSupportCPUInformationCPUID_CPUIDResult;
}

@end

void FreenetSupportCPUInformationCPUID_CPUIDResult_initWithInt_withInt_withInt_withInt_(FreenetSupportCPUInformationCPUID_CPUIDResult *self, jint EAX, jint EBX, jint ECX, jint EDX) {
  NSObject_init(self);
  self->EAX_ = EAX;
  self->EBX_ = EBX;
  self->ECX_ = ECX;
  self->EDX_ = EDX;
}

FreenetSupportCPUInformationCPUID_CPUIDResult *new_FreenetSupportCPUInformationCPUID_CPUIDResult_initWithInt_withInt_withInt_withInt_(jint EAX, jint EBX, jint ECX, jint EDX) {
  J2OBJC_NEW_IMPL(FreenetSupportCPUInformationCPUID_CPUIDResult, initWithInt_withInt_withInt_withInt_, EAX, EBX, ECX, EDX)
}

FreenetSupportCPUInformationCPUID_CPUIDResult *create_FreenetSupportCPUInformationCPUID_CPUIDResult_initWithInt_withInt_withInt_withInt_(jint EAX, jint EBX, jint ECX, jint EDX) {
  J2OBJC_CREATE_IMPL(FreenetSupportCPUInformationCPUID_CPUIDResult, initWithInt_withInt_withInt_withInt_, EAX, EBX, ECX, EDX)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreenetSupportCPUInformationCPUID_CPUIDResult)
