//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/freenet/support/CPUInformation/IntelInfoImpl.java
//

#include "J2ObjC_source.h"
#include "freenet/support/CPUInformation/CPUID.h"
#include "freenet/support/CPUInformation/CPUIDCPUInfo.h"
#include "freenet/support/CPUInformation/IntelInfoImpl.h"
#include "freenet/support/CPUInformation/UnknownCPUException.h"

@interface FreenetSupportCPUInformationIntelInfoImpl ()

+ (NSString *)identifyCPU;

@end

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentiumCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentiumCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentiumCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentiumCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentiumMMXCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentiumMMXCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentiumMMXCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentiumMMXCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentium2Compatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentium2Compatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentium2Compatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentium2Compatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentium3Compatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentium3Compatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentium3Compatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentium3Compatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentium4Compatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentium4Compatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentium4Compatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentium4Compatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isPentiumMCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isPentiumMCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isPentiumMCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isPentiumMCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isAtomCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isAtomCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isAtomCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isAtomCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isCore2Compatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isCore2Compatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isCore2Compatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isCore2Compatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isCoreiCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isCoreiCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isCoreiCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isCoreiCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isSandyCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isSandyCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isSandyCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isSandyCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isIvyCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isIvyCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isIvyCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isIvyCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isHaswellCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isHaswellCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isHaswellCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isHaswellCompatible, jboolean)

inline jboolean FreenetSupportCPUInformationIntelInfoImpl_get_isBroadwellCompatible(void);
inline jboolean FreenetSupportCPUInformationIntelInfoImpl_set_isBroadwellCompatible(jboolean value);
inline jboolean *FreenetSupportCPUInformationIntelInfoImpl_getRef_isBroadwellCompatible(void);
static jboolean FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible;
J2OBJC_STATIC_FIELD_PRIMITIVE(FreenetSupportCPUInformationIntelInfoImpl, isBroadwellCompatible, jboolean)

inline NSString *FreenetSupportCPUInformationIntelInfoImpl_get_smodel(void);
static NSString *FreenetSupportCPUInformationIntelInfoImpl_smodel;
J2OBJC_STATIC_FIELD_OBJ_FINAL(FreenetSupportCPUInformationIntelInfoImpl, smodel, NSString *)

__attribute__((unused)) static NSString *FreenetSupportCPUInformationIntelInfoImpl_identifyCPU(void);

J2OBJC_INITIALIZED_DEFN(FreenetSupportCPUInformationIntelInfoImpl)

@implementation FreenetSupportCPUInformationIntelInfoImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  FreenetSupportCPUInformationIntelInfoImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)IsPentiumCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible;
}

- (jboolean)IsPentiumMMXCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible;
}

- (jboolean)IsPentium2Compatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible;
}

- (jboolean)IsPentium3Compatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible;
}

- (jboolean)IsPentium4Compatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible;
}

- (jboolean)IsPentiumMCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible;
}

- (jboolean)IsAtomCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible;
}

- (jboolean)IsCore2Compatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible;
}

- (jboolean)IsCoreiCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible;
}

- (jboolean)IsSandyCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible;
}

- (jboolean)IsIvyCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible;
}

- (jboolean)IsHaswellCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible;
}

- (jboolean)IsBroadwellCompatible {
  return FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible;
}

- (NSString *)getCPUModelString {
  if (FreenetSupportCPUInformationIntelInfoImpl_smodel != nil) return FreenetSupportCPUInformationIntelInfoImpl_smodel;
  @throw create_FreenetSupportCPUInformationUnknownCPUException_initWithNSString_(JreStrcat("$ICI$ICI", @"Unknown Intel CPU; Family=", FreenetSupportCPUInformationCPUID_getCPUFamily(), '/', FreenetSupportCPUInformationCPUID_getCPUExtendedFamily(), @", Model=", FreenetSupportCPUInformationCPUID_getCPUModel(), '/', FreenetSupportCPUInformationCPUID_getCPUExtendedModel()));
}

+ (NSString *)identifyCPU {
  return FreenetSupportCPUInformationIntelInfoImpl_identifyCPU();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(IsPentiumCompatible);
  methods[2].selector = @selector(IsPentiumMMXCompatible);
  methods[3].selector = @selector(IsPentium2Compatible);
  methods[4].selector = @selector(IsPentium3Compatible);
  methods[5].selector = @selector(IsPentium4Compatible);
  methods[6].selector = @selector(IsPentiumMCompatible);
  methods[7].selector = @selector(IsAtomCompatible);
  methods[8].selector = @selector(IsCore2Compatible);
  methods[9].selector = @selector(IsCoreiCompatible);
  methods[10].selector = @selector(IsSandyCompatible);
  methods[11].selector = @selector(IsIvyCompatible);
  methods[12].selector = @selector(IsHaswellCompatible);
  methods[13].selector = @selector(IsBroadwellCompatible);
  methods[14].selector = @selector(getCPUModelString);
  methods[15].selector = @selector(identifyCPU);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isPentiumCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 1, -1, -1 },
    { "isPentiumMMXCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
    { "isPentium2Compatible", "Z", .constantValue.asLong = 0, 0xa, -1, 3, -1, -1 },
    { "isPentium3Compatible", "Z", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "isPentium4Compatible", "Z", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "isPentiumMCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "isAtomCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "isCore2Compatible", "Z", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "isCoreiCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "isSandyCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "isIvyCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "isHaswellCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "isBroadwellCompatible", "Z", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "smodel", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "LFreenetSupportCPUInformationUnknownCPUException;", &FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible, &FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible, &FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible, &FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible, &FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible, &FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible, &FreenetSupportCPUInformationIntelInfoImpl_smodel };
  static const J2ObjcClassInfo _FreenetSupportCPUInformationIntelInfoImpl = { "IntelInfoImpl", "freenet.support.CPUInformation", ptrTable, methods, fields, 7, 0x0, 16, 14, -1, -1, -1, -1, -1 };
  return &_FreenetSupportCPUInformationIntelInfoImpl;
}

+ (void)initialize {
  if (self == [FreenetSupportCPUInformationIntelInfoImpl class]) {
    JreStrongAssign(&FreenetSupportCPUInformationIntelInfoImpl_smodel, FreenetSupportCPUInformationIntelInfoImpl_identifyCPU());
    J2OBJC_SET_INITIALIZED(FreenetSupportCPUInformationIntelInfoImpl)
  }
}

@end

void FreenetSupportCPUInformationIntelInfoImpl_init(FreenetSupportCPUInformationIntelInfoImpl *self) {
  FreenetSupportCPUInformationCPUIDCPUInfo_init(self);
}

FreenetSupportCPUInformationIntelInfoImpl *new_FreenetSupportCPUInformationIntelInfoImpl_init() {
  J2OBJC_NEW_IMPL(FreenetSupportCPUInformationIntelInfoImpl, init)
}

FreenetSupportCPUInformationIntelInfoImpl *create_FreenetSupportCPUInformationIntelInfoImpl_init() {
  J2OBJC_CREATE_IMPL(FreenetSupportCPUInformationIntelInfoImpl, init)
}

NSString *FreenetSupportCPUInformationIntelInfoImpl_identifyCPU() {
  FreenetSupportCPUInformationIntelInfoImpl_initialize();
  NSString *modelString = nil;
  jint family = FreenetSupportCPUInformationCPUID_getCPUFamily();
  jint model = FreenetSupportCPUInformationCPUID_getCPUModel();
  if (family == 15 || family == 6) {
    model += JreLShift32(FreenetSupportCPUInformationCPUID_getCPUExtendedModel(), 4);
  }
  if (family == 15) {
    family += FreenetSupportCPUInformationCPUID_getCPUExtendedFamily();
  }
  switch (family) {
    case 4:
    {
      switch (model) {
        case 0:
        modelString = @"486 DX-25/33";
        break;
        case 1:
        modelString = @"486 DX-50";
        break;
        case 2:
        modelString = @"486 SX";
        break;
        case 3:
        modelString = @"486 DX/2";
        break;
        case 4:
        modelString = @"486 SL";
        break;
        case 5:
        modelString = @"486 SX/2";
        break;
        case 7:
        modelString = @"486 DX/2-WB";
        break;
        case 8:
        modelString = @"486 DX/4";
        break;
        case 9:
        modelString = @"486 DX/4-WB";
        break;
        default:
        modelString = JreStrcat("$I", @"Intel 486/586 model ", model);
        break;
      }
    }
    break;
    case 5:
    {
      FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible = true;
      switch (model) {
        case 0:
        modelString = @"Pentium 60/66 A-step";
        break;
        case 1:
        modelString = @"Pentium 60/66";
        break;
        case 2:
        modelString = @"Pentium 75 - 200";
        break;
        case 3:
        modelString = @"OverDrive PODP5V83";
        break;
        case 4:
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible = true;
        modelString = @"Pentium MMX";
        break;
        case 7:
        modelString = @"Mobile Pentium 75 - 200";
        break;
        case 8:
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible = true;
        modelString = @"Mobile Pentium MMX";
        break;
        default:
        modelString = JreStrcat("$I", @"Intel Pentium model ", model);
        break;
      }
    }
    break;
    case 6:
    {
      FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible = true;
      FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible = true;
      jint extmodel = JreRShift32(model, 4);
      if (extmodel >= 1) {
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = true;
        if (extmodel >= 2) FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = true;
      }
      switch (model) {
        case 0:
        modelString = @"Pentium Pro A-step";
        break;
        case 1:
        modelString = @"Pentium Pro";
        break;
        case 3:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        modelString = @"Pentium II (Klamath)";
        break;
        case 5:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        modelString = @"Pentium II (Deschutes), Celeron (Covington), Mobile Pentium II (Dixon)";
        break;
        case 6:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        modelString = @"Mobile Pentium II, Celeron (Mendocino)";
        break;
        case 7:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        modelString = @"Pentium III (Katmai)";
        break;
        case 8:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        modelString = @"Pentium III (Coppermine), Celeron w/SSE";
        break;
        case 9:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible = true;
        modelString = @"Pentium M (Banias)";
        break;
        case 10:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        modelString = @"Pentium III Xeon (Cascades)";
        break;
        case 11:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        modelString = @"Pentium III (130 nm)";
        break;
        case 13:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible = true;
        modelString = @"Core (Yonah)";
        break;
        case 14:
        case 15:
        FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isPentiumMCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = true;
        modelString = @"Penryn";
        break;
        case (jint) 0x16:
        modelString = @"Merom";
        break;
        case (jint) 0x17:
        modelString = @"Penryn";
        break;
        case (jint) 0x1a:
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = true;
        modelString = @"Nehalem";
        break;
        case (jint) 0x1c:
        FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = false;
        FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible = false;
        modelString = @"Atom";
        break;
        case (jint) 0x1d:
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = true;
        modelString = @"Penryn";
        break;
        case (jint) 0x1e:
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = true;
        modelString = @"Nehalem";
        break;
        case (jint) 0x25:
        modelString = @"Westmere";
        break;
        case (jint) 0x26:
        FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = false;
        modelString = @"Atom";
        break;
        case (jint) 0x2a:
        FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
        modelString = @"Sandy Bridge";
        break;
        case (jint) 0x2b:
        modelString = @"Core i7/i5 (32nm)";
        break;
        case (jint) 0x2c:
        modelString = @"Westmere";
        break;
        case (jint) 0x2d:
        FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
        modelString = @"Sandy Bridge";
        break;
        case (jint) 0x2e:
        modelString = @"Nehalem";
        break;
        case (jint) 0x2f:
        modelString = @"Westemere";
        break;
        case (jint) 0x36:
        FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = false;
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = false;
        modelString = @"Atom";
        break;
        case (jint) 0x37:
        FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = false;
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = false;
        modelString = @"Atom";
        break;
        case (jint) 0x3a:
        FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
        modelString = @"Ivy Bridge";
        break;
        case (jint) 0x3d:
        {
          FreenetSupportCPUInformationCPUIDCPUInfo *c = create_FreenetSupportCPUInformationCPUIDCPUInfo_init();
          if ([c hasAVX2] && [c hasBMI1] && [c hasBMI2] && [c hasFMA3] && [c hasMOVBE] && [c hasABM]) {
            FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible = true;
            if ([c hasADX]) FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible = true;
            modelString = @"Broadwell Core i3/i5/i7";
          }
          else {
            if ([c hasAVX]) {
              FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
              FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
              modelString = @"Broadwell Celeron/Pentium w/ AVX";
            }
            else {
              modelString = @"Broadwell Celeron/Pentium";
            }
          }
          break;
        }
        case (jint) 0x3e:
        FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
        FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
        modelString = @"Ivy Bridge";
        break;
        case (jint) 0x3c:
        case (jint) 0x3f:
        case (jint) 0x45:
        case (jint) 0x46:
        {
          FreenetSupportCPUInformationCPUIDCPUInfo *c = create_FreenetSupportCPUInformationCPUIDCPUInfo_init();
          if ([c hasAVX2] && [c hasBMI1] && [c hasBMI2] && [c hasFMA3] && [c hasMOVBE] && [c hasABM]) {
            FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible = true;
            modelString = JreStrcat("$I", @"Haswell Core i3/i5/i7 model ", model);
          }
          else {
            if ([c hasAVX]) {
              FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
              FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
              modelString = JreStrcat("$I", @"Haswell Celeron/Pentium w/ AVX model ", model);
            }
            else {
              modelString = JreStrcat("$I", @"Haswell Celeron/Pentium model ", model);
            }
          }
          break;
        }
        case (jint) 0x4a:
        FreenetSupportCPUInformationIntelInfoImpl_isCore2Compatible = false;
        FreenetSupportCPUInformationIntelInfoImpl_isCoreiCompatible = false;
        modelString = @"Quark";
        break;
        case (jint) 0x4d:
        FreenetSupportCPUInformationIntelInfoImpl_isAtomCompatible = true;
        modelString = @"Atom";
        break;
        case (jint) 0x4e:
        case (jint) 0x55:
        case (jint) 0x5e:
        {
          FreenetSupportCPUInformationCPUIDCPUInfo *c = create_FreenetSupportCPUInformationCPUIDCPUInfo_init();
          if ([c hasAVX2] && [c hasBMI1] && [c hasBMI2] && [c hasFMA3] && [c hasMOVBE] && [c hasABM]) {
            FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible = true;
            if ([c hasADX]) FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible = true;
            modelString = @"Skylake Core i3/i5/i7";
          }
          else {
            if ([c hasAVX]) {
              FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
              FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
              modelString = @"Skylake Celeron/Pentium w/ AVX";
            }
            else {
              modelString = @"Skylake Celeron/Pentium";
            }
          }
          break;
        }
        case (jint) 0x8e:
        case (jint) 0x9e:
        {
          FreenetSupportCPUInformationCPUIDCPUInfo *c = create_FreenetSupportCPUInformationCPUIDCPUInfo_init();
          if ([c hasAVX2] && [c hasBMI1] && [c hasBMI2] && [c hasFMA3] && [c hasMOVBE] && [c hasABM]) {
            FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
            FreenetSupportCPUInformationIntelInfoImpl_isHaswellCompatible = true;
            if ([c hasADX]) FreenetSupportCPUInformationIntelInfoImpl_isBroadwellCompatible = true;
            modelString = @"Kaby Lake Core i3/i5/i7";
          }
          else {
            if ([c hasAVX]) {
              FreenetSupportCPUInformationIntelInfoImpl_isSandyCompatible = true;
              FreenetSupportCPUInformationIntelInfoImpl_isIvyCompatible = true;
              modelString = @"Kaby Lake Celeron/Pentium w/ AVX";
            }
            else {
              modelString = @"Kaby Lake Celeron/Pentium";
            }
          }
          break;
        }
        default:
        modelString = JreStrcat("$I", @"Intel model ", model);
        break;
      }
    }
    break;
    case 7:
    {
      modelString = JreStrcat("$I", @"Intel Itanium model ", model);
    }
    break;
    case 15:
    {
      FreenetSupportCPUInformationIntelInfoImpl_isPentiumCompatible = true;
      FreenetSupportCPUInformationIntelInfoImpl_isPentiumMMXCompatible = true;
      FreenetSupportCPUInformationIntelInfoImpl_isPentium2Compatible = true;
      FreenetSupportCPUInformationIntelInfoImpl_isPentium3Compatible = true;
      FreenetSupportCPUInformationIntelInfoImpl_isPentium4Compatible = true;
      switch (model) {
        case 0:
        case 1:
        modelString = @"Pentium IV (180 nm)";
        break;
        case 2:
        modelString = @"Pentium IV (130 nm)";
        break;
        case 3:
        modelString = @"Pentium IV (90 nm)";
        break;
        case 4:
        modelString = @"Pentium IV (90 nm)";
        break;
        case 6:
        modelString = @"Pentium IV (65 nm)";
        break;
        default:
        modelString = JreStrcat("$I", @"Intel Pentium IV model ", model);
        break;
      }
    }
    break;
    case 16:
    {
      modelString = JreStrcat("$I", @"Intel Itanium II model ", model);
    }
  }
  return modelString;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreenetSupportCPUInformationIntelInfoImpl)
