//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONArray.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "net/minidev/json/JSONArray.h"
#include "net/minidev/json/JSONObject.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONValue.h"
#include "net/minidev/json/reader/JsonWriter.h"
#include "net/minidev/json/reader/JsonWriterI.h"

inline jlong NetMinidevJsonJSONArray_get_serialVersionUID(void);
#define NetMinidevJsonJSONArray_serialVersionUID 9106884089231309568LL
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONArray, serialVersionUID, jlong)

@implementation NetMinidevJsonJSONArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJSONArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)toJSONStringWithJavaUtilList:(id<JavaUtilList>)list {
  return NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_(list);
}

+ (NSString *)toJSONStringWithJavaUtilList:(id<JavaUtilList>)list
               withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_withNetMinidevJsonJSONStyle_(list, compression);
}

+ (void)writeJSONStringWithJavaLangIterable:(id<JavaLangIterable>)list
                     withJavaLangAppendable:(id<JavaLangAppendable>)outArg
                withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(list, outArg, compression);
}

+ (void)writeJSONStringWithJavaUtilList:(id<JavaUtilList>)list
                 withJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  NetMinidevJsonJSONArray_writeJSONStringWithJavaUtilList_withJavaLangAppendable_(list, outArg);
}

- (void)mergeWithId:(id)o2 {
  NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withId_(self, o2);
}

- (NSString *)toJSONString {
  return NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_withNetMinidevJsonJSONStyle_(self, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

- (NSString *)toJSONStringWithNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_withNetMinidevJsonJSONStyle_(self, compression);
}

- (NSString *)description {
  return [self toJSONString];
}

- (NSString *)toStringWithNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return [self toJSONStringWithNetMinidevJsonJSONStyle:compression];
}

- (void)writeJSONStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(self, outArg, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

- (void)writeJSONStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg
                  withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(self, outArg, compression);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 5, 6, 7, 8, -1, -1 },
    { NULL, "V", 0x9, 5, 9, 7, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 15, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 16, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toJSONStringWithJavaUtilList:);
  methods[2].selector = @selector(toJSONStringWithJavaUtilList:withNetMinidevJsonJSONStyle:);
  methods[3].selector = @selector(writeJSONStringWithJavaLangIterable:withJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  methods[4].selector = @selector(writeJSONStringWithJavaUtilList:withJavaLangAppendable:);
  methods[5].selector = @selector(mergeWithId:);
  methods[6].selector = @selector(toJSONString);
  methods[7].selector = @selector(toJSONStringWithNetMinidevJsonJSONStyle:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(toStringWithNetMinidevJsonJSONStyle:);
  methods[10].selector = @selector(writeJSONStringWithJavaLangAppendable:);
  methods[11].selector = @selector(writeJSONStringWithJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetMinidevJsonJSONArray_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toJSONString", "LJavaUtilList;", "(Ljava/util/List<+Ljava/lang/Object;>;)Ljava/lang/String;", "LJavaUtilList;LNetMinidevJsonJSONStyle;", "(Ljava/util/List<+Ljava/lang/Object;>;Lnet/minidev/json/JSONStyle;)Ljava/lang/String;", "writeJSONString", "LJavaLangIterable;LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "LJavaIoIOException;", "(Ljava/lang/Iterable<+Ljava/lang/Object;>;Ljava/lang/Appendable;Lnet/minidev/json/JSONStyle;)V", "LJavaUtilList;LJavaLangAppendable;", "(Ljava/util/List<+Ljava/lang/Object;>;Ljava/lang/Appendable;)V", "merge", "LNSObject;", "LNetMinidevJsonJSONStyle;", "toString", "LJavaLangAppendable;", "LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "Ljava/util/ArrayList<Ljava/lang/Object;>;Ljava/util/List<Ljava/lang/Object;>;Lnet/minidev/json/JSONAwareEx;Lnet/minidev/json/JSONStreamAwareEx;" };
  static const J2ObjcClassInfo _NetMinidevJsonJSONArray = { "JSONArray", "net.minidev.json", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, 17, -1 };
  return &_NetMinidevJsonJSONArray;
}

@end

void NetMinidevJsonJSONArray_init(NetMinidevJsonJSONArray *self) {
  JavaUtilArrayList_init(self);
}

NetMinidevJsonJSONArray *new_NetMinidevJsonJSONArray_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONArray, init)
}

NetMinidevJsonJSONArray *create_NetMinidevJsonJSONArray_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONArray, init)
}

NSString *NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_(id<JavaUtilList> list) {
  NetMinidevJsonJSONArray_initialize();
  return NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_withNetMinidevJsonJSONStyle_(list, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

NSString *NetMinidevJsonJSONArray_toJSONStringWithJavaUtilList_withNetMinidevJsonJSONStyle_(id<JavaUtilList> list, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONArray_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  @try {
    NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(list, sb, compression);
  }
  @catch (JavaIoIOException *e) {
  }
  return [sb description];
}

void NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(id<JavaLangIterable> list, id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONArray_initialize();
  if (list == nil) {
    [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"null"];
    return;
  }
  [((id<NetMinidevJsonReaderJsonWriterI>) nil_chk(JreLoadStatic(NetMinidevJsonReaderJsonWriter, JSONIterableWriter))) writeJSONStringWithId:list withJavaLangAppendable:outArg withNetMinidevJsonJSONStyle:compression];
}

void NetMinidevJsonJSONArray_writeJSONStringWithJavaUtilList_withJavaLangAppendable_(id<JavaUtilList> list, id<JavaLangAppendable> outArg) {
  NetMinidevJsonJSONArray_initialize();
  NetMinidevJsonJSONArray_writeJSONStringWithJavaLangIterable_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(list, outArg, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJSONArray)
