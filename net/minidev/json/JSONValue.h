//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONValue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetMinidevJsonJSONValue")
#ifdef RESTRICT_NetMinidevJsonJSONValue
#define INCLUDE_ALL_NetMinidevJsonJSONValue 0
#else
#define INCLUDE_ALL_NetMinidevJsonJSONValue 1
#endif
#undef RESTRICT_NetMinidevJsonJSONValue

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetMinidevJsonJSONValue_) && (INCLUDE_ALL_NetMinidevJsonJSONValue || defined(INCLUDE_NetMinidevJsonJSONValue))
#define NetMinidevJsonJSONValue_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class NetMinidevJsonJSONStyle;
@class NetMinidevJsonReaderJsonWriter;
@protocol JavaLangAppendable;
@protocol NetMinidevJsonParserContentHandler;

@interface NetMinidevJsonJSONValue : NSObject
@property (class, strong) NetMinidevJsonJSONStyle *COMPRESSION NS_SWIFT_NAME(COMPRESSION);
@property (class, strong) NetMinidevJsonReaderJsonWriter *defaultWriter NS_SWIFT_NAME(defaultWriter);

+ (NetMinidevJsonJSONStyle *)COMPRESSION;

+ (void)setCOMPRESSION:(NetMinidevJsonJSONStyle *)value;

+ (NetMinidevJsonReaderJsonWriter *)defaultWriter;

+ (void)setDefaultWriter:(NetMinidevJsonReaderJsonWriter *)value;

#pragma mark Public

- (instancetype __nonnull)init;

+ (NSString *)compressWithNSString:(NSString *)s;

+ (NSString *)compressWithNSString:(NSString *)input
       withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)style;

+ (NSString *)escapeWithNSString:(NSString *)s;

+ (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)ap;

+ (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)ap
withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression;

+ (NSString *)escapeWithNSString:(NSString *)s
     withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression;

+ (jboolean)isValidJsonWithJavaIoReader:(JavaIoReader *)inArg;

+ (jboolean)isValidJsonWithNSString:(NSString *)s;

+ (jboolean)isValidJsonStrictWithJavaIoReader:(JavaIoReader *)inArg;

+ (jboolean)isValidJsonStrictWithNSString:(NSString *)s;

+ (id)parseWithByteArray:(IOSByteArray *)inArg;

+ (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length;

+ (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id)parseWithJavaIoReader:(JavaIoReader *)inArg;

+ (id)parseWithNSString:(NSString *)s;

+ (id)parseKeepingOrderWithByteArray:(IOSByteArray *)inArg;

+ (id)parseKeepingOrderWithByteArray:(IOSByteArray *)inArg
                             withInt:(jint)offset
                             withInt:(jint)length;

+ (id)parseKeepingOrderWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id)parseKeepingOrderWithJavaIoReader:(JavaIoReader *)inArg;

+ (id)parseKeepingOrderWithNSString:(NSString *)inArg;

+ (id)parseStrictWithByteArray:(IOSByteArray *)s;

+ (id)parseStrictWithByteArray:(IOSByteArray *)s
                       withInt:(jint)offset
                       withInt:(jint)length;

+ (id)parseStrictWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id)parseStrictWithJavaIoReader:(JavaIoReader *)inArg;

+ (id)parseStrictWithNSString:(NSString *)s;

+ (id)parseWithExceptionWithByteArray:(IOSByteArray *)inArg;

+ (id)parseWithExceptionWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)offset
                              withInt:(jint)length;

+ (id)parseWithExceptionWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id)parseWithExceptionWithJavaIoReader:(JavaIoReader *)inArg;

+ (id)parseWithExceptionWithNSString:(NSString *)s;

+ (void)SAXParseWithJavaIoInputStream:(JavaIoInputStream *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

+ (void)SAXParseWithJavaIoReader:(JavaIoReader *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

+ (void)SAXParseWithNSString:(NSString *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

+ (NSString *)toJSONStringWithId:(id)value;

+ (NSString *)toJSONStringWithId:(id)value
     withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression;

+ (NSString *)uncompressWithNSString:(NSString *)s;

+ (void)writeJSONStringWithId:(id)value
       withJavaLangAppendable:(id<JavaLangAppendable>)outArg;

+ (void)writeJSONStringWithId:(id)value
       withJavaLangAppendable:(id<JavaLangAppendable>)outArg
  withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression;

@end

J2OBJC_STATIC_INIT(NetMinidevJsonJSONValue)

inline NetMinidevJsonJSONStyle *NetMinidevJsonJSONValue_get_COMPRESSION(void);
inline NetMinidevJsonJSONStyle *NetMinidevJsonJSONValue_set_COMPRESSION(NetMinidevJsonJSONStyle *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetMinidevJsonJSONStyle *NetMinidevJsonJSONValue_COMPRESSION;
J2OBJC_STATIC_FIELD_OBJ(NetMinidevJsonJSONValue, COMPRESSION, NetMinidevJsonJSONStyle *)

inline NetMinidevJsonReaderJsonWriter *NetMinidevJsonJSONValue_get_defaultWriter(void);
inline NetMinidevJsonReaderJsonWriter *NetMinidevJsonJSONValue_set_defaultWriter(NetMinidevJsonReaderJsonWriter *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetMinidevJsonReaderJsonWriter *NetMinidevJsonJSONValue_defaultWriter;
J2OBJC_STATIC_FIELD_OBJ(NetMinidevJsonJSONValue, defaultWriter, NetMinidevJsonReaderJsonWriter *)

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_init(NetMinidevJsonJSONValue *self);

FOUNDATION_EXPORT NetMinidevJsonJSONValue *new_NetMinidevJsonJSONValue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetMinidevJsonJSONValue *create_NetMinidevJsonJSONValue_init(void);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithNSString_(NSString *s);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseKeepingOrderWithNSString_(NSString *inArg);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_SAXParseWithJavaIoInputStream_withNetMinidevJsonParserContentHandler_(JavaIoInputStream *input, id<NetMinidevJsonParserContentHandler> handler);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_SAXParseWithJavaIoReader_withNetMinidevJsonParserContentHandler_(JavaIoReader *input, id<NetMinidevJsonParserContentHandler> handler);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_SAXParseWithNSString_withNetMinidevJsonParserContentHandler_(NSString *input, id<NetMinidevJsonParserContentHandler> handler);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_compressWithNSString_withNetMinidevJsonJSONStyle_(NSString *input, NetMinidevJsonJSONStyle *style);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_compressWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_uncompressWithNSString_(NSString *s);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_(IOSByteArray *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseWithExceptionWithNSString_(NSString *s);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseStrictWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseStrictWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseStrictWithNSString_(NSString *s);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseStrictWithByteArray_(IOSByteArray *s);

FOUNDATION_EXPORT id NetMinidevJsonJSONValue_parseStrictWithByteArray_withInt_withInt_(IOSByteArray *s, jint offset, jint length);

FOUNDATION_EXPORT jboolean NetMinidevJsonJSONValue_isValidJsonStrictWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT jboolean NetMinidevJsonJSONValue_isValidJsonStrictWithNSString_(NSString *s);

FOUNDATION_EXPORT jboolean NetMinidevJsonJSONValue_isValidJsonWithJavaIoReader_(JavaIoReader *inArg);

FOUNDATION_EXPORT jboolean NetMinidevJsonJSONValue_isValidJsonWithNSString_(NSString *s);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_(id value, id<JavaLangAppendable> outArg);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(id value, id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_toJSONStringWithId_(id value);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_toJSONStringWithId_withNetMinidevJsonJSONStyle_(id value, NetMinidevJsonJSONStyle *compression);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_escapeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *NetMinidevJsonJSONValue_escapeWithNSString_withNetMinidevJsonJSONStyle_(NSString *s, NetMinidevJsonJSONStyle *compression);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_(NSString *s, id<JavaLangAppendable> ap);

FOUNDATION_EXPORT void NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(NSString *s, id<JavaLangAppendable> ap, NetMinidevJsonJSONStyle *compression);

J2OBJC_TYPE_LITERAL_HEADER(NetMinidevJsonJSONValue)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetMinidevJsonJSONValue")
