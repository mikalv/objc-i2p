//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONStyle.java
//

#include "J2ObjC_source.h"
#include "java/lang/Appendable.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONValue.h"
#include "net/minidev/json/JStylerObj.h"

@interface NetMinidevJsonJSONStyle () {
 @public
  jboolean _protectKeys_;
  jboolean _protect4Web_;
  jboolean _protectValues_;
  jboolean _ignore_null_;
  id<NetMinidevJsonJStylerObj_MustProtect> mpKey_;
  id<NetMinidevJsonJStylerObj_MustProtect> mpValue_;
  id<NetMinidevJsonJStylerObj_StringProtector> esc_;
}

@end

J2OBJC_FIELD_SETTER(NetMinidevJsonJSONStyle, mpKey_, id<NetMinidevJsonJStylerObj_MustProtect>)
J2OBJC_FIELD_SETTER(NetMinidevJsonJSONStyle, mpValue_, id<NetMinidevJsonJStylerObj_MustProtect>)
J2OBJC_FIELD_SETTER(NetMinidevJsonJSONStyle, esc_, id<NetMinidevJsonJStylerObj_StringProtector>)

J2OBJC_INITIALIZED_DEFN(NetMinidevJsonJSONStyle)

NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_NO_COMPRESS;
NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_MAX_COMPRESS;
NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_LT_COMPRESS;

@implementation NetMinidevJsonJSONStyle

+ (jint)FLAG_PROTECT_KEYS {
  return NetMinidevJsonJSONStyle_FLAG_PROTECT_KEYS;
}

+ (jint)FLAG_PROTECT_4WEB {
  return NetMinidevJsonJSONStyle_FLAG_PROTECT_4WEB;
}

+ (jint)FLAG_PROTECT_VALUES {
  return NetMinidevJsonJSONStyle_FLAG_PROTECT_VALUES;
}

+ (jint)FLAG_AGRESSIVE {
  return NetMinidevJsonJSONStyle_FLAG_AGRESSIVE;
}

+ (jint)FLAG_IGNORE_NULL {
  return NetMinidevJsonJSONStyle_FLAG_IGNORE_NULL;
}

+ (NetMinidevJsonJSONStyle *)NO_COMPRESS {
  return NetMinidevJsonJSONStyle_NO_COMPRESS;
}

+ (NetMinidevJsonJSONStyle *)MAX_COMPRESS {
  return NetMinidevJsonJSONStyle_MAX_COMPRESS;
}

+ (NetMinidevJsonJSONStyle *)LT_COMPRESS {
  return NetMinidevJsonJSONStyle_LT_COMPRESS;
}

- (instancetype)initWithInt:(jint)FLAG {
  NetMinidevJsonJSONStyle_initWithInt_(self, FLAG);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJSONStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)protectKeys {
  return _protectKeys_;
}

- (jboolean)protectValues {
  return _protectValues_;
}

- (jboolean)protect4Web {
  return _protect4Web_;
}

- (jboolean)ignoreNull {
  return _ignore_null_;
}

- (jboolean)indent {
  return false;
}

- (jboolean)mustProtectKeyWithNSString:(NSString *)s {
  return [((id<NetMinidevJsonJStylerObj_MustProtect>) nil_chk(mpKey_)) mustBeProtectWithNSString:s];
}

- (jboolean)mustProtectValueWithNSString:(NSString *)s {
  return [((id<NetMinidevJsonJStylerObj_MustProtect>) nil_chk(mpValue_)) mustBeProtectWithNSString:s];
}

- (void)writeStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg
                             withNSString:(NSString *)value {
  if (![self mustProtectValueWithNSString:value]) [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:value];
  else {
    [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:'"'];
    NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(value, outArg, self);
    [outArg appendWithChar:'"'];
  }
}

- (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<NetMinidevJsonJStylerObj_StringProtector>) nil_chk(esc_)) escapeWithNSString:s withJavaLangAppendable:outArg];
}

- (void)objectStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:'{'];
}

- (void)objectStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:'}'];
}

- (void)objectFirstStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
}

- (void)objectNextWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:','];
}

- (void)objectElmStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
}

- (void)objectEndOfKeyWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:':'];
}

- (void)arrayStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:'['];
}

- (void)arrayStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:']'];
}

- (void)arrayfirstObjectWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
}

- (void)arrayNextElmWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:','];
}

- (void)arrayObjectEndWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
}

- (void)dealloc {
  RELEASE_(mpKey_);
  RELEASE_(mpValue_);
  RELEASE_(esc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 10, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(protectKeys);
  methods[3].selector = @selector(protectValues);
  methods[4].selector = @selector(protect4Web);
  methods[5].selector = @selector(ignoreNull);
  methods[6].selector = @selector(indent);
  methods[7].selector = @selector(mustProtectKeyWithNSString:);
  methods[8].selector = @selector(mustProtectValueWithNSString:);
  methods[9].selector = @selector(writeStringWithJavaLangAppendable:withNSString:);
  methods[10].selector = @selector(escapeWithNSString:withJavaLangAppendable:);
  methods[11].selector = @selector(objectStartWithJavaLangAppendable:);
  methods[12].selector = @selector(objectStopWithJavaLangAppendable:);
  methods[13].selector = @selector(objectFirstStartWithJavaLangAppendable:);
  methods[14].selector = @selector(objectNextWithJavaLangAppendable:);
  methods[15].selector = @selector(objectElmStopWithJavaLangAppendable:);
  methods[16].selector = @selector(objectEndOfKeyWithJavaLangAppendable:);
  methods[17].selector = @selector(arrayStartWithJavaLangAppendable:);
  methods[18].selector = @selector(arrayStopWithJavaLangAppendable:);
  methods[19].selector = @selector(arrayfirstObjectWithJavaLangAppendable:);
  methods[20].selector = @selector(arrayNextElmWithJavaLangAppendable:);
  methods[21].selector = @selector(arrayObjectEndWithJavaLangAppendable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FLAG_PROTECT_KEYS", "I", .constantValue.asInt = NetMinidevJsonJSONStyle_FLAG_PROTECT_KEYS, 0x19, -1, -1, -1, -1 },
    { "FLAG_PROTECT_4WEB", "I", .constantValue.asInt = NetMinidevJsonJSONStyle_FLAG_PROTECT_4WEB, 0x19, -1, -1, -1, -1 },
    { "FLAG_PROTECT_VALUES", "I", .constantValue.asInt = NetMinidevJsonJSONStyle_FLAG_PROTECT_VALUES, 0x19, -1, -1, -1, -1 },
    { "FLAG_AGRESSIVE", "I", .constantValue.asInt = NetMinidevJsonJSONStyle_FLAG_AGRESSIVE, 0x19, -1, -1, -1, -1 },
    { "FLAG_IGNORE_NULL", "I", .constantValue.asInt = NetMinidevJsonJSONStyle_FLAG_IGNORE_NULL, 0x19, -1, -1, -1, -1 },
    { "NO_COMPRESS", "LNetMinidevJsonJSONStyle;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "MAX_COMPRESS", "LNetMinidevJsonJSONStyle;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "LT_COMPRESS", "LNetMinidevJsonJSONStyle;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "_protectKeys_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_protect4Web_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_protectValues_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_ignore_null_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mpKey_", "LNetMinidevJsonJStylerObj_MustProtect;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mpValue_", "LNetMinidevJsonJStylerObj_MustProtect;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "esc_", "LNetMinidevJsonJStylerObj_StringProtector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "mustProtectKey", "LNSString;", "mustProtectValue", "writeString", "LJavaLangAppendable;LNSString;", "LJavaIoIOException;", "escape", "LNSString;LJavaLangAppendable;", "objectStart", "LJavaLangAppendable;", "objectStop", "objectFirstStart", "objectNext", "objectElmStop", "objectEndOfKey", "arrayStart", "arrayStop", "arrayfirstObject", "arrayNextElm", "arrayObjectEnd", &NetMinidevJsonJSONStyle_NO_COMPRESS, &NetMinidevJsonJSONStyle_MAX_COMPRESS, &NetMinidevJsonJSONStyle_LT_COMPRESS };
  static const J2ObjcClassInfo _NetMinidevJsonJSONStyle = { "JSONStyle", "net.minidev.json", ptrTable, methods, fields, 7, 0x1, 22, 15, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonJSONStyle;
}

+ (void)initialize {
  if (self == [NetMinidevJsonJSONStyle class]) {
    JreStrongAssignAndConsume(&NetMinidevJsonJSONStyle_NO_COMPRESS, new_NetMinidevJsonJSONStyle_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJSONStyle_MAX_COMPRESS, new_NetMinidevJsonJSONStyle_initWithInt_(-1));
    JreStrongAssignAndConsume(&NetMinidevJsonJSONStyle_LT_COMPRESS, new_NetMinidevJsonJSONStyle_initWithInt_(NetMinidevJsonJSONStyle_FLAG_PROTECT_4WEB));
    J2OBJC_SET_INITIALIZED(NetMinidevJsonJSONStyle)
  }
}

@end

void NetMinidevJsonJSONStyle_initWithInt_(NetMinidevJsonJSONStyle *self, jint FLAG) {
  NSObject_init(self);
  self->_protectKeys_ = ((FLAG & NetMinidevJsonJSONStyle_FLAG_PROTECT_KEYS) == 0);
  self->_protectValues_ = ((FLAG & NetMinidevJsonJSONStyle_FLAG_PROTECT_VALUES) == 0);
  self->_protect4Web_ = ((FLAG & NetMinidevJsonJSONStyle_FLAG_PROTECT_4WEB) == 0);
  self->_ignore_null_ = ((FLAG & NetMinidevJsonJSONStyle_FLAG_IGNORE_NULL) > 0);
  id<NetMinidevJsonJStylerObj_MustProtect> mp;
  if ((FLAG & NetMinidevJsonJSONStyle_FLAG_AGRESSIVE) > 0) mp = JreLoadStatic(NetMinidevJsonJStylerObj, MP_AGGRESIVE);
  else mp = JreLoadStatic(NetMinidevJsonJStylerObj, MP_SIMPLE);
  if (self->_protectValues_) JreStrongAssign(&self->mpValue_, JreLoadStatic(NetMinidevJsonJStylerObj, MP_TRUE));
  else JreStrongAssign(&self->mpValue_, mp);
  if (self->_protectKeys_) JreStrongAssign(&self->mpKey_, JreLoadStatic(NetMinidevJsonJStylerObj, MP_TRUE));
  else JreStrongAssign(&self->mpKey_, mp);
  if (self->_protect4Web_) JreStrongAssign(&self->esc_, JreLoadStatic(NetMinidevJsonJStylerObj, ESCAPE4Web));
  else JreStrongAssign(&self->esc_, JreLoadStatic(NetMinidevJsonJStylerObj, ESCAPE_LT));
}

NetMinidevJsonJSONStyle *new_NetMinidevJsonJSONStyle_initWithInt_(jint FLAG) {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONStyle, initWithInt_, FLAG)
}

NetMinidevJsonJSONStyle *create_NetMinidevJsonJSONStyle_initWithInt_(jint FLAG) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONStyle, initWithInt_, FLAG)
}

void NetMinidevJsonJSONStyle_init(NetMinidevJsonJSONStyle *self) {
  NetMinidevJsonJSONStyle_initWithInt_(self, 0);
}

NetMinidevJsonJSONStyle *new_NetMinidevJsonJSONStyle_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONStyle, init)
}

NetMinidevJsonJSONStyle *create_NetMinidevJsonJSONStyle_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJSONStyle)
