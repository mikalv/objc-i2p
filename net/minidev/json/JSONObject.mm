//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONObject.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/minidev/json/JSONArray.h"
#include "net/minidev/json/JSONObject.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONValue.h"
#include "net/minidev/json/reader/JsonWriter.h"
#include "net/minidev/json/reader/JsonWriterI.h"

@interface NetMinidevJsonJSONObject ()

+ (NetMinidevJsonJSONObject *)mergeWithNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)o1
                                   withNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)o2;

+ (NetMinidevJsonJSONArray *)mergeWithNetMinidevJsonJSONArray:(NetMinidevJsonJSONArray *)o1
                                  withNetMinidevJsonJSONArray:(NetMinidevJsonJSONArray *)o2;

@end

inline jlong NetMinidevJsonJSONObject_get_serialVersionUID(void);
#define NetMinidevJsonJSONObject_serialVersionUID -503443796854799292LL
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONObject, serialVersionUID, jlong)

__attribute__((unused)) static NetMinidevJsonJSONObject *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withNetMinidevJsonJSONObject_(NetMinidevJsonJSONObject *o1, NetMinidevJsonJSONObject *o2);

__attribute__((unused)) static NetMinidevJsonJSONArray *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withNetMinidevJsonJSONArray_(NetMinidevJsonJSONArray *o1, NetMinidevJsonJSONArray *o2);

@implementation NetMinidevJsonJSONObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJSONObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)escapeWithNSString:(NSString *)s {
  return NetMinidevJsonJSONObject_escapeWithNSString_(s);
}

+ (NSString *)toJSONStringWithJavaUtilMap:(id<JavaUtilMap>)map {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_(map);
}

+ (NSString *)toJSONStringWithJavaUtilMap:(id<JavaUtilMap>)map
              withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(map, compression);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  NetMinidevJsonJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}

+ (void)writeJSONWithJavaUtilMap:(id<JavaUtilMap>)map
          withJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_(map, outArg);
}

+ (void)writeJSONWithJavaUtilMap:(id<JavaUtilMap>)map
          withJavaLangAppendable:(id<JavaLangAppendable>)outArg
     withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(map, outArg, compression);
}

- (void)writeJSONStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(self, outArg, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

- (void)writeJSONStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg
                  withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(self, outArg, compression);
}

- (void)mergeWithId:(id)o2 {
  NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withId_(self, o2);
}

+ (NetMinidevJsonJSONObject *)mergeWithNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)o1
                                                         withId:(id)o2 {
  return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withId_(o1, o2);
}

+ (NetMinidevJsonJSONObject *)mergeWithNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)o1
                                   withNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)o2 {
  return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withNetMinidevJsonJSONObject_(o1, o2);
}

+ (NetMinidevJsonJSONArray *)mergeWithNetMinidevJsonJSONArray:(NetMinidevJsonJSONArray *)o1
                                                       withId:(id)o2 {
  return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withId_(o1, o2);
}

+ (NetMinidevJsonJSONArray *)mergeWithNetMinidevJsonJSONArray:(NetMinidevJsonJSONArray *)o1
                                  withNetMinidevJsonJSONArray:(NetMinidevJsonJSONArray *)o2 {
  return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withNetMinidevJsonJSONArray_(o1, o2);
}

- (NSString *)toJSONString {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(self, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

- (NSString *)toJSONStringWithNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(self, compression);
}

- (NSString *)toStringWithNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(self, compression);
}

- (NSString *)description {
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(self, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 7, -1, -1 },
    { NULL, "V", 0x9, 8, 9, 10, 11, -1, -1 },
    { NULL, "V", 0x9, 8, 12, 10, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetMinidevJsonJSONObject;", 0xc, 17, 19, -1, -1, -1, -1 },
    { NULL, "LNetMinidevJsonJSONObject;", 0xa, 17, 20, -1, -1, -1, -1 },
    { NULL, "LNetMinidevJsonJSONArray;", 0xc, 17, 21, -1, -1, -1, -1 },
    { NULL, "LNetMinidevJsonJSONArray;", 0xa, 17, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(escapeWithNSString:);
  methods[2].selector = @selector(toJSONStringWithJavaUtilMap:);
  methods[3].selector = @selector(toJSONStringWithJavaUtilMap:withNetMinidevJsonJSONStyle:);
  methods[4].selector = @selector(initWithJavaUtilMap:);
  methods[5].selector = @selector(writeJSONWithJavaUtilMap:withJavaLangAppendable:);
  methods[6].selector = @selector(writeJSONWithJavaUtilMap:withJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  methods[7].selector = @selector(writeJSONStringWithJavaLangAppendable:);
  methods[8].selector = @selector(writeJSONStringWithJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  methods[9].selector = @selector(mergeWithId:);
  methods[10].selector = @selector(mergeWithNetMinidevJsonJSONObject:withId:);
  methods[11].selector = @selector(mergeWithNetMinidevJsonJSONObject:withNetMinidevJsonJSONObject:);
  methods[12].selector = @selector(mergeWithNetMinidevJsonJSONArray:withId:);
  methods[13].selector = @selector(mergeWithNetMinidevJsonJSONArray:withNetMinidevJsonJSONArray:);
  methods[14].selector = @selector(toJSONString);
  methods[15].selector = @selector(toJSONStringWithNetMinidevJsonJSONStyle:);
  methods[16].selector = @selector(toStringWithNetMinidevJsonJSONStyle:);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetMinidevJsonJSONObject_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "escape", "LNSString;", "toJSONString", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;+Ljava/lang/Object;>;)Ljava/lang/String;", "LJavaUtilMap;LNetMinidevJsonJSONStyle;", "(Ljava/util/Map<Ljava/lang/String;+Ljava/lang/Object;>;Lnet/minidev/json/JSONStyle;)Ljava/lang/String;", "(Ljava/util/Map<Ljava/lang/String;*>;)V", "writeJSON", "LJavaUtilMap;LJavaLangAppendable;", "LJavaIoIOException;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/Appendable;)V", "LJavaUtilMap;LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "(Ljava/util/Map<Ljava/lang/String;+Ljava/lang/Object;>;Ljava/lang/Appendable;Lnet/minidev/json/JSONStyle;)V", "writeJSONString", "LJavaLangAppendable;", "LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "merge", "LNSObject;", "LNetMinidevJsonJSONObject;LNSObject;", "LNetMinidevJsonJSONObject;LNetMinidevJsonJSONObject;", "LNetMinidevJsonJSONArray;LNSObject;", "LNetMinidevJsonJSONArray;LNetMinidevJsonJSONArray;", "LNetMinidevJsonJSONStyle;", "toString", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;Lnet/minidev/json/JSONAware;Lnet/minidev/json/JSONAwareEx;Lnet/minidev/json/JSONStreamAwareEx;" };
  static const J2ObjcClassInfo _NetMinidevJsonJSONObject = { "JSONObject", "net.minidev.json", ptrTable, methods, fields, 7, 0x1, 18, 1, -1, -1, -1, 25, -1 };
  return &_NetMinidevJsonJSONObject;
}

@end

void NetMinidevJsonJSONObject_init(NetMinidevJsonJSONObject *self) {
  JavaUtilHashMap_init(self);
}

NetMinidevJsonJSONObject *new_NetMinidevJsonJSONObject_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONObject, init)
}

NetMinidevJsonJSONObject *create_NetMinidevJsonJSONObject_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONObject, init)
}

NSString *NetMinidevJsonJSONObject_escapeWithNSString_(NSString *s) {
  NetMinidevJsonJSONObject_initialize();
  return NetMinidevJsonJSONValue_escapeWithNSString_(s);
}

NSString *NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_(id<JavaUtilMap> map) {
  NetMinidevJsonJSONObject_initialize();
  return NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(map, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

NSString *NetMinidevJsonJSONObject_toJSONStringWithJavaUtilMap_withNetMinidevJsonJSONStyle_(id<JavaUtilMap> map, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONObject_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  @try {
    NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(map, sb, compression);
  }
  @catch (JavaIoIOException *e) {
  }
  return [sb description];
}

void NetMinidevJsonJSONObject_initWithJavaUtilMap_(NetMinidevJsonJSONObject *self, id<JavaUtilMap> map) {
  JavaUtilHashMap_initWithJavaUtilMap_(self, map);
}

NetMinidevJsonJSONObject *new_NetMinidevJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONObject, initWithJavaUtilMap_, map)
}

NetMinidevJsonJSONObject *create_NetMinidevJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONObject, initWithJavaUtilMap_, map)
}

void NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_(id<JavaUtilMap> map, id<JavaLangAppendable> outArg) {
  NetMinidevJsonJSONObject_initialize();
  NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(map, outArg, JreLoadStatic(NetMinidevJsonJSONValue, COMPRESSION));
}

void NetMinidevJsonJSONObject_writeJSONWithJavaUtilMap_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(id<JavaUtilMap> map, id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONObject_initialize();
  if (map == nil) {
    [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"null"];
    return;
  }
  [((id<NetMinidevJsonReaderJsonWriterI>) nil_chk(JreLoadStatic(NetMinidevJsonReaderJsonWriter, JSONMapWriter))) writeJSONStringWithId:map withJavaLangAppendable:outArg withNetMinidevJsonJSONStyle:compression];
}

NetMinidevJsonJSONObject *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withId_(NetMinidevJsonJSONObject *o1, id o2) {
  NetMinidevJsonJSONObject_initialize();
  if (o2 == nil) return o1;
  if ([o2 isKindOfClass:[NetMinidevJsonJSONObject class]]) return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withNetMinidevJsonJSONObject_(o1, (NetMinidevJsonJSONObject *) cast_chk(o2, [NetMinidevJsonJSONObject class]));
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"JSON megre can not merge JSONObject with ", [o2 java_getClass]));
}

NetMinidevJsonJSONObject *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withNetMinidevJsonJSONObject_(NetMinidevJsonJSONObject *o1, NetMinidevJsonJSONObject *o2) {
  NetMinidevJsonJSONObject_initialize();
  if (o2 == nil) return o1;
  for (NSString * __strong key in nil_chk([((NetMinidevJsonJSONObject *) nil_chk(o1)) keySet])) {
    id value1 = [o1 getWithId:key];
    id value2 = [o2 getWithId:key];
    if (value2 == nil) continue;
    if ([value1 isKindOfClass:[NetMinidevJsonJSONArray class]]) {
      [o1 putWithId:key withId:NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withId_((NetMinidevJsonJSONArray *) cast_chk(value1, [NetMinidevJsonJSONArray class]), value2)];
      continue;
    }
    if ([value1 isKindOfClass:[NetMinidevJsonJSONObject class]]) {
      [o1 putWithId:key withId:NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONObject_withId_((NetMinidevJsonJSONObject *) cast_chk(value1, [NetMinidevJsonJSONObject class]), value2)];
      continue;
    }
    if ([nil_chk(value1) isEqual:value2]) continue;
    if ([[value1 java_getClass] isEqual:[value2 java_getClass]]) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"JSON merge can not merge two ", [[value1 java_getClass] getName], @" Object together"));
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$", @"JSON merge can not merge ", [[value1 java_getClass] getName], @" with ", [[value2 java_getClass] getName]));
  }
  for (NSString * __strong key in nil_chk([o2 keySet])) {
    if ([o1 containsKeyWithId:key]) continue;
    [o1 putWithId:key withId:[o2 getWithId:key]];
  }
  return o1;
}

NetMinidevJsonJSONArray *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withId_(NetMinidevJsonJSONArray *o1, id o2) {
  NetMinidevJsonJSONObject_initialize();
  if (o2 == nil) return o1;
  if ([o1 isKindOfClass:[NetMinidevJsonJSONArray class]]) return NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withNetMinidevJsonJSONArray_(o1, (NetMinidevJsonJSONArray *) cast_chk(o2, [NetMinidevJsonJSONArray class]));
  [((NetMinidevJsonJSONArray *) nil_chk(o1)) addWithId:o2];
  return o1;
}

NetMinidevJsonJSONArray *NetMinidevJsonJSONObject_mergeWithNetMinidevJsonJSONArray_withNetMinidevJsonJSONArray_(NetMinidevJsonJSONArray *o1, NetMinidevJsonJSONArray *o2) {
  NetMinidevJsonJSONObject_initialize();
  [((NetMinidevJsonJSONArray *) nil_chk(o1)) addAllWithJavaUtilCollection:o2];
  return o1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJSONObject)
