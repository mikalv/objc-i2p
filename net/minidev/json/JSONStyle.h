//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONStyle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetMinidevJsonJSONStyle")
#ifdef RESTRICT_NetMinidevJsonJSONStyle
#define INCLUDE_ALL_NetMinidevJsonJSONStyle 0
#else
#define INCLUDE_ALL_NetMinidevJsonJSONStyle 1
#endif
#undef RESTRICT_NetMinidevJsonJSONStyle

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetMinidevJsonJSONStyle_) && (INCLUDE_ALL_NetMinidevJsonJSONStyle || defined(INCLUDE_NetMinidevJsonJSONStyle))
#define NetMinidevJsonJSONStyle_

@protocol JavaLangAppendable;

@interface NetMinidevJsonJSONStyle : NSObject
@property (readonly, class) jint FLAG_PROTECT_KEYS NS_SWIFT_NAME(FLAG_PROTECT_KEYS);
@property (readonly, class) jint FLAG_PROTECT_4WEB NS_SWIFT_NAME(FLAG_PROTECT_4WEB);
@property (readonly, class) jint FLAG_PROTECT_VALUES NS_SWIFT_NAME(FLAG_PROTECT_VALUES);
@property (readonly, class) jint FLAG_AGRESSIVE NS_SWIFT_NAME(FLAG_AGRESSIVE);
@property (readonly, class) jint FLAG_IGNORE_NULL NS_SWIFT_NAME(FLAG_IGNORE_NULL);
@property (readonly, class, strong) NetMinidevJsonJSONStyle *NO_COMPRESS NS_SWIFT_NAME(NO_COMPRESS);
@property (readonly, class, strong) NetMinidevJsonJSONStyle *MAX_COMPRESS NS_SWIFT_NAME(MAX_COMPRESS);
@property (readonly, class, strong) NetMinidevJsonJSONStyle *LT_COMPRESS NS_SWIFT_NAME(LT_COMPRESS);

+ (jint)FLAG_PROTECT_KEYS;

+ (jint)FLAG_PROTECT_4WEB;

+ (jint)FLAG_PROTECT_VALUES;

+ (jint)FLAG_AGRESSIVE;

+ (jint)FLAG_IGNORE_NULL;

+ (NetMinidevJsonJSONStyle *)NO_COMPRESS;

+ (NetMinidevJsonJSONStyle *)MAX_COMPRESS;

+ (NetMinidevJsonJSONStyle *)LT_COMPRESS;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)FLAG;

- (void)arrayfirstObjectWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)arrayNextElmWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)arrayObjectEndWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)arrayStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)arrayStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (jboolean)ignoreNull;

- (jboolean)indent;

- (jboolean)mustProtectKeyWithNSString:(NSString *)s;

- (jboolean)mustProtectValueWithNSString:(NSString *)s;

- (void)objectElmStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)objectEndOfKeyWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)objectFirstStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)objectNextWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)objectStartWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (void)objectStopWithJavaLangAppendable:(id<JavaLangAppendable>)outArg;

- (jboolean)protect4Web;

- (jboolean)protectKeys;

- (jboolean)protectValues;

- (void)writeStringWithJavaLangAppendable:(id<JavaLangAppendable>)outArg
                             withNSString:(NSString *)value;

@end

J2OBJC_STATIC_INIT(NetMinidevJsonJSONStyle)

inline jint NetMinidevJsonJSONStyle_get_FLAG_PROTECT_KEYS(void);
#define NetMinidevJsonJSONStyle_FLAG_PROTECT_KEYS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONStyle, FLAG_PROTECT_KEYS, jint)

inline jint NetMinidevJsonJSONStyle_get_FLAG_PROTECT_4WEB(void);
#define NetMinidevJsonJSONStyle_FLAG_PROTECT_4WEB 2
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONStyle, FLAG_PROTECT_4WEB, jint)

inline jint NetMinidevJsonJSONStyle_get_FLAG_PROTECT_VALUES(void);
#define NetMinidevJsonJSONStyle_FLAG_PROTECT_VALUES 4
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONStyle, FLAG_PROTECT_VALUES, jint)

inline jint NetMinidevJsonJSONStyle_get_FLAG_AGRESSIVE(void);
#define NetMinidevJsonJSONStyle_FLAG_AGRESSIVE 8
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONStyle, FLAG_AGRESSIVE, jint)

inline jint NetMinidevJsonJSONStyle_get_FLAG_IGNORE_NULL(void);
#define NetMinidevJsonJSONStyle_FLAG_IGNORE_NULL 16
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonJSONStyle, FLAG_IGNORE_NULL, jint)

inline NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_get_NO_COMPRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_NO_COMPRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetMinidevJsonJSONStyle, NO_COMPRESS, NetMinidevJsonJSONStyle *)

inline NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_get_MAX_COMPRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_MAX_COMPRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetMinidevJsonJSONStyle, MAX_COMPRESS, NetMinidevJsonJSONStyle *)

inline NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_get_LT_COMPRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetMinidevJsonJSONStyle *NetMinidevJsonJSONStyle_LT_COMPRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetMinidevJsonJSONStyle, LT_COMPRESS, NetMinidevJsonJSONStyle *)

FOUNDATION_EXPORT void NetMinidevJsonJSONStyle_initWithInt_(NetMinidevJsonJSONStyle *self, jint FLAG);

FOUNDATION_EXPORT NetMinidevJsonJSONStyle *new_NetMinidevJsonJSONStyle_initWithInt_(jint FLAG) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetMinidevJsonJSONStyle *create_NetMinidevJsonJSONStyle_initWithInt_(jint FLAG);

FOUNDATION_EXPORT void NetMinidevJsonJSONStyle_init(NetMinidevJsonJSONStyle *self);

FOUNDATION_EXPORT NetMinidevJsonJSONStyle *new_NetMinidevJsonJSONStyle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetMinidevJsonJSONStyle *create_NetMinidevJsonJSONStyle_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetMinidevJsonJSONStyle)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetMinidevJsonJSONStyle")
