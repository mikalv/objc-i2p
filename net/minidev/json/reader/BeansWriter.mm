//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/reader/BeansWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Appendable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONUtil.h"
#include "net/minidev/json/reader/BeansWriter.h"
#include "net/minidev/json/reader/JsonWriter.h"

@implementation NetMinidevJsonReaderBeansWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonReaderBeansWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeJSONStringWithId:(id)value
       withJavaLangAppendable:(id<JavaLangAppendable>)outArg
  withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  @try {
    IOSClass *nextClass = [nil_chk(value) java_getClass];
    jboolean needSep = false;
    [((NetMinidevJsonJSONStyle *) nil_chk(compression)) objectStartWithJavaLangAppendable:outArg];
    while (nextClass != NSObject_class_()) {
      IOSObjectArray *fields = [((IOSClass *) nil_chk(nextClass)) getDeclaredFields];
      {
        IOSObjectArray *a__ = fields;
        JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        JavaLangReflectField * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangReflectField *field = *b__++;
          jint m = [((JavaLangReflectField *) nil_chk(field)) getModifiers];
          if ((m & (JavaLangReflectModifier_STATIC | JavaLangReflectModifier_TRANSIENT | JavaLangReflectModifier_FINAL)) > 0) continue;
          id v = nil;
          if ((m & JavaLangReflectModifier_PUBLIC) > 0) {
            v = [field getWithId:value];
          }
          else {
            NSString *g = NetMinidevJsonJSONUtil_getGetterNameWithNSString_([field getName]);
            JavaLangReflectMethod *mtd = nil;
            @try {
              mtd = [nextClass getDeclaredMethod:g parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
            }
            @catch (JavaLangException *e) {
            }
            if (mtd == nil) {
              IOSClass *c2 = [field getType];
              if (c2 == JreLoadStatic(JavaLangBoolean, TYPE) || c2 == JavaLangBoolean_class_()) {
                g = NetMinidevJsonJSONUtil_getIsNameWithNSString_([field getName]);
                mtd = [nextClass getDeclaredMethod:g parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
              }
            }
            if (mtd == nil) continue;
            v = [mtd invokeWithId:value withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
          }
          if (v == nil && [compression ignoreNull]) continue;
          if (needSep) [compression objectNextWithJavaLangAppendable:outArg];
          else needSep = true;
          NSString *key = [field getName];
          NetMinidevJsonReaderJsonWriter_writeJSONKVWithNSString_withId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(key, v, outArg, compression);
        }
      }
      nextClass = [nextClass getSuperclass];
    }
    [compression objectStopWithJavaLangAppendable:outArg];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeJSONStringWithId:withJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "writeJSONString", "LNSObject;LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "LJavaIoIOException;", "<E:Ljava/lang/Object;>(TE;Ljava/lang/Appendable;Lnet/minidev/json/JSONStyle;)V", "Ljava/lang/Object;Lnet/minidev/json/reader/JsonWriterI<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _NetMinidevJsonReaderBeansWriter = { "BeansWriter", "net.minidev.json.reader", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, 4, -1 };
  return &_NetMinidevJsonReaderBeansWriter;
}

@end

void NetMinidevJsonReaderBeansWriter_init(NetMinidevJsonReaderBeansWriter *self) {
  NSObject_init(self);
}

NetMinidevJsonReaderBeansWriter *new_NetMinidevJsonReaderBeansWriter_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonReaderBeansWriter, init)
}

NetMinidevJsonReaderBeansWriter *create_NetMinidevJsonReaderBeansWriter_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonReaderBeansWriter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonReaderBeansWriter)
