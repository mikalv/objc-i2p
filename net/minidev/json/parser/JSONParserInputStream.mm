//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/JSONParserInputStream.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "net/minidev/json/parser/ContainerFactory.h"
#include "net/minidev/json/parser/ContentHandler.h"
#include "net/minidev/json/parser/ContentHandlerDumy.h"
#include "net/minidev/json/parser/JSONParserInputStream.h"
#include "net/minidev/json/parser/JSONParserReader.h"

@implementation NetMinidevJsonParserJSONParserInputStream

- (instancetype)initWithInt:(jint)permissiveMode {
  NetMinidevJsonParserJSONParserInputStream_initWithInt_(self, permissiveMode);
  return self;
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [self parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE) withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  return [self parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  JavaIoInputStreamReader *i2 = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(inArg, @"utf8");
  self->pos_ = -1;
  return [super parseWithJavaIoReader:i2 withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(parseWithJavaIoInputStream:);
  methods[2].selector = @selector(parseWithJavaIoInputStream:withNetMinidevJsonParserContainerFactory:);
  methods[3].selector = @selector(parseWithJavaIoInputStream:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "parse", "LJavaIoInputStream;", "LNetMinidevJsonParserParseException;LJavaIoUnsupportedEncodingException;", "LJavaIoInputStream;LNetMinidevJsonParserContainerFactory;", "LJavaIoInputStream;LNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;" };
  static const J2ObjcClassInfo _NetMinidevJsonParserJSONParserInputStream = { "JSONParserInputStream", "net.minidev.json.parser", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserJSONParserInputStream;
}

@end

void NetMinidevJsonParserJSONParserInputStream_initWithInt_(NetMinidevJsonParserJSONParserInputStream *self, jint permissiveMode) {
  NetMinidevJsonParserJSONParserReader_initWithInt_(self, permissiveMode);
}

NetMinidevJsonParserJSONParserInputStream *new_NetMinidevJsonParserJSONParserInputStream_initWithInt_(jint permissiveMode) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserJSONParserInputStream, initWithInt_, permissiveMode)
}

NetMinidevJsonParserJSONParserInputStream *create_NetMinidevJsonParserJSONParserInputStream_initWithInt_(jint permissiveMode) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserJSONParserInputStream, initWithInt_, permissiveMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserJSONParserInputStream)
