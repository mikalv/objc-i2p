//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/ContentHandlerDumy.java
//

#include "J2ObjC_source.h"
#include "net/minidev/json/parser/ContentHandlerDumy.h"

J2OBJC_INITIALIZED_DEFN(NetMinidevJsonParserContentHandlerDumy)

NetMinidevJsonParserContentHandlerDumy *NetMinidevJsonParserContentHandlerDumy_HANDLER;

@implementation NetMinidevJsonParserContentHandlerDumy

+ (NetMinidevJsonParserContentHandlerDumy *)HANDLER {
  return NetMinidevJsonParserContentHandlerDumy_HANDLER;
}

+ (void)setHANDLER:(NetMinidevJsonParserContentHandlerDumy *)value {
  JreStrongAssign(&NetMinidevJsonParserContentHandlerDumy_HANDLER, value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonParserContentHandlerDumy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startJSON {
}

- (void)endJSON {
}

- (jboolean)startObject {
  return false;
}

- (jboolean)endObject {
  return false;
}

- (jboolean)startObjectEntryWithNSString:(NSString *)key {
  return false;
}

- (jboolean)endObjectEntry {
  return false;
}

- (jboolean)startArray {
  return false;
}

- (jboolean)endArray {
  return false;
}

- (jboolean)primitiveWithId:(id)value {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(startJSON);
  methods[2].selector = @selector(endJSON);
  methods[3].selector = @selector(startObject);
  methods[4].selector = @selector(endObject);
  methods[5].selector = @selector(startObjectEntryWithNSString:);
  methods[6].selector = @selector(endObjectEntry);
  methods[7].selector = @selector(startArray);
  methods[8].selector = @selector(endArray);
  methods[9].selector = @selector(primitiveWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HANDLER", "LNetMinidevJsonParserContentHandlerDumy;", .constantValue.asLong = 0, 0x9, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetMinidevJsonParserParseException;", "LNetMinidevJsonParserParseException;LJavaIoIOException;", "startObjectEntry", "LNSString;", "primitive", "LNSObject;", &NetMinidevJsonParserContentHandlerDumy_HANDLER };
  static const J2ObjcClassInfo _NetMinidevJsonParserContentHandlerDumy = { "ContentHandlerDumy", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserContentHandlerDumy;
}

+ (void)initialize {
  if (self == [NetMinidevJsonParserContentHandlerDumy class]) {
    JreStrongAssignAndConsume(&NetMinidevJsonParserContentHandlerDumy_HANDLER, new_NetMinidevJsonParserContentHandlerDumy_init());
    J2OBJC_SET_INITIALIZED(NetMinidevJsonParserContentHandlerDumy)
  }
}

@end

void NetMinidevJsonParserContentHandlerDumy_init(NetMinidevJsonParserContentHandlerDumy *self) {
  NSObject_init(self);
}

NetMinidevJsonParserContentHandlerDumy *new_NetMinidevJsonParserContentHandlerDumy_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserContentHandlerDumy, init)
}

NetMinidevJsonParserContentHandlerDumy *create_NetMinidevJsonParserContentHandlerDumy_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserContentHandlerDumy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserContentHandlerDumy)
