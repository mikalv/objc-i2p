//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/JSONParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"
#include "net/minidev/json/parser/ContainerFactory.h"
#include "net/minidev/json/parser/ContentHandler.h"
#include "net/minidev/json/parser/ContentHandlerDumy.h"
#include "net/minidev/json/parser/JSONParser.h"
#include "net/minidev/json/parser/JSONParserByteArray.h"
#include "net/minidev/json/parser/JSONParserInputStream.h"
#include "net/minidev/json/parser/JSONParserReader.h"
#include "net/minidev/json/parser/JSONParserString.h"

@interface NetMinidevJsonParserJSONParser () {
 @public
  jint mode_;
  NetMinidevJsonParserJSONParserReader *pStream_;
  NetMinidevJsonParserJSONParserInputStream *pSBintream_;
  NetMinidevJsonParserJSONParserString *pString_;
  NetMinidevJsonParserJSONParserByteArray *pBytes_;
}

@end

J2OBJC_FIELD_SETTER(NetMinidevJsonParserJSONParser, pStream_, NetMinidevJsonParserJSONParserReader *)
J2OBJC_FIELD_SETTER(NetMinidevJsonParserJSONParser, pSBintream_, NetMinidevJsonParserJSONParserInputStream *)
J2OBJC_FIELD_SETTER(NetMinidevJsonParserJSONParser, pString_, NetMinidevJsonParserJSONParserString *)
J2OBJC_FIELD_SETTER(NetMinidevJsonParserJSONParser, pBytes_, NetMinidevJsonParserJSONParserByteArray *)

J2OBJC_INITIALIZED_DEFN(NetMinidevJsonParserJSONParser)

jint NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE;

@implementation NetMinidevJsonParserJSONParser

+ (jint)ACCEPT_SIMPLE_QUOTE {
  return NetMinidevJsonParserJSONParser_ACCEPT_SIMPLE_QUOTE;
}

+ (jint)ACCEPT_NON_QUOTE {
  return NetMinidevJsonParserJSONParser_ACCEPT_NON_QUOTE;
}

+ (jint)ACCEPT_NAN {
  return NetMinidevJsonParserJSONParser_ACCEPT_NAN;
}

+ (jint)IGNORE_CONTROL_CHAR {
  return NetMinidevJsonParserJSONParser_IGNORE_CONTROL_CHAR;
}

+ (jint)USE_INTEGER_STORAGE {
  return NetMinidevJsonParserJSONParser_USE_INTEGER_STORAGE;
}

+ (jint)ACCEPT_LEADING_ZERO {
  return NetMinidevJsonParserJSONParser_ACCEPT_LEADING_ZERO;
}

+ (jint)ACCEPT_USELESS_COMMA {
  return NetMinidevJsonParserJSONParser_ACCEPT_USELESS_COMMA;
}

+ (jint)USE_HI_PRECISION_FLOAT {
  return NetMinidevJsonParserJSONParser_USE_HI_PRECISION_FLOAT;
}

+ (jint)ACCEPT_TAILLING_DATA {
  return NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_DATA;
}

+ (jint)ACCEPT_TAILLING_SPACE {
  return NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_SPACE;
}

+ (jint)MODE_PERMISSIVE {
  return NetMinidevJsonParserJSONParser_MODE_PERMISSIVE;
}

+ (jint)MODE_RFC4627 {
  return NetMinidevJsonParserJSONParser_MODE_RFC4627;
}

+ (jint)MODE_JSON_SIMPLE {
  return NetMinidevJsonParserJSONParser_MODE_JSON_SIMPLE;
}

+ (jint)MODE_STRICTEST {
  return NetMinidevJsonParserJSONParser_MODE_STRICTEST;
}

+ (jint)DEFAULT_PERMISSIVE_MODE {
  return NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE;
}

+ (void)setDEFAULT_PERMISSIVE_MODE:(jint)value {
  NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE = value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonParserJSONParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)permissifMode {
  NetMinidevJsonParserJSONParser_initWithInt_(self, permissifMode);
  return self;
}

- (id)parseWithNSString:(NSString *)inArg {
  if (pString_ == nil) JreStrongAssignAndConsume(&pString_, new_NetMinidevJsonParserJSONParserString_initWithInt_(mode_));
  return [pString_ parseWithNSString:inArg];
}

- (id)parseWithNSString:(NSString *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  if (pString_ == nil) JreStrongAssignAndConsume(&pString_, new_NetMinidevJsonParserJSONParserString_initWithInt_(mode_));
  return [pString_ parseWithNSString:inArg withNetMinidevJsonParserContainerFactory:containerFactory];
}

- (id)parseWithNSString:(NSString *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  if (pString_ == nil) JreStrongAssignAndConsume(&pString_, new_NetMinidevJsonParserJSONParserString_initWithInt_(mode_));
  return [pString_ parseWithNSString:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg withNetMinidevJsonParserContainerFactory:containerFactory];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE) withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  if (pBytes_ == nil) JreStrongAssignAndConsume(&pBytes_, new_NetMinidevJsonParserJSONParserByteArray_initWithInt_(mode_));
  return [pBytes_ parseWithByteArray:inArg withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg {
  if (pStream_ == nil) JreStrongAssignAndConsume(&pStream_, new_NetMinidevJsonParserJSONParserReader_initWithInt_(mode_));
  return [pStream_ parseWithJavaIoReader:inArg];
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  if (pStream_ == nil) JreStrongAssignAndConsume(&pStream_, new_NetMinidevJsonParserJSONParserReader_initWithInt_(mode_));
  return [pStream_ parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:containerFactory];
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  if (pStream_ == nil) JreStrongAssignAndConsume(&pStream_, new_NetMinidevJsonParserJSONParserReader_initWithInt_(mode_));
  return [pStream_ parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (pSBintream_ == nil) JreStrongAssignAndConsume(&pSBintream_, new_NetMinidevJsonParserJSONParserInputStream_initWithInt_(mode_));
  return [pSBintream_ parseWithJavaIoInputStream:inArg];
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  if (pSBintream_ == nil) JreStrongAssignAndConsume(&pSBintream_, new_NetMinidevJsonParserJSONParserInputStream_initWithInt_(mode_));
  return [pSBintream_ parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:containerFactory];
}

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  if (pSBintream_ == nil) JreStrongAssignAndConsume(&pSBintream_, new_NetMinidevJsonParserJSONParserInputStream_initWithInt_(mode_));
  return [pSBintream_ parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (void)dealloc {
  RELEASE_(pStream_);
  RELEASE_(pSBintream_);
  RELEASE_(pString_);
  RELEASE_(pBytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 5, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 6, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 7, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 8, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 9, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 10, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 11, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 12, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 13, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 14, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 15, 16, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 17, 16, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 18, 16, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(parseWithNSString:);
  methods[3].selector = @selector(parseWithNSString:withNetMinidevJsonParserContainerFactory:);
  methods[4].selector = @selector(parseWithNSString:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  methods[5].selector = @selector(parseWithByteArray:);
  methods[6].selector = @selector(parseWithByteArray:withNetMinidevJsonParserContainerFactory:);
  methods[7].selector = @selector(parseWithByteArray:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  methods[8].selector = @selector(parseWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(parseWithByteArray:withInt:withInt:withNetMinidevJsonParserContainerFactory:);
  methods[10].selector = @selector(parseWithByteArray:withInt:withInt:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  methods[11].selector = @selector(parseWithJavaIoReader:);
  methods[12].selector = @selector(parseWithJavaIoReader:withNetMinidevJsonParserContainerFactory:);
  methods[13].selector = @selector(parseWithJavaIoReader:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  methods[14].selector = @selector(parseWithJavaIoInputStream:);
  methods[15].selector = @selector(parseWithJavaIoInputStream:withNetMinidevJsonParserContainerFactory:);
  methods[16].selector = @selector(parseWithJavaIoInputStream:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACCEPT_SIMPLE_QUOTE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_SIMPLE_QUOTE, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_NON_QUOTE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_NON_QUOTE, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_NAN", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_NAN, 0x19, -1, -1, -1, -1 },
    { "IGNORE_CONTROL_CHAR", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_IGNORE_CONTROL_CHAR, 0x19, -1, -1, -1, -1 },
    { "USE_INTEGER_STORAGE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_USE_INTEGER_STORAGE, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_LEADING_ZERO", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_LEADING_ZERO, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_USELESS_COMMA", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_USELESS_COMMA, 0x19, -1, -1, -1, -1 },
    { "USE_HI_PRECISION_FLOAT", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_USE_HI_PRECISION_FLOAT, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_TAILLING_DATA", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_DATA, 0x19, -1, -1, -1, -1 },
    { "ACCEPT_TAILLING_SPACE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_SPACE, 0x19, -1, -1, -1, -1 },
    { "MODE_PERMISSIVE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_MODE_PERMISSIVE, 0x19, -1, -1, -1, -1 },
    { "MODE_RFC4627", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_MODE_RFC4627, 0x19, -1, -1, -1, -1 },
    { "MODE_JSON_SIMPLE", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_MODE_JSON_SIMPLE, 0x19, -1, -1, -1, -1 },
    { "MODE_STRICTEST", "I", .constantValue.asInt = NetMinidevJsonParserJSONParser_MODE_STRICTEST, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_PERMISSIVE_MODE", "I", .constantValue.asLong = 0, 0x9, -1, 19, -1, -1 },
    { "mode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pStream_", "LNetMinidevJsonParserJSONParserReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pSBintream_", "LNetMinidevJsonParserJSONParserInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pString_", "LNetMinidevJsonParserJSONParserString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pBytes_", "LNetMinidevJsonParserJSONParserByteArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "parse", "LNSString;", "LNetMinidevJsonParserParseException;", "LNSString;LNetMinidevJsonParserContainerFactory;", "LNSString;LNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", "[B", "[BLNetMinidevJsonParserContainerFactory;", "[BLNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", "[BII", "[BIILNetMinidevJsonParserContainerFactory;", "[BIILNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", "LJavaIoReader;", "LJavaIoReader;LNetMinidevJsonParserContainerFactory;", "LJavaIoReader;LNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", "LJavaIoInputStream;", "LNetMinidevJsonParserParseException;LJavaIoUnsupportedEncodingException;", "LJavaIoInputStream;LNetMinidevJsonParserContainerFactory;", "LJavaIoInputStream;LNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", &NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE };
  static const J2ObjcClassInfo _NetMinidevJsonParserJSONParser = { "JSONParser", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x1, 17, 20, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserJSONParser;
}

+ (void)initialize {
  if (self == [NetMinidevJsonParserJSONParser class]) {
    NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE = (JavaLangSystem_getPropertyWithNSString_(@"JSON_SMART_SIMPLE") != nil) ? NetMinidevJsonParserJSONParser_MODE_JSON_SIMPLE : NetMinidevJsonParserJSONParser_MODE_PERMISSIVE;
    J2OBJC_SET_INITIALIZED(NetMinidevJsonParserJSONParser)
  }
}

@end

void NetMinidevJsonParserJSONParser_init(NetMinidevJsonParserJSONParser *self) {
  NSObject_init(self);
  self->mode_ = NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE;
}

NetMinidevJsonParserJSONParser *new_NetMinidevJsonParserJSONParser_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserJSONParser, init)
}

NetMinidevJsonParserJSONParser *create_NetMinidevJsonParserJSONParser_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserJSONParser, init)
}

void NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser *self, jint permissifMode) {
  NSObject_init(self);
  self->mode_ = permissifMode;
}

NetMinidevJsonParserJSONParser *new_NetMinidevJsonParserJSONParser_initWithInt_(jint permissifMode) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserJSONParser, initWithInt_, permissifMode)
}

NetMinidevJsonParserJSONParser *create_NetMinidevJsonParserJSONParser_initWithInt_(jint permissifMode) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserJSONParser, initWithInt_, permissifMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserJSONParser)
