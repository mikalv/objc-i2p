//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/ParseException.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "net/minidev/json/parser/ParseException.h"

@interface NetMinidevJsonParserParseException () {
 @public
  jint errorType_;
  id unexpectedObject_;
  jint position_;
}

+ (NSString *)toMessageWithInt:(jint)position
                       withInt:(jint)errorType
                        withId:(id)unexpectedObject;

@end

J2OBJC_FIELD_SETTER(NetMinidevJsonParserParseException, unexpectedObject_, id)

inline jlong NetMinidevJsonParserParseException_get_serialVersionUID(void);
#define NetMinidevJsonParserParseException_serialVersionUID 8879024178584091857LL
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserParseException, serialVersionUID, jlong)

__attribute__((unused)) static NSString *NetMinidevJsonParserParseException_toMessageWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject);

@implementation NetMinidevJsonParserParseException

+ (jint)ERROR_UNEXPECTED_CHAR {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_CHAR;
}

+ (jint)ERROR_UNEXPECTED_TOKEN {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN;
}

+ (jint)ERROR_UNEXPECTED_EXCEPTION {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EXCEPTION;
}

+ (jint)ERROR_UNEXPECTED_EOF {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EOF;
}

+ (jint)ERROR_UNEXPECTED_UNICODE {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_UNICODE;
}

+ (jint)ERROR_UNEXPECTED_DUPLICATE_KEY {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_DUPLICATE_KEY;
}

+ (jint)ERROR_UNEXPECTED_LEADING_0 {
  return NetMinidevJsonParserParseException_ERROR_UNEXPECTED_LEADING_0;
}

- (instancetype)initWithInt:(jint)position
                    withInt:(jint)errorType
                     withId:(id)unexpectedObject {
  NetMinidevJsonParserParseException_initWithInt_withInt_withId_(self, position, errorType, unexpectedObject);
  return self;
}

- (instancetype)initWithInt:(jint)position
      withJavaLangThrowable:(JavaLangThrowable *)cause {
  NetMinidevJsonParserParseException_initWithInt_withJavaLangThrowable_(self, position, cause);
  return self;
}

- (jint)getErrorType {
  return errorType_;
}

- (jint)getPosition {
  return position_;
}

- (id)getUnexpectedObject {
  return unexpectedObject_;
}

+ (NSString *)toMessageWithInt:(jint)position
                       withInt:(jint)errorType
                        withId:(id)unexpectedObject {
  return NetMinidevJsonParserParseException_toMessageWithInt_withInt_withId_(position, errorType, unexpectedObject);
}

- (void)dealloc {
  RELEASE_(unexpectedObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withId:);
  methods[1].selector = @selector(initWithInt:withJavaLangThrowable:);
  methods[2].selector = @selector(getErrorType);
  methods[3].selector = @selector(getPosition);
  methods[4].selector = @selector(getUnexpectedObject);
  methods[5].selector = @selector(toMessageWithInt:withInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetMinidevJsonParserParseException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_CHAR", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_CHAR, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_TOKEN", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_EXCEPTION", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EXCEPTION, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_EOF", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EOF, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_UNICODE", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_UNICODE, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_DUPLICATE_KEY", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_DUPLICATE_KEY, 0x19, -1, -1, -1, -1 },
    { "ERROR_UNEXPECTED_LEADING_0", "I", .constantValue.asInt = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_LEADING_0, 0x19, -1, -1, -1, -1 },
    { "errorType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unexpectedObject_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILNSObject;", "ILJavaLangThrowable;", "toMessage" };
  static const J2ObjcClassInfo _NetMinidevJsonParserParseException = { "ParseException", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x1, 6, 11, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserParseException;
}

@end

void NetMinidevJsonParserParseException_initWithInt_withInt_withId_(NetMinidevJsonParserParseException *self, jint position, jint errorType, id unexpectedObject) {
  JavaLangException_initWithNSString_(self, NetMinidevJsonParserParseException_toMessageWithInt_withInt_withId_(position, errorType, unexpectedObject));
  self->position_ = position;
  self->errorType_ = errorType;
  JreStrongAssign(&self->unexpectedObject_, unexpectedObject);
}

NetMinidevJsonParserParseException *new_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserParseException, initWithInt_withInt_withId_, position, errorType, unexpectedObject)
}

NetMinidevJsonParserParseException *create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserParseException, initWithInt_withInt_withId_, position, errorType, unexpectedObject)
}

void NetMinidevJsonParserParseException_initWithInt_withJavaLangThrowable_(NetMinidevJsonParserParseException *self, jint position, JavaLangThrowable *cause) {
  JavaLangException_initWithNSString_withJavaLangThrowable_(self, NetMinidevJsonParserParseException_toMessageWithInt_withInt_withId_(position, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EXCEPTION, cause), cause);
  self->position_ = position;
  self->errorType_ = NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EXCEPTION;
  JreStrongAssign(&self->unexpectedObject_, cause);
}

NetMinidevJsonParserParseException *new_NetMinidevJsonParserParseException_initWithInt_withJavaLangThrowable_(jint position, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserParseException, initWithInt_withJavaLangThrowable_, position, cause)
}

NetMinidevJsonParserParseException *create_NetMinidevJsonParserParseException_initWithInt_withJavaLangThrowable_(jint position, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserParseException, initWithInt_withJavaLangThrowable_, position, cause)
}

NSString *NetMinidevJsonParserParseException_toMessageWithInt_withInt_withId_(jint position, jint errorType, id unexpectedObject) {
  NetMinidevJsonParserParseException_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_CHAR) {
    [sb appendWithNSString:@"Unexpected character ("];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@") at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN) {
    [sb appendWithNSString:@"Unexpected token "];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@" at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EXCEPTION) {
    [sb appendWithNSString:@"Unexpected exception "];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@" occur at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EOF) {
    [sb appendWithNSString:@"Unexpected End Of File position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@": "];
    [sb appendWithId:unexpectedObject];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_UNICODE) {
    [sb appendWithNSString:@"Unexpected unicode escape sequence "];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@" at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_DUPLICATE_KEY) {
    [sb appendWithNSString:@"Unexpected duplicate key:"];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@" at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else if (errorType == NetMinidevJsonParserParseException_ERROR_UNEXPECTED_LEADING_0) {
    [sb appendWithNSString:@"Unexpected leading 0 in digit for token:"];
    [sb appendWithId:unexpectedObject];
    [sb appendWithNSString:@" at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  else {
    [sb appendWithNSString:@"Unkown error at position "];
    [sb appendWithInt:position];
    [sb appendWithNSString:@"."];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserParseException)
