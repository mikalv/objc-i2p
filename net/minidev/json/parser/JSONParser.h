//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/JSONParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetMinidevJsonParserJSONParser")
#ifdef RESTRICT_NetMinidevJsonParserJSONParser
#define INCLUDE_ALL_NetMinidevJsonParserJSONParser 0
#else
#define INCLUDE_ALL_NetMinidevJsonParserJSONParser 1
#endif
#undef RESTRICT_NetMinidevJsonParserJSONParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetMinidevJsonParserJSONParser_) && (INCLUDE_ALL_NetMinidevJsonParserJSONParser || defined(INCLUDE_NetMinidevJsonParserJSONParser))
#define NetMinidevJsonParserJSONParser_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@protocol NetMinidevJsonParserContainerFactory;
@protocol NetMinidevJsonParserContentHandler;

@interface NetMinidevJsonParserJSONParser : NSObject
@property (readonly, class) jint ACCEPT_SIMPLE_QUOTE NS_SWIFT_NAME(ACCEPT_SIMPLE_QUOTE);
@property (readonly, class) jint ACCEPT_NON_QUOTE NS_SWIFT_NAME(ACCEPT_NON_QUOTE);
@property (readonly, class) jint ACCEPT_NAN NS_SWIFT_NAME(ACCEPT_NAN);
@property (readonly, class) jint IGNORE_CONTROL_CHAR NS_SWIFT_NAME(IGNORE_CONTROL_CHAR);
@property (readonly, class) jint USE_INTEGER_STORAGE NS_SWIFT_NAME(USE_INTEGER_STORAGE);
@property (readonly, class) jint ACCEPT_LEADING_ZERO NS_SWIFT_NAME(ACCEPT_LEADING_ZERO);
@property (readonly, class) jint ACCEPT_USELESS_COMMA NS_SWIFT_NAME(ACCEPT_USELESS_COMMA);
@property (readonly, class) jint USE_HI_PRECISION_FLOAT NS_SWIFT_NAME(USE_HI_PRECISION_FLOAT);
@property (readonly, class) jint ACCEPT_TAILLING_DATA NS_SWIFT_NAME(ACCEPT_TAILLING_DATA);
@property (readonly, class) jint ACCEPT_TAILLING_SPACE NS_SWIFT_NAME(ACCEPT_TAILLING_SPACE);
@property (readonly, class) jint MODE_PERMISSIVE NS_SWIFT_NAME(MODE_PERMISSIVE);
@property (readonly, class) jint MODE_RFC4627 NS_SWIFT_NAME(MODE_RFC4627);
@property (readonly, class) jint MODE_JSON_SIMPLE NS_SWIFT_NAME(MODE_JSON_SIMPLE);
@property (readonly, class) jint MODE_STRICTEST NS_SWIFT_NAME(MODE_STRICTEST);
@property (class) jint DEFAULT_PERMISSIVE_MODE NS_SWIFT_NAME(DEFAULT_PERMISSIVE_MODE);

+ (jint)ACCEPT_SIMPLE_QUOTE;

+ (jint)ACCEPT_NON_QUOTE;

+ (jint)ACCEPT_NAN;

+ (jint)IGNORE_CONTROL_CHAR;

+ (jint)USE_INTEGER_STORAGE;

+ (jint)ACCEPT_LEADING_ZERO;

+ (jint)ACCEPT_USELESS_COMMA;

+ (jint)USE_HI_PRECISION_FLOAT;

+ (jint)ACCEPT_TAILLING_DATA;

+ (jint)ACCEPT_TAILLING_SPACE;

+ (jint)MODE_PERMISSIVE;

+ (jint)MODE_RFC4627;

+ (jint)MODE_JSON_SIMPLE;

+ (jint)MODE_STRICTEST;

+ (jint)DEFAULT_PERMISSIVE_MODE;

+ (void)setDEFAULT_PERMISSIVE_MODE:(jint)value;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)permissifMode;

- (id)parseWithByteArray:(IOSByteArray *)inArg;

- (id)parseWithByteArray:(IOSByteArray *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory;

- (id)parseWithByteArray:(IOSByteArray *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length;

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory;

- (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory;

- (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg;

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory;

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

- (id)parseWithNSString:(NSString *)inArg;

- (id)parseWithNSString:(NSString *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory;

- (id)parseWithNSString:(NSString *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler;

@end

J2OBJC_STATIC_INIT(NetMinidevJsonParserJSONParser)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_SIMPLE_QUOTE(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_SIMPLE_QUOTE 1
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_SIMPLE_QUOTE, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_NON_QUOTE(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_NON_QUOTE 2
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_NON_QUOTE, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_NAN(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_NAN 4
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_NAN, jint)

inline jint NetMinidevJsonParserJSONParser_get_IGNORE_CONTROL_CHAR(void);
#define NetMinidevJsonParserJSONParser_IGNORE_CONTROL_CHAR 8
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, IGNORE_CONTROL_CHAR, jint)

inline jint NetMinidevJsonParserJSONParser_get_USE_INTEGER_STORAGE(void);
#define NetMinidevJsonParserJSONParser_USE_INTEGER_STORAGE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, USE_INTEGER_STORAGE, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_LEADING_ZERO(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_LEADING_ZERO 32
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_LEADING_ZERO, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_USELESS_COMMA(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_USELESS_COMMA 64
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_USELESS_COMMA, jint)

inline jint NetMinidevJsonParserJSONParser_get_USE_HI_PRECISION_FLOAT(void);
#define NetMinidevJsonParserJSONParser_USE_HI_PRECISION_FLOAT 128
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, USE_HI_PRECISION_FLOAT, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_TAILLING_DATA(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_DATA 256
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_TAILLING_DATA, jint)

inline jint NetMinidevJsonParserJSONParser_get_ACCEPT_TAILLING_SPACE(void);
#define NetMinidevJsonParserJSONParser_ACCEPT_TAILLING_SPACE 512
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, ACCEPT_TAILLING_SPACE, jint)

inline jint NetMinidevJsonParserJSONParser_get_MODE_PERMISSIVE(void);
#define NetMinidevJsonParserJSONParser_MODE_PERMISSIVE -1
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, MODE_PERMISSIVE, jint)

inline jint NetMinidevJsonParserJSONParser_get_MODE_RFC4627(void);
#define NetMinidevJsonParserJSONParser_MODE_RFC4627 400
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, MODE_RFC4627, jint)

inline jint NetMinidevJsonParserJSONParser_get_MODE_JSON_SIMPLE(void);
#define NetMinidevJsonParserJSONParser_MODE_JSON_SIMPLE 960
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, MODE_JSON_SIMPLE, jint)

inline jint NetMinidevJsonParserJSONParser_get_MODE_STRICTEST(void);
#define NetMinidevJsonParserJSONParser_MODE_STRICTEST 144
J2OBJC_STATIC_FIELD_CONSTANT(NetMinidevJsonParserJSONParser, MODE_STRICTEST, jint)

inline jint NetMinidevJsonParserJSONParser_get_DEFAULT_PERMISSIVE_MODE(void);
inline jint NetMinidevJsonParserJSONParser_set_DEFAULT_PERMISSIVE_MODE(jint value);
inline jint *NetMinidevJsonParserJSONParser_getRef_DEFAULT_PERMISSIVE_MODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetMinidevJsonParserJSONParser_DEFAULT_PERMISSIVE_MODE;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE, jint)

FOUNDATION_EXPORT void NetMinidevJsonParserJSONParser_init(NetMinidevJsonParserJSONParser *self);

FOUNDATION_EXPORT NetMinidevJsonParserJSONParser *new_NetMinidevJsonParserJSONParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetMinidevJsonParserJSONParser *create_NetMinidevJsonParserJSONParser_init(void);

FOUNDATION_EXPORT void NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser *self, jint permissifMode);

FOUNDATION_EXPORT NetMinidevJsonParserJSONParser *new_NetMinidevJsonParserJSONParser_initWithInt_(jint permissifMode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetMinidevJsonParserJSONParser *create_NetMinidevJsonParserJSONParser_initWithInt_(jint permissifMode);

J2OBJC_TYPE_LITERAL_HEADER(NetMinidevJsonParserJSONParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetMinidevJsonParserJSONParser")
