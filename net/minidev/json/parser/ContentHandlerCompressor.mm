//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/ContentHandlerCompressor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Appendable.h"
#include "java/lang/System.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONValue.h"
#include "net/minidev/json/parser/ContentHandlerCompressor.h"

@interface NetMinidevJsonParserContentHandlerCompressor ()

- (void)pushWithInt:(jint)type;

- (jboolean)isInObject;

- (jboolean)isInArray;

@end

__attribute__((unused)) static void NetMinidevJsonParserContentHandlerCompressor_pushWithInt_(NetMinidevJsonParserContentHandlerCompressor *self, jint type);

__attribute__((unused)) static jboolean NetMinidevJsonParserContentHandlerCompressor_isInObject(NetMinidevJsonParserContentHandlerCompressor *self);

__attribute__((unused)) static jboolean NetMinidevJsonParserContentHandlerCompressor_isInArray(NetMinidevJsonParserContentHandlerCompressor *self);

@implementation NetMinidevJsonParserContentHandlerCompressor

- (void)pushWithInt:(jint)type {
  NetMinidevJsonParserContentHandlerCompressor_pushWithInt_(self, type);
}

- (jboolean)isInObject {
  return NetMinidevJsonParserContentHandlerCompressor_isInObject(self);
}

- (jboolean)isInArray {
  return NetMinidevJsonParserContentHandlerCompressor_isInArray(self);
}

- (instancetype)initWithJavaLangAppendable:(id<JavaLangAppendable>)outArg
               withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonParserContentHandlerCompressor_initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_(self, outArg, compression);
  return self;
}

- (void)startJSON {
}

- (void)endJSON {
}

- (jboolean)startObject {
  if (NetMinidevJsonParserContentHandlerCompressor_isInArray(self) && (*IOSIntArray_GetRef(nil_chk(stack_), pos_ + 1))++ > 0) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:','];
  [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:'{'];
  NetMinidevJsonParserContentHandlerCompressor_pushWithInt_(self, 0);
  return false;
}

- (jboolean)endObject {
  [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:'}'];
  pos_ -= 2;
  return false;
}

- (jboolean)startObjectEntryWithNSString:(NSString *)key {
  if ((*IOSIntArray_GetRef(nil_chk(stack_), pos_ + 1))++ > 0) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:','];
  if (key == nil) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithJavaLangCharSequence:@"null"];
  else if (![((NetMinidevJsonJSONStyle *) nil_chk(compression_)) mustProtectKeyWithNSString:key]) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithJavaLangCharSequence:key];
  else {
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:'"'];
    NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(key, out_, compression_);
    [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:'"'];
  }
  [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:':'];
  return false;
}

- (jboolean)endObjectEntry {
  return false;
}

- (jboolean)startArray {
  if (NetMinidevJsonParserContentHandlerCompressor_isInArray(self) && (*IOSIntArray_GetRef(nil_chk(stack_), pos_ + 1))++ > 0) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:','];
  [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:'['];
  NetMinidevJsonParserContentHandlerCompressor_pushWithInt_(self, 1);
  return false;
}

- (jboolean)endArray {
  [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:']'];
  pos_ -= 2;
  return false;
}

- (jboolean)primitiveWithId:(id)value {
  if (!NetMinidevJsonParserContentHandlerCompressor_isInObject(self) && (*IOSIntArray_GetRef(nil_chk(stack_), pos_ + 1))++ > 0) [((id<JavaLangAppendable>) nil_chk(out_)) appendWithChar:','];
  if ([value isKindOfClass:[NSString class]]) {
    [((NetMinidevJsonJSONStyle *) nil_chk(compression_)) writeStringWithJavaLangAppendable:out_ withNSString:(NSString *) cast_chk(value, [NSString class])];
  }
  else NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(value, out_, compression_);
  return false;
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(compression_);
  RELEASE_(stack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(pushWithInt:);
  methods[1].selector = @selector(isInObject);
  methods[2].selector = @selector(isInArray);
  methods[3].selector = @selector(initWithJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  methods[4].selector = @selector(startJSON);
  methods[5].selector = @selector(endJSON);
  methods[6].selector = @selector(startObject);
  methods[7].selector = @selector(endObject);
  methods[8].selector = @selector(startObjectEntryWithNSString:);
  methods[9].selector = @selector(endObjectEntry);
  methods[10].selector = @selector(startArray);
  methods[11].selector = @selector(endArray);
  methods[12].selector = @selector(primitiveWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LJavaLangAppendable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "compression_", "LNetMinidevJsonJSONStyle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stack_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "push", "I", "LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "LNetMinidevJsonParserParseException;LJavaIoIOException;", "startObjectEntry", "LNSString;", "primitive", "LNSObject;" };
  static const J2ObjcClassInfo _NetMinidevJsonParserContentHandlerCompressor = { "ContentHandlerCompressor", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserContentHandlerCompressor;
}

@end

void NetMinidevJsonParserContentHandlerCompressor_pushWithInt_(NetMinidevJsonParserContentHandlerCompressor *self, jint type) {
  self->pos_ += 2;
  if (self->pos_ >= ((IOSIntArray *) nil_chk(self->stack_))->size_) {
    IOSIntArray *tmp = [IOSIntArray arrayWithLength:self->stack_->size_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, tmp, 0, self->stack_->size_);
    JreStrongAssign(&self->stack_, tmp);
  }
  *IOSIntArray_GetRef(self->stack_, self->pos_) = type;
  *IOSIntArray_GetRef(self->stack_, self->pos_ + 1) = 0;
}

jboolean NetMinidevJsonParserContentHandlerCompressor_isInObject(NetMinidevJsonParserContentHandlerCompressor *self) {
  return IOSIntArray_Get(nil_chk(self->stack_), self->pos_) == 0;
}

jboolean NetMinidevJsonParserContentHandlerCompressor_isInArray(NetMinidevJsonParserContentHandlerCompressor *self) {
  return IOSIntArray_Get(nil_chk(self->stack_), self->pos_) == 1;
}

void NetMinidevJsonParserContentHandlerCompressor_initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_(NetMinidevJsonParserContentHandlerCompressor *self, id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stack_, [IOSIntArray newArrayWithLength:10]);
  JreStrongAssign(&self->out_, outArg);
  JreStrongAssign(&self->compression_, compression);
}

NetMinidevJsonParserContentHandlerCompressor *new_NetMinidevJsonParserContentHandlerCompressor_initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_(id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserContentHandlerCompressor, initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_, outArg, compression)
}

NetMinidevJsonParserContentHandlerCompressor *create_NetMinidevJsonParserContentHandlerCompressor_initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_(id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserContentHandlerCompressor, initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_, outArg, compression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserContentHandlerCompressor)
