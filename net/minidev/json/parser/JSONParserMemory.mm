//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/JSONParserMemory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "net/minidev/json/parser/JSONParserBase.h"
#include "net/minidev/json/parser/JSONParserMemory.h"
#include "net/minidev/json/parser/ParseException.h"

@implementation NetMinidevJsonParserJSONParserMemory

- (instancetype)initWithInt:(jint)permissiveMode {
  NetMinidevJsonParserJSONParserMemory_initWithInt_(self, permissiveMode);
  return self;
}

- (void)readNQStringWithBooleanArray:(IOSBooleanArray *)stop {
  jint start = pos_;
  [self skipNQStringWithBooleanArray:stop];
  [self extractStringTrimWithInt:start withInt:pos_];
}

- (id)readNumberWithBooleanArray:(IOSBooleanArray *)stop {
  jint start = pos_;
  [self read];
  [self skipDigits];
  if (c_ != '.' && c_ != 'E' && c_ != 'e') {
    [self skipSpace];
    if (c_ >= 0 && c_ < NetMinidevJsonParserJSONParserBase_MAX_STOP && !IOSBooleanArray_Get(nil_chk(stop), c_) && c_ != NetMinidevJsonParserJSONParserBase_EOI) {
      [self skipNQStringWithBooleanArray:stop];
      [self extractStringTrimWithInt:start withInt:pos_];
      if (!acceptNonQuote_) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN, xs_);
      return xs_;
    }
    [self extractStringTrimWithInt:start withInt:pos_];
    return [self parseNumberWithNSString:xs_];
  }
  if (c_ == '.') {
    [self read];
    [self skipDigits];
  }
  if (c_ != 'E' && c_ != 'e') {
    [self skipSpace];
    if (c_ >= 0 && c_ < NetMinidevJsonParserJSONParserBase_MAX_STOP && !IOSBooleanArray_Get(nil_chk(stop), c_) && c_ != NetMinidevJsonParserJSONParserBase_EOI) {
      [self skipNQStringWithBooleanArray:stop];
      [self extractStringTrimWithInt:start withInt:pos_];
      if (!acceptNonQuote_) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN, xs_);
      return xs_;
    }
    [self extractStringTrimWithInt:start withInt:pos_];
    return [self extractFloat];
  }
  [((NetMinidevJsonParserJSONParserBase_MSB *) nil_chk(sb_)) appendWithChar:'E'];
  [self read];
  if (c_ == '+' || c_ == '-' || (c_ >= '0' && c_ <= '9')) {
    [sb_ appendWithChar:c_];
    [self read];
    [self skipDigits];
    [self skipSpace];
    if (c_ >= 0 && c_ < NetMinidevJsonParserJSONParserBase_MAX_STOP && !IOSBooleanArray_Get(nil_chk(stop), c_) && c_ != NetMinidevJsonParserJSONParserBase_EOI) {
      [self skipNQStringWithBooleanArray:stop];
      [self extractStringTrimWithInt:start withInt:pos_];
      if (!acceptNonQuote_) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN, xs_);
      return xs_;
    }
    [self extractStringTrimWithInt:start withInt:pos_];
    return [self extractFloat];
  }
  else {
    [self skipNQStringWithBooleanArray:stop];
    [self extractStringTrimWithInt:start withInt:pos_];
    if (!acceptNonQuote_) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_TOKEN, xs_);
    if (!acceptLeadinZero_) [self checkLeadinZero];
    return xs_;
  }
}

- (void)readString {
  if (!acceptSimpleQuote_ && c_ == '\'') {
    if (acceptNonQuote_) {
      [self readNQStringWithBooleanArray:JreLoadStatic(NetMinidevJsonParserJSONParserBase, stopAll)];
      return;
    }
    @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_CHAR, JavaLangCharacter_valueOfWithChar_(c_));
  }
  jint tmpP = [self indexOfWithChar:c_ withInt:pos_ + 1];
  if (tmpP == -1) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(len_, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EOF, nil);
  [self extractStringWithInt:pos_ + 1 withInt:tmpP];
  if ([((NSString *) nil_chk(xs_)) java_indexOf:'\\'] == -1) {
    [self checkControleChar];
    pos_ = tmpP;
    [self read];
    return;
  }
  [((NetMinidevJsonParserJSONParserBase_MSB *) nil_chk(sb_)) clear];
  [self readString2];
}

- (void)extractStringWithInt:(jint)start
                     withInt:(jint)stop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)indexOfWithChar:(jchar)c
                withInt:(jint)pos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)extractStringTrimWithInt:(jint)start
                         withInt:(jint)stop {
  [self extractStringWithInt:start withInt:stop];
  JreStrongAssign(&xs_, [((NSString *) nil_chk(xs_)) java_trim]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 4, 2, 5, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x404, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(readNQStringWithBooleanArray:);
  methods[2].selector = @selector(readNumberWithBooleanArray:);
  methods[3].selector = @selector(readString);
  methods[4].selector = @selector(extractStringWithInt:withInt:);
  methods[5].selector = @selector(indexOfWithChar:withInt:);
  methods[6].selector = @selector(extractStringTrimWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "len_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "readNQString", "[Z", "LJavaIoIOException;", "readNumber", "LNetMinidevJsonParserParseException;LJavaIoIOException;", "extractString", "II", "indexOf", "CI", "extractStringTrim" };
  static const J2ObjcClassInfo _NetMinidevJsonParserJSONParserMemory = { "JSONParserMemory", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x400, 7, 1, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserJSONParserMemory;
}

@end

void NetMinidevJsonParserJSONParserMemory_initWithInt_(NetMinidevJsonParserJSONParserMemory *self, jint permissiveMode) {
  NetMinidevJsonParserJSONParserBase_initWithInt_(self, permissiveMode);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserJSONParserMemory)
