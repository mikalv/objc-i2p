//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/parser/JSONParserReader.java
//

#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "net/minidev/json/parser/ContainerFactory.h"
#include "net/minidev/json/parser/ContentHandler.h"
#include "net/minidev/json/parser/ContentHandlerDumy.h"
#include "net/minidev/json/parser/JSONParserBase.h"
#include "net/minidev/json/parser/JSONParserReader.h"
#include "net/minidev/json/parser/JSONParserStream.h"
#include "net/minidev/json/parser/ParseException.h"

@interface NetMinidevJsonParserJSONParserReader () {
 @public
  JavaIoReader *in_;
}

@end

J2OBJC_FIELD_SETTER(NetMinidevJsonParserJSONParserReader, in_, JavaIoReader *)

@implementation NetMinidevJsonParserJSONParserReader

- (instancetype)initWithInt:(jint)permissiveMode {
  NetMinidevJsonParserJSONParserReader_initWithInt_(self, permissiveMode);
  return self;
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg {
  return [self parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE) withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory {
  return [self parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:JreLoadStatic(NetMinidevJsonParserContentHandlerDumy, HANDLER)];
}

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withNetMinidevJsonParserContainerFactory:(id<NetMinidevJsonParserContainerFactory>)containerFactory
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  JreStrongAssign(&self->in_, inArg);
  self->pos_ = -1;
  return [super parseWithNetMinidevJsonParserContainerFactory:containerFactory withNetMinidevJsonParserContentHandler:handler];
}

- (void)read {
  jint i = [((JavaIoReader *) nil_chk(in_)) read];
  c_ = (i == -1) ? (jchar) NetMinidevJsonParserJSONParserBase_EOI : (jchar) i;
  pos_++;
}

- (void)readS {
  [((NetMinidevJsonParserJSONParserBase_MSB *) nil_chk(sb_)) appendWithChar:c_];
  jint i = [((JavaIoReader *) nil_chk(in_)) read];
  if (i == -1) {
    c_ = NetMinidevJsonParserJSONParserBase_EOI;
  }
  else {
    c_ = (jchar) i;
    pos_++;
  }
}

- (void)readNoEnd {
  jint i = [((JavaIoReader *) nil_chk(in_)) read];
  if (i == -1) @throw create_NetMinidevJsonParserParseException_initWithInt_withInt_withId_(pos_ - 1, NetMinidevJsonParserParseException_ERROR_UNEXPECTED_EOF, @"EOF");
  c_ = (jchar) i;
}

- (void)dealloc {
  RELEASE_(in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(parseWithJavaIoReader:);
  methods[2].selector = @selector(parseWithJavaIoReader:withNetMinidevJsonParserContainerFactory:);
  methods[3].selector = @selector(parseWithJavaIoReader:withNetMinidevJsonParserContainerFactory:withNetMinidevJsonParserContentHandler:);
  methods[4].selector = @selector(read);
  methods[5].selector = @selector(readS);
  methods[6].selector = @selector(readNoEnd);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "parse", "LJavaIoReader;", "LNetMinidevJsonParserParseException;", "LJavaIoReader;LNetMinidevJsonParserContainerFactory;", "LJavaIoReader;LNetMinidevJsonParserContainerFactory;LNetMinidevJsonParserContentHandler;", "LJavaIoIOException;", "LNetMinidevJsonParserParseException;LJavaIoIOException;" };
  static const J2ObjcClassInfo _NetMinidevJsonParserJSONParserReader = { "JSONParserReader", "net.minidev.json.parser", ptrTable, methods, fields, 7, 0x0, 7, 1, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonParserJSONParserReader;
}

@end

void NetMinidevJsonParserJSONParserReader_initWithInt_(NetMinidevJsonParserJSONParserReader *self, jint permissiveMode) {
  NetMinidevJsonParserJSONParserStream_initWithInt_(self, permissiveMode);
}

NetMinidevJsonParserJSONParserReader *new_NetMinidevJsonParserJSONParserReader_initWithInt_(jint permissiveMode) {
  J2OBJC_NEW_IMPL(NetMinidevJsonParserJSONParserReader, initWithInt_, permissiveMode)
}

NetMinidevJsonParserJSONParserReader *create_NetMinidevJsonParserJSONParserReader_initWithInt_(jint permissiveMode) {
  J2OBJC_CREATE_IMPL(NetMinidevJsonParserJSONParserReader, initWithInt_, permissiveMode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonParserJSONParserReader)
