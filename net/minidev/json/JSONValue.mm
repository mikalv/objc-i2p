//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONValue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/Appendable.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "net/minidev/json/JSONStyle.h"
#include "net/minidev/json/JSONValue.h"
#include "net/minidev/json/parser/ContainerFactory.h"
#include "net/minidev/json/parser/ContentHandler.h"
#include "net/minidev/json/parser/ContentHandlerCompressor.h"
#include "net/minidev/json/parser/FakeContainerFactory.h"
#include "net/minidev/json/parser/JSONParser.h"
#include "net/minidev/json/parser/ParseException.h"
#include "net/minidev/json/reader/JsonWriter.h"
#include "net/minidev/json/reader/JsonWriterI.h"

inline NetMinidevJsonParserFakeContainerFactory *NetMinidevJsonJSONValue_get_FACTORY_FAKE_COINTAINER(void);
static NetMinidevJsonParserFakeContainerFactory *NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetMinidevJsonJSONValue, FACTORY_FAKE_COINTAINER, NetMinidevJsonParserFakeContainerFactory *)

J2OBJC_INITIALIZED_DEFN(NetMinidevJsonJSONValue)

NetMinidevJsonJSONStyle *NetMinidevJsonJSONValue_COMPRESSION;
NetMinidevJsonReaderJsonWriter *NetMinidevJsonJSONValue_defaultWriter;

@implementation NetMinidevJsonJSONValue

+ (NetMinidevJsonJSONStyle *)COMPRESSION {
  return NetMinidevJsonJSONValue_COMPRESSION;
}

+ (void)setCOMPRESSION:(NetMinidevJsonJSONStyle *)value {
  JreStrongAssign(&NetMinidevJsonJSONValue_COMPRESSION, value);
}

+ (NetMinidevJsonReaderJsonWriter *)defaultWriter {
  return NetMinidevJsonJSONValue_defaultWriter;
}

+ (void)setDefaultWriter:(NetMinidevJsonReaderJsonWriter *)value {
  JreStrongAssign(&NetMinidevJsonJSONValue_defaultWriter, value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJSONValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)parseWithByteArray:(IOSByteArray *)inArg {
  return NetMinidevJsonJSONValue_parseWithByteArray_(inArg);
}

+ (id)parseWithByteArray:(IOSByteArray *)inArg
                 withInt:(jint)offset
                 withInt:(jint)length {
  return NetMinidevJsonJSONValue_parseWithByteArray_withInt_withInt_(inArg, offset, length);
}

+ (id)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetMinidevJsonJSONValue_parseWithJavaIoInputStream_(inArg);
}

+ (id)parseWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_parseWithJavaIoReader_(inArg);
}

+ (id)parseWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_parseWithNSString_(s);
}

+ (id)parseKeepingOrderWithByteArray:(IOSByteArray *)inArg {
  return NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_(inArg);
}

+ (id)parseKeepingOrderWithByteArray:(IOSByteArray *)inArg
                             withInt:(jint)offset
                             withInt:(jint)length {
  return NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_withInt_withInt_(inArg, offset, length);
}

+ (id)parseKeepingOrderWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoInputStream_(inArg);
}

+ (id)parseKeepingOrderWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoReader_(inArg);
}

+ (id)parseKeepingOrderWithNSString:(NSString *)inArg {
  return NetMinidevJsonJSONValue_parseKeepingOrderWithNSString_(inArg);
}

+ (void)SAXParseWithJavaIoInputStream:(JavaIoInputStream *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  NetMinidevJsonJSONValue_SAXParseWithJavaIoInputStream_withNetMinidevJsonParserContentHandler_(input, handler);
}

+ (void)SAXParseWithJavaIoReader:(JavaIoReader *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  NetMinidevJsonJSONValue_SAXParseWithJavaIoReader_withNetMinidevJsonParserContentHandler_(input, handler);
}

+ (void)SAXParseWithNSString:(NSString *)input
withNetMinidevJsonParserContentHandler:(id<NetMinidevJsonParserContentHandler>)handler {
  NetMinidevJsonJSONValue_SAXParseWithNSString_withNetMinidevJsonParserContentHandler_(input, handler);
}

+ (NSString *)compressWithNSString:(NSString *)input
       withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)style {
  return NetMinidevJsonJSONValue_compressWithNSString_withNetMinidevJsonJSONStyle_(input, style);
}

+ (NSString *)compressWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_compressWithNSString_(s);
}

+ (NSString *)uncompressWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_uncompressWithNSString_(s);
}

+ (id)parseWithExceptionWithByteArray:(IOSByteArray *)inArg {
  return NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_(inArg);
}

+ (id)parseWithExceptionWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)offset
                              withInt:(jint)length {
  return NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_withInt_withInt_(inArg, offset, length);
}

+ (id)parseWithExceptionWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoInputStream_(inArg);
}

+ (id)parseWithExceptionWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoReader_(inArg);
}

+ (id)parseWithExceptionWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_parseWithExceptionWithNSString_(s);
}

+ (id)parseStrictWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetMinidevJsonJSONValue_parseStrictWithJavaIoInputStream_(inArg);
}

+ (id)parseStrictWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_parseStrictWithJavaIoReader_(inArg);
}

+ (id)parseStrictWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_parseStrictWithNSString_(s);
}

+ (id)parseStrictWithByteArray:(IOSByteArray *)s {
  return NetMinidevJsonJSONValue_parseStrictWithByteArray_(s);
}

+ (id)parseStrictWithByteArray:(IOSByteArray *)s
                       withInt:(jint)offset
                       withInt:(jint)length {
  return NetMinidevJsonJSONValue_parseStrictWithByteArray_withInt_withInt_(s, offset, length);
}

+ (jboolean)isValidJsonStrictWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_isValidJsonStrictWithJavaIoReader_(inArg);
}

+ (jboolean)isValidJsonStrictWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_isValidJsonStrictWithNSString_(s);
}

+ (jboolean)isValidJsonWithJavaIoReader:(JavaIoReader *)inArg {
  return NetMinidevJsonJSONValue_isValidJsonWithJavaIoReader_(inArg);
}

+ (jboolean)isValidJsonWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_isValidJsonWithNSString_(s);
}

+ (void)writeJSONStringWithId:(id)value
       withJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_(value, outArg);
}

+ (void)writeJSONStringWithId:(id)value
       withJavaLangAppendable:(id<JavaLangAppendable>)outArg
  withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(value, outArg, compression);
}

+ (NSString *)toJSONStringWithId:(id)value {
  return NetMinidevJsonJSONValue_toJSONStringWithId_(value);
}

+ (NSString *)toJSONStringWithId:(id)value
     withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONValue_toJSONStringWithId_withNetMinidevJsonJSONStyle_(value, compression);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return NetMinidevJsonJSONValue_escapeWithNSString_(s);
}

+ (NSString *)escapeWithNSString:(NSString *)s
     withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  return NetMinidevJsonJSONValue_escapeWithNSString_withNetMinidevJsonJSONStyle_(s, compression);
}

+ (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)ap {
  NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_(s, ap);
}

+ (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)ap
withNetMinidevJsonJSONStyle:(NetMinidevJsonJSONStyle *)compression {
  NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(s, ap, compression);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 10, 9, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 11, 12, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 1, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 2, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 3, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 4, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 5, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 3, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 4, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 5, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 1, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 2, 12, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 4, 20, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 4, 20, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 23, 20, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 24, 20, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithByteArray:);
  methods[2].selector = @selector(parseWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(parseWithJavaIoInputStream:);
  methods[4].selector = @selector(parseWithJavaIoReader:);
  methods[5].selector = @selector(parseWithNSString:);
  methods[6].selector = @selector(parseKeepingOrderWithByteArray:);
  methods[7].selector = @selector(parseKeepingOrderWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(parseKeepingOrderWithJavaIoInputStream:);
  methods[9].selector = @selector(parseKeepingOrderWithJavaIoReader:);
  methods[10].selector = @selector(parseKeepingOrderWithNSString:);
  methods[11].selector = @selector(SAXParseWithJavaIoInputStream:withNetMinidevJsonParserContentHandler:);
  methods[12].selector = @selector(SAXParseWithJavaIoReader:withNetMinidevJsonParserContentHandler:);
  methods[13].selector = @selector(SAXParseWithNSString:withNetMinidevJsonParserContentHandler:);
  methods[14].selector = @selector(compressWithNSString:withNetMinidevJsonJSONStyle:);
  methods[15].selector = @selector(compressWithNSString:);
  methods[16].selector = @selector(uncompressWithNSString:);
  methods[17].selector = @selector(parseWithExceptionWithByteArray:);
  methods[18].selector = @selector(parseWithExceptionWithByteArray:withInt:withInt:);
  methods[19].selector = @selector(parseWithExceptionWithJavaIoInputStream:);
  methods[20].selector = @selector(parseWithExceptionWithJavaIoReader:);
  methods[21].selector = @selector(parseWithExceptionWithNSString:);
  methods[22].selector = @selector(parseStrictWithJavaIoInputStream:);
  methods[23].selector = @selector(parseStrictWithJavaIoReader:);
  methods[24].selector = @selector(parseStrictWithNSString:);
  methods[25].selector = @selector(parseStrictWithByteArray:);
  methods[26].selector = @selector(parseStrictWithByteArray:withInt:withInt:);
  methods[27].selector = @selector(isValidJsonStrictWithJavaIoReader:);
  methods[28].selector = @selector(isValidJsonStrictWithNSString:);
  methods[29].selector = @selector(isValidJsonWithJavaIoReader:);
  methods[30].selector = @selector(isValidJsonWithNSString:);
  methods[31].selector = @selector(writeJSONStringWithId:withJavaLangAppendable:);
  methods[32].selector = @selector(writeJSONStringWithId:withJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  methods[33].selector = @selector(toJSONStringWithId:);
  methods[34].selector = @selector(toJSONStringWithId:withNetMinidevJsonJSONStyle:);
  methods[35].selector = @selector(escapeWithNSString:);
  methods[36].selector = @selector(escapeWithNSString:withNetMinidevJsonJSONStyle:);
  methods[37].selector = @selector(escapeWithNSString:withJavaLangAppendable:);
  methods[38].selector = @selector(escapeWithNSString:withJavaLangAppendable:withNetMinidevJsonJSONStyle:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMPRESSION", "LNetMinidevJsonJSONStyle;", .constantValue.asLong = 0, 0x9, -1, 31, -1, -1 },
    { "FACTORY_FAKE_COINTAINER", "LNetMinidevJsonParserFakeContainerFactory;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "defaultWriter", "LNetMinidevJsonReaderJsonWriter;", .constantValue.asLong = 0, 0x9, -1, 33, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "[B", "[BII", "LJavaIoInputStream;", "LJavaIoReader;", "LNSString;", "parseKeepingOrder", "SAXParse", "LJavaIoInputStream;LNetMinidevJsonParserContentHandler;", "LNetMinidevJsonParserParseException;LJavaIoIOException;", "LJavaIoReader;LNetMinidevJsonParserContentHandler;", "LNSString;LNetMinidevJsonParserContentHandler;", "LNetMinidevJsonParserParseException;", "compress", "LNSString;LNetMinidevJsonJSONStyle;", "uncompress", "parseWithException", "LJavaIoIOException;LNetMinidevJsonParserParseException;", "parseStrict", "isValidJsonStrict", "LJavaIoIOException;", "isValidJson", "writeJSONString", "LNSObject;LJavaLangAppendable;", "LNSObject;LJavaLangAppendable;LNetMinidevJsonJSONStyle;", "toJSONString", "LNSObject;", "LNSObject;LNetMinidevJsonJSONStyle;", "escape", "LNSString;LJavaLangAppendable;", "LNSString;LJavaLangAppendable;LNetMinidevJsonJSONStyle;", &NetMinidevJsonJSONValue_COMPRESSION, &NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER, &NetMinidevJsonJSONValue_defaultWriter };
  static const J2ObjcClassInfo _NetMinidevJsonJSONValue = { "JSONValue", "net.minidev.json", ptrTable, methods, fields, 7, 0x1, 39, 3, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonJSONValue;
}

+ (void)initialize {
  if (self == [NetMinidevJsonJSONValue class]) {
    JreStrongAssign(&NetMinidevJsonJSONValue_COMPRESSION, JreLoadStatic(NetMinidevJsonJSONStyle, NO_COMPRESS));
    JreStrongAssignAndConsume(&NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER, new_NetMinidevJsonParserFakeContainerFactory_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJSONValue_defaultWriter, new_NetMinidevJsonReaderJsonWriter_init());
    J2OBJC_SET_INITIALIZED(NetMinidevJsonJSONValue)
  }
}

@end

void NetMinidevJsonJSONValue_init(NetMinidevJsonJSONValue *self) {
  NSObject_init(self);
}

NetMinidevJsonJSONValue *new_NetMinidevJsonJSONValue_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONValue, init)
}

NetMinidevJsonJSONValue *create_NetMinidevJsonJSONValue_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONValue, init)
}

id NetMinidevJsonJSONValue_parseWithByteArray_(IOSByteArray *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg withInt:offset withInt:length];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoInputStream:inArg];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoReader:inArg];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithNSString:s];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_(IOSByteArray *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_ORDERED)];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseKeepingOrderWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_ORDERED)];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_ORDERED)];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseKeepingOrderWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_ORDERED)];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

id NetMinidevJsonJSONValue_parseKeepingOrderWithNSString_(NSString *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithNSString:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_ORDERED)];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

void NetMinidevJsonJSONValue_SAXParseWithJavaIoInputStream_withNetMinidevJsonParserContentHandler_(JavaIoInputStream *input, id<NetMinidevJsonParserContentHandler> handler) {
  NetMinidevJsonJSONValue_initialize();
  NetMinidevJsonParserJSONParser *p = create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE));
  [p parseWithJavaIoInputStream:input withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER withNetMinidevJsonParserContentHandler:handler];
}

void NetMinidevJsonJSONValue_SAXParseWithJavaIoReader_withNetMinidevJsonParserContentHandler_(JavaIoReader *input, id<NetMinidevJsonParserContentHandler> handler) {
  NetMinidevJsonJSONValue_initialize();
  NetMinidevJsonParserJSONParser *p = create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE));
  [p parseWithJavaIoReader:input withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER withNetMinidevJsonParserContentHandler:handler];
}

void NetMinidevJsonJSONValue_SAXParseWithNSString_withNetMinidevJsonParserContentHandler_(NSString *input, id<NetMinidevJsonParserContentHandler> handler) {
  NetMinidevJsonJSONValue_initialize();
  NetMinidevJsonParserJSONParser *p = create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE));
  [p parseWithNSString:input withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER withNetMinidevJsonParserContentHandler:handler];
}

NSString *NetMinidevJsonJSONValue_compressWithNSString_withNetMinidevJsonJSONStyle_(NSString *input, NetMinidevJsonJSONStyle *style) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
    NetMinidevJsonParserContentHandlerCompressor *comp = create_NetMinidevJsonParserContentHandlerCompressor_initWithJavaLangAppendable_withNetMinidevJsonJSONStyle_(sb, style);
    NetMinidevJsonParserJSONParser *p = create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE));
    [p parseWithNSString:input withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER withNetMinidevJsonParserContentHandler:comp];
    return [sb description];
  }
  @catch (JavaLangException *e) {
    return input;
  }
}

NSString *NetMinidevJsonJSONValue_compressWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  return NetMinidevJsonJSONValue_compressWithNSString_withNetMinidevJsonJSONStyle_(s, JreLoadStatic(NetMinidevJsonJSONStyle, MAX_COMPRESS));
}

NSString *NetMinidevJsonJSONValue_uncompressWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  return NetMinidevJsonJSONValue_compressWithNSString_withNetMinidevJsonJSONStyle_(s, JreLoadStatic(NetMinidevJsonJSONStyle, NO_COMPRESS));
}

id NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_(IOSByteArray *inArg) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseWithExceptionWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint length) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithByteArray:inArg withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseWithExceptionWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseWithExceptionWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithNSString:s withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseStrictWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithJavaIoInputStream:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseStrictWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseStrictWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithNSString:s withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseStrictWithByteArray_(IOSByteArray *s) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithByteArray:s withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

id NetMinidevJsonJSONValue_parseStrictWithByteArray_withInt_withInt_(IOSByteArray *s, jint offset, jint length) {
  NetMinidevJsonJSONValue_initialize();
  return [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithByteArray:s withInt:offset withInt:length withNetMinidevJsonParserContainerFactory:JreLoadStatic(NetMinidevJsonParserContainerFactory, FACTORY_SIMPLE)];
}

jboolean NetMinidevJsonJSONValue_isValidJsonStrictWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER];
    return true;
  }
  @catch (NetMinidevJsonParserParseException *e) {
    return false;
  }
}

jboolean NetMinidevJsonJSONValue_isValidJsonStrictWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    [create_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_RFC4627) parseWithNSString:s withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER];
    return true;
  }
  @catch (NetMinidevJsonParserParseException *e) {
    return false;
  }
}

jboolean NetMinidevJsonJSONValue_isValidJsonWithJavaIoReader_(JavaIoReader *inArg) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithJavaIoReader:inArg withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER];
    return true;
  }
  @catch (NetMinidevJsonParserParseException *e) {
    return false;
  }
}

jboolean NetMinidevJsonJSONValue_isValidJsonWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  @try {
    [create_NetMinidevJsonParserJSONParser_initWithInt_(JreLoadStatic(NetMinidevJsonParserJSONParser, DEFAULT_PERMISSIVE_MODE)) parseWithNSString:s withNetMinidevJsonParserContainerFactory:NetMinidevJsonJSONValue_FACTORY_FAKE_COINTAINER];
    return true;
  }
  @catch (NetMinidevJsonParserParseException *e) {
    return false;
  }
}

void NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_(id value, id<JavaLangAppendable> outArg) {
  NetMinidevJsonJSONValue_initialize();
  NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(value, outArg, NetMinidevJsonJSONValue_COMPRESSION);
}

void NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(id value, id<JavaLangAppendable> outArg, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONValue_initialize();
  if (value == nil) {
    [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"null"];
    return;
  }
  IOSClass *clz = [value java_getClass];
  id<NetMinidevJsonReaderJsonWriterI> w = [((NetMinidevJsonReaderJsonWriter *) nil_chk(NetMinidevJsonJSONValue_defaultWriter)) getWriteWithIOSClass:clz];
  if (w == nil) {
    if ([clz isArray]) w = JreLoadStatic(NetMinidevJsonReaderJsonWriter, arrayWriter);
    else {
      w = [((NetMinidevJsonReaderJsonWriter *) nil_chk(NetMinidevJsonJSONValue_defaultWriter)) getWriterByInterfaceWithIOSClass:[value java_getClass]];
      if (w == nil) w = JreLoadStatic(NetMinidevJsonReaderJsonWriter, beansWriter);
    }
    [((NetMinidevJsonReaderJsonWriter *) nil_chk(NetMinidevJsonJSONValue_defaultWriter)) registerWriterWithNetMinidevJsonReaderJsonWriterI:w withIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ clz } count:1 type:IOSClass_class_()]];
  }
  [((id<NetMinidevJsonReaderJsonWriterI>) nil_chk(w)) writeJSONStringWithId:value withJavaLangAppendable:outArg withNetMinidevJsonJSONStyle:compression];
}

NSString *NetMinidevJsonJSONValue_toJSONStringWithId_(id value) {
  NetMinidevJsonJSONValue_initialize();
  return NetMinidevJsonJSONValue_toJSONStringWithId_withNetMinidevJsonJSONStyle_(value, NetMinidevJsonJSONValue_COMPRESSION);
}

NSString *NetMinidevJsonJSONValue_toJSONStringWithId_withNetMinidevJsonJSONStyle_(id value, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONValue_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  @try {
    NetMinidevJsonJSONValue_writeJSONStringWithId_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(value, sb, compression);
  }
  @catch (JavaIoIOException *e) {
  }
  return [sb description];
}

NSString *NetMinidevJsonJSONValue_escapeWithNSString_(NSString *s) {
  NetMinidevJsonJSONValue_initialize();
  return NetMinidevJsonJSONValue_escapeWithNSString_withNetMinidevJsonJSONStyle_(s, NetMinidevJsonJSONValue_COMPRESSION);
}

NSString *NetMinidevJsonJSONValue_escapeWithNSString_withNetMinidevJsonJSONStyle_(NSString *s, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONValue_initialize();
  if (s == nil) return nil;
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((NetMinidevJsonJSONStyle *) nil_chk(compression)) escapeWithNSString:s withJavaLangAppendable:sb];
  return [sb description];
}

void NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_(NSString *s, id<JavaLangAppendable> ap) {
  NetMinidevJsonJSONValue_initialize();
  NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(s, ap, NetMinidevJsonJSONValue_COMPRESSION);
}

void NetMinidevJsonJSONValue_escapeWithNSString_withJavaLangAppendable_withNetMinidevJsonJSONStyle_(NSString *s, id<JavaLangAppendable> ap, NetMinidevJsonJSONStyle *compression) {
  NetMinidevJsonJSONValue_initialize();
  if (s == nil) return;
  [((NetMinidevJsonJSONStyle *) nil_chk(compression)) escapeWithNSString:s withJavaLangAppendable:ap];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJSONValue)
