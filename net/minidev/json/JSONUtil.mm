//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JSONUtil.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/minidev/json/JSONUtil.h"

@implementation NetMinidevJsonJSONUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJSONUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getSetterNameWithNSString:(NSString *)key {
  return NetMinidevJsonJSONUtil_getSetterNameWithNSString_(key);
}

+ (NSString *)getGetterNameWithNSString:(NSString *)key {
  return NetMinidevJsonJSONUtil_getGetterNameWithNSString_(key);
}

+ (NSString *)getIsNameWithNSString:(NSString *)key {
  return NetMinidevJsonJSONUtil_getIsNameWithNSString_(key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSetterNameWithNSString:);
  methods[2].selector = @selector(getGetterNameWithNSString:);
  methods[3].selector = @selector(getIsNameWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getSetterName", "LNSString;", "getGetterName", "getIsName" };
  static const J2ObjcClassInfo _NetMinidevJsonJSONUtil = { "JSONUtil", "net.minidev.json", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_NetMinidevJsonJSONUtil;
}

@end

void NetMinidevJsonJSONUtil_init(NetMinidevJsonJSONUtil *self) {
  NSObject_init(self);
}

NetMinidevJsonJSONUtil *new_NetMinidevJsonJSONUtil_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJSONUtil, init)
}

NetMinidevJsonJSONUtil *create_NetMinidevJsonJSONUtil_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJSONUtil, init)
}

NSString *NetMinidevJsonJSONUtil_getSetterNameWithNSString_(NSString *key) {
  NetMinidevJsonJSONUtil_initialize();
  jint len = [((NSString *) nil_chk(key)) java_length];
  IOSCharArray *b = [IOSCharArray arrayWithLength:len + 3];
  *IOSCharArray_GetRef(b, 0) = 's';
  *IOSCharArray_GetRef(b, 1) = 'e';
  *IOSCharArray_GetRef(b, 2) = 't';
  jchar c = [key charAtWithInt:0];
  if (c >= 'a' && c <= 'z') c += 'A' - 'a';
  *IOSCharArray_GetRef(b, 3) = c;
  for (jint i = 1; i < len; i++) {
    *IOSCharArray_GetRef(b, i + 3) = [key charAtWithInt:i];
  }
  return [NSString java_stringWithCharacters:b];
}

NSString *NetMinidevJsonJSONUtil_getGetterNameWithNSString_(NSString *key) {
  NetMinidevJsonJSONUtil_initialize();
  jint len = [((NSString *) nil_chk(key)) java_length];
  IOSCharArray *b = [IOSCharArray arrayWithLength:len + 3];
  *IOSCharArray_GetRef(b, 0) = 'g';
  *IOSCharArray_GetRef(b, 1) = 'e';
  *IOSCharArray_GetRef(b, 2) = 't';
  jchar c = [key charAtWithInt:0];
  if (c >= 'a' && c <= 'z') c += 'A' - 'a';
  *IOSCharArray_GetRef(b, 3) = c;
  for (jint i = 1; i < len; i++) {
    *IOSCharArray_GetRef(b, i + 3) = [key charAtWithInt:i];
  }
  return [NSString java_stringWithCharacters:b];
}

NSString *NetMinidevJsonJSONUtil_getIsNameWithNSString_(NSString *key) {
  NetMinidevJsonJSONUtil_initialize();
  jint len = [((NSString *) nil_chk(key)) java_length];
  IOSCharArray *b = [IOSCharArray arrayWithLength:len + 2];
  *IOSCharArray_GetRef(b, 0) = 'i';
  *IOSCharArray_GetRef(b, 1) = 's';
  jchar c = [key charAtWithInt:0];
  if (c >= 'a' && c <= 'z') c += 'A' - 'a';
  *IOSCharArray_GetRef(b, 2) = c;
  for (jint i = 1; i < len; i++) {
    *IOSCharArray_GetRef(b, i + 2) = [key charAtWithInt:i];
  }
  return [NSString java_stringWithCharacters:b];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJSONUtil)
