//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/minidev/json/JStylerObj.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/RuntimeException.h"
#include "net/minidev/json/JStylerObj.h"

@interface NetMinidevJsonJStylerObj_MustProtect : NSObject

@end

@interface NetMinidevJsonJStylerObj_MPTrue ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetMinidevJsonJStylerObj_MPTrue_init(NetMinidevJsonJStylerObj_MPTrue *self);

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPTrue *new_NetMinidevJsonJStylerObj_MPTrue_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPTrue *create_NetMinidevJsonJStylerObj_MPTrue_init(void);

@interface NetMinidevJsonJStylerObj_MPSimple ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetMinidevJsonJStylerObj_MPSimple_init(NetMinidevJsonJStylerObj_MPSimple *self);

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPSimple *new_NetMinidevJsonJStylerObj_MPSimple_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPSimple *create_NetMinidevJsonJStylerObj_MPSimple_init(void);

@interface NetMinidevJsonJStylerObj_MPAgressive ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetMinidevJsonJStylerObj_MPAgressive_init(NetMinidevJsonJStylerObj_MPAgressive *self);

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPAgressive *new_NetMinidevJsonJStylerObj_MPAgressive_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetMinidevJsonJStylerObj_MPAgressive *create_NetMinidevJsonJStylerObj_MPAgressive_init(void);

@interface NetMinidevJsonJStylerObj_StringProtector : NSObject

@end

@interface NetMinidevJsonJStylerObj_EscapeLT ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetMinidevJsonJStylerObj_EscapeLT_init(NetMinidevJsonJStylerObj_EscapeLT *self);

__attribute__((unused)) static NetMinidevJsonJStylerObj_EscapeLT *new_NetMinidevJsonJStylerObj_EscapeLT_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetMinidevJsonJStylerObj_EscapeLT *create_NetMinidevJsonJStylerObj_EscapeLT_init(void);

@interface NetMinidevJsonJStylerObj_Escape4Web ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetMinidevJsonJStylerObj_Escape4Web_init(NetMinidevJsonJStylerObj_Escape4Web *self);

__attribute__((unused)) static NetMinidevJsonJStylerObj_Escape4Web *new_NetMinidevJsonJStylerObj_Escape4Web_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetMinidevJsonJStylerObj_Escape4Web *create_NetMinidevJsonJStylerObj_Escape4Web_init(void);

J2OBJC_INITIALIZED_DEFN(NetMinidevJsonJStylerObj)

NetMinidevJsonJStylerObj_MPSimple *NetMinidevJsonJStylerObj_MP_SIMPLE;
NetMinidevJsonJStylerObj_MPTrue *NetMinidevJsonJStylerObj_MP_TRUE;
NetMinidevJsonJStylerObj_MPAgressive *NetMinidevJsonJStylerObj_MP_AGGRESIVE;
NetMinidevJsonJStylerObj_EscapeLT *NetMinidevJsonJStylerObj_ESCAPE_LT;
NetMinidevJsonJStylerObj_Escape4Web *NetMinidevJsonJStylerObj_ESCAPE4Web;

@implementation NetMinidevJsonJStylerObj

+ (NetMinidevJsonJStylerObj_MPSimple *)MP_SIMPLE {
  return NetMinidevJsonJStylerObj_MP_SIMPLE;
}

+ (NetMinidevJsonJStylerObj_MPTrue *)MP_TRUE {
  return NetMinidevJsonJStylerObj_MP_TRUE;
}

+ (NetMinidevJsonJStylerObj_MPAgressive *)MP_AGGRESIVE {
  return NetMinidevJsonJStylerObj_MP_AGGRESIVE;
}

+ (NetMinidevJsonJStylerObj_EscapeLT *)ESCAPE_LT {
  return NetMinidevJsonJStylerObj_ESCAPE_LT;
}

+ (NetMinidevJsonJStylerObj_Escape4Web *)ESCAPE4Web {
  return NetMinidevJsonJStylerObj_ESCAPE4Web;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isSpaceWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isSpaceWithChar_(c);
}

+ (jboolean)isSpecialCharWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isSpecialCharWithChar_(c);
}

+ (jboolean)isSpecialOpenWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isSpecialOpenWithChar_(c);
}

+ (jboolean)isSpecialCloseWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isSpecialCloseWithChar_(c);
}

+ (jboolean)isSpecialWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isSpecialWithChar_(c);
}

+ (jboolean)isUnicodeWithChar:(jchar)c {
  return NetMinidevJsonJStylerObj_isUnicodeWithChar_(c);
}

+ (jboolean)isKeywordWithNSString:(NSString *)s {
  return NetMinidevJsonJStylerObj_isKeywordWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isSpaceWithChar:);
  methods[2].selector = @selector(isSpecialCharWithChar:);
  methods[3].selector = @selector(isSpecialOpenWithChar:);
  methods[4].selector = @selector(isSpecialCloseWithChar:);
  methods[5].selector = @selector(isSpecialWithChar:);
  methods[6].selector = @selector(isUnicodeWithChar:);
  methods[7].selector = @selector(isKeywordWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MP_SIMPLE", "LNetMinidevJsonJStylerObj_MPSimple;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "MP_TRUE", "LNetMinidevJsonJStylerObj_MPTrue;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "MP_AGGRESIVE", "LNetMinidevJsonJStylerObj_MPAgressive;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "ESCAPE_LT", "LNetMinidevJsonJStylerObj_EscapeLT;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "ESCAPE4Web", "LNetMinidevJsonJStylerObj_Escape4Web;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "isSpace", "C", "isSpecialChar", "isSpecialOpen", "isSpecialClose", "isSpecial", "isUnicode", "isKeyword", "LNSString;", &NetMinidevJsonJStylerObj_MP_SIMPLE, &NetMinidevJsonJStylerObj_MP_TRUE, &NetMinidevJsonJStylerObj_MP_AGGRESIVE, &NetMinidevJsonJStylerObj_ESCAPE_LT, &NetMinidevJsonJStylerObj_ESCAPE4Web, "LNetMinidevJsonJStylerObj_MustProtect;LNetMinidevJsonJStylerObj_MPTrue;LNetMinidevJsonJStylerObj_MPSimple;LNetMinidevJsonJStylerObj_MPAgressive;LNetMinidevJsonJStylerObj_StringProtector;LNetMinidevJsonJStylerObj_EscapeLT;LNetMinidevJsonJStylerObj_Escape4Web;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj = { "JStylerObj", "net.minidev.json", ptrTable, methods, fields, 7, 0x0, 8, 5, -1, 14, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj;
}

+ (void)initialize {
  if (self == [NetMinidevJsonJStylerObj class]) {
    JreStrongAssignAndConsume(&NetMinidevJsonJStylerObj_MP_SIMPLE, new_NetMinidevJsonJStylerObj_MPSimple_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJStylerObj_MP_TRUE, new_NetMinidevJsonJStylerObj_MPTrue_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJStylerObj_MP_AGGRESIVE, new_NetMinidevJsonJStylerObj_MPAgressive_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJStylerObj_ESCAPE_LT, new_NetMinidevJsonJStylerObj_EscapeLT_init());
    JreStrongAssignAndConsume(&NetMinidevJsonJStylerObj_ESCAPE4Web, new_NetMinidevJsonJStylerObj_Escape4Web_init());
    J2OBJC_SET_INITIALIZED(NetMinidevJsonJStylerObj)
  }
}

@end

void NetMinidevJsonJStylerObj_init(NetMinidevJsonJStylerObj *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj *new_NetMinidevJsonJStylerObj_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj, init)
}

NetMinidevJsonJStylerObj *create_NetMinidevJsonJStylerObj_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj, init)
}

jboolean NetMinidevJsonJStylerObj_isSpaceWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return (c == 0x000d || c == 0x000a || c == 0x0009 || c == ' ');
}

jboolean NetMinidevJsonJStylerObj_isSpecialCharWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return (c == 0x0008 || c == 0x000c || c == 0x000a);
}

jboolean NetMinidevJsonJStylerObj_isSpecialOpenWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return (c == '{' || c == '[' || c == ',' || c == ':');
}

jboolean NetMinidevJsonJStylerObj_isSpecialCloseWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return (c == '}' || c == ']' || c == ',' || c == ':');
}

jboolean NetMinidevJsonJStylerObj_isSpecialWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return (c == '{' || c == '[' || c == ',' || c == '}' || c == ']' || c == ':' || c == '\'' || c == '"');
}

jboolean NetMinidevJsonJStylerObj_isUnicodeWithChar_(jchar c) {
  NetMinidevJsonJStylerObj_initialize();
  return ((c >= 0x0000 && c <= 0x001f) || (c >= 0x007f && c <= 0x009f) || (c >= 0x2000 && c <= 0x20ff));
}

jboolean NetMinidevJsonJStylerObj_isKeywordWithNSString_(NSString *s) {
  NetMinidevJsonJStylerObj_initialize();
  if ([((NSString *) nil_chk(s)) java_length] < 3) return false;
  jchar c = [s charAtWithInt:0];
  if (c == 'n') return [s isEqual:@"null"];
  if (c == 't') return [s isEqual:@"true"];
  if (c == 'f') return [s isEqual:@"false"];
  if (c == 'N') return [s isEqual:@"NaN"];
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj)

@implementation NetMinidevJsonJStylerObj_MustProtect

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(mustBeProtectWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "mustBeProtect", "LNSString;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_MustProtect = { "MustProtect", "net.minidev.json", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_MustProtect;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_MustProtect)

@implementation NetMinidevJsonJStylerObj_MPTrue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_MPTrue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)mustBeProtectWithNSString:(NSString *)s {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mustBeProtectWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "mustBeProtect", "LNSString;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_MPTrue = { "MPTrue", "net.minidev.json", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_MPTrue;
}

@end

void NetMinidevJsonJStylerObj_MPTrue_init(NetMinidevJsonJStylerObj_MPTrue *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj_MPTrue *new_NetMinidevJsonJStylerObj_MPTrue_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj_MPTrue, init)
}

NetMinidevJsonJStylerObj_MPTrue *create_NetMinidevJsonJStylerObj_MPTrue_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj_MPTrue, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_MPTrue)

@implementation NetMinidevJsonJStylerObj_MPSimple

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_MPSimple_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)mustBeProtectWithNSString:(NSString *)s {
  if (s == nil) return false;
  jint len = [s java_length];
  if (len == 0) return true;
  if ([s java_trim] != s) return true;
  jchar ch = [s charAtWithInt:0];
  if ((ch >= '0' && ch <= '9') || ch == '-') return true;
  for (jint i = 0; i < len; i++) {
    ch = [s charAtWithInt:i];
    if (NetMinidevJsonJStylerObj_isSpaceWithChar_(ch)) return true;
    if (NetMinidevJsonJStylerObj_isSpecialWithChar_(ch)) return true;
    if (NetMinidevJsonJStylerObj_isSpecialCharWithChar_(ch)) return true;
    if (NetMinidevJsonJStylerObj_isUnicodeWithChar_(ch)) return true;
  }
  if (NetMinidevJsonJStylerObj_isKeywordWithNSString_(s)) return true;
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mustBeProtectWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "mustBeProtect", "LNSString;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_MPSimple = { "MPSimple", "net.minidev.json", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_MPSimple;
}

@end

void NetMinidevJsonJStylerObj_MPSimple_init(NetMinidevJsonJStylerObj_MPSimple *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj_MPSimple *new_NetMinidevJsonJStylerObj_MPSimple_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj_MPSimple, init)
}

NetMinidevJsonJStylerObj_MPSimple *create_NetMinidevJsonJStylerObj_MPSimple_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj_MPSimple, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_MPSimple)

@implementation NetMinidevJsonJStylerObj_MPAgressive

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_MPAgressive_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)mustBeProtectWithNSString:(NSString *)s {
  if (s == nil) return false;
  jint len = [s java_length];
  if (len == 0) return true;
  if ([s java_trim] != s) return true;
  jchar ch = [s charAtWithInt:0];
  if (NetMinidevJsonJStylerObj_isSpecialWithChar_(ch) || NetMinidevJsonJStylerObj_isUnicodeWithChar_(ch)) return true;
  for (jint i = 1; i < len; i++) {
    ch = [s charAtWithInt:i];
    if (NetMinidevJsonJStylerObj_isSpecialCloseWithChar_(ch) || NetMinidevJsonJStylerObj_isUnicodeWithChar_(ch)) return true;
  }
  if (NetMinidevJsonJStylerObj_isKeywordWithNSString_(s)) return true;
  ch = [s charAtWithInt:0];
  if ((ch >= '0' && ch <= '9') || ch == '-') {
    jint p = 1;
    for (; p < len; p++) {
      ch = [s charAtWithInt:p];
      if (ch < '0' || ch > '9') break;
    }
    if (p == len) return true;
    if (ch == '.') {
      p++;
    }
    for (; p < len; p++) {
      ch = [s charAtWithInt:p];
      if (ch < '0' || ch > '9') break;
    }
    if (p == len) return true;
    if (ch == 'E' || ch == 'e') {
      p++;
      if (p == len) return false;
      ch = [s charAtWithInt:p];
      if (ch == '+' || ch == '-') {
        p++;
        ch = [s charAtWithInt:p];
      }
    }
    if (p == len) return false;
    for (; p < len; p++) {
      ch = [s charAtWithInt:p];
      if (ch < '0' || ch > '9') break;
    }
    if (p == len) return true;
    return false;
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mustBeProtectWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "mustBeProtect", "LNSString;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_MPAgressive = { "MPAgressive", "net.minidev.json", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_MPAgressive;
}

@end

void NetMinidevJsonJStylerObj_MPAgressive_init(NetMinidevJsonJStylerObj_MPAgressive *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj_MPAgressive *new_NetMinidevJsonJStylerObj_MPAgressive_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj_MPAgressive, init)
}

NetMinidevJsonJStylerObj_MPAgressive *create_NetMinidevJsonJStylerObj_MPAgressive_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj_MPAgressive, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_MPAgressive)

@implementation NetMinidevJsonJStylerObj_StringProtector

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(escapeWithNSString:withJavaLangAppendable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "escape", "LNSString;LJavaLangAppendable;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_StringProtector = { "StringProtector", "net.minidev.json", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_StringProtector;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_StringProtector)

@implementation NetMinidevJsonJStylerObj_EscapeLT

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_EscapeLT_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)outArg {
  @try {
    jint len = [((NSString *) nil_chk(s)) java_length];
    for (jint i = 0; i < len; i++) {
      jchar ch = [s charAtWithInt:i];
      switch (ch) {
        case '"':
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\\""];
        break;
        case '\\':
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\\\"];
        break;
        case 0x0008:
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\b"];
        break;
        case 0x000c:
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\f"];
        break;
        case 0x000a:
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\n"];
        break;
        case 0x000d:
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\r"];
        break;
        case 0x0009:
        [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\t"];
        break;
        default:
        if ((ch >= 0x0000 && ch <= 0x001f) || (ch >= 0x007f && ch <= 0x009f) || (ch >= 0x2000 && ch <= 0x20ff)) {
          [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithJavaLangCharSequence:@"\\u"];
          NSString *hex = @"0123456789ABCDEF";
          [outArg appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 12)) & (jint) 0x000F]];
          [outArg appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 8)) & (jint) 0x000F]];
          [outArg appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 4)) & (jint) 0x000F]];
          [outArg appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 0)) & (jint) 0x000F]];
        }
        else {
          [((id<JavaLangAppendable>) nil_chk(outArg)) appendWithChar:ch];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Impossible Exeption");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(escapeWithNSString:withJavaLangAppendable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "escape", "LNSString;LJavaLangAppendable;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_EscapeLT = { "EscapeLT", "net.minidev.json", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_EscapeLT;
}

@end

void NetMinidevJsonJStylerObj_EscapeLT_init(NetMinidevJsonJStylerObj_EscapeLT *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj_EscapeLT *new_NetMinidevJsonJStylerObj_EscapeLT_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj_EscapeLT, init)
}

NetMinidevJsonJStylerObj_EscapeLT *create_NetMinidevJsonJStylerObj_EscapeLT_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj_EscapeLT, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_EscapeLT)

@implementation NetMinidevJsonJStylerObj_Escape4Web

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetMinidevJsonJStylerObj_Escape4Web_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)escapeWithNSString:(NSString *)s
    withJavaLangAppendable:(id<JavaLangAppendable>)sb {
  @try {
    jint len = [((NSString *) nil_chk(s)) java_length];
    for (jint i = 0; i < len; i++) {
      jchar ch = [s charAtWithInt:i];
      switch (ch) {
        case '"':
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\\""];
        break;
        case '\\':
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\\\"];
        break;
        case 0x0008:
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\b"];
        break;
        case 0x000c:
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\f"];
        break;
        case 0x000a:
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\n"];
        break;
        case 0x000d:
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\r"];
        break;
        case 0x0009:
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\t"];
        break;
        case '/':
        [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\/"];
        break;
        default:
        if ((ch >= 0x0000 && ch <= 0x001f) || (ch >= 0x007f && ch <= 0x009f) || (ch >= 0x2000 && ch <= 0x20ff)) {
          [((id<JavaLangAppendable>) nil_chk(sb)) appendWithJavaLangCharSequence:@"\\u"];
          NSString *hex = @"0123456789ABCDEF";
          [sb appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 12)) & (jint) 0x0F]];
          [sb appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 8)) & (jint) 0x0F]];
          [sb appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 4)) & (jint) 0x0F]];
          [sb appendWithChar:[hex charAtWithInt:(JreRShift32(ch, 0)) & (jint) 0x0F]];
        }
        else {
          [((id<JavaLangAppendable>) nil_chk(sb)) appendWithChar:ch];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Impossible Error");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(escapeWithNSString:withJavaLangAppendable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "escape", "LNSString;LJavaLangAppendable;", "LNetMinidevJsonJStylerObj;" };
  static const J2ObjcClassInfo _NetMinidevJsonJStylerObj_Escape4Web = { "Escape4Web", "net.minidev.json", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetMinidevJsonJStylerObj_Escape4Web;
}

@end

void NetMinidevJsonJStylerObj_Escape4Web_init(NetMinidevJsonJStylerObj_Escape4Web *self) {
  NSObject_init(self);
}

NetMinidevJsonJStylerObj_Escape4Web *new_NetMinidevJsonJStylerObj_Escape4Web_init() {
  J2OBJC_NEW_IMPL(NetMinidevJsonJStylerObj_Escape4Web, init)
}

NetMinidevJsonJStylerObj_Escape4Web *create_NetMinidevJsonJStylerObj_Escape4Web_init() {
  J2OBJC_CREATE_IMPL(NetMinidevJsonJStylerObj_Escape4Web, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetMinidevJsonJStylerObj_Escape4Web)
