//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/PeerSelectionCriteria.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterPeerSelectionCriteria")
#ifdef RESTRICT_NetI2pRouterPeerSelectionCriteria
#define INCLUDE_ALL_NetI2pRouterPeerSelectionCriteria 0
#else
#define INCLUDE_ALL_NetI2pRouterPeerSelectionCriteria 1
#endif
#undef RESTRICT_NetI2pRouterPeerSelectionCriteria

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterPeerSelectionCriteria_) && (INCLUDE_ALL_NetI2pRouterPeerSelectionCriteria || defined(INCLUDE_NetI2pRouterPeerSelectionCriteria))
#define NetI2pRouterPeerSelectionCriteria_

@interface NetI2pRouterPeerSelectionCriteria : NSObject
@property (readonly, class) jint PURPOSE_TUNNEL NS_SWIFT_NAME(PURPOSE_TUNNEL);
@property (readonly, class) jint PURPOSE_GARLIC NS_SWIFT_NAME(PURPOSE_GARLIC);
@property (readonly, class) jint PURPOSE_SOURCE_ROUTE NS_SWIFT_NAME(PURPOSE_SOURCE_ROUTE);
@property (readonly, class) jint PURPOSE_TEST NS_SWIFT_NAME(PURPOSE_TEST);

+ (jint)PURPOSE_TUNNEL;

+ (jint)PURPOSE_GARLIC;

+ (jint)PURPOSE_SOURCE_ROUTE;

+ (jint)PURPOSE_TEST;

#pragma mark Public

- (instancetype __nonnull)init;

- (jint)getMaximumRequired;

- (jint)getMinimumRequired;

- (jint)getPurpose;

- (void)setMaximumRequiredWithInt:(jint)max;

- (void)setMinimumRequiredWithInt:(jint)min;

- (void)setPurposeWithInt:(jint)purpose;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeerSelectionCriteria)

inline jint NetI2pRouterPeerSelectionCriteria_get_PURPOSE_TUNNEL(void);
#define NetI2pRouterPeerSelectionCriteria_PURPOSE_TUNNEL 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeerSelectionCriteria, PURPOSE_TUNNEL, jint)

inline jint NetI2pRouterPeerSelectionCriteria_get_PURPOSE_GARLIC(void);
#define NetI2pRouterPeerSelectionCriteria_PURPOSE_GARLIC 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeerSelectionCriteria, PURPOSE_GARLIC, jint)

inline jint NetI2pRouterPeerSelectionCriteria_get_PURPOSE_SOURCE_ROUTE(void);
#define NetI2pRouterPeerSelectionCriteria_PURPOSE_SOURCE_ROUTE 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeerSelectionCriteria, PURPOSE_SOURCE_ROUTE, jint)

inline jint NetI2pRouterPeerSelectionCriteria_get_PURPOSE_TEST(void);
#define NetI2pRouterPeerSelectionCriteria_PURPOSE_TEST 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeerSelectionCriteria, PURPOSE_TEST, jint)

FOUNDATION_EXPORT void NetI2pRouterPeerSelectionCriteria_init(NetI2pRouterPeerSelectionCriteria *self);

FOUNDATION_EXPORT NetI2pRouterPeerSelectionCriteria *new_NetI2pRouterPeerSelectionCriteria_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterPeerSelectionCriteria *create_NetI2pRouterPeerSelectionCriteria_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeerSelectionCriteria)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterPeerSelectionCriteria")
