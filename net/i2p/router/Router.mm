//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/Router.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "freenet/support/CPUInformation/CPUID.h"
#include "freenet/support/CPUInformation/CPUInfo.h"
#include "freenet/support/CPUInformation/UnknownCPUException.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/EnumSet.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "net/i2p/client/impl/I2PSessionImpl.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/crypto/ElGamalEngine.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/data/router/RouterKeyGenerator.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientMessagePool.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/HandlerJobBuilder.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageValidator.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterClock.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterThrottle.h"
#include "net/i2p/router/RouterVersion.h"
#include "net/i2p/router/StatisticsManager.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/crypto/FamilyKeyCrypto.h"
#include "net/i2p/router/message/GarlicMessageHandler.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/startup/CreateRouterInfoJob.h"
#include "net/i2p/router/startup/PortableWorkingDir.h"
#include "net/i2p/router/startup/StartupJob.h"
#include "net/i2p/router/startup/WorkingDir.h"
#include "net/i2p/router/tasks/CoalesceStatsEvent.h"
#include "net/i2p/router/tasks/CryptoChecker.h"
#include "net/i2p/router/tasks/GracefulShutdown.h"
#include "net/i2p/router/tasks/InstallUpdate.h"
#include "net/i2p/router/tasks/MarkLiveliness.h"
#include "net/i2p/router/tasks/OOMListener.h"
#include "net/i2p/router/tasks/PersistRouterInfoJob.h"
#include "net/i2p/router/tasks/Republish.h"
#include "net/i2p/router/tasks/Restarter.h"
#include "net/i2p/router/tasks/RouterWatchdog.h"
#include "net/i2p/router/tasks/ShutdownHook.h"
#include "net/i2p/router/tasks/Spinner.h"
#include "net/i2p/router/tasks/UpdateRoutingKeyModifierJob.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/time/Timestamper.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/FortunaRandomSource.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/NativeBigInteger.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/ReusableGZIPInputStream.h"
#include "net/i2p/util/ReusableGZIPOutputStream.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"

@class NetI2pRouterRouter_State;

@interface NetI2pRouterRouter () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  id<JavaUtilMap> _config_;
  NSString *_configFilename_;
  NetI2pDataRouterRouterInfo *_routerInfo_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *_routerInfoLock_;
  id _configFileLock_;
  jlong _started_;
  jboolean _killVMOnEnd_;
  jint _gracefulExitCode_;
  id<NetI2pUtilI2PThread_OOMEventListener> _oomListener_;
  NetI2pRouterTasksShutdownHook *_shutdownHook_;
  NetI2pUtilI2PThread *_gracefulShutdownDetector_;
  NetI2pRouterTasksRouterWatchdog *_watchdog_;
  JavaLangThread *_watchdogThread_;
  NetI2pRouterUtilEventLog *_eventLog_;
  id _stateLock_;
  NetI2pRouterRouter_State *_state_;
  NetI2pRouterCryptoFamilyKeyCrypto *_familyKeyCrypto_;
  jboolean _familyKeyCryptoFail_;
  jint _networkID_;
}

- (void)startupStuff;

+ (JavaUtilProperties *)getConfigWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                  withNSString:(NSString *)filename;

- (void)changeStateWithNetI2pRouterRouter_State:(NetI2pRouterRouter_State *)state;

- (void)locked_rebuildRouterInfoWithBoolean:(jboolean)blockingRebuild;

- (void)warmupCrypto;

- (void)finalShutdownWithInt:(jint)exitCode;

- (JavaIoFile *)getPingFile;

- (jboolean)isOnlyRouterRunning;

- (void)beginMarkingLiveliness;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _config_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _configFilename_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _routerInfo_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _routerInfoLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _configFileLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _oomListener_, id<NetI2pUtilI2PThread_OOMEventListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _shutdownHook_, NetI2pRouterTasksShutdownHook *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _gracefulShutdownDetector_, NetI2pUtilI2PThread *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _watchdog_, NetI2pRouterTasksRouterWatchdog *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _watchdogThread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _eventLog_, NetI2pRouterUtilEventLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _stateLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _state_, NetI2pRouterRouter_State *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouter, _familyKeyCrypto_, NetI2pRouterCryptoFamilyKeyCrypto *)

inline jint NetI2pRouterRouter_get_DEFAULT_NETWORK_ID(void);
#define NetI2pRouterRouter_DEFAULT_NETWORK_ID 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouter, DEFAULT_NETWORK_ID, jint)

inline NSString *NetI2pRouterRouter_get_PROP_NETWORK_ID(void);
static NSString *NetI2pRouterRouter_PROP_NETWORK_ID = @"router.networkID";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, PROP_NETWORK_ID, NSString *)

inline NSString *NetI2pRouterRouter_get_PROP_SHUTDOWN_IN_PROGRESS(void);
static NSString *NetI2pRouterRouter_PROP_SHUTDOWN_IN_PROGRESS = @"__shutdownInProgress";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, PROP_SHUTDOWN_IN_PROGRESS, NSString *)

inline NSString *NetI2pRouterRouter_get_EVENTLOG(void);
static NSString *NetI2pRouterRouter_EVENTLOG = @"eventlog.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, EVENTLOG, NSString *)

inline NSString *NetI2pRouterRouter_get_PROP_JBIGI(void);
static NSString *NetI2pRouterRouter_PROP_JBIGI = @"jbigi.loadedResource";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, PROP_JBIGI, NSString *)

inline NSString *NetI2pRouterRouter_get_PROP_JBIGI_PROCESSOR(void);
static NSString *NetI2pRouterRouter_PROP_JBIGI_PROCESSOR = @"jbigi.lastProcessor";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, PROP_JBIGI_PROCESSOR, NSString *)

inline jint NetI2pRouterRouter_get_SHUTDOWN_WAIT_SECS(void);
#define NetI2pRouterRouter_SHUTDOWN_WAIT_SECS 60
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouter, SHUTDOWN_WAIT_SECS, jint)

inline NSString *NetI2pRouterRouter_get_originalTimeZoneID(void);
static NSString *NetI2pRouterRouter_originalTimeZoneID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, originalTimeZoneID, NSString *)

inline id<JavaUtilSet> NetI2pRouterRouter_get_STATES_ALIVE(void);
static id<JavaUtilSet> NetI2pRouterRouter_STATES_ALIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, STATES_ALIVE, id<JavaUtilSet>)

inline id<JavaUtilSet> NetI2pRouterRouter_get_STATES_GRACEFUL(void);
static id<JavaUtilSet> NetI2pRouterRouter_STATES_GRACEFUL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, STATES_GRACEFUL, id<JavaUtilSet>)

inline id<JavaUtilSet> NetI2pRouterRouter_get_STATES_FINAL(void);
static id<JavaUtilSet> NetI2pRouterRouter_STATES_FINAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, STATES_FINAL, id<JavaUtilSet>)

inline IOSObjectArray *NetI2pRouterRouter_get__rebuildFiles(void);
static IOSObjectArray *NetI2pRouterRouter__rebuildFiles;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouter, _rebuildFiles, IOSObjectArray *)

inline jboolean NetI2pRouterRouter_get_ALLOW_DYNAMIC_KEYS(void);
#define NetI2pRouterRouter_ALLOW_DYNAMIC_KEYS false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouter, ALLOW_DYNAMIC_KEYS, jboolean)

inline jlong NetI2pRouterRouter_get_LIVELINESS_DELAY(void);
#define NetI2pRouterRouter_LIVELINESS_DELAY 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouter, LIVELINESS_DELAY, jlong)

__attribute__((unused)) static void NetI2pRouterRouter_startupStuff(NetI2pRouterRouter *self);

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterRouter_getConfigWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *filename);

__attribute__((unused)) static void NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(NetI2pRouterRouter *self, NetI2pRouterRouter_State *state);

__attribute__((unused)) static void NetI2pRouterRouter_locked_rebuildRouterInfoWithBoolean_(NetI2pRouterRouter *self, jboolean blockingRebuild);

__attribute__((unused)) static void NetI2pRouterRouter_warmupCrypto(NetI2pRouterRouter *self);

__attribute__((unused)) static void NetI2pRouterRouter_finalShutdownWithInt_(NetI2pRouterRouter *self, jint exitCode);

__attribute__((unused)) static JavaIoFile *NetI2pRouterRouter_getPingFile(NetI2pRouterRouter *self);

__attribute__((unused)) static jboolean NetI2pRouterRouter_isOnlyRouterRunning(NetI2pRouterRouter *self);

__attribute__((unused)) static void NetI2pRouterRouter_beginMarkingLiveliness(NetI2pRouterRouter *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter__Annotations$4(void);

typedef NS_ENUM(NSUInteger, NetI2pRouterRouter_State_Enum) {
  NetI2pRouterRouter_State_Enum_UNINITIALIZED = 0,
  NetI2pRouterRouter_State_Enum_INITIALIZED = 1,
  NetI2pRouterRouter_State_Enum_STARTING_1 = 2,
  NetI2pRouterRouter_State_Enum_STARTING_2 = 3,
  NetI2pRouterRouter_State_Enum_STARTING_3 = 4,
  NetI2pRouterRouter_State_Enum_NETDB_READY = 5,
  NetI2pRouterRouter_State_Enum_EXPL_TUNNELS_READY = 6,
  NetI2pRouterRouter_State_Enum_RUNNING = 7,
  NetI2pRouterRouter_State_Enum_RESTARTING = 8,
  NetI2pRouterRouter_State_Enum_GRACEFUL_SHUTDOWN = 9,
  NetI2pRouterRouter_State_Enum_FINAL_SHUTDOWN_1 = 10,
  NetI2pRouterRouter_State_Enum_FINAL_SHUTDOWN_2 = 11,
  NetI2pRouterRouter_State_Enum_FINAL_SHUTDOWN_3 = 12,
  NetI2pRouterRouter_State_Enum_STOPPED = 13,
};

@interface NetI2pRouterRouter_State : JavaLangEnum

@property (readonly, class, nonnull) NetI2pRouterRouter_State *UNINITIALIZED NS_SWIFT_NAME(UNINITIALIZED);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *INITIALIZED NS_SWIFT_NAME(INITIALIZED);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *STARTING_1 NS_SWIFT_NAME(STARTING_1);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *STARTING_2 NS_SWIFT_NAME(STARTING_2);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *STARTING_3 NS_SWIFT_NAME(STARTING_3);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *NETDB_READY NS_SWIFT_NAME(NETDB_READY);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *EXPL_TUNNELS_READY NS_SWIFT_NAME(EXPL_TUNNELS_READY);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *RUNNING NS_SWIFT_NAME(RUNNING);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *RESTARTING NS_SWIFT_NAME(RESTARTING);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *GRACEFUL_SHUTDOWN NS_SWIFT_NAME(GRACEFUL_SHUTDOWN);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *FINAL_SHUTDOWN_1 NS_SWIFT_NAME(FINAL_SHUTDOWN_1);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *FINAL_SHUTDOWN_2 NS_SWIFT_NAME(FINAL_SHUTDOWN_2);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *FINAL_SHUTDOWN_3 NS_SWIFT_NAME(FINAL_SHUTDOWN_3);
@property (readonly, class, nonnull) NetI2pRouterRouter_State *STOPPED NS_SWIFT_NAME(STOPPED);
+ (IOSObjectArray *)values;

+ (NetI2pRouterRouter_State *)valueOfWithNSString:(NSString *)name;

- (NetI2pRouterRouter_State_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterRouter_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterRouter_State *NetI2pRouterRouter_State_values_[];

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_UNINITIALIZED(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, UNINITIALIZED)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_INITIALIZED(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, INITIALIZED)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_STARTING_1(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, STARTING_1)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_STARTING_2(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, STARTING_2)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_STARTING_3(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, STARTING_3)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_NETDB_READY(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, NETDB_READY)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_EXPL_TUNNELS_READY(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, EXPL_TUNNELS_READY)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_RUNNING(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, RUNNING)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_RESTARTING(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, RESTARTING)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_GRACEFUL_SHUTDOWN(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_FINAL_SHUTDOWN_1(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_FINAL_SHUTDOWN_2(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_FINAL_SHUTDOWN_3(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3)

inline NetI2pRouterRouter_State *NetI2pRouterRouter_State_get_STOPPED(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterRouter_State, STOPPED)

__attribute__((unused)) static void NetI2pRouterRouter_State_initWithNSString_withInt_(NetI2pRouterRouter_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouter_State_values(void);

__attribute__((unused)) static NetI2pRouterRouter_State *NetI2pRouterRouter_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterRouter_State *NetI2pRouterRouter_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterRouter_State)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterRouter)

NSString *NetI2pRouterRouter_PROP_CONFIG_FILE = @"router.configLocation";
NSString *NetI2pRouterRouter_PROP_HIDDEN = @"router.hiddenMode";
NSString *NetI2pRouterRouter_PROP_HIDDEN_HIDDEN = @"router.isHidden";
NSString *NetI2pRouterRouter_PROP_DYNAMIC_KEYS = @"router.dynamicKeys";
NSString *NetI2pRouterRouter_PROP_REBUILD_KEYS = @"router.rebuildKeys";
NSString *NetI2pRouterRouter_PROP_IB_RANDOM_KEY = @"router.inboundPool.randomKey";
NSString *NetI2pRouterRouter_PROP_OB_RANDOM_KEY = @"router.outboundPool.randomKey";
NSString *NetI2pRouterRouter_UPDATE_FILE = @"i2pupdate.zip";
NSString *NetI2pRouterRouter_PROP_FORCE_BWCLASS = @"router.forceBandwidthClass";
NSString *NetI2pRouterRouter_PROP_FORCE_UNREACHABLE = @"router.forceUnreachable";
NSString *NetI2pRouterRouter_PROP_BANDWIDTH_SHARE_PERCENTAGE = @"router.sharePercentage";

@implementation NetI2pRouterRouter

+ (NSString *)PROP_CONFIG_FILE {
  return NetI2pRouterRouter_PROP_CONFIG_FILE;
}

+ (jlong)CLOCK_FUDGE_FACTOR {
  return NetI2pRouterRouter_CLOCK_FUDGE_FACTOR;
}

+ (jint)COALESCE_TIME {
  return NetI2pRouterRouter_COALESCE_TIME;
}

+ (NSString *)PROP_HIDDEN {
  return NetI2pRouterRouter_PROP_HIDDEN;
}

+ (NSString *)PROP_HIDDEN_HIDDEN {
  return NetI2pRouterRouter_PROP_HIDDEN_HIDDEN;
}

+ (NSString *)PROP_DYNAMIC_KEYS {
  return NetI2pRouterRouter_PROP_DYNAMIC_KEYS;
}

+ (NSString *)PROP_REBUILD_KEYS {
  return NetI2pRouterRouter_PROP_REBUILD_KEYS;
}

+ (NSString *)PROP_IB_RANDOM_KEY {
  return NetI2pRouterRouter_PROP_IB_RANDOM_KEY;
}

+ (NSString *)PROP_OB_RANDOM_KEY {
  return NetI2pRouterRouter_PROP_OB_RANDOM_KEY;
}

+ (NSString *)UPDATE_FILE {
  return NetI2pRouterRouter_UPDATE_FILE;
}

+ (jchar)CAPABILITY_BW12 {
  return NetI2pRouterRouter_CAPABILITY_BW12;
}

+ (jchar)CAPABILITY_BW32 {
  return NetI2pRouterRouter_CAPABILITY_BW32;
}

+ (jchar)CAPABILITY_BW64 {
  return NetI2pRouterRouter_CAPABILITY_BW64;
}

+ (jchar)CAPABILITY_BW128 {
  return NetI2pRouterRouter_CAPABILITY_BW128;
}

+ (jchar)CAPABILITY_BW256 {
  return NetI2pRouterRouter_CAPABILITY_BW256;
}

+ (jchar)CAPABILITY_BW512 {
  return NetI2pRouterRouter_CAPABILITY_BW512;
}

+ (jchar)CAPABILITY_BW_UNLIMITED {
  return NetI2pRouterRouter_CAPABILITY_BW_UNLIMITED;
}

+ (NSString *)PROP_FORCE_BWCLASS {
  return NetI2pRouterRouter_PROP_FORCE_BWCLASS;
}

+ (jchar)CAPABILITY_REACHABLE {
  return NetI2pRouterRouter_CAPABILITY_REACHABLE;
}

+ (jchar)CAPABILITY_UNREACHABLE {
  return NetI2pRouterRouter_CAPABILITY_UNREACHABLE;
}

+ (NSString *)PROP_FORCE_UNREACHABLE {
  return NetI2pRouterRouter_PROP_FORCE_UNREACHABLE;
}

+ (jchar)CAPABILITY_NEW_TUNNEL {
  return NetI2pRouterRouter_CAPABILITY_NEW_TUNNEL;
}

+ (jint)MIN_BW_K {
  return NetI2pRouterRouter_MIN_BW_K;
}

+ (jint)MIN_BW_L {
  return NetI2pRouterRouter_MIN_BW_L;
}

+ (jint)MIN_BW_M {
  return NetI2pRouterRouter_MIN_BW_M;
}

+ (jint)MIN_BW_N {
  return NetI2pRouterRouter_MIN_BW_N;
}

+ (jint)MIN_BW_O {
  return NetI2pRouterRouter_MIN_BW_O;
}

+ (jint)MIN_BW_P {
  return NetI2pRouterRouter_MIN_BW_P;
}

+ (jint)MIN_BW_X {
  return NetI2pRouterRouter_MIN_BW_X;
}

+ (jint)EXIT_GRACEFUL {
  return NetI2pRouterRouter_EXIT_GRACEFUL;
}

+ (jint)EXIT_HARD {
  return NetI2pRouterRouter_EXIT_HARD;
}

+ (jint)EXIT_OOM {
  return NetI2pRouterRouter_EXIT_OOM;
}

+ (jint)EXIT_HARD_RESTART {
  return NetI2pRouterRouter_EXIT_HARD_RESTART;
}

+ (jint)EXIT_GRACEFUL_RESTART {
  return NetI2pRouterRouter_EXIT_GRACEFUL_RESTART;
}

+ (NSString *)PROP_BANDWIDTH_SHARE_PERCENTAGE {
  return NetI2pRouterRouter_PROP_BANDWIDTH_SHARE_PERCENTAGE;
}

+ (jint)DEFAULT_SHARE_PERCENTAGE {
  return NetI2pRouterRouter_DEFAULT_SHARE_PERCENTAGE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterRouter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)envProps {
  NetI2pRouterRouter_initWithJavaUtilProperties_(self, envProps);
  return self;
}

- (instancetype)initWithNSString:(NSString *)configFilename {
  NetI2pRouterRouter_initWithNSString_(self, configFilename);
  return self;
}

- (instancetype)initWithNSString:(NSString *)configFilename
          withJavaUtilProperties:(JavaUtilProperties *)envProps {
  NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(self, configFilename, envProps);
  return self;
}

- (void)startupStuff {
  NetI2pRouterRouter_startupStuff(self);
}

+ (void)clearCaches {
  NetI2pRouterRouter_clearCaches();
}

- (void)setKillVMOnEndWithBoolean:(jboolean)shouldDie {
  _killVMOnEnd_ = shouldDie;
}

- (jboolean)getKillVMOnEnd {
  return _killVMOnEnd_;
}

- (NSString *)getConfigFilename {
  return _configFilename_;
}

- (void)setConfigFilenameWithNSString:(NSString *)filename {
  JreStrongAssign(&_configFilename_, filename);
}

- (NSString *)getConfigSettingWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(_config_)) getWithId:name];
}

- (void)setConfigSettingWithNSString:(NSString *)name
                        withNSString:(NSString *)value {
  [((id<JavaUtilMap>) nil_chk(_config_)) putWithId:name withId:value];
}

- (void)removeConfigSettingWithNSString:(NSString *)name {
  [((id<JavaUtilMap>) nil_chk(_config_)) removeWithId:name];
  [((NetI2pRouterRouterContext *) nil_chk(_context_)) removePropertyWithNSString:name];
}

- (id<JavaUtilSet>)getConfigSettings {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<JavaUtilMap>) nil_chk(_config_)) keySet]);
}

- (id<JavaUtilMap>)getConfigMap {
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(_config_);
}

- (NetI2pDataRouterRouterInfo *)getRouterInfo {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_routerInfoLock_)) readLock])) lock];
  @try {
    return _routerInfo_;
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([_routerInfoLock_ readLock])) unlock];
  }
}

- (void)setRouterInfoWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_routerInfoLock_)) writeLock])) lock];
  @try {
    JreStrongAssign(&_routerInfo_, info);
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([_routerInfoLock_ writeLock])) unlock];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@", @"setRouterInfo() : ", info) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
  if (info != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterTasksPersistRouterInfoJob_initWithNetI2pRouterRouterContext_(_context_)];
}

- (jlong)getWhenStarted {
  return _started_;
}

- (jlong)getUptime {
  if (_started_ <= 0) return 1000;
  return JavaLangMath_maxWithLong_withLong_(1000, JavaLangSystem_currentTimeMillis() - _started_);
}

- (jint)getNetworkID {
  return _networkID_;
}

- (NetI2pRouterRouterContext *)getContext {
  return _context_;
}

- (void)runRouter {
  @synchronized(self) {
    @synchronized(_stateLock_) {
      if (_state_ != JreLoadEnum(NetI2pRouterRouter_State, INITIALIZED)) @throw create_JavaLangIllegalStateException_init();
      NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, STARTING_1));
    }
    NSString *last = [((id<JavaUtilMap>) nil_chk(_config_)) getWithId:@"router.previousFullVersion"];
    if (last != nil) {
      [((NetI2pRouterUtilEventLog *) nil_chk(_eventLog_)) addEventWithNSString:NetI2pRouterUtilEventLog_UPDATED withNSString:JreStrcat("$$$$", @"from ", last, @" to ", NetI2pRouterRouterVersion_FULL_VERSION)];
      [self saveConfigWithNSString:@"router.previousFullVersion" withNSString:nil];
    }
    [((NetI2pRouterUtilEventLog *) nil_chk(_eventLog_)) addEventWithNSString:NetI2pRouterUtilEventLog_STARTED withNSString:NetI2pRouterRouterVersion_FULL_VERSION];
    NetI2pRouterRouter_startupStuff(self);
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, STARTING_2));
    _started_ = JavaLangSystem_currentTimeMillis();
    @try {
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) addShutdownHookWithJavaLangThread:_shutdownHook_];
    }
    @catch (JavaLangIllegalStateException *ise) {
    }
    if (!NetI2pUtilSystemVersion_isAndroid()) NetI2pUtilI2PThread_addOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(_oomListener_);
    [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npGarlicMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:create_NetI2pRouterMessageGarlicMessageHandler_initWithNetI2pRouterRouterContext_(_context_)];
    if ([_context_ getBooleanPropertyWithNSString:NetI2pRouterRouter_PROP_REBUILD_KEYS]) [self killKeys];
    [((NetI2pRouterMessageValidator *) nil_chk([_context_ messageValidator])) startup];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([_context_ tunnelDispatcher])) startup];
    [((NetI2pRouterInNetMessagePool *) nil_chk([_context_ inNetMessagePool])) startup];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) runQueueWithInt:1];
    [((NetI2pUtilSimpleTimer2 *) nil_chk([_context_ simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTasksCoalesceStatsEvent_initWithNetI2pRouterRouterContext_(_context_) withLong:NetI2pRouterRouter_COALESCE_TIME];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterTasksUpdateRoutingKeyModifierJob_initWithNetI2pRouterRouterContext_(_context_)];
    [((NetI2pRouterBlocklist *) nil_chk([_context_ blocklist])) startup];
    @synchronized(_configFileLock_) {
      if (![_config_ containsKeyWithId:NetI2pRouterRouter_PROP_IB_RANDOM_KEY]) {
        IOSByteArray *rk = [IOSByteArray arrayWithLength:32];
        [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextBytesWithByteArray:rk];
        [_config_ putWithId:NetI2pRouterRouter_PROP_IB_RANDOM_KEY withId:NetI2pDataBase64_encodeWithByteArray_(rk)];
        [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextBytesWithByteArray:rk];
        [_config_ putWithId:NetI2pRouterRouter_PROP_OB_RANDOM_KEY withId:NetI2pDataBase64_encodeWithByteArray_(rk)];
        [self saveConfig];
      }
    }
    jlong before = JavaLangSystem_currentTimeMillis();
    [((NetI2pTimeTimestamper *) nil_chk([((NetI2pUtilClock *) nil_chk([_context_ clock])) getTimestamper])) waitForInitialization];
    jlong waited = JavaLangSystem_currentTimeMillis() - before;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$J$", @"Waited ", waited, @"ms to initialize")];
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, STARTING_3));
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterStartupStartupJob_initWithNetI2pRouterRouterContext_(_context_)];
  }
}

- (void)readConfig {
  @synchronized(_configFileLock_) {
    NSString *f = [self getConfigFilename];
    JavaUtilProperties *config = NetI2pRouterRouter_getConfigWithNetI2pRouterRouterContext_withNSString_(_context_, f);
    id<JavaUtilMap> foo = _config_;
    [((id<JavaUtilMap>) nil_chk(foo)) putAllWithJavaUtilMap:config];
  }
}

+ (JavaUtilProperties *)getConfigWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                  withNSString:(NSString *)filename {
  return NetI2pRouterRouter_getConfigWithNetI2pRouterRouterContext_withNSString_(ctx, filename);
}

- (void)changeStateWithNetI2pRouterRouter_State:(NetI2pRouterRouter_State *)state {
  NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, state);
}

- (jboolean)isAlive {
  @synchronized(_stateLock_) {
    return [((id<JavaUtilSet>) nil_chk(NetI2pRouterRouter_STATES_ALIVE)) containsWithId:_state_];
  }
}

- (void)setIsAlive {
  NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, RUNNING));
}

- (void)setNetDbReady {
  @synchronized(_stateLock_) {
    if (_state_ == JreLoadEnum(NetI2pRouterRouter_State, STARTING_3)) NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, NETDB_READY));
    else if (_state_ == JreLoadEnum(NetI2pRouterRouter_State, EXPL_TUNNELS_READY)) NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, RUNNING));
  }
}

- (void)setExplTunnelsReady {
  @synchronized(_stateLock_) {
    if (_state_ == JreLoadEnum(NetI2pRouterRouter_State, STARTING_3)) NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, EXPL_TUNNELS_READY));
    else if (_state_ == JreLoadEnum(NetI2pRouterRouter_State, NETDB_READY)) NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, RUNNING));
  }
}

- (jboolean)gracefulShutdownInProgress {
  @synchronized(_stateLock_) {
    return [((id<JavaUtilSet>) nil_chk(NetI2pRouterRouter_STATES_GRACEFUL)) containsWithId:_state_];
  }
}

- (jboolean)isFinalShutdownInProgress {
  @synchronized(_stateLock_) {
    return [((id<JavaUtilSet>) nil_chk(NetI2pRouterRouter_STATES_FINAL)) containsWithId:_state_];
  }
}

- (void)rebuildRouterInfo {
  [self rebuildRouterInfoWithBoolean:false];
}

- (void)rebuildRouterInfoWithBoolean:(jboolean)blockingRebuild {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Rebuilding new routerInfo"];
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_routerInfoLock_)) writeLock])) lock];
  @try {
    NetI2pRouterRouter_locked_rebuildRouterInfoWithBoolean_(self, blockingRebuild);
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([_routerInfoLock_ writeLock])) unlock];
  }
}

- (void)locked_rebuildRouterInfoWithBoolean:(jboolean)blockingRebuild {
  NetI2pRouterRouter_locked_rebuildRouterInfoWithBoolean_(self, blockingRebuild);
}

- (NetI2pRouterCryptoFamilyKeyCrypto *)getFamilyKeyCrypto {
  @synchronized(_familyKeyLock_) {
    if (_familyKeyCrypto_ == nil) {
      if (!_familyKeyCryptoFail_) {
        @try {
          JreStrongAssignAndConsume(&_familyKeyCrypto_, new_NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(_context_));
        }
        @catch (JavaSecurityGeneralSecurityException *gse) {
          [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Failed to initialize family key crypto" withJavaLangThrowable:gse];
          _familyKeyCryptoFail_ = true;
        }
      }
    }
  }
  return _familyKeyCrypto_;
}

- (jchar)getBandwidthClass {
  jint bwLim = JavaLangMath_minWithInt_withInt_([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) bandwidthLimiter])) getInboundKBytesPerSecond], [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([_context_ bandwidthLimiter])) getOutboundKBytesPerSecond]);
  bwLim = JreFpToInt((bwLim * [self getSharePercentage]));
  NSString *force = [_context_ getPropertyWithNSString:NetI2pRouterRouter_PROP_FORCE_BWCLASS];
  if (force != nil && [force java_length] > 0) {
    return [force charAtWithInt:0];
  }
  else if (bwLim < NetI2pRouterRouter_MIN_BW_L) {
    return NetI2pRouterRouter_CAPABILITY_BW12;
  }
  else if (bwLim <= NetI2pRouterRouter_MIN_BW_M) {
    return NetI2pRouterRouter_CAPABILITY_BW32;
  }
  else if (bwLim <= NetI2pRouterRouter_MIN_BW_N) {
    return NetI2pRouterRouter_CAPABILITY_BW64;
  }
  else if (bwLim <= NetI2pRouterRouter_MIN_BW_O) {
    return NetI2pRouterRouter_CAPABILITY_BW128;
  }
  else if (bwLim <= NetI2pRouterRouter_MIN_BW_P) {
    return NetI2pRouterRouter_CAPABILITY_BW256;
  }
  else if (bwLim <= NetI2pRouterRouter_MIN_BW_X) {
    return NetI2pRouterRouter_CAPABILITY_BW512;
  }
  else {
    return NetI2pRouterRouter_CAPABILITY_BW_UNLIMITED;
  }
}

- (NSString *)getCapabilities {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(4);
  jchar bw = [self getBandwidthClass];
  [rv appendWithChar:bw];
  if ([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) floodfillEnabled] && ![_context_ getBooleanPropertyWithNSString:@"router.hideFloodfillParticipant"]) [rv appendWithChar:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL];
  if ([_context_ getBooleanPropertyWithNSString:NetI2pRouterRouter_PROP_HIDDEN]) [rv appendWithChar:NetI2pDataRouterRouterInfo_CAPABILITY_HIDDEN];
  if ([_context_ getBooleanPropertyWithNSString:NetI2pRouterRouter_PROP_FORCE_UNREACHABLE]) {
    [rv appendWithChar:NetI2pRouterRouter_CAPABILITY_UNREACHABLE];
    return [rv description];
  }
  switch ([[((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) getStatus] ordinal]) {
    case NetI2pRouterCommSystemFacade_Status_Enum_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
    [rv appendWithChar:NetI2pRouterRouter_CAPABILITY_REACHABLE];
    break;
    case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
    case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
    [rv appendWithChar:NetI2pRouterRouter_CAPABILITY_UNREACHABLE];
    break;
    case NetI2pRouterCommSystemFacade_Status_Enum_DISCONNECTED:
    case NetI2pRouterCommSystemFacade_Status_Enum_HOSED:
    case NetI2pRouterCommSystemFacade_Status_Enum_UNKNOWN:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
    default:
    break;
  }
  return [rv description];
}

- (jboolean)isHidden {
  if ([((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:NetI2pRouterRouter_PROP_HIDDEN]) return true;
  NSString *h = [_context_ getPropertyWithNSString:NetI2pRouterRouter_PROP_HIDDEN_HIDDEN];
  if (h != nil) return JavaLangBoolean_parseBooleanWithNSString_(h);
  return [((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) isInBadCountry];
}

- (NetI2pRouterUtilEventLog *)eventLog {
  return _eventLog_;
}

- (void)killKeys {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(NetI2pRouterRouter__rebuildFiles))->size_; i++) {
    JavaIoFile *f = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(_context_)) getRouterDir], IOSObjectArray_Get(NetI2pRouterRouter__rebuildFiles, i));
    if ([f exists]) {
      jboolean removed = [f delete__];
      if (removed) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"INFO:  Removing old identity file: ", IOSObjectArray_Get(NetI2pRouterRouter__rebuildFiles, i))];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"ERROR: Could not remove old identity file: ", IOSObjectArray_Get(NetI2pRouterRouter__rebuildFiles, i))];
      }
    }
  }
  @synchronized(_configFileLock_) {
    [self removeConfigSettingWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT];
    [self removeConfigSettingWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT];
    [self removeConfigSettingWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP];
    [self removeConfigSettingWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV];
    [self removeConfigSettingWithNSString:NetI2pRouterRouter_PROP_IB_RANDOM_KEY];
    [self removeConfigSettingWithNSString:NetI2pRouterRouter_PROP_OB_RANDOM_KEY];
    [self removeConfigSettingWithNSString:NetI2pRouterRouter_PROP_REBUILD_KEYS];
    [self saveConfig];
  }
}

- (void)rebuildNewIdentity {
  @synchronized(self) {
    if (_shutdownHook_ != nil) {
      @try {
        [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) removeShutdownHookWithJavaLangThread:_shutdownHook_];
      }
      @catch (JavaLangIllegalStateException *ise) {
      }
    }
    [self killKeys];
    for (id<JavaLangRunnable> __strong task in nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) getShutdownTasks])) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$@", @"Running shutdown task ", [((id<JavaLangRunnable>) nil_chk(task)) java_getClass])];
      @try {
        [((id<JavaLangRunnable>) nil_chk(task)) run];
      }
      @catch (JavaLangThrowable *t) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error running shutdown task" withJavaLangThrowable:t];
      }
    }
    [_context_ removeShutdownTasks];
    if ([_context_ hasWrapper]) [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Restarting with new router identity"];
    else [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Shutting down because old router identity was invalid - restart I2P"];
    NetI2pRouterRouter_finalShutdownWithInt_(self, NetI2pRouterRouter_EXIT_HARD_RESTART);
  }
}

- (void)warmupCrypto {
  NetI2pRouterRouter_warmupCrypto(self);
}

- (void)shutdownWithInt:(jint)exitCode {
  @synchronized(self) {
    if (exitCode < 0) @throw create_JavaLangIllegalArgumentException_init();
    @synchronized(_stateLock_) {
      if (_state_ == JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1) || _state_ == JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2) || _state_ == JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3) || _state_ == JreLoadEnum(NetI2pRouterRouter_State, STOPPED)) return;
      NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1));
    }
    [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) throttle])) setShutdownStatus];
    if (_shutdownHook_ != nil) {
      @try {
        [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) removeShutdownHookWithJavaLangThread:_shutdownHook_];
      }
      @catch (JavaLangIllegalStateException *ise) {
      }
    }
    [self shutdown2WithInt:exitCode];
  }
}

- (void)shutdown2WithInt:(jint)exitCode {
  @synchronized(self) {
    if (exitCode < 0) @throw create_JavaLangIllegalArgumentException_init();
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2));
    jint priority = (exitCode == NetI2pRouterRouter_EXIT_OOM) ? JavaLangThread_MAX_PRIORITY - 1 : JavaLangThread_NORM_PRIORITY + 2;
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setPriorityWithInt:priority];
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$IC", @"Starting final shutdown(", exitCode, ')')];
    if (_killVMOnEnd_) {
      @try {
        [(create_NetI2pRouterTasksSpinner_init()) start];
      }
      @catch (JavaLangThrowable *t) {
      }
    }
    [((NetI2pRouterRouterClock *) nil_chk(((NetI2pRouterRouterClock *) cast_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock], [NetI2pRouterRouterClock class])))) removeShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:self];
    [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) saveSeed];
    NetI2pUtilI2PThread_removeOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(_oomListener_);
    JavaUtilLinkedList *tasks = create_JavaUtilLinkedList_init();
    for (id<JavaLangRunnable> __strong task in nil_chk([_context_ getShutdownTasks])) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$@", @"Running shutdown task ", [((id<JavaLangRunnable>) nil_chk(task)) java_getClass])];
      @try {
        JavaLangThread *t = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(task, JreStrcat("$$", @"Shutdown task ", [[((id<JavaLangRunnable>) nil_chk(task)) java_getClass] getName]));
        [t setDaemonWithBoolean:true];
        [t start];
        [tasks addWithId:t];
      }
      @catch (JavaLangThrowable *t) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error running shutdown task" withJavaLangThrowable:t];
      }
    }
    jlong waitSecs = NetI2pRouterRouter_SHUTDOWN_WAIT_SECS;
    if (NetI2pUtilSystemVersion_isARM()) waitSecs *= 2;
    jlong maxWait = JavaLangSystem_currentTimeMillis() + (waitSecs * 1000);
    JavaLangThread *th;
    while ((th = [tasks poll]) != nil) {
      jlong toWait = maxWait - JavaLangSystem_currentTimeMillis();
      if (toWait <= 0) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$J$", @"Shutdown tasks took more than ", waitSecs, @" seconds to run")];
        [tasks clear];
        break;
      }
      @try {
        [((JavaLangThread *) nil_chk(th)) joinWithLong:toWait];
      }
      @catch (JavaLangInterruptedException *ie) {
      }
      if ([th isAlive]) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$J$$", @"Shutdown task took more than ", waitSecs, @" seconds to run: ", [th getName])];
        [tasks clear];
        break;
      }
      else if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) {
        [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$$", @"Shutdown task complete: ", [th getName])];
      }
    }
    if (![((NSString *) nil_chk(NetI2pRouterRouterVersion_VERSION)) isEqual:[((id<JavaUtilMap>) nil_chk(_config_)) getWithId:@"router.previousVersion"]]) {
      [self saveConfigWithNSString:@"router.previousVersion" withNSString:NetI2pRouterRouterVersion_VERSION];
    }
    [_context_ removeShutdownTasks];
    @try {
      [((NetI2pRouterClientManagerFacade *) nil_chk([_context_ clientManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the client manager" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pClientNamingNamingService *) nil_chk([_context_ namingService])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the naming service" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the job queue" withJavaLangThrowable:t];
    }
    @try {
      [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([_context_ tunnelManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the tunnel manager" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([_context_ tunnelDispatcher])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the tunnel dispatcher" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the networkDb" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the comm system" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([_context_ bandwidthLimiter])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the comm system" withJavaLangThrowable:t];
    }
    @try {
      [((id<NetI2pRouterPeerManagerFacade>) nil_chk([_context_ peerManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the peer manager" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([_context_ messageRegistry])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the message registry" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterMessageValidator *) nil_chk([_context_ messageValidator])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the message validator" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterInNetMessagePool *) nil_chk([_context_ inNetMessagePool])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the inbound net pool" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterClientMessagePool *) nil_chk([_context_ clientMessagePool])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the client msg pool" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pCryptoSessionKeyManager *) nil_chk([_context_ sessionKeyManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the session key manager" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the message history logger" withJavaLangThrowable:t];
    }
    @try {
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error shutting down the stats manager" withJavaLangThrowable:t];
    }
    [_context_ deleteTempDir];
    id<JavaUtilList> contexts = NetI2pRouterRouterContext_getContexts();
    [((id<JavaUtilList>) nil_chk(contexts)) removeWithId:_context_];
    @try {
      [((NetI2pCryptoElGamalEngine *) nil_chk([_context_ elGamalEngine])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error shutting elGamal" withJavaLangThrowable:t];
    }
    if ([contexts isEmpty]) {
    }
    else {
      [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$I$", @"Warning - ", [contexts size], @" routers remaining in this JVM, not releasing all resources")];
    }
    @try {
      [((NetI2pUtilFortunaRandomSource *) nil_chk(((NetI2pUtilFortunaRandomSource *) cast_chk([_context_ random], [NetI2pUtilFortunaRandomSource class])))) shutdown];
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error shutting random()" withJavaLangThrowable:t];
    }
    [((NetI2pRouterTasksRouterWatchdog *) nil_chk(_watchdog_)) shutdown];
    [((JavaLangThread *) nil_chk(_watchdogThread_)) interrupt];
    [((NetI2pRouterUtilEventLog *) nil_chk(_eventLog_)) addEventWithNSString:NetI2pRouterUtilEventLog_STOPPED withNSString:JavaLangInteger_toStringWithInt_(exitCode)];
    NetI2pRouterRouter_finalShutdownWithInt_(self, exitCode);
  }
}

- (void)finalShutdownWithInt:(jint)exitCode {
  NetI2pRouterRouter_finalShutdownWithInt_(self, exitCode);
}

- (void)shutdownGracefully {
  [self shutdownGracefullyWithInt:NetI2pRouterRouter_EXIT_GRACEFUL];
}

- (void)shutdownGracefullyWithInt:(jint)exitCode {
  if (exitCode < 0) @throw create_JavaLangIllegalArgumentException_init();
  @synchronized(_stateLock_) {
    if ([self isFinalShutdownInProgress]) return;
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN));
    _gracefulExitCode_ = exitCode;
  }
  [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) throttle])) setShutdownStatus];
  @synchronized(_gracefulShutdownDetector_) {
    [((NetI2pUtilI2PThread *) nil_chk(_gracefulShutdownDetector_)) java_notifyAll];
  }
}

- (void)cancelGracefulShutdown {
  @synchronized(_stateLock_) {
    if ([self isFinalShutdownInProgress]) return;
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, RUNNING));
    _gracefulExitCode_ = -1;
  }
  [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) throttle])) cancelShutdownStatus];
  @synchronized(_gracefulShutdownDetector_) {
    [((NetI2pUtilI2PThread *) nil_chk(_gracefulShutdownDetector_)) java_notifyAll];
  }
}

- (jint)scheduledGracefulExitCode {
  @synchronized(_stateLock_) {
    return _gracefulExitCode_;
  }
}

- (jlong)getShutdownTimeRemaining {
  @synchronized(_stateLock_) {
    if (_gracefulExitCode_ <= 0) return -1;
    if (_gracefulExitCode_ == NetI2pRouterRouter_EXIT_HARD || _gracefulExitCode_ == NetI2pRouterRouter_EXIT_HARD_RESTART) return 0;
  }
  jlong exp = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelManager])) getLastParticipatingExpiration];
  if (exp < 0) return 0;
  else return JavaLangMath_maxWithLong_withLong_(0, exp + 2 * NetI2pRouterRouter_CLOCK_FUDGE_FACTOR - [((NetI2pUtilClock *) nil_chk([_context_ clock])) now]);
}

- (jboolean)saveConfig {
  @try {
    JavaUtilProperties *ordered = create_NetI2pUtilOrderedProperties_init();
    @synchronized(_configFileLock_) {
      [ordered putAllWithJavaUtilMap:_config_];
      NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(ordered, create_JavaIoFile_initWithNSString_(_configFilename_));
    }
  }
  @catch (JavaIoIOException *ioe) {
    if (_log_ != nil) [_log_ errorWithNSString:JreStrcat("$$", @"Error saving the config to ", _configFilename_) withJavaLangThrowable:ioe];
    else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Error saving the config to ", _configFilename_, @": ", ioe)];
    return false;
  }
  return true;
}

- (jboolean)saveConfigWithNSString:(NSString *)name
                      withNSString:(NSString *)value {
  @synchronized(_configFileLock_) {
    if (value != nil) [((id<JavaUtilMap>) nil_chk(_config_)) putWithId:name withId:value];
    else [self removeConfigSettingWithNSString:name];
    return [self saveConfig];
  }
}

- (jboolean)saveConfigWithJavaUtilMap:(id<JavaUtilMap>)toAdd
               withJavaUtilCollection:(id<JavaUtilCollection>)toRemove {
  @synchronized(_configFileLock_) {
    if (toAdd != nil) [((id<JavaUtilMap>) nil_chk(_config_)) putAllWithJavaUtilMap:toAdd];
    if (toRemove != nil) {
      for (NSString * __strong s in toRemove) {
        [self removeConfigSettingWithNSString:s];
      }
    }
    return [self saveConfig];
  }
}

- (void)clockShiftWithLong:(jlong)delta {
  if (delta > -60 * 1000 && delta < 60 * 1000) return;
  @synchronized(_stateLock_) {
    if ([self gracefulShutdownInProgress] || ![self isAlive]) return;
  }
  [((NetI2pRouterUtilEventLog *) nil_chk(_eventLog_)) addEventWithNSString:NetI2pRouterUtilEventLog_CLOCK_SHIFT withNSString:JavaLangLong_toStringWithLong_(delta)];
  [((NetI2pDataRouterRouterKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerKeyGenerator])) generateDateBasedModData];
  if (delta > 0) [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", @"Restarting after large clock shift forward by ", NetI2pDataDataHelper_formatDurationWithLong_(delta))];
  else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", @"Restarting after large clock shift backward by ", NetI2pDataDataHelper_formatDurationWithLong_(0 - delta))];
  [self restart];
}

- (void)restart {
  @synchronized(self) {
    @synchronized(_stateLock_) {
      if ([self gracefulShutdownInProgress] || ![self isAlive]) return;
      NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, RESTARTING));
    }
    [((NetI2pRouterRouterClock *) nil_chk(((NetI2pRouterRouterClock *) cast_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock], [NetI2pRouterRouterClock class])))) removeShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:self];
    JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(create_NetI2pRouterTasksRestarter_initWithNetI2pRouterRouterContext_(_context_), @"Router Restart");
    [t setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
    [t start];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterRouter_mainWithNSStringArray_(args);
}

- (JavaIoFile *)getPingFile {
  return NetI2pRouterRouter_getPingFile(self);
}

- (jboolean)isOnlyRouterRunning {
  return NetI2pRouterRouter_isOnlyRouterRunning(self);
}

- (void)beginMarkingLiveliness {
  NetI2pRouterRouter_beginMarkingLiveliness(self);
}

- (jdouble)getSharePercentage {
  NSString *pct = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterRouter_PROP_BANDWIDTH_SHARE_PERCENTAGE];
  if (pct != nil) {
    @try {
      jdouble d = JavaLangDouble_parseDoubleWithNSString_(pct);
      if (d > 1) return d / 100.0;
      else return d;
    }
    @catch (JavaLangNumberFormatException *nfe) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Unable to get the share percentage"];
    }
  }
  return NetI2pRouterRouter_DEFAULT_SHARE_PERCENTAGE / 100.0;
}

- (jint)get1sRate {
  return [self get1sRateWithBoolean:false];
}

- (jint)get1sRateWithBoolean:(jboolean)outboundOnly {
  NetI2pRouterTransportFIFOBandwidthLimiter *bw = [((NetI2pRouterRouterContext *) nil_chk(_context_)) bandwidthLimiter];
  jint out = JreFpToInt([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(bw)) getSendBps]);
  if (outboundOnly) return out;
  return JreFpToInt(JavaLangMath_maxWithFloat_withFloat_(out, [bw getReceiveBps]));
}

- (jint)get1sRateIn {
  NetI2pRouterTransportFIFOBandwidthLimiter *bw = [((NetI2pRouterRouterContext *) nil_chk(_context_)) bandwidthLimiter];
  return JreFpToInt([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(bw)) getReceiveBps]);
}

- (jint)get15sRate {
  return [self get15sRateWithBoolean:false];
}

- (jint)get15sRateWithBoolean:(jboolean)outboundOnly {
  NetI2pRouterTransportFIFOBandwidthLimiter *bw = [((NetI2pRouterRouterContext *) nil_chk(_context_)) bandwidthLimiter];
  jint out = JreFpToInt([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(bw)) getSendBps15s]);
  if (outboundOnly) return out;
  return JreFpToInt(JavaLangMath_maxWithFloat_withFloat_(out, [bw getReceiveBps15s]));
}

- (jint)get15sRateIn {
  NetI2pRouterTransportFIFOBandwidthLimiter *bw = [((NetI2pRouterRouterContext *) nil_chk(_context_)) bandwidthLimiter];
  return JreFpToInt([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(bw)) getReceiveBps15s]);
}

- (jint)get1mRate {
  return [self get1mRateWithBoolean:false];
}

- (jint)get1mRateWithBoolean:(jboolean)outboundOnly {
  jint send = 0;
  NetI2pStatStatManager *mgr = [((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager];
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk(mgr)) getRateWithNSString:@"bw.sendRate"];
  if (rs != nil) send = JreFpToInt([((NetI2pStatRate *) nil_chk([rs getRateWithLong:1 * 60 * 1000])) getAverageValue]);
  if (outboundOnly) return send;
  jint recv = 0;
  rs = [mgr getRateWithNSString:@"bw.recvRate"];
  if (rs != nil) recv = JreFpToInt([((NetI2pStatRate *) nil_chk([rs getRateWithLong:1 * 60 * 1000])) getAverageValue]);
  return JavaLangMath_maxWithInt_withInt_(send, recv);
}

- (jint)get1mRateIn {
  NetI2pStatStatManager *mgr = [((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager];
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk(mgr)) getRateWithNSString:@"bw.recvRate"];
  jint recv = 0;
  if (rs != nil) recv = JreFpToInt([((NetI2pStatRate *) nil_chk([rs getRateWithLong:1 * 60 * 1000])) getAverageValue]);
  return recv;
}

- (jint)get5mRate {
  return [self get5mRateWithBoolean:false];
}

- (jint)get5mRateWithBoolean:(jboolean)outboundOnly {
  jint send = 0;
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) getRateWithNSString:@"bw.sendRate"];
  if (rs != nil) send = JreFpToInt([((NetI2pStatRate *) nil_chk([rs getRateWithLong:5 * 60 * 1000])) getAverageValue]);
  if (outboundOnly) return send;
  jint recv = 0;
  rs = [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) getRateWithNSString:@"bw.recvRate"];
  if (rs != nil) recv = JreFpToInt([((NetI2pStatRate *) nil_chk([rs getRateWithLong:5 * 60 * 1000])) getAverageValue]);
  return JavaLangMath_maxWithInt_withInt_(send, recv);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_config_);
  RELEASE_(_configFilename_);
  RELEASE_(_routerInfo_);
  RELEASE_(_routerInfoLock_);
  RELEASE_(routerInfoFileLock_);
  RELEASE_(_configFileLock_);
  RELEASE_(_oomListener_);
  RELEASE_(_shutdownHook_);
  RELEASE_(_gracefulShutdownDetector_);
  RELEASE_(_watchdog_);
  RELEASE_(_watchdogThread_);
  RELEASE_(_eventLog_);
  RELEASE_(_stateLock_);
  RELEASE_(_state_);
  RELEASE_(_familyKeyCrypto_);
  RELEASE_(_familyKeyLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, 7, -1 },
    { NULL, "LNSString;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, 11, -1 },
    { NULL, "V", 0x1, 12, 1, -1, -1, 13, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouterContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCryptoFamilyKeyCrypto;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterUtilEventLog;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 27, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 39, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilProperties:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withJavaUtilProperties:);
  methods[4].selector = @selector(startupStuff);
  methods[5].selector = @selector(clearCaches);
  methods[6].selector = @selector(setKillVMOnEndWithBoolean:);
  methods[7].selector = @selector(getKillVMOnEnd);
  methods[8].selector = @selector(getConfigFilename);
  methods[9].selector = @selector(setConfigFilenameWithNSString:);
  methods[10].selector = @selector(getConfigSettingWithNSString:);
  methods[11].selector = @selector(setConfigSettingWithNSString:withNSString:);
  methods[12].selector = @selector(removeConfigSettingWithNSString:);
  methods[13].selector = @selector(getConfigSettings);
  methods[14].selector = @selector(getConfigMap);
  methods[15].selector = @selector(getRouterInfo);
  methods[16].selector = @selector(setRouterInfoWithNetI2pDataRouterRouterInfo:);
  methods[17].selector = @selector(getWhenStarted);
  methods[18].selector = @selector(getUptime);
  methods[19].selector = @selector(getNetworkID);
  methods[20].selector = @selector(getContext);
  methods[21].selector = @selector(runRouter);
  methods[22].selector = @selector(readConfig);
  methods[23].selector = @selector(getConfigWithNetI2pRouterRouterContext:withNSString:);
  methods[24].selector = @selector(changeStateWithNetI2pRouterRouter_State:);
  methods[25].selector = @selector(isAlive);
  methods[26].selector = @selector(setIsAlive);
  methods[27].selector = @selector(setNetDbReady);
  methods[28].selector = @selector(setExplTunnelsReady);
  methods[29].selector = @selector(gracefulShutdownInProgress);
  methods[30].selector = @selector(isFinalShutdownInProgress);
  methods[31].selector = @selector(rebuildRouterInfo);
  methods[32].selector = @selector(rebuildRouterInfoWithBoolean:);
  methods[33].selector = @selector(locked_rebuildRouterInfoWithBoolean:);
  methods[34].selector = @selector(getFamilyKeyCrypto);
  methods[35].selector = @selector(getBandwidthClass);
  methods[36].selector = @selector(getCapabilities);
  methods[37].selector = @selector(isHidden);
  methods[38].selector = @selector(eventLog);
  methods[39].selector = @selector(killKeys);
  methods[40].selector = @selector(rebuildNewIdentity);
  methods[41].selector = @selector(warmupCrypto);
  methods[42].selector = @selector(shutdownWithInt:);
  methods[43].selector = @selector(shutdown2WithInt:);
  methods[44].selector = @selector(finalShutdownWithInt:);
  methods[45].selector = @selector(shutdownGracefully);
  methods[46].selector = @selector(shutdownGracefullyWithInt:);
  methods[47].selector = @selector(cancelGracefulShutdown);
  methods[48].selector = @selector(scheduledGracefulExitCode);
  methods[49].selector = @selector(getShutdownTimeRemaining);
  methods[50].selector = @selector(saveConfig);
  methods[51].selector = @selector(saveConfigWithNSString:withNSString:);
  methods[52].selector = @selector(saveConfigWithJavaUtilMap:withJavaUtilCollection:);
  methods[53].selector = @selector(clockShiftWithLong:);
  methods[54].selector = @selector(restart);
  methods[55].selector = @selector(mainWithNSStringArray:);
  methods[56].selector = @selector(getPingFile);
  methods[57].selector = @selector(isOnlyRouterRunning);
  methods[58].selector = @selector(beginMarkingLiveliness);
  methods[59].selector = @selector(getSharePercentage);
  methods[60].selector = @selector(get1sRate);
  methods[61].selector = @selector(get1sRateWithBoolean:);
  methods[62].selector = @selector(get1sRateIn);
  methods[63].selector = @selector(get15sRate);
  methods[64].selector = @selector(get15sRateWithBoolean:);
  methods[65].selector = @selector(get15sRateIn);
  methods[66].selector = @selector(get1mRate);
  methods[67].selector = @selector(get1mRateWithBoolean:);
  methods[68].selector = @selector(get1mRateIn);
  methods[69].selector = @selector(get5mRate);
  methods[70].selector = @selector(get5mRateWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 40, -1 },
    { "_configFilename_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_routerInfo_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_routerInfoLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "routerInfoFileLock_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "_configFileLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_killVMOnEnd_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_gracefulExitCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_oomListener_", "LNetI2pUtilI2PThread_OOMEventListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_shutdownHook_", "LNetI2pRouterTasksShutdownHook;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_gracefulShutdownDetector_", "LNetI2pUtilI2PThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_watchdog_", "LNetI2pRouterTasksRouterWatchdog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_watchdogThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_eventLog_", "LNetI2pRouterUtilEventLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_stateLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_familyKeyCrypto_", "LNetI2pRouterCryptoFamilyKeyCrypto;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_familyKeyCryptoFail_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_familyKeyLock_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "PROP_CONFIG_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "CLOCK_FUDGE_FACTOR", "J", .constantValue.asLong = NetI2pRouterRouter_CLOCK_FUDGE_FACTOR, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_NETWORK_ID", "I", .constantValue.asInt = NetI2pRouterRouter_DEFAULT_NETWORK_ID, 0x1a, -1, -1, -1, -1 },
    { "PROP_NETWORK_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "_networkID_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "COALESCE_TIME", "I", .constantValue.asInt = NetI2pRouterRouter_COALESCE_TIME, 0x19, -1, -1, -1, -1 },
    { "PROP_HIDDEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "PROP_HIDDEN_HIDDEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "PROP_DYNAMIC_KEYS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "PROP_REBUILD_KEYS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "PROP_SHUTDOWN_IN_PROGRESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "PROP_IB_RANDOM_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "PROP_OB_RANDOM_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "EVENTLOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "PROP_JBIGI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "PROP_JBIGI_PROCESSOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "UPDATE_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "SHUTDOWN_WAIT_SECS", "I", .constantValue.asInt = NetI2pRouterRouter_SHUTDOWN_WAIT_SECS, 0x1a, -1, -1, -1, -1 },
    { "originalTimeZoneID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "STATES_ALIVE", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 55, 56, -1 },
    { "STATES_GRACEFUL", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 57, 56, -1 },
    { "STATES_FINAL", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 58, 56, -1 },
    { "CAPABILITY_BW12", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW12, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW32", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW32, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW64", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW64, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW128", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW128, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW256", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW256, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW512", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW512, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_BW_UNLIMITED", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_BW_UNLIMITED, 0x19, -1, -1, -1, -1 },
    { "PROP_FORCE_BWCLASS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "CAPABILITY_REACHABLE", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_REACHABLE, 0x19, -1, -1, -1, -1 },
    { "CAPABILITY_UNREACHABLE", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_UNREACHABLE, 0x19, -1, -1, -1, -1 },
    { "PROP_FORCE_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
    { "CAPABILITY_NEW_TUNNEL", "C", .constantValue.asUnichar = NetI2pRouterRouter_CAPABILITY_NEW_TUNNEL, 0x19, -1, -1, -1, 61 },
    { "MIN_BW_K", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_K, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_L", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_L, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_M", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_M, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_N", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_N, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_O", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_O, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_P", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_P, 0x19, -1, -1, -1, -1 },
    { "MIN_BW_X", "I", .constantValue.asInt = NetI2pRouterRouter_MIN_BW_X, 0x19, -1, -1, -1, -1 },
    { "_rebuildFiles", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "EXIT_GRACEFUL", "I", .constantValue.asInt = NetI2pRouterRouter_EXIT_GRACEFUL, 0x19, -1, -1, -1, -1 },
    { "EXIT_HARD", "I", .constantValue.asInt = NetI2pRouterRouter_EXIT_HARD, 0x19, -1, -1, -1, -1 },
    { "EXIT_OOM", "I", .constantValue.asInt = NetI2pRouterRouter_EXIT_OOM, 0x19, -1, -1, -1, -1 },
    { "EXIT_HARD_RESTART", "I", .constantValue.asInt = NetI2pRouterRouter_EXIT_HARD_RESTART, 0x19, -1, -1, -1, -1 },
    { "EXIT_GRACEFUL_RESTART", "I", .constantValue.asInt = NetI2pRouterRouter_EXIT_GRACEFUL_RESTART, 0x19, -1, -1, -1, -1 },
    { "ALLOW_DYNAMIC_KEYS", "Z", .constantValue.asBOOL = NetI2pRouterRouter_ALLOW_DYNAMIC_KEYS, 0x1a, -1, -1, -1, -1 },
    { "LIVELINESS_DELAY", "J", .constantValue.asLong = NetI2pRouterRouter_LIVELINESS_DELAY, 0x1a, -1, -1, -1, -1 },
    { "PROP_BANDWIDTH_SHARE_PERCENTAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "DEFAULT_SHARE_PERCENTAGE", "I", .constantValue.asInt = NetI2pRouterRouter_DEFAULT_SHARE_PERCENTAGE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilProperties;", "LNSString;", "LNSString;LJavaUtilProperties;", "setKillVMOnEnd", "Z", (void *)&NetI2pRouterRouter__Annotations$0, "setConfigFilename", (void *)&NetI2pRouterRouter__Annotations$1, "getConfigSetting", "setConfigSetting", "LNSString;LNSString;", (void *)&NetI2pRouterRouter__Annotations$2, "removeConfigSetting", (void *)&NetI2pRouterRouter__Annotations$3, "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setRouterInfo", "LNetI2pDataRouterRouterInfo;", "getConfig", "LNetI2pRouterRouterContext;LNSString;", "changeState", "LNetI2pRouterRouter_State;", "rebuildRouterInfo", "locked_rebuildRouterInfo", "shutdown", "I", "shutdown2", "finalShutdown", "shutdownGracefully", "saveConfig", "LJavaUtilMap;LJavaUtilCollection;", "(Ljava/util/Map;Ljava/util/Collection<Ljava/lang/String;>;)Z", "clockShift", "J", "main", "[LNSString;", "get1sRate", "get15sRate", "get1mRate", "get5mRate", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &NetI2pRouterRouter_PROP_CONFIG_FILE, &NetI2pRouterRouter_PROP_NETWORK_ID, &NetI2pRouterRouter_PROP_HIDDEN, &NetI2pRouterRouter_PROP_HIDDEN_HIDDEN, &NetI2pRouterRouter_PROP_DYNAMIC_KEYS, &NetI2pRouterRouter_PROP_REBUILD_KEYS, &NetI2pRouterRouter_PROP_SHUTDOWN_IN_PROGRESS, &NetI2pRouterRouter_PROP_IB_RANDOM_KEY, &NetI2pRouterRouter_PROP_OB_RANDOM_KEY, &NetI2pRouterRouter_EVENTLOG, &NetI2pRouterRouter_PROP_JBIGI, &NetI2pRouterRouter_PROP_JBIGI_PROCESSOR, &NetI2pRouterRouter_UPDATE_FILE, &NetI2pRouterRouter_originalTimeZoneID, &NetI2pRouterRouter_STATES_ALIVE, "Ljava/util/Set<Lnet/i2p/router/Router$State;>;", &NetI2pRouterRouter_STATES_GRACEFUL, &NetI2pRouterRouter_STATES_FINAL, &NetI2pRouterRouter_PROP_FORCE_BWCLASS, &NetI2pRouterRouter_PROP_FORCE_UNREACHABLE, (void *)&NetI2pRouterRouter__Annotations$4, &NetI2pRouterRouter__rebuildFiles, &NetI2pRouterRouter_PROP_BANDWIDTH_SHARE_PERCENTAGE };
  static const J2ObjcClassInfo _NetI2pRouterRouter = { "Router", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 71, 73, -1, 21, -1, -1, -1 };
  return &_NetI2pRouterRouter;
}

+ (void)initialize {
  if (self == [NetI2pRouterRouter class]) {
    {
      if (JavaLangSystem_getPropertyWithNSString_(@"I2P_DISABLE_DNS_CACHE_OVERRIDE") == nil) {
        NSString *DNS_CACHE_TIME = JavaLangInteger_toStringWithInt_(2 * 60 * 60);
        NSString *DNS_NEG_CACHE_TIME = JavaLangInteger_toStringWithInt_(30 * 60);
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"sun.net.inetaddr.ttl", DNS_CACHE_TIME);
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"sun.net.inetaddr.negative.ttl", DNS_NEG_CACHE_TIME);
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"networkaddress.cache.ttl", DNS_CACHE_TIME);
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"networkaddress.cache.negative.ttl", DNS_NEG_CACHE_TIME);
      }
      if (JavaLangSystem_getPropertyWithNSString_(@"I2P_DISABLE_HTTP_AGENT_OVERRIDE") == nil) {
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"http.agent", @"I2P");
      }
      if (JavaLangSystem_getPropertyWithNSString_(@"I2P_DISABLE_HTTP_KEEPALIVE_OVERRIDE") == nil) {
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"http.keepAlive", @"false");
      }
      JreStrongAssign(&NetI2pRouterRouter_originalTimeZoneID, [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getID]);
      if (JavaLangSystem_getPropertyWithNSString_(@"I2P_DISABLE_TIMEZONE_OVERRIDE") == nil) {
        JavaLangSystem_setPropertyWithNSString_withNSString_(@"user.timezone", @"GMT");
        JavaUtilTimeZone_setDefaultWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT"));
      }
    }
    JreStrongAssign(&NetI2pRouterRouter_STATES_ALIVE, JavaUtilEnumSet_ofWithJavaLangEnum_withJavaLangEnumArray_(JreLoadEnum(NetI2pRouterRouter_State, RUNNING), [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN), JreLoadEnum(NetI2pRouterRouter_State, STARTING_1), JreLoadEnum(NetI2pRouterRouter_State, STARTING_2), JreLoadEnum(NetI2pRouterRouter_State, STARTING_3), JreLoadEnum(NetI2pRouterRouter_State, NETDB_READY), JreLoadEnum(NetI2pRouterRouter_State, EXPL_TUNNELS_READY) } count:6 type:NetI2pRouterRouter_State_class_()]));
    JreStrongAssign(&NetI2pRouterRouter_STATES_GRACEFUL, JavaUtilEnumSet_ofWithJavaLangEnum_withJavaLangEnum_withJavaLangEnum_withJavaLangEnum_withJavaLangEnum_(JreLoadEnum(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN), JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1), JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2), JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3), JreLoadEnum(NetI2pRouterRouter_State, STOPPED)));
    JreStrongAssign(&NetI2pRouterRouter_STATES_FINAL, JavaUtilEnumSet_ofWithJavaLangEnum_withJavaLangEnum_withJavaLangEnum_withJavaLangEnum_(JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1), JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2), JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3), JreLoadEnum(NetI2pRouterRouter_State, STOPPED)));
    JreStrongAssignAndConsume(&NetI2pRouterRouter__rebuildFiles, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pRouterStartupCreateRouterInfoJob_INFO_FILENAME, NetI2pRouterStartupCreateRouterInfoJob_KEYS_FILENAME, NetI2pRouterStartupCreateRouterInfoJob_KEYS2_FILENAME, @"netDb/my.info", @"connectionTag.keys", JreStrcat("$C$", NetI2pRouterKeyManager_DEFAULT_KEYDIR, '/', NetI2pRouterKeyManager_KEYFILE_PRIVATE_ENC), JreStrcat("$C$", NetI2pRouterKeyManager_DEFAULT_KEYDIR, '/', NetI2pRouterKeyManager_KEYFILE_PUBLIC_ENC), JreStrcat("$C$", NetI2pRouterKeyManager_DEFAULT_KEYDIR, '/', NetI2pRouterKeyManager_KEYFILE_PRIVATE_SIGNING), JreStrcat("$C$", NetI2pRouterKeyManager_DEFAULT_KEYDIR, '/', NetI2pRouterKeyManager_KEYFILE_PUBLIC_SIGNING), @"sessionKeys.dat" } count:10 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterRouter)
  }
}

@end

void NetI2pRouterRouter_init(NetI2pRouterRouter *self) {
  NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(self, nil, nil);
}

NetI2pRouterRouter *new_NetI2pRouterRouter_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterRouter, init)
}

NetI2pRouterRouter *create_NetI2pRouterRouter_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouter, init)
}

void NetI2pRouterRouter_initWithJavaUtilProperties_(NetI2pRouterRouter *self, JavaUtilProperties *envProps) {
  NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(self, nil, envProps);
}

NetI2pRouterRouter *new_NetI2pRouterRouter_initWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouter, initWithJavaUtilProperties_, envProps)
}

NetI2pRouterRouter *create_NetI2pRouterRouter_initWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouter, initWithJavaUtilProperties_, envProps)
}

void NetI2pRouterRouter_initWithNSString_(NetI2pRouterRouter *self, NSString *configFilename) {
  NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(self, configFilename, nil);
}

NetI2pRouterRouter *new_NetI2pRouterRouter_initWithNSString_(NSString *configFilename) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouter, initWithNSString_, configFilename)
}

NetI2pRouterRouter *create_NetI2pRouterRouter_initWithNSString_(NSString *configFilename) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouter, initWithNSString_, configFilename)
}

void NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(NetI2pRouterRouter *self, NSString *configFilename, JavaUtilProperties *envProps) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_routerInfoLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(false));
  JreStrongAssignAndConsume(&self->routerInfoFileLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_configFileLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_stateLock_, new_NSObject_init());
  JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pRouterRouter_State, UNINITIALIZED));
  JreStrongAssignAndConsume(&self->_familyKeyLock_, new_NSObject_init());
  self->_killVMOnEnd_ = true;
  self->_gracefulExitCode_ = -1;
  JreStrongAssignAndConsume(&self->_config_, new_JavaUtilConcurrentConcurrentHashMap_init());
  if (configFilename == nil) {
    if (envProps != nil) {
      JreStrongAssign(&self->_configFilename_, [envProps getPropertyWithNSString:NetI2pRouterRouter_PROP_CONFIG_FILE]);
    }
    if (self->_configFilename_ == nil) JreStrongAssign(&self->_configFilename_, JavaLangSystem_getPropertyWithNSString_withNSString_(NetI2pRouterRouter_PROP_CONFIG_FILE, @"router.config"));
  }
  else {
    JreStrongAssign(&self->_configFilename_, configFilename);
  }
  NSString *migrate = JavaLangSystem_getPropertyWithNSString_(@"i2p.dir.migrate");
  jboolean migrateFiles = JavaLangBoolean_parseBooleanWithNSString_(migrate);
  NSString *isPortableStr = JavaLangSystem_getPropertyWithNSString_(@"i2p.dir.portableMode");
  jboolean isPortable = JavaLangBoolean_parseBooleanWithNSString_(isPortableStr);
  NSString *userDir = (!isPortable) ? NetI2pRouterStartupWorkingDir_getWorkingDirWithJavaUtilProperties_withBoolean_(envProps, migrateFiles) : NetI2pRouterStartupPortableWorkingDir_getWorkingDirWithJavaUtilProperties_(envProps);
  JavaIoFile *cf = create_JavaIoFile_initWithNSString_(self->_configFilename_);
  if (![cf isAbsolute]) {
    cf = create_JavaIoFile_initWithNSString_withNSString_(userDir, self->_configFilename_);
    JreStrongAssign(&self->_configFilename_, [cf getAbsolutePath]);
  }
  [self readConfig];
  if (envProps == nil) envProps = create_JavaUtilProperties_init();
  [envProps putAllWithJavaUtilMap:self->_config_];
  if ([envProps getPropertyWithNSString:@"i2p.dir.config"] == nil) [envProps setPropertyWithNSString:@"i2p.dir.config" withNSString:userDir];
  [envProps setPropertyWithNSString:@"i2p.systemTimeZone" withNSString:NetI2pRouterRouter_originalTimeZoneID];
  id<JavaUtilList> contexts = NetI2pRouterRouterContext_getContexts();
  if ([((id<JavaUtilList>) nil_chk(contexts)) isEmpty]) {
    NetI2pRouterRouterContext_killGlobalContext();
  }
  else if (NetI2pUtilSystemVersion_isAndroid()) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"Warning: Killing ", [contexts size], @" other routers in this JVM")];
    [contexts clear];
    NetI2pRouterRouterContext_killGlobalContext();
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"Warning: ", [contexts size], @" other routers in this JVM")];
  }
  JreStrongAssignAndConsume(&self->_context_, new_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(self, envProps, false));
  NetI2pRouterRouterContext_setGlobalContextWithNetI2pRouterRouterContext_(self->_context_);
  JreStrongAssignAndConsume(&self->_eventLog_, new_NetI2pRouterUtilEventLog_initWithNetI2pI2PAppContext_withJavaIoFile_(self->_context_, create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getRouterDir], NetI2pRouterRouter_EVENTLOG)));
  for (jint i = 0; i < 14; i++) {
    if (NetI2pRouterRouter_isOnlyRouterRunning(self)) {
      if (i > 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"INFO: No, there wasn't another router already running. Proceeding with startup."];
      break;
    }
    if (i < 13) {
      if (i == 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"WARN: There may be another router already running. Waiting a while to be sure..."];
      @try {
        JavaLangThread_sleepWithLong_(5000);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    else {
      [self->_eventLog_ addEventWithNSString:NetI2pRouterUtilEventLog_ABORTED withNSString:@"Another router running"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: There appears to be another router already running!"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Please make sure to shut down old instances before starting up"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       a new one.  If you are positive that no other instance is running,"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"       please delete the file ", [((JavaIoFile *) nil_chk(NetI2pRouterRouter_getPingFile(self))) getAbsolutePath])];
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"ERROR: There appears to be another router already running! Please make sure to shut down old instances before starting up a new one.  If you are positive that no other instance is running, please delete the file ", [((JavaIoFile *) nil_chk(NetI2pRouterRouter_getPingFile(self))) getAbsolutePath]));
    }
  }
  if ([self->_config_ getWithId:@"router.firstVersion"] == nil) {
    [self->_config_ putWithId:@"router.firstVersion" withId:NetI2pRouterRouterVersion_VERSION];
    NSString *now = JavaLangLong_toStringWithLong_(JavaLangSystem_currentTimeMillis());
    [self->_config_ putWithId:@"router.firstInstalled" withId:now];
    [self->_config_ putWithId:@"router.updateLastInstalled" withId:now];
    [self->_config_ putWithId:@"router.previousVersion" withId:NetI2pRouterRouterVersion_VERSION];
    [self saveConfig];
  }
  jint id_ = NetI2pRouterRouter_DEFAULT_NETWORK_ID;
  NSString *sid = [self->_config_ getWithId:NetI2pRouterRouter_PROP_NETWORK_ID];
  if (sid != nil) {
    @try {
      id_ = JavaLangInteger_parseIntWithNSString_(sid);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  self->_networkID_ = id_;
  NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, INITIALIZED));
}

NetI2pRouterRouter *new_NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(NSString *configFilename, JavaUtilProperties *envProps) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouter, initWithNSString_withJavaUtilProperties_, configFilename, envProps)
}

NetI2pRouterRouter *create_NetI2pRouterRouter_initWithNSString_withJavaUtilProperties_(NSString *configFilename, JavaUtilProperties *envProps) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouter, initWithNSString_withJavaUtilProperties_, configFilename, envProps)
}

void NetI2pRouterRouter_startupStuff(NetI2pRouterRouter *self) {
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterRouter_class_()]);
  if (!NetI2pUtilSystemVersion_isAndroid()) NetI2pRouterRouter_beginMarkingLiveliness(self);
  JavaLangSystem_setPropertyWithNSString_withNSString_(@"router.version", NetI2pRouterRouterVersion_FULL_VERSION);
  NetI2pRouterRouter_warmupCrypto(self);
  [self->_context_ initAll];
  if ([self->_context_ hasWrapper]) {
    JavaIoFile *f = create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir"), @"wrapper.log");
    if (![f exists]) f = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], @"wrapper.log");
    if ([f exists]) NetI2pUtilSecureFileOutputStream_setPermsWithJavaIoFile_(f);
  }
  NetI2pRouterTasksCryptoChecker_warnUnavailableCryptoWithNetI2pRouterRouterContext_(self->_context_);
  JreStrongAssign(&self->_routerInfo_, nil);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$$", @"New router created with config file ", self->_configFilename_)];
  JreStrongAssignAndConsume(&self->_oomListener_, new_NetI2pRouterTasksOOMListener_initWithNetI2pRouterRouterContext_(self->_context_));
  JreStrongAssignAndConsume(&self->_shutdownHook_, new_NetI2pRouterTasksShutdownHook_initWithNetI2pRouterRouterContext_(self->_context_));
  JreStrongAssignAndConsume(&self->_gracefulShutdownDetector_, new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(create_NetI2pRouterTasksGracefulShutdown_initWithNetI2pRouterRouterContext_(self->_context_), @"Graceful ShutdownHook", true));
  [self->_gracefulShutdownDetector_ setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
  [((NetI2pUtilI2PThread *) nil_chk(self->_gracefulShutdownDetector_)) start];
  JreStrongAssignAndConsume(&self->_watchdog_, new_NetI2pRouterTasksRouterWatchdog_initWithNetI2pRouterRouterContext_(self->_context_));
  JreStrongAssignAndConsume(&self->_watchdogThread_, new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(self->_watchdog_, @"RouterWatchdog", true));
  [self->_watchdogThread_ setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
  [((JavaLangThread *) nil_chk(self->_watchdogThread_)) start];
}

void NetI2pRouterRouter_clearCaches() {
  NetI2pRouterRouter_initialize();
  NetI2pUtilByteCache_clearAll();
  NetI2pUtilSimpleByteCache_clearAll();
  NetI2pDataDestination_clearCache();
  NetI2pUtilTranslate_clearCache();
  NetI2pDataHash_clearCache();
  NetI2pDataPublicKey_clearCache();
  NetI2pDataSigningPublicKey_clearCache();
  NetI2pCryptoSigUtil_clearCaches();
  NetI2pClientImplI2PSessionImpl_clearCache();
  NetI2pUtilReusableGZIPInputStream_clearCache();
  NetI2pUtilReusableGZIPOutputStream_clearCache();
}

JavaUtilProperties *NetI2pRouterRouter_getConfigWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *filename) {
  NetI2pRouterRouter_initialize();
  NetI2pUtilLog *log = nil;
  if (ctx != nil) {
    log = [((NetI2pUtilLogManager *) nil_chk([ctx logManager])) getLogWithIOSClass:NetI2pRouterRouter_class_()];
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$$", @"Config file: ", filename) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"location")];
  }
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  @try {
    JavaIoFile *f = create_JavaIoFile_initWithNSString_(filename);
    if ([f canRead]) {
      NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(props, f);
      [props removeWithId:NetI2pRouterRouter_PROP_SHUTDOWN_IN_PROGRESS];
    }
    else {
      if (log != nil) [log warnWithNSString:JreStrcat("$$$", @"Configuration file ", filename, @" does not exist")];
    }
  }
  @catch (JavaIoIOException *ioe) {
    if (log != nil) [log errorWithNSString:JreStrcat("$$", @"Error loading the router configuration from ", filename) withJavaLangThrowable:ioe];
    else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Error loading the router configuration from ", filename, @": ", ioe)];
  }
  return props;
}

void NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(NetI2pRouterRouter *self, NetI2pRouterRouter_State *state) {
  NetI2pRouterRouter_State *oldState;
  @synchronized(self->_stateLock_) {
    oldState = JreRetainedLocalValue(self->_state_);
    JreStrongAssign(&self->_state_, state);
  }
  if (self->_log_ != nil && oldState != state && state != JreLoadEnum(NetI2pRouterRouter_State, STOPPED) && [self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
    [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Router state change from ", oldState, @" to ", state)];
    [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) flush];
  }
}

void NetI2pRouterRouter_locked_rebuildRouterInfoWithBoolean_(NetI2pRouterRouter *self, jboolean blockingRebuild) {
  NetI2pDataRouterRouterInfo *ri;
  if (self->_routerInfo_ != nil) ri = create_NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(self->_routerInfo_);
  else ri = create_NetI2pDataRouterRouterInfo_init();
  @try {
    [ri setPublishedWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now]];
    JavaUtilProperties *stats = [((NetI2pRouterStatisticsManager *) nil_chk([self->_context_ statPublisher])) publishStatistics];
    [ri setOptionsWithJavaUtilProperties:stats];
    [ri setAddressesWithJavaUtilCollection:[((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) createAddresses]];
    NetI2pDataSigningPrivateKey *key = [((NetI2pRouterKeyManager *) nil_chk([self->_context_ keyManager])) getSigningPrivateKey];
    if (key == nil) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Internal error - signing private key not known? Impossible?"];
      return;
    }
    [ri signWithNetI2pDataSigningPrivateKey:key];
    [self setRouterInfoWithNetI2pDataRouterRouterInfo:ri];
    if (![ri isValid]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Our RouterInfo has a bad signature");
    NetI2pRouterTasksRepublish *r = create_NetI2pRouterTasksRepublish_initWithNetI2pRouterRouterContext_(self->_context_);
    if (blockingRebuild) [r timeReached];
    else [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:r withLong:0];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Internal error - unable to sign our own address?!" withJavaLangThrowable:dfe];
  }
}

void NetI2pRouterRouter_warmupCrypto(NetI2pRouterRouter *self) {
  NSString *oldLoaded = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterRouter_PROP_JBIGI];
  NSString *oldProcessor = [self->_context_ getPropertyWithNSString:NetI2pRouterRouter_PROP_JBIGI_PROCESSOR];
  NSString *processor = nil;
  if (NetI2pUtilSystemVersion_isX86()) {
    @try {
      processor = [((id<FreenetSupportCPUInformationCPUInfo>) nil_chk(FreenetSupportCPUInformationCPUID_getInfo())) getCPUModelString];
      if (NetI2pUtilSystemVersion_is64Bit()) JreStrAppend(&processor, "$", @"/64");
      if (oldProcessor != nil && ![oldProcessor isEqual:processor]) {
        jboolean isWin = NetI2pUtilSystemVersion_isWindows();
        jboolean isMac = NetI2pUtilSystemVersion_isMac();
        NSString *osName = [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        jboolean goodOS = isWin || isMac || [((NSString *) nil_chk(osName)) java_contains:@"linux"] || [osName java_contains:@"freebsd"];
        JavaIoFile *jbigiJar = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], @"lib/jbigi.jar");
        if (goodOS && [jbigiJar exists] && [((JavaIoFile *) nil_chk([self->_context_ getBaseDir])) canWrite]) {
          NSString *libPrefix = isWin ? @"" : @"lib";
          NSString *libSuffix = isWin ? @".dll" : isMac ? @".jnilib" : @".so";
          JavaIoFile *jbigiLib = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], JreStrcat("$$$", libPrefix, @"jbigi", libSuffix));
          if ([jbigiLib canWrite]) {
            NSString *path = [jbigiLib getAbsolutePath];
            jboolean success = NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(path, JreStrcat("$$", path, @".bak"), true, true);
            if (success) {
              success = [jbigiLib delete__];
              if (success) {
                [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Processor change detected, moved jbigi library to ", path, @".bak")];
                [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Check logs for successful installation of new library"];
              }
            }
          }
        }
      }
    }
    @catch (FreenetSupportCPUInformationUnknownCPUException *e) {
    }
  }
  [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBoolean];
  [self->_context_ elGamalEngine];
  NSString *loaded = NetI2pUtilNativeBigInteger_getLoadedResourceName();
  id<JavaUtilMap> changes = nil;
  if (loaded != nil && ![loaded isEqual:oldLoaded]) {
    changes = create_JavaUtilHashMap_initWithInt_(2);
    [changes putWithId:NetI2pRouterRouter_PROP_JBIGI withId:loaded];
  }
  if (processor != nil && ![processor isEqual:oldProcessor]) {
    if (changes == nil) changes = create_JavaUtilHashMap_initWithInt_(1);
    [changes putWithId:NetI2pRouterRouter_PROP_JBIGI_PROCESSOR withId:processor];
  }
  if (changes != nil) [self saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
}

void NetI2pRouterRouter_finalShutdownWithInt_(NetI2pRouterRouter *self, jint exitCode) {
  @synchronized(self) {
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3));
    NetI2pRouterRouter_clearCaches();
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$I$", @"Shutdown(", exitCode, @") complete")];
    @try {
      [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) shutdown];
    }
    @catch (JavaLangThrowable *t) {
    }
    JavaIoFile *f = NetI2pRouterRouter_getPingFile(self);
    [((JavaIoFile *) nil_chk(f)) delete__];
    if ([((id<JavaUtilList>) nil_chk(NetI2pRouterRouterContext_getContexts())) isEmpty]) NetI2pRouterRouterContext_killGlobalContext();
    for (id<JavaLangRunnable> __strong task in nil_chk([self->_context_ getFinalShutdownTasks])) {
      @try {
        [((id<JavaLangRunnable>) nil_chk(task)) run];
      }
      @catch (JavaLangThrowable *t) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Running final shutdown task ", t)];
      }
    }
    [((id<JavaUtilSet>) nil_chk([self->_context_ getFinalShutdownTasks])) clear];
    if (self->_killVMOnEnd_) {
      @try {
        JavaLangThread_sleepWithLong_(1000);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) exitWithInt:exitCode];
    }
    else if (NetI2pUtilSystemVersion_isAndroid()) {
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) gc];
    }
    NetI2pRouterRouter_changeStateWithNetI2pRouterRouter_State_(self, JreLoadEnum(NetI2pRouterRouter_State, STOPPED));
  }
}

void NetI2pRouterRouter_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterRouter_initialize();
  jboolean rebuild = false;
  if (args != nil) {
    jboolean error = false;
    GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"router", args, @"");
    jint c;
    while ((c = [g getopt]) != -1) {
      switch (c) {
        default:
        error = true;
      }
    }
    jint remaining = args->size_ - [g getOptind];
    if (remaining > 1) {
      error = true;
    }
    else if (remaining == 1) {
      rebuild = [((NSString *) nil_chk(IOSObjectArray_Get(args, [g getOptind]))) isEqual:@"rebuild"];
      
      ;
      if (!rebuild) error = true;
    }
    if (error) @throw create_JavaLangIllegalArgumentException_init();
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Starting I2P ", NetI2pRouterRouterVersion_FULL_VERSION)];
  NetI2pRouterRouter *r;
  @try {
    r = create_NetI2pRouterRouter_init();
  }
  @catch (JavaLangIllegalStateException *ise) {
    JavaLangSystem_exitWithInt_(-1);
    return;
  }
  if (rebuild) {
    [((NetI2pRouterRouter *) nil_chk(r)) rebuildNewIdentity];
  }
  else {
    NetI2pRouterTasksInstallUpdate_installUpdatesWithNetI2pRouterRouter_(r);
    [((NetI2pRouterRouter *) nil_chk(r)) runRouter];
  }
}

JavaIoFile *NetI2pRouterRouter_getPingFile(NetI2pRouterRouter *self) {
  NSString *s = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:@"router.pingFile" withNSString:@"router.ping"];
  JavaIoFile *f = create_JavaIoFile_initWithNSString_(s);
  if (![f isAbsolute]) f = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getPIDDir], s);
  return f;
}

jboolean NetI2pRouterRouter_isOnlyRouterRunning(NetI2pRouterRouter *self) {
  JavaIoFile *f = NetI2pRouterRouter_getPingFile(self);
  if ([((JavaIoFile *) nil_chk(f)) exists]) {
    jlong lastWritten = [f lastModified];
    if (JavaLangSystem_currentTimeMillis() - lastWritten > NetI2pRouterRouter_LIVELINESS_DELAY) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"WARN: Old router was not shut down gracefully, deleting ", f)];
      [f delete__];
    }
    else {
      return false;
    }
  }
  return true;
}

void NetI2pRouterRouter_beginMarkingLiveliness(NetI2pRouterRouter *self) {
  JavaIoFile *f = NetI2pRouterRouter_getPingFile(self);
  [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTasksMarkLiveliness_initWithNetI2pRouterRouter_withJavaIoFile_(self, f) withLong:0 withLong:NetI2pRouterRouter_LIVELINESS_DELAY - (5 * 1000)];
}

IOSObjectArray *NetI2pRouterRouter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterRouter__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterRouter__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterRouter__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterRouter__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterRouter)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterRouter_State)

NetI2pRouterRouter_State *NetI2pRouterRouter_State_values_[14];

@implementation NetI2pRouterRouter_State

+ (NetI2pRouterRouter_State *)UNINITIALIZED {
  return JreEnum(NetI2pRouterRouter_State, UNINITIALIZED);
}

+ (NetI2pRouterRouter_State *)INITIALIZED {
  return JreEnum(NetI2pRouterRouter_State, INITIALIZED);
}

+ (NetI2pRouterRouter_State *)STARTING_1 {
  return JreEnum(NetI2pRouterRouter_State, STARTING_1);
}

+ (NetI2pRouterRouter_State *)STARTING_2 {
  return JreEnum(NetI2pRouterRouter_State, STARTING_2);
}

+ (NetI2pRouterRouter_State *)STARTING_3 {
  return JreEnum(NetI2pRouterRouter_State, STARTING_3);
}

+ (NetI2pRouterRouter_State *)NETDB_READY {
  return JreEnum(NetI2pRouterRouter_State, NETDB_READY);
}

+ (NetI2pRouterRouter_State *)EXPL_TUNNELS_READY {
  return JreEnum(NetI2pRouterRouter_State, EXPL_TUNNELS_READY);
}

+ (NetI2pRouterRouter_State *)RUNNING {
  return JreEnum(NetI2pRouterRouter_State, RUNNING);
}

+ (NetI2pRouterRouter_State *)RESTARTING {
  return JreEnum(NetI2pRouterRouter_State, RESTARTING);
}

+ (NetI2pRouterRouter_State *)GRACEFUL_SHUTDOWN {
  return JreEnum(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN);
}

+ (NetI2pRouterRouter_State *)FINAL_SHUTDOWN_1 {
  return JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1);
}

+ (NetI2pRouterRouter_State *)FINAL_SHUTDOWN_2 {
  return JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2);
}

+ (NetI2pRouterRouter_State *)FINAL_SHUTDOWN_3 {
  return JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3);
}

+ (NetI2pRouterRouter_State *)STOPPED {
  return JreEnum(NetI2pRouterRouter_State, STOPPED);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterRouter_State_values();
}

+ (NetI2pRouterRouter_State *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterRouter_State_valueOfWithNSString_(name);
}

- (NetI2pRouterRouter_State_Enum)toNSEnum {
  return (NetI2pRouterRouter_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterRouter_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouter_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNINITIALIZED", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INITIALIZED", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "STARTING_1", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "STARTING_2", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "STARTING_3", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "NETDB_READY", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "EXPL_TUNNELS_READY", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "RUNNING", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "RESTARTING", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "GRACEFUL_SHUTDOWN", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "FINAL_SHUTDOWN_1", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "FINAL_SHUTDOWN_2", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "FINAL_SHUTDOWN_3", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "STOPPED", "LNetI2pRouterRouter_State;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterRouter_State, UNINITIALIZED), &JreEnum(NetI2pRouterRouter_State, INITIALIZED), &JreEnum(NetI2pRouterRouter_State, STARTING_1), &JreEnum(NetI2pRouterRouter_State, STARTING_2), &JreEnum(NetI2pRouterRouter_State, STARTING_3), &JreEnum(NetI2pRouterRouter_State, NETDB_READY), &JreEnum(NetI2pRouterRouter_State, EXPL_TUNNELS_READY), &JreEnum(NetI2pRouterRouter_State, RUNNING), &JreEnum(NetI2pRouterRouter_State, RESTARTING), &JreEnum(NetI2pRouterRouter_State, GRACEFUL_SHUTDOWN), &JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_1), &JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_2), &JreEnum(NetI2pRouterRouter_State, FINAL_SHUTDOWN_3), &JreEnum(NetI2pRouterRouter_State, STOPPED), "LNetI2pRouterRouter;", "Ljava/lang/Enum<Lnet/i2p/router/Router$State;>;" };
  static const J2ObjcClassInfo _NetI2pRouterRouter_State = { "State", "net.i2p.router", ptrTable, methods, fields, 7, 0x401a, 2, 14, 16, -1, -1, 17, -1 };
  return &_NetI2pRouterRouter_State;
}

+ (void)initialize {
  if (self == [NetI2pRouterRouter_State class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 14 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 14; i++) {
      ((void)(NetI2pRouterRouter_State_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterRouter_State_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterRouter_State_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterRouter_State)
  }
}

@end

void NetI2pRouterRouter_State_initWithNSString_withInt_(NetI2pRouterRouter_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterRouter_State_values() {
  NetI2pRouterRouter_State_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterRouter_State_values_ count:14 type:NetI2pRouterRouter_State_class_()];
}

NetI2pRouterRouter_State *NetI2pRouterRouter_State_valueOfWithNSString_(NSString *name) {
  NetI2pRouterRouter_State_initialize();
  for (int i = 0; i < 14; i++) {
    NetI2pRouterRouter_State *e = NetI2pRouterRouter_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterRouter_State *NetI2pRouterRouter_State_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterRouter_State_initialize();
  if (ordinal >= 14) {
    return nil;
  }
  return NetI2pRouterRouter_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterRouter_State)
