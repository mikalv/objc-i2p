//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/OutNetMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterOutNetMessage () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pDataRouterRouterInfo *_target_;
  id<NetI2pDataI2npI2NPMessage> _message_;
  jint _messageTypeId_;
  jlong _messageId_;
  jint _messageSize_;
  jint _priority_;
  jlong _expiration_;
  id<NetI2pRouterJob> _onSend_;
  id<NetI2pRouterJob> _onFailedSend_;
  id<NetI2pRouterReplyJob> _onReply_;
  id<NetI2pRouterJob> _onFailedReply_;
  id<NetI2pRouterMessageSelector> _replySelector_;
  id<JavaUtilSet> _failedTransports_;
  jlong _sendBegin_;
  jlong _created_;
  jlong _enqueueTime_;
  jlong _seqNum_;
  JavaUtilHashMap *_timestamps_;
  id<JavaUtilList> _timestampOrder_;
}

- (void)locked_initTimestamps;

- (void)renderTimestampsWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf;

+ (NSString *)formatDateWithLong:(jlong)when;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _target_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _message_, id<NetI2pDataI2npI2NPMessage>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _onSend_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _onFailedSend_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _onReply_, id<NetI2pRouterReplyJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _onFailedReply_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _replySelector_, id<NetI2pRouterMessageSelector>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _failedTransports_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _timestamps_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessage, _timestampOrder_, id<JavaUtilList>)

inline JavaTextSimpleDateFormat *NetI2pRouterOutNetMessage_get__fmt(void);
static JavaTextSimpleDateFormat *NetI2pRouterOutNetMessage__fmt;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterOutNetMessage, _fmt, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void NetI2pRouterOutNetMessage_locked_initTimestamps(NetI2pRouterOutNetMessage *self);

__attribute__((unused)) static void NetI2pRouterOutNetMessage_renderTimestampsWithJavaLangStringBuilder_(NetI2pRouterOutNetMessage *self, JavaLangStringBuilder *buf);

__attribute__((unused)) static NSString *NetI2pRouterOutNetMessage_formatDateWithLong_(jlong when);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$2(void);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterOutNetMessage)

@implementation NetI2pRouterOutNetMessage

+ (jint)PRIORITY_HIGHEST {
  return NetI2pRouterOutNetMessage_PRIORITY_HIGHEST;
}

+ (jint)PRIORITY_MY_BUILD_REQUEST {
  return NetI2pRouterOutNetMessage_PRIORITY_MY_BUILD_REQUEST;
}

+ (jint)PRIORITY_MY_NETDB_LOOKUP {
  return NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_LOOKUP;
}

+ (jint)PRIORITY_MY_NETDB_STORE {
  return NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_STORE;
}

+ (jint)PRIORITY_EXPLORATORY {
  return NetI2pRouterOutNetMessage_PRIORITY_EXPLORATORY;
}

+ (jint)PRIORITY_MY_DATA {
  return NetI2pRouterOutNetMessage_PRIORITY_MY_DATA;
}

+ (jint)PRIORITY_HIS_BUILD_REQUEST {
  return NetI2pRouterOutNetMessage_PRIORITY_HIS_BUILD_REQUEST;
}

+ (jint)PRIORITY_BUILD_REPLY {
  return NetI2pRouterOutNetMessage_PRIORITY_BUILD_REPLY;
}

+ (jint)PRIORITY_NETDB_REPLY {
  return NetI2pRouterOutNetMessage_PRIORITY_NETDB_REPLY;
}

+ (jint)PRIORITY_HIS_NETDB_STORE {
  return NetI2pRouterOutNetMessage_PRIORITY_HIS_NETDB_STORE;
}

+ (jint)PRIORITY_NETDB_FLOOD {
  return NetI2pRouterOutNetMessage_PRIORITY_NETDB_FLOOD;
}

+ (jint)PRIORITY_PARTICIPATING {
  return NetI2pRouterOutNetMessage_PRIORITY_PARTICIPATING;
}

+ (jint)PRIORITY_MY_NETDB_STORE_LOW {
  return NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_STORE_LOW;
}

+ (jint)PRIORITY_NETDB_EXPLORE {
  return NetI2pRouterOutNetMessage_PRIORITY_NETDB_EXPLORE;
}

+ (jint)PRIORITY_NETDB_HARVEST {
  return NetI2pRouterOutNetMessage_PRIORITY_NETDB_HARVEST;
}

+ (jint)PRIORITY_LOWEST {
  return NetI2pRouterOutNetMessage_PRIORITY_LOWEST;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                                         withLong:(jlong)expiration
                                          withInt:(jint)priority
                   withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target {
  NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self, context, msg, expiration, priority, target);
  return self;
}

- (jlong)timestampWithNSString:(NSString *)eventName {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    @synchronized(self) {
      NetI2pRouterOutNetMessage_locked_initTimestamps(self);
      [((JavaUtilHashMap *) nil_chk(_timestamps_)) putWithId:eventName withId:JavaLangLong_valueOfWithLong_(now)];
      [((id<JavaUtilList>) nil_chk(_timestampOrder_)) addWithId:eventName];
    }
  }
  return now - _created_;
}

- (id<JavaUtilMap>)getTimestamps {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    @synchronized(self) {
      NetI2pRouterOutNetMessage_locked_initTimestamps(self);
      return JreRetainedLocalValue(create_JavaUtilHashMap_initWithJavaUtilMap_(_timestamps_));
    }
  }
  return JavaUtilCollections_emptyMap();
}

- (JavaLangLong *)getTimestampWithNSString:(NSString *)eventName {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    @synchronized(self) {
      NetI2pRouterOutNetMessage_locked_initTimestamps(self);
      return JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(_timestamps_)) getWithId:eventName]);
    }
  }
  return JavaLangLong_valueOfWithLong_(0);
}

- (void)locked_initTimestamps {
  NetI2pRouterOutNetMessage_locked_initTimestamps(self);
}

- (JavaLangException *)getCreatedBy {
  return nil;
}

- (NetI2pDataRouterRouterInfo *)getTarget {
  return _target_;
}

- (id<NetI2pDataI2npI2NPMessage>)getMessage {
  return _message_;
}

- (NSString *)getMessageType {
  return _message_ != nil ? [[_message_ java_getClass] getSimpleName] : @"null";
}

- (jint)getMessageTypeId {
  return _messageTypeId_;
}

- (jlong)getMessageId {
  return _messageId_;
}

- (jint)getMessageSize {
  return _messageSize_;
}

- (jint)getMessageDataWithByteArray:(IOSByteArray *)outBuffer {
  if (_message_ == nil) {
    return -1;
  }
  else {
    jint len = [_message_ toByteArrayWithByteArray:outBuffer];
    return len;
  }
}

- (jint)getPriority {
  return _priority_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (id<NetI2pRouterJob>)getOnSendJob {
  return _onSend_;
}

- (void)setOnSendJobWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  JreStrongAssign(&_onSend_, job);
}

- (id<NetI2pRouterJob>)getOnFailedSendJob {
  return _onFailedSend_;
}

- (void)setOnFailedSendJobWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  JreStrongAssign(&_onFailedSend_, job);
}

- (id<NetI2pRouterReplyJob>)getOnReplyJob {
  return _onReply_;
}

- (void)setOnReplyJobWithNetI2pRouterReplyJob:(id<NetI2pRouterReplyJob>)job {
  JreStrongAssign(&_onReply_, job);
}

- (id<NetI2pRouterJob>)getOnFailedReplyJob {
  return _onFailedReply_;
}

- (void)setOnFailedReplyJobWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  JreStrongAssign(&_onFailedReply_, job);
}

- (id<NetI2pRouterMessageSelector>)getReplySelector {
  return _replySelector_;
}

- (void)setReplySelectorWithNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)selector {
  JreStrongAssign(&_replySelector_, selector);
}

- (void)transportFailedWithNSString:(NSString *)transportStyle {
  @synchronized(self) {
    if (_failedTransports_ == nil) JreStrongAssignAndConsume(&_failedTransports_, new_JavaUtilHashSet_initWithInt_(2));
    [_failedTransports_ addWithId:transportStyle];
  }
}

- (id<JavaUtilSet>)getFailedTransports {
  @synchronized(self) {
    return JreRetainedLocalValue((_failedTransports_ == nil ? JavaUtilCollections_emptySet() : _failedTransports_));
  }
}

- (jlong)getSendBegin {
  return _sendBegin_;
}

- (void)beginSend {
  _sendBegin_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
}

- (jlong)getCreated {
  return _created_;
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _created_;
}

- (jlong)getSendTime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _sendBegin_;
}

- (void)setEnqueueTimeWithLong:(jlong)now {
  _enqueueTime_ = now;
}

- (jlong)getEnqueueTime {
  return _enqueueTime_;
}

- (void)drop {
  if (_onFailedSend_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:_onFailedSend_];
  if (_onFailedReply_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:_onFailedReply_];
  if (_replySelector_ != nil) [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:self];
  [self discardData];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"transport.sendProcessingTime" withLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - _enqueueTime_];
}

- (void)setSeqNumWithLong:(jlong)num {
  _seqNum_ = num;
}

- (jlong)getSeqNum {
  return _seqNum_;
}

- (void)discardData {
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:@"[OutNetMessage containing "];
  if (_message_ == nil) {
    [buf appendWithNSString:@"*no message*"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"a "])) appendWithInt:_messageSize_])) appendWithNSString:@" byte "];
    [buf appendWithNSString:[self getMessageType]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" ID "])) appendWithLong:_messageId_];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" expiring "])) appendWithId:create_JavaUtilDate_initWithLong_(_expiration_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" priority "])) appendWithInt:_priority_];
  if (_failedTransports_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" failed transports: "])) appendWithId:_failedTransports_];
  if (_target_ == nil) [buf appendWithNSString:@" (null target)"];
  else [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" targetting "])) appendWithNSString:[((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([_target_ getIdentity])) getHash])) toBase64]];
  if (_onReply_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with onReply job: "])) appendWithId:_onReply_];
  if (_onSend_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with onSend job: "])) appendWithId:_onSend_];
  if (_onFailedReply_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with onFailedReply job: "])) appendWithId:_onFailedReply_];
  if (_onFailedSend_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with onFailedSend job: "])) appendWithId:_onFailedSend_];
  if (_timestamps_ != nil && _timestampOrder_ != nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [buf appendWithNSString:@" {timestamps: \n"];
    NetI2pRouterOutNetMessage_renderTimestampsWithJavaLangStringBuilder_(self, buf);
    [buf appendWithNSString:@"}"];
  }
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)renderTimestampsWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  NetI2pRouterOutNetMessage_renderTimestampsWithJavaLangStringBuilder_(self, buf);
}

+ (NSString *)formatDateWithLong:(jlong)when {
  return NetI2pRouterOutNetMessage_formatDateWithLong_(when);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_target_);
  RELEASE_(_message_);
  RELEASE_(_onSend_);
  RELEASE_(_onFailedSend_);
  RELEASE_(_onReply_);
  RELEASE_(_onFailedReply_);
  RELEASE_(_replySelector_);
  RELEASE_(_failedTransports_);
  RELEASE_(_timestamps_);
  RELEASE_(_timestampOrder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 4, 5, -1 },
    { NULL, "LJavaLangLong;", 0x1, 6, 3, -1, -1, 7, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangException;", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterReplyJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageSelector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 19, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x21, -1, -1, -1, 20, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 27, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withLong:withInt:withNetI2pDataRouterRouterInfo:);
  methods[2].selector = @selector(timestampWithNSString:);
  methods[3].selector = @selector(getTimestamps);
  methods[4].selector = @selector(getTimestampWithNSString:);
  methods[5].selector = @selector(locked_initTimestamps);
  methods[6].selector = @selector(getCreatedBy);
  methods[7].selector = @selector(getTarget);
  methods[8].selector = @selector(getMessage);
  methods[9].selector = @selector(getMessageType);
  methods[10].selector = @selector(getMessageTypeId);
  methods[11].selector = @selector(getMessageId);
  methods[12].selector = @selector(getMessageSize);
  methods[13].selector = @selector(getMessageDataWithByteArray:);
  methods[14].selector = @selector(getPriority);
  methods[15].selector = @selector(getExpiration);
  methods[16].selector = @selector(getOnSendJob);
  methods[17].selector = @selector(setOnSendJobWithNetI2pRouterJob:);
  methods[18].selector = @selector(getOnFailedSendJob);
  methods[19].selector = @selector(setOnFailedSendJobWithNetI2pRouterJob:);
  methods[20].selector = @selector(getOnReplyJob);
  methods[21].selector = @selector(setOnReplyJobWithNetI2pRouterReplyJob:);
  methods[22].selector = @selector(getOnFailedReplyJob);
  methods[23].selector = @selector(setOnFailedReplyJobWithNetI2pRouterJob:);
  methods[24].selector = @selector(getReplySelector);
  methods[25].selector = @selector(setReplySelectorWithNetI2pRouterMessageSelector:);
  methods[26].selector = @selector(transportFailedWithNSString:);
  methods[27].selector = @selector(getFailedTransports);
  methods[28].selector = @selector(getSendBegin);
  methods[29].selector = @selector(beginSend);
  methods[30].selector = @selector(getCreated);
  methods[31].selector = @selector(getLifetime);
  methods[32].selector = @selector(getSendTime);
  methods[33].selector = @selector(setEnqueueTimeWithLong:);
  methods[34].selector = @selector(getEnqueueTime);
  methods[35].selector = @selector(drop);
  methods[36].selector = @selector(setSeqNumWithLong:);
  methods[37].selector = @selector(getSeqNum);
  methods[38].selector = @selector(discardData);
  methods[39].selector = @selector(description);
  methods[40].selector = @selector(renderTimestampsWithJavaLangStringBuilder:);
  methods[41].selector = @selector(formatDateWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_target_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageTypeId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onSend_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_onFailedSend_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_onReply_", "LNetI2pRouterReplyJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_onFailedReply_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replySelector_", "LNetI2pRouterMessageSelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_failedTransports_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "_sendBegin_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_created_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_enqueueTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_seqNum_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_timestamps_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "_timestampOrder_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "PRIORITY_HIGHEST", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_HIGHEST, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_MY_BUILD_REQUEST", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_MY_BUILD_REQUEST, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_MY_NETDB_LOOKUP", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_LOOKUP, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_MY_NETDB_STORE", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_STORE, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_EXPLORATORY", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_EXPLORATORY, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_MY_DATA", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_MY_DATA, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_HIS_BUILD_REQUEST", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_HIS_BUILD_REQUEST, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_BUILD_REPLY", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_BUILD_REPLY, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_NETDB_REPLY", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_NETDB_REPLY, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_HIS_NETDB_STORE", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_HIS_NETDB_STORE, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_NETDB_FLOOD", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_NETDB_FLOOD, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_PARTICIPATING", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_PARTICIPATING, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_MY_NETDB_STORE_LOW", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_STORE_LOW, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_NETDB_EXPLORE", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_NETDB_EXPLORE, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_NETDB_HARVEST", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_NETDB_HARVEST, 0x19, -1, -1, -1, -1 },
    { "PRIORITY_LOWEST", "I", .constantValue.asInt = NetI2pRouterOutNetMessage_PRIORITY_LOWEST, 0x19, -1, -1, -1, -1 },
    { "_fmt", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;JILNetI2pDataRouterRouterInfo;", "timestamp", "LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Long;>;", (void *)&NetI2pRouterOutNetMessage__Annotations$0, "getTimestamp", (void *)&NetI2pRouterOutNetMessage__Annotations$1, (void *)&NetI2pRouterOutNetMessage__Annotations$2, "getMessageData", "[B", "setOnSendJob", "LNetI2pRouterJob;", "setOnFailedSendJob", "setOnReplyJob", "LNetI2pRouterReplyJob;", "setOnFailedReplyJob", "setReplySelector", "LNetI2pRouterMessageSelector;", "transportFailed", "()Ljava/util/Set<Ljava/lang/String;>;", "setEnqueueTime", "J", "setSeqNum", "toString", "renderTimestamps", "LJavaLangStringBuilder;", "formatDate", "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Long;>;", "Ljava/util/List<Ljava/lang/String;>;", &NetI2pRouterOutNetMessage__fmt };
  static const J2ObjcClassInfo _NetI2pRouterOutNetMessage = { "OutNetMessage", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 42, 38, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterOutNetMessage;
}

+ (void)initialize {
  if (self == [NetI2pRouterOutNetMessage class]) {
    JreStrongAssignAndConsume(&NetI2pRouterOutNetMessage__fmt, new_JavaTextSimpleDateFormat_initWithNSString_(@"HH:mm:ss.SSS"));
    J2OBJC_SET_INITIALIZED(NetI2pRouterOutNetMessage)
  }
}

@end

void NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_(NetI2pRouterOutNetMessage *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self, context, nil, 0, -1, nil);
}

NetI2pRouterOutNetMessage *new_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterOutNetMessage, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterOutNetMessage *create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterOutNetMessage, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(NetI2pRouterOutNetMessage *self, NetI2pRouterRouterContext *context, id<NetI2pDataI2npI2NPMessage> msg, jlong expiration, jint priority, NetI2pDataRouterRouterInfo *target) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterOutNetMessage_class_()]);
  JreStrongAssign(&self->_message_, msg);
  if (msg != nil) {
    self->_messageTypeId_ = [msg getType];
    self->_messageId_ = [msg getUniqueId];
    self->_messageSize_ = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(self->_message_)) getMessageSize];
  }
  else {
    self->_messageTypeId_ = 0;
    self->_messageId_ = 0;
    self->_messageSize_ = 0;
  }
  self->_priority_ = priority;
  self->_expiration_ = expiration;
  JreStrongAssign(&self->_target_, target);
  self->_created_ = [((NetI2pUtilClock *) nil_chk([context clock])) now];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self timestampWithNSString:@"Created"];
}

NetI2pRouterOutNetMessage *new_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *context, id<NetI2pDataI2npI2NPMessage> msg, jlong expiration, jint priority, NetI2pDataRouterRouterInfo *target) {
  J2OBJC_NEW_IMPL(NetI2pRouterOutNetMessage, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_, context, msg, expiration, priority, target)
}

NetI2pRouterOutNetMessage *create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *context, id<NetI2pDataI2npI2NPMessage> msg, jlong expiration, jint priority, NetI2pDataRouterRouterInfo *target) {
  J2OBJC_CREATE_IMPL(NetI2pRouterOutNetMessage, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_, context, msg, expiration, priority, target)
}

void NetI2pRouterOutNetMessage_locked_initTimestamps(NetI2pRouterOutNetMessage *self) {
  if (self->_timestamps_ == nil) {
    JreStrongAssignAndConsume(&self->_timestamps_, new_JavaUtilHashMap_initWithInt_(8));
    JreStrongAssignAndConsume(&self->_timestampOrder_, new_JavaUtilArrayList_initWithInt_(8));
  }
}

void NetI2pRouterOutNetMessage_renderTimestampsWithJavaLangStringBuilder_(NetI2pRouterOutNetMessage *self, JavaLangStringBuilder *buf) {
  @synchronized(self) {
    jlong lastWhen = -1;
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_timestampOrder_)) size]; i++) {
      NSString *name = [((id<JavaUtilList>) nil_chk(self->_timestampOrder_)) getWithInt:i];
      JavaLangLong *when = [((JavaUtilHashMap *) nil_chk(self->_timestamps_)) getWithId:name];
      [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"\t["];
      jlong diff = [((JavaLangLong *) nil_chk(when)) longLongValue] - lastWhen;
      if ((lastWhen > 0) && (diff > 500)) [buf appendWithNSString:@"**"];
      if (lastWhen > 0) [buf appendWithLong:diff];
      else [buf appendWithInt:0];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"ms: \t"])) appendWithNSString:name];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'='])) appendWithNSString:NetI2pRouterOutNetMessage_formatDateWithLong_([when longLongValue])];
      [buf appendWithNSString:@"]\n"];
      lastWhen = [when longLongValue];
    }
  }
}

NSString *NetI2pRouterOutNetMessage_formatDateWithLong_(jlong when) {
  NetI2pRouterOutNetMessage_initialize();
  JavaUtilDate *d = create_JavaUtilDate_initWithLong_(when);
  @synchronized(NetI2pRouterOutNetMessage__fmt) {
    return JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(NetI2pRouterOutNetMessage__fmt)) formatWithJavaUtilDate:d]);
  }
}

IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterOutNetMessage__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterOutNetMessage)
