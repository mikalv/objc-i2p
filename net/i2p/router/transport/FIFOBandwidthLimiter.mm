//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/FIFOBandwidthLimiter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/FIFOBandwidthRefiller.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@class NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest;
@class NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest;

@interface NetI2pRouterTransportFIFOBandwidthLimiter () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  id<JavaUtilList> _pendingInboundRequests_;
  id<JavaUtilList> _pendingOutboundRequests_;
  JavaUtilConcurrentAtomicAtomicInteger *_availableInbound_;
  JavaUtilConcurrentAtomicAtomicInteger *_availableOutbound_;
  JavaUtilConcurrentAtomicAtomicInteger *_unavailableInboundBurst_;
  JavaUtilConcurrentAtomicAtomicInteger *_unavailableOutboundBurst_;
  jint _maxInboundBurst_;
  jint _maxOutboundBurst_;
  jint _maxInbound_;
  jint _maxOutbound_;
  jboolean _outboundUnlimited_;
  jboolean _inboundUnlimited_;
  JavaUtilConcurrentAtomicAtomicLong *_totalAllocatedInboundBytes_;
  JavaUtilConcurrentAtomicAtomicLong *_totalAllocatedOutboundBytes_;
  NetI2pRouterTransportFIFOBandwidthRefiller *_refiller_;
  JavaLangThread *_refillerThread_;
  jlong _lastTotalSent_;
  jlong _lastTotalReceived_;
  jlong _lastStatsUpdated_;
  jfloat _sendBps_;
  jfloat _recvBps_;
  jfloat _sendBps15s_;
  jfloat _recvBps15s_;
}

- (void)clear;

- (void)requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *)req
                                                                          withInt:(jint)bytesIn
                                                                     withNSString:(NSString *)purpose;

- (void)requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *)req
                                                                           withInt:(jint)bytesOut
                                                                      withNSString:(NSString *)purpose;

- (void)updateStats;

- (void)satisfyRequestsWithJavaUtilList:(id<JavaUtilList>)buffer;

- (void)satisfyInboundRequestsWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (jlong)locked_getLongestInboundWait;

- (jlong)locked_getLongestOutboundWait;

- (void)locked_satisfyInboundUnlimitedWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (void)locked_satisfyInboundAvailableWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (void)satisfyOutboundRequestsWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (void)locked_satisfyOutboundUnlimitedWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (void)locked_satisfyOutboundAvailableWithJavaUtilList:(id<JavaUtilList>)satisfied;

- (jboolean)shortcutSatisfyInboundRequestWithInt:(jint)requested;

- (jboolean)shortcutSatisfyOutboundRequestWithInt:(jint)requested;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _pendingInboundRequests_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _pendingOutboundRequests_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _availableInbound_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _availableOutbound_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _unavailableInboundBurst_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _unavailableOutboundBurst_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _totalAllocatedInboundBytes_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _totalAllocatedOutboundBytes_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _refiller_, NetI2pRouterTransportFIFOBandwidthRefiller *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter, _refillerThread_, JavaLangThread *)

inline JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterTransportFIFOBandwidthLimiter_get___requestId(void);
static JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterTransportFIFOBandwidthLimiter___requestId;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportFIFOBandwidthLimiter, __requestId, JavaUtilConcurrentAtomicAtomicLong *)

inline NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *NetI2pRouterTransportFIFOBandwidthLimiter_get__noop(void);
static NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *NetI2pRouterTransportFIFOBandwidthLimiter__noop;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportFIFOBandwidthLimiter, _noop, NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *)

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_clear(NetI2pRouterTransportFIFOBandwidthLimiter *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(NetI2pRouterTransportFIFOBandwidthLimiter *self, NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req, jint bytesIn, NSString *purpose);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(NetI2pRouterTransportFIFOBandwidthLimiter *self, NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req, jint bytesOut, NSString *purpose);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_updateStats(NetI2pRouterTransportFIFOBandwidthLimiter *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> buffer);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyInboundRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static jlong NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(NetI2pRouterTransportFIFOBandwidthLimiter *self);

__attribute__((unused)) static jlong NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(NetI2pRouterTransportFIFOBandwidthLimiter *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundUnlimitedWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundAvailableWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyOutboundRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundUnlimitedWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundAvailableWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied);

__attribute__((unused)) static jboolean NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyInboundRequestWithInt_(NetI2pRouterTransportFIFOBandwidthLimiter *self, jint requested);

__attribute__((unused)) static jboolean NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyOutboundRequestWithInt_(NetI2pRouterTransportFIFOBandwidthLimiter *self, jint requested);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$2(void);

@interface NetI2pRouterTransportFIFOBandwidthLimiter_Request : NSObject

@end

@interface NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest : NSObject < NetI2pRouterTransportFIFOBandwidthLimiter_Request > {
 @public
  jint _allocated_;
  jint _total_;
  jlong _requestId_;
  jlong _requestTime_;
  jint _allocationsSinceWait_;
  jboolean _aborted_;
  jboolean _waited_;
  id<JavaUtilList> satisfiedBuffer_;
  id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener> _lsnr_;
  id _attachment_;
  jint _priority_;
}

- (instancetype)initWithInt:(jint)bytes
                    withInt:(jint)priority;

- (jlong)getRequestTime;

- (jint)getTotalRequested;

- (jint)getPendingRequested;

- (jboolean)getAborted;

- (void)abort;

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)getCompleteListener;

- (void)setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:(id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)lsnr;

- (jboolean)isComplete;

- (void)waitForNextAllocation;

- (jint)getAllocationsSinceWait;

- (void)allocateBytesWithInt:(jint)bytes OBJC_METHOD_FAMILY_NONE;

- (void)notifyAllocation;

- (void)attachWithId:(id)obj;

- (id)attachment;

- (jint)getPriority;

- (void)setSeqNumWithLong:(jlong)num;

- (jlong)getSeqNum;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest, satisfiedBuffer_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest, _lsnr_, id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest, _attachment_, id)

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *self, jint bytes, jint priority);

__attribute__((unused)) static NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *new_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(jint bytes, jint priority) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *create_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(jint bytes, jint priority);

__attribute__((unused)) static jboolean NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest)

@interface NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener : NSObject

@end

@interface NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest : NSObject < NetI2pRouterTransportFIFOBandwidthLimiter_Request >

- (instancetype)init;

- (void)abort;

- (jboolean)getAborted;

- (jint)getPendingRequested;

- (NSString *)description;

- (jlong)getRequestTime;

- (jint)getTotalRequested;

- (void)waitForNextAllocation;

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)getCompleteListener;

- (void)setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:(id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)lsnr;

- (void)attachWithId:(id)obj;

- (id)attachment;

- (jint)getPriority;

- (void)setSeqNumWithLong:(jlong)num;

- (jlong)getSeqNum;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest)

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *self);

__attribute__((unused)) static NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *new_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *create_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportFIFOBandwidthLimiter)

@implementation NetI2pRouterTransportFIFOBandwidthLimiter

- (jlong)now {
  return JavaLangSystem_currentTimeMillis();
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterTransportFIFOBandwidthLimiter_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (jlong)getTotalAllocatedInboundBytes {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalAllocatedInboundBytes_)) get];
}

- (jlong)getTotalAllocatedOutboundBytes {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalAllocatedOutboundBytes_)) get];
}

- (void)setInboundUnlimitedWithBoolean:(jboolean)isUnlimited {
  _inboundUnlimited_ = isUnlimited;
}

- (void)setOutboundUnlimitedWithBoolean:(jboolean)isUnlimited {
  _outboundUnlimited_ = isUnlimited;
}

- (jfloat)getSendBps {
  return _sendBps_;
}

- (jfloat)getReceiveBps {
  return _recvBps_;
}

- (jfloat)getSendBps15s {
  return _sendBps15s_;
}

- (jfloat)getReceiveBps15s {
  return _recvBps15s_;
}

- (jint)getOutboundKBytesPerSecond {
  return [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) getOutboundKBytesPerSecond];
}

- (jint)getInboundKBytesPerSecond {
  return [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) getInboundKBytesPerSecond];
}

- (jint)getOutboundBurstKBytesPerSecond {
  return [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) getOutboundBurstKBytesPerSecond];
}

- (jint)getInboundBurstKBytesPerSecond {
  return [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) getInboundBurstKBytesPerSecond];
}

- (void)reinitialize {
  @synchronized(self) {
    NetI2pRouterTransportFIFOBandwidthLimiter_clear(self);
    [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) reinitialize];
  }
}

- (void)shutdown {
  @synchronized(self) {
    [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) shutdown];
    [((JavaLangThread *) nil_chk(_refillerThread_)) interrupt];
    NetI2pRouterTransportFIFOBandwidthLimiter_clear(self);
  }
}

- (void)clear {
  NetI2pRouterTransportFIFOBandwidthLimiter_clear(self);
}

- (void)sentParticipatingMessageWithInt:(jint)size {
  [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) incrementParticipatingMessageBytesWithInt:size];
}

- (jint)getCurrentParticipatingBandwidth {
  return [((NetI2pRouterTransportFIFOBandwidthRefiller *) nil_chk(_refiller_)) getCurrentParticipatingBandwidth];
}

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)requestInboundWithInt:(jint)bytesIn
                                                                  withNSString:(NSString *)purpose {
  if (NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyInboundRequestWithInt_(self, bytesIn)) return NetI2pRouterTransportFIFOBandwidthLimiter__noop;
  NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = create_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(bytesIn, 0);
  NetI2pRouterTransportFIFOBandwidthLimiter_requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(self, req, bytesIn, purpose);
  return req;
}

- (void)requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *)req
                                                                          withInt:(jint)bytesIn
                                                                     withNSString:(NSString *)purpose {
  NetI2pRouterTransportFIFOBandwidthLimiter_requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(self, req, bytesIn, purpose);
}

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)requestOutboundWithInt:(jint)bytesOut
                                                                        withInt:(jint)priority
                                                                   withNSString:(NSString *)purpose {
  if (NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyOutboundRequestWithInt_(self, bytesOut)) return NetI2pRouterTransportFIFOBandwidthLimiter__noop;
  NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = create_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(bytesOut, priority);
  NetI2pRouterTransportFIFOBandwidthLimiter_requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(self, req, bytesOut, purpose);
  return req;
}

- (void)requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *)req
                                                                           withInt:(jint)bytesOut
                                                                      withNSString:(NSString *)purpose {
  NetI2pRouterTransportFIFOBandwidthLimiter_requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(self, req, bytesOut, purpose);
}

- (void)setInboundBurstKBpsWithInt:(jint)kbytesPerSecond {
  _maxInbound_ = kbytesPerSecond * 1024;
}

- (void)setOutboundBurstKBpsWithInt:(jint)kbytesPerSecond {
  _maxOutbound_ = kbytesPerSecond * 1024;
}

- (jint)getInboundBurstBytes {
  return _maxInboundBurst_;
}

- (jint)getOutboundBurstBytes {
  return _maxOutboundBurst_;
}

- (void)setInboundBurstBytesWithInt:(jint)bytes {
  _maxInboundBurst_ = bytes;
}

- (void)setOutboundBurstBytesWithInt:(jint)bytes {
  _maxOutboundBurst_ = bytes;
}

- (JavaLangStringBuilder *)getStatus {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(128);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Available: "])) appendWithId:_availableInbound_])) appendWithChar:'/'])) appendWithId:_availableOutbound_])) appendWithChar:' '];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Max: "])) appendWithInt:_maxInbound_])) appendWithChar:'/'])) appendWithInt:_maxOutbound_])) appendWithChar:' '];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Burst: "])) appendWithId:_unavailableInboundBurst_])) appendWithChar:'/'])) appendWithId:_unavailableOutboundBurst_])) appendWithChar:' '];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Burst max: "])) appendWithInt:_maxInboundBurst_])) appendWithChar:'/'])) appendWithInt:_maxOutboundBurst_])) appendWithChar:' '];
  return rv;
}

- (void)refillBandwidthQueuesWithJavaUtilList:(id<JavaUtilList>)buf
                                     withLong:(jlong)bytesInbound
                                     withLong:(jlong)bytesOutbound
                                     withLong:(jlong)maxBurstIn
                                     withLong:(jlong)maxBurstOut {
  jint avi = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_availableInbound_)) addAndGetWithInt:(jint) bytesInbound];
  if (avi > _maxInbound_) {
    jint uib = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_unavailableInboundBurst_)) addAndGetWithInt:avi - _maxInbound_];
    [_availableInbound_ setWithInt:_maxInbound_];
    if (uib > _maxInboundBurst_) {
      [_unavailableInboundBurst_ setWithInt:_maxInboundBurst_];
    }
  }
  else {
    jint want = (jint) maxBurstIn;
    if (want > (_maxInbound_ - avi)) want = _maxInbound_ - avi;
    if (want > 0) {
      jint uib = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_unavailableInboundBurst_)) get];
      if (want <= uib) {
        [_availableInbound_ addAndGetWithInt:want];
        [_unavailableInboundBurst_ addAndGetWithInt:0 - want];
      }
      else {
        [_availableInbound_ addAndGetWithInt:uib];
        [_unavailableInboundBurst_ setWithInt:0];
      }
    }
  }
  jint avo = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_availableOutbound_)) addAndGetWithInt:(jint) bytesOutbound];
  if (avo > _maxOutbound_) {
    jint uob = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_unavailableOutboundBurst_)) getAndAddWithInt:avo - _maxOutbound_];
    [_availableOutbound_ setWithInt:_maxOutbound_];
    if (uob > _maxOutboundBurst_) {
      [_unavailableOutboundBurst_ setWithInt:_maxOutboundBurst_];
    }
  }
  else {
    jint want = (jint) maxBurstOut;
    if (want > (_maxOutbound_ - avo)) want = _maxOutbound_ - avo;
    if (want > 0) {
      jint uob = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_unavailableOutboundBurst_)) get];
      if (want <= uob) {
        [_availableOutbound_ addAndGetWithInt:want];
        [_unavailableOutboundBurst_ addAndGetWithInt:0 - want];
      }
      else {
        [_availableOutbound_ addAndGetWithInt:uob];
        [_unavailableOutboundBurst_ setWithInt:0];
      }
    }
  }
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyRequestsWithJavaUtilList_(self, buf);
  NetI2pRouterTransportFIFOBandwidthLimiter_updateStats(self);
}

- (void)updateStats {
  NetI2pRouterTransportFIFOBandwidthLimiter_updateStats(self);
}

- (void)satisfyRequestsWithJavaUtilList:(id<JavaUtilList>)buffer {
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyRequestsWithJavaUtilList_(self, buffer);
}

- (void)satisfyInboundRequestsWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyInboundRequestsWithJavaUtilList_(self, satisfied);
}

- (jlong)locked_getLongestInboundWait {
  return NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(self);
}

- (jlong)locked_getLongestOutboundWait {
  return NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(self);
}

- (void)locked_satisfyInboundUnlimitedWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundUnlimitedWithJavaUtilList_(self, satisfied);
}

- (void)locked_satisfyInboundAvailableWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundAvailableWithJavaUtilList_(self, satisfied);
}

- (void)satisfyOutboundRequestsWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyOutboundRequestsWithJavaUtilList_(self, satisfied);
}

- (void)locked_satisfyOutboundUnlimitedWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundUnlimitedWithJavaUtilList_(self, satisfied);
}

- (void)locked_satisfyOutboundAvailableWithJavaUtilList:(id<JavaUtilList>)satisfied {
  NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundAvailableWithJavaUtilList_(self, satisfied);
}

- (jboolean)shortcutSatisfyInboundRequestWithInt:(jint)requested {
  return NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyInboundRequestWithInt_(self, requested);
}

- (jboolean)shortcutSatisfyOutboundRequestWithInt:(jint)requested {
  return NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyOutboundRequestWithInt_(self, requested);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_pendingInboundRequests_);
  RELEASE_(_pendingOutboundRequests_);
  RELEASE_(_availableInbound_);
  RELEASE_(_availableOutbound_);
  RELEASE_(_unavailableInboundBurst_);
  RELEASE_(_unavailableOutboundBurst_);
  RELEASE_(_totalAllocatedInboundBytes_);
  RELEASE_(_totalAllocatedOutboundBytes_);
  RELEASE_(_refiller_);
  RELEASE_(_refillerThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, 3, -1 },
    { NULL, "V", 0x0, 4, 2, -1, -1, 5, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 10, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x12, 23, 21, -1, 22, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 24, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x12, 25, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x12, 26, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x12, 27, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x12, 28, 21, -1, 22, -1, -1 },
    { NULL, "Z", 0x2, 29, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 30, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 33, -1, 34, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(getTotalAllocatedInboundBytes);
  methods[3].selector = @selector(getTotalAllocatedOutboundBytes);
  methods[4].selector = @selector(setInboundUnlimitedWithBoolean:);
  methods[5].selector = @selector(setOutboundUnlimitedWithBoolean:);
  methods[6].selector = @selector(getSendBps);
  methods[7].selector = @selector(getReceiveBps);
  methods[8].selector = @selector(getSendBps15s);
  methods[9].selector = @selector(getReceiveBps15s);
  methods[10].selector = @selector(getOutboundKBytesPerSecond);
  methods[11].selector = @selector(getInboundKBytesPerSecond);
  methods[12].selector = @selector(getOutboundBurstKBytesPerSecond);
  methods[13].selector = @selector(getInboundBurstKBytesPerSecond);
  methods[14].selector = @selector(reinitialize);
  methods[15].selector = @selector(shutdown);
  methods[16].selector = @selector(clear);
  methods[17].selector = @selector(sentParticipatingMessageWithInt:);
  methods[18].selector = @selector(getCurrentParticipatingBandwidth);
  methods[19].selector = @selector(requestInboundWithInt:withNSString:);
  methods[20].selector = @selector(requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:withInt:withNSString:);
  methods[21].selector = @selector(requestOutboundWithInt:withInt:withNSString:);
  methods[22].selector = @selector(requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest:withInt:withNSString:);
  methods[23].selector = @selector(setInboundBurstKBpsWithInt:);
  methods[24].selector = @selector(setOutboundBurstKBpsWithInt:);
  methods[25].selector = @selector(getInboundBurstBytes);
  methods[26].selector = @selector(getOutboundBurstBytes);
  methods[27].selector = @selector(setInboundBurstBytesWithInt:);
  methods[28].selector = @selector(setOutboundBurstBytesWithInt:);
  methods[29].selector = @selector(getStatus);
  methods[30].selector = @selector(refillBandwidthQueuesWithJavaUtilList:withLong:withLong:withLong:withLong:);
  methods[31].selector = @selector(updateStats);
  methods[32].selector = @selector(satisfyRequestsWithJavaUtilList:);
  methods[33].selector = @selector(satisfyInboundRequestsWithJavaUtilList:);
  methods[34].selector = @selector(locked_getLongestInboundWait);
  methods[35].selector = @selector(locked_getLongestOutboundWait);
  methods[36].selector = @selector(locked_satisfyInboundUnlimitedWithJavaUtilList:);
  methods[37].selector = @selector(locked_satisfyInboundAvailableWithJavaUtilList:);
  methods[38].selector = @selector(satisfyOutboundRequestsWithJavaUtilList:);
  methods[39].selector = @selector(locked_satisfyOutboundUnlimitedWithJavaUtilList:);
  methods[40].selector = @selector(locked_satisfyOutboundAvailableWithJavaUtilList:);
  methods[41].selector = @selector(shortcutSatisfyInboundRequestWithInt:);
  methods[42].selector = @selector(shortcutSatisfyOutboundRequestWithInt:);
  methods[43].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingInboundRequests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "_pendingOutboundRequests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "_availableInbound_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_availableOutbound_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_unavailableInboundBurst_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_unavailableOutboundBurst_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxInboundBurst_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_maxOutboundBurst_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_maxInbound_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_maxOutbound_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outboundUnlimited_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inboundUnlimited_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_totalAllocatedInboundBytes_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_totalAllocatedOutboundBytes_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "__requestId", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "_refiller_", "LNetI2pRouterTransportFIFOBandwidthRefiller;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_refillerThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastTotalSent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTotalReceived_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastStatsUpdated_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendBps_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_recvBps_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendBps15s_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_recvBps15s_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_noop", "LNetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setInboundUnlimited", "Z", (void *)&NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$0, "setOutboundUnlimited", (void *)&NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$1, "sentParticipatingMessage", "I", "requestInbound", "ILNSString;", "LNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest;ILNSString;", "requestOutbound", "IILNSString;", "setInboundBurstKBps", "setOutboundBurstKBps", "setInboundBurstBytes", "setOutboundBurstBytes", "refillBandwidthQueues", "LJavaUtilList;JJJJ", "(Ljava/util/List<Lnet/i2p/router/transport/FIFOBandwidthLimiter$Request;>;JJJJ)V", "satisfyRequests", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/transport/FIFOBandwidthLimiter$Request;>;)V", "satisfyInboundRequests", "locked_satisfyInboundUnlimited", "locked_satisfyInboundAvailable", "satisfyOutboundRequests", "locked_satisfyOutboundUnlimited", "locked_satisfyOutboundAvailable", "shortcutSatisfyInboundRequest", "shortcutSatisfyOutboundRequest", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$2, "Ljava/util/List<Lnet/i2p/router/transport/FIFOBandwidthLimiter$SimpleRequest;>;", &NetI2pRouterTransportFIFOBandwidthLimiter___requestId, &NetI2pRouterTransportFIFOBandwidthLimiter__noop, "LNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest;LNetI2pRouterTransportFIFOBandwidthLimiter_Request;LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;LNetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthLimiter = { "FIFOBandwidthLimiter", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 44, 27, -1, 38, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthLimiter;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportFIFOBandwidthLimiter class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportFIFOBandwidthLimiter___requestId, new_JavaUtilConcurrentAtomicAtomicLong_init());
    JreStrongAssignAndConsume(&NetI2pRouterTransportFIFOBandwidthLimiter__noop, new_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportFIFOBandwidthLimiter)
  }
}

@end

void NetI2pRouterTransportFIFOBandwidthLimiter_initWithNetI2pI2PAppContext_(NetI2pRouterTransportFIFOBandwidthLimiter *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_availableInbound_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_availableOutbound_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_unavailableInboundBurst_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_unavailableOutboundBurst_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_totalAllocatedInboundBytes_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_totalAllocatedOutboundBytes_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTransportFIFOBandwidthLimiter_class_()]);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"bwLimiter.pendingOutboundRequests" withNSString:@"How many outbound requests are ahead of the current one (ignoring ones with 0)?" withNSString:@"BandwidthLimiter" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"bwLimiter.pendingInboundRequests" withNSString:@"How many inbound requests are ahead of the current one (ignoring ones with 0)?" withNSString:@"BandwidthLimiter" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"bwLimiter.outboundDelayedTime" withNSString:@"How long it takes to honor an outbound request (ignoring ones with that go instantly)?" withNSString:@"BandwidthLimiter" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"bwLimiter.inboundDelayedTime" withNSString:@"How long it takes to honor an inbound request (ignoring ones with that go instantly)?" withNSString:@"BandwidthLimiter" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 60 * 60 * 1000l } count:2]];
  JreStrongAssignAndConsume(&self->_pendingInboundRequests_, new_JavaUtilArrayList_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_pendingOutboundRequests_, new_JavaUtilArrayList_initWithInt_(16));
  self->_lastTotalSent_ = [self->_totalAllocatedOutboundBytes_ get];
  self->_lastTotalReceived_ = [self->_totalAllocatedInboundBytes_ get];
  self->_lastStatsUpdated_ = [self now];
  JreStrongAssignAndConsume(&self->_refiller_, new_NetI2pRouterTransportFIFOBandwidthRefiller_initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_(self->_context_, self));
  JreStrongAssignAndConsume(&self->_refillerThread_, new_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self->_refiller_, @"BWRefiller", true));
  [self->_refillerThread_ setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
  [self->_refillerThread_ start];
}

NetI2pRouterTransportFIFOBandwidthLimiter *new_NetI2pRouterTransportFIFOBandwidthLimiter_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterTransportFIFOBandwidthLimiter *create_NetI2pRouterTransportFIFOBandwidthLimiter_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter, initWithNetI2pI2PAppContext_, context)
}

void NetI2pRouterTransportFIFOBandwidthLimiter_clear(NetI2pRouterTransportFIFOBandwidthLimiter *self) {
  [((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) clear];
  [((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) clear];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableInbound_)) setWithInt:0];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableOutbound_)) setWithInt:0];
  self->_maxInbound_ = 0;
  self->_maxOutbound_ = 0;
  self->_maxInboundBurst_ = 0;
  self->_maxOutboundBurst_ = 0;
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_unavailableInboundBurst_)) setWithInt:0];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_unavailableOutboundBurst_)) setWithInt:0];
}

void NetI2pRouterTransportFIFOBandwidthLimiter_requestInboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(NetI2pRouterTransportFIFOBandwidthLimiter *self, NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req, jint bytesIn, NSString *purpose) {
  jint pending;
  @synchronized(self->_pendingInboundRequests_) {
    pending = [((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) size];
    [self->_pendingInboundRequests_ addWithId:req];
  }
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyInboundRequestsWithJavaUtilList_(self, ((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req))->satisfiedBuffer_);
  [((id<JavaUtilList>) nil_chk(req->satisfiedBuffer_)) clear];
  if (pending > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.pendingInboundRequests" withLong:pending];
}

void NetI2pRouterTransportFIFOBandwidthLimiter_requestOutboundWithNetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_withInt_withNSString_(NetI2pRouterTransportFIFOBandwidthLimiter *self, NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req, jint bytesOut, NSString *purpose) {
  jint pending;
  @synchronized(self->_pendingOutboundRequests_) {
    pending = [((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) size];
    [self->_pendingOutboundRequests_ addWithId:req];
  }
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyOutboundRequestsWithJavaUtilList_(self, ((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req))->satisfiedBuffer_);
  [((id<JavaUtilList>) nil_chk(req->satisfiedBuffer_)) clear];
  if (pending > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.pendingOutboundRequests" withLong:pending];
}

void NetI2pRouterTransportFIFOBandwidthLimiter_updateStats(NetI2pRouterTransportFIFOBandwidthLimiter *self) {
  jlong now = [self now];
  jlong time = now - self->_lastStatsUpdated_;
  if (time >= 1000) {
    jlong totS = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedOutboundBytes_)) get];
    jlong totR = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedInboundBytes_)) get];
    jlong sent = totS - self->_lastTotalSent_;
    jlong recv = totR - self->_lastTotalReceived_;
    self->_lastTotalSent_ = totS;
    self->_lastTotalReceived_ = totR;
    self->_lastStatsUpdated_ = now;
    if (self->_sendBps_ <= 0) self->_sendBps_ = (sent * 1000.0f) / time;
    else self->_sendBps_ = (0.9f) * self->_sendBps_ + (0.1f) * (sent * 1000.0f) / time;
    if (self->_recvBps_ <= 0) self->_recvBps_ = (recv * 1000.0f) / time;
    else self->_recvBps_ = (0.9f) * self->_recvBps_ + (0.1f) * ((jfloat) recv * 1000) / time;
    self->_sendBps15s_ = (0.955f) * self->_sendBps15s_ + (0.045f) * (sent * 1000.0f) / time;
    self->_recvBps15s_ = (0.955f) * self->_recvBps15s_ + (0.045f) * ((jfloat) recv * 1000) / time;
  }
}

void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> buffer) {
  [((id<JavaUtilList>) nil_chk(buffer)) clear];
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyInboundRequestsWithJavaUtilList_(self, buffer);
  [buffer clear];
  NetI2pRouterTransportFIFOBandwidthLimiter_satisfyOutboundRequestsWithJavaUtilList_(self, buffer);
}

void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyInboundRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  @synchronized(self->_pendingInboundRequests_) {
    if (self->_inboundUnlimited_) {
      NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundUnlimitedWithJavaUtilList_(self, satisfied);
    }
    else {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableInbound_)) get] > 0) {
        NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundAvailableWithJavaUtilList_(self, satisfied);
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$$$JC", @"Still denying the ", [((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) size], @" pending inbound requests (status: ", [((JavaLangStringBuilder *) nil_chk([self getStatus])) description], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(self), ')')];
      }
    }
  }
  if (satisfied != nil) {
    for (jint i = 0; i < [satisfied size]; i++) {
      NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *creq = (NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) cast_chk([satisfied getWithInt:i], [NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest class]);
      [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(creq)) notifyAllocation];
    }
  }
}

jlong NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(NetI2pRouterTransportFIFOBandwidthLimiter *self) {
  jlong start = -1;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) size]; i++) {
    id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req = [self->_pendingInboundRequests_ getWithInt:i];
    if ((start < 0) || (start > [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) getRequestTime])) start = [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) getRequestTime];
  }
  if (start == -1) return 0;
  else return [self now] - start;
}

jlong NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(NetI2pRouterTransportFIFOBandwidthLimiter *self) {
  jlong start = -1;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) size]; i++) {
    id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req = [self->_pendingOutboundRequests_ getWithInt:i];
    if (req == nil) continue;
    if ((start < 0) || (start > [req getRequestTime])) start = [req getRequestTime];
  }
  if (start == -1) return 0;
  else return [self now] - start;
}

void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundUnlimitedWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  while (![((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) isEmpty]) {
    NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = [self->_pendingInboundRequests_ removeWithInt:0];
    jint allocated = [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req)) getPendingRequested];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedInboundBytes_)) addAndGetWithLong:allocated];
    [req allocateBytesWithInt:allocated];
    [((id<JavaUtilList>) nil_chk(satisfied)) addWithId:req];
    jlong waited = [self now] - [req getRequestTime];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J$I", @"Granting inbound request ", req, @" fully (waited ", waited, @"ms) pending ", [self->_pendingInboundRequests_ size])];
    if (waited > 10) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.inboundDelayedTime" withLong:waited];
  }
}

void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyInboundAvailableWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) size]; i++) {
    NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = [self->_pendingInboundRequests_ getWithInt:i];
    jlong waited = [self now] - [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req)) getRequestTime];
    if ([req getAborted]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J$I", @"Aborting inbound request to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingInboundRequests_ size])];
      [self->_pendingInboundRequests_ removeWithInt:i];
      i--;
      continue;
    }
    jint avi = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableInbound_)) get];
    if (avi <= 0) break;
    jint requested = [req getPendingRequested];
    jint allocated;
    if (avi >= requested) allocated = requested;
    else allocated = avi;
    [self->_availableInbound_ addAndGetWithInt:0 - allocated];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedInboundBytes_)) addAndGetWithLong:allocated];
    [req allocateBytesWithInt:allocated];
    [((id<JavaUtilList>) nil_chk(satisfied)) addWithId:req];
    if ([req getPendingRequested] > 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$J$I$J$", @"Allocating ", allocated, @" bytes inbound as a partial grant to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingInboundRequests_ size], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(self), @" in")];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$J$I$J$", @"Allocating ", allocated, @" bytes inbound to finish the partial grant to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingInboundRequests_ size], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestInboundWait(self), @" out")];
      [self->_pendingInboundRequests_ removeWithInt:i];
      i--;
      if (waited > 10) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.inboundDelayedTime" withLong:waited];
    }
  }
}

void NetI2pRouterTransportFIFOBandwidthLimiter_satisfyOutboundRequestsWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  @synchronized(self->_pendingOutboundRequests_) {
    if (self->_outboundUnlimited_) {
      NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundUnlimitedWithJavaUtilList_(self, satisfied);
    }
    else {
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableOutbound_)) get] > 0) {
        NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundAvailableWithJavaUtilList_(self, satisfied);
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$$$JC", @"Still denying the ", [((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) size], @" pending outbound requests (status: ", [((JavaLangStringBuilder *) nil_chk([self getStatus])) description], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(self), ')')];
      }
    }
  }
  if (satisfied != nil) {
    for (jint i = 0; i < [satisfied size]; i++) {
      NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *creq = (NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) cast_chk([satisfied getWithInt:i], [NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest class]);
      [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(creq)) notifyAllocation];
    }
  }
}

void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundUnlimitedWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  while (![((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) isEmpty]) {
    NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = [self->_pendingOutboundRequests_ removeWithInt:0];
    jint allocated = [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req)) getPendingRequested];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedOutboundBytes_)) addAndGetWithLong:allocated];
    [req allocateBytesWithInt:allocated];
    [((id<JavaUtilList>) nil_chk(satisfied)) addWithId:req];
    jlong waited = [self now] - [req getRequestTime];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J$I$J$", @"Granting outbound request ", req, @" fully (waited ", waited, @"ms) pending ", [self->_pendingOutboundRequests_ size], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(self), @" out")];
    if (waited > 10) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.outboundDelayedTime" withLong:waited];
  }
}

void NetI2pRouterTransportFIFOBandwidthLimiter_locked_satisfyOutboundAvailableWithJavaUtilList_(NetI2pRouterTransportFIFOBandwidthLimiter *self, id<JavaUtilList> satisfied) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) size]; i++) {
    NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *req = [self->_pendingOutboundRequests_ getWithInt:i];
    jlong waited = [self now] - [((NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *) nil_chk(req)) getRequestTime];
    if ([req getAborted]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J$I", @"Aborting outbound request to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingOutboundRequests_ size])];
      [self->_pendingOutboundRequests_ removeWithInt:i];
      i--;
      continue;
    }
    jint avo = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableOutbound_)) get];
    if (avo <= 0) break;
    jint requested = [req getPendingRequested];
    jint allocated;
    if (avo >= requested) allocated = requested;
    else allocated = avo;
    [self->_availableOutbound_ addAndGetWithInt:0 - allocated];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedOutboundBytes_)) addAndGetWithLong:allocated];
    [req allocateBytesWithInt:allocated];
    [((id<JavaUtilList>) nil_chk(satisfied)) addWithId:req];
    if ([req getPendingRequested] > 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$J$I$J$", @"Allocating ", allocated, @" bytes outbound as a partial grant to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingOutboundRequests_ size], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(self), @" out")];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$J$I$J$", @"Allocating ", allocated, @" bytes outbound to finish the partial grant to ", req, @" waited ", waited, @"ms) pending ", [self->_pendingOutboundRequests_ size], @", longest waited ", NetI2pRouterTransportFIFOBandwidthLimiter_locked_getLongestOutboundWait(self), @" out)")];
      [self->_pendingOutboundRequests_ removeWithInt:i];
      i--;
      if (waited > 10) [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"bwLimiter.outboundDelayedTime" withLong:waited];
    }
  }
}

jboolean NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyInboundRequestWithInt_(NetI2pRouterTransportFIFOBandwidthLimiter *self, jint requested) {
  jboolean rv = self->_inboundUnlimited_ || ([((id<JavaUtilList>) nil_chk(self->_pendingInboundRequests_)) isEmpty] && [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableInbound_)) get] >= requested);
  if (rv) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableInbound_)) addAndGetWithInt:0 - requested];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedInboundBytes_)) addAndGetWithLong:requested];
  }
  return rv;
}

jboolean NetI2pRouterTransportFIFOBandwidthLimiter_shortcutSatisfyOutboundRequestWithInt_(NetI2pRouterTransportFIFOBandwidthLimiter *self, jint requested) {
  jboolean rv = self->_outboundUnlimited_ || ([((id<JavaUtilList>) nil_chk(self->_pendingOutboundRequests_)) isEmpty] && [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableOutbound_)) get] >= requested);
  if (rv) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_availableOutbound_)) addAndGetWithInt:0 - requested];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->_totalAllocatedOutboundBytes_)) addAndGetWithLong:requested];
  }
  return rv;
}

IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportFIFOBandwidthLimiter__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthLimiter)

@implementation NetI2pRouterTransportFIFOBandwidthLimiter_Request

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getRequestTime);
  methods[1].selector = @selector(getTotalRequested);
  methods[2].selector = @selector(getPendingRequested);
  methods[3].selector = @selector(waitForNextAllocation);
  methods[4].selector = @selector(abort);
  methods[5].selector = @selector(getAborted);
  methods[6].selector = @selector(setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:);
  methods[7].selector = @selector(attachWithId:);
  methods[8].selector = @selector(attachment);
  methods[9].selector = @selector(getCompleteListener);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setCompleteListener", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", "attach", "LNSObject;", "LNetI2pRouterTransportFIFOBandwidthLimiter;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthLimiter_Request = { "Request", "net.i2p.router.transport", ptrTable, methods, NULL, 7, 0x609, 10, 0, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthLimiter_Request;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthLimiter_Request)

@implementation NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest

- (instancetype)initWithInt:(jint)bytes
                    withInt:(jint)priority {
  NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(self, bytes, priority);
  return self;
}

- (jlong)getRequestTime {
  return _requestTime_;
}

- (jint)getTotalRequested {
  return _total_;
}

- (jint)getPendingRequested {
  @synchronized(self) {
    return _total_ - _allocated_;
  }
}

- (jboolean)getAborted {
  return _aborted_;
}

- (void)abort {
  @synchronized(self) {
    _aborted_ = true;
    _allocated_ = _total_;
    [self notifyAllocation];
  }
}

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)getCompleteListener {
  return _lsnr_;
}

- (void)setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:(id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)lsnr {
  jboolean complete = false;
  @synchronized(self) {
    JreStrongAssign(&_lsnr_, lsnr);
    if (NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(self)) {
      complete = true;
    }
  }
  if (complete && lsnr != nil) {
    [lsnr completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:self];
  }
}

- (jboolean)isComplete {
  return NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(self);
}

- (void)waitForNextAllocation {
  jboolean complete = false;
  @try {
    @synchronized(self) {
      _waited_ = true;
      _allocationsSinceWait_ = 0;
      if (NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(self)) complete = true;
      else [self java_waitWithLong:100];
    }
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  if (complete && _lsnr_ != nil) [_lsnr_ completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:self];
}

- (jint)getAllocationsSinceWait {
  @synchronized(self) {
    return _waited_ ? _allocationsSinceWait_ : 0;
  }
}

- (void)allocateBytesWithInt:(jint)bytes {
  @synchronized(self) {
    _allocated_ += bytes;
    if (_lsnr_ == nil) _allocationsSinceWait_++;
  }
}

- (void)notifyAllocation {
  jboolean complete = false;
  @synchronized(self) {
    if (NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(self)) complete = true;
    [self java_notifyAll];
  }
  if (complete && _lsnr_ != nil) {
    [_lsnr_ completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:self];
  }
}

- (void)attachWithId:(id)obj {
  JreStrongAssign(&_attachment_, obj);
}

- (id)attachment {
  return _attachment_;
}

- (jint)getPriority {
  return _priority_;
}

- (void)setSeqNumWithLong:(jlong)num {
}

- (jlong)getSeqNum {
  return _requestId_;
}

- (NSString *)description {
  return JreStrcat("$J$ICICI$", @"Req: ", _requestId_, @" priority: ", _priority_, ' ', _allocated_, '/', _total_, @" bytes");
}

- (void)dealloc {
  RELEASE_(satisfiedBuffer_);
  RELEASE_(_lsnr_);
  RELEASE_(_attachment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(getRequestTime);
  methods[2].selector = @selector(getTotalRequested);
  methods[3].selector = @selector(getPendingRequested);
  methods[4].selector = @selector(getAborted);
  methods[5].selector = @selector(abort);
  methods[6].selector = @selector(getCompleteListener);
  methods[7].selector = @selector(setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:);
  methods[8].selector = @selector(isComplete);
  methods[9].selector = @selector(waitForNextAllocation);
  methods[10].selector = @selector(getAllocationsSinceWait);
  methods[11].selector = @selector(allocateBytesWithInt:);
  methods[12].selector = @selector(notifyAllocation);
  methods[13].selector = @selector(attachWithId:);
  methods[14].selector = @selector(attachment);
  methods[15].selector = @selector(getPriority);
  methods[16].selector = @selector(setSeqNumWithLong:);
  methods[17].selector = @selector(getSeqNum);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_allocated_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_total_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_requestId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_requestTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_allocationsSinceWait_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aborted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_waited_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "satisfiedBuffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "_lsnr_", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_attachment_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setCompleteListener", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", "allocateBytes", "I", "attach", "LNSObject;", "setSeqNum", "J", "toString", "Ljava/util/List<Lnet/i2p/router/transport/FIFOBandwidthLimiter$Request;>;", "LNetI2pRouterTransportFIFOBandwidthLimiter;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest = { "SimpleRequest", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0xa, 19, 11, 11, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest;
}

@end

void NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *self, jint bytes, jint priority) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->satisfiedBuffer_, new_JavaUtilArrayList_initWithInt_(1));
  self->_total_ = bytes;
  self->_priority_ = priority;
  self->_requestTime_ = JavaLangSystem_currentTimeMillis();
  self->_requestId_ = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(JreLoadStatic(NetI2pRouterTransportFIFOBandwidthLimiter, __requestId))) incrementAndGet];
}

NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *new_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(jint bytes, jint priority) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest, initWithInt_withInt_, bytes, priority)
}

NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *create_NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_initWithInt_withInt_(jint bytes, jint priority) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest, initWithInt_withInt_, bytes, priority)
}

jboolean NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest_isComplete(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest *self) {
  @synchronized(self) {
    return self->_allocated_ >= self->_total_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthLimiter_SimpleRequest)

@implementation NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "complete", "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", "LNetI2pRouterTransportFIFOBandwidthLimiter;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener = { "CompleteListener", "net.i2p.router.transport", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener)

@implementation NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)abort {
}

- (jboolean)getAborted {
  return false;
}

- (jint)getPendingRequested {
  return 0;
}

- (NSString *)description {
  return @"noop";
}

- (jlong)getRequestTime {
  return 0;
}

- (jint)getTotalRequested {
  return 0;
}

- (void)waitForNextAllocation {
}

- (id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)getCompleteListener {
  return nil;
}

- (void)setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:(id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)lsnr {
  [((id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>) nil_chk(lsnr)) completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:self];
}

- (void)attachWithId:(id)obj {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Don't attach to a satisfied request");
}

- (id)attachment {
  return nil;
}

- (jint)getPriority {
  return 0;
}

- (void)setSeqNumWithLong:(jlong)num {
}

- (jlong)getSeqNum {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(abort);
  methods[2].selector = @selector(getAborted);
  methods[3].selector = @selector(getPendingRequested);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(getRequestTime);
  methods[6].selector = @selector(getTotalRequested);
  methods[7].selector = @selector(waitForNextAllocation);
  methods[8].selector = @selector(getCompleteListener);
  methods[9].selector = @selector(setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:);
  methods[10].selector = @selector(attachWithId:);
  methods[11].selector = @selector(attachment);
  methods[12].selector = @selector(getPriority);
  methods[13].selector = @selector(setSeqNumWithLong:);
  methods[14].selector = @selector(getSeqNum);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toString", "setCompleteListener", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", "attach", "LNSObject;", "setSeqNum", "J", "LNetI2pRouterTransportFIFOBandwidthLimiter;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest = { "NoopRequest", "net.i2p.router.transport", ptrTable, methods, NULL, 7, 0xa, 15, 0, 7, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest;
}

@end

void NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *self) {
  NSObject_init(self);
}

NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *new_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest, init)
}

NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest *create_NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthLimiter_NoopRequest)
