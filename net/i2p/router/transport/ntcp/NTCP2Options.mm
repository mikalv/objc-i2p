//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/NTCP2Options.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/transport/ntcp/NTCP2Options.h"

@interface NetI2pRouterTransportNtcpNTCP2Options () {
 @public
  jfloat _sendMin_;
  jfloat _sendMax_;
  jfloat _recvMin_;
  jfloat _recvMax_;
  jint _sendDummy_;
  jint _recvDummy_;
  jint _sendDelay_;
  jint _recvDelay_;
}

@end

@implementation NetI2pRouterTransportNtcpNTCP2Options

- (instancetype)initWithFloat:(jfloat)sendMin
                    withFloat:(jfloat)sendMax
                    withFloat:(jfloat)recvMin
                    withFloat:(jfloat)recvMax
                      withInt:(jint)sendDummy
                      withInt:(jint)recvDummy
                      withInt:(jint)sendDelay
                      withInt:(jint)recvDelay {
  NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(self, sendMin, sendMax, recvMin, recvMax, sendDummy, recvDummy, sendDelay, recvDelay);
  return self;
}

- (jfloat)getSendMin {
  return _sendMin_;
}

- (jfloat)getSendMax {
  return _sendMax_;
}

- (jfloat)getRecvMin {
  return _recvMin_;
}

- (jfloat)getRecvMax {
  return _recvMax_;
}

- (jint)getSendDummy {
  return _sendDummy_;
}

- (jint)getRecvDummy {
  return _recvDummy_;
}

- (jint)getSendDelay {
  return _sendDelay_;
}

- (jint)getRecvDelay {
  return _recvDelay_;
}

- (NetI2pRouterTransportNtcpNTCP2Options *)mergeWithNetI2pRouterTransportNtcpNTCP2Options:(NetI2pRouterTransportNtcpNTCP2Options *)his {
  jfloat xsMin = JavaLangMath_maxWithFloat_withFloat_(_sendMin_, [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(his)) getRecvMin]);
  jfloat xsMax = JavaLangMath_minWithFloat_withFloat_(_sendMax_, [his getRecvMax]);
  if (xsMin > xsMax) xsMin = xsMax;
  jfloat xrMin = JavaLangMath_maxWithFloat_withFloat_(_recvMin_, [his getSendMin]);
  jfloat xrMax = JavaLangMath_minWithFloat_withFloat_(_recvMax_, [his getSendMax]);
  if (xrMin > xrMax) xrMin = xrMax;
  jint xsDummy = JavaLangMath_minWithInt_withInt_(_sendDummy_, [his getRecvDummy]);
  jint xrDummy = JavaLangMath_minWithInt_withInt_(_recvDummy_, [his getSendDummy]);
  jint xsDelay = JavaLangMath_minWithInt_withInt_(_sendDelay_, [his getRecvDelay]);
  jint xrDelay = JavaLangMath_minWithInt_withInt_(_recvDelay_, [his getSendDelay]);
  return create_NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(xsMin, xsMax, xrMin, xrMax, xsDummy, xrDummy, xsDelay, xrDelay);
}

+ (NetI2pRouterTransportNtcpNTCP2Options *)fromByteArrayWithByteArray:(IOSByteArray *)options {
  return NetI2pRouterTransportNtcpNTCP2Options_fromByteArrayWithByteArray_(options);
}

- (NSString *)description {
  return JreStrcat("$F$F$F$F$I$I$I$IC", @"Padding options: send min/max %: (", (_sendMin_ * 100), @", ", (_sendMax_ * 100), @") recv min/max %: (", (_recvMin_ * 100), @", ", (_recvMax_ * 100), @") dummy send/recv B/s: (", _sendDummy_, @", ", _recvDummy_, @") delay send/recv ms: (", _sendDelay_, @", ", _recvDelay_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCP2Options;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCP2Options;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(getSendMin);
  methods[2].selector = @selector(getSendMax);
  methods[3].selector = @selector(getRecvMin);
  methods[4].selector = @selector(getRecvMax);
  methods[5].selector = @selector(getSendDummy);
  methods[6].selector = @selector(getRecvDummy);
  methods[7].selector = @selector(getSendDelay);
  methods[8].selector = @selector(getRecvDelay);
  methods[9].selector = @selector(mergeWithNetI2pRouterTransportNtcpNTCP2Options:);
  methods[10].selector = @selector(fromByteArrayWithByteArray:);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sendMin_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sendMax_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recvMin_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recvMax_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sendDummy_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recvDummy_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sendDelay_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recvDelay_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFFIIII", "merge", "LNetI2pRouterTransportNtcpNTCP2Options;", "fromByteArray", "[B", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Options = { "NTCP2Options", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 12, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Options;
}

@end

void NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(NetI2pRouterTransportNtcpNTCP2Options *self, jfloat sendMin, jfloat sendMax, jfloat recvMin, jfloat recvMax, jint sendDummy, jint recvDummy, jint sendDelay, jint recvDelay) {
  NSObject_init(self);
  self->_sendMin_ = sendMin;
  self->_sendMax_ = sendMax;
  self->_recvMin_ = recvMin;
  self->_recvMax_ = recvMax;
  self->_sendDummy_ = sendDummy;
  self->_recvDummy_ = recvDummy;
  self->_sendDelay_ = sendDelay;
  self->_recvDelay_ = recvDelay;
}

NetI2pRouterTransportNtcpNTCP2Options *new_NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(jfloat sendMin, jfloat sendMax, jfloat recvMin, jfloat recvMax, jint sendDummy, jint recvDummy, jint sendDelay, jint recvDelay) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Options, initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_, sendMin, sendMax, recvMin, recvMax, sendDummy, recvDummy, sendDelay, recvDelay)
}

NetI2pRouterTransportNtcpNTCP2Options *create_NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(jfloat sendMin, jfloat sendMax, jfloat recvMin, jfloat recvMax, jint sendDummy, jint recvDummy, jint sendDelay, jint recvDelay) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Options, initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_, sendMin, sendMax, recvMin, recvMax, sendDummy, recvDummy, sendDelay, recvDelay)
}

NetI2pRouterTransportNtcpNTCP2Options *NetI2pRouterTransportNtcpNTCP2Options_fromByteArrayWithByteArray_(IOSByteArray *options) {
  NetI2pRouterTransportNtcpNTCP2Options_initialize();
  if (((IOSByteArray *) nil_chk(options))->size_ < 12) return nil;
  jfloat tmin = (IOSByteArray_Get(options, 0) & (jint) 0xff) / 16.0f;
  jfloat tmax = (IOSByteArray_Get(options, 1) & (jint) 0xff) / 16.0f;
  jfloat rmin = (IOSByteArray_Get(options, 2) & (jint) 0xff) / 16.0f;
  jfloat rmax = (IOSByteArray_Get(options, 3) & (jint) 0xff) / 16.0f;
  jint tdummy = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 4, 2);
  jint rdummy = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 6, 2);
  jint tdelay = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 8, 2);
  jint rdelay = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 10, 2);
  return create_NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(tmin, tmax, rmin, rmax, tdummy, rdummy, tdelay, rdelay);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Options)
