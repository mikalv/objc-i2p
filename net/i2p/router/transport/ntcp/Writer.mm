//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/Writer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/Writer.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportNtcpWriter () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilSet> _pendingConnections_;
  id<JavaUtilSet> _liveWrites_;
  id<JavaUtilSet> _writeAfterLive_;
  id<JavaUtilList> _runners_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter, _pendingConnections_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter, _liveWrites_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter, _writeAfterLive_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter, _runners_, id<JavaUtilList>)

@interface NetI2pRouterTransportNtcpWriter_Runner : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportNtcpWriter *this$0_;
  NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *_prepBuffer_;
  volatile_jboolean _stop_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpWriter:(NetI2pRouterTransportNtcpWriter *)outer$;

- (void)stop;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpWriter_Runner)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpWriter_Runner, _prepBuffer_, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter_Runner *self, NetI2pRouterTransportNtcpWriter *outer$);

__attribute__((unused)) static NetI2pRouterTransportNtcpWriter_Runner *new_NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpWriter_Runner *create_NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpWriter_Runner)

@implementation NetI2pRouterTransportNtcpWriter

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTransportNtcpWriter_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)startWritingWithInt:(jint)numWriters {
  @synchronized(self) {
    for (jint i = 1; i <= numWriters; i++) {
      NetI2pRouterTransportNtcpWriter_Runner *r = create_NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(self);
      NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(r, JreStrcat("$ICI", @"NTCP writer ", i, '/', numWriters), true);
      [((id<JavaUtilList>) nil_chk(_runners_)) addWithId:r];
      [t start];
    }
  }
}

- (void)stopWriting {
  @synchronized(self) {
    while (![((id<JavaUtilList>) nil_chk(_runners_)) isEmpty]) {
      NetI2pRouterTransportNtcpWriter_Runner *r = [_runners_ removeWithInt:0];
      [((NetI2pRouterTransportNtcpWriter_Runner *) nil_chk(r)) stop];
    }
    @synchronized(_pendingConnections_) {
      [((id<JavaUtilSet>) nil_chk(_writeAfterLive_)) clear];
      [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) java_notifyAll];
    }
  }
}

- (void)wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con
                                                 withNSString:(NSString *)source {
  jboolean already = false;
  jboolean pending = false;
  @synchronized(_pendingConnections_) {
    if ([((id<JavaUtilSet>) nil_chk(_liveWrites_)) containsWithId:con]) {
      [((id<JavaUtilSet>) nil_chk(_writeAfterLive_)) addWithId:con];
      already = true;
    }
    else {
      pending = [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) addWithId:con];
    }
    [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) java_notify];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$Z$Z$$", @"wantsWrite: ", con, @" already live? ", already, @" added to pending? ", pending, @": ", source)];
}

- (void)connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  @synchronized(_pendingConnections_) {
    [((id<JavaUtilSet>) nil_chk(_writeAfterLive_)) removeWithId:con];
    [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) removeWithId:con];
    [_pendingConnections_ java_notify];
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_pendingConnections_);
  RELEASE_(_liveWrites_);
  RELEASE_(_writeAfterLive_);
  RELEASE_(_runners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startWritingWithInt:);
  methods[2].selector = @selector(stopWriting);
  methods[3].selector = @selector(wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:withNSString:);
  methods[4].selector = @selector(connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingConnections_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_liveWrites_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_writeAfterLive_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_runners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "startWriting", "I", "wantsWrite", "LNetI2pRouterTransportNtcpNTCPConnection;LNSString;", "connectionClosed", "LNetI2pRouterTransportNtcpNTCPConnection;", "Ljava/util/Set<Lnet/i2p/router/transport/ntcp/NTCPConnection;>;", "Ljava/util/List<Lnet/i2p/router/transport/ntcp/Writer$Runner;>;", "LNetI2pRouterTransportNtcpWriter_Runner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpWriter = { "Writer", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 5, 5, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpWriter;
}

@end

void NetI2pRouterTransportNtcpWriter_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportNtcpWriter *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssignAndConsume(&self->_pendingConnections_, new_JavaUtilLinkedHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_runners_, new_JavaUtilArrayList_initWithInt_(5));
  JreStrongAssignAndConsume(&self->_liveWrites_, new_JavaUtilHashSet_initWithInt_(5));
  JreStrongAssignAndConsume(&self->_writeAfterLive_, new_JavaUtilHashSet_initWithInt_(5));
}

NetI2pRouterTransportNtcpWriter *new_NetI2pRouterTransportNtcpWriter_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpWriter, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTransportNtcpWriter *create_NetI2pRouterTransportNtcpWriter_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpWriter, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpWriter)

@implementation NetI2pRouterTransportNtcpWriter_Runner

- (instancetype)initWithNetI2pRouterTransportNtcpWriter:(NetI2pRouterTransportNtcpWriter *)outer$ {
  NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(self, outer$);
  return self;
}

- (void)stop {
  JreAssignVolatileBoolean(&_stop_, true);
}

- (void)run {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:@"Starting writer"];
  NetI2pRouterTransportNtcpNTCPConnection *con = nil;
  while (!JreLoadVolatileBoolean(&_stop_)) {
    @try {
      @synchronized(this$0_->_pendingConnections_) {
        jboolean keepWriting = (con != nil) && [((id<JavaUtilSet>) nil_chk(this$0_->_writeAfterLive_)) removeWithId:con];
        if (keepWriting) {
          if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Keep writing on the same connection: ", con)];
        }
        else {
          [((id<JavaUtilSet>) nil_chk(this$0_->_liveWrites_)) removeWithId:con];
          con = JreRetainedLocalValue(nil);
          if ([((id<JavaUtilSet>) nil_chk(this$0_->_pendingConnections_)) isEmpty]) {
            if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:@"Done writing, but nothing pending, so wait"];
            [this$0_->_pendingConnections_ java_wait];
          }
          else {
            id<JavaUtilIterator> iter = [this$0_->_pendingConnections_ iterator];
            con = JreRetainedLocalValue([((id<JavaUtilIterator>) nil_chk(iter)) next]);
            [iter remove];
            [this$0_->_liveWrites_ addWithId:con];
            if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Switch to writing on: ", con)];
          }
        }
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    if (!JreLoadVolatileBoolean(&_stop_) && (con != nil)) {
      @try {
        if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Prepare next write on: ", con)];
        [((NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *) nil_chk(_prepBuffer_)) init__];
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) prepareNextWriteWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:_prepBuffer_];
      }
      @catch (JavaLangRuntimeException *re) {
        [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$@", @"Error in the ntcp writer on ", con) withJavaLangThrowable:re];
      }
    }
  }
  if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:@"Stopping writer"];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_prepBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpWriter:);
  methods[1].selector = @selector(stop);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_prepBuffer_", "LNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_stop_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportNtcpWriter;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpWriter_Runner = { "Runner", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 3, 3, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpWriter_Runner;
}

@end

void NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter_Runner *self, NetI2pRouterTransportNtcpWriter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_prepBuffer_, new_NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_init());
}

NetI2pRouterTransportNtcpWriter_Runner *new_NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpWriter_Runner, initWithNetI2pRouterTransportNtcpWriter_, outer$)
}

NetI2pRouterTransportNtcpWriter_Runner *create_NetI2pRouterTransportNtcpWriter_Runner_initWithNetI2pRouterTransportNtcpWriter_(NetI2pRouterTransportNtcpWriter *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpWriter_Runner, initWithNetI2pRouterTransportNtcpWriter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpWriter_Runner)
