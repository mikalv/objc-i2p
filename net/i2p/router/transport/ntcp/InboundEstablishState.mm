//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/InboundEstablishState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/protocol/CipherState.h"
#include "com/southernstorm/noise/protocol/CipherStatePair.h"
#include "com/southernstorm/noise/protocol/DHState.h"
#include "com/southernstorm/noise/protocol/HandshakeState.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/Arrays.h"
#include "java/util/EnumSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"
#include "net/i2p/router/transport/ntcp/EstablishBase.h"
#include "net/i2p/router/transport/ntcp/EventPumper.h"
#include "net/i2p/router/transport/ntcp/InboundEstablishState.h"
#include "net/i2p/router/transport/ntcp/NTCP2Options.h"
#include "net/i2p/router/transport/ntcp/NTCP2Payload.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/ntcp/OutboundNTCP2State.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTransportNtcpInboundEstablishState () {
 @public
  IOSByteArray *_curEncrypted_;
  jint _aliceIdentSize_;
  NetI2pDataRouterRouterIdentity *_aliceIdent_;
  JavaIoByteArrayOutputStream *_sz_aliceIdent_tsA_padding_aliceSig_;
  jint _sz_aliceIdent_tsA_padding_aliceSigSize_;
  jboolean _released_;
  ComSouthernstormNoiseProtocolHandshakeState *_handshakeState_;
  jint _padlen1_;
  jint _msg3p2len_;
  jint _msg3p2FailReason_;
  NetI2pDataByteArray *_msg3tmp_;
  NetI2pRouterTransportNtcpNTCP2Options *_hisPadding_;
}

- (void)receiveInboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (void)readAliceRouterIdentity;

- (void)verifyInboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (jboolean)verifyInboundWithNetI2pDataHash:(NetI2pDataHash *)aliceHash;

- (void)sendInboundConfirmWithNetI2pDataHash:(NetI2pDataHash *)h
                                    withLong:(jlong)tsA;

- (void)receiveInboundNTCP2WithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (void)prepareOutbound2;

- (void)setDataPhaseWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _curEncrypted_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _aliceIdent_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _sz_aliceIdent_tsA_padding_aliceSig_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _handshakeState_, ComSouthernstormNoiseProtocolHandshakeState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _msg3tmp_, NetI2pDataByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpInboundEstablishState, _hisPadding_, NetI2pRouterTransportNtcpNTCP2Options *)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_BUFFER_SIZE(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, BUFFER_SIZE, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_MAX_DATA_READ_BUFS(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_MAX_DATA_READ_BUFS 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, MAX_DATA_READ_BUFS, jint)

inline NetI2pUtilByteCache *NetI2pRouterTransportNtcpInboundEstablishState_get__dataReadBufs(void);
static NetI2pUtilByteCache *NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpInboundEstablishState, _dataReadBufs, NetI2pUtilByteCache *)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_NTCP1_MSG1_SIZE(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_NTCP1_MSG1_SIZE 288
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, NTCP1_MSG1_SIZE, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_PADDING1_MAX(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_MAX 223
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, PADDING1_MAX, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_PADDING1_FAIL_MAX(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_FAIL_MAX 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, PADDING1_FAIL_MAX, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_PADDING2_MAX(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_PADDING2_MAX 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, PADDING2_MAX, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_RI_MIN(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_RI_MIN 439
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, RI_MIN, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_MSG3P2_MIN(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MIN 459
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, MSG3P2_MIN, jint)

inline jint NetI2pRouterTransportNtcpInboundEstablishState_get_MSG3P2_MAX(void);
#define NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MAX 6000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpInboundEstablishState, MSG3P2_MAX, jint)

inline id<JavaUtilSet> NetI2pRouterTransportNtcpInboundEstablishState_get_STATES_NTCP2(void);
static id<JavaUtilSet> NetI2pRouterTransportNtcpInboundEstablishState_STATES_NTCP2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpInboundEstablishState, STATES_NTCP2, id<JavaUtilSet>)

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *src);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_readAliceRouterIdentity(NetI2pRouterTransportNtcpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *buf);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithNetI2pDataHash_(NetI2pRouterTransportNtcpInboundEstablishState *self, NetI2pDataHash *aliceHash);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_sendInboundConfirmWithNetI2pDataHash_withLong_(NetI2pRouterTransportNtcpInboundEstablishState *self, NetI2pDataHash *h, jlong tsA);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundNTCP2WithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *src);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_prepareOutbound2(NetI2pRouterTransportNtcpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpInboundEstablishState_setDataPhaseWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *buf);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpInboundEstablishState)

@implementation NetI2pRouterTransportNtcpInboundEstablishState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
      withNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  NetI2pRouterTransportNtcpInboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(self, ctx, transport, con);
  return self;
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  @synchronized(self) {
    [super receiveWithJavaNioByteBuffer:src];
    if (![((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) return;
    NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundWithJavaNioByteBuffer_(self, src);
  }
}

- (jint)getVersion {
  if (![((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) isNTCP2Enabled]) return 1;
  @synchronized(_stateLock_) {
    if (JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_INIT)) return 0;
    if ([((id<JavaUtilSet>) nil_chk(NetI2pRouterTransportNtcpInboundEstablishState_STATES_NTCP2)) containsWithId:JreLoadVolatileId(&_state_)]) return 2;
    return 1;
  }
}

- (void)receiveInboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundWithJavaNioByteBuffer_(self, src);
}

- (void)readAliceRouterIdentity {
  NetI2pRouterTransportNtcpInboundEstablishState_readAliceRouterIdentity(self);
}

- (void)verifyInboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithJavaNioByteBuffer_(self, buf);
}

- (jboolean)verifyInboundWithNetI2pDataHash:(NetI2pDataHash *)aliceHash {
  return NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithNetI2pDataHash_(self, aliceHash);
}

- (void)sendInboundConfirmWithNetI2pDataHash:(NetI2pDataHash *)h
                                    withLong:(jlong)tsA {
  NetI2pRouterTransportNtcpInboundEstablishState_sendInboundConfirmWithNetI2pDataHash_withLong_(self, h, tsA);
}

- (void)receiveInboundNTCP2WithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundNTCP2WithJavaNioByteBuffer_(self, src);
}

- (void)prepareOutbound2 {
  NetI2pRouterTransportNtcpInboundEstablishState_prepareOutbound2(self);
}

- (void)setDataPhaseWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  NetI2pRouterTransportNtcpInboundEstablishState_setDataPhaseWithJavaNioByteBuffer_(self, buf);
}

- (void)gotRIWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                withBoolean:(jboolean)isHandshake
                                withBoolean:(jboolean)flood {
  id<JavaUtilList> addrs = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getTargetAddressesWithNSString:NetI2pRouterTransportNtcpNTCPTransport_STYLE withNSString:NetI2pRouterTransportNtcpNTCPTransport_STYLE2];
  if ([((id<JavaUtilList>) nil_chk(addrs)) isEmpty]) {
    _msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH;
    @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$@", @"no NTCP in RI: ", ri));
  }
  NSString *s = nil;
  for (NetI2pDataRouterRouterAddress * __strong addr in addrs) {
    NSString *v = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getOptionWithNSString:@"v"];
    if (v == nil || (![v isEqual:JreLoadStatic(NetI2pRouterTransportNtcpNTCPTransport, NTCP2_VERSION)] && ![v java_hasPrefix:JreLoadStatic(NetI2pRouterTransportNtcpNTCPTransport, NTCP2_VERSION_ALT)])) {
      continue;
    }
    s = [addr getOptionWithNSString:@"s"];
    if (s != nil) break;
  }
  if (s == nil) {
    _msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH;
    @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$@", @"no s in RI: ", ri));
  }
  IOSByteArray *sb = NetI2pDataBase64_decodeWithNSString_(s);
  if (sb == nil || sb->size_ != NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE) {
    _msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH;
    @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$@", @"bad s in RI: ", ri));
  }
  IOSByteArray *nb = [IOSByteArray arrayWithLength:32];
  [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) getRemotePublicKey])) getPublicKeyWithByteArray:nb withInt:0];
  if (!NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(sb, 0, nb, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) {
    _msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH;
    @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$@", @"s mismatch in RI: ", ri));
  }
  JreStrongAssign(&_aliceIdent_, [ri getIdentity]);
  NetI2pDataHash *h = [((NetI2pDataRouterRouterIdentity *) nil_chk(_aliceIdent_)) calculateHash];
  jboolean ok = NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithNetI2pDataHash_(self, h);
  if (!ok) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"NTCP2 verifyInbound() fail");
  @try {
    NetI2pDataRouterRouterInfo *old = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) storeWithNetI2pDataHash:h withNetI2pDataRouterRouterInfo:ri];
    if (flood && ![ri isEqual:old]) {
      NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *fndf = (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) cast_chk([_context_ netDb], [NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade class]);
      if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(fndf)) floodConditionalWithNetI2pDataDatabaseEntry:ri]) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldDebug]) [_log_ debugWithNSString:JreStrcat("$@", @"Flooded the RI: ", h)];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$@", @"Flood request but we didn't: ", h)];
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    _msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG3;
    @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"RI store fail: ", ri), iae);
  }
  [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(_con_)) setRemotePeerWithNetI2pDataRouterRouterIdentity:_aliceIdent_];
}

- (void)gotOptionsWithByteArray:(IOSByteArray *)options
                    withBoolean:(jboolean)isHandshake {
  NetI2pRouterTransportNtcpNTCP2Options *hisPadding = NetI2pRouterTransportNtcpNTCP2Options_fromByteArrayWithByteArray_(options);
  if (hisPadding == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$I$@", @"Got options length ", ((IOSByteArray *) nil_chk(options))->size_, @" on: ", self)];
    return;
  }
  JreStrongAssign(&_hisPadding_, hisPadding);
}

- (void)gotPaddingWithInt:(jint)paddingLength
                  withInt:(jint)frameLength {
}

- (void)gotTerminationWithInt:(jint)reason
                     withLong:(jlong)lastReceived {
}

- (void)gotUnknownWithInt:(jint)type
                  withInt:(jint)len {
}

- (void)gotDateTimeWithLong:(jlong)time {
}

- (void)gotI2NPWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg {
}

- (void)failWithNSString:(NSString *)reason
   withJavaLangException:(JavaLangException *)e
             withBoolean:(jboolean)bySkew {
  @synchronized(self) {
    [super failWithNSString:reason withJavaLangException:e withBoolean:bySkew];
    if (_handshakeState_ != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$", @"State at failure: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) description])];
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) destroy];
    }
  }
}

- (void)releaseBufsWithBoolean:(jboolean)isVerified {
  if (_released_) return;
  _released_ = true;
  [super releaseBufsWithBoolean:isVerified];
  if (!isVerified) NetI2pUtilSimpleByteCache_release__WithByteArray_(_curEncrypted_);
  JavaUtilArrays_fillWithByteArray_withByte_(_X_, (jbyte) 0);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(_X_);
  if (_msg3tmp_ != nil) {
    [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs)) release__WithNetI2pDataByteArray:_msg3tmp_ withBoolean:false];
    JreStrongAssign(&_msg3tmp_, nil);
  }
}

- (void)dealloc {
  RELEASE_(_curEncrypted_);
  RELEASE_(_aliceIdent_);
  RELEASE_(_sz_aliceIdent_tsA_padding_aliceSig_);
  RELEASE_(_handshakeState_);
  RELEASE_(_msg3tmp_);
  RELEASE_(_hisPadding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withNetI2pRouterTransportNtcpNTCPConnection:);
  methods[1].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[2].selector = @selector(getVersion);
  methods[3].selector = @selector(receiveInboundWithJavaNioByteBuffer:);
  methods[4].selector = @selector(readAliceRouterIdentity);
  methods[5].selector = @selector(verifyInboundWithJavaNioByteBuffer:);
  methods[6].selector = @selector(verifyInboundWithNetI2pDataHash:);
  methods[7].selector = @selector(sendInboundConfirmWithNetI2pDataHash:withLong:);
  methods[8].selector = @selector(receiveInboundNTCP2WithJavaNioByteBuffer:);
  methods[9].selector = @selector(prepareOutbound2);
  methods[10].selector = @selector(setDataPhaseWithJavaNioByteBuffer:);
  methods[11].selector = @selector(gotRIWithNetI2pDataRouterRouterInfo:withBoolean:withBoolean:);
  methods[12].selector = @selector(gotOptionsWithByteArray:withBoolean:);
  methods[13].selector = @selector(gotPaddingWithInt:withInt:);
  methods[14].selector = @selector(gotTerminationWithInt:withLong:);
  methods[15].selector = @selector(gotUnknownWithInt:withInt:);
  methods[16].selector = @selector(gotDateTimeWithLong:);
  methods[17].selector = @selector(gotI2NPWithNetI2pDataI2npI2NPMessage:);
  methods[18].selector = @selector(failWithNSString:withJavaLangException:withBoolean:);
  methods[19].selector = @selector(releaseBufsWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_curEncrypted_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIdentSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIdent_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sz_aliceIdent_tsA_padding_aliceSig_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sz_aliceIdent_tsA_padding_aliceSigSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_released_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_handshakeState_", "LComSouthernstormNoiseProtocolHandshakeState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_padlen1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_msg3p2len_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_msg3p2FailReason_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_msg3tmp_", "LNetI2pDataByteArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hisPadding_", "LNetI2pRouterTransportNtcpNTCP2Options;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_DATA_READ_BUFS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_MAX_DATA_READ_BUFS, 0x1a, -1, -1, -1, -1 },
    { "_dataReadBufs", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "NTCP1_MSG1_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_NTCP1_MSG1_SIZE, 0x1a, -1, -1, -1, -1 },
    { "PADDING1_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_MAX, 0x1a, -1, -1, -1, -1 },
    { "PADDING1_FAIL_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_FAIL_MAX, 0x1a, -1, -1, -1, -1 },
    { "PADDING2_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_PADDING2_MAX, 0x1a, -1, -1, -1, -1 },
    { "RI_MIN", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_RI_MIN, 0x1a, -1, -1, -1, -1 },
    { "MSG3P2_MIN", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MIN, 0x1a, -1, -1, -1, -1 },
    { "MSG3P2_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MAX, 0x1a, -1, -1, -1, -1 },
    { "STATES_NTCP2", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 29, 30, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LNetI2pRouterTransportNtcpNTCPConnection;", "receive", "LJavaNioByteBuffer;", "receiveInbound", "verifyInbound", "LNetI2pDataHash;", "sendInboundConfirm", "LNetI2pDataHash;J", "receiveInboundNTCP2", "setDataPhase", "gotRI", "LNetI2pDataRouterRouterInfo;ZZ", "LNetI2pDataDataFormatException;", "gotOptions", "[BZ", "gotPadding", "II", "gotTermination", "IJ", "gotUnknown", "gotDateTime", "J", "gotI2NP", "LNetI2pDataI2npI2NPMessage;", "fail", "LNSString;LJavaLangException;Z", "releaseBufs", "Z", &NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs, &NetI2pRouterTransportNtcpInboundEstablishState_STATES_NTCP2, "Ljava/util/Set<Lnet/i2p/router/transport/ntcp/EstablishBase$State;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpInboundEstablishState = { "InboundEstablishState", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 20, 23, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpInboundEstablishState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpInboundEstablishState class]) {
    JreStrongAssign(&NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs, NetI2pUtilByteCache_getInstanceWithInt_withInt_(NetI2pRouterTransportNtcpInboundEstablishState_MAX_DATA_READ_BUFS, NetI2pRouterTransportNtcpInboundEstablishState_BUFFER_SIZE));
    JreStrongAssign(&NetI2pRouterTransportNtcpInboundEstablishState_STATES_NTCP2, JavaUtilEnumSet_ofWithJavaLangEnum_withJavaLangEnumArray_(JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_INIT), [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_X), JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_PADDING), JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_SENT_Y), JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_RI), JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_READ_RANDOM) } count:5 type:NetI2pRouterTransportNtcpEstablishBase_State_class_()]));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpInboundEstablishState)
  }
}

@end

void NetI2pRouterTransportNtcpInboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpInboundEstablishState *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  NetI2pRouterTransportNtcpEstablishBase_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(self, ctx, transport, con);
  self->_msg3p2FailReason_ = -1;
  JreVolatileStrongAssign(&self->_state_, JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_INIT));
  JreStrongAssignAndConsume(&self->_sz_aliceIdent_tsA_padding_aliceSig_, new_JavaIoByteArrayOutputStream_initWithInt_(512));
  JreStrongAssign(&self->_prevEncrypted_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_AES_SIZE));
  JreStrongAssign(&self->_curEncrypted_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_AES_SIZE));
}

NetI2pRouterTransportNtcpInboundEstablishState *new_NetI2pRouterTransportNtcpInboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpInboundEstablishState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_, ctx, transport, con)
}

NetI2pRouterTransportNtcpInboundEstablishState *create_NetI2pRouterTransportNtcpInboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpInboundEstablishState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_, ctx, transport, con)
}

void NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *src) {
  if ([((id<JavaUtilSet>) nil_chk(NetI2pRouterTransportNtcpInboundEstablishState_STATES_NTCP2)) containsWithId:JreLoadVolatileId(&self->_state_)]) {
    NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundNTCP2WithJavaNioByteBuffer_(self, src);
    return;
  }
  if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_INIT) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    jint remaining = [((JavaNioByteBuffer *) nil_chk(src)) remaining];
    if ([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) isNTCP2Enabled]) {
      if (remaining + self->_received_ < NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE) {
        [src getWithByteArray:self->_X_ withInt:self->_received_ withInt:remaining];
        self->_received_ += remaining;
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$I$@", @"Short buffer got ", remaining, @" total now ", self->_received_, @" on ", self)];
        return;
      }
      if (remaining + self->_received_ < NetI2pRouterTransportNtcpInboundEstablishState_NTCP1_MSG1_SIZE) {
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) setVersionWithInt:2];
        [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_INIT)];
        NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundNTCP2WithJavaNioByteBuffer_(self, src);
        return;
      }
    }
    jint toGet = JavaLangMath_minWithInt_withInt_(remaining, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE - self->_received_);
    [src getWithByteArray:self->_X_ withInt:self->_received_ withInt:toGet];
    self->_received_ += toGet;
    if (self->_received_ < NetI2pRouterTransportNtcpEstablishBase_XY_SIZE) return;
    [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_X)];
    self->_received_ = 0;
  }
  if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_X) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE - self->_received_);
    [src getWithByteArray:self->_hX_xor_bobIdentHash_ withInt:self->_received_ withInt:toGet];
    self->_received_ += toGet;
    if (self->_received_ < NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE) return;
    [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_HX)];
    self->_received_ = 0;
  }
  if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_HX)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", [self prefix], @"Enough data for a DH received")];
    IOSByteArray *realXor = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE);
    [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) sha])) calculateHashWithByteArray:self->_X_ withInt:0 withInt:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE withByteArray:realXor withInt:0];
    NetI2pRouterTransportNtcpEstablishBase_xor32WithByteArray_withByteArray_([((NetI2pDataHash *) nil_chk([self->_context_ routerHash])) getData], realXor);
    if (!NetI2pDataDataHelper_eqWithByteArray_withByteArray_(realXor, self->_hX_xor_bobIdentHash_)) {
      NetI2pUtilSimpleByteCache_release__WithByteArray_(realXor);
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.invalidHXxorBIH" withLong:1];
      [self failWithNSString:@"Invalid hX_xor"];
      return;
    }
    NetI2pUtilSimpleByteCache_release__WithByteArray_(realXor);
    if (![((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) isHXHIValidWithByteArray:self->_hX_xor_bobIdentHash_]) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.replayHXxorBIH" withLong:1];
      [self failWithNSString:@"Replay hX_xor"];
      return;
    }
    @try {
      [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) setPeerPublicValueWithByteArray:self->_X_];
      [self->_dh_ getSessionKey];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_hX_xor_bobIdentHash_, NetI2pRouterTransportNtcpEstablishBase_AES_SIZE, self->_prevEncrypted_, 0, NetI2pRouterTransportNtcpEstablishBase_AES_SIZE);
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$C", [self prefix], @"DH session key calculated (", [((NetI2pDataSessionKey *) nil_chk([self->_dh_ getSessionKey])) toBase64], ')')];
      IOSByteArray *xy = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE + NetI2pRouterTransportNtcpEstablishBase_XY_SIZE];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_X_, 0, xy, 0, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_Y_, 0, xy, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE);
      IOSByteArray *hxy = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE);
      [((NetI2pCryptoSHA256Generator *) nil_chk([self->_context_ sha])) calculateHashWithByteArray:xy withInt:0 withInt:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE + NetI2pRouterTransportNtcpEstablishBase_XY_SIZE withByteArray:hxy withInt:0];
      self->_tsB_ = ([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 500) / 1000l;
      IOSByteArray *toEncrypt = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hxy, 0, toEncrypt, 0, NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE);
      IOSByteArray *tsB = NetI2pDataDataHelper_toLongWithInt_withLong_(4, self->_tsB_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsB, 0, toEncrypt, NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE, ((IOSByteArray *) nil_chk(tsB))->size_);
      [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:toEncrypt withInt:NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE + 4 withInt:12];
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
        [self->_log_ debugWithNSString:JreStrcat("$$$", [self prefix], @"h(x+y)=", NetI2pDataBase64_encodeWithByteArray_(hxy))];
        [self->_log_ debugWithNSString:JreStrcat("$$J", [self prefix], @"tsb = ", self->_tsB_)];
        [self->_log_ debugWithNSString:JreStrcat("$$$", [self prefix], @"unencrypted H(X+Y)+tsB+padding: ", NetI2pDataBase64_encodeWithByteArray_(toEncrypt))];
        [self->_log_ debugWithNSString:JreStrcat("$$$", [self prefix], @"encryption iv= ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_Y_, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE - NetI2pRouterTransportNtcpEstablishBase_AES_SIZE, NetI2pRouterTransportNtcpEstablishBase_AES_SIZE))];
        [self->_log_ debugWithNSString:JreStrcat("$$$", [self prefix], @"encryption key= ", [((NetI2pDataSessionKey *) nil_chk([self->_dh_ getSessionKey])) toBase64])];
      }
      NetI2pUtilSimpleByteCache_release__WithByteArray_(hxy);
      [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) encryptWithByteArray:toEncrypt withInt:0 withByteArray:self->_e_hXY_tsB_ withInt:0 withNetI2pDataSessionKey:[self->_dh_ getSessionKey] withByteArray:self->_Y_ withInt:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE - NetI2pRouterTransportNtcpEstablishBase_AES_SIZE withInt:NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE];
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$", [self prefix], @"encrypted H(X+Y)+tsB+padding: ", NetI2pDataBase64_encodeWithByteArray_(self->_e_hXY_tsB_))];
      IOSByteArray *write = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE + NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_Y_, 0, write, 0, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_e_hXY_tsB_, 0, write, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE, NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE);
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_SENT_Y)];
      [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([self->_transport_ getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self->_con_ withByteArray:write];
      if (![((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) return;
    }
    @catch (NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException *e) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.invalidDH" withLong:1];
      [self failWithNSString:@"Invalid X" withJavaLangException:e];
      return;
    }
    @catch (JavaLangIllegalStateException *ise) {
      [self failWithNSString:@"reused keys?" withJavaLangException:ise];
      return;
    }
  }
  while ((JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_SENT_Y) || JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI_SIZE) || JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI)) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    if (self->_received_ < NetI2pRouterTransportNtcpEstablishBase_AES_SIZE && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
      jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], NetI2pRouterTransportNtcpEstablishBase_AES_SIZE - self->_received_);
      [src getWithByteArray:self->_curEncrypted_ withInt:self->_received_ withInt:toGet];
      self->_received_ += toGet;
      if (self->_received_ < NetI2pRouterTransportNtcpEstablishBase_AES_SIZE) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$IC", [self prefix], @"end of available data with only a partial block read (", +self->_received_, ')')];
        return;
      }
    }
    if (self->_received_ >= NetI2pRouterTransportNtcpEstablishBase_AES_SIZE) {
      [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) aes])) decryptWithByteArray:self->_curEncrypted_ withInt:0 withByteArray:self->_curDecrypted_ withInt:0 withNetI2pDataSessionKey:[((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) getSessionKey] withByteArray:self->_prevEncrypted_ withInt:0 withInt:NetI2pRouterTransportNtcpEstablishBase_AES_SIZE];
      IOSByteArray *swap = self->_prevEncrypted_;
      JreStrongAssign(&self->_prevEncrypted_, self->_curEncrypted_);
      JreStrongAssign(&self->_curEncrypted_, swap);
      self->_received_ = 0;
      if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_SENT_Y)) {
        jint sz = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(self->_curDecrypted_, 0, 2);
        if (sz < NetI2pRouterTransportNtcpEstablishBase_MIN_RI_SIZE || sz > NetI2pRouterTransportNtcpEstablishBase_MAX_RI_SIZE) {
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.invalidInboundSize" withLong:sz];
          [self failWithNSString:@"size is invalid" withJavaLangException:create_JavaLangException_initWithNSString_(JreStrcat("$I", @"size is ", sz))];
          return;
        }
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$I", [self prefix], @"got the RI size: ", sz)];
        self->_aliceIdentSize_ = sz;
        [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI_SIZE)];
      }
      @try {
        [((JavaIoByteArrayOutputStream *) nil_chk(self->_sz_aliceIdent_tsA_padding_aliceSig_)) writeWithByteArray:self->_curDecrypted_];
      }
      @catch (JavaIoIOException *ioe) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:JreStrcat("$$", [self prefix], @"Error writing to the baos?") withJavaLangThrowable:ioe];
      }
      if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI_SIZE) && [self->_sz_aliceIdent_tsA_padding_aliceSig_ size] >= 2 + self->_aliceIdentSize_) {
        NetI2pRouterTransportNtcpInboundEstablishState_readAliceRouterIdentity(self);
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", [self prefix], @"got the RI")];
        if (self->_aliceIdent_ == nil) {
          return;
        }
        NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([self->_aliceIdent_ getSigningPublicKey])) getType];
        if (type == nil) {
          [self failWithNSString:@"Unsupported sig type"];
          return;
        }
        [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI)];
        self->_sz_aliceIdent_tsA_padding_aliceSigSize_ = 2 + self->_aliceIdentSize_ + 4 + [type getSigLen];
        jint rem = (self->_sz_aliceIdent_tsA_padding_aliceSigSize_ % NetI2pRouterTransportNtcpEstablishBase_AES_SIZE);
        jint padding = 0;
        if (rem > 0) padding = NetI2pRouterTransportNtcpEstablishBase_AES_SIZE - rem;
        self->_sz_aliceIdent_tsA_padding_aliceSigSize_ += padding;
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$I$I$I", [self prefix], @"alice ident size decrypted as ", self->_aliceIdentSize_, @", making the padding at ", padding, @" and total size at ", self->_sz_aliceIdent_tsA_padding_aliceSigSize_)];
      }
      if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI) && [self->_sz_aliceIdent_tsA_padding_aliceSig_ size] >= self->_sz_aliceIdent_tsA_padding_aliceSigSize_) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", [self prefix], @"got the sig")];
        NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithJavaNioByteBuffer_(self, src);
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$I$IC@C", [self prefix], @"verifying size (sz=", [self->_sz_aliceIdent_tsA_padding_aliceSig_ size], @" expected=", self->_sz_aliceIdent_tsA_padding_aliceSigSize_, ' ', JreLoadVolatileId(&self->_state_), ')')];
        return;
      }
    }
  }
  if ((JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED) || JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT)) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"Received unexpected ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" on ", self) withJavaLangThrowable:create_JavaLangException_init()];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", [self prefix], @"done with the data, not yet complete or corrupt")];
}

void NetI2pRouterTransportNtcpInboundEstablishState_readAliceRouterIdentity(NetI2pRouterTransportNtcpInboundEstablishState *self) {
  IOSByteArray *b = [((JavaIoByteArrayOutputStream *) nil_chk(self->_sz_aliceIdent_tsA_padding_aliceSig_)) toByteArray];
  @try {
    jint sz = self->_aliceIdentSize_;
    if (sz < NetI2pRouterTransportNtcpEstablishBase_MIN_RI_SIZE || sz > NetI2pRouterTransportNtcpEstablishBase_MAX_RI_SIZE || sz > ((IOSByteArray *) nil_chk(b))->size_ - 2) {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.invalidInboundSize" withLong:sz];
      [self failWithNSString:@"size is invalid" withJavaLangException:create_JavaLangException_initWithNSString_(JreStrcat("$I", @"size is ", sz))];
      return;
    }
    NetI2pDataRouterRouterIdentity *alice = create_NetI2pDataRouterRouterIdentity_init();
    JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(b, 2, sz);
    [alice readBytesWithJavaIoInputStream:bais];
    JreStrongAssign(&self->_aliceIdent_, alice);
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.invalidInboundIOE" withLong:1];
    [self failWithNSString:@"Error verifying peer" withJavaLangException:ioe];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.invalidInboundDFE" withLong:1];
    [self failWithNSString:@"Error verifying peer" withJavaLangException:dfe];
  }
}

void NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *buf) {
  IOSByteArray *b = [((JavaIoByteArrayOutputStream *) nil_chk(self->_sz_aliceIdent_tsA_padding_aliceSig_)) toByteArray];
  @try {
    jint sz = self->_aliceIdentSize_;
    jlong tsA = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(b, 2 + sz, 4);
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    jlong rtt = now - [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) getCreated];
    self->_peerSkew_ = (now - (tsA * 1000) - (rtt / 2) + 500) / 1000;
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(768);
    [baos writeWithByteArray:self->_X_];
    [baos writeWithByteArray:self->_Y_];
    [baos writeWithByteArray:[((NetI2pDataHash *) nil_chk([self->_context_ routerHash])) getData]];
    [baos writeWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, tsA)];
    [baos writeWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, self->_tsB_)];
    IOSByteArray *toVerify = [baos toByteArray];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk(self->_aliceIdent_)) getSigningPublicKey])) getType];
    if (type == nil) {
      [self failWithNSString:@"unsupported sig type"];
      return;
    }
    IOSByteArray *s = [IOSByteArray arrayWithLength:[type getSigLen]];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, ((IOSByteArray *) nil_chk(b))->size_ - s->size_, s, 0, s->size_);
    NetI2pDataSignature *sig = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, s);
    jboolean ok = [((NetI2pCryptoDSAEngine *) nil_chk([self->_context_ dsa])) verifySignatureWithNetI2pDataSignature:sig withByteArray:toVerify withNetI2pDataSigningPublicKey:[((NetI2pDataRouterRouterIdentity *) nil_chk(self->_aliceIdent_)) getSigningPublicKey]];
    NetI2pDataHash *aliceHash = [((NetI2pDataRouterRouterIdentity *) nil_chk(self->_aliceIdent_)) calculateHash];
    if (ok) {
      ok = NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithNetI2pDataHash_(self, aliceHash);
    }
    if (ok) {
      [self->_con_ setRemotePeerWithNetI2pDataRouterRouterIdentity:self->_aliceIdent_];
      NetI2pRouterTransportNtcpInboundEstablishState_sendInboundConfirmWithNetI2pDataHash_withLong_(self, aliceHash, tsA);
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$I$", [self prefix], @"e_bobSig is ", ((IOSByteArray *) nil_chk(self->_e_bobSig_))->size_, @" bytes long")];
      IOSByteArray *iv = self->_curEncrypted_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_e_bobSig_, ((IOSByteArray *) nil_chk(self->_e_bobSig_))->size_ - NetI2pRouterTransportNtcpEstablishBase_AES_SIZE, iv, 0, NetI2pRouterTransportNtcpEstablishBase_AES_SIZE);
      [self->_con_ finishInboundEstablishmentWithNetI2pDataSessionKey:[((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) getSessionKey] withLong:self->_peerSkew_ withByteArray:iv withByteArray:self->_prevEncrypted_];
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED)];
      if ([((JavaNioByteBuffer *) nil_chk(buf)) hasRemaining]) {
        if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"extra data ", [buf remaining], @" on ", self)];
        [self->_con_ recvEncryptedI2NPWithJavaNioByteBuffer:buf];
      }
      [self releaseBufsWithBoolean:true];
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$@", [self prefix], @"Verified remote peer as ", aliceHash)];
    }
    else {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.invalidInboundSignature" withLong:1];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.invalidInboundIOE" withLong:1];
    [self failWithNSString:@"Error verifying peer" withJavaLangException:ioe];
  }
}

jboolean NetI2pRouterTransportNtcpInboundEstablishState_verifyInboundWithNetI2pDataHash_(NetI2pRouterTransportNtcpInboundEstablishState *self, NetI2pDataHash *aliceHash) {
  JavaNetInetAddress *addr = [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) getChannel])) socket])) getInetAddress];
  IOSByteArray *ip = (addr == nil) ? nil : [((JavaNetInetAddress *) nil_chk(addr)) getAddress];
  if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) isBanlistedForeverWithNetI2pDataHash:aliceHash]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping inbound connection from permanently banlisted peer: ", aliceHash)];
    if (ip != nil) [((NetI2pRouterBlocklist *) nil_chk([self->_context_ blocklist])) addWithByteArray:ip];
    if ([self getVersion] < 2) [self failWithNSString:JreStrcat("$@", @"Peer is banlisted forever: ", aliceHash)];
    else if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Peer is banlisted forever: ", aliceHash)];
    self->_msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_BANNED;
    return false;
  }
  if (ip != nil) [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) setIPWithNetI2pDataHash:aliceHash withByteArray:ip];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$@", [self prefix], @"verification successful for ", self->_con_)];
  jlong diff = 1000 * JavaLangMath_absWithLong_(self->_peerSkew_);
  if (![((NetI2pUtilClock *) nil_chk([self->_context_ clock])) getUpdatedSuccessfully]) {
    [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) setOffsetWithLong:1000 * (0 - self->_peerSkew_) withBoolean:true];
    self->_peerSkew_ = 0;
    if (diff != 0) [self->_log_ logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"NTP failure, NTCP adjusting clock by ", NetI2pDataDataHelper_formatDurationWithLong_(diff))];
  }
  else if (diff >= NetI2pRouterRouter_CLOCK_FUDGE_FACTOR) {
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.invalidInboundSkew" withLong:diff];
    [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) markReachableWithNetI2pDataHash:aliceHash withBoolean:true];
    [((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) banlistRouterWithNSString:NetI2pDataDataHelper_formatDurationWithLong_(diff) withNetI2pDataHash:aliceHash withNSString:NetI2pRouterTransportNtcpEstablishBase__xWithNSString_(@"Excessive clock skew: {0}")];
    [self->_transport_ setLastBadSkewWithLong:self->_peerSkew_];
    if ([self getVersion] < 2) [self failWithNSString:JreStrcat("$J$", @"Clocks too skewed (", diff, @" ms)") withJavaLangException:nil withBoolean:true];
    else if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$J$", @"Clocks too skewed (", diff, @" ms)")];
    self->_msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_SKEW;
    return false;
  }
  else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [self->_log_ debugWithNSString:JreStrcat("$$J$", [self prefix], @"Clock skew: ", diff, @" ms")];
  }
  return true;
}

void NetI2pRouterTransportNtcpInboundEstablishState_sendInboundConfirmWithNetI2pDataHash_withLong_(NetI2pRouterTransportNtcpInboundEstablishState *self, NetI2pDataHash *h, jlong tsA) {
  IOSByteArray *toSign = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpEstablishBase_XY_SIZE + NetI2pRouterTransportNtcpEstablishBase_XY_SIZE + 32 + 4 + 4];
  jint off = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_X_, 0, toSign, off, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE);
  off += NetI2pRouterTransportNtcpEstablishBase_XY_SIZE;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_Y_, 0, toSign, off, NetI2pRouterTransportNtcpEstablishBase_XY_SIZE);
  off += NetI2pRouterTransportNtcpEstablishBase_XY_SIZE;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(h)) getData], 0, toSign, off, 32);
  off += 32;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(toSign, off, 4, tsA);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(toSign, off, 4, self->_tsB_);
  off += 4;
  NetI2pDataSignature *sig = [((NetI2pCryptoDSAEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) dsa])) signWithByteArray:toSign withNetI2pDataSigningPrivateKey:[((NetI2pRouterKeyManager *) nil_chk([self->_context_ keyManager])) getSigningPrivateKey]];
  jint siglen = [((NetI2pDataSignature *) nil_chk(sig)) length];
  jint rem = siglen % NetI2pRouterTransportNtcpEstablishBase_AES_SIZE;
  jint padding;
  if (rem > 0) padding = NetI2pRouterTransportNtcpEstablishBase_AES_SIZE - rem;
  else padding = 0;
  IOSByteArray *preSig = [IOSByteArray arrayWithLength:siglen + padding];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([sig getData], 0, preSig, 0, siglen);
  if (padding > 0) [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:preSig withInt:siglen withInt:padding];
  JreStrongAssignAndConsume(&self->_e_bobSig_, [IOSByteArray newArrayWithLength:preSig->size_]);
  [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) encryptWithByteArray:preSig withInt:0 withByteArray:self->_e_bobSig_ withInt:0 withNetI2pDataSessionKey:[((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) getSessionKey] withByteArray:self->_e_hXY_tsB_ withInt:NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE - NetI2pRouterTransportNtcpEstablishBase_AES_SIZE withInt:((IOSByteArray *) nil_chk(self->_e_bobSig_))->size_];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", [self prefix], @"Sending encrypted inbound confirmation")];
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self->_con_ withByteArray:self->_e_bobSig_];
}

void NetI2pRouterTransportNtcpInboundEstablishState_receiveInboundNTCP2WithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *src) {
  @synchronized(self) {
    if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_INIT) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
      jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE - self->_received_);
      [src getWithByteArray:self->_X_ withInt:self->_received_ withInt:toGet];
      self->_received_ += toGet;
      if (self->_received_ < NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$I", @"Short buffer got ", toGet, @" total now ", self->_received_)];
        return;
      }
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_X)];
      self->_received_ = 0;
      if (![((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) isHXHIValidWithByteArray:self->_X_]) {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.replayHXxorBIH" withLong:1];
        [self failWithNSString:JreStrcat("$$", @"Replay msg 1, eX = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_X_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE))];
        return;
      }
      @try {
        JreStrongAssignAndConsume(&self->_handshakeState_, new_ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(ComSouthernstormNoiseProtocolHandshakeState_RESPONDER, [self->_transport_ getXDHFactory]));
      }
      @catch (JavaSecurityGeneralSecurityException *gse) {
        @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"bad proto", gse);
      }
      [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) getLocalKeyPair])) setPublicKeyWithByteArray:[self->_transport_ getNTCP2StaticPubkey] withInt:0];
      [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) getLocalKeyPair])) setPrivateKeyWithByteArray:[self->_transport_ getNTCP2StaticPrivkey] withInt:0];
      NetI2pDataHash *h = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) routerHash];
      NetI2pDataSessionKey *bobHash = create_NetI2pDataSessionKey_initWithByteArray_([((NetI2pDataHash *) nil_chk(h)) getData]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_X_, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE - NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE, self->_prevEncrypted_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE);
      [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) decryptWithByteArray:self->_X_ withInt:0 withByteArray:self->_X_ withInt:0 withNetI2pDataSessionKey:bobHash withByteArray:[self->_transport_ getNTCP2StaticIV] withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE];
      if (NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(self->_X_, 0, JreLoadStatic(NetI2pRouterTransportNtcpOutboundNTCP2State, ZEROKEY), 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) {
        [self failWithNSString:@"Bad msg 1, X = 0"];
        return;
      }
      IOSByteArray *options = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS1_SIZE];
      @try {
        [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) start];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After start: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
        [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) readMessageWithByteArray:self->_X_ withInt:0 withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE withByteArray:options withInt:0];
      }
      @catch (JavaSecurityGeneralSecurityException *gse) {
        self->_padlen1_ = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_FAIL_MAX] - [src remaining];
        if (self->_padlen1_ > 0) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$$$I$I$", @"Bad msg 1, X = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_X_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE), @" with ", [src remaining], @" more bytes, waiting for ", self->_padlen1_, @" more bytes") withJavaLangThrowable:gse];
          [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_READ_RANDOM)];
        }
        else {
          [self failWithNSString:JreStrcat("$$$I", @"Bad msg 1, X = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_X_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE), @" remaining = ", [src remaining]) withJavaLangException:gse];
        }
        return;
      }
      @catch (JavaLangRuntimeException *re) {
        [self failWithNSString:JreStrcat("$$", @"Bad msg 1, X = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_X_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) withJavaLangException:re];
        return;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After msg 1: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
      jint v = IOSByteArray_Get(options, 1) & (jint) 0xff;
      if (v != NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION) {
        [self failWithNSString:JreStrcat("$I", @"Bad version: ", v)];
        return;
      }
      self->_padlen1_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 2, 2);
      self->_msg3p2len_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 4, 2);
      jlong tsA = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options, 8, 4);
      jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
      jlong rtt = 250;
      self->_peerSkew_ = (now - (tsA * 1000) - (rtt / 2) + 500) / 1000;
      if ((self->_peerSkew_ > NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW || self->_peerSkew_ < 0 - NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW) && ![((NetI2pUtilClock *) nil_chk([self->_context_ clock])) getUpdatedSuccessfully]) {
        [self failWithNSString:JreStrcat("$J", @"Clock Skew: ", self->_peerSkew_) withJavaLangException:nil withBoolean:true];
        return;
      }
      if (self->_padlen1_ > NetI2pRouterTransportNtcpInboundEstablishState_PADDING1_MAX) {
        [self failWithNSString:JreStrcat("$I", @"bad msg 1 padlen: ", self->_padlen1_)];
        return;
      }
      if (self->_msg3p2len_ < NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MIN || self->_msg3p2len_ > NetI2pRouterTransportNtcpInboundEstablishState_MSG3P2_MAX) {
        [self failWithNSString:JreStrcat("$I", @"bad msg3p2 len: ", self->_msg3p2len_)];
        return;
      }
      if (self->_padlen1_ <= 0) {
        [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_PADDING)];
        if ([src hasRemaining]) {
          [self failWithNSString:JreStrcat("$I", @"Extra data after msg 1: ", [src remaining])];
        }
        else {
          NetI2pRouterTransportNtcpInboundEstablishState_prepareOutbound2(self);
        }
        return;
      }
    }
    if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_READ_RANDOM) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
      self->_received_ += [((JavaNioByteBuffer *) nil_chk(src)) remaining];
      if (self->_received_ < self->_padlen1_) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$I$", @"Bad msg 1, got ", [src remaining], @" more bytes, waiting for ", (self->_padlen1_ - self->_received_), @" more bytes")];
      }
      else {
        [self failWithNSString:JreStrcat("$I$", @"Bad msg 1, failing after getting ", [src remaining], @" more bytes")];
      }
      return;
    }
    if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_X) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
      jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], self->_padlen1_ - self->_received_);
      [src getWithByteArray:self->_X_ withInt:self->_received_ withInt:toGet];
      self->_received_ += toGet;
      if (self->_received_ < self->_padlen1_) return;
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_PADDING)];
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) mixHashWithByteArray:self->_X_ withInt:0 withInt:self->_padlen1_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$I$$", @"After mixhash padding ", self->_padlen1_, @" msg 1: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
      self->_received_ = 0;
      if ([src hasRemaining]) {
        [self failWithNSString:JreStrcat("$I", @"Extra data after msg 1: ", [src remaining])];
      }
      else {
        NetI2pRouterTransportNtcpInboundEstablishState_prepareOutbound2(self);
      }
      return;
    }
    if (JreLoadVolatileId(&self->_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_SENT_Y) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
      jint msg3tot = NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE + self->_msg3p2len_;
      if (self->_msg3tmp_ == nil) JreStrongAssign(&self->_msg3tmp_, [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs)) acquire]);
      IOSByteArray *tmp = [((NetI2pDataByteArray *) nil_chk(self->_msg3tmp_)) getData];
      jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], msg3tot - self->_received_);
      [src getWithByteArray:tmp withInt:self->_received_ withInt:toGet];
      self->_received_ += toGet;
      if (self->_received_ < msg3tot) return;
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_RI)];
      self->_received_ = 0;
      NetI2pDataByteArray *ptmp = [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs)) acquire];
      IOSByteArray *payload = [((NetI2pDataByteArray *) nil_chk(ptmp)) getData];
      @try {
        [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) readMessageWithByteArray:tmp withInt:0 withInt:msg3tot withByteArray:payload withInt:0];
      }
      @catch (JavaSecurityGeneralSecurityException *gse) {
        [NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs release__WithNetI2pDataByteArray:ptmp withBoolean:false];
        [self failWithNSString:JreStrcat("$$", @"Bad msg 3, part 1 is:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_(tmp, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE)) withJavaLangException:gse];
        return;
      }
      @catch (JavaLangRuntimeException *re) {
        [NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs release__WithNetI2pDataByteArray:ptmp withBoolean:false];
        [self failWithNSString:@"Bad msg 3" withJavaLangException:re];
        return;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After msg 3: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
      @try {
        NetI2pRouterTransportNtcpNTCP2Payload_processPayloadWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback_withByteArray_withInt_withInt_withBoolean_(self->_context_, self, payload, 0, self->_msg3p2len_ - NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE, true);
      }
      @catch (JavaIoIOException *ioe) {
        if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:@"Bad msg 3 payload" withJavaLangThrowable:ioe];
        if (self->_msg3p2FailReason_ < 0) self->_msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_FRAMING;
      }
      @catch (NetI2pDataDataFormatException *dfe) {
        if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:@"Bad msg 3 payload" withJavaLangThrowable:dfe];
        if (self->_msg3p2FailReason_ < 0) self->_msg3p2FailReason_ = NetI2pRouterTransportNtcpNTCPConnection_REASON_SIGFAIL;
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.invalidInboundSignature" withLong:1];
      }
      @catch (NetI2pDataI2npI2NPMessageException *ime) {
        if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:@"Bad msg 3 payload" withJavaLangThrowable:ime];
        if (self->_msg3p2FailReason_ < 0) self->_msg3p2FailReason_ = 0;
      }
      @finally {
        [NetI2pRouterTransportNtcpInboundEstablishState__dataReadBufs release__WithNetI2pDataByteArray:ptmp withBoolean:false];
      }
      NetI2pRouterTransportNtcpInboundEstablishState_setDataPhaseWithJavaNioByteBuffer_(self, src);
    }
  }
}

void NetI2pRouterTransportNtcpInboundEstablishState_prepareOutbound2(NetI2pRouterTransportNtcpInboundEstablishState *self) {
  @synchronized(self) {
    IOSByteArray *options2 = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS2_SIZE];
    jint padlen2 = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:NetI2pRouterTransportNtcpInboundEstablishState_PADDING2_MAX];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(options2, 2, 2, padlen2);
    jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] / 1000;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(options2, 8, 4, now);
    IOSByteArray *tmp = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE + padlen2];
    @try {
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) writeMessageWithByteArray:tmp withInt:0 withByteArray:options2 withInt:0 withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS2_SIZE];
    }
    @catch (JavaSecurityGeneralSecurityException *gse) {
      if (![((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ errorWithNSString:@"Bad msg 2 out" withJavaLangThrowable:gse];
      [self failWithNSString:@"Bad msg 2 out" withJavaLangException:gse];
      return;
    }
    @catch (JavaLangRuntimeException *re) {
      if (![((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ errorWithNSString:@"Bad msg 2 out" withJavaLangThrowable:re];
      [self failWithNSString:@"Bad msg 2 out" withJavaLangException:re];
      return;
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After msg 2: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
    NetI2pDataHash *h = [self->_context_ routerHash];
    NetI2pDataSessionKey *bobHash = create_NetI2pDataSessionKey_initWithByteArray_([((NetI2pDataHash *) nil_chk(h)) getData]);
    [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) encryptWithByteArray:tmp withInt:0 withByteArray:tmp withInt:0 withNetI2pDataSessionKey:bobHash withByteArray:self->_prevEncrypted_ withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE];
    if (padlen2 > 0) {
      [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:tmp withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE withInt:padlen2];
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) mixHashWithByteArray:tmp withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE withInt:padlen2];
      if ([self->_log_ shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$I$$", @"After mixhash padding ", padlen2, @" msg 2: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) description])];
    }
    [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_SENT_Y)];
    [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self->_con_ withByteArray:tmp];
  }
}

void NetI2pRouterTransportNtcpInboundEstablishState_setDataPhaseWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpInboundEstablishState *self, JavaNioByteBuffer *buf) {
  @synchronized(self) {
    ComSouthernstormNoiseProtocolCipherStatePair *ckp = [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) split];
    id<ComSouthernstormNoiseProtocolCipherState> rcvr = [((ComSouthernstormNoiseProtocolCipherStatePair *) nil_chk(ckp)) getReceiver];
    id<ComSouthernstormNoiseProtocolCipherState> sender = [ckp getSender];
    IOSObjectArray *sipkeys = NetI2pRouterTransportNtcpOutboundNTCP2State_generateSipHashKeysWithNetI2pRouterRouterContext_withComSouthernstormNoiseProtocolHandshakeState_(self->_context_, self->_handshakeState_);
    IOSByteArray *sip_ab = IOSObjectArray_Get(nil_chk(sipkeys), 0);
    IOSByteArray *sip_ba = IOSObjectArray_Get(sipkeys, 1);
    if (self->_msg3p2FailReason_ >= 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"Failed msg3p2, code ", self->_msg3p2FailReason_, @" for ", self)];
      [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) failInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:sender withByteArray:sip_ba withInt:self->_msg3p2FailReason_];
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) {
        [self->_log_ debugWithNSString:JreStrcat("$@$$$$", @"Finished establishment for ", self, @"\nGenerated SipHash key for A->B: ", NetI2pDataBase64_encodeWithByteArray_(sip_ab), @"\nGenerated SipHash key for B->A: ", NetI2pDataBase64_encodeWithByteArray_(sip_ba))];
      }
      [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) finishInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:sender withComSouthernstormNoiseProtocolCipherState:rcvr withByteArray:sip_ba withByteArray:sip_ab withLong:self->_peerSkew_ withNetI2pRouterTransportNtcpNTCP2Options:self->_hisPadding_];
      [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED)];
      if ([((JavaNioByteBuffer *) nil_chk(buf)) hasRemaining]) {
        if ([self->_log_ shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$I$@", @"extra data ", [buf remaining], @" on ", self)];
        [self->_con_ recvEncryptedI2NPWithJavaNioByteBuffer:buf];
      }
    }
    [self releaseBufsWithBoolean:true];
    [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) destroy];
    JavaUtilArrays_fillWithByteArray_withByte_(sip_ab, (jbyte) 0);
    JavaUtilArrays_fillWithByteArray_withByte_(sip_ba, (jbyte) 0);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpInboundEstablishState)
