//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/NTCPConnection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/protocol/CipherState.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/zip/Adler32.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/SipHashInline.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/ntcp/EstablishBase.h"
#include "net/i2p/router/transport/ntcp/EstablishState.h"
#include "net/i2p/router/transport/ntcp/EventPumper.h"
#include "net/i2p/router/transport/ntcp/InboundEstablishState.h"
#include "net/i2p/router/transport/ntcp/NTCP2Options.h"
#include "net/i2p/router/transport/ntcp/NTCP2Payload.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/ntcp/OutboundEstablishState.h"
#include "net/i2p/router/transport/ntcp/OutboundNTCP2State.h"
#include "net/i2p/router/transport/ntcp/Reader.h"
#include "net/i2p/router/transport/ntcp/Writer.h"
#include "net/i2p/router/util/PriBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer2.h"

@protocol NetI2pRouterTransportNtcpNTCPConnection_ReadState;

@interface NetI2pRouterTransportNtcpNTCPConnection () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  JavaNioChannelsSocketChannel *_chan_;
  JavaNioChannelsSelectionKey *_conKey_;
  id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener> _inboundListener_;
  id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener> _outboundListener_;
  id<JavaUtilQueue> _readBufs_;
  id<JavaUtilQueue> _writeBufs_;
  id<JavaUtilSet> _bwInRequests_;
  id<JavaUtilSet> _bwOutRequests_;
  jlong _establishedOn_;
  volatile_id _establishState_;
  NetI2pRouterTransportNtcpNTCPTransport *_transport_;
  jboolean _isInbound_;
  JavaUtilConcurrentAtomicAtomicBoolean *_closed_;
  NetI2pDataRouterRouterAddress *_remAddr_;
  NetI2pDataRouterRouterIdentity *_remotePeer_;
  jlong _clockSkew_;
  NetI2pRouterUtilPriBlockingQueue *_outbound_;
  id<JavaUtilList> _currentOutbound_;
  NetI2pDataSessionKey *_sessionKey_;
  IOSByteArray *_prevWriteEnd_;
  id<NetI2pRouterTransportNtcpNTCPConnection_ReadState> _curReadState_;
  JavaUtilConcurrentAtomicAtomicInteger *_messagesRead_;
  JavaUtilConcurrentAtomicAtomicInteger *_messagesWritten_;
  jlong _lastSendTime_;
  jlong _lastReceiveTime_;
  jlong _lastRateUpdated_;
  jlong _created_;
  jlong _nextMetaTime_;
  JavaUtilConcurrentAtomicAtomicInteger *_consecutiveZeroReads_;
  jboolean _sendingMeta_;
  jlong _nextInfoTime_;
  jboolean _mayDisconnect_;
  jlong _connID_;
  NetI2pRouterTransportNtcpNTCP2Options *_paddingConfig_;
  jint _version_;
  id<ComSouthernstormNoiseProtocolCipherState> _sender_;
  jlong _sendSipk1_;
  jlong _sendSipk2_;
  IOSByteArray *_sendSipIV_;
  jlong _bytesReceived_;
  jlong _bytesSent_;
  jlong _lastBytesReceived_;
  jlong _lastBytesSent_;
  jfloat _sendBps_;
  jfloat _recvBps_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
                withNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)remAddr
                                      withBoolean:(jboolean)isIn;

- (NetI2pRouterTransportNtcpNTCPConnection *)locked_finishInboundEstablishmentWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                                                              withLong:(jlong)clockSkew
                                                                                         withByteArray:(IOSByteArray *)prevWriteEnd
                                                                                         withByteArray:(IOSByteArray *)prevReadEnd;

- (jboolean)hasCurrentOutbound;

- (NetI2pRouterTransportNtcpNTCPConnection *)locked_closeWithBoolean:(jboolean)allowRequeue;

- (void)enqueueInfoMessageNTCP1;

- (void)prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf;

- (void)bufferedPrepareWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf;

- (void)prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf;

- (jint)getPaddingSizeWithInt:(jint)dataSize
                      withInt:(jint)availForPad;

- (void)sendOurRouterInfoWithBoolean:(jboolean)shouldFlood;

- (void)sendRouterInfoWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                         withBoolean:(jboolean)shouldFlood;

- (void)sendTerminationWithInt:(jint)reason
                       withInt:(jint)validFramesRcvd;

- (void)sendNTCP2WithByteArray:(IOSByteArray *)tmp
              withJavaUtilList:(id<JavaUtilList>)blocks;

- (void)removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

- (void)addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

- (void)removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

- (void)addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

- (void)updateStats;

- (void)readMetaWithByteArray:(IOSByteArray *)unencrypted
                      withInt:(jint)off;

- (void)receiveTimestampWithLong:(jlong)ts;

- (void)sendMeta;

+ (NetI2pDataI2npI2NPMessageHandler *)acquireHandlerWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

+ (void)releaseHandlerWithNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler;

+ (NetI2pDataByteArray *)acquireReadBuf;

+ (void)releaseReadBufWithNetI2pDataByteArray:(NetI2pDataByteArray *)buf;

- (void)finishEstablishmentWithComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)sender
                           withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)receiver
                                                          withByteArray:(IOSByteArray *)sip_send
                                                          withByteArray:(IOSByteArray *)sip_recv
                                                               withLong:(jlong)clockSkew;

- (void)delayedCloseWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
                                  withInt:(jint)validFramesRcvd;

+ (void)xor16WithByteArray:(IOSByteArray *)a
             withByteArray:(IOSByteArray *)b;

+ (jlong)fromLong8LEWithByteArray:(IOSByteArray *)src
                          withInt:(jint)offset;

+ (void)toLong8LEWithByteArray:(IOSByteArray *)target
                       withInt:(jint)offset
                      withLong:(jlong)value;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _chan_, JavaNioChannelsSocketChannel *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _conKey_, JavaNioChannelsSelectionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _inboundListener_, id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _outboundListener_, id<NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _readBufs_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _writeBufs_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _bwInRequests_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _bwOutRequests_, id<JavaUtilSet>)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _establishState_, id<NetI2pRouterTransportNtcpEstablishState>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _transport_, NetI2pRouterTransportNtcpNTCPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _closed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _remAddr_, NetI2pDataRouterRouterAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _remotePeer_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _outbound_, NetI2pRouterUtilPriBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _currentOutbound_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _sessionKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _prevWriteEnd_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _curReadState_, id<NetI2pRouterTransportNtcpNTCPConnection_ReadState>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _messagesRead_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _messagesWritten_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _consecutiveZeroReads_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _paddingConfig_, NetI2pRouterTransportNtcpNTCP2Options *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _sender_, id<ComSouthernstormNoiseProtocolCipherState>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection, _sendSipIV_, IOSByteArray *)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_BLOCK_SIZE(void);
#define NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, BLOCK_SIZE, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_META_SIZE(void);
#define NetI2pRouterTransportNtcpNTCPConnection_META_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, META_SIZE, jint)

inline jlong NetI2pRouterTransportNtcpNTCPConnection_get_STAT_UPDATE_TIME_MS(void);
#define NetI2pRouterTransportNtcpNTCPConnection_STAT_UPDATE_TIME_MS 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, STAT_UPDATE_TIME_MS, jlong)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_META_FREQUENCY(void);
#define NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY 2700000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, META_FREQUENCY, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_INFO_FREQUENCY(void);
#define NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY 3000000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, INFO_FREQUENCY, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_MAX_DATA_READ_BUFS(void);
#define NetI2pRouterTransportNtcpNTCPConnection_MAX_DATA_READ_BUFS 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, MAX_DATA_READ_BUFS, jint)

inline NetI2pUtilByteCache *NetI2pRouterTransportNtcpNTCPConnection_get__dataReadBufs(void);
static NetI2pUtilByteCache *NetI2pRouterTransportNtcpNTCPConnection__dataReadBufs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPConnection, _dataReadBufs, NetI2pUtilByteCache *)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_INFO_PRIORITY(void);
#define NetI2pRouterTransportNtcpNTCPConnection_INFO_PRIORITY 150
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, INFO_PRIORITY, jint)

inline NSString *NetI2pRouterTransportNtcpNTCPConnection_get_FIXED_RI_VERSION(void);
static NSString *NetI2pRouterTransportNtcpNTCPConnection_FIXED_RI_VERSION = @"0.9.12";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPConnection, FIXED_RI_VERSION, NSString *)

inline JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterTransportNtcpNTCPConnection_get___connID(void);
static JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterTransportNtcpNTCPConnection___connID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPConnection, __connID, JavaUtilConcurrentAtomicAtomicLong *)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_PADDING_RAND_MIN(void);
#define NetI2pRouterTransportNtcpNTCPConnection_PADDING_RAND_MIN 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, PADDING_RAND_MIN, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_PADDING_MAX(void);
#define NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, PADDING_MAX, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_SIP_IV_LENGTH(void);
#define NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, SIP_IV_LENGTH, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_NTCP2_FAIL_READ(void);
#define NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_READ 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, NTCP2_FAIL_READ, jint)

inline jlong NetI2pRouterTransportNtcpNTCPConnection_get_NTCP2_FAIL_TIMEOUT(void);
#define NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_TIMEOUT 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, NTCP2_FAIL_TIMEOUT, jlong)

inline jlong NetI2pRouterTransportNtcpNTCPConnection_get_NTCP2_TERMINATION_CLOSE_DELAY(void);
#define NetI2pRouterTransportNtcpNTCPConnection_NTCP2_TERMINATION_CLOSE_DELAY 50LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, NTCP2_TERMINATION_CLOSE_DELAY, jlong)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_NTCP2_PREFERRED_PAYLOAD_MAX(void);
#define NetI2pRouterTransportNtcpNTCPConnection_NTCP2_PREFERRED_PAYLOAD_MAX 5200
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, NTCP2_PREFERRED_PAYLOAD_MAX, jint)

inline jfloat NetI2pRouterTransportNtcpNTCPConnection_get_PADDING_MIN_DEFAULT(void);
#define NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT 0.0f
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, PADDING_MIN_DEFAULT, jfloat)

inline jfloat NetI2pRouterTransportNtcpNTCPConnection_get_PADDING_MAX_DEFAULT(void);
#define NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT 0.0625f
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, PADDING_MAX_DEFAULT, jfloat)

inline NetI2pRouterTransportNtcpNTCP2Options *NetI2pRouterTransportNtcpNTCPConnection_get_OUR_PADDING(void);
static NetI2pRouterTransportNtcpNTCP2Options *NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPConnection, OUR_PADDING, NetI2pRouterTransportNtcpNTCP2Options *)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_MIN_PADDING_RANGE(void);
#define NetI2pRouterTransportNtcpNTCPConnection_MIN_PADDING_RANGE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, MIN_PADDING_RANGE, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_MAX_PADDING_RANGE(void);
#define NetI2pRouterTransportNtcpNTCPConnection_MAX_PADDING_RANGE 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, MAX_PADDING_RANGE, jint)

inline jint NetI2pRouterTransportNtcpNTCPConnection_get_MAX_HANDLERS(void);
#define NetI2pRouterTransportNtcpNTCPConnection_MAX_HANDLERS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPConnection, MAX_HANDLERS, jint)

inline JavaUtilConcurrentLinkedBlockingQueue *NetI2pRouterTransportNtcpNTCPConnection_get__i2npHandlers(void);
static JavaUtilConcurrentLinkedBlockingQueue *NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPConnection, _i2npHandlers, JavaUtilConcurrentLinkedBlockingQueue *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection *new_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection *create_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection *NetI2pRouterTransportNtcpNTCPConnection_locked_finishInboundEstablishmentWithNetI2pDataSessionKey_withLong_withByteArray_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pDataSessionKey *key, jlong clockSkew, IOSByteArray *prevWriteEnd, IOSByteArray *prevReadEnd);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPConnection_hasCurrentOutbound(NetI2pRouterTransportNtcpNTCPConnection *self);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection *NetI2pRouterTransportNtcpNTCPConnection_locked_closeWithBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, jboolean allowRequeue);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_enqueueInfoMessageNTCP1(NetI2pRouterTransportNtcpNTCPConnection *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_bufferedPrepareWithNetI2pRouterOutNetMessage_withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterOutNetMessage *msg, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf);

__attribute__((unused)) static jint NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, jint dataSize, jint availForPad);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_sendOurRouterInfoWithBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, jboolean shouldFlood);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_sendRouterInfoWithNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pDataRouterRouterInfo *ri, jboolean shouldFlood);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, jint reason, jint validFramesRcvd);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(NetI2pRouterTransportNtcpNTCPConnection *self, IOSByteArray *tmp, id<JavaUtilList> blocks);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_updateStats(NetI2pRouterTransportNtcpNTCPConnection *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_readMetaWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, IOSByteArray *unencrypted, jint off);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_receiveTimestampWithLong_(NetI2pRouterTransportNtcpNTCPConnection *self, jlong ts);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_sendMeta(NetI2pRouterTransportNtcpNTCPConnection *self);

__attribute__((unused)) static NetI2pDataI2npI2NPMessageHandler *NetI2pRouterTransportNtcpNTCPConnection_acquireHandlerWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_releaseHandlerWithNetI2pDataI2npI2NPMessageHandler_(NetI2pDataI2npI2NPMessageHandler *handler);

__attribute__((unused)) static NetI2pDataByteArray *NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf(void);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(NetI2pDataByteArray *buf);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_finishEstablishmentWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_withByteArray_withByteArray_withLong_(NetI2pRouterTransportNtcpNTCPConnection *self, id<ComSouthernstormNoiseProtocolCipherState> sender, id<ComSouthernstormNoiseProtocolCipherState> receiver, IOSByteArray *sip_send, IOSByteArray *sip_recv, jlong clockSkew);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, JavaNioByteBuffer *buf, jint validFramesRcvd);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_xor16WithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

__attribute__((unused)) static jlong NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(IOSByteArray *src, jint offset);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_toLong8LEWithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong value);

@interface NetI2pRouterTransportNtcpNTCPConnection_InboundListener : NSObject < NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener > {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$;

- (void)completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_InboundListener)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_InboundListener *self, NetI2pRouterTransportNtcpNTCPConnection *outer$);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_InboundListener *new_NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_InboundListener *create_NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_InboundListener)

@interface NetI2pRouterTransportNtcpNTCPConnection_OutboundListener : NSObject < NetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener > {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$;

- (void)completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *self, NetI2pRouterTransportNtcpNTCPConnection *outer$);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *new_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *create_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener)

@protocol NetI2pRouterTransportNtcpNTCPConnection_ReadState < JavaObject >

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (void)destroy;

- (jint)getFramesReceived;

@end

@interface NetI2pRouterTransportNtcpNTCPConnection_ReadState : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_ReadState)

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_ReadState)

@interface NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState : NSObject < NetI2pRouterTransportNtcpNTCPConnection_ReadState > {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
  jint _size_;
  NetI2pDataByteArray *_dataBuf_;
  jint _nextWrite_;
  JavaUtilZipAdler32 *_crc_;
  jlong _stateBegin_;
  jint _blocks_;
  IOSByteArray *_curReadBlock_;
  jint _curReadBlockIndex_;
  IOSByteArray *_decryptBlockBuf_;
  IOSByteArray *_prevReadBlock_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                                                  withByteArray:(IOSByteArray *)prevReadBlock;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)destroy;

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (void)recvEncryptedFastWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (jboolean)recvUnencryptedI2NP;

- (jboolean)receiveBlockWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off;

- (jboolean)receiveInitialWithByteArray:(IOSByteArray *)buf
                                withInt:(jint)off;

- (void)receiveSubsequentWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)off;

- (void)receiveLastBlockWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off;

- (jint)getFramesReceived;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, _dataBuf_, NetI2pDataByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, _crc_, JavaUtilZipAdler32 *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, _curReadBlock_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, _decryptBlockBuf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, _prevReadBlock_, IOSByteArray *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvEncryptedFastWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, JavaNioByteBuffer *buf);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvUnencryptedI2NP(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveBlockWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveInitialWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveSubsequentWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveLastBlockWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState)

@interface NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState : NSObject < NetI2pRouterTransportNtcpNTCPConnection_ReadState, NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback > {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
  IOSByteArray *_recvLen_;
  jlong _sipk1_;
  jlong _sipk2_;
  IOSByteArray *_sipIV_;
  id<ComSouthernstormNoiseProtocolCipherState> _rcvr_;
  jint _framelen_;
  jint _received_;
  NetI2pDataByteArray *_dataBuf_;
  jint _frameCount_;
  jint _blockCount_;
  jboolean _terminated_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                   withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)rcvr
                                                  withByteArray:(IOSByteArray *)keyData;

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (jboolean)decryptAndProcessWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)off;

- (void)destroy;

- (jint)getFramesReceived;

- (void)gotRIWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                withBoolean:(jboolean)isHandshake
                                withBoolean:(jboolean)flood;

- (void)gotDateTimeWithLong:(jlong)time;

- (void)gotI2NPWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg;

- (void)gotOptionsWithByteArray:(IOSByteArray *)options
                    withBoolean:(jboolean)isHandshake;

- (void)gotTerminationWithInt:(jint)reason
                     withLong:(jlong)lastReceived;

- (void)gotUnknownWithInt:(jint)type
                  withInt:(jint)len;

- (void)gotPaddingWithInt:(jint)paddingLength
                  withInt:(jint)frameLength;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, _recvLen_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, _sipIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, _rcvr_, id<ComSouthernstormNoiseProtocolCipherState>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, _dataBuf_, NetI2pDataByteArray *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_decryptAndProcessWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *self, IOSByteArray *data, jint off);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState)

@interface NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState : NetI2pUtilSimpleTimer2_TimedEvent < NetI2pRouterTransportNtcpNTCPConnection_ReadState > {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
  jint _toRead_;
  jint _validFramesRcvd_;
  jint _read_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                                                        withInt:(jint)toRead
                                                        withInt:(jint)validFramesRcvd;

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf;

- (void)destroy;

- (void)timeReached;

- (jint)getFramesReceived;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState)

@interface NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTransportNtcpNTCPConnection *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *self, NetI2pRouterTransportNtcpNTCPConnection *outer$);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *new_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *create_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpNTCPConnection)

@implementation NetI2pRouterTransportNtcpNTCPConnection

+ (jint)BUFFER_SIZE {
  return NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE;
}

+ (jint)NTCP1_MAX_MSG_SIZE {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP1_MAX_MSG_SIZE;
}

+ (jint)NTCP2_MAX_MSG_SIZE {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP2_MAX_MSG_SIZE;
}

+ (jint)REASON_UNSPEC {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_UNSPEC;
}

+ (jint)REASON_TERMINATION {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_TERMINATION;
}

+ (jint)REASON_TIMEOUT {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_TIMEOUT;
}

+ (jint)REASON_AEAD {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_AEAD;
}

+ (jint)REASON_OPTIONS {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_OPTIONS;
}

+ (jint)REASON_SIGTYPE {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_SIGTYPE;
}

+ (jint)REASON_SKEW {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_SKEW;
}

+ (jint)REASON_PADDING {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_PADDING;
}

+ (jint)REASON_FRAMING {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_FRAMING;
}

+ (jint)REASON_PAYLOAD {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_PAYLOAD;
}

+ (jint)REASON_MSG1 {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG1;
}

+ (jint)REASON_MSG2 {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG2;
}

+ (jint)REASON_MSG3 {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG3;
}

+ (jint)REASON_FRAME_TIMEOUT {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_FRAME_TIMEOUT;
}

+ (jint)REASON_SIGFAIL {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_SIGFAIL;
}

+ (jint)REASON_S_MISMATCH {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH;
}

+ (jint)REASON_BANNED {
  return NetI2pRouterTransportNtcpNTCPConnection_REASON_BANNED;
}

+ (jint)PADDING_MIN_DEFAULT_INT {
  return NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT_INT;
}

+ (jint)PADDING_MAX_DEFAULT_INT {
  return NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT_INT;
}

+ (jint)DUMMY_DEFAULT {
  return NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT;
}

+ (jint)DELAY_DEFAULT {
  return NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
                 withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)chan
                  withJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_(self, ctx, transport, chan, key);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)remotePeer
                withNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)remAddr
                                          withInt:(jint)version_ {
  NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_(self, ctx, transport, remotePeer, remAddr, version_);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
                withNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)remAddr
                                      withBoolean:(jboolean)isIn {
  NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(self, ctx, transport, remAddr, isIn);
  return self;
}

- (JavaNioChannelsSocketChannel *)getChannel {
  return _chan_;
}

- (JavaNioChannelsSelectionKey *)getKey {
  return _conKey_;
}

- (void)setChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)chan {
  JreStrongAssign(&_chan_, chan);
}

- (void)setKeyWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  JreStrongAssign(&_conKey_, key);
}

- (jboolean)isInbound {
  return _isInbound_;
}

- (jboolean)isEstablished {
  return [((id<NetI2pRouterTransportNtcpEstablishState>) nil_chk(JreLoadVolatileId(&_establishState_))) isComplete];
}

- (jboolean)isIPv6 {
  return _chan_ != nil && [[((JavaNetSocket *) nil_chk([_chan_ socket])) getInetAddress] isKindOfClass:[JavaNetInet6Address class]];
}

- (id<NetI2pRouterTransportNtcpEstablishState>)getEstablishState {
  return JreLoadVolatileId(&_establishState_);
}

- (NetI2pDataRouterRouterAddress *)getRemoteAddress {
  return _remAddr_;
}

- (NetI2pDataRouterRouterIdentity *)getRemotePeer {
  return _remotePeer_;
}

- (void)setRemotePeerWithNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)ident {
  JreStrongAssign(&_remotePeer_, ident);
}

- (void)finishInboundEstablishmentWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                  withLong:(jlong)clockSkew
                                             withByteArray:(IOSByteArray *)prevWriteEnd
                                             withByteArray:(IOSByteArray *)prevReadEnd {
  NetI2pRouterTransportNtcpNTCPConnection *toClose = NetI2pRouterTransportNtcpNTCPConnection_locked_finishInboundEstablishmentWithNetI2pDataSessionKey_withLong_withByteArray_withByteArray_(self, key, clockSkew, prevWriteEnd, prevReadEnd);
  if (toClose != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Old connection closed: ", toClose, @" replaced by ", self)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.inboundEstablishedDuplicate" withLong:[toClose getUptime]];
    [toClose close];
  }
  [self enqueueInfoMessage];
}

- (NetI2pRouterTransportNtcpNTCPConnection *)locked_finishInboundEstablishmentWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                                                              withLong:(jlong)clockSkew
                                                                                         withByteArray:(IOSByteArray *)prevWriteEnd
                                                                                         withByteArray:(IOSByteArray *)prevReadEnd {
  return NetI2pRouterTransportNtcpNTCPConnection_locked_finishInboundEstablishmentWithNetI2pDataSessionKey_withLong_withByteArray_withByteArray_(self, key, clockSkew, prevWriteEnd, prevReadEnd);
}

- (jlong)getClockSkew {
  return _clockSkew_;
}

- (jlong)getUptime {
  if (![self isEstablished]) return [self getTimeSinceCreated];
  else return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _establishedOn_;
}

- (jint)getMessagesSent {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_messagesWritten_)) get];
}

- (jint)getMessagesReceived {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_messagesRead_)) get];
}

- (jint)getOutboundQueueSize {
  jint queued = [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) size];
  @synchronized(_currentOutbound_) {
    queued += [((id<JavaUtilList>) nil_chk(_currentOutbound_)) size];
  }
  return queued;
}

- (jboolean)hasCurrentOutbound {
  return NetI2pRouterTransportNtcpNTCPConnection_hasCurrentOutbound(self);
}

- (jlong)getTimeSinceSend {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _lastSendTime_;
}

- (jlong)getTimeSinceReceive {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _lastReceiveTime_;
}

- (jlong)getTimeSinceCreated {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _created_;
}

- (jlong)getCreated {
  return _created_;
}

- (jint)getVersion {
  return _version_;
}

- (void)setVersionWithInt:(jint)ver {
  _version_ = ver;
}

- (void)setMayDisconnect {
  _mayDisconnect_ = true;
}

- (jboolean)getMayDisconnect {
  return _mayDisconnect_;
}

- (void)clearZeroRead {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_consecutiveZeroReads_)) setWithInt:0];
}

- (jint)gotZeroRead {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_consecutiveZeroReads_)) incrementAndGet];
}

- (jboolean)isClosed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_closed_)) get];
}

- (void)close {
  [self closeWithBoolean:false];
}

- (void)closeWithBoolean:(jboolean)allowRequeue {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_closed_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logCloseLoopWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"NTCPConnection", self } count:2 type:NSObject_class_()]];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [_log_ infoWithNSString:JreStrcat("$$", @"Closing connection ", [self description]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"cause")];
  }
  NetI2pRouterTransportNtcpNTCPConnection *toClose = NetI2pRouterTransportNtcpNTCPConnection_locked_closeWithBoolean_(self, allowRequeue);
  if (toClose != nil && toClose != self) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@C", @"Multiple connections on remove, closing ", toClose, @" (already closed ", self, ')')];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.multipleCloseOnRemove" withLong:[toClose getUptime]];
    [toClose close];
  }
}

- (void)closeOnTimeoutWithNSString:(NSString *)cause
             withJavaLangException:(JavaLangException *)e {
  id<NetI2pRouterTransportNtcpEstablishState> es = JreLoadVolatileId(&_establishState_);
  [self close];
  [((id<NetI2pRouterTransportNtcpEstablishState>) nil_chk(es)) closeWithNSString:cause withJavaLangException:e];
}

- (NetI2pRouterTransportNtcpNTCPConnection *)locked_closeWithBoolean:(jboolean)allowRequeue {
  return NetI2pRouterTransportNtcpNTCPConnection_locked_closeWithBoolean_(self, allowRequeue);
}

- (void)sendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if (![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) offerWithId:msg]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@$@", @"outbound queue full on ", self, @", dropping message ", msg)];
    [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false withBoolean:false withLong:[((NetI2pRouterOutNetMessage *) nil_chk(msg)) getLifetime]];
    return;
  }
  if ([self isEstablished] && !NetI2pRouterTransportNtcpNTCPConnection_hasCurrentOutbound(self)) [((NetI2pRouterTransportNtcpWriter *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"enqueued"];
}

- (jboolean)isBacklogged {
  return [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isBacklogged];
}

- (jboolean)tooBacklogged {
  if ([self getUptime] < 10 * 1000) return false;
  if ([((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isBacklogged]) {
    jint size = [_outbound_ size];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
      jint writeBufs = [((id<JavaUtilQueue>) nil_chk(_writeBufs_)) size];
      jboolean currentOutboundSet;
      jlong seq;
      @synchronized(_currentOutbound_) {
        currentOutboundSet = ![((id<JavaUtilList>) nil_chk(_currentOutbound_)) isEmpty];
        seq = currentOutboundSet ? [((NetI2pRouterOutNetMessage *) nil_chk([_currentOutbound_ getWithInt:0])) getSeqNum] : -1;
      }
      @try {
        [_log_ warnWithNSString:JreStrcat("$I$Z$Z$J$I$$", @"Too backlogged: size is ", size, @", wantsWrite? ", (0 != ([((JavaNioChannelsSelectionKey *) nil_chk(_conKey_)) interestOps] & JavaNioChannelsSelectionKey_OP_WRITE)), @", currentOut set? ", currentOutboundSet, @", id: ", seq, @", writeBufs: ", writeBufs, @" on ", [self description])];
      }
      @catch (JavaLangRuntimeException *e) {
      }
    }
    return true;
  }
  else {
    return false;
  }
}

- (void)enqueueInfoMessage {
  if (_version_ == 1) {
    NetI2pRouterTransportNtcpNTCPConnection_enqueueInfoMessageNTCP1(self);
  }
  else if (_isInbound_) {
    NetI2pRouterTransportNtcpNTCPConnection_sendOurRouterInfoWithBoolean_(self, false);
  }
}

- (void)enqueueInfoMessageNTCP1 {
  NetI2pRouterTransportNtcpNTCPConnection_enqueueInfoMessageNTCP1(self);
}

- (void)finishOutboundEstablishmentWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                   withLong:(jlong)clockSkew
                                              withByteArray:(IOSByteArray *)prevWriteEnd
                                              withByteArray:(IOSByteArray *)prevReadEnd {
  @synchronized(self) {
    if (JreLoadVolatileId(&_establishState_) == JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED)) {
      JavaLangIllegalStateException *ise = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Already finished on ", self));
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Already finished" withJavaLangThrowable:ise];
      @throw ise;
    }
    IOSByteArray *prevReadBlock = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(prevReadEnd, ((IOSByteArray *) nil_chk(prevReadEnd))->size_ - NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE, prevReadBlock, 0, NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE);
    JreStrongAssignAndConsume(&_curReadState_, new_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(self, prevReadBlock));
    JreStrongAssign(&_sessionKey_, key);
    _clockSkew_ = clockSkew;
    JreStrongAssign(&_prevWriteEnd_, prevWriteEnd);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J$$$$", @"outbound established (key=", key, @" skew=", clockSkew, @" prevWriteEnd: ", NetI2pDataBase64_encodeWithByteArray_(prevWriteEnd), @" prevReadBlock: ", NetI2pDataBase64_encodeWithByteArray_(prevReadBlock))];
    _establishedOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    JreVolatileStrongAssign(&_establishState_, JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED));
    [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) markReachableWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([self getRemotePeer])) calculateHash] withBoolean:false];
    _nextMetaTime_ = _establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY];
    _nextInfoTime_ = _establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY];
    if (![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isEmpty]) [((NetI2pRouterTransportNtcpWriter *) nil_chk([_transport_ getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"outbound established"];
  }
}

- (void)prepareNextWriteWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)prep {
  @synchronized(self) {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_closed_)) get]) return;
    if (![self isEstablished]) {
      return;
    }
    if (_version_ == 1) NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, prep);
    else NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, prep);
  }
}

- (void)prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf {
  NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, buf);
}

- (void)bufferedPrepareWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf {
  NetI2pRouterTransportNtcpNTCPConnection_bufferedPrepareWithNetI2pRouterOutNetMessage_withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, msg, buf);
}

- (void)prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *)buf {
  NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, buf);
}

- (jint)getPaddingSizeWithInt:(jint)dataSize
                      withInt:(jint)availForPad {
  return NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(self, dataSize, availForPad);
}

- (void)sendOurRouterInfoWithBoolean:(jboolean)shouldFlood {
  NetI2pRouterTransportNtcpNTCPConnection_sendOurRouterInfoWithBoolean_(self, shouldFlood);
}

- (void)sendRouterInfoWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                         withBoolean:(jboolean)shouldFlood {
  NetI2pRouterTransportNtcpNTCPConnection_sendRouterInfoWithNetI2pDataRouterRouterInfo_withBoolean_(self, ri, shouldFlood);
}

- (void)sendTerminationAndClose {
  id<NetI2pRouterTransportNtcpNTCPConnection_ReadState> rs = nil;
  @synchronized(self) {
    if (_version_ == 2 && [self isEstablished]) rs = JreRetainedLocalValue(_curReadState_);
  }
  if (rs != nil) NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(self, NetI2pRouterTransportNtcpNTCPConnection_REASON_TIMEOUT, [rs getFramesReceived]);
  else [self close];
}

- (void)sendTerminationWithInt:(jint)reason
                       withInt:(jint)validFramesRcvd {
  NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(self, reason, validFramesRcvd);
}

- (void)sendNTCP2WithByteArray:(IOSByteArray *)tmp
              withJavaUtilList:(id<JavaUtilList>)blocks {
  NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(self, tmp, blocks);
}

- (void)outboundConnected {
  [((JavaNioChannelsSelectionKey *) nil_chk(_conKey_)) interestOpsWithInt:[_conKey_ interestOps] | JavaNioChannelsSelectionKey_OP_READ];
  [((NetI2pRouterTransportNtcpWriter *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"outbound connected"];
}

- (void)removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)queuedRecvWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
withNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) attachWithId:buf];
  [req setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:_inboundListener_];
  NetI2pRouterTransportNtcpNTCPConnection_addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)queuedWriteWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
withNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) attachWithId:buf];
  [req setCompleteListenerWithNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener:_outboundListener_];
  NetI2pRouterTransportNtcpNTCPConnection_addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(self, req);
}

- (void)recvWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  if ([self isClosed]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:@"recv() on closed con"];
    return;
  }
  @synchronized(self) {
    _bytesReceived_ += [((JavaNioByteBuffer *) nil_chk(buf)) remaining];
    NetI2pRouterTransportNtcpNTCPConnection_updateStats(self);
  }
  [((id<JavaUtilQueue>) nil_chk(_readBufs_)) offerWithId:buf];
  [((NetI2pRouterTransportNtcpReader *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getReader])) wantsReadWithNetI2pRouterTransportNtcpNTCPConnection:self];
}

- (void)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  [((id<JavaUtilQueue>) nil_chk(_writeBufs_)) offerWithId:buf];
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self];
}

- (JavaNioByteBuffer *)getNextReadBuf {
  return [((id<JavaUtilQueue>) nil_chk(_readBufs_)) poll];
}

- (jboolean)isWriteBufEmpty {
  return [((id<JavaUtilQueue>) nil_chk(_writeBufs_)) isEmpty];
}

- (JavaNioByteBuffer *)getNextWriteBuf {
  return [((id<JavaUtilQueue>) nil_chk(_writeBufs_)) peek];
}

- (void)removeWriteBufWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  jboolean clearMessage = [self isEstablished];
  @synchronized(self) {
    _bytesSent_ += [((JavaNioByteBuffer *) nil_chk(buf)) capacity];
    if (_sendingMeta_ && ([buf capacity] == NetI2pRouterTransportNtcpNTCPConnection_META_SIZE)) {
      _sendingMeta_ = false;
      clearMessage = false;
    }
    NetI2pRouterTransportNtcpNTCPConnection_updateStats(self);
  }
  [((id<JavaUtilQueue>) nil_chk(_writeBufs_)) removeWithId:buf];
  if (clearMessage) {
    id<JavaUtilList> msgs = nil;
    @synchronized(_currentOutbound_) {
      if (![((id<JavaUtilList>) nil_chk(_currentOutbound_)) isEmpty]) {
        msgs = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_currentOutbound_));
        [_currentOutbound_ clear];
      }
    }
    if (![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isEmpty]) [((NetI2pRouterTransportNtcpWriter *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"write completed"];
    if (msgs != nil) {
      _lastSendTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.sendTime" withLong:[((NetI2pRouterOutNetMessage *) nil_chk([msgs getWithInt:0])) getSendTime]];
      for (NetI2pRouterOutNetMessage * __strong msg in msgs) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
          [_log_ debugWithNSString:JreStrcat("$@CJ$JCJ$I$I$$C", @"I2NP message ", _messagesWritten_, '/', [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessageId], @" sent after ", [msg getSendTime], '/', [msg getLifetime], @" with ", [buf capacity], @" bytes (uid=", JavaLangSystem_identityHashCodeWithId_(msg), @" on ", [self description], ')')];
        }
        [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) sendCompleteWithNetI2pRouterOutNetMessage:msg];
      }
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_messagesWritten_)) addAndGetWithInt:[msgs size]];
    }
  }
  else {
    if (![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isEmpty]) [((NetI2pRouterTransportNtcpWriter *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"write completed"];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldDebug]) [_log_ debugWithNSString:@"I2NP meta message sent completely"];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_messagesWritten_)) incrementAndGet];
  }
}

- (jfloat)getSendRate {
  @synchronized(self) {
    return _sendBps_;
  }
}

- (jfloat)getRecvRate {
  @synchronized(self) {
    return _recvBps_;
  }
}

- (void)updateStats {
  NetI2pRouterTransportNtcpNTCPConnection_updateStats(self);
}

- (void)recvEncryptedI2NPWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  @synchronized(self) {
    if (_curReadState_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"not established");
    [_curReadState_ receiveWithJavaNioByteBuffer:buf];
  }
}

- (void)readMetaWithByteArray:(IOSByteArray *)unencrypted
                      withInt:(jint)off {
  NetI2pRouterTransportNtcpNTCPConnection_readMetaWithByteArray_withInt_(self, unencrypted, off);
}

- (void)receiveTimestampWithLong:(jlong)ts {
  NetI2pRouterTransportNtcpNTCPConnection_receiveTimestampWithLong_(self, ts);
}

- (void)sendMeta {
  NetI2pRouterTransportNtcpNTCPConnection_sendMeta(self);
}

+ (NetI2pDataI2npI2NPMessageHandler *)acquireHandlerWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTransportNtcpNTCPConnection_acquireHandlerWithNetI2pRouterRouterContext_(ctx);
}

+ (void)releaseHandlerWithNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  NetI2pRouterTransportNtcpNTCPConnection_releaseHandlerWithNetI2pDataI2npI2NPMessageHandler_(handler);
}

+ (NetI2pDataByteArray *)acquireReadBuf {
  return NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf();
}

+ (void)releaseReadBufWithNetI2pDataByteArray:(NetI2pDataByteArray *)buf {
  NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(buf);
}

+ (void)releaseResources {
  NetI2pRouterTransportNtcpNTCPConnection_releaseResources();
}

- (void)finishOutboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)sender
                                   withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)receiver
                                                                  withByteArray:(IOSByteArray *)sip_ab
                                                                  withByteArray:(IOSByteArray *)sip_ba
                                                                       withLong:(jlong)clockSkew {
  @synchronized(self) {
    NetI2pRouterTransportNtcpNTCPConnection_finishEstablishmentWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_withByteArray_withByteArray_withLong_(self, sender, receiver, sip_ab, sip_ba, clockSkew);
    JreStrongAssign(&_paddingConfig_, NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING);
    [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) markReachableWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([self getRemotePeer])) calculateHash] withBoolean:false];
    if (![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outbound_)) isEmpty]) [((NetI2pRouterTransportNtcpWriter *) nil_chk([_transport_ getWriter])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withNSString:@"outbound established"];
  }
}

- (void)finishInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)sender
                                  withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)receiver
                                                                 withByteArray:(IOSByteArray *)sip_ba
                                                                 withByteArray:(IOSByteArray *)sip_ab
                                                                      withLong:(jlong)clockSkew
                                     withNetI2pRouterTransportNtcpNTCP2Options:(NetI2pRouterTransportNtcpNTCP2Options *)hisPadding {
  @synchronized(self) {
    NetI2pRouterTransportNtcpNTCPConnection_finishEstablishmentWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_withByteArray_withByteArray_withLong_(self, sender, receiver, sip_ba, sip_ab, clockSkew);
    if (hisPadding != nil) {
      JreStrongAssign(&_paddingConfig_, [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING)) mergeWithNetI2pRouterTransportNtcpNTCP2Options:hisPadding]);
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldDebug]) [_log_ debugWithNSString:JreStrcat("$@$@$@", @"Got padding options:\nhis padding options: ", hisPadding, @"\nour padding options: ", NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING, @"\nmerged config is:    ", _paddingConfig_)];
    }
    else {
      JreStrongAssign(&_paddingConfig_, NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING);
    }
    NetI2pRouterTransportNtcpNTCPConnection *toClose = [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) inboundEstablishedWithNetI2pRouterTransportNtcpNTCPConnection:self];
    if (toClose != nil && toClose != self) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Old connection closed: ", toClose, @" replaced by ", self)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.inboundEstablishedDuplicate" withLong:[toClose getUptime]];
      [toClose close];
    }
    [self enqueueInfoMessage];
  }
}

- (void)failInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)sender
                                                               withByteArray:(IOSByteArray *)sip_ba
                                                                     withInt:(jint)reason {
  @synchronized(self) {
    JreStrongAssign(&_sender_, sender);
    _sendSipk1_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(sip_ba, 0);
    _sendSipk2_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(sip_ba, 8);
    JreStrongAssignAndConsume(&_sendSipIV_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sip_ba, 16, _sendSipIV_, 0, NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH);
    JreVolatileStrongAssign(&_establishState_, JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED));
    _establishedOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    _nextMetaTime_ = JavaLangLong_MAX_VALUE;
    _nextInfoTime_ = JavaLangLong_MAX_VALUE;
    JreStrongAssign(&_paddingConfig_, NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING);
    NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(self, reason, 0);
  }
}

- (void)finishEstablishmentWithComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)sender
                           withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)receiver
                                                          withByteArray:(IOSByteArray *)sip_send
                                                          withByteArray:(IOSByteArray *)sip_recv
                                                               withLong:(jlong)clockSkew {
  NetI2pRouterTransportNtcpNTCPConnection_finishEstablishmentWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_withByteArray_withByteArray_withLong_(self, sender, receiver, sip_send, sip_recv, clockSkew);
}

- (void)delayedCloseWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
                                  withInt:(jint)validFramesRcvd {
  NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(self, buf, validFramesRcvd);
}

+ (void)xor16WithByteArray:(IOSByteArray *)a
             withByteArray:(IOSByteArray *)b {
  NetI2pRouterTransportNtcpNTCPConnection_xor16WithByteArray_withByteArray_(a, b);
}

+ (jlong)fromLong8LEWithByteArray:(IOSByteArray *)src
                          withInt:(jint)offset {
  return NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(src, offset);
}

+ (void)toLong8LEWithByteArray:(IOSByteArray *)target
                       withInt:(jint)offset
                      withLong:(jlong)value {
  NetI2pRouterTransportNtcpNTCPConnection_toLong8LEWithByteArray_withInt_withLong_(target, offset, value);
}

- (NSString *)description {
  return JreStrcat("$I$J$$$$$$$$$$@$@", @"NTCP", _version_, @" conn ", _connID_, (_isInbound_ ? (JreStrcat("$@$IC", @" from ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(_chan_)) socket])) getInetAddress], @" port ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(_chan_)) socket])) getPort], ' ')) : (JreStrcat("$$$IC", @" to ", [((NetI2pDataRouterRouterAddress *) nil_chk(_remAddr_)) getHost], @" port ", [_remAddr_ getPort], ' '))), (_remotePeer_ == nil ? @"unknown" : [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([_remotePeer_ calculateHash])) toBase64])) java_substring:0 endIndex:6]), ([self isEstablished] ? @"" : @" not established"), @" created ", NetI2pDataDataHelper_formatDurationWithLong_([self getTimeSinceCreated]), @" ago, last send ", NetI2pDataDataHelper_formatDurationWithLong_([self getTimeSinceSend]), @" ago, last recv ", NetI2pDataDataHelper_formatDurationWithLong_([self getTimeSinceReceive]), @" ago, sent ", _messagesWritten_, @", rcvd ", _messagesRead_);
}

- (void)__javaClone:(NetI2pRouterTransportNtcpNTCPConnection *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_establishState_, &original->_establishState_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_chan_);
  RELEASE_(_conKey_);
  RELEASE_(_inboundListener_);
  RELEASE_(_outboundListener_);
  RELEASE_(_readBufs_);
  RELEASE_(_writeBufs_);
  RELEASE_(_bwInRequests_);
  RELEASE_(_bwOutRequests_);
  JreReleaseVolatile(&_establishState_);
  RELEASE_(_transport_);
  RELEASE_(_closed_);
  RELEASE_(_remAddr_);
  RELEASE_(_remotePeer_);
  RELEASE_(_outbound_);
  RELEASE_(_currentOutbound_);
  RELEASE_(_sessionKey_);
  RELEASE_(_prevWriteEnd_);
  RELEASE_(_curReadState_);
  RELEASE_(_messagesRead_);
  RELEASE_(_messagesWritten_);
  RELEASE_(_consecutiveZeroReads_);
  RELEASE_(_paddingConfig_);
  RELEASE_(_sender_);
  RELEASE_(_sendSipIV_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSelectionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpEstablishState;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterIdentity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCPConnection;", 0x22, 12, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCPConnection;", 0x22, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 35, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 45, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 48, 47, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 49, 47, -1, -1, -1, -1 },
    { NULL, "F", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 50, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessageHandler;", 0x1a, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataByteArray;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 22, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 10, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 65, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 68, 69, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 70, 52, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 71, 72, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 73, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withJavaNioChannelsSocketChannel:withJavaNioChannelsSelectionKey:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withNetI2pDataRouterRouterIdentity:withNetI2pDataRouterRouterAddress:withInt:);
  methods[2].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withNetI2pDataRouterRouterAddress:withBoolean:);
  methods[3].selector = @selector(getChannel);
  methods[4].selector = @selector(getKey);
  methods[5].selector = @selector(setChannelWithJavaNioChannelsSocketChannel:);
  methods[6].selector = @selector(setKeyWithJavaNioChannelsSelectionKey:);
  methods[7].selector = @selector(isInbound);
  methods[8].selector = @selector(isEstablished);
  methods[9].selector = @selector(isIPv6);
  methods[10].selector = @selector(getEstablishState);
  methods[11].selector = @selector(getRemoteAddress);
  methods[12].selector = @selector(getRemotePeer);
  methods[13].selector = @selector(setRemotePeerWithNetI2pDataRouterRouterIdentity:);
  methods[14].selector = @selector(finishInboundEstablishmentWithNetI2pDataSessionKey:withLong:withByteArray:withByteArray:);
  methods[15].selector = @selector(locked_finishInboundEstablishmentWithNetI2pDataSessionKey:withLong:withByteArray:withByteArray:);
  methods[16].selector = @selector(getClockSkew);
  methods[17].selector = @selector(getUptime);
  methods[18].selector = @selector(getMessagesSent);
  methods[19].selector = @selector(getMessagesReceived);
  methods[20].selector = @selector(getOutboundQueueSize);
  methods[21].selector = @selector(hasCurrentOutbound);
  methods[22].selector = @selector(getTimeSinceSend);
  methods[23].selector = @selector(getTimeSinceReceive);
  methods[24].selector = @selector(getTimeSinceCreated);
  methods[25].selector = @selector(getCreated);
  methods[26].selector = @selector(getVersion);
  methods[27].selector = @selector(setVersionWithInt:);
  methods[28].selector = @selector(setMayDisconnect);
  methods[29].selector = @selector(getMayDisconnect);
  methods[30].selector = @selector(clearZeroRead);
  methods[31].selector = @selector(gotZeroRead);
  methods[32].selector = @selector(isClosed);
  methods[33].selector = @selector(close);
  methods[34].selector = @selector(closeWithBoolean:);
  methods[35].selector = @selector(closeOnTimeoutWithNSString:withJavaLangException:);
  methods[36].selector = @selector(locked_closeWithBoolean:);
  methods[37].selector = @selector(sendWithNetI2pRouterOutNetMessage:);
  methods[38].selector = @selector(isBacklogged);
  methods[39].selector = @selector(tooBacklogged);
  methods[40].selector = @selector(enqueueInfoMessage);
  methods[41].selector = @selector(enqueueInfoMessageNTCP1);
  methods[42].selector = @selector(finishOutboundEstablishmentWithNetI2pDataSessionKey:withLong:withByteArray:withByteArray:);
  methods[43].selector = @selector(prepareNextWriteWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:);
  methods[44].selector = @selector(prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:);
  methods[45].selector = @selector(bufferedPrepareWithNetI2pRouterOutNetMessage:withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:);
  methods[46].selector = @selector(prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer:);
  methods[47].selector = @selector(getPaddingSizeWithInt:withInt:);
  methods[48].selector = @selector(sendOurRouterInfoWithBoolean:);
  methods[49].selector = @selector(sendRouterInfoWithNetI2pDataRouterRouterInfo:withBoolean:);
  methods[50].selector = @selector(sendTerminationAndClose);
  methods[51].selector = @selector(sendTerminationWithInt:withInt:);
  methods[52].selector = @selector(sendNTCP2WithByteArray:withJavaUtilList:);
  methods[53].selector = @selector(outboundConnected);
  methods[54].selector = @selector(removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[55].selector = @selector(addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[56].selector = @selector(removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[57].selector = @selector(addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[58].selector = @selector(queuedRecvWithJavaNioByteBuffer:withNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[59].selector = @selector(queuedWriteWithJavaNioByteBuffer:withNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  methods[60].selector = @selector(recvWithJavaNioByteBuffer:);
  methods[61].selector = @selector(writeWithJavaNioByteBuffer:);
  methods[62].selector = @selector(getNextReadBuf);
  methods[63].selector = @selector(isWriteBufEmpty);
  methods[64].selector = @selector(getNextWriteBuf);
  methods[65].selector = @selector(removeWriteBufWithJavaNioByteBuffer:);
  methods[66].selector = @selector(getSendRate);
  methods[67].selector = @selector(getRecvRate);
  methods[68].selector = @selector(updateStats);
  methods[69].selector = @selector(recvEncryptedI2NPWithJavaNioByteBuffer:);
  methods[70].selector = @selector(readMetaWithByteArray:withInt:);
  methods[71].selector = @selector(receiveTimestampWithLong:);
  methods[72].selector = @selector(sendMeta);
  methods[73].selector = @selector(acquireHandlerWithNetI2pRouterRouterContext:);
  methods[74].selector = @selector(releaseHandlerWithNetI2pDataI2npI2NPMessageHandler:);
  methods[75].selector = @selector(acquireReadBuf);
  methods[76].selector = @selector(releaseReadBufWithNetI2pDataByteArray:);
  methods[77].selector = @selector(releaseResources);
  methods[78].selector = @selector(finishOutboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:withComSouthernstormNoiseProtocolCipherState:withByteArray:withByteArray:withLong:);
  methods[79].selector = @selector(finishInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:withComSouthernstormNoiseProtocolCipherState:withByteArray:withByteArray:withLong:withNetI2pRouterTransportNtcpNTCP2Options:);
  methods[80].selector = @selector(failInboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:withByteArray:withInt:);
  methods[81].selector = @selector(finishEstablishmentWithComSouthernstormNoiseProtocolCipherState:withComSouthernstormNoiseProtocolCipherState:withByteArray:withByteArray:withLong:);
  methods[82].selector = @selector(delayedCloseWithJavaNioByteBuffer:withInt:);
  methods[83].selector = @selector(xor16WithByteArray:withByteArray:);
  methods[84].selector = @selector(fromLong8LEWithByteArray:withInt:);
  methods[85].selector = @selector(toLong8LEWithByteArray:withInt:withLong:);
  methods[86].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_chan_", "LJavaNioChannelsSocketChannel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_conKey_", "LJavaNioChannelsSelectionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inboundListener_", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outboundListener_", "LNetI2pRouterTransportFIFOBandwidthLimiter_CompleteListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_readBufs_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 74, -1 },
    { "_writeBufs_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 74, -1 },
    { "_bwInRequests_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_bwOutRequests_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_establishedOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_establishState_", "LNetI2pRouterTransportNtcpEstablishState;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportNtcpNTCPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isInbound_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_closed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remAddr_", "LNetI2pDataRouterRouterAddress;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remotePeer_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_clockSkew_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outbound_", "LNetI2pRouterUtilPriBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 76, -1 },
    { "_currentOutbound_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 77, -1 },
    { "_sessionKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_prevWriteEnd_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_curReadState_", "LNetI2pRouterTransportNtcpNTCPConnection_ReadState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messagesRead_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messagesWritten_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastSendTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastReceiveTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastRateUpdated_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_created_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextMetaTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consecutiveZeroReads_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "META_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_META_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_sendingMeta_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextInfoTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mayDisconnect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "STAT_UPDATE_TIME_MS", "J", .constantValue.asLong = NetI2pRouterTransportNtcpNTCPConnection_STAT_UPDATE_TIME_MS, 0x1a, -1, -1, -1, -1 },
    { "META_FREQUENCY", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY, 0x1a, -1, -1, -1, -1 },
    { "INFO_FREQUENCY", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY, 0x1a, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE, 0x18, -1, -1, -1, -1 },
    { "MAX_DATA_READ_BUFS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_MAX_DATA_READ_BUFS, 0x1a, -1, -1, -1, -1 },
    { "_dataReadBufs", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 78, -1, -1 },
    { "NTCP1_MAX_MSG_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_NTCP1_MAX_MSG_SIZE, 0x18, -1, -1, -1, -1 },
    { "INFO_PRIORITY", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_INFO_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "FIXED_RI_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 79, -1, -1 },
    { "__connID", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
    { "_connID_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NTCP2_MAX_MSG_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_NTCP2_MAX_MSG_SIZE, 0x18, -1, -1, -1, -1 },
    { "PADDING_RAND_MIN", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_PADDING_RAND_MIN, 0x1a, -1, -1, -1, -1 },
    { "PADDING_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX, 0x1a, -1, -1, -1, -1 },
    { "SIP_IV_LENGTH", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_FAIL_READ", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_READ, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_FAIL_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_TERMINATION_CLOSE_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportNtcpNTCPConnection_NTCP2_TERMINATION_CLOSE_DELAY, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_PREFERRED_PAYLOAD_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_NTCP2_PREFERRED_PAYLOAD_MAX, 0x1a, -1, -1, -1, -1 },
    { "REASON_UNSPEC", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_UNSPEC, 0x18, -1, -1, -1, -1 },
    { "REASON_TERMINATION", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_TERMINATION, 0x18, -1, -1, -1, -1 },
    { "REASON_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "REASON_AEAD", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_AEAD, 0x18, -1, -1, -1, -1 },
    { "REASON_OPTIONS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_OPTIONS, 0x18, -1, -1, -1, -1 },
    { "REASON_SIGTYPE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_SIGTYPE, 0x18, -1, -1, -1, -1 },
    { "REASON_SKEW", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_SKEW, 0x18, -1, -1, -1, -1 },
    { "REASON_PADDING", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_PADDING, 0x18, -1, -1, -1, -1 },
    { "REASON_FRAMING", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_FRAMING, 0x18, -1, -1, -1, -1 },
    { "REASON_PAYLOAD", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_PAYLOAD, 0x18, -1, -1, -1, -1 },
    { "REASON_MSG1", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG1, 0x18, -1, -1, -1, -1 },
    { "REASON_MSG2", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG2, 0x18, -1, -1, -1, -1 },
    { "REASON_MSG3", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_MSG3, 0x18, -1, -1, -1, -1 },
    { "REASON_FRAME_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_FRAME_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "REASON_SIGFAIL", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_SIGFAIL, 0x18, -1, -1, -1, -1 },
    { "REASON_S_MISMATCH", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_S_MISMATCH, 0x18, -1, -1, -1, -1 },
    { "REASON_BANNED", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_REASON_BANNED, 0x18, -1, -1, -1, -1 },
    { "PADDING_MIN_DEFAULT_INT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT_INT, 0x18, -1, -1, -1, -1 },
    { "PADDING_MAX_DEFAULT_INT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT_INT, 0x18, -1, -1, -1, -1 },
    { "PADDING_MIN_DEFAULT", "F", .constantValue.asFloat = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "PADDING_MAX_DEFAULT", "F", .constantValue.asFloat = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "DUMMY_DEFAULT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "DELAY_DEFAULT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "OUR_PADDING", "LNetI2pRouterTransportNtcpNTCP2Options;", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
    { "MIN_PADDING_RANGE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_MIN_PADDING_RANGE, 0x1a, -1, -1, -1, -1 },
    { "MAX_PADDING_RANGE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_MAX_PADDING_RANGE, 0x1a, -1, -1, -1, -1 },
    { "_paddingConfig_", "LNetI2pRouterTransportNtcpNTCP2Options;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_version_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sender_", "LComSouthernstormNoiseProtocolCipherState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendSipk1_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendSipk2_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendSipIV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bytesReceived_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bytesSent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastBytesReceived_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastBytesSent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendBps_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_recvBps_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_HANDLERS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPConnection_MAX_HANDLERS, 0x1a, -1, -1, -1, -1 },
    { "_i2npHandlers", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x1a, -1, 82, 83, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LJavaNioChannelsSocketChannel;LJavaNioChannelsSelectionKey;", "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LNetI2pDataRouterRouterIdentity;LNetI2pDataRouterRouterAddress;I", "LNetI2pDataDataFormatException;", "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LNetI2pDataRouterRouterAddress;Z", "setChannel", "LJavaNioChannelsSocketChannel;", "setKey", "LJavaNioChannelsSelectionKey;", "setRemotePeer", "LNetI2pDataRouterRouterIdentity;", "finishInboundEstablishment", "LNetI2pDataSessionKey;J[B[B", "locked_finishInboundEstablishment", "setVersion", "I", "close", "Z", "closeOnTimeout", "LNSString;LJavaLangException;", "locked_close", "send", "LNetI2pRouterOutNetMessage;", "finishOutboundEstablishment", "prepareNextWrite", "LNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer;", "prepareNextWriteFast", "bufferedPrepare", "LNetI2pRouterOutNetMessage;LNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer;", "prepareNextWriteNTCP2", "getPaddingSize", "II", "sendOurRouterInfo", "sendRouterInfo", "LNetI2pDataRouterRouterInfo;Z", "sendTermination", "sendNTCP2", "[BLJavaUtilList;", "([BLjava/util/List<Lnet/i2p/router/transport/ntcp/NTCP2Payload$Block;>;)V", "removeIBRequest", "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", "addIBRequest", "removeOBRequest", "addOBRequest", "queuedRecv", "LJavaNioByteBuffer;LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", "queuedWrite", "recv", "LJavaNioByteBuffer;", "write", "removeWriteBuf", "recvEncryptedI2NP", "readMeta", "[BI", "receiveTimestamp", "J", "acquireHandler", "LNetI2pRouterRouterContext;", "releaseHandler", "LNetI2pDataI2npI2NPMessageHandler;", "releaseReadBuf", "LNetI2pDataByteArray;", "LComSouthernstormNoiseProtocolCipherState;LComSouthernstormNoiseProtocolCipherState;[B[BJ", "LComSouthernstormNoiseProtocolCipherState;LComSouthernstormNoiseProtocolCipherState;[B[BJLNetI2pRouterTransportNtcpNTCP2Options;", "failInboundEstablishment", "LComSouthernstormNoiseProtocolCipherState;[BI", "finishEstablishment", "delayedClose", "LJavaNioByteBuffer;I", "xor16", "[B[B", "fromLong8LE", "toLong8LE", "[BIJ", "toString", "Ljava/util/Queue<Ljava/nio/ByteBuffer;>;", "Ljava/util/Set<Lnet/i2p/router/transport/FIFOBandwidthLimiter$Request;>;", "Lnet/i2p/router/util/PriBlockingQueue<Lnet/i2p/router/OutNetMessage;>;", "Ljava/util/List<Lnet/i2p/router/OutNetMessage;>;", &NetI2pRouterTransportNtcpNTCPConnection__dataReadBufs, &NetI2pRouterTransportNtcpNTCPConnection_FIXED_RI_VERSION, &NetI2pRouterTransportNtcpNTCPConnection___connID, &NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING, &NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers, "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/data/i2np/I2NPMessageHandler;>;", "LNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer;LNetI2pRouterTransportNtcpNTCPConnection_InboundListener;LNetI2pRouterTransportNtcpNTCPConnection_OutboundListener;LNetI2pRouterTransportNtcpNTCPConnection_ReadState;LNetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState;LNetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState;LNetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState;LNetI2pRouterTransportNtcpNTCPConnection_DelayedCloser;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection = { "NTCPConnection", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x1, 87, 95, -1, 84, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpNTCPConnection class]) {
    JreStrongAssign(&NetI2pRouterTransportNtcpNTCPConnection__dataReadBufs, NetI2pUtilByteCache_getInstanceWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection_MAX_DATA_READ_BUFS, NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE));
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpNTCPConnection___connID, new_JavaUtilConcurrentAtomicAtomicLong_init());
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpNTCPConnection_OUR_PADDING, new_NetI2pRouterTransportNtcpNTCP2Options_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT, NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT));
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pRouterTransportNtcpNTCPConnection_MAX_HANDLERS));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpNTCPConnection)
  }
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, JavaNioChannelsSocketChannel *chan, JavaNioChannelsSelectionKey *key) {
  NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(self, ctx, transport, nil, true);
  JreStrongAssign(&self->_chan_, chan);
  self->_version_ = 1;
  JreStrongAssign(&self->_conKey_, key);
  JreVolatileStrongAssign(&self->_establishState_, create_NetI2pRouterTransportNtcpInboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(ctx, transport, self));
}

NetI2pRouterTransportNtcpNTCPConnection *new_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, JavaNioChannelsSocketChannel *chan, JavaNioChannelsSelectionKey *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_, ctx, transport, chan, key)
}

NetI2pRouterTransportNtcpNTCPConnection *create_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, JavaNioChannelsSocketChannel *chan, JavaNioChannelsSelectionKey *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withJavaNioChannelsSocketChannel_withJavaNioChannelsSelectionKey_, ctx, transport, chan, key)
}

void NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterIdentity *remotePeer, NetI2pDataRouterRouterAddress *remAddr, jint version_) {
  NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(self, ctx, transport, remAddr, false);
  JreStrongAssign(&self->_remotePeer_, remotePeer);
  self->_version_ = version_;
  if (version_ == 1) {
    JreVolatileStrongAssign(&self->_establishState_, create_NetI2pRouterTransportNtcpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(ctx, transport, self));
  }
  else {
    @try {
      JreVolatileStrongAssign(&self->_establishState_, create_NetI2pRouterTransportNtcpOutboundNTCP2State_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(ctx, transport, self));
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"bad address? ", remAddr), iae);
    }
  }
}

NetI2pRouterTransportNtcpNTCPConnection *new_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterIdentity *remotePeer, NetI2pDataRouterRouterAddress *remAddr, jint version_) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_, ctx, transport, remotePeer, remAddr, version_)
}

NetI2pRouterTransportNtcpNTCPConnection *create_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterIdentity *remotePeer, NetI2pDataRouterRouterAddress *remAddr, jint version_) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_, ctx, transport, remotePeer, remAddr, version_)
}

void NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_closed_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->_messagesRead_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_messagesWritten_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  self->_nextMetaTime_ = JavaLangLong_MAX_VALUE;
  JreStrongAssignAndConsume(&self->_consecutiveZeroReads_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  self->_connID_ = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection___connID)) incrementAndGet];
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  self->_created_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_remAddr_, remAddr);
  self->_lastSendTime_ = self->_created_;
  self->_lastReceiveTime_ = self->_created_;
  self->_lastRateUpdated_ = self->_created_;
  JreStrongAssignAndConsume(&self->_readBufs_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssignAndConsume(&self->_writeBufs_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssignAndConsume(&self->_bwInRequests_, new_NetI2pUtilConcurrentHashSet_initWithInt_(2));
  JreStrongAssignAndConsume(&self->_bwOutRequests_, new_NetI2pUtilConcurrentHashSet_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_outbound_, new_NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(ctx, @"NTCP-Connection", 32));
  JreStrongAssignAndConsume(&self->_currentOutbound_, new_JavaUtilArrayList_initWithInt_(1));
  self->_isInbound_ = isIn;
  JreStrongAssignAndConsume(&self->_inboundListener_, new_NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(self));
  JreStrongAssignAndConsume(&self->_outboundListener_, new_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(self));
}

NetI2pRouterTransportNtcpNTCPConnection *new_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_, ctx, transport, remAddr, isIn)
}

NetI2pRouterTransportNtcpNTCPConnection *create_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pDataRouterRouterAddress *remAddr, jboolean isIn) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterAddress_withBoolean_, ctx, transport, remAddr, isIn)
}

NetI2pRouterTransportNtcpNTCPConnection *NetI2pRouterTransportNtcpNTCPConnection_locked_finishInboundEstablishmentWithNetI2pDataSessionKey_withLong_withByteArray_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pDataSessionKey *key, jlong clockSkew, IOSByteArray *prevWriteEnd, IOSByteArray *prevReadEnd) {
  @synchronized(self) {
    if (JreLoadVolatileId(&self->_establishState_) == JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED)) {
      JavaLangIllegalStateException *ise = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Already finished on ", self));
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Already finished" withJavaLangThrowable:ise];
      @throw ise;
    }
    IOSByteArray *prevReadBlock = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(prevReadEnd, ((IOSByteArray *) nil_chk(prevReadEnd))->size_ - NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE, prevReadBlock, 0, NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE);
    JreStrongAssignAndConsume(&self->_curReadState_, new_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(self, prevReadBlock));
    JreStrongAssign(&self->_sessionKey_, key);
    self->_clockSkew_ = clockSkew;
    JreStrongAssign(&self->_prevWriteEnd_, prevWriteEnd);
    self->_establishedOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    NetI2pRouterTransportNtcpNTCPConnection *rv = [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) inboundEstablishedWithNetI2pRouterTransportNtcpNTCPConnection:self];
    self->_nextMetaTime_ = self->_establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY];
    self->_nextInfoTime_ = self->_establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY];
    JreVolatileStrongAssign(&self->_establishState_, JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED));
    return JreRetainedLocalValue(rv);
  }
}

jboolean NetI2pRouterTransportNtcpNTCPConnection_hasCurrentOutbound(NetI2pRouterTransportNtcpNTCPConnection *self) {
  @synchronized(self->_currentOutbound_) {
    return ![((id<JavaUtilList>) nil_chk(self->_currentOutbound_)) isEmpty];
  }
}

NetI2pRouterTransportNtcpNTCPConnection *NetI2pRouterTransportNtcpNTCPConnection_locked_closeWithBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, jboolean allowRequeue) {
  @synchronized(self) {
    if (self->_chan_ != nil) @try {
      [self->_chan_ close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (self->_conKey_ != nil) [self->_conKey_ cancel];
    JreVolatileStrongAssign(&self->_establishState_, JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, FAILED));
    NetI2pRouterTransportNtcpNTCPConnection *old = [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) removeConWithNetI2pRouterTransportNtcpNTCPConnection:self];
    [((NetI2pRouterTransportNtcpReader *) nil_chk([self->_transport_ getReader])) connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:self];
    [((NetI2pRouterTransportNtcpWriter *) nil_chk([self->_transport_ getWriter])) connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:self];
    for (id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> __strong req in nil_chk(self->_bwInRequests_)) {
      [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) abort];
    }
    [self->_bwInRequests_ clear];
    for (id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> __strong req in nil_chk(self->_bwOutRequests_)) {
      [((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) abort];
    }
    [self->_bwOutRequests_ clear];
    [((id<JavaUtilQueue>) nil_chk(self->_writeBufs_)) clear];
    JavaNioByteBuffer *bb;
    while ((bb = [((id<JavaUtilQueue>) nil_chk(self->_readBufs_)) poll]) != nil) {
      NetI2pRouterTransportNtcpEventPumper_releaseBufWithJavaNioByteBuffer_(bb);
    }
    id<JavaUtilList> pending = create_JavaUtilArrayList_init();
    [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) drainToWithJavaUtilCollection:pending];
    @synchronized(self->_currentOutbound_) {
      if (![((id<JavaUtilList>) nil_chk(self->_currentOutbound_)) isEmpty]) [pending addAllWithJavaUtilCollection:self->_currentOutbound_];
      [self->_currentOutbound_ clear];
    }
    for (NetI2pRouterOutNetMessage * __strong msg in pending) {
      [self->_transport_ afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false withBoolean:allowRequeue withLong:[((NetI2pRouterOutNetMessage *) nil_chk(msg)) getLifetime]];
    }
    if (self->_curReadState_ != nil) {
      [self->_curReadState_ destroy];
      JreStrongAssign(&self->_curReadState_, nil);
    }
    if (self->_sender_ != nil) {
      [self->_sender_ destroy];
      JreStrongAssign(&self->_sender_, nil);
    }
    self->_sendSipk1_ = 0;
    self->_sendSipk2_ = 0;
    if (self->_sendSipIV_ != nil) {
      JavaUtilArrays_fillWithByteArray_withByte_(self->_sendSipIV_, (jbyte) 0);
      JreStrongAssign(&self->_sendSipIV_, nil);
    }
    return JreRetainedLocalValue(old);
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_enqueueInfoMessageNTCP1(NetI2pRouterTransportNtcpNTCPConnection *self) {
  jint priority = NetI2pRouterTransportNtcpNTCPConnection_INFO_PRIORITY;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$I$$", @"SENDING INFO message pri. ", priority, @": ", [self description])];
  NetI2pDataI2npDatabaseStoreMessage *dsm = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(self->_context_);
  [dsm setEntryWithNetI2pDataDatabaseEntry:[((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getRouterInfo]];
  NetI2pRouterOutNetMessage *infoMsg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self->_context_, dsm, [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 10 * 1000, priority, nil);
  [infoMsg beginSend];
  [self sendWithNetI2pRouterOutNetMessage:infoMsg];
}

void NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteFastWithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if (self->_nextMetaTime_ <= now) {
    NetI2pRouterTransportNtcpNTCPConnection_sendMeta(self);
    self->_nextMetaTime_ = now + (NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2];
  }
  NetI2pRouterOutNetMessage *msg;
  @synchronized(self->_currentOutbound_) {
    if (![((id<JavaUtilList>) nil_chk(self->_currentOutbound_)) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$", @"attempt for multiple outbound messages with ", [self->_currentOutbound_ size], @" already waiting and ", [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) size], @" queued")];
      return;
    }
    while (true) {
      msg = JreRetainedLocalValue([((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) poll]);
      if (msg == nil) return;
      if ([msg getExpiration] >= now) break;
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"dropping message expired on queue: ", msg, @" on ", self)];
      [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false withBoolean:false withLong:[msg getLifetime]];
    }
    [self->_currentOutbound_ addWithId:msg];
  }
  NetI2pRouterTransportNtcpNTCPConnection_bufferedPrepareWithNetI2pRouterOutNetMessage_withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(self, msg, buf);
  [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) encryptWithByteArray:((NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *) nil_chk(buf))->unencrypted_ withInt:0 withByteArray:buf->encrypted_ withInt:0 withNetI2pDataSessionKey:self->_sessionKey_ withByteArray:self->_prevWriteEnd_ withInt:0 withInt:buf->unencryptedLength_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf->encrypted_, ((IOSByteArray *) nil_chk(buf->encrypted_))->size_ - 16, self->_prevWriteEnd_, 0, ((IOSByteArray *) nil_chk(self->_prevWriteEnd_))->size_);
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withByteArray:buf->encrypted_];
  if (self->_nextInfoTime_ <= now) {
    [self enqueueInfoMessage];
    self->_nextInfoTime_ = now + (NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY];
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_bufferedPrepareWithNetI2pRouterOutNetMessage_withNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterOutNetMessage *msg, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf) {
  id<NetI2pDataI2npI2NPMessage> m = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessage];
  jint sz = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) toByteArrayWithByteArray:((NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *) nil_chk(buf))->unencrypted_ withInt:2] - 2;
  jint min = 2 + sz + 4;
  jint rem = min % 16;
  jint padding = 0;
  if (rem > 0) padding = 16 - rem;
  buf->unencryptedLength_ = min + padding;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf->unencrypted_, 0, 2, sz);
  if (padding > 0) {
    [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:buf->unencrypted_ withInt:2 + sz withInt:padding];
  }
  [((JavaUtilZipAdler32 *) nil_chk(buf->crc_)) updateWithByteArray:buf->unencrypted_ withInt:0 withInt:buf->unencryptedLength_ - 4];
  jlong val = [buf->crc_ getValue];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J$I$I$I", @"Outbound message ", self->_messagesWritten_, @" has crc ", val, @" sz=", sz, @" rem=", rem, @" padding=", padding)];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf->unencrypted_, buf->unencryptedLength_ - 4, 4, val);
  JreStrongAssignAndConsume(&buf->encrypted_, [IOSByteArray newArrayWithLength:buf->unencryptedLength_]);
}

void NetI2pRouterTransportNtcpNTCPConnection_prepareNextWriteNTCP2WithNetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *buf) {
  jint size = NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE;
  id<JavaUtilList> blocks = create_JavaUtilArrayList_initWithInt_(4);
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  @synchronized(self->_currentOutbound_) {
    if (![((id<JavaUtilList>) nil_chk(self->_currentOutbound_)) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$", @"attempt for multiple outbound messages with ", [self->_currentOutbound_ size], @" already waiting and ", [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) size], @" queued")];
      return;
    }
    NetI2pRouterOutNetMessage *msg;
    while (true) {
      msg = ((NetI2pRouterOutNetMessage *) [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) poll]);
      if (msg == nil) return;
      if ([msg getExpiration] >= now) break;
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"dropping message expired on queue: ", msg, @" on ", self)];
      [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false withBoolean:false withLong:[msg getLifetime]];
    }
    [self->_currentOutbound_ addWithId:msg];
    id<NetI2pDataI2npI2NPMessage> m = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessage];
    NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(m);
    [blocks addWithId:block];
    size += [block getTotalLength];
    if (size < NetI2pRouterTransportNtcpNTCPConnection_NTCP2_PREFERRED_PAYLOAD_MAX) {
      while (true) {
        msg = ((NetI2pRouterOutNetMessage *) [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(self->_outbound_)) peek]);
        if (msg == nil) break;
        m = [msg getMessage];
        jint msz = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getMessageSize] - 7;
        if (size + msz > NetI2pRouterTransportNtcpNTCPConnection_NTCP2_PREFERRED_PAYLOAD_MAX) break;
        NetI2pRouterOutNetMessage *msg2 = ((NetI2pRouterOutNetMessage *) [self->_outbound_ poll]);
        if (msg2 == nil) break;
        if (msg2 != msg) {
          [self->_outbound_ offerWithId:msg2];
          break;
        }
        if ([msg getExpiration] >= now) {
          block = create_NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(m);
          [blocks addWithId:block];
          size += NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + msz;
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"dropping message expired on queue: ", msg, @" on ", self)];
          [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false withBoolean:false withLong:[msg getLifetime]];
        }
      }
    }
  }
  if (self->_nextMetaTime_ <= now && size + (NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + 4) <= NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
    NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock_initWithNetI2pI2PAppContext_(self->_context_);
    [blocks addWithId:block];
    size += [block getTotalLength];
    self->_nextMetaTime_ = now + (NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:@"Sending NTCP2 datetime block"];
  }
  if (self->_nextInfoTime_ <= now && size + 1024 <= NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getRouterInfo];
    NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(ri, false);
    jint sz = [block getTotalLength];
    if (size + sz <= NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
      [blocks addWithId:block];
      size += sz;
      self->_nextInfoTime_ = now + (NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:@"SENDING NTCP2 RI block"];
    }
  }
  jint availForPad = NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE - (size + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE);
  if (availForPad > 0) {
    jint padlen = NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(self, size, availForPad);
    NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(padlen);
    [blocks addWithId:block];
    size += [block getTotalLength];
  }
  IOSByteArray *tmp = size <= NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE ? ((NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *) nil_chk(buf))->unencrypted_ : [IOSByteArray arrayWithLength:size];
  NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(self, tmp, blocks);
}

jint NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, jint dataSize, jint availForPad) {
  if (dataSize < 256) dataSize = 256;
  jint minSend = JreFpToInt((dataSize * [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(self->_paddingConfig_)) getSendMin]));
  jint maxSend = JreFpToInt((dataSize * [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(self->_paddingConfig_)) getSendMax]));
  jint min = JavaLangMath_minWithInt_withInt_(minSend, availForPad);
  jint max = JavaLangMath_minWithInt_withInt_(maxSend, availForPad);
  jint range = max - min;
  if (range < NetI2pRouterTransportNtcpNTCPConnection_MIN_PADDING_RANGE) {
    min = JavaLangMath_maxWithInt_withInt_(0, min - (NetI2pRouterTransportNtcpNTCPConnection_MIN_PADDING_RANGE - range));
    range = max - min;
  }
  else if (range > NetI2pRouterTransportNtcpNTCPConnection_MAX_PADDING_RANGE) {
    range = NetI2pRouterTransportNtcpNTCPConnection_MAX_PADDING_RANGE;
  }
  jint padlen = min;
  if (range > 0) padlen += [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:1 + range];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$I$I$I$I$I$I$I$I", @"Padding params: data size: ", dataSize, @" avail: ", availForPad, @" minSend: ", minSend, @" maxSend: ", maxSend, @" min: ", min, @" max: ", max, @" range: ", range, @" padlen: ", padlen)];
  return padlen;
}

void NetI2pRouterTransportNtcpNTCPConnection_sendOurRouterInfoWithBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, jboolean shouldFlood) {
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getRouterInfo];
  if (ri == nil) return;
  NetI2pRouterTransportNtcpNTCPConnection_sendRouterInfoWithNetI2pDataRouterRouterInfo_withBoolean_(self, ri, shouldFlood);
}

void NetI2pRouterTransportNtcpNTCPConnection_sendRouterInfoWithNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterTransportNtcpNTCPConnection *self, NetI2pDataRouterRouterInfo *ri, jboolean shouldFlood) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$@$Z", @"Sending router info for: ", [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getHash], @" flood? ", shouldFlood)];
  id<JavaUtilList> blocks = create_JavaUtilArrayList_initWithInt_(2);
  NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(ri, shouldFlood);
  jint size = [block getTotalLength];
  if (size + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE > NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
    if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"RI too big: ", ri)];
    return;
  }
  [blocks addWithId:block];
  jint availForPad = NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE - (size + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE);
  if (availForPad > 0) {
    jint padlen = NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(self, size, availForPad);
    block = create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(padlen);
    [blocks addWithId:block];
  }
  NetI2pDataByteArray *dataBuf = NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf();
  NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(self, [((NetI2pDataByteArray *) nil_chk(dataBuf)) getData], blocks);
  NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(dataBuf);
}

void NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, jint reason, jint validFramesRcvd) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$I$I$@", @"Sending termination, reason: ", reason, @", vaild frames rcvd: ", validFramesRcvd, @" on ", self)];
  id<JavaUtilList> blocks = create_JavaUtilArrayList_initWithInt_(2);
  NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock_initWithInt_withLong_(reason, validFramesRcvd);
  jint plen = [block getTotalLength];
  [blocks addWithId:block];
  jint padlen = NetI2pRouterTransportNtcpNTCPConnection_getPaddingSizeWithInt_withInt_(self, plen, NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX);
  if (padlen > 0) {
    block = create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(padlen);
    [blocks addWithId:block];
  }
  NetI2pDataByteArray *dataBuf = NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf();
  @synchronized(self) {
    if (self->_sender_ != nil) {
      NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(self, [((NetI2pDataByteArray *) nil_chk(dataBuf)) getData], blocks);
      [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(self->_sender_)) destroy];
      JreStrongAssign(&self->_sender_, nil);
      create_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(self);
    }
  }
  NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(dataBuf);
}

void NetI2pRouterTransportNtcpNTCPConnection_sendNTCP2WithByteArray_withJavaUtilList_(NetI2pRouterTransportNtcpNTCPConnection *self, IOSByteArray *tmp, id<JavaUtilList> blocks) {
  @synchronized(self) {
    if (self->_sender_ == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:@"sender gone" withJavaLangThrowable:create_JavaLangException_init()];
      return;
    }
    jint payloadlen = NetI2pRouterTransportNtcpNTCP2Payload_writePayloadWithByteArray_withInt_withJavaUtilList_(tmp, 0, blocks);
    jint framelen = payloadlen + NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE;
    IOSByteArray *enc = [IOSByteArray arrayWithLength:2 + framelen];
    @try {
      [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(self->_sender_)) encryptWithAdWithByteArray:nil withByteArray:tmp withInt:0 withByteArray:enc withInt:2 withInt:payloadlen];
    }
    @catch (JavaSecurityGeneralSecurityException *gse) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"data enc" withJavaLangThrowable:gse];
      return;
    }
    jlong sipIV = NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(self->_sendSipk1_, self->_sendSipk2_, self->_sendSipIV_);
    *IOSByteArray_GetRef(enc, 0) = (jbyte) ((JreRShift32(framelen, 8)) ^ (JreRShift64(sipIV, 8)));
    *IOSByteArray_GetRef(enc, 1) = (jbyte) (framelen ^ sipIV);
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) {
      JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Sending "])) appendWithInt:[((id<JavaUtilList>) nil_chk(blocks)) size]])) appendWithNSString:@" blocks in "])) appendWithInt:framelen])) appendWithNSString:@" byte NTCP2 frame:"];
      for (jint i = 0; i < [blocks size]; i++) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n    "])) appendWithInt:i])) appendWithNSString:@": "])) appendWithNSString:[((NetI2pRouterTransportNtcpNTCP2Payload_Block *) nil_chk([blocks getWithInt:i])) description]];
      }
      [self->_log_ debugWithNSString:[buf description]];
    }
    [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withByteArray:enc];
    NetI2pRouterTransportNtcpNTCPConnection_toLong8LEWithByteArray_withInt_withLong_(self->_sendSipIV_, 0, sipIV);
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req) {
  [((id<JavaUtilSet>) nil_chk(self->_bwInRequests_)) removeWithId:req];
}

void NetI2pRouterTransportNtcpNTCPConnection_addIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req) {
  [((id<JavaUtilSet>) nil_chk(self->_bwInRequests_)) addWithId:req];
}

void NetI2pRouterTransportNtcpNTCPConnection_removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req) {
  [((id<JavaUtilSet>) nil_chk(self->_bwOutRequests_)) removeWithId:req];
}

void NetI2pRouterTransportNtcpNTCPConnection_addOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(NetI2pRouterTransportNtcpNTCPConnection *self, id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req) {
  [((id<JavaUtilSet>) nil_chk(self->_bwOutRequests_)) addWithId:req];
}

void NetI2pRouterTransportNtcpNTCPConnection_updateStats(NetI2pRouterTransportNtcpNTCPConnection *self) {
  @synchronized(self) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    jlong time = now - self->_lastRateUpdated_;
    if (time >= NetI2pRouterTransportNtcpNTCPConnection_STAT_UPDATE_TIME_MS) {
      jlong totS = self->_bytesSent_;
      jlong totR = self->_bytesReceived_;
      jlong sent = totS - self->_lastBytesSent_;
      jlong recv = totR - self->_lastBytesReceived_;
      self->_lastBytesSent_ = totS;
      self->_lastBytesReceived_ = totR;
      self->_lastRateUpdated_ = now;
      self->_sendBps_ = (0.9f) * self->_sendBps_ + (0.1f) * (sent * 1000.0f) / time;
      self->_recvBps_ = (0.9f) * self->_recvBps_ + (0.1f) * ((jfloat) recv * 1000) / time;
    }
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_readMetaWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, IOSByteArray *unencrypted, jint off) {
  JavaUtilZipAdler32 *crc = create_JavaUtilZipAdler32_init();
  [crc updateWithByteArray:unencrypted withInt:off withInt:NetI2pRouterTransportNtcpNTCPConnection_META_SIZE - 4];
  jlong expected = [crc getValue];
  jlong read = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(unencrypted, off + NetI2pRouterTransportNtcpNTCPConnection_META_SIZE - 4, 4);
  if (read != expected) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"I2NP metadata message had a bad CRC value"];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"ntcp.corruptMetaCRC" withLong:1];
    [self close];
    return;
  }
  jlong ts = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(unencrypted, off + 2, 4);
  NetI2pRouterTransportNtcpNTCPConnection_receiveTimestampWithLong_(self, ts);
}

void NetI2pRouterTransportNtcpNTCPConnection_receiveTimestampWithLong_(NetI2pRouterTransportNtcpNTCPConnection *self, jlong ts) {
  jlong ourTs = ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] + 500) / 1000;
  jlong newSkew = (ourTs - ts);
  if (JavaLangMath_absWithLong_(newSkew * 1000) > NetI2pRouterRouter_CLOCK_FUDGE_FACTOR) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$J$$", @"Peer's skew jumped too far (from ", self->_clockSkew_, @" s to ", newSkew, @" s): ", [self description])];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.corruptSkew" withLong:newSkew];
    [self close];
    return;
  }
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"ntcp.receiveMeta" withLong:newSkew];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$J$", @"Received NTCP metadata, old skew of ", self->_clockSkew_, @" s, new skew of ", newSkew, @"s.")];
  self->_clockSkew_ = newSkew;
}

void NetI2pRouterTransportNtcpNTCPConnection_sendMeta(NetI2pRouterTransportNtcpNTCPConnection *self) {
  IOSByteArray *data = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_META_SIZE];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, 0, 2, 0);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, 2, 4, ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] + 500) / 1000);
  [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:data withInt:6 withInt:6];
  JavaUtilZipAdler32 *crc = create_JavaUtilZipAdler32_init();
  [crc updateWithByteArray:data withInt:0 withInt:NetI2pRouterTransportNtcpNTCPConnection_META_SIZE - 4];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, NetI2pRouterTransportNtcpNTCPConnection_META_SIZE - 4, 4, [crc getValue]);
  [((NetI2pCryptoAESEngine *) nil_chk([self->_context_ aes])) encryptWithByteArray:data withInt:0 withByteArray:data withInt:0 withNetI2pDataSessionKey:self->_sessionKey_ withByteArray:self->_prevWriteEnd_ withInt:0 withInt:NetI2pRouterTransportNtcpNTCPConnection_META_SIZE];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, NetI2pRouterTransportNtcpNTCPConnection_META_SIZE - 16, self->_prevWriteEnd_, 0, ((IOSByteArray *) nil_chk(self->_prevWriteEnd_))->size_);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:@"Sending NTCP metadata"];
  self->_sendingMeta_ = true;
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self withByteArray:data];
}

NetI2pDataI2npI2NPMessageHandler *NetI2pRouterTransportNtcpNTCPConnection_acquireHandlerWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  NetI2pDataI2npI2NPMessageHandler *rv = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers)) poll];
  if (rv == nil) rv = create_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(ctx);
  return rv;
}

void NetI2pRouterTransportNtcpNTCPConnection_releaseHandlerWithNetI2pDataI2npI2NPMessageHandler_(NetI2pDataI2npI2NPMessageHandler *handler) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers)) offerWithId:handler];
}

NetI2pDataByteArray *NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf() {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  return [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection__dataReadBufs)) acquire];
}

void NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(NetI2pDataByteArray *buf) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection__dataReadBufs)) release__WithNetI2pDataByteArray:buf withBoolean:false];
}

void NetI2pRouterTransportNtcpNTCPConnection_releaseResources() {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(NetI2pRouterTransportNtcpNTCPConnection__i2npHandlers)) clear];
}

void NetI2pRouterTransportNtcpNTCPConnection_finishEstablishmentWithComSouthernstormNoiseProtocolCipherState_withComSouthernstormNoiseProtocolCipherState_withByteArray_withByteArray_withLong_(NetI2pRouterTransportNtcpNTCPConnection *self, id<ComSouthernstormNoiseProtocolCipherState> sender, id<ComSouthernstormNoiseProtocolCipherState> receiver, IOSByteArray *sip_send, IOSByteArray *sip_recv, jlong clockSkew) {
  @synchronized(self) {
    if (JreLoadVolatileId(&self->_establishState_) == JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED)) {
      JavaLangIllegalStateException *ise = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Already finished on ", self));
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Already finished" withJavaLangThrowable:ise];
      @throw ise;
    }
    JreStrongAssign(&self->_sender_, sender);
    self->_sendSipk1_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(sip_send, 0);
    self->_sendSipk2_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(sip_send, 8);
    JreStrongAssignAndConsume(&self->_sendSipIV_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sip_send, 16, self->_sendSipIV_, 0, NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH);
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$JCJC$", @"Send SipHash keys: ", self->_sendSipk1_, ' ', self->_sendSipk2_, ' ', NetI2pDataBase64_encodeWithByteArray_(self->_sendSipIV_))];
    self->_clockSkew_ = clockSkew;
    JreVolatileStrongAssign(&self->_establishState_, JreLoadStatic(NetI2pRouterTransportNtcpEstablishBase, VERIFIED));
    self->_establishedOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    self->_nextMetaTime_ = self->_establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_META_FREQUENCY];
    self->_nextInfoTime_ = self->_establishedOn_ + (NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_INFO_FREQUENCY];
    JreStrongAssignAndConsume(&self->_curReadState_, new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(self, receiver, sip_recv));
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(NetI2pRouterTransportNtcpNTCPConnection *self, JavaNioByteBuffer *buf, jint validFramesRcvd) {
  jint toRead = 18 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_READ];
  jint remaining = toRead - [((JavaNioByteBuffer *) nil_chk(buf)) remaining];
  if (remaining > 0) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$I$@", @"delayed close, AEAD failure after ", validFramesRcvd, @" good frames, to read: ", toRead, @" on ", self) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
    JreStrongAssignAndConsume(&self->_curReadState_, new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(self, toRead, validFramesRcvd));
    [self->_curReadState_ receiveWithJavaNioByteBuffer:buf];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$I$@", @"immediate close, AEAD failure after ", validFramesRcvd, @" good frames and reading ", toRead, @" on ", self) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
    NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(self, NetI2pRouterTransportNtcpNTCPConnection_REASON_AEAD, validFramesRcvd);
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_xor16WithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  for (jint i = 0; i < NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE; i++) {
    *IOSByteArray_GetRef(nil_chk(b), i) ^= IOSByteArray_Get(nil_chk(a), i);
  }
}

jlong NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(IOSByteArray *src, jint offset) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  jlong rv = 0;
  for (jint i = offset + 7; i >= offset; i--) {
    JreLShiftAssignLong(&rv, 8);
    rv |= IOSByteArray_Get(nil_chk(src), i) & (jint) 0xFF;
  }
  return rv;
}

void NetI2pRouterTransportNtcpNTCPConnection_toLong8LEWithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong value) {
  NetI2pRouterTransportNtcpNTCPConnection_initialize();
  jint limit = offset + 8;
  for (jint i = offset; i < limit; i++) {
    *IOSByteArray_GetRef(nil_chk(target), i) = (jbyte) value;
    JreRShiftAssignLong(&value, 8);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection)

@implementation NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__ {
  unencryptedLength_ = 0;
  JreStrongAssign(&encrypted_, nil);
  [((JavaUtilZipAdler32 *) nil_chk(crc_)) reset];
}

- (void)dealloc {
  RELEASE_(unencrypted_);
  RELEASE_(crc_);
  RELEASE_(encrypted_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unencrypted_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unencryptedLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "crc_", "LJavaUtilZipAdler32;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "encrypted_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer = { "PrepBuffer", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x8, 2, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_init(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->unencrypted_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE]);
  JreStrongAssignAndConsume(&self->crc_, new_JavaUtilZipAdler32_init());
}

NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *new_NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer, init)
}

NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer *create_NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_PrepBuffer)

@implementation NetI2pRouterTransportNtcpNTCPConnection_InboundListener

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$ {
  NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(self, outer$);
  return self;
}

- (void)completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_removeIBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(this$0_, req);
  JavaNioByteBuffer *buf = (JavaNioByteBuffer *) cast_chk([((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) attachment], [JavaNioByteBuffer class]);
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->_closed_)) get]) {
    NetI2pRouterTransportNtcpEventPumper_releaseBufWithJavaNioByteBuffer_(buf);
    return;
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.throttledReadComplete" withLong:([((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - [req getRequestTime])];
  [this$0_ recvWithJavaNioByteBuffer:buf];
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(this$0_->_transport_)) getPumper])) wantsReadWithNetI2pRouterTransportNtcpNTCPConnection:this$0_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[1].selector = @selector(completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "complete", "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_InboundListener = { "InboundListener", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_InboundListener;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_InboundListener *self, NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportNtcpNTCPConnection_InboundListener *new_NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_InboundListener, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

NetI2pRouterTransportNtcpNTCPConnection_InboundListener *create_NetI2pRouterTransportNtcpNTCPConnection_InboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_InboundListener, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_InboundListener)

@implementation NetI2pRouterTransportNtcpNTCPConnection_OutboundListener

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$ {
  NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(self, outer$);
  return self;
}

- (void)completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:(id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>)req {
  NetI2pRouterTransportNtcpNTCPConnection_removeOBRequestWithNetI2pRouterTransportFIFOBandwidthLimiter_Request_(this$0_, req);
  JavaNioByteBuffer *buf = (JavaNioByteBuffer *) cast_chk([((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) attachment], [JavaNioByteBuffer class]);
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->_closed_)) get]) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.throttledWriteComplete" withLong:([((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - [req getRequestTime])];
    [this$0_ writeWithJavaNioByteBuffer:buf];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[1].selector = @selector(completeWithNetI2pRouterTransportFIFOBandwidthLimiter_Request:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "complete", "LNetI2pRouterTransportFIFOBandwidthLimiter_Request;", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_OutboundListener = { "OutboundListener", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *self, NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *new_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

NetI2pRouterTransportNtcpNTCPConnection_OutboundListener *create_NetI2pRouterTransportNtcpNTCPConnection_OutboundListener_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_OutboundListener)

@implementation NetI2pRouterTransportNtcpNTCPConnection_ReadState

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getFramesReceived);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "receive", "LJavaNioByteBuffer;", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_ReadState = { "ReadState", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0x60a, 3, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_ReadState;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_ReadState)

@implementation NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                                                  withByteArray:(IOSByteArray *)prevReadBlock {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(self, outer$, prevReadBlock);
  return self;
}

- (void)init__ {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(self);
}

- (void)destroy {
  if (_dataBuf_ != nil) {
    NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(_dataBuf_);
    JreStrongAssign(&_dataBuf_, nil);
  }
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  if (_curReadBlockIndex_ == 0 && [((JavaNioByteBuffer *) nil_chk(buf)) hasArray]) {
    jint tot = [((JavaNioByteBuffer *) nil_chk(buf)) remaining];
    if (tot >= 32 && tot % 16 == 0) {
      NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvEncryptedFastWithJavaNioByteBuffer_(self, buf);
      return;
    }
  }
  while ([((JavaNioByteBuffer *) nil_chk(buf)) hasRemaining] && ![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->_closed_)) get]) {
    jint want = JavaLangMath_minWithInt_withInt_([buf remaining], NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - _curReadBlockIndex_);
    if (want > 0) {
      [buf getWithByteArray:_curReadBlock_ withInt:_curReadBlockIndex_ withInt:want];
      _curReadBlockIndex_ += want;
    }
    if (_curReadBlockIndex_ >= NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE) {
      [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) aes])) decryptBlockWithByteArray:_curReadBlock_ withInt:0 withNetI2pDataSessionKey:this$0_->_sessionKey_ withByteArray:_decryptBlockBuf_ withInt:0];
      NetI2pRouterTransportNtcpNTCPConnection_xor16WithByteArray_withByteArray_(_prevReadBlock_, _decryptBlockBuf_);
      jboolean ok = NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvUnencryptedI2NP(self);
      if (!ok) {
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$I$$", @"Read buffer ", JavaLangSystem_identityHashCodeWithId_(buf), @" contained corrupt data, IV was: ", NetI2pDataBase64_encodeWithByteArray_(_decryptBlockBuf_))];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"ntcp.corruptDecryptedI2NP" withLong:1];
        return;
      }
      IOSByteArray *swap = _prevReadBlock_;
      JreStrongAssign(&_prevReadBlock_, _curReadBlock_);
      JreStrongAssign(&_curReadBlock_, swap);
      _curReadBlockIndex_ = 0;
    }
  }
}

- (void)recvEncryptedFastWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvEncryptedFastWithJavaNioByteBuffer_(self, buf);
}

- (jboolean)recvUnencryptedI2NP {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvUnencryptedI2NP(self);
}

- (jboolean)receiveBlockWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveBlockWithByteArray_withInt_(self, buf, off);
}

- (jboolean)receiveInitialWithByteArray:(IOSByteArray *)buf
                                withInt:(jint)off {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveInitialWithByteArray_withInt_(self, buf, off);
}

- (void)receiveSubsequentWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)off {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveSubsequentWithByteArray_withInt_(self, buf, off);
}

- (void)receiveLastBlockWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveLastBlockWithByteArray_withInt_(self, buf, off);
}

- (jint)getFramesReceived {
  return 0;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_dataBuf_);
  RELEASE_(_crc_);
  RELEASE_(_curReadBlock_);
  RELEASE_(_decryptBlockBuf_);
  RELEASE_(_prevReadBlock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:withByteArray:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(destroy);
  methods[3].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[4].selector = @selector(recvEncryptedFastWithJavaNioByteBuffer:);
  methods[5].selector = @selector(recvUnencryptedI2NP);
  methods[6].selector = @selector(receiveBlockWithByteArray:withInt:);
  methods[7].selector = @selector(receiveInitialWithByteArray:withInt:);
  methods[8].selector = @selector(receiveSubsequentWithByteArray:withInt:);
  methods[9].selector = @selector(receiveLastBlockWithByteArray:withInt:);
  methods[10].selector = @selector(getFramesReceived);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dataBuf_", "LNetI2pDataByteArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_crc_", "LJavaUtilZipAdler32;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_stateBegin_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_blocks_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_curReadBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_curReadBlockIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_decryptBlockBuf_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_prevReadBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "init", "receive", "LJavaNioByteBuffer;", "recvEncryptedFast", "receiveBlock", "[BI", "receiveInitial", "receiveSubsequent", "receiveLastBlock", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState = { "NTCP1ReadState", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 11, 11, 10, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_crc_, new_JavaUtilZipAdler32_init());
  JreStrongAssign(&self->_prevReadBlock_, prevReadBlock);
  JreStrongAssignAndConsume(&self->_curReadBlock_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE]);
  JreStrongAssignAndConsume(&self->_decryptBlockBuf_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE]);
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(self);
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_, outer$, prevReadBlock)
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, IOSByteArray *prevReadBlock) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState, initWithNetI2pRouterTransportNtcpNTCPConnection_withByteArray_, outer$, prevReadBlock)
}

void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self) {
  self->_size_ = -1;
  self->_nextWrite_ = 0;
  self->_stateBegin_ = -1;
  self->_blocks_ = -1;
  [((JavaUtilZipAdler32 *) nil_chk(self->_crc_)) reset];
  if (self->_dataBuf_ != nil) NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(self->_dataBuf_);
  JreStrongAssign(&self->_dataBuf_, nil);
  self->_curReadBlockIndex_ = 0;
}

void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvEncryptedFastWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, JavaNioByteBuffer *buf) {
  IOSByteArray *array = [((JavaNioByteBuffer *) nil_chk(buf)) array];
  jint pos = [buf arrayOffset] + [buf position];
  jint end = pos + [buf remaining];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, end - NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE, self->_curReadBlock_, 0, NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE);
  [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) aes])) decryptWithByteArray:array withInt:pos withByteArray:array withInt:pos withNetI2pDataSessionKey:self->this$0_->_sessionKey_ withByteArray:self->_prevReadBlock_ withInt:[buf remaining]];
  for (; pos < end; pos += NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE) {
    jboolean ok = NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveBlockWithByteArray_withInt_(self, array, pos);
    if (!ok) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$I$", @"Read buffer ", JavaLangSystem_identityHashCodeWithId_(buf), @" contained corrupt data")];
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"ntcp.corruptDecryptedI2NP" withLong:1];
      return;
    }
  }
  IOSByteArray *swap = self->_prevReadBlock_;
  JreStrongAssign(&self->_prevReadBlock_, self->_curReadBlock_);
  JreStrongAssign(&self->_curReadBlock_, swap);
}

jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_recvUnencryptedI2NP(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self) {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveBlockWithByteArray_withInt_(self, self->_decryptBlockBuf_, 0);
}

jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveBlockWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off) {
  if (self->_size_ == -1) {
    return NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveInitialWithByteArray_withInt_(self, buf, off);
  }
  else {
    NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveSubsequentWithByteArray_withInt_(self, buf, off);
    return true;
  }
}

jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveInitialWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off) {
  self->_size_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(buf, off, 2);
  if (self->_size_ > NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$$", @"I2NP message too big - size: ", self->_size_, @" Closing ", [self->this$0_ description]) withJavaLangThrowable:create_JavaLangException_init()];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.corruptTooLargeI2NP" withLong:self->_size_];
    [self->this$0_ close];
    return false;
  }
  if (self->_size_ == 0) {
    NetI2pRouterTransportNtcpNTCPConnection_readMetaWithByteArray_withInt_(self->this$0_, buf, off);
    NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(self);
  }
  else {
    self->_stateBegin_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now];
    JreStrongAssign(&self->_dataBuf_, NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf());
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, off + 2, [((NetI2pDataByteArray *) nil_chk(self->_dataBuf_)) getData], 0, NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - 2);
    self->_nextWrite_ += NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - 2;
    [((JavaUtilZipAdler32 *) nil_chk(self->_crc_)) updateWithByteArray:buf withInt:off withInt:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE];
    self->_blocks_++;
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$I$@", @"new I2NP message with size: ", self->_size_, @" for message ", self->this$0_->_messagesRead_)];
  }
  return true;
}

void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveSubsequentWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off) {
  self->_blocks_++;
  jint remaining = self->_size_ - self->_nextWrite_;
  jint blockUsed = JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE, remaining);
  if (remaining > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, off, [((NetI2pDataByteArray *) nil_chk(self->_dataBuf_)) getData], self->_nextWrite_, blockUsed);
    self->_nextWrite_ += blockUsed;
    remaining -= blockUsed;
  }
  if ((remaining <= 0) && (NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - blockUsed < 4)) {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$I$@", @"crc wraparound required on block ", self->_blocks_, @" in message ", self->this$0_->_messagesRead_)];
    [((JavaUtilZipAdler32 *) nil_chk(self->_crc_)) updateWithByteArray:buf withInt:off withInt:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE];
    return;
  }
  else if (remaining <= 0) {
    NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveLastBlockWithByteArray_withInt_(self, buf, off);
  }
  else {
    [((JavaUtilZipAdler32 *) nil_chk(self->_crc_)) updateWithByteArray:buf withInt:off withInt:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE];
  }
}

void NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_receiveLastBlockWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState *self, IOSByteArray *buf, jint off) {
  jlong expectedCrc = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(buf, off + NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - 4, 4);
  [((JavaUtilZipAdler32 *) nil_chk(self->_crc_)) updateWithByteArray:buf withInt:off withInt:NetI2pRouterTransportNtcpNTCPConnection_BLOCK_SIZE - 4];
  jlong val = [self->_crc_ getValue];
  if (val == expectedCrc) {
    @try {
      NetI2pDataI2npI2NPMessageHandler *h = NetI2pRouterTransportNtcpNTCPConnection_acquireHandlerWithNetI2pRouterRouterContext_(self->this$0_->_context_);
      [((NetI2pDataI2npI2NPMessageHandler *) nil_chk(h)) readMessageWithByteArray:[((NetI2pDataByteArray *) nil_chk(self->_dataBuf_)) getData] withInt:0 withInt:self->_size_];
      id<NetI2pDataI2npI2NPMessage> read = [h lastRead];
      jlong timeToRecv = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now] - self->_stateBegin_;
      NetI2pRouterTransportNtcpNTCPConnection_releaseHandlerWithNetI2pDataI2npI2NPMessageHandler_(h);
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@CJ$J$ICI$$", @"I2NP message ", self->this$0_->_messagesRead_, '/', (read != nil ? [read getUniqueId] : 0), @" received after ", timeToRecv, @" with ", self->_size_, '/', (self->_blocks_ * 16), @" bytes on ", [self->this$0_ description])];
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"ntcp.receiveTime" withLong:timeToRecv];
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"ntcp.receiveSize" withLong:self->_size_];
      if (read != nil) {
        [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->this$0_->_transport_)) messageReceivedWithNetI2pDataI2npI2NPMessage:read withNetI2pDataRouterRouterIdentity:self->this$0_->_remotePeer_ withNetI2pDataHash:nil withLong:timeToRecv withInt:self->_size_];
        self->this$0_->_lastReceiveTime_ = [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now];
        [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->this$0_->_messagesRead_)) incrementAndGet];
      }
    }
    @catch (NetI2pDataI2npI2NPMessageException *ime) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
        [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$$", @"Error parsing I2NP message on ", self->this$0_, @"\nDUMP:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(self->_dataBuf_)) getData], 0, self->_size_)) withJavaLangThrowable:ime];
      }
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.corruptI2NPIME" withLong:1];
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$J$J$I$I$@", @"CRC incorrect for message ", self->this$0_->_messagesRead_, @" (calc=", val, @" expected=", expectedCrc, @") size=", self->_size_, @" blocks=", self->_blocks_, @" on: ", self->this$0_)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.corruptI2NPCRC" withLong:1];
  }
  NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState_init__(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_NTCP1ReadState)

@implementation NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                   withComSouthernstormNoiseProtocolCipherState:(id<ComSouthernstormNoiseProtocolCipherState>)rcvr
                                                  withByteArray:(IOSByteArray *)keyData {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(self, outer$, rcvr, keyData);
  return self;
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  if (_terminated_) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$I$@", @"Got ", [((JavaNioByteBuffer *) nil_chk(buf)) remaining], @" after termination on ", this$0_)];
    return;
  }
  while ([((JavaNioByteBuffer *) nil_chk(buf)) hasRemaining]) {
    if (_received_ == -2) {
      *IOSByteArray_GetRef(nil_chk(_recvLen_), 0) = [buf get];
      _received_++;
    }
    if (_received_ == -1 && [buf hasRemaining]) {
      *IOSByteArray_GetRef(nil_chk(_recvLen_), 1) = [buf get];
      _received_++;
      jlong sipIV = NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(_sipk1_, _sipk2_, _sipIV_);
      *IOSByteArray_GetRef(_recvLen_, 0) ^= (jbyte) (JreRShift64(sipIV, 8));
      *IOSByteArray_GetRef(_recvLen_, 1) ^= (jbyte) sipIV;
      NetI2pRouterTransportNtcpNTCPConnection_toLong8LEWithByteArray_withInt_withLong_(_sipIV_, 0, sipIV);
      _framelen_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_recvLen_, 0, 2);
      if (_framelen_ < NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE) {
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$I$@", @"Short frame length: ", _framelen_, @" on ", this$0_)];
        [self destroy];
        NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(this$0_, buf, _frameCount_);
        return;
      }
    }
    jint remaining = [buf remaining];
    if (remaining <= 0) return;
    if (_received_ == 0 && remaining >= _framelen_) {
      IOSByteArray *data = [buf array];
      jint pos = [buf position];
      jboolean ok = NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_decryptAndProcessWithByteArray_withInt_(self, data, pos);
      [buf positionWithInt:pos + _framelen_];
      if (!ok) {
        NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(this$0_, buf, _frameCount_);
        return;
      }
      continue;
    }
    if (_received_ == 0 && (_dataBuf_ == nil || ((IOSByteArray *) nil_chk([_dataBuf_ getData]))->size_ < _framelen_)) {
      if (_dataBuf_ != nil && ((IOSByteArray *) nil_chk([_dataBuf_ getData]))->size_ == NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(_dataBuf_);
      if (_framelen_ > NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) {
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldInfo]) [this$0_->_log_ infoWithNSString:JreStrcat("$I", @"Allocating big ByteArray: ", _framelen_)];
        IOSByteArray *data = [IOSByteArray arrayWithLength:_framelen_];
        JreStrongAssignAndConsume(&_dataBuf_, new_NetI2pDataByteArray_initWithByteArray_(data));
      }
      else {
        JreStrongAssign(&_dataBuf_, NetI2pRouterTransportNtcpNTCPConnection_acquireReadBuf());
      }
    }
    jint toGet = JavaLangMath_minWithInt_withInt_([buf remaining], _framelen_ - _received_);
    IOSByteArray *data = [((NetI2pDataByteArray *) nil_chk(_dataBuf_)) getData];
    [buf getWithByteArray:data withInt:_received_ withInt:toGet];
    _received_ += toGet;
    if (_received_ < _framelen_) return;
    jboolean ok = NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_decryptAndProcessWithByteArray_withInt_(self, data, 0);
    if (!ok || [buf remaining] < 2) {
      if (!ok) NetI2pRouterTransportNtcpNTCPConnection_delayedCloseWithJavaNioByteBuffer_withInt_(this$0_, buf, _frameCount_);
      if (_dataBuf_ != nil) {
        if (((IOSByteArray *) nil_chk([_dataBuf_ getData]))->size_ == NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(_dataBuf_);
        JreStrongAssign(&_dataBuf_, nil);
      }
      if (!ok) return;
    }
  }
}

- (jboolean)decryptAndProcessWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)off {
  return NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_decryptAndProcessWithByteArray_withInt_(self, data, off);
}

- (void)destroy {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldInfo]) [this$0_->_log_ infoWithNSString:JreStrcat("$@", @"NTCP2 read state destroy() on ", this$0_) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
  if (_dataBuf_ != nil && ((IOSByteArray *) nil_chk([_dataBuf_ getData]))->size_ == NetI2pRouterTransportNtcpNTCPConnection_BUFFER_SIZE) NetI2pRouterTransportNtcpNTCPConnection_releaseReadBufWithNetI2pDataByteArray_(_dataBuf_);
  JreStrongAssign(&_dataBuf_, nil);
  [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(_rcvr_)) destroy];
  _terminated_ = true;
}

- (jint)getFramesReceived {
  return _frameCount_;
}

- (void)gotRIWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                withBoolean:(jboolean)isHandshake
                                withBoolean:(jboolean)flood {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldDebug]) [this$0_->_log_ debugWithNSString:@"Got updated RI"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->_messagesRead_)) incrementAndGet];
  @try {
    NetI2pDataHash *h = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getHash];
    NetI2pDataRouterRouterInfo *old = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) storeWithNetI2pDataHash:h withNetI2pDataRouterRouterInfo:ri];
    if (flood && ![ri isEqual:old]) {
      NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *fndf = (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) cast_chk([this$0_->_context_ netDb], [NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade class]);
      if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(fndf)) floodConditionalWithNetI2pDataDatabaseEntry:ri]) {
        if ([this$0_->_log_ shouldDebug]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Flooded the RI: ", h)];
      }
      else {
        if ([this$0_->_log_ shouldInfo]) [this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Flood request but we didn't: ", h)];
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"RI store fail: ", ri), iae);
  }
}

- (void)gotDateTimeWithLong:(jlong)time {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldDebug]) [this$0_->_log_ debugWithNSString:@"Got updated datetime block"];
  NetI2pRouterTransportNtcpNTCPConnection_receiveTimestampWithLong_(this$0_, (time + 500) / 1000);
}

- (void)gotI2NPWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldDebug]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Got I2NP msg: ", msg)];
  jlong timeToRecv = 0;
  jint size = 100;
  [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(this$0_->_transport_)) messageReceivedWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataRouterRouterIdentity:this$0_->_remotePeer_ withNetI2pDataHash:nil withLong:timeToRecv withInt:size];
  this$0_->_lastReceiveTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->_messagesRead_)) incrementAndGet];
}

- (void)gotOptionsWithByteArray:(IOSByteArray *)options
                    withBoolean:(jboolean)isHandshake {
  NetI2pRouterTransportNtcpNTCP2Options *hisPadding = NetI2pRouterTransportNtcpNTCP2Options_fromByteArrayWithByteArray_(options);
  if (hisPadding == nil) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$I$@", @"Got options length ", ((IOSByteArray *) nil_chk(options))->size_, @" on: ", self)];
    return;
  }
  JreStrongAssign(&this$0_->_paddingConfig_, [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(JreLoadStatic(NetI2pRouterTransportNtcpNTCPConnection, OUR_PADDING))) mergeWithNetI2pRouterTransportNtcpNTCP2Options:hisPadding]);
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldDebug]) [this$0_->_log_ debugWithNSString:JreStrcat("$@$@$@", @"Got padding options:\nhis padding options: ", hisPadding, @"\nour padding options: ", JreLoadStatic(NetI2pRouterTransportNtcpNTCPConnection, OUR_PADDING), @"\nmerged config is:    ", this$0_->_paddingConfig_)];
}

- (void)gotTerminationWithInt:(jint)reason
                     withLong:(jlong)lastReceived {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldInfo]) [this$0_->_log_ infoWithNSString:JreStrcat("$I$J$@", @"Got Termination: ", reason, @" total rcvd: ", lastReceived, @" on ", this$0_)];
  [this$0_ close];
}

- (void)gotUnknownWithInt:(jint)type
                  withInt:(jint)len {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$I$I$@", @"Got unknown block type ", type, @" length ", len, @" on ", this$0_)];
}

- (void)gotPaddingWithInt:(jint)paddingLength
                  withInt:(jint)frameLength {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldDebug]) [this$0_->_log_ debugWithNSString:JreStrcat("$I$I$F$F$F", @"Got ", paddingLength, @" bytes padding in ", frameLength, @" byte frame; ratio: ", (((jfloat) paddingLength) / ((jfloat) frameLength)), @" configured min: ", [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(this$0_->_paddingConfig_)) getRecvMin], @" configured max: ", [((NetI2pRouterTransportNtcpNTCP2Options *) nil_chk(this$0_->_paddingConfig_)) getRecvMax])];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_recvLen_);
  RELEASE_(_sipIV_);
  RELEASE_(_rcvr_);
  RELEASE_(_dataBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:withComSouthernstormNoiseProtocolCipherState:withByteArray:);
  methods[1].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[2].selector = @selector(decryptAndProcessWithByteArray:withInt:);
  methods[3].selector = @selector(destroy);
  methods[4].selector = @selector(getFramesReceived);
  methods[5].selector = @selector(gotRIWithNetI2pDataRouterRouterInfo:withBoolean:withBoolean:);
  methods[6].selector = @selector(gotDateTimeWithLong:);
  methods[7].selector = @selector(gotI2NPWithNetI2pDataI2npI2NPMessage:);
  methods[8].selector = @selector(gotOptionsWithByteArray:withBoolean:);
  methods[9].selector = @selector(gotTerminationWithInt:withLong:);
  methods[10].selector = @selector(gotUnknownWithInt:withInt:);
  methods[11].selector = @selector(gotPaddingWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_recvLen_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sipk1_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sipk2_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sipIV_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_rcvr_", "LComSouthernstormNoiseProtocolCipherState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_framelen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_received_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dataBuf_", "LNetI2pDataByteArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_frameCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_blockCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_terminated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComSouthernstormNoiseProtocolCipherState;[B", "receive", "LJavaNioByteBuffer;", "decryptAndProcess", "[BI", "gotRI", "LNetI2pDataRouterRouterInfo;ZZ", "LNetI2pDataDataFormatException;", "gotDateTime", "J", "gotI2NP", "LNetI2pDataI2npI2NPMessage;", "gotOptions", "[BZ", "gotTermination", "IJ", "gotUnknown", "II", "gotPadding", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState = { "NTCP2ReadState", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 12, 12, 19, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_recvLen_, [IOSByteArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->_sipIV_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH]);
  self->_received_ = -2;
  JreStrongAssign(&self->_rcvr_, rcvr);
  self->_sipk1_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(keyData, 0);
  self->_sipk2_ = NetI2pRouterTransportNtcpNTCPConnection_fromLong8LEWithByteArray_withInt_(keyData, 8);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keyData, 16, self->_sipIV_, 0, NetI2pRouterTransportNtcpNTCPConnection_SIP_IV_LENGTH);
  if ([((NetI2pUtilLog *) nil_chk(outer$->_log_)) shouldDebug]) [outer$->_log_ debugWithNSString:JreStrcat("$JCJC$", @"Recv SipHash keys: ", self->_sipk1_, ' ', self->_sipk2_, ' ', NetI2pDataBase64_encodeWithByteArray_(self->_sipIV_))];
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_, outer$, rcvr, keyData)
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_(NetI2pRouterTransportNtcpNTCPConnection *outer$, id<ComSouthernstormNoiseProtocolCipherState> rcvr, IOSByteArray *keyData) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState, initWithNetI2pRouterTransportNtcpNTCPConnection_withComSouthernstormNoiseProtocolCipherState_withByteArray_, outer$, rcvr, keyData)
}

jboolean NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState_decryptAndProcessWithByteArray_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState *self, IOSByteArray *data, jint off) {
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldDebug]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$I$I$", @"Decrypting frame ", self->_frameCount_, @" with ", self->_framelen_, @" bytes")];
  @try {
    [((id<ComSouthernstormNoiseProtocolCipherState>) nil_chk(self->_rcvr_)) decryptWithAdWithByteArray:nil withByteArray:data withInt:off withByteArray:data withInt:off withInt:self->_framelen_];
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    if ([self->this$0_->_log_ shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$I$@", @"Bad AEAD data phase frame ", self->_frameCount_, @" with ", self->_framelen_, @" bytes on ", self->this$0_) withJavaLangThrowable:gse];
    [self destroy];
    return false;
  }
  @try {
    jint blocks = NetI2pRouterTransportNtcpNTCP2Payload_processPayloadWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback_withByteArray_withInt_withInt_withBoolean_(self->this$0_->_context_, self, data, off, self->_framelen_ - NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE, false);
    if ([self->this$0_->_log_ shouldDebug]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$I$", @"Processed ", blocks, @" blocks in frame")];
    self->_blockCount_ += blocks;
  }
  @catch (JavaIoIOException *ioe) {
    if ([self->this$0_->_log_ shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Fail payload ", self->this$0_) withJavaLangThrowable:ioe];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([self->this$0_->_log_ shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Fail payload ", self->this$0_) withJavaLangThrowable:dfe];
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    if ([self->this$0_->_log_ shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Error parsing I2NP message on ", self->this$0_) withJavaLangThrowable:ime];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"ntcp.corruptI2NPIME" withLong:1];
  }
  self->_received_ = -2;
  self->_frameCount_++;
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_NTCP2ReadState)

@implementation NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$
                                                        withInt:(jint)toRead
                                                        withInt:(jint)validFramesRcvd {
  NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(self, outer$, toRead, validFramesRcvd);
  return self;
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  _read_ += [((JavaNioByteBuffer *) nil_chk(buf)) remaining];
  if (_read_ >= _toRead_) {
    [self cancel];
    _read_ = JavaLangInteger_MIN_VALUE;
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$I$@", @"close after AEAD failure and reading ", _toRead_, @" on ", this$0_)];
    NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(this$0_, NetI2pRouterTransportNtcpNTCPConnection_REASON_AEAD, _validFramesRcvd_);
  }
}

- (void)destroy {
  [self cancel];
}

- (void)timeReached {
  _read_ = JavaLangInteger_MIN_VALUE;
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldWarn]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"timeout after AEAD failure waiting for more data on ", this$0_)];
  NetI2pRouterTransportNtcpNTCPConnection_sendTerminationWithInt_withInt_(this$0_, NetI2pRouterTransportNtcpNTCPConnection_REASON_AEAD, _validFramesRcvd_);
}

- (jint)getFramesReceived {
  return 0;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:withInt:withInt:);
  methods[1].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[2].selector = @selector(destroy);
  methods[3].selector = @selector(timeReached);
  methods[4].selector = @selector(getFramesReceived);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_toRead_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_validFramesRcvd_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_read_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "receive", "LJavaNioByteBuffer;", "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState = { "NTCP2FailState", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 5, 4, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *self, NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  self->_toRead_ = toRead;
  self->_validFramesRcvd_ = validFramesRcvd;
  [self scheduleWithLong:NetI2pRouterTransportNtcpNTCPConnection_NTCP2_FAIL_TIMEOUT];
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *new_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState, initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_, outer$, toRead, validFramesRcvd)
}

NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState *create_NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState_initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_(NetI2pRouterTransportNtcpNTCPConnection *outer$, jint toRead, jint validFramesRcvd) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState, initWithNetI2pRouterTransportNtcpNTCPConnection_withInt_withInt_, outer$, toRead, validFramesRcvd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_NTCP2FailState)

@implementation NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)outer$ {
  NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(self, outer$);
  return self;
}

- (void)timeReached {
  [this$0_ close];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportNtcpNTCPConnection;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser = { "DelayedCloser", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser;
}

@end

void NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *self, NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  [self scheduleWithLong:NetI2pRouterTransportNtcpNTCPConnection_NTCP2_TERMINATION_CLOSE_DELAY];
}

NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *new_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser *create_NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser_initWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpNTCPConnection *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser, initWithNetI2pRouterTransportNtcpNTCPConnection_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPConnection_DelayedCloser)
