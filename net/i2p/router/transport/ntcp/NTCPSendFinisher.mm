//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/NTCPSendFinisher.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/transport/ntcp/NTCPSendFinisher.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportNtcpNTCPSendFinisher () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pRouterTransportNtcpNTCPTransport *_transport_;
  NetI2pUtilLog *_log_;
  JavaUtilConcurrentThreadPoolExecutor *_executor_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPSendFinisher, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPSendFinisher, _transport_, NetI2pRouterTransportNtcpNTCPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPSendFinisher, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPSendFinisher, _executor_, JavaUtilConcurrentThreadPoolExecutor *)

inline jint NetI2pRouterTransportNtcpNTCPSendFinisher_get_MIN_THREADS(void);
#define NetI2pRouterTransportNtcpNTCPSendFinisher_MIN_THREADS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPSendFinisher, MIN_THREADS, jint)

inline jint NetI2pRouterTransportNtcpNTCPSendFinisher_get_MAX_THREADS(void);
#define NetI2pRouterTransportNtcpNTCPSendFinisher_MAX_THREADS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPSendFinisher, MAX_THREADS, jint)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportNtcpNTCPSendFinisher_get__count(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportNtcpNTCPSendFinisher__count;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPSendFinisher, _count, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint NetI2pRouterTransportNtcpNTCPSendFinisher_get_THREADS(void);
static jint NetI2pRouterTransportNtcpNTCPSendFinisher_THREADS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTransportNtcpNTCPSendFinisher, THREADS, jint)

@interface NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor : JavaUtilConcurrentThreadPoolExecutor

- (instancetype)initWithInt:(jint)num;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *self, jint num);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *new_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(jint num) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *create_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(jint num);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor)

@interface NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory : NSObject < JavaUtilConcurrentThreadFactory >

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *self);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *new_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *create_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory)

@interface NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportNtcpNTCPSendFinisher *this$0_;
  NetI2pRouterOutNetMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPSendFinisher:(NetI2pRouterTransportNtcpNTCPSendFinisher *)outer$
                                    withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent, _msg_, NetI2pRouterOutNetMessage *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *self, NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *new_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *create_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpNTCPSendFinisher)

@implementation NetI2pRouterTransportNtcpNTCPSendFinisher

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
 withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport {
  NetI2pRouterTransportNtcpNTCPSendFinisher_initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_(self, context, transport);
  return self;
}

- (void)start {
  @synchronized(self) {
    JreStrongAssignAndConsume(&_executor_, new_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(NetI2pRouterTransportNtcpNTCPSendFinisher_THREADS));
  }
}

- (void)stop {
  @synchronized(self) {
    if (_executor_ != nil) [_executor_ shutdownNow];
  }
}

- (void)addWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  @try {
    [((JavaUtilConcurrentThreadPoolExecutor *) nil_chk(_executor_)) executeWithJavaLangRunnable:create_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(self, msg)];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ree) {
    [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"NTCP send finisher stopped, discarding msg.afterSend()"];
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_transport_);
  RELEASE_(_log_);
  RELEASE_(_executor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTransportNtcpNTCPTransport:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(stop);
  methods[3].selector = @selector(addWithNetI2pRouterOutNetMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_THREADS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPSendFinisher_MIN_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREADS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPSendFinisher_MAX_THREADS, 0x1a, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportNtcpNTCPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_count", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "_executor_", "LJavaUtilConcurrentThreadPoolExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "THREADS", "I", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pRouterTransportNtcpNTCPTransport;", "add", "LNetI2pRouterOutNetMessage;", &NetI2pRouterTransportNtcpNTCPSendFinisher__count, &NetI2pRouterTransportNtcpNTCPSendFinisher_THREADS, "LNetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor;LNetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory;LNetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPSendFinisher = { "NTCPSendFinisher", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 4, 8, -1, 5, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPSendFinisher;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpNTCPSendFinisher class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpNTCPSendFinisher__count, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      NetI2pRouterTransportNtcpNTCPSendFinisher_THREADS = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pRouterTransportNtcpNTCPSendFinisher_MIN_THREADS, JavaLangMath_minWithLong_withLong_(NetI2pRouterTransportNtcpNTCPSendFinisher_MAX_THREADS, 1 + (maxMemory / (32 * 1024 * 1024))));
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpNTCPSendFinisher)
  }
}

@end

void NetI2pRouterTransportNtcpNTCPSendFinisher_initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_(NetI2pRouterTransportNtcpNTCPSendFinisher *self, NetI2pI2PAppContext *context, NetI2pRouterTransportNtcpNTCPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportNtcpNTCPSendFinisher_class_()]);
  JreStrongAssign(&self->_transport_, transport);
}

NetI2pRouterTransportNtcpNTCPSendFinisher *new_NetI2pRouterTransportNtcpNTCPSendFinisher_initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_(NetI2pI2PAppContext *context, NetI2pRouterTransportNtcpNTCPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher, initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_, context, transport)
}

NetI2pRouterTransportNtcpNTCPSendFinisher *create_NetI2pRouterTransportNtcpNTCPSendFinisher_initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_(NetI2pI2PAppContext *context, NetI2pRouterTransportNtcpNTCPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher, initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_, context, transport)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPSendFinisher)

@implementation NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor

- (instancetype)initWithInt:(jint)num {
  NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(self, num);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "LNetI2pRouterTransportNtcpNTCPSendFinisher;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor = { "CustomThreadPoolExecutor", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0xa, 1, 0, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor;
}

@end

void NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *self, jint num) {
  JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(self, NetI2pRouterTransportNtcpNTCPSendFinisher_MIN_THREADS, num, 10 * 1000, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), create_JavaUtilConcurrentLinkedBlockingQueue_init(), create_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init());
}

NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *new_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(jint num) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor, initWithInt_, num)
}

NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor *create_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor_initWithInt_(jint num) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor, initWithInt_, num)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadPoolExecutor)

@implementation NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *rv = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(JavaUtilConcurrentExecutors_defaultThreadFactory())) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(rv)) setNameWithNSString:JreStrcat("$ICI", @"NTCPSendFinisher ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(JreLoadStatic(NetI2pRouterTransportNtcpNTCPSendFinisher, _count))) incrementAndGet], '/', JreLoadStatic(NetI2pRouterTransportNtcpNTCPSendFinisher, THREADS))];
  [rv setDaemonWithBoolean:true];
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LNetI2pRouterTransportNtcpNTCPSendFinisher;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory = { "CustomThreadFactory", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory;
}

@end

void NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *self) {
  NSObject_init(self);
}

NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *new_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory, init)
}

NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory *create_NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPSendFinisher_CustomThreadFactory)

@implementation NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPSendFinisher:(NetI2pRouterTransportNtcpNTCPSendFinisher *)outer$
                                    withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(self, outer$, msg);
  return self;
}

- (void)run {
  @try {
    [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(this$0_->_transport_)) afterSendWithNetI2pRouterOutNetMessage:_msg_ withBoolean:true withBoolean:false withLong:[((NetI2pRouterOutNetMessage *) nil_chk(_msg_)) getSendTime]];
  }
  @catch (JavaLangThrowable *t) {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@" afterSend broken?" withJavaLangThrowable:t];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPSendFinisher:withNetI2pRouterOutNetMessage:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPSendFinisher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterOutNetMessage;", "LNetI2pRouterTransportNtcpNTCPSendFinisher;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent = { "RunnableEvent", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent;
}

@end

void NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *self, NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *new_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent, initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_, outer$, msg)
}

NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent *create_NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent_initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportNtcpNTCPSendFinisher *outer$, NetI2pRouterOutNetMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent, initWithNetI2pRouterTransportNtcpNTCPSendFinisher_withNetI2pRouterOutNetMessage_, outer$, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPSendFinisher_RunnableEvent)
