//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/NTCPTransport.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/UnknownHostException.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/KeyPair.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/Vector.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportBid.h"
#include "net/i2p/router/transport/TransportImpl.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"
#include "net/i2p/router/transport/crypto/X25519PrivateKey.h"
#include "net/i2p/router/transport/crypto/X25519PublicKey.h"
#include "net/i2p/router/transport/ntcp/EstablishState.h"
#include "net/i2p/router/transport/ntcp/EventPumper.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/NTCPSendFinisher.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/ntcp/OutboundNTCP2State.h"
#include "net/i2p/router/transport/ntcp/Reader.h"
#include "net/i2p/router/transport/ntcp/Writer.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/router/util/DecayingHashSet.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/VersionComparator.h"

@class NetI2pRouterTransportNtcpNTCPTransport_SharedBid;

@interface NetI2pRouterTransportNtcpNTCPTransport () {
 @public
  NetI2pUtilLog *_log_NTCPTransport_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_fastBid_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_slowBid_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_slowCostBid_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_nearCapacityBid_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_nearCapacityCostBid_;
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid *_transientFail_;
  id _conLock_;
  JavaUtilConcurrentConcurrentHashMap *_conByIdent_;
  NetI2pRouterTransportNtcpEventPumper *_pumper_;
  NetI2pRouterTransportNtcpReader *_reader_;
  NetI2pRouterTransportNtcpWriter *_writer_;
  jint _ssuPort_;
  id<JavaUtilSet> _endpoints_;
  id<JavaUtilSet> _establishing_;
  NetI2pRouterUtilDecayingBloomFilter *_replayFilter_;
  jboolean _haveIPv6Address_;
  jlong _lastInboundIPv4_;
  jlong _lastInboundIPv6_;
  NetI2pRouterTransportNtcpNTCPSendFinisher *_finisher_;
  id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> _dhFactory_;
  NetI2pRouterTransportCryptoX25519KeyFactory *_xdhFactory_;
  jlong _lastBadSkew_;
  jboolean _enableNTCP2_;
  IOSByteArray *_ntcp2StaticPubkey_;
  IOSByteArray *_ntcp2StaticPrivkey_;
  IOSByteArray *_ntcp2StaticIV_;
  NSString *_b64Ntcp2StaticPubkey_;
  NSString *_b64Ntcp2StaticIV_;
}

- (NetI2pDataRouterRouterAddress *)getTargetAddressWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target;

- (jboolean)isValidWithByteArray:(IOSByteArray *)addr;

- (void)setOutboundNTCP2Address;

- (void)restartListeningWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)addr
                                              withBoolean:(jboolean)ipv6;

- (void)startIt;

- (NetI2pDataRouterRouterAddress *)bindAddressWithInt:(jint)port;

- (NSString *)getFixedHost;

- (void)stopWaitAndRestart;

- (NetI2pDataRouterRouterAddress *)configureLocalAddress;

- (NetI2pDataRouterRouterAddress *)createNTCPAddress;

- (void)addNTCP2OptionsWithJavaUtilProperties:(JavaUtilProperties *)props;

- (jint)getNTCPVersionWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)addr;

- (NSString *)getConfiguredIP;

- (jint)getDefaultCostWithBoolean:(jboolean)isIPv6;

- (void)externalAddressReceivedWithByteArray:(IOSByteArray *)ip
                                 withBoolean:(jboolean)isIPv6
                                     withInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _log_NTCPTransport_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _fastBid_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _slowBid_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _slowCostBid_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _nearCapacityBid_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _nearCapacityCostBid_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _transientFail_, NetI2pRouterTransportNtcpNTCPTransport_SharedBid *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _conLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _conByIdent_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _pumper_, NetI2pRouterTransportNtcpEventPumper *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _reader_, NetI2pRouterTransportNtcpReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _writer_, NetI2pRouterTransportNtcpWriter *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _endpoints_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _establishing_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _replayFilter_, NetI2pRouterUtilDecayingBloomFilter *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _finisher_, NetI2pRouterTransportNtcpNTCPSendFinisher *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _dhFactory_, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _xdhFactory_, NetI2pRouterTransportCryptoX25519KeyFactory *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _ntcp2StaticPubkey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _ntcp2StaticPrivkey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _ntcp2StaticIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _b64Ntcp2StaticPubkey_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCPTransport, _b64Ntcp2StaticIV_, NSString *)

inline NSString *NetI2pRouterTransportNtcpNTCPTransport_get_PROP_ADVANCED(void);
static NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_ADVANCED = @"routerconsole.advanced";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPTransport, PROP_ADVANCED, NSString *)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_DEFAULT_COST(void);
#define NetI2pRouterTransportNtcpNTCPTransport_DEFAULT_COST 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, DEFAULT_COST, jint)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_NTCP2_OUTBOUND_COST(void);
#define NetI2pRouterTransportNtcpNTCPTransport_NTCP2_OUTBOUND_COST 14
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, NTCP2_OUTBOUND_COST, jint)

inline IOSLongArray *NetI2pRouterTransportNtcpNTCPTransport_get_RATES(void);
static IOSLongArray *NetI2pRouterTransportNtcpNTCPTransport_RATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpNTCPTransport, RATES, IOSLongArray *)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_NTCP2_IV_LEN(void);
#define NetI2pRouterTransportNtcpNTCPTransport_NTCP2_IV_LEN 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, NTCP2_IV_LEN, jint)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_NTCP2_KEY_LEN(void);
#define NetI2pRouterTransportNtcpNTCPTransport_NTCP2_KEY_LEN 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, NTCP2_KEY_LEN, jint)

inline jlong NetI2pRouterTransportNtcpNTCPTransport_get_MIN_DOWNTIME_TO_REKEY(void);
#define NetI2pRouterTransportNtcpNTCPTransport_MIN_DOWNTIME_TO_REKEY 2592000000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, MIN_DOWNTIME_TO_REKEY, jlong)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_MIN_CONCURRENT_READERS(void);
#define NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_READERS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, MIN_CONCURRENT_READERS, jint)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_MIN_CONCURRENT_WRITERS(void);
#define NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_WRITERS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, MIN_CONCURRENT_WRITERS, jint)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_MAX_CONCURRENT_READERS(void);
#define NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_READERS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, MAX_CONCURRENT_READERS, jint)

inline jint NetI2pRouterTransportNtcpNTCPTransport_get_MAX_CONCURRENT_WRITERS(void);
#define NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_WRITERS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCPTransport, MAX_CONCURRENT_WRITERS, jint)

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_getTargetAddressWithNetI2pDataRouterRouterInfo_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterInfo *target);

__attribute__((unused)) static jboolean NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(NetI2pRouterTransportNtcpNTCPTransport *self, IOSByteArray *addr);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_setOutboundNTCP2Address(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_restartListeningWithNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterAddress *addr, jboolean ipv6);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_startIt(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_bindAddressWithInt_(NetI2pRouterTransportNtcpNTCPTransport *self, jint port);

__attribute__((unused)) static NSString *NetI2pRouterTransportNtcpNTCPTransport_getFixedHost(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_stopWaitAndRestart(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_configureLocalAddress(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_createNTCPAddress(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(NetI2pRouterTransportNtcpNTCPTransport *self, JavaUtilProperties *props);

__attribute__((unused)) static jint NetI2pRouterTransportNtcpNTCPTransport_getNTCPVersionWithNetI2pDataRouterRouterAddress_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterAddress *addr);

__attribute__((unused)) static NSString *NetI2pRouterTransportNtcpNTCPTransport_getConfiguredIP(NetI2pRouterTransportNtcpNTCPTransport *self);

__attribute__((unused)) static jint NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(NetI2pRouterTransportNtcpNTCPTransport *self, jboolean isIPv6);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_externalAddressReceivedWithByteArray_withBoolean_withInt_(NetI2pRouterTransportNtcpNTCPTransport *self, IOSByteArray *ip, jboolean isIPv6, jint port);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportNtcpNTCPTransport__Annotations$0(void);

@interface NetI2pRouterTransportNtcpNTCPTransport_SharedBid : NetI2pRouterTransportTransportBid {
 @public
  NetI2pRouterTransportNtcpNTCPTransport *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)outer$
                                                       withInt:(jint)ms;

- (id<NetI2pRouterTransportTransport>)getTransport;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpNTCPTransport_SharedBid)

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport_SharedBid *self, NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms);

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPTransport_SharedBid *new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpNTCPTransport_SharedBid *create_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpNTCPTransport_SharedBid)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpNTCPTransport)

NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_HOSTNAME = @"i2np.ntcp.hostname";
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT = @"i2np.ntcp.port";
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_PORT = @"i2np.ntcp.autoport";
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP = @"i2np.ntcp.autoip";
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_BIND_INTERFACE = @"i2np.ntcp.bindInterface";
NSString *NetI2pRouterTransportNtcpNTCPTransport_MIN_SIGTYPE_VERSION = @"0.9.16";
NSString *NetI2pRouterTransportNtcpNTCPTransport_STYLE = @"NTCP";
NSString *NetI2pRouterTransportNtcpNTCPTransport_STYLE2 = @"NTCP2";
NSString *NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION;
NSString *NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION_ALT;
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP = @"i2np.ntcp2.sp";
NSString *NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV = @"i2np.ntcp2.iv";

@implementation NetI2pRouterTransportNtcpNTCPTransport

+ (NSString *)PROP_I2NP_NTCP_HOSTNAME {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_HOSTNAME;
}

+ (NSString *)PROP_I2NP_NTCP_PORT {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT;
}

+ (NSString *)PROP_I2NP_NTCP_AUTO_PORT {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_PORT;
}

+ (NSString *)PROP_I2NP_NTCP_AUTO_IP {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP;
}

+ (NSString *)PROP_BIND_INTERFACE {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_BIND_INTERFACE;
}

+ (NSString *)MIN_SIGTYPE_VERSION {
  return NetI2pRouterTransportNtcpNTCPTransport_MIN_SIGTYPE_VERSION;
}

+ (NSString *)STYLE {
  return NetI2pRouterTransportNtcpNTCPTransport_STYLE;
}

+ (NSString *)STYLE2 {
  return NetI2pRouterTransportNtcpNTCPTransport_STYLE2;
}

+ (jint)NTCP2_INT_VERSION {
  return NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION;
}

+ (NSString *)NTCP2_VERSION {
  return NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION;
}

+ (NSString *)NTCP2_VERSION_ALT {
  return NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION_ALT;
}

+ (NSString *)PROP_NTCP2_SP {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP;
}

+ (NSString *)PROP_NTCP2_IV {
  return NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV;
}

+ (jint)ESTABLISH_TIMEOUT {
  return NetI2pRouterTransportNtcpNTCPTransport_ESTABLISH_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:(id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)dh
  withNetI2pRouterTransportCryptoX25519KeyFactory:(NetI2pRouterTransportCryptoX25519KeyFactory *)xdh {
  NetI2pRouterTransportNtcpNTCPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_(self, ctx, dh, xdh);
  return self;
}

- (NetI2pRouterTransportNtcpNTCPConnection *)inboundEstablishedWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.inboundEstablished" withLong:1];
  NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) getRemotePeer])) calculateHash];
  [self markReachableWithNetI2pDataHash:peer withBoolean:true];
  NetI2pRouterTransportNtcpNTCPConnection *old;
  @synchronized(_conLock_) {
    old = JreRetainedLocalValue([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) putWithId:peer withId:con]);
  }
  if ([con isIPv6]) {
    _lastInboundIPv6_ = [con getCreated];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.inboundIPv6Conn" withLong:1];
  }
  else {
    _lastInboundIPv4_ = [con getCreated];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.inboundIPv4Conn" withLong:1];
  }
  return old;
}

- (void)outboundMessageReady {
  NetI2pRouterOutNetMessage *msg = [self getNextMessage];
  if (msg != nil) {
    NetI2pDataRouterRouterInfo *target = [msg getTarget];
    NetI2pDataRouterRouterIdentity *ident = [((NetI2pDataRouterRouterInfo *) nil_chk(target)) getIdentity];
    NetI2pDataHash *ih = [((NetI2pDataRouterRouterIdentity *) nil_chk(ident)) calculateHash];
    NetI2pRouterTransportNtcpNTCPConnection *con = nil;
    jint newVersion = 0;
    jboolean fail = false;
    @synchronized(_conLock_) {
      con = JreRetainedLocalValue([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) getWithId:ih]);
      if (con == nil) {
        NetI2pDataRouterRouterAddress *addr = NetI2pRouterTransportNtcpNTCPTransport_getTargetAddressWithNetI2pDataRouterRouterInfo_(self, target);
        if (addr != nil) {
          newVersion = NetI2pRouterTransportNtcpNTCPTransport_getNTCPVersionWithNetI2pDataRouterRouterAddress_(self, addr);
          if (newVersion != 0) {
            @try {
              con = JreRetainedLocalValue(create_NetI2pRouterTransportNtcpNTCPConnection_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pDataRouterRouterIdentity_withNetI2pDataRouterRouterAddress_withInt_(_context_, self, ident, addr, newVersion));
              [self establishingWithNetI2pRouterTransportNtcpNTCPConnection:con];
              [_conByIdent_ putWithId:ih withId:con];
            }
            @catch (NetI2pDataDataFormatException *dfe) {
              if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldWarn]) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$@", @"bad address? ", target) withJavaLangThrowable:dfe];
              fail = true;
            }
          }
          else {
            fail = true;
          }
        }
        else {
          fail = true;
        }
      }
    }
    if (fail) {
      if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$@", @"we bid on a peer who doesn't have an ntcp address? ", target)];
      [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false];
      return;
    }
    if (newVersion != 0) {
      jboolean shouldSkipInfo = false;
      jboolean shouldFlood = false;
      id<NetI2pDataI2npI2NPMessage> m = [msg getMessage];
      if ([((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getType] == NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE) {
        NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(m, [NetI2pDataI2npDatabaseStoreMessage class]);
        if ([((NetI2pDataHash *) nil_chk([dsm getKey])) isEqual:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]]) {
          shouldSkipInfo = true;
          shouldFlood = ([dsm getReplyToken] != 0);
        }
      }
      if (!shouldSkipInfo) {
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) sendWithNetI2pRouterOutNetMessage:msg];
        [con enqueueInfoMessage];
      }
      else if (shouldFlood || newVersion == 1) {
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) sendWithNetI2pRouterOutNetMessage:msg];
      }
      else if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
        [_log_NTCPTransport_ infoWithNSString:JreStrcat("$@", @"SKIPPING INFO message: ", con)];
      }
      @try {
        JavaNioChannelsSocketChannel *channel = JavaNioChannelsSocketChannel_open();
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) setChannelWithJavaNioChannelsSocketChannel:channel];
        [((JavaNioChannelsSocketChannel *) nil_chk(channel)) configureBlockingWithBoolean:false];
        [((NetI2pRouterTransportNtcpEventPumper *) nil_chk(_pumper_)) registerConnectWithNetI2pRouterTransportNtcpNTCPConnection:con];
        [((id<NetI2pRouterTransportNtcpEstablishState>) nil_chk([con getEstablishState])) prepareOutbound];
      }
      @catch (JavaIoIOException *ioe) {
        if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_NTCPTransport_ errorWithNSString:@"Error opening a channel" withJavaLangThrowable:ioe];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.outboundFailedIOEImmediate" withLong:1];
        [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) close];
        [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false];
      }
      @catch (JavaLangIllegalStateException *ise) {
        if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldWarn]) [_log_NTCPTransport_ warnWithNSString:@"Failed opening a channel" withJavaLangThrowable:ise];
        [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false];
      }
    }
    else {
      [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) sendWithNetI2pRouterOutNetMessage:msg];
    }
  }
}

- (void)afterSendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)sendSuccessful
                                   withBoolean:(jboolean)allowRequeue
                                      withLong:(jlong)msToSend {
  [super afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:sendSuccessful withBoolean:allowRequeue withLong:msToSend];
}

- (NetI2pRouterTransportTransportBid *)bidWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)toAddress
                                                                 withInt:(jint)dataSize {
  if (![self isAlive]) return nil;
  if (dataSize > NetI2pRouterTransportNtcpNTCPConnection_NTCP2_MAX_MSG_SIZE + 7 || (!_enableNTCP2_ && dataSize > NetI2pRouterTransportNtcpNTCPConnection_NTCP1_MAX_MSG_SIZE)) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.noBidTooLargeI2NP" withLong:dataSize];
    return nil;
  }
  NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(toAddress)) getIdentity])) calculateHash];
  if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) isBanlistedWithNetI2pDataHash:peer withNSString:NetI2pRouterTransportNtcpNTCPTransport_STYLE]) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.attemptBanlistedPeer" withLong:1];
    return nil;
  }
  else if ([self isUnreachableWithNetI2pDataHash:peer]) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.attemptUnreachablePeer" withLong:1];
    return nil;
  }
  jboolean established = [self isEstablishedWithNetI2pDataHash:peer];
  if (established) {
    if (dataSize > NetI2pRouterTransportNtcpNTCPConnection_NTCP1_MAX_MSG_SIZE) {
      NetI2pRouterTransportNtcpNTCPConnection *con = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) getWithId:peer];
      if (con == nil || [con getVersion] < NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION) {
        [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.noBidTooLargeI2NP" withLong:dataSize];
        return nil;
      }
    }
    return _fastBid_;
  }
  if (dataSize > NetI2pRouterTransportNtcpNTCPConnection_NTCP1_MAX_MSG_SIZE) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"ntcp.noBidTooLargeI2NP" withLong:dataSize];
    return nil;
  }
  NetI2pDataRouterRouterAddress *addr = NetI2pRouterTransportNtcpNTCPTransport_getTargetAddressWithNetI2pDataRouterRouterInfo_(self, toAddress);
  if (addr == nil) {
    [self markUnreachableWithNetI2pDataHash:peer];
    return nil;
  }
  NetI2pCryptoSigType *type = [((NetI2pDataRouterRouterIdentity *) nil_chk([toAddress getIdentity])) getSigType];
  if (type == nil || ![type isAvailable]) {
    [self markUnreachableWithNetI2pDataHash:peer];
    return nil;
  }
  NetI2pDataRouterRouterInfo *us = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getRouterInfo];
  if (us != nil) {
    NetI2pDataRouterRouterIdentity *id_ = [us getIdentity];
    if ([((NetI2pDataRouterRouterIdentity *) nil_chk(id_)) getSigType] != JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1)) {
      NSString *v = [toAddress getVersion];
      if (NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterTransportNtcpNTCPTransport_MIN_SIGTYPE_VERSION) < 0) {
        [self markUnreachableWithNetI2pDataHash:peer];
        return nil;
      }
    }
  }
  if (![self allowConnection]) {
    return _transientFail_;
  }
  if ([self haveCapacity]) {
    if ([addr getCost] > NetI2pRouterTransportNtcpNTCPTransport_DEFAULT_COST) return _slowCostBid_;
    else return _slowBid_;
  }
  else {
    if ([addr getCost] > NetI2pRouterTransportNtcpNTCPTransport_DEFAULT_COST) return _nearCapacityCostBid_;
    else return _nearCapacityBid_;
  }
}

- (NetI2pDataRouterRouterAddress *)getTargetAddressWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target {
  return NetI2pRouterTransportNtcpNTCPTransport_getTargetAddressWithNetI2pDataRouterRouterInfo_(self, target);
}

- (jboolean)isValidWithByteArray:(IOSByteArray *)addr {
  return NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(self, addr);
}

- (jboolean)allowConnection {
  return [self countActivePeers] < [self getMaxConnections];
}

- (void)sendCompleteWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  [((NetI2pRouterTransportNtcpNTCPSendFinisher *) nil_chk(_finisher_)) addWithNetI2pRouterOutNetMessage:msg];
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)dest {
  NetI2pRouterTransportNtcpNTCPConnection *con = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) getWithId:dest];
  return (con != nil) && [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isEstablished] && ![con isClosed];
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)dest {
  NetI2pRouterTransportNtcpNTCPConnection *con = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) getWithId:dest];
  return (con != nil) && [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isEstablished] && [con tooBacklogged];
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTransportNtcpNTCPConnection *con = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) getWithId:peer];
  if (con != nil && [con isEstablished] && [con getMessagesReceived] <= 2 && [con getMessagesSent] <= 1) {
    [con setMayDisconnect];
  }
}

- (NetI2pRouterTransportNtcpNTCPConnection *)removeConWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  NetI2pRouterTransportNtcpNTCPConnection *removed = nil;
  NetI2pDataRouterRouterIdentity *ident = [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) getRemotePeer];
  if (ident != nil) {
    @synchronized(_conLock_) {
      if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) removeWithId:[ident calculateHash] withId:con]) removed = JreRetainedLocalValue(con);
    }
  }
  return removed;
}

- (jint)countPeers {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) size];
}

- (id<JavaUtilCollection>)getPeers {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values];
}

- (id<JavaUtilSet>)getEstablished {
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) keySet]);
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([_conByIdent_ entrySet])) {
    NetI2pRouterTransportNtcpNTCPConnection *con = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
    if (![((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isEstablished] || [con isClosed]) [rv removeWithId:[e getKey]];
  }
  return rv;
}

- (jint)countActivePeers {
  jint active = 0;
  for (NetI2pRouterTransportNtcpNTCPConnection * __strong con in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values])) {
    if (([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) getMessagesSent] > 0 && [con getTimeSinceSend] <= 5 * 60 * 1000) || ([con getMessagesReceived] > 0 && [con getTimeSinceReceive] <= 5 * 60 * 1000)) {
      active++;
    }
  }
  return active;
}

- (jint)countActiveSendPeers {
  jint active = 0;
  for (NetI2pRouterTransportNtcpNTCPConnection * __strong con in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values])) {
    if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) getMessagesSent] > 0 && [con getTimeSinceSend] <= 60 * 1000) {
      active++;
    }
  }
  return active;
}

- (void)setLastBadSkewWithLong:(jlong)skew {
  _lastBadSkew_ = skew;
}

- (JavaUtilVector *)getClockSkews {
  JavaUtilVector *skews = create_JavaUtilVector_init();
  jlong tooOld = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - 10 * 60 * 1000;
  for (NetI2pRouterTransportNtcpNTCPConnection * __strong con in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values])) {
    if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isEstablished] && [con getCreated] > tooOld) [skews addElementWithId:JavaLangLong_valueOfWithLong_([con getClockSkew])];
  }
  if ([skews size] < 5 && _lastBadSkew_ != 0) [skews addElementWithId:JavaLangLong_valueOfWithLong_(_lastBadSkew_)];
  return skews;
}

- (jboolean)isHXHIValidWithByteArray:(IOSByteArray *)hxhi {
  return ![((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(_replayFilter_)) addWithByteArray:hxhi withInt:0 withInt:8];
}

- (void)startListening {
  @synchronized(self) {
    if ([((NetI2pRouterTransportNtcpEventPumper *) nil_chk(_pumper_)) isAlive]) return;
    if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_NTCPTransport_ warnWithNSString:@"Starting NTCP transport listening"];
    NetI2pRouterTransportNtcpNTCPTransport_startIt(self);
    NetI2pDataRouterRouterAddress *addr = NetI2pRouterTransportNtcpNTCPTransport_configureLocalAddress(self);
    jint port;
    if (addr != nil) port = [addr getPort];
    else port = _ssuPort_;
    jboolean isFixedOrForceFirewalled = [((NSString *) nil_chk([((NSString *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP withNSString:@"true"])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) isEqual:@"false"];
    NetI2pDataRouterRouterAddress *myAddress = NetI2pRouterTransportNtcpNTCPTransport_bindAddressWithInt_(self, port);
    if (myAddress != nil) {
      [self replaceAddressWithNetI2pDataRouterRouterAddress:myAddress];
    }
    else if (addr != nil) {
      [self replaceAddressWithNetI2pDataRouterRouterAddress:addr];
    }
    else if (port > 0 && !isFixedOrForceFirewalled) {
      id<JavaUtilCollection> addrs = [self getSavedLocalAddresses];
      if (![((id<JavaUtilCollection>) nil_chk(addrs)) isEmpty]) {
        for (JavaNetInetAddress * __strong ia in addrs) {
          NetI2pUtilOrderedProperties *props = create_NetI2pUtilOrderedProperties_init();
          [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST withNSString:[((JavaNetInetAddress *) nil_chk(ia)) getHostAddress]];
          [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_PORT withNSString:JavaLangInteger_toStringWithInt_(port)];
          NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, props);
          jint cost = NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, [ia isKindOfClass:[JavaNetInet6Address class]]);
          myAddress = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE, props, cost);
          [self replaceAddressWithNetI2pDataRouterRouterAddress:myAddress];
        }
      }
      else if (_enableNTCP2_) {
        NetI2pRouterTransportNtcpNTCPTransport_setOutboundNTCP2Address(self);
      }
    }
    else if (_enableNTCP2_) {
      NetI2pRouterTransportNtcpNTCPTransport_setOutboundNTCP2Address(self);
    }
  }
}

- (void)setOutboundNTCP2Address {
  NetI2pRouterTransportNtcpNTCPTransport_setOutboundNTCP2Address(self);
}

- (void)restartListeningWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)addr
                                              withBoolean:(jboolean)ipv6 {
  NetI2pRouterTransportNtcpNTCPTransport_restartListeningWithNetI2pDataRouterRouterAddress_withBoolean_(self, addr, ipv6);
}

- (void)startIt {
  NetI2pRouterTransportNtcpNTCPTransport_startIt(self);
}

- (jboolean)isAlive {
  return [((NetI2pRouterTransportNtcpEventPumper *) nil_chk(_pumper_)) isAlive];
}

- (NetI2pDataRouterRouterAddress *)bindAddressWithInt:(jint)port {
  return NetI2pRouterTransportNtcpNTCPTransport_bindAddressWithInt_(self, port);
}

- (NSString *)getFixedHost {
  return NetI2pRouterTransportNtcpNTCPTransport_getFixedHost(self);
}

- (void)stopWaitAndRestart {
  NetI2pRouterTransportNtcpNTCPTransport_stopWaitAndRestart(self);
}

- (NetI2pRouterTransportNtcpReader *)getReader {
  return _reader_;
}

- (NetI2pRouterTransportNtcpWriter *)getWriter {
  return _writer_;
}

- (NSString *)getStyle {
  return NetI2pRouterTransportNtcpNTCPTransport_STYLE;
}

- (NSString *)getAltStyle {
  return _enableNTCP2_ ? NetI2pRouterTransportNtcpNTCPTransport_STYLE2 : nil;
}

- (NetI2pRouterTransportNtcpEventPumper *)getPumper {
  return _pumper_;
}

- (NetI2pRouterTransportCryptoDHSessionKeyBuilder *)getDHBuilder {
  return [((id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>) nil_chk(_dhFactory_)) getBuilder];
}

- (NetI2pRouterTransportCryptoX25519KeyFactory *)getXDHFactory {
  return _xdhFactory_;
}

- (void)returnUnusedWithNetI2pRouterTransportCryptoDHSessionKeyBuilder:(NetI2pRouterTransportCryptoDHSessionKeyBuilder *)builder {
  [((id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>) nil_chk(_dhFactory_)) returnUnusedWithNetI2pRouterTransportCryptoDHSessionKeyBuilder:builder];
}

- (void)establishingWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  [((id<JavaUtilSet>) nil_chk(_establishing_)) addWithId:con];
}

- (void)expireTimedOut {
  jint expired = 0;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(_establishing_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportNtcpNTCPConnection *con = [iter next];
    if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isClosed] || [con isEstablished]) {
      [iter remove];
    }
    else if ([con getTimeSinceCreated] > NetI2pRouterTransportNtcpNTCPTransport_ESTABLISH_TIMEOUT) {
      [iter remove];
      [con close];
      expired++;
    }
  }
  if (expired > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.outboundEstablishFailed" withLong:expired];
}

- (NetI2pDataRouterRouterAddress *)configureLocalAddress {
  return NetI2pRouterTransportNtcpNTCPTransport_configureLocalAddress(self);
}

- (NetI2pDataRouterRouterAddress *)createNTCPAddress {
  return NetI2pRouterTransportNtcpNTCPTransport_createNTCPAddress(self);
}

- (void)addNTCP2OptionsWithJavaUtilProperties:(JavaUtilProperties *)props {
  NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, props);
}

- (jboolean)isNTCP2Enabled {
  return _enableNTCP2_;
}

- (IOSByteArray *)getNTCP2StaticPubkey {
  return _ntcp2StaticPubkey_;
}

- (IOSByteArray *)getNTCP2StaticPrivkey {
  return _ntcp2StaticPrivkey_;
}

- (IOSByteArray *)getNTCP2StaticIV {
  return _ntcp2StaticIV_;
}

- (jint)getNTCPVersionWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)addr {
  return NetI2pRouterTransportNtcpNTCPTransport_getNTCPVersionWithNetI2pDataRouterRouterAddress_(self, addr);
}

- (NSString *)getConfiguredIP {
  return NetI2pRouterTransportNtcpNTCPTransport_getConfiguredIP(self);
}

- (jint)getDefaultCostWithBoolean:(jboolean)isIPv6 {
  return NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, isIPv6);
}

- (void)externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                  withByteArray:(IOSByteArray *)ip
                                                                        withInt:(jint)port {
  if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$$$@", @"Received address: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port), @" from: ", source) withJavaLangThrowable:create_JavaLangException_init()];
  if ((source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE) || source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU)) && ip != nil && ip->size_ == 16) {
    _haveIPv6Address_ = true;
  }
  if (ip != nil && !NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(self, ip)) {
    if ([_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$$$@", @"Invalid address: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port), @" from: ", source)];
    return;
  }
  if (![self isAlive]) {
    if (source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE) || source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_UPNP)) {
      @try {
        JavaNetInetAddress *ia = JavaNetInetAddress_getByAddressWithByteArray_(ip);
        [self saveLocalAddressWithJavaNetInetAddress:ia];
      }
      @catch (JavaNetUnknownHostException *uhe) {
      }
    }
    else if (source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_CONFIG)) {
      _ssuPort_ = port;
    }
    return;
  }
  if (source != JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU)) return;
  jboolean isIPv6 = ip != nil && ip->size_ == 16;
  NetI2pRouterTransportNtcpNTCPTransport_externalAddressReceivedWithByteArray_withBoolean_withInt_(self, ip, isIPv6, port);
}

- (void)externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                   withBoolean:(jboolean)ipv6 {
  if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldWarn]) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$Z$@", @"Removing address, ipv6? ", ipv6, @" from: ", source) withJavaLangThrowable:create_JavaLangException_init()];
  if (source != JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU)) return;
  NetI2pRouterTransportNtcpNTCPTransport_externalAddressReceivedWithByteArray_withBoolean_withInt_(self, nil, ipv6, 0);
}

- (void)externalAddressReceivedWithByteArray:(IOSByteArray *)ip
                                 withBoolean:(jboolean)isIPv6
                                     withInt:(jint)port {
  NetI2pRouterTransportNtcpNTCPTransport_externalAddressReceivedWithByteArray_withBoolean_withInt_(self, ip, isIPv6, port);
}

- (void)forwardPortStatusWithByteArray:(IOSByteArray *)ip
                               withInt:(jint)port
                               withInt:(jint)externalPort
                           withBoolean:(jboolean)success
                          withNSString:(NSString *)reason {
  if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
    if (success) [_log_NTCPTransport_ warnWithNSString:JreStrcat("$I$$", @"UPnP has opened the NTCP port: ", port, @" via ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, externalPort))];
    else [_log_NTCPTransport_ warnWithNSString:JreStrcat("$I$$", @"UPnP has failed to open the NTCP port: ", port, @" reason: ", reason)];
  }
}

- (jint)getRequestedPort {
  NetI2pDataRouterRouterAddress *addr = [self getCurrentAddressWithBoolean:false];
  if (addr != nil) {
    jint port = [addr getPort];
    if (port > 0) return port;
  }
  return [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT withInt:-1];
}

- (NetI2pRouterCommSystemFacade_Status *)getReachabilityStatus {
  if (![self isAlive]) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  NetI2pRouterTransportTransportUtil_IPv6Config *config = [self getIPv6Config];
  jboolean v4Disabled;
  jboolean v6Disabled;
  if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED)) {
    v4Disabled = false;
    v6Disabled = true;
  }
  else if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) {
    v4Disabled = true;
    v6Disabled = false;
  }
  else {
    v4Disabled = false;
    v6Disabled = false;
  }
  jboolean hasV4 = [self getCurrentAddressWithBoolean:false] != nil;
  jboolean hasV6 = [self getCurrentAddressWithBoolean:true] != nil;
  if (!hasV4 && !hasV6) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jboolean v4OK = hasV4 && !v4Disabled && now - _lastInboundIPv4_ < 10 * 60 * 1000;
  jboolean v6OK = hasV6 && !v6Disabled && now - _lastInboundIPv6_ < 30 * 60 * 1000;
  if (v4OK) {
    if (v6OK) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
    if (v6Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
    if (!hasV6) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN);
  }
  if (v6OK) {
    if (v4Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
    if (!hasV4) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK);
  }
  for (NetI2pRouterTransportNtcpNTCPConnection * __strong con in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values])) {
    if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isInbound]) {
      if ([con isIPv6]) {
        if (hasV6) v6OK = true;
      }
      else {
        if (hasV4) v4OK = true;
      }
      if (v4OK) {
        if (v6OK) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
        if (v6Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
        if (!hasV6) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN);
      }
      if (v6OK) {
        if (v4Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
        if (!hasV4) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK);
      }
    }
  }
  if (v4OK) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN);
  if (v6OK) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK);
  if (v4Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN);
  if (v6Disabled) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
}

- (void)stopListening {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_NTCPTransport_ warnWithNSString:@"Stopping ntcp transport"];
    [((NetI2pRouterTransportNtcpEventPumper *) nil_chk(_pumper_)) stopPumping];
    [((NetI2pRouterTransportNtcpWriter *) nil_chk(_writer_)) stopWriting];
    [((NetI2pRouterTransportNtcpReader *) nil_chk(_reader_)) stopReading];
    [((NetI2pRouterTransportNtcpNTCPSendFinisher *) nil_chk(_finisher_)) stop];
    id<JavaUtilList> cons;
    @synchronized(_conLock_) {
      cons = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_conByIdent_)) values]));
      [_conByIdent_ clear];
    }
    for (NetI2pRouterTransportNtcpNTCPConnection * __strong con in cons) {
      [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) close];
    }
    NetI2pRouterTransportNtcpNTCPConnection_releaseResources();
    [self replaceAddressWithNetI2pDataRouterRouterAddress:nil];
    [((id<JavaUtilSet>) nil_chk(_endpoints_)) clear];
    _lastInboundIPv4_ = 0;
    _lastInboundIPv6_ = 0;
  }
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                                 withInt:(jint)sortFlags {
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
}

- (void)dealloc {
  RELEASE_(_log_NTCPTransport_);
  RELEASE_(_fastBid_);
  RELEASE_(_slowBid_);
  RELEASE_(_slowCostBid_);
  RELEASE_(_nearCapacityBid_);
  RELEASE_(_nearCapacityCostBid_);
  RELEASE_(_transientFail_);
  RELEASE_(_conLock_);
  RELEASE_(_conByIdent_);
  RELEASE_(_pumper_);
  RELEASE_(_reader_);
  RELEASE_(_writer_);
  RELEASE_(_endpoints_);
  RELEASE_(_establishing_);
  RELEASE_(_replayFilter_);
  RELEASE_(_finisher_);
  RELEASE_(_dhFactory_);
  RELEASE_(_xdhFactory_);
  RELEASE_(_ntcp2StaticPubkey_);
  RELEASE_(_ntcp2StaticPrivkey_);
  RELEASE_(_ntcp2StaticIV_);
  RELEASE_(_b64Ntcp2StaticPubkey_);
  RELEASE_(_b64Ntcp2StaticIV_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCPConnection;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportBid;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpNTCPConnection;", 0x0, 17, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 19, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "Z", 0x0, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpReader;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpWriter;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpEventPumper;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoX25519KeyFactory;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 37, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, 46, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 47, 46, -1, 48, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:withNetI2pRouterTransportCryptoX25519KeyFactory:);
  methods[1].selector = @selector(inboundEstablishedWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[2].selector = @selector(outboundMessageReady);
  methods[3].selector = @selector(afterSendWithNetI2pRouterOutNetMessage:withBoolean:withBoolean:withLong:);
  methods[4].selector = @selector(bidWithNetI2pDataRouterRouterInfo:withInt:);
  methods[5].selector = @selector(getTargetAddressWithNetI2pDataRouterRouterInfo:);
  methods[6].selector = @selector(isValidWithByteArray:);
  methods[7].selector = @selector(allowConnection);
  methods[8].selector = @selector(sendCompleteWithNetI2pRouterOutNetMessage:);
  methods[9].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[10].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[11].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[12].selector = @selector(removeConWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[13].selector = @selector(countPeers);
  methods[14].selector = @selector(getPeers);
  methods[15].selector = @selector(getEstablished);
  methods[16].selector = @selector(countActivePeers);
  methods[17].selector = @selector(countActiveSendPeers);
  methods[18].selector = @selector(setLastBadSkewWithLong:);
  methods[19].selector = @selector(getClockSkews);
  methods[20].selector = @selector(isHXHIValidWithByteArray:);
  methods[21].selector = @selector(startListening);
  methods[22].selector = @selector(setOutboundNTCP2Address);
  methods[23].selector = @selector(restartListeningWithNetI2pDataRouterRouterAddress:withBoolean:);
  methods[24].selector = @selector(startIt);
  methods[25].selector = @selector(isAlive);
  methods[26].selector = @selector(bindAddressWithInt:);
  methods[27].selector = @selector(getFixedHost);
  methods[28].selector = @selector(stopWaitAndRestart);
  methods[29].selector = @selector(getReader);
  methods[30].selector = @selector(getWriter);
  methods[31].selector = @selector(getStyle);
  methods[32].selector = @selector(getAltStyle);
  methods[33].selector = @selector(getPumper);
  methods[34].selector = @selector(getDHBuilder);
  methods[35].selector = @selector(getXDHFactory);
  methods[36].selector = @selector(returnUnusedWithNetI2pRouterTransportCryptoDHSessionKeyBuilder:);
  methods[37].selector = @selector(establishingWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[38].selector = @selector(expireTimedOut);
  methods[39].selector = @selector(configureLocalAddress);
  methods[40].selector = @selector(createNTCPAddress);
  methods[41].selector = @selector(addNTCP2OptionsWithJavaUtilProperties:);
  methods[42].selector = @selector(isNTCP2Enabled);
  methods[43].selector = @selector(getNTCP2StaticPubkey);
  methods[44].selector = @selector(getNTCP2StaticPrivkey);
  methods[45].selector = @selector(getNTCP2StaticIV);
  methods[46].selector = @selector(getNTCPVersionWithNetI2pDataRouterRouterAddress:);
  methods[47].selector = @selector(getConfiguredIP);
  methods[48].selector = @selector(getDefaultCostWithBoolean:);
  methods[49].selector = @selector(externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:withByteArray:withInt:);
  methods[50].selector = @selector(externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:withBoolean:);
  methods[51].selector = @selector(externalAddressReceivedWithByteArray:withBoolean:withInt:);
  methods[52].selector = @selector(forwardPortStatusWithByteArray:withInt:withInt:withBoolean:withNSString:);
  methods[53].selector = @selector(getRequestedPort);
  methods[54].selector = @selector(getReachabilityStatus);
  methods[55].selector = @selector(stopListening);
  methods[56].selector = @selector(renderStatusHTMLWithJavaIoWriter:withInt:);
  methods[57].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_NTCPTransport_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, 49, -1, -1, -1 },
    { "_fastBid_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_slowBid_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_slowCostBid_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nearCapacityBid_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nearCapacityCostBid_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transientFail_", "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_conLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_conByIdent_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "_pumper_", "LNetI2pRouterTransportNtcpEventPumper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_reader_", "LNetI2pRouterTransportNtcpReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_writer_", "LNetI2pRouterTransportNtcpWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_ssuPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_endpoints_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 51, -1 },
    { "_establishing_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 52, -1 },
    { "_replayFilter_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_haveIPv6Address_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastInboundIPv4_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastInboundIPv6_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_I2NP_NTCP_HOSTNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "PROP_I2NP_NTCP_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "PROP_I2NP_NTCP_AUTO_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "PROP_I2NP_NTCP_AUTO_IP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "PROP_ADVANCED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "DEFAULT_COST", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_DEFAULT_COST, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_OUTBOUND_COST", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_OUTBOUND_COST, 0x1a, -1, -1, -1, -1 },
    { "PROP_BIND_INTERFACE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "_finisher_", "LNetI2pRouterTransportNtcpNTCPSendFinisher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dhFactory_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_xdhFactory_", "LNetI2pRouterTransportCryptoX25519KeyFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastBadSkew_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RATES", "[J", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "MIN_SIGTYPE_VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
    { "STYLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 61, -1, -1 },
    { "STYLE2", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "NTCP2_INT_VERSION", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION, 0x18, -1, -1, -1, -1 },
    { "NTCP2_VERSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 63, -1, -1 },
    { "NTCP2_VERSION_ALT", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 64, -1, -1 },
    { "PROP_NTCP2_SP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "PROP_NTCP2_IV", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "NTCP2_IV_LEN", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_IV_LEN, 0x1a, -1, -1, -1, -1 },
    { "NTCP2_KEY_LEN", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_KEY_LEN, 0x1a, -1, -1, -1, -1 },
    { "MIN_DOWNTIME_TO_REKEY", "J", .constantValue.asLong = NetI2pRouterTransportNtcpNTCPTransport_MIN_DOWNTIME_TO_REKEY, 0x1a, -1, -1, -1, -1 },
    { "_enableNTCP2_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ntcp2StaticPubkey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ntcp2StaticPrivkey_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ntcp2StaticIV_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_b64Ntcp2StaticPubkey_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_b64Ntcp2StaticIV_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MIN_CONCURRENT_READERS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_READERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_CONCURRENT_WRITERS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_WRITERS, 0x1a, -1, -1, -1, -1 },
    { "MAX_CONCURRENT_READERS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_READERS, 0x1a, -1, -1, -1, -1 },
    { "MAX_CONCURRENT_WRITERS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_WRITERS, 0x1a, -1, -1, -1, -1 },
    { "ESTABLISH_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCPTransport_ESTABLISH_TIMEOUT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;LNetI2pRouterTransportCryptoX25519KeyFactory;", "inboundEstablished", "LNetI2pRouterTransportNtcpNTCPConnection;", "afterSend", "LNetI2pRouterOutNetMessage;ZZJ", "bid", "LNetI2pDataRouterRouterInfo;I", "getTargetAddress", "LNetI2pDataRouterRouterInfo;", "isValid", "[B", "sendComplete", "LNetI2pRouterOutNetMessage;", "isEstablished", "LNetI2pDataHash;", "isBacklogged", "mayDisconnect", "removeCon", "()Ljava/util/Collection<Lnet/i2p/router/transport/ntcp/NTCPConnection;>;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "setLastBadSkew", "J", "()Ljava/util/Vector<Ljava/lang/Long;>;", "isHXHIValid", "restartListening", "LNetI2pDataRouterRouterAddress;Z", "bindAddress", "I", "returnUnused", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", "establishing", "addNTCP2Options", "LJavaUtilProperties;", "getNTCPVersion", "LNetI2pDataRouterRouterAddress;", "getDefaultCost", "Z", "externalAddressReceived", "LNetI2pRouterTransportTransport_AddressSource;[BI", "externalAddressRemoved", "LNetI2pRouterTransportTransport_AddressSource;Z", "[BZI", "forwardPortStatus", "[BIIZLNSString;", "renderStatusHTML", "LJavaIoWriter;I", "LJavaIoIOException;", "LJavaIoWriter;LNSString;I", (void *)&NetI2pRouterTransportNtcpNTCPTransport__Annotations$0, "_log", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/data/Hash;Lnet/i2p/router/transport/ntcp/NTCPConnection;>;", "Ljava/util/Set<Ljava/net/InetSocketAddress;>;", "Ljava/util/Set<Lnet/i2p/router/transport/ntcp/NTCPConnection;>;", &NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_HOSTNAME, &NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT, &NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_PORT, &NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP, &NetI2pRouterTransportNtcpNTCPTransport_PROP_ADVANCED, &NetI2pRouterTransportNtcpNTCPTransport_PROP_BIND_INTERFACE, &NetI2pRouterTransportNtcpNTCPTransport_RATES, &NetI2pRouterTransportNtcpNTCPTransport_MIN_SIGTYPE_VERSION, &NetI2pRouterTransportNtcpNTCPTransport_STYLE, &NetI2pRouterTransportNtcpNTCPTransport_STYLE2, &NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION, &NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION_ALT, &NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP, &NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV, "LNetI2pRouterTransportNtcpNTCPTransport_SharedBid;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPTransport = { "NTCPTransport", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x1, 58, 54, -1, 67, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPTransport;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpNTCPTransport class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpNTCPTransport_RATES, [IOSLongArray newArrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]);
    JreStrongAssign(&NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION, JavaLangInteger_toStringWithInt_(NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION));
    JreStrongAssign(&NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION_ALT, JreStrcat("$C", NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION, ','));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpNTCPTransport)
  }
}

@end

void NetI2pRouterTransportNtcpNTCPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  NetI2pRouterTransportTransportImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_dhFactory_, dh);
  JreStrongAssign(&self->_xdhFactory_, xdh);
  JreStrongAssign(&self->_log_NTCPTransport_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"ntcp.sendTime" withNSString:@"Total message lifetime when sent completely" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.sendQueueSize" withNSString:@"How many messages were ahead of the current one on the connection's queue when it was first added" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.receiveTime" withNSString:@"How long it takes to receive an inbound message" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.receiveSize" withNSString:@"How large the received message was" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.sendBacklogTime" withNSString:@"How long the head of the send queue has been waiting when we fail to add a new one to the queue (period is the number of messages queued)" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.failsafeWrites" withNSString:@"How many times do we need to proactively add in an extra nio write to a peer at any given failsafe pass?" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.failsafeCloses" withNSString:@"How many times do we need to proactively close an idle connection to a peer at any given failsafe pass?" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.failsafeInvalid" withNSString:@"How many times do we close a connection to a peer to work around a JVM bug?" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.failsafeThrottle" withNSString:@"Delay event pumper" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.accept" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.attemptBanlistedPeer" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.attemptUnreachablePeer" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.closeOnBacklog" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.connectFailedIOE" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.connectFailedTimeout" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.connectFailedTimeoutIOE" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.connectFailedUnresolved" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.connectSuccessful" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptDecryptedI2NP" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptI2NPCRC" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptI2NPIME" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptI2NPIOE" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptMetaCRC" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptSkew" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.corruptTooLargeI2NP" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.dontSendOnBacklog" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.inboundEstablished" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.inboundEstablishedDuplicate" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.inboundIPv4Conn" withNSString:@"Inbound IPv4 NTCP Connection" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.inboundIPv6Conn" withNSString:@"Inbound IPv6 NTCP Connection" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidDH" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidHXY" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidHXxorBIH" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidInboundDFE" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidInboundIOE" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidInboundSignature" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidInboundSize" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidInboundSkew" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidSignature" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.multipleCloseOnRemove" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.outboundEstablishFailed" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.outboundFailedIOEImmediate" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.invalidOutboundSkew" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.noBidTooLargeI2NP" withNSString:@"send size" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.queuedRecv" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.read" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.readError" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.receiveCorruptEstablishment" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.receiveMeta" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.registerConnect" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.replayHXxorBIH" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.throttledReadComplete" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.throttledWriteComplete" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.wantsQueuedWrite" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"ntcp.writeError" withNSString:@"" withNSString:@"ntcp" withLongArray:NetI2pRouterTransportNtcpNTCPTransport_RATES];
  JreStrongAssignAndConsume(&self->_endpoints_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_establishing_, new_NetI2pUtilConcurrentHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_conLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_conByIdent_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_replayFilter_, new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(ctx, 10 * 60 * 1000, 8, @"NTCP-Hx^HI"));
  JreStrongAssignAndConsume(&self->_finisher_, new_NetI2pRouterTransportNtcpNTCPSendFinisher_initWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCPTransport_(ctx, self));
  JreStrongAssignAndConsume(&self->_pumper_, new_NetI2pRouterTransportNtcpEventPumper_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_(ctx, self));
  JreStrongAssignAndConsume(&self->_reader_, new_NetI2pRouterTransportNtcpReader_initWithNetI2pRouterRouterContext_(ctx));
  JreStrongAssignAndConsume(&self->_writer_, new_NetI2pRouterTransportNtcpWriter_initWithNetI2pRouterRouterContext_(ctx));
  JreStrongAssignAndConsume(&self->_fastBid_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, 25));
  JreStrongAssignAndConsume(&self->_slowBid_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, 70));
  JreStrongAssignAndConsume(&self->_slowCostBid_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, 85));
  JreStrongAssignAndConsume(&self->_nearCapacityBid_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, 90));
  JreStrongAssignAndConsume(&self->_nearCapacityCostBid_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, 105));
  JreStrongAssignAndConsume(&self->_transientFail_, new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, NetI2pRouterTransportTransportBid_TRANSIENT_FAIL));
  self->_enableNTCP2_ = (xdh != nil);
  if (self->_enableNTCP2_) {
    jboolean shouldSave = false;
    IOSByteArray *priv = nil;
    IOSByteArray *iv = nil;
    NSString *b64IV = nil;
    NSString *s = nil;
    NetI2pRouterUtilEventLog *el = [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) eventLog];
    jlong since = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - NetI2pRouterTransportNtcpNTCPTransport_MIN_DOWNTIME_TO_REKEY;
    jboolean shouldRekey = [((id<JavaUtilSortedMap>) nil_chk([((NetI2pRouterUtilEventLog *) nil_chk(el)) getEventsWithNSString:NetI2pRouterUtilEventLog_STOPPED withLong:since])) isEmpty] && [((id<JavaUtilSortedMap>) nil_chk([el getEventsWithNSString:NetI2pRouterUtilEventLog_CRASHED withLong:since])) isEmpty] && [((id<JavaUtilSortedMap>) nil_chk([el getEventsWithNSString:NetI2pRouterUtilEventLog_STARTED withLong:since])) size] <= 1;
    if (!shouldRekey) {
      s = [ctx getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP];
      if (s != nil) {
        priv = NetI2pDataBase64_decodeWithNSString_(s);
      }
    }
    if (priv == nil || priv->size_ != NetI2pRouterTransportNtcpNTCPTransport_NTCP2_KEY_LEN) {
      JavaSecurityKeyPair *keys = [((NetI2pRouterTransportCryptoX25519KeyFactory *) nil_chk(xdh)) getKeys];
      JreStrongAssign(&self->_ntcp2StaticPrivkey_, [((id<JavaSecurityPrivateKey>) nil_chk([((JavaSecurityKeyPair *) nil_chk(keys)) getPrivate])) getEncoded]);
      JreStrongAssign(&self->_ntcp2StaticPubkey_, [((id<JavaSecurityPublicKey>) nil_chk([keys getPublic])) getEncoded]);
      shouldSave = true;
    }
    else {
      JreStrongAssign(&self->_ntcp2StaticPrivkey_, priv);
      JreStrongAssign(&self->_ntcp2StaticPubkey_, [((NetI2pRouterTransportCryptoX25519PublicKey *) nil_chk([(create_NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(priv)) toPublic])) getEncoded]);
    }
    if (!shouldSave) {
      s = [ctx getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV];
      if (s != nil) {
        iv = NetI2pDataBase64_decodeWithNSString_(s);
        b64IV = s;
      }
    }
    if (iv == nil || iv->size_ != NetI2pRouterTransportNtcpNTCPTransport_NTCP2_IV_LEN) {
      iv = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpNTCPTransport_NTCP2_IV_LEN];
      do {
        [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextBytesWithByteArray:iv];
      }
      while (NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(iv, 0, JreLoadStatic(NetI2pRouterTransportNtcpOutboundNTCP2State, ZEROKEY), 0, NetI2pRouterTransportNtcpNTCPTransport_NTCP2_IV_LEN));
      shouldSave = true;
    }
    if (shouldSave) {
      id<JavaUtilMap> changes = create_JavaUtilHashMap_initWithInt_(2);
      NSString *b64Priv = NetI2pDataBase64_encodeWithByteArray_(self->_ntcp2StaticPrivkey_);
      b64IV = NetI2pDataBase64_encodeWithByteArray_(iv);
      [changes putWithId:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_SP withId:b64Priv];
      [changes putWithId:NetI2pRouterTransportNtcpNTCPTransport_PROP_NTCP2_IV withId:b64IV];
      [((NetI2pRouterRouter *) nil_chk([ctx router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
    }
    JreStrongAssign(&self->_ntcp2StaticIV_, iv);
    JreStrongAssign(&self->_b64Ntcp2StaticPubkey_, NetI2pDataBase64_encodeWithByteArray_(self->_ntcp2StaticPubkey_));
    JreStrongAssign(&self->_b64Ntcp2StaticIV_, b64IV);
  }
  else {
    JreStrongAssign(&self->_ntcp2StaticPubkey_, nil);
    JreStrongAssign(&self->_ntcp2StaticPrivkey_, nil);
    JreStrongAssign(&self->_ntcp2StaticIV_, nil);
    JreStrongAssign(&self->_b64Ntcp2StaticPubkey_, nil);
    JreStrongAssign(&self->_b64Ntcp2StaticIV_, nil);
  }
}

NetI2pRouterTransportNtcpNTCPTransport *new_NetI2pRouterTransportNtcpNTCPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPTransport, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_, ctx, dh, xdh)
}

NetI2pRouterTransportNtcpNTCPTransport *create_NetI2pRouterTransportNtcpNTCPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh, NetI2pRouterTransportCryptoX25519KeyFactory *xdh) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPTransport, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_, ctx, dh, xdh)
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_getTargetAddressWithNetI2pDataRouterRouterInfo_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterInfo *target) {
  id<JavaUtilList> addrs = [self getTargetAddressesWithNetI2pDataRouterRouterInfo:target];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(addrs)) size]; i++) {
    NetI2pDataRouterRouterAddress *addr = [addrs getWithInt:i];
    IOSByteArray *ip = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getIP];
    if (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_([addr getPort]) || ip == nil) {
      continue;
    }
    if (!NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(self, ip)) {
      if (![self allowLocal]) {
        continue;
      }
    }
    return addr;
  }
  return nil;
}

jboolean NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(NetI2pRouterTransportNtcpNTCPTransport *self, IOSByteArray *addr) {
  if (addr == nil) return false;
  if ([self isPubliclyRoutableWithByteArray:addr] && (addr->size_ != 16 || self->_haveIPv6Address_)) return true;
  return false;
}

void NetI2pRouterTransportNtcpNTCPTransport_setOutboundNTCP2Address(NetI2pRouterTransportNtcpNTCPTransport *self) {
  NetI2pUtilOrderedProperties *props = create_NetI2pUtilOrderedProperties_init();
  NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, props);
  NetI2pDataRouterRouterAddress *myAddress = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE2, props, NetI2pRouterTransportNtcpNTCPTransport_NTCP2_OUTBOUND_COST);
  [self replaceAddressWithNetI2pDataRouterRouterAddress:myAddress];
}

void NetI2pRouterTransportNtcpNTCPTransport_restartListeningWithNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterAddress *addr, jboolean ipv6) {
  @synchronized(self) {
    if (addr != nil) {
      NetI2pDataRouterRouterAddress *myAddress = NetI2pRouterTransportNtcpNTCPTransport_bindAddressWithInt_(self, [addr getPort]);
      if (myAddress != nil) [self replaceAddressWithNetI2pDataRouterRouterAddress:myAddress];
      else [self replaceAddressWithNetI2pDataRouterRouterAddress:addr];
    }
    else {
      [self removeAddressWithBoolean:ipv6];
      if (ipv6) self->_lastInboundIPv6_ = 0;
      else self->_lastInboundIPv4_ = 0;
    }
  }
}

void NetI2pRouterTransportNtcpNTCPTransport_startIt(NetI2pRouterTransportNtcpNTCPTransport *self) {
  [((NetI2pRouterTransportNtcpNTCPSendFinisher *) nil_chk(self->_finisher_)) start];
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk(self->_pumper_)) startPumping];
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint nr;
  jint nw;
  if (maxMemory < 32 * 1024 * 1024) {
    nr = nw = 1;
  }
  else if (maxMemory < 64 * 1024 * 1024) {
    nr = nw = 2;
  }
  else {
    nr = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_READERS, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_READERS, [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) bandwidthLimiter])) getInboundKBytesPerSecond] / 20));
    nw = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportNtcpNTCPTransport_MIN_CONCURRENT_WRITERS, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportNtcpNTCPTransport_MAX_CONCURRENT_WRITERS, [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([self->_context_ bandwidthLimiter])) getOutboundKBytesPerSecond] / 20));
  }
  [((NetI2pRouterTransportNtcpReader *) nil_chk(self->_reader_)) startReadingWithInt:nr];
  [((NetI2pRouterTransportNtcpWriter *) nil_chk(self->_writer_)) startWritingWithInt:nw];
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_bindAddressWithInt_(NetI2pRouterTransportNtcpNTCPTransport *self, jint port) {
  NetI2pDataRouterRouterAddress *myAddress = nil;
  if (port > 0) {
    JavaNetInetAddress *bindToAddr = nil;
    NSString *bindTo = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_BIND_INTERFACE];
    if (bindTo == nil) {
      bindTo = NetI2pRouterTransportNtcpNTCPTransport_getFixedHost(self);
    }
    if (bindTo != nil) {
      @try {
        bindToAddr = JavaNetInetAddress_getByNameWithNSString_(bindTo);
      }
      @catch (JavaNetUnknownHostException *uhe) {
        [((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) errorWithNSString:JreStrcat("$$C", @"Invalid NTCP bind interface specified [", bindTo, ']') withJavaLangThrowable:uhe];
      }
    }
    @try {
      JavaNetInetSocketAddress *addr;
      if (bindToAddr == nil) {
        addr = create_JavaNetInetSocketAddress_initWithInt_(port);
      }
      else {
        addr = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(bindToAddr, port);
        if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$@", @"Binding only to ", bindToAddr)];
        NetI2pUtilOrderedProperties *props = create_NetI2pUtilOrderedProperties_init();
        [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST withNSString:bindTo];
        [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_PORT withNSString:JavaLangInteger_toStringWithInt_(port)];
        NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, props);
        jint cost = NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, false);
        myAddress = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE, props, cost);
      }
      if (![((id<JavaUtilSet>) nil_chk(self->_endpoints_)) isEmpty]) {
        if ([self->_endpoints_ containsWithId:addr] || (bindToAddr != nil && [self->_endpoints_ containsWithId:create_JavaNetInetSocketAddress_initWithInt_(port)])) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$@", @"Already listening on ", addr)];
          return nil;
        }
        NetI2pRouterTransportNtcpNTCPTransport_stopWaitAndRestart(self);
      }
      if (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port)) [((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) errorWithNSString:JreStrcat("$I$", @"Specified NTCP port is ", port, @", ports lower than 1024 not recommended")];
      JavaNioChannelsServerSocketChannel *chan = JavaNioChannelsServerSocketChannel_open();
      [((JavaNioChannelsServerSocketChannel *) nil_chk(chan)) configureBlockingWithBoolean:false];
      [((JavaNetServerSocket *) nil_chk([chan socket])) bindWithJavaNetSocketAddress:addr];
      [self->_endpoints_ addWithId:addr];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$@", @"Listening on ", addr)];
      [((NetI2pRouterTransportNtcpEventPumper *) nil_chk(self->_pumper_)) register__WithJavaNioChannelsServerSocketChannel:chan];
    }
    @catch (JavaIoIOException *ioe) {
      [((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) errorWithNSString:@"Error listening" withJavaLangThrowable:ioe];
      myAddress = nil;
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:@"Outbound NTCP connections only - no listener configured"];
  }
  return myAddress;
}

NSString *NetI2pRouterTransportNtcpNTCPTransport_getFixedHost(NetI2pRouterTransportNtcpNTCPTransport *self) {
  jboolean isFixed = [((NSString *) nil_chk([((NSString *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP withNSString:@"true"])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) isEqual:@"false"];
  NSString *fixedHost = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_HOSTNAME];
  if (isFixed && fixedHost != nil) {
    @try {
      NSString *testAddr = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_(fixedHost))) getHostAddress];
      if ([((id<JavaUtilSortedSet>) nil_chk(NetI2pUtilAddresses_getAddresses())) containsWithId:testAddr]) return testAddr;
    }
    @catch (JavaNetUnknownHostException *uhe) {
    }
  }
  return nil;
}

void NetI2pRouterTransportNtcpNTCPTransport_stopWaitAndRestart(NetI2pRouterTransportNtcpNTCPTransport *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:@"Halting NTCP to change address"];
  [self stopListening];
  while ([self isAlive]) {
    @try {
      JavaLangThread_sleepWithLong_(5 * 1000);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:@"Restarting NTCP transport listening"];
  NetI2pRouterTransportNtcpNTCPTransport_startIt(self);
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_configureLocalAddress(NetI2pRouterTransportNtcpNTCPTransport *self) {
  NetI2pDataRouterRouterAddress *addr = NetI2pRouterTransportNtcpNTCPTransport_createNTCPAddress(self);
  if (addr != nil) {
    if ([addr getPort] <= 0) {
      addr = nil;
      if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_NTCPTransport_ errorWithNSString:@"NTCP address is outbound only, since the NTCP configuration is invalid"];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$@", @"NTCP address configured: ", addr)];
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:@"NTCP address is outbound only"];
  }
  return addr;
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportNtcpNTCPTransport_createNTCPAddress(NetI2pRouterTransportNtcpNTCPTransport *self) {
  jint p = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT withInt:-1];
  if (p <= 0 || p >= 64 * 1024) return nil;
  NSString *name = NetI2pRouterTransportNtcpNTCPTransport_getConfiguredIP(self);
  if (name == nil) return nil;
  NetI2pUtilOrderedProperties *props = create_NetI2pUtilOrderedProperties_init();
  [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST withNSString:name];
  [props setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_PORT withNSString:JavaLangInteger_toStringWithInt_(p)];
  NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, props);
  jint cost = NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, false);
  NetI2pDataRouterRouterAddress *addr = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE, props, cost);
  return addr;
}

void NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(NetI2pRouterTransportNtcpNTCPTransport *self, JavaUtilProperties *props) {
  if (!self->_enableNTCP2_) return;
  if ([((JavaUtilProperties *) nil_chk(props)) containsKeyWithId:@"host"]) [props setPropertyWithNSString:@"i" withNSString:self->_b64Ntcp2StaticIV_];
  [props setPropertyWithNSString:@"s" withNSString:self->_b64Ntcp2StaticPubkey_];
  [props setPropertyWithNSString:@"v" withNSString:NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION];
}

jint NetI2pRouterTransportNtcpNTCPTransport_getNTCPVersionWithNetI2pDataRouterRouterAddress_(NetI2pRouterTransportNtcpNTCPTransport *self, NetI2pDataRouterRouterAddress *addr) {
  jint rv;
  NSString *style = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getTransportStyle];
  if ([((NSString *) nil_chk(style)) isEqual:NetI2pRouterTransportNtcpNTCPTransport_STYLE]) {
    if (!self->_enableNTCP2_) return 1;
    rv = 1;
  }
  else if ([style isEqual:NetI2pRouterTransportNtcpNTCPTransport_STYLE2]) {
    if (!self->_enableNTCP2_) return 0;
    rv = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION;
  }
  else {
    return 0;
  }
  NSString *v = [addr getOptionWithNSString:@"v"];
  if (v == nil || [addr getOptionWithNSString:@"i"] == nil || [addr getOptionWithNSString:@"s"] == nil || (![v isEqual:NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION] && ![v java_hasPrefix:NetI2pRouterTransportNtcpNTCPTransport_NTCP2_VERSION_ALT])) {
    return (rv == 1) ? 1 : 0;
  }
  return NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION;
}

NSString *NetI2pRouterTransportNtcpNTCPTransport_getConfiguredIP(NetI2pRouterTransportNtcpNTCPTransport *self) {
  NSString *name = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_HOSTNAME];
  if ((name == nil) || ([((NSString *) nil_chk([((NSString *) nil_chk(name)) java_trim])) java_length] <= 0) || ([@"null" isEqual:name])) return nil;
  IOSObjectArray *hosts = NetI2pDataDataHelper_splitWithNSString_withNSString_(name, @"[,; \x0d\n\t]");
  id<JavaUtilList> ipstrings = create_JavaUtilArrayList_initWithInt_(2);
  jboolean v4 = false;
  jboolean v6 = false;
  NetI2pRouterTransportTransportUtil_IPv6Config *cfg = [self getIPv6Config];
  if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED)) v6 = true;
  else if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) v4 = true;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(hosts))->size_; i++) {
    NSString *h = IOSObjectArray_Get(hosts, i);
    if ([((NSString *) nil_chk(h)) java_length] <= 0) continue;
    if (NetI2pUtilAddresses_isIPv4AddressWithNSString_(h)) {
      if (v4) continue;
      v4 = true;
      [ipstrings addWithId:h];
    }
    else if (NetI2pUtilAddresses_isIPv6AddressWithNSString_(h)) {
      if (v6) continue;
      v6 = true;
      [ipstrings addWithId:h];
    }
    else {
      jint valid = 0;
      id<JavaUtilList> ips = NetI2pUtilAddresses_getIPsWithNSString_(h);
      if (ips != nil) {
        for (IOSByteArray * __strong ip in ips) {
          if (!NetI2pRouterTransportNtcpNTCPTransport_isValidWithByteArray_(self, ip)) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldWarn]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$$$$", @"skipping invalid ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
            continue;
          }
          if ((v4 && ((IOSByteArray *) nil_chk(ip))->size_ == 4) || (v6 && ((IOSByteArray *) nil_chk(ip))->size_ == 16)) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldWarn]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$$$$", @"skipping additional ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
            continue;
          }
          if (((IOSByteArray *) nil_chk(ip))->size_ == 4) v4 = true;
          else if (ip->size_ == 16) v6 = true;
          valid++;
          if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldDebug]) [self->_log_NTCPTransport_ debugWithNSString:JreStrcat("$$$$", @"adding ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
          [ipstrings addWithId:NetI2pUtilAddresses_toStringWithByteArray_(ip)];
        }
      }
      if (valid == 0) [((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) errorWithNSString:JreStrcat("$$", @"No valid IPs for configured hostname ", h)];
      continue;
    }
  }
  if ([ipstrings isEmpty]) {
    [((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) errorWithNSString:JreStrcat("$$", @"No valid IPs for configuration: ", name)];
    return nil;
  }
  NSString *ip = nil;
  for (NSString * __strong ips in ipstrings) {
    if ([((NSString *) nil_chk(ips)) java_contains:@"."]) {
      ip = ips;
      break;
    }
  }
  if (ip == nil) ip = [ipstrings getWithInt:0];
  return ip;
}

jint NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(NetI2pRouterTransportNtcpNTCPTransport *self, jboolean isIPv6) {
  jint rv = NetI2pRouterTransportNtcpNTCPTransport_DEFAULT_COST;
  if (isIPv6) {
    NetI2pRouterTransportTransportUtil_IPv6Config *config = [self getIPv6Config];
    if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED)) rv--;
    else if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_NOT_PREFERRED)) rv++;
  }
  return rv;
}

void NetI2pRouterTransportNtcpNTCPTransport_externalAddressReceivedWithByteArray_withBoolean_withInt_(NetI2pRouterTransportNtcpNTCPTransport *self, IOSByteArray *ip, jboolean isIPv6, jint port) {
  @synchronized(self) {
    NetI2pDataRouterRouterAddress *oldAddr = [self getCurrentAddressWithBoolean:isIPv6];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_NTCPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$@", @"Changing NTCP Address? was ", oldAddr)];
    NetI2pUtilOrderedProperties *newProps = create_NetI2pUtilOrderedProperties_init();
    jint cost;
    if (oldAddr == nil) {
      cost = NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, isIPv6);
    }
    else {
      cost = [oldAddr getCost];
      [newProps putAllWithJavaUtilMap:[oldAddr getOptionsMap]];
    }
    NetI2pDataRouterRouterAddress *newAddr = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE, newProps, cost);
    jboolean changed = false;
    NSString *oport = [newProps getPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_PORT];
    NSString *nport = nil;
    NSString *cport = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_PORT];
    if (cport != nil && [cport java_length] > 0) {
      nport = cport;
    }
    else if ([self->_context_ getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_PORT]) {
      if (port > 0) nport = JavaLangInteger_toStringWithInt_(port);
    }
    if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$$$$$$", @"old port: ", oport, @" config: ", cport, @" new: ", nport)];
    if (oport == nil && nport != nil && [nport java_length] > 0) {
      [newProps setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_PORT withNSString:nport];
      changed = true;
    }
    NSString *ohost = [newProps getPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST];
    NSString *enabled = [((NSString *) nil_chk([self->_context_ getPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_IP withNSString:@"true"])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    NSString *name = NetI2pRouterTransportNtcpNTCPTransport_getConfiguredIP(self);
    if (name != nil && [name java_length] > 0) enabled = @"false";
    jboolean ssuOK = ip != nil;
    if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$$$$$$$Z", @"old: ", ohost, @" config: ", name, @" auto: ", enabled, @" ssuOK? ", ssuOK)];
    if ([((NSString *) nil_chk(enabled)) isEqual:@"always"] || (JavaLangBoolean_parseBooleanWithNSString_(enabled) && ssuOK)) {
      if (!ssuOK) {
        if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:@"null address with always config" withJavaLangThrowable:create_JavaLangException_init()];
        return;
      }
      NSString *nhost = NetI2pUtilAddresses_toStringWithByteArray_(ip);
      if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$$$$$$", @"old: ", ohost, @" config: ", name, @" new: ", nhost)];
      if (nhost == nil || [nhost java_length] <= 0) return;
      if (ohost == nil || ![ohost java_equalsIgnoreCase:nhost]) {
        [newProps setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST withNSString:nhost];
        changed = true;
      }
    }
    else if ([enabled isEqual:@"false"] && name != nil && [name java_length] > 0 && ![name isEqual:ohost]) {
      if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$$$$$$", @"old host: ", ohost, @" config: ", name, @" new: ", name)];
      [newProps setPropertyWithNSString:NetI2pDataRouterRouterAddress_PROP_HOST withNSString:name];
      changed = true;
    }
    else if (ohost == nil || [ohost java_length] <= 0) {
      return;
    }
    else if (JavaLangBoolean_parseBooleanWithNSString_(enabled) && !ssuOK) {
      if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_NTCPTransport_ infoWithNSString:JreStrcat("$$$$$", @"old host: ", ohost, @" config: ", name, @" new: null")];
      if (self->_enableNTCP2_) {
        [newProps clear];
        newAddr = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportNtcpNTCPTransport_STYLE2, newProps, NetI2pRouterTransportNtcpNTCPTransport_NTCP2_OUTBOUND_COST);
      }
      else {
        newAddr = nil;
      }
      changed = true;
    }
    if (!changed) {
      if (oldAddr != nil) {
        jint oldCost = [oldAddr getCost];
        jint newCost = NetI2pRouterTransportNtcpNTCPTransport_getDefaultCostWithBoolean_(self, ohost != nil && [ohost java_contains:@":"]);
        if (![self haveCapacity]) newCost += NetI2pRouterTransportTransportImpl_CONGESTION_COST_ADJUSTMENT;
        if (newCost != oldCost) {
          [((NetI2pDataRouterRouterAddress *) nil_chk(newAddr)) setCostWithInt:newCost];
          if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$I$I", @"Changing NTCP cost from ", oldCost, @" to ", newCost)];
        }
        else {
          [self->_log_NTCPTransport_ infoWithNSString:@"No change to NTCP Address"];
          return;
        }
      }
      else {
        [self->_log_NTCPTransport_ infoWithNSString:@"No change to NTCP Address"];
        return;
      }
    }
    NetI2pRouterTransportNtcpNTCPTransport_addNTCP2OptionsWithJavaUtilProperties_(self, newProps);
    NetI2pRouterTransportNtcpNTCPTransport_restartListeningWithNetI2pDataRouterRouterAddress_withBoolean_(self, newAddr, isIPv6);
    if ([self->_log_NTCPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_NTCPTransport_ warnWithNSString:JreStrcat("$Z$@", @"Updating NTCP Address (ipv6? ", isIPv6, @") with ", newAddr)];
    return;
  }
}

IOSObjectArray *NetI2pRouterTransportNtcpNTCPTransport__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPTransport)

@implementation NetI2pRouterTransportNtcpNTCPTransport_SharedBid

- (instancetype)initWithNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)outer$
                                                       withInt:(jint)ms {
  NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(self, outer$, ms);
  return self;
}

- (id<NetI2pRouterTransportTransport>)getTransport {
  return this$0_;
}

- (NSString *)description {
  return JreStrcat("$I", @"NTCP bid @ ", [self getLatencyMs]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransport;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpNTCPTransport:withInt:);
  methods[1].selector = @selector(getTransport);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpNTCPTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "LNetI2pRouterTransportNtcpNTCPTransport;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCPTransport_SharedBid = { "SharedBid", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 3, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCPTransport_SharedBid;
}

@end

void NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport_SharedBid *self, NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterTransportTransportBid_init(self);
  [self setLatencyMsWithInt:ms];
}

NetI2pRouterTransportNtcpNTCPTransport_SharedBid *new_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCPTransport_SharedBid, initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_, outer$, ms)
}

NetI2pRouterTransportNtcpNTCPTransport_SharedBid *create_NetI2pRouterTransportNtcpNTCPTransport_SharedBid_initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_(NetI2pRouterTransportNtcpNTCPTransport *outer$, jint ms) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCPTransport_SharedBid, initWithNetI2pRouterTransportNtcpNTCPTransport_withInt_, outer$, ms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCPTransport_SharedBid)
