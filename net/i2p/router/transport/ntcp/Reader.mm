//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/Reader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/nio/ByteBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/ntcp/EstablishState.h"
#include "net/i2p/router/transport/ntcp/EventPumper.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/Reader.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportNtcpReader () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  id<JavaUtilSet> _pendingConnections_;
  id<JavaUtilSet> _liveReads_;
  id<JavaUtilSet> _readAfterLive_;
  id<JavaUtilList> _runners_;
}

- (void)processReadWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _pendingConnections_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _liveReads_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _readAfterLive_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpReader, _runners_, id<JavaUtilList>)

__attribute__((unused)) static void NetI2pRouterTransportNtcpReader_processReadWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpReader *self, NetI2pRouterTransportNtcpNTCPConnection *con);

@interface NetI2pRouterTransportNtcpReader_Runner : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportNtcpReader *this$0_;
  volatile_jboolean _stop_;
}

- (instancetype)initWithNetI2pRouterTransportNtcpReader:(NetI2pRouterTransportNtcpReader *)outer$;

- (void)stop;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportNtcpReader_Runner)

__attribute__((unused)) static void NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader_Runner *self, NetI2pRouterTransportNtcpReader *outer$);

__attribute__((unused)) static NetI2pRouterTransportNtcpReader_Runner *new_NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportNtcpReader_Runner *create_NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpReader_Runner)

@implementation NetI2pRouterTransportNtcpReader

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTransportNtcpReader_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)startReadingWithInt:(jint)numReaders {
  @synchronized(self) {
    for (jint i = 1; i <= numReaders; i++) {
      NetI2pRouterTransportNtcpReader_Runner *r = create_NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(self);
      NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(r, JreStrcat("$ICI", @"NTCP reader ", i, '/', numReaders), true);
      [((id<JavaUtilList>) nil_chk(_runners_)) addWithId:r];
      [t start];
    }
  }
}

- (void)stopReading {
  @synchronized(self) {
    while (![((id<JavaUtilList>) nil_chk(_runners_)) isEmpty]) {
      NetI2pRouterTransportNtcpReader_Runner *r = [_runners_ removeWithInt:0];
      [((NetI2pRouterTransportNtcpReader_Runner *) nil_chk(r)) stop];
    }
    @synchronized(_pendingConnections_) {
      [((id<JavaUtilSet>) nil_chk(_readAfterLive_)) clear];
      [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) java_notifyAll];
    }
  }
}

- (void)wantsReadWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  jboolean already = false;
  @synchronized(_pendingConnections_) {
    if ([((id<JavaUtilSet>) nil_chk(_liveReads_)) containsWithId:con]) {
      [((id<JavaUtilSet>) nil_chk(_readAfterLive_)) addWithId:con];
      already = true;
    }
    else {
      [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) addWithId:con];
    }
    [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) java_notify];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$Z", @"wantsRead: ", con, @" already live? ", already)];
}

- (void)connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  @synchronized(_pendingConnections_) {
    [((id<JavaUtilSet>) nil_chk(_readAfterLive_)) removeWithId:con];
    [((id<JavaUtilSet>) nil_chk(_pendingConnections_)) removeWithId:con];
    [_pendingConnections_ java_notify];
  }
}

- (void)processReadWithNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  NetI2pRouterTransportNtcpReader_processReadWithNetI2pRouterTransportNtcpNTCPConnection_(self, con);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_pendingConnections_);
  RELEASE_(_liveReads_);
  RELEASE_(_readAfterLive_);
  RELEASE_(_runners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startReadingWithInt:);
  methods[2].selector = @selector(stopReading);
  methods[3].selector = @selector(wantsReadWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[4].selector = @selector(connectionClosedWithNetI2pRouterTransportNtcpNTCPConnection:);
  methods[5].selector = @selector(processReadWithNetI2pRouterTransportNtcpNTCPConnection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingConnections_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_liveReads_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_readAfterLive_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_runners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "startReading", "I", "wantsRead", "LNetI2pRouterTransportNtcpNTCPConnection;", "connectionClosed", "processRead", "Ljava/util/Set<Lnet/i2p/router/transport/ntcp/NTCPConnection;>;", "Ljava/util/List<Lnet/i2p/router/transport/ntcp/Reader$Runner;>;", "LNetI2pRouterTransportNtcpReader_Runner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpReader = { "Reader", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 6, 6, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpReader;
}

@end

void NetI2pRouterTransportNtcpReader_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportNtcpReader *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssignAndConsume(&self->_pendingConnections_, new_JavaUtilLinkedHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_runners_, new_JavaUtilArrayList_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_liveReads_, new_JavaUtilHashSet_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_readAfterLive_, new_JavaUtilHashSet_initWithInt_(8));
}

NetI2pRouterTransportNtcpReader *new_NetI2pRouterTransportNtcpReader_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpReader, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTransportNtcpReader *create_NetI2pRouterTransportNtcpReader_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpReader, initWithNetI2pRouterRouterContext_, ctx)
}

void NetI2pRouterTransportNtcpReader_processReadWithNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpReader *self, NetI2pRouterTransportNtcpNTCPConnection *con) {
  JavaNioByteBuffer *buf = nil;
  while (true) {
    @synchronized(con) {
      if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isClosed]) return;
      if ([con isEstablished]) break;
    }
    if ((buf = [con getNextReadBuf]) == nil) return;
    id<NetI2pRouterTransportNtcpEstablishState> est = [con getEstablishState];
    if ([((id<NetI2pRouterTransportNtcpEstablishState>) nil_chk(est)) isComplete]) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@$Z$ZC@C", @"establishment state [", est, @"] is complete, yet the connection isn't established? ", [con isEstablished], @" (inbound? ", [con isInbound], ' ', con, ')')];
      NetI2pRouterTransportNtcpEventPumper_releaseBufWithJavaNioByteBuffer_(buf);
      break;
    }
    [est receiveWithJavaNioByteBuffer:buf];
    NetI2pRouterTransportNtcpEventPumper_releaseBufWithJavaNioByteBuffer_(buf);
    if ([est isCorrupt]) {
      [con close];
      return;
    }
  }
  while (![((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(con)) isClosed] && (buf = [con getNextReadBuf]) != nil) {
    [con recvEncryptedI2NPWithJavaNioByteBuffer:buf];
    NetI2pRouterTransportNtcpEventPumper_releaseBufWithJavaNioByteBuffer_(buf);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpReader)

@implementation NetI2pRouterTransportNtcpReader_Runner

- (instancetype)initWithNetI2pRouterTransportNtcpReader:(NetI2pRouterTransportNtcpReader *)outer$ {
  NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(self, outer$);
  return self;
}

- (void)stop {
  JreAssignVolatileBoolean(&_stop_, true);
}

- (void)run {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:@"Starting reader"];
  NetI2pRouterTransportNtcpNTCPConnection *con = nil;
  while (!JreLoadVolatileBoolean(&_stop_)) {
    @try {
      @synchronized(this$0_->_pendingConnections_) {
        jboolean keepReading = (con != nil) && [((id<JavaUtilSet>) nil_chk(this$0_->_readAfterLive_)) removeWithId:con];
        if (keepReading) {
        }
        else {
          if (con != nil) {
            [((id<JavaUtilSet>) nil_chk(this$0_->_liveReads_)) removeWithId:con];
            con = JreRetainedLocalValue(nil);
          }
          if ([((id<JavaUtilSet>) nil_chk(this$0_->_pendingConnections_)) isEmpty]) {
            [this$0_->_pendingConnections_ java_wait];
          }
          else {
            id<JavaUtilIterator> iter = [this$0_->_pendingConnections_ iterator];
            con = JreRetainedLocalValue([((id<JavaUtilIterator>) nil_chk(iter)) next]);
            [iter remove];
            [((id<JavaUtilSet>) nil_chk(this$0_->_liveReads_)) addWithId:con];
          }
        }
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    if (!JreLoadVolatileBoolean(&_stop_) && (con != nil)) {
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"begin read for ", con)];
      @try {
        NetI2pRouterTransportNtcpReader_processReadWithNetI2pRouterTransportNtcpNTCPConnection_(this$0_, con);
      }
      @catch (JavaLangIllegalStateException *ise) {
        if ([this$0_->_log_ shouldWarn]) [this$0_->_log_ warnWithNSString:@"Error in the ntcp reader" withJavaLangThrowable:ise];
      }
      @catch (JavaLangRuntimeException *re) {
        [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error in the ntcp reader" withJavaLangThrowable:re];
      }
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"end read for ", con)];
    }
  }
  if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:@"Stopping reader"];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportNtcpReader:);
  methods[1].selector = @selector(stop);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportNtcpReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_stop_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportNtcpReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpReader_Runner = { "Runner", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x2, 3, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpReader_Runner;
}

@end

void NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader_Runner *self, NetI2pRouterTransportNtcpReader *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportNtcpReader_Runner *new_NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpReader_Runner, initWithNetI2pRouterTransportNtcpReader_, outer$)
}

NetI2pRouterTransportNtcpReader_Runner *create_NetI2pRouterTransportNtcpReader_Runner_initWithNetI2pRouterTransportNtcpReader_(NetI2pRouterTransportNtcpReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpReader_Runner, initWithNetI2pRouterTransportNtcpReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpReader_Runner)
