//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/NTCP2Payload.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageImpl.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/transport/ntcp/NTCP2Payload.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTransportNtcpNTCP2Payload ()

+ (jlong)fromLong8WithByteArray:(IOSByteArray *)src
                        withInt:(jint)offset;

+ (void)toLong8WithByteArray:(IOSByteArray *)target
                     withInt:(jint)offset
                    withLong:(jlong)value;

@end

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_DATETIME(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_DATETIME 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_DATETIME, jint)

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_OPTIONS(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_OPTIONS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_OPTIONS, jint)

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_ROUTERINFO(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_ROUTERINFO 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_ROUTERINFO, jint)

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_I2NP(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_I2NP 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_I2NP, jint)

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_TERMINATION(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_TERMINATION 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_TERMINATION, jint)

inline jint NetI2pRouterTransportNtcpNTCP2Payload_get_BLOCK_PADDING(void);
#define NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_PADDING 254
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpNTCP2Payload, BLOCK_PADDING, jint)

__attribute__((unused)) static jlong NetI2pRouterTransportNtcpNTCP2Payload_fromLong8WithByteArray_withInt_(IOSByteArray *src, jint offset);

__attribute__((unused)) static void NetI2pRouterTransportNtcpNTCP2Payload_toLong8WithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong value);

@interface NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback : NSObject

@end

@interface NetI2pRouterTransportNtcpNTCP2Payload_Block () {
 @public
  jint type_;
}

@end

@interface NetI2pRouterTransportNtcpNTCP2Payload_RIBlock () {
 @public
  IOSByteArray *data_;
  jboolean f_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCP2Payload_RIBlock, data_, IOSByteArray *)

@interface NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock () {
 @public
  id<NetI2pDataI2npI2NPMessage> m_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock, m_, id<NetI2pDataI2npI2NPMessage>)

@interface NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock () {
 @public
  jint sz_;
  NetI2pI2PAppContext *ctx_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock, ctx_, NetI2pI2PAppContext *)

@interface NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock () {
 @public
  jlong now_;
}

@end

@interface NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock () {
 @public
  IOSByteArray *opts_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock, opts_, IOSByteArray *)

@interface NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock () {
 @public
  jbyte rsn_;
  jlong rcvd_;
}

@end

@implementation NetI2pRouterTransportNtcpNTCP2Payload

+ (jint)BLOCK_HEADER_SIZE {
  return NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpNTCP2Payload_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)processPayloadWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback:(id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>)cb
                                withByteArray:(IOSByteArray *)payload
                                      withInt:(jint)off
                                      withInt:(jint)length
                                  withBoolean:(jboolean)isHandshake {
  return NetI2pRouterTransportNtcpNTCP2Payload_processPayloadWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback_withByteArray_withInt_withInt_withBoolean_(ctx, cb, payload, off, length, isHandshake);
}

+ (jint)writePayloadWithByteArray:(IOSByteArray *)payload
                          withInt:(jint)off
                 withJavaUtilList:(id<JavaUtilList>)blocks {
  return NetI2pRouterTransportNtcpNTCP2Payload_writePayloadWithByteArray_withInt_withJavaUtilList_(payload, off, blocks);
}

+ (jlong)fromLong8WithByteArray:(IOSByteArray *)src
                        withInt:(jint)offset {
  return NetI2pRouterTransportNtcpNTCP2Payload_fromLong8WithByteArray_withInt_(src, offset);
}

+ (void)toLong8WithByteArray:(IOSByteArray *)target
                     withInt:(jint)offset
                    withLong:(jlong)value {
  NetI2pRouterTransportNtcpNTCP2Payload_toLong8WithByteArray_withInt_withLong_(target, offset, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "J", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processPayloadWithNetI2pI2PAppContext:withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback:withByteArray:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(writePayloadWithByteArray:withInt:withJavaUtilList:);
  methods[3].selector = @selector(fromLong8WithByteArray:withInt:);
  methods[4].selector = @selector(toLong8WithByteArray:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "BLOCK_DATETIME", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_DATETIME, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_OPTIONS", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_OPTIONS, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_ROUTERINFO", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_ROUTERINFO, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_I2NP", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_I2NP, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_TERMINATION", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_TERMINATION, 0x1a, -1, -1, -1, -1 },
    { "BLOCK_PADDING", "I", .constantValue.asInt = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_PADDING, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "processPayload", "LNetI2pI2PAppContext;LNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback;[BIIZ", "LJavaIoIOException;LNetI2pDataDataFormatException;LNetI2pDataI2npI2NPMessageException;", "writePayload", "[BILJavaUtilList;", "([BILjava/util/List<Lnet/i2p/router/transport/ntcp/NTCP2Payload$Block;>;)I", "fromLong8", "[BI", "toLong8", "[BIJ", "LNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback;LNetI2pRouterTransportNtcpNTCP2Payload_Block;LNetI2pRouterTransportNtcpNTCP2Payload_RIBlock;LNetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock;LNetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock;LNetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock;LNetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock;LNetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload = { "NTCP2Payload", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 5, 7, -1, 10, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_init(NetI2pRouterTransportNtcpNTCP2Payload *self) {
  NSObject_init(self);
}

NetI2pRouterTransportNtcpNTCP2Payload *new_NetI2pRouterTransportNtcpNTCP2Payload_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload, init)
}

NetI2pRouterTransportNtcpNTCP2Payload *create_NetI2pRouterTransportNtcpNTCP2Payload_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload, init)
}

jint NetI2pRouterTransportNtcpNTCP2Payload_processPayloadWithNetI2pI2PAppContext_withNetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback_withByteArray_withInt_withInt_withBoolean_(NetI2pI2PAppContext *ctx, id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback> cb, IOSByteArray *payload, jint off, jint length, jboolean isHandshake) {
  NetI2pRouterTransportNtcpNTCP2Payload_initialize();
  jint blocks = 0;
  jboolean gotPadding = false;
  jboolean gotTermination = false;
  jint i = off;
  jint end = off + length;
  while (i < end) {
    jint type = IOSByteArray_Get(nil_chk(payload), i++) & (jint) 0xff;
    if (gotPadding) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block after padding: ", type));
    if (gotTermination && type != NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_PADDING) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block after termination: ", type));
    if (isHandshake && blocks == 0 && type != NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_ROUTERINFO) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal first block in handshake: ", type));
    jint len = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(payload, i, 2);
    i += 2;
    if (i + len > end) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$I$I$I$IC$", @"Block ", blocks, @" type ", type, @" length ", len, @" at offset ", (i - 3 - off), @" runs over frame of size ", length, 0x000a, NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_(payload, off, length)));
    }
    {
      jlong time;
      IOSByteArray *options;
      jint flag;
      NetI2pDataRouterRouterInfo *alice;
      JavaIoByteArrayInputStream *bais;
      id<NetI2pDataI2npI2NPMessage> msg;
      jlong last;
      jint rsn;
      switch (type) {
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_DATETIME:
        if (isHandshake) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block in handshake: ", type));
        if (len != 4) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad length for DATETIME: ", len));
        time = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(payload, i, 4) * 1000;
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotDateTimeWithLong:time];
        break;
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_OPTIONS:
        options = [IOSByteArray arrayWithLength:len];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(payload, i, options, 0, len);
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotOptionsWithByteArray:options withBoolean:isHandshake];
        break;
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_ROUTERINFO:
        flag = IOSByteArray_Get(payload, i) & (jint) 0xff;
        alice = create_NetI2pDataRouterRouterInfo_init();
        bais = create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(payload, i + 1, len - 1);
        [alice readBytesWithJavaIoInputStream:bais withBoolean:true];
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotRIWithNetI2pDataRouterRouterInfo:alice withBoolean:isHandshake withBoolean:(flag & (jint) 0x01) != 0];
        break;
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_I2NP:
        if (isHandshake) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block in handshake: ", type));
        msg = NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayNTCP2WithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(ctx, payload, i, len, nil);
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotI2NPWithNetI2pDataI2npI2NPMessage:msg];
        break;
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_TERMINATION:
        if (isHandshake) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block in handshake: ", type));
        if (len < 9) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad length for TERMINATION: ", len));
        last = NetI2pRouterTransportNtcpNTCP2Payload_fromLong8WithByteArray_withInt_(payload, i);
        rsn = IOSByteArray_Get(payload, i + 8) & (jint) 0xff;
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotTerminationWithInt:rsn withLong:last];
        gotTermination = true;
        break;
        case NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_PADDING:
        gotPadding = true;
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotPaddingWithInt:len withInt:length];
        break;
        default:
        if (isHandshake) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Illegal block in handshake: ", type));
        [((id<NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback>) nil_chk(cb)) gotUnknownWithInt:type withInt:len];
        break;
      }
    }
    i += len;
    blocks++;
  }
  if (isHandshake && blocks == 0) @throw create_JavaIoIOException_initWithNSString_(@"No blocks in handshake");
  return blocks;
}

jint NetI2pRouterTransportNtcpNTCP2Payload_writePayloadWithByteArray_withInt_withJavaUtilList_(IOSByteArray *payload, jint off, id<JavaUtilList> blocks) {
  NetI2pRouterTransportNtcpNTCP2Payload_initialize();
  for (NetI2pRouterTransportNtcpNTCP2Payload_Block * __strong block in nil_chk(blocks)) {
    off = [((NetI2pRouterTransportNtcpNTCP2Payload_Block *) nil_chk(block)) writeWithByteArray:payload withInt:off];
  }
  return off;
}

jlong NetI2pRouterTransportNtcpNTCP2Payload_fromLong8WithByteArray_withInt_(IOSByteArray *src, jint offset) {
  NetI2pRouterTransportNtcpNTCP2Payload_initialize();
  jlong rv = 0;
  jint limit = offset + 8;
  for (jint i = offset; i < limit; i++) {
    JreLShiftAssignLong(&rv, 8);
    rv |= IOSByteArray_Get(nil_chk(src), i) & (jint) 0xFF;
  }
  return rv;
}

void NetI2pRouterTransportNtcpNTCP2Payload_toLong8WithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong value) {
  NetI2pRouterTransportNtcpNTCP2Payload_initialize();
  for (jint i = offset + 7; i >= offset; i--) {
    *IOSByteArray_GetRef(nil_chk(target), i) = (jbyte) value;
    JreRShiftAssignLong(&value, 8);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 14, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(gotDateTimeWithLong:);
  methods[1].selector = @selector(gotI2NPWithNetI2pDataI2npI2NPMessage:);
  methods[2].selector = @selector(gotOptionsWithByteArray:withBoolean:);
  methods[3].selector = @selector(gotRIWithNetI2pDataRouterRouterInfo:withBoolean:withBoolean:);
  methods[4].selector = @selector(gotTerminationWithInt:withLong:);
  methods[5].selector = @selector(gotPaddingWithInt:withInt:);
  methods[6].selector = @selector(gotUnknownWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "gotDateTime", "J", "LNetI2pDataDataFormatException;", "gotI2NP", "LNetI2pDataI2npI2NPMessage;", "LNetI2pDataI2npI2NPMessageException;", "gotOptions", "[BZ", "gotRI", "LNetI2pDataRouterRouterInfo;ZZ", "gotTermination", "IJ", "gotPadding", "II", "gotUnknown", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback = { "PayloadCallback", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0x609, 7, 0, 15, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_PayloadCallback)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_Block

- (instancetype)initWithInt:(jint)ttype {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, ttype);
  return self;
}

- (jint)writeWithByteArray:(IOSByteArray *)tgt
                   withInt:(jint)off {
  *IOSByteArray_GetRef(nil_chk(tgt), off++) = (jbyte) type_;
  jint rv = [self writeDataWithByteArray:tgt withInt:off + 2];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(tgt, off, 2, rv - (off + 2));
  return rv;
}

- (jint)getTotalLength {
  return NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + [self getDataLength];
}

- (jint)getDataLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  return JreStrcat("$I$I", @"Payload block type ", type_, @" length ", [self getDataLength]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(writeWithByteArray:withInt:);
  methods[2].selector = @selector(getTotalLength);
  methods[3].selector = @selector(getDataLength);
  methods[4].selector = @selector(writeDataWithByteArray:withInt:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "write", "[BI", "writeData", "toString", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_Block = { "Block", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x409, 6, 1, 5, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_Block;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(NetI2pRouterTransportNtcpNTCP2Payload_Block *self, jint ttype) {
  NSObject_init(self);
  self->type_ = ttype;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_Block)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_RIBlock

- (instancetype)initWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                       withBoolean:(jboolean)flood {
  NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(self, ri, flood);
  return self;
}

- (jint)getDataLength {
  return 1 + ((IOSByteArray *) nil_chk(data_))->size_;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  *IOSByteArray_GetRef(nil_chk(tgt), off++) = (jbyte) (f_ ? 1 : 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, 0, tgt, off, ((IOSByteArray *) nil_chk(data_))->size_);
  return off + data_->size_;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataRouterRouterInfo:withBoolean:);
  methods[1].selector = @selector(getDataLength);
  methods[2].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "f_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataRouterRouterInfo;Z", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_RIBlock = { "RIBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 3, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterTransportNtcpNTCP2Payload_RIBlock *self, NetI2pDataRouterRouterInfo *ri, jboolean flood) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_ROUTERINFO);
  JreStrongAssign(&self->data_, [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) toByteArray]);
  self->f_ = flood;
}

NetI2pRouterTransportNtcpNTCP2Payload_RIBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(NetI2pDataRouterRouterInfo *ri, jboolean flood) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_RIBlock, initWithNetI2pDataRouterRouterInfo_withBoolean_, ri, flood)
}

NetI2pRouterTransportNtcpNTCP2Payload_RIBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(NetI2pDataRouterRouterInfo *ri, jboolean flood) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_RIBlock, initWithNetI2pDataRouterRouterInfo_withBoolean_, ri, flood)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_RIBlock)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock

- (instancetype)initWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg {
  NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(self, msg);
  return self;
}

- (jint)getDataLength {
  return [((id<NetI2pDataI2npI2NPMessage>) nil_chk(m_)) getMessageSize] - 7;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  return [((id<NetI2pDataI2npI2NPMessage>) nil_chk(m_)) toRawByteArrayNTCP2WithByteArray:tgt withInt:off];
}

- (void)dealloc {
  RELEASE_(m_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2npI2NPMessage:);
  methods[1].selector = @selector(getDataLength);
  methods[2].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2npI2NPMessage;", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock = { "I2NPBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 3, 1, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock *self, id<NetI2pDataI2npI2NPMessage> msg) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_I2NP);
  JreStrongAssign(&self->m_, msg);
}

NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock, initWithNetI2pDataI2npI2NPMessage_, msg)
}

NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock, initWithNetI2pDataI2npI2NPMessage_, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_I2NPBlock)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock

- (instancetype)initWithInt:(jint)size {
  NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)size {
  NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithNetI2pI2PAppContext_withInt_(self, context, size);
  return self;
}

- (jint)getDataLength {
  return sz_;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  if (ctx_ != nil) [((NetI2pUtilRandomSource *) nil_chk([ctx_ random])) nextBytesWithByteArray:tgt withInt:off withInt:sz_];
  else JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(tgt, off, off + sz_, (jbyte) 0);
  return off + sz_;
}

- (void)dealloc {
  RELEASE_(ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:);
  methods[2].selector = @selector(getDataLength);
  methods[3].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sz_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ctx_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LNetI2pI2PAppContext;I", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock = { "PaddingBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 4, 2, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *self, jint size) {
  NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithNetI2pI2PAppContext_withInt_(self, nil, size);
}

NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock, initWithInt_, size)
}

NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock, initWithInt_, size)
}

void NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithNetI2pI2PAppContext_withInt_(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *self, NetI2pI2PAppContext *context, jint size) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_PADDING);
  self->sz_ = size;
  JreStrongAssign(&self->ctx_, context);
}

NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint size) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock, initWithNetI2pI2PAppContext_withInt_, context, size)
}

NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint size) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock, initWithNetI2pI2PAppContext_withInt_, context, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (jint)getDataLength {
  return 4;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(tgt, off, 4, now_ / 1000);
  return off + 4;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getDataLength);
  methods[2].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "now_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock = { "DateTimeBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 3, 1, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock_initWithNetI2pI2PAppContext_(NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock *self, NetI2pI2PAppContext *ctx) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_DATETIME);
  self->now_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) clock])) now];
}

NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock, initWithNetI2pI2PAppContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_DateTimeBlock)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock

- (instancetype)initWithByteArray:(IOSByteArray *)options {
  NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock_initWithByteArray_(self, options);
  return self;
}

- (jint)getDataLength {
  return ((IOSByteArray *) nil_chk(opts_))->size_;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(opts_, 0, tgt, off, ((IOSByteArray *) nil_chk(opts_))->size_);
  return off + opts_->size_;
}

- (void)dealloc {
  RELEASE_(opts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(getDataLength);
  methods[2].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "opts_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock = { "OptionsBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 3, 1, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock_initWithByteArray_(NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock *self, IOSByteArray *options) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_OPTIONS);
  JreStrongAssign(&self->opts_, options);
}

NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock_initWithByteArray_(IOSByteArray *options) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock, initWithByteArray_, options)
}

NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock_initWithByteArray_(IOSByteArray *options) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock, initWithByteArray_, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock)

@implementation NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock

- (instancetype)initWithInt:(jint)reason
                   withLong:(jlong)lastReceived {
  NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock_initWithInt_withLong_(self, reason, lastReceived);
  return self;
}

- (jint)getDataLength {
  return 9;
}

- (jint)writeDataWithByteArray:(IOSByteArray *)tgt
                       withInt:(jint)off {
  NetI2pRouterTransportNtcpNTCP2Payload_toLong8WithByteArray_withInt_withLong_(tgt, off, rcvd_);
  *IOSByteArray_GetRef(nil_chk(tgt), off + 8) = rsn_;
  return off + 9;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:);
  methods[1].selector = @selector(getDataLength);
  methods[2].selector = @selector(writeDataWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rsn_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rcvd_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJ", "writeData", "[BI", "LNetI2pRouterTransportNtcpNTCP2Payload;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock = { "TerminationBlock", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x9, 3, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock;
}

@end

void NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock_initWithInt_withLong_(NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock *self, jint reason, jlong lastReceived) {
  NetI2pRouterTransportNtcpNTCP2Payload_Block_initWithInt_(self, NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_TERMINATION);
  self->rsn_ = (jbyte) reason;
  self->rcvd_ = lastReceived;
}

NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock *new_NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock_initWithInt_withLong_(jint reason, jlong lastReceived) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock, initWithInt_withLong_, reason, lastReceived)
}

NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock *create_NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock_initWithInt_withLong_(jint reason, jlong lastReceived) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock, initWithInt_withLong_, reason, lastReceived)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpNTCP2Payload_TerminationBlock)
