//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/EstablishBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigInteger.h"
#include "java/nio/ByteBuffer.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/ntcp/EstablishBase.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTransportNtcpEstablishBase ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetI2pRouterTransportNtcpEstablishBase_init(NetI2pRouterTransportNtcpEstablishBase *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpEstablishBase_State_initWithNSString_withInt_(NetI2pRouterTransportNtcpEstablishBase_State *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpEstablishBase)

NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState *NetI2pRouterTransportNtcpEstablishBase_VERIFIED;
NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState *NetI2pRouterTransportNtcpEstablishBase_FAILED;

@implementation NetI2pRouterTransportNtcpEstablishBase

+ (NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState *)VERIFIED {
  return NetI2pRouterTransportNtcpEstablishBase_VERIFIED;
}

+ (NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState *)FAILED {
  return NetI2pRouterTransportNtcpEstablishBase_FAILED;
}

+ (jint)MIN_RI_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_MIN_RI_SIZE;
}

+ (jint)MAX_RI_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_MAX_RI_SIZE;
}

+ (jint)AES_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_AES_SIZE;
}

+ (jint)XY_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_XY_SIZE;
}

+ (jint)HXY_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE;
}

+ (jint)HXY_TSB_PAD_SIZE {
  return NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpEstablishBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
      withNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  NetI2pRouterTransportNtcpEstablishBase_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(self, ctx, transport, con);
  return self;
}

- (void)changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:(NetI2pRouterTransportNtcpEstablishBase_State *)state {
  @synchronized(_stateLock_) {
    JreVolatileStrongAssign(&_state_, state);
  }
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  @synchronized(self) {
    @synchronized(_stateLock_) {
      if (JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED) || JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT)) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$@", [self prefix], @"received unexpected data on ", _con_));
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$I$I", [self prefix], @"Receiving: ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" Received: ", _received_)];
  }
}

- (void)prepareOutbound {
}

- (jboolean)isCorrupt {
  @synchronized(_stateLock_) {
    return JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT);
  }
}

- (jboolean)isComplete {
  @synchronized(_stateLock_) {
    return JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED);
  }
}

- (jint)getVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)closeWithNSString:(NSString *)reason
    withJavaLangException:(JavaLangException *)e {
  @synchronized(self) {
    [self failWithNSString:reason withJavaLangException:e];
  }
}

- (void)failWithNSString:(NSString *)reason {
  [self failWithNSString:reason withJavaLangException:nil];
}

- (void)failWithNSString:(NSString *)reason
   withJavaLangException:(JavaLangException *)e {
  [self failWithNSString:reason withJavaLangException:e withBoolean:false];
}

- (void)failWithNSString:(NSString *)reason
   withJavaLangException:(JavaLangException *)e
             withBoolean:(jboolean)bySkew {
  @synchronized(_stateLock_) {
    if (JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT) || JreLoadVolatileId(&_state_) == JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED)) return;
    [self changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT)];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$", [self prefix], @"Failed to establish: ", reason) withJavaLangThrowable:e];
  if (!bySkew) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.receiveCorruptEstablishment" withLong:1];
  [self releaseBufsWithBoolean:false];
}

- (void)releaseBufsWithBoolean:(jboolean)isVerified {
  if (_prevEncrypted_ != nil && _prevEncrypted_->size_ == NetI2pRouterTransportNtcpEstablishBase_AES_SIZE) NetI2pUtilSimpleByteCache_release__WithByteArray_(_prevEncrypted_);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(_curDecrypted_);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(_hX_xor_bobIdentHash_);
  if ([((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(_dh_)) getPeerPublicValue] == nil) [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) returnUnusedWithNetI2pRouterTransportCryptoDHSessionKeyBuilder:_dh_];
}

+ (void)xor32WithByteArray:(IOSByteArray *)a
             withByteArray:(IOSByteArray *)b {
  NetI2pRouterTransportNtcpEstablishBase_xor32WithByteArray_withByteArray_(a, b);
}

- (NSString *)prefix {
  return [self description];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(_con_)) isInbound]) [buf appendWithNSString:@"IBES "];
  else [buf appendWithNSString:@"OBES "];
  [buf appendWithNSString:[_con_ description]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithId:JreLoadVolatileId(&_state_)];
  if ([_con_ isEstablished]) [buf appendWithNSString:@" established"];
  [buf appendWithNSString:@": "];
  return [buf description];
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTransportNtcpEstablishBase__xWithNSString_(s);
}

- (void)__javaClone:(NetI2pRouterTransportNtcpEstablishBase *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_state_, &original->_state_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_X_);
  RELEASE_(_hX_xor_bobIdentHash_);
  RELEASE_(_Y_);
  RELEASE_(_e_hXY_tsB_);
  RELEASE_(_e_bobSig_);
  RELEASE_(_prevEncrypted_);
  RELEASE_(_curDecrypted_);
  RELEASE_(_dh_);
  RELEASE_(_transport_);
  RELEASE_(_con_);
  RELEASE_(_stateLock_);
  JreReleaseVolatile(&_state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1c, 15, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withNetI2pRouterTransportNtcpNTCPConnection:);
  methods[2].selector = @selector(changeStateWithNetI2pRouterTransportNtcpEstablishBase_State:);
  methods[3].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[4].selector = @selector(prepareOutbound);
  methods[5].selector = @selector(isCorrupt);
  methods[6].selector = @selector(isComplete);
  methods[7].selector = @selector(getVersion);
  methods[8].selector = @selector(closeWithNSString:withJavaLangException:);
  methods[9].selector = @selector(failWithNSString:);
  methods[10].selector = @selector(failWithNSString:withJavaLangException:);
  methods[11].selector = @selector(failWithNSString:withJavaLangException:withBoolean:);
  methods[12].selector = @selector(releaseBufsWithBoolean:);
  methods[13].selector = @selector(xor32WithByteArray:withByteArray:);
  methods[14].selector = @selector(prefix);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERIFIED", "LNetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "FAILED", "LNetI2pRouterTransportNtcpEstablishBase_FailedEstablishState;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_X_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_hX_xor_bobIdentHash_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_Y_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_e_hXY_tsB_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_tsB_", "J", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "_tsA_", "J", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "_peerSkew_", "J", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "_e_bobSig_", "[B", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "_prevEncrypted_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_curDecrypted_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_received_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_dh_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportNtcpNTCPTransport;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_con_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "MIN_RI_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_MIN_RI_SIZE, 0x1c, -1, -1, -1, -1 },
    { "MAX_RI_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_MAX_RI_SIZE, 0x1c, -1, -1, -1, -1 },
    { "AES_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_AES_SIZE, 0x1c, -1, -1, -1, -1 },
    { "XY_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_XY_SIZE, 0x1c, -1, -1, -1, -1 },
    { "HXY_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE, 0x1c, -1, -1, -1, -1 },
    { "HXY_TSB_PAD_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE, 0x1c, -1, -1, -1, -1 },
    { "_stateLock_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LNetI2pRouterTransportNtcpNTCPConnection;", "changeState", "LNetI2pRouterTransportNtcpEstablishBase_State;", "receive", "LJavaNioByteBuffer;", "close", "LNSString;LJavaLangException;", "fail", "LNSString;", "LNSString;LJavaLangException;Z", "releaseBufs", "Z", "xor32", "[B[B", "toString", "_x", &NetI2pRouterTransportNtcpEstablishBase_VERIFIED, &NetI2pRouterTransportNtcpEstablishBase_FAILED, "LNetI2pRouterTransportNtcpEstablishBase_State;LNetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState;LNetI2pRouterTransportNtcpEstablishBase_FailedEstablishState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpEstablishBase = { "EstablishBase", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x400, 17, 26, -1, 18, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpEstablishBase;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpEstablishBase class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpEstablishBase_VERIFIED, new_NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState_init());
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpEstablishBase_FAILED, new_NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpEstablishBase)
  }
}

@end

void NetI2pRouterTransportNtcpEstablishBase_init(NetI2pRouterTransportNtcpEstablishBase *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_stateLock_, new_NSObject_init());
  JreStrongAssign(&self->_context_, nil);
  JreStrongAssign(&self->_log_, nil);
  JreStrongAssign(&self->_X_, nil);
  JreStrongAssign(&self->_Y_, nil);
  JreStrongAssign(&self->_hX_xor_bobIdentHash_, nil);
  JreStrongAssign(&self->_curDecrypted_, nil);
  JreStrongAssign(&self->_dh_, nil);
  JreStrongAssign(&self->_transport_, nil);
  JreStrongAssign(&self->_con_, nil);
  JreStrongAssign(&self->_e_hXY_tsB_, nil);
}

void NetI2pRouterTransportNtcpEstablishBase_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpEstablishBase *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_stateLock_, new_NSObject_init());
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_con_, con);
  JreStrongAssign(&self->_dh_, [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getDHBuilder]);
  JreStrongAssign(&self->_hX_xor_bobIdentHash_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_HXY_SIZE));
  if ([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) isInbound]) {
    JreStrongAssign(&self->_X_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_XY_SIZE));
    JreStrongAssign(&self->_Y_, [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) getMyPublicValueBytes]);
  }
  else {
    JreStrongAssign(&self->_X_, [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_dh_)) getMyPublicValueBytes]);
    JreStrongAssign(&self->_Y_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_XY_SIZE));
  }
  JreStrongAssignAndConsume(&self->_e_hXY_tsB_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpEstablishBase_HXY_TSB_PAD_SIZE]);
  JreStrongAssign(&self->_curDecrypted_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportNtcpEstablishBase_AES_SIZE));
}

void NetI2pRouterTransportNtcpEstablishBase_xor32WithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b) {
  NetI2pRouterTransportNtcpEstablishBase_initialize();
  for (jint i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(nil_chk(b), i) ^= IOSByteArray_Get(nil_chk(a), i);
  }
}

NSString *NetI2pRouterTransportNtcpEstablishBase__xWithNSString_(NSString *s) {
  NetI2pRouterTransportNtcpEstablishBase_initialize();
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpEstablishBase)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpEstablishBase_State)

NetI2pRouterTransportNtcpEstablishBase_State *NetI2pRouterTransportNtcpEstablishBase_State_values_[20];

@implementation NetI2pRouterTransportNtcpEstablishBase_State

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_INIT {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_INIT);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_SENT_X {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_SENT_X);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_GOT_Y {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_Y);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_GOT_HXY {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_HXY);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_SENT_RI {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_SENT_RI);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)OB_GOT_SIG {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_SIG);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_INIT {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_INIT);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_GOT_X {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_X);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_GOT_HX {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_HX);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_SENT_Y {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_SENT_Y);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_GOT_RI_SIZE {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI_SIZE);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_GOT_RI {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_INIT {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_INIT);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_GOT_X {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_X);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_GOT_PADDING {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_PADDING);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_SENT_Y {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_SENT_Y);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_GOT_RI {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_RI);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)IB_NTCP2_READ_RANDOM {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_READ_RANDOM);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)VERIFIED {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED);
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)CORRUPT {
  return JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportNtcpEstablishBase_State_values();
}

+ (NetI2pRouterTransportNtcpEstablishBase_State *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportNtcpEstablishBase_State_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportNtcpEstablishBase_State_Enum)toNSEnum {
  return (NetI2pRouterTransportNtcpEstablishBase_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportNtcpEstablishBase_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpEstablishBase_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OB_INIT", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "OB_SENT_X", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "OB_GOT_Y", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "OB_GOT_HXY", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "OB_SENT_RI", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "OB_GOT_SIG", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "IB_INIT", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "IB_GOT_X", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "IB_GOT_HX", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "IB_SENT_Y", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "IB_GOT_RI_SIZE", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "IB_GOT_RI", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "IB_NTCP2_INIT", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "IB_NTCP2_GOT_X", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "IB_NTCP2_GOT_PADDING", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "IB_NTCP2_SENT_Y", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "IB_NTCP2_GOT_RI", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "IB_NTCP2_READ_RANDOM", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "VERIFIED", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "CORRUPT", "LNetI2pRouterTransportNtcpEstablishBase_State;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_INIT), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_SENT_X), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_Y), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_HXY), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_SENT_RI), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, OB_GOT_SIG), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_INIT), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_X), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_HX), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_SENT_Y), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI_SIZE), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_GOT_RI), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_INIT), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_X), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_PADDING), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_SENT_Y), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_GOT_RI), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, IB_NTCP2_READ_RANDOM), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED), &JreEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT), "LNetI2pRouterTransportNtcpEstablishBase;", "Ljava/lang/Enum<Lnet/i2p/router/transport/ntcp/EstablishBase$State;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpEstablishBase_State = { "State", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x401c, 2, 20, 22, -1, -1, 23, -1 };
  return &_NetI2pRouterTransportNtcpEstablishBase_State;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpEstablishBase_State class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 20 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 20; i++) {
      ((void)(NetI2pRouterTransportNtcpEstablishBase_State_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportNtcpEstablishBase_State_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportNtcpEstablishBase_State_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpEstablishBase_State)
  }
}

@end

void NetI2pRouterTransportNtcpEstablishBase_State_initWithNSString_withInt_(NetI2pRouterTransportNtcpEstablishBase_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportNtcpEstablishBase_State_values() {
  NetI2pRouterTransportNtcpEstablishBase_State_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportNtcpEstablishBase_State_values_ count:20 type:NetI2pRouterTransportNtcpEstablishBase_State_class_()];
}

NetI2pRouterTransportNtcpEstablishBase_State *NetI2pRouterTransportNtcpEstablishBase_State_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportNtcpEstablishBase_State_initialize();
  for (int i = 0; i < 20; i++) {
    NetI2pRouterTransportNtcpEstablishBase_State *e = NetI2pRouterTransportNtcpEstablishBase_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportNtcpEstablishBase_State *NetI2pRouterTransportNtcpEstablishBase_State_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportNtcpEstablishBase_State_initialize();
  if (ordinal >= 20) {
    return nil;
  }
  return NetI2pRouterTransportNtcpEstablishBase_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpEstablishBase_State)

@implementation NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getVersion {
  return 1;
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"receive() ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" on verified state, doing nothing!"));
}

- (void)prepareOutbound {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareOutbound() on verified state, doing nothing!");
}

- (NSString *)description {
  return @"VerifiedEstablishState: ";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getVersion);
  methods[2].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[3].selector = @selector(prepareOutbound);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "receive", "LJavaNioByteBuffer;", "toString", "LNetI2pRouterTransportNtcpEstablishBase;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState = { "VerifiedEstablishState", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0xa, 5, 0, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState;
}

@end

void NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState_init(NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState *self) {
  NetI2pRouterTransportNtcpEstablishBase_init(self);
  JreVolatileStrongAssign(&self->_state_, JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, VERIFIED));
}

NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState *new_NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState, init)
}

NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState *create_NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpEstablishBase_VerifiedEstablishState)

@implementation NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getVersion {
  return 1;
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"receive() ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" on failed state, doing nothing!"));
}

- (void)prepareOutbound {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareOutbound() on failed state, doing nothing!");
}

- (NSString *)description {
  return @"FailedEstablishState: ";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getVersion);
  methods[2].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[3].selector = @selector(prepareOutbound);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "receive", "LJavaNioByteBuffer;", "toString", "LNetI2pRouterTransportNtcpEstablishBase;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState = { "FailedEstablishState", "net.i2p.router.transport.ntcp", ptrTable, methods, NULL, 7, 0xa, 5, 0, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState;
}

@end

void NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState_init(NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState *self) {
  NetI2pRouterTransportNtcpEstablishBase_init(self);
  JreVolatileStrongAssign(&self->_state_, JreLoadEnum(NetI2pRouterTransportNtcpEstablishBase_State, CORRUPT));
}

NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState *new_NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState, init)
}

NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState *create_NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpEstablishBase_FailedEstablishState)
