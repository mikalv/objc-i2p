//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/ntcp/OutboundNTCP2State.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/protocol/CipherState.h"
#include "com/southernstorm/noise/protocol/CipherStatePair.h"
#include "com/southernstorm/noise/protocol/DHState.h"
#include "com/southernstorm/noise/protocol/HandshakeState.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/nio/ByteBuffer.h"
#include "java/security/GeneralSecurityException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/HMAC256Generator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"
#include "net/i2p/router/transport/ntcp/EventPumper.h"
#include "net/i2p/router/transport/ntcp/NTCP2Payload.h"
#include "net/i2p/router/transport/ntcp/NTCPConnection.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/ntcp/OutboundNTCP2State.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@class NetI2pRouterTransportNtcpOutboundNTCP2State_State;

@interface NetI2pRouterTransportNtcpOutboundNTCP2State () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportNtcpNTCPTransport *_transport_;
  NetI2pRouterTransportNtcpNTCPConnection *_con_;
  IOSByteArray *_tmp_;
  jint _received_;
  jlong _peerSkew_;
  id _stateLock_;
  NetI2pRouterTransportNtcpOutboundNTCP2State_State *_state_;
  ComSouthernstormNoiseProtocolHandshakeState *_handshakeState_;
  NetI2pDataRouterRouterInfo *_aliceRI_;
  jint _aliceRISize_;
  jint _padlen1_;
  jint _padlen2_;
  jint _padlen3_;
  NetI2pDataSessionKey *_bobHash_;
  IOSByteArray *_bobIV_;
}

- (void)changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State:(NetI2pRouterTransportNtcpOutboundNTCP2State_State *)state;

- (void)receiveOutboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

- (void)prepareOutbound3;

- (void)setDataPhase;

+ (IOSByteArray *)doHMACWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                        withByteArray:(IOSByteArray *)data;

- (void)releaseBufsWithBoolean:(jboolean)isVerified;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _transport_, NetI2pRouterTransportNtcpNTCPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _con_, NetI2pRouterTransportNtcpNTCPConnection *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _tmp_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _stateLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _state_, NetI2pRouterTransportNtcpOutboundNTCP2State_State *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _handshakeState_, ComSouthernstormNoiseProtocolHandshakeState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _aliceRI_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _bobHash_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportNtcpOutboundNTCP2State, _bobIV_, IOSByteArray *)

inline jint NetI2pRouterTransportNtcpOutboundNTCP2State_get_PADDING1_MAX(void);
#define NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING1_MAX 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State, PADDING1_MAX, jint)

inline jint NetI2pRouterTransportNtcpOutboundNTCP2State_get_PADDING3_MAX(void);
#define NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING3_MAX 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State, PADDING3_MAX, jint)

inline jint NetI2pRouterTransportNtcpOutboundNTCP2State_get_OPTIONS3_SIZE(void);
#define NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS3_SIZE 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State, OPTIONS3_SIZE, jint)

inline IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_get_ZEROLEN(void);
static IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROLEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpOutboundNTCP2State, ZEROLEN, IOSByteArray *)

inline IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_get_ONE(void);
static IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpOutboundNTCP2State, ONE, IOSByteArray *)

inline IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_get_ASK(void);
static IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_ASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpOutboundNTCP2State, ASK, IOSByteArray *)

inline IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_get_SIPHASH(void);
static IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportNtcpOutboundNTCP2State, SIPHASH, IOSByteArray *)

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, NetI2pRouterTransportNtcpOutboundNTCP2State_State *state);

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_receiveOutboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, JavaNioByteBuffer *src);

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_prepareOutbound3(NetI2pRouterTransportNtcpOutboundNTCP2State *self);

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_setDataPhase(NetI2pRouterTransportNtcpOutboundNTCP2State *self);

__attribute__((unused)) static IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(NetI2pRouterRouterContext *ctx, NetI2pDataSessionKey *key, IOSByteArray *data);

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_releaseBufsWithBoolean_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, jboolean isVerified);

typedef NS_ENUM(NSUInteger, NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum) {
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_OB_INIT = 0,
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_OB_SENT_X = 1,
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_OB_GOT_HXY = 2,
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_OB_GOT_PADDING = 3,
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_VERIFIED = 4,
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum_CORRUPT = 5,
};

@interface NetI2pRouterTransportNtcpOutboundNTCP2State_State : JavaLangEnum

@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *OB_INIT NS_SWIFT_NAME(OB_INIT);
@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *OB_SENT_X NS_SWIFT_NAME(OB_SENT_X);
@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *OB_GOT_HXY NS_SWIFT_NAME(OB_GOT_HXY);
@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *OB_GOT_PADDING NS_SWIFT_NAME(OB_GOT_PADDING);
@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *VERIFIED NS_SWIFT_NAME(VERIFIED);
@property (readonly, class, nonnull) NetI2pRouterTransportNtcpOutboundNTCP2State_State *CORRUPT NS_SWIFT_NAME(CORRUPT);
+ (IOSObjectArray *)values;

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)valueOfWithNSString:(NSString *)name;

- (NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportNtcpOutboundNTCP2State_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_[];

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_OB_INIT(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_INIT)

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_OB_SENT_X(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_SENT_X)

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_OB_GOT_HXY(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_HXY)

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_OB_GOT_PADDING(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_PADDING)

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_VERIFIED(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED)

inline NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_get_CORRUPT(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT)

__attribute__((unused)) static void NetI2pRouterTransportNtcpOutboundNTCP2State_State_initWithNSString_withInt_(NetI2pRouterTransportNtcpOutboundNTCP2State_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportNtcpOutboundNTCP2State_State_values(void);

__attribute__((unused)) static NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportNtcpOutboundNTCP2State_State)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpOutboundNTCP2State)

IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY;

@implementation NetI2pRouterTransportNtcpOutboundNTCP2State

+ (jint)KEY_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE;
}

+ (jint)MAC_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE;
}

+ (jint)IV_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE;
}

+ (jint)OPTIONS1_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS1_SIZE;
}

+ (jint)MSG1_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE;
}

+ (jint)TOTAL1_MAX {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_TOTAL1_MAX;
}

+ (jint)OPTIONS2_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS2_SIZE;
}

+ (jint)MSG2_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE;
}

+ (jint)MSG3P1_SIZE {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE;
}

+ (jlong)MAX_SKEW {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW;
}

+ (IOSByteArray *)ZEROKEY {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
       withNetI2pRouterTransportNtcpNTCPTransport:(NetI2pRouterTransportNtcpNTCPTransport *)transport
      withNetI2pRouterTransportNtcpNTCPConnection:(NetI2pRouterTransportNtcpNTCPConnection *)con {
  NetI2pRouterTransportNtcpOutboundNTCP2State_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(self, ctx, transport, con);
  return self;
}

- (void)changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State:(NetI2pRouterTransportNtcpOutboundNTCP2State_State *)state {
  NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, state);
}

- (void)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  @synchronized(self) {
    if (_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED) || _state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT)) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$@", self, @"received unexpected data on ", _con_));
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("@$I$I", self, @"Receiving: ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" Received: ", _received_)];
    if (![((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) return;
    NetI2pRouterTransportNtcpOutboundNTCP2State_receiveOutboundWithJavaNioByteBuffer_(self, src);
  }
}

- (jboolean)isCorrupt {
  @synchronized(_stateLock_) {
    return _state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT);
  }
}

- (jboolean)isComplete {
  @synchronized(_stateLock_) {
    return _state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED);
  }
}

- (jint)getVersion {
  return 2;
}

- (void)prepareOutbound {
  @synchronized(self) {
    if (!(_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_INIT))) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$", self, @"unexpected prepareOutbound()"));
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("@$", self, @"send X")];
    IOSByteArray *options = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS1_SIZE];
    *IOSByteArray_GetRef(options, 1) = NetI2pRouterTransportNtcpNTCPTransport_NTCP2_INT_VERSION;
    jint padlen1 = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextIntWithInt:NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING1_MAX];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(options, 2, 2, padlen1);
    jint msg3p2len = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + 1 + _aliceRISize_ + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS3_SIZE + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + _padlen3_ + NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(options, 4, 2, msg3p2len);
    jlong now = ([((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 500) / 1000;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(options, 8, 4, now);
    NSString *s = [((NetI2pDataRouterRouterAddress *) nil_chk([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(_con_)) getRemoteAddress])) getOptionWithNSString:@"s"];
    if (s == nil) {
      [self failWithNSString:@"no NTCP2 S"];
      return;
    }
    IOSByteArray *bk = NetI2pDataBase64_decodeWithNSString_(s);
    if (bk == nil || bk->size_ != NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE || NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(bk, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) {
      [self failWithNSString:JreStrcat("$$", @"bad NTCP2 S: ", s)];
      return;
    }
    [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) getRemotePublicKey])) setPublicKeyWithByteArray:bk withInt:0];
    [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([_handshakeState_ getLocalKeyPair])) setPublicKeyWithByteArray:[((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(_transport_)) getNTCP2StaticPubkey] withInt:0];
    [((id<ComSouthernstormNoiseProtocolDHState>) nil_chk([_handshakeState_ getLocalKeyPair])) setPrivateKeyWithByteArray:[_transport_ getNTCP2StaticPrivkey] withInt:0];
    @try {
      [_handshakeState_ start];
      if ([_log_ shouldDebug]) [_log_ debugWithNSString:JreStrcat("$$", @"After start: ", [_handshakeState_ description])];
      [_handshakeState_ writeMessageWithByteArray:_tmp_ withInt:0 withByteArray:options withInt:0 withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS1_SIZE];
    }
    @catch (JavaSecurityGeneralSecurityException *gse) {
      if (![_log_ shouldWarn]) [_log_ errorWithNSString:@"Bad msg 1 out" withJavaLangThrowable:gse];
      [self failWithNSString:@"Bad msg 1 out" withJavaLangException:gse];
      return;
    }
    @catch (JavaLangRuntimeException *re) {
      if (![_log_ shouldWarn]) [_log_ errorWithNSString:@"Bad msg 1 out" withJavaLangThrowable:re];
      [self failWithNSString:@"Bad msg 1 out" withJavaLangException:re];
      return;
    }
    if ([_log_ shouldDebug]) [_log_ debugWithNSString:JreStrcat("$$", @"After msg 1: ", [_handshakeState_ description])];
    [((NetI2pCryptoAESEngine *) nil_chk([_context_ aes])) encryptWithByteArray:_tmp_ withInt:0 withByteArray:_tmp_ withInt:0 withNetI2pDataSessionKey:_bobHash_ withByteArray:_bobIV_ withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_tmp_, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE - NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE, _bobIV_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE);
    if (padlen1 > 0) {
      [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextBytesWithByteArray:_tmp_ withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE withInt:padlen1];
      [_handshakeState_ mixHashWithByteArray:_tmp_ withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE withInt:padlen1];
      if ([_log_ shouldDebug]) [_log_ debugWithNSString:JreStrcat("$I$$", @"After mixhash padding ", padlen1, @" msg 1: ", [_handshakeState_ description])];
    }
    NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_SENT_X));
    [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([_transport_ getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:_con_ withByteArray:_tmp_ withInt:0 withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE + padlen1];
  }
}

- (void)receiveOutboundWithJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  NetI2pRouterTransportNtcpOutboundNTCP2State_receiveOutboundWithJavaNioByteBuffer_(self, src);
}

- (void)prepareOutbound3 {
  NetI2pRouterTransportNtcpOutboundNTCP2State_prepareOutbound3(self);
}

- (void)setDataPhase {
  NetI2pRouterTransportNtcpOutboundNTCP2State_setDataPhase(self);
}

+ (IOSObjectArray *)generateSipHashKeysWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                     withComSouthernstormNoiseProtocolHandshakeState:(ComSouthernstormNoiseProtocolHandshakeState *)state {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_generateSipHashKeysWithNetI2pRouterRouterContext_withComSouthernstormNoiseProtocolHandshakeState_(ctx, state);
}

+ (IOSByteArray *)doHMACWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                        withByteArray:(IOSByteArray *)data {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, key, data);
}

- (void)closeWithNSString:(NSString *)reason
    withJavaLangException:(JavaLangException *)e {
  @synchronized(self) {
    [self failWithNSString:reason withJavaLangException:e];
  }
}

- (void)failWithNSString:(NSString *)reason {
  [self failWithNSString:reason withJavaLangException:nil];
}

- (void)failWithNSString:(NSString *)reason
   withJavaLangException:(JavaLangException *)e {
  [self failWithNSString:reason withJavaLangException:e withBoolean:false];
}

- (void)failWithNSString:(NSString *)reason
   withJavaLangException:(JavaLangException *)e
             withBoolean:(jboolean)bySkew {
  @synchronized(self) {
    if (_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT) || _state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED)) return;
    NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT));
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) {
      [_log_ warnWithNSString:JreStrcat("@$$", self, @"Failed to establish: ", reason) withJavaLangThrowable:e];
      [_log_ warnWithNSString:JreStrcat("$$", @"State at failure: ", [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) description])];
    }
    [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(_handshakeState_)) destroy];
    if (!bySkew) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"ntcp.receiveCorruptEstablishment" withLong:1];
    NetI2pRouterTransportNtcpOutboundNTCP2State_releaseBufsWithBoolean_(self, false);
  }
}

- (void)releaseBufsWithBoolean:(jboolean)isVerified {
  NetI2pRouterTransportNtcpOutboundNTCP2State_releaseBufsWithBoolean_(self, isVerified);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:@"OBES2 "];
  [buf appendWithNSString:[((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(_con_)) description]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithId:_state_];
  if ([_con_ isEstablished]) [buf appendWithNSString:@" established"];
  [buf appendWithNSString:@": "];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_con_);
  RELEASE_(_tmp_);
  RELEASE_(_stateLock_);
  RELEASE_(_state_);
  RELEASE_(_handshakeState_);
  RELEASE_(_aliceRI_);
  RELEASE_(_bobHash_);
  RELEASE_(_bobIV_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[B", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportNtcpNTCPTransport:withNetI2pRouterTransportNtcpNTCPConnection:);
  methods[1].selector = @selector(changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State:);
  methods[2].selector = @selector(receiveWithJavaNioByteBuffer:);
  methods[3].selector = @selector(isCorrupt);
  methods[4].selector = @selector(isComplete);
  methods[5].selector = @selector(getVersion);
  methods[6].selector = @selector(prepareOutbound);
  methods[7].selector = @selector(receiveOutboundWithJavaNioByteBuffer:);
  methods[8].selector = @selector(prepareOutbound3);
  methods[9].selector = @selector(setDataPhase);
  methods[10].selector = @selector(generateSipHashKeysWithNetI2pRouterRouterContext:withComSouthernstormNoiseProtocolHandshakeState:);
  methods[11].selector = @selector(doHMACWithNetI2pRouterRouterContext:withNetI2pDataSessionKey:withByteArray:);
  methods[12].selector = @selector(closeWithNSString:withJavaLangException:);
  methods[13].selector = @selector(failWithNSString:);
  methods[14].selector = @selector(failWithNSString:withJavaLangException:);
  methods[15].selector = @selector(failWithNSString:withJavaLangException:withBoolean:);
  methods[16].selector = @selector(releaseBufsWithBoolean:);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportNtcpNTCPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_con_", "LNetI2pRouterTransportNtcpNTCPConnection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tmp_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_received_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerSkew_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEY_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE, 0x19, -1, -1, -1, -1 },
    { "MAC_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE, 0x19, -1, -1, -1, -1 },
    { "IV_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE, 0x19, -1, -1, -1, -1 },
    { "OPTIONS1_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS1_SIZE, 0x19, -1, -1, -1, -1 },
    { "MSG1_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_MSG1_SIZE, 0x19, -1, -1, -1, -1 },
    { "TOTAL1_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_TOTAL1_MAX, 0x19, -1, -1, -1, -1 },
    { "PADDING1_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING1_MAX, 0x1a, -1, -1, -1, -1 },
    { "PADDING3_MAX", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING3_MAX, 0x1a, -1, -1, -1, -1 },
    { "OPTIONS2_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS2_SIZE, 0x19, -1, -1, -1, -1 },
    { "MSG2_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE, 0x19, -1, -1, -1, -1 },
    { "MSG3P1_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE, 0x19, -1, -1, -1, -1 },
    { "OPTIONS3_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS3_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_SKEW", "J", .constantValue.asLong = NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW, 0x19, -1, -1, -1, -1 },
    { "ZEROLEN", "[B", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ONE", "[B", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "ZEROKEY", "[B", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "ASK", "[B", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "SIPHASH", "[B", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "_stateLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_handshakeState_", "LComSouthernstormNoiseProtocolHandshakeState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_aliceRI_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_aliceRISize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_padlen1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_padlen2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_padlen3_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bobHash_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bobIV_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportNtcpNTCPTransport;LNetI2pRouterTransportNtcpNTCPConnection;", "changeState", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", "receive", "LJavaNioByteBuffer;", "receiveOutbound", "generateSipHashKeys", "LNetI2pRouterRouterContext;LComSouthernstormNoiseProtocolHandshakeState;", "doHMAC", "LNetI2pRouterRouterContext;LNetI2pDataSessionKey;[B", "close", "LNSString;LJavaLangException;", "fail", "LNSString;", "LNSString;LJavaLangException;Z", "releaseBufs", "Z", "toString", &NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROLEN, &NetI2pRouterTransportNtcpOutboundNTCP2State_ONE, &NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY, &NetI2pRouterTransportNtcpOutboundNTCP2State_ASK, &NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpOutboundNTCP2State = { "OutboundNTCP2State", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x0, 18, 35, -1, 2, -1, -1, -1 };
  return &_NetI2pRouterTransportNtcpOutboundNTCP2State;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpOutboundNTCP2State class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROLEN, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpOutboundNTCP2State_ONE, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportNtcpOutboundNTCP2State_ASK, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'a', (jbyte) 's', (jbyte) 'k', 1 } count:4]);
    JreStrongAssign(&NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH, NetI2pDataDataHelper_getASCIIWithNSString_(@"siphash"));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpOutboundNTCP2State)
  }
}

@end

void NetI2pRouterTransportNtcpOutboundNTCP2State_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_stateLock_, new_NSObject_init());
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_con_, con);
  JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_INIT));
  JreStrongAssignAndConsume(&self->_tmp_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_TOTAL1_MAX]);
  @try {
    JreStrongAssignAndConsume(&self->_handshakeState_, new_ComSouthernstormNoiseProtocolHandshakeState_initWithInt_withNetI2pRouterTransportCryptoX25519KeyFactory_(ComSouthernstormNoiseProtocolHandshakeState_INITIATOR, [((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getXDHFactory]));
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"bad proto", gse);
  }
  JreStrongAssign(&self->_aliceRI_, [((NetI2pRouterRouter *) nil_chk([ctx router])) getRouterInfo]);
  if (self->_aliceRI_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"no RI yet");
  self->_aliceRISize_ = ((IOSByteArray *) nil_chk([self->_aliceRI_ toByteArray]))->size_;
  self->_padlen3_ = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:NetI2pRouterTransportNtcpOutboundNTCP2State_PADDING3_MAX];
  NetI2pDataHash *h = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) getRemotePeer])) calculateHash];
  JreStrongAssignAndConsume(&self->_bobHash_, new_NetI2pDataSessionKey_initWithByteArray_([((NetI2pDataHash *) nil_chk(h)) getData]));
  NSString *s = [((NetI2pDataRouterRouterAddress *) nil_chk([self->_con_ getRemoteAddress])) getOptionWithNSString:@"i"];
  if (s == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"no NTCP2 IV");
  JreStrongAssign(&self->_bobIV_, NetI2pDataBase64_decodeWithNSString_(s));
  if (self->_bobIV_ == nil || self->_bobIV_->size_ != NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE || NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(self->_bobIV_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_IV_SIZE)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bad NTCP2 IV");
}

NetI2pRouterTransportNtcpOutboundNTCP2State *new_NetI2pRouterTransportNtcpOutboundNTCP2State_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportNtcpOutboundNTCP2State, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_, ctx, transport, con)
}

NetI2pRouterTransportNtcpOutboundNTCP2State *create_NetI2pRouterTransportNtcpOutboundNTCP2State_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportNtcpNTCPTransport *transport, NetI2pRouterTransportNtcpNTCPConnection *con) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportNtcpOutboundNTCP2State, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportNtcpNTCPTransport_withNetI2pRouterTransportNtcpNTCPConnection_, ctx, transport, con)
}

void NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, NetI2pRouterTransportNtcpOutboundNTCP2State_State *state) {
  @synchronized(self->_stateLock_) {
    JreStrongAssign(&self->_state_, state);
  }
}

void NetI2pRouterTransportNtcpOutboundNTCP2State_receiveOutboundWithJavaNioByteBuffer_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, JavaNioByteBuffer *src) {
  if (self->_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_SENT_X) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE - self->_received_);
    [src getWithByteArray:self->_tmp_ withInt:self->_received_ withInt:toGet];
    self->_received_ += toGet;
    if (self->_received_ < NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE) return;
    [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) aes])) decryptWithByteArray:self->_tmp_ withInt:0 withByteArray:self->_tmp_ withInt:0 withNetI2pDataSessionKey:self->_bobHash_ withByteArray:self->_bobIV_ withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE];
    if (NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(self->_tmp_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROKEY, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) {
      [self failWithNSString:@"Bad msg 2, Y = 0"];
      return;
    }
    IOSByteArray *options2 = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS2_SIZE];
    @try {
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) readMessageWithByteArray:self->_tmp_ withInt:0 withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG2_SIZE withByteArray:options2 withInt:0];
    }
    @catch (JavaSecurityGeneralSecurityException *gse) {
      [self failWithNSString:JreStrcat("$$", @"Bad msg 2, Y = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_tmp_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) withJavaLangException:gse];
      return;
    }
    @catch (JavaLangRuntimeException *re) {
      [self failWithNSString:JreStrcat("$$", @"Bad msg 2, Y = ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(self->_tmp_, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE)) withJavaLangException:re];
      return;
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After msg 2: ", [self->_handshakeState_ description])];
    self->_padlen2_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options2, 2, 2);
    jlong tsB = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(options2, 8, 4);
    jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
    jlong rtt = now - [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) getCreated];
    self->_peerSkew_ = (now - (tsB * 1000) - (rtt / 2) + 500) / 1000;
    if (self->_peerSkew_ > NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW || self->_peerSkew_ < 0 - NetI2pRouterTransportNtcpOutboundNTCP2State_MAX_SKEW) {
      [self failWithNSString:JreStrcat("$J", @"Clock Skew: ", self->_peerSkew_) withJavaLangException:nil withBoolean:true];
      return;
    }
    NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_HXY));
    self->_received_ = 0;
  }
  if (self->_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_HXY) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    jint toGet = JavaLangMath_minWithInt_withInt_([((JavaNioByteBuffer *) nil_chk(src)) remaining], self->_padlen2_ - self->_received_);
    [src getWithByteArray:self->_tmp_ withInt:self->_received_ withInt:toGet];
    self->_received_ += toGet;
    if (self->_received_ < self->_padlen2_) return;
    if (self->_padlen2_ > 0) {
      [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) mixHashWithByteArray:self->_tmp_ withInt:0 withInt:self->_padlen2_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$I$$", @"After mixhash padding ", self->_padlen2_, @" msg 2: ", [self->_handshakeState_ description])];
    }
    NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_PADDING));
    if ([src hasRemaining]) {
      [self failWithNSString:JreStrcat("$I", @"Extra data after msg 2: ", [src remaining])];
      return;
    }
    NetI2pRouterTransportNtcpOutboundNTCP2State_prepareOutbound3(self);
    return;
  }
  if ((self->_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED) || self->_state_ == JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT)) && [((JavaNioByteBuffer *) nil_chk(src)) hasRemaining]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"Received unexpected ", [((JavaNioByteBuffer *) nil_chk(src)) remaining], @" on ", self) withJavaLangThrowable:create_JavaLangException_init()];
  }
}

void NetI2pRouterTransportNtcpOutboundNTCP2State_prepareOutbound3(NetI2pRouterTransportNtcpOutboundNTCP2State *self) {
  jint msg3p2len = NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + 1 + self->_aliceRISize_ + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS3_SIZE + NetI2pRouterTransportNtcpNTCP2Payload_BLOCK_HEADER_SIZE + self->_padlen3_;
  IOSByteArray *tmp = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE + msg3p2len + NetI2pRouterTransportNtcpOutboundNTCP2State_MAC_SIZE];
  id<JavaUtilList> blocks = create_JavaUtilArrayList_initWithInt_(3);
  NetI2pRouterTransportNtcpNTCP2Payload_Block *block = create_NetI2pRouterTransportNtcpNTCP2Payload_RIBlock_initWithNetI2pDataRouterRouterInfo_withBoolean_(self->_aliceRI_, false);
  [blocks addWithId:block];
  IOSByteArray *opts = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_OPTIONS3_SIZE];
  *IOSByteArray_GetRef(opts, 0) = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT_INT;
  *IOSByteArray_GetRef(opts, 1) = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT_INT;
  *IOSByteArray_GetRef(opts, 2) = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MIN_DEFAULT_INT;
  *IOSByteArray_GetRef(opts, 3) = NetI2pRouterTransportNtcpNTCPConnection_PADDING_MAX_DEFAULT_INT;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(opts, 4, 2, NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(opts, 6, 2, NetI2pRouterTransportNtcpNTCPConnection_DUMMY_DEFAULT);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(opts, 8, 2, NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(opts, 10, 2, NetI2pRouterTransportNtcpNTCPConnection_DELAY_DEFAULT);
  block = create_NetI2pRouterTransportNtcpNTCP2Payload_OptionsBlock_initWithByteArray_(opts);
  [blocks addWithId:block];
  block = create_NetI2pRouterTransportNtcpNTCP2Payload_PaddingBlock_initWithInt_(self->_padlen3_);
  [blocks addWithId:block];
  jint newoff = NetI2pRouterTransportNtcpNTCP2Payload_writePayloadWithByteArray_withInt_withJavaUtilList_(tmp, NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE, blocks);
  jint expect = NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE + msg3p2len;
  if (newoff != expect) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"msg3 size mismatch expected ", expect, @" got ", newoff));
  @try {
    [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) writeMessageWithByteArray:tmp withInt:0 withByteArray:tmp withInt:NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE withInt:msg3p2len];
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    if (![((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ errorWithNSString:@"Bad msg 3 out" withJavaLangThrowable:gse];
    [self failWithNSString:@"Bad msg 3 out" withJavaLangException:gse];
    return;
  }
  @catch (JavaLangRuntimeException *re) {
    if (![((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ errorWithNSString:@"Bad msg 3 out" withJavaLangThrowable:re];
    [self failWithNSString:@"Bad msg 3 out" withJavaLangException:re];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"Sending msg3, part 1 is:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_(tmp, 0, NetI2pRouterTransportNtcpOutboundNTCP2State_MSG3P1_SIZE))];
  [((NetI2pRouterTransportNtcpEventPumper *) nil_chk([((NetI2pRouterTransportNtcpNTCPTransport *) nil_chk(self->_transport_)) getPumper])) wantsWriteWithNetI2pRouterTransportNtcpNTCPConnection:self->_con_ withByteArray:tmp];
  if ([self->_log_ shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$", @"After msg 3: ", [self->_handshakeState_ description])];
  NetI2pRouterTransportNtcpOutboundNTCP2State_setDataPhase(self);
}

void NetI2pRouterTransportNtcpOutboundNTCP2State_setDataPhase(NetI2pRouterTransportNtcpOutboundNTCP2State *self) {
  ComSouthernstormNoiseProtocolCipherStatePair *ckp = [((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(self->_handshakeState_)) split];
  id<ComSouthernstormNoiseProtocolCipherState> rcvr = [((ComSouthernstormNoiseProtocolCipherStatePair *) nil_chk(ckp)) getReceiver];
  id<ComSouthernstormNoiseProtocolCipherState> sender = [ckp getSender];
  IOSObjectArray *sipkeys = NetI2pRouterTransportNtcpOutboundNTCP2State_generateSipHashKeysWithNetI2pRouterRouterContext_withComSouthernstormNoiseProtocolHandshakeState_(self->_context_, self->_handshakeState_);
  IOSByteArray *sip_ab = IOSObjectArray_Get(nil_chk(sipkeys), 0);
  IOSByteArray *sip_ba = IOSObjectArray_Get(sipkeys, 1);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) {
    [self->_log_ debugWithNSString:JreStrcat("$@$$$$", @"Finished establishment for ", self, @"\nGenerated SipHash key for A->B: ", NetI2pDataBase64_encodeWithByteArray_(sip_ab), @"\nGenerated SipHash key for B->A: ", NetI2pDataBase64_encodeWithByteArray_(sip_ba))];
  }
  [((NetI2pRouterTransportNtcpNTCPConnection *) nil_chk(self->_con_)) finishOutboundEstablishmentWithComSouthernstormNoiseProtocolCipherState:sender withComSouthernstormNoiseProtocolCipherState:rcvr withByteArray:sip_ab withByteArray:sip_ba withLong:self->_peerSkew_];
  NetI2pRouterTransportNtcpOutboundNTCP2State_changeStateWithNetI2pRouterTransportNtcpOutboundNTCP2State_State_(self, JreLoadEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED));
  NetI2pRouterTransportNtcpOutboundNTCP2State_releaseBufsWithBoolean_(self, true);
  [self->_handshakeState_ destroy];
  JavaUtilArrays_fillWithByteArray_withByte_(sip_ab, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(sip_ba, (jbyte) 0);
}

IOSObjectArray *NetI2pRouterTransportNtcpOutboundNTCP2State_generateSipHashKeysWithNetI2pRouterRouterContext_withComSouthernstormNoiseProtocolHandshakeState_(NetI2pRouterRouterContext *ctx, ComSouthernstormNoiseProtocolHandshakeState *state) {
  NetI2pRouterTransportNtcpOutboundNTCP2State_initialize();
  NetI2pDataSessionKey *tk = create_NetI2pDataSessionKey_initWithByteArray_([((ComSouthernstormNoiseProtocolHandshakeState *) nil_chk(state)) getChainingKey]);
  IOSByteArray *temp_key = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROLEN);
  tk = create_NetI2pDataSessionKey_initWithByteArray_(temp_key);
  IOSByteArray *ask_master = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, NetI2pRouterTransportNtcpOutboundNTCP2State_ASK);
  IOSByteArray *tmp = [IOSByteArray arrayWithLength:32 + ((IOSByteArray *) nil_chk(NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH))->size_];
  IOSByteArray *hash_ = [state getHandshakeHash];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hash_, 0, tmp, 0, 32);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH, 0, tmp, 32, NetI2pRouterTransportNtcpOutboundNTCP2State_SIPHASH->size_);
  tk = create_NetI2pDataSessionKey_initWithByteArray_(ask_master);
  temp_key = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, tmp);
  tk = create_NetI2pDataSessionKey_initWithByteArray_(temp_key);
  IOSByteArray *sip_master = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, NetI2pRouterTransportNtcpOutboundNTCP2State_ONE);
  tk = create_NetI2pDataSessionKey_initWithByteArray_(sip_master);
  temp_key = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, NetI2pRouterTransportNtcpOutboundNTCP2State_ZEROLEN);
  tk = create_NetI2pDataSessionKey_initWithByteArray_(temp_key);
  IOSByteArray *sip_ab = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, NetI2pRouterTransportNtcpOutboundNTCP2State_ONE);
  tmp = [IOSByteArray arrayWithLength:NetI2pRouterTransportNtcpOutboundNTCP2State_KEY_SIZE + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sip_ab, 0, tmp, 0, 32);
  *IOSByteArray_GetRef(tmp, 32) = 2;
  IOSByteArray *sip_ba = NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(ctx, tk, tmp);
  JavaUtilArrays_fillWithByteArray_withByte_(temp_key, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(tmp, (jbyte) 0);
  return [IOSObjectArray arrayWithObjects:(id[]){ sip_ab, sip_ba } count:2 type:IOSClass_byteArray(1)];
}

IOSByteArray *NetI2pRouterTransportNtcpOutboundNTCP2State_doHMACWithNetI2pRouterRouterContext_withNetI2pDataSessionKey_withByteArray_(NetI2pRouterRouterContext *ctx, NetI2pDataSessionKey *key, IOSByteArray *data) {
  NetI2pRouterTransportNtcpOutboundNTCP2State_initialize();
  IOSByteArray *rv = [IOSByteArray arrayWithLength:32];
  [((NetI2pCryptoHMAC256Generator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) hmac256])) calculateWithNetI2pDataSessionKey:key withByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_ withByteArray:rv withInt:0];
  return rv;
}

void NetI2pRouterTransportNtcpOutboundNTCP2State_releaseBufsWithBoolean_(NetI2pRouterTransportNtcpOutboundNTCP2State *self, jboolean isVerified) {
  JavaUtilArrays_fillWithByteArray_withByte_(self->_tmp_, (jbyte) 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpOutboundNTCP2State)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportNtcpOutboundNTCP2State_State)

NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_[6];

@implementation NetI2pRouterTransportNtcpOutboundNTCP2State_State

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)OB_INIT {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_INIT);
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)OB_SENT_X {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_SENT_X);
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)OB_GOT_HXY {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_HXY);
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)OB_GOT_PADDING {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_PADDING);
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)VERIFIED {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED);
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)CORRUPT {
  return JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_State_values();
}

+ (NetI2pRouterTransportNtcpOutboundNTCP2State_State *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportNtcpOutboundNTCP2State_State_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum)toNSEnum {
  return (NetI2pRouterTransportNtcpOutboundNTCP2State_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OB_INIT", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "OB_SENT_X", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "OB_GOT_HXY", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "OB_GOT_PADDING", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "VERIFIED", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "CORRUPT", "LNetI2pRouterTransportNtcpOutboundNTCP2State_State;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_INIT), &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_SENT_X), &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_HXY), &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, OB_GOT_PADDING), &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, VERIFIED), &JreEnum(NetI2pRouterTransportNtcpOutboundNTCP2State_State, CORRUPT), "LNetI2pRouterTransportNtcpOutboundNTCP2State;", "Ljava/lang/Enum<Lnet/i2p/router/transport/ntcp/OutboundNTCP2State$State;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportNtcpOutboundNTCP2State_State = { "State", "net.i2p.router.transport.ntcp", ptrTable, methods, fields, 7, 0x401a, 2, 6, 8, -1, -1, 9, -1 };
  return &_NetI2pRouterTransportNtcpOutboundNTCP2State_State;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportNtcpOutboundNTCP2State_State class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 6; i++) {
      ((void)(NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportNtcpOutboundNTCP2State_State_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportNtcpOutboundNTCP2State_State_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportNtcpOutboundNTCP2State_State)
  }
}

@end

void NetI2pRouterTransportNtcpOutboundNTCP2State_State_initWithNSString_withInt_(NetI2pRouterTransportNtcpOutboundNTCP2State_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportNtcpOutboundNTCP2State_State_values() {
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_ count:6 type:NetI2pRouterTransportNtcpOutboundNTCP2State_State_class_()];
}

NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_initialize();
  for (int i = 0; i < 6; i++) {
    NetI2pRouterTransportNtcpOutboundNTCP2State_State *e = NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportNtcpOutboundNTCP2State_State *NetI2pRouterTransportNtcpOutboundNTCP2State_State_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportNtcpOutboundNTCP2State_State_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return NetI2pRouterTransportNtcpOutboundNTCP2State_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportNtcpOutboundNTCP2State_State)
