//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/OutboundMessageRegistry.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"

@class NetI2pRouterTransportOutboundMessageRegistry_CleanupTask;

@interface NetI2pRouterTransportOutboundMessageRegistry () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilList> _selectors_;
  id<JavaUtilMap> _selectorToMessage_;
  id<JavaUtilSet> _activeMessages_;
  NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *_cleanupTask_;
  NetI2pRouterRouterContext *_context_;
}

- (void)registerPendingWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                         withBoolean:(jboolean)allowEmpty;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _selectors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _selectorToMessage_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _activeMessages_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _cleanupTask_, NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportOutboundMessageRegistry, _context_, NetI2pRouterRouterContext *)

__attribute__((unused)) static void NetI2pRouterTransportOutboundMessageRegistry_registerPendingWithNetI2pRouterOutNetMessage_withBoolean_(NetI2pRouterTransportOutboundMessageRegistry *self, NetI2pRouterOutNetMessage *msg, jboolean allowEmpty);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportOutboundMessageRegistry__Annotations$0(void);

@interface NetI2pRouterTransportOutboundMessageRegistry_CleanupTask : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTransportOutboundMessageRegistry *this$0_;
  jlong _nextExpire_;
}

- (instancetype)initWithNetI2pRouterTransportOutboundMessageRegistry:(NetI2pRouterTransportOutboundMessageRegistry *)outer$;

- (void)timeReached;

- (void)scheduleExpirationWithNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)sel;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask)

__attribute__((unused)) static void NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *self, NetI2pRouterTransportOutboundMessageRegistry *outer$);

__attribute__((unused)) static NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *new_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *create_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask)

@implementation NetI2pRouterTransportOutboundMessageRegistry

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTransportOutboundMessageRegistry_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)shutdown {
  @synchronized(_selectors_) {
    [((id<JavaUtilList>) nil_chk(_selectors_)) clear];
  }
  @synchronized(_selectorToMessage_) {
    [((id<JavaUtilMap>) nil_chk(_selectorToMessage_)) clear];
  }
  [((id<JavaUtilSet>) nil_chk(_activeMessages_)) clear];
}

- (void)restart {
  [self shutdown];
}

- (id<JavaUtilList>)getOriginalMessagesWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  id<JavaUtilList> matchedSelectors = nil;
  id<JavaUtilList> removedSelectors = nil;
  @synchronized(_selectors_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_selectors_)) size]; i++) {
      id<NetI2pRouterMessageSelector> sel = [_selectors_ getWithInt:i];
      jboolean isMatch = [((id<NetI2pRouterMessageSelector>) nil_chk(sel)) isMatchWithNetI2pDataI2npI2NPMessage:message];
      if (isMatch) {
        if (matchedSelectors == nil) matchedSelectors = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(1));
        [matchedSelectors addWithId:sel];
        if (![sel continueMatching]) {
          if (removedSelectors == nil) removedSelectors = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(1));
          [removedSelectors addWithId:sel];
          [_selectors_ removeWithInt:i];
          i--;
        }
      }
    }
  }
  id<JavaUtilList> rv;
  if (matchedSelectors != nil) {
    rv = create_JavaUtilArrayList_initWithInt_([matchedSelectors size]);
    for (id<NetI2pRouterMessageSelector> __strong sel in matchedSelectors) {
      jboolean removed = false;
      NetI2pRouterOutNetMessage *msg = nil;
      id<JavaUtilList> msgs = nil;
      @synchronized(_selectorToMessage_) {
        id o = nil;
        if ((removedSelectors != nil) && ([((id<JavaUtilList>) nil_chk(removedSelectors)) containsWithId:sel])) {
          o = [((id<JavaUtilMap>) nil_chk(_selectorToMessage_)) removeWithId:sel];
          removed = true;
        }
        else {
          o = [((id<JavaUtilMap>) nil_chk(_selectorToMessage_)) getWithId:sel];
        }
        if ([o isKindOfClass:[NetI2pRouterOutNetMessage class]]) {
          msg = JreRetainedLocalValue((NetI2pRouterOutNetMessage *) cast_chk(o, [NetI2pRouterOutNetMessage class]));
          [rv addWithId:msg];
        }
        else if ([JavaUtilList_class_() isInstance:o]) {
          msgs = JreRetainedLocalValue((id<JavaUtilList>) cast_check(o, JavaUtilList_class_()));
          [rv addAllWithJavaUtilCollection:msgs];
        }
      }
      if (removed) {
        if (msg != nil) {
          [((id<JavaUtilSet>) nil_chk(_activeMessages_)) removeWithId:msg];
        }
        else if (msgs != nil) {
          [((id<JavaUtilSet>) nil_chk(_activeMessages_)) removeAllWithJavaUtilCollection:msgs];
        }
      }
    }
  }
  else {
    rv = JavaUtilCollections_emptyList();
  }
  return rv;
}

- (NetI2pRouterOutNetMessage *)registerPendingWithNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)replySelector
                                                     withNetI2pRouterReplyJob:(id<NetI2pRouterReplyJob>)onReply
                                                          withNetI2pRouterJob:(id<NetI2pRouterJob>)onTimeout {
  NetI2pRouterOutNetMessage *msg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_(_context_);
  [msg setOnFailedReplyJobWithNetI2pRouterJob:onTimeout];
  [msg setOnReplyJobWithNetI2pRouterReplyJob:onReply];
  [msg setReplySelectorWithNetI2pRouterMessageSelector:replySelector];
  NetI2pRouterTransportOutboundMessageRegistry_registerPendingWithNetI2pRouterOutNetMessage_withBoolean_(self, msg, true);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@$@", @"Registered: ", replySelector, @" with reply job ", onReply, @" and timeout job ", onTimeout)];
  return msg;
}

- (void)registerPendingWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportOutboundMessageRegistry_registerPendingWithNetI2pRouterOutNetMessage_withBoolean_(self, msg, false);
}

- (void)registerPendingWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                         withBoolean:(jboolean)allowEmpty {
  NetI2pRouterTransportOutboundMessageRegistry_registerPendingWithNetI2pRouterOutNetMessage_withBoolean_(self, msg, allowEmpty);
}

- (void)unregisterPendingWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if (msg == nil) return;
  id<NetI2pRouterMessageSelector> sel = [msg getReplySelector];
  jboolean stillActive = false;
  @synchronized(_selectorToMessage_) {
    id old = [((id<JavaUtilMap>) nil_chk(_selectorToMessage_)) removeWithId:sel];
    if (old != nil) {
      if ([JavaUtilList_class_() isInstance:old]) {
        id<JavaUtilList> l = (id<JavaUtilList>) cast_check(old, JavaUtilList_class_());
        [l removeWithId:msg];
        if (![l isEmpty]) {
          [_selectorToMessage_ putWithId:sel withId:l];
          stillActive = true;
        }
      }
    }
  }
  if (!stillActive) @synchronized(_selectors_) {
    [((id<JavaUtilList>) nil_chk(_selectors_)) removeWithId:sel];
  }
  [((id<JavaUtilSet>) nil_chk(_activeMessages_)) removeWithId:msg];
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_selectors_);
  RELEASE_(_selectorToMessage_);
  RELEASE_(_activeMessages_);
  RELEASE_(_cleanupTask_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, 12, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(getOriginalMessagesWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(registerPendingWithNetI2pRouterMessageSelector:withNetI2pRouterReplyJob:withNetI2pRouterJob:);
  methods[5].selector = @selector(registerPendingWithNetI2pRouterOutNetMessage:);
  methods[6].selector = @selector(registerPendingWithNetI2pRouterOutNetMessage:withBoolean:);
  methods[7].selector = @selector(unregisterPendingWithNetI2pRouterOutNetMessage:);
  methods[8].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_selectors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_selectorToMessage_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "_activeMessages_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "_cleanupTask_", "LNetI2pRouterTransportOutboundMessageRegistry_CleanupTask;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "getOriginalMessages", "LNetI2pDataI2npI2NPMessage;", "(Lnet/i2p/data/i2np/I2NPMessage;)Ljava/util/List<Lnet/i2p/router/OutNetMessage;>;", "registerPending", "LNetI2pRouterMessageSelector;LNetI2pRouterReplyJob;LNetI2pRouterJob;", "LNetI2pRouterOutNetMessage;", "LNetI2pRouterOutNetMessage;Z", "unregisterPending", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterTransportOutboundMessageRegistry__Annotations$0, "Ljava/util/List<Lnet/i2p/router/MessageSelector;>;", "Ljava/util/Map<Lnet/i2p/router/MessageSelector;Ljava/lang/Object;>;", "Ljava/util/Set<Lnet/i2p/router/OutNetMessage;>;", "LNetI2pRouterTransportOutboundMessageRegistry_CleanupTask;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportOutboundMessageRegistry = { "OutboundMessageRegistry", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, 16, -1, -1, -1 };
  return &_NetI2pRouterTransportOutboundMessageRegistry;
}

@end

void NetI2pRouterTransportOutboundMessageRegistry_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportOutboundMessageRegistry *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportOutboundMessageRegistry_class_()]);
  JreStrongAssignAndConsume(&self->_selectors_, new_JavaUtilArrayList_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_selectorToMessage_, new_JavaUtilHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_activeMessages_, new_NetI2pUtilConcurrentHashSet_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_cleanupTask_, new_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(self));
}

NetI2pRouterTransportOutboundMessageRegistry *new_NetI2pRouterTransportOutboundMessageRegistry_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportOutboundMessageRegistry, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTransportOutboundMessageRegistry *create_NetI2pRouterTransportOutboundMessageRegistry_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportOutboundMessageRegistry, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterTransportOutboundMessageRegistry_registerPendingWithNetI2pRouterOutNetMessage_withBoolean_(NetI2pRouterTransportOutboundMessageRegistry *self, NetI2pRouterOutNetMessage *msg, jboolean allowEmpty) {
  if ((!allowEmpty) && ([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessage] == nil)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"OutNetMessage doesn't contain an I2NPMessage? Impossible?");
  id<NetI2pRouterMessageSelector> sel = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getReplySelector];
  if (sel == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No reply selector? Impossible?");
  if (![((id<JavaUtilSet>) nil_chk(self->_activeMessages_)) addWithId:msg]) return;
  @synchronized(self->_selectorToMessage_) {
    id oldMsg = [((id<JavaUtilMap>) nil_chk(self->_selectorToMessage_)) putWithId:sel withId:msg];
    if (oldMsg != nil) {
      id<JavaUtilList> multi = nil;
      if ([oldMsg isKindOfClass:[NetI2pRouterOutNetMessage class]]) {
        multi = create_JavaUtilArrayList_initWithInt_(4);
        [multi addWithId:(NetI2pRouterOutNetMessage *) cast_chk(oldMsg, [NetI2pRouterOutNetMessage class])];
        [multi addWithId:msg];
        [self->_selectorToMessage_ putWithId:sel withId:multi];
      }
      else if ([JavaUtilList_class_() isInstance:oldMsg]) {
        multi = (id<JavaUtilList>) cast_check(oldMsg, JavaUtilList_class_());
        [multi addWithId:msg];
        [self->_selectorToMessage_ putWithId:sel withId:multi];
      }
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@C", @"a single message selector [", sel, @"] with multiple messages (", multi, ')')];
    }
  }
  @synchronized(self->_selectors_) {
    [((id<JavaUtilList>) nil_chk(self->_selectors_)) addWithId:sel];
  }
  [((NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *) nil_chk(self->_cleanupTask_)) scheduleExpirationWithNetI2pRouterMessageSelector:sel];
}

IOSObjectArray *NetI2pRouterTransportOutboundMessageRegistry__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportOutboundMessageRegistry)

@implementation NetI2pRouterTransportOutboundMessageRegistry_CleanupTask

- (instancetype)initWithNetI2pRouterTransportOutboundMessageRegistry:(NetI2pRouterTransportOutboundMessageRegistry *)outer$ {
  NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(self, outer$);
  return self;
}

- (void)timeReached {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  id<JavaUtilList> removing = create_JavaUtilArrayList_initWithInt_(8);
  @synchronized(this$0_->_selectors_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(this$0_->_selectors_)) size]; i++) {
      id<NetI2pRouterMessageSelector> sel = [this$0_->_selectors_ getWithInt:i];
      jlong expiration = [((id<NetI2pRouterMessageSelector>) nil_chk(sel)) getExpiration];
      if (expiration <= now) {
        [removing addWithId:sel];
        [this$0_->_selectors_ removeWithInt:i];
        i--;
      }
      else if (expiration < _nextExpire_ || _nextExpire_ < now) {
        _nextExpire_ = expiration;
      }
    }
  }
  jboolean log = [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG];
  if (![removing isEmpty]) {
    for (id<NetI2pRouterMessageSelector> __strong sel in removing) {
      NetI2pRouterOutNetMessage *msg = nil;
      id<JavaUtilList> msgs = nil;
      @synchronized(this$0_->_selectorToMessage_) {
        id o = [((id<JavaUtilMap>) nil_chk(this$0_->_selectorToMessage_)) removeWithId:sel];
        if ([o isKindOfClass:[NetI2pRouterOutNetMessage class]]) {
          msg = JreRetainedLocalValue((NetI2pRouterOutNetMessage *) cast_chk(o, [NetI2pRouterOutNetMessage class]));
        }
        else if ([JavaUtilList_class_() isInstance:o]) {
          msgs = JreRetainedLocalValue((id<JavaUtilList>) cast_check(o, JavaUtilList_class_()));
        }
      }
      if (msg != nil) {
        [((id<JavaUtilSet>) nil_chk(this$0_->_activeMessages_)) removeWithId:msg];
        id<NetI2pRouterJob> fail = [msg getOnFailedReplyJob];
        if (fail != nil) [((NetI2pRouterJobQueue *) nil_chk([this$0_->_context_ jobQueue])) addJobWithNetI2pRouterJob:fail];
        if (log) [this$0_->_log_ debugWithNSString:JreStrcat("$@$@", @"Expired: ", sel, @" with timeout job ", fail)];
      }
      else if (msgs != nil) {
        [((id<JavaUtilSet>) nil_chk(this$0_->_activeMessages_)) removeAllWithJavaUtilCollection:msgs];
        for (NetI2pRouterOutNetMessage * __strong m in msgs) {
          id<NetI2pRouterJob> fail = [((NetI2pRouterOutNetMessage *) nil_chk(m)) getOnFailedReplyJob];
          if (fail != nil) [((NetI2pRouterJobQueue *) nil_chk([this$0_->_context_ jobQueue])) addJobWithNetI2pRouterJob:fail];
          if (log) [this$0_->_log_ debugWithNSString:JreStrcat("$@$@", @"Expired: ", sel, @" with timeout job(s) ", fail)];
        }
      }
      else {
        if (log) [this$0_->_log_ debugWithNSString:JreStrcat("$@$", @"Expired: ", sel, @" with no known messages")];
      }
    }
  }
  if (log) {
    jint e = [removing size];
    jint r;
    @synchronized(this$0_->_selectors_) {
      r = [this$0_->_selectors_ size];
    }
    jint a = [((id<JavaUtilSet>) nil_chk(this$0_->_activeMessages_)) size];
    if (r > 0 || e > 0 || a > 0) [this$0_->_log_ debugWithNSString:JreStrcat("$I$I$I", @"Expired: ", e, @" remaining: ", r, @" active: ", a)];
  }
  @synchronized(this$0_->_selectors_) {
    if (_nextExpire_ <= now) _nextExpire_ = now + 10 * 1000;
    [self scheduleWithLong:_nextExpire_ - now];
  }
}

- (void)scheduleExpirationWithNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)sel {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  @synchronized(this$0_->_selectors_) {
    if ((_nextExpire_ <= now) || ([((id<NetI2pRouterMessageSelector>) nil_chk(sel)) getExpiration] < _nextExpire_)) {
      _nextExpire_ = [((id<NetI2pRouterMessageSelector>) nil_chk(sel)) getExpiration];
      [self rescheduleWithLong:_nextExpire_ - now];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportOutboundMessageRegistry:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(scheduleExpirationWithNetI2pRouterMessageSelector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportOutboundMessageRegistry;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_nextExpire_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "scheduleExpiration", "LNetI2pRouterMessageSelector;", "LNetI2pRouterTransportOutboundMessageRegistry;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportOutboundMessageRegistry_CleanupTask = { "CleanupTask", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 3, 2, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask;
}

@end

void NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *self, NetI2pRouterTransportOutboundMessageRegistry *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  self->_nextExpire_ = -1;
}

NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *new_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask, initWithNetI2pRouterTransportOutboundMessageRegistry_, outer$)
}

NetI2pRouterTransportOutboundMessageRegistry_CleanupTask *create_NetI2pRouterTransportOutboundMessageRegistry_CleanupTask_initWithNetI2pRouterTransportOutboundMessageRegistry_(NetI2pRouterTransportOutboundMessageRegistry *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask, initWithNetI2pRouterTransportOutboundMessageRegistry_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportOutboundMessageRegistry_CleanupTask)
