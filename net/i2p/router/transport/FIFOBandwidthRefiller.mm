//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/FIFOBandwidthRefiller.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/FIFOBandwidthRefiller.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportFIFOBandwidthRefiller () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  NetI2pRouterTransportFIFOBandwidthLimiter *_limiter_;
  jint _inboundKBytesPerSecond_;
  jint _outboundKBytesPerSecond_;
  jint _inboundBurstKBytesPerSecond_;
  jint _outboundBurstKBytesPerSecond_;
  jlong _lastRefillTime_;
  jlong _lastCheckConfigTime_;
  jlong _configCheckPeriodMs_;
  volatile_jboolean _isRunning_;
  JavaUtilConcurrentAtomicAtomicInteger *_currentParticipating_;
  jlong _lastPartUpdateTime_;
  jint _lastTotal_;
  jlong _lastTotalTime_;
  jint _lastIndex_;
  IOSIntArray *_counts_;
  IOSLongArray *_times_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *_updateLock_;
}

- (jboolean)updateQueuesWithJavaUtilList:(id<JavaUtilList>)buffer
                                withLong:(jlong)now;

- (void)checkConfig;

- (void)updateInboundRate;

- (void)updateOutboundRate;

- (void)updateInboundBurstRate;

- (void)updateOutboundBurstRate;

- (void)updateInboundPeak;

- (void)updateOutboundPeak;

- (jint)locked_getCurrentParticipatingBandwidth;

- (void)updateParticipatingWithLong:(jlong)now;

- (void)locked_updateParticipatingWithLong:(jlong)now;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _limiter_, NetI2pRouterTransportFIFOBandwidthLimiter *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _currentParticipating_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _counts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _times_, IOSLongArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportFIFOBandwidthRefiller, _updateLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)

inline jlong NetI2pRouterTransportFIFOBandwidthRefiller_get_REPLENISH_FREQUENCY(void);
#define NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY 40LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportFIFOBandwidthRefiller, REPLENISH_FREQUENCY, jlong)

inline jint NetI2pRouterTransportFIFOBandwidthRefiller_get_TOTAL_TIME(void);
#define NetI2pRouterTransportFIFOBandwidthRefiller_TOTAL_TIME 4000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportFIFOBandwidthRefiller, TOTAL_TIME, jint)

inline jint NetI2pRouterTransportFIFOBandwidthRefiller_get_PERIODS(void);
#define NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportFIFOBandwidthRefiller, PERIODS, jint)

__attribute__((unused)) static jboolean NetI2pRouterTransportFIFOBandwidthRefiller_updateQueuesWithJavaUtilList_withLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, id<JavaUtilList> buffer, jlong now);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_checkConfig(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundRate(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundRate(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundBurstRate(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundBurstRate(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundPeak(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundPeak(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static jint NetI2pRouterTransportFIFOBandwidthRefiller_locked_getCurrentParticipatingBandwidth(NetI2pRouterTransportFIFOBandwidthRefiller *self);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_updateParticipatingWithLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, jlong now);

__attribute__((unused)) static void NetI2pRouterTransportFIFOBandwidthRefiller_locked_updateParticipatingWithLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, jlong now);

NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH = @"i2np.bandwidth.inboundKBytesPerSecond";
NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH = @"i2np.bandwidth.outboundKBytesPerSecond";
NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BURST_BANDWIDTH = @"i2np.bandwidth.inboundBurstKBytesPerSecond";
NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BURST_BANDWIDTH = @"i2np.bandwidth.outboundBurstKBytesPerSecond";
NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH_PEAK = @"i2np.bandwidth.inboundBurstKBytes";
NSString *NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH_PEAK = @"i2np.bandwidth.outboundBurstKBytes";

@implementation NetI2pRouterTransportFIFOBandwidthRefiller

+ (NSString *)PROP_INBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH;
}

+ (NSString *)PROP_OUTBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH;
}

+ (NSString *)PROP_INBOUND_BURST_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BURST_BANDWIDTH;
}

+ (NSString *)PROP_OUTBOUND_BURST_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BURST_BANDWIDTH;
}

+ (NSString *)PROP_INBOUND_BANDWIDTH_PEAK {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH_PEAK;
}

+ (NSString *)PROP_OUTBOUND_BANDWIDTH_PEAK {
  return NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH_PEAK;
}

+ (jint)DEFAULT_INBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BANDWIDTH;
}

+ (jint)DEFAULT_OUTBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BANDWIDTH;
}

+ (jint)DEFAULT_INBOUND_BURST_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BURST_BANDWIDTH;
}

+ (jint)DEFAULT_OUTBOUND_BURST_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BURST_BANDWIDTH;
}

+ (jint)DEFAULT_BURST_SECONDS {
  return NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_BURST_SECONDS;
}

+ (jint)MIN_INBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH;
}

+ (jint)MIN_OUTBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH;
}

+ (jint)MIN_INBOUND_BANDWIDTH_PEAK {
  return NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH_PEAK;
}

+ (jint)MIN_OUTBOUND_BANDWIDTH_PEAK {
  return NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH_PEAK;
}

+ (jint)MAX_OUTBOUND_BANDWIDTH {
  return NetI2pRouterTransportFIFOBandwidthRefiller_MAX_OUTBOUND_BANDWIDTH;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
withNetI2pRouterTransportFIFOBandwidthLimiter:(NetI2pRouterTransportFIFOBandwidthLimiter *)limiter {
  NetI2pRouterTransportFIFOBandwidthRefiller_initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_(self, context, limiter);
  return self;
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isRunning_, false);
  }
}

- (void)run {
  _lastRefillTime_ = [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(_limiter_)) now];
  id<JavaUtilList> buffer = create_JavaUtilArrayList_initWithInt_(2);
  while (JreLoadVolatileBoolean(&_isRunning_)) {
    jlong now = [_limiter_ now];
    if (now >= _lastCheckConfigTime_ + _configCheckPeriodMs_) {
      NetI2pRouterTransportFIFOBandwidthRefiller_checkConfig(self);
      now = [_limiter_ now];
      _lastCheckConfigTime_ = now;
    }
    NetI2pRouterTransportFIFOBandwidthRefiller_updateParticipatingWithLong_(self, now);
    jboolean updated = NetI2pRouterTransportFIFOBandwidthRefiller_updateQueuesWithJavaUtilList_withLong_(self, buffer, now);
    if (updated) {
      _lastRefillTime_ = now;
    }
    @try {
      JavaLangThread_sleepWithLong_(NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (void)reinitialize {
  @synchronized(self) {
    _lastRefillTime_ = [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(_limiter_)) now];
    NetI2pRouterTransportFIFOBandwidthRefiller_checkConfig(self);
    _lastCheckConfigTime_ = _lastRefillTime_;
  }
}

- (jboolean)updateQueuesWithJavaUtilList:(id<JavaUtilList>)buffer
                                withLong:(jlong)now {
  return NetI2pRouterTransportFIFOBandwidthRefiller_updateQueuesWithJavaUtilList_withLong_(self, buffer, now);
}

- (void)checkConfig {
  NetI2pRouterTransportFIFOBandwidthRefiller_checkConfig(self);
}

- (void)updateInboundRate {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundRate(self);
}

- (void)updateOutboundRate {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundRate(self);
}

- (void)updateInboundBurstRate {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundBurstRate(self);
}

- (void)updateOutboundBurstRate {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundBurstRate(self);
}

- (void)updateInboundPeak {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundPeak(self);
}

- (void)updateOutboundPeak {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundPeak(self);
}

- (jint)getOutboundKBytesPerSecond {
  return _outboundKBytesPerSecond_;
}

- (jint)getInboundKBytesPerSecond {
  return _inboundKBytesPerSecond_;
}

- (jint)getOutboundBurstKBytesPerSecond {
  return _outboundBurstKBytesPerSecond_;
}

- (jint)getInboundBurstKBytesPerSecond {
  return _inboundBurstKBytesPerSecond_;
}

- (void)incrementParticipatingMessageBytesWithInt:(jint)size {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_currentParticipating_)) addAndGetWithInt:size];
}

- (jint)getCurrentParticipatingBandwidth {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_updateLock_)) readLock])) lock];
  @try {
    return NetI2pRouterTransportFIFOBandwidthRefiller_locked_getCurrentParticipatingBandwidth(self);
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([_updateLock_ readLock])) unlock];
  }
}

- (jint)locked_getCurrentParticipatingBandwidth {
  return NetI2pRouterTransportFIFOBandwidthRefiller_locked_getCurrentParticipatingBandwidth(self);
}

- (void)updateParticipatingWithLong:(jlong)now {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateParticipatingWithLong_(self, now);
}

- (void)locked_updateParticipatingWithLong:(jlong)now {
  NetI2pRouterTransportFIFOBandwidthRefiller_locked_updateParticipatingWithLong_(self, now);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_limiter_);
  RELEASE_(_currentParticipating_);
  RELEASE_(_counts_);
  RELEASE_(_times_);
  RELEASE_(_updateLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTransportFIFOBandwidthLimiter:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(reinitialize);
  methods[4].selector = @selector(updateQueuesWithJavaUtilList:withLong:);
  methods[5].selector = @selector(checkConfig);
  methods[6].selector = @selector(updateInboundRate);
  methods[7].selector = @selector(updateOutboundRate);
  methods[8].selector = @selector(updateInboundBurstRate);
  methods[9].selector = @selector(updateOutboundBurstRate);
  methods[10].selector = @selector(updateInboundPeak);
  methods[11].selector = @selector(updateOutboundPeak);
  methods[12].selector = @selector(getOutboundKBytesPerSecond);
  methods[13].selector = @selector(getInboundKBytesPerSecond);
  methods[14].selector = @selector(getOutboundBurstKBytesPerSecond);
  methods[15].selector = @selector(getInboundBurstKBytesPerSecond);
  methods[16].selector = @selector(incrementParticipatingMessageBytesWithInt:);
  methods[17].selector = @selector(getCurrentParticipatingBandwidth);
  methods[18].selector = @selector(locked_getCurrentParticipatingBandwidth);
  methods[19].selector = @selector(updateParticipatingWithLong:);
  methods[20].selector = @selector(locked_updateParticipatingWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_limiter_", "LNetI2pRouterTransportFIFOBandwidthLimiter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inboundKBytesPerSecond_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outboundKBytesPerSecond_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inboundBurstKBytesPerSecond_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outboundBurstKBytesPerSecond_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastRefillTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastCheckConfigTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_configCheckPeriodMs_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "PROP_INBOUND_BANDWIDTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "PROP_OUTBOUND_BANDWIDTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "PROP_INBOUND_BURST_BANDWIDTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "PROP_OUTBOUND_BURST_BANDWIDTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "PROP_INBOUND_BANDWIDTH_PEAK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "PROP_OUTBOUND_BANDWIDTH_PEAK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "DEFAULT_INBOUND_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_OUTBOUND_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_INBOUND_BURST_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BURST_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_OUTBOUND_BURST_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BURST_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BURST_SECONDS", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_BURST_SECONDS, 0x19, -1, -1, -1, -1 },
    { "MIN_INBOUND_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "MIN_OUTBOUND_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "MIN_INBOUND_BANDWIDTH_PEAK", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH_PEAK, 0x19, -1, -1, -1, -1 },
    { "MIN_OUTBOUND_BANDWIDTH_PEAK", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH_PEAK, 0x19, -1, -1, -1, -1 },
    { "MAX_OUTBOUND_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_MAX_OUTBOUND_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "REPLENISH_FREQUENCY", "J", .constantValue.asLong = NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY, 0x1a, -1, -1, -1, -1 },
    { "TOTAL_TIME", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_TOTAL_TIME, 0x1a, -1, -1, -1, -1 },
    { "PERIODS", "I", .constantValue.asInt = NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS, 0x1a, -1, -1, -1, -1 },
    { "_currentParticipating_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastPartUpdateTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTotal_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTotalTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_counts_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_times_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_updateLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pRouterTransportFIFOBandwidthLimiter;", "updateQueues", "LJavaUtilList;J", "(Ljava/util/List<Lnet/i2p/router/transport/FIFOBandwidthLimiter$Request;>;J)Z", "incrementParticipatingMessageBytes", "I", "updateParticipating", "J", "locked_updateParticipating", &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH, &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH, &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BURST_BANDWIDTH, &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BURST_BANDWIDTH, &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH_PEAK, &NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH_PEAK };
  static const J2ObjcClassInfo _NetI2pRouterTransportFIFOBandwidthRefiller = { "FIFOBandwidthRefiller", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 21, 38, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportFIFOBandwidthRefiller;
}

@end

void NetI2pRouterTransportFIFOBandwidthRefiller_initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_(NetI2pRouterTransportFIFOBandwidthRefiller *self, NetI2pI2PAppContext *context, NetI2pRouterTransportFIFOBandwidthLimiter *limiter) {
  NSObject_init(self);
  self->_configCheckPeriodMs_ = 60 * 1000;
  JreStrongAssignAndConsume(&self->_currentParticipating_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_counts_, [IOSIntArray newArrayWithLength:NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS]);
  JreStrongAssignAndConsume(&self->_times_, [IOSLongArray newArrayWithLength:NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS]);
  JreStrongAssignAndConsume(&self->_updateLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(false));
  JreStrongAssign(&self->_limiter_, limiter);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTransportFIFOBandwidthRefiller_class_()]);
  [self reinitialize];
  JreAssignVolatileBoolean(&self->_isRunning_, true);
}

NetI2pRouterTransportFIFOBandwidthRefiller *new_NetI2pRouterTransportFIFOBandwidthRefiller_initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_(NetI2pI2PAppContext *context, NetI2pRouterTransportFIFOBandwidthLimiter *limiter) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportFIFOBandwidthRefiller, initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_, context, limiter)
}

NetI2pRouterTransportFIFOBandwidthRefiller *create_NetI2pRouterTransportFIFOBandwidthRefiller_initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_(NetI2pI2PAppContext *context, NetI2pRouterTransportFIFOBandwidthLimiter *limiter) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportFIFOBandwidthRefiller, initWithNetI2pI2PAppContext_withNetI2pRouterTransportFIFOBandwidthLimiter_, context, limiter)
}

jboolean NetI2pRouterTransportFIFOBandwidthRefiller_updateQueuesWithJavaUtilList_withLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, id<JavaUtilList> buffer, jlong now) {
  jlong numMs = (now - self->_lastRefillTime_);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$$$I$IC", @"Updating bandwidth after ", numMs, @" (status: ", [((JavaLangStringBuilder *) nil_chk([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) getStatus])) description], @" rate in=", self->_inboundKBytesPerSecond_, @", out=", self->_outboundKBytesPerSecond_, ')')];
  if (numMs >= NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY * 50 || numMs <= 0) numMs = NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY;
  if (numMs >= NetI2pRouterTransportFIFOBandwidthRefiller_REPLENISH_FREQUENCY) {
    jlong inboundToAdd = (1024 * self->_inboundKBytesPerSecond_ * numMs) / 1000;
    jlong outboundToAdd = (1024 * self->_outboundKBytesPerSecond_ * numMs) / 1000;
    if (inboundToAdd < 0) inboundToAdd = 0;
    if (outboundToAdd < 0) outboundToAdd = 0;
    jlong maxBurstIn = ((self->_inboundBurstKBytesPerSecond_ - self->_inboundKBytesPerSecond_) * 1024 * numMs) / 1000;
    jlong maxBurstOut = ((self->_outboundBurstKBytesPerSecond_ - self->_outboundKBytesPerSecond_) * 1024 * numMs) / 1000;
    [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) refillBandwidthQueuesWithJavaUtilList:buffer withLong:inboundToAdd withLong:outboundToAdd withLong:maxBurstIn withLong:maxBurstOut];
    return true;
  }
  else {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$JC", @"Refresh delay too fast (", numMs, ')')];
    return false;
  }
}

void NetI2pRouterTransportFIFOBandwidthRefiller_checkConfig(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundRate(self);
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundRate(self);
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundBurstRate(self);
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundBurstRate(self);
  NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundPeak(self);
  NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundPeak(self);
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundRate(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint in = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BANDWIDTH];
  if (in != self->_inboundKBytesPerSecond_) {
    if ((in <= 0) || (in > NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH)) self->_inboundKBytesPerSecond_ = in;
    else self->_inboundKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"Updating inbound rate to ", self->_inboundKBytesPerSecond_)];
  }
  if (self->_inboundKBytesPerSecond_ <= 0) self->_inboundKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BANDWIDTH;
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundRate(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint out = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BANDWIDTH];
  if (out != self->_outboundKBytesPerSecond_) {
    if (out >= NetI2pRouterTransportFIFOBandwidthRefiller_MAX_OUTBOUND_BANDWIDTH) self->_outboundKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_MAX_OUTBOUND_BANDWIDTH;
    else if ((out <= 0) || (out >= NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH)) self->_outboundKBytesPerSecond_ = out;
    else self->_outboundKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"Updating outbound rate to ", self->_outboundKBytesPerSecond_)];
  }
  if (self->_outboundKBytesPerSecond_ <= 0) self->_outboundKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BANDWIDTH;
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundBurstRate(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint in = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BURST_BANDWIDTH withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BURST_BANDWIDTH];
  if (in != self->_inboundBurstKBytesPerSecond_) {
    if ((in <= 0) || (in >= self->_inboundKBytesPerSecond_)) self->_inboundBurstKBytesPerSecond_ = in;
    else self->_inboundBurstKBytesPerSecond_ = self->_inboundKBytesPerSecond_;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"Updating inbound burst rate to ", self->_inboundBurstKBytesPerSecond_)];
  }
  if (self->_inboundBurstKBytesPerSecond_ <= 0) self->_inboundBurstKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_INBOUND_BURST_BANDWIDTH;
  if (self->_inboundBurstKBytesPerSecond_ < self->_inboundKBytesPerSecond_) self->_inboundBurstKBytesPerSecond_ = self->_inboundKBytesPerSecond_;
  [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) setInboundBurstKBpsWithInt:self->_inboundBurstKBytesPerSecond_];
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundBurstRate(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint out = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BURST_BANDWIDTH withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BURST_BANDWIDTH];
  if (out != self->_outboundBurstKBytesPerSecond_) {
    if ((out <= 0) || (out >= self->_outboundKBytesPerSecond_)) self->_outboundBurstKBytesPerSecond_ = out;
    else self->_outboundBurstKBytesPerSecond_ = self->_outboundKBytesPerSecond_;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"Updating outbound burst rate to ", self->_outboundBurstKBytesPerSecond_)];
  }
  if (self->_outboundBurstKBytesPerSecond_ <= 0) self->_outboundBurstKBytesPerSecond_ = NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_OUTBOUND_BURST_BANDWIDTH;
  if (self->_outboundBurstKBytesPerSecond_ < self->_outboundKBytesPerSecond_) self->_outboundBurstKBytesPerSecond_ = self->_outboundKBytesPerSecond_;
  [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) setOutboundBurstKBpsWithInt:self->_outboundBurstKBytesPerSecond_];
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateInboundPeak(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint in = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_INBOUND_BANDWIDTH_PEAK withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_BURST_SECONDS * self->_inboundBurstKBytesPerSecond_];
  if (in != [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) getInboundBurstBytes]) {
    if (in >= NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH_PEAK) {
      if (in < self->_inboundBurstKBytesPerSecond_) [self->_limiter_ setInboundBurstBytesWithInt:self->_inboundBurstKBytesPerSecond_ * 1024];
      else [self->_limiter_ setInboundBurstBytesWithInt:in * 1024];
    }
    else {
      if (NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH_PEAK < self->_inboundBurstKBytesPerSecond_) [self->_limiter_ setInboundBurstBytesWithInt:self->_inboundBurstKBytesPerSecond_ * 1024];
      else [self->_limiter_ setInboundBurstBytesWithInt:NetI2pRouterTransportFIFOBandwidthRefiller_MIN_INBOUND_BANDWIDTH_PEAK * 1024];
    }
  }
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateOutboundPeak(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint in = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportFIFOBandwidthRefiller_PROP_OUTBOUND_BANDWIDTH_PEAK withInt:NetI2pRouterTransportFIFOBandwidthRefiller_DEFAULT_BURST_SECONDS * self->_outboundBurstKBytesPerSecond_];
  if (in != [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) getOutboundBurstBytes]) {
    if (in >= NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH_PEAK) {
      if (in < self->_outboundBurstKBytesPerSecond_) [self->_limiter_ setOutboundBurstBytesWithInt:self->_outboundBurstKBytesPerSecond_ * 1024];
      else [self->_limiter_ setOutboundBurstBytesWithInt:in * 1024];
    }
    else {
      if (NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH_PEAK < self->_outboundBurstKBytesPerSecond_) [self->_limiter_ setOutboundBurstBytesWithInt:self->_outboundBurstKBytesPerSecond_ * 1024];
      else [self->_limiter_ setOutboundBurstBytesWithInt:NetI2pRouterTransportFIFOBandwidthRefiller_MIN_OUTBOUND_BANDWIDTH_PEAK * 1024];
    }
  }
}

jint NetI2pRouterTransportFIFOBandwidthRefiller_locked_getCurrentParticipatingBandwidth(NetI2pRouterTransportFIFOBandwidthRefiller *self) {
  jint current = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_currentParticipating_)) get];
  jlong totalTime = ([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk(self->_limiter_)) now] - self->_lastPartUpdateTime_) + self->_lastTotalTime_;
  if (totalTime <= 0) return 0;
  jlong bw = 1000l * (current + self->_lastTotal_) / totalTime;
  if (bw > JavaLangInteger_MAX_VALUE) return 0;
  return (jint) bw;
}

void NetI2pRouterTransportFIFOBandwidthRefiller_updateParticipatingWithLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, jlong now) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_updateLock_)) writeLock])) lock];
  @try {
    NetI2pRouterTransportFIFOBandwidthRefiller_locked_updateParticipatingWithLong_(self, now);
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([self->_updateLock_ writeLock])) unlock];
  }
}

void NetI2pRouterTransportFIFOBandwidthRefiller_locked_updateParticipatingWithLong_(NetI2pRouterTransportFIFOBandwidthRefiller *self, jlong now) {
  jlong elapsed = now - self->_lastPartUpdateTime_;
  if (elapsed <= 0) {
    self->_lastPartUpdateTime_ = now;
    return;
  }
  self->_lastPartUpdateTime_ = now;
  if (--self->_lastIndex_ < 0) self->_lastIndex_ = NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS - 1;
  *IOSIntArray_GetRef(nil_chk(self->_counts_), self->_lastIndex_) = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_currentParticipating_)) getAndSetWithInt:0];
  *IOSLongArray_GetRef(nil_chk(self->_times_), self->_lastIndex_) = elapsed;
  self->_lastTotal_ = 0;
  self->_lastTotalTime_ = 0;
  for (jint i = 0; i < NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS; i++) {
    jint idx = (self->_lastIndex_ + i) % NetI2pRouterTransportFIFOBandwidthRefiller_PERIODS;
    self->_lastTotal_ += IOSIntArray_Get(self->_counts_, idx);
    self->_lastTotalTime_ += IOSLongArray_Get(self->_times_, idx);
    if (self->_lastTotalTime_ >= NetI2pRouterTransportFIFOBandwidthRefiller_TOTAL_TIME) break;
  }
  if (self->_lastIndex_ == 0 && self->_lastTotalTime_ > 0) {
    jlong bw = 1000l * self->_lastTotal_ / self->_lastTotalTime_;
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.participatingBandwidthOut" withLong:bw];
    if (self->_lastTotal_ > 0 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$$J$$$", NetI2pDataDataHelper_formatSizeWithLong_(self->_lastTotal_), @" bytes out part. tunnels in last ", self->_lastTotalTime_, @" ms: ", NetI2pDataDataHelper_formatSizeWithLong_(bw), @" Bps")];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportFIFOBandwidthRefiller)
