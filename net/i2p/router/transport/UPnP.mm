//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/UPnP.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/UnknownHostException.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/UPnP.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/Translate.h"
#include "org/cybergarage/upnp/Action.h"
#include "org/cybergarage/upnp/ActionList.h"
#include "org/cybergarage/upnp/Argument.h"
#include "org/cybergarage/upnp/ArgumentList.h"
#include "org/cybergarage/upnp/ControlPoint.h"
#include "org/cybergarage/upnp/Device.h"
#include "org/cybergarage/upnp/DeviceList.h"
#include "org/cybergarage/upnp/Service.h"
#include "org/cybergarage/upnp/ServiceList.h"
#include "org/cybergarage/upnp/ServiceStateTable.h"
#include "org/cybergarage/upnp/StateVariable.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/upnp/UPnPStatus.h"
#include "org/cybergarage/upnp/ssdp/SSDPPacket.h"
#include "org/cybergarage/util/Debug.h"
#include "org/freenetproject/DetectedIP.h"
#include "org/freenetproject/ForwardPort.h"
#include "org/freenetproject/ForwardPortCallback.h"
#include "org/freenetproject/ForwardPortStatus.h"

@interface NetI2pRouterTransportUPnP () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  OrgCybergarageUpnpDevice *_router_;
  OrgCybergarageUpnpService *_service_;
  id<JavaUtilMap> _otherUDNs_;
  id<JavaUtilMap> _eventVars_;
  jboolean isDisabled_;
  volatile_jboolean _serviceLacksAPM_;
  id lock_;
  volatile_jboolean thinksWeAreDoubleNatted_;
  id<JavaUtilSet> portsToForward_;
  id<JavaUtilSet> portsForwarded_;
  id<OrgFreenetprojectForwardPortCallback> forwardCallback_;
  NSString *_lastAction_;
  OrgCybergarageUpnpService *_lastService_;
  OrgCybergarageUpnpArgumentList *_lastArgumentList_;
  id toStringLock_;
}

- (void)registerPortMappings;

- (void)discoverService;

- (jboolean)tryAddMappingWithNSString:(NSString *)protocol
                              withInt:(jint)port
                         withNSString:(NSString *)description_
     withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp;

+ (jboolean)stringEqualsWithNSString:(NSString *)a
                        withNSString:(NSString *)b;

- (jboolean)isNATPresent;

- (NSString *)getNATAddress;

- (jint)getUpstreamMaxBitRate;

- (jint)getDownstreamMaxBitRate;

+ (void)listStateTableWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (void)listActionsArgumentsWithOrgCybergarageUpnpAction:(OrgCybergarageUpnpAction *)action
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (void)listActionsWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                       withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)toStringWithNSString:(NSString *)action
                      withNSString:(NSString *)arg
     withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv;

- (NSString *)toLongWithNSString:(NSString *)action
                    withNSString:(NSString *)arg
   withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv;

- (NSString *)toTimeWithNSString:(NSString *)action
                    withNSString:(NSString *)arg
   withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv;

- (NSString *)toBooleanWithNSString:(NSString *)action
                       withNSString:(NSString *)arg
      withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv;

- (void)listSubServicesWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)listSubDevWithNSString:(NSString *)prefix
  withOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev
     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (jboolean)addMappingWithNSString:(NSString *)protocol
                           withInt:(jint)port
                      withNSString:(NSString *)description_
  withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp;

+ (NSString *)getIPWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev;

- (NSString *)getOurAddressWithNSString:(NSString *)deflt;

- (jboolean)removeMappingWithNSString:(NSString *)protocol
                              withInt:(jint)port
     withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp
                          withBoolean:(jboolean)noLog;

+ (NSString *)protoToStringWithInt:(jint)p;

- (void)registerPortsWithJavaUtilSet:(id<JavaUtilSet>)portsToForwardNow;

- (void)unregisterPortsWithJavaUtilSet:(id<JavaUtilSet>)portsToForwardNow;

- (NSString *)_tWithNSString:(NSString *)s;

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o;

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o
                      withId:(id)o2;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _router_, OrgCybergarageUpnpDevice *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _service_, OrgCybergarageUpnpService *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _otherUDNs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _eventVars_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, lock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, portsToForward_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, portsForwarded_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, forwardCallback_, id<OrgFreenetprojectForwardPortCallback>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _lastAction_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _lastService_, OrgCybergarageUpnpService *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, _lastArgumentList_, OrgCybergarageUpnpArgumentList *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP, toStringLock_, id)

inline NSString *NetI2pRouterTransportUPnP_get_ROUTER_DEVICE(void);
static NSString *NetI2pRouterTransportUPnP_ROUTER_DEVICE = @"urn:schemas-upnp-org:device:InternetGatewayDevice:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, ROUTER_DEVICE, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_DEVICE(void);
static NSString *NetI2pRouterTransportUPnP_WAN_DEVICE = @"urn:schemas-upnp-org:device:WANDevice:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_DEVICE, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WANCON_DEVICE(void);
static NSString *NetI2pRouterTransportUPnP_WANCON_DEVICE = @"urn:schemas-upnp-org:device:WANConnectionDevice:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WANCON_DEVICE, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_IP_CONNECTION(void);
static NSString *NetI2pRouterTransportUPnP_WAN_IP_CONNECTION = @"urn:schemas-upnp-org:service:WANIPConnection:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_IP_CONNECTION, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_PPP_CONNECTION(void);
static NSString *NetI2pRouterTransportUPnP_WAN_PPP_CONNECTION = @"urn:schemas-upnp-org:service:WANPPPConnection:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_PPP_CONNECTION, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_ROUTER_DEVICE_2(void);
static NSString *NetI2pRouterTransportUPnP_ROUTER_DEVICE_2 = @"urn:schemas-upnp-org:device:InternetGatewayDevice:2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, ROUTER_DEVICE_2, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_DEVICE_2(void);
static NSString *NetI2pRouterTransportUPnP_WAN_DEVICE_2 = @"urn:schemas-upnp-org:device:WANDevice:2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_DEVICE_2, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WANCON_DEVICE_2(void);
static NSString *NetI2pRouterTransportUPnP_WANCON_DEVICE_2 = @"urn:schemas-upnp-org:device:WANConnectionDevice:2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WANCON_DEVICE_2, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_IP_CONNECTION_2(void);
static NSString *NetI2pRouterTransportUPnP_WAN_IP_CONNECTION_2 = @"urn:schemas-upnp-org:service:WANIPConnection:2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_IP_CONNECTION_2, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_WAN_IPV6_CONNECTION(void);
static NSString *NetI2pRouterTransportUPnP_WAN_IPV6_CONNECTION = @"urn:schemas-upnp-org:service:WANIPv6FirewallControl:1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, WAN_IPV6_CONNECTION, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_PROP_ADVANCED(void);
static NSString *NetI2pRouterTransportUPnP_PROP_ADVANCED = @"routerconsole.advanced";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, PROP_ADVANCED, NSString *)

inline NSString *NetI2pRouterTransportUPnP_get_PROP_IGNORE(void);
static NSString *NetI2pRouterTransportUPnP_PROP_IGNORE = @"i2np.upnp.ignore";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, PROP_IGNORE, NSString *)

inline jboolean NetI2pRouterTransportUPnP_get_ALLOW_SAME_HOST(void);
#define NetI2pRouterTransportUPnP_ALLOW_SAME_HOST false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnP, ALLOW_SAME_HOST, jboolean)

inline jlong NetI2pRouterTransportUPnP_get_UINT_MAX(void);
#define NetI2pRouterTransportUPnP_UINT_MAX 4294967295LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnP, UINT_MAX, jlong)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportUPnP_get___id(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportUPnP___id;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, __id, JavaUtilConcurrentAtomicAtomicInteger *)

inline NSString *NetI2pRouterTransportUPnP_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportUPnP_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnP, BUNDLE_NAME, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportUPnP_registerPortMappings(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_discoverService(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUPnP_tryAddMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, NSString *description_, OrgFreenetprojectForwardPort *fp);

__attribute__((unused)) static jboolean NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_(NSString *a, NSString *b);

__attribute__((unused)) static jboolean NetI2pRouterTransportUPnP_isNATPresent(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_getNATAddress(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static jint NetI2pRouterTransportUPnP_getUpstreamMaxBitRate(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static jint NetI2pRouterTransportUPnP_getDownstreamMaxBitRate(NetI2pRouterTransportUPnP *self);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_listStateTableWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(OrgCybergarageUpnpService *serv, JavaLangStringBuilder *sb);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_listActionsArgumentsWithOrgCybergarageUpnpAction_withJavaLangStringBuilder_(OrgCybergarageUpnpAction *action, JavaLangStringBuilder *sb);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_listActionsWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(OrgCybergarageUpnpService *service, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_toTimeWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_toBooleanWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_listSubServicesWithOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(NetI2pRouterTransportUPnP *self, OrgCybergarageUpnpDevice *dev, JavaLangStringBuilder *sb);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(NetI2pRouterTransportUPnP *self, NSString *prefix, OrgCybergarageUpnpDevice *dev, JavaLangStringBuilder *sb);

__attribute__((unused)) static jboolean NetI2pRouterTransportUPnP_addMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, NSString *description_, OrgFreenetprojectForwardPort *fp);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *dev);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_getOurAddressWithNSString_(NetI2pRouterTransportUPnP *self, NSString *deflt);

__attribute__((unused)) static jboolean NetI2pRouterTransportUPnP_removeMappingWithNSString_withInt_withOrgFreenetprojectForwardPort_withBoolean_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, OrgFreenetprojectForwardPort *fp, jboolean noLog);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP_protoToStringWithInt_(jint p);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_registerPortsWithJavaUtilSet_(NetI2pRouterTransportUPnP *self, id<JavaUtilSet> portsToForwardNow);

__attribute__((unused)) static void NetI2pRouterTransportUPnP_unregisterPortsWithJavaUtilSet_(NetI2pRouterTransportUPnP *self, id<JavaUtilSet> portsToForwardNow);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP__tWithNSString_(NetI2pRouterTransportUPnP *self, NSString *s);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP__tWithNSString_withId_(NetI2pRouterTransportUPnP *self, NSString *s, id o);

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnP__tWithNSString_withId_withId_(NetI2pRouterTransportUPnP *self, NSString *s, id o, id o2);

@interface NetI2pRouterTransportUPnP_RegisterPortsThread : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUPnP *this$0_;
  id<JavaUtilSet> portsToForwardNow_;
}

- (instancetype)initWithNetI2pRouterTransportUPnP:(NetI2pRouterTransportUPnP *)outer$
                                  withJavaUtilSet:(id<JavaUtilSet>)ports;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUPnP_RegisterPortsThread)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP_RegisterPortsThread, portsToForwardNow_, id<JavaUtilSet>)

__attribute__((unused)) static void NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP_RegisterPortsThread *self, NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports);

__attribute__((unused)) static NetI2pRouterTransportUPnP_RegisterPortsThread *new_NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUPnP_RegisterPortsThread *create_NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUPnP_RegisterPortsThread)

@interface NetI2pRouterTransportUPnP_UnregisterPortsThread : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUPnP *this$0_;
  id<JavaUtilSet> portsToForwardNow_;
}

- (instancetype)initWithNetI2pRouterTransportUPnP:(NetI2pRouterTransportUPnP *)outer$
                                  withJavaUtilSet:(id<JavaUtilSet>)ports;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUPnP_UnregisterPortsThread)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnP_UnregisterPortsThread, portsToForwardNow_, id<JavaUtilSet>)

__attribute__((unused)) static void NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP_UnregisterPortsThread *self, NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports);

__attribute__((unused)) static NetI2pRouterTransportUPnP_UnregisterPortsThread *new_NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUPnP_UnregisterPortsThread *create_NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUPnP_UnregisterPortsThread)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUPnP)

@implementation NetI2pRouterTransportUPnP

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (jboolean)runPlugin {
  @synchronized(self) {
    [self addDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:self];
    [self addEventListenerWithOrgCybergarageUpnpEventEventListener:self];
    @synchronized(lock_) {
      [((id<JavaUtilSet>) nil_chk(portsToForward_)) clear];
      [((id<JavaUtilSet>) nil_chk(portsForwarded_)) clear];
      [((id<JavaUtilMap>) nil_chk(_eventVars_)) clear];
    }
    return [super start];
  }
}

- (void)terminate {
  @synchronized(self) {
    [self removeDeviceChangeListenerWithOrgCybergarageUpnpDeviceDeviceChangeListener:self];
    [self removeEventListenerWithOrgCybergarageUpnpEventEventListener:self];
    @synchronized(lock_) {
      [((id<JavaUtilSet>) nil_chk(portsToForward_)) clear];
      [((id<JavaUtilMap>) nil_chk(_eventVars_)) clear];
    }
    [self unregisterPortMappings];
    jint i = 0;
    while (i++ < 20 && ![((id<JavaUtilSet>) nil_chk(portsForwarded_)) isEmpty]) {
      @try {
        JavaLangThread_sleepWithLong_(100);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    [super stop];
    @synchronized(lock_) {
      JreStrongAssign(&_router_, nil);
      JreStrongAssign(&_service_, nil);
      JreAssignVolatileBoolean(&_serviceLacksAPM_, false);
    }
  }
}

- (IOSObjectArray *)getAddress {
  [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"UP&P.getAddress() is called \\o/"];
  if (isDisabled_) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Plugin has been disabled previously, ignoring request."];
    return nil;
  }
  else if (!NetI2pRouterTransportUPnP_isNATPresent(self)) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No UP&P device found, detection of the external ip address using the plugin has failed"];
    return nil;
  }
  OrgFreenetprojectDetectedIP *result = nil;
  NSString *natAddress = NetI2pRouterTransportUPnP_getNATAddress(self);
  if (natAddress == nil || [natAddress java_length] <= 0) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No external address returned"];
    return nil;
  }
  @try {
    JavaNetInetAddress *detectedIP = JavaNetInetAddress_getByNameWithNSString_(natAddress);
    jshort status = OrgFreenetprojectDetectedIP_NOT_SUPPORTED;
    JreAssignVolatileBoolean(&thinksWeAreDoubleNatted_, !NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_([((JavaNetInetAddress *) nil_chk(detectedIP)) getAddress], false));
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$@$Z", @"NATAddress: \"", natAddress, @"\" detectedIP: ", detectedIP, @" double? ", JreLoadVolatileBoolean(&thinksWeAreDoubleNatted_))];
    if (([((id<JavaUtilSet>) nil_chk(portsForwarded_)) size] > 1) && (!JreLoadVolatileBoolean(&thinksWeAreDoubleNatted_))) status = OrgFreenetprojectDetectedIP_FULL_INTERNET;
    result = create_OrgFreenetprojectDetectedIP_initWithJavaNetInetAddress_withShort_(detectedIP, status);
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Successful UP&P discovery :", result)];
    return [IOSObjectArray arrayWithObjects:(id[]){ result } count:1 type:OrgFreenetprojectDetectedIP_class_()];
  }
  @catch (JavaNetUnknownHostException *e) {
    [_log_ errorWithNSString:JreStrcat("$$", @"Caught an UnknownHostException resolving ", natAddress) withJavaLangThrowable:e];
    return nil;
  }
}

- (void)deviceAddedWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  NSString *udn = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getUDN];
  if (udn == nil) udn = @"???";
  NSString *name = [dev getFriendlyName];
  if (name == nil) name = @"???";
  NSString *type = [dev getDeviceType];
  jboolean isIGD = ([((NSString *) nil_chk(NetI2pRouterTransportUPnP_ROUTER_DEVICE)) isEqual:type] || [((NSString *) nil_chk(NetI2pRouterTransportUPnP_ROUTER_DEVICE_2)) isEqual:type]) && [dev isRootDevice];
  JreStrAppend(&name, "$", isIGD ? @" IGD" : (JreStrcat("C$", ' ', type)));
  NSString *ip = NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(dev);
  if (ip != nil) JreStrAppend(&name, "C$", ' ', ip);
  @synchronized(lock_) {
    if (isDisabled_) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$", @"Plugin has been disabled previously, ignoring ", name, @" UDN: ", udn)];
      [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) putWithId:udn withId:name];
      return;
    }
  }
  if (!isIGD) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$C$", @"UP&P non-IGD device found, ignoring ", name, ' ', [dev getDeviceType])];
    @synchronized(lock_) {
      [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) putWithId:udn withId:name];
    }
    return;
  }
  else if (NetI2pRouterTransportUPnP_isNATPresent(self)) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$", @"UP&P ignoring additional device ", name, @" UDN: ", udn)];
    @synchronized(lock_) {
      [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) putWithId:udn withId:name];
    }
    return;
  }
  jboolean ignore = false;
  NSString *toIgnore = [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportUPnP_PROP_IGNORE];
  if (toIgnore != nil) {
    IOSObjectArray *ignores = NetI2pDataDataHelper_splitWithNSString_withNSString_(toIgnore, @"[,; \x0d\n\t]");
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ignores))->size_; i++) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(ignores, i))) isEqual:udn]) {
        ignore = true;
        [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$", @"Ignoring by config: ", name, @" UDN: ", udn)];
        break;
      }
    }
  }
  id<JavaUtilSet> myAddresses = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(true, false);
  if (!ignore && ip != nil && [((id<JavaUtilSet>) nil_chk(myAddresses)) containsWithId:ip]) {
    ignore = true;
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$", @"Ignoring UPnP on same host: ", name, @" UDN: ", udn)];
  }
  OrgCybergarageUpnpSsdpSSDPPacket *pkt = [dev getSSDPPacket];
  if (!ignore && pkt != nil) {
    NSString *pktIP = [pkt getRemoteAddress];
    if (!NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_(ip, pktIP)) {
      ignore = true;
      [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$", @"Ignoring UPnP with IP mismatch: ", name, @" UDN: ", udn)];
    }
  }
  @synchronized(lock_) {
    if (ignore) {
      [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) putWithId:udn withId:name];
      return;
    }
    else {
      JreStrongAssign(&_router_, dev);
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$$I", @"UP&P IGD found : ", name, @" UDN: ", udn, @" lease time: ", [dev getLeaseTime])];
  NetI2pRouterTransportUPnP_discoverService(self);
  @synchronized(lock_) {
    if (_service_ == nil) {
      [_log_ errorWithNSString:@"The IGD device we got isn't suiting our needs, let's disable the plugin"];
      JreStrongAssign(&_router_, nil);
      return;
    }
    [self subscribeWithOrgCybergarageUpnpService:_service_];
  }
  NetI2pRouterTransportUPnP_registerPortMappings(self);
}

- (void)registerPortMappings {
  NetI2pRouterTransportUPnP_registerPortMappings(self);
}

- (void)discoverService {
  NetI2pRouterTransportUPnP_discoverService(self);
}

- (jboolean)tryAddMappingWithNSString:(NSString *)protocol
                              withInt:(jint)port
                         withNSString:(NSString *)description_
     withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp {
  return NetI2pRouterTransportUPnP_tryAddMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(self, protocol, port, description_, fp);
}

- (void)unregisterPortMappings {
  id<JavaUtilSet> ports;
  @synchronized(lock_) {
    ports = JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(portsForwarded_));
  }
  if ([ports isEmpty]) return;
  NetI2pRouterTransportUPnP_unregisterPortsWithJavaUtilSet_(self, ports);
}

- (void)deviceRemovedWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  NSString *udn = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getUDN];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$", @"UP&P device removed : ", [dev getFriendlyName], @" UDN: ", udn)];
  id<OrgFreenetprojectForwardPortCallback> fpc = nil;
  id<JavaUtilMap> removeMap = nil;
  @synchronized(lock_) {
    if (udn != nil) [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) removeWithId:udn];
    else [((id<JavaUtilMap>) nil_chk(_otherUDNs_)) removeWithId:@"???"];
    if (_router_ == nil) return;
    NSString *type = [dev getDeviceType];
    if (([((NSString *) nil_chk(NetI2pRouterTransportUPnP_ROUTER_DEVICE)) isEqual:type] || [((NSString *) nil_chk(NetI2pRouterTransportUPnP_ROUTER_DEVICE_2)) isEqual:type]) && [dev isRootDevice] && NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_([((OrgCybergarageUpnpDevice *) nil_chk(_router_)) getFriendlyName], [dev getFriendlyName]) && NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_([((OrgCybergarageUpnpDevice *) nil_chk(_router_)) getUDN], udn)) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"UP&P IGD device removed : ", [dev getFriendlyName])];
      [_otherUDNs_ clear];
      JreStrongAssign(&_router_, nil);
      JreStrongAssign(&_service_, nil);
      [((id<JavaUtilMap>) nil_chk(_eventVars_)) clear];
      JreAssignVolatileBoolean(&_serviceLacksAPM_, false);
      if (![((id<JavaUtilSet>) nil_chk(portsForwarded_)) isEmpty]) {
        fpc = JreRetainedLocalValue(forwardCallback_);
        removeMap = JreRetainedLocalValue(create_JavaUtilHashMap_initWithInt_([portsForwarded_ size]));
        for (OrgFreenetprojectForwardPort * __strong port in portsForwarded_) {
          OrgFreenetprojectForwardPortStatus *fps = create_OrgFreenetprojectForwardPortStatus_initWithInt_withNSString_withInt_(OrgFreenetprojectForwardPortStatus_DEFINITE_FAILURE, @"UPnP device removed", ((OrgFreenetprojectForwardPort *) nil_chk(port))->portNumber_);
        }
      }
      [portsForwarded_ clear];
    }
  }
  if (fpc != nil) {
    [fpc portForwardStatusWithJavaUtilMap:removeMap];
  }
}

- (void)eventNotifyReceivedWithNSString:(NSString *)uuid
                               withLong:(jlong)seq
                           withNSString:(NSString *)varName
                           withNSString:(NSString *)value {
  if (uuid == nil || varName == nil || value == nil) return;
  if ([varName java_length] > 128 || [value java_length] > 128) return;
  NSString *old = nil;
  @synchronized(lock_) {
    if (_service_ == nil || ![uuid isEqual:[_service_ getSID]]) return;
    if ([((id<JavaUtilMap>) nil_chk(_eventVars_)) size] >= 20 && ![_eventVars_ containsKeyWithId:varName]) return;
    old = JreRetainedLocalValue([_eventVars_ putWithId:varName withId:value]);
  }
  if (![value isEqual:old]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldDebug]) [_log_ debugWithNSString:JreStrcat("$$$$$$", @"Event: ", varName, @" changed from ", old, @" to ", value)];
  }
}

+ (jboolean)stringEqualsWithNSString:(NSString *)a
                        withNSString:(NSString *)b {
  return NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_(a, b);
}

- (jboolean)isNATPresent {
  return NetI2pRouterTransportUPnP_isNATPresent(self);
}

- (NSString *)getNATAddress {
  return NetI2pRouterTransportUPnP_getNATAddress(self);
}

- (jint)getUpstreamMaxBitRate {
  return NetI2pRouterTransportUPnP_getUpstreamMaxBitRate(self);
}

- (jint)getDownstreamMaxBitRate {
  return NetI2pRouterTransportUPnP_getDownstreamMaxBitRate(self);
}

+ (void)listStateTableWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetI2pRouterTransportUPnP_listStateTableWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(serv, sb);
}

+ (void)listActionsArgumentsWithOrgCybergarageUpnpAction:(OrgCybergarageUpnpAction *)action
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetI2pRouterTransportUPnP_listActionsArgumentsWithOrgCybergarageUpnpAction_withJavaLangStringBuilder_(action, sb);
}

+ (void)listActionsWithOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)service
                       withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetI2pRouterTransportUPnP_listActionsWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(service, sb);
}

- (NSString *)toStringWithNSString:(NSString *)action
                      withNSString:(NSString *)arg
     withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv {
  return NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
}

- (NSString *)toLongWithNSString:(NSString *)action
                    withNSString:(NSString *)arg
   withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv {
  return NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
}

- (NSString *)toTimeWithNSString:(NSString *)action
                    withNSString:(NSString *)arg
   withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv {
  return NetI2pRouterTransportUPnP_toTimeWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
}

- (NSString *)toBooleanWithNSString:(NSString *)action
                       withNSString:(NSString *)arg
      withOrgCybergarageUpnpService:(OrgCybergarageUpnpService *)serv {
  return NetI2pRouterTransportUPnP_toBooleanWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
}

- (void)listSubServicesWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetI2pRouterTransportUPnP_listSubServicesWithOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(self, dev, sb);
}

- (void)listSubDevWithNSString:(NSString *)prefix
  withOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev
     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(self, prefix, dev, sb);
}

- (NSString *)renderStatusHTML {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<h3 id=\"upnp\">"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"UPnP Status")])) appendWithNSString:@"</h3><div id=\"upnpscan\">"];
  @synchronized(_otherUDNs_) {
    if (![((id<JavaUtilMap>) nil_chk(_otherUDNs_)) isEmpty]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Disabled UPnP Devices")];
      [sb appendWithNSString:@"<ul>"];
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([_otherUDNs_ entrySet])) {
        NSString *udn = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        NSString *name = [e getValue];
        [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_(name)];
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<br>UDN: "])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_(udn)])) appendWithNSString:@"</li>"];
      }
      [sb appendWithNSString:@"</ul>"];
    }
  }
  if (isDisabled_) {
    [sb appendWithNSString:@"<p>"];
    [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"UPnP has been disabled; Do you have more than one UPnP Internet Gateway Device on your LAN ?")];
    return [sb description];
  }
  else if (!NetI2pRouterTransportUPnP_isNATPresent(self)) {
    [sb appendWithNSString:@"<p>"];
    [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"UPnP has not found any UPnP-aware, compatible device on your LAN.")];
    return [sb description];
  }
  OrgCybergarageUpnpDevice *router;
  @synchronized(lock_) {
    router = JreRetainedLocalValue(_router_);
  }
  if (router != nil) NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(self, nil, router, sb);
  NSString *addr = NetI2pRouterTransportUPnP_getNATAddress(self);
  [sb appendWithNSString:@"<p>"];
  if (addr != nil) [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_withId_(self, @"The current external IP address reported by UPnP is {0}", NetI2pDataDataHelper_escapeHTMLWithNSString_(addr))];
  else [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"The current external IP address is not available.")];
  jint downstreamMaxBitRate = NetI2pRouterTransportUPnP_getDownstreamMaxBitRate(self);
  jint upstreamMaxBitRate = NetI2pRouterTransportUPnP_getUpstreamMaxBitRate(self);
  if (downstreamMaxBitRate > 0) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<br>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_withId_(self, @"UPnP reports the maximum downstream bit rate is {0}bits/sec", NetI2pDataDataHelper_formatSize2DecimalWithLong_(downstreamMaxBitRate))];
  if (upstreamMaxBitRate > 0) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<br>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_withId_(self, @"UPnP reports the maximum upstream bit rate is {0}bits/sec", NetI2pDataDataHelper_formatSize2DecimalWithLong_(upstreamMaxBitRate))];
  @synchronized(lock_) {
    for (OrgFreenetprojectForwardPort * __strong port in nil_chk(portsToForward_)) {
      [sb appendWithNSString:@"<br>"];
      if ([((id<JavaUtilSet>) nil_chk(portsForwarded_)) containsWithId:port]) [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_withId_withId_(self, @"{0} port {1,number,#####} was successfully forwarded by UPnP.", NetI2pRouterTransportUPnP_protoToStringWithInt_(((OrgFreenetprojectForwardPort *) nil_chk(port))->protocol_), JavaLangInteger_valueOfWithInt_(port->portNumber_))];
      else [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_withId_withId_(self, @"{0} port {1,number,#####} was not forwarded by UPnP.", NetI2pRouterTransportUPnP_protoToStringWithInt_(((OrgFreenetprojectForwardPort *) nil_chk(port))->protocol_), JavaLangInteger_valueOfWithInt_(port->portNumber_))];
    }
  }
  [sb appendWithNSString:@"</p></div>"];
  return [sb description];
}

- (jboolean)addMappingWithNSString:(NSString *)protocol
                           withInt:(jint)port
                      withNSString:(NSString *)description_
  withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp {
  return NetI2pRouterTransportUPnP_addMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(self, protocol, port, description_, fp);
}

+ (NSString *)getIPWithOrgCybergarageUpnpDevice:(OrgCybergarageUpnpDevice *)dev {
  return NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(dev);
}

- (NSString *)getOurAddressWithNSString:(NSString *)deflt {
  return NetI2pRouterTransportUPnP_getOurAddressWithNSString_(self, deflt);
}

- (jboolean)removeMappingWithNSString:(NSString *)protocol
                              withInt:(jint)port
     withOrgFreenetprojectForwardPort:(OrgFreenetprojectForwardPort *)fp
                          withBoolean:(jboolean)noLog {
  return NetI2pRouterTransportUPnP_removeMappingWithNSString_withInt_withOrgFreenetprojectForwardPort_withBoolean_(self, protocol, port, fp, noLog);
}

- (void)onChangePublicPortsWithJavaUtilSet:(id<JavaUtilSet>)ports
  withOrgFreenetprojectForwardPortCallback:(id<OrgFreenetprojectForwardPortCallback>)cb {
  id<JavaUtilSet> portsToDumpNow = nil;
  id<JavaUtilSet> portsToForwardNow = nil;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$", @"UP&P Forwarding ", [((id<JavaUtilSet>) nil_chk(ports)) size], @" ports...") withJavaLangThrowable:create_JavaLangException_init()];
  @synchronized(lock_) {
    if (forwardCallback_ != nil && forwardCallback_ != cb && cb != nil) {
      [_log_ errorWithNSString:JreStrcat("$@$@$", @"ForwardPortCallback changed from ", forwardCallback_, @" to ", cb, @" - using new value, but this is very strange!")];
    }
    JreStrongAssign(&forwardCallback_, cb);
    if ([((id<JavaUtilSet>) nil_chk(portsToForward_)) isEmpty]) {
      [portsToForward_ addAllWithJavaUtilCollection:ports];
      portsToForwardNow = JreRetainedLocalValue(ports);
      portsToDumpNow = JreRetainedLocalValue(nil);
    }
    else if ([((id<JavaUtilSet>) nil_chk(ports)) isEmpty]) {
      portsToDumpNow = JreRetainedLocalValue(portsToForward_);
      [portsToForward_ clear];
      portsToForwardNow = JreRetainedLocalValue(nil);
    }
    else {
      for (OrgFreenetprojectForwardPort * __strong port in ports) {
        if ([((id<JavaUtilSet>) nil_chk(portsForwarded_)) containsWithId:port]) {
        }
        else {
          if (portsToForwardNow == nil) portsToForwardNow = JreRetainedLocalValue(create_JavaUtilHashSet_init());
          [portsToForwardNow addWithId:port];
        }
      }
      for (OrgFreenetprojectForwardPort * __strong port in portsToForward_) {
        if ([ports containsWithId:port]) {
        }
        else {
          if (portsToDumpNow == nil) portsToDumpNow = JreRetainedLocalValue(create_JavaUtilHashSet_init());
          [portsToDumpNow addWithId:port];
        }
      }
      [portsToForward_ clear];
      [portsToForward_ addAllWithJavaUtilCollection:ports];
    }
    if (_router_ == nil) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No UPnP router available to update"];
      return;
    }
  }
  if (portsToDumpNow != nil && ![portsToDumpNow isEmpty]) NetI2pRouterTransportUPnP_unregisterPortsWithJavaUtilSet_(self, portsToDumpNow);
  if (portsToForwardNow != nil && ![portsToForwardNow isEmpty]) NetI2pRouterTransportUPnP_registerPortsWithJavaUtilSet_(self, portsToForwardNow);
}

+ (NSString *)protoToStringWithInt:(jint)p {
  return NetI2pRouterTransportUPnP_protoToStringWithInt_(p);
}

- (void)registerPortsWithJavaUtilSet:(id<JavaUtilSet>)portsToForwardNow {
  NetI2pRouterTransportUPnP_registerPortsWithJavaUtilSet_(self, portsToForwardNow);
}

- (void)unregisterPortsWithJavaUtilSet:(id<JavaUtilSet>)portsToForwardNow {
  NetI2pRouterTransportUPnP_unregisterPortsWithJavaUtilSet_(self, portsToForwardNow);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterTransportUPnP_mainWithNSStringArray_(args);
}

- (NSString *)_tWithNSString:(NSString *)s {
  return NetI2pRouterTransportUPnP__tWithNSString_(self, s);
}

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o {
  return NetI2pRouterTransportUPnP__tWithNSString_withId_(self, s, o);
}

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o
                      withId:(id)o2 {
  return NetI2pRouterTransportUPnP__tWithNSString_withId_withId_(self, s, o, o2);
}

- (void)dealloc {
  JreCheckFinalize(self, [NetI2pRouterTransportUPnP class]);
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_router_);
  RELEASE_(_service_);
  RELEASE_(_otherUDNs_);
  RELEASE_(_eventVars_);
  RELEASE_(lock_);
  RELEASE_(portsToForward_);
  RELEASE_(portsForwarded_);
  RELEASE_(forwardCallback_);
  RELEASE_(_lastAction_);
  RELEASE_(_lastService_);
  RELEASE_(_lastArgumentList_);
  RELEASE_(toStringLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgFreenetprojectDetectedIP;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 18, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 24, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 25, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, 32, -1, -1 },
    { NULL, "LNSString;", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x2, 38, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x9, 39, 40, 41, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 42, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 42, 43, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 42, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(runPlugin);
  methods[2].selector = @selector(terminate);
  methods[3].selector = @selector(getAddress);
  methods[4].selector = @selector(deviceAddedWithOrgCybergarageUpnpDevice:);
  methods[5].selector = @selector(registerPortMappings);
  methods[6].selector = @selector(discoverService);
  methods[7].selector = @selector(tryAddMappingWithNSString:withInt:withNSString:withOrgFreenetprojectForwardPort:);
  methods[8].selector = @selector(unregisterPortMappings);
  methods[9].selector = @selector(deviceRemovedWithOrgCybergarageUpnpDevice:);
  methods[10].selector = @selector(eventNotifyReceivedWithNSString:withLong:withNSString:withNSString:);
  methods[11].selector = @selector(stringEqualsWithNSString:withNSString:);
  methods[12].selector = @selector(isNATPresent);
  methods[13].selector = @selector(getNATAddress);
  methods[14].selector = @selector(getUpstreamMaxBitRate);
  methods[15].selector = @selector(getDownstreamMaxBitRate);
  methods[16].selector = @selector(listStateTableWithOrgCybergarageUpnpService:withJavaLangStringBuilder:);
  methods[17].selector = @selector(listActionsArgumentsWithOrgCybergarageUpnpAction:withJavaLangStringBuilder:);
  methods[18].selector = @selector(listActionsWithOrgCybergarageUpnpService:withJavaLangStringBuilder:);
  methods[19].selector = @selector(toStringWithNSString:withNSString:withOrgCybergarageUpnpService:);
  methods[20].selector = @selector(toLongWithNSString:withNSString:withOrgCybergarageUpnpService:);
  methods[21].selector = @selector(toTimeWithNSString:withNSString:withOrgCybergarageUpnpService:);
  methods[22].selector = @selector(toBooleanWithNSString:withNSString:withOrgCybergarageUpnpService:);
  methods[23].selector = @selector(listSubServicesWithOrgCybergarageUpnpDevice:withJavaLangStringBuilder:);
  methods[24].selector = @selector(listSubDevWithNSString:withOrgCybergarageUpnpDevice:withJavaLangStringBuilder:);
  methods[25].selector = @selector(renderStatusHTML);
  methods[26].selector = @selector(addMappingWithNSString:withInt:withNSString:withOrgFreenetprojectForwardPort:);
  methods[27].selector = @selector(getIPWithOrgCybergarageUpnpDevice:);
  methods[28].selector = @selector(getOurAddressWithNSString:);
  methods[29].selector = @selector(removeMappingWithNSString:withInt:withOrgFreenetprojectForwardPort:withBoolean:);
  methods[30].selector = @selector(onChangePublicPortsWithJavaUtilSet:withOrgFreenetprojectForwardPortCallback:);
  methods[31].selector = @selector(protoToStringWithInt:);
  methods[32].selector = @selector(registerPortsWithJavaUtilSet:);
  methods[33].selector = @selector(unregisterPortsWithJavaUtilSet:);
  methods[34].selector = @selector(mainWithNSStringArray:);
  methods[35].selector = @selector(_tWithNSString:);
  methods[36].selector = @selector(_tWithNSString:withId:);
  methods[37].selector = @selector(_tWithNSString:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ROUTER_DEVICE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "WAN_DEVICE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "WANCON_DEVICE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "WAN_IP_CONNECTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "WAN_PPP_CONNECTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "ROUTER_DEVICE_2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "WAN_DEVICE_2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "WANCON_DEVICE_2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "WAN_IP_CONNECTION_2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "WAN_IPV6_CONNECTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "_router_", "LOrgCybergarageUpnpDevice;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_service_", "LOrgCybergarageUpnpService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_otherUDNs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 55, -1 },
    { "_eventVars_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 55, -1 },
    { "isDisabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_serviceLacksAPM_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "thinksWeAreDoubleNatted_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "portsToForward_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "portsForwarded_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "forwardCallback_", "LOrgFreenetprojectForwardPortCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_ADVANCED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "PROP_IGNORE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "ALLOW_SAME_HOST", "Z", .constantValue.asBOOL = NetI2pRouterTransportUPnP_ALLOW_SAME_HOST, 0x1a, -1, -1, -1, -1 },
    { "_lastAction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastService_", "LOrgCybergarageUpnpService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastArgumentList_", "LOrgCybergarageUpnpArgumentList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toStringLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "UINT_MAX", "J", .constantValue.asLong = NetI2pRouterTransportUPnP_UINT_MAX, 0x1a, -1, -1, -1, -1 },
    { "__id", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "deviceAdded", "LOrgCybergarageUpnpDevice;", "tryAddMapping", "LNSString;ILNSString;LOrgFreenetprojectForwardPort;", "deviceRemoved", "eventNotifyReceived", "LNSString;JLNSString;LNSString;", "stringEquals", "LNSString;LNSString;", "listStateTable", "LOrgCybergarageUpnpService;LJavaLangStringBuilder;", "listActionsArguments", "LOrgCybergarageUpnpAction;LJavaLangStringBuilder;", "listActions", "toString", "LNSString;LNSString;LOrgCybergarageUpnpService;", "toLong", "toTime", "toBoolean", "listSubServices", "LOrgCybergarageUpnpDevice;LJavaLangStringBuilder;", "listSubDev", "LNSString;LOrgCybergarageUpnpDevice;LJavaLangStringBuilder;", "addMapping", "getIP", "getOurAddress", "LNSString;", "removeMapping", "LNSString;ILOrgFreenetprojectForwardPort;Z", "onChangePublicPorts", "LJavaUtilSet;LOrgFreenetprojectForwardPortCallback;", "(Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;Lorg/freenetproject/ForwardPortCallback;)V", "protoToString", "I", "registerPorts", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;)V", "unregisterPorts", "main", "[LNSString;", "LJavaLangException;", "_t", "LNSString;LNSObject;", "LNSString;LNSObject;LNSObject;", &NetI2pRouterTransportUPnP_ROUTER_DEVICE, &NetI2pRouterTransportUPnP_WAN_DEVICE, &NetI2pRouterTransportUPnP_WANCON_DEVICE, &NetI2pRouterTransportUPnP_WAN_IP_CONNECTION, &NetI2pRouterTransportUPnP_WAN_PPP_CONNECTION, &NetI2pRouterTransportUPnP_ROUTER_DEVICE_2, &NetI2pRouterTransportUPnP_WAN_DEVICE_2, &NetI2pRouterTransportUPnP_WANCON_DEVICE_2, &NetI2pRouterTransportUPnP_WAN_IP_CONNECTION_2, &NetI2pRouterTransportUPnP_WAN_IPV6_CONNECTION, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;", &NetI2pRouterTransportUPnP_PROP_ADVANCED, &NetI2pRouterTransportUPnP_PROP_IGNORE, &NetI2pRouterTransportUPnP___id, &NetI2pRouterTransportUPnP_BUNDLE_NAME, "LNetI2pRouterTransportUPnP_RegisterPortsThread;LNetI2pRouterTransportUPnP_UnregisterPortsThread;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnP = { "UPnP", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 38, 33, -1, 61, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnP;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUPnP class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportUPnP___id, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUPnP)
  }
}

@end

void NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(NetI2pRouterTransportUPnP *self, NetI2pI2PAppContext *context) {
  OrgCybergarageUpnpControlPoint_init(self);
  self->isDisabled_ = false;
  JreStrongAssignAndConsume(&self->lock_, new_NSObject_init());
  JreAssignVolatileBoolean(&self->thinksWeAreDoubleNatted_, false);
  JreStrongAssignAndConsume(&self->toStringLock_, new_NSObject_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUPnP_class_()]);
  JreStrongAssignAndConsume(&self->portsToForward_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->portsForwarded_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->_otherUDNs_, new_JavaUtilHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_eventVars_, new_JavaUtilHashMap_initWithInt_(4));
}

NetI2pRouterTransportUPnP *new_NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnP, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterTransportUPnP *create_NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnP, initWithNetI2pI2PAppContext_, context)
}

void NetI2pRouterTransportUPnP_registerPortMappings(NetI2pRouterTransportUPnP *self) {
  id<JavaUtilSet> ports;
  @synchronized(self->lock_) {
    ports = JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(self->portsForwarded_));
  }
  if ([ports isEmpty]) return;
  NetI2pRouterTransportUPnP_registerPortsWithJavaUtilSet_(self, ports);
}

void NetI2pRouterTransportUPnP_discoverService(NetI2pRouterTransportUPnP *self) {
  @synchronized(self->lock_) {
    for (OrgCybergarageUpnpDevice * __strong current in nil_chk([((OrgCybergarageUpnpDevice *) nil_chk(self->_router_)) getDeviceList])) {
      NSString *type = [((OrgCybergarageUpnpDevice *) nil_chk(current)) getDeviceType];
      if (!([((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_DEVICE)) isEqual:type] || [((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_DEVICE_2)) isEqual:type])) continue;
      OrgCybergarageUpnpDeviceList *l = [current getDeviceList];
      for (jint i = 0; i < [((OrgCybergarageUpnpDeviceList *) nil_chk([current getDeviceList])) size]; i++) {
        OrgCybergarageUpnpDevice *current2 = [((OrgCybergarageUpnpDeviceList *) nil_chk(l)) getDeviceWithInt:i];
        type = [((OrgCybergarageUpnpDevice *) nil_chk(current2)) getDeviceType];
        if (!([((NSString *) nil_chk(NetI2pRouterTransportUPnP_WANCON_DEVICE)) isEqual:type] || [((NSString *) nil_chk(NetI2pRouterTransportUPnP_WANCON_DEVICE_2)) isEqual:type])) continue;
        JreStrongAssign(&self->_service_, [current2 getServiceWithNSString:NetI2pRouterTransportUPnP_WAN_IP_CONNECTION_2]);
        if (self->_service_ == nil) {
          JreStrongAssign(&self->_service_, [current2 getServiceWithNSString:NetI2pRouterTransportUPnP_WAN_IP_CONNECTION]);
          if (self->_service_ == nil) {
            JreStrongAssign(&self->_service_, [current2 getServiceWithNSString:NetI2pRouterTransportUPnP_WAN_PPP_CONNECTION]);
            if (self->_service_ == nil) {
              if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$$", [((OrgCybergarageUpnpDevice *) nil_chk(self->_router_)) getFriendlyName], @" doesn't have any recognized connection type; we won't be able to use it!")];
            }
          }
        }
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) {
          OrgCybergarageUpnpService *svc2 = [current2 getServiceWithNSString:NetI2pRouterTransportUPnP_WAN_IPV6_CONNECTION];
          if (svc2 != nil) [self->_log_ warnWithNSString:JreStrcat("$$", [((OrgCybergarageUpnpDevice *) nil_chk(self->_router_)) getFriendlyName], @" supports WANIPv6Connection, but we don't")];
        }
        JreAssignVolatileBoolean(&self->_serviceLacksAPM_, false);
        return;
      }
    }
  }
}

jboolean NetI2pRouterTransportUPnP_tryAddMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, NSString *description_, OrgFreenetprojectForwardPort *fp) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$IC$", @"Registering a port mapping for ", port, '/', protocol)];
  jint nbOfTries = 0;
  jboolean isPortForwarded = false;
  while ((!JreLoadVolatileBoolean(&self->_serviceLacksAPM_)) && nbOfTries++ < 5) {
    isPortForwarded = NetI2pRouterTransportUPnP_addMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(self, protocol, port, description_, fp);
    if (isPortForwarded || JreLoadVolatileBoolean(&self->_serviceLacksAPM_)) break;
    @try {
      JavaLangThread_sleepWithLong_(5000);
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$I$", (isPortForwarded ? @"Mapping is successful!" : @"Mapping has failed!"), @" (", nbOfTries, @" tries)")];
  return isPortForwarded;
}

jboolean NetI2pRouterTransportUPnP_stringEqualsWithNSString_withNSString_(NSString *a, NSString *b) {
  NetI2pRouterTransportUPnP_initialize();
  if (a != nil) return [a isEqual:b];
  return b == nil;
}

jboolean NetI2pRouterTransportUPnP_isNATPresent(NetI2pRouterTransportUPnP *self) {
  @synchronized(self->lock_) {
    return self->_router_ != nil && self->_service_ != nil;
  }
}

NSString *NetI2pRouterTransportUPnP_getNATAddress(NetI2pRouterTransportUPnP *self) {
  OrgCybergarageUpnpService *service;
  @synchronized(self->lock_) {
    if (!NetI2pRouterTransportUPnP_isNATPresent(self)) return JreRetainedLocalValue(nil);
    service = JreRetainedLocalValue(self->_service_);
  }
  OrgCybergarageUpnpAction *getIP = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:@"GetExternalIPAddress"];
  if (getIP == nil || ![getIP postControlAction]) return nil;
  OrgCybergarageUpnpArgument *a = [((OrgCybergarageUpnpArgumentList *) nil_chk([getIP getOutputArgumentList])) getArgumentWithNSString:@"NewExternalIPAddress"];
  if (a == nil) return nil;
  NSString *rv = [a getValue];
  if ([@"0.0.0.0" isEqual:rv] || rv == nil || [rv java_length] <= 0) return nil;
  return rv;
}

jint NetI2pRouterTransportUPnP_getUpstreamMaxBitRate(NetI2pRouterTransportUPnP *self) {
  OrgCybergarageUpnpService *service;
  @synchronized(self->lock_) {
    if (!NetI2pRouterTransportUPnP_isNATPresent(self) || JreLoadVolatileBoolean(&self->thinksWeAreDoubleNatted_)) return -1;
    service = JreRetainedLocalValue(self->_service_);
  }
  OrgCybergarageUpnpAction *getIP = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:@"GetLinkLayerMaxBitRates"];
  if (getIP == nil || ![getIP postControlAction]) return -1;
  OrgCybergarageUpnpArgument *a = [((OrgCybergarageUpnpArgumentList *) nil_chk([getIP getOutputArgumentList])) getArgumentWithNSString:@"NewUpstreamMaxBitRate"];
  if (a == nil) return -1;
  @try {
    return JavaLangInteger_parseIntWithNSString_([a getValue]);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return -1;
  }
}

jint NetI2pRouterTransportUPnP_getDownstreamMaxBitRate(NetI2pRouterTransportUPnP *self) {
  OrgCybergarageUpnpService *service;
  @synchronized(self->lock_) {
    if (!NetI2pRouterTransportUPnP_isNATPresent(self) || JreLoadVolatileBoolean(&self->thinksWeAreDoubleNatted_)) return -1;
    service = JreRetainedLocalValue(self->_service_);
  }
  OrgCybergarageUpnpAction *getIP = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:@"GetLinkLayerMaxBitRates"];
  if (getIP == nil || ![getIP postControlAction]) return -1;
  OrgCybergarageUpnpArgument *a = [((OrgCybergarageUpnpArgumentList *) nil_chk([getIP getOutputArgumentList])) getArgumentWithNSString:@"NewDownstreamMaxBitRate"];
  if (a == nil) return -1;
  @try {
    return JavaLangInteger_parseIntWithNSString_([a getValue]);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return -1;
  }
}

void NetI2pRouterTransportUPnP_listStateTableWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(OrgCybergarageUpnpService *serv, JavaLangStringBuilder *sb) {
  NetI2pRouterTransportUPnP_initialize();
  OrgCybergarageUpnpServiceStateTable *table;
  @try {
    table = [((OrgCybergarageUpnpService *) nil_chk(serv)) getServiceStateTable];
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" : no state"];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<ul><small>"];
  for (jint i = 0; i < [((OrgCybergarageUpnpServiceStateTable *) nil_chk(table)) size]; i++) {
    OrgCybergarageUpnpStateVariable *current = [table getStateVariableWithInt:i];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([((OrgCybergarageUpnpStateVariable *) nil_chk(current)) getName])])) appendWithNSString:@" : \""])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([current getValue])])) appendWithNSString:@"\"</li>"];
  }
  [sb appendWithNSString:@"</small></ul>"];
}

void NetI2pRouterTransportUPnP_listActionsArgumentsWithOrgCybergarageUpnpAction_withJavaLangStringBuilder_(OrgCybergarageUpnpAction *action, JavaLangStringBuilder *sb) {
  NetI2pRouterTransportUPnP_initialize();
  OrgCybergarageUpnpArgumentList *ar = [((OrgCybergarageUpnpAction *) nil_chk(action)) getArgumentList];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<ol>"];
  for (jint i = 0; i < [((OrgCybergarageUpnpArgumentList *) nil_chk(ar)) size]; i++) {
    OrgCybergarageUpnpArgument *argument = [ar getArgumentWithInt:i];
    if (argument == nil) continue;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li><small>argument : "])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([argument getName])])) appendWithNSString:@"</small></li>"];
  }
  [sb appendWithNSString:@"</ol>"];
}

void NetI2pRouterTransportUPnP_listActionsWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(OrgCybergarageUpnpService *service, JavaLangStringBuilder *sb) {
  NetI2pRouterTransportUPnP_initialize();
  OrgCybergarageUpnpActionList *al = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionList];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<ul>"];
  for (jint i = 0; i < [((OrgCybergarageUpnpActionList *) nil_chk(al)) size]; i++) {
    OrgCybergarageUpnpAction *action = [al getActionWithInt:i];
    if (action == nil) continue;
    [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([action getName])];
    NetI2pRouterTransportUPnP_listActionsArgumentsWithOrgCybergarageUpnpAction_withJavaLangStringBuilder_(action, sb);
    [sb appendWithNSString:@"</li>"];
  }
  [sb appendWithNSString:@"</ul>"];
}

NSString *NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv) {
  @synchronized(self->toStringLock_) {
    if ((![((NSString *) nil_chk(action)) isEqual:self->_lastAction_]) || (![((OrgCybergarageUpnpService *) nil_chk(serv)) isEqual:self->_lastService_]) || self->_lastArgumentList_ == nil) {
      OrgCybergarageUpnpAction *getIP = [((OrgCybergarageUpnpService *) nil_chk(serv)) getActionWithNSString:action];
      if (getIP == nil || ![getIP postControlAction]) {
        JreStrongAssign(&self->_lastAction_, nil);
        return JreRetainedLocalValue(nil);
      }
      JreStrongAssign(&self->_lastAction_, action);
      JreStrongAssign(&self->_lastService_, serv);
      JreStrongAssign(&self->_lastArgumentList_, [getIP getOutputArgumentList]);
    }
    OrgCybergarageUpnpArgument *a = [((OrgCybergarageUpnpArgumentList *) nil_chk(self->_lastArgumentList_)) getArgumentWithNSString:arg];
    if (a == nil) return @"";
    NSString *rv = [a getValue];
    return JreRetainedLocalValue(NetI2pDataDataHelper_escapeHTMLWithNSString_(rv));
  }
}

NSString *NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv) {
  NSString *rv = NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
  if (rv != nil && [rv java_length] > 0) {
    @try {
      jlong l = JavaLangLong_parseLongWithNSString_(rv);
      rv = NetI2pDataDataHelper_formatSize2DecimalWithLong_(l);
      if (l == NetI2pRouterTransportUPnP_UINT_MAX) rv = JreStrcat("$$", @"&gt; ", rv);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return rv;
}

NSString *NetI2pRouterTransportUPnP_toTimeWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv) {
  NSString *rv = NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
  if (rv != nil && [rv java_length] > 0) {
    @try {
      jlong l = JavaLangLong_parseLongWithNSString_(rv);
      rv = NetI2pDataDataHelper_formatDuration2WithLong_(l * 1000);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return rv;
}

NSString *NetI2pRouterTransportUPnP_toBooleanWithNSString_withNSString_withOrgCybergarageUpnpService_(NetI2pRouterTransportUPnP *self, NSString *action, NSString *arg, OrgCybergarageUpnpService *serv) {
  NSString *rv = NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, action, arg, serv);
  return JavaLangBoolean_toStringWithBoolean_([@"1" isEqual:rv]);
}

void NetI2pRouterTransportUPnP_listSubServicesWithOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(NetI2pRouterTransportUPnP *self, OrgCybergarageUpnpDevice *dev, JavaLangStringBuilder *sb) {
  OrgCybergarageUpnpServiceList *sl = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getServiceList];
  if ([((OrgCybergarageUpnpServiceList *) nil_chk(sl)) isEmpty]) return;
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<ul>\n"];
  for (jint i = 0; i < [sl size]; i++) {
    OrgCybergarageUpnpService *serv = [sl getServiceWithInt:i];
    if (serv == nil) continue;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Service")])) appendWithNSString:@": "];
    NSString *type = [serv getServiceType];
    if ([@"urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1" isEqual:type]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"WAN Common Interface Configuration")];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Status")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetCommonLinkProperties", @"NewPhysicalLinkStatus", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Type")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetCommonLinkProperties", @"NewWANAccessType", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Upstream")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetCommonLinkProperties", @"NewLayer1UpstreamMaxBitRate", serv)])) appendWithNSString:@"bps"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Downstream")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetCommonLinkProperties", @"NewLayer1DownstreamMaxBitRate", serv)])) appendWithNSString:@"bps"];
      if ([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterTransportUPnP_PROP_ADVANCED]) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Sent: "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetTotalBytesSent", @"NewTotalBytesSent", serv)])) appendWithChar:'B'];
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Received: "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetTotalBytesReceived", @"NewTotalBytesReceived", serv)])) appendWithChar:'B'];
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Sent packets: "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetTotalPacketsSent", @"NewTotalPacketsSent", serv)];
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Received packets: "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetTotalPacketsReceived", @"NewTotalPacketsReceived", serv)];
      }
    }
    else if ([((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_PPP_CONNECTION)) isEqual:type]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"WAN PPP Connection")];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Status")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetStatusInfo", @"NewConnectionStatus", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Uptime")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toTimeWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetStatusInfo", @"NewUptime", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Type")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetConnectionTypeInfo", @"NewConnectionType", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Upstream")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetLinkLayerMaxBitRates", @"NewUpstreamMaxBitRate", serv)])) appendWithNSString:@"bps"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Downstream")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toLongWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetLinkLayerMaxBitRates", @"NewDownstreamMaxBitRate", serv)])) appendWithNSString:@"bps"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"External IP")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetExternalIPAddress", @"NewExternalIPAddress", serv)];
    }
    else if ([@"urn:schemas-upnp-org:service:Layer3Forwarding:1" isEqual:type]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Layer 3 Forwarding")];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Default Connection Service")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetDefaultConnectionService", @"NewDefaultConnectionService", serv)];
    }
    else if ([((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_IP_CONNECTION)) isEqual:type] || [((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_IP_CONNECTION_2)) isEqual:type]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"WAN IP Connection")];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Status")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetStatusInfo", @"NewConnectionStatus", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Uptime")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toTimeWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetStatusInfo", @"NewUptime", serv)];
      NSString *error = NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetStatusInfo", @"NewLastConnectionError", serv);
      if (error != nil && [error java_length] > 0 && ![error isEqual:@"ERROR_NONE"]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Last Error"])) appendWithNSString:@": "])) appendWithNSString:error];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Type")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetConnectionTypeInfo", @"NewConnectionType", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"External IP")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetExternalIPAddress", @"NewExternalIPAddress", serv)];
    }
    else if ([((NSString *) nil_chk(NetI2pRouterTransportUPnP_WAN_IPV6_CONNECTION)) isEqual:type]) {
      [sb appendWithNSString:@"WAN IPv6 Connection"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:@"Firewall Enabled"])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toBooleanWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetFirewallStatus", @"FirewallEnabled", serv)];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<li>"])) appendWithNSString:@"Pinhole Allowed"])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toBooleanWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetFirewallStatus", @"InboundPinholeAllowed", serv)];
    }
    else if ([@"urn:schemas-upnp-org:service:WANEthernetLinkConfig:1" isEqual:type]) {
      [sb appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"WAN Ethernet Link Configuration")];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<ul><li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Status")])) appendWithNSString:@": "])) appendWithNSString:NetI2pRouterTransportUPnP_toStringWithNSString_withNSString_withOrgCybergarageUpnpService_(self, @"GetEthernetLinkStatus", @"NewEthernetLinkStatus", serv)];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_(type)])) appendWithNSString:@"<ul>"];
    }
    if ([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterTransportUPnP_PROP_ADVANCED]) {
      [sb appendWithNSString:@"<li>Actions"];
      NetI2pRouterTransportUPnP_listActionsWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(serv, sb);
      [sb appendWithNSString:@"</li><li>States"];
      NetI2pRouterTransportUPnP_listStateTableWithOrgCybergarageUpnpService_withJavaLangStringBuilder_(serv, sb);
      [sb appendWithNSString:@"</li>"];
    }
    [sb appendWithNSString:@"</ul>\n"];
  }
  [sb appendWithNSString:@"</ul>\n"];
}

void NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(NetI2pRouterTransportUPnP *self, NSString *prefix, OrgCybergarageUpnpDevice *dev, JavaLangStringBuilder *sb) {
  if (prefix == nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<p>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Found Device")])) appendWithNSString:@": "];
  else [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<li>"])) appendWithNSString:NetI2pRouterTransportUPnP__tWithNSString_(self, @"Subdevice")])) appendWithNSString:@": "];
  [sb appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([((OrgCybergarageUpnpDevice *) nil_chk(dev)) getFriendlyName])];
  if (prefix == nil) {
    NSString *ip = NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(dev);
    if (ip != nil) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<br>IP: "])) appendWithNSString:ip];
    NSString *udn = [dev getUDN];
    if (udn != nil) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<br>UDN: "])) appendWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_(udn)];
  }
  [sb appendWithNSString:@"</p>"];
  NetI2pRouterTransportUPnP_listSubServicesWithOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(self, dev, sb);
  OrgCybergarageUpnpDeviceList *dl = [dev getDeviceList];
  if ([((OrgCybergarageUpnpDeviceList *) nil_chk(dl)) isEmpty]) return;
  [sb appendWithNSString:@"<ul>\n"];
  for (jint j = 0; j < [dl size]; j++) {
    OrgCybergarageUpnpDevice *subDev = [dl getDeviceWithInt:j];
    if (subDev == nil) continue;
    NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(self, [dev getFriendlyName], subDev, sb);
  }
  [sb appendWithNSString:@"</ul>\n"];
}

jboolean NetI2pRouterTransportUPnP_addMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, NSString *description_, OrgFreenetprojectForwardPort *fp) {
  OrgCybergarageUpnpService *service;
  @synchronized(self->lock_) {
    if (self->isDisabled_ || !NetI2pRouterTransportUPnP_isNATPresent(self) || self->_router_ == nil) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$ZCZC@", @"Can't addMapping: ", self->isDisabled_, ' ', NetI2pRouterTransportUPnP_isNATPresent(self), ' ', self->_router_)];
      return false;
    }
    service = JreRetainedLocalValue(self->_service_);
  }
  OrgCybergarageUpnpAction *add = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:@"AddPortMapping"];
  if (add == nil) {
    if (JreLoadVolatileBoolean(&self->_serviceLacksAPM_)) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Couldn't find AddPortMapping action!"];
    }
    else {
      JreAssignVolatileBoolean(&self->_serviceLacksAPM_, true);
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"UPnP device does not support port forwarding"];
    }
    return false;
  }
  [add setArgumentValueWithNSString:@"NewRemoteHost" withNSString:@""];
  [add setArgumentValueWithNSString:@"NewExternalPort" withInt:port];
  NSString *intf = [((OrgCybergarageUpnpDevice *) nil_chk(self->_router_)) getInterfaceAddress];
  NSString *us = NetI2pRouterTransportUPnP_getOurAddressWithNSString_(self, intf);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN] && ![((NSString *) nil_chk(us)) isEqual:intf]) [self->_log_ warnWithNSString:JreStrcat("$$CI$$", @"Requesting port forward to ", us, ':', port, @" when cybergarage wanted ", intf)];
  [add setArgumentValueWithNSString:@"NewInternalClient" withNSString:us];
  [add setArgumentValueWithNSString:@"NewInternalPort" withInt:port];
  [add setArgumentValueWithNSString:@"NewProtocol" withNSString:protocol];
  [add setArgumentValueWithNSString:@"NewPortMappingDescription" withNSString:description_];
  [add setArgumentValueWithNSString:@"NewEnabled" withNSString:@"1"];
  [add setArgumentValueWithNSString:@"NewLeaseDuration" withInt:0];
  jboolean rv = [add postControlAction];
  if (rv) {
    @synchronized(self->lock_) {
      [((id<JavaUtilSet>) nil_chk(self->portsForwarded_)) addWithId:fp];
    }
  }
  jint level = rv ? NetI2pUtilLog_INFO : NetI2pUtilLog_WARN;
  if ([self->_log_ shouldLogWithInt:level]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"AddPortMapping result for "])) appendWithNSString:protocol])) appendWithNSString:@" port "])) appendWithInt:port];
    OrgCybergarageUpnpUPnPStatus *status = [add getStatus];
    if (status != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Status: "])) appendWithInt:[status getCode]])) appendWithChar:' '])) appendWithNSString:[status getDescription]];
    status = [add getControlStatus];
    if (status != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" ControlStatus: "])) appendWithInt:[status getCode]])) appendWithChar:' '])) appendWithNSString:[status getDescription]];
    [self->_log_ logWithInt:level withNSString:[buf description]];
  }
  return rv;
}

NSString *NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(OrgCybergarageUpnpDevice *dev) {
  NetI2pRouterTransportUPnP_initialize();
  NSString *rv = nil;
  NSString *him = [((OrgCybergarageUpnpDevice *) nil_chk(dev)) getURLBase];
  if (him != nil && [him java_length] > 0) {
    @try {
      JavaNetURI *url = create_JavaNetURI_initWithNSString_(him);
      rv = [url getHost];
    }
    @catch (JavaNetURISyntaxException *use) {
    }
  }
  if (rv == nil) {
    him = [dev getLocation];
    if (him != nil && [him java_length] > 0) {
      @try {
        JavaNetURI *url = create_JavaNetURI_initWithNSString_(him);
        rv = [url getHost];
      }
      @catch (JavaNetURISyntaxException *use) {
      }
    }
  }
  return rv;
}

NSString *NetI2pRouterTransportUPnP_getOurAddressWithNSString_(NetI2pRouterTransportUPnP *self, NSString *deflt) {
  NSString *rv = deflt;
  NSString *hisIP = NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(self->_router_);
  if (hisIP == nil) return rv;
  @try {
    IOSByteArray *hisBytes = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_(hisIP))) getAddress];
    if (((IOSByteArray *) nil_chk(hisBytes))->size_ != 4) return deflt;
    jlong hisLong = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(hisBytes, 0, 4);
    jlong distance = JavaLangLong_MAX_VALUE;
    id<JavaUtilSet> myAddresses = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(true, false);
    [((id<JavaUtilSet>) nil_chk(myAddresses)) addWithId:deflt];
    for (NSString * __strong me in myAddresses) {
      if ([((NSString *) nil_chk(me)) java_hasPrefix:@"127."] || [me isEqual:@"0.0.0.0"]) continue;
      @try {
        IOSByteArray *myBytes = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_(me))) getAddress];
        jlong myLong = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(myBytes, 0, 4);
        jlong newDistance = myLong ^ hisLong;
        if (newDistance < distance) {
          rv = me;
          distance = newDistance;
        }
      }
      @catch (JavaNetUnknownHostException *uhe) {
      }
    }
  }
  @catch (JavaNetUnknownHostException *uhe) {
  }
  return rv;
}

jboolean NetI2pRouterTransportUPnP_removeMappingWithNSString_withInt_withOrgFreenetprojectForwardPort_withBoolean_(NetI2pRouterTransportUPnP *self, NSString *protocol, jint port, OrgFreenetprojectForwardPort *fp, jboolean noLog) {
  OrgCybergarageUpnpService *service;
  @synchronized(self->lock_) {
    if (self->isDisabled_ || !NetI2pRouterTransportUPnP_isNATPresent(self)) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$ZCZC@", @"Can't removeMapping: ", self->isDisabled_, ' ', NetI2pRouterTransportUPnP_isNATPresent(self), ' ', self->_router_)];
      return false;
    }
    service = JreRetainedLocalValue(self->_service_);
  }
  OrgCybergarageUpnpAction *remove = [((OrgCybergarageUpnpService *) nil_chk(service)) getActionWithNSString:@"DeletePortMapping"];
  if (remove == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Couldn't find DeletePortMapping action!"];
    return false;
  }
  [remove setArgumentValueWithNSString:@"NewExternalPort" withInt:port];
  [remove setArgumentValueWithNSString:@"NewProtocol" withNSString:protocol];
  jboolean retval = [remove postControlAction];
  @synchronized(self->lock_) {
    [((id<JavaUtilSet>) nil_chk(self->portsForwarded_)) removeWithId:fp];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN] && !noLog) [self->_log_ warnWithNSString:JreStrcat("$$CI$$", @"UPnP: Removed mapping for ", ((OrgFreenetprojectForwardPort *) nil_chk(fp))->name_, ' ', port, @" / ", protocol)];
  return retval;
}

NSString *NetI2pRouterTransportUPnP_protoToStringWithInt_(jint p) {
  NetI2pRouterTransportUPnP_initialize();
  if (p == OrgFreenetprojectForwardPort_PROTOCOL_UDP_IPV4) return @"UDP";
  if (p == OrgFreenetprojectForwardPort_PROTOCOL_TCP_IPV4) return @"TCP";
  return @"?";
}

void NetI2pRouterTransportUPnP_registerPortsWithJavaUtilSet_(NetI2pRouterTransportUPnP *self, id<JavaUtilSet> portsToForwardNow) {
  if (JreLoadVolatileBoolean(&self->_serviceLacksAPM_)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"UPnP device does not support port forwarding"];
    id<JavaUtilMap> map = create_JavaUtilHashMap_initWithInt_([((id<JavaUtilSet>) nil_chk(portsToForwardNow)) size]);
    for (OrgFreenetprojectForwardPort * __strong port in portsToForwardNow) {
      OrgFreenetprojectForwardPortStatus *fps = create_OrgFreenetprojectForwardPortStatus_initWithInt_withNSString_withInt_(OrgFreenetprojectForwardPortStatus_DEFINITE_FAILURE, @"UPnP device does not support port forwarding", ((OrgFreenetprojectForwardPort *) nil_chk(port))->portNumber_);
      [map putWithId:port withId:fps];
    }
    [((id<OrgFreenetprojectForwardPortCallback>) nil_chk(self->forwardCallback_)) portForwardStatusWithJavaUtilMap:map];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$", @"Starting thread to forward ", [((id<JavaUtilSet>) nil_chk(portsToForwardNow)) size], @" ports")];
  JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(self, portsToForwardNow));
  [t setNameWithNSString:JreStrcat("$I", @"UPnP Port Opener ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterTransportUPnP___id)) incrementAndGet])];
  [t setDaemonWithBoolean:true];
  [t start];
}

void NetI2pRouterTransportUPnP_unregisterPortsWithJavaUtilSet_(NetI2pRouterTransportUPnP *self, id<JavaUtilSet> portsToForwardNow) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$", @"Starting thread to un-forward ", [((id<JavaUtilSet>) nil_chk(portsToForwardNow)) size], @" ports")];
  JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(self, portsToForwardNow));
  [t setNameWithNSString:JreStrcat("$I", @"UPnP Port Closer ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterTransportUPnP___id)) incrementAndGet])];
  [t setDaemonWithBoolean:true];
  [t start];
}

void NetI2pRouterTransportUPnP_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterTransportUPnP_initialize();
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:NetI2pRouterTransportUPnP_PROP_ADVANCED withNSString:@"true"];
  NetI2pI2PAppContext *ctx = create_NetI2pI2PAppContext_initWithJavaUtilProperties_(props);
  NetI2pRouterTransportUPnP *cp = create_NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(ctx);
  OrgCybergarageUpnpUPnP_setEnableWithInt_(OrgCybergarageUpnpUPnP_USE_ONLY_IPV4_ADDR);
  OrgCybergarageUtilDebug_initialize__WithNetI2pI2PAppContext_(ctx);
  [cp setHTTPPortWithInt:49152 + [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextIntWithInt:5000]];
  [cp setSSDPPortWithInt:54152 + [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextIntWithInt:5000]];
  jlong start = JavaLangSystem_currentTimeMillis();
  [cp start];
  jlong s2 = JavaLangSystem_currentTimeMillis();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$J$", @"Start took ", (s2 - start), @"ms")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Searching for UPnP devices"];
  start = JavaLangSystem_currentTimeMillis();
  [cp search];
  s2 = JavaLangSystem_currentTimeMillis();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$J$", @"Search kickoff took ", (s2 - start), @"ms")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Waiting 10 seconds for responses"];
  JavaLangThread_sleepWithLong_(10000);
  OrgCybergarageUpnpDeviceList *list = [cp getDeviceList];
  if ([((OrgCybergarageUpnpDeviceList *) nil_chk(list)) isEmpty]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"No UPnP devices found"];
    JavaLangSystem_exitWithInt_(1);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"Found ", [list size], @" devices.")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Redirect the following output to an html file and view in a browser."];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  id<JavaUtilIterator> it = [list iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgCybergarageUpnpDevice *device = [it next];
    NetI2pRouterTransportUPnP_listSubDevWithNSString_withOrgCybergarageUpnpDevice_withJavaLangStringBuilder_(cp, [((OrgCybergarageUpnpDevice *) nil_chk(device)) description], device, sb);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$$", @"<h3>Device ", (++i), @": ", NetI2pDataDataHelper_escapeHTMLWithNSString_([device getFriendlyName]), @"</h3>")];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"<p>UDN: ", NetI2pDataDataHelper_escapeHTMLWithNSString_([device getUDN]))];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"<br>IP: ", NetI2pRouterTransportUPnP_getIPWithOrgCybergarageUpnpDevice_(device))];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[sb description]];
    [sb setLengthWithInt:0];
  }
  JavaLangSystem_exitWithInt_(0);
}

NSString *NetI2pRouterTransportUPnP__tWithNSString_(NetI2pRouterTransportUPnP *self, NSString *s) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(s, self->_context_, NetI2pRouterTransportUPnP_BUNDLE_NAME);
}

NSString *NetI2pRouterTransportUPnP__tWithNSString_withId_(NetI2pRouterTransportUPnP *self, NSString *s, id o) {
  return NetI2pUtilTranslate_getStringWithNSString_withId_withNetI2pI2PAppContext_withNSString_(s, o, self->_context_, NetI2pRouterTransportUPnP_BUNDLE_NAME);
}

NSString *NetI2pRouterTransportUPnP__tWithNSString_withId_withId_(NetI2pRouterTransportUPnP *self, NSString *s, id o, id o2) {
  return NetI2pUtilTranslate_getStringWithNSString_withId_withId_withNetI2pI2PAppContext_withNSString_(s, o, o2, self->_context_, NetI2pRouterTransportUPnP_BUNDLE_NAME);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnP)

@implementation NetI2pRouterTransportUPnP_RegisterPortsThread

- (instancetype)initWithNetI2pRouterTransportUPnP:(NetI2pRouterTransportUPnP *)outer$
                                  withJavaUtilSet:(id<JavaUtilSet>)ports {
  NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(self, outer$, ports);
  return self;
}

- (void)run {
  id<JavaUtilMap> map = create_JavaUtilHashMap_initWithInt_([((id<JavaUtilSet>) nil_chk(portsToForwardNow_)) size]);
  for (OrgFreenetprojectForwardPort * __strong port in nil_chk(portsToForwardNow_)) {
    NSString *proto = NetI2pRouterTransportUPnP_protoToStringWithInt_(((OrgFreenetprojectForwardPort *) nil_chk(port))->protocol_);
    OrgFreenetprojectForwardPortStatus *fps;
    if ([((NSString *) nil_chk(proto)) java_length] <= 1) {
      fps = create_OrgFreenetprojectForwardPortStatus_initWithInt_withNSString_withInt_(OrgFreenetprojectForwardPortStatus_DEFINITE_FAILURE, @"Protocol not supported", port->portNumber_);
    }
    else if (NetI2pRouterTransportUPnP_tryAddMappingWithNSString_withInt_withNSString_withOrgFreenetprojectForwardPort_(this$0_, proto, port->portNumber_, port->name_, port)) {
      fps = create_OrgFreenetprojectForwardPortStatus_initWithInt_withNSString_withInt_(OrgFreenetprojectForwardPortStatus_MAYBE_SUCCESS, @"Port apparently forwarded by UPnP", port->portNumber_);
    }
    else {
      fps = create_OrgFreenetprojectForwardPortStatus_initWithInt_withNSString_withInt_(OrgFreenetprojectForwardPortStatus_PROBABLE_FAILURE, @"UPnP port forwarding apparently failed", port->portNumber_);
    }
    [map putWithId:port withId:fps];
  }
  [((id<OrgFreenetprojectForwardPortCallback>) nil_chk(this$0_->forwardCallback_)) portForwardStatusWithJavaUtilMap:map];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(portsToForwardNow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUPnP:withJavaUtilSet:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUPnP;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "portsToForwardNow_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;", "(Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;)V", "Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;", "LNetI2pRouterTransportUPnP;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnP_RegisterPortsThread = { "RegisterPortsThread", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnP_RegisterPortsThread;
}

@end

void NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP_RegisterPortsThread *self, NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->portsToForwardNow_, ports);
}

NetI2pRouterTransportUPnP_RegisterPortsThread *new_NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnP_RegisterPortsThread, initWithNetI2pRouterTransportUPnP_withJavaUtilSet_, outer$, ports)
}

NetI2pRouterTransportUPnP_RegisterPortsThread *create_NetI2pRouterTransportUPnP_RegisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnP_RegisterPortsThread, initWithNetI2pRouterTransportUPnP_withJavaUtilSet_, outer$, ports)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnP_RegisterPortsThread)

@implementation NetI2pRouterTransportUPnP_UnregisterPortsThread

- (instancetype)initWithNetI2pRouterTransportUPnP:(NetI2pRouterTransportUPnP *)outer$
                                  withJavaUtilSet:(id<JavaUtilSet>)ports {
  NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(self, outer$, ports);
  return self;
}

- (void)run {
  for (OrgFreenetprojectForwardPort * __strong port in nil_chk(portsToForwardNow_)) {
    NSString *proto = NetI2pRouterTransportUPnP_protoToStringWithInt_(((OrgFreenetprojectForwardPort *) nil_chk(port))->protocol_);
    if ([((NSString *) nil_chk(proto)) java_length] <= 1) continue;
    NetI2pRouterTransportUPnP_removeMappingWithNSString_withInt_withOrgFreenetprojectForwardPort_withBoolean_(this$0_, proto, port->portNumber_, port, false);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(portsToForwardNow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUPnP:withJavaUtilSet:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUPnP;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "portsToForwardNow_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;", "(Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;)V", "Ljava/util/Set<Lorg/freenetproject/ForwardPort;>;", "LNetI2pRouterTransportUPnP;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnP_UnregisterPortsThread = { "UnregisterPortsThread", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnP_UnregisterPortsThread;
}

@end

void NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP_UnregisterPortsThread *self, NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->portsToForwardNow_, ports);
}

NetI2pRouterTransportUPnP_UnregisterPortsThread *new_NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnP_UnregisterPortsThread, initWithNetI2pRouterTransportUPnP_withJavaUtilSet_, outer$, ports)
}

NetI2pRouterTransportUPnP_UnregisterPortsThread *create_NetI2pRouterTransportUPnP_UnregisterPortsThread_initWithNetI2pRouterTransportUPnP_withJavaUtilSet_(NetI2pRouterTransportUPnP *outer$, id<JavaUtilSet> ports) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnP_UnregisterPortsThread, initWithNetI2pRouterTransportUPnP_withJavaUtilSet_, outer$, ports)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnP_UnregisterPortsThread)
