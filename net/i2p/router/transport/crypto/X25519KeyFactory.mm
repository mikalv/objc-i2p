//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/crypto/X25519KeyFactory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/crypto/Curve25519.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/security/KeyPair.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"
#include "net/i2p/router/transport/crypto/X25519PrivateKey.h"
#include "net/i2p/router/transport/crypto/X25519PublicKey.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportCryptoX25519KeyFactory () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  jint _minSize_;
  jint _maxSize_;
  jint _calcDelay_;
  JavaUtilConcurrentLinkedBlockingQueue *_keys_;
  volatile_jboolean _isRunning_;
  jlong _checkDelay_;
}

- (JavaSecurityKeyPair *)precalc;

- (jboolean)addKeysWithJavaSecurityKeyPair:(JavaSecurityKeyPair *)kp;

- (jint)getSize;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportCryptoX25519KeyFactory, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportCryptoX25519KeyFactory, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportCryptoX25519KeyFactory, _keys_, JavaUtilConcurrentLinkedBlockingQueue *)

inline NSString *NetI2pRouterTransportCryptoX25519KeyFactory_get_PROP_DH_PRECALC_MIN(void);
static NSString *NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MIN = @"crypto.xdh.precalc.min";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCryptoX25519KeyFactory, PROP_DH_PRECALC_MIN, NSString *)

inline NSString *NetI2pRouterTransportCryptoX25519KeyFactory_get_PROP_DH_PRECALC_MAX(void);
static NSString *NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MAX = @"crypto.xdh.precalc.max";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCryptoX25519KeyFactory, PROP_DH_PRECALC_MAX, NSString *)

inline NSString *NetI2pRouterTransportCryptoX25519KeyFactory_get_PROP_DH_PRECALC_DELAY(void);
static NSString *NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_DELAY = @"crypto.xdh.precalc.delay";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCryptoX25519KeyFactory, PROP_DH_PRECALC_DELAY, NSString *)

inline jint NetI2pRouterTransportCryptoX25519KeyFactory_get_DEFAULT_DH_PRECALC_MIN(void);
#define NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MIN 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCryptoX25519KeyFactory, DEFAULT_DH_PRECALC_MIN, jint)

inline jint NetI2pRouterTransportCryptoX25519KeyFactory_get_DEFAULT_DH_PRECALC_MAX(void);
#define NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MAX 60
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCryptoX25519KeyFactory, DEFAULT_DH_PRECALC_MAX, jint)

inline jint NetI2pRouterTransportCryptoX25519KeyFactory_get_DEFAULT_DH_PRECALC_DELAY(void);
#define NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_DELAY 25
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCryptoX25519KeyFactory, DEFAULT_DH_PRECALC_DELAY, jint)

__attribute__((unused)) static JavaSecurityKeyPair *NetI2pRouterTransportCryptoX25519KeyFactory_precalc(NetI2pRouterTransportCryptoX25519KeyFactory *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportCryptoX25519KeyFactory_addKeysWithJavaSecurityKeyPair_(NetI2pRouterTransportCryptoX25519KeyFactory *self, JavaSecurityKeyPair *kp);

__attribute__((unused)) static jint NetI2pRouterTransportCryptoX25519KeyFactory_getSize(NetI2pRouterTransportCryptoX25519KeyFactory *self);

@implementation NetI2pRouterTransportCryptoX25519KeyFactory

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pRouterTransportCryptoX25519KeyFactory_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)shutdown {
  JreAssignVolatileBoolean(&_isRunning_, false);
  [self interrupt];
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_keys_)) clear];
}

- (void)run {
  JreAssignVolatileBoolean(&_isRunning_, true);
  while (JreLoadVolatileBoolean(&_isRunning_)) {
    jint startSize = NetI2pRouterTransportCryptoX25519KeyFactory_getSize(self);
    if (startSize <= (_minSize_ * 2 / 3) && _checkDelay_ > 1000) _checkDelay_ -= 1000;
    else if (startSize > (_minSize_ * 3 / 2) && _checkDelay_ < 60 * 1000) _checkDelay_ += 1000;
    if (startSize < _minSize_) {
      while (NetI2pRouterTransportCryptoX25519KeyFactory_getSize(self) < _maxSize_ && JreLoadVolatileBoolean(&_isRunning_)) {
        jlong curStart = JavaLangSystem_currentTimeMillis();
        if (!NetI2pRouterTransportCryptoX25519KeyFactory_addKeysWithJavaSecurityKeyPair_(self, NetI2pRouterTransportCryptoX25519KeyFactory_precalc(self))) break;
        jlong curCalc = JavaLangSystem_currentTimeMillis() - curStart;
        if (!JavaLangThread_interrupted()) {
          @try {
            JavaLangThread_sleepWithLong_(JavaLangMath_minWithLong_withLong_(200, JavaLangMath_maxWithLong_withLong_(10, _calcDelay_ + (curCalc * 3))));
          }
          @catch (JavaLangInterruptedException *ie) {
          }
        }
      }
    }
    if (!JreLoadVolatileBoolean(&_isRunning_)) break;
    @try {
      JavaLangThread_sleepWithLong_(_checkDelay_);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (JavaSecurityKeyPair *)getKeys {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"crypto.XDHUsed" withLong:1];
  JavaSecurityKeyPair *rv = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_keys_)) poll];
  if (rv == nil) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"crypto.XDHEmpty" withLong:1];
    rv = NetI2pRouterTransportCryptoX25519KeyFactory_precalc(self);
    [self interrupt];
  }
  return rv;
}

- (JavaSecurityKeyPair *)precalc {
  return NetI2pRouterTransportCryptoX25519KeyFactory_precalc(self);
}

- (void)returnUnusedWithJavaSecurityKeyPair:(JavaSecurityKeyPair *)kp {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"crypto.XDHReused" withLong:1];
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_keys_)) offerWithId:kp];
}

- (jboolean)addKeysWithJavaSecurityKeyPair:(JavaSecurityKeyPair *)kp {
  return NetI2pRouterTransportCryptoX25519KeyFactory_addKeysWithJavaSecurityKeyPair_(self, kp);
}

- (jint)getSize {
  return NetI2pRouterTransportCryptoX25519KeyFactory_getSize(self);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_keys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(getKeys);
  methods[4].selector = @selector(precalc);
  methods[5].selector = @selector(returnUnusedWithJavaSecurityKeyPair:);
  methods[6].selector = @selector(addKeysWithJavaSecurityKeyPair:);
  methods[7].selector = @selector(getSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_minSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_calcDelay_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_keys_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_checkDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_DH_PRECALC_MIN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PROP_DH_PRECALC_MAX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "PROP_DH_PRECALC_DELAY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "DEFAULT_DH_PRECALC_MIN", "I", .constantValue.asInt = NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MIN, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_DH_PRECALC_MAX", "I", .constantValue.asInt = NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MAX, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_DH_PRECALC_DELAY", "I", .constantValue.asInt = NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "returnUnused", "LJavaSecurityKeyPair;", "addKeys", "Ljava/util/concurrent/LinkedBlockingQueue<Ljava/security/KeyPair;>;", &NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MIN, &NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MAX, &NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_DELAY };
  static const J2ObjcClassInfo _NetI2pRouterTransportCryptoX25519KeyFactory = { "X25519KeyFactory", "net.i2p.router.transport.crypto", ptrTable, methods, fields, 7, 0x1, 8, 14, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCryptoX25519KeyFactory;
}

@end

void NetI2pRouterTransportCryptoX25519KeyFactory_initWithNetI2pI2PAppContext_(NetI2pRouterTransportCryptoX25519KeyFactory *self, NetI2pI2PAppContext *ctx) {
  NetI2pUtilI2PThread_initWithNSString_(self, @"DH Precalc");
  self->_checkDelay_ = 10 * 1000;
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportCryptoX25519KeyFactory_class_()]);
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"crypto.XDHGenerateTime" withNSString:@"How long it takes to create x and X" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"crypto.XDHUsed" withNSString:@"Need a DH from the queue" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"crypto.XDHReused" withNSString:@"Unused DH requeued" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"crypto.XDHEmpty" withNSString:@"DH queue empty" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint factor = (jint) JavaLangMath_maxWithLong_withLong_(1l, JavaLangMath_minWithLong_withLong_(4l, 1 + (maxMemory / (128 * 1024 * 1024l))));
  jint defaultMin = NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MIN * factor;
  jint defaultMax = NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_MAX * factor;
  self->_minSize_ = [ctx getPropertyWithNSString:NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MIN withInt:defaultMin];
  self->_maxSize_ = [ctx getPropertyWithNSString:NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_MAX withInt:defaultMax];
  self->_calcDelay_ = [ctx getPropertyWithNSString:NetI2pRouterTransportCryptoX25519KeyFactory_PROP_DH_PRECALC_DELAY withInt:NetI2pRouterTransportCryptoX25519KeyFactory_DEFAULT_DH_PRECALC_DELAY];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$I$IC", @"XDH Precalc (minimum: ", self->_minSize_, @" max: ", self->_maxSize_, @", delay: ", self->_calcDelay_, ')')];
  JreStrongAssignAndConsume(&self->_keys_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self->_maxSize_));
  if (!NetI2pUtilSystemVersion_isWindows()) [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY - 1];
}

NetI2pRouterTransportCryptoX25519KeyFactory *new_NetI2pRouterTransportCryptoX25519KeyFactory_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCryptoX25519KeyFactory, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pRouterTransportCryptoX25519KeyFactory *create_NetI2pRouterTransportCryptoX25519KeyFactory_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCryptoX25519KeyFactory, initWithNetI2pI2PAppContext_, ctx)
}

JavaSecurityKeyPair *NetI2pRouterTransportCryptoX25519KeyFactory_precalc(NetI2pRouterTransportCryptoX25519KeyFactory *self) {
  jlong start = JavaLangSystem_currentTimeMillis();
  IOSByteArray *priv = [IOSByteArray arrayWithLength:32];
  do {
    [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:priv];
  }
  while (IOSByteArray_Get(priv, 31) == 0);
  IOSByteArray *pub = [IOSByteArray arrayWithLength:32];
  ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(pub, 0, priv, nil);
  JavaSecurityKeyPair *rv = create_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(create_NetI2pRouterTransportCryptoX25519PublicKey_initWithByteArray_(pub), create_NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(priv));
  jlong end = JavaLangSystem_currentTimeMillis();
  jlong diff = end - start;
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"crypto.XDHGenerateTime" withLong:diff];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$", @"Took ", diff, @"ms to generate local DH value")];
  return rv;
}

jboolean NetI2pRouterTransportCryptoX25519KeyFactory_addKeysWithJavaSecurityKeyPair_(NetI2pRouterTransportCryptoX25519KeyFactory *self, JavaSecurityKeyPair *kp) {
  return [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->_keys_)) offerWithId:kp];
}

jint NetI2pRouterTransportCryptoX25519KeyFactory_getSize(NetI2pRouterTransportCryptoX25519KeyFactory *self) {
  return [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->_keys_)) size];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCryptoX25519KeyFactory)
