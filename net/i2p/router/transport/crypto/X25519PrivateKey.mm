//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/crypto/X25519PrivateKey.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/southernstorm/noise/crypto/Curve25519.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/router/transport/crypto/X25519PrivateKey.h"
#include "net/i2p/router/transport/crypto/X25519PublicKey.h"

@interface NetI2pRouterTransportCryptoX25519PrivateKey () {
 @public
  IOSByteArray *_data_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportCryptoX25519PrivateKey, _data_, IOSByteArray *)

@implementation NetI2pRouterTransportCryptoX25519PrivateKey

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(self, data);
  return self;
}

- (NetI2pRouterTransportCryptoX25519PublicKey *)toPublic {
  IOSByteArray *pub = [IOSByteArray arrayWithLength:32];
  ComSouthernstormNoiseCryptoCurve25519_evalWithByteArray_withInt_withByteArray_withByteArray_(pub, 0, _data_, nil);
  return create_NetI2pRouterTransportCryptoX25519PublicKey_initWithByteArray_(pub);
}

- (IOSByteArray *)getEncoded {
  return _data_;
}

- (NSString *)getAlgorithm {
  return @"X25519";
}

- (NSString *)getFormat {
  return @"raw";
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoX25519PublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(toPublic);
  methods[2].selector = @selector(getEncoded);
  methods[3].selector = @selector(getAlgorithm);
  methods[4].selector = @selector(getFormat);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCryptoX25519PrivateKey = { "X25519PrivateKey", "net.i2p.router.transport.crypto", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCryptoX25519PrivateKey;
}

@end

void NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(NetI2pRouterTransportCryptoX25519PrivateKey *self, IOSByteArray *data) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(data))->size_ != 32) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_data_, data);
}

NetI2pRouterTransportCryptoX25519PrivateKey *new_NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCryptoX25519PrivateKey, initWithByteArray_, data)
}

NetI2pRouterTransportCryptoX25519PrivateKey *create_NetI2pRouterTransportCryptoX25519PrivateKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCryptoX25519PrivateKey, initWithByteArray_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCryptoX25519PrivateKey)
