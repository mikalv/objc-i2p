//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/GeoIP.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/maxmind/geoip/Country.h"
#include "com/maxmind/geoip/InvalidDatabaseException.h"
#include "com/maxmind/geoip/LookupService.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/GeoIP.h"
#include "net/i2p/router/transport/GeoIPv6.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportGeoIP () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  id<JavaUtilMap> _codeToName_;
  id<JavaUtilMap> _codeCache_;
  id<JavaUtilMap> _IPToCountry_;
  id<JavaUtilSet> _pendingSearch_;
  id<JavaUtilSet> _pendingIPv6Search_;
  id<JavaUtilSet> _notFound_;
  JavaUtilConcurrentAtomicAtomicBoolean *_lock_;
  jint _lookupRunCount_;
}

- (void)readCountryFile;

- (IOSObjectArray *)readGeoIPFileWithJavaLangLongArray:(IOSObjectArray *)search;

- (void)updateOurCountry;

- (void)addWithLong:(jlong)ip;

- (NSString *)getWithLong:(jlong)ip;

+ (jlong)toLongWithByteArray:(IOSByteArray *)ip;

+ (NSString *)toV6WithLong:(jlong)ip;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _codeToName_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _codeCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _IPToCountry_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _pendingSearch_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _pendingIPv6Search_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _notFound_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGeoIP, _lock_, JavaUtilConcurrentAtomicAtomicBoolean *)

inline NSString *NetI2pRouterTransportGeoIP_get_DEBIAN_GEOIP_FILE(void);
static NSString *NetI2pRouterTransportGeoIP_DEBIAN_GEOIP_FILE = @"/usr/share/GeoIP/GeoIP.dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportGeoIP, DEBIAN_GEOIP_FILE, NSString *)

inline NSString *NetI2pRouterTransportGeoIP_get_DEBIAN_GEOIPV6_FILE(void);
static NSString *NetI2pRouterTransportGeoIP_DEBIAN_GEOIPV6_FILE = @"/usr/share/GeoIP/GeoIPv6.dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportGeoIP, DEBIAN_GEOIPV6_FILE, NSString *)

inline jboolean NetI2pRouterTransportGeoIP_get_ENABLE_DEBIAN(void);
static jboolean NetI2pRouterTransportGeoIP_ENABLE_DEBIAN;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTransportGeoIP, ENABLE_DEBIAN, jboolean)

inline NSString *NetI2pRouterTransportGeoIP_get_UNKNOWN_COUNTRY_CODE(void);
static NSString *NetI2pRouterTransportGeoIP_UNKNOWN_COUNTRY_CODE = @"--";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportGeoIP, UNKNOWN_COUNTRY_CODE, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportGeoIP_readCountryFile(NetI2pRouterTransportGeoIP *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportGeoIP_readGeoIPFileWithJavaLangLongArray_(NetI2pRouterTransportGeoIP *self, IOSObjectArray *search);

__attribute__((unused)) static void NetI2pRouterTransportGeoIP_updateOurCountry(NetI2pRouterTransportGeoIP *self);

__attribute__((unused)) static void NetI2pRouterTransportGeoIP_addWithLong_(NetI2pRouterTransportGeoIP *self, jlong ip);

__attribute__((unused)) static NSString *NetI2pRouterTransportGeoIP_getWithLong_(NetI2pRouterTransportGeoIP *self, jlong ip);

__attribute__((unused)) static jlong NetI2pRouterTransportGeoIP_toLongWithByteArray_(IOSByteArray *ip);

__attribute__((unused)) static NSString *NetI2pRouterTransportGeoIP_toV6WithLong_(jlong ip);

@interface NetI2pRouterTransportGeoIP_LookupJob : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportGeoIP *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportGeoIP:(NetI2pRouterTransportGeoIP *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportGeoIP_LookupJob)

inline jint NetI2pRouterTransportGeoIP_LookupJob_get_CLEAR(void);
#define NetI2pRouterTransportGeoIP_LookupJob_CLEAR 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportGeoIP_LookupJob, CLEAR, jint)

__attribute__((unused)) static void NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP_LookupJob *self, NetI2pRouterTransportGeoIP *outer$);

__attribute__((unused)) static NetI2pRouterTransportGeoIP_LookupJob *new_NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportGeoIP_LookupJob *create_NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportGeoIP_LookupJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportGeoIP)

NSString *NetI2pRouterTransportGeoIP_PROP_GEOIP_ENABLED = @"routerconsole.geoip.enable";
NSString *NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR = @"geoip.dir";
NSString *NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT = @"geoip";
NSString *NetI2pRouterTransportGeoIP_GEOIP_FILE_DEFAULT = @"geoip.txt";
NSString *NetI2pRouterTransportGeoIP_COUNTRY_FILE_DEFAULT = @"countries.txt";
NSString *NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY = @"i2np.lastCountry";
NSString *NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIP = @"geoip.dat";
NSString *NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIPV6 = @"geoip.v6.dat";

@implementation NetI2pRouterTransportGeoIP

+ (NSString *)PROP_GEOIP_ENABLED {
  return NetI2pRouterTransportGeoIP_PROP_GEOIP_ENABLED;
}

+ (NSString *)PROP_GEOIP_DIR {
  return NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR;
}

+ (NSString *)GEOIP_DIR_DEFAULT {
  return NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT;
}

+ (NSString *)GEOIP_FILE_DEFAULT {
  return NetI2pRouterTransportGeoIP_GEOIP_FILE_DEFAULT;
}

+ (NSString *)COUNTRY_FILE_DEFAULT {
  return NetI2pRouterTransportGeoIP_COUNTRY_FILE_DEFAULT;
}

+ (NSString *)PROP_IP_COUNTRY {
  return NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY;
}

+ (NSString *)PROP_DEBIAN_GEOIP {
  return NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIP;
}

+ (NSString *)PROP_DEBIAN_GEOIPV6 {
  return NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIPV6;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterTransportGeoIP_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)shutdown {
  [((id<JavaUtilMap>) nil_chk(_codeToName_)) clear];
  [((id<JavaUtilMap>) nil_chk(_codeCache_)) clear];
  [((id<JavaUtilMap>) nil_chk(_IPToCountry_)) clear];
  [((id<JavaUtilSet>) nil_chk(_pendingSearch_)) clear];
  [((id<JavaUtilSet>) nil_chk(_pendingIPv6Search_)) clear];
  [((id<JavaUtilSet>) nil_chk(_notFound_)) clear];
}

- (void)blockingLookup {
  if (![((NetI2pI2PAppContext *) nil_chk(_context_)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportGeoIP_PROP_GEOIP_ENABLED]) {
    [((id<JavaUtilSet>) nil_chk(_pendingSearch_)) clear];
    [((id<JavaUtilSet>) nil_chk(_pendingIPv6Search_)) clear];
    return;
  }
  jint pri = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getPriority];
  if (pri > JavaLangThread_MIN_PRIORITY) [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setPriorityWithInt:pri - 1];
  @try {
    NetI2pRouterTransportGeoIP_LookupJob *j = create_NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(self);
    [j run];
    NetI2pRouterTransportGeoIP_updateOurCountry(self);
  }
  @finally {
    if (pri > JavaLangThread_MIN_PRIORITY) [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setPriorityWithInt:pri];
  }
}

- (void)readCountryFile {
  NetI2pRouterTransportGeoIP_readCountryFile(self);
}

- (IOSObjectArray *)readGeoIPFileWithJavaLangLongArray:(IOSObjectArray *)search {
  return NetI2pRouterTransportGeoIP_readGeoIPFileWithJavaLangLongArray_(self, search);
}

- (void)updateOurCountry {
  NetI2pRouterTransportGeoIP_updateOurCountry(self);
}

- (void)addWithNSString:(NSString *)ip {
  IOSByteArray *pib = NetI2pUtilAddresses_getIPWithNSString_(ip);
  if (pib == nil) return;
  [self addWithByteArray:pib];
}

- (void)addWithByteArray:(IOSByteArray *)ip {
  NetI2pRouterTransportGeoIP_addWithLong_(self, NetI2pRouterTransportGeoIP_toLongWithByteArray_(ip));
}

- (void)addWithLong:(jlong)ip {
  NetI2pRouterTransportGeoIP_addWithLong_(self, ip);
}

- (NSString *)getWithNSString:(NSString *)ip {
  IOSByteArray *pib = NetI2pUtilAddresses_getIPWithNSString_(ip);
  if (pib == nil) return nil;
  return [self getWithByteArray:pib];
}

- (NSString *)getWithByteArray:(IOSByteArray *)ip {
  return NetI2pRouterTransportGeoIP_getWithLong_(self, NetI2pRouterTransportGeoIP_toLongWithByteArray_(ip));
}

- (NSString *)getWithLong:(jlong)ip {
  return NetI2pRouterTransportGeoIP_getWithLong_(self, ip);
}

+ (jlong)toLongWithByteArray:(IOSByteArray *)ip {
  return NetI2pRouterTransportGeoIP_toLongWithByteArray_(ip);
}

+ (NSString *)toV6WithLong:(jlong)ip {
  return NetI2pRouterTransportGeoIP_toV6WithLong_(ip);
}

- (NSString *)fullNameWithNSString:(NSString *)code {
  return [((id<JavaUtilMap>) nil_chk(_codeToName_)) getWithId:code];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_codeToName_);
  RELEASE_(_codeCache_);
  RELEASE_(_IPToCountry_);
  RELEASE_(_pendingSearch_);
  RELEASE_(_pendingIPv6Search_);
  RELEASE_(_notFound_);
  RELEASE_(_lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(blockingLookup);
  methods[3].selector = @selector(readCountryFile);
  methods[4].selector = @selector(readGeoIPFileWithJavaLangLongArray:);
  methods[5].selector = @selector(updateOurCountry);
  methods[6].selector = @selector(addWithNSString:);
  methods[7].selector = @selector(addWithByteArray:);
  methods[8].selector = @selector(addWithLong:);
  methods[9].selector = @selector(getWithNSString:);
  methods[10].selector = @selector(getWithByteArray:);
  methods[11].selector = @selector(getWithLong:);
  methods[12].selector = @selector(toLongWithByteArray:);
  methods[13].selector = @selector(toV6WithLong:);
  methods[14].selector = @selector(fullNameWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_codeToName_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_codeCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_IPToCountry_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "_pendingSearch_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_pendingIPv6Search_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_notFound_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_lock_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lookupRunCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_GEOIP_ENABLED", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "PROP_GEOIP_DIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "GEOIP_DIR_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "GEOIP_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "COUNTRY_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "PROP_IP_COUNTRY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "PROP_DEBIAN_GEOIP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "PROP_DEBIAN_GEOIPV6", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "DEBIAN_GEOIP_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "DEBIAN_GEOIPV6_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ENABLE_DEBIAN", "Z", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "UNKNOWN_COUNTRY_CODE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "readGeoIPFile", "[LJavaLangLong;", "add", "LNSString;", "[B", "J", "get", "toLong", "toV6", "fullName", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/Long;Ljava/lang/String;>;", "Ljava/util/Set<Ljava/lang/Long;>;", &NetI2pRouterTransportGeoIP_PROP_GEOIP_ENABLED, &NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR, &NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT, &NetI2pRouterTransportGeoIP_GEOIP_FILE_DEFAULT, &NetI2pRouterTransportGeoIP_COUNTRY_FILE_DEFAULT, &NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY, &NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIP, &NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIPV6, &NetI2pRouterTransportGeoIP_DEBIAN_GEOIP_FILE, &NetI2pRouterTransportGeoIP_DEBIAN_GEOIPV6_FILE, &NetI2pRouterTransportGeoIP_ENABLE_DEBIAN, &NetI2pRouterTransportGeoIP_UNKNOWN_COUNTRY_CODE, "LNetI2pRouterTransportGeoIP_LookupJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportGeoIP = { "GeoIP", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 15, 22, -1, 26, -1, -1, -1 };
  return &_NetI2pRouterTransportGeoIP;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportGeoIP class]) {
    NetI2pRouterTransportGeoIP_ENABLE_DEBIAN = !(NetI2pUtilSystemVersion_isWindows() || NetI2pUtilSystemVersion_isAndroid());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportGeoIP)
  }
}

@end

void NetI2pRouterTransportGeoIP_initWithNetI2pI2PAppContext_(NetI2pRouterTransportGeoIP *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTransportGeoIP_class_()]);
  JreStrongAssignAndConsume(&self->_codeToName_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(512));
  JreStrongAssignAndConsume(&self->_codeCache_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(512));
  JreStrongAssignAndConsume(&self->_IPToCountry_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_pendingSearch_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_pendingIPv6Search_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_notFound_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_lock_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  NetI2pRouterTransportGeoIP_readCountryFile(self);
}

NetI2pRouterTransportGeoIP *new_NetI2pRouterTransportGeoIP_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportGeoIP, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterTransportGeoIP *create_NetI2pRouterTransportGeoIP_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportGeoIP, initWithNetI2pI2PAppContext_, context)
}

void NetI2pRouterTransportGeoIP_readCountryFile(NetI2pRouterTransportGeoIP *self) {
  NSString *geoDir = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR withNSString:NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT];
  JavaIoFile *geoFile = create_JavaIoFile_initWithNSString_(geoDir);
  if (![geoFile isAbsolute]) geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], geoDir);
  geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(geoFile, NetI2pRouterTransportGeoIP_COUNTRY_FILE_DEFAULT);
  if (![geoFile exists]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"Country file not found: ", [geoFile getAbsolutePath])];
    return;
  }
  JavaIoBufferedReader *br = nil;
  @try {
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(geoFile), @"UTF-8"));
    NSString *line = nil;
    while ((line = [br readLine]) != nil) {
      @try {
        if ([((NSString *) nil_chk(line)) charAtWithInt:0] == '#') {
          continue;
        }
        IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_(line, @",");
        NSString *lc = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        [((id<JavaUtilMap>) nil_chk(self->_codeToName_)) putWithId:lc withId:IOSObjectArray_Get(s, 1)];
        [((id<JavaUtilMap>) nil_chk(self->_codeCache_)) putWithId:lc withId:lc];
      }
      @catch (JavaLangIndexOutOfBoundsException *ioobe) {
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:@"Error reading the Country File" withJavaLangThrowable:ioe];
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

IOSObjectArray *NetI2pRouterTransportGeoIP_readGeoIPFileWithJavaLangLongArray_(NetI2pRouterTransportGeoIP *self, IOSObjectArray *search) {
  NSString *geoDir = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR withNSString:NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT];
  JavaIoFile *geoFile = create_JavaIoFile_initWithNSString_(geoDir);
  if (![geoFile isAbsolute]) geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], geoDir);
  geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(geoFile, NetI2pRouterTransportGeoIP_GEOIP_FILE_DEFAULT);
  if (![geoFile exists]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"GeoIP file not found: ", [geoFile getAbsolutePath])];
    return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
  IOSObjectArray *rv = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(search))->size_ type:NSString_class_()];
  jint idx = 0;
  jlong start = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
  JavaIoBufferedReader *br = nil;
  @try {
    NSString *buf = nil;
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(geoFile), @"ISO-8859-1"));
    while ((buf = [br readLine]) != nil && idx < search->size_) {
      @try {
        if ([((NSString *) nil_chk(buf)) charAtWithInt:0] == '#') {
          continue;
        }
        IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_(buf, @",");
        jlong ip1 = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(nil_chk(s), 0));
        jlong ip2 = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(s, 1));
        while (idx < search->size_ && [((JavaLangLong *) nil_chk(IOSObjectArray_Get(search, idx))) longLongValue] < ip1) {
          idx++;
        }
        while (idx < search->size_ && [((JavaLangLong *) nil_chk(IOSObjectArray_Get(search, idx))) longLongValue] >= ip1 && [((JavaLangLong *) nil_chk(IOSObjectArray_Get(search, idx))) longLongValue] <= ip2) {
          NSString *lc = [((NSString *) nil_chk(IOSObjectArray_Get(s, 2))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
          NSString *cached = [((id<JavaUtilMap>) nil_chk(self->_codeCache_)) getWithId:lc];
          if (cached == nil) cached = lc;
          IOSObjectArray_Set(rv, idx++, cached);
        }
      }
      @catch (JavaLangIndexOutOfBoundsException *ioobe) {
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:@"Error reading the geoFile" withJavaLangThrowable:ioe];
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [self->_log_ infoWithNSString:JreStrcat("$J", @"GeoIP processing finished, time: ", ([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - start))];
  }
  return rv;
}

void NetI2pRouterTransportGeoIP_updateOurCountry(NetI2pRouterTransportGeoIP *self) {
  if (!([self->_context_ isKindOfClass:[NetI2pRouterRouterContext class]])) return;
  NetI2pRouterRouterContext *ctx = (NetI2pRouterRouterContext *) cast_chk(self->_context_, [NetI2pRouterRouterContext class]);
  NSString *oldCountry = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) router])) getConfigSettingWithNSString:NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY];
  NetI2pDataHash *ourHash = [ctx routerHash];
  if (ourHash == nil) return;
  NSString *country = [((NetI2pRouterCommSystemFacade *) nil_chk([ctx commSystem])) getCountryWithNetI2pDataHash:ourHash];
  if (country != nil && ![country isEqual:oldCountry]) {
    [((NetI2pRouterRouter *) nil_chk([ctx router])) saveConfigWithNSString:NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY withNSString:country];
    if ([((NetI2pRouterCommSystemFacade *) nil_chk([ctx commSystem])) isInBadCountry] && [ctx getPropertyWithNSString:NetI2pRouterRouter_PROP_HIDDEN_HIDDEN] == nil) {
      NSString *name = [self fullNameWithNSString:country];
      if (name == nil) name = country;
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$", @"Setting hidden mode to protect you in ", name, @", you may override on the network configuration page")];
      [((NetI2pRouterRouter *) nil_chk([ctx router])) rebuildRouterInfo];
    }
  }
}

void NetI2pRouterTransportGeoIP_addWithLong_(NetI2pRouterTransportGeoIP *self, jlong ip) {
  JavaLangLong *li = JavaLangLong_valueOfWithLong_(ip);
  if (!([((id<JavaUtilMap>) nil_chk(self->_IPToCountry_)) containsKeyWithId:li] || [((id<JavaUtilSet>) nil_chk(self->_notFound_)) containsWithId:li])) {
    if (ip >= 0 && ip < (JreLShift64(1LL, 32))) [((id<JavaUtilSet>) nil_chk(self->_pendingSearch_)) addWithId:li];
    else [((id<JavaUtilSet>) nil_chk(self->_pendingIPv6Search_)) addWithId:li];
  }
}

NSString *NetI2pRouterTransportGeoIP_getWithLong_(NetI2pRouterTransportGeoIP *self, jlong ip) {
  return [((id<JavaUtilMap>) nil_chk(self->_IPToCountry_)) getWithId:JavaLangLong_valueOfWithLong_(ip)];
}

jlong NetI2pRouterTransportGeoIP_toLongWithByteArray_(IOSByteArray *ip) {
  NetI2pRouterTransportGeoIP_initialize();
  jlong rv = 0;
  if (((IOSByteArray *) nil_chk(ip))->size_ == 16) {
    for (jint i = 0; i < 8; i++) rv |= JreLShift64((IOSByteArray_Get(ip, i) & (jlong) 0xffLL), ((7 - i) * 8));
    return rv;
  }
  else {
    for (jint i = 0; i < 4; i++) rv |= JreLShift32((IOSByteArray_Get(ip, i) & (jint) 0xff), ((3 - i) * 8));
    return rv & (jlong) 0xffffffffl;
  }
}

NSString *NetI2pRouterTransportGeoIP_toV6WithLong_(jlong ip) {
  NetI2pRouterTransportGeoIP_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(21);
  for (jint i = 0; i < 4; i++) {
    [buf appendWithNSString:JavaLangLong_toHexStringWithLong_((JreRShift64(ip, ((3 - i) * 16))) & (jint) 0xffff)];
    [buf appendWithChar:':'];
  }
  [buf appendWithChar:':'];
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportGeoIP)

@implementation NetI2pRouterTransportGeoIP_LookupJob

- (instancetype)initWithNetI2pRouterTransportGeoIP:(NetI2pRouterTransportGeoIP *)outer$ {
  NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(self, outer$);
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->_lock_)) getAndSetWithBoolean:true]) return;
  @try {
    if (((++this$0_->_lookupRunCount_) % NetI2pRouterTransportGeoIP_LookupJob_CLEAR) == 0) [((id<JavaUtilSet>) nil_chk(this$0_->_notFound_)) clear];
    IOSObjectArray *search = [((id<JavaUtilSet>) nil_chk(this$0_->_pendingSearch_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[this$0_->_pendingSearch_ size] type:JavaLangLong_class_()]];
    [this$0_->_pendingSearch_ clear];
    if (((IOSObjectArray *) nil_chk(search))->size_ > 0) {
      JavaUtilArrays_sortWithNSObjectArray_(search);
      JavaIoFile *f = create_JavaIoFile_initWithNSString_([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIP withNSString:NetI2pRouterTransportGeoIP_DEBIAN_GEOIP_FILE]);
      if (JreLoadStatic(NetI2pRouterTransportGeoIP, ENABLE_DEBIAN) && [f exists]) {
        ComMaxmindGeoipLookupService *ls = nil;
        @try {
          ls = create_ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(f, ComMaxmindGeoipLookupService_GEOIP_STANDARD);
          for (jint i = 0; i < search->size_; i++) {
            jlong ip = [((JavaLangLong *) nil_chk(IOSObjectArray_Get(search, i))) longLongValue];
            NSString *uc = [((ComMaxmindGeoipCountry *) nil_chk([ls getCountryWithLong:ip])) getCode];
            if (![((NSString *) nil_chk(uc)) isEqual:NetI2pRouterTransportGeoIP_UNKNOWN_COUNTRY_CODE]) {
              NSString *cached = [((id<JavaUtilMap>) nil_chk(this$0_->_codeCache_)) getWithId:[uc java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
              [((id<JavaUtilMap>) nil_chk(this$0_->_IPToCountry_)) putWithId:IOSObjectArray_Get(search, i) withId:cached];
            }
            else {
              [((id<JavaUtilSet>) nil_chk(this$0_->_notFound_)) addWithId:IOSObjectArray_Get(search, i)];
            }
          }
        }
        @catch (JavaIoIOException *ioe) {
          [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"GeoIP failure" withJavaLangThrowable:ioe];
        }
        @catch (ComMaxmindGeoipInvalidDatabaseException *ide) {
          [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"GeoIP failure" withJavaLangThrowable:ide];
        }
        @finally {
          if (ls != nil) [ls close];
        }
      }
      else {
        IOSObjectArray *countries = NetI2pRouterTransportGeoIP_readGeoIPFileWithJavaLangLongArray_(this$0_, search);
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(countries))->size_; i++) {
          if (IOSObjectArray_Get(countries, i) != nil) [((id<JavaUtilMap>) nil_chk(this$0_->_IPToCountry_)) putWithId:IOSObjectArray_Get(search, i) withId:IOSObjectArray_Get(countries, i)];
          else [((id<JavaUtilSet>) nil_chk(this$0_->_notFound_)) addWithId:IOSObjectArray_Get(search, i)];
        }
      }
    }
    search = [((id<JavaUtilSet>) nil_chk(this$0_->_pendingIPv6Search_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[this$0_->_pendingIPv6Search_ size] type:JavaLangLong_class_()]];
    [this$0_->_pendingIPv6Search_ clear];
    if (((IOSObjectArray *) nil_chk(search))->size_ > 0) {
      JavaUtilArrays_sortWithNSObjectArray_(search);
      JavaIoFile *f = create_JavaIoFile_initWithNSString_([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_DEBIAN_GEOIPV6 withNSString:NetI2pRouterTransportGeoIP_DEBIAN_GEOIPV6_FILE]);
      if (JreLoadStatic(NetI2pRouterTransportGeoIP, ENABLE_DEBIAN) && [f exists]) {
        ComMaxmindGeoipLookupService *ls = nil;
        @try {
          ls = create_ComMaxmindGeoipLookupService_initWithJavaIoFile_withInt_(f, ComMaxmindGeoipLookupService_GEOIP_STANDARD);
          for (jint i = 0; i < search->size_; i++) {
            jlong ip = [((JavaLangLong *) nil_chk(IOSObjectArray_Get(search, i))) longLongValue];
            NSString *ipv6 = NetI2pRouterTransportGeoIP_toV6WithLong_(ip);
            NSString *uc = [((ComMaxmindGeoipCountry *) nil_chk([ls getCountryV6WithNSString:ipv6])) getCode];
            if (![((NSString *) nil_chk(uc)) isEqual:NetI2pRouterTransportGeoIP_UNKNOWN_COUNTRY_CODE]) {
              NSString *lc = [uc java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
              NSString *cached = [((id<JavaUtilMap>) nil_chk(this$0_->_codeCache_)) getWithId:lc];
              if (cached == nil) cached = lc;
              [((id<JavaUtilMap>) nil_chk(this$0_->_IPToCountry_)) putWithId:IOSObjectArray_Get(search, i) withId:cached];
            }
            else {
              [((id<JavaUtilSet>) nil_chk(this$0_->_notFound_)) addWithId:IOSObjectArray_Get(search, i)];
            }
          }
        }
        @catch (JavaIoIOException *ioe) {
          [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"GeoIP failure" withJavaLangThrowable:ioe];
        }
        @catch (ComMaxmindGeoipInvalidDatabaseException *ide) {
          [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"GeoIP failure" withJavaLangThrowable:ide];
        }
        @finally {
          if (ls != nil) [ls close];
        }
      }
      else {
        IOSObjectArray *countries = NetI2pRouterTransportGeoIPv6_readGeoIPFileWithNetI2pI2PAppContext_withJavaLangLongArray_withJavaUtilMap_(this$0_->_context_, search, this$0_->_codeCache_);
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(countries))->size_; i++) {
          if (IOSObjectArray_Get(countries, i) != nil) [((id<JavaUtilMap>) nil_chk(this$0_->_IPToCountry_)) putWithId:IOSObjectArray_Get(search, i) withId:IOSObjectArray_Get(countries, i)];
          else [((id<JavaUtilSet>) nil_chk(this$0_->_notFound_)) addWithId:IOSObjectArray_Get(search, i)];
        }
      }
    }
  }
  @finally {
    [this$0_->_lock_ setWithBoolean:false];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportGeoIP:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportGeoIP;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "CLEAR", "I", .constantValue.asInt = NetI2pRouterTransportGeoIP_LookupJob_CLEAR, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportGeoIP;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportGeoIP_LookupJob = { "LookupJob", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportGeoIP_LookupJob;
}

@end

void NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP_LookupJob *self, NetI2pRouterTransportGeoIP *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportGeoIP_LookupJob *new_NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportGeoIP_LookupJob, initWithNetI2pRouterTransportGeoIP_, outer$)
}

NetI2pRouterTransportGeoIP_LookupJob *create_NetI2pRouterTransportGeoIP_LookupJob_initWithNetI2pRouterTransportGeoIP_(NetI2pRouterTransportGeoIP *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportGeoIP_LookupJob, initWithNetI2pRouterTransportGeoIP_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportGeoIP_LookupJob)
