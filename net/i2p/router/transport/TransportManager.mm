//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/TransportManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeMap.h"
#include "java/util/Vector.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportBid.h"
#include "net/i2p/router/transport/TransportImpl.h"
#include "net/i2p/router/transport/TransportManager.h"
#include "net/i2p/router/transport/UPnPManager.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/crypto/X25519KeyFactory.h"
#include "net/i2p/router/transport/ntcp/NTCPTransport.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pRouterTransportTransportManager () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _transports_;
  id<JavaUtilMap> _pluggableTransports_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterTransportUPnPManager *_upnpManager_;
  NetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner *_dhThread_;
  NetI2pRouterTransportCryptoX25519KeyFactory *_xdhThread_;
}

- (void)addTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)transport;

- (void)removeTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)transport;

- (void)configTransports;

- (void)initializeAddressWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t OBJC_METHOD_FAMILY_NONE;

- (void)initializeAddressWithJavaUtilCollection:(id<JavaUtilCollection>)ts OBJC_METHOD_FAMILY_NONE;

- (id<JavaUtilSet>)getPorts;

+ (NSString *)_xWithNSString:(NSString *)s;

- (NSString *)_tWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _transports_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _pluggableTransports_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _upnpManager_, NetI2pRouterTransportUPnPManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _dhThread_, NetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportManager, _xdhThread_, NetI2pRouterTransportCryptoX25519KeyFactory *)

inline NSString *NetI2pRouterTransportTransportManager_get_PROP_NTCP2_ENABLE(void);
static NSString *NetI2pRouterTransportTransportManager_PROP_NTCP2_ENABLE = @"i2np.ntcp2.enable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportManager, PROP_NTCP2_ENABLE, NSString *)

inline jboolean NetI2pRouterTransportTransportManager_get_DEFAULT_NTCP2_ENABLE(void);
#define NetI2pRouterTransportTransportManager_DEFAULT_NTCP2_ENABLE true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportManager, DEFAULT_NTCP2_ENABLE, jboolean)

inline NSString *NetI2pRouterTransportTransportManager_get_PROP_ADVANCED(void);
static NSString *NetI2pRouterTransportTransportManager_PROP_ADVANCED = @"routerconsole.advanced";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportManager, PROP_ADVANCED, NSString *)

inline jlong NetI2pRouterTransportTransportManager_get_SIGTYPE_BANLIST_DURATION(void);
#define NetI2pRouterTransportTransportManager_SIGTYPE_BANLIST_DURATION 129600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportManager, SIGTYPE_BANLIST_DURATION, jlong)

inline jint NetI2pRouterTransportTransportManager_get_HIGH_CAPACITY_PCT(void);
#define NetI2pRouterTransportTransportManager_HIGH_CAPACITY_PCT 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportManager, HIGH_CAPACITY_PCT, jint)

inline NSString *NetI2pRouterTransportTransportManager_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportTransportManager_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportManager, BUNDLE_NAME, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> transport);

__attribute__((unused)) static void NetI2pRouterTransportTransportManager_removeTransportWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> transport);

__attribute__((unused)) static void NetI2pRouterTransportTransportManager_configTransports(NetI2pRouterTransportTransportManager *self);

__attribute__((unused)) static void NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> t);

__attribute__((unused)) static void NetI2pRouterTransportTransportManager_initializeAddressWithJavaUtilCollection_(NetI2pRouterTransportTransportManager *self, id<JavaUtilCollection> ts);

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterTransportTransportManager_getPorts(NetI2pRouterTransportTransportManager *self);

__attribute__((unused)) static NSString *NetI2pRouterTransportTransportManager__xWithNSString_(NSString *s);

__attribute__((unused)) static NSString *NetI2pRouterTransportTransportManager__tWithNSString_(NetI2pRouterTransportTransportManager *self, NSString *s);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportTransportManager__Annotations$0(void);

NSString *NetI2pRouterTransportTransportManager_PROP_ENABLE_UDP = @"i2np.udp.enable";
NSString *NetI2pRouterTransportTransportManager_PROP_ENABLE_NTCP = @"i2np.ntcp.enable";
NSString *NetI2pRouterTransportTransportManager_PROP_ENABLE_UPNP = @"i2np.upnp.enable";

@implementation NetI2pRouterTransportTransportManager

+ (NSString *)PROP_ENABLE_UDP {
  return NetI2pRouterTransportTransportManager_PROP_ENABLE_UDP;
}

+ (NSString *)PROP_ENABLE_NTCP {
  return NetI2pRouterTransportTransportManager_PROP_ENABLE_NTCP;
}

+ (NSString *)PROP_ENABLE_UPNP {
  return NetI2pRouterTransportTransportManager_PROP_ENABLE_UPNP;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTransportTransportManager_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)registerAndStartWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
  @synchronized(self) {
    NSString *style = [((id<NetI2pRouterTransportTransport>) nil_chk(t)) getStyle];
    if ([((NSString *) nil_chk(style)) isEqual:NetI2pRouterTransportNtcpNTCPTransport_STYLE] || [style isEqual:NetI2pRouterTransportUdpUDPTransport_STYLE]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Builtin transport");
    if ([((id<JavaUtilMap>) nil_chk(_transports_)) containsKeyWithId:style] || [((id<JavaUtilMap>) nil_chk(_pluggableTransports_)) containsKeyWithId:style]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Dup transport");
    jboolean shouldStart = ![_transports_ isEmpty];
    [((id<JavaUtilMap>) nil_chk(_pluggableTransports_)) putWithId:style withId:t];
    NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(self, t);
    [t setListenerWithNetI2pRouterTransportTransportEventListener:self];
    if (shouldStart) {
      NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(self, t);
      [t startListening];
      [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) rebuildRouterInfo];
    }
  }
}

- (void)stopAndUnregisterWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
  @synchronized(self) {
    NSString *style = [((id<NetI2pRouterTransportTransport>) nil_chk(t)) getStyle];
    if ([((NSString *) nil_chk(style)) isEqual:NetI2pRouterTransportNtcpNTCPTransport_STYLE] || [style isEqual:NetI2pRouterTransportUdpUDPTransport_STYLE]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Builtin transport");
    [t setListenerWithNetI2pRouterTransportTransportEventListener:nil];
    [((id<JavaUtilMap>) nil_chk(_pluggableTransports_)) removeWithId:style];
    NetI2pRouterTransportTransportManager_removeTransportWithNetI2pRouterTransportTransport_(self, t);
    [t stopListening];
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) rebuildRouterInfo];
  }
}

- (id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)getDHFactory {
  return _dhThread_;
}

- (void)addTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)transport {
  NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(self, transport);
}

- (void)removeTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)transport {
  NetI2pRouterTransportTransportManager_removeTransportWithNetI2pRouterTransportTransport_(self, transport);
}

- (void)configTransports {
  NetI2pRouterTransportTransportManager_configTransports(self);
}

+ (jboolean)isNTCPEnabledWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTransportTransportManager_isNTCPEnabledWithNetI2pRouterRouterContext_(ctx);
}

- (void)initializeAddressWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
  NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(self, t);
}

- (void)initializeAddress {
  NetI2pRouterTransportTransportManager_initializeAddressWithJavaUtilCollection_(self, [((id<JavaUtilMap>) nil_chk(_transports_)) values]);
}

- (void)initializeAddressWithJavaUtilCollection:(id<JavaUtilCollection>)ts {
  NetI2pRouterTransportTransportManager_initializeAddressWithJavaUtilCollection_(self, ts);
}

- (void)externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                  withByteArray:(IOSByteArray *)ip
                                                                        withInt:(jint)port {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if (!(source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU) && [((NSString *) nil_chk([((id<NetI2pRouterTransportTransport>) nil_chk(t)) getStyle])) isEqual:NetI2pRouterTransportUdpUDPTransport_STYLE])) [((id<NetI2pRouterTransportTransport>) nil_chk(t)) externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:source withByteArray:ip withInt:port];
  }
}

- (void)externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                   withBoolean:(jboolean)ipv6 {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if (!(source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU) && [((NSString *) nil_chk([((id<NetI2pRouterTransportTransport>) nil_chk(t)) getStyle])) isEqual:NetI2pRouterTransportUdpUDPTransport_STYLE])) [((id<NetI2pRouterTransportTransport>) nil_chk(t)) externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:source withBoolean:ipv6];
  }
}

- (void)forwardPortStatusWithNSString:(NSString *)style
                        withByteArray:(IOSByteArray *)ip
                              withInt:(jint)port
                              withInt:(jint)externalPort
                          withBoolean:(jboolean)success
                         withNSString:(NSString *)reason {
  id<NetI2pRouterTransportTransport> t = [self getTransportWithNSString:style];
  if (t != nil) [t forwardPortStatusWithByteArray:ip withInt:port withInt:externalPort withBoolean:success withNSString:reason];
}

- (void)startListening {
  @synchronized(self) {
    if ([((NetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner *) nil_chk(_dhThread_)) getState] == JreLoadEnum(JavaLangThread_State, NEW)) [_dhThread_ start];
    if (_xdhThread_ != nil && [_xdhThread_ getState] == JreLoadEnum(JavaLangThread_State, NEW)) [_xdhThread_ start];
    if (_upnpManager_ != nil && NetI2pUtilAddresses_getAnyAddress() == nil) [_upnpManager_ start];
    NetI2pRouterTransportTransportManager_configTransports(self);
    [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Starting up the transport manager"];
    id<JavaUtilList> tps = create_JavaUtilArrayList_init();
    id<NetI2pRouterTransportTransport> tp = [self getTransportWithNSString:NetI2pRouterTransportNtcpNTCPTransport_STYLE];
    if (tp != nil) [tps addWithId:tp];
    tp = [self getTransportWithNSString:NetI2pRouterTransportUdpUDPTransport_STYLE];
    if (tp != nil) [tps addWithId:tp];
    for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_pluggableTransports_)) values])) {
      [tps addWithId:t];
    }
    for (id<NetI2pRouterTransportTransport> __strong t in tps) {
      [((id<NetI2pRouterTransportTransport>) nil_chk(t)) startListening];
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Transport ", [t getStyle], @" started")];
    }
    [self transportAddressChanged];
    [_log_ debugWithNSString:@"Done start listening on transports"];
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) rebuildRouterInfo];
  }
}

- (void)restart {
  @synchronized(self) {
    [self stopListening];
    @try {
      JavaLangThread_sleepWithLong_(5 * 1000);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    [self startListening];
  }
}

- (void)stopListening {
  @synchronized(self) {
    if (_upnpManager_ != nil) [_upnpManager_ stop];
    for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
      [((id<NetI2pRouterTransportTransport>) nil_chk(t)) stopListening];
    }
    [_transports_ clear];
  }
}

- (void)shutdown {
  @synchronized(self) {
    [self stopListening];
    [((NetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner *) nil_chk(_dhThread_)) shutdown];
    NetI2pUtilAddresses_clearCaches();
    NetI2pRouterTransportTransportImpl_clearCaches();
  }
}

- (id<NetI2pRouterTransportTransport>)getTransportWithNSString:(NSString *)style {
  return [((id<JavaUtilMap>) nil_chk(_transports_)) getWithId:style];
}

- (jint)getTransportCount {
  return [((id<JavaUtilMap>) nil_chk(_transports_)) size];
}

- (id<JavaUtilSortedMap>)getTransports {
  JavaUtilTreeMap *rv = create_JavaUtilTreeMap_init();
  [rv putAllWithJavaUtilMap:_transports_];
  return rv;
}

- (jint)countActivePeers {
  jint peers = 0;
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    peers += [((id<NetI2pRouterTransportTransport>) nil_chk(t)) countActivePeers];
  }
  return peers;
}

- (jint)countActiveSendPeers {
  jint peers = 0;
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    peers += [((id<NetI2pRouterTransportTransport>) nil_chk(t)) countActiveSendPeers];
  }
  return peers;
}

- (jboolean)haveOutboundCapacityWithInt:(jint)pct {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if ([((id<NetI2pRouterTransportTransport>) nil_chk(t)) haveCapacityWithInt:pct]) return true;
  }
  return false;
}

- (jboolean)haveHighOutboundCapacity {
  if ([((id<JavaUtilMap>) nil_chk(_transports_)) isEmpty]) return false;
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([_transports_ values])) {
    if (![((id<NetI2pRouterTransportTransport>) nil_chk(t)) haveCapacityWithInt:NetI2pRouterTransportTransportManager_HIGH_CAPACITY_PCT]) return false;
  }
  return true;
}

- (jboolean)haveInboundCapacityWithInt:(jint)pct {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if ([((id<NetI2pRouterTransportTransport>) nil_chk(t)) hasCurrentAddress] && [t haveCapacityWithInt:pct]) return true;
  }
  return false;
}

- (JavaUtilVector *)getClockSkews {
  JavaUtilVector *skews = create_JavaUtilVector_init();
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    JavaUtilVector *tempSkews = [((id<NetI2pRouterTransportTransport>) nil_chk(t)) getClockSkews];
    if ((tempSkews == nil) || ([((JavaUtilVector *) nil_chk(tempSkews)) isEmpty])) continue;
    [skews addAllWithJavaUtilCollection:tempSkews];
  }
  return skews;
}

- (NetI2pRouterCommSystemFacade_Status *)getReachabilityStatus {
  NetI2pRouterCommSystemFacade_Status *rv = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    NetI2pRouterCommSystemFacade_Status *s = [((id<NetI2pRouterTransportTransport>) nil_chk(t)) getReachabilityStatus];
    if ([((NetI2pRouterCommSystemFacade_Status *) nil_chk(s)) getCode] < [((NetI2pRouterCommSystemFacade_Status *) nil_chk(rv)) getCode]) rv = s;
  }
  return rv;
}

- (void)recheckReachability {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) [((id<NetI2pRouterTransportTransport>) nil_chk(t)) recheckReachability];
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if ([((id<NetI2pRouterTransportTransport>) nil_chk(t)) isBackloggedWithNetI2pDataHash:peer]) return true;
  }
  return false;
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if ([((id<NetI2pRouterTransportTransport>) nil_chk(t)) isEstablishedWithNetI2pDataHash:peer]) return true;
  }
  return false;
}

- (id<JavaUtilSet>)getEstablished {
  id<NetI2pRouterTransportTransport> t = [((id<JavaUtilMap>) nil_chk(_transports_)) getWithId:@"NTCP"];
  id<JavaUtilSet> rv;
  if (t != nil) rv = [t getEstablished];
  else rv = create_JavaUtilHashSet_initWithInt_(256);
  t = [_transports_ getWithId:@"SSU"];
  if (t != nil) [((id<JavaUtilSet>) nil_chk(rv)) addAllWithJavaUtilCollection:[t getEstablished]];
  return rv;
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    [((id<NetI2pRouterTransportTransport>) nil_chk(t)) mayDisconnectWithNetI2pDataHash:peer];
  }
}

- (jboolean)wasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if (![((id<NetI2pRouterTransportTransport>) nil_chk(t)) wasUnreachableWithNetI2pDataHash:peer]) return false;
  }
  return true;
}

- (IOSByteArray *)getIPWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterTransportTransportImpl_getIPWithNetI2pDataHash_(peer);
}

- (id<JavaUtilList>)getAddresses {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(4);
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) [((id<NetI2pRouterTransportTransport>) nil_chk(t)) updateAddress];
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([_transports_ values])) {
    [rv addAllWithJavaUtilCollection:[((id<NetI2pRouterTransportTransport>) nil_chk(t)) getCurrentAddresses]];
  }
  return rv;
}

- (id<JavaUtilSet>)getPorts {
  return NetI2pRouterTransportTransportManager_getPorts(self);
}

- (NetI2pRouterTransportTransportBid *)getBidWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  id<JavaUtilList> bids = [self getBidsWithNetI2pRouterOutNetMessage:msg];
  if ((bids == nil) || ([((id<JavaUtilList>) nil_chk(bids)) isEmpty])) return nil;
  else return [((id<JavaUtilList>) nil_chk(bids)) getWithInt:0];
}

- (id<JavaUtilList>)getBidsWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if (msg == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null message?  no bidding on a null outNetMessage!");
  if ([((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getRouterInfo])) isEqual:[msg getTarget]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bids for a message bound to ourselves?");
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilMap>) nil_chk(_transports_)) size]);
  id<JavaUtilSet> failedTransports = [msg getFailedTransports];
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([_transports_ values])) {
    if ([((id<JavaUtilSet>) nil_chk(failedTransports)) containsWithId:[((id<NetI2pRouterTransportTransport>) nil_chk(t)) getStyle]]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Skipping transport ", [t getStyle], @" as it already failed")];
      continue;
    }
    NetI2pRouterTransportTransportBid *bid = [t bidWithNetI2pDataRouterRouterInfo:[msg getTarget] withInt:[msg getMessageSize]];
    if (bid != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@", @"Transport ", [t getStyle], @" bid: ", bid)];
      [rv addWithId:bid];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Transport ", [t getStyle], @" did not produce a bid")];
    }
  }
  return rv;
}

- (NetI2pRouterTransportTransportBid *)getNextBidWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  jint unreachableTransports = 0;
  NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget])) getIdentity])) calculateHash];
  id<JavaUtilSet> failedTransports = [msg getFailedTransports];
  NetI2pRouterTransportTransportBid *rv = nil;
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    if ([((id<NetI2pRouterTransportTransport>) nil_chk(t)) isUnreachableWithNetI2pDataHash:peer]) {
      unreachableTransports++;
      [msg transportFailedWithNSString:[t getStyle]];
      continue;
    }
    if ([((id<JavaUtilSet>) nil_chk(failedTransports)) containsWithId:[t getStyle]]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Skipping transport ", [t getStyle], @" as it already failed")];
      continue;
    }
    NetI2pRouterTransportTransportBid *bid = [t bidWithNetI2pDataRouterRouterInfo:[msg getTarget] withInt:[msg getMessageSize]];
    if (bid != nil) {
      if ([bid getLatencyMs] == NetI2pRouterTransportTransportBid_TRANSIENT_FAIL) [msg transportFailedWithNSString:[t getStyle]];
      else if ((rv == nil) || ([((NetI2pRouterTransportTransportBid *) nil_chk(rv)) getLatencyMs] > [bid getLatencyMs])) rv = bid;
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@$Z$I$@C", @"Transport ", [t getStyle], @" bid: ", bid, @" currently winning? ", (rv == bid), @" (winning latency: ", [((NetI2pRouterTransportTransportBid *) nil_chk(rv)) getLatencyMs], @" / ", rv, ')')];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Transport ", [t getStyle], @" did not produce a bid")];
      if ([t isUnreachableWithNetI2pDataHash:peer]) unreachableTransports++;
    }
  }
  if (unreachableTransports >= [_transports_ size]) {
    if ([((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getSigningPublicKey])) getType] == nil) {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"transport.banlistOnUnsupportedSigType" withLong:1];
      [((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) banlistRouterForeverWithNetI2pDataHash:peer withNSString:NetI2pRouterTransportTransportManager__xWithNSString_(@"Unsupported signature type")];
    }
    else if (unreachableTransports >= [_transports_ size] && [self countActivePeers] > 0) {
      jboolean incompat = false;
      NetI2pDataRouterRouterInfo *us = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getRouterInfo];
      if (us != nil) {
        NetI2pDataRouterRouterIdentity *id_ = [us getIdentity];
        if ([((NetI2pDataRouterRouterIdentity *) nil_chk(id_)) getSigType] != JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1)) {
          NSString *v = [((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getVersion];
          if (NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterTransportNtcpNTCPTransport_MIN_SIGTYPE_VERSION) < 0) incompat = true;
        }
      }
      if (incompat) {
        [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.banlistOnUnsupportedSigType" withLong:1];
        [((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) banlistRouterWithNetI2pDataHash:peer withNSString:NetI2pRouterTransportTransportManager__xWithNSString_(@"No support for our signature type") withNSString:nil withNSString:nil withLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterTransportTransportManager_SIGTYPE_BANLIST_DURATION];
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.banlistOnUnreachable" withLong:[msg getLifetime] withLong:[msg getLifetime]];
        [((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) banlistRouterWithNetI2pDataHash:peer withNSString:NetI2pRouterTransportTransportManager__xWithNSString_(@"Unreachable on any transport")];
      }
    }
  }
  else if (rv == nil) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"transport.noBidsYetNotAllUnreachable" withLong:unreachableTransports withLong:[msg getLifetime]];
  }
  return rv;
}

- (void)messageReceivedWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                  withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)fromRouter
                                  withNetI2pDataHash:(NetI2pDataHash *)fromRouterHash {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"I2NPMessage received: ", [[((id<NetI2pDataI2npI2NPMessage>) nil_chk(message)) java_getClass] getSimpleName])];
  @try {
    [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) inNetMessagePool])) addWithNetI2pDataI2npI2NPMessage:message withNetI2pDataRouterRouterIdentity:fromRouter withNetI2pDataHash:fromRouterHash];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Error receiving message" withJavaLangThrowable:iae];
  }
}

- (void)transportAddressChanged {
  if (_upnpManager_ != nil) {
    [_upnpManager_ rescan];
    [_upnpManager_ updateWithJavaUtilSet:NetI2pRouterTransportTransportManager_getPorts(self)];
  }
}

- (id<JavaUtilList>)getMostRecentErrorMessages {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(16);
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(_transports_)) values])) {
    [rv addAllWithJavaUtilCollection:[((id<NetI2pRouterTransportTransport>) nil_chk(t)) getMostRecentErrorMessages]];
  }
  return rv;
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
  if (NetI2pUtilSystemVersion_isAndroid()) {
  }
  else if (_upnpManager_ != nil) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[_upnpManager_ renderStatusHTML]];
  }
  else {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:JreStrcat("$$$", @"<h3 id=\"upnpstatus\"><a name=\"upnp\"></a>", NetI2pRouterTransportTransportManager__tWithNSString_(self, @"UPnP is not enabled"), @"</h3>\n")];
  }
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTransportTransportManager__xWithNSString_(s);
}

- (NSString *)_tWithNSString:(NSString *)s {
  return NetI2pRouterTransportTransportManager__tWithNSString_(self, s);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_transports_);
  RELEASE_(_pluggableTransports_);
  RELEASE_(_context_);
  RELEASE_(_upnpManager_);
  RELEASE_(_dhThread_);
  RELEASE_(_xdhThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransport;", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x0, -1, -1, -1, 18, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 21, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x0, -1, -1, -1, 22, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, 23, -1 },
    { NULL, "Z", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 26, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "V", 0x0, 28, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 29, 25, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 30, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 31, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 32, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportBid;", 0x0, 33, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 35, 34, -1, 36, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportBid;", 0x0, 37, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 42, 43, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 44, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 45, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(registerAndStartWithNetI2pRouterTransportTransport:);
  methods[2].selector = @selector(stopAndUnregisterWithNetI2pRouterTransportTransport:);
  methods[3].selector = @selector(getDHFactory);
  methods[4].selector = @selector(addTransportWithNetI2pRouterTransportTransport:);
  methods[5].selector = @selector(removeTransportWithNetI2pRouterTransportTransport:);
  methods[6].selector = @selector(configTransports);
  methods[7].selector = @selector(isNTCPEnabledWithNetI2pRouterRouterContext:);
  methods[8].selector = @selector(initializeAddressWithNetI2pRouterTransportTransport:);
  methods[9].selector = @selector(initializeAddress);
  methods[10].selector = @selector(initializeAddressWithJavaUtilCollection:);
  methods[11].selector = @selector(externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:withByteArray:withInt:);
  methods[12].selector = @selector(externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:withBoolean:);
  methods[13].selector = @selector(forwardPortStatusWithNSString:withByteArray:withInt:withInt:withBoolean:withNSString:);
  methods[14].selector = @selector(startListening);
  methods[15].selector = @selector(restart);
  methods[16].selector = @selector(stopListening);
  methods[17].selector = @selector(shutdown);
  methods[18].selector = @selector(getTransportWithNSString:);
  methods[19].selector = @selector(getTransportCount);
  methods[20].selector = @selector(getTransports);
  methods[21].selector = @selector(countActivePeers);
  methods[22].selector = @selector(countActiveSendPeers);
  methods[23].selector = @selector(haveOutboundCapacityWithInt:);
  methods[24].selector = @selector(haveHighOutboundCapacity);
  methods[25].selector = @selector(haveInboundCapacityWithInt:);
  methods[26].selector = @selector(getClockSkews);
  methods[27].selector = @selector(getReachabilityStatus);
  methods[28].selector = @selector(recheckReachability);
  methods[29].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[30].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[31].selector = @selector(getEstablished);
  methods[32].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[33].selector = @selector(wasUnreachableWithNetI2pDataHash:);
  methods[34].selector = @selector(getIPWithNetI2pDataHash:);
  methods[35].selector = @selector(getAddresses);
  methods[36].selector = @selector(getPorts);
  methods[37].selector = @selector(getBidWithNetI2pRouterOutNetMessage:);
  methods[38].selector = @selector(getBidsWithNetI2pRouterOutNetMessage:);
  methods[39].selector = @selector(getNextBidWithNetI2pRouterOutNetMessage:);
  methods[40].selector = @selector(messageReceivedWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  methods[41].selector = @selector(transportAddressChanged);
  methods[42].selector = @selector(getMostRecentErrorMessages);
  methods[43].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  methods[44].selector = @selector(_xWithNSString:);
  methods[45].selector = @selector(_tWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transports_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 46, -1 },
    { "_pluggableTransports_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 46, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_upnpManager_", "LNetI2pRouterTransportUPnPManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dhThread_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_xdhThread_", "LNetI2pRouterTransportCryptoX25519KeyFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_ENABLE_UDP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "PROP_ENABLE_NTCP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "PROP_ENABLE_UPNP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "PROP_NTCP2_ENABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "DEFAULT_NTCP2_ENABLE", "Z", .constantValue.asBOOL = NetI2pRouterTransportTransportManager_DEFAULT_NTCP2_ENABLE, 0x1a, -1, -1, -1, -1 },
    { "PROP_ADVANCED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "SIGTYPE_BANLIST_DURATION", "J", .constantValue.asLong = NetI2pRouterTransportTransportManager_SIGTYPE_BANLIST_DURATION, 0x1a, -1, -1, -1, -1 },
    { "HIGH_CAPACITY_PCT", "I", .constantValue.asInt = NetI2pRouterTransportTransportManager_HIGH_CAPACITY_PCT, 0x1a, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "registerAndStart", "LNetI2pRouterTransportTransport;", "stopAndUnregister", "addTransport", "removeTransport", "isNTCPEnabled", "initializeAddress", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/router/transport/Transport;>;)V", "externalAddressReceived", "LNetI2pRouterTransportTransport_AddressSource;[BI", "externalAddressRemoved", "LNetI2pRouterTransportTransport_AddressSource;Z", "forwardPortStatus", "LNSString;[BIIZLNSString;", "getTransport", "LNSString;", "()Ljava/util/SortedMap<Ljava/lang/String;Lnet/i2p/router/transport/Transport;>;", "haveOutboundCapacity", "I", "haveInboundCapacity", "()Ljava/util/Vector<Ljava/lang/Long;>;", (void *)&NetI2pRouterTransportTransportManager__Annotations$0, "isBacklogged", "LNetI2pDataHash;", "isEstablished", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "mayDisconnect", "wasUnreachable", "getIP", "()Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "()Ljava/util/Set<Lnet/i2p/router/transport/TransportManager$Port;>;", "getBid", "LNetI2pRouterOutNetMessage;", "getBids", "(Lnet/i2p/router/OutNetMessage;)Ljava/util/List<Lnet/i2p/router/transport/TransportBid;>;", "getNextBid", "messageReceived", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "()Ljava/util/List<Ljava/lang/String;>;", "renderStatusHTML", "LJavaIoWriter;LNSString;I", "LJavaIoIOException;", "_x", "_t", "Ljava/util/Map<Ljava/lang/String;Lnet/i2p/router/transport/Transport;>;", &NetI2pRouterTransportTransportManager_PROP_ENABLE_UDP, &NetI2pRouterTransportTransportManager_PROP_ENABLE_NTCP, &NetI2pRouterTransportTransportManager_PROP_ENABLE_UPNP, &NetI2pRouterTransportTransportManager_PROP_NTCP2_ENABLE, &NetI2pRouterTransportTransportManager_PROP_ADVANCED, &NetI2pRouterTransportTransportManager_BUNDLE_NAME, "LNetI2pRouterTransportTransportManager_Port;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportManager = { "TransportManager", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 46, 16, -1, 53, -1, -1, -1 };
  return &_NetI2pRouterTransportTransportManager;
}

@end

void NetI2pRouterTransportTransportManager_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportTransportManager *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportTransportManager_class_()]);
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.banlistOnUnreachable" withNSString:@"Add a peer to the banlist since none of the transports can reach them" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.banlistOnUsupportedSigType" withNSString:@"Add a peer to the banlist since signature type is unsupported" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.noBidsYetNotAllUnreachable" withNSString:@"Add a peer to the banlist since none of the transports can reach them" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.bidFailBanlisted" withNSString:@"Could not attempt to bid on message, as they were banlisted" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.bidFailSelf" withNSString:@"Could not attempt to bid on message, as it targeted ourselves" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.bidFailNoTransports" withNSString:@"Could not attempt to bid on message, as none of the transports could attempt it" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.bidFailAllTransports" withNSString:@"Could not attempt to bid on message, as all of the transports had failed" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  JreStrongAssignAndConsume(&self->_transports_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(2));
  JreStrongAssignAndConsume(&self->_pluggableTransports_, new_JavaUtilHashMap_initWithInt_(2));
  if ([self->_context_ getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportTransportManager_PROP_ENABLE_UPNP]) JreStrongAssignAndConsume(&self->_upnpManager_, new_NetI2pRouterTransportUPnPManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_(context, self));
  else JreStrongAssign(&self->_upnpManager_, nil);
  JreStrongAssignAndConsume(&self->_dhThread_, new_NetI2pRouterTransportCryptoDHSessionKeyBuilder_PrecalcRunner_initWithNetI2pI2PAppContext_(context));
  jboolean enableNTCP2 = NetI2pRouterTransportTransportManager_isNTCPEnabledWithNetI2pRouterRouterContext_(context) && [((NetI2pRouterRouterContext *) nil_chk(context)) getPropertyWithNSString:NetI2pRouterTransportTransportManager_PROP_NTCP2_ENABLE withBoolean:NetI2pRouterTransportTransportManager_DEFAULT_NTCP2_ENABLE];
  JreStrongAssign(&self->_xdhThread_, enableNTCP2 ? create_NetI2pRouterTransportCryptoX25519KeyFactory_initWithNetI2pI2PAppContext_(context) : nil);
}

NetI2pRouterTransportTransportManager *new_NetI2pRouterTransportTransportManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportTransportManager, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTransportTransportManager *create_NetI2pRouterTransportTransportManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportTransportManager, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> transport) {
  if (transport == nil) return;
  id<NetI2pRouterTransportTransport> old = [((id<JavaUtilMap>) nil_chk(self->_transports_)) putWithId:[transport getStyle] withId:transport];
  if (old != nil && old != transport && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$$", @"Replacing transport ", [transport getStyle])];
  [transport setListenerWithNetI2pRouterTransportTransportEventListener:self];
}

void NetI2pRouterTransportTransportManager_removeTransportWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> transport) {
  if (transport == nil) return;
  [transport setListenerWithNetI2pRouterTransportTransportEventListener:nil];
  id<NetI2pRouterTransportTransport> old = [((id<JavaUtilMap>) nil_chk(self->_transports_)) removeWithId:[transport getStyle]];
  if (old != nil && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$$", @"Removing transport ", [transport getStyle])];
}

void NetI2pRouterTransportTransportManager_configTransports(NetI2pRouterTransportTransportManager *self) {
  jboolean enableUDP = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportTransportManager_PROP_ENABLE_UDP];
  id<NetI2pRouterTransportTransport> udp = nil;
  if (enableUDP) {
    udp = create_NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(self->_context_, self->_dhThread_);
    NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(self, udp);
    NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(self, udp);
  }
  if (NetI2pRouterTransportTransportManager_isNTCPEnabledWithNetI2pRouterRouterContext_(self->_context_)) {
    id<NetI2pRouterTransportTransport> ntcp = create_NetI2pRouterTransportNtcpNTCPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_withNetI2pRouterTransportCryptoX25519KeyFactory_(self->_context_, self->_dhThread_, self->_xdhThread_);
    NetI2pRouterTransportTransportManager_addTransportWithNetI2pRouterTransportTransport_(self, ntcp);
    NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(self, ntcp);
    if (udp != nil) {
      jint port = [udp getRequestedPort];
      if (port > 0) [ntcp externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_CONFIG) withByteArray:nil withInt:port];
    }
  }
  if ([((id<JavaUtilMap>) nil_chk(self->_transports_)) isEmpty]) [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"No transports are enabled"];
}

jboolean NetI2pRouterTransportTransportManager_isNTCPEnabledWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTransportTransportManager_initialize();
  return [((NetI2pRouterRouterContext *) nil_chk(ctx)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportTransportManager_PROP_ENABLE_NTCP];
}

void NetI2pRouterTransportTransportManager_initializeAddressWithNetI2pRouterTransportTransport_(NetI2pRouterTransportTransportManager *self, id<NetI2pRouterTransportTransport> t) {
  NetI2pRouterTransportTransportManager_initializeAddressWithJavaUtilCollection_(self, JavaUtilCollections_singletonWithId_(t));
}

void NetI2pRouterTransportTransportManager_initializeAddressWithJavaUtilCollection_(NetI2pRouterTransportTransportManager *self, id<JavaUtilCollection> ts) {
  if ([((id<JavaUtilCollection>) nil_chk(ts)) isEmpty]) return;
  id<JavaUtilSet> ipset = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, true);
  jboolean hasNonTempV6Address = false;
  id<JavaUtilList> addresses = create_JavaUtilArrayList_initWithInt_(4);
  id<JavaUtilList> tempV6Addresses = create_JavaUtilArrayList_initWithInt_(4);
  for (NSString * __strong ips in nil_chk(ipset)) {
    @try {
      JavaNetInetAddress *addr = JavaNetInetAddress_getByNameWithNSString_(ips);
      if ([((NSString *) nil_chk(ips)) java_contains:@":"] && ([addr isKindOfClass:[JavaNetInet6Address class]])) {
        JavaNetInet6Address *v6addr = (JavaNetInet6Address *) cast_chk(addr, [JavaNetInet6Address class]);
        if (NetI2pUtilAddresses_isTemporaryWithJavaNetInet6Address_(v6addr)) {
          [tempV6Addresses addWithId:v6addr];
          continue;
        }
        hasNonTempV6Address = true;
      }
      [addresses addWithId:addr];
    }
    @catch (JavaNetUnknownHostException *e) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"UDP failed to bind to local address" withJavaLangThrowable:e];
    }
  }
  if (![tempV6Addresses isEmpty]) {
    if (hasNonTempV6Address) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) {
        for (JavaNetInet6Address * __strong addr in tempV6Addresses) {
          [self->_log_ warnWithNSString:JreStrcat("$$", @"Not binding to temporary address ", [((JavaNetInet6Address *) nil_chk(addr)) getHostAddress])];
        }
      }
    }
    else {
      [addresses addAllWithJavaUtilCollection:tempV6Addresses];
    }
  }
  for (id<NetI2pRouterTransportTransport> __strong t in ts) {
    for (JavaNetInetAddress * __strong ia in addresses) {
      IOSByteArray *ip = [((JavaNetInetAddress *) nil_chk(ia)) getAddress];
      [((id<NetI2pRouterTransportTransport>) nil_chk(t)) externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE) withByteArray:ip withInt:0];
    }
  }
}

id<JavaUtilSet> NetI2pRouterTransportTransportManager_getPorts(NetI2pRouterTransportTransportManager *self) {
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_(4);
  for (id<NetI2pRouterTransportTransport> __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(self->_transports_)) values])) {
    jint port = [((id<NetI2pRouterTransportTransport>) nil_chk(t)) getRequestedPort];
    if ([((NSString *) nil_chk([t getStyle])) isEqual:NetI2pRouterTransportNtcpNTCPTransport_STYLE] && port <= 0 && [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterTransportNtcpNTCPTransport_PROP_I2NP_NTCP_AUTO_PORT]) {
      id<NetI2pRouterTransportTransport> udp = [self getTransportWithNSString:NetI2pRouterTransportUdpUDPTransport_STYLE];
      if (udp != nil) port = [t getRequestedPort];
    }
    if (port > 0) [rv addWithId:create_NetI2pRouterTransportTransportManager_Port_initWithNSString_withInt_([t getStyle], port)];
  }
  return rv;
}

NSString *NetI2pRouterTransportTransportManager__xWithNSString_(NSString *s) {
  NetI2pRouterTransportTransportManager_initialize();
  return s;
}

NSString *NetI2pRouterTransportTransportManager__tWithNSString_(NetI2pRouterTransportTransportManager *self, NSString *s) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(s, self->_context_, NetI2pRouterTransportTransportManager_BUNDLE_NAME);
}

IOSObjectArray *NetI2pRouterTransportTransportManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportManager)

@implementation NetI2pRouterTransportTransportManager_Port

- (instancetype)initWithNSString:(NSString *)style
                         withInt:(jint)port {
  NetI2pRouterTransportTransportManager_Port_initWithNSString_withInt_(self, style, port);
  return self;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(style_)) hash]) ^ port_;
}

- (jboolean)isEqual:(id)o {
  if (o == nil) return false;
  if (!([o isKindOfClass:[NetI2pRouterTransportTransportManager_Port class]])) return false;
  NetI2pRouterTransportTransportManager_Port *p = (NetI2pRouterTransportTransportManager_Port *) cast_chk(o, [NetI2pRouterTransportTransportManager_Port class]);
  return port_ == p->port_ && [((NSString *) nil_chk(style_)) isEqual:p->style_];
}

- (void)dealloc {
  RELEASE_(style_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "style_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "hashCode", "equals", "LNSObject;", "LNetI2pRouterTransportTransportManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportManager_Port = { "Port", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x8, 3, 2, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportTransportManager_Port;
}

@end

void NetI2pRouterTransportTransportManager_Port_initWithNSString_withInt_(NetI2pRouterTransportTransportManager_Port *self, NSString *style, jint port) {
  NSObject_init(self);
  JreStrongAssign(&self->style_, style);
  self->port_ = port;
}

NetI2pRouterTransportTransportManager_Port *new_NetI2pRouterTransportTransportManager_Port_initWithNSString_withInt_(NSString *style, jint port) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportTransportManager_Port, initWithNSString_withInt_, style, port)
}

NetI2pRouterTransportTransportManager_Port *create_NetI2pRouterTransportTransportManager_Port_initWithNSString_withInt_(NSString *style, jint port) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportTransportManager_Port, initWithNSString_withInt_, style, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportManager_Port)
