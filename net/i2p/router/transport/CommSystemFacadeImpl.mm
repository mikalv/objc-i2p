//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/CommSystemFacadeImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/Vector.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/BadCountries.h"
#include "net/i2p/router/transport/CommSystemFacadeImpl.h"
#include "net/i2p/router/transport/GeoIP.h"
#include "net/i2p/router/transport/GetBidsJob.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportImpl.h"
#include "net/i2p/router/transport/TransportManager.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/Translate.h"

@interface NetI2pRouterTransportCommSystemFacadeImpl () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterTransportTransportManager *_manager_;
  NetI2pRouterTransportGeoIP *_geoIP_;
  volatile_jboolean _netMonitorStatus_;
  jboolean _wasStarted_;
}

- (void)startGeoIP;

+ (IOSByteArray *)getIPWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

+ (IOSByteArray *)getValidIPWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

- (NSString *)_tWithNSString:(NSString *)s;

- (void)startTimestamper;

- (void)startNetMonitor;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportCommSystemFacadeImpl, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportCommSystemFacadeImpl, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportCommSystemFacadeImpl, _manager_, NetI2pRouterTransportTransportManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportCommSystemFacadeImpl, _geoIP_, NetI2pRouterTransportGeoIP *)

inline NSString *NetI2pRouterTransportCommSystemFacadeImpl_get_PROP_DISABLED(void);
static NSString *NetI2pRouterTransportCommSystemFacadeImpl_PROP_DISABLED = @"i2np.disable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCommSystemFacadeImpl, PROP_DISABLED, NSString *)

inline jint NetI2pRouterTransportCommSystemFacadeImpl_get_START_DELAY(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_START_DELAY 300000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl, START_DELAY, jint)

inline jint NetI2pRouterTransportCommSystemFacadeImpl_get_LOOKUP_TIME(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_LOOKUP_TIME 1800000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl, LOOKUP_TIME, jint)

inline NSString *NetI2pRouterTransportCommSystemFacadeImpl_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportCommSystemFacadeImpl_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCommSystemFacadeImpl, BUNDLE_NAME, NSString *)

inline NSString *NetI2pRouterTransportCommSystemFacadeImpl_get_COUNTRY_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportCommSystemFacadeImpl_COUNTRY_BUNDLE_NAME = @"net.i2p.router.countries.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportCommSystemFacadeImpl, COUNTRY_BUNDLE_NAME, NSString *)

inline jint NetI2pRouterTransportCommSystemFacadeImpl_get_TIME_START_DELAY(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_TIME_START_DELAY 300000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl, TIME_START_DELAY, jint)

inline jint NetI2pRouterTransportCommSystemFacadeImpl_get_TIME_REPEAT_DELAY(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_TIME_REPEAT_DELAY 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl, TIME_REPEAT_DELAY, jint)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_startGeoIP(NetI2pRouterTransportCommSystemFacadeImpl *self);

__attribute__((unused)) static IOSByteArray *NetI2pRouterTransportCommSystemFacadeImpl_getIPWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri);

__attribute__((unused)) static IOSByteArray *NetI2pRouterTransportCommSystemFacadeImpl_getValidIPWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri);

__attribute__((unused)) static NSString *NetI2pRouterTransportCommSystemFacadeImpl__tWithNSString_(NetI2pRouterTransportCommSystemFacadeImpl *self, NSString *s);

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_startTimestamper(NetI2pRouterTransportCommSystemFacadeImpl *self);

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_startNetMonitor(NetI2pRouterTransportCommSystemFacadeImpl *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportCommSystemFacadeImpl__Annotations$0(void);

@interface NetI2pRouterTransportCommSystemFacadeImpl_QueueAll : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportCommSystemFacadeImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *new_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *create_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll)

@interface NetI2pRouterTransportCommSystemFacadeImpl_Lookup : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportCommSystemFacadeImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportCommSystemFacadeImpl_Lookup)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_Lookup *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_Lookup *new_NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_Lookup *create_NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportCommSystemFacadeImpl_Lookup)

@interface NetI2pRouterTransportCommSystemFacadeImpl_LookupThread : NetI2pUtilI2PThread {
 @public
  NetI2pRouterTransportCommSystemFacadeImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *new_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *create_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread)

@interface NetI2pRouterTransportCommSystemFacadeImpl_Timestamper : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportCommSystemFacadeImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *new_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *create_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper)

@interface NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTransportCommSystemFacadeImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor)

inline jlong NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_get_SHORT_DELAY(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_SHORT_DELAY 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor, SHORT_DELAY, jlong)

inline jlong NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_get_LONG_DELAY(void);
#define NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_LONG_DELAY 180000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor, LONG_DELAY, jlong)

__attribute__((unused)) static void NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *new_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *create_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor)

@implementation NetI2pRouterTransportCommSystemFacadeImpl

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTransportCommSystemFacadeImpl_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)startup {
  @synchronized(self) {
    [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Starting up the comm system"];
    [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) startListening];
    NetI2pRouterTransportCommSystemFacadeImpl_startTimestamper(self);
    NetI2pRouterTransportCommSystemFacadeImpl_startNetMonitor(self);
    _wasStarted_ = true;
  }
}

- (void)shutdown {
  @synchronized(self) {
    [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) shutdown];
    [((NetI2pRouterTransportGeoIP *) nil_chk(_geoIP_)) shutdown];
  }
}

- (void)restart {
  @synchronized(self) {
    if (!_wasStarted_) [self startup];
    else [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) restart];
  }
}

- (jint)countActivePeers {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) countActivePeers];
}

- (jint)countActiveSendPeers {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) countActiveSendPeers];
}

- (jboolean)haveInboundCapacityWithInt:(jint)pct {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) haveInboundCapacityWithInt:pct];
}

- (jboolean)haveOutboundCapacityWithInt:(jint)pct {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) haveOutboundCapacityWithInt:pct];
}

- (jboolean)haveHighOutboundCapacity {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) haveHighOutboundCapacity];
}

- (jlong)getFramedAveragePeerClockSkewWithInt:(jint)percentToInclude {
  JavaUtilVector *skews = [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getClockSkews];
  if (skews == nil || [skews isEmpty] || ([skews size] < 5 && [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) getUpdatedSuccessfully])) {
    return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) getOffset];
  }
  JavaUtilCollections_sortWithJavaUtilList_(skews);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Clock skews: ", skews)];
  jint frameSize = JavaLangMath_maxWithInt_withInt_(([skews size] * percentToInclude / 100), 1);
  jint first = ([skews size] / 2) - (frameSize / 2);
  jint last = JavaLangMath_minWithInt_withInt_(([skews size] / 2) + (frameSize / 2), [skews size] - 1);
  jlong sum = 0;
  for (jint i = first; i <= last; i++) {
    jlong value = [((JavaLangLong *) nil_chk([skews getWithInt:i])) longLongValue];
    sum = sum + value;
  }
  return sum * 1000 / frameSize;
}

- (void)processMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if ([self isDummy]) {
    NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(_context_, msg);
    return;
  }
  NetI2pRouterTransportGetBidsJob_getBidsWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(_context_, _manager_, msg);
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) isBackloggedWithNetI2pDataHash:peer];
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) isEstablishedWithNetI2pDataHash:peer];
}

- (id<JavaUtilSet>)getEstablished {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getEstablished];
}

- (jboolean)wasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) wasUnreachableWithNetI2pDataHash:peer];
}

- (IOSByteArray *)getIPWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getIPWithNetI2pDataHash:peer];
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) mayDisconnectWithNetI2pDataHash:peer];
}

- (id<JavaUtilList>)getMostRecentErrorMessages {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getMostRecentErrorMessages];
}

- (NetI2pRouterCommSystemFacade_Status *)getStatus {
  if (!JreLoadVolatileBoolean(&_netMonitorStatus_)) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED);
  NetI2pRouterCommSystemFacade_Status *rv = [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getReachabilityStatus];
  if (rv != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, HOSED) && [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isHidden]) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
  return rv;
}

- (void)recheckReachability {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) recheckReachability];
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) renderStatusHTMLWithJavaIoWriter:outArg withNSString:urlBase withInt:sortFlags];
}

- (id<JavaUtilSortedMap>)getTransports {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getTransports];
}

- (id<JavaUtilList>)createAddresses {
  id<JavaUtilList> addresses = create_JavaUtilArrayList_initWithJavaUtilCollection_([((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getAddresses]);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Creating addresses: ", addresses) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"creator")];
  return addresses;
}

- (void)notifyReplaceAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)udpAddr {
  IOSByteArray *ip = nil;
  jint port = 0;
  if (udpAddr != nil && [udpAddr getOptionWithNSString:@"ihost0"] == nil) {
    ip = [udpAddr getIP];
    port = [udpAddr getPort];
  }
  if (port < 0) {
    id<NetI2pRouterTransportTransport> udp = [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getTransportWithNSString:NetI2pRouterTransportUdpUDPTransport_STYLE];
    if (udp != nil) port = [udp getRequestedPort];
  }
  if (ip != nil || port > 0) [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU) withByteArray:ip withInt:port];
  else [self notifyRemoveAddressWithBoolean:false];
}

- (void)notifyRemoveAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
  [self notifyRemoveAddressWithBoolean:address != nil && [address getIP] != nil && ((IOSByteArray *) nil_chk([address getIP]))->size_ == 16];
}

- (void)notifyRemoveAddressWithBoolean:(jboolean)ipv6 {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU) withBoolean:ipv6];
}

- (void)registerTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) registerAndStartWithNetI2pRouterTransportTransport:t];
}

- (void)unregisterTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
  [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) stopAndUnregisterWithNetI2pRouterTransportTransport:t];
}

- (id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)getDHFactory {
  return [((NetI2pRouterTransportTransportManager *) nil_chk(_manager_)) getDHFactory];
}

- (void)startGeoIP {
  NetI2pRouterTransportCommSystemFacadeImpl_startGeoIP(self);
}

- (void)queueLookupWithByteArray:(IOSByteArray *)ip {
  [((NetI2pRouterTransportGeoIP *) nil_chk(_geoIP_)) addWithByteArray:ip];
}

- (NSString *)getOurCountry {
  return [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_IP_COUNTRY];
}

- (jboolean)isInBadCountry {
  NSString *us = [self getOurCountry];
  return (us != nil && NetI2pRouterTransportBadCountries_containsWithNSString_(us)) || [((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:@"router.forceBadCountry"];
}

- (jboolean)isInBadCountryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NSString *c = [self getCountryWithNetI2pDataHash:peer];
  return c != nil && NetI2pRouterTransportBadCountries_containsWithNSString_(c);
}

- (jboolean)isInBadCountryWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  IOSByteArray *ip = NetI2pRouterTransportCommSystemFacadeImpl_getIPWithNetI2pDataRouterRouterInfo_(ri);
  if (ip == nil) return false;
  NSString *c = [((NetI2pRouterTransportGeoIP *) nil_chk(_geoIP_)) getWithByteArray:ip];
  return c != nil && NetI2pRouterTransportBadCountries_containsWithNSString_(c);
}

- (NSString *)getCountryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  IOSByteArray *ip = NetI2pRouterTransportTransportImpl_getIPWithNetI2pDataHash_(peer);
  if (ip != nil) return [((NetI2pRouterTransportGeoIP *) nil_chk(_geoIP_)) getWithByteArray:ip];
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (ri == nil) return nil;
  ip = NetI2pRouterTransportCommSystemFacadeImpl_getValidIPWithNetI2pDataRouterRouterInfo_(ri);
  if (ip != nil) return [((NetI2pRouterTransportGeoIP *) nil_chk(_geoIP_)) getWithByteArray:ip];
  return nil;
}

+ (IOSByteArray *)getIPWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  return NetI2pRouterTransportCommSystemFacadeImpl_getIPWithNetI2pDataRouterRouterInfo_(ri);
}

+ (IOSByteArray *)getValidIPWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  return NetI2pRouterTransportCommSystemFacadeImpl_getValidIPWithNetI2pDataRouterRouterInfo_(ri);
}

- (NSString *)getCountryNameWithNSString:(NSString *)c {
  if (_geoIP_ == nil) return c;
  NSString *n = [_geoIP_ fullNameWithNSString:c];
  if (n == nil) return c;
  return n;
}

- (NSString *)renderPeerHTMLWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NSString *h = [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(peer)) toBase64])) java_substring:0 endIndex:4];
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  NSString *c = [self getCountryWithNetI2pDataHash:peer];
  if (c != nil) {
    NSString *countryName = [self getCountryNameWithNSString:c];
    if ([((NSString *) nil_chk(countryName)) java_length] > 2) countryName = NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(countryName, _context_, NetI2pRouterTransportCommSystemFacadeImpl_COUNTRY_BUNDLE_NAME);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<img height=\"11\" width=\"16\" alt=\""])) appendWithNSString:[c java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]])) appendWithNSString:@"\" title=\""];
    [buf appendWithNSString:countryName];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\" src=\"/flags.jsp?c="])) appendWithNSString:c])) appendWithNSString:@"\"> "];
  }
  else [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<img class=\"unknownflag\" height=\"11\" width=\"16\" alt=\"??\" src=\"/flags.jsp?c=a0\" title=\""])) appendWithNSString:NetI2pRouterTransportCommSystemFacadeImpl__tWithNSString_(self, @"unknown")])) appendWithNSString:@"\"> "];
  [buf appendWithNSString:@"<tt>"];
  jboolean found = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer] != nil;
  if (found) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<a title=\""])) appendWithNSString:NetI2pRouterTransportCommSystemFacadeImpl__tWithNSString_(self, @"NetDb entry")])) appendWithNSString:@"\" href=\"netdb?r="])) appendWithNSString:h])) appendWithNSString:@"\">"];
  [buf appendWithNSString:h];
  if (found) [buf appendWithNSString:@"</a>"];
  [buf appendWithNSString:@"</tt>"];
  return [buf description];
}

- (jboolean)isDummy {
  return [((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:NetI2pRouterTransportCommSystemFacadeImpl_PROP_DISABLED];
}

- (NSString *)_tWithNSString:(NSString *)s {
  return NetI2pRouterTransportCommSystemFacadeImpl__tWithNSString_(self, s);
}

- (void)startTimestamper {
  NetI2pRouterTransportCommSystemFacadeImpl_startTimestamper(self);
}

- (void)startNetMonitor {
  NetI2pRouterTransportCommSystemFacadeImpl_startNetMonitor(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_manager_);
  RELEASE_(_geoIP_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x1, -1, -1, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 32, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 12, 31, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 33, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 37, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(restart);
  methods[4].selector = @selector(countActivePeers);
  methods[5].selector = @selector(countActiveSendPeers);
  methods[6].selector = @selector(haveInboundCapacityWithInt:);
  methods[7].selector = @selector(haveOutboundCapacityWithInt:);
  methods[8].selector = @selector(haveHighOutboundCapacity);
  methods[9].selector = @selector(getFramedAveragePeerClockSkewWithInt:);
  methods[10].selector = @selector(processMessageWithNetI2pRouterOutNetMessage:);
  methods[11].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[12].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[13].selector = @selector(getEstablished);
  methods[14].selector = @selector(wasUnreachableWithNetI2pDataHash:);
  methods[15].selector = @selector(getIPWithNetI2pDataHash:);
  methods[16].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[17].selector = @selector(getMostRecentErrorMessages);
  methods[18].selector = @selector(getStatus);
  methods[19].selector = @selector(recheckReachability);
  methods[20].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  methods[21].selector = @selector(getTransports);
  methods[22].selector = @selector(createAddresses);
  methods[23].selector = @selector(notifyReplaceAddressWithNetI2pDataRouterRouterAddress:);
  methods[24].selector = @selector(notifyRemoveAddressWithNetI2pDataRouterRouterAddress:);
  methods[25].selector = @selector(notifyRemoveAddressWithBoolean:);
  methods[26].selector = @selector(registerTransportWithNetI2pRouterTransportTransport:);
  methods[27].selector = @selector(unregisterTransportWithNetI2pRouterTransportTransport:);
  methods[28].selector = @selector(getDHFactory);
  methods[29].selector = @selector(startGeoIP);
  methods[30].selector = @selector(queueLookupWithByteArray:);
  methods[31].selector = @selector(getOurCountry);
  methods[32].selector = @selector(isInBadCountry);
  methods[33].selector = @selector(isInBadCountryWithNetI2pDataHash:);
  methods[34].selector = @selector(isInBadCountryWithNetI2pDataRouterRouterInfo:);
  methods[35].selector = @selector(getCountryWithNetI2pDataHash:);
  methods[36].selector = @selector(getIPWithNetI2pDataRouterRouterInfo:);
  methods[37].selector = @selector(getValidIPWithNetI2pDataRouterRouterInfo:);
  methods[38].selector = @selector(getCountryNameWithNSString:);
  methods[39].selector = @selector(renderPeerHTMLWithNetI2pDataHash:);
  methods[40].selector = @selector(isDummy);
  methods[41].selector = @selector(_tWithNSString:);
  methods[42].selector = @selector(startTimestamper);
  methods[43].selector = @selector(startNetMonitor);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterTransportTransportManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_geoIP_", "LNetI2pRouterTransportGeoIP;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_netMonitorStatus_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_wasStarted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_DISABLED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "START_DELAY", "I", .constantValue.asInt = NetI2pRouterTransportCommSystemFacadeImpl_START_DELAY, 0x1a, -1, -1, -1, -1 },
    { "LOOKUP_TIME", "I", .constantValue.asInt = NetI2pRouterTransportCommSystemFacadeImpl_LOOKUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "COUNTRY_BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "TIME_START_DELAY", "I", .constantValue.asInt = NetI2pRouterTransportCommSystemFacadeImpl_TIME_START_DELAY, 0x1a, -1, -1, -1, -1 },
    { "TIME_REPEAT_DELAY", "I", .constantValue.asInt = NetI2pRouterTransportCommSystemFacadeImpl_TIME_REPEAT_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "haveInboundCapacity", "I", "haveOutboundCapacity", "getFramedAveragePeerClockSkew", "processMessage", "LNetI2pRouterOutNetMessage;", "isBacklogged", "LNetI2pDataHash;", "isEstablished", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "wasUnreachable", "getIP", "mayDisconnect", "()Ljava/util/List<Ljava/lang/String;>;", (void *)&NetI2pRouterTransportCommSystemFacadeImpl__Annotations$0, "renderStatusHTML", "LJavaIoWriter;LNSString;I", "LJavaIoIOException;", "()Ljava/util/SortedMap<Ljava/lang/String;Lnet/i2p/router/transport/Transport;>;", "()Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "notifyReplaceAddress", "LNetI2pDataRouterRouterAddress;", "notifyRemoveAddress", "Z", "registerTransport", "LNetI2pRouterTransportTransport;", "unregisterTransport", "queueLookup", "[B", "isInBadCountry", "LNetI2pDataRouterRouterInfo;", "getCountry", "getValidIP", "getCountryName", "LNSString;", "renderPeerHTML", "_t", &NetI2pRouterTransportCommSystemFacadeImpl_PROP_DISABLED, &NetI2pRouterTransportCommSystemFacadeImpl_BUNDLE_NAME, &NetI2pRouterTransportCommSystemFacadeImpl_COUNTRY_BUNDLE_NAME, "LNetI2pRouterTransportCommSystemFacadeImpl_QueueAll;LNetI2pRouterTransportCommSystemFacadeImpl_Lookup;LNetI2pRouterTransportCommSystemFacadeImpl_LookupThread;LNetI2pRouterTransportCommSystemFacadeImpl_Timestamper;LNetI2pRouterTransportCommSystemFacadeImpl_NetMonitor;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl = { "CommSystemFacadeImpl", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x1, 44, 13, -1, 41, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportCommSystemFacadeImpl *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterCommSystemFacade_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportCommSystemFacadeImpl_class_()]);
  JreAssignVolatileBoolean(&self->_netMonitorStatus_, true);
  JreStrongAssignAndConsume(&self->_geoIP_, new_NetI2pRouterTransportGeoIP_initWithNetI2pI2PAppContext_(self->_context_));
  JreStrongAssignAndConsume(&self->_manager_, new_NetI2pRouterTransportTransportManager_initWithNetI2pRouterRouterContext_(self->_context_));
  NetI2pRouterTransportCommSystemFacadeImpl_startGeoIP(self);
}

NetI2pRouterTransportCommSystemFacadeImpl *new_NetI2pRouterTransportCommSystemFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTransportCommSystemFacadeImpl *create_NetI2pRouterTransportCommSystemFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterTransportCommSystemFacadeImpl_startGeoIP(NetI2pRouterTransportCommSystemFacadeImpl *self) {
  [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self) withLong:NetI2pRouterTransportCommSystemFacadeImpl_START_DELAY];
}

IOSByteArray *NetI2pRouterTransportCommSystemFacadeImpl_getIPWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri) {
  NetI2pRouterTransportCommSystemFacadeImpl_initialize();
  for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getAddresses])) {
    IOSByteArray *rv = [((NetI2pDataRouterRouterAddress *) nil_chk(ra)) getIP];
    if (rv != nil) return rv;
  }
  return nil;
}

IOSByteArray *NetI2pRouterTransportCommSystemFacadeImpl_getValidIPWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri) {
  NetI2pRouterTransportCommSystemFacadeImpl_initialize();
  for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getAddresses])) {
    IOSByteArray *rv = [((NetI2pDataRouterRouterAddress *) nil_chk(ra)) getIP];
    if (rv != nil && NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_(rv, true)) return rv;
  }
  return nil;
}

NSString *NetI2pRouterTransportCommSystemFacadeImpl__tWithNSString_(NetI2pRouterTransportCommSystemFacadeImpl *self, NSString *s) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(s, self->_context_, NetI2pRouterTransportCommSystemFacadeImpl_BUNDLE_NAME);
}

void NetI2pRouterTransportCommSystemFacadeImpl_startTimestamper(NetI2pRouterTransportCommSystemFacadeImpl *self) {
  [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self) withLong:NetI2pRouterTransportCommSystemFacadeImpl_TIME_START_DELAY withLong:NetI2pRouterTransportCommSystemFacadeImpl_TIME_REPEAT_DELAY];
}

void NetI2pRouterTransportCommSystemFacadeImpl_startNetMonitor(NetI2pRouterTransportCommSystemFacadeImpl *self) {
  create_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self);
}

IOSObjectArray *NetI2pRouterTransportCommSystemFacadeImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl)

@implementation NetI2pRouterTransportCommSystemFacadeImpl_QueueAll

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$ {
  NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self, outer$);
  return self;
}

- (void)timeReached {
  for (NetI2pDataHash * __strong h in nil_chk([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) getAllRouters])) {
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([this$0_->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:h];
    if (ri == nil) continue;
    IOSByteArray *ip = NetI2pRouterTransportCommSystemFacadeImpl_getIPWithNetI2pDataRouterRouterInfo_(ri);
    if (ip == nil) continue;
    [((NetI2pRouterTransportGeoIP *) nil_chk(this$0_->_geoIP_)) addWithByteArray:ip];
  }
  [((NetI2pUtilSimpleTimer2 *) nil_chk([this$0_->_context_ simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(this$0_) withLong:5000 withLong:NetI2pRouterTransportCommSystemFacadeImpl_LOOKUP_TIME];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCommSystemFacadeImpl:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportCommSystemFacadeImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCommSystemFacadeImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl_QueueAll = { "QueueAll", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *new_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

NetI2pRouterTransportCommSystemFacadeImpl_QueueAll *create_NetI2pRouterTransportCommSystemFacadeImpl_QueueAll_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl_QueueAll)

@implementation NetI2pRouterTransportCommSystemFacadeImpl_Lookup

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$ {
  NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self, outer$);
  return self;
}

- (void)timeReached {
  [(create_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(this$0_)) start];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCommSystemFacadeImpl:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportCommSystemFacadeImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCommSystemFacadeImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl_Lookup = { "Lookup", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl_Lookup;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_Lookup *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportCommSystemFacadeImpl_Lookup *new_NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_Lookup, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

NetI2pRouterTransportCommSystemFacadeImpl_Lookup *create_NetI2pRouterTransportCommSystemFacadeImpl_Lookup_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_Lookup, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl_Lookup)

@implementation NetI2pRouterTransportCommSystemFacadeImpl_LookupThread

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$ {
  NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self, outer$);
  return self;
}

- (void)run {
  jlong start = JavaLangSystem_currentTimeMillis();
  [((NetI2pRouterTransportGeoIP *) nil_chk(this$0_->_geoIP_)) blockingLookup];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$J", @"GeoIP lookup took ", (JavaLangSystem_currentTimeMillis() - start))];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCommSystemFacadeImpl:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportCommSystemFacadeImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCommSystemFacadeImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl_LookupThread = { "LookupThread", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilI2PThread_initWithNSString_(self, @"GeoIP Lookup");
  [self setDaemonWithBoolean:true];
}

NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *new_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

NetI2pRouterTransportCommSystemFacadeImpl_LookupThread *create_NetI2pRouterTransportCommSystemFacadeImpl_LookupThread_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl_LookupThread)

@implementation NetI2pRouterTransportCommSystemFacadeImpl_Timestamper

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$ {
  NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self, outer$);
  return self;
}

- (void)timeReached {
  jlong peerOffset = [this$0_ getFramedAveragePeerClockSkewWithInt:33];
  if (peerOffset == 0) return;
  jlong currentOffset = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) getOffset];
  jlong newOffset = currentOffset - peerOffset;
  [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) setOffsetWithLong:newOffset];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCommSystemFacadeImpl:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportCommSystemFacadeImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCommSystemFacadeImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl_Timestamper = { "Timestamper", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *new_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

NetI2pRouterTransportCommSystemFacadeImpl_Timestamper *create_NetI2pRouterTransportCommSystemFacadeImpl_Timestamper_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl_Timestamper)

@implementation NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor

- (instancetype)initWithNetI2pRouterTransportCommSystemFacadeImpl:(NetI2pRouterTransportCommSystemFacadeImpl *)outer$ {
  NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(self, outer$);
  return self;
}

- (void)timeReached {
  jboolean good = NetI2pUtilAddresses_isConnected();
  if (JreLoadVolatileBoolean(&this$0_->_netMonitorStatus_) != good) {
    if (good) [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:@"Network reconnected"];
    else [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"Network disconnected"];
    [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_NETWORK withNSString:good ? @"connected" : @"disconnected"];
    JreAssignVolatileBoolean(&this$0_->_netMonitorStatus_, good);
    if (good) {
      [((NetI2pRouterTransportTransportManager *) nil_chk(this$0_->_manager_)) initializeAddress];
      [this$0_->_manager_ transportAddressChanged];
    }
  }
  [self rescheduleWithLong:good ? NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_LONG_DELAY : NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_SHORT_DELAY];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportCommSystemFacadeImpl:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportCommSystemFacadeImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "SHORT_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_SHORT_DELAY, 0x1a, -1, -1, -1, -1 },
    { "LONG_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_LONG_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportCommSystemFacadeImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor = { "NetMonitor", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 3, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor;
}

@end

void NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *self, NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2], 0);
}

NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *new_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor *create_NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor_initWithNetI2pRouterTransportCommSystemFacadeImpl_(NetI2pRouterTransportCommSystemFacadeImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor, initWithNetI2pRouterTransportCommSystemFacadeImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportCommSystemFacadeImpl_NetMonitor)
