//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/UPnPManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportManager.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/UPnP.h"
#include "net/i2p/router/transport/UPnPManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/Translate.h"
#include "org/cybergarage/upnp/UPnP.h"
#include "org/cybergarage/util/Debug.h"
#include "org/freenetproject/DetectedIP.h"
#include "org/freenetproject/ForwardPort.h"
#include "org/freenetproject/ForwardPortCallback.h"
#include "org/freenetproject/ForwardPortStatus.h"

@class NetI2pRouterTransportUPnPManager_UPnPCallback;

@interface NetI2pRouterTransportUPnPManager () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterTransportUPnP *_upnp_;
  NetI2pRouterTransportUPnPManager_UPnPCallback *_upnpCallback_;
  volatile_jboolean _isRunning_;
  volatile_jboolean _shouldBeRunning_;
  volatile_jlong _lastRescan_;
  jboolean _errorLogged_;
  jboolean _disconLogged_;
  JavaNetInetAddress *_detectedAddress_;
  NetI2pRouterTransportTransportManager *_manager_;
  NetI2pUtilSimpleTimer2_TimedEvent *_rescanner_;
}

- (NSString *)_tWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _upnp_, NetI2pRouterTransportUPnP *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _upnpCallback_, NetI2pRouterTransportUPnPManager_UPnPCallback *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _detectedAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _manager_, NetI2pRouterTransportTransportManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUPnPManager, _rescanner_, NetI2pUtilSimpleTimer2_TimedEvent *)

inline NSString *NetI2pRouterTransportUPnPManager_get_PROP_HTTP_PORT(void);
static NSString *NetI2pRouterTransportUPnPManager_PROP_HTTP_PORT = @"i2np.upnp.HTTPPort";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnPManager, PROP_HTTP_PORT, NSString *)

inline jint NetI2pRouterTransportUPnPManager_get_DEFAULT_HTTP_PORT(void);
#define NetI2pRouterTransportUPnPManager_DEFAULT_HTTP_PORT 7652
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnPManager, DEFAULT_HTTP_PORT, jint)

inline NSString *NetI2pRouterTransportUPnPManager_get_PROP_SSDP_PORT(void);
static NSString *NetI2pRouterTransportUPnPManager_PROP_SSDP_PORT = @"i2np.upnp.SSDPPort";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnPManager, PROP_SSDP_PORT, NSString *)

inline jint NetI2pRouterTransportUPnPManager_get_DEFAULT_SSDP_PORT(void);
#define NetI2pRouterTransportUPnPManager_DEFAULT_SSDP_PORT 7653
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnPManager, DEFAULT_SSDP_PORT, jint)

inline jlong NetI2pRouterTransportUPnPManager_get_RESCAN_MIN_DELAY(void);
#define NetI2pRouterTransportUPnPManager_RESCAN_MIN_DELAY 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnPManager, RESCAN_MIN_DELAY, jlong)

inline jlong NetI2pRouterTransportUPnPManager_get_RESCAN_SHORT_DELAY(void);
#define NetI2pRouterTransportUPnPManager_RESCAN_SHORT_DELAY 120000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnPManager, RESCAN_SHORT_DELAY, jlong)

inline jlong NetI2pRouterTransportUPnPManager_get_RESCAN_LONG_DELAY(void);
#define NetI2pRouterTransportUPnPManager_RESCAN_LONG_DELAY 840000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUPnPManager, RESCAN_LONG_DELAY, jlong)

inline NSString *NetI2pRouterTransportUPnPManager_get_TCP_PORT_NAME(void);
static NSString *NetI2pRouterTransportUPnPManager_TCP_PORT_NAME = @"TCP";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnPManager, TCP_PORT_NAME, NSString *)

inline NSString *NetI2pRouterTransportUPnPManager_get_UDP_PORT_NAME(void);
static NSString *NetI2pRouterTransportUPnPManager_UDP_PORT_NAME = @"UDP";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnPManager, UDP_PORT_NAME, NSString *)

inline NSString *NetI2pRouterTransportUPnPManager_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportUPnPManager_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUPnPManager, BUNDLE_NAME, NSString *)

__attribute__((unused)) static NSString *NetI2pRouterTransportUPnPManager__tWithNSString_(NetI2pRouterTransportUPnPManager *self, NSString *s);

@interface NetI2pRouterTransportUPnPManager_Rescanner : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTransportUPnPManager *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUPnPManager:(NetI2pRouterTransportUPnPManager *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUPnPManager_Rescanner)

__attribute__((unused)) static void NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager_Rescanner *self, NetI2pRouterTransportUPnPManager *outer$);

__attribute__((unused)) static NetI2pRouterTransportUPnPManager_Rescanner *new_NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUPnPManager_Rescanner *create_NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUPnPManager_Rescanner)

@interface NetI2pRouterTransportUPnPManager_UPnPCallback : NSObject < OrgFreenetprojectForwardPortCallback > {
 @public
  NetI2pRouterTransportUPnPManager *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUPnPManager:(NetI2pRouterTransportUPnPManager *)outer$;

- (void)portForwardStatusWithJavaUtilMap:(id<JavaUtilMap>)statuses;

- (void)locked_PFSWithJavaUtilMap:(id<JavaUtilMap>)statuses;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUPnPManager_UPnPCallback)

__attribute__((unused)) static void NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager_UPnPCallback *self, NetI2pRouterTransportUPnPManager *outer$);

__attribute__((unused)) static NetI2pRouterTransportUPnPManager_UPnPCallback *new_NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUPnPManager_UPnPCallback *create_NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$);

__attribute__((unused)) static void NetI2pRouterTransportUPnPManager_UPnPCallback_locked_PFSWithJavaUtilMap_(NetI2pRouterTransportUPnPManager_UPnPCallback *self, id<JavaUtilMap> statuses);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUPnPManager_UPnPCallback)

@implementation NetI2pRouterTransportUPnPManager

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
        withNetI2pRouterTransportTransportManager:(NetI2pRouterTransportTransportManager *)manager {
  NetI2pRouterTransportUPnPManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_(self, context, manager);
  return self;
}

- (void)start {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_shouldBeRunning_, true);
    if (!JreLoadVolatileBoolean(&_isRunning_) && NetI2pUtilAddresses_isConnected()) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"UPnP Start"];
      jlong b = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
      @try {
        [((NetI2pRouterTransportUPnP *) nil_chk(_upnp_)) setHTTPPortWithInt:[_context_ getPropertyWithNSString:NetI2pRouterTransportUPnPManager_PROP_HTTP_PORT withInt:NetI2pRouterTransportUPnPManager_DEFAULT_HTTP_PORT]];
        [_upnp_ setSSDPPortWithInt:[_context_ getPropertyWithNSString:NetI2pRouterTransportUPnPManager_PROP_SSDP_PORT withInt:NetI2pRouterTransportUPnPManager_DEFAULT_SSDP_PORT]];
        JreAssignVolatileBoolean(&_isRunning_, [_upnp_ runPlugin]);
        if ([_log_ shouldDebug]) [_log_ infoWithNSString:JreStrcat("$J", @"UPnP runPlugin took ", ([((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - b))];
      }
      @catch (JavaLangRuntimeException *e) {
        if (!_errorLogged_) {
          [_log_ errorWithNSString:@"UPnP error, please report" withJavaLangThrowable:e];
          _errorLogged_ = true;
        }
      }
    }
    if (JreLoadVolatileBoolean(&_isRunning_)) {
      [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_rescanner_)) scheduleWithLong:NetI2pRouterTransportUPnPManager_RESCAN_LONG_DELAY];
    }
    else {
      [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_rescanner_)) scheduleWithLong:NetI2pRouterTransportUPnPManager_RESCAN_SHORT_DELAY];
      if (!NetI2pUtilAddresses_isConnected()) {
        if (!_disconLogged_) {
          [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"UPnP start failed - no network connection?"];
          _disconLogged_ = true;
        }
      }
      else {
        [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"UPnP start failed - port conflict?"];
      }
    }
  }
}

- (void)stop {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"UPnP Stop"];
    JreAssignVolatileBoolean(&_shouldBeRunning_, false);
    [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_rescanner_)) cancel];
    if (JreLoadVolatileBoolean(&_isRunning_)) [((NetI2pRouterTransportUPnP *) nil_chk(_upnp_)) terminate];
    JreAssignVolatileBoolean(&_isRunning_, false);
    JreStrongAssign(&_detectedAddress_, nil);
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"UPnP Stop Done"];
  }
}

- (void)rescan {
  @synchronized(self) {
    if (!JreLoadVolatileBoolean(&_shouldBeRunning_)) return;
    if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) gracefulShutdownInProgress]) return;
    jlong now = JavaLangSystem_currentTimeMillis();
    if (JreLoadVolatileLong(&_lastRescan_) + NetI2pRouterTransportUPnPManager_RESCAN_MIN_DELAY > now) return;
    JreAssignVolatileLong(&_lastRescan_, now);
    if (JreLoadVolatileBoolean(&_isRunning_)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"UPnP Rescan"];
      [((NetI2pRouterTransportUPnP *) nil_chk(_upnp_)) search];
    }
    else {
      [self start];
    }
  }
}

- (void)updateWithJavaUtilSet:(id<JavaUtilSet>)ports {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$", @"UPnP Update with ", [((id<JavaUtilSet>) nil_chk(ports)) size], @" ports")];
  if (!JreLoadVolatileBoolean(&_isRunning_)) return;
  id<JavaUtilSet> forwards = create_JavaUtilHashSet_initWithInt_([((id<JavaUtilSet>) nil_chk(ports)) size]);
  for (NetI2pRouterTransportTransportManager_Port * __strong entry_ in ports) {
    NSString *style = ((NetI2pRouterTransportTransportManager_Port *) nil_chk(entry_))->style_;
    jint port = entry_->port_;
    jint protocol;
    NSString *name;
    if ([@"SSU" isEqual:style]) {
      protocol = OrgFreenetprojectForwardPort_PROTOCOL_UDP_IPV4;
      name = NetI2pRouterTransportUPnPManager_UDP_PORT_NAME;
    }
    else if ([@"NTCP" isEqual:style]) {
      protocol = OrgFreenetprojectForwardPort_PROTOCOL_TCP_IPV4;
      name = NetI2pRouterTransportUPnPManager_TCP_PORT_NAME;
    }
    else {
      continue;
    }
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$CI", @"Adding: ", style, ' ', port)];
    OrgFreenetprojectForwardPort *fp = create_OrgFreenetprojectForwardPort_initWithNSString_withBoolean_withInt_withInt_(name, false, protocol, port);
    [forwards addWithId:fp];
  }
  [((NetI2pRouterTransportUPnP *) nil_chk(_upnp_)) onChangePublicPortsWithJavaUtilSet:forwards withOrgFreenetprojectForwardPortCallback:_upnpCallback_];
}

- (NSString *)renderStatusHTML {
  if (!JreLoadVolatileBoolean(&_isRunning_)) return JreStrcat("$$$", @"<h3><a name=\"upnp\"></a>", NetI2pRouterTransportUPnPManager__tWithNSString_(self, @"UPnP is not enabled"), @"</h3>\n");
  return [((NetI2pRouterTransportUPnP *) nil_chk(_upnp_)) renderStatusHTML];
}

- (NSString *)_tWithNSString:(NSString *)s {
  return NetI2pRouterTransportUPnPManager__tWithNSString_(self, s);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_upnp_);
  RELEASE_(_upnpCallback_);
  RELEASE_(_detectedAddress_);
  RELEASE_(_manager_);
  RELEASE_(_rescanner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportTransportManager:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(stop);
  methods[3].selector = @selector(rescan);
  methods[4].selector = @selector(updateWithJavaUtilSet:);
  methods[5].selector = @selector(renderStatusHTML);
  methods[6].selector = @selector(_tWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_upnp_", "LNetI2pRouterTransportUPnP;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_upnpCallback_", "LNetI2pRouterTransportUPnPManager_UPnPCallback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_shouldBeRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastRescan_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_errorLogged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_disconLogged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_detectedAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterTransportTransportManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_rescanner_", "LNetI2pUtilSimpleTimer2_TimedEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_HTTP_PORT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "DEFAULT_HTTP_PORT", "I", .constantValue.asInt = NetI2pRouterTransportUPnPManager_DEFAULT_HTTP_PORT, 0x1a, -1, -1, -1, -1 },
    { "PROP_SSDP_PORT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "DEFAULT_SSDP_PORT", "I", .constantValue.asInt = NetI2pRouterTransportUPnPManager_DEFAULT_SSDP_PORT, 0x1a, -1, -1, -1, -1 },
    { "RESCAN_MIN_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUPnPManager_RESCAN_MIN_DELAY, 0x1a, -1, -1, -1, -1 },
    { "RESCAN_SHORT_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUPnPManager_RESCAN_SHORT_DELAY, 0x1a, -1, -1, -1, -1 },
    { "RESCAN_LONG_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUPnPManager_RESCAN_LONG_DELAY, 0x1a, -1, -1, -1, -1 },
    { "TCP_PORT_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "UDP_PORT_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportTransportManager;", "update", "LJavaUtilSet;", "(Ljava/util/Set<Lnet/i2p/router/transport/TransportManager$Port;>;)V", "_t", "LNSString;", &NetI2pRouterTransportUPnPManager_PROP_HTTP_PORT, &NetI2pRouterTransportUPnPManager_PROP_SSDP_PORT, &NetI2pRouterTransportUPnPManager_TCP_PORT_NAME, &NetI2pRouterTransportUPnPManager_UDP_PORT_NAME, &NetI2pRouterTransportUPnPManager_BUNDLE_NAME, "LNetI2pRouterTransportUPnPManager_Rescanner;LNetI2pRouterTransportUPnPManager_UPnPCallback;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnPManager = { "UPnPManager", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x0, 7, 22, -1, 11, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnPManager;
}

@end

void NetI2pRouterTransportUPnPManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_(NetI2pRouterTransportUPnPManager *self, NetI2pRouterRouterContext *context, NetI2pRouterTransportTransportManager *manager) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_manager_, manager);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUPnPManager_class_()]);
  OrgCybergarageUpnpUPnP_setEnableWithInt_(OrgCybergarageUpnpUPnP_USE_ONLY_IPV4_ADDR);
  OrgCybergarageUtilDebug_initialize__WithNetI2pI2PAppContext_(context);
  JreStrongAssignAndConsume(&self->_upnp_, new_NetI2pRouterTransportUPnP_initWithNetI2pI2PAppContext_(context));
  JreStrongAssignAndConsume(&self->_upnpCallback_, new_NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(self));
  JreStrongAssignAndConsume(&self->_rescanner_, new_NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(self));
}

NetI2pRouterTransportUPnPManager *new_NetI2pRouterTransportUPnPManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_(NetI2pRouterRouterContext *context, NetI2pRouterTransportTransportManager *manager) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnPManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_, context, manager)
}

NetI2pRouterTransportUPnPManager *create_NetI2pRouterTransportUPnPManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_(NetI2pRouterRouterContext *context, NetI2pRouterTransportTransportManager *manager) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnPManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_, context, manager)
}

NSString *NetI2pRouterTransportUPnPManager__tWithNSString_(NetI2pRouterTransportUPnPManager *self, NSString *s) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(s, self->_context_, NetI2pRouterTransportUPnPManager_BUNDLE_NAME);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnPManager)

@implementation NetI2pRouterTransportUPnPManager_Rescanner

- (instancetype)initWithNetI2pRouterTransportUPnPManager:(NetI2pRouterTransportUPnPManager *)outer$ {
  NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(self, outer$);
  return self;
}

- (void)timeReached {
  if (JreLoadVolatileBoolean(&this$0_->_shouldBeRunning_)) {
    [this$0_ rescan];
    [self rescheduleWithLong:JreLoadVolatileBoolean(&this$0_->_isRunning_) ? NetI2pRouterTransportUPnPManager_RESCAN_LONG_DELAY : NetI2pRouterTransportUPnPManager_RESCAN_SHORT_DELAY];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUPnPManager:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUPnPManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUPnPManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnPManager_Rescanner = { "Rescanner", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnPManager_Rescanner;
}

@end

void NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager_Rescanner *self, NetI2pRouterTransportUPnPManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
}

NetI2pRouterTransportUPnPManager_Rescanner *new_NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnPManager_Rescanner, initWithNetI2pRouterTransportUPnPManager_, outer$)
}

NetI2pRouterTransportUPnPManager_Rescanner *create_NetI2pRouterTransportUPnPManager_Rescanner_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnPManager_Rescanner, initWithNetI2pRouterTransportUPnPManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnPManager_Rescanner)

@implementation NetI2pRouterTransportUPnPManager_UPnPCallback

- (instancetype)initWithNetI2pRouterTransportUPnPManager:(NetI2pRouterTransportUPnPManager *)outer$ {
  NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(self, outer$);
  return self;
}

- (void)portForwardStatusWithJavaUtilMap:(id<JavaUtilMap>)statuses {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:@"UPnP Callback:"];
  @synchronized(self) {
    NetI2pRouterTransportUPnPManager_UPnPCallback_locked_PFSWithJavaUtilMap_(self, statuses);
  }
}

- (void)locked_PFSWithJavaUtilMap:(id<JavaUtilMap>)statuses {
  NetI2pRouterTransportUPnPManager_UPnPCallback_locked_PFSWithJavaUtilMap_(self, statuses);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUPnPManager:);
  methods[1].selector = @selector(portForwardStatusWithJavaUtilMap:);
  methods[2].selector = @selector(locked_PFSWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUPnPManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "portForwardStatus", "LJavaUtilMap;", "(Ljava/util/Map<Lorg/freenetproject/ForwardPort;Lorg/freenetproject/ForwardPortStatus;>;)V", "locked_PFS", "LNetI2pRouterTransportUPnPManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUPnPManager_UPnPCallback = { "UPnPCallback", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 3, 1, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUPnPManager_UPnPCallback;
}

@end

void NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager_UPnPCallback *self, NetI2pRouterTransportUPnPManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUPnPManager_UPnPCallback *new_NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUPnPManager_UPnPCallback, initWithNetI2pRouterTransportUPnPManager_, outer$)
}

NetI2pRouterTransportUPnPManager_UPnPCallback *create_NetI2pRouterTransportUPnPManager_UPnPCallback_initWithNetI2pRouterTransportUPnPManager_(NetI2pRouterTransportUPnPManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUPnPManager_UPnPCallback, initWithNetI2pRouterTransportUPnPManager_, outer$)
}

void NetI2pRouterTransportUPnPManager_UPnPCallback_locked_PFSWithJavaUtilMap_(NetI2pRouterTransportUPnPManager_UPnPCallback *self, id<JavaUtilMap> statuses) {
  IOSByteArray *ipaddr = nil;
  IOSObjectArray *ips = [((NetI2pRouterTransportUPnP *) nil_chk(self->this$0_->_upnp_)) getAddress];
  if (ips != nil) {
    {
      IOSObjectArray *a__ = ips;
      OrgFreenetprojectDetectedIP * const *b__ = a__->buffer_;
      OrgFreenetprojectDetectedIP * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgFreenetprojectDetectedIP *ip = *b__++;
        if (NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_([((JavaNetInetAddress *) nil_chk(((OrgFreenetprojectDetectedIP *) nil_chk(ip))->publicAddress_)) getAddress], false)) {
          if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@$S", @"External address: ", ip->publicAddress_, @" type: ", ip->natType_)];
          if (![ip->publicAddress_ isEqual:self->this$0_->_detectedAddress_]) {
            JreStrongAssign(&self->this$0_->_detectedAddress_, ip->publicAddress_);
            [((NetI2pRouterTransportTransportManager *) nil_chk(self->this$0_->_manager_)) externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_UPNP) withByteArray:[self->this$0_->_detectedAddress_ getAddress] withInt:0];
          }
          ipaddr = [ip->publicAddress_ getAddress];
          break;
        }
      }
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"No external address returned"];
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(statuses)) entrySet])) {
    OrgFreenetprojectForwardPort *fp = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    OrgFreenetprojectForwardPortStatus *fps = [entry_ getValue];
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$CICI$I$$$I", ((OrgFreenetprojectForwardPort *) nil_chk(fp))->name_, ' ', fp->protocol_, ' ', fp->portNumber_, @" status: ", ((OrgFreenetprojectForwardPortStatus *) nil_chk(fps))->status_, @" reason: ", fps->reasonString_, @" ext port: ", fps->externalPort_)];
    NSString *style;
    if (((OrgFreenetprojectForwardPort *) nil_chk(fp))->protocol_ == OrgFreenetprojectForwardPort_PROTOCOL_UDP_IPV4) style = @"SSU";
    else if (fp->protocol_ == OrgFreenetprojectForwardPort_PROTOCOL_TCP_IPV4) style = @"NTCP";
    else continue;
    jboolean success = ((OrgFreenetprojectForwardPortStatus *) nil_chk(fps))->status_ >= OrgFreenetprojectForwardPortStatus_MAYBE_SUCCESS;
    [((NetI2pRouterTransportTransportManager *) nil_chk(self->this$0_->_manager_)) forwardPortStatusWithNSString:style withByteArray:ipaddr withInt:fp->portNumber_ withInt:fps->externalPort_ withBoolean:success withNSString:fps->reasonString_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUPnPManager_UPnPCallback)
