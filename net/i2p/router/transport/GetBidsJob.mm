//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/GetBidsJob.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/GetBidsJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportBid.h"
#include "net/i2p/router/transport/TransportManager.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportGetBidsJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportTransportManager *_tmgr_;
  NetI2pRouterOutNetMessage *_msg_;
}

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportGetBidsJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGetBidsJob, _tmgr_, NetI2pRouterTransportTransportManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportGetBidsJob, _msg_, NetI2pRouterOutNetMessage *)

__attribute__((unused)) static NSString *NetI2pRouterTransportGetBidsJob__xWithNSString_(NSString *s);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportGetBidsJob__Annotations$0(void);

@implementation NetI2pRouterTransportGetBidsJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
        withNetI2pRouterTransportTransportManager:(NetI2pRouterTransportTransportManager *)tmgr
                    withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportGetBidsJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(self, ctx, tmgr, msg);
  return self;
}

- (NSString *)getName {
  return @"Fetch bids for a message to be delivered";
}

- (void)runJob {
  NetI2pRouterTransportGetBidsJob_getBidsWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_([self getContext], _tmgr_, _msg_);
}

+ (void)getBidsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
   withNetI2pRouterTransportTransportManager:(NetI2pRouterTransportTransportManager *)tmgr
               withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportGetBidsJob_getBidsWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(context, tmgr, msg);
}

+ (void)failWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
            withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(context, msg);
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTransportGetBidsJob__xWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_tmgr_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportTransportManager:withNetI2pRouterOutNetMessage:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(getBidsWithNetI2pRouterRouterContext:withNetI2pRouterTransportTransportManager:withNetI2pRouterOutNetMessage:);
  methods[4].selector = @selector(failWithNetI2pRouterRouterContext:withNetI2pRouterOutNetMessage:);
  methods[5].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tmgr_", "LNetI2pRouterTransportTransportManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportTransportManager;LNetI2pRouterOutNetMessage;", (void *)&NetI2pRouterTransportGetBidsJob__Annotations$0, "getBids", "fail", "LNetI2pRouterRouterContext;LNetI2pRouterOutNetMessage;", "_x", "LNSString;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportGetBidsJob = { "GetBidsJob", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x0, 6, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportGetBidsJob;
}

@end

void NetI2pRouterTransportGetBidsJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(NetI2pRouterTransportGetBidsJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportTransportManager *tmgr, NetI2pRouterOutNetMessage *msg) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportGetBidsJob_class_()]);
  JreStrongAssign(&self->_tmgr_, tmgr);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTransportGetBidsJob *new_NetI2pRouterTransportGetBidsJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportTransportManager *tmgr, NetI2pRouterOutNetMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportGetBidsJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_, ctx, tmgr, msg)
}

NetI2pRouterTransportGetBidsJob *create_NetI2pRouterTransportGetBidsJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportTransportManager *tmgr, NetI2pRouterOutNetMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportGetBidsJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_, ctx, tmgr, msg)
}

void NetI2pRouterTransportGetBidsJob_getBidsWithNetI2pRouterRouterContext_withNetI2pRouterTransportTransportManager_withNetI2pRouterOutNetMessage_(NetI2pRouterRouterContext *context, NetI2pRouterTransportTransportManager *tmgr, NetI2pRouterOutNetMessage *msg) {
  NetI2pRouterTransportGetBidsJob_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTransportGetBidsJob_class_()];
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget])) getIdentity])) getHash];
  [msg timestampWithNSString:@"bid"];
  if ([((NetI2pRouterBanlist *) nil_chk([context banlist])) isBanlistedWithNetI2pDataHash:to]) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$@", @"Attempt to send a message to a banlisted peer - ", to)];
    [((NetI2pStatStatManager *) nil_chk([context statManager])) addRateDataWithNSString:@"transport.bidFailBanlisted" withLong:[msg getLifetime]];
    NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(context, msg);
    return;
  }
  NetI2pDataHash *us = [context routerHash];
  if ([((NetI2pDataHash *) nil_chk(to)) isEqual:us]) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [log errorWithNSString:JreStrcat("$@", @"send a message to ourselves?  nuh uh. msg = ", msg)];
    [((NetI2pStatStatManager *) nil_chk([context statManager])) addRateDataWithNSString:@"transport.bidFailSelf" withLong:[msg getLifetime]];
    NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(context, msg);
    return;
  }
  NetI2pRouterTransportTransportBid *bid = [((NetI2pRouterTransportTransportManager *) nil_chk(tmgr)) getNextBidWithNetI2pRouterOutNetMessage:msg];
  if (bid == nil) {
    jint failedCount = [((id<JavaUtilSet>) nil_chk([msg getFailedTransports])) size];
    if (failedCount == 0) {
      [((NetI2pStatStatManager *) nil_chk([context statManager])) addRateDataWithNSString:@"transport.bidFailNoTransports" withLong:[msg getLifetime]];
      [((NetI2pRouterBanlist *) nil_chk([context banlist])) banlistRouterWithNetI2pDataHash:to withNSString:NetI2pRouterTransportGetBidsJob__xWithNSString_(@"No transports (hidden or starting up?)")];
    }
    else if (failedCount >= [tmgr getTransportCount]) {
      [((NetI2pStatStatManager *) nil_chk([context statManager])) addRateDataWithNSString:@"transport.bidFailAllTransports" withLong:[msg getLifetime]];
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([context netDb])) failWithNetI2pDataHash:to];
    }
    NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(context, msg);
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$$$@", @"Attempting to send on transport ", [((id<NetI2pRouterTransportTransport>) nil_chk([bid getTransport])) getStyle], @": ", bid)];
    [((id<NetI2pRouterTransportTransport>) nil_chk([bid getTransport])) sendWithNetI2pRouterOutNetMessage:msg];
  }
}

void NetI2pRouterTransportGetBidsJob_failWithNetI2pRouterRouterContext_withNetI2pRouterOutNetMessage_(NetI2pRouterRouterContext *context, NetI2pRouterOutNetMessage *msg) {
  NetI2pRouterTransportGetBidsJob_initialize();
  if ([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getOnFailedSendJob] != nil) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedSendJob]];
  }
  if ([msg getOnFailedReplyJob] != nil) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedReplyJob]];
  }
  id<NetI2pRouterMessageSelector> selector = [msg getReplySelector];
  if (selector != nil) {
    [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:msg];
  }
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) profileManager])) messageFailedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash]];
  [msg discardData];
}

NSString *NetI2pRouterTransportGetBidsJob__xWithNSString_(NSString *s) {
  NetI2pRouterTransportGetBidsJob_initialize();
  return s;
}

IOSObjectArray *NetI2pRouterTransportGetBidsJob__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportGetBidsJob)
