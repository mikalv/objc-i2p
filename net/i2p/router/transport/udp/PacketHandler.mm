//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PacketHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramPacket.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/InboundEstablishState.h"
#include "net/i2p/router/transport/udp/InboundMessageFragments.h"
#include "net/i2p/router/transport/udp/IntroductionManager.h"
#include "net/i2p/router/transport/udp/OutboundEstablishState.h"
#include "net/i2p/router/transport/udp/PacketHandler.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/PeerTestManager.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/CoDelBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportUdpPacketHandler () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpEstablishmentManager *_establisher_;
  NetI2pRouterTransportUdpInboundMessageFragments *_inbound_;
  NetI2pRouterTransportUdpPeerTestManager *_testManager_;
  NetI2pRouterTransportUdpIntroductionManager *_introManager_;
  volatile_jboolean _keepReading_;
  IOSObjectArray *_handlers_;
  id<JavaUtilMap> _failCache_;
  id<JavaUtilConcurrentBlockingQueue> _inboundQueue_;
}

- (void)stopQueue;

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _establisher_, NetI2pRouterTransportUdpEstablishmentManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _inbound_, NetI2pRouterTransportUdpInboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _testManager_, NetI2pRouterTransportUdpPeerTestManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _introManager_, NetI2pRouterTransportUdpIntroductionManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _handlers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _failCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler, _inboundQueue_, id<JavaUtilConcurrentBlockingQueue>)

inline id NetI2pRouterTransportUdpPacketHandler_get_DUMMY(void);
static id NetI2pRouterTransportUdpPacketHandler_DUMMY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpPacketHandler, DUMMY, id)

inline jint NetI2pRouterTransportUdpPacketHandler_get_TYPE_POISON(void);
#define NetI2pRouterTransportUdpPacketHandler_TYPE_POISON -99999
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, TYPE_POISON, jint)

inline jint NetI2pRouterTransportUdpPacketHandler_get_MIN_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpPacketHandler_MIN_QUEUE_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, MIN_QUEUE_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketHandler_get_MAX_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpPacketHandler_MAX_QUEUE_SIZE 192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, MAX_QUEUE_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketHandler_get_MIN_NUM_HANDLERS(void);
#define NetI2pRouterTransportUdpPacketHandler_MIN_NUM_HANDLERS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, MIN_NUM_HANDLERS, jint)

inline jint NetI2pRouterTransportUdpPacketHandler_get_MAX_NUM_HANDLERS(void);
#define NetI2pRouterTransportUdpPacketHandler_MAX_NUM_HANDLERS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, MAX_NUM_HANDLERS, jint)

inline jlong NetI2pRouterTransportUdpPacketHandler_get_GRACE_PERIOD(void);
#define NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD 90000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, GRACE_PERIOD, jlong)

inline jlong NetI2pRouterTransportUdpPacketHandler_get_MAX_SKEW(void);
#define NetI2pRouterTransportUdpPacketHandler_MAX_SKEW 7776000000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, MAX_SKEW, jlong)

inline jshort NetI2pRouterTransportUdpPacketHandler_get_OUTBOUND_FALLBACK(void);
#define NetI2pRouterTransportUdpPacketHandler_OUTBOUND_FALLBACK 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, OUTBOUND_FALLBACK, jshort)

inline jshort NetI2pRouterTransportUdpPacketHandler_get_INBOUND_FALLBACK(void);
#define NetI2pRouterTransportUdpPacketHandler_INBOUND_FALLBACK 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, INBOUND_FALLBACK, jshort)

inline jshort NetI2pRouterTransportUdpPacketHandler_get_NEW_PEER(void);
#define NetI2pRouterTransportUdpPacketHandler_NEW_PEER 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketHandler, NEW_PEER, jshort)

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_stopQueue(NetI2pRouterTransportUdpPacketHandler *self);

__attribute__((unused)) static NSString *NetI2pRouterTransportUdpPacketHandler__xWithNSString_(NSString *s);

typedef NS_ENUM(NSUInteger, NetI2pRouterTransportUdpPacketHandler_AuthType_Enum) {
  NetI2pRouterTransportUdpPacketHandler_AuthType_Enum_NONE = 0,
  NetI2pRouterTransportUdpPacketHandler_AuthType_Enum_INTRO = 1,
  NetI2pRouterTransportUdpPacketHandler_AuthType_Enum_BOBINTRO = 2,
  NetI2pRouterTransportUdpPacketHandler_AuthType_Enum_SESSION = 3,
};

@interface NetI2pRouterTransportUdpPacketHandler_AuthType : JavaLangEnum

@property (readonly, class, nonnull) NetI2pRouterTransportUdpPacketHandler_AuthType *NONE NS_SWIFT_NAME(NONE);
@property (readonly, class, nonnull) NetI2pRouterTransportUdpPacketHandler_AuthType *INTRO NS_SWIFT_NAME(INTRO);
@property (readonly, class, nonnull) NetI2pRouterTransportUdpPacketHandler_AuthType *BOBINTRO NS_SWIFT_NAME(BOBINTRO);
@property (readonly, class, nonnull) NetI2pRouterTransportUdpPacketHandler_AuthType *SESSION NS_SWIFT_NAME(SESSION);
+ (IOSObjectArray *)values;

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)valueOfWithNSString:(NSString *)name;

- (NetI2pRouterTransportUdpPacketHandler_AuthType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportUdpPacketHandler_AuthType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_values_[];

inline NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_get_NONE(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPacketHandler_AuthType, NONE)

inline NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_get_INTRO(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPacketHandler_AuthType, INTRO)

inline NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_get_BOBINTRO(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)

inline NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_get_SESSION(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_AuthType_initWithNSString_withInt_(NetI2pRouterTransportUdpPacketHandler_AuthType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPacketHandler_AuthType_values(void);

__attribute__((unused)) static NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPacketHandler_AuthType)

@interface NetI2pRouterTransportUdpPacketHandler_Handler : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpPacketHandler *this$0_;
  NetI2pRouterTransportUdpUDPPacketReader *_reader_;
  jint _state_;
}

- (instancetype)initWithNetI2pRouterTransportUdpPacketHandler:(NetI2pRouterTransportUdpPacketHandler *)outer$;

- (void)run;

- (void)handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                          withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet;

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                           withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)state;

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                                       withShort:(jshort)peerType;

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
               withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state;

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
               withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state
                                                     withBoolean:(jboolean)allowFallback;

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
              withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (void)handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                          withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                          withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)state
             withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)outState
              withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)inState
             withNetI2pRouterTransportUdpPacketHandler_AuthType:(NetI2pRouterTransportUdpPacketHandler_AuthType *)auth;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPacketHandler_Handler)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketHandler_Handler, _reader_, NetI2pRouterTransportUdpUDPPacketReader *)

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpPacketHandler *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpPacketHandler_Handler *new_NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpPacketHandler_Handler *create_NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler *outer$);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpPeerState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, jshort peerType);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpInboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_withBoolean_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpInboundEstablishState *state, jboolean allowFallback);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpPeerState *state, NetI2pRouterTransportUdpOutboundEstablishState *outState, NetI2pRouterTransportUdpInboundEstablishState *inState, NetI2pRouterTransportUdpPacketHandler_AuthType *auth);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPacketHandler_Handler)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpPacketHandler)

@implementation NetI2pRouterTransportUdpPacketHandler

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
 withNetI2pRouterTransportUdpEstablishmentManager:(NetI2pRouterTransportUdpEstablishmentManager *)establisher
withNetI2pRouterTransportUdpInboundMessageFragments:(NetI2pRouterTransportUdpInboundMessageFragments *)inbound
      withNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)testManager
  withNetI2pRouterTransportUdpIntroductionManager:(NetI2pRouterTransportUdpIntroductionManager *)introManager {
  NetI2pRouterTransportUdpPacketHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_(self, ctx, transport, establisher, inbound, testManager, introManager);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_keepReading_, true);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(_handlers_))->size_; i++) {
      NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(IOSObjectArray_Get(_handlers_, i), JreStrcat("$ICI", @"UDP Packet handler ", (i + 1), '/', _handlers_->size_), true);
      [t start];
    }
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_keepReading_, false);
    NetI2pRouterTransportUdpPacketHandler_stopQueue(self);
  }
}

- (NSString *)getHandlerStatus {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Handlers: "])) appendWithInt:((IOSObjectArray *) nil_chk(_handlers_))->size_];
  for (jint i = 0; i < _handlers_->size_; i++) {
    NetI2pRouterTransportUdpPacketHandler_Handler *handler = IOSObjectArray_Get(_handlers_, i);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@" handler "])) appendWithInt:i])) appendWithNSString:@" state: "])) appendWithInt:((NetI2pRouterTransportUdpPacketHandler_Handler *) nil_chk(handler))->_state_];
  }
  return [rv description];
}

- (void)queueReceivedWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_inboundQueue_)) putWithId:packet];
}

- (void)stopQueue {
  NetI2pRouterTransportUdpPacketHandler_stopQueue(self);
}

- (NetI2pRouterTransportUdpUDPPacket *)receiveNext {
  NetI2pRouterTransportUdpUDPPacket *rv = nil;
  while (JreLoadVolatileBoolean(&_keepReading_) && rv == nil) {
    @try {
      rv = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_inboundQueue_)) take];
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    if (rv != nil && [rv getMessageType] == NetI2pRouterTransportUdpPacketHandler_TYPE_POISON) return nil;
  }
  return rv;
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTransportUdpPacketHandler__xWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_establisher_);
  RELEASE_(_inbound_);
  RELEASE_(_testManager_);
  RELEASE_(_introManager_);
  RELEASE_(_handlers_);
  RELEASE_(_failCache_);
  RELEASE_(_inboundQueue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withNetI2pRouterTransportUdpEstablishmentManager:withNetI2pRouterTransportUdpInboundMessageFragments:withNetI2pRouterTransportUdpPeerTestManager:withNetI2pRouterTransportUdpIntroductionManager:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getHandlerStatus);
  methods[4].selector = @selector(queueReceivedWithNetI2pRouterTransportUdpUDPPacket:);
  methods[5].selector = @selector(stopQueue);
  methods[6].selector = @selector(receiveNext);
  methods[7].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_establisher_", "LNetI2pRouterTransportUdpEstablishmentManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inbound_", "LNetI2pRouterTransportUdpInboundMessageFragments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_testManager_", "LNetI2pRouterTransportUdpPeerTestManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_introManager_", "LNetI2pRouterTransportUdpIntroductionManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_keepReading_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_handlers_", "[LNetI2pRouterTransportUdpPacketHandler_Handler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_failCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "_inboundQueue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "DUMMY", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "TYPE_POISON", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketHandler_TYPE_POISON, 0x1a, -1, -1, -1, -1 },
    { "MIN_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketHandler_MIN_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketHandler_MAX_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MIN_NUM_HANDLERS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketHandler_MIN_NUM_HANDLERS, 0x1a, -1, -1, -1, -1 },
    { "MAX_NUM_HANDLERS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketHandler_MAX_NUM_HANDLERS, 0x1a, -1, -1, -1, -1 },
    { "GRACE_PERIOD", "J", .constantValue.asLong = NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD, 0x1a, -1, -1, -1, -1 },
    { "MAX_SKEW", "J", .constantValue.asLong = NetI2pRouterTransportUdpPacketHandler_MAX_SKEW, 0x1a, -1, -1, -1, -1 },
    { "OUTBOUND_FALLBACK", "S", .constantValue.asShort = NetI2pRouterTransportUdpPacketHandler_OUTBOUND_FALLBACK, 0x1a, -1, -1, -1, -1 },
    { "INBOUND_FALLBACK", "S", .constantValue.asShort = NetI2pRouterTransportUdpPacketHandler_INBOUND_FALLBACK, 0x1a, -1, -1, -1, -1 },
    { "NEW_PEER", "S", .constantValue.asShort = NetI2pRouterTransportUdpPacketHandler_NEW_PEER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;LNetI2pRouterTransportUdpEstablishmentManager;LNetI2pRouterTransportUdpInboundMessageFragments;LNetI2pRouterTransportUdpPeerTestManager;LNetI2pRouterTransportUdpIntroductionManager;", "queueReceived", "LNetI2pRouterTransportUdpUDPPacket;", "LJavaLangInterruptedException;", "_x", "LNSString;", "Ljava/util/Map<Lnet/i2p/router/transport/udp/RemoteHostId;Ljava/lang/Object;>;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/transport/udp/UDPPacket;>;", &NetI2pRouterTransportUdpPacketHandler_DUMMY, "LNetI2pRouterTransportUdpPacketHandler_AuthType;LNetI2pRouterTransportUdpPacketHandler_Handler;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketHandler = { "PacketHandler", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 8, 22, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPacketHandler;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpPacketHandler class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpPacketHandler_DUMMY, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpPacketHandler)
  }
}

@end

void NetI2pRouterTransportUdpPacketHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_(NetI2pRouterTransportUdpPacketHandler *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, NetI2pRouterTransportUdpEstablishmentManager *establisher, NetI2pRouterTransportUdpInboundMessageFragments *inbound, NetI2pRouterTransportUdpPeerTestManager *testManager, NetI2pRouterTransportUdpIntroductionManager *introManager) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPacketHandler_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_establisher_, establisher);
  JreStrongAssign(&self->_inbound_, inbound);
  JreStrongAssign(&self->_testManager_, testManager);
  JreStrongAssign(&self->_introManager_, introManager);
  JreStrongAssignAndConsume(&self->_failCache_, new_NetI2pUtilLHMCache_initWithInt_(24));
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint qsize = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pRouterTransportUdpPacketHandler_MIN_QUEUE_SIZE, JavaLangMath_minWithLong_withLong_(NetI2pRouterTransportUdpPacketHandler_MAX_QUEUE_SIZE, maxMemory / (2 * 1024 * 1024)));
  JreStrongAssignAndConsume(&self->_inboundQueue_, new_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(ctx, @"UDP-Receiver", qsize));
  jint num_handlers;
  if (maxMemory < 32 * 1024 * 1024) num_handlers = 1;
  else if (maxMemory < 64 * 1024 * 1024) num_handlers = 2;
  else num_handlers = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpPacketHandler_MIN_NUM_HANDLERS, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPacketHandler_MAX_NUM_HANDLERS, [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([ctx bandwidthLimiter])) getInboundKBytesPerSecond] / 20));
  JreStrongAssignAndConsume(&self->_handlers_, [IOSObjectArray newArrayWithLength:num_handlers type:NetI2pRouterTransportUdpPacketHandler_Handler_class_()]);
  for (jint i = 0; i < num_handlers; i++) {
    IOSObjectArray_SetAndConsume(self->_handlers_, i, new_NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(self));
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.handleTime" withNSString:@"How long it takes to handle a received packet after its been pulled off the queue" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.queueTime" withNSString:@"How long after a packet is received can we begin handling it" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePacketSkew" withNSString:@"How long ago after the packet was sent did we receive it" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidUnkown" withNSString:@"How old the packet we dropped due to invalidity (unkown type) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidReestablish" withNSString:@"How old the packet we dropped due to invalidity (doesn't use existing key, not an establishment) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidEstablish" withNSString:@"How old the packet we dropped due to invalidity (establishment, bad key) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidEstablish.inbound" withNSString:@"How old the packet we dropped due to invalidity (even though we have an active inbound establishment with the peer) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidEstablish.outbound" withNSString:@"How old the packet we dropped due to invalidity (even though we have an active outbound establishment with the peer) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidEstablish.new" withNSString:@"How old the packet we dropped due to invalidity (even though we do not have any active establishment with the peer) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidInboundEstablish" withNSString:@"How old the packet we dropped due to invalidity (inbound establishment, bad key) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedInvalidSkew" withNSString:@"How skewed the packet we dropped due to invalidity (valid except bad skew) was" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.destroyedInvalidSkew" withNSString:@"Destroyed session due to bad skew" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePacketSize.dataKnown" withNSString:@"Packet size of the given inbound packet type (period is the packet's lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePacketSize.dataKnownAck" withNSString:@"Packet size of the given inbound packet type (period is the packet's lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePacketSize.dataUnknown" withNSString:@"Packet size of the given inbound packet type (period is the packet's lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePacketSize.dataUnknownAck" withNSString:@"Packet size of the given inbound packet type (period is the packet's lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpPacketHandler *new_NetI2pRouterTransportUdpPacketHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, NetI2pRouterTransportUdpEstablishmentManager *establisher, NetI2pRouterTransportUdpInboundMessageFragments *inbound, NetI2pRouterTransportUdpPeerTestManager *testManager, NetI2pRouterTransportUdpIntroductionManager *introManager) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPacketHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_, ctx, transport, establisher, inbound, testManager, introManager)
}

NetI2pRouterTransportUdpPacketHandler *create_NetI2pRouterTransportUdpPacketHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, NetI2pRouterTransportUdpEstablishmentManager *establisher, NetI2pRouterTransportUdpInboundMessageFragments *inbound, NetI2pRouterTransportUdpPeerTestManager *testManager, NetI2pRouterTransportUdpIntroductionManager *introManager) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPacketHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_, ctx, transport, establisher, inbound, testManager, introManager)
}

void NetI2pRouterTransportUdpPacketHandler_stopQueue(NetI2pRouterTransportUdpPacketHandler *self) {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->_inboundQueue_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->_handlers_))->size_; i++) {
    NetI2pRouterTransportUdpUDPPacket *poison = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(self->_context_, false);
    [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(poison)) setMessageTypeWithInt:NetI2pRouterTransportUdpPacketHandler_TYPE_POISON];
    [self->_inboundQueue_ offerWithId:poison];
  }
  for (jint i = 1; i <= 5 && ![self->_inboundQueue_ isEmpty]; i++) {
    @try {
      JavaLangThread_sleepWithLong_(i * 50);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  [self->_inboundQueue_ clear];
}

NSString *NetI2pRouterTransportUdpPacketHandler__xWithNSString_(NSString *s) {
  NetI2pRouterTransportUdpPacketHandler_initialize();
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketHandler)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpPacketHandler_AuthType)

NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_values_[4];

@implementation NetI2pRouterTransportUdpPacketHandler_AuthType

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)NONE {
  return JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, NONE);
}

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)INTRO {
  return JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, INTRO);
}

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)BOBINTRO {
  return JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO);
}

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)SESSION {
  return JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportUdpPacketHandler_AuthType_values();
}

+ (NetI2pRouterTransportUdpPacketHandler_AuthType *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportUdpPacketHandler_AuthType_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportUdpPacketHandler_AuthType_Enum)toNSEnum {
  return (NetI2pRouterTransportUdpPacketHandler_AuthType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportUdpPacketHandler_AuthType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPacketHandler_AuthType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LNetI2pRouterTransportUdpPacketHandler_AuthType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INTRO", "LNetI2pRouterTransportUdpPacketHandler_AuthType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BOBINTRO", "LNetI2pRouterTransportUdpPacketHandler_AuthType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "SESSION", "LNetI2pRouterTransportUdpPacketHandler_AuthType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, NONE), &JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, INTRO), &JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO), &JreEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION), "LNetI2pRouterTransportUdpPacketHandler;", "Ljava/lang/Enum<Lnet/i2p/router/transport/udp/PacketHandler$AuthType;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketHandler_AuthType = { "AuthType", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pRouterTransportUdpPacketHandler_AuthType;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpPacketHandler_AuthType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pRouterTransportUdpPacketHandler_AuthType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportUdpPacketHandler_AuthType_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportUdpPacketHandler_AuthType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpPacketHandler_AuthType)
  }
}

@end

void NetI2pRouterTransportUdpPacketHandler_AuthType_initWithNSString_withInt_(NetI2pRouterTransportUdpPacketHandler_AuthType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportUdpPacketHandler_AuthType_values() {
  NetI2pRouterTransportUdpPacketHandler_AuthType_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportUdpPacketHandler_AuthType_values_ count:4 type:NetI2pRouterTransportUdpPacketHandler_AuthType_class_()];
}

NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportUdpPacketHandler_AuthType_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pRouterTransportUdpPacketHandler_AuthType *e = NetI2pRouterTransportUdpPacketHandler_AuthType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportUdpPacketHandler_AuthType *NetI2pRouterTransportUdpPacketHandler_AuthType_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportUdpPacketHandler_AuthType_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pRouterTransportUdpPacketHandler_AuthType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketHandler_AuthType)

@implementation NetI2pRouterTransportUdpPacketHandler_Handler

- (instancetype)initWithNetI2pRouterTransportUdpPacketHandler:(NetI2pRouterTransportUdpPacketHandler *)outer$ {
  NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(self, outer$);
  return self;
}

- (void)run {
  _state_ = 1;
  while (JreLoadVolatileBoolean(&this$0_->_keepReading_)) {
    _state_ = 2;
    NetI2pRouterTransportUdpUDPPacket *packet = [this$0_ receiveNext];
    _state_ = 3;
    if (packet == nil) break;
    [packet received];
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Received: ", packet)];
    _state_ = 4;
    jlong queueTime = [packet getLifetime];
    jlong handleStart = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
    @try {
      _state_ = 5;
      NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_(self, _reader_, packet);
      _state_ = 6;
    }
    @catch (JavaLangRuntimeException *e) {
      _state_ = 7;
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [this$0_->_log_ errorWithNSString:JreStrcat("$@", @"Crazy error handling a packet: ", packet) withJavaLangThrowable:e];
    }
    jlong handleTime = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - handleStart;
    [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.handleTime" withLong:handleTime withLong:[packet getLifetime]];
    [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.queueTime" withLong:queueTime withLong:[packet getLifetime]];
    _state_ = 8;
    [packet release__];
    _state_ = 9;
  }
}

- (void)handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                          withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_(self, reader, packet);
}

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                           withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)state {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_(self, reader, packet, state);
}

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                                       withShort:(jshort)peerType {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(self, reader, packet, peerType);
}

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
               withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_(self, reader, packet, state);
}

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
               withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state
                                                     withBoolean:(jboolean)allowFallback {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_withBoolean_(self, reader, packet, state, allowFallback);
}

- (void)receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                           withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
              withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpOutboundEstablishState_(self, reader, packet, state);
}

- (void)handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader
                          withNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                          withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)state
             withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)outState
              withNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)inState
             withNetI2pRouterTransportUdpPacketHandler_AuthType:(NetI2pRouterTransportUdpPacketHandler_AuthType *)auth {
  NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, state, outState, inState, auth);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpPacketHandler:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:);
  methods[3].selector = @selector(receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withNetI2pRouterTransportUdpPeerState:);
  methods[4].selector = @selector(receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withShort:);
  methods[5].selector = @selector(receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withNetI2pRouterTransportUdpInboundEstablishState:);
  methods[6].selector = @selector(receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withNetI2pRouterTransportUdpInboundEstablishState:withBoolean:);
  methods[7].selector = @selector(receivePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[8].selector = @selector(handlePacketWithNetI2pRouterTransportUdpUDPPacketReader:withNetI2pRouterTransportUdpUDPPacket:withNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpOutboundEstablishState:withNetI2pRouterTransportUdpInboundEstablishState:withNetI2pRouterTransportUdpPacketHandler_AuthType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpPacketHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_reader_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_state_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "handlePacket", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;", "receivePacket", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;LNetI2pRouterTransportUdpPeerState;", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;S", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;LNetI2pRouterTransportUdpInboundEstablishState;", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;LNetI2pRouterTransportUdpInboundEstablishState;Z", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;LNetI2pRouterTransportUdpOutboundEstablishState;", "LNetI2pRouterTransportUdpUDPPacketReader;LNetI2pRouterTransportUdpUDPPacket;LNetI2pRouterTransportUdpPeerState;LNetI2pRouterTransportUdpOutboundEstablishState;LNetI2pRouterTransportUdpInboundEstablishState;LNetI2pRouterTransportUdpPacketHandler_AuthType;", "LNetI2pRouterTransportUdpPacketHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketHandler_Handler = { "Handler", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 9, 3, 9, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPacketHandler_Handler;
}

@end

void NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpPacketHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_reader_, new_NetI2pRouterTransportUdpUDPPacketReader_initWithNetI2pI2PAppContext_(outer$->_context_));
}

NetI2pRouterTransportUdpPacketHandler_Handler *new_NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPacketHandler_Handler, initWithNetI2pRouterTransportUdpPacketHandler_, outer$)
}

NetI2pRouterTransportUdpPacketHandler_Handler *create_NetI2pRouterTransportUdpPacketHandler_Handler_initWithNetI2pRouterTransportUdpPacketHandler_(NetI2pRouterTransportUdpPacketHandler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPacketHandler_Handler, initWithNetI2pRouterTransportUdpPacketHandler_, outer$)
}

void NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet) {
  self->_state_ = 10;
  NetI2pRouterTransportUdpRemoteHostId *rem = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getRemoteHost];
  NetI2pRouterTransportUdpPeerState *state = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:rem];
  if (state == nil) {
    self->_state_ = 11;
    NetI2pRouterTransportUdpInboundEstablishState *est = [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) getInboundStateWithNetI2pRouterTransportUdpRemoteHostId:rem];
    if (est != nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Packet received IS for an inbound establishment"];
      self->_state_ = 12;
      NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_(self, reader, packet, est);
    }
    else {
      self->_state_ = 13;
      NetI2pRouterTransportUdpOutboundEstablishState *oest = [self->this$0_->_establisher_ getOutboundStateWithNetI2pRouterTransportUdpRemoteHostId:rem];
      if (oest != nil) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Packet received IS for an outbound establishment"];
        self->_state_ = 14;
        NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpOutboundEstablishState_(self, reader, packet, oest);
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Packet received is not for an inbound or outbound establishment"];
        self->_state_ = 15;
        NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(self, reader, packet, NetI2pRouterTransportUdpPacketHandler_NEW_PEER);
      }
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Packet received IS for an existing peer"];
    self->_state_ = 16;
    NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_(self, reader, packet, state);
  }
}

void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpPeerState *state) {
  self->_state_ = 17;
  NetI2pRouterTransportUdpPacketHandler_AuthType *auth = JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, NONE);
  jboolean isValid = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) validateWithNetI2pDataSessionKey:[((NetI2pRouterTransportUdpPeerState *) nil_chk(state)) getCurrentMACKey]];
  if (!isValid) {
    self->_state_ = 18;
    if ([state getNextMACKey] != nil) isValid = [packet validateWithNetI2pDataSessionKey:[state getNextMACKey]];
    if (!isValid) {
      self->_state_ = 19;
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Failed validation with existing con, trying as new con: ", packet)];
      isValid = [packet validateWithNetI2pDataSessionKey:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) getIntroKey]];
      if (isValid) {
        self->_state_ = 20;
        if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Validation with existing con failed, but validation as reestablish/stray passed"];
        [packet decryptWithNetI2pDataSessionKey:[self->this$0_->_transport_ getIntroKey]];
        auth = JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, INTRO);
      }
      else {
        self->_state_ = 21;
        NetI2pRouterTransportUdpInboundEstablishState *est = [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) getInboundStateWithNetI2pRouterTransportUdpRemoteHostId:[packet getRemoteHost]];
        if (est != nil) {
          if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:@"Packet from an existing peer IS for an inbound establishment"];
          self->_state_ = 22;
          NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_withBoolean_(self, reader, packet, est, false);
        }
        else {
          if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Validation with existing con failed, and validation as reestablish failed too.  DROP ", packet)];
          [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"udp.droppedInvalidReestablish" withLong:[packet getLifetime]];
        }
        return;
      }
    }
    else {
      self->_state_ = 23;
      [packet decryptWithNetI2pDataSessionKey:[state getNextCipherKey]];
      auth = JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION);
    }
  }
  else {
    self->_state_ = 24;
    [packet decryptWithNetI2pDataSessionKey:[state getCurrentCipherKey]];
    auth = JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION);
  }
  self->_state_ = 25;
  NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, state, nil, nil, auth);
  self->_state_ = 26;
}

void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, jshort peerType) {
  self->_state_ = 27;
  jboolean isValid = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) validateWithNetI2pDataSessionKey:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) getIntroKey]];
  if (!isValid) {
    NetI2pRouterTransportUdpRemoteHostId *remoteHost = [packet getRemoteHost];
    jboolean alreadyFailed;
    @synchronized(self->this$0_->_failCache_) {
      alreadyFailed = ([((id<JavaUtilMap>) nil_chk(self->this$0_->_failCache_)) getWithId:remoteHost] != nil);
    }
    if (!alreadyFailed) {
      id<JavaUtilList> peers = [self->this$0_->_transport_ getPeerStatesByIPWithNetI2pRouterTransportUdpRemoteHostId:remoteHost];
      if (![((id<JavaUtilList>) nil_chk(peers)) isEmpty]) {
        JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
        [buf appendWithNSString:@"Established peers with this IP: "];
        jboolean foundSamePort = false;
        NetI2pRouterTransportUdpPeerState *state = nil;
        jint newPort = [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(remoteHost)) getPort];
        for (NetI2pRouterTransportUdpPeerState * __strong ps in peers) {
          jboolean valid = false;
          jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now];
          if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([((NetI2pRouterTransportUdpPeerState *) nil_chk(ps)) getRemoteHostId])) description]])) appendWithNSString:@" last sent: "])) appendWithLong:now - [ps getLastSendTime]])) appendWithNSString:@" last rcvd: "])) appendWithLong:now - [ps getLastReceiveTime]];
          if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(ps)) getRemotePort] == newPort) {
            foundSamePort = true;
          }
          else if ([packet validateWithNetI2pDataSessionKey:[ps getCurrentMACKey]]) {
            [packet decryptWithNetI2pDataSessionKey:[ps getCurrentCipherKey]];
            [((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) initialize__WithNetI2pRouterTransportUdpUDPPacket:packet];
            if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" VALID type "])) appendWithInt:[reader readPayloadType]])) appendWithNSString:@"; "];
            valid = true;
            if (state == nil) state = ps;
          }
          else {
            if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [buf appendWithNSString:@" INVALID; "];
          }
        }
        if (state != nil && !foundSamePort) {
          [self->this$0_->_transport_ changePeerPortWithNetI2pRouterTransportUdpPeerState:state withInt:newPort];
          if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
            [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" CHANGED PORT TO "])) appendWithInt:newPort])) appendWithNSString:@" AND HANDLED"];
            [self->this$0_->_log_ warnWithNSString:[buf description]];
          }
          NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, state, nil, nil, JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION));
          return;
        }
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:[buf description]];
      }
      @synchronized(self->this$0_->_failCache_) {
        [self->this$0_->_failCache_ putWithId:remoteHost withId:JreLoadStatic(NetI2pRouterTransportUdpPacketHandler, DUMMY)];
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$Z$@", @"Cannot validate rcvd pkt (path) wasCached? ", alreadyFailed, @": ", packet)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"udp.droppedInvalidEstablish" withLong:[packet getLifetime]];
    switch (peerType) {
      case NetI2pRouterTransportUdpPacketHandler_INBOUND_FALLBACK:
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidEstablish.inbound" withLong:[packet getLifetime] withLong:[packet getTimeSinceReceived]];
      break;
      case NetI2pRouterTransportUdpPacketHandler_OUTBOUND_FALLBACK:
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidEstablish.outbound" withLong:[packet getLifetime] withLong:[packet getTimeSinceReceived]];
      break;
      case NetI2pRouterTransportUdpPacketHandler_NEW_PEER:
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidEstablish.new" withLong:[packet getLifetime] withLong:[packet getTimeSinceReceived]];
      break;
    }
    self->_state_ = 28;
    return;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Valid introduction packet received: ", packet)];
  }
  self->_state_ = 29;
  [packet decryptWithNetI2pDataSessionKey:[self->this$0_->_transport_ getIntroKey]];
  NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, nil, nil, nil, JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, INTRO));
  self->_state_ = 30;
}

void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpInboundEstablishState *state) {
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_withBoolean_(self, reader, packet, state, true);
}

void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpInboundEstablishState_withBoolean_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpInboundEstablishState *state, jboolean allowFallback) {
  self->_state_ = 31;
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [buf appendWithNSString:@"Attempting to receive a packet on a known inbound state: "];
    [buf appendWithId:state];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" MAC key: "])) appendWithId:[((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) getMACKey]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" intro key: "])) appendWithId:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) getIntroKey]];
    [self->this$0_->_log_ debugWithNSString:[buf description]];
  }
  jboolean isValid = false;
  if ([((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) getMACKey] != nil) {
    isValid = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) validateWithNetI2pDataSessionKey:[state getMACKey]];
    if (isValid) {
      if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Valid introduction packet received for inbound con: ", packet)];
      self->_state_ = 32;
      [packet decryptWithNetI2pDataSessionKey:[state getCipherKey]];
      NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, nil, nil, nil, JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION));
      return;
    }
    else {
      if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Invalid introduction packet received for inbound con, falling back: ", packet)];
      self->_state_ = 33;
    }
  }
  if (allowFallback) {
    self->_state_ = 34;
    NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(self, reader, packet, NetI2pRouterTransportUdpPacketHandler_INBOUND_FALLBACK);
  }
  else {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"udp.droppedInvalidInboundEstablish" withLong:[((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getLifetime]];
  }
}

void NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  self->_state_ = 35;
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [buf appendWithNSString:@"Attempting to receive a packet on a known outbound state: "];
    [buf appendWithId:state];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" MAC key: "])) appendWithId:[((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getMACKey]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" intro key: "])) appendWithId:[state getIntroKey]];
    [self->this$0_->_log_ debugWithNSString:[buf description]];
  }
  jboolean isValid = false;
  if ([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getMACKey] != nil) {
    self->_state_ = 36;
    isValid = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) validateWithNetI2pDataSessionKey:[state getMACKey]];
    if (isValid) {
      if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Valid introduction packet received for outbound established con: ", packet)];
      self->_state_ = 37;
      [packet decryptWithNetI2pDataSessionKey:[state getCipherKey]];
      NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, nil, state, nil, JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION));
      self->_state_ = 38;
      return;
    }
  }
  isValid = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) validateWithNetI2pDataSessionKey:[state getIntroKey]];
  if (isValid) {
    if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@$@", @"Valid packet received for ", state, @" with Bob's intro key: ", packet)];
    self->_state_ = 39;
    [packet decryptWithNetI2pDataSessionKey:[state getIntroKey]];
    NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(self, reader, packet, nil, state, nil, JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO));
    self->_state_ = 40;
    return;
  }
  else {
    if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Invalid introduction packet received for outbound established con with old intro key, falling back: ", packet)];
  }
  self->_state_ = 41;
  NetI2pRouterTransportUdpPacketHandler_Handler_receivePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withShort_(self, reader, packet, NetI2pRouterTransportUdpPacketHandler_OUTBOUND_FALLBACK);
  self->_state_ = 42;
}

void NetI2pRouterTransportUdpPacketHandler_Handler_handlePacketWithNetI2pRouterTransportUdpUDPPacketReader_withNetI2pRouterTransportUdpUDPPacket_withNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpOutboundEstablishState_withNetI2pRouterTransportUdpInboundEstablishState_withNetI2pRouterTransportUdpPacketHandler_AuthType_(NetI2pRouterTransportUdpPacketHandler_Handler *self, NetI2pRouterTransportUdpUDPPacketReader *reader, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pRouterTransportUdpPeerState *state, NetI2pRouterTransportUdpOutboundEstablishState *outState, NetI2pRouterTransportUdpInboundEstablishState *inState, NetI2pRouterTransportUdpPacketHandler_AuthType *auth) {
  self->_state_ = 43;
  [((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) initialize__WithNetI2pRouterTransportUdpUDPPacket:packet];
  self->_state_ = 44;
  jlong recvOn = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getBegin];
  jlong sendOn = [reader readTimestamp] * 1000;
  jlong skew = recvOn - sendOn;
  jint type = [reader readPayloadType];
  jboolean typeOK = type <= NetI2pRouterTransportUdpUDPPacket_MAX_PAYLOAD_TYPE;
  jboolean skewOK = skew < NetI2pRouterTransportUdpPacketHandler_MAX_SKEW && skew > (0 - NetI2pRouterTransportUdpPacketHandler_MAX_SKEW) && typeOK;
  if (state != nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$$$J", @"Received packet from ", [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([state getRemoteHostId])) description], @" with skew ", skew)];
    if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION) && typeOK && (skewOK || [state getMessagesReceived] <= 0)) [state adjustClockSkewWithLong:skew];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"udp.receivePacketSkew" withLong:skew];
  if (skewOK && ![((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) getUpdatedSuccessfully]) {
    [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) setOffsetWithLong:0 - skew withBoolean:true];
    if (skew != 0) {
      [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"NTP failure, UDP adjusting clock by ", NetI2pDataDataHelper_formatDurationWithLong_(JavaLangMath_absWithLong_(skew)))];
      skew = 0;
    }
  }
  if (skew > NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD) {
    [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidSkew" withLong:skew];
    if (state != nil && skew > 4 * NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD && [state getPacketsReceived] <= 0) {
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) sendDestroyWithNetI2pRouterTransportUdpPeerState:state];
      [self->this$0_->_transport_ dropPeerWithNetI2pRouterTransportUdpPeerState:state withBoolean:true withNSString:@"Clock skew"];
      if ([state getRemotePort] == 65520) {
        [((NetI2pRouterBanlist *) nil_chk([self->this$0_->_context_ banlist])) banlistRouterForeverWithNetI2pDataHash:[state getRemotePeer] withNSString:NetI2pRouterTransportUdpPacketHandler__xWithNSString_(@"Excessive clock skew: {0}") withNSString:NetI2pDataDataHelper_formatDurationWithLong_(skew)];
      }
      else {
        [((NetI2pRouterBanlist *) nil_chk([self->this$0_->_context_ banlist])) banlistRouterWithNSString:NetI2pDataDataHelper_formatDurationWithLong_(skew) withNetI2pDataHash:[state getRemotePeer] withNSString:NetI2pRouterTransportUdpPacketHandler__xWithNSString_(@"Excessive clock skew: {0}")];
      }
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.destroyedInvalidSkew" withLong:skew];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Dropped conn, packet too far in the past: ", create_JavaUtilDate_initWithLong_(sendOn), @": ", packet, @" PeerState: ", state)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Packet too far in the past: ", create_JavaUtilDate_initWithLong_(sendOn), @": ", packet, @" PeerState: ", state)];
    }
    return;
  }
  else if (skew < 0 - NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD) {
    [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidSkew" withLong:0 - skew];
    if (state != nil && skew < 0 - (4 * NetI2pRouterTransportUdpPacketHandler_GRACE_PERIOD) && [state getPacketsReceived] <= 0) {
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->this$0_->_transport_)) sendDestroyWithNetI2pRouterTransportUdpPeerState:state];
      [self->this$0_->_transport_ dropPeerWithNetI2pRouterTransportUdpPeerState:state withBoolean:true withNSString:@"Clock skew"];
      if ([state getRemotePort] == 65520) {
        [((NetI2pRouterBanlist *) nil_chk([self->this$0_->_context_ banlist])) banlistRouterForeverWithNetI2pDataHash:[state getRemotePeer] withNSString:NetI2pRouterTransportUdpPacketHandler__xWithNSString_(@"Excessive clock skew: {0}") withNSString:NetI2pDataDataHelper_formatDurationWithLong_(0 - skew)];
      }
      else {
        [((NetI2pRouterBanlist *) nil_chk([self->this$0_->_context_ banlist])) banlistRouterWithNSString:NetI2pDataDataHelper_formatDurationWithLong_(0 - skew) withNetI2pDataHash:[state getRemotePeer] withNSString:NetI2pRouterTransportUdpPacketHandler__xWithNSString_(@"Excessive clock skew: {0}")];
      }
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.destroyedInvalidSkew" withLong:0 - skew];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Dropped conn, packet too far in the future: ", create_JavaUtilDate_initWithLong_(sendOn), @": ", packet, @" PeerState: ", state)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Packet too far in the future: ", create_JavaUtilDate_initWithLong_(sendOn), @": ", packet, @" PeerState: ", state)];
    }
    return;
  }
  self->_state_ = 45;
  NetI2pRouterTransportUdpRemoteHostId *from = [packet getRemoteHost];
  self->_state_ = 46;
  {
    NetI2pRouterTransportUdpUDPPacketReader_DataReader *dr;
    switch (type) {
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_REQUEST:
      self->_state_ = 47;
      if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionRequestWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_CONFIRMED:
      self->_state_ = 48;
      if (auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionConfirmedWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_CREATED:
      self->_state_ = 49;
      if (auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO) && auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionCreatedWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_DATA:
      self->_state_ = 50;
      if (auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      if (outState != nil) state = [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveDataWithNetI2pRouterTransportUdpOutboundEstablishState:outState];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@$@", @"Received new DATA packet from ", state, @": ", packet)];
      dr = [reader getDataReader];
      if (state != nil) {
        if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
          JavaLangStringBuilder *msg = create_JavaLangStringBuilder_initWithInt_(512);
          [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"Receive "])) appendWithInt:JavaLangSystem_identityHashCodeWithId_(packet)];
          [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" from "])) appendWithNSString:[((NetI2pDataHash *) nil_chk([state getRemotePeer])) toBase64]])) appendWithNSString:@" "])) appendWithId:[state getRemoteHostId]];
          @try {
            jint count = [((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(dr)) readFragmentCount];
            for (jint i = 0; i < count; i++) {
              [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" msg "])) appendWithLong:[dr readMessageIdWithInt:i]];
              [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@":"])) appendWithInt:[dr readMessageFragmentNumWithInt:i]];
              if ([dr readMessageIsLastWithInt:i]) [msg appendWithNSString:@"*"];
            }
          }
          @catch (NetI2pDataDataFormatException *dfe) {
          }
          [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@": "])) appendWithNSString:[dr description]];
          [self->this$0_->_log_ debugWithNSString:[msg description]];
        }
        [((NetI2pRouterTransportUdpInboundMessageFragments *) nil_chk(self->this$0_->_inbound_)) receiveDataWithNetI2pRouterTransportUdpPeerState:state withNetI2pRouterTransportUdpUDPPacketReader_DataReader:dr];
        [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.receivePacketSize.dataKnown" withLong:[((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength] withLong:[packet getLifetime]];
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.receivePacketSize.dataUnknown" withLong:[((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength] withLong:[packet getLifetime]];
      }
      @try {
        if ([((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(dr)) readFragmentCount] <= 0) [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.receivePacketSize.dataUnknownAck" withLong:[((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength] withLong:[packet getLifetime]];
      }
      @catch (NetI2pDataDataFormatException *dfe) {
      }
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_TEST:
      self->_state_ = 51;
      if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@$@", @"Received test packet: ", reader, @" from ", from)];
      [((NetI2pRouterTransportUdpPeerTestManager *) nil_chk(self->this$0_->_testManager_)) receiveTestWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_REQUEST:
      if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@$@", @"Received relay request packet: ", reader, @" from ", from)];
      [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->this$0_->_introManager_)) receiveRelayRequestWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_INTRO:
      if (auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@$@", @"Received relay intro packet: ", reader, @" from ", from)];
      [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->this$0_->_introManager_)) receiveRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_RESPONSE:
      if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
        break;
      }
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@$@", @"Received relay response packet: ", reader, @" from ", from)];
      [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpUDPPacketReader:reader];
      break;
      case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_DESTROY:
      self->_state_ = 53;
      if (auth == JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, BOBINTRO)) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
      }
      else if (auth != JreLoadEnum(NetI2pRouterTransportUdpPacketHandler_AuthType, SESSION)) [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:from];
      else if (outState != nil) [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpOutboundEstablishState:outState];
      else if (state != nil) [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:from withNetI2pRouterTransportUdpPeerState:state];
      else [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->this$0_->_establisher_)) receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:from];
      break;
      default:
      self->_state_ = 52;
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Dropping type ", type, @" auth ", auth, @": ", packet)];
      [((NetI2pStatStatManager *) nil_chk([self->this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.droppedInvalidUnknown" withLong:[packet getLifetime]];
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketHandler_Handler)
