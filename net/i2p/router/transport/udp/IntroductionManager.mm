//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/IntroductionManager.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/InboundEstablishState.h"
#include "net/i2p/router/transport/udp/IntroductionManager.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTransportUdpIntroductionManager () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpPacketBuilder *_builder_;
  id<JavaUtilMap> _outbound_;
  id<JavaUtilSet> _inbound_;
  id<JavaUtilSet> _recentHolePunches_;
  jlong _lastHolePunchClean_;
}

- (NetI2pRouterTransportUdpPeerState *)getWithLong:(jlong)id_;

- (jboolean)isValidWithByteArray:(IOSByteArray *)ip
                         withInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _builder_, NetI2pRouterTransportUdpPacketBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _outbound_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _inbound_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager, _recentHolePunches_, id<JavaUtilSet>)

inline jint NetI2pRouterTransportUdpIntroductionManager_get_MAX_INBOUND(void);
#define NetI2pRouterTransportUdpIntroductionManager_MAX_INBOUND 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpIntroductionManager, MAX_INBOUND, jint)

inline jlong NetI2pRouterTransportUdpIntroductionManager_get_PUNCH_CLEAN_TIME(void);
#define NetI2pRouterTransportUdpIntroductionManager_PUNCH_CLEAN_TIME 5000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpIntroductionManager, PUNCH_CLEAN_TIME, jlong)

inline jint NetI2pRouterTransportUdpIntroductionManager_get_MAX_PUNCHES(void);
#define NetI2pRouterTransportUdpIntroductionManager_MAX_PUNCHES 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpIntroductionManager, MAX_PUNCHES, jint)

inline jlong NetI2pRouterTransportUdpIntroductionManager_get_INTRODUCER_EXPIRATION(void);
#define NetI2pRouterTransportUdpIntroductionManager_INTRODUCER_EXPIRATION 4800000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpIntroductionManager, INTRODUCER_EXPIRATION, jlong)

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState *NetI2pRouterTransportUdpIntroductionManager_getWithLong_(NetI2pRouterTransportUdpIntroductionManager *self, jlong id_);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(NetI2pRouterTransportUdpIntroductionManager *self, IOSByteArray *ip, jint port);

@interface NetI2pRouterTransportUdpIntroductionManager_Introducer : NSObject < JavaLangComparable > {
 @public
  NSString *sip_;
  NSString *sport_;
  NSString *skey_;
  NSString *stag_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)ip
                          withInt:(jint)port
                    withByteArray:(IOSByteArray *)key
                         withLong:(jlong)tag;

- (jint)compareToWithId:(NetI2pRouterTransportUdpIntroductionManager_Introducer *)i;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpIntroductionManager_Introducer)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager_Introducer, sip_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager_Introducer, sport_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager_Introducer, skey_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIntroductionManager_Introducer, stag_, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(NetI2pRouterTransportUdpIntroductionManager_Introducer *self, IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag);

__attribute__((unused)) static NetI2pRouterTransportUdpIntroductionManager_Introducer *new_NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpIntroductionManager_Introducer *create_NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpIntroductionManager_Introducer)

@implementation NetI2pRouterTransportUdpIntroductionManager

+ (jint)MAX_OUTBOUND {
  return NetI2pRouterTransportUdpIntroductionManager_MAX_OUTBOUND;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpIntroductionManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self, ctx, transport);
  return self;
}

- (void)reset {
  [((id<JavaUtilSet>) nil_chk(_inbound_)) clear];
  [((id<JavaUtilMap>) nil_chk(_outbound_)) clear];
}

- (void)addWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if (peer == nil) return;
  if (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_([peer getRemotePort])) return;
  if (((IOSByteArray *) nil_chk([peer getRemoteIP]))->size_ != 4) return;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J$J", @"Adding peer ", [peer getRemoteHostId], @", weRelayToThemAs ", [peer getWeRelayToThemAs], @", theyRelayToUsAs ", [peer getTheyRelayToUsAs])];
  if ([peer getWeRelayToThemAs] > 0) [((id<JavaUtilMap>) nil_chk(_outbound_)) putWithId:JavaLangLong_valueOfWithLong_([peer getWeRelayToThemAs]) withId:peer];
  if ([peer getTheyRelayToUsAs] > 0 && [((id<JavaUtilSet>) nil_chk(_inbound_)) size] < NetI2pRouterTransportUdpIntroductionManager_MAX_INBOUND) {
    [((id<JavaUtilSet>) nil_chk(_inbound_)) addWithId:peer];
  }
}

- (void)removeWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if (peer == nil) return;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J$J", @"removing peer ", [peer getRemoteHostId], @", weRelayToThemAs ", [peer getWeRelayToThemAs], @", theyRelayToUsAs ", [peer getTheyRelayToUsAs])];
  jlong id_ = [peer getWeRelayToThemAs];
  if (id_ > 0) [((id<JavaUtilMap>) nil_chk(_outbound_)) removeWithId:JavaLangLong_valueOfWithLong_(id_)];
  if ([peer getTheyRelayToUsAs] > 0) {
    [((id<JavaUtilSet>) nil_chk(_inbound_)) removeWithId:peer];
  }
}

- (NetI2pRouterTransportUdpPeerState *)getWithLong:(jlong)id_ {
  return NetI2pRouterTransportUdpIntroductionManager_getWithLong_(self, id_);
}

- (jint)pickInboundWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)current
                              withJavaUtilProperties:(JavaUtilProperties *)ssuOptions
                                             withInt:(jint)howMany {
  jint start = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextInt];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I", @"Picking inbound out of ", [((id<JavaUtilSet>) nil_chk(_inbound_)) size])];
  if ([((id<JavaUtilSet>) nil_chk(_inbound_)) isEmpty]) return 0;
  id<JavaUtilList> peers = create_JavaUtilArrayList_initWithJavaUtilCollection_(_inbound_);
  jint sz = [peers size];
  start = start % sz;
  jint found = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
  jlong inactivityCutoff = now - (NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT / 2);
  if (sz <= howMany + 2) inactivityCutoff -= NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT / 4;
  id<JavaUtilList> introducers = create_JavaUtilArrayList_initWithInt_(howMany);
  for (jint i = 0; i < sz && found < howMany; i++) {
    NetI2pRouterTransportUdpPeerState *cur = [peers getWithInt:(start + i) % sz];
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTransportUdpPeerState *) nil_chk(cur)) getRemotePeer]];
    if (ri == nil) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Picked peer has no local routerInfo: ", cur)];
      continue;
    }
    NetI2pDataRouterRouterAddress *ra = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) getTargetAddressWithNetI2pDataRouterRouterInfo:ri];
    if (ra == nil) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Picked peer has no SSU address: ", ri)];
      continue;
    }
    if ([((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) isBanlistedWithNetI2pDataHash:[cur getRemotePeer]] || [_transport_ wasUnreachableWithNetI2pDataHash:[cur getRemotePeer]]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Peer is failing, shistlisted or was unreachable: ", cur)];
      continue;
    }
    if ([cur getLastReceiveTime] < inactivityCutoff && [cur getLastSendTime] < inactivityCutoff) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Peer is idle too long: ", cur)];
      continue;
    }
    IOSByteArray *ip = [cur getRemoteIP];
    jint port = [cur getRemotePort];
    if (!NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(self, ip, port)) continue;
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Picking introducer: ", cur)];
    [cur setIntroducerTime];
    NetI2pRouterTransportUdpUDPAddress *ura = create_NetI2pRouterTransportUdpUDPAddress_initWithNetI2pDataRouterRouterAddress_(ra);
    IOSByteArray *ikey = [ura getIntroKey];
    if (ikey == nil) continue;
    [introducers addWithId:create_NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(ip, port, ikey, [cur getTheyRelayToUsAs])];
    found++;
  }
  JavaUtilCollections_sortWithJavaUtilList_(introducers);
  NSString *exp = JavaLangLong_toStringWithLong_((now + NetI2pRouterTransportUdpIntroductionManager_INTRODUCER_EXPIRATION) / 1000);
  for (jint i = 0; i < found; i++) {
    NetI2pRouterTransportUdpIntroductionManager_Introducer *in = [introducers getWithInt:i];
    [((JavaUtilProperties *) nil_chk(ssuOptions)) setPropertyWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_HOST_PREFIX, i) withNSString:((NetI2pRouterTransportUdpIntroductionManager_Introducer *) nil_chk(in))->sip_];
    [ssuOptions setPropertyWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_PORT_PREFIX, i) withNSString:in->sport_];
    [ssuOptions setPropertyWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_KEY_PREFIX, i) withNSString:in->skey_];
    [ssuOptions setPropertyWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_TAG_PREFIX, i) withNSString:in->stag_];
    NSString *sexp = exp;
    if (current != nil) {
      for (jint j = 0; j < NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT; j++) {
        if ([((NSString *) nil_chk(in->sip_)) isEqual:[current getOptionWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_HOST_PREFIX, j)]] && [((NSString *) nil_chk(in->sport_)) isEqual:[current getOptionWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_PORT_PREFIX, j)]] && [((NSString *) nil_chk(in->skey_)) isEqual:[current getOptionWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_KEY_PREFIX, j)]] && [((NSString *) nil_chk(in->stag_)) isEqual:[current getOptionWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_TAG_PREFIX, j)]]) {
          NSString *oexp = [current getOptionWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_EXP_PREFIX, j)];
          if (oexp != nil) {
            @try {
              jlong oex = JavaLangLong_parseLongWithNSString_(oexp) * 1000;
              if (oex > now + NetI2pRouterTransportUdpUDPTransport_INTRODUCER_EXPIRATION_MARGIN) {
                sexp = oexp;
              }
            }
            @catch (JavaLangNumberFormatException *nfe) {
            }
          }
          break;
        }
      }
    }
    [ssuOptions setPropertyWithNSString:JreStrcat("$I", NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_EXP_PREFIX, i) withNSString:sexp];
  }
  [self pingIntroducers];
  return found;
}

- (void)pingIntroducers {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jlong pingCutoff = now - (105 * 60 * 1000);
  jlong inactivityCutoff = now - NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT;
  for (NetI2pRouterTransportUdpPeerState * __strong cur in nil_chk(_inbound_)) {
    if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(cur)) getIntroducerTime] > pingCutoff && [cur getLastSendTime] < inactivityCutoff) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Pinging introducer: ", cur)];
      [cur setLastSendTimeWithLong:now];
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(_builder_)) buildPingWithNetI2pRouterTransportUdpPeerState:cur]];
    }
  }
}

- (jint)introducerCount {
  return [((id<JavaUtilSet>) nil_chk(_inbound_)) size];
}

- (jint)introducedCount {
  return [((id<JavaUtilMap>) nil_chk(_outbound_)) size];
}

- (void)receiveRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)bob
                      withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isHidden]) return;
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.receiveRelayIntro" withLong:1];
  if (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) allowConnection]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Dropping RelayIntro, over conn limit"];
    return;
  }
  jint ipSize = [((NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *) nil_chk([((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getRelayIntroReader])) readIPSize];
  IOSByteArray *ip = [IOSByteArray arrayWithLength:ipSize];
  [((NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *) nil_chk([reader getRelayIntroReader])) readIPWithByteArray:ip withInt:0];
  jint port = [((NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *) nil_chk([reader getRelayIntroReader])) readPort];
  if ((!NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(self, ip, port)) || (!NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(self, [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(bob)) getIP], [bob getPort]))) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$$", @"Bad relay intro from ", bob, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port))];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$$", @"Receive relay intro from ", bob, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port))];
  JavaNetInetAddress *to = nil;
  @try {
    to = JavaNetInetAddress_getByAddressWithByteArray_(ip);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"IP for alice to hole punch to is invalid" withJavaLangThrowable:uhe];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
    return;
  }
  NetI2pRouterTransportUdpRemoteHostId *alice = create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_(ip, port);
  if ([_transport_ getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:alice] != nil) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Ignoring RelayIntro, already have a session to ", to)];
    return;
  }
  NetI2pRouterTransportUdpEstablishmentManager *establisher = [_transport_ getEstablisher];
  if (establisher != nil) {
    if ([establisher getInboundStateWithNetI2pRouterTransportUdpRemoteHostId:alice] != nil) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Ignoring RelayIntro, establishment in progress to ", to)];
      return;
    }
    if (![establisher shouldAllowInboundEstablishment]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Dropping RelayIntro, too many establishments in progress - for ", to)];
      return;
    }
  }
  jboolean tooMany = false;
  jboolean already = false;
  @synchronized(_recentHolePunches_) {
    jlong now = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
    if (now > _lastHolePunchClean_ + NetI2pRouterTransportUdpIntroductionManager_PUNCH_CLEAN_TIME) {
      [((id<JavaUtilSet>) nil_chk(_recentHolePunches_)) clear];
      _lastHolePunchClean_ = now;
      [_recentHolePunches_ addWithId:to];
    }
    else {
      tooMany = ([((id<JavaUtilSet>) nil_chk(_recentHolePunches_)) size] >= NetI2pRouterTransportUdpIntroductionManager_MAX_PUNCHES);
      if (!tooMany) already = ![_recentHolePunches_ addWithId:to];
    }
  }
  if (tooMany) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Dropping - too many - RelayIntro for ", to)];
    return;
  }
  if (already) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Ignoring dup RelayIntro for ", to)];
    return;
  }
  [_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(_builder_)) buildHolePunchWithJavaNetInetAddress:to withInt:port]];
}

- (void)receiveRelayRequestWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)alice
                        withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isHidden]) return;
  NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *rrReader = [((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getRelayRequestReader];
  jlong tag = [((NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *) nil_chk(rrReader)) readTag];
  jint ipSize = [rrReader readIPSize];
  jint port = [rrReader readPort];
  IOSByteArray *aliceIP = [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(alice)) getIP];
  jint alicePort = [alice getPort];
  if (!NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(self, [alice getIP], [alice getPort])) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@$$", @"Bad relay req from ", alice, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(aliceIP, alicePort))];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
    return;
  }
  if (ipSize != 0) {
    IOSByteArray *ip = [IOSByteArray arrayWithLength:ipSize];
    [rrReader readIPWithByteArray:ip withInt:0];
    if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(aliceIP, ip)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@$$", @"Bad relay req from ", alice, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port))];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
      return;
    }
  }
  if (port != 0 && port != alicePort) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@$$", @"Bad relay req from ", alice, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(aliceIP, port))];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
    return;
  }
  NetI2pRouterTransportUdpPeerState *charlie = NetI2pRouterTransportUdpIntroductionManager_getWithLong_(self, tag);
  if (charlie == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Receive relay request from ", alice, @" with unknown tag")];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.receiveRelayRequestBadTag" withLong:1];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$J$@", @"Receive relay request from ", alice, @" for tag ", tag, @" and relaying with ", charlie)];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.receiveRelayRequest" withLong:1];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(_builder_)) buildRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:alice withNetI2pRouterTransportUdpPeerState:charlie withNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader:[reader getRelayRequestReader]]];
  NetI2pDataSessionKey *cipherKey = nil;
  NetI2pDataSessionKey *macKey = nil;
  NetI2pRouterTransportUdpPeerState *aliceState = [_transport_ getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:alice];
  if (aliceState != nil) {
    cipherKey = [aliceState getCurrentCipherKey];
    macKey = [aliceState getCurrentMACKey];
  }
  if (cipherKey == nil || macKey == nil) {
    IOSByteArray *key = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
    [((NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *) nil_chk([reader getRelayRequestReader])) readAliceIntroKeyWithByteArray:key withInt:0];
    cipherKey = create_NetI2pDataSessionKey_initWithByteArray_(key);
    macKey = cipherKey;
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Sending relay response (w/ intro key) to ", alice)];
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Sending relay response (in-session) to ", alice)];
  }
  [_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:[_builder_ buildRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:alice withNetI2pRouterTransportUdpPeerState:charlie withLong:[((NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *) nil_chk([reader getRelayRequestReader])) readNonce] withNetI2pDataSessionKey:cipherKey withNetI2pDataSessionKey:macKey]];
}

- (jboolean)isValidWithByteArray:(IOSByteArray *)ip
                         withInt:(jint)port {
  return NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(self, ip, port);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_builder_);
  RELEASE_(_outbound_);
  RELEASE_(_inbound_);
  RELEASE_(_recentHolePunches_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(addWithNetI2pRouterTransportUdpPeerState:);
  methods[3].selector = @selector(removeWithNetI2pRouterTransportUdpPeerState:);
  methods[4].selector = @selector(getWithLong:);
  methods[5].selector = @selector(pickInboundWithNetI2pDataRouterRouterAddress:withJavaUtilProperties:withInt:);
  methods[6].selector = @selector(pingIntroducers);
  methods[7].selector = @selector(introducerCount);
  methods[8].selector = @selector(introducedCount);
  methods[9].selector = @selector(receiveRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[10].selector = @selector(receiveRelayRequestWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[11].selector = @selector(isValidWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_builder_", "LNetI2pRouterTransportUdpPacketBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outbound_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_inbound_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "_recentHolePunches_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "_lastHolePunchClean_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_INBOUND", "I", .constantValue.asInt = NetI2pRouterTransportUdpIntroductionManager_MAX_INBOUND, 0x1a, -1, -1, -1, -1 },
    { "MAX_OUTBOUND", "I", .constantValue.asInt = NetI2pRouterTransportUdpIntroductionManager_MAX_OUTBOUND, 0x19, -1, -1, -1, -1 },
    { "PUNCH_CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpIntroductionManager_PUNCH_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_PUNCHES", "I", .constantValue.asInt = NetI2pRouterTransportUdpIntroductionManager_MAX_PUNCHES, 0x1a, -1, -1, -1, -1 },
    { "INTRODUCER_EXPIRATION", "J", .constantValue.asLong = NetI2pRouterTransportUdpIntroductionManager_INTRODUCER_EXPIRATION, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;", "add", "LNetI2pRouterTransportUdpPeerState;", "remove", "get", "J", "pickInbound", "LNetI2pDataRouterRouterAddress;LJavaUtilProperties;I", "receiveRelayIntro", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpUDPPacketReader;", "receiveRelayRequest", "isValid", "[BI", "Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/Set<Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/Set<Ljava/net/InetAddress;>;", "LNetI2pRouterTransportUdpIntroductionManager_Introducer;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpIntroductionManager = { "IntroductionManager", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 12, 13, -1, 16, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpIntroductionManager;
}

@end

void NetI2pRouterTransportUdpIntroductionManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpIntroductionManager *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpIntroductionManager_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssignAndConsume(&self->_builder_, new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(ctx, transport));
  JreStrongAssignAndConsume(&self->_outbound_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(NetI2pRouterTransportUdpIntroductionManager_MAX_OUTBOUND));
  JreStrongAssignAndConsume(&self->_inbound_, new_NetI2pUtilConcurrentHashSet_initWithInt_(NetI2pRouterTransportUdpIntroductionManager_MAX_INBOUND));
  JreStrongAssignAndConsume(&self->_recentHolePunches_, new_JavaUtilHashSet_initWithInt_(16));
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"udp.receiveRelayIntro" withNSString:@"How often we get a relayed request for us to talk to someone?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"udp.receiveRelayRequest" withNSString:@"How often we receive a good request to relay to someone else?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"udp.receiveRelayRequestBadTag" withNSString:@"Received relay requests with bad/expired tag" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"udp.relayBadIP" withNSString:@"Received IP or port was bad" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpIntroductionManager *new_NetI2pRouterTransportUdpIntroductionManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpIntroductionManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

NetI2pRouterTransportUdpIntroductionManager *create_NetI2pRouterTransportUdpIntroductionManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpIntroductionManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

NetI2pRouterTransportUdpPeerState *NetI2pRouterTransportUdpIntroductionManager_getWithLong_(NetI2pRouterTransportUdpIntroductionManager *self, jlong id_) {
  return [((id<JavaUtilMap>) nil_chk(self->_outbound_)) getWithId:JavaLangLong_valueOfWithLong_(id_)];
}

jboolean NetI2pRouterTransportUdpIntroductionManager_isValidWithByteArray_withInt_(NetI2pRouterTransportUdpIntroductionManager *self, IOSByteArray *ip, jint port) {
  return NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port) && ip != nil && ip->size_ == 4 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isValidWithByteArray:ip] && (![self->_transport_ isTooCloseWithByteArray:ip]) && (![((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) blocklist])) isBlocklistedWithByteArray:ip]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpIntroductionManager)

@implementation NetI2pRouterTransportUdpIntroductionManager_Introducer

- (instancetype)initWithByteArray:(IOSByteArray *)ip
                          withInt:(jint)port
                    withByteArray:(IOSByteArray *)key
                         withLong:(jlong)tag {
  NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(self, ip, port, key, tag);
  return self;
}

- (jint)compareToWithId:(NetI2pRouterTransportUdpIntroductionManager_Introducer *)i {
  cast_chk(i, [NetI2pRouterTransportUdpIntroductionManager_Introducer class]);
  return [((NSString *) nil_chk(skey_)) compareToWithId:((NetI2pRouterTransportUdpIntroductionManager_Introducer *) nil_chk(i))->skey_];
}

- (jboolean)isEqual:(id)o {
  if (o == nil) {
    return false;
  }
  if (!([o isKindOfClass:[NetI2pRouterTransportUdpIntroductionManager_Introducer class]])) {
    return false;
  }
  NetI2pRouterTransportUdpIntroductionManager_Introducer *i = (NetI2pRouterTransportUdpIntroductionManager_Introducer *) cast_chk(o, [NetI2pRouterTransportUdpIntroductionManager_Introducer class]);
  return [self compareToWithId:i] == 0;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(skey_)) hash]);
}

- (void)dealloc {
  RELEASE_(sip_);
  RELEASE_(sport_);
  RELEASE_(skey_);
  RELEASE_(stag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:withByteArray:withLong:);
  methods[1].selector = @selector(compareToWithId:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sip_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sport_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "skey_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "stag_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BI[BJ", "compareTo", "LNetI2pRouterTransportUdpIntroductionManager_Introducer;", "equals", "LNSObject;", "hashCode", "LNetI2pRouterTransportUdpIntroductionManager;", "Ljava/lang/Object;Ljava/lang/Comparable<Lnet/i2p/router/transport/udp/IntroductionManager$Introducer;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpIntroductionManager_Introducer = { "Introducer", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0xa, 4, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pRouterTransportUdpIntroductionManager_Introducer;
}

@end

void NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(NetI2pRouterTransportUdpIntroductionManager_Introducer *self, IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag) {
  NSObject_init(self);
  JreStrongAssign(&self->sip_, NetI2pUtilAddresses_toStringWithByteArray_(ip));
  JreStrongAssign(&self->sport_, NSString_java_valueOfInt_(port));
  JreStrongAssign(&self->skey_, NetI2pDataBase64_encodeWithByteArray_(key));
  JreStrongAssign(&self->stag_, NSString_java_valueOfLong_(tag));
}

NetI2pRouterTransportUdpIntroductionManager_Introducer *new_NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpIntroductionManager_Introducer, initWithByteArray_withInt_withByteArray_withLong_, ip, port, key, tag)
}

NetI2pRouterTransportUdpIntroductionManager_Introducer *create_NetI2pRouterTransportUdpIntroductionManager_Introducer_initWithByteArray_withInt_withByteArray_withLong_(IOSByteArray *ip, jint port, IOSByteArray *key, jlong tag) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpIntroductionManager_Introducer, initWithByteArray_withInt_withByteArray_withLong_, ip, port, key, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpIntroductionManager_Introducer)
