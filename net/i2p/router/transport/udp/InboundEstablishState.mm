//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/InboundEstablishState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/udp/InboundEstablishState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpInboundEstablishState () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  IOSByteArray *_receivedX_;
  IOSByteArray *_bobIP_;
  jint _bobPort_;
  NetI2pRouterTransportCryptoDHSessionKeyBuilder *_keyBuilder_;
  IOSByteArray *_sentY_;
  IOSByteArray *_aliceIP_;
  jint _alicePort_;
  jlong _sentRelayTag_;
  jlong _sentSignedOnTime_;
  NetI2pDataSessionKey *_sessionKey_;
  NetI2pDataSessionKey *_macKey_;
  NetI2pDataSignature *_sentSignature_;
  IOSObjectArray *_receivedIdentity_;
  jlong _receivedSignedOnTime_;
  IOSByteArray *_receivedSignature_;
  jboolean _verificationAttempted_;
  NetI2pDataRouterRouterIdentity *_receivedUnconfirmedIdentity_;
  NetI2pDataRouterRouterIdentity *_receivedConfirmedIdentity_;
  jlong _establishBegin_;
  jlong _lastSend_;
  jlong _nextSend_;
  NetI2pRouterTransportUdpRemoteHostId *_remoteHostId_;
  NetI2pRouterTransportUdpInboundEstablishState_InboundState *_currentState_;
  id<JavaUtilQueue> _queuedMessages_;
  jint _createdSentCount_;
  jboolean _introductionRequested_;
}

- (void)signSessionCreated;

- (jboolean)confirmedFullyReceived;

- (void)buildIdentity;

- (void)verifyIdentity;

- (void)packetReceived;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _receivedX_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _bobIP_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _keyBuilder_, NetI2pRouterTransportCryptoDHSessionKeyBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _sentY_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _aliceIP_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _sessionKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _macKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _sentSignature_, NetI2pDataSignature *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _receivedIdentity_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _receivedSignature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _receivedUnconfirmedIdentity_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _receivedConfirmedIdentity_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _remoteHostId_, NetI2pRouterTransportUdpRemoteHostId *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _currentState_, NetI2pRouterTransportUdpInboundEstablishState_InboundState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundEstablishState, _queuedMessages_, id<JavaUtilQueue>)

inline jlong NetI2pRouterTransportUdpInboundEstablishState_get_RETRANSMIT_DELAY(void);
#define NetI2pRouterTransportUdpInboundEstablishState_RETRANSMIT_DELAY 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpInboundEstablishState, RETRANSMIT_DELAY, jlong)

inline jlong NetI2pRouterTransportUdpInboundEstablishState_get_MAX_DELAY(void);
#define NetI2pRouterTransportUdpInboundEstablishState_MAX_DELAY 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpInboundEstablishState, MAX_DELAY, jlong)

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundEstablishState_signSessionCreated(NetI2pRouterTransportUdpInboundEstablishState *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpInboundEstablishState_confirmedFullyReceived(NetI2pRouterTransportUdpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundEstablishState_buildIdentity(NetI2pRouterTransportUdpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundEstablishState_verifyIdentity(NetI2pRouterTransportUdpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundEstablishState_packetReceived(NetI2pRouterTransportUdpInboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundEstablishState_InboundState_initWithNSString_withInt_(NetI2pRouterTransportUdpInboundEstablishState_InboundState *self, NSString *__name, jint __ordinal);

@implementation NetI2pRouterTransportUdpInboundEstablishState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                    withByteArray:(IOSByteArray *)remoteIP
                                          withInt:(jint)remotePort
                                          withInt:(jint)localPort
withNetI2pRouterTransportCryptoDHSessionKeyBuilder:(NetI2pRouterTransportCryptoDHSessionKeyBuilder *)dh {
  NetI2pRouterTransportUdpInboundEstablishState_initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_(self, ctx, remoteIP, remotePort, localPort, dh);
  return self;
}

- (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)getState {
  @synchronized(self) {
    return JreRetainedLocalValue(_currentState_);
  }
}

- (jboolean)isComplete {
  @synchronized(self) {
    return _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_COMPLETE) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_FAILED);
  }
}

- (void)complete {
  @synchronized(self) {
    JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_COMPLETE));
  }
}

- (void)addMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if (![((id<JavaUtilQueue>) nil_chk(_queuedMessages_)) containsWithId:msg]) [_queuedMessages_ offerWithId:msg];
  else if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"attempt to add duplicate msg to queue: ", msg)];
}

- (NetI2pRouterOutNetMessage *)getNextQueuedMessage {
  return [((id<JavaUtilQueue>) nil_chk(_queuedMessages_)) poll];
}

- (void)receiveSessionRequestWithNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader:(NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *)req {
  @synchronized(self) {
    if (_receivedX_ == nil) JreStrongAssignAndConsume(&_receivedX_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH]);
    [((NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *) nil_chk(req)) readXWithByteArray:_receivedX_ withInt:0];
    if (_bobIP_ == nil) JreStrongAssignAndConsume(&_bobIP_, [IOSByteArray newArrayWithLength:[req readIPSize]]);
    [req readIPWithByteArray:_bobIP_ withInt:0];
    IOSByteArray *ext = [req readExtendedOptions];
    if (ext != nil && ext->size_ >= NetI2pRouterTransportUdpUDPPacket_SESS_REQ_MIN_EXT_OPTIONS_LENGTH) {
      _introductionRequested_ = ((IOSByteArray_Get(ext, 1) & (jbyte) NetI2pRouterTransportUdpUDPPacket_SESS_REQ_EXT_FLAG_REQUEST_RELAY_TAG) != 0);
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$ZC@", @"got sess req. w/ ext. options, need intro? ", _introductionRequested_, ' ', self)];
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Receive sessionRequest, BobIP = ", NetI2pUtilAddresses_toStringWithByteArray_(_bobIP_))];
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_REQUEST_RECEIVED));
    NetI2pRouterTransportUdpInboundEstablishState_packetReceived(self);
  }
}

- (jboolean)sessionRequestReceived {
  @synchronized(self) {
    return _receivedX_ != nil;
  }
}

- (IOSByteArray *)getReceivedX {
  @synchronized(self) {
    return JreRetainedLocalValue(_receivedX_);
  }
}

- (IOSByteArray *)getReceivedOurIP {
  @synchronized(self) {
    return JreRetainedLocalValue(_bobIP_);
  }
}

- (jboolean)isIntroductionRequested {
  @synchronized(self) {
    return _introductionRequested_;
  }
}

- (void)generateSessionKey {
  @synchronized(self) {
    if (_sessionKey_ != nil) return;
    @try {
      [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(_keyBuilder_)) setPeerPublicValueWithByteArray:_receivedX_];
    }
    @catch (JavaLangIllegalStateException *ise) {
      @throw create_NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException_initWithNSString_withJavaLangThrowable_(@"reused keys?", ise);
    }
    JreStrongAssign(&_sessionKey_, [_keyBuilder_ getSessionKey]);
    NetI2pDataByteArray *extra = [_keyBuilder_ getExtraBytes];
    JreStrongAssignAndConsume(&_macKey_, new_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(extra)) getData], 0, [((NetI2pDataSessionKey *) nil_chk(_macKey_)) getData], 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$", @"Established inbound keys.  cipher: ", NetI2pDataBase64_encodeWithByteArray_([((NetI2pDataSessionKey *) nil_chk(_sessionKey_)) getData]), @" mac: ", NetI2pDataBase64_encodeWithByteArray_([((NetI2pDataSessionKey *) nil_chk(_macKey_)) getData]))];
  }
}

- (NetI2pDataSessionKey *)getCipherKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_sessionKey_);
  }
}

- (NetI2pDataSessionKey *)getMACKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_macKey_);
  }
}

- (IOSByteArray *)getSentIP {
  return _aliceIP_;
}

- (jint)getSentPort {
  return _alicePort_;
}

- (IOSByteArray *)getSentY {
  @synchronized(self) {
    if (_sentY_ == nil) JreStrongAssign(&_sentY_, [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(_keyBuilder_)) getMyPublicValueBytes]);
    return JreRetainedLocalValue(_sentY_);
  }
}

- (void)fail {
  @synchronized(self) {
    JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_FAILED));
  }
}

- (jlong)getSentRelayTag {
  @synchronized(self) {
    return _sentRelayTag_;
  }
}

- (void)setSentRelayTagWithLong:(jlong)tag {
  @synchronized(self) {
    _sentRelayTag_ = tag;
  }
}

- (jlong)getSentSignedOnTime {
  @synchronized(self) {
    return _sentSignedOnTime_;
  }
}

- (void)prepareSessionCreated {
  @synchronized(self) {
    if (_sentSignature_ == nil) NetI2pRouterTransportUdpInboundEstablishState_signSessionCreated(self);
  }
}

- (NetI2pDataSignature *)getSentSignature {
  @synchronized(self) {
    return JreRetainedLocalValue(_sentSignature_);
  }
}

- (void)signSessionCreated {
  NetI2pRouterTransportUdpInboundEstablishState_signSessionCreated(self);
}

- (void)createdPacketSent {
  @synchronized(self) {
    _lastSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    jlong delay;
    if (_createdSentCount_ == 0) {
      delay = NetI2pRouterTransportUdpInboundEstablishState_RETRANSMIT_DELAY;
    }
    else {
      delay = JavaLangMath_minWithLong_withLong_(JreLShift64(NetI2pRouterTransportUdpInboundEstablishState_RETRANSMIT_DELAY, _createdSentCount_), NetI2pRouterTransportUdpInboundEstablishState_MAX_DELAY);
    }
    _createdSentCount_++;
    _nextSend_ = _lastSend_ + delay;
    if ((_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN)) || (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_REQUEST_RECEIVED))) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CREATED_SENT));
  }
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _establishBegin_;
}

- (jlong)getEstablishBeginTime {
  return _establishBegin_;
}

- (jlong)getNextSendTime {
  @synchronized(self) {
    return _nextSend_;
  }
}

- (NetI2pRouterTransportUdpRemoteHostId *)getRemoteHostId {
  return _remoteHostId_;
}

- (void)receiveSessionConfirmedWithNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader:(NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *)conf {
  @synchronized(self) {
    if (_receivedIdentity_ == nil) JreStrongAssignAndConsume(&_receivedIdentity_, [IOSObjectArray newArrayWithLength:[((NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *) nil_chk(conf)) readTotalFragmentNum] type:IOSClass_byteArray(1)]);
    jint cur = [((NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *) nil_chk(conf)) readCurrentFragmentNum];
    if (cur >= ((IOSObjectArray *) nil_chk(_receivedIdentity_))->size_) {
      [self fail];
      NetI2pRouterTransportUdpInboundEstablishState_packetReceived(self);
      return;
    }
    if (IOSObjectArray_Get(_receivedIdentity_, cur) == nil) {
      IOSByteArray *fragment = [IOSByteArray arrayWithLength:[conf readCurrentFragmentSize]];
      [conf readFragmentDataWithByteArray:fragment withInt:0];
      IOSObjectArray_Set(nil_chk(_receivedIdentity_), cur, fragment);
    }
    if (cur == _receivedIdentity_->size_ - 1) {
      _receivedSignedOnTime_ = [conf readFinalFragmentSignedOnTime];
      NetI2pRouterTransportUdpInboundEstablishState_buildIdentity(self);
      if (_receivedUnconfirmedIdentity_ != nil) {
        NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([_receivedUnconfirmedIdentity_ getSigningPublicKey])) getType];
        if (type != nil) {
          jint sigLen = [type getSigLen];
          if (_receivedSignature_ == nil) JreStrongAssignAndConsume(&_receivedSignature_, [IOSByteArray newArrayWithLength:sigLen]);
          [conf readFinalSignatureWithByteArray:_receivedSignature_ withInt:0 withInt:sigLen];
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Unsupported sig type from: ", [self description])];
          [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) banlistRouterForeverWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk(_receivedUnconfirmedIdentity_)) calculateHash] withNSString:@"Unsupported signature type"];
          [self fail];
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Bad ident from: ", [self description])];
        [self fail];
      }
    }
    if ((_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN)) || (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_REQUEST_RECEIVED)) || (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CREATED_SENT))) {
      if (NetI2pRouterTransportUdpInboundEstablishState_confirmedFullyReceived(self)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_COMPLETELY));
      else JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_PARTIALLY));
    }
    NetI2pRouterTransportUdpInboundEstablishState_packetReceived(self);
  }
}

- (jboolean)confirmedFullyReceived {
  return NetI2pRouterTransportUdpInboundEstablishState_confirmedFullyReceived(self);
}

- (NetI2pDataRouterRouterIdentity *)getConfirmedIdentity {
  @synchronized(self) {
    if (!_verificationAttempted_) {
      NetI2pRouterTransportUdpInboundEstablishState_verifyIdentity(self);
      _verificationAttempted_ = true;
    }
    return JreRetainedLocalValue(_receivedConfirmedIdentity_);
  }
}

- (void)buildIdentity {
  NetI2pRouterTransportUdpInboundEstablishState_buildIdentity(self);
}

- (void)verifyIdentity {
  NetI2pRouterTransportUdpInboundEstablishState_verifyIdentity(self);
}

- (void)packetReceived {
  NetI2pRouterTransportUdpInboundEstablishState_packetReceived(self);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:@"IES "];
  [buf appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(_aliceIP_, _alicePort_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" RelayTag: "])) appendWithLong:_sentRelayTag_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithId:_currentState_];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_receivedX_);
  RELEASE_(_bobIP_);
  RELEASE_(_keyBuilder_);
  RELEASE_(_sentY_);
  RELEASE_(_aliceIP_);
  RELEASE_(_sessionKey_);
  RELEASE_(_macKey_);
  RELEASE_(_sentSignature_);
  RELEASE_(_receivedIdentity_);
  RELEASE_(_receivedSignature_);
  RELEASE_(_receivedUnconfirmedIdentity_);
  RELEASE_(_receivedConfirmedIdentity_);
  RELEASE_(_remoteHostId_);
  RELEASE_(_currentState_);
  RELEASE_(_queuedMessages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 5, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSignature;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpRemoteHostId;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterIdentity;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withByteArray:withInt:withInt:withNetI2pRouterTransportCryptoDHSessionKeyBuilder:);
  methods[1].selector = @selector(getState);
  methods[2].selector = @selector(isComplete);
  methods[3].selector = @selector(complete);
  methods[4].selector = @selector(addMessageWithNetI2pRouterOutNetMessage:);
  methods[5].selector = @selector(getNextQueuedMessage);
  methods[6].selector = @selector(receiveSessionRequestWithNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader:);
  methods[7].selector = @selector(sessionRequestReceived);
  methods[8].selector = @selector(getReceivedX);
  methods[9].selector = @selector(getReceivedOurIP);
  methods[10].selector = @selector(isIntroductionRequested);
  methods[11].selector = @selector(generateSessionKey);
  methods[12].selector = @selector(getCipherKey);
  methods[13].selector = @selector(getMACKey);
  methods[14].selector = @selector(getSentIP);
  methods[15].selector = @selector(getSentPort);
  methods[16].selector = @selector(getSentY);
  methods[17].selector = @selector(fail);
  methods[18].selector = @selector(getSentRelayTag);
  methods[19].selector = @selector(setSentRelayTagWithLong:);
  methods[20].selector = @selector(getSentSignedOnTime);
  methods[21].selector = @selector(prepareSessionCreated);
  methods[22].selector = @selector(getSentSignature);
  methods[23].selector = @selector(signSessionCreated);
  methods[24].selector = @selector(createdPacketSent);
  methods[25].selector = @selector(getLifetime);
  methods[26].selector = @selector(getEstablishBeginTime);
  methods[27].selector = @selector(getNextSendTime);
  methods[28].selector = @selector(getRemoteHostId);
  methods[29].selector = @selector(receiveSessionConfirmedWithNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader:);
  methods[30].selector = @selector(confirmedFullyReceived);
  methods[31].selector = @selector(getConfirmedIdentity);
  methods[32].selector = @selector(buildIdentity);
  methods[33].selector = @selector(verifyIdentity);
  methods[34].selector = @selector(packetReceived);
  methods[35].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_receivedX_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobIP_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobPort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_keyBuilder_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sentY_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIP_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alicePort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sentRelayTag_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentSignedOnTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessionKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_macKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentSignature_", "LNetI2pDataSignature;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedIdentity_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedSignedOnTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedSignature_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_verificationAttempted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedUnconfirmedIdentity_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedConfirmedIdentity_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_establishBegin_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastSend_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextSend_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_remoteHostId_", "LNetI2pRouterTransportUdpRemoteHostId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentState_", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_queuedMessages_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_createdSentCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_introductionRequested_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RETRANSMIT_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUdpInboundEstablishState_RETRANSMIT_DELAY, 0x1a, -1, -1, -1, -1 },
    { "MAX_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUdpInboundEstablishState_MAX_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;[BIILNetI2pRouterTransportCryptoDHSessionKeyBuilder;", "addMessage", "LNetI2pRouterOutNetMessage;", "receiveSessionRequest", "LNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader;", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException;", "setSentRelayTag", "J", "receiveSessionConfirmed", "LNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader;", "toString", "Ljava/util/Queue<Lnet/i2p/router/OutNetMessage;>;", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpInboundEstablishState = { "InboundEstablishState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 36, 30, -1, 12, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpInboundEstablishState;
}

@end

void NetI2pRouterTransportUdpInboundEstablishState_initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_(NetI2pRouterTransportUdpInboundEstablishState *self, NetI2pRouterRouterContext *ctx, IOSByteArray *remoteIP, jint remotePort, jint localPort, NetI2pRouterTransportCryptoDHSessionKeyBuilder *dh) {
  NSObject_init(self);
  self->_introductionRequested_ = true;
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpInboundEstablishState_class_()]);
  JreStrongAssign(&self->_aliceIP_, remoteIP);
  self->_alicePort_ = remotePort;
  JreStrongAssignAndConsume(&self->_remoteHostId_, new_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_(self->_aliceIP_, self->_alicePort_));
  self->_bobPort_ = localPort;
  JreStrongAssign(&self->_currentState_, JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN));
  self->_establishBegin_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  JreStrongAssign(&self->_keyBuilder_, dh);
  JreStrongAssignAndConsume(&self->_queuedMessages_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
}

NetI2pRouterTransportUdpInboundEstablishState *new_NetI2pRouterTransportUdpInboundEstablishState_initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_(NetI2pRouterRouterContext *ctx, IOSByteArray *remoteIP, jint remotePort, jint localPort, NetI2pRouterTransportCryptoDHSessionKeyBuilder *dh) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpInboundEstablishState, initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_, ctx, remoteIP, remotePort, localPort, dh)
}

NetI2pRouterTransportUdpInboundEstablishState *create_NetI2pRouterTransportUdpInboundEstablishState_initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_(NetI2pRouterRouterContext *ctx, IOSByteArray *remoteIP, jint remotePort, jint localPort, NetI2pRouterTransportCryptoDHSessionKeyBuilder *dh) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpInboundEstablishState, initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_, ctx, remoteIP, remotePort, localPort, dh)
}

void NetI2pRouterTransportUdpInboundEstablishState_signSessionCreated(NetI2pRouterTransportUdpInboundEstablishState *self) {
  IOSByteArray *signed_ = [IOSByteArray arrayWithLength:256 + 256 + ((IOSByteArray *) nil_chk(self->_aliceIP_))->size_ + 2 + ((IOSByteArray *) nil_chk(self->_bobIP_))->size_ + 2 + 4 + 4];
  self->_sentSignedOnTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] / 1000;
  jint off = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_receivedX_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_receivedX_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_receivedX_))->size_;
  [self getSentY];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_sentY_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_sentY_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_sentY_))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_aliceIP_, 0, signed_, off, self->_aliceIP_->size_);
  off += self->_aliceIP_->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_alicePort_);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_bobIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_bobIP_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_bobIP_))->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_bobPort_);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_sentRelayTag_);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_sentSignedOnTime_);
  JreStrongAssign(&self->_sentSignature_, [((NetI2pCryptoDSAEngine *) nil_chk([self->_context_ dsa])) signWithByteArray:signed_ withNetI2pDataSigningPrivateKey:[((NetI2pRouterKeyManager *) nil_chk([self->_context_ keyManager])) getSigningPrivateKey]]);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [buf appendWithNSString:@"Signing sessionCreated:"];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Alice: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(self->_aliceIP_, self->_alicePort_)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Bob: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(self->_bobIP_, self->_bobPort_)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" RelayTag: "])) appendWithLong:self->_sentRelayTag_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" SignedOn: "])) appendWithLong:self->_sentSignedOnTime_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" signature: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_([((NetI2pDataSignature *) nil_chk(self->_sentSignature_)) getData])];
    [self->_log_ debugWithNSString:[buf description]];
  }
}

jboolean NetI2pRouterTransportUdpInboundEstablishState_confirmedFullyReceived(NetI2pRouterTransportUdpInboundEstablishState *self) {
  if (self->_receivedIdentity_ != nil) {
    for (jint i = 0; i < self->_receivedIdentity_->size_; i++) {
      if (IOSObjectArray_Get(self->_receivedIdentity_, i) == nil) return false;
    }
    return true;
  }
  else {
    return false;
  }
}

void NetI2pRouterTransportUdpInboundEstablishState_buildIdentity(NetI2pRouterTransportUdpInboundEstablishState *self) {
  if (self->_receivedUnconfirmedIdentity_ != nil) return;
  jint frags = ((IOSObjectArray *) nil_chk(self->_receivedIdentity_))->size_;
  IOSByteArray *ident;
  if (frags > 1) {
    jint identSize = 0;
    for (jint i = 0; i < self->_receivedIdentity_->size_; i++) identSize += ((IOSByteArray *) nil_chk(IOSObjectArray_Get(self->_receivedIdentity_, i)))->size_;
    ident = [IOSByteArray arrayWithLength:identSize];
    jint off = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->_receivedIdentity_))->size_; i++) {
      jint len = ((IOSByteArray *) nil_chk(IOSObjectArray_Get(self->_receivedIdentity_, i)))->size_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(self->_receivedIdentity_, i), 0, ident, off, len);
      off += len;
    }
  }
  else {
    ident = IOSObjectArray_Get(self->_receivedIdentity_, 0);
  }
  JavaIoByteArrayInputStream *in = create_JavaIoByteArrayInputStream_initWithByteArray_(ident);
  NetI2pDataRouterRouterIdentity *peer = create_NetI2pDataRouterRouterIdentity_init();
  @try {
    [peer readBytesWithJavaIoInputStream:in];
    JreStrongAssign(&self->_receivedUnconfirmedIdentity_, peer);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Improperly formatted yet fully received ident" withJavaLangThrowable:dfe];
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Improperly formatted yet fully received ident" withJavaLangThrowable:ioe];
  }
}

void NetI2pRouterTransportUdpInboundEstablishState_verifyIdentity(NetI2pRouterTransportUdpInboundEstablishState *self) {
  if (self->_receivedUnconfirmedIdentity_ == nil) return;
  if (self->_receivedSignature_ == nil) return;
  IOSByteArray *signed_ = [IOSByteArray arrayWithLength:256 + 256 + ((IOSByteArray *) nil_chk(self->_aliceIP_))->size_ + 2 + ((IOSByteArray *) nil_chk(self->_bobIP_))->size_ + 2 + 4 + 4];
  jint off = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_receivedX_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_receivedX_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_receivedX_))->size_;
  [self getSentY];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_sentY_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_sentY_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_sentY_))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_aliceIP_, 0, signed_, off, self->_aliceIP_->size_);
  off += self->_aliceIP_->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_alicePort_);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_bobIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_bobIP_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_bobIP_))->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_bobPort_);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_sentRelayTag_);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_receivedSignedOnTime_);
  NetI2pDataSignature *sig = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_([((NetI2pDataRouterRouterIdentity *) nil_chk(self->_receivedUnconfirmedIdentity_)) getSigType], self->_receivedSignature_);
  jboolean ok = [((NetI2pCryptoDSAEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) dsa])) verifySignatureWithNetI2pDataSignature:sig withByteArray:signed_ withNetI2pDataSigningPublicKey:[((NetI2pDataRouterRouterIdentity *) nil_chk(self->_receivedUnconfirmedIdentity_)) getSigningPublicKey]];
  if (ok) {
    JreStrongAssign(&self->_receivedConfirmedIdentity_, self->_receivedUnconfirmedIdentity_);
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Signature failed from ", self->_receivedUnconfirmedIdentity_)];
  }
}

void NetI2pRouterTransportUdpInboundEstablishState_packetReceived(NetI2pRouterTransportUdpInboundEstablishState *self) {
  self->_nextSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpInboundEstablishState)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpInboundEstablishState_InboundState)

NetI2pRouterTransportUdpInboundEstablishState_InboundState *NetI2pRouterTransportUdpInboundEstablishState_InboundState_values_[7];

@implementation NetI2pRouterTransportUdpInboundEstablishState_InboundState

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_UNKNOWN {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_REQUEST_RECEIVED {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_REQUEST_RECEIVED);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_CREATED_SENT {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CREATED_SENT);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_CONFIRMED_PARTIALLY {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_PARTIALLY);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_CONFIRMED_COMPLETELY {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_COMPLETELY);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_FAILED {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_FAILED);
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)IB_STATE_COMPLETE {
  return JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_COMPLETE);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportUdpInboundEstablishState_InboundState_values();
}

+ (NetI2pRouterTransportUdpInboundEstablishState_InboundState *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportUdpInboundEstablishState_InboundState_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum)toNSEnum {
  return (NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IB_STATE_UNKNOWN", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "IB_STATE_REQUEST_RECEIVED", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "IB_STATE_CREATED_SENT", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "IB_STATE_CONFIRMED_PARTIALLY", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "IB_STATE_CONFIRMED_COMPLETELY", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "IB_STATE_FAILED", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "IB_STATE_COMPLETE", "LNetI2pRouterTransportUdpInboundEstablishState_InboundState;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_UNKNOWN), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_REQUEST_RECEIVED), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CREATED_SENT), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_PARTIALLY), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_COMPLETELY), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_FAILED), &JreEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_COMPLETE), "LNetI2pRouterTransportUdpInboundEstablishState;", "Ljava/lang/Enum<Lnet/i2p/router/transport/udp/InboundEstablishState$InboundState;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpInboundEstablishState_InboundState = { "InboundState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x4019, 2, 7, 9, -1, -1, 10, -1 };
  return &_NetI2pRouterTransportUdpInboundEstablishState_InboundState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpInboundEstablishState_InboundState class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 7; i++) {
      ((void)(NetI2pRouterTransportUdpInboundEstablishState_InboundState_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportUdpInboundEstablishState_InboundState_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportUdpInboundEstablishState_InboundState_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpInboundEstablishState_InboundState)
  }
}

@end

void NetI2pRouterTransportUdpInboundEstablishState_InboundState_initWithNSString_withInt_(NetI2pRouterTransportUdpInboundEstablishState_InboundState *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportUdpInboundEstablishState_InboundState_values() {
  NetI2pRouterTransportUdpInboundEstablishState_InboundState_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportUdpInboundEstablishState_InboundState_values_ count:7 type:NetI2pRouterTransportUdpInboundEstablishState_InboundState_class_()];
}

NetI2pRouterTransportUdpInboundEstablishState_InboundState *NetI2pRouterTransportUdpInboundEstablishState_InboundState_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportUdpInboundEstablishState_InboundState_initialize();
  for (int i = 0; i < 7; i++) {
    NetI2pRouterTransportUdpInboundEstablishState_InboundState *e = NetI2pRouterTransportUdpInboundEstablishState_InboundState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportUdpInboundEstablishState_InboundState *NetI2pRouterTransportUdpInboundEstablishState_InboundState_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportUdpInboundEstablishState_InboundState_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return NetI2pRouterTransportUdpInboundEstablishState_InboundState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpInboundEstablishState_InboundState)
