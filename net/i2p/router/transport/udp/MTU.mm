//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/MTU.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Error.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/net/SocketException.h"
#include "java/util/Enumeration.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/transport/udp/MTU.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportUdpMTU ()

- (instancetype)init;

@end

inline jboolean NetI2pRouterTransportUdpMTU_get_hasMTU(void);
static jboolean NetI2pRouterTransportUdpMTU_hasMTU;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTransportUdpMTU, hasMTU, jboolean)

__attribute__((unused)) static void NetI2pRouterTransportUdpMTU_init(NetI2pRouterTransportUdpMTU *self);

__attribute__((unused)) static NetI2pRouterTransportUdpMTU *new_NetI2pRouterTransportUdpMTU_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpMTU *create_NetI2pRouterTransportUdpMTU_init(void);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpMTU)

@implementation NetI2pRouterTransportUdpMTU

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportUdpMTU_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getMTUWithJavaNetInetAddress:(JavaNetInetAddress *)ia {
  return NetI2pRouterTransportUdpMTU_getMTUWithJavaNetInetAddress_(ia);
}

+ (jint)rectifyWithBoolean:(jboolean)isIPv6
                   withInt:(jint)mtu {
  return NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(isIPv6, mtu);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterTransportUdpMTU_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMTUWithJavaNetInetAddress:);
  methods[2].selector = @selector(rectifyWithBoolean:withInt:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hasMTU", "Z", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "getMTU", "LJavaNetInetAddress;", "rectify", "ZI", "main", "[LNSString;", &NetI2pRouterTransportUdpMTU_hasMTU };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpMTU = { "MTU", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpMTU;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpMTU class]) {
    NetI2pRouterTransportUdpMTU_hasMTU = NetI2pUtilSystemVersion_isJava6();
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpMTU)
  }
}

@end

void NetI2pRouterTransportUdpMTU_init(NetI2pRouterTransportUdpMTU *self) {
  NSObject_init(self);
}

NetI2pRouterTransportUdpMTU *new_NetI2pRouterTransportUdpMTU_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpMTU, init)
}

NetI2pRouterTransportUdpMTU *create_NetI2pRouterTransportUdpMTU_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpMTU, init)
}

jint NetI2pRouterTransportUdpMTU_getMTUWithJavaNetInetAddress_(JavaNetInetAddress *ia) {
  NetI2pRouterTransportUdpMTU_initialize();
  if (ia == nil || !NetI2pRouterTransportUdpMTU_hasMTU) return 0;
  id<JavaUtilEnumeration> ifcs;
  @try {
    ifcs = JavaNetNetworkInterface_getNetworkInterfaces();
  }
  @catch (JavaNetSocketException *se) {
    return 0;
  }
  @catch (JavaLangError *e) {
    return 0;
  }
  if (ifcs != nil) {
    while ([ifcs hasMoreElements]) {
      JavaNetNetworkInterface *ifc = [ifcs nextElement];
      for (id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ifc)) getInetAddresses]; [((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]; ) {
        JavaNetInetAddress *addr = [addrs nextElement];
        if ([ia isEqual:addr]) {
          @try {
            jboolean isIPv6 = [addr isKindOfClass:[JavaNetInet6Address class]];
            jint mtu = [ifc getMTU];
            if ((isIPv6 && mtu < NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU) || (!isIPv6 && mtu < NetI2pRouterTransportUdpPeerState_MIN_MTU)) {
              NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpMTU_class_()];
              [((NetI2pUtilLog *) nil_chk(log)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$I$@$", @"Unusually low MTU ", mtu, @" for interface ", ia, @", consider disabling")];
            }
            return NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(isIPv6, mtu);
          }
          @catch (JavaNetSocketException *se) {
          }
          @catch (JavaLangThrowable *t) {
            return 0;
          }
        }
      }
    }
  }
  return 0;
}

jint NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(jboolean isIPv6, jint mtu) {
  NetI2pRouterTransportUdpMTU_initialize();
  jint rv = mtu;
  jint mod = rv % 16;
  if (isIPv6) {
    rv -= mod;
    return JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU, rv));
  }
  if (mod > 12) rv -= mod - 12;
  else if (mod < 12) rv -= mod + 4;
  return JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpPeerState_MIN_MTU, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPeerState_LARGE_MTU, rv));
}

void NetI2pRouterTransportUdpMTU_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterTransportUdpMTU_initialize();
  @try {
    id<JavaUtilEnumeration> ifcs = JavaNetNetworkInterface_getNetworkInterfaces();
    if (ifcs != nil) {
      while ([ifcs hasMoreElements]) {
        JavaNetNetworkInterface *ifc = [ifcs nextElement];
        for (id<JavaUtilEnumeration> addrs = [((JavaNetNetworkInterface *) nil_chk(ifc)) getInetAddresses]; [((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]; ) {
          JavaNetInetAddress *addr = [addrs nextElement];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I", @"I2P MTU for ", [((JavaNetInetAddress *) nil_chk(addr)) getHostAddress], @" is ", NetI2pRouterTransportUdpMTU_getMTUWithJavaNetInetAddress_(addr))];
        }
      }
    }
  }
  @catch (JavaNetSocketException *se) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"no interfaces"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpMTU)
