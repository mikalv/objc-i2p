//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PacketBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder")
#ifdef RESTRICT_NetI2pRouterTransportUdpPacketBuilder
#define INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder 0
#else
#define INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder 1
#endif
#undef RESTRICT_NetI2pRouterTransportUdpPacketBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTransportUdpPacketBuilder_) && (INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder || defined(INCLUDE_NetI2pRouterTransportUdpPacketBuilder))
#define NetI2pRouterTransportUdpPacketBuilder_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaNetInetAddress;
@class NetI2pDataRouterRouterIdentity;
@class NetI2pDataSessionKey;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTransportUdpInboundEstablishState;
@class NetI2pRouterTransportUdpOutboundEstablishState;
@class NetI2pRouterTransportUdpOutboundMessageState;
@class NetI2pRouterTransportUdpPeerState;
@class NetI2pRouterTransportUdpRemoteHostId;
@class NetI2pRouterTransportUdpUDPPacket;
@class NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;
@class NetI2pRouterTransportUdpUDPTransport;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

@interface NetI2pRouterTransportUdpPacketBuilder : NSObject
@property (readonly, class) jint TYPE_FIRST NS_SWIFT_NAME(TYPE_FIRST);
@property (readonly, class) jint TYPE_ACK NS_SWIFT_NAME(TYPE_ACK);
@property (readonly, class) jint TYPE_PUNCH NS_SWIFT_NAME(TYPE_PUNCH);
@property (readonly, class) jint TYPE_RESP NS_SWIFT_NAME(TYPE_RESP);
@property (readonly, class) jint TYPE_INTRO NS_SWIFT_NAME(TYPE_INTRO);
@property (readonly, class) jint TYPE_RREQ NS_SWIFT_NAME(TYPE_RREQ);
@property (readonly, class) jint TYPE_TCB NS_SWIFT_NAME(TYPE_TCB);
@property (readonly, class) jint TYPE_TBC NS_SWIFT_NAME(TYPE_TBC);
@property (readonly, class) jint TYPE_TTA NS_SWIFT_NAME(TYPE_TTA);
@property (readonly, class) jint TYPE_TFA NS_SWIFT_NAME(TYPE_TFA);
@property (readonly, class) jint TYPE_CONF NS_SWIFT_NAME(TYPE_CONF);
@property (readonly, class) jint TYPE_SREQ NS_SWIFT_NAME(TYPE_SREQ);
@property (readonly, class) jint TYPE_CREAT NS_SWIFT_NAME(TYPE_CREAT);
@property (readonly, class) jint HEADER_SIZE NS_SWIFT_NAME(HEADER_SIZE);
@property (readonly, class) jint FRAGMENT_HEADER_SIZE NS_SWIFT_NAME(FRAGMENT_HEADER_SIZE);
@property (readonly, class) jint DATA_HEADER_SIZE NS_SWIFT_NAME(DATA_HEADER_SIZE);
@property (readonly, class) jint IP_HEADER_SIZE NS_SWIFT_NAME(IP_HEADER_SIZE);
@property (readonly, class) jint UDP_HEADER_SIZE NS_SWIFT_NAME(UDP_HEADER_SIZE);
@property (readonly, class) jint MIN_DATA_PACKET_OVERHEAD NS_SWIFT_NAME(MIN_DATA_PACKET_OVERHEAD);
@property (readonly, class) jint IPV6_HEADER_SIZE NS_SWIFT_NAME(IPV6_HEADER_SIZE);
@property (readonly, class) jint MIN_IPV6_DATA_PACKET_OVERHEAD NS_SWIFT_NAME(MIN_IPV6_DATA_PACKET_OVERHEAD);
@property (readonly, class) jint ABSOLUTE_MAX_ACKS NS_SWIFT_NAME(ABSOLUTE_MAX_ACKS);

+ (jint)TYPE_FIRST;

+ (jint)TYPE_ACK;

+ (jint)TYPE_PUNCH;

+ (jint)TYPE_RESP;

+ (jint)TYPE_INTRO;

+ (jint)TYPE_RREQ;

+ (jint)TYPE_TCB;

+ (jint)TYPE_TBC;

+ (jint)TYPE_TTA;

+ (jint)TYPE_TFA;

+ (jint)TYPE_CONF;

+ (jint)TYPE_SREQ;

+ (jint)TYPE_CREAT;

+ (jint)HEADER_SIZE;

+ (jint)FRAGMENT_HEADER_SIZE;

+ (jint)DATA_HEADER_SIZE;

+ (jint)IP_HEADER_SIZE;

+ (jint)UDP_HEADER_SIZE;

+ (jint)MIN_DATA_PACKET_OVERHEAD;

+ (jint)IPV6_HEADER_SIZE;

+ (jint)MIN_IPV6_DATA_PACKET_OVERHEAD;

+ (jint)ABSOLUTE_MAX_ACKS;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                   withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport;

- (NetI2pRouterTransportUdpUDPPacket *)buildACKWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                    withJavaUtilList:(id<JavaUtilList>)ackBitfields;

- (NetI2pRouterTransportUdpUDPPacket *)buildHolePunchWithJavaNetInetAddress:(JavaNetInetAddress *)to
                                                                    withInt:(jint)port;

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithByteArray:(IOSByteArray *)data
                                         withJavaNetInetAddress:(JavaNetInetAddress *)to
                                                        withInt:(jint)port;

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithJavaUtilList:(id<JavaUtilList>)fragments
                             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                            withJavaUtilCollection:(id<JavaUtilCollection>)ackIdsRemaining
                                                           withInt:(jint)newAckCount
                                                  withJavaUtilList:(id<JavaUtilList>)partialACKsRemaining;

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state
                                                                                           withInt:(jint)fragment
                                                             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                            withJavaUtilCollection:(id<JavaUtilCollection>)ackIdsRemaining
                                                                                           withInt:(jint)newAckCount
                                                                                  withJavaUtilList:(id<JavaUtilList>)partialACKsRemaining;

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestFromAliceWithJavaNetInetAddress:(JavaNetInetAddress *)toIP
                                                                            withInt:(jint)toPort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toIntroKey
                                                                           withLong:(jlong)nonce
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey;

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestFromAliceWithJavaNetInetAddress:(JavaNetInetAddress *)toIP
                                                                            withInt:(jint)toPort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toCipherKey
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toMACKey
                                                                           withLong:(jlong)nonce
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey;

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToAliceWithJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                          withInt:(jint)alicePort
                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieIntroKey
                                                                         withLong:(jlong)nonce;

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToBobWithJavaNetInetAddress:(JavaNetInetAddress *)bobIP
                                                                        withInt:(jint)bobPort
                                                         withJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                        withInt:(jint)alicePort
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                                       withLong:(jlong)nonce
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobCipherKey
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobMACKey;

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToCharlieWithJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                            withInt:(jint)alicePort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                                           withLong:(jlong)nonce
                                                             withJavaNetInetAddress:(JavaNetInetAddress *)charlieIP
                                                                            withInt:(jint)charliePort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieCipherKey
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieMACKey;

- (NetI2pRouterTransportUdpUDPPacket *)buildPingWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (id<JavaUtilList>)buildRelayRequestWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                           withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey;

- (IOSObjectArray *)buildSessionConfirmedPacketsWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                                withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)ourIdentity;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionCreatedPacketWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state
                                                                                                          withInt:(jint)externalPort
                                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)peer;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)peer;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionRequestPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

+ (jint)getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                  withInt:(jint)numFragments
                                                                  withInt:(jint)curDataSize;

#pragma mark Package-Private

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)alice
                                                         withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)charlie
                                withNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader:(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *)request;

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)alice
                                                            withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)charlie
                                                                                         withLong:(jlong)nonce
                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPacketBuilder)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_FIRST(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_FIRST 42
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_FIRST, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_ACK(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_ACK 42
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_ACK, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_PUNCH(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_PUNCH 43
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_PUNCH, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_RESP(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_RESP 44
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_RESP, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_INTRO(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_INTRO 45
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_INTRO, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_RREQ(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_RREQ 46
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_RREQ, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_TCB(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_TCB 47
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_TCB, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_TBC(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_TBC 48
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_TBC, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_TTA(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_TTA 49
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_TTA, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_TFA(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_TFA 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_TFA, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_CONF(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_CONF 51
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_CONF, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_SREQ(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_SREQ 52
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_SREQ, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_TYPE_CREAT(void);
#define NetI2pRouterTransportUdpPacketBuilder_TYPE_CREAT 53
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, TYPE_CREAT, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE 37
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_FRAGMENT_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_FRAGMENT_HEADER_SIZE 7
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, FRAGMENT_HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_DATA_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_DATA_HEADER_SIZE 46
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, DATA_HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_IP_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_IP_HEADER_SIZE 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, IP_HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_UDP_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, UDP_HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MIN_DATA_PACKET_OVERHEAD(void);
#define NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD 74
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MIN_DATA_PACKET_OVERHEAD, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_IPV6_HEADER_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_IPV6_HEADER_SIZE 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, IPV6_HEADER_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MIN_IPV6_DATA_PACKET_OVERHEAD(void);
#define NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD 94
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MIN_IPV6_DATA_PACKET_OVERHEAD, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_ABSOLUTE_MAX_ACKS(void);
#define NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS 255
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, ABSOLUTE_MAX_ACKS, jint)

FOUNDATION_EXPORT void NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport);

FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketBuilder *new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketBuilder *create_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport);

FOUNDATION_EXPORT jint NetI2pRouterTransportUdpPacketBuilder_getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState_withInt_withInt_(NetI2pRouterTransportUdpPeerState *peer, jint numFragments, jint curDataSize);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPacketBuilder)

#endif

#if !defined (NetI2pRouterTransportUdpPacketBuilder_Fragment_) && (INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder || defined(INCLUDE_NetI2pRouterTransportUdpPacketBuilder_Fragment))
#define NetI2pRouterTransportUdpPacketBuilder_Fragment_

@class NetI2pRouterTransportUdpOutboundMessageState;

@interface NetI2pRouterTransportUdpPacketBuilder_Fragment : NSObject {
 @public
  NetI2pRouterTransportUdpOutboundMessageState *state_;
  jint num_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state
                                                                       withInt:(jint)num;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPacketBuilder_Fragment)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketBuilder_Fragment, state_, NetI2pRouterTransportUdpOutboundMessageState *)

FOUNDATION_EXPORT void NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpPacketBuilder_Fragment *self, NetI2pRouterTransportUdpOutboundMessageState *state, jint num);

FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketBuilder_Fragment *new_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpOutboundMessageState *state, jint num) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTransportUdpPacketBuilder_Fragment *create_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpOutboundMessageState *state, jint num);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPacketBuilder_Fragment)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTransportUdpPacketBuilder")
