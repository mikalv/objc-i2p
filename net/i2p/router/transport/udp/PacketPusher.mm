//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PacketPusher.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/RuntimeException.h"
#include "java/net/DatagramPacket.h"
#include "java/net/InetAddress.h"
#include "java/util/List.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/PacketPusher.h"
#include "net/i2p/router/transport/udp/UDPEndpoint.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPSender.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpPacketPusher () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpOutboundMessageFragments *_fragments_;
  id<JavaUtilList> _endpoints_;
  volatile_jboolean _alive_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketPusher, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketPusher, _fragments_, NetI2pRouterTransportUdpOutboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketPusher, _endpoints_, id<JavaUtilList>)

@implementation NetI2pRouterTransportUdpPacketPusher

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTransportUdpOutboundMessageFragments:(NetI2pRouterTransportUdpOutboundMessageFragments *)fragments
                                 withJavaUtilList:(id<JavaUtilList>)endpoints {
  NetI2pRouterTransportUdpPacketPusher_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_(self, ctx, fragments, endpoints);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, true);
    NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, @"UDP packet pusher", true);
    [t start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, false);
  }
}

- (void)run {
  while (JreLoadVolatileBoolean(&_alive_)) {
    @try {
      id<JavaUtilList> packets = [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) getNextVolley];
      if (packets != nil) {
        for (jint i = 0; i < [packets size]; i++) {
          [self sendWithNetI2pRouterTransportUdpUDPPacket:[packets getWithInt:i]];
        }
      }
    }
    @catch (JavaLangRuntimeException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"SSU Output Queue Error" withJavaLangThrowable:e];
    }
  }
}

- (void)sendWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  jboolean isIPv4 = ((IOSByteArray *) nil_chk([((JavaNetInetAddress *) nil_chk([((JavaNetDatagramPacket *) nil_chk([((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket])) getAddress])) getAddress]))->size_ == 4;
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(_endpoints_)) size]; j++) {
    NetI2pRouterTransportUdpUDPEndpoint *ep;
    @try {
      ep = [_endpoints_ getWithInt:j];
    }
    @catch (JavaLangIndexOutOfBoundsException *ioobe) {
      break;
    }
    if ((isIPv4 && [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(ep)) isIPv4]) || ((!isIPv4) && [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(ep)) isIPv6])) {
      [((NetI2pRouterTransportUdpUDPSender *) nil_chk([((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(ep)) getSender])) addWithNetI2pRouterTransportUdpUDPPacket:packet];
      return;
    }
  }
  [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@", @"No endpoint to send ", packet)];
  [packet release__];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_fragments_);
  RELEASE_(_endpoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpOutboundMessageFragments:withJavaUtilList:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(sendWithNetI2pRouterTransportUdpUDPPacket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragments_", "LNetI2pRouterTransportUdpOutboundMessageFragments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_endpoints_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpOutboundMessageFragments;LJavaUtilList;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/transport/udp/OutboundMessageFragments;Ljava/util/List<Lnet/i2p/router/transport/udp/UDPEndpoint;>;)V", "send", "LNetI2pRouterTransportUdpUDPPacket;", "Ljava/util/List<Lnet/i2p/router/transport/udp/UDPEndpoint;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketPusher = { "PacketPusher", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 5, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPacketPusher;
}

@end

void NetI2pRouterTransportUdpPacketPusher_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_(NetI2pRouterTransportUdpPacketPusher *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<JavaUtilList> endpoints) {
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPacketPusher_class_()]);
  JreStrongAssign(&self->_fragments_, fragments);
  JreStrongAssign(&self->_endpoints_, endpoints);
}

NetI2pRouterTransportUdpPacketPusher *new_NetI2pRouterTransportUdpPacketPusher_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<JavaUtilList> endpoints) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPacketPusher, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_, ctx, fragments, endpoints)
}

NetI2pRouterTransportUdpPacketPusher *create_NetI2pRouterTransportUdpPacketPusher_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<JavaUtilList> endpoints) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPacketPusher, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_, ctx, fragments, endpoints)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketPusher)
