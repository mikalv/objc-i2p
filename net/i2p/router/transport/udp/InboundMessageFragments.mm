//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/InboundMessageFragments.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/util/Map.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/ACKSender.h"
#include "net/i2p/router/transport/udp/InboundMessageFragments.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/MessageReceiver.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/router/util/DecayingHashSet.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpInboundMessageFragments () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterUtilDecayingBloomFilter *_recentlyCompletedMessages_;
  NetI2pRouterTransportUdpOutboundMessageFragments *_outbound_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpACKSender *_ackSender_;
  NetI2pRouterTransportUdpMessageReceiver *_messageReceiver_;
  volatile_jboolean _alive_;
}

- (void)rcvDataWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data;

- (jint)receiveMessagesWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
      withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data;

- (jint)receiveACKsWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
  withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _recentlyCompletedMessages_, NetI2pRouterUtilDecayingBloomFilter *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _outbound_, NetI2pRouterTransportUdpOutboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _ackSender_, NetI2pRouterTransportUdpACKSender *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageFragments, _messageReceiver_, NetI2pRouterTransportUdpMessageReceiver *)

inline jint NetI2pRouterTransportUdpInboundMessageFragments_get_DECAY_PERIOD(void);
#define NetI2pRouterTransportUdpInboundMessageFragments_DECAY_PERIOD 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpInboundMessageFragments, DECAY_PERIOD, jint)

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundMessageFragments_rcvDataWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data);

__attribute__((unused)) static jint NetI2pRouterTransportUdpInboundMessageFragments_receiveMessagesWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data);

__attribute__((unused)) static jint NetI2pRouterTransportUdpInboundMessageFragments_receiveACKsWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data);

@implementation NetI2pRouterTransportUdpInboundMessageFragments

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTransportUdpOutboundMessageFragments:(NetI2pRouterTransportUdpOutboundMessageFragments *)outbound
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpInboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_(self, ctx, outbound, transport);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, true);
    JreStrongAssignAndConsume(&_recentlyCompletedMessages_, new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(_context_, NetI2pRouterTransportUdpInboundMessageFragments_DECAY_PERIOD, 4, @"UDPIMF"));
    [((NetI2pRouterTransportUdpACKSender *) nil_chk(_ackSender_)) startup];
    [((NetI2pRouterTransportUdpMessageReceiver *) nil_chk(_messageReceiver_)) startup];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, false);
    if (_recentlyCompletedMessages_ != nil) [_recentlyCompletedMessages_ stopDecaying];
    JreStrongAssign(&_recentlyCompletedMessages_, nil);
    [((NetI2pRouterTransportUdpACKSender *) nil_chk(_ackSender_)) shutdown];
    [((NetI2pRouterTransportUdpMessageReceiver *) nil_chk(_messageReceiver_)) shutdown];
  }
}

- (jboolean)isAlive {
  return JreLoadVolatileBoolean(&_alive_);
}

- (void)receiveDataWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
  withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data {
  @try {
    NetI2pRouterTransportUdpInboundMessageFragments_rcvDataWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Bad pkt from: ", from) withJavaLangThrowable:dfe];
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Bad pkt from: ", from) withJavaLangThrowable:ioobe];
  }
}

- (void)rcvDataWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data {
  NetI2pRouterTransportUdpInboundMessageFragments_rcvDataWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
}

- (jint)receiveMessagesWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
      withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data {
  return NetI2pRouterTransportUdpInboundMessageFragments_receiveMessagesWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
}

- (jint)receiveACKsWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)from
  withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data {
  return NetI2pRouterTransportUdpInboundMessageFragments_receiveACKsWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_recentlyCompletedMessages_);
  RELEASE_(_outbound_);
  RELEASE_(_transport_);
  RELEASE_(_ackSender_);
  RELEASE_(_messageReceiver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 2, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 2, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpOutboundMessageFragments:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(isAlive);
  methods[4].selector = @selector(receiveDataWithNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpUDPPacketReader_DataReader:);
  methods[5].selector = @selector(rcvDataWithNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpUDPPacketReader_DataReader:);
  methods[6].selector = @selector(receiveMessagesWithNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpUDPPacketReader_DataReader:);
  methods[7].selector = @selector(receiveACKsWithNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpUDPPacketReader_DataReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recentlyCompletedMessages_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outbound_", "LNetI2pRouterTransportUdpOutboundMessageFragments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ackSender_", "LNetI2pRouterTransportUdpACKSender;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageReceiver_", "LNetI2pRouterTransportUdpMessageReceiver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "DECAY_PERIOD", "I", .constantValue.asInt = NetI2pRouterTransportUdpInboundMessageFragments_DECAY_PERIOD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpOutboundMessageFragments;LNetI2pRouterTransportUdpUDPTransport;", "receiveData", "LNetI2pRouterTransportUdpPeerState;LNetI2pRouterTransportUdpUDPPacketReader_DataReader;", "rcvData", "LNetI2pDataDataFormatException;", "receiveMessages", "receiveACKs" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpInboundMessageFragments = { "InboundMessageFragments", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 8, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpInboundMessageFragments;
}

@end

void NetI2pRouterTransportUdpInboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *outbound, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpInboundMessageFragments_class_()]);
  JreStrongAssign(&self->_outbound_, outbound);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssignAndConsume(&self->_ackSender_, new_NetI2pRouterTransportUdpACKSender_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self->_transport_));
  JreStrongAssignAndConsume(&self->_messageReceiver_, new_NetI2pRouterTransportUdpMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self->_transport_));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.receivedCompleteTime" withNSString:@"How long it takes to receive a full message" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivedCompleteFragments" withNSString:@"How many fragments go in a fully received message" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivedACKs" withNSString:@"How many messages were ACKed at a time" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.ignoreRecentDuplicate" withNSString:@"Take note that we received a packet for a recently completed message" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receivePiggyback" withNSString:@"How many acks were included in a packet with data fragments (time == # data fragments)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpInboundMessageFragments *new_NetI2pRouterTransportUdpInboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *outbound, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpInboundMessageFragments, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_, ctx, outbound, transport)
}

NetI2pRouterTransportUdpInboundMessageFragments *create_NetI2pRouterTransportUdpInboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *outbound, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpInboundMessageFragments, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_, ctx, outbound, transport)
}

void NetI2pRouterTransportUdpInboundMessageFragments_rcvDataWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data) {
  jint fragmentsIncluded = NetI2pRouterTransportUdpInboundMessageFragments_receiveMessagesWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
  jint acksIncluded = NetI2pRouterTransportUdpInboundMessageFragments_receiveACKsWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(self, from, data);
  [((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) packetReceivedWithInt:[((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(data)) getPacketSize]];
  if ((fragmentsIncluded > 0) && (acksIncluded > 0)) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.receivePiggyback" withLong:acksIncluded withLong:fragmentsIncluded];
}

jint NetI2pRouterTransportUdpInboundMessageFragments_receiveMessagesWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data) {
  jint fragments = [((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(data)) readFragmentCount];
  if (fragments <= 0) return fragments;
  NetI2pDataHash *fromPeer = [((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) getRemotePeer];
  id<JavaUtilMap> messages = [from getInboundMessages];
  for (jint i = 0; i < fragments; i++) {
    jlong mid = [data readMessageIdWithInt:i];
    JavaLangLong *messageId = JavaLangLong_valueOfWithLong_(mid);
    if ([((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(self->_recentlyCompletedMessages_)) isKnownWithLong:mid]) {
      if ([data readMessageFragmentNumWithInt:i] == 0) {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.ignoreRecentDuplicate" withLong:1];
        [from messageFullyReceivedWithJavaLangLong:messageId withInt:-1];
        [((NetI2pRouterTransportUdpACKSender *) nil_chk(self->_ackSender_)) ackPeerWithNetI2pRouterTransportUdpPeerState:from];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$J$J$I", @"Message received is a dup: ", mid, @" dups: ", [((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(self->_recentlyCompletedMessages_)) getCurrentDuplicateCount], @" out of ", [((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(self->_recentlyCompletedMessages_)) getInsertedCount])];
        [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) droppedInboundMessageWithLong:mid withNetI2pDataHash:[from getRemotePeer] withNSString:@"dup"];
      }
      continue;
    }
    NetI2pRouterTransportUdpInboundMessageState *state;
    jboolean messageComplete = false;
    jboolean messageExpired = false;
    jboolean fragmentOK;
    jboolean partialACK = false;
    @synchronized(messages) {
      jboolean isNew = false;
      state = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(messages)) getWithId:messageId]);
      if (state == nil) {
        state = JreRetainedLocalValue(create_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_(self->_context_, mid, fromPeer, data, i));
        isNew = true;
        fragmentOK = true;
      }
      else {
        fragmentOK = [state receiveFragmentWithNetI2pRouterTransportUdpUDPPacketReader_DataReader:data withInt:i];
      }
      if ([state isComplete]) {
        messageComplete = true;
        if (!isNew) [messages removeWithId:messageId];
      }
      else if ([state isExpired]) {
        messageExpired = true;
        if (!isNew) [messages removeWithId:messageId];
      }
      else {
        partialACK = true;
        if (isNew) [messages putWithId:messageId withId:state];
      }
    }
    if (messageComplete) {
      [((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(self->_recentlyCompletedMessages_)) addWithLong:mid];
      [from messageFullyReceivedWithJavaLangLong:messageId withInt:[state getCompleteSize]];
      [((NetI2pRouterTransportUdpACKSender *) nil_chk(self->_ackSender_)) ackPeerWithNetI2pRouterTransportUdpPeerState:from];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Message received completely!  ", state)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.receivedCompleteTime" withLong:[state getLifetime] withLong:[state getLifetime]];
      if ([state getFragmentCount] > 0) [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.receivedCompleteFragments" withLong:[state getFragmentCount] withLong:[state getLifetime]];
      [((NetI2pRouterTransportUdpMessageReceiver *) nil_chk(self->_messageReceiver_)) receiveMessageWithNetI2pRouterTransportUdpInboundMessageState:state];
    }
    else if (messageExpired) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Message expired while only being partially read: ", state)];
      [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) messageHistory])) droppedInboundMessageWithLong:[state getMessageId] withNetI2pDataHash:[state getFrom] withNSString:JreStrcat("$$", @"expired while partially read: ", [state description])];
      [state releaseResources];
    }
    else if (partialACK) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Queueing up a partial ACK for peer: ", from, @" for ", state)];
      [from messagePartiallyReceived];
      [((NetI2pRouterTransportUdpACKSender *) nil_chk(self->_ackSender_)) ackPeerWithNetI2pRouterTransportUdpPeerState:from];
    }
    if (!fragmentOK) break;
  }
  [from expireInboundMessages];
  return fragments;
}

jint NetI2pRouterTransportUdpInboundMessageFragments_receiveACKsWithNetI2pRouterTransportUdpPeerState_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_(NetI2pRouterTransportUdpInboundMessageFragments *self, NetI2pRouterTransportUdpPeerState *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data) {
  jint rv = 0;
  jboolean newAck = false;
  if ([((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(data)) readACKsIncluded]) {
    jint ackCount = [data readACKCount];
    if (ackCount > 0) {
      rv += ackCount;
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.receivedACKs" withLong:ackCount];
      for (jint i = 0; i < ackCount; i++) {
        jlong id_ = [data readACKWithInt:i];
        if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) ackedWithLong:id_]) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$@", @"First full ACK of message ", id_, @" received from ", [from getRemotePeer])];
          newAck = true;
        }
      }
    }
    else {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@", @"Received ACKs with no acks?! ", data)];
    }
  }
  if ([data readACKBitfieldsIncluded]) {
    IOSObjectArray *bitfields = [data readACKBitfields];
    if (bitfields != nil) {
      rv += bitfields->size_;
      for (jint i = 0; i < bitfields->size_; i++) {
        if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) ackedWithNetI2pRouterTransportUdpACKBitfield:IOSObjectArray_Get(bitfields, i)]) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Final partial ACK received: ", IOSObjectArray_Get(bitfields, i), @" from ", [from getRemotePeer])];
          newAck = true;
        }
        else if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
          [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Partial ACK received: ", IOSObjectArray_Get(bitfields, i), @" from ", [from getRemotePeer])];
        }
      }
    }
  }
  if ([data readECN]) [((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) ECNReceived];
  else [((NetI2pRouterTransportUdpPeerState *) nil_chk(from)) dataReceived];
  if (newAck && [from getOutboundMessageCount] > 0) [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(self->_outbound_)) addWithNetI2pRouterTransportUdpPeerState:from withInt:0];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpInboundMessageFragments)
