//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPTransport.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTransportUdpUDPTransport")
#ifdef RESTRICT_NetI2pRouterTransportUdpUDPTransport
#define INCLUDE_ALL_NetI2pRouterTransportUdpUDPTransport 0
#else
#define INCLUDE_ALL_NetI2pRouterTransportUdpUDPTransport 1
#endif
#undef RESTRICT_NetI2pRouterTransportUdpUDPTransport

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTransportUdpUDPTransport_) && (INCLUDE_ALL_NetI2pRouterTransportUdpUDPTransport || defined(INCLUDE_NetI2pRouterTransportUdpUDPTransport))
#define NetI2pRouterTransportUdpUDPTransport_

#define RESTRICT_NetI2pRouterTransportTransportImpl 1
#define INCLUDE_NetI2pRouterTransportTransportImpl 1
#include "net/i2p/router/transport/TransportImpl.h"

#define RESTRICT_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue 1
#define INCLUDE_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener 1
#include "net/i2p/router/transport/udp/TimedWeightedPriorityMessageQueue.h"

@class IOSByteArray;
@class IOSLongArray;
@class JavaIoWriter;
@class JavaUtilVector;
@class NetI2pDataHash;
@class NetI2pDataRouterRouterAddress;
@class NetI2pDataRouterRouterIdentity;
@class NetI2pDataRouterRouterInfo;
@class NetI2pDataSessionKey;
@class NetI2pRouterCommSystemFacade_Status;
@class NetI2pRouterOutNetMessage;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTransportCryptoDHSessionKeyBuilder;
@class NetI2pRouterTransportTransportBid;
@class NetI2pRouterTransportTransport_AddressSource;
@class NetI2pRouterTransportUdpEstablishmentManager;
@class NetI2pRouterTransportUdpOutboundMessageState;
@class NetI2pRouterTransportUdpPacketHandler;
@class NetI2pRouterTransportUdpPeerState;
@class NetI2pRouterTransportUdpPeerTestState_Role;
@class NetI2pRouterTransportUdpRemoteHostId;
@class NetI2pRouterTransportUdpUDPEndpoint;
@class NetI2pRouterTransportUdpUDPPacket;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol NetI2pDataI2npI2NPMessage;
@protocol NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;

@interface NetI2pRouterTransportUdpUDPTransport : NetI2pRouterTransportTransportImpl < NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener >
@property (readonly, copy, class) NSString *STYLE NS_SWIFT_NAME(STYLE);
@property (readonly, copy, class) NSString *PROP_INTERNAL_PORT NS_SWIFT_NAME(PROP_INTERNAL_PORT);
@property (readonly, class) jint DEFAULT_INTERNAL_PORT NS_SWIFT_NAME(DEFAULT_INTERNAL_PORT);
@property (readonly, copy, class) NSString *PROP_EXTERNAL_HOST NS_SWIFT_NAME(PROP_EXTERNAL_HOST);
@property (readonly, copy, class) NSString *PROP_EXTERNAL_PORT NS_SWIFT_NAME(PROP_EXTERNAL_PORT);
@property (readonly, copy, class) NSString *PROP_PREFER_UDP NS_SWIFT_NAME(PROP_PREFER_UDP);
@property (readonly, copy, class) NSString *PROP_SOURCES NS_SWIFT_NAME(PROP_SOURCES);
@property (readonly, copy, class) NSString *DEFAULT_SOURCES NS_SWIFT_NAME(DEFAULT_SOURCES);
@property (readonly, copy, class) NSString *PROP_IP NS_SWIFT_NAME(PROP_IP);
@property (readonly, copy, class) NSString *PROP_IP_CHANGE NS_SWIFT_NAME(PROP_IP_CHANGE);
@property (readonly, copy, class) NSString *PROP_LAPTOP_MODE NS_SWIFT_NAME(PROP_LAPTOP_MODE);
@property (readonly, copy, class) NSString *PROP_FORCE_INTRODUCERS NS_SWIFT_NAME(PROP_FORCE_INTRODUCERS);
@property (readonly, copy, class) NSString *PROP_ALLOW_DIRECT NS_SWIFT_NAME(PROP_ALLOW_DIRECT);
@property (readonly, copy, class) NSString *PROP_BIND_INTERFACE NS_SWIFT_NAME(PROP_BIND_INTERFACE);
@property (readonly, class) jint PUBLIC_RELAY_COUNT NS_SWIFT_NAME(PUBLIC_RELAY_COUNT);
@property (readonly, class) jint DEFAULT_COST NS_SWIFT_NAME(DEFAULT_COST);
@property (readonly, class, strong) IOSLongArray *RATES NS_SWIFT_NAME(RATES);
@property (readonly, class) jlong INTRODUCER_EXPIRATION_MARGIN NS_SWIFT_NAME(INTRODUCER_EXPIRATION_MARGIN);
@property (readonly, class) jint EXPIRE_TIMEOUT NS_SWIFT_NAME(EXPIRE_TIMEOUT);
@property (readonly, class) jint MIN_EXPIRE_TIMEOUT NS_SWIFT_NAME(MIN_EXPIRE_TIMEOUT);

+ (NSString *)STYLE;

+ (NSString *)PROP_INTERNAL_PORT;

+ (jint)DEFAULT_INTERNAL_PORT;

+ (NSString *)PROP_EXTERNAL_HOST;

+ (NSString *)PROP_EXTERNAL_PORT;

+ (NSString *)PROP_PREFER_UDP;

+ (NSString *)PROP_SOURCES;

+ (NSString *)DEFAULT_SOURCES;

+ (NSString *)PROP_IP;

+ (NSString *)PROP_IP_CHANGE;

+ (NSString *)PROP_LAPTOP_MODE;

+ (NSString *)PROP_FORCE_INTRODUCERS;

+ (NSString *)PROP_ALLOW_DIRECT;

+ (NSString *)PROP_BIND_INTERFACE;

+ (jint)PUBLIC_RELAY_COUNT;

+ (jint)DEFAULT_COST;

+ (IOSLongArray *)RATES;

+ (jlong)INTRODUCER_EXPIRATION_MARGIN;

+ (jint)EXPIRE_TIMEOUT;

+ (jint)MIN_EXPIRE_TIMEOUT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
 withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:(id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)dh;

- (jboolean)allowConnection;

- (NetI2pRouterTransportTransportBid *)bidWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)toAddress
                                                                 withInt:(jint)dataSize;

- (jint)countActivePeers;

- (jint)countActiveSendPeers;

- (jint)countPeers;

- (void)externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                  withByteArray:(IOSByteArray *)ip
                                                                        withInt:(jint)port;

- (void)failWithNetI2pRouterTransportUdpUDPEndpoint:(NetI2pRouterTransportUdpUDPEndpoint *)endpoint;

- (void)failedWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg;

- (void)failedWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                               withNSString:(NSString *)reason;

- (void)forwardPortStatusWithByteArray:(IOSByteArray *)ip
                               withInt:(jint)port
                               withInt:(jint)externalPort
                           withBoolean:(jboolean)success
                          withNSString:(NSString *)reason;

- (JavaUtilVector *)getClockSkews;

- (id<JavaUtilSet>)getEstablished;

- (jint)getMTUWithBoolean:(jboolean)ipv6;

- (id<JavaUtilCollection>)getPeers;

- (NetI2pRouterCommSystemFacade_Status *)getReachabilityStatus;

- (jint)getRequestedPort;

- (NSString *)getStyle;

- (jboolean)introducersRequired;

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)dest;

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)dest;

- (jboolean)isValidWithByteArray:(IOSByteArray *)addr;

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (void)messageReceivedWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)inMsg
                  withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)remoteIdent
                                  withNetI2pDataHash:(NetI2pDataHash *)remoteIdentHash
                                            withLong:(jlong)msToReceive
                                             withInt:(jint)bytesReceived;

- (void)recheckReachability;

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags;

- (void)sendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg;

- (void)shutdown;

- (void)startListening;

- (void)stopListening;

- (void)succeededWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg;

- (id<JavaUtilList>)updateAddress;

#pragma mark Protected

- (void)outboundMessageReady;

- (void)removeAddressWithBoolean:(jboolean)ipv6;

- (void)removeAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address;

- (void)replaceAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address;

#pragma mark Package-Private

- (jboolean)addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (jboolean)canIntroduce;

- (void)changePeerPortWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                    withInt:(jint)newPort;

- (void)dropPeerWithNetI2pDataHash:(NetI2pDataHash *)peer
                       withBoolean:(jboolean)shouldBanlist
                      withNSString:(NSString *)why;

- (void)dropPeerWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                          withBoolean:(jboolean)shouldBanlist
                                         withNSString:(NSString *)why;

- (void)externalAddressReceivedWithNetI2pDataHash:(NetI2pDataHash *)from
                                    withByteArray:(IOSByteArray *)ourIP
                                          withInt:(jint)ourPort;

- (void)failedWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg
                                                   withBoolean:(jboolean)allowPeerFailure;

- (NetI2pRouterTransportCryptoDHSessionKeyBuilder *)getDHBuilder;

- (id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)getDHFactory;

- (NetI2pRouterTransportUdpEstablishmentManager *)getEstablisher;

- (IOSByteArray *)getExternalIP;

- (jint)getExternalPortWithBoolean:(jboolean)ipv6;

- (NetI2pDataSessionKey *)getIntroKey;

- (NetI2pRouterTransportUdpPacketHandler *)getPacketHandler;

- (NSString *)getPacketHandlerStatus;

- (NetI2pRouterTransportUdpPeerState *)getPeerStateWithNetI2pDataHash:(NetI2pDataHash *)remotePeer;

- (NetI2pRouterTransportUdpPeerState *)getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)hostInfo;

- (id<JavaUtilList>)getPeerStatesByIPWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)hostInfo;

- (NetI2pDataRouterRouterAddress *)getTargetAddressWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target;

- (jboolean)hasIPv6Address;

- (void)inboundConnectionReceivedWithBoolean:(jboolean)isIPv6;

- (jboolean)introducersMaybeRequired;

- (jboolean)isInDropListWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)peer;

- (jboolean)isTooCloseWithByteArray:(IOSByteArray *)ip;

- (NetI2pRouterTransportUdpPeerState *)pickTestPeerWithNetI2pRouterTransportUdpPeerTestState_Role:(NetI2pRouterTransportUdpPeerTestState_Role *)peerRole
                                                                                      withBoolean:(jboolean)isIPv6
                                                         withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)dontInclude;

- (void)sendWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                         withJavaUtilList:(id<JavaUtilList>)msgs
    withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)sendWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
    withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)sendWithJavaUtilList:(id<JavaUtilList>)msgs
withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)sendWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet;

- (void)sendDestroyWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)sendIfEstablishedWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg;

- (void)setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status
                                                         withBoolean:(jboolean)isIPv6;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportUdpUDPTransport)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_STYLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_STYLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, STYLE, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_INTERNAL_PORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_INTERNAL_PORT, NSString *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_DEFAULT_INTERNAL_PORT(void);
#define NetI2pRouterTransportUdpUDPTransport_DEFAULT_INTERNAL_PORT 8887
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, DEFAULT_INTERNAL_PORT, jint)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_EXTERNAL_HOST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_EXTERNAL_HOST, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_EXTERNAL_PORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_EXTERNAL_PORT, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_PREFER_UDP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_PREFER_UDP, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_SOURCES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_SOURCES, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_DEFAULT_SOURCES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, DEFAULT_SOURCES, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_IP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_IP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_IP, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_IP_CHANGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_IP_CHANGE, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_LAPTOP_MODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_LAPTOP_MODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_LAPTOP_MODE, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_FORCE_INTRODUCERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_FORCE_INTRODUCERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_FORCE_INTRODUCERS, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_ALLOW_DIRECT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_ALLOW_DIRECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_ALLOW_DIRECT, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_BIND_INTERFACE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPTransport_PROP_BIND_INTERFACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_BIND_INTERFACE, NSString *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_PUBLIC_RELAY_COUNT(void);
#define NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, PUBLIC_RELAY_COUNT, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_DEFAULT_COST(void);
#define NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, DEFAULT_COST, jint)

inline IOSLongArray *NetI2pRouterTransportUdpUDPTransport_get_RATES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *NetI2pRouterTransportUdpUDPTransport_RATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, RATES, IOSLongArray *)

inline jlong NetI2pRouterTransportUdpUDPTransport_get_INTRODUCER_EXPIRATION_MARGIN(void);
#define NetI2pRouterTransportUdpUDPTransport_INTRODUCER_EXPIRATION_MARGIN 1200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, INTRODUCER_EXPIRATION_MARGIN, jlong)

inline jint NetI2pRouterTransportUdpUDPTransport_get_EXPIRE_TIMEOUT(void);
#define NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT 1200000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, EXPIRE_TIMEOUT, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MIN_EXPIRE_TIMEOUT(void);
#define NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT 165000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MIN_EXPIRE_TIMEOUT, jint)

FOUNDATION_EXPORT void NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh);

FOUNDATION_EXPORT NetI2pRouterTransportUdpUDPTransport *new_NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTransportUdpUDPTransport *create_NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPTransport)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTransportUdpUDPTransport")
