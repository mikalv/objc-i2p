//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPTransport.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet4Address.h"
#include "java/net/InetAddress.h"
#include "java/net/SocketException.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/Vector.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportBid.h"
#include "net/i2p/router/transport/TransportImpl.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/udp/DummyThrottle.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/InboundMessageFragments.h"
#include "net/i2p/router/transport/udp/IntroductionManager.h"
#include "net/i2p/router/transport/udp/MTU.h"
#include "net/i2p/router/transport/udp/MessageQueue.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/OutboundMessageState.h"
#include "net/i2p/router/transport/udp/OutboundRefiller.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PacketHandler.h"
#include "net/i2p/router/transport/udp/PacketPusher.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/PeerTestEvent.h"
#include "net/i2p/router/transport/udp/PeerTestManager.h"
#include "net/i2p/router/transport/udp/PeerTestState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPEndpoint.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/router/util/RandomIterator.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/VersionComparator.h"

@class NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent;

@interface NetI2pRouterTransportUdpUDPTransport () {
 @public
  NetI2pUtilLog *_log_UDPTransport_;
  id<JavaUtilList> _endpoints_;
  id _addDropLock_;
  id<JavaUtilMap> _peersByIdent_;
  id<JavaUtilMap> _peersByRemoteHost_;
  NetI2pRouterTransportUdpPacketHandler *_handler_;
  NetI2pRouterTransportUdpEstablishmentManager *_establisher_;
  id<NetI2pRouterTransportUdpMessageQueue> _outboundMessages_;
  NetI2pRouterTransportUdpOutboundMessageFragments *_fragments_;
  id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle> _activeThrottle_;
  NetI2pRouterTransportUdpOutboundRefiller *_refiller_;
  volatile_id _pusher_;
  NetI2pRouterTransportUdpInboundMessageFragments *_inboundFragments_;
  NetI2pRouterTransportUdpPeerTestManager *_testManager_;
  NetI2pRouterTransportUdpIntroductionManager *_introManager_;
  NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *_expireEvent_;
  NetI2pRouterTransportUdpPeerTestEvent *_testEvent_;
  NetI2pRouterTransportUdpPacketBuilder *_destroyBuilder_;
  NetI2pRouterCommSystemFacade_Status *_reachabilityStatus_;
  NetI2pRouterCommSystemFacade_Status *_reachabilityStatusPending_;
  jlong _reachabilityStatusLastUpdated_;
  jint _reachabilityStatusUnchanged_;
  jlong _introducersSelectedOn_;
  jlong _lastInboundReceivedOn_;
  id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> _dhFactory_;
  jint _mtu_;
  jint _mtu_ipv6_;
  jboolean _mismatchLogged_;
  jint _networkID_;
  volatile_jboolean _haveIPv6Address_;
  jlong _lastInboundIPv6_;
  jint _min_peers_;
  jint _min_v6_peers_;
  jboolean _needsRebuild_;
  id _rebuildLock_;
  NetI2pDataSessionKey *_introKey_;
  id<JavaUtilSet> _dropList_;
  volatile_jlong _expireTimeout_;
  NetI2pDataHash *_lastFrom_;
  IOSByteArray *_lastOurIP_;
  jint _lastOurPort_;
  NetI2pDataRouterRouterAddress *_currentOurV4Address_;
  NetI2pDataRouterRouterAddress *_currentOurV6Address_;
  IOSObjectArray *_cachedBid_;
  jboolean gotIPv4Addr_;
  jboolean gotIPv6Addr_;
}

- (void)setupPort;

- (void)startup;

- (jboolean)isAlive;

- (jint)getListenPortWithBoolean:(jboolean)ipv6;

- (jint)getRequestedPortWithBoolean:(jboolean)ipv6;

- (jint)setMTUWithJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (jboolean)changeAddressWithByteArray:(IOSByteArray *)ourIP
                               withInt:(jint)ourPort;

+ (jboolean)eqWithByteArray:(IOSByteArray *)laddr
                    withInt:(jint)lport
              withByteArray:(IOSByteArray *)raddr
                    withInt:(jint)rport;

- (jboolean)getIsPortFixed;

- (jboolean)locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)locked_dropPeerWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                 withBoolean:(jboolean)shouldBanlist
                                                withNSString:(NSString *)why;

- (void)rebuildIfNecessary;

- (jboolean)locked_needsRebuild;

- (void)dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)destroyAll;

- (jboolean)preferUDP;

- (jboolean)alwaysPreferUDP;

- (jboolean)explicitAddressSpecified;

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddress;

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithBoolean:(jboolean)allowRebuildRouterInfo;

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithByteArray:(IOSByteArray *)ip
                                                               withInt:(jint)port
                                                           withBoolean:(jboolean)allowRebuildRouterInfo;

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithNSString:(NSString *)host
                                                              withInt:(jint)port
                                                          withBoolean:(jboolean)allowRebuildRouterInfo;

- (NetI2pDataRouterRouterAddress *)locked_rebuildExternalAddressWithNSString:(NSString *)host
                                                                     withInt:(jint)port
                                                                 withBoolean:(jboolean)allowRebuildRouterInfo;

- (void)replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)ra
                                                           withBoolean:(jboolean)isIPv6;

- (NetI2pDataRouterRouterAddress *)getCurrentExternalAddressWithBoolean:(jboolean)isIPv6;

- (jboolean)allowDirectUDP;

- (void)noteSendWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg
                                                     withBoolean:(jboolean)successful;

- (void)setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status;

- (void)locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)newStatus
                                                                withBoolean:(jboolean)isIPv6;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _log_UDPTransport_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _endpoints_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _addDropLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _peersByIdent_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _peersByRemoteHost_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _handler_, NetI2pRouterTransportUdpPacketHandler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _establisher_, NetI2pRouterTransportUdpEstablishmentManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _outboundMessages_, id<NetI2pRouterTransportUdpMessageQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _fragments_, NetI2pRouterTransportUdpOutboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _activeThrottle_, id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _refiller_, NetI2pRouterTransportUdpOutboundRefiller *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _pusher_, NetI2pRouterTransportUdpPacketPusher *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _inboundFragments_, NetI2pRouterTransportUdpInboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _testManager_, NetI2pRouterTransportUdpPeerTestManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _introManager_, NetI2pRouterTransportUdpIntroductionManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _expireEvent_, NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _testEvent_, NetI2pRouterTransportUdpPeerTestEvent *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _destroyBuilder_, NetI2pRouterTransportUdpPacketBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _reachabilityStatus_, NetI2pRouterCommSystemFacade_Status *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _reachabilityStatusPending_, NetI2pRouterCommSystemFacade_Status *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _dhFactory_, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _rebuildLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _introKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _dropList_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _lastFrom_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _lastOurIP_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _currentOurV4Address_, NetI2pDataRouterRouterAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _currentOurV6Address_, NetI2pDataRouterRouterAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport, _cachedBid_, IOSObjectArray *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_DROPLIST_PERIOD(void);
#define NetI2pRouterTransportUdpUDPTransport_DROPLIST_PERIOD 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, DROPLIST_PERIOD, jint)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_DEFAULT_PREFER_UDP(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_DEFAULT_PREFER_UDP = @"false";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, DEFAULT_PREFER_UDP, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_FIXED_PORT(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_PROP_FIXED_PORT = @"i2np.udp.fixedPort";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_FIXED_PORT, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_DEFAULT_MTU(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_PROP_DEFAULT_MTU = @"i2np.udp.mtu";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_DEFAULT_MTU, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_ADVANCED(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_PROP_ADVANCED = @"routerconsole.advanced";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_ADVANCED, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_CAP_TESTING(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_CAP_TESTING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, CAP_TESTING, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_CAP_TESTING_INTRO(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_CAP_TESTING_INTRO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, CAP_TESTING_INTRO, NSString *)

inline jboolean NetI2pRouterTransportUdpUDPTransport_get_USE_PRIORITY(void);
#define NetI2pRouterTransportUdpUDPTransport_USE_PRIORITY false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, USE_PRIORITY, jboolean)

inline IOSIntArray *NetI2pRouterTransportUdpUDPTransport_get_PRIORITY_LIMITS(void);
static IOSIntArray *NetI2pRouterTransportUdpUDPTransport_PRIORITY_LIMITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PRIORITY_LIMITS, IOSIntArray *)

inline IOSIntArray *NetI2pRouterTransportUdpUDPTransport_get_PRIORITY_WEIGHT(void);
static IOSIntArray *NetI2pRouterTransportUdpUDPTransport_PRIORITY_WEIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PRIORITY_WEIGHT, IOSIntArray *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MAX_CONSECUTIVE_FAILED(void);
#define NetI2pRouterTransportUdpUDPTransport_MAX_CONSECUTIVE_FAILED 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MAX_CONSECUTIVE_FAILED, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MIN_PEERS(void);
#define NetI2pRouterTransportUdpUDPTransport_MIN_PEERS 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MIN_PEERS, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MIN_PEERS_IF_HAVE_V6(void);
#define NetI2pRouterTransportUdpUDPTransport_MIN_PEERS_IF_HAVE_V6 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MIN_PEERS_IF_HAVE_V6, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MIN_INTRODUCER_POOL(void);
#define NetI2pRouterTransportUdpUDPTransport_MIN_INTRODUCER_POOL 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MIN_INTRODUCER_POOL, jint)

inline IOSIntArray *NetI2pRouterTransportUdpUDPTransport_get_BID_VALUES(void);
static IOSIntArray *NetI2pRouterTransportUdpUDPTransport_BID_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, BID_VALUES, IOSIntArray *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_FAST_PREFERRED_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_FAST_PREFERRED_BID 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, FAST_PREFERRED_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_SLOW_PREFERRED_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_SLOW_PREFERRED_BID 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, SLOW_PREFERRED_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_FAST_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_FAST_BID 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, FAST_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_SLOW_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_SLOW_BID 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, SLOW_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_SLOWEST_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_SLOWEST_BID 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, SLOWEST_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_SLOWEST_COST_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_SLOWEST_COST_BID 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, SLOWEST_COST_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_NEAR_CAPACITY_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_BID 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, NEAR_CAPACITY_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_NEAR_CAPACITY_COST_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_COST_BID 7
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, NEAR_CAPACITY_COST_BID, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_TRANSIENT_FAIL_BID(void);
#define NetI2pRouterTransportUdpUDPTransport_TRANSIENT_FAIL_BID 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, TRANSIENT_FAIL_BID, jint)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_THINSP(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_THINSP = @" / ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, THINSP, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_MIN_SIGTYPE_VERSION(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_MIN_SIGTYPE_VERSION = @"0.9.17";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, MIN_SIGTYPE_VERSION, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_MIN_V6_PEER_TEST_VERSION(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_MIN_V6_PEER_TEST_VERSION = @"0.9.27";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, MIN_V6_PEER_TEST_VERSION, NSString *)

inline jint NetI2pRouterTransportUdpUDPTransport_get_ALLOW_IP_CHANGE_INTERVAL(void);
#define NetI2pRouterTransportUdpUDPTransport_ALLOW_IP_CHANGE_INTERVAL 120000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, ALLOW_IP_CHANGE_INTERVAL, jint)

inline jint NetI2pRouterTransportUdpUDPTransport_get_MAX_IDLE_TIME(void);
#define NetI2pRouterTransportUdpUDPTransport_MAX_IDLE_TIME 1200000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport, MAX_IDLE_TIME, jint)

inline NSString *NetI2pRouterTransportUdpUDPTransport_get_PROP_REACHABILITY_STATUS_OVERRIDE(void);
static NSString *NetI2pRouterTransportUdpUDPTransport_PROP_REACHABILITY_STATUS_OVERRIDE = @"i2np.udp.status";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPTransport, PROP_REACHABILITY_STATUS_OVERRIDE, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_setupPort(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_startup(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_isAlive(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean ipv6);

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean ipv6);

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(NetI2pRouterTransportUdpUDPTransport *self, JavaNetInetAddress *addr);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_changeAddressWithByteArray_withInt_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *ourIP, jint ourPort);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_eqWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *laddr, jint lport, IOSByteArray *raddr, jint rport);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *addr);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_getIsPortFixed(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer, jboolean shouldBanlist, NSString *why);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_rebuildIfNecessary(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_locked_needsRebuild(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_destroyAll(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_preferUDP(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_alwaysPreferUDP(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean allowRebuildRouterInfo);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithByteArray_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *ip, jint port, jboolean allowRebuildRouterInfo);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NSString *host, jint port, jboolean allowRebuildRouterInfo);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_locked_rebuildExternalAddressWithNSString_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NSString *host, jint port, jboolean allowRebuildRouterInfo);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pDataRouterRouterAddress *ra, jboolean isIPv6);

__attribute__((unused)) static NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean isIPv6);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(NetI2pRouterTransportUdpUDPTransport *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_noteSendWithNetI2pRouterTransportUdpOutboundMessageState_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpOutboundMessageState *msg, jboolean successful);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterCommSystemFacade_Status *status);

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterCommSystemFacade_Status *newStatus, jboolean isIPv6);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$2(void);

@interface NetI2pRouterTransportUdpUDPTransport_RemoveDropList : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportUdpUDPTransport *this$0_;
  NetI2pRouterTransportUdpRemoteHostId *_peer_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$
                    withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)peer;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPTransport_RemoveDropList)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport_RemoveDropList, _peer_, NetI2pRouterTransportUdpRemoteHostId *)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport_RemoveDropList *self, NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_RemoveDropList *new_NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_RemoveDropList *create_NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPTransport_RemoveDropList)

@interface NetI2pRouterTransportUdpUDPTransport_SharedBid : NetI2pRouterTransportTransportBid {
 @public
  NetI2pRouterTransportUdpUDPTransport *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$
                                                     withInt:(jint)ms;

- (id<NetI2pRouterTransportTransport>)getTransport;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPTransport_SharedBid)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport_SharedBid *self, NetI2pRouterTransportUdpUDPTransport *outer$, jint ms);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_SharedBid *new_NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport *outer$, jint ms) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_SharedBid *create_NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport *outer$, jint ms);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPTransport_SharedBid)

@interface NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTransportUdpUDPTransport *this$0_;
  id<JavaUtilSet> _expirePeers_;
  id<JavaUtilList> _expireBuffer_;
  volatile_jboolean _alive_;
  jint _runCount_;
  jboolean _lastLoopShort_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$;

- (void)timeReached;

- (void)addWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)removeWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (void)setIsAliveWithBoolean:(jboolean)isAlive;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, _expirePeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, _expireBuffer_, id<JavaUtilList>)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_PING_FIREWALL_TIME(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_PING_FIREWALL_TIME 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, PING_FIREWALL_TIME, jlong)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_PING_FIREWALL_CUTOFF(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_PING_FIREWALL_CUTOFF 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, PING_FIREWALL_CUTOFF, jlong)

inline jint NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_SLICES(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SLICES 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, SLICES, jint)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_SHORT_LOOP_TIME(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SHORT_LOOP_TIME 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, SHORT_LOOP_TIME, jlong)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_LONG_LOOP_TIME(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME 25000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, LONG_LOOP_TIME, jlong)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_EXPIRE_INCREMENT(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_INCREMENT 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, EXPIRE_INCREMENT, jlong)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_EXPIRE_DECREMENT(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_DECREMENT 45000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, EXPIRE_DECREMENT, jlong)

inline jlong NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_get_MAY_DISCON_TIMEOUT(void);
#define NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_MAY_DISCON_TIMEOUT 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, MAY_DISCON_TIMEOUT, jlong)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *self, NetI2pRouterTransportUdpUDPTransport *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *new_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *create_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent)

@interface NetI2pRouterTransportUdpUDPTransport_PingIntroducers : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportUdpUDPTransport *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPTransport_PingIntroducers)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport_PingIntroducers *self, NetI2pRouterTransportUdpUDPTransport *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_PingIntroducers *new_NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPTransport_PingIntroducers *create_NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPTransport_PingIntroducers)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpUDPTransport)

NSString *NetI2pRouterTransportUdpUDPTransport_STYLE = @"SSU";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT = @"i2np.udp.internalPort";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST = @"i2np.udp.host";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT = @"i2np.udp.port";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP = @"i2np.udp.preferred";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES = @"i2np.udp.addressSources";
NSString *NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES;
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_IP = @"i2np.lastIP";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE = @"i2np.lastIPChange";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_LAPTOP_MODE = @"i2np.laptopMode";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_FORCE_INTRODUCERS = @"i2np.udp.forceIntroducers";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_ALLOW_DIRECT = @"i2np.udp.allowDirect";
NSString *NetI2pRouterTransportUdpUDPTransport_PROP_BIND_INTERFACE = @"i2np.udp.bindInterface";
IOSLongArray *NetI2pRouterTransportUdpUDPTransport_RATES;

@implementation NetI2pRouterTransportUdpUDPTransport

+ (NSString *)STYLE {
  return NetI2pRouterTransportUdpUDPTransport_STYLE;
}

+ (NSString *)PROP_INTERNAL_PORT {
  return NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT;
}

+ (jint)DEFAULT_INTERNAL_PORT {
  return NetI2pRouterTransportUdpUDPTransport_DEFAULT_INTERNAL_PORT;
}

+ (NSString *)PROP_EXTERNAL_HOST {
  return NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST;
}

+ (NSString *)PROP_EXTERNAL_PORT {
  return NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT;
}

+ (NSString *)PROP_PREFER_UDP {
  return NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP;
}

+ (NSString *)PROP_SOURCES {
  return NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES;
}

+ (NSString *)DEFAULT_SOURCES {
  return NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES;
}

+ (NSString *)PROP_IP {
  return NetI2pRouterTransportUdpUDPTransport_PROP_IP;
}

+ (NSString *)PROP_IP_CHANGE {
  return NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE;
}

+ (NSString *)PROP_LAPTOP_MODE {
  return NetI2pRouterTransportUdpUDPTransport_PROP_LAPTOP_MODE;
}

+ (NSString *)PROP_FORCE_INTRODUCERS {
  return NetI2pRouterTransportUdpUDPTransport_PROP_FORCE_INTRODUCERS;
}

+ (NSString *)PROP_ALLOW_DIRECT {
  return NetI2pRouterTransportUdpUDPTransport_PROP_ALLOW_DIRECT;
}

+ (NSString *)PROP_BIND_INTERFACE {
  return NetI2pRouterTransportUdpUDPTransport_PROP_BIND_INTERFACE;
}

+ (jint)PUBLIC_RELAY_COUNT {
  return NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT;
}

+ (jint)DEFAULT_COST {
  return NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST;
}

+ (IOSLongArray *)RATES {
  return NetI2pRouterTransportUdpUDPTransport_RATES;
}

+ (jlong)INTRODUCER_EXPIRATION_MARGIN {
  return NetI2pRouterTransportUdpUDPTransport_INTRODUCER_EXPIRATION_MARGIN;
}

+ (jint)EXPIRE_TIMEOUT {
  return NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT;
}

+ (jint)MIN_EXPIRE_TIMEOUT {
  return NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:(id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)dh {
  NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(self, ctx, dh);
  return self;
}

- (void)setupPort {
  NetI2pRouterTransportUdpUDPTransport_setupPort(self);
}

- (void)startup {
  NetI2pRouterTransportUdpUDPTransport_startup(self);
}

- (void)shutdown {
  @synchronized(self) {
    NetI2pRouterTransportUdpUDPTransport_destroyAll(self);
    for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in nil_chk(_endpoints_)) {
      [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) shutdown];
      [_endpoints_ removeWithId:endpoint];
    }
    if (_refiller_ != nil) [_refiller_ shutdown];
    if (_handler_ != nil) [_handler_ shutdown];
    if (JreLoadVolatileId(&_pusher_) != nil) [((NetI2pRouterTransportUdpPacketPusher *) nil_chk(JreLoadVolatileId(&_pusher_))) shutdown];
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) shutdown];
    if (_establisher_ != nil) [_establisher_ shutdown];
    [((NetI2pRouterTransportUdpInboundMessageFragments *) nil_chk(_inboundFragments_)) shutdown];
    [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(_expireEvent_)) setIsAliveWithBoolean:false];
    [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(_testEvent_)) setIsAliveWithBoolean:false];
    [((id<JavaUtilMap>) nil_chk(_peersByRemoteHost_)) clear];
    [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) clear];
    [((id<JavaUtilSet>) nil_chk(_dropList_)) clear];
    [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(_introManager_)) reset];
    NetI2pRouterTransportUdpUDPPacket_clearCache();
    NetI2pRouterTransportUdpUDPAddress_clearCache();
    _lastInboundIPv6_ = 0;
  }
}

- (void)failWithNetI2pRouterTransportUdpUDPEndpoint:(NetI2pRouterTransportUdpUDPEndpoint *)endpoint {
  if ([((id<JavaUtilList>) nil_chk(_endpoints_)) removeWithId:endpoint]) {
    [((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$@", @"UDP port failure: ", endpoint)];
    if ([_endpoints_ isEmpty]) {
      [_log_UDPTransport_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"No more UDP sockets open"];
      NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, HOSED));
    }
    NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(self);
  }
}

- (jboolean)isAlive {
  return NetI2pRouterTransportUdpUDPTransport_isAlive(self);
}

- (NetI2pDataSessionKey *)getIntroKey {
  return _introKey_;
}

- (jint)getExternalPortWithBoolean:(jboolean)ipv6 {
  NetI2pDataRouterRouterAddress *addr = [self getCurrentAddressWithBoolean:ipv6];
  if (addr != nil) {
    jint rv = [addr getPort];
    if (rv > 0) return rv;
  }
  return NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(self, ipv6);
}

- (IOSByteArray *)getExternalIP {
  NetI2pDataRouterRouterAddress *addr = [self getCurrentAddressWithBoolean:false];
  if (addr != nil) return [addr getIP];
  return nil;
}

- (jboolean)hasIPv6Address {
  return JreLoadVolatileBoolean(&_haveIPv6Address_);
}

- (jboolean)isTooCloseWithByteArray:(IOSByteArray *)ip {
  if ([self allowLocal]) return false;
  for (NetI2pDataRouterRouterAddress * __strong addr in nil_chk([self getCurrentAddresses])) {
    IOSByteArray *myip = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getIP];
    if (myip == nil || ((IOSByteArray *) nil_chk(ip))->size_ != myip->size_) continue;
    if (((IOSByteArray *) nil_chk(ip))->size_ == 4) {
      if (NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(ip, 0, myip, 0, 2)) return true;
    }
    else if (ip->size_ == 16) {
      if (NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(ip, 0, myip, 0, 8)) return true;
    }
  }
  return false;
}

- (jint)getListenPortWithBoolean:(jboolean)ipv6 {
  return NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(self, ipv6);
}

- (jint)getRequestedPort {
  return NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(self, false);
}

- (jint)getRequestedPortWithBoolean:(jboolean)ipv6 {
  return NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(self, ipv6);
}

- (jint)setMTUWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(self, addr);
}

- (jint)getMTUWithBoolean:(jboolean)ipv6 {
  return ipv6 ? _mtu_ipv6_ : _mtu_;
}

- (void)inboundConnectionReceivedWithBoolean:(jboolean)isIPv6 {
  if (isIPv6) {
    _lastInboundIPv6_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.inboundIPv6Conn" withLong:1];
  }
  else {
    _lastInboundReceivedOn_ = JavaLangSystem_currentTimeMillis();
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.inboundIPv4Conn" withLong:1];
  }
}

- (void)externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                  withByteArray:(IOSByteArray *)ip
                                                                        withInt:(jint)port {
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:JreStrcat("$$$@", @"Received address: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port), @" from: ", source)];
  if (ip == nil) return;
  if (!([self isPubliclyRoutableWithByteArray:ip] || [self allowLocal])) {
    if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:JreStrcat("$$$@", @"Invalid address: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port), @" from: ", source)];
    return;
  }
  if (source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE) && ip->size_ == 16) {
    JreAssignVolatileBoolean(&_haveIPv6Address_, true);
  }
  if (NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(self)) return;
  NSString *sources = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES withNSString:NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES];
  if (![((NSString *) nil_chk(sources)) java_contains:[((NetI2pRouterTransportTransport_AddressSource *) nil_chk(source)) toConfigString]]) return;
  if (!NetI2pRouterTransportUdpUDPTransport_isAlive(self)) {
    if (source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE) || source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_UPNP)) {
      @try {
        JavaNetInetAddress *ia = JavaNetInetAddress_getByAddressWithByteArray_(ip);
        [self saveLocalAddressWithJavaNetInetAddress:ia];
      }
      @catch (JavaNetUnknownHostException *uhe) {
      }
    }
    return;
  }
  if (source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE)) {
    if (ip->size_ == 4) {
      if (gotIPv4Addr_) return;
      else gotIPv4Addr_ = true;
    }
    else if (ip->size_ == 16) {
      if (gotIPv6Addr_) return;
      else gotIPv6Addr_ = true;
    }
  }
  jboolean changed = NetI2pRouterTransportUdpUDPTransport_changeAddressWithByteArray_withInt_(self, ip, port);
  if (changed && source == JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE)) {
    if (ip->size_ == 4) {
      if (![self isIPv4Firewalled]) NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN));
    }
    else if (ip->size_ == 16) {
      if (![self isIPv6Firewalled]) [self setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK) withBoolean:true];
    }
  }
}

- (void)forwardPortStatusWithByteArray:(IOSByteArray *)ip
                               withInt:(jint)port
                               withInt:(jint)externalPort
                           withBoolean:(jboolean)success
                          withNSString:(NSString *)reason {
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
    if (success) [_log_UDPTransport_ warnWithNSString:JreStrcat("$I$$", @"UPnP has opened the SSU port: ", port, @" via ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, externalPort))];
    else [_log_UDPTransport_ warnWithNSString:JreStrcat("$I$$", @"UPnP has failed to open the SSU port: ", port, @" reason: ", reason)];
  }
  if (success && ip != nil && [self getExternalIP] != nil) {
    if (![self isIPv4Firewalled]) NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN));
  }
}

- (void)externalAddressReceivedWithNetI2pDataHash:(NetI2pDataHash *)from
                                    withByteArray:(IOSByteArray *)ourIP
                                          withInt:(jint)ourPort {
  jboolean isValid = NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(self, ourIP) && NetI2pRouterTransportTransportUtil_isValidPortWithInt_(ourPort);
  jboolean explicitSpecified = NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(self);
  jboolean inboundRecent = _lastInboundReceivedOn_ + NetI2pRouterTransportUdpUDPTransport_ALLOW_IP_CHANGE_INTERVAL > JavaLangSystem_currentTimeMillis();
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("$$$@$Z$Z$Z$@", @"External address received: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort), @" from ", from, @", isValid? ", isValid, @", explicitSpecified? ", explicitSpecified, @", receivedInboundRecent? ", inboundRecent, @" status ", _reachabilityStatus_)];
  if (((IOSByteArray *) nil_chk(ourIP))->size_ != 4) {
    return;
  }
  if (explicitSpecified) return;
  NSString *sources = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES withNSString:NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES];
  if (![((NSString *) nil_chk(sources)) java_contains:@"ssu"]) return;
  if (!isValid) {
    if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_UDPTransport_ errorWithNSString:JreStrcat("$@$$$", @"The router ", from, @" told us we have an invalid IP - ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort), @".  Lets throw tomatoes at them")];
    [self markUnreachableWithNetI2pDataHash:from];
    return;
  }
  NetI2pDataRouterRouterAddress *addr = NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(self, false);
  if (inboundRecent && addr != nil && [addr getPort] > 0 && [addr getHost] != nil) {
    if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:@"Ignoring IP address suggestion, since we have received an inbound con recently"];
  }
  else {
    jboolean changeIt = false;
    @synchronized(self) {
      if ([((NetI2pDataHash *) nil_chk(from)) isEqual:_lastFrom_] || !NetI2pRouterTransportUdpUDPTransport_eqWithByteArray_withInt_withByteArray_withInt_(_lastOurIP_, _lastOurPort_, ourIP, ourPort)) {
        JreStrongAssign(&_lastFrom_, from);
        JreStrongAssign(&_lastOurIP_, ourIP);
        _lastOurPort_ = ourPort;
        if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("$@$$$", @"The router ", from, @" told us we have a new IP - ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort), @".  Wait until somebody else tells us the same thing.")];
      }
      else {
        JreStrongAssign(&_lastFrom_, from);
        JreStrongAssign(&_lastOurIP_, ourIP);
        _lastOurPort_ = ourPort;
        changeIt = true;
      }
    }
    if (changeIt) {
      if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("@$@$$$", from, @" and ", _lastFrom_, @" agree we have a new IP - ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort), @".  Changing address.")];
      NetI2pRouterTransportUdpUDPTransport_changeAddressWithByteArray_withInt_(self, ourIP, ourPort);
    }
  }
}

- (jboolean)changeAddressWithByteArray:(IOSByteArray *)ourIP
                               withInt:(jint)ourPort {
  return NetI2pRouterTransportUdpUDPTransport_changeAddressWithByteArray_withInt_(self, ourIP, ourPort);
}

+ (jboolean)eqWithByteArray:(IOSByteArray *)laddr
                    withInt:(jint)lport
              withByteArray:(IOSByteArray *)raddr
                    withInt:(jint)rport {
  return NetI2pRouterTransportUdpUDPTransport_eqWithByteArray_withInt_withByteArray_withInt_(laddr, lport, raddr, rport);
}

- (jboolean)isValidWithByteArray:(IOSByteArray *)addr {
  return NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(self, addr);
}

- (jboolean)getIsPortFixed {
  return NetI2pRouterTransportUdpUDPTransport_getIsPortFixed(self);
}

- (NetI2pRouterTransportUdpPeerState *)getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)hostInfo {
  return [((id<JavaUtilMap>) nil_chk(_peersByRemoteHost_)) getWithId:hostInfo];
}

- (id<JavaUtilList>)getPeerStatesByIPWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)hostInfo {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(4);
  IOSByteArray *ip = [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(hostInfo)) getIP];
  if (ip != nil && ip->size_ == 4) {
    for (NetI2pRouterTransportUdpPeerState * __strong ps in nil_chk([((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values])) {
      if (NetI2pDataDataHelper_eqWithByteArray_withByteArray_(ip, [((NetI2pRouterTransportUdpPeerState *) nil_chk(ps)) getRemoteIP])) [rv addWithId:ps];
    }
  }
  return rv;
}

- (NetI2pRouterTransportUdpPeerState *)getPeerStateWithNetI2pDataHash:(NetI2pDataHash *)remotePeer {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) getWithId:remotePeer];
}

- (id<JavaUtilCollection>)getPeers {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values];
}

- (id<JavaUtilSet>)getEstablished {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) keySet];
}

- (void)changePeerPortWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                    withInt:(jint)newPort {
  jint oldPort;
  @synchronized(_addDropLock_) {
    oldPort = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePort];
    if (oldPort != newPort) {
      [((id<JavaUtilMap>) nil_chk(_peersByRemoteHost_)) removeWithId:[peer getRemoteHostId]];
      [peer changePortWithInt:newPort];
      [_peersByRemoteHost_ putWithId:[peer getRemoteHostId] withId:peer];
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldInfo] && oldPort != newPort) [_log_UDPTransport_ infoWithNSString:JreStrcat("$I$I$@", @"Changed port from ", oldPort, @" to ", newPort, @" for ", peer)];
}

- (NetI2pRouterTransportUdpEstablishmentManager *)getEstablisher {
  return _establisher_;
}

- (jboolean)addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("$@", @"Add remote peer state: ", peer)];
  @synchronized(_addDropLock_) {
    return NetI2pRouterTransportUdpUDPTransport_locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState_(self, peer);
  }
}

- (jboolean)locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  return NetI2pRouterTransportUdpUDPTransport_locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState_(self, peer);
}

- (void)messageReceivedWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)inMsg
                  withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)remoteIdent
                                  withNetI2pDataHash:(NetI2pDataHash *)remoteIdentHash
                                            withLong:(jlong)msToReceive
                                             withInt:(jint)bytesReceived {
  if ([((id<NetI2pDataI2npI2NPMessage>) nil_chk(inMsg)) getType] == NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE) {
    NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(inMsg, [NetI2pDataI2npDatabaseStoreMessage class]);
    NetI2pDataDatabaseEntry *entry_ = [dsm getEntry];
    if (entry_ == nil) return;
    if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO && [((NetI2pDataRouterRouterInfo *) cast_chk(entry_, [NetI2pDataRouterRouterInfo class])) getNetworkId] != _networkID_) {
      NetI2pDataHash *peerHash = [entry_ getHash];
      NetI2pRouterTransportUdpPeerState *peer = [self getPeerStateWithNetI2pDataHash:peerHash];
      if (peer != nil) {
        NetI2pRouterTransportUdpRemoteHostId *remote = [peer getRemoteHostId];
        [((id<JavaUtilSet>) nil_chk(_dropList_)) addWithId:remote];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.dropPeerDroplist" withLong:1];
        [((NetI2pUtilSimpleTimer2 *) nil_chk([_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(self, remote) withLong:NetI2pRouterTransportUdpUDPTransport_DROPLIST_PERIOD];
      }
      [self markUnreachableWithNetI2pDataHash:peerHash];
      [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) banlistRouterWithNetI2pDataHash:peerHash withNSString:JreStrcat("$$", @"Part of the wrong network, version = ", [((NetI2pDataRouterRouterInfo *) cast_chk(entry_, [NetI2pDataRouterRouterInfo class])) getVersion])];
      if (peer != nil) [self sendDestroyWithNetI2pRouterTransportUdpPeerState:peer];
      [self dropPeerWithNetI2pDataHash:peerHash withBoolean:false withNSString:@"wrong network"];
      if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:JreStrcat("$@$@", @"Dropping the peer ", peerHash, @" because they are in the wrong net: ", entry_)];
      return;
    }
    else {
      if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
        if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:@"Received an RI from the same net"];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Received a leaseSet: ", dsm)];
      }
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$$", @"Received another message: ", [[inMsg java_getClass] getName])];
  }
  NetI2pRouterTransportUdpPeerState *peer = [self getPeerStateWithNetI2pDataHash:remoteIdentHash];
  [super messageReceivedWithNetI2pDataI2npI2NPMessage:inMsg withNetI2pDataRouterRouterIdentity:remoteIdent withNetI2pDataHash:remoteIdentHash withLong:msToReceive withInt:bytesReceived];
  if (peer != nil) [peer expireInboundMessages];
}

- (jboolean)isInDropListWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)peer {
  return [((id<JavaUtilSet>) nil_chk(_dropList_)) containsWithId:peer];
}

- (void)dropPeerWithNetI2pDataHash:(NetI2pDataHash *)peer
                       withBoolean:(jboolean)shouldBanlist
                      withNSString:(NSString *)why {
  NetI2pRouterTransportUdpPeerState *state = [self getPeerStateWithNetI2pDataHash:peer];
  if (state != nil) [self dropPeerWithNetI2pRouterTransportUdpPeerState:state withBoolean:shouldBanlist withNSString:why];
}

- (void)dropPeerWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                          withBoolean:(jboolean)shouldBanlist
                                         withNSString:(NSString *)why {
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(4096);
    jlong timeSinceSend = now - [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getLastSendTime];
    jlong timeSinceRecv = now - [peer getLastReceiveTime];
    jlong timeSinceAck = now - [peer getLastACKSend];
    jlong timeSinceSendOK = now - [peer getLastSendFullyTime];
    jint consec = [peer getConsecutiveFailedSends];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Dropping remote peer: "])) appendWithNSString:[peer description]])) appendWithNSString:@" banlist? "])) appendWithBoolean:shouldBanlist];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithLong:now - [peer getKeyEstablishedTime]];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" time since send/fully/recv/ack: "])) appendWithLong:timeSinceSend])) appendWithNSString:@" / "];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithLong:timeSinceSendOK])) appendWithNSString:@" / "];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithLong:timeSinceRecv])) appendWithNSString:@" / "])) appendWithLong:timeSinceAck];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" consec failures: "])) appendWithInt:consec];
    if (why != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" cause: "])) appendWithNSString:why];
    [_log_UDPTransport_ infoWithNSString:[buf description] withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Dropped by")];
  }
  @synchronized(_addDropLock_) {
    NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(self, peer, shouldBanlist, why);
  }
  NetI2pRouterTransportUdpUDPTransport_rebuildIfNecessary(self);
}

- (void)locked_dropPeerWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                 withBoolean:(jboolean)shouldBanlist
                                                withNSString:(NSString *)why {
  NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(self, peer, shouldBanlist, why);
}

- (void)rebuildIfNecessary {
  NetI2pRouterTransportUdpUDPTransport_rebuildIfNecessary(self);
}

- (jboolean)locked_needsRebuild {
  return NetI2pRouterTransportUdpUDPTransport_locked_needsRebuild(self);
}

- (void)dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  NetI2pRouterTransportUdpUDPTransport_dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState_(self, peer);
}

- (void)sendWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  if (JreLoadVolatileId(&_pusher_) != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Sending packet ", packet)];
    [((NetI2pRouterTransportUdpPacketPusher *) nil_chk(JreLoadVolatileId(&_pusher_))) sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  else {
    [((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) errorWithNSString:@"No pusher" withJavaLangThrowable:create_JavaLangException_init()];
  }
}

- (void)sendDestroyWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getCurrentCipherKey] == nil) return;
  NetI2pRouterTransportUdpUDPPacket *pkt = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(_destroyBuilder_)) buildSessionDestroyPacketWithNetI2pRouterTransportUdpPeerState:peer];
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Sending destroy to : ", peer)];
  [self sendWithNetI2pRouterTransportUdpUDPPacket:pkt];
}

- (void)destroyAll {
  NetI2pRouterTransportUdpUDPTransport_destroyAll(self);
}

- (NetI2pRouterTransportTransportBid *)bidWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)toAddress
                                                                 withInt:(jint)dataSize {
  if (dataSize > NetI2pRouterTransportUdpOutboundMessageState_MAX_MSG_SIZE) {
    return nil;
  }
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(toAddress)) getIdentity])) calculateHash];
  NetI2pRouterTransportUdpPeerState *peer = [self getPeerStateWithNetI2pDataHash:to];
  if (peer != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"bidding on a message to an established peer: ", peer)];
    if (NetI2pRouterTransportUdpUDPTransport_preferUDP(self)) return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_FAST_PREFERRED_BID);
    else return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_FAST_BID);
  }
  else {
    if (_reachabilityStatus_ == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, HOSED)) {
      [self markUnreachableWithNetI2pDataHash:to];
      return nil;
    }
    NetI2pDataRouterRouterAddress *addr = [self getTargetAddressWithNetI2pDataRouterRouterInfo:toAddress];
    if (addr == nil) {
      [self markUnreachableWithNetI2pDataHash:to];
      return nil;
    }
    NetI2pCryptoSigType *type = [((NetI2pDataRouterRouterIdentity *) nil_chk([toAddress getIdentity])) getSigType];
    if (type == nil || ![type isAvailable]) {
      [self markUnreachableWithNetI2pDataHash:to];
      return nil;
    }
    NetI2pDataRouterRouterInfo *us = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getRouterInfo];
    if (us != nil) {
      NetI2pDataRouterRouterIdentity *id_ = [us getIdentity];
      if ([((NetI2pDataRouterRouterIdentity *) nil_chk(id_)) getSigType] != JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1)) {
        NSString *v = [toAddress getVersion];
        if (NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterTransportUdpUDPTransport_MIN_SIGTYPE_VERSION) < 0) {
          [self markUnreachableWithNetI2pDataHash:to];
          return nil;
        }
      }
    }
    if (![self allowConnection]) return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_TRANSIENT_FAIL_BID);
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"bidding on a message to an unestablished peer: ", to)];
    jint count = [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) size];
    if (NetI2pRouterTransportUdpUDPTransport_alwaysPreferUDP(self)) {
      return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOW_PREFERRED_BID);
    }
    else if (count < _min_peers_ || (JreLoadVolatileBoolean(&_haveIPv6Address_) && count < _min_v6_peers_) || ([self introducersRequired] && [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(_introManager_)) introducerCount] < NetI2pRouterTransportUdpUDPTransport_MIN_INTRODUCER_POOL)) {
      if ([((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextIntWithInt:4] == 0) return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOWEST_BID);
      else return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOW_PREFERRED_BID);
    }
    else if (NetI2pRouterTransportUdpUDPTransport_preferUDP(self)) {
      return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOW_BID);
    }
    else if ([self haveCapacity]) {
      if ([addr getCost] > NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST) return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOWEST_COST_BID);
      else return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_SLOWEST_BID);
    }
    else {
      if ([addr getCost] > NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST) return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_COST_BID);
      else return IOSObjectArray_Get(nil_chk(_cachedBid_), NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_BID);
    }
  }
}

- (NetI2pDataRouterRouterAddress *)getTargetAddressWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target {
  id<JavaUtilList> addrs = [self getTargetAddressesWithNetI2pDataRouterRouterInfo:target];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(addrs)) size]; i++) {
    NetI2pDataRouterRouterAddress *addr = [addrs getWithInt:i];
    if ([((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getOptionWithNSString:@"ihost0"] == nil) {
      IOSByteArray *ip = [addr getIP];
      jint port = [addr getPort];
      if (ip == nil || !NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port) || (!NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(self, ip)) || (JavaUtilArrays_equalsWithByteArray_withByteArray_(ip, [self getExternalIP]) && ![self allowLocal])) {
        continue;
      }
    }
    else {
      if ([self getIPv6Config] == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) continue;
    }
    return addr;
  }
  return nil;
}

- (jboolean)preferUDP {
  return NetI2pRouterTransportUdpUDPTransport_preferUDP(self);
}

- (jboolean)alwaysPreferUDP {
  return NetI2pRouterTransportUdpUDPTransport_alwaysPreferUDP(self);
}

- (NSString *)getStyle {
  return NetI2pRouterTransportUdpUDPTransport_STYLE;
}

- (void)sendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if (msg == nil) return;
  if ([msg getTarget] == nil) return;
  if ([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity] == nil) return;
  if (_establisher_ == nil) {
    [self failedWithNetI2pRouterOutNetMessage:msg withNSString:@"UDP not up yet"];
    return;
  }
  [msg timestampWithNSString:@"sending on UDP transport"];
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) calculateHash];
  NetI2pRouterTransportUdpPeerState *peer = [self getPeerStateWithNetI2pDataHash:to];
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$$", @"Sending to ", (to != nil ? [to description] : @""))];
  if (peer != nil) {
    jlong lastSend = [peer getLastSendFullyTime];
    jlong lastRecv = [peer getLastReceiveTime];
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    jint inboundActive = [peer expireInboundMessages];
    if ((lastSend > 0) && (lastRecv > 0)) {
      if ((now - lastSend > NetI2pRouterTransportUdpUDPTransport_MAX_IDLE_TIME) && (now - lastRecv > NetI2pRouterTransportUdpUDPTransport_MAX_IDLE_TIME) && ([peer getConsecutiveFailedSends] > 0) && (inboundActive <= 0)) {
        [self dropPeerWithNetI2pRouterTransportUdpPeerState:peer withBoolean:false withNSString:@"proactive reconnection"];
        [msg timestampWithNSString:@"peer is really idle, dropping con and reestablishing"];
        if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Proactive reestablish to ", to)];
        [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(_establisher_)) establishWithNetI2pRouterOutNetMessage:msg];
        [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.proactiveReestablish" withLong:now - lastSend withLong:now - [peer getKeyEstablishedTime]];
        return;
      }
    }
    [msg timestampWithNSString:@"enqueueing for an already established peer"];
    if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Add to fragments for ", to)];
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithNetI2pRouterOutNetMessage:msg];
  }
  else {
    if ([_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Establish new connection to ", to)];
    [msg timestampWithNSString:@"establishing a new connection"];
    [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(_establisher_)) establishWithNetI2pRouterOutNetMessage:msg];
  }
}

- (void)sendIfEstablishedWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithNetI2pRouterOutNetMessage:msg];
}

- (void)sendWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
    withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  @try {
    NetI2pRouterTransportUdpOutboundMessageState *state = create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(_context_, msg, peer);
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Injecting a data message to a new peer: ", peer)];
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithNetI2pRouterTransportUdpOutboundMessageState:state withNetI2pRouterTransportUdpPeerState:peer];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:@"Shouldnt happen" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
  }
}

- (void)sendWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                         withJavaUtilList:(id<JavaUtilList>)msgs
    withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  @try {
    jint sz = [((id<JavaUtilList>) nil_chk(msgs)) size];
    id<JavaUtilList> states = create_JavaUtilArrayList_initWithInt_(sz + 1);
    if (msg != nil) {
      NetI2pRouterTransportUdpOutboundMessageState *state = create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(_context_, msg, peer);
      [states addWithId:state];
    }
    for (jint i = 0; i < sz; i++) {
      NetI2pRouterTransportUdpOutboundMessageState *state = create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(_context_, [msgs getWithInt:i], peer);
      [states addWithId:state];
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$I$@", @"Injecting ", [states size], @" data messages to a new peer: ", peer)];
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithJavaUtilList:states withNetI2pRouterTransportUdpPeerState:peer];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:@"Shouldnt happen" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
  }
}

- (void)sendWithJavaUtilList:(id<JavaUtilList>)msgs
withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  @try {
    jint sz = [((id<JavaUtilList>) nil_chk(msgs)) size];
    id<JavaUtilList> states = create_JavaUtilArrayList_initWithInt_(sz);
    for (jint i = 0; i < sz; i++) {
      NetI2pRouterTransportUdpOutboundMessageState *state = create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(_context_, [msgs getWithInt:i], peer);
      [states addWithId:state];
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$I$@", @"Injecting ", sz, @" data messages to a new peer: ", peer)];
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithJavaUtilList:states withNetI2pRouterTransportUdpPeerState:peer];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_UDPTransport_ warnWithNSString:@"Shouldnt happen" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
  }
}

- (void)outboundMessageReady {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not used for UDP");
}

- (void)startListening {
  NetI2pRouterTransportUdpUDPTransport_startup(self);
}

- (void)stopListening {
  [self shutdown];
  [self replaceAddressWithNetI2pDataRouterRouterAddress:nil];
}

- (jboolean)explicitAddressSpecified {
  return NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(self);
}

- (id<JavaUtilList>)updateAddress {
  NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(self, false);
  return [self getCurrentAddresses];
}

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddress {
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(self);
}

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithBoolean:(jboolean)allowRebuildRouterInfo {
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(self, allowRebuildRouterInfo);
}

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithByteArray:(IOSByteArray *)ip
                                                               withInt:(jint)port
                                                           withBoolean:(jboolean)allowRebuildRouterInfo {
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithByteArray_withInt_withBoolean_(self, ip, port, allowRebuildRouterInfo);
}

- (NetI2pDataRouterRouterAddress *)rebuildExternalAddressWithNSString:(NSString *)host
                                                              withInt:(jint)port
                                                          withBoolean:(jboolean)allowRebuildRouterInfo {
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, host, port, allowRebuildRouterInfo);
}

- (NetI2pDataRouterRouterAddress *)locked_rebuildExternalAddressWithNSString:(NSString *)host
                                                                     withInt:(jint)port
                                                                 withBoolean:(jboolean)allowRebuildRouterInfo {
  return NetI2pRouterTransportUdpUDPTransport_locked_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, host, port, allowRebuildRouterInfo);
}

- (void)replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)ra
                                                           withBoolean:(jboolean)isIPv6 {
  NetI2pRouterTransportUdpUDPTransport_replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress_withBoolean_(self, ra, isIPv6);
}

- (NetI2pDataRouterRouterAddress *)getCurrentExternalAddressWithBoolean:(jboolean)isIPv6 {
  return NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(self, isIPv6);
}

- (void)replaceAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
  [super replaceAddressWithNetI2pDataRouterRouterAddress:address];
  [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) notifyReplaceAddressWithNetI2pDataRouterRouterAddress:address];
}

- (void)removeAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
  [super removeAddressWithNetI2pDataRouterRouterAddress:address];
  [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) notifyRemoveAddressWithNetI2pDataRouterRouterAddress:address];
}

- (void)removeAddressWithBoolean:(jboolean)ipv6 {
  [super removeAddressWithBoolean:ipv6];
  if (ipv6) _lastInboundIPv6_ = 0;
  [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) notifyRemoveAddressWithBoolean:ipv6];
}

- (jboolean)introducersRequired {
  NetI2pRouterCommSystemFacade_Status *status = [self getReachabilityStatus];
  switch ([status ordinal]) {
    case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
    case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Require introducers, because our status is ", status)];
    return true;
    default:
    if (!NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(self)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:@"Require introducers, because we do not allow direct UDP connections"];
      return true;
    }
    return false;
  }
}

- (jboolean)introducersMaybeRequired {
  NetI2pRouterCommSystemFacade_Status *status = [self getReachabilityStatus];
  switch ([status ordinal]) {
    case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
    case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
    case NetI2pRouterCommSystemFacade_Status_Enum_UNKNOWN:
    return true;
    default:
    return !NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(self);
  }
}

- (jboolean)canIntroduce {
  return (![((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isHidden]) && (![self introducersRequired]) && [self haveCapacity] && (![((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) floodfillEnabled]) && [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(_introManager_)) introducedCount] < NetI2pRouterTransportUdpIntroductionManager_MAX_OUTBOUND && [_introManager_ introducedCount] < [self getMaxConnections] / 4;
}

- (jboolean)allowDirectUDP {
  return NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(self);
}

- (NSString *)getPacketHandlerStatus {
  NetI2pRouterTransportUdpPacketHandler *handler = _handler_;
  if (handler != nil) return [handler getHandlerStatus];
  else return @"";
}

- (NetI2pRouterTransportUdpPacketHandler *)getPacketHandler {
  return _handler_;
}

- (void)failedWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg {
  [self failedWithNetI2pRouterTransportUdpOutboundMessageState:msg withBoolean:true];
}

- (void)failedWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg
                                                   withBoolean:(jboolean)allowPeerFailure {
  if (msg == nil) return;
  NetI2pRouterOutNetMessage *m = [msg getMessage];
  if (allowPeerFailure && ([msg getPeer] != nil) && (([msg getMaxSends] >= NetI2pRouterTransportUdpOutboundMessageFragments_MAX_VOLLEYS) || ([msg isExpired]))) {
    jint consecutive = [((NetI2pRouterTransportUdpPeerState *) nil_chk([msg getPeer])) incrementConsecutiveFailedSends];
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("$I$$$@", @"Consecutive failure #", consecutive, @" on ", [msg description], @" to ", [msg getPeer])];
    if (([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - [((NetI2pRouterTransportUdpPeerState *) nil_chk([msg getPeer])) getLastSendFullyTime] <= 60 * 1000) || (consecutive < NetI2pRouterTransportUdpUDPTransport_MAX_CONSECUTIVE_FAILED)) {
    }
    else {
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.dropPeerConsecutiveFailures" withLong:consecutive withLong:[((NetI2pRouterTransportUdpPeerState *) nil_chk([msg getPeer])) getInactivityTime]];
      [self sendDestroyWithNetI2pRouterTransportUdpPeerState:[msg getPeer]];
      [self dropPeerWithNetI2pRouterTransportUdpPeerState:[msg getPeer] withBoolean:false withNSString:@"too many failures"];
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@$@", @"Failed sending ", msg, @" to ", [msg getPeer])];
  }
  NetI2pRouterTransportUdpUDPTransport_noteSendWithNetI2pRouterTransportUdpOutboundMessageState_withBoolean_(self, msg, false);
  if (m != nil) [super afterSendWithNetI2pRouterOutNetMessage:m withBoolean:false];
}

- (void)noteSendWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg
                                                     withBoolean:(jboolean)successful {
  NetI2pRouterTransportUdpUDPTransport_noteSendWithNetI2pRouterTransportUdpOutboundMessageState_withBoolean_(self, msg, successful);
}

- (void)failedWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                               withNSString:(NSString *)reason {
  if (msg == nil) return;
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_UDPTransport_ infoWithNSString:JreStrcat("$$$@", @"Send failed: ", reason, @" msg: ", msg) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"failed from")];
  if ([((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageHistory])) getDoLog]) [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) sendMessageWithNSString:[msg getMessageType] withLong:[msg getMessageId] withLong:[msg getExpiration] withNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) calculateHash] withBoolean:false withNSString:reason];
  [super afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:false];
}

- (void)succeededWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)msg {
  if (msg == nil) return;
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Sending message succeeded: ", msg)];
  NetI2pRouterTransportUdpUDPTransport_noteSendWithNetI2pRouterTransportUdpOutboundMessageState_withBoolean_(self, msg, true);
  NetI2pRouterOutNetMessage *m = [msg getMessage];
  if (m != nil) [super afterSendWithNetI2pRouterOutNetMessage:m withBoolean:true];
}

- (jint)countPeers {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) size];
}

- (jint)countActivePeers {
  jlong old = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - 5 * 60 * 1000;
  jint active = 0;
  for (NetI2pRouterTransportUdpPeerState * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values])) {
    if (([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getMessagesReceived] > 0 && [peer getLastReceiveTime] >= old) || ([peer getMessagesSent] > 0 && [peer getLastSendTime] >= old)) {
      active++;
    }
  }
  return active;
}

- (jint)countActiveSendPeers {
  jlong old = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - 60 * 1000;
  jint active = 0;
  for (NetI2pRouterTransportUdpPeerState * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values])) {
    if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getLastSendFullyTime] >= old) active++;
  }
  return active;
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)dest {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) containsKeyWithId:dest];
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)dest {
  NetI2pRouterTransportUdpPeerState *peer = [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) getWithId:dest];
  return peer != nil && [peer isBacklogged];
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTransportUdpPeerState *ps = [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) getWithId:peer];
  if (ps != nil && [ps getWeRelayToThemAs] <= 0 && ([ps getTheyRelayToUsAs] <= 0 || [ps getIntroducerTime] < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - 2 * 60 * 60 * 1000) && [ps getMessagesReceived] <= 2 && [ps getMessagesSent] <= 2) {
    [ps setMayDisconnect];
  }
}

- (jboolean)allowConnection {
  return [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) size] < [self getMaxConnections];
}

- (JavaUtilVector *)getClockSkews {
  JavaUtilVector *skews = create_JavaUtilVector_init();
  jboolean includeEverybody = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getUptime] < 10 * 60 * 1000 || [((id<JavaUtilMap>) nil_chk(_peersByIdent_)) size] < 10;
  jlong now = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
  for (NetI2pRouterTransportUdpPeerState * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values])) {
    if ((!includeEverybody) && now - [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getLastReceiveTime] > 5 * 60 * 1000) continue;
    if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRTT] > NetI2pRouterTransportUdpPeerState_INIT_RTT - 250) continue;
    [skews addElementWithId:JavaLangLong_valueOfWithLong_([peer getClockSkew] / 1000)];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_UDPTransport_ debugWithNSString:JreStrcat("$I$", @"UDP transport returning ", [skews size], @" peer clock skews.")];
  return skews;
}

- (NetI2pRouterTransportCryptoDHSessionKeyBuilder *)getDHBuilder {
  return [((id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>) nil_chk(_dhFactory_)) getBuilder];
}

- (id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)getDHFactory {
  return _dhFactory_;
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
}

- (void)setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status {
  NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, status);
}

- (void)setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status
                                                         withBoolean:(jboolean)isIPv6 {
  @synchronized(_rebuildLock_) {
    NetI2pRouterTransportUdpUDPTransport_locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(self, status, isIPv6);
  }
}

- (void)locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)newStatus
                                                                withBoolean:(jboolean)isIPv6 {
  NetI2pRouterTransportUdpUDPTransport_locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(self, newStatus, isIPv6);
}

- (NetI2pRouterCommSystemFacade_Status *)getReachabilityStatus {
  NSString *override = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_REACHABILITY_STATUS_OVERRIDE];
  if (override != nil) {
    if ([@"ok" isEqual:override]) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
    else if ([@"err-reject" isEqual:override]) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
    else if ([@"err-different" isEqual:override]) return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
  }
  return _reachabilityStatus_;
}

- (void)recheckReachability {
}

- (NetI2pRouterTransportUdpPeerState *)pickTestPeerWithNetI2pRouterTransportUdpPeerTestState_Role:(NetI2pRouterTransportUdpPeerTestState_Role *)peerRole
                                                                                      withBoolean:(jboolean)isIPv6
                                                         withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)dontInclude {
  if (peerRole == JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, ALICE)) @throw create_JavaLangIllegalArgumentException_init();
  id<JavaUtilList> peers = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(_peersByIdent_)) values]);
  for (id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(peers); [iter hasNext]; ) {
    NetI2pRouterTransportUdpPeerState *peer = [iter next];
    if ((dontInclude != nil) && ([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(dontInclude)) isEqual:[((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemoteHostId]])) continue;
    IOSByteArray *ip = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemoteIP];
    if (peerRole == JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB)) {
      if (isIPv6) {
        if (((IOSByteArray *) nil_chk(ip))->size_ != 16) continue;
      }
      else {
        if (((IOSByteArray *) nil_chk(ip))->size_ != 4) continue;
      }
    }
    NetI2pDataRouterRouterInfo *peerInfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[peer getRemotePeer]];
    if (peerInfo == nil) continue;
    if (isIPv6) {
      NSString *v = [peerInfo getVersion];
      if (NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterTransportUdpUDPTransport_MIN_V6_PEER_TEST_VERSION) < 0) continue;
    }
    ip = nil;
    id<JavaUtilList> addrs = [self getTargetAddressesWithNetI2pDataRouterRouterInfo:peerInfo];
    for (NetI2pDataRouterRouterAddress * __strong addr in nil_chk(addrs)) {
      IOSByteArray *rip = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getIP];
      if (rip != nil) {
        if (isIPv6) {
          if (rip->size_ != 16) continue;
        }
        else {
          if (rip->size_ != 4) continue;
        }
        NSString *caps = [addr getOptionWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_CAPACITY];
        if (caps != nil && [caps java_contains:NetI2pRouterTransportUdpUDPTransport_CAP_TESTING]) {
          ip = rip;
          break;
        }
      }
    }
    if (ip == nil) continue;
    if ([self isTooCloseWithByteArray:ip]) continue;
    return peer;
  }
  return nil;
}

- (void)__javaClone:(NetI2pRouterTransportUdpUDPTransport *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_pusher_, &original->_pusher_);
}

- (void)dealloc {
  RELEASE_(_log_UDPTransport_);
  RELEASE_(_endpoints_);
  RELEASE_(_addDropLock_);
  RELEASE_(_peersByIdent_);
  RELEASE_(_peersByRemoteHost_);
  RELEASE_(_handler_);
  RELEASE_(_establisher_);
  RELEASE_(_outboundMessages_);
  RELEASE_(_fragments_);
  RELEASE_(_activeThrottle_);
  RELEASE_(_refiller_);
  JreReleaseVolatile(&_pusher_);
  RELEASE_(_inboundFragments_);
  RELEASE_(_testManager_);
  RELEASE_(_introManager_);
  RELEASE_(_expireEvent_);
  RELEASE_(_testEvent_);
  RELEASE_(_destroyBuilder_);
  RELEASE_(_reachabilityStatus_);
  RELEASE_(_reachabilityStatusPending_);
  RELEASE_(_dhFactory_);
  RELEASE_(_rebuildLock_);
  RELEASE_(_introKey_);
  RELEASE_(_dropList_);
  RELEASE_(_lastFrom_);
  RELEASE_(_lastOurIP_);
  RELEASE_(_currentOurV4Address_);
  RELEASE_(_currentOurV6Address_);
  RELEASE_(_cachedBid_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 22, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 25, 24, -1, 26, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x0, 23, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpEstablishmentManager;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 37, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 38, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 45, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportBid;", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x0, 48, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 51, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x0, 43, 55, -1, 56, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 57, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 58, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 58, 59, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 58, 60, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 61, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x2, 64, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 67, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPacketHandler;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 68, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 69, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 74, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 75, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, 77, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 79, 80, -1, 81, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 82, 84, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 84, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 86, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x0, 87, 88, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:);
  methods[1].selector = @selector(setupPort);
  methods[2].selector = @selector(startup);
  methods[3].selector = @selector(shutdown);
  methods[4].selector = @selector(failWithNetI2pRouterTransportUdpUDPEndpoint:);
  methods[5].selector = @selector(isAlive);
  methods[6].selector = @selector(getIntroKey);
  methods[7].selector = @selector(getExternalPortWithBoolean:);
  methods[8].selector = @selector(getExternalIP);
  methods[9].selector = @selector(hasIPv6Address);
  methods[10].selector = @selector(isTooCloseWithByteArray:);
  methods[11].selector = @selector(getListenPortWithBoolean:);
  methods[12].selector = @selector(getRequestedPort);
  methods[13].selector = @selector(getRequestedPortWithBoolean:);
  methods[14].selector = @selector(setMTUWithJavaNetInetAddress:);
  methods[15].selector = @selector(getMTUWithBoolean:);
  methods[16].selector = @selector(inboundConnectionReceivedWithBoolean:);
  methods[17].selector = @selector(externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:withByteArray:withInt:);
  methods[18].selector = @selector(forwardPortStatusWithByteArray:withInt:withInt:withBoolean:withNSString:);
  methods[19].selector = @selector(externalAddressReceivedWithNetI2pDataHash:withByteArray:withInt:);
  methods[20].selector = @selector(changeAddressWithByteArray:withInt:);
  methods[21].selector = @selector(eqWithByteArray:withInt:withByteArray:withInt:);
  methods[22].selector = @selector(isValidWithByteArray:);
  methods[23].selector = @selector(getIsPortFixed);
  methods[24].selector = @selector(getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[25].selector = @selector(getPeerStatesByIPWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[26].selector = @selector(getPeerStateWithNetI2pDataHash:);
  methods[27].selector = @selector(getPeers);
  methods[28].selector = @selector(getEstablished);
  methods[29].selector = @selector(changePeerPortWithNetI2pRouterTransportUdpPeerState:withInt:);
  methods[30].selector = @selector(getEstablisher);
  methods[31].selector = @selector(addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:);
  methods[32].selector = @selector(locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:);
  methods[33].selector = @selector(messageReceivedWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:withLong:withInt:);
  methods[34].selector = @selector(isInDropListWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[35].selector = @selector(dropPeerWithNetI2pDataHash:withBoolean:withNSString:);
  methods[36].selector = @selector(dropPeerWithNetI2pRouterTransportUdpPeerState:withBoolean:withNSString:);
  methods[37].selector = @selector(locked_dropPeerWithNetI2pRouterTransportUdpPeerState:withBoolean:withNSString:);
  methods[38].selector = @selector(rebuildIfNecessary);
  methods[39].selector = @selector(locked_needsRebuild);
  methods[40].selector = @selector(dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState:);
  methods[41].selector = @selector(sendWithNetI2pRouterTransportUdpUDPPacket:);
  methods[42].selector = @selector(sendDestroyWithNetI2pRouterTransportUdpPeerState:);
  methods[43].selector = @selector(destroyAll);
  methods[44].selector = @selector(bidWithNetI2pDataRouterRouterInfo:withInt:);
  methods[45].selector = @selector(getTargetAddressWithNetI2pDataRouterRouterInfo:);
  methods[46].selector = @selector(preferUDP);
  methods[47].selector = @selector(alwaysPreferUDP);
  methods[48].selector = @selector(getStyle);
  methods[49].selector = @selector(sendWithNetI2pRouterOutNetMessage:);
  methods[50].selector = @selector(sendIfEstablishedWithNetI2pRouterOutNetMessage:);
  methods[51].selector = @selector(sendWithNetI2pDataI2npI2NPMessage:withNetI2pRouterTransportUdpPeerState:);
  methods[52].selector = @selector(sendWithNetI2pDataI2npI2NPMessage:withJavaUtilList:withNetI2pRouterTransportUdpPeerState:);
  methods[53].selector = @selector(sendWithJavaUtilList:withNetI2pRouterTransportUdpPeerState:);
  methods[54].selector = @selector(outboundMessageReady);
  methods[55].selector = @selector(startListening);
  methods[56].selector = @selector(stopListening);
  methods[57].selector = @selector(explicitAddressSpecified);
  methods[58].selector = @selector(updateAddress);
  methods[59].selector = @selector(rebuildExternalAddress);
  methods[60].selector = @selector(rebuildExternalAddressWithBoolean:);
  methods[61].selector = @selector(rebuildExternalAddressWithByteArray:withInt:withBoolean:);
  methods[62].selector = @selector(rebuildExternalAddressWithNSString:withInt:withBoolean:);
  methods[63].selector = @selector(locked_rebuildExternalAddressWithNSString:withInt:withBoolean:);
  methods[64].selector = @selector(replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress:withBoolean:);
  methods[65].selector = @selector(getCurrentExternalAddressWithBoolean:);
  methods[66].selector = @selector(replaceAddressWithNetI2pDataRouterRouterAddress:);
  methods[67].selector = @selector(removeAddressWithNetI2pDataRouterRouterAddress:);
  methods[68].selector = @selector(removeAddressWithBoolean:);
  methods[69].selector = @selector(introducersRequired);
  methods[70].selector = @selector(introducersMaybeRequired);
  methods[71].selector = @selector(canIntroduce);
  methods[72].selector = @selector(allowDirectUDP);
  methods[73].selector = @selector(getPacketHandlerStatus);
  methods[74].selector = @selector(getPacketHandler);
  methods[75].selector = @selector(failedWithNetI2pRouterTransportUdpOutboundMessageState:);
  methods[76].selector = @selector(failedWithNetI2pRouterTransportUdpOutboundMessageState:withBoolean:);
  methods[77].selector = @selector(noteSendWithNetI2pRouterTransportUdpOutboundMessageState:withBoolean:);
  methods[78].selector = @selector(failedWithNetI2pRouterOutNetMessage:withNSString:);
  methods[79].selector = @selector(succeededWithNetI2pRouterTransportUdpOutboundMessageState:);
  methods[80].selector = @selector(countPeers);
  methods[81].selector = @selector(countActivePeers);
  methods[82].selector = @selector(countActiveSendPeers);
  methods[83].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[84].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[85].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[86].selector = @selector(allowConnection);
  methods[87].selector = @selector(getClockSkews);
  methods[88].selector = @selector(getDHBuilder);
  methods[89].selector = @selector(getDHFactory);
  methods[90].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  methods[91].selector = @selector(setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:);
  methods[92].selector = @selector(setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:withBoolean:);
  methods[93].selector = @selector(locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:withBoolean:);
  methods[94].selector = @selector(getReachabilityStatus);
  methods[95].selector = @selector(recheckReachability);
  methods[96].selector = @selector(pickTestPeerWithNetI2pRouterTransportUdpPeerTestState_Role:withBoolean:withNetI2pRouterTransportUdpRemoteHostId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_UDPTransport_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, 89, -1, -1, -1 },
    { "_endpoints_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 90, -1 },
    { "_addDropLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peersByIdent_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 91, -1 },
    { "_peersByRemoteHost_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 92, -1 },
    { "_handler_", "LNetI2pRouterTransportUdpPacketHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_establisher_", "LNetI2pRouterTransportUdpEstablishmentManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outboundMessages_", "LNetI2pRouterTransportUdpMessageQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragments_", "LNetI2pRouterTransportUdpOutboundMessageFragments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_activeThrottle_", "LNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_refiller_", "LNetI2pRouterTransportUdpOutboundRefiller;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_pusher_", "LNetI2pRouterTransportUdpPacketPusher;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_inboundFragments_", "LNetI2pRouterTransportUdpInboundMessageFragments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_testManager_", "LNetI2pRouterTransportUdpPeerTestManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_introManager_", "LNetI2pRouterTransportUdpIntroductionManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expireEvent_", "LNetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_testEvent_", "LNetI2pRouterTransportUdpPeerTestEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_destroyBuilder_", "LNetI2pRouterTransportUdpPacketBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_reachabilityStatus_", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reachabilityStatusPending_", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reachabilityStatusLastUpdated_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reachabilityStatusUnchanged_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_introducersSelectedOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastInboundReceivedOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dhFactory_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_mtu_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mtu_ipv6_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mismatchLogged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_networkID_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_haveIPv6Address_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastInboundIPv6_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_min_peers_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_min_v6_peers_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_needsRebuild_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rebuildLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_introKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dropList_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 93, -1 },
    { "_expireTimeout_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastFrom_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastOurIP_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastOurPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentOurV4Address_", "LNetI2pDataRouterRouterAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentOurV6Address_", "LNetI2pDataRouterRouterAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DROPLIST_PERIOD", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_DROPLIST_PERIOD, 0x1a, -1, -1, -1, -1 },
    { "STYLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 94, -1, -1 },
    { "PROP_INTERNAL_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 95, -1, -1 },
    { "DEFAULT_INTERNAL_PORT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_DEFAULT_INTERNAL_PORT, 0x19, -1, -1, -1, 96 },
    { "PROP_EXTERNAL_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 97, -1, -1 },
    { "PROP_EXTERNAL_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 98, -1, -1 },
    { "PROP_PREFER_UDP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 99, -1, -1 },
    { "DEFAULT_PREFER_UDP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 100, -1, -1 },
    { "PROP_FIXED_PORT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 101, -1, -1 },
    { "PROP_SOURCES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 102, -1, -1 },
    { "DEFAULT_SOURCES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 103, -1, -1 },
    { "PROP_IP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 104, -1, -1 },
    { "PROP_IP_CHANGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 105, -1, -1 },
    { "PROP_LAPTOP_MODE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 106, -1, -1 },
    { "PROP_FORCE_INTRODUCERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 107, -1, -1 },
    { "PROP_ALLOW_DIRECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 108, -1, -1 },
    { "PROP_BIND_INTERFACE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 109, -1, -1 },
    { "PROP_DEFAULT_MTU", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 110, -1, -1 },
    { "PROP_ADVANCED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 111, -1, -1 },
    { "CAP_TESTING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 112, -1, -1 },
    { "CAP_TESTING_INTRO", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 113, -1, -1 },
    { "PUBLIC_RELAY_COUNT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT, 0x19, -1, -1, -1, -1 },
    { "USE_PRIORITY", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpUDPTransport_USE_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "PRIORITY_LIMITS", "[I", .constantValue.asLong = 0, 0x1a, -1, 114, -1, -1 },
    { "PRIORITY_WEIGHT", "[I", .constantValue.asLong = 0, 0x1a, -1, 115, -1, -1 },
    { "MAX_CONSECUTIVE_FAILED", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MAX_CONSECUTIVE_FAILED, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_COST", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST, 0x19, -1, -1, -1, -1 },
    { "RATES", "[J", .constantValue.asLong = 0, 0x18, -1, 116, -1, -1 },
    { "MIN_PEERS", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MIN_PEERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_PEERS_IF_HAVE_V6", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MIN_PEERS_IF_HAVE_V6, 0x1a, -1, -1, -1, -1 },
    { "MIN_INTRODUCER_POOL", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MIN_INTRODUCER_POOL, 0x1a, -1, -1, -1, -1 },
    { "INTRODUCER_EXPIRATION_MARGIN", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_INTRODUCER_EXPIRATION_MARGIN, 0x18, -1, -1, -1, -1 },
    { "BID_VALUES", "[I", .constantValue.asLong = 0, 0x1a, -1, 117, -1, -1 },
    { "FAST_PREFERRED_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_FAST_PREFERRED_BID, 0x1a, -1, -1, -1, -1 },
    { "SLOW_PREFERRED_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_SLOW_PREFERRED_BID, 0x1a, -1, -1, -1, -1 },
    { "FAST_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_FAST_BID, 0x1a, -1, -1, -1, -1 },
    { "SLOW_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_SLOW_BID, 0x1a, -1, -1, -1, -1 },
    { "SLOWEST_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_SLOWEST_BID, 0x1a, -1, -1, -1, -1 },
    { "SLOWEST_COST_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_SLOWEST_COST_BID, 0x1a, -1, -1, -1, -1 },
    { "NEAR_CAPACITY_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_BID, 0x1a, -1, -1, -1, -1 },
    { "NEAR_CAPACITY_COST_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_NEAR_CAPACITY_COST_BID, 0x1a, -1, -1, -1, -1 },
    { "TRANSIENT_FAIL_BID", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_TRANSIENT_FAIL_BID, 0x1a, -1, -1, -1, -1 },
    { "_cachedBid_", "[LNetI2pRouterTransportTransportBid;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "THINSP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 118, -1, -1 },
    { "MIN_SIGTYPE_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 119, -1, -1 },
    { "MIN_V6_PEER_TEST_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 120, -1, -1 },
    { "ALLOW_IP_CHANGE_INTERVAL", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_ALLOW_IP_CHANGE_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "gotIPv4Addr_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gotIPv6Addr_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EXPIRE_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "MAX_IDLE_TIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MAX_IDLE_TIME, 0x1a, -1, -1, -1, -1 },
    { "MIN_EXPIRE_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "PROP_REACHABILITY_STATUS_OVERRIDE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 121, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", "fail", "LNetI2pRouterTransportUdpUDPEndpoint;", "getExternalPort", "Z", "isTooClose", "[B", "getListenPort", "getRequestedPort", "setMTU", "LJavaNetInetAddress;", "getMTU", "inboundConnectionReceived", "externalAddressReceived", "LNetI2pRouterTransportTransport_AddressSource;[BI", "forwardPortStatus", "[BIIZLNSString;", "LNetI2pDataHash;[BI", "changeAddress", "[BI", "eq", "[BI[BI", "isValid", "getPeerState", "LNetI2pRouterTransportUdpRemoteHostId;", "getPeerStatesByIP", "(Lnet/i2p/router/transport/udp/RemoteHostId;)Ljava/util/List<Lnet/i2p/router/transport/udp/PeerState;>;", "LNetI2pDataHash;", "()Ljava/util/Collection<Lnet/i2p/router/transport/udp/PeerState;>;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "changePeerPort", "LNetI2pRouterTransportUdpPeerState;I", "addRemotePeerState", "LNetI2pRouterTransportUdpPeerState;", "locked_addRemotePeerState", "messageReceived", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;JI", "isInDropList", "dropPeer", "LNetI2pDataHash;ZLNSString;", "LNetI2pRouterTransportUdpPeerState;ZLNSString;", "locked_dropPeer", "dropPeerCapacities", "send", "LNetI2pRouterTransportUdpUDPPacket;", "sendDestroy", "bid", "LNetI2pDataRouterRouterInfo;I", "getTargetAddress", "LNetI2pDataRouterRouterInfo;", "LNetI2pRouterOutNetMessage;", "sendIfEstablished", "LNetI2pDataI2npI2NPMessage;LNetI2pRouterTransportUdpPeerState;", "LNetI2pDataI2npI2NPMessage;LJavaUtilList;LNetI2pRouterTransportUdpPeerState;", "(Lnet/i2p/data/i2np/I2NPMessage;Ljava/util/List<Lnet/i2p/router/OutNetMessage;>;Lnet/i2p/router/transport/udp/PeerState;)V", "LJavaUtilList;LNetI2pRouterTransportUdpPeerState;", "(Ljava/util/List<Lnet/i2p/data/i2np/I2NPMessage;>;Lnet/i2p/router/transport/udp/PeerState;)V", "()Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "rebuildExternalAddress", "[BIZ", "LNSString;IZ", "locked_rebuildExternalAddress", "replaceCurrentExternalAddress", "LNetI2pDataRouterRouterAddress;Z", "getCurrentExternalAddress", "replaceAddress", "LNetI2pDataRouterRouterAddress;", "removeAddress", "failed", "LNetI2pRouterTransportUdpOutboundMessageState;", "LNetI2pRouterTransportUdpOutboundMessageState;Z", "noteSend", "LNetI2pRouterOutNetMessage;LNSString;", "succeeded", "isEstablished", "isBacklogged", "mayDisconnect", "()Ljava/util/Vector<Ljava/lang/Long;>;", "renderStatusHTML", "LJavaIoWriter;LNSString;I", "LJavaIoIOException;", (void *)&NetI2pRouterTransportUdpUDPTransport__Annotations$0, "setReachabilityStatus", "LNetI2pRouterCommSystemFacade_Status;", "LNetI2pRouterCommSystemFacade_Status;Z", "locked_setReachabilityStatus", (void *)&NetI2pRouterTransportUdpUDPTransport__Annotations$1, "pickTestPeer", "LNetI2pRouterTransportUdpPeerTestState_Role;ZLNetI2pRouterTransportUdpRemoteHostId;", "_log", "Ljava/util/List<Lnet/i2p/router/transport/udp/UDPEndpoint;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/Map<Lnet/i2p/router/transport/udp/RemoteHostId;Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/Set<Lnet/i2p/router/transport/udp/RemoteHostId;>;", &NetI2pRouterTransportUdpUDPTransport_STYLE, &NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT, (void *)&NetI2pRouterTransportUdpUDPTransport__Annotations$2, &NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST, &NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT, &NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP, &NetI2pRouterTransportUdpUDPTransport_DEFAULT_PREFER_UDP, &NetI2pRouterTransportUdpUDPTransport_PROP_FIXED_PORT, &NetI2pRouterTransportUdpUDPTransport_PROP_SOURCES, &NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES, &NetI2pRouterTransportUdpUDPTransport_PROP_IP, &NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE, &NetI2pRouterTransportUdpUDPTransport_PROP_LAPTOP_MODE, &NetI2pRouterTransportUdpUDPTransport_PROP_FORCE_INTRODUCERS, &NetI2pRouterTransportUdpUDPTransport_PROP_ALLOW_DIRECT, &NetI2pRouterTransportUdpUDPTransport_PROP_BIND_INTERFACE, &NetI2pRouterTransportUdpUDPTransport_PROP_DEFAULT_MTU, &NetI2pRouterTransportUdpUDPTransport_PROP_ADVANCED, &NetI2pRouterTransportUdpUDPTransport_CAP_TESTING, &NetI2pRouterTransportUdpUDPTransport_CAP_TESTING_INTRO, &NetI2pRouterTransportUdpUDPTransport_PRIORITY_LIMITS, &NetI2pRouterTransportUdpUDPTransport_PRIORITY_WEIGHT, &NetI2pRouterTransportUdpUDPTransport_RATES, &NetI2pRouterTransportUdpUDPTransport_BID_VALUES, &NetI2pRouterTransportUdpUDPTransport_THINSP, &NetI2pRouterTransportUdpUDPTransport_MIN_SIGTYPE_VERSION, &NetI2pRouterTransportUdpUDPTransport_MIN_V6_PEER_TEST_VERSION, &NetI2pRouterTransportUdpUDPTransport_PROP_REACHABILITY_STATUS_OVERRIDE, "LNetI2pRouterTransportUdpUDPTransport_RemoveDropList;LNetI2pRouterTransportUdpUDPTransport_SharedBid;LNetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent;LNetI2pRouterTransportUdpUDPTransport_PingIntroducers;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPTransport = { "UDPTransport", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 97, 96, -1, 122, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPTransport;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpUDPTransport class]) {
    JreStrongAssign(&NetI2pRouterTransportUdpUDPTransport_DEFAULT_SOURCES, JreStrcat("$C$C$", [((NetI2pRouterTransportTransport_AddressSource *) nil_chk(JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_INTERFACE))) toConfigString], ',', [((NetI2pRouterTransportTransport_AddressSource *) nil_chk(JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_UPNP))) toConfigString], ',', [((NetI2pRouterTransportTransport_AddressSource *) nil_chk(JreLoadEnum(NetI2pRouterTransportTransport_AddressSource, SOURCE_SSU))) toConfigString]));
    JreStrongAssign(&NetI2pRouterTransportUdpUDPTransport_CAP_TESTING, JavaLangCharacter_toStringWithChar_(NetI2pRouterTransportUdpUDPAddress_CAPACITY_TESTING));
    JreStrongAssign(&NetI2pRouterTransportUdpUDPTransport_CAP_TESTING_INTRO, JreStrcat("$C", NetI2pRouterTransportUdpUDPTransport_CAP_TESTING, NetI2pRouterTransportUdpUDPAddress_CAPACITY_INTRODUCER));
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpUDPTransport_PRIORITY_LIMITS, [IOSIntArray newArrayWithInts:(jint[]){ 100, 200, 300, 400, 500, 1000 } count:6]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpUDPTransport_PRIORITY_WEIGHT, [IOSIntArray newArrayWithInts:(jint[]){ 1, 1, 1, 1, 1, 2 } count:6]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpUDPTransport_RATES, [IOSLongArray newArrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]);
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpUDPTransport_BID_VALUES, [IOSIntArray newArrayWithInts:(jint[]){ 15, 20, 50, 65, 80, 95, 100, 115, NetI2pRouterTransportTransportBid_TRANSIENT_FAIL } count:9]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpUDPTransport)
  }
}

@end

void NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  NetI2pRouterTransportTransportImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssignAndConsume(&self->_addDropLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_rebuildLock_, new_NSObject_init());
  self->gotIPv4Addr_ = false;
  self->gotIPv6Addr_ = false;
  self->_networkID_ = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) router])) getNetworkID];
  JreStrongAssign(&self->_dhFactory_, dh);
  JreStrongAssign(&self->_log_UDPTransport_, [((NetI2pUtilLogManager *) nil_chk([ctx logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpUDPTransport_class_()]);
  JreStrongAssignAndConsume(&self->_peersByIdent_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(128));
  JreStrongAssignAndConsume(&self->_peersByRemoteHost_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(128));
  JreStrongAssignAndConsume(&self->_dropList_, new_NetI2pUtilConcurrentHashSet_initWithInt_(2));
  JreStrongAssignAndConsume(&self->_endpoints_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  {
    NetI2pRouterTransportUdpDummyThrottle *mq = create_NetI2pRouterTransportUdpDummyThrottle_init();
    JreStrongAssign(&self->_outboundMessages_, nil);
    JreStrongAssign(&self->_activeThrottle_, mq);
  }
  JreStrongAssignAndConsume(&self->_cachedBid_, [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(NetI2pRouterTransportUdpUDPTransport_BID_VALUES))->size_ type:NetI2pRouterTransportUdpUDPTransport_SharedBid_class_()]);
  for (jint i = 0; i < NetI2pRouterTransportUdpUDPTransport_BID_VALUES->size_; i++) {
    IOSObjectArray_SetAndConsume(self->_cachedBid_, i, new_NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(self, IOSIntArray_Get(NetI2pRouterTransportUdpUDPTransport_BID_VALUES, i)));
  }
  JreStrongAssignAndConsume(&self->_destroyBuilder_, new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self));
  JreStrongAssignAndConsume(&self->_fragments_, new_NetI2pRouterTransportUdpOutboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_(self->_context_, self, self->_activeThrottle_));
  JreStrongAssignAndConsume(&self->_inboundFragments_, new_NetI2pRouterTransportUdpInboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self->_fragments_, self));
  JreAssignVolatileLong(&self->_expireTimeout_, NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT);
  JreStrongAssignAndConsume(&self->_expireEvent_, new_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(self));
  JreStrongAssignAndConsume(&self->_testManager_, new_NetI2pRouterTransportUdpPeerTestManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self));
  JreStrongAssignAndConsume(&self->_testEvent_, new_NetI2pRouterTransportUdpPeerTestEvent_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_(self->_context_, self, self->_testManager_));
  JreStrongAssign(&self->_reachabilityStatus_, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN));
  JreStrongAssign(&self->_reachabilityStatusPending_, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK));
  JreStrongAssignAndConsume(&self->_introManager_, new_NetI2pRouterTransportUdpIntroductionManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self));
  self->_introducersSelectedOn_ = -1;
  self->_lastInboundReceivedOn_ = -1;
  self->_mtu_ = NetI2pRouterTransportUdpPeerState_LARGE_MTU;
  self->_mtu_ipv6_ = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
  NetI2pRouterTransportUdpUDPTransport_setupPort(self);
  self->_needsRebuild_ = true;
  self->_min_peers_ = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:@"i2np.udp.minpeers" withInt:NetI2pRouterTransportUdpUDPTransport_MIN_PEERS];
  self->_min_v6_peers_ = [self->_context_ getPropertyWithNSString:@"i2np.udp.minv6peers" withInt:NetI2pRouterTransportUdpUDPTransport_MIN_PEERS_IF_HAVE_V6];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.alreadyConnected" withNSString:@"What is the lifetime of a reestablished session" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedPeer" withNSString:@"How long ago did we receive from a dropped peer (duration == session lifetime" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.droppedPeerInactive" withNSString:@"How long ago did we receive from a dropped peer (duration == session lifetime)" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.addressTestInsteadOfUpdate" withNSString:@"How many times we fire off a peer test of ourselves instead of adjusting our own reachable address?" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.addressUpdated" withNSString:@"How many times we adjust our own reachable IP address" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.proactiveReestablish" withNSString:@"How long a session was idle for when we proactively reestablished it" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.dropPeerDroplist" withNSString:@"How many peers currently have their packets dropped outright when a new peer is added to the list?" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.dropPeerConsecutiveFailures" withNSString:@"How many consecutive failed sends to a peer did we attempt before giving up and reestablishing a new session (lifetime is inactivity perood)" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.inboundIPv4Conn" withNSString:@"Inbound IPv4 UDP Connection" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.inboundIPv6Conn" withNSString:@"Inbound IPv4 UDP Connection" withNSString:@"udp" withLongArray:NetI2pRouterTransportUdpUDPTransport_RATES];
  [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(self) withLong:NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT * 3 / 4];
}

NetI2pRouterTransportUdpUDPTransport *new_NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPTransport, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_, ctx, dh)
}

NetI2pRouterTransportUdpUDPTransport *create_NetI2pRouterTransportUdpUDPTransport_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPTransport, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_, ctx, dh)
}

void NetI2pRouterTransportUdpUDPTransport_setupPort(NetI2pRouterTransportUdpUDPTransport *self) {
  jint port = [self getRequestedPort];
  if (port < 0) {
    port = NetI2pRouterTransportUdpUDPEndpoint_selectRandomPortWithNetI2pRouterRouterContext_(self->_context_);
    id<JavaUtilMap> changes = create_JavaUtilHashMap_initWithInt_(2);
    [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT withId:JavaLangInteger_toStringWithInt_(port)];
    [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withId:JavaLangInteger_toStringWithInt_(port)];
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
    [((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$I", @"UDP selected random port ", port)];
  }
}

void NetI2pRouterTransportUdpUDPTransport_startup(NetI2pRouterTransportUdpUDPTransport *self) {
  @synchronized(self) {
    [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(self->_fragments_)) shutdown];
    if (JreLoadVolatileId(&self->_pusher_) != nil) [((NetI2pRouterTransportUdpPacketPusher *) nil_chk(JreLoadVolatileId(&self->_pusher_))) shutdown];
    if (self->_handler_ != nil) [self->_handler_ shutdown];
    for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in nil_chk(self->_endpoints_)) {
      [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) shutdown];
      [self->_endpoints_ removeWithId:endpoint];
    }
    if (self->_establisher_ != nil) [self->_establisher_ shutdown];
    if (self->_refiller_ != nil) [self->_refiller_ shutdown];
    [((NetI2pRouterTransportUdpInboundMessageFragments *) nil_chk(self->_inboundFragments_)) shutdown];
    [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) reset];
    NetI2pRouterTransportUdpUDPPacket_clearCache();
    if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:@"Starting SSU transport listening"];
    JreStrongAssignAndConsume(&self->_introKey_, new_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) routerHash])) getData], 0, [((NetI2pDataSessionKey *) nil_chk(self->_introKey_)) getData], 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
    NSString *bindTo = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_BIND_INTERFACE];
    if (bindTo == nil) {
      NSString *fixedHost = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST];
      if (fixedHost != nil && [fixedHost java_length] > 0) {
        NetI2pRouterTransportTransportUtil_IPv6Config *cfg = [self getIPv6Config];
        id<JavaUtilSet> myAddrs;
        if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED)) myAddrs = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, false);
        else myAddrs = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, true);
        JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
        IOSObjectArray *bta = NetI2pDataDataHelper_splitWithNSString_withNSString_(fixedHost, @"[,; \x0d\n\t]");
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bta))->size_; i++) {
          NSString *bt = IOSObjectArray_Get(bta, i);
          if ([((NSString *) nil_chk(bt)) java_length] <= 0) continue;
          @try {
            IOSObjectArray *all = JavaNetInetAddress_getAllByNameWithNSString_(bt);
            for (jint j = 0; j < ((IOSObjectArray *) nil_chk(all))->size_; j++) {
              JavaNetInetAddress *ia = IOSObjectArray_Get(all, j);
              if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY) && ([ia isKindOfClass:[JavaNetInet4Address class]])) {
                if ([self->_log_UDPTransport_ shouldWarn]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$", @"Configured for IPv6 only, not binding to configured IPv4 host ", bt)];
                continue;
              }
              NSString *testAddr = [((JavaNetInetAddress *) nil_chk(ia)) getHostAddress];
              if ([((id<JavaUtilSet>) nil_chk(myAddrs)) containsWithId:testAddr]) {
                if ([buf java_length] > 0) [buf appendWithChar:','];
                [buf appendWithNSString:testAddr];
              }
              else {
                if ([self->_log_UDPTransport_ shouldWarn]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$", @"Not a local address, not binding to configured IP ", testAddr)];
              }
            }
          }
          @catch (JavaNetUnknownHostException *uhe) {
            if ([self->_log_UDPTransport_ shouldWarn]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$$@", @"Not binding to configured host ", bt, @" - ", uhe)];
          }
        }
        if ([buf java_length] > 0) {
          bindTo = [buf description];
          if ([self->_log_UDPTransport_ shouldWarn] && ![fixedHost isEqual:bindTo]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$$$C", @"Expanded external host config \"", fixedHost, @"\" to \"", bindTo, '"')];
        }
      }
    }
    id<JavaUtilSet> bindToAddrs = create_JavaUtilHashSet_initWithInt_(4);
    if (bindTo != nil) {
      IOSObjectArray *bta = NetI2pDataDataHelper_splitWithNSString_withNSString_(bindTo, @"[,; \x0d\n\t]");
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bta))->size_; i++) {
        NSString *bt = IOSObjectArray_Get(bta, i);
        if ([((NSString *) nil_chk(bt)) java_length] <= 0) continue;
        @try {
          [bindToAddrs addWithId:JavaNetInetAddress_getByNameWithNSString_(bt)];
        }
        @catch (JavaNetUnknownHostException *uhe) {
          [self->_log_UDPTransport_ errorWithNSString:JreStrcat("$$C", @"Invalid SSU bind interface specified [", bt, ']') withJavaLangThrowable:uhe];
        }
      }
    }
    jint port;
    jint oldIPort = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT withInt:-1];
    jint oldBindPort = NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(self, false);
    jint oldEPort = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withInt:-1];
    if (oldIPort > 0) port = oldIPort;
    else if (oldBindPort > 0) port = oldBindPort;
    else port = oldEPort;
    if (![bindToAddrs isEmpty] && [self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@", @"Binding only to ", bindToAddrs)];
    if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$I", @"Binding to the port: ", port)];
    if ([self->_endpoints_ isEmpty]) {
      if ([bindToAddrs isEmpty]) {
        NetI2pRouterTransportUdpUDPEndpoint *endpoint = create_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(self->_context_, self, port, nil);
        [self->_endpoints_ addWithId:endpoint];
        NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(self, nil);
      }
      else {
        for (JavaNetInetAddress * __strong bindToAddr in bindToAddrs) {
          NetI2pRouterTransportUdpUDPEndpoint *endpoint = create_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(self->_context_, self, port, bindToAddr);
          [self->_endpoints_ addWithId:endpoint];
          NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(self, bindToAddr);
        }
      }
    }
    else {
      for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in self->_endpoints_) {
        if ([((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) isIPv4]) {
          [endpoint setListenPortWithInt:port];
          break;
        }
      }
    }
    if (self->_establisher_ == nil) JreStrongAssignAndConsume(&self->_establisher_, new_NetI2pRouterTransportUdpEstablishmentManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self->_context_, self));
    if (self->_handler_ == nil) JreStrongAssignAndConsume(&self->_handler_, new_NetI2pRouterTransportUdpPacketHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpEstablishmentManager_withNetI2pRouterTransportUdpInboundMessageFragments_withNetI2pRouterTransportUdpPeerTestManager_withNetI2pRouterTransportUdpIntroductionManager_(self->_context_, self, self->_establisher_, self->_inboundFragments_, self->_testManager_, self->_introManager_));
    jint newPort = -1;
    for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in self->_endpoints_) {
      @try {
        [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) startup];
        if (newPort < 0 && [endpoint isIPv4]) {
          newPort = [endpoint getListenPort];
        }
        if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@", @"Started ", endpoint)];
      }
      @catch (JavaNetSocketException *se) {
        [self->_endpoints_ removeWithId:endpoint];
        [self->_log_UDPTransport_ errorWithNSString:JreStrcat("$@", @"Failed to start ", endpoint) withJavaLangThrowable:se];
      }
    }
    if ([self->_endpoints_ isEmpty]) {
      [self->_log_UDPTransport_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Unable to open UDP port"];
      NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, HOSED));
      return;
    }
    if (newPort > 0 && (newPort != port || newPort != oldIPort || newPort != oldEPort)) {
      id<JavaUtilMap> changes = create_JavaUtilHashMap_init();
      [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT withId:JavaLangInteger_toStringWithInt_(newPort)];
      [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withId:JavaLangInteger_toStringWithInt_(newPort)];
      [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
    }
    [((NetI2pRouterTransportUdpPacketHandler *) nil_chk(self->_handler_)) startup];
    [self->_fragments_ startup];
    [self->_inboundFragments_ startup];
    JreVolatileStrongAssign(&self->_pusher_, create_NetI2pRouterTransportUdpPacketPusher_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withJavaUtilList_(self->_context_, self->_fragments_, self->_endpoints_));
    [((NetI2pRouterTransportUdpPacketPusher *) nil_chk(JreLoadVolatileId(&self->_pusher_))) startup];
    [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk(self->_establisher_)) startup];
    [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(self->_expireEvent_)) setIsAliveWithBoolean:true];
    JreStrongAssign(&self->_reachabilityStatus_, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN));
    [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(self->_testEvent_)) setIsAliveWithBoolean:true];
    [self->_testEvent_ rescheduleWithLong:10 * 1000];
    if (newPort > 0 && [bindToAddrs isEmpty]) {
      for (JavaNetInetAddress * __strong ia in nil_chk([self getSavedLocalAddresses])) {
        if (((IOSByteArray *) nil_chk([((JavaNetInetAddress *) nil_chk(ia)) getAddress]))->size_ == 16) {
          self->_lastInboundIPv6_ = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
          if (![self isIPv6Firewalled]) [self setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK) withBoolean:true];
        }
        else {
          if (![self isIPv4Firewalled]) NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN));
        }
        NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, [ia getHostAddress], newPort, false);
      }
    }
    else if (newPort > 0 && ![bindToAddrs isEmpty]) {
      for (JavaNetInetAddress * __strong ia in bindToAddrs) {
        if (((IOSByteArray *) nil_chk([((JavaNetInetAddress *) nil_chk(ia)) getAddress]))->size_ == 16) {
          self->_lastInboundIPv6_ = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
          if (![self isIPv6Firewalled]) [self setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK) withBoolean:true];
        }
        else {
          if (![self isIPv4Firewalled]) NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN));
        }
        NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, [ia getHostAddress], newPort, false);
      }
    }
    if ([self isIPv4Firewalled]) {
      if (self->_lastInboundIPv6_ > 0) NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN));
      else NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED));
    }
    NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(self, false);
  }
}

jboolean NetI2pRouterTransportUdpUDPTransport_isAlive(NetI2pRouterTransportUdpUDPTransport *self) {
  return [((NetI2pRouterTransportUdpInboundMessageFragments *) nil_chk(self->_inboundFragments_)) isAlive];
}

jint NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean ipv6) {
  for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in nil_chk(self->_endpoints_)) {
    if (((!ipv6) && [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) isIPv4]) || (ipv6 && [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) isIPv6])) return [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) getListenPort];
  }
  return -1;
}

jint NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean ipv6) {
  jint rv = NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(self, ipv6);
  if (rv > 0) return rv;
  rv = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_INTERNAL_PORT withInt:-1];
  if (rv > 0) return rv;
  return [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withInt:-1];
}

jint NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(NetI2pRouterTransportUdpUDPTransport *self, JavaNetInetAddress *addr) {
  NSString *p = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_DEFAULT_MTU];
  if (p != nil) {
    @try {
      jint pmtu = JavaLangInteger_parseIntWithNSString_(p);
      self->_mtu_ = NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(false, pmtu);
      self->_mtu_ipv6_ = NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(true, pmtu);
      return self->_mtu_;
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  jint mtu = NetI2pRouterTransportUdpMTU_getMTUWithJavaNetInetAddress_(addr);
  if (addr != nil && ((IOSByteArray *) nil_chk([addr getAddress]))->size_ == 16) {
    if (mtu <= 0) mtu = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
    self->_mtu_ipv6_ = mtu;
  }
  else {
    if (mtu <= 0) mtu = NetI2pRouterTransportUdpPeerState_LARGE_MTU;
    self->_mtu_ = mtu;
  }
  return mtu;
}

jboolean NetI2pRouterTransportUdpUDPTransport_changeAddressWithByteArray_withInt_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *ourIP, jint ourPort) {
  jboolean fixedPort = NetI2pRouterTransportUdpUDPTransport_getIsPortFixed(self);
  jboolean updated = false;
  jboolean fireTest = false;
  jboolean isIPv6 = ((IOSByteArray *) nil_chk(ourIP))->size_ == 16;
  NetI2pDataRouterRouterAddress *current = NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(self, isIPv6);
  IOSByteArray *externalListenHost = current != nil ? [current getIP] : nil;
  jint externalListenPort = current != nil ? [current getPort] : NetI2pRouterTransportUdpUDPTransport_getRequestedPortWithBoolean_(self, isIPv6);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$@$J$$$$", @"Change address? status = ", self->_reachabilityStatus_, @" diff = ", ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] - self->_reachabilityStatusLastUpdated_), @" old = ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(externalListenHost, externalListenPort), @" new = ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort))];
  if ((fixedPort && externalListenPort > 0) || ourPort <= 0) ourPort = externalListenPort;
  @synchronized(self) {
    if (ourPort > 0 && !NetI2pRouterTransportUdpUDPTransport_eqWithByteArray_withInt_withByteArray_withInt_(externalListenHost, externalListenPort, ourIP, ourPort)) {
      if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$", @"Trying to change our external address to ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ourIP, ourPort))];
      NetI2pDataRouterRouterAddress *newAddr = NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithByteArray_withInt_withBoolean_(self, ourIP, ourPort, true);
      updated = (newAddr != nil);
    }
    else {
      if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:@"Same address as the current one"];
    }
  }
  if (fireTest) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.addressTestInsteadOfUpdate" withLong:1];
    [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(self->_testEvent_)) forceRunImmediatelyWithBoolean:isIPv6];
  }
  else if (updated) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.addressUpdated" withLong:1];
    id<JavaUtilMap> changes = create_JavaUtilHashMap_init();
    if (ourIP->size_ == 4 && !fixedPort) [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withId:JavaLangInteger_toStringWithInt_(ourPort)];
    if (ourIP->size_ == 4) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) queueLookupWithByteArray:ourIP];
    NSString *oldIP = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_IP];
    NSString *newIP = NetI2pUtilAddresses_toStringWithByteArray_(ourIP);
    if (ourIP->size_ == 4 && ![((NSString *) nil_chk(newIP)) isEqual:oldIP]) {
      jlong lastChanged = 0;
      jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
      NSString *lcs = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE];
      if (lcs != nil) {
        @try {
          lastChanged = JavaLangLong_parseLongWithNSString_(lcs);
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
      [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_IP withId:newIP];
      [changes putWithId:NetI2pRouterTransportUdpUDPTransport_PROP_IP_CHANGE withId:JavaLangLong_toStringWithLong_(now)];
      [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
      if (oldIP != nil) {
        [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([self->_context_ router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_CHANGE_IP withNSString:newIP];
      }
      if (oldIP != nil && JavaLangSystem_getPropertyWithNSString_(@"wrapper.version") != nil && [self->_context_ getBooleanPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_LAPTOP_MODE] && now - lastChanged > 10 * 60 * 1000 && [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getUptime] < 10 * 60 * 1000) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"WARN: IP changed, restarting with a new identity and port"];
        [self->_log_UDPTransport_ logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"IP changed, restarting with a new identity and port"];
        [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) killKeys];
        [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) shutdownWithInt:NetI2pRouterRouter_EXIT_HARD_RESTART];
      }
    }
    else if (ourIP->size_ == 4 && !fixedPort) {
      [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
    }
    [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) rebuildRouterInfo];
    [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(self->_testEvent_)) forceRunImmediatelyWithBoolean:isIPv6];
  }
  return updated;
}

jboolean NetI2pRouterTransportUdpUDPTransport_eqWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *laddr, jint lport, IOSByteArray *raddr, jint rport) {
  NetI2pRouterTransportUdpUDPTransport_initialize();
  return (rport == lport) && NetI2pDataDataHelper_eqWithByteArray_withByteArray_(laddr, raddr);
}

jboolean NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *addr) {
  if (addr == nil) return false;
  if ([self isPubliclyRoutableWithByteArray:addr] && (addr->size_ != 16 || JreLoadVolatileBoolean(&self->_haveIPv6Address_))) return true;
  return [self allowLocal];
}

jboolean NetI2pRouterTransportUdpUDPTransport_getIsPortFixed(NetI2pRouterTransportUdpUDPTransport *self) {
  NSString *prop = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_FIXED_PORT];
  if (prop != nil) return JavaLangBoolean_parseBooleanWithNSString_(prop);
  NetI2pRouterCommSystemFacade_Status *status = [self getReachabilityStatus];
  return status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN);
}

jboolean NetI2pRouterTransportUdpUDPTransport_locked_addRemotePeerStateWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer) {
  NetI2pDataHash *remotePeer = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer];
  jlong oldEstablishedOn = -1;
  NetI2pRouterTransportUdpPeerState *oldPeer = nil;
  if (remotePeer != nil) {
    oldPeer = [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) putWithId:remotePeer withId:peer];
    if ((oldPeer != nil) && (oldPeer != peer)) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldInfo]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$@$@", @"Peer already connected (PBID): old=", oldPeer, @" new=", peer)];
      [peer loadFromWithNetI2pRouterTransportUdpPeerState:oldPeer];
      oldEstablishedOn = [((NetI2pRouterTransportUdpPeerState *) nil_chk(oldPeer)) getKeyEstablishedTime];
    }
  }
  NetI2pRouterTransportUdpRemoteHostId *remoteId = [peer getRemoteHostId];
  if (oldPeer != nil) {
    [oldPeer dropOutbound];
    [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) removeWithNetI2pRouterTransportUdpPeerState:oldPeer];
    [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(self->_expireEvent_)) removeWithNetI2pRouterTransportUdpPeerState:oldPeer];
    NetI2pRouterTransportUdpRemoteHostId *oldID = [oldPeer getRemoteHostId];
    if (![((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(remoteId)) isEqual:oldID]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldInfo]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("@$@$@", remotePeer, @" changed address FROM ", oldID, @" TO ", remoteId)];
      NetI2pRouterTransportUdpPeerState *oldPeer2 = [((id<JavaUtilMap>) nil_chk(self->_peersByRemoteHost_)) removeWithId:oldID];
      if (oldPeer2 != oldPeer && oldPeer2 != nil) {
        [oldPeer2 dropOutbound];
        [self->_introManager_ removeWithNetI2pRouterTransportUdpPeerState:oldPeer2];
        [self->_expireEvent_ removeWithNetI2pRouterTransportUdpPeerState:oldPeer2];
      }
    }
  }
  if ([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(remoteId)) getIP] == nil && [((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) warnWithNSString:JreStrcat("$@", @"Add indirect: ", peer)];
  NetI2pRouterTransportUdpPeerState *oldPeer2 = [((id<JavaUtilMap>) nil_chk(self->_peersByRemoteHost_)) putWithId:remoteId withId:peer];
  if (oldPeer2 != nil && oldPeer2 != peer && oldPeer2 != oldPeer) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@$@", @"Peer already connected (PBRH): old=", oldPeer2, @" new=", peer)];
    [peer loadFromWithNetI2pRouterTransportUdpPeerState:oldPeer2];
    oldEstablishedOn = [oldPeer2 getKeyEstablishedTime];
    [oldPeer2 dropOutbound];
    [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) removeWithNetI2pRouterTransportUdpPeerState:oldPeer2];
    [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(self->_expireEvent_)) removeWithNetI2pRouterTransportUdpPeerState:oldPeer2];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN] && !self->_mismatchLogged_ && [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) size] != [self->_peersByRemoteHost_ size]) {
    self->_mismatchLogged_ = true;
    [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@$I$I", @"Size Mismatch after add: ", peer, @" byIDsz = ", [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) size], @" byHostsz = ", [self->_peersByRemoteHost_ size])];
  }
  [((id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle>) nil_chk(self->_activeThrottle_)) unchokeWithNetI2pDataHash:[peer getRemotePeer]];
  [self markReachableWithNetI2pDataHash:[peer getRemotePeer] withBoolean:[peer isInbound]];
  [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(self->_expireEvent_)) addWithNetI2pRouterTransportUdpPeerState:peer];
  [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) addWithNetI2pRouterTransportUdpPeerState:peer];
  if (oldEstablishedOn > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.alreadyConnected" withLong:oldEstablishedOn];
  @synchronized(self->_rebuildLock_) {
    NetI2pRouterTransportUdpUDPTransport_rebuildIfNecessary(self);
    NetI2pRouterCommSystemFacade_Status *status = [self getReachabilityStatus];
    if (status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED) && status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED) && self->_reachabilityStatusUnchanged_ < 7) {
      [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(self->_testEvent_)) forceRunSoonWithBoolean:[peer isIPv6]];
    }
  }
  return true;
}

void NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer, jboolean shouldBanlist, NSString *why) {
  [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) dropOutbound];
  [peer expireInboundMessages];
  [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) removeWithNetI2pRouterTransportUdpPeerState:peer];
  [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(self->_fragments_)) dropPeerWithNetI2pRouterTransportUdpPeerState:peer];
  NetI2pRouterTransportUdpPeerState *altByIdent = nil;
  if ([peer getRemotePeer] != nil) {
    NetI2pRouterTransportUdpUDPTransport_dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState_(self, peer);
    if (shouldBanlist) {
      [self markUnreachableWithNetI2pDataHash:[peer getRemotePeer]];
    }
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.droppedPeer" withLong:now - [peer getLastReceiveTime] withLong:now - [peer getKeyEstablishedTime]];
    altByIdent = [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) removeWithId:[peer getRemotePeer]];
  }
  NetI2pRouterTransportUdpRemoteHostId *remoteId = [peer getRemoteHostId];
  NetI2pRouterTransportUdpPeerState *altByHost = [((id<JavaUtilMap>) nil_chk(self->_peersByRemoteHost_)) removeWithId:remoteId];
  if (altByIdent != altByHost && [((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) warnWithNSString:JreStrcat("$@$@$@$I$I", @"Mismatch on remove, RHID = ", remoteId, @" byID = ", altByIdent, @" byHost = ", altByHost, @" byIDsz = ", [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) size], @" byHostsz = ", [self->_peersByRemoteHost_ size])];
  [((id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle>) nil_chk(self->_activeThrottle_)) unchokeWithNetI2pDataHash:[peer getRemotePeer]];
  [((NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *) nil_chk(self->_expireEvent_)) removeWithNetI2pRouterTransportUdpPeerState:peer];
  if ((altByIdent != nil) && (peer != altByIdent)) NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(self, altByIdent, shouldBanlist, @"recurse");
  if ((altByHost != nil) && (peer != altByHost)) NetI2pRouterTransportUdpUDPTransport_locked_dropPeerWithNetI2pRouterTransportUdpPeerState_withBoolean_withNSString_(self, altByHost, shouldBanlist, @"recurse");
}

void NetI2pRouterTransportUdpUDPTransport_rebuildIfNecessary(NetI2pRouterTransportUdpUDPTransport *self) {
  @synchronized(self->_rebuildLock_) {
    if (NetI2pRouterTransportUdpUDPTransport_locked_needsRebuild(self)) NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(self);
  }
}

jboolean NetI2pRouterTransportUdpUDPTransport_locked_needsRebuild(NetI2pRouterTransportUdpUDPTransport *self) {
  if (self->_needsRebuild_) return true;
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) isHidden]) return false;
  jboolean v6Only = [self getIPv6Config] == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY);
  NetI2pDataRouterRouterAddress *addr = [self getCurrentAddressWithBoolean:v6Only];
  if (!v6Only && [self introducersRequired]) {
    NetI2pRouterTransportUdpUDPAddress *ua = create_NetI2pRouterTransportUdpUDPAddress_initWithNetI2pDataRouterRouterAddress_(addr);
    jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
    jint valid = 0;
    for (jint i = 0; i < [ua getIntroducerCount]; i++) {
      IOSByteArray *key = [ua getIntroducerKeyWithInt:i];
      if (((IOSByteArray *) nil_chk(key))->size_ != NetI2pDataHash_HASH_LENGTH) continue;
      jlong exp = [ua getIntroducerExpirationWithInt:i];
      if (exp > 0 && exp < now + NetI2pRouterTransportUdpUDPTransport_INTRODUCER_EXPIRATION_MARGIN) continue;
      NetI2pRouterTransportUdpPeerState *peer = [self getPeerStateWithNetI2pDataHash:create_NetI2pDataHash_initWithByteArray_(key)];
      if (peer != nil) valid++;
    }
    jlong sinceSelected = now - self->_introducersSelectedOn_;
    if (valid >= NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT) {
      if (sinceSelected > 17 * 60 * 1000) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$$", @"Our introducers are valid, but haven't changed in ", NetI2pDataDataHelper_formatDurationWithLong_(sinceSelected), @", so lets rechoose")];
        return true;
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$$$", @"Our introducers are valid and were selected ", NetI2pDataDataHelper_formatDurationWithLong_(sinceSelected), @" ago")];
        return false;
      }
    }
    else if (sinceSelected > 2 * 60 * 1000) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$I$IC", @"Need more introducers (have ", valid, @" need ", NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT, ')')];
      return true;
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$I$I$$$", @"Need more introducers (have ", valid, @" need ", NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT, @") but we just chose them ", NetI2pDataDataHelper_formatDurationWithLong_(sinceSelected), @" ago so wait")];
      return false;
    }
  }
  else {
    IOSByteArray *externalListenHost = addr != nil ? [addr getIP] : nil;
    jint externalListenPort = addr != nil ? [addr getPort] : -1;
    jboolean rv = (externalListenHost == nil) || (externalListenPort <= 0);
    if (!rv) {
      if ([((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getOptionWithNSString:@"ihost0"] != nil) rv = true;
    }
    if (rv) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$$C", @"Need to initialize our direct SSU info (", NetI2pUtilAddresses_toStringWithByteArray_withInt_(externalListenHost, externalListenPort), ')')];
    }
    else if ([((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getPort] <= 0 || [addr getHost] == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:@"Our direct SSU info is initialized, but not used in our address yet"];
      rv = true;
    }
    else {
    }
    return rv;
  }
}

void NetI2pRouterTransportUdpUDPTransport_dropPeerCapacitiesWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpPeerState *peer) {
}

void NetI2pRouterTransportUdpUDPTransport_destroyAll(NetI2pRouterTransportUdpUDPTransport *self) {
  for (NetI2pRouterTransportUdpUDPEndpoint * __strong endpoint in nil_chk(self->_endpoints_)) {
    [((NetI2pRouterTransportUdpUDPEndpoint *) nil_chk(endpoint)) clearOutbound];
  }
  jint howMany = [((id<JavaUtilMap>) nil_chk(self->_peersByIdent_)) size];
  jint burst = 8;
  jint pps = JavaLangMath_maxWithInt_withInt_(48, ([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) bandwidthLimiter])) getOutboundKBytesPerSecond] * 1000 / 4) / 48);
  jint burstps = pps / burst;
  jint toSleep = JavaLangMath_maxWithInt_withInt_(8, (1000 / burstps));
  jint count = 0;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldInfo]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$I$", @"Sending destroy to : ", howMany, @" peers")];
  for (NetI2pRouterTransportUdpPeerState * __strong peer in nil_chk([self->_peersByIdent_ values])) {
    [self sendDestroyWithNetI2pRouterTransportUdpPeerState:peer];
    if ((++count) % burst == 0) {
      @try {
        JavaLangThread_sleepWithLong_(toSleep);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
  }
  toSleep = JavaLangMath_minWithInt_withInt_(howMany / 3, 750);
  if (toSleep > 0) {
    @try {
      JavaLangThread_sleepWithLong_(toSleep);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

jboolean NetI2pRouterTransportUdpUDPTransport_preferUDP(NetI2pRouterTransportUdpUDPTransport *self) {
  NSString *pref = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP withNSString:NetI2pRouterTransportUdpUDPTransport_DEFAULT_PREFER_UDP];
  return (pref != nil) && ![@"false" isEqual:pref];
}

jboolean NetI2pRouterTransportUdpUDPTransport_alwaysPreferUDP(NetI2pRouterTransportUdpUDPTransport *self) {
  NSString *pref = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_PREFER_UDP withNSString:NetI2pRouterTransportUdpUDPTransport_DEFAULT_PREFER_UDP];
  return (pref != nil) && [@"always" isEqual:pref];
}

jboolean NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(NetI2pRouterTransportUdpUDPTransport *self) {
  NSString *h = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST];
  return h != nil && [h java_length] > 0;
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(NetI2pRouterTransportUdpUDPTransport *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_UDPTransport_ debugWithNSString:@"REA1"];
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(self, true);
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean allowRebuildRouterInfo) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldDebug]) [self->_log_UDPTransport_ debugWithNSString:JreStrcat("$Z", @"REA2 ", allowRebuildRouterInfo)];
  jint port = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_PORT withInt:-1];
  NSString *host = nil;
  if (NetI2pRouterTransportUdpUDPTransport_explicitAddressSpecified(self)) {
    host = [self->_context_ getPropertyWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_EXTERNAL_HOST];
    if (host != nil) {
      IOSObjectArray *hosts = NetI2pDataDataHelper_splitWithNSString_withNSString_(host, @"[,; \x0d\n\t]");
      NetI2pDataRouterRouterAddress *rv = nil;
      jboolean v4 = false;
      jboolean v6 = false;
      NetI2pRouterTransportTransportUtil_IPv6Config *cfg = [self getIPv6Config];
      if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED)) v6 = true;
      else if (cfg == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) v4 = true;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(hosts))->size_; i++) {
        NSString *h = IOSObjectArray_Get(hosts, i);
        if ([((NSString *) nil_chk(h)) java_length] <= 0) continue;
        if (NetI2pUtilAddresses_isIPv4AddressWithNSString_(h)) {
          if (v4) continue;
          v4 = true;
        }
        else if (NetI2pUtilAddresses_isIPv6AddressWithNSString_(h)) {
          if (v6) continue;
          v6 = true;
        }
        else {
          jint valid = 0;
          id<JavaUtilList> ips = NetI2pUtilAddresses_getIPsWithNSString_(h);
          if (ips != nil) {
            for (IOSByteArray * __strong ip in ips) {
              if (!NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(self, ip)) {
                if ([self->_log_UDPTransport_ shouldWarn]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$$$", @"REA2: skipping invalid ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
                continue;
              }
              if ((v4 && ((IOSByteArray *) nil_chk(ip))->size_ == 4) || (v6 && ((IOSByteArray *) nil_chk(ip))->size_ == 16)) {
                if ([self->_log_UDPTransport_ shouldWarn]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$$$$", @"REA2: skipping additional ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
                continue;
              }
              if (((IOSByteArray *) nil_chk(ip))->size_ == 4) v4 = true;
              else if (ip->size_ == 16) v6 = true;
              valid++;
              if ([self->_log_UDPTransport_ shouldDebug]) [self->_log_UDPTransport_ debugWithNSString:JreStrcat("$$$$", @"REA2: adding ", NetI2pUtilAddresses_toStringWithByteArray_(ip), @" for ", h)];
              NetI2pDataRouterRouterAddress *trv = NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithByteArray_withInt_withBoolean_(self, ip, port, allowRebuildRouterInfo);
              if (trv != nil) rv = trv;
            }
          }
          if (valid == 0) [self->_log_UDPTransport_ errorWithNSString:JreStrcat("$$", @"No valid IPs for configured hostname ", h)];
          continue;
        }
        NetI2pDataRouterRouterAddress *trv = NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, h, port, allowRebuildRouterInfo);
        if (trv != nil) rv = trv;
      }
      return rv;
    }
  }
  else {
    if (![self introducersRequired]) {
      jboolean v6Only = [self getIPv6Config] == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY);
      NetI2pDataRouterRouterAddress *cur = NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(self, v6Only);
      if (cur != nil) host = [cur getHost];
    }
  }
  return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, host, port, allowRebuildRouterInfo);
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithByteArray_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, IOSByteArray *ip, jint port, jboolean allowRebuildRouterInfo) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldDebug]) [self->_log_UDPTransport_ debugWithNSString:JreStrcat("$$", @"REA3 ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port))];
  if (ip == nil) return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, nil, port, allowRebuildRouterInfo);
  if (NetI2pRouterTransportUdpUDPTransport_isValidWithByteArray_(self, ip)) return NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, NetI2pUtilAddresses_toStringWithByteArray_(ip), port, allowRebuildRouterInfo);
  return nil;
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddressWithNSString_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NSString *host, jint port, jboolean allowRebuildRouterInfo) {
  @synchronized(self->_rebuildLock_) {
    return JreRetainedLocalValue(NetI2pRouterTransportUdpUDPTransport_locked_rebuildExternalAddressWithNSString_withInt_withBoolean_(self, host, port, allowRebuildRouterInfo));
  }
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_locked_rebuildExternalAddressWithNSString_withInt_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NSString *host, jint port, jboolean allowRebuildRouterInfo) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldDebug]) [self->_log_UDPTransport_ debugWithNSString:JreStrcat("$$CI", @"REA4 ", host, ':', port)];
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) isHidden]) return nil;
  NetI2pUtilOrderedProperties *options = create_NetI2pUtilOrderedProperties_init();
  jboolean directIncluded;
  jboolean isIPv6 = host != nil && [host java_contains:@":"];
  jboolean introducersRequired = (!isIPv6) && [self introducersRequired];
  if (!introducersRequired && NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(self) && port > 0 && host != nil) {
    [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_PORT withNSString:NSString_java_valueOfInt_(port)];
    [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_HOST withNSString:host];
    directIncluded = true;
  }
  else {
    directIncluded = false;
  }
  jboolean introducersIncluded = false;
  if (introducersRequired) {
    NetI2pDataRouterRouterAddress *current = [self getCurrentAddressWithBoolean:isIPv6];
    jint found = [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(self->_introManager_)) pickInboundWithNetI2pDataRouterRouterAddress:current withJavaUtilProperties:options withInt:NetI2pRouterTransportUdpUDPTransport_PUBLIC_RELAY_COUNT];
    if (found > 0) {
      if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$Z$Z$I", @"Direct? ", directIncluded, @" reqd? ", introducersRequired, @" picked introducers: ", found)];
      self->_introducersSelectedOn_ = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
      introducersIncluded = true;
    }
    else {
      if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$Z$Z$", @"Direct? ", directIncluded, @" reqd? ", introducersRequired, @" no introducers")];
    }
  }
  if (introducersRequired) [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_CAPACITY withNSString:NetI2pRouterTransportUdpUDPTransport_CAP_TESTING];
  else [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_CAPACITY withNSString:NetI2pRouterTransportUdpUDPTransport_CAP_TESTING_INTRO];
  jint mtu;
  if (host == nil) {
    mtu = self->_mtu_;
  }
  else {
    @try {
      JavaNetInetAddress *ia = JavaNetInetAddress_getByNameWithNSString_(host);
      mtu = NetI2pRouterTransportUdpUDPTransport_setMTUWithJavaNetInetAddress_(self, ia);
    }
    @catch (JavaNetUnknownHostException *uhe) {
      mtu = self->_mtu_;
    }
  }
  if (mtu != NetI2pRouterTransportUdpPeerState_LARGE_MTU) [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_MTU withNSString:JavaLangInteger_toStringWithInt_(mtu)];
  if (directIncluded || introducersIncluded) {
    if (self->_introKey_ != nil) [options setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_INTRO_KEY withNSString:[self->_introKey_ toBase64]];
    jint cost = NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST;
    if (![self haveCapacityWithInt:91]) cost += NetI2pRouterTransportTransportImpl_CONGESTION_COST_ADJUSTMENT;
    if (introducersIncluded) cost += 2;
    if (isIPv6) {
      NetI2pRouterTransportTransportUtil_IPv6Config *config = [self getIPv6Config];
      if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED)) cost--;
      else if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_NOT_PREFERRED)) cost++;
    }
    NetI2pDataRouterRouterAddress *addr = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportUdpUDPTransport_STYLE, options, cost);
    NetI2pDataRouterRouterAddress *current = [self getCurrentAddressWithBoolean:isIPv6];
    jboolean wantsRebuild = ![addr deepEqualsWithNetI2pDataRouterRouterAddress:current];
    if (port > 0 && host != nil) {
      NetI2pDataRouterRouterAddress *local;
      if (directIncluded) {
        local = addr;
      }
      else {
        NetI2pUtilOrderedProperties *localOpts = create_NetI2pUtilOrderedProperties_init();
        [localOpts setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_PORT withNSString:NSString_java_valueOfInt_(port)];
        [localOpts setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_HOST withNSString:host];
        local = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportUdpUDPTransport_STYLE, localOpts, cost);
      }
      NetI2pRouterTransportUdpUDPTransport_replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress_withBoolean_(self, local, isIPv6);
    }
    if (wantsRebuild) {
      if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$@", @"Address rebuilt: ", addr) withJavaLangThrowable:create_JavaLangException_init()];
      [self replaceAddressWithNetI2pDataRouterRouterAddress:addr];
      if (allowRebuildRouterInfo) [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) rebuildRouterInfo];
    }
    else {
      addr = nil;
    }
    if (!isIPv6) self->_needsRebuild_ = false;
    return addr;
  }
  else {
    if ([self->_log_UDPTransport_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$ZC", @"Wanted to rebuild my SSU address, but couldn't specify either the direct or indirect info (needs introducers? ", introducersRequired, ')') withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"source")];
    self->_needsRebuild_ = true;
    if (port > 0 && host != nil) {
      NetI2pUtilOrderedProperties *localOpts = create_NetI2pUtilOrderedProperties_init();
      [localOpts setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_PORT withNSString:NSString_java_valueOfInt_(port)];
      [localOpts setPropertyWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_HOST withNSString:host];
      NetI2pDataRouterRouterAddress *local = create_NetI2pDataRouterRouterAddress_initWithNSString_withNetI2pUtilOrderedProperties_withInt_(NetI2pRouterTransportUdpUDPTransport_STYLE, localOpts, NetI2pRouterTransportUdpUDPTransport_DEFAULT_COST);
      NetI2pRouterTransportUdpUDPTransport_replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress_withBoolean_(self, local, isIPv6);
    }
    if ([self hasCurrentAddress]) {
      [self removeAddressWithBoolean:false];
      if (allowRebuildRouterInfo) [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) rebuildRouterInfo];
    }
    return nil;
  }
}

void NetI2pRouterTransportUdpUDPTransport_replaceCurrentExternalAddressWithNetI2pDataRouterRouterAddress_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pDataRouterRouterAddress *ra, jboolean isIPv6) {
  if (isIPv6) JreStrongAssign(&self->_currentOurV6Address_, ra);
  else JreStrongAssign(&self->_currentOurV4Address_, ra);
}

NetI2pDataRouterRouterAddress *NetI2pRouterTransportUdpUDPTransport_getCurrentExternalAddressWithBoolean_(NetI2pRouterTransportUdpUDPTransport *self, jboolean isIPv6) {
  @synchronized(self->_rebuildLock_) {
    return JreRetainedLocalValue(isIPv6 ? self->_currentOurV6Address_ : self->_currentOurV4Address_);
  }
}

jboolean NetI2pRouterTransportUdpUDPTransport_allowDirectUDP(NetI2pRouterTransportUdpUDPTransport *self) {
  return [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportUdpUDPTransport_PROP_ALLOW_DIRECT];
}

void NetI2pRouterTransportUdpUDPTransport_noteSendWithNetI2pRouterTransportUdpOutboundMessageState_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterTransportUdpOutboundMessageState *msg, jboolean successful) {
  if (![((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) messageHistory])) getDoLog]) return;
  jint pushCount = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(msg)) getPushCount];
  jint sends = [msg getMaxSends];
  jboolean expired = [msg isExpired];
  NetI2pRouterOutNetMessage *m = [msg getMessage];
  NetI2pRouterTransportUdpPeerState *p = [msg getPeer];
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithLong:[msg getLifetime]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" sends: "])) appendWithInt:sends];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" pushes: "])) appendWithInt:pushCount];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" expired? "])) appendWithBoolean:expired];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" unacked: "])) appendWithInt:[msg getUnackedSize]];
  if ((p != nil) && (!successful)) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" consec_failed: "])) appendWithInt:[((NetI2pRouterTransportUdpPeerState *) nil_chk(p)) getConsecutiveFailedSends]];
    jlong timeSinceSend = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [p getLastSendFullyTime];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lastFullSend: "])) appendWithLong:timeSinceSend];
    jlong timeSinceRecv = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [p getLastReceiveTime];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lastRecv: "])) appendWithLong:timeSinceRecv];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" xfer: "])) appendWithInt:[p getSendBps]])) appendWithNSString:@"/"])) appendWithInt:[p getReceiveBps]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" mtu: "])) appendWithInt:[p getMTU]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" rto: "])) appendWithInt:[p getRTO]];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" sent: "])) appendWithInt:[p getMessagesSent]])) appendWithNSString:@"/"])) appendWithInt:[p getPacketsTransmitted]];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" recv: "])) appendWithInt:[p getMessagesReceived]])) appendWithNSString:@"/"])) appendWithInt:[p getPacketsReceived]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" uptime: "])) appendWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [p getKeyEstablishedTime]];
  }
  if ((m != nil) && (p != nil)) {
    [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) sendMessageWithNSString:[((NetI2pRouterOutNetMessage *) nil_chk(m)) getMessageType] withLong:[msg getMessageId] withLong:[m getExpiration] withNetI2pDataHash:[((NetI2pRouterTransportUdpPeerState *) nil_chk(p)) getRemotePeer] withBoolean:successful withNSString:[buf description]];
  }
  else {
    [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) sendMessageWithNSString:@"establish" withLong:[msg getMessageId] withLong:-1 withNetI2pDataHash:(p != nil ? [p getRemotePeer] : nil) withBoolean:successful withNSString:[buf description]];
  }
}

void NetI2pRouterTransportUdpUDPTransport_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterCommSystemFacade_Status *status) {
  [self setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:status withBoolean:false];
}

void NetI2pRouterTransportUdpUDPTransport_locked_setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(NetI2pRouterTransportUdpUDPTransport *self, NetI2pRouterCommSystemFacade_Status *newStatus, jboolean isIPv6) {
  NetI2pRouterCommSystemFacade_Status *old = self->_reachabilityStatus_;
  NetI2pRouterCommSystemFacade_Status *status = NetI2pRouterCommSystemFacade_Status_mergeWithNetI2pRouterCommSystemFacade_Status_withNetI2pRouterCommSystemFacade_Status_(old, newStatus);
  [((NetI2pRouterTransportUdpPeerTestEvent *) nil_chk(self->_testEvent_)) setLastTestedWithBoolean:isIPv6];
  NetI2pRouterTransportTransportUtil_IPv6Config *config = [self getIPv6Config];
  if (config == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) {
    if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
    else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
    else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN);
  }
  if (status != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN)) {
    if (self->_currentOurV6Address_ == nil && !JreLoadVolatileBoolean(&self->_haveIPv6Address_)) {
      if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
      else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_UNKNOWN)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
      else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      else if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK)) status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
    }
    if (status != old) {
      if ((old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK) && (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT) || status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED) || status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK) || status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK) || status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED))) || (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK) && (old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT) || old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED) || old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK) || old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK) || old == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED)))) {
        if (status != self->_reachabilityStatusPending_) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@$@$@", @"Old status: ", old, @" status pending confirmation: ", status, @" Caused by update: ", newStatus)];
          JreStrongAssign(&self->_reachabilityStatusPending_, status);
          [self->_testEvent_ forceRunSoonWithBoolean:isIPv6];
          return;
        }
      }
      self->_reachabilityStatusUnchanged_ = 0;
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
      self->_reachabilityStatusLastUpdated_ = now;
      JreStrongAssign(&self->_reachabilityStatus_, status);
    }
    else {
      self->_reachabilityStatusUnchanged_++;
    }
    JreStrongAssign(&self->_reachabilityStatusPending_, status);
  }
  if (status != old) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_UDPTransport_ warnWithNSString:JreStrcat("$@$@$@$", @"Old status: ", old, @" New status: ", status, @" Caused by update: ", newStatus, @" from: ") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"traceback")];
    if (old != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN)) [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_REACHABILITY withNSString:JreStrcat("$$$$", @"from ", [self _tWithNSString:[((NetI2pRouterCommSystemFacade_Status *) nil_chk(old)) toStatusString]], @" to ", [self _tWithNSString:[((NetI2pRouterCommSystemFacade_Status *) nil_chk(status)) toStatusString]])];
    NetI2pRouterTransportUdpUDPTransport_rebuildExternalAddress(self);
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_UDPTransport_ infoWithNSString:JreStrcat("$@$@$I$$$", @"Status unchanged: ", self->_reachabilityStatus_, @" after update: ", newStatus, @" (unchanged ", self->_reachabilityStatusUnchanged_, @" consecutive times), last updated ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] - self->_reachabilityStatusLastUpdated_), @" ago")];
  }
}

IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpUDPTransport__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPTransport)

@implementation NetI2pRouterTransportUdpUDPTransport_RemoveDropList

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$
                    withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)peer {
  NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(self, outer$, peer);
  return self;
}

- (void)timeReached {
  [((id<JavaUtilSet>) nil_chk(this$0_->_dropList_)) removeWithId:_peer_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPTransport:withNetI2pRouterTransportUdpRemoteHostId:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pRouterTransportUdpRemoteHostId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpRemoteHostId;", "LNetI2pRouterTransportUdpUDPTransport;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPTransport_RemoveDropList = { "RemoveDropList", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPTransport_RemoveDropList;
}

@end

void NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport_RemoveDropList *self, NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_peer_, peer);
}

NetI2pRouterTransportUdpUDPTransport_RemoveDropList *new_NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPTransport_RemoveDropList, initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_, outer$, peer)
}

NetI2pRouterTransportUdpUDPTransport_RemoveDropList *create_NetI2pRouterTransportUdpUDPTransport_RemoveDropList_initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_(NetI2pRouterTransportUdpUDPTransport *outer$, NetI2pRouterTransportUdpRemoteHostId *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPTransport_RemoveDropList, initWithNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpRemoteHostId_, outer$, peer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPTransport_RemoveDropList)

@implementation NetI2pRouterTransportUdpUDPTransport_SharedBid

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$
                                                     withInt:(jint)ms {
  NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(self, outer$, ms);
  return self;
}

- (id<NetI2pRouterTransportTransport>)getTransport {
  return this$0_;
}

- (NSString *)description {
  return JreStrcat("$I", @"UDP bid @ ", [self getLatencyMs]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransport;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPTransport:withInt:);
  methods[1].selector = @selector(getTransport);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "LNetI2pRouterTransportUdpUDPTransport;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPTransport_SharedBid = { "SharedBid", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 3, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPTransport_SharedBid;
}

@end

void NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport_SharedBid *self, NetI2pRouterTransportUdpUDPTransport *outer$, jint ms) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterTransportTransportBid_init(self);
  [self setLatencyMsWithInt:ms];
}

NetI2pRouterTransportUdpUDPTransport_SharedBid *new_NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport *outer$, jint ms) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPTransport_SharedBid, initWithNetI2pRouterTransportUdpUDPTransport_withInt_, outer$, ms)
}

NetI2pRouterTransportUdpUDPTransport_SharedBid *create_NetI2pRouterTransportUdpUDPTransport_SharedBid_initWithNetI2pRouterTransportUdpUDPTransport_withInt_(NetI2pRouterTransportUdpUDPTransport *outer$, jint ms) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPTransport_SharedBid, initWithNetI2pRouterTransportUdpUDPTransport_withInt_, outer$, ms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPTransport_SharedBid)

@implementation NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$ {
  NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(self, outer$);
  return self;
}

- (void)timeReached {
  jboolean haveCap = [this$0_ haveCapacityWithInt:33];
  if (haveCap) {
    jlong inc;
    if (_lastLoopShort_) inc = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_INCREMENT * NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SHORT_LOOP_TIME / NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME;
    else inc = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_INCREMENT;
    JreAssignVolatileLong(&this$0_->_expireTimeout_, JavaLangMath_minWithLong_withLong_(JreLoadVolatileLong(&this$0_->_expireTimeout_) + inc, NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT));
  }
  else {
    jlong dec;
    if (_lastLoopShort_) dec = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_DECREMENT * NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SHORT_LOOP_TIME / NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME;
    else dec = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_DECREMENT;
    JreAssignVolatileLong(&this$0_->_expireTimeout_, JavaLangMath_maxWithLong_withLong_(JreLoadVolatileLong(&this$0_->_expireTimeout_) - dec, NetI2pRouterTransportUdpUDPTransport_MIN_EXPIRE_TIMEOUT));
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  jlong shortInactivityCutoff = now - JreLoadVolatileLong(&this$0_->_expireTimeout_);
  jlong longInactivityCutoff = now - NetI2pRouterTransportUdpUDPTransport_EXPIRE_TIMEOUT;
  jlong mayDisconCutoff = now - NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_MAY_DISCON_TIMEOUT;
  jlong pingCutoff = now - (2 * 60 * 60 * 1000);
  jlong pingFirewallCutoff = now - NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_PING_FIREWALL_CUTOFF;
  jboolean shouldPingFirewall = this$0_->_reachabilityStatus_ != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
  jint currentListenPort = NetI2pRouterTransportUdpUDPTransport_getListenPortWithBoolean_(this$0_, false);
  jboolean pingOneOnly = shouldPingFirewall && [this$0_ getExternalPortWithBoolean:false] == currentListenPort;
  jboolean shortLoop = shouldPingFirewall || !haveCap || [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([this$0_->_context_ netDb])) floodfillEnabled];
  _lastLoopShort_ = shortLoop;
  [((id<JavaUtilList>) nil_chk(_expireBuffer_)) clear];
  _runCount_++;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(_expirePeers_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpPeerState *peer = [iter next];
    jlong inactivityCutoff;
    if ([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getWeRelayToThemAs] > 0 || [peer getIntroducerTime] > pingCutoff) {
      inactivityCutoff = longInactivityCutoff;
    }
    else if ((!haveCap || ![peer isInbound]) && [peer getMayDisconnect] && [peer getMessagesReceived] <= 2 && [peer getMessagesSent] <= 2) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_UDPTransport_)) shouldInfo]) [this$0_->_log_UDPTransport_ infoWithNSString:JreStrcat("$@", @"Possible early disconnect for: ", peer)];
      inactivityCutoff = mayDisconCutoff;
    }
    else {
      inactivityCutoff = shortInactivityCutoff;
    }
    if (([peer getLastReceiveTime] < inactivityCutoff) && ([peer getLastSendTime] < inactivityCutoff)) {
      [_expireBuffer_ addWithId:peer];
      [iter remove];
    }
    else if (shouldPingFirewall && ((_runCount_ ^ ((jint) [peer hash])) & (NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SLICES - 1)) == 0 && [peer getLastSendOrPingTime] < pingFirewallCutoff && [peer getLastReceiveTime] < pingFirewallCutoff) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_UDPTransport_ debugWithNSString:JreStrcat("$@", @"Pinging for firewall: ", peer)];
      [this$0_ sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(this$0_->_destroyBuilder_)) buildPingWithNetI2pRouterTransportUdpPeerState:peer]];
      [peer setLastPingTimeWithLong:now];
      if (pingOneOnly) shouldPingFirewall = false;
    }
  }
  if (![_expireBuffer_ isEmpty]) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_UDPTransport_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_UDPTransport_ infoWithNSString:JreStrcat("$I$", @"Expiring ", [_expireBuffer_ size], @" peers")];
    for (NetI2pRouterTransportUdpPeerState * __strong peer in _expireBuffer_) {
      [this$0_ sendDestroyWithNetI2pRouterTransportUdpPeerState:peer];
      [this$0_ dropPeerWithNetI2pRouterTransportUdpPeerState:peer withBoolean:false withNSString:@"idle too long"];
    }
    [_expireBuffer_ clear];
  }
  if (JreLoadVolatileBoolean(&_alive_)) [self scheduleWithLong:shortLoop ? NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SHORT_LOOP_TIME : NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME];
}

- (void)addWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  [((id<JavaUtilSet>) nil_chk(_expirePeers_)) addWithId:peer];
}

- (void)removeWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  [((id<JavaUtilSet>) nil_chk(_expirePeers_)) removeWithId:peer];
}

- (void)setIsAliveWithBoolean:(jboolean)isAlive {
  JreAssignVolatileBoolean(&_alive_, isAlive);
  if (isAlive) {
    [self rescheduleWithLong:NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME];
  }
  else {
    [self cancel];
    [((id<JavaUtilSet>) nil_chk(_expirePeers_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_expirePeers_);
  RELEASE_(_expireBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(addWithNetI2pRouterTransportUdpPeerState:);
  methods[3].selector = @selector(removeWithNetI2pRouterTransportUdpPeerState:);
  methods[4].selector = @selector(setIsAliveWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_expirePeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "_expireBuffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_runCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastLoopShort_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PING_FIREWALL_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_PING_FIREWALL_TIME, 0x1a, -1, -1, -1, -1 },
    { "PING_FIREWALL_CUTOFF", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_PING_FIREWALL_CUTOFF, 0x1a, -1, -1, -1, -1 },
    { "SLICES", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SLICES, 0x1a, -1, -1, -1, -1 },
    { "SHORT_LOOP_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_SHORT_LOOP_TIME, 0x1a, -1, -1, -1, -1 },
    { "LONG_LOOP_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_LONG_LOOP_TIME, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE_INCREMENT", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_INCREMENT, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE_DECREMENT", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_EXPIRE_DECREMENT, 0x1a, -1, -1, -1, -1 },
    { "MAY_DISCON_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_MAY_DISCON_TIMEOUT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LNetI2pRouterTransportUdpPeerState;", "remove", "setIsAlive", "Z", "Ljava/util/Set<Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/List<Lnet/i2p/router/transport/udp/PeerState;>;", "LNetI2pRouterTransportUdpUDPTransport;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent = { "ExpirePeerEvent", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 5, 14, 7, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent;
}

@end

void NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *self, NetI2pRouterTransportUdpUDPTransport *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  JreStrongAssignAndConsume(&self->_expirePeers_, new_NetI2pUtilConcurrentHashSet_initWithInt_(128));
  JreStrongAssignAndConsume(&self->_expireBuffer_, new_JavaUtilArrayList_init());
}

NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *new_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, initWithNetI2pRouterTransportUdpUDPTransport_, outer$)
}

NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent *create_NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent, initWithNetI2pRouterTransportUdpUDPTransport_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPTransport_ExpirePeerEvent)

@implementation NetI2pRouterTransportUdpUDPTransport_PingIntroducers

- (instancetype)initWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)outer$ {
  NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(self, outer$);
  return self;
}

- (void)timeReached {
  if ([this$0_ introducersRequired]) [((NetI2pRouterTransportUdpIntroductionManager *) nil_chk(this$0_->_introManager_)) pingIntroducers];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpUDPTransport;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPTransport_PingIntroducers = { "PingIntroducers", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPTransport_PingIntroducers;
}

@end

void NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport_PingIntroducers *self, NetI2pRouterTransportUdpUDPTransport *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpUDPTransport_PingIntroducers *new_NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPTransport_PingIntroducers, initWithNetI2pRouterTransportUdpUDPTransport_, outer$)
}

NetI2pRouterTransportUdpUDPTransport_PingIntroducers *create_NetI2pRouterTransportUdpUDPTransport_PingIntroducers_initWithNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpUDPTransport *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPTransport_PingIntroducers, initWithNetI2pRouterTransportUdpUDPTransport_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPTransport_PingIntroducers)
