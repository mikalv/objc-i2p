//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPReceiver.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/util/Arrays.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterThrottle.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/PacketHandler.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/SocketListener.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPReceiver.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@class NetI2pRouterTransportUdpUDPReceiver_Runner;

@interface NetI2pRouterTransportUdpUDPReceiver () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  JavaNetDatagramSocket *_socket_;
  NSString *_name_;
  volatile_jboolean _keepRunning_;
  NetI2pRouterTransportUdpUDPReceiver_Runner *_runner_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpPacketHandler *_handler_;
  id<NetI2pRouterTransportUdpSocketListener> _endpoint_;
}

- (jint)receiveWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet;

- (jint)doReceiveWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _socket_, JavaNetDatagramSocket *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _runner_, NetI2pRouterTransportUdpUDPReceiver_Runner *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _handler_, NetI2pRouterTransportUdpPacketHandler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPReceiver, _endpoint_, id<NetI2pRouterTransportUdpSocketListener>)

inline jboolean NetI2pRouterTransportUdpUDPReceiver_get__isAndroid(void);
static jboolean NetI2pRouterTransportUdpUDPReceiver__isAndroid;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTransportUdpUDPReceiver, _isAndroid, jboolean)

inline jlong NetI2pRouterTransportUdpUDPReceiver_get_MAX_QUEUE_PERIOD(void);
#define NetI2pRouterTransportUdpUDPReceiver_MAX_QUEUE_PERIOD 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPReceiver, MAX_QUEUE_PERIOD, jlong)

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPReceiver_receiveWithNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpUDPReceiver *self, NetI2pRouterTransportUdpUDPPacket *packet);

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPReceiver_doReceiveWithNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpUDPReceiver *self, NetI2pRouterTransportUdpUDPPacket *packet);

@interface NetI2pRouterTransportUdpUDPReceiver_Runner : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpUDPReceiver *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPReceiver:(NetI2pRouterTransportUdpUDPReceiver *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPReceiver_Runner)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver_Runner *self, NetI2pRouterTransportUdpUDPReceiver *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPReceiver_Runner *new_NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPReceiver_Runner *create_NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPReceiver_Runner)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpUDPReceiver)

@implementation NetI2pRouterTransportUdpUDPReceiver

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                        withJavaNetDatagramSocket:(JavaNetDatagramSocket *)socket
                                     withNSString:(NSString *)name
       withNetI2pRouterTransportUdpSocketListener:(id<NetI2pRouterTransportUdpSocketListener>)lsnr {
  NetI2pRouterTransportUdpUDPReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(self, ctx, transport, socket, name, lsnr);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_keepRunning_, true);
    NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(_runner_, _name_, true);
    [t start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_keepRunning_, false);
  }
}

- (jint)receiveWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  return NetI2pRouterTransportUdpUDPReceiver_receiveWithNetI2pRouterTransportUdpUDPPacket_(self, packet);
}

- (jint)doReceiveWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  return NetI2pRouterTransportUdpUDPReceiver_doReceiveWithNetI2pRouterTransportUdpUDPPacket_(self, packet);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_socket_);
  RELEASE_(_name_);
  RELEASE_(_runner_);
  RELEASE_(_transport_);
  RELEASE_(_handler_);
  RELEASE_(_endpoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withJavaNetDatagramSocket:withNSString:withNetI2pRouterTransportUdpSocketListener:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(receiveWithNetI2pRouterTransportUdpUDPPacket:);
  methods[4].selector = @selector(doReceiveWithNetI2pRouterTransportUdpUDPPacket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetDatagramSocket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keepRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_runner_", "LNetI2pRouterTransportUdpUDPReceiver_Runner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_handler_", "LNetI2pRouterTransportUdpPacketHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_endpoint_", "LNetI2pRouterTransportUdpSocketListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isAndroid", "Z", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "MAX_QUEUE_PERIOD", "J", .constantValue.asLong = NetI2pRouterTransportUdpUDPReceiver_MAX_QUEUE_PERIOD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;LJavaNetDatagramSocket;LNSString;LNetI2pRouterTransportUdpSocketListener;", "receive", "LNetI2pRouterTransportUdpUDPPacket;", "doReceive", &NetI2pRouterTransportUdpUDPReceiver__isAndroid, "LNetI2pRouterTransportUdpUDPReceiver_Runner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPReceiver = { "UDPReceiver", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 5, 11, -1, 5, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPReceiver;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpUDPReceiver class]) {
    NetI2pRouterTransportUdpUDPReceiver__isAndroid = NetI2pUtilSystemVersion_isAndroid();
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpUDPReceiver)
  }
}

@end

void NetI2pRouterTransportUdpUDPReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterTransportUdpUDPReceiver *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpUDPReceiver_class_()]);
  JreStrongAssign(&self->_name_, name);
  JreStrongAssign(&self->_socket_, socket);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_endpoint_, lsnr);
  JreStrongAssign(&self->_handler_, [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(transport)) getPacketHandler]);
  if (self->_handler_ == nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssignAndConsume(&self->_runner_, new_NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(self));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.receiveHolePunch" withNSString:@"How often we receive a NAT hole punch" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.ignorePacketFromDroplist" withNSString:@"Packet lifetime for those dropped on the drop list" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receiveFailsafe" withNSString:@"limiter stuck?" withNSString:@"udp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000LL } count:1]];
}

NetI2pRouterTransportUdpUDPReceiver *new_NetI2pRouterTransportUdpUDPReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_, ctx, transport, socket, name, lsnr)
}

NetI2pRouterTransportUdpUDPReceiver *create_NetI2pRouterTransportUdpUDPReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_, ctx, transport, socket, name, lsnr)
}

jint NetI2pRouterTransportUdpUDPReceiver_receiveWithNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpUDPReceiver *self, NetI2pRouterTransportUdpUDPPacket *packet) {
  return NetI2pRouterTransportUdpUDPReceiver_doReceiveWithNetI2pRouterTransportUdpUDPPacket_(self, packet);
}

jint NetI2pRouterTransportUdpUDPReceiver_doReceiveWithNetI2pRouterTransportUdpUDPPacket_(NetI2pRouterTransportUdpUDPReceiver *self, NetI2pRouterTransportUdpUDPPacket *packet) {
  if (!JreLoadVolatileBoolean(&self->_keepRunning_)) return 0;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Received: ", packet)];
  NetI2pRouterTransportUdpRemoteHostId *from = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getRemoteHost];
  if ([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isInDropListWithNetI2pRouterTransportUdpRemoteHostId:from]) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Ignoring packet from the drop-listed peer: ", from)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.ignorePacketFromDroplist" withLong:[packet getLifetime]];
    [packet release__];
    return 0;
  }
  if (JavaUtilArrays_equalsWithByteArray_withByteArray_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP], [self->_transport_ getExternalIP]) && ![self->_transport_ allowLocal]) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Dropping (spoofed?) packet from ourselves"];
    [packet release__];
    return 0;
  }
  @try {
    [((NetI2pRouterTransportUdpPacketHandler *) nil_chk(self->_handler_)) queueReceivedWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  @catch (JavaLangInterruptedException *ie) {
    [packet release__];
    JreAssignVolatileBoolean(&self->_keepRunning_, false);
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPReceiver)

@implementation NetI2pRouterTransportUdpUDPReceiver_Runner

- (instancetype)initWithNetI2pRouterTransportUdpUDPReceiver:(NetI2pRouterTransportUdpUDPReceiver *)outer$ {
  NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(self, outer$);
  return self;
}

- (void)run {
  while (JreLoadVolatileBoolean(&this$0_->_keepRunning_)) {
    NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(this$0_->_context_, true);
    JavaNetDatagramPacket *dpacket = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
    if (JreLoadStatic(NetI2pRouterTransportUdpUDPReceiver, _isAndroid)) [((JavaNetDatagramPacket *) nil_chk(dpacket)) setLengthWithInt:NetI2pRouterTransportUdpUDPPacket_MAX_PACKET_SIZE];
    while (![((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) throttle])) acceptNetworkMessage]) @try {
      JavaLangThread_sleepWithLong_(10);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @try {
      [((JavaNetDatagramSocket *) nil_chk(this$0_->_socket_)) receiveWithJavaNetDatagramPacket:dpacket];
      jint size = [((JavaNetDatagramPacket *) nil_chk(dpacket)) getLength];
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$I$I", @"After blocking socket.receive: packet is ", size, @" bytes on ", JavaLangSystem_identityHashCodeWithId_(packet))];
      [packet resetBegin];
      if (size >= NetI2pRouterTransportUdpUDPPacket_MAX_PACKET_SIZE) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"packet too large! truncated and dropped from: ", [packet getRemoteHost]));
      }
      if ([((NetI2pRouterCommSystemFacade *) nil_chk([this$0_->_context_ commSystem])) isDummy]) {
        [packet release__];
      }
      else if (size > 0) {
        id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req = [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([this$0_->_context_ bandwidthLimiter])) requestInboundWithInt:size withNSString:@"UDP receiver"];
        jint waitCount = 0;
        while ([((id<NetI2pRouterTransportFIFOBandwidthLimiter_Request>) nil_chk(req)) getPendingRequested] > 0 && waitCount++ < 5) {
          [req waitForNextAllocation];
        }
        if (waitCount >= 5) {
          [req abort];
          [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.receiveFailsafe" withLong:1];
        }
        NetI2pRouterTransportUdpUDPReceiver_receiveWithNetI2pRouterTransportUdpUDPPacket_(this$0_, packet);
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.receiveHolePunch" withLong:1];
        if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@CI", @"Received a 0 byte udp packet from ", [dpacket getAddress], ':', [dpacket getPort])];
        [((NetI2pRouterTransportUdpEstablishmentManager *) nil_chk([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(this$0_->_transport_)) getEstablisher])) receiveHolePunchWithJavaNetInetAddress:[dpacket getAddress] withInt:[dpacket getPort]];
        [packet release__];
      }
    }
    @catch (JavaIoIOException *ioe) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:@"Error receiving" withJavaLangThrowable:ioe];
      [packet release__];
      if ([this$0_->_socket_ isClosed]) {
        if (JreLoadVolatileBoolean(&this$0_->_keepRunning_)) {
          JreAssignVolatileBoolean(&this$0_->_keepRunning_, false);
          [((id<NetI2pRouterTransportUdpSocketListener>) nil_chk(this$0_->_endpoint_)) fail];
        }
      }
      else if (JreLoadVolatileBoolean(&this$0_->_keepRunning_)) {
        @try {
          JavaLangThread_sleepWithLong_(100);
        }
        @catch (JavaLangInterruptedException *ie) {
        }
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Stop receiving on ", this$0_->_endpoint_)];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPReceiver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPReceiver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpUDPReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPReceiver_Runner = { "Runner", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPReceiver_Runner;
}

@end

void NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver_Runner *self, NetI2pRouterTransportUdpUDPReceiver *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpUDPReceiver_Runner *new_NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPReceiver_Runner, initWithNetI2pRouterTransportUdpUDPReceiver_, outer$)
}

NetI2pRouterTransportUdpUDPReceiver_Runner *create_NetI2pRouterTransportUdpUDPReceiver_Runner_initWithNetI2pRouterTransportUdpUDPReceiver_(NetI2pRouterTransportUdpUDPReceiver *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPReceiver_Runner, initWithNetI2pRouterTransportUdpUDPReceiver_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPReceiver_Runner)
