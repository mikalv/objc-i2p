//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPEndpoint.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTransportUdpUDPEndpoint")
#ifdef RESTRICT_NetI2pRouterTransportUdpUDPEndpoint
#define INCLUDE_ALL_NetI2pRouterTransportUdpUDPEndpoint 0
#else
#define INCLUDE_ALL_NetI2pRouterTransportUdpUDPEndpoint 1
#endif
#undef RESTRICT_NetI2pRouterTransportUdpUDPEndpoint

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTransportUdpUDPEndpoint_) && (INCLUDE_ALL_NetI2pRouterTransportUdpUDPEndpoint || defined(INCLUDE_NetI2pRouterTransportUdpUDPEndpoint))
#define NetI2pRouterTransportUdpUDPEndpoint_

#define RESTRICT_NetI2pRouterTransportUdpSocketListener 1
#define INCLUDE_NetI2pRouterTransportUdpSocketListener 1
#include "net/i2p/router/transport/udp/SocketListener.h"

@class JavaNetInetAddress;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTransportUdpUDPPacket;
@class NetI2pRouterTransportUdpUDPSender;
@class NetI2pRouterTransportUdpUDPTransport;

@interface NetI2pRouterTransportUdpUDPEndpoint : NSObject < NetI2pRouterTransportUdpSocketListener >
@property (readonly, copy, class) NSString *PROP_MIN_PORT NS_SWIFT_NAME(PROP_MIN_PORT);
@property (readonly, copy, class) NSString *PROP_MAX_PORT NS_SWIFT_NAME(PROP_MAX_PORT);

+ (NSString *)PROP_MIN_PORT;

+ (NSString *)PROP_MAX_PORT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                   withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                                                    withInt:(jint)listenPort
                                     withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress;

- (void)clearOutbound;

- (void)fail;

- (jint)getListenPort;

- (NetI2pRouterTransportUdpUDPSender *)getSender;

- (jboolean)isIPv4;

- (jboolean)isIPv6;

- (NetI2pRouterTransportUdpUDPPacket *)receive;

+ (jint)selectRandomPortWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (void)sendWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet;

- (void)setListenPortWithInt:(jint)newPort;

- (void)shutdown;

- (void)startup;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportUdpUDPEndpoint)

inline NSString *NetI2pRouterTransportUdpUDPEndpoint_get_PROP_MIN_PORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPEndpoint_PROP_MIN_PORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPEndpoint, PROP_MIN_PORT, NSString *)

inline NSString *NetI2pRouterTransportUdpUDPEndpoint_get_PROP_MAX_PORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTransportUdpUDPEndpoint_PROP_MAX_PORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPEndpoint, PROP_MAX_PORT, NSString *)

FOUNDATION_EXPORT void NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterTransportUdpUDPEndpoint *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress);

FOUNDATION_EXPORT NetI2pRouterTransportUdpUDPEndpoint *new_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTransportUdpUDPEndpoint *create_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress);

FOUNDATION_EXPORT jint NetI2pRouterTransportUdpUDPEndpoint_selectRandomPortWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPEndpoint)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTransportUdpUDPEndpoint")
