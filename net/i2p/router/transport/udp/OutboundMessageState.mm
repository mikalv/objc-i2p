//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/OutboundMessageState.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/OutboundMessageState.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpOutboundMessageState () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterOutNetMessage *_message_;
  id<NetI2pDataI2npI2NPMessage> _i2npMessage_;
  NetI2pRouterTransportUdpPeerState *_peer_;
  jlong _expiration_;
  IOSByteArray *_messageBuf_;
  jint _fragmentSize_;
  jlong _fragmentAcks_;
  jint _numFragments_;
  jlong _startedOn_;
  jlong _nextSendTime_;
  jint _pushCount_;
  jint _maxSends_;
  jlong _enqueueTime_;
  jlong _seqNum_;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
              withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)m
              withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
      withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

+ (jlong)maskWithInt:(jint)fragment;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _message_, NetI2pRouterOutNetMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _i2npMessage_, id<NetI2pDataI2npI2NPMessage>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _peer_, NetI2pRouterTransportUdpPeerState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageState, _messageBuf_, IOSByteArray *)

inline jlong NetI2pRouterTransportUdpOutboundMessageState_get_EXPIRATION(void);
#define NetI2pRouterTransportUdpOutboundMessageState_EXPIRATION 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpOutboundMessageState, EXPIRATION, jlong)

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageState *self, NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer);

__attribute__((unused)) static NetI2pRouterTransportUdpOutboundMessageState *new_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpOutboundMessageState *create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer);

__attribute__((unused)) static jlong NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(jint fragment);

@implementation NetI2pRouterTransportUdpOutboundMessageState

+ (jint)MAX_MSG_SIZE {
  return NetI2pRouterTransportUdpOutboundMessageState_MAX_MSG_SIZE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
              withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
      withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(self, context, msg, peer);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
              withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)m
      withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(self, context, m, peer);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
              withNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)m
              withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
      withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(self, context, m, msg, peer);
  return self;
}

+ (jlong)maskWithInt:(jint)fragment {
  return NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(fragment);
}

- (NetI2pRouterOutNetMessage *)getMessage {
  return _message_;
}

- (jlong)getMessageId {
  return [((id<NetI2pDataI2npI2NPMessage>) nil_chk(_i2npMessage_)) getUniqueId];
}

- (NetI2pRouterTransportUdpPeerState *)getPeer {
  return _peer_;
}

- (jboolean)isExpired {
  return _expiration_ < [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
}

- (jboolean)isComplete {
  @synchronized(self) {
    return _fragmentAcks_ == 0;
  }
}

- (jint)getUnackedSize {
  @synchronized(self) {
    jint rv = 0;
    if ([self isComplete]) return rv;
    jint lastSize = ((IOSByteArray *) nil_chk(_messageBuf_))->size_ % _fragmentSize_;
    if (lastSize == 0) lastSize = _fragmentSize_;
    for (jint i = 0; i < _numFragments_; i++) {
      if ([self needsSendingWithInt:i]) {
        if (i + 1 == _numFragments_) rv += lastSize;
        else rv += _fragmentSize_;
      }
    }
    return rv;
  }
}

- (jboolean)needsSendingWithInt:(jint)fragment {
  @synchronized(self) {
    return (_fragmentAcks_ & NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(fragment)) != 0;
  }
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - _startedOn_;
}

- (jboolean)ackedWithNetI2pRouterTransportUdpACKBitfield:(id<NetI2pRouterTransportUdpACKBitfield>)bitfield {
  @synchronized(self) {
    jint highest = [((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bitfield)) highestReceived];
    for (jint i = 0; i <= highest && i < _numFragments_; i++) {
      if ([bitfield receivedWithInt:i]) _fragmentAcks_ &= ~NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(i);
    }
    return [self isComplete];
  }
}

- (jlong)getNextSendTime {
  return _nextSendTime_;
}

- (void)setNextSendTimeWithLong:(jlong)when {
  _nextSendTime_ = when;
}

- (jint)getMaxSends {
  @synchronized(self) {
    return _maxSends_;
  }
}

- (jint)getPushCount {
  @synchronized(self) {
    return _pushCount_;
  }
}

- (jboolean)push {
  @synchronized(self) {
    jboolean rv = _pushCount_ == 0;
    _pushCount_++;
    _maxSends_ = _pushCount_;
    return rv;
  }
}

- (jint)getFragmentCount {
  return _numFragments_;
}

- (jint)getMessageSize {
  return ((IOSByteArray *) nil_chk(_messageBuf_))->size_;
}

- (jint)fragmentSizeWithInt:(jint)fragmentNum {
  if (fragmentNum + 1 == _numFragments_) {
    jint valid = ((IOSByteArray *) nil_chk(_messageBuf_))->size_;
    if (valid <= _fragmentSize_) return valid;
    jint mod = valid % _fragmentSize_;
    return mod == 0 ? _fragmentSize_ : mod;
  }
  else {
    return _fragmentSize_;
  }
}

- (jint)writeFragmentWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOffset
                           withInt:(jint)fragmentNum {
  jint start = _fragmentSize_ * fragmentNum;
  jint toSend = [self fragmentSizeWithInt:fragmentNum];
  jint end = start + toSend;
  if (end <= ((IOSByteArray *) nil_chk(_messageBuf_))->size_ && outOffset + toSend <= ((IOSByteArray *) nil_chk(outArg))->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_messageBuf_, start, outArg, outOffset, toSend);
    return toSend;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$ICICICI", @"Error: ", start, '/', end, '/', outOffset, '/', ((IOSByteArray *) nil_chk(outArg))->size_)];
  }
  return -1;
}

- (void)setEnqueueTimeWithLong:(jlong)now {
  _enqueueTime_ = now;
}

- (jlong)getEnqueueTime {
  return _enqueueTime_;
}

- (void)drop {
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk([((NetI2pRouterTransportUdpPeerState *) nil_chk(_peer_)) getTransport])) failedWithNetI2pRouterTransportUdpOutboundMessageState:self withBoolean:false];
}

- (void)setSeqNumWithLong:(jlong)num {
  _seqNum_ = num;
}

- (jlong)getSeqNum {
  return _seqNum_;
}

- (jint)getPriority {
  return _message_ != nil ? [_message_ getPriority] : 1000;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"OB Message "])) appendWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(_i2npMessage_)) getUniqueId]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" type "])) appendWithInt:[_i2npMessage_ getType]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with "])) appendWithInt:_numFragments_])) appendWithNSString:@" fragments"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" of size "])) appendWithInt:((IOSByteArray *) nil_chk(_messageBuf_))->size_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" volleys: "])) appendWithInt:_maxSends_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithLong:[self getLifetime]];
  if (![self isComplete]) {
    [buf appendWithNSString:@" pending fragments: "];
    for (jint i = 0; i < _numFragments_; i++) {
      if ([self needsSendingWithInt:i]) [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:i])) appendWithChar:' '];
    }
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_message_);
  RELEASE_(_i2npMessage_);
  RELEASE_(_peer_);
  RELEASE_(_messageBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 5, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pDataI2npI2NPMessage:withNetI2pRouterTransportUdpPeerState:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterOutNetMessage:withNetI2pRouterTransportUdpPeerState:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterOutNetMessage:withNetI2pDataI2npI2NPMessage:withNetI2pRouterTransportUdpPeerState:);
  methods[3].selector = @selector(maskWithInt:);
  methods[4].selector = @selector(getMessage);
  methods[5].selector = @selector(getMessageId);
  methods[6].selector = @selector(getPeer);
  methods[7].selector = @selector(isExpired);
  methods[8].selector = @selector(isComplete);
  methods[9].selector = @selector(getUnackedSize);
  methods[10].selector = @selector(needsSendingWithInt:);
  methods[11].selector = @selector(getLifetime);
  methods[12].selector = @selector(ackedWithNetI2pRouterTransportUdpACKBitfield:);
  methods[13].selector = @selector(getNextSendTime);
  methods[14].selector = @selector(setNextSendTimeWithLong:);
  methods[15].selector = @selector(getMaxSends);
  methods[16].selector = @selector(getPushCount);
  methods[17].selector = @selector(push);
  methods[18].selector = @selector(getFragmentCount);
  methods[19].selector = @selector(getMessageSize);
  methods[20].selector = @selector(fragmentSizeWithInt:);
  methods[21].selector = @selector(writeFragmentWithByteArray:withInt:withInt:);
  methods[22].selector = @selector(setEnqueueTimeWithLong:);
  methods[23].selector = @selector(getEnqueueTime);
  methods[24].selector = @selector(drop);
  methods[25].selector = @selector(setSeqNumWithLong:);
  methods[26].selector = @selector(getSeqNum);
  methods[27].selector = @selector(getPriority);
  methods[28].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_i2npMessage_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pRouterTransportUdpPeerState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageBuf_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragmentSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragmentAcks_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_numFragments_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_startedOn_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextSendTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_pushCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_maxSends_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_enqueueTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_seqNum_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_MSG_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpOutboundMessageState_MAX_MSG_SIZE, 0x19, -1, -1, -1, -1 },
    { "EXPIRATION", "J", .constantValue.asLong = NetI2pRouterTransportUdpOutboundMessageState_EXPIRATION, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pDataI2npI2NPMessage;LNetI2pRouterTransportUdpPeerState;", "LNetI2pI2PAppContext;LNetI2pRouterOutNetMessage;LNetI2pRouterTransportUdpPeerState;", "LNetI2pI2PAppContext;LNetI2pRouterOutNetMessage;LNetI2pDataI2npI2NPMessage;LNetI2pRouterTransportUdpPeerState;", "mask", "I", "needsSending", "acked", "LNetI2pRouterTransportUdpACKBitfield;", "setNextSendTime", "J", "fragmentSize", "writeFragment", "[BII", "setEnqueueTime", "setSeqNum", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundMessageState = { "OutboundMessageState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 29, 18, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpOutboundMessageState;
}

@end

void NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageState *self, NetI2pI2PAppContext *context, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(self, context, nil, msg, peer);
}

NetI2pRouterTransportUdpOutboundMessageState *new_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_, context, msg, peer)
}

NetI2pRouterTransportUdpOutboundMessageState *create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_, context, msg, peer)
}

void NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageState *self, NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, NetI2pRouterTransportUdpPeerState *peer) {
  NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(self, context, m, [((NetI2pRouterOutNetMessage *) nil_chk(m)) getMessage], peer);
}

NetI2pRouterTransportUdpOutboundMessageState *new_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_, context, m, peer)
}

NetI2pRouterTransportUdpOutboundMessageState *create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_, context, m, peer)
}

void NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageState *self, NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  NSObject_init(self);
  if (msg == nil || peer == nil) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpOutboundMessageState_class_()]);
  JreStrongAssign(&self->_message_, m);
  JreStrongAssign(&self->_i2npMessage_, msg);
  JreStrongAssign(&self->_peer_, peer);
  self->_startedOn_ = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
  self->_nextSendTime_ = self->_startedOn_;
  self->_expiration_ = self->_startedOn_ + NetI2pRouterTransportUdpOutboundMessageState_EXPIRATION;
  jint totalSize = [self->_i2npMessage_ getRawMessageSize];
  if (totalSize > NetI2pRouterTransportUdpOutboundMessageState_MAX_MSG_SIZE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Size too large! ", totalSize));
  JreStrongAssignAndConsume(&self->_messageBuf_, [IOSByteArray newArrayWithLength:totalSize]);
  [self->_i2npMessage_ toRawByteArrayWithByteArray:self->_messageBuf_];
  self->_fragmentSize_ = [self->_peer_ fragmentSize];
  jint numFragments = totalSize / self->_fragmentSize_;
  if (numFragments * self->_fragmentSize_ < totalSize) numFragments++;
  if (numFragments > NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Fragmenting a ", totalSize, @" message into ", numFragments, @" fragments - too many!"));
  self->_numFragments_ = numFragments;
  self->_fragmentAcks_ = self->_numFragments_ < 64 ? NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(self->_numFragments_) - 1LL : -1LL;
}

NetI2pRouterTransportUdpOutboundMessageState *new_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_, context, m, msg, peer)
}

NetI2pRouterTransportUdpOutboundMessageState *create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_(NetI2pI2PAppContext *context, NetI2pRouterOutNetMessage *m, id<NetI2pDataI2npI2NPMessage> msg, NetI2pRouterTransportUdpPeerState *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundMessageState, initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pDataI2npI2NPMessage_withNetI2pRouterTransportUdpPeerState_, context, m, msg, peer)
}

jlong NetI2pRouterTransportUdpOutboundMessageState_maskWithInt_(jint fragment) {
  NetI2pRouterTransportUdpOutboundMessageState_initialize();
  return JreLShift64(1LL, fragment);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundMessageState)
