//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPSender.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/InetAddress.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/SocketListener.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPSender.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/CoDelBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@class NetI2pRouterTransportUdpUDPSender_Runner;

@interface NetI2pRouterTransportUdpUDPSender () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  JavaNetDatagramSocket *_socket_;
  NSString *_name_;
  id<JavaUtilConcurrentBlockingQueue> _outboundQueue_;
  volatile_jboolean _keepRunning_;
  NetI2pRouterTransportUdpUDPSender_Runner *_runner_;
  jboolean _dummy_;
  id<NetI2pRouterTransportUdpSocketListener> _endpoint_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _socket_, JavaNetDatagramSocket *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _outboundQueue_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _runner_, NetI2pRouterTransportUdpUDPSender_Runner *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPSender, _endpoint_, id<NetI2pRouterTransportUdpSocketListener>)

inline jint NetI2pRouterTransportUdpUDPSender_get_TYPE_POISON(void);
#define NetI2pRouterTransportUdpUDPSender_TYPE_POISON 99999
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPSender, TYPE_POISON, jint)

inline jint NetI2pRouterTransportUdpUDPSender_get_MIN_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpUDPSender_MIN_QUEUE_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPSender, MIN_QUEUE_SIZE, jint)

inline jint NetI2pRouterTransportUdpUDPSender_get_MAX_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpUDPSender_MAX_QUEUE_SIZE 384
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPSender, MAX_QUEUE_SIZE, jint)

inline jint NetI2pRouterTransportUdpUDPSender_get_MAX_HEAD_LIFETIME(void);
#define NetI2pRouterTransportUdpUDPSender_MAX_HEAD_LIFETIME 3000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPSender, MAX_HEAD_LIFETIME, jint)

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPSender__Annotations$0(void);

@interface NetI2pRouterTransportUdpUDPSender_Runner : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpUDPSender *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPSender:(NetI2pRouterTransportUdpUDPSender *)outer$;

- (void)run;

- (NetI2pRouterTransportUdpUDPPacket *)getNextPacket;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPSender_Runner)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender_Runner *self, NetI2pRouterTransportUdpUDPSender *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPSender_Runner *new_NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPSender_Runner *create_NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpUDPSender_Runner_getNextPacket(NetI2pRouterTransportUdpUDPSender_Runner *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPSender_Runner)

@implementation NetI2pRouterTransportUdpUDPSender

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withJavaNetDatagramSocket:(JavaNetDatagramSocket *)socket
                                     withNSString:(NSString *)name
       withNetI2pRouterTransportUdpSocketListener:(id<NetI2pRouterTransportUdpSocketListener>)lsnr {
  NetI2pRouterTransportUdpUDPSender_initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(self, ctx, socket, name, lsnr);
  return self;
}

- (void)startup {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Starting the runner: ", _name_)];
    JreAssignVolatileBoolean(&_keepRunning_, true);
    NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(_runner_, _name_, true);
    [t start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    if (!JreLoadVolatileBoolean(&_keepRunning_)) return;
    JreAssignVolatileBoolean(&_keepRunning_, false);
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_outboundQueue_)) clear];
    NetI2pRouterTransportUdpUDPPacket *poison = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(_context_, false);
    [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(poison)) setMessageTypeWithInt:NetI2pRouterTransportUdpUDPSender_TYPE_POISON];
    [_outboundQueue_ offerWithId:poison];
    for (jint i = 1; i <= 5 && ![_outboundQueue_ isEmpty]; i++) {
      @try {
        JavaLangThread_sleepWithLong_(i * 50);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    [_outboundQueue_ clear];
  }
}

- (void)clear {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_outboundQueue_)) clear];
}

- (void)addWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                         withInt:(jint)blockTime {
  [self addWithNetI2pRouterTransportUdpUDPPacket:packet];
}

- (void)addWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  if (packet == nil || !JreLoadVolatileBoolean(&_keepRunning_)) return;
  jint psz = [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength];
  if (psz > JreLoadStatic(NetI2pRouterTransportUdpPeerState, MAX_MTU)) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I$@", @"Dropping large UDP packet ", psz, @" bytes: ", packet)];
    return;
  }
  if (_dummy_) {
    [packet release__];
    return;
  }
  [packet requestOutboundBandwidth];
  @try {
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_outboundQueue_)) putWithId:packet];
  }
  @catch (JavaLangInterruptedException *ie) {
    [packet release__];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$J", @"Added the packet onto the queue with a lifetime of ", [packet getLifetime])];
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_socket_);
  RELEASE_(_name_);
  RELEASE_(_outboundQueue_);
  RELEASE_(_runner_);
  RELEASE_(_endpoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, 3, -1 },
    { NULL, "V", 0x1, 1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withJavaNetDatagramSocket:withNSString:withNetI2pRouterTransportUdpSocketListener:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(addWithNetI2pRouterTransportUdpUDPPacket:withInt:);
  methods[5].selector = @selector(addWithNetI2pRouterTransportUdpUDPPacket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetDatagramSocket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outboundQueue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "_keepRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_runner_", "LNetI2pRouterTransportUdpUDPSender_Runner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dummy_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_endpoint_", "LNetI2pRouterTransportUdpSocketListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TYPE_POISON", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPSender_TYPE_POISON, 0x1a, -1, -1, -1, -1 },
    { "MIN_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPSender_MIN_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPSender_MAX_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_HEAD_LIFETIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPSender_MAX_HEAD_LIFETIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LJavaNetDatagramSocket;LNSString;LNetI2pRouterTransportUdpSocketListener;", "add", "LNetI2pRouterTransportUdpUDPPacket;I", (void *)&NetI2pRouterTransportUdpUDPSender__Annotations$0, "LNetI2pRouterTransportUdpUDPPacket;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/transport/udp/UDPPacket;>;", "LNetI2pRouterTransportUdpUDPSender_Runner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPSender = { "UDPSender", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 6, 13, -1, 6, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPSender;
}

@end

void NetI2pRouterTransportUdpUDPSender_initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterTransportUdpUDPSender *self, NetI2pRouterRouterContext *ctx, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  self->_dummy_ = false;
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpUDPSender_class_()]);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint qsize = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pRouterTransportUdpUDPSender_MIN_QUEUE_SIZE, JavaLangMath_minWithLong_withLong_(NetI2pRouterTransportUdpUDPSender_MAX_QUEUE_SIZE, maxMemory / (1024 * 1024)));
  JreStrongAssignAndConsume(&self->_outboundQueue_, new_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(ctx, @"UDP-Sender", qsize));
  JreStrongAssign(&self->_socket_, socket);
  JreStrongAssignAndConsume(&self->_runner_, new_NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(self));
  JreStrongAssign(&self->_name_, name);
  JreStrongAssign(&self->_endpoint_, lsnr);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.pushTime" withNSString:@"How long a UDP packet takes to get pushed out" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendQueueSize" withNSString:@"How many packets are queued on the UDP sender" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendQueueFailed" withNSString:@"How often it was unable to add a new packet to the queue" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendQueueTrimmed" withNSString:@"How many packets were removed from the queue for being too old (duration == remaining)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"udp.sendPacketSize" withNSString:@"Size of sent packets (bytes)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendBWThrottleTime" withNSString:@"How long the send is blocked by the bandwidth throttle" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendACKTime" withNSString:@"How long an ACK packet is blocked for (duration == lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendFailsafe" withNSString:@"limiter stuck?" withNSString:@"udp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000LL } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"udp.sendException" withNSString:@"Send fails (Windows exception?)" withNSString:@"udp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_ACK) withNSString:@"ack-only packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_PUNCH) withNSString:@"hole punch packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_RESP) withNSString:@"relay response packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_INTRO) withNSString:@"relay intro packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_RREQ) withNSString:@"relay request packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_TCB) withNSString:@"peer test charlie to bob packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_TBC) withNSString:@"peer test bob to charlie packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_TTA) withNSString:@"peer test to alice packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_TFA) withNSString:@"peer test from alice packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_CONF) withNSString:@"session confirmed packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_SREQ) withNSString:@"session request packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", NetI2pRouterTransportUdpPacketBuilder_TYPE_CREAT) withNSString:@"session created packet size" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpUDPSender *new_NetI2pRouterTransportUdpUDPSender_initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterRouterContext *ctx, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPSender, initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_, ctx, socket, name, lsnr)
}

NetI2pRouterTransportUdpUDPSender *create_NetI2pRouterTransportUdpUDPSender_initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(NetI2pRouterRouterContext *ctx, JavaNetDatagramSocket *socket, NSString *name, id<NetI2pRouterTransportUdpSocketListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPSender, initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_, ctx, socket, name, lsnr)
}

IOSObjectArray *NetI2pRouterTransportUdpUDPSender__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPSender)

@implementation NetI2pRouterTransportUdpUDPSender_Runner

- (instancetype)initWithNetI2pRouterTransportUdpUDPSender:(NetI2pRouterTransportUdpUDPSender *)outer$ {
  NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(self, outer$);
  return self;
}

- (void)run {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:@"Running the UDP sender"];
  while (JreLoadVolatileBoolean(&this$0_->_keepRunning_)) {
    NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPSender_Runner_getNextPacket(self);
    if (packet != nil) {
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Packet to send known: ", packet)];
      jlong acquireTime = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
      jint size = [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength];
      if (size > 0) {
        id<NetI2pRouterTransportFIFOBandwidthLimiter_Request> req = [packet getBandwidthRequest];
        if (req != nil) {
          jint waitCount = 0;
          while ([req getPendingRequested] > 0 && waitCount++ < 5) {
            [req waitForNextAllocation];
          }
          if (waitCount >= 5) {
            [req abort];
            [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.sendFailsafe" withLong:1];
          }
        }
      }
      jlong afterBW = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now];
      if ([packet getMessageType] >= NetI2pRouterTransportUdpPacketBuilder_TYPE_FIRST) [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:JreStrcat("$I", @"udp.sendPacketSize.", [packet getMessageType]) withLong:size withLong:[packet getFragmentCount]];
      @try {
        JavaNetDatagramPacket *dp = [packet getPacket];
        [((JavaNetDatagramSocket *) nil_chk(this$0_->_socket_)) sendWithJavaNetDatagramPacket:dp];
        if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Sent the packet ", packet)];
        jlong throttleTime = afterBW - acquireTime;
        if (throttleTime > 10) [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.sendBWThrottleTime" withLong:throttleTime withLong:acquireTime - [packet getBegin]];
        if ([packet getMarkedType] == 1) [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.sendACKTime" withLong:throttleTime withLong:[packet getLifetime]];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.pushTime" withLong:[packet getLifetime] withLong:[packet getLifetime]];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.sendPacketSize" withLong:size withLong:[packet getLifetime]];
      }
      @catch (JavaIoIOException *ioe) {
        if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Error sending to ", [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getAddress]) withJavaLangThrowable:ioe];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"udp.sendException" withLong:1 withLong:[packet getLifetime]];
        if ([((JavaNetDatagramSocket *) nil_chk(this$0_->_socket_)) isClosed]) {
          if (JreLoadVolatileBoolean(&this$0_->_keepRunning_)) {
            JreAssignVolatileBoolean(&this$0_->_keepRunning_, false);
            [((id<NetI2pRouterTransportUdpSocketListener>) nil_chk(this$0_->_endpoint_)) fail];
          }
        }
      }
      [packet release__];
    }
  }
  if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Stop sending on ", this$0_->_endpoint_)];
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(this$0_->_outboundQueue_)) clear];
}

- (NetI2pRouterTransportUdpUDPPacket *)getNextPacket {
  return NetI2pRouterTransportUdpUDPSender_Runner_getNextPacket(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPSender:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(getNextPacket);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPSender;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpUDPSender;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPSender_Runner = { "Runner", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 3, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPSender_Runner;
}

@end

void NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender_Runner *self, NetI2pRouterTransportUdpUDPSender *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpUDPSender_Runner *new_NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPSender_Runner, initWithNetI2pRouterTransportUdpUDPSender_, outer$)
}

NetI2pRouterTransportUdpUDPSender_Runner *create_NetI2pRouterTransportUdpUDPSender_Runner_initWithNetI2pRouterTransportUdpUDPSender_(NetI2pRouterTransportUdpUDPSender *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPSender_Runner, initWithNetI2pRouterTransportUdpUDPSender_, outer$)
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpUDPSender_Runner_getNextPacket(NetI2pRouterTransportUdpUDPSender_Runner *self) {
  NetI2pRouterTransportUdpUDPPacket *packet = nil;
  while ((JreLoadVolatileBoolean(&self->this$0_->_keepRunning_)) && (packet == nil || [packet getLifetime] > NetI2pRouterTransportUdpUDPSender_MAX_HEAD_LIFETIME)) {
    if (packet != nil) {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) statManager])) addRateDataWithNSString:@"udp.sendQueueTrimmed" withLong:1];
      [packet release__];
    }
    @try {
      packet = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->this$0_->_outboundQueue_)) take];
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    if (packet != nil && [packet getMessageType] == NetI2pRouterTransportUdpUDPSender_TYPE_POISON) return nil;
  }
  return packet;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPSender_Runner)
