//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/TimedWeightedPriorityMessageQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/TimedWeightedPriorityMessageQueue.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@class NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer;

@interface NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  IOSObjectArray *_queue_;
  IOSIntArray *_priorityLimits_;
  IOSIntArray *_weighting_;
  IOSLongArray *_bytesQueued_;
  IOSIntArray *_messagesFlushed_;
  IOSLongArray *_bytesTransferred_;
  id _nextLock_;
  jboolean _alive_;
  jint _nextQueue_;
  volatile_jboolean _addedSincePassBegan_;
  NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *_expirer_;
  id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener> _listener_;
  id<JavaUtilSet> _chokedPeers_;
}

- (jint)pickQueueWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)message;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _queue_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _priorityLimits_, IOSIntArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _weighting_, IOSIntArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _bytesQueued_, IOSLongArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _messagesFlushed_, IOSIntArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _bytesTransferred_, IOSLongArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _nextLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _expirer_, NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _listener_, id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, _chokedPeers_, id<JavaUtilSet>)

__attribute__((unused)) static jint NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_pickQueueWithNetI2pRouterOutNetMessage_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *self, NetI2pRouterOutNetMessage *message);

@interface NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener : NSObject

@end

@interface NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue:(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer)

__attribute__((unused)) static void NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *self, NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *new_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *create_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer)

@implementation NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withIntArray:(IOSIntArray *)priorityLimits
                                     withIntArray:(IOSIntArray *)weighting
withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener:(id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener>)lsnr {
  NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_(self, ctx, priorityLimits, weighting, lsnr);
  return self;
}

- (void)addWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)message {
  if (message == nil) return;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.timeToEntrance" withLong:[message getLifetime] withLong:[message getLifetime]];
  jint queue = NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_pickQueueWithNetI2pRouterOutNetMessage_(self, message);
  jlong size = [message getMessageSize];
  @synchronized(IOSObjectArray_Get(nil_chk(_queue_), queue)) {
    [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(_queue_, queue))) addWithId:message];
    *IOSLongArray_GetRef(nil_chk(_bytesQueued_), queue) += size;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$J$I", @"Added a ", size, @" byte message to queue ", queue)];
  @synchronized(_nextLock_) {
    JreAssignVolatileBoolean(&_addedSincePassBegan_, true);
    [nil_chk(_nextLock_) java_notifyAll];
  }
  [message timestampWithNSString:JreStrcat("$I", @"added to queue ", queue)];
}

- (NetI2pRouterOutNetMessage *)getNextWithLong:(jlong)blockUntil {
  while (_alive_) {
    JreAssignVolatileBoolean(&_addedSincePassBegan_, false);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(_queue_))->size_; i++) {
      jint currentQueue = (_nextQueue_ + i) % _queue_->size_;
      @synchronized(IOSObjectArray_Get(_queue_, currentQueue)) {
        for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(_queue_), currentQueue))) size]; j++) {
          NetI2pRouterOutNetMessage *msg = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(_queue_), currentQueue))) getWithInt:j];
          NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget])) getIdentity])) getHash];
          if ([((id<JavaUtilSet>) nil_chk(_chokedPeers_)) containsWithId:to]) continue;
          [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(_queue_), currentQueue))) removeWithInt:j];
          jlong size = [msg getMessageSize];
          *IOSLongArray_GetRef(nil_chk(_bytesQueued_), currentQueue) -= size;
          *IOSLongArray_GetRef(nil_chk(_bytesTransferred_), currentQueue) += size;
          (*IOSIntArray_GetRef(nil_chk(_messagesFlushed_), currentQueue))++;
          if (IOSIntArray_Get(_messagesFlushed_, currentQueue) >= IOSIntArray_Get(nil_chk(_weighting_), currentQueue)) {
            *IOSIntArray_GetRef(_messagesFlushed_, currentQueue) = 0;
            _nextQueue_ = (currentQueue + 1) % ((IOSObjectArray *) nil_chk(_queue_))->size_;
          }
          jint sz = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(_queue_), currentQueue))) size];
          [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.messageQueueSize" withLong:sz withLong:currentQueue];
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$I$I$", @"Pulling a message off queue ", currentQueue, @" with ", sz, @" remaining")];
          [msg timestampWithNSString:JreStrcat("$I", @"made active with remaining queue size ", sz)];
          return JreRetainedLocalValue(msg);
        }
        *IOSIntArray_GetRef(nil_chk(_messagesFlushed_), currentQueue) = 0;
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$I", @"Nothing available on queue ", currentQueue)];
      }
    }
    jlong remaining = blockUntil - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    if ((blockUntil > 0) && (remaining < 0)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Nonblocking, or block time has expired"];
      return nil;
    }
    @try {
      @synchronized(_nextLock_) {
        if (!JreLoadVolatileBoolean(&_addedSincePassBegan_) && _alive_) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$J$", @"Wait for activity (up to ", remaining, @"ms)")];
          if (blockUntil < 0) [nil_chk(_nextLock_) java_wait];
          else [nil_chk(_nextLock_) java_waitWithLong:remaining];
        }
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  return nil;
}

- (void)shutdown {
  _alive_ = false;
  @synchronized(_nextLock_) {
    [nil_chk(_nextLock_) java_notifyAll];
  }
}

- (void)chokeWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return;
}

- (void)unchokeWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return;
}

- (jboolean)isChokedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((id<JavaUtilSet>) nil_chk(_chokedPeers_)) containsWithId:peer];
}

- (jint)pickQueueWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)message {
  return NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_pickQueueWithNetI2pRouterOutNetMessage_(self, message);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_queue_);
  RELEASE_(_priorityLimits_);
  RELEASE_(_weighting_);
  RELEASE_(_bytesQueued_);
  RELEASE_(_messagesFlushed_);
  RELEASE_(_bytesTransferred_);
  RELEASE_(_nextLock_);
  RELEASE_(_expirer_);
  RELEASE_(_listener_);
  RELEASE_(_chokedPeers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withIntArray:withIntArray:withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener:);
  methods[1].selector = @selector(addWithNetI2pRouterOutNetMessage:);
  methods[2].selector = @selector(getNextWithLong:);
  methods[3].selector = @selector(shutdown);
  methods[4].selector = @selector(chokeWithNetI2pDataHash:);
  methods[5].selector = @selector(unchokeWithNetI2pDataHash:);
  methods[6].selector = @selector(isChokedWithNetI2pDataHash:);
  methods[7].selector = @selector(pickQueueWithNetI2pRouterOutNetMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_queue_", "[LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "_priorityLimits_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_weighting_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bytesQueued_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messagesFlushed_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bytesTransferred_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextQueue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_addedSincePassBegan_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_expirer_", "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_listener_", "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_chokedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;[I[ILNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener;", "add", "LNetI2pRouterOutNetMessage;", "getNext", "J", "choke", "LNetI2pDataHash;", "unchoke", "isChoked", "pickQueue", "[Ljava/util/List<Lnet/i2p/router/OutNetMessage;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener;LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue = { "TimedWeightedPriorityMessageQueue", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 8, 15, -1, 12, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue;
}

@end

void NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *self, NetI2pRouterRouterContext *ctx, IOSIntArray *priorityLimits, IOSIntArray *weighting, id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener> lsnr) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_class_()]);
  JreStrongAssignAndConsume(&self->_queue_, [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(weighting))->size_ type:JavaUtilList_class_()]);
  JreStrongAssignAndConsume(&self->_priorityLimits_, [IOSIntArray newArrayWithLength:weighting->size_]);
  JreStrongAssignAndConsume(&self->_weighting_, [IOSIntArray newArrayWithLength:weighting->size_]);
  JreStrongAssignAndConsume(&self->_bytesQueued_, [IOSLongArray newArrayWithLength:weighting->size_]);
  JreStrongAssignAndConsume(&self->_bytesTransferred_, [IOSLongArray newArrayWithLength:weighting->size_]);
  JreStrongAssignAndConsume(&self->_messagesFlushed_, [IOSIntArray newArrayWithLength:weighting->size_]);
  for (jint i = 0; i < weighting->size_; i++) {
    IOSObjectArray_SetAndConsume(nil_chk(self->_queue_), i, new_JavaUtilArrayList_initWithInt_(8));
    *IOSIntArray_GetRef(nil_chk(self->_weighting_), i) = IOSIntArray_Get(weighting, i);
    *IOSIntArray_GetRef(nil_chk(self->_priorityLimits_), i) = IOSIntArray_Get(nil_chk(priorityLimits), i);
    *IOSIntArray_GetRef(nil_chk(self->_messagesFlushed_), i) = 0;
    *IOSLongArray_GetRef(nil_chk(self->_bytesQueued_), i) = 0;
    *IOSLongArray_GetRef(nil_chk(self->_bytesTransferred_), i) = 0;
  }
  self->_alive_ = true;
  JreStrongAssign(&self->_nextLock_, self);
  JreStrongAssign(&self->_chokedPeers_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(create_JavaUtilHashSet_initWithInt_(16)));
  JreStrongAssign(&self->_listener_, lsnr);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.timeToEntrance" withNSString:@"Message lifetime until it reaches the UDP system" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.messageQueueSize" withNSString:@"How many messages are on the current class queue at removal" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  JreStrongAssignAndConsume(&self->_expirer_, new_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(self));
  NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(self->_expirer_, @"UDP outbound expirer");
  [t setDaemonWithBoolean:true];
  [t start];
}

NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *new_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_(NetI2pRouterRouterContext *ctx, IOSIntArray *priorityLimits, IOSIntArray *weighting, id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_, ctx, priorityLimits, weighting, lsnr)
}

NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *create_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_(NetI2pRouterRouterContext *ctx, IOSIntArray *priorityLimits, IOSIntArray *weighting, id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue, initWithNetI2pRouterRouterContext_withIntArray_withIntArray_withNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener_, ctx, priorityLimits, weighting, lsnr)
}

jint NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_pickQueueWithNetI2pRouterOutNetMessage_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *self, NetI2pRouterOutNetMessage *message) {
  jint target = [((NetI2pRouterOutNetMessage *) nil_chk(message)) getPriority];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->_priorityLimits_))->size_; i++) {
    if (IOSIntArray_Get(self->_priorityLimits_, i) <= target) {
      if (i == 0) return 0;
      else return i - 1;
    }
  }
  return self->_priorityLimits_->size_ - 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue)

@implementation NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(failedWithNetI2pRouterOutNetMessage:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "failed", "LNetI2pRouterOutNetMessage;LNSString;", "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener = { "FailedListener", "net.i2p.router.transport.udp", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener)

@implementation NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer

- (instancetype)initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue:(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *)outer$ {
  NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(self, outer$);
  return self;
}

- (void)run {
  id<JavaUtilList> removed = create_JavaUtilArrayList_initWithInt_(1);
  while (this$0_->_alive_) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->_queue_))->size_; i++) {
      @synchronized(IOSObjectArray_Get(this$0_->_queue_, i)) {
        for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->_queue_), i))) size]; j++) {
          NetI2pRouterOutNetMessage *m = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->_queue_), i))) getWithInt:j];
          if ([((NetI2pRouterOutNetMessage *) nil_chk(m)) getExpiration] < now) {
            *IOSLongArray_GetRef(nil_chk(this$0_->_bytesQueued_), i) -= [m getMessageSize];
            [removed addWithId:m];
            [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->_queue_), i))) removeWithInt:j];
            j--;
            continue;
          }
        }
      }
    }
    for (jint i = 0; i < [removed size]; i++) {
      NetI2pRouterOutNetMessage *m = [removed getWithInt:i];
      [((NetI2pRouterOutNetMessage *) nil_chk(m)) timestampWithNSString:@"expirer killed it"];
      [((id<NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_FailedListener>) nil_chk(this$0_->_listener_)) failedWithNetI2pRouterOutNetMessage:m withNSString:@"expired before getting on the active pool"];
    }
    [removed clear];
    @try {
      JavaLangThread_sleepWithLong_(1000);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer = { "Expirer", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer;
}

@end

void NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *self, NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *new_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer, initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_, outer$)
}

NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer *create_NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer_initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer, initWithNetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpTimedWeightedPriorityMessageQueue_Expirer)
