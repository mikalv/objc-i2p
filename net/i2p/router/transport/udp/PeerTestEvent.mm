//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PeerTestEvent.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/net/InetAddress.h"
#include "java/util/Date.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/PeerTestEvent.h"
#include "net/i2p/router/transport/udp/PeerTestManager.h"
#include "net/i2p/router/transport/udp/PeerTestState.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTransportUdpPeerTestEvent () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_PeerTestEvent_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpPeerTestManager *_testManager_;
  jboolean _alive_;
  JavaUtilConcurrentAtomicAtomicLong *_lastTested_;
  JavaUtilConcurrentAtomicAtomicLong *_lastTestedV6_;
  jint _forceRun_;
}

- (void)locked_runTestWithBoolean:(jboolean)isIPv6;

- (jboolean)shouldTest;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _log_PeerTestEvent_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _testManager_, NetI2pRouterTransportUdpPeerTestManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _lastTested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestEvent, _lastTestedV6_, JavaUtilConcurrentAtomicAtomicLong *)

inline jint NetI2pRouterTransportUdpPeerTestEvent_get_NO_FORCE(void);
#define NetI2pRouterTransportUdpPeerTestEvent_NO_FORCE 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestEvent, NO_FORCE, jint)

inline jint NetI2pRouterTransportUdpPeerTestEvent_get_FORCE_IPV4(void);
#define NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV4 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestEvent, FORCE_IPV4, jint)

inline jint NetI2pRouterTransportUdpPeerTestEvent_get_FORCE_IPV6(void);
#define NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV6 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestEvent, FORCE_IPV6, jint)

inline jint NetI2pRouterTransportUdpPeerTestEvent_get_TEST_FREQUENCY(void);
#define NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY 780000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestEvent, TEST_FREQUENCY, jint)

inline jint NetI2pRouterTransportUdpPeerTestEvent_get_MIN_TEST_FREQUENCY(void);
#define NetI2pRouterTransportUdpPeerTestEvent_MIN_TEST_FREQUENCY 45000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestEvent, MIN_TEST_FREQUENCY, jint)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(NetI2pRouterTransportUdpPeerTestEvent *self, jboolean isIPv6);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpPeerTestEvent_shouldTest(NetI2pRouterTransportUdpPeerTestEvent *self);

@implementation NetI2pRouterTransportUdpPeerTestEvent

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)udp
      withNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)ptmgr {
  NetI2pRouterTransportUdpPeerTestEvent_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_(self, ctx, udp, ptmgr);
  return self;
}

- (void)timeReached {
  @synchronized(self) {
    if (NetI2pRouterTransportUdpPeerTestEvent_shouldTest(self)) {
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
      jlong sinceRunV4 = now - [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTested_)) get];
      jlong sinceRunV6 = now - [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTestedV6_)) get];
      jboolean configV4fw = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isIPv4Firewalled];
      jboolean configV6fw = [_transport_ isIPv6Firewalled];
      if (!configV4fw && _forceRun_ == NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV4 && sinceRunV4 >= NetI2pRouterTransportUdpPeerTestEvent_MIN_TEST_FREQUENCY) {
        NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(self, false);
      }
      else if (!configV6fw && [_transport_ hasIPv6Address] && _forceRun_ == NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV6 && sinceRunV6 >= NetI2pRouterTransportUdpPeerTestEvent_MIN_TEST_FREQUENCY) {
        NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(self, true);
      }
      else if (!configV4fw && sinceRunV4 >= NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY && [_transport_ getIPv6Config] != JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) {
        NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(self, false);
      }
      else if (!configV6fw && [_transport_ hasIPv6Address] && sinceRunV6 >= NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY) {
        NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(self, true);
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_PeerTestEvent_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_PeerTestEvent_ infoWithNSString:JreStrcat("$@$@", @"PTE timeReached(), no test run, last v4 test: ", create_JavaUtilDate_initWithLong_([_lastTested_ get]), @" last v6 test: ", create_JavaUtilDate_initWithLong_([_lastTestedV6_ get]))];
      }
    }
    if (_alive_) {
      jlong delay = (NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextIntWithInt:NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY];
      if ([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) hasIPv6Address] && [_transport_ getIPv6Config] != JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY)) delay /= 2;
      [self scheduleWithLong:delay];
    }
  }
}

- (void)locked_runTestWithBoolean:(jboolean)isIPv6 {
  NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(self, isIPv6);
}

- (void)forceRunSoonWithBoolean:(jboolean)isIPv6 {
  @synchronized(self) {
    if (!isIPv6 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isIPv4Firewalled]) return;
    if (isIPv6 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isIPv6Firewalled]) return;
    _forceRun_ = isIPv6 ? NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV6 : NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV4;
    [self rescheduleWithLong:NetI2pRouterTransportUdpPeerTestEvent_MIN_TEST_FREQUENCY];
  }
}

- (void)forceRunImmediatelyWithBoolean:(jboolean)isIPv6 {
  @synchronized(self) {
    if (!isIPv6 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isIPv4Firewalled]) return;
    if (isIPv6 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isIPv6Firewalled]) return;
    if (isIPv6) [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTestedV6_)) setWithLong:0];
    else [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTested_)) setWithLong:0];
    _forceRun_ = isIPv6 ? NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV6 : NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV4;
    [self rescheduleWithLong:5 * 1000];
  }
}

- (void)setIsAliveWithBoolean:(jboolean)isAlive {
  @synchronized(self) {
    _alive_ = isAlive;
    if (isAlive) {
      jlong delay = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextIntWithInt:2 * NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY];
      [self rescheduleWithLong:delay];
    }
    else {
      [self cancel];
    }
  }
}

- (void)setLastTestedWithBoolean:(jboolean)isIPv6 {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  if (isIPv6) [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTestedV6_)) setWithLong:now];
  else [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lastTested_)) setWithLong:now];
  if ([((NetI2pUtilLog *) nil_chk(_log_PeerTestEvent_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_PeerTestEvent_ debugWithNSString:JreStrcat("$Z", @"PTE.setLastTested() - v6? ", isIPv6) withJavaLangThrowable:create_JavaLangException_init()];
}

- (jboolean)shouldTest {
  return NetI2pRouterTransportUdpPeerTestEvent_shouldTest(self);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_PeerTestEvent_);
  RELEASE_(_transport_);
  RELEASE_(_testManager_);
  RELEASE_(_lastTested_);
  RELEASE_(_lastTestedV6_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withNetI2pRouterTransportUdpPeerTestManager:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(locked_runTestWithBoolean:);
  methods[3].selector = @selector(forceRunSoonWithBoolean:);
  methods[4].selector = @selector(forceRunImmediatelyWithBoolean:);
  methods[5].selector = @selector(setIsAliveWithBoolean:);
  methods[6].selector = @selector(setLastTestedWithBoolean:);
  methods[7].selector = @selector(shouldTest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_PeerTestEvent_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, 7, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_testManager_", "LNetI2pRouterTransportUdpPeerTestManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastTestedV6_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NO_FORCE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestEvent_NO_FORCE, 0x1a, -1, -1, -1, -1 },
    { "FORCE_IPV4", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV4, 0x1a, -1, -1, -1, -1 },
    { "FORCE_IPV6", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestEvent_FORCE_IPV6, 0x1a, -1, -1, -1, -1 },
    { "_forceRun_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TEST_FREQUENCY", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestEvent_TEST_FREQUENCY, 0x1a, -1, -1, -1, -1 },
    { "MIN_TEST_FREQUENCY", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestEvent_MIN_TEST_FREQUENCY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;LNetI2pRouterTransportUdpPeerTestManager;", "locked_runTest", "Z", "forceRunSoon", "forceRunImmediately", "setIsAlive", "setLastTested", "_log" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestEvent = { "PeerTestEvent", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 8, 13, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerTestEvent;
}

@end

void NetI2pRouterTransportUdpPeerTestEvent_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_(NetI2pRouterTransportUdpPeerTestEvent *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *udp, NetI2pRouterTransportUdpPeerTestManager *ptmgr) {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(ctx)) simpleTimer2]);
  JreStrongAssignAndConsume(&self->_lastTested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_lastTestedV6_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_PeerTestEvent_, [((NetI2pUtilLogManager *) nil_chk([ctx logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPeerTestEvent_class_()]);
  JreStrongAssign(&self->_transport_, udp);
  JreStrongAssign(&self->_testManager_, ptmgr);
}

NetI2pRouterTransportUdpPeerTestEvent *new_NetI2pRouterTransportUdpPeerTestEvent_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *udp, NetI2pRouterTransportUdpPeerTestManager *ptmgr) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerTestEvent, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_, ctx, udp, ptmgr)
}

NetI2pRouterTransportUdpPeerTestEvent *create_NetI2pRouterTransportUdpPeerTestEvent_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *udp, NetI2pRouterTransportUdpPeerTestManager *ptmgr) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerTestEvent, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpPeerTestManager_, ctx, udp, ptmgr)
}

void NetI2pRouterTransportUdpPeerTestEvent_locked_runTestWithBoolean_(NetI2pRouterTransportUdpPeerTestEvent *self, jboolean isIPv6) {
  NetI2pRouterTransportUdpPeerState *bob = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) pickTestPeerWithNetI2pRouterTransportUdpPeerTestState_Role:JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB) withBoolean:isIPv6 withNetI2pRouterTransportUdpRemoteHostId:nil];
  if (bob != nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_PeerTestEvent_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_PeerTestEvent_ infoWithNSString:JreStrcat("$@", @"Running periodic test with bob = ", bob)];
    [((NetI2pRouterTransportUdpPeerTestManager *) nil_chk(self->_testManager_)) runTestWithJavaNetInetAddress:[bob getRemoteIPAddress] withInt:[bob getRemotePort] withNetI2pDataSessionKey:[bob getCurrentCipherKey] withNetI2pDataSessionKey:[bob getCurrentMACKey]];
    [self setLastTestedWithBoolean:isIPv6];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_PeerTestEvent_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_PeerTestEvent_ warnWithNSString:JreStrcat("$Z", @"Unable to run peer test, no peers available - v6? ", isIPv6)];
  }
  self->_forceRun_ = NetI2pRouterTransportUdpPeerTestEvent_NO_FORCE;
}

jboolean NetI2pRouterTransportUdpPeerTestEvent_shouldTest(NetI2pRouterTransportUdpPeerTestEvent *self) {
  return !([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) isHidden] || ([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isIPv4Firewalled] && [self->_transport_ isIPv6Firewalled]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestEvent)
