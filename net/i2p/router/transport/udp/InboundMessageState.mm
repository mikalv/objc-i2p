//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/InboundMessageState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpInboundMessageState () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  jlong _messageId_;
  NetI2pDataHash *_from_;
  IOSObjectArray *_fragments_;
  jint _lastFragment_;
  jlong _receiveBegin_;
  jlong _enqueueTime_;
  jint _completeSize_;
  jboolean _released_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageState, _from_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpInboundMessageState, _fragments_, IOSObjectArray *)

inline jlong NetI2pRouterTransportUdpInboundMessageState_get_MAX_RECEIVE_TIME(void);
#define NetI2pRouterTransportUdpInboundMessageState_MAX_RECEIVE_TIME 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpInboundMessageState, MAX_RECEIVE_TIME, jlong)

inline jint NetI2pRouterTransportUdpInboundMessageState_get_MAX_FRAGMENT_SIZE(void);
#define NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENT_SIZE 1572
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpInboundMessageState, MAX_FRAGMENT_SIZE, jint)

inline NetI2pUtilByteCache *NetI2pRouterTransportUdpInboundMessageState_get__fragmentCache(void);
static NetI2pUtilByteCache *NetI2pRouterTransportUdpInboundMessageState__fragmentCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpInboundMessageState, _fragmentCache, NetI2pUtilByteCache *)

@interface NetI2pRouterTransportUdpInboundMessageState_PartialBitfield : NSObject < NetI2pRouterTransportUdpACKBitfield > {
 @public
  jlong _bitfieldMessageId_;
  jint _ackCount_;
  jint _highestReceived_;
  jlong _fragmentAcks_;
}

- (instancetype)initWithLong:(jlong)messageId
           withNSObjectArray:(IOSObjectArray *)data
                     withInt:(jint)size;

+ (jlong)maskWithInt:(jint)fragment;

- (jint)fragmentCount;

- (jint)ackCount;

- (jint)highestReceived;

- (jlong)getMessageId;

- (jboolean)receivedWithInt:(jint)fragmentNum;

- (jboolean)receivedComplete;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield)

__attribute__((unused)) static void NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *self, jlong messageId, IOSObjectArray *data, jint size);

__attribute__((unused)) static NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *new_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(jlong messageId, IOSObjectArray *data, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *create_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(jlong messageId, IOSObjectArray *data, jint size);

__attribute__((unused)) static jlong NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_maskWithInt_(jint fragment);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpInboundMessageState)

@implementation NetI2pRouterTransportUdpInboundMessageState

+ (jint)MAX_FRAGMENTS {
  return NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS;
}

+ (jint)MAX_PARTIAL_BITFIELD_BYTES {
  return NetI2pRouterTransportUdpInboundMessageState_MAX_PARTIAL_BITFIELD_BYTES;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                         withLong:(jlong)messageId
                               withNetI2pDataHash:(NetI2pDataHash *)from {
  NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_(self, ctx, messageId, from);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                         withLong:(jlong)messageId
                               withNetI2pDataHash:(NetI2pDataHash *)from
withNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data
                                          withInt:(jint)dataFragment {
  NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_(self, ctx, messageId, from, data, dataFragment);
  return self;
}

- (jboolean)receiveFragmentWithNetI2pRouterTransportUdpUDPPacketReader_DataReader:(NetI2pRouterTransportUdpUDPPacketReader_DataReader *)data
                                                                          withInt:(jint)dataFragment {
  jint fragmentNum = [((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(data)) readMessageFragmentNumWithInt:dataFragment];
  if ((fragmentNum < 0) || (fragmentNum >= ((IOSObjectArray *) nil_chk(_fragments_))->size_)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$ICI", @"Invalid fragment ", fragmentNum, '/', ((IOSObjectArray *) nil_chk(_fragments_))->size_)];
    return false;
  }
  if (IOSObjectArray_Get(nil_chk(_fragments_), fragmentNum) == nil) {
    NetI2pDataByteArray *message = [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportUdpInboundMessageState__fragmentCache)) acquire];
    @try {
      [data readMessageFragmentWithInt:dataFragment withByteArray:[((NetI2pDataByteArray *) nil_chk(message)) getData] withInt:0];
      jint size = [data readMessageFragmentSizeWithInt:dataFragment];
      if (size <= 0) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$J$@", @"Zero-length fragment ", fragmentNum, @" for message ", _messageId_, @" from ", _from_)];
      }
      [message setValidWithInt:size];
      IOSObjectArray_Set(_fragments_, fragmentNum, message);
      jboolean isLast = [data readMessageIsLastWithInt:dataFragment];
      if (isLast) {
        if (_lastFragment_ >= 0) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$J$@", @"Multiple last fragments for message ", _messageId_, @" from ", _from_)];
          return false;
        }
        _lastFragment_ = fragmentNum;
      }
      else if (_lastFragment_ >= 0 && fragmentNum >= _lastFragment_) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$I$I$J$@", @"Non-last fragment ", fragmentNum, @" when last is ", _lastFragment_, @" for message ", _messageId_, @" from ", _from_)];
        return false;
      }
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$J$I$Z", @"New fragment ", fragmentNum, @" for message ", _messageId_, @", size=", size, @", isLast=", isLast)];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I", @"Corrupt SSU fragment ", fragmentNum) withJavaLangThrowable:aioobe];
      return false;
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$J$I$I", @"Received fragment ", fragmentNum, @" for message ", _messageId_, @" again, old size=", [((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(_fragments_, fragmentNum))) getValid], @" and new size=", [data readMessageFragmentSizeWithInt:dataFragment])];
  }
  return true;
}

- (jboolean)isComplete {
  jint last = _lastFragment_;
  if (last < 0) return false;
  for (jint i = 0; i <= last; i++) if (IOSObjectArray_Get(nil_chk(_fragments_), i) == nil) return false;
  return true;
}

- (jboolean)isExpired {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] > _receiveBegin_ + NetI2pRouterTransportUdpInboundMessageState_MAX_RECEIVE_TIME;
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _receiveBegin_;
}

- (void)setEnqueueTimeWithLong:(jlong)now {
  _enqueueTime_ = now;
}

- (jlong)getEnqueueTime {
  return _enqueueTime_;
}

- (void)drop {
  [self releaseResources];
}

- (NetI2pDataHash *)getFrom {
  return _from_;
}

- (jlong)getMessageId {
  return _messageId_;
}

- (jint)getCompleteSize {
  if (_completeSize_ < 0) {
    if (_lastFragment_ < 0) @throw create_JavaLangIllegalStateException_initWithNSString_(@"last fragment not set");
    if (_released_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"SSU IMS 2 Use after free");
    jint size = 0;
    for (jint i = 0; i <= _lastFragment_; i++) {
      NetI2pDataByteArray *frag = IOSObjectArray_Get(nil_chk(_fragments_), i);
      if (frag == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$ICI", @"null fragment ", i, '/', _lastFragment_));
      size += [frag getValid];
    }
    _completeSize_ = size;
  }
  return _completeSize_;
}

- (id<NetI2pRouterTransportUdpACKBitfield>)createACKBitfield {
  jint last = _lastFragment_;
  jint sz = (last >= 0) ? last + 1 : ((IOSObjectArray *) nil_chk(_fragments_))->size_;
  return create_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(_messageId_, _fragments_, sz);
}

- (void)releaseResources {
  _released_ = true;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(_fragments_))->size_; i++) {
    if (IOSObjectArray_Get(_fragments_, i) != nil) {
      [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTransportUdpInboundMessageState__fragmentCache)) release__WithId:IOSObjectArray_Get(_fragments_, i)];
      IOSObjectArray_Set(_fragments_, i, nil);
    }
  }
}

- (IOSObjectArray *)getFragments {
  if (_released_) {
    JavaLangRuntimeException *e = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J", @"Use after free: ", _messageId_));
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"SSU IMS" withJavaLangThrowable:e];
    @throw e;
  }
  return _fragments_;
}

- (jint)getFragmentCount {
  return _lastFragment_ + 1;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"IB Message: "])) appendWithLong:_messageId_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" from "])) appendWithNSString:[((NetI2pDataHash *) nil_chk(_from_)) description]];
  if ([self isComplete]) {
    [buf appendWithNSString:@" completely received with "];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:_completeSize_])) appendWithNSString:@" bytes in "];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:_lastFragment_ + 1])) appendWithNSString:@" fragments"];
  }
  else {
    for (jint i = 0; i <= _lastFragment_; i++) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" fragment "])) appendWithInt:i];
      if (IOSObjectArray_Get(nil_chk(_fragments_), i) != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@": known at size "])) appendWithInt:[((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(_fragments_, i))) getValid]];
      else [buf appendWithNSString:@": unknown"];
    }
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithLong:[self getLifetime]];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_from_);
  RELEASE_(_fragments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpACKBitfield;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNetI2pDataByteArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withLong:withNetI2pDataHash:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withLong:withNetI2pDataHash:withNetI2pRouterTransportUdpUDPPacketReader_DataReader:withInt:);
  methods[2].selector = @selector(receiveFragmentWithNetI2pRouterTransportUdpUDPPacketReader_DataReader:withInt:);
  methods[3].selector = @selector(isComplete);
  methods[4].selector = @selector(isExpired);
  methods[5].selector = @selector(getLifetime);
  methods[6].selector = @selector(setEnqueueTimeWithLong:);
  methods[7].selector = @selector(getEnqueueTime);
  methods[8].selector = @selector(drop);
  methods[9].selector = @selector(getFrom);
  methods[10].selector = @selector(getMessageId);
  methods[11].selector = @selector(getCompleteSize);
  methods[12].selector = @selector(createACKBitfield);
  methods[13].selector = @selector(releaseResources);
  methods[14].selector = @selector(getFragments);
  methods[15].selector = @selector(getFragmentCount);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_from_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragments_", "[LNetI2pDataByteArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastFragment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveBegin_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_enqueueTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_completeSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_released_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_RECEIVE_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpInboundMessageState_MAX_RECEIVE_TIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_FRAGMENTS", "I", .constantValue.asInt = NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS, 0x19, -1, -1, -1, -1 },
    { "MAX_PARTIAL_BITFIELD_BYTES", "I", .constantValue.asInt = NetI2pRouterTransportUdpInboundMessageState_MAX_PARTIAL_BITFIELD_BYTES, 0x19, -1, -1, -1, -1 },
    { "MAX_FRAGMENT_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_fragmentCache", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;JLNetI2pDataHash;", "LNetI2pRouterRouterContext;JLNetI2pDataHash;LNetI2pRouterTransportUdpUDPPacketReader_DataReader;I", "LNetI2pDataDataFormatException;", "receiveFragment", "LNetI2pRouterTransportUdpUDPPacketReader_DataReader;I", "setEnqueueTime", "J", "toString", &NetI2pRouterTransportUdpInboundMessageState__fragmentCache, "LNetI2pRouterTransportUdpInboundMessageState_PartialBitfield;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpInboundMessageState = { "InboundMessageState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 17, 15, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpInboundMessageState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpInboundMessageState class]) {
    JreStrongAssign(&NetI2pRouterTransportUdpInboundMessageState__fragmentCache, NetI2pUtilByteCache_getInstanceWithInt_withInt_(64, NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENT_SIZE));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpInboundMessageState)
  }
}

@end

void NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_(NetI2pRouterTransportUdpInboundMessageState *self, NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpInboundMessageState_class_()]);
  self->_messageId_ = messageId;
  JreStrongAssign(&self->_from_, from);
  JreStrongAssignAndConsume(&self->_fragments_, [IOSObjectArray newArrayWithLength:NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS type:NetI2pDataByteArray_class_()]);
  self->_lastFragment_ = -1;
  self->_completeSize_ = -1;
  self->_receiveBegin_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
}

NetI2pRouterTransportUdpInboundMessageState *new_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpInboundMessageState, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_, ctx, messageId, from)
}

NetI2pRouterTransportUdpInboundMessageState *create_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpInboundMessageState, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_, ctx, messageId, from)
}

void NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_(NetI2pRouterTransportUdpInboundMessageState *self, NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data, jint dataFragment) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpInboundMessageState_class_()]);
  self->_messageId_ = messageId;
  JreStrongAssign(&self->_from_, from);
  if ([((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(data)) readMessageIsLastWithInt:dataFragment]) {
    jint num = 1 + [data readMessageFragmentNumWithInt:dataFragment];
    if (num > NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"corrupt - too many fragments: ", num));
    JreStrongAssignAndConsume(&self->_fragments_, [IOSObjectArray newArrayWithLength:num type:NetI2pDataByteArray_class_()]);
  }
  else {
    JreStrongAssignAndConsume(&self->_fragments_, [IOSObjectArray newArrayWithLength:NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS type:NetI2pDataByteArray_class_()]);
  }
  self->_lastFragment_ = -1;
  self->_completeSize_ = -1;
  self->_receiveBegin_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  if (![self receiveFragmentWithNetI2pRouterTransportUdpUDPPacketReader_DataReader:data withInt:dataFragment]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"corrupt");
}

NetI2pRouterTransportUdpInboundMessageState *new_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_(NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data, jint dataFragment) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpInboundMessageState, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_, ctx, messageId, from, data, dataFragment)
}

NetI2pRouterTransportUdpInboundMessageState *create_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_(NetI2pRouterRouterContext *ctx, jlong messageId, NetI2pDataHash *from, NetI2pRouterTransportUdpUDPPacketReader_DataReader *data, jint dataFragment) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpInboundMessageState, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_withNetI2pRouterTransportUdpUDPPacketReader_DataReader_withInt_, ctx, messageId, from, data, dataFragment)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpInboundMessageState)

@implementation NetI2pRouterTransportUdpInboundMessageState_PartialBitfield

- (instancetype)initWithLong:(jlong)messageId
           withNSObjectArray:(IOSObjectArray *)data
                     withInt:(jint)size {
  NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(self, messageId, data, size);
  return self;
}

+ (jlong)maskWithInt:(jint)fragment {
  return NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_maskWithInt_(fragment);
}

- (jint)fragmentCount {
  return _highestReceived_ + 1;
}

- (jint)ackCount {
  return _ackCount_;
}

- (jint)highestReceived {
  return _highestReceived_;
}

- (jlong)getMessageId {
  return _bitfieldMessageId_;
}

- (jboolean)receivedWithInt:(jint)fragmentNum {
  if (fragmentNum < 0 || fragmentNum > _highestReceived_) return false;
  return (_fragmentAcks_ & NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_maskWithInt_(fragmentNum)) != 0;
}

- (jboolean)receivedComplete {
  return _ackCount_ == _highestReceived_ + 1;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:@"OB Partial ACK of "];
  [buf appendWithLong:_bitfieldMessageId_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" highest: "])) appendWithInt:_highestReceived_];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with "])) appendWithInt:_ackCount_])) appendWithNSString:@" ACKs for: ["];
  for (jint i = 0; i <= _highestReceived_; i++) {
    if ([self receivedWithInt:i]) [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:i])) appendWithChar:' '];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] / "])) appendWithInt:_highestReceived_ + 1];
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:withNSObjectArray:withInt:);
  methods[1].selector = @selector(maskWithInt:);
  methods[2].selector = @selector(fragmentCount);
  methods[3].selector = @selector(ackCount);
  methods[4].selector = @selector(highestReceived);
  methods[5].selector = @selector(getMessageId);
  methods[6].selector = @selector(receivedWithInt:);
  methods[7].selector = @selector(receivedComplete);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_bitfieldMessageId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ackCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_highestReceived_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fragmentAcks_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J[LNSObject;I", "mask", "I", "received", "toString", "LNetI2pRouterTransportUdpInboundMessageState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpInboundMessageState_PartialBitfield = { "PartialBitfield", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1a, 9, 4, 5, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield;
}

@end

void NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *self, jlong messageId, IOSObjectArray *data, jint size) {
  NSObject_init(self);
  if (size > NetI2pRouterTransportUdpInboundMessageState_MAX_FRAGMENTS) @throw create_JavaLangIllegalArgumentException_init();
  self->_bitfieldMessageId_ = messageId;
  jint ackCount = 0;
  jint highestReceived = -1;
  jlong acks = 0;
  for (jint i = 0; i < size; i++) {
    if (IOSObjectArray_Get(nil_chk(data), i) != nil) {
      acks |= NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_maskWithInt_(i);
      ackCount++;
      highestReceived = i;
    }
  }
  self->_fragmentAcks_ = acks;
  self->_ackCount_ = ackCount;
  self->_highestReceived_ = highestReceived;
}

NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *new_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(jlong messageId, IOSObjectArray *data, jint size) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield, initWithLong_withNSObjectArray_withInt_, messageId, data, size)
}

NetI2pRouterTransportUdpInboundMessageState_PartialBitfield *create_NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initWithLong_withNSObjectArray_withInt_(jlong messageId, IOSObjectArray *data, jint size) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield, initWithLong_withNSObjectArray_withInt_, messageId, data, size)
}

jlong NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_maskWithInt_(jint fragment) {
  NetI2pRouterTransportUdpInboundMessageState_PartialBitfield_initialize();
  return JreLShift64(1LL, fragment);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpInboundMessageState_PartialBitfield)
