//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/OutboundRefiller.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/MessageQueue.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/OutboundRefiller.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpOutboundRefiller () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpOutboundMessageFragments *_fragments_;
  id<NetI2pRouterTransportUdpMessageQueue> _messages_;
  jboolean _alive_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundRefiller, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundRefiller, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundRefiller, _fragments_, NetI2pRouterTransportUdpOutboundMessageFragments *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundRefiller, _messages_, id<NetI2pRouterTransportUdpMessageQueue>)

@implementation NetI2pRouterTransportUdpOutboundRefiller

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTransportUdpOutboundMessageFragments:(NetI2pRouterTransportUdpOutboundMessageFragments *)fragments
         withNetI2pRouterTransportUdpMessageQueue:(id<NetI2pRouterTransportUdpMessageQueue>)messages {
  NetI2pRouterTransportUdpOutboundRefiller_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_(self, ctx, fragments, messages);
  return self;
}

- (void)startup {
  _alive_ = true;
  NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, @"UDP outbound refiller", true);
  [t start];
}

- (void)shutdown {
  _alive_ = false;
}

- (void)run {
  while (_alive_) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Check the fragments to see if we can add more..."];
    jboolean wantMore = [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) waitForMoreAllowed];
    if (wantMore) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Want more fragments..."];
      NetI2pRouterOutNetMessage *msg = [((id<NetI2pRouterTransportUdpMessageQueue>) nil_chk(_messages_)) getNextWithLong:-1];
      if (msg != nil) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$@", @"New message found to fragments: ", msg)];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.timeToActive" withLong:[msg getLifetime] withLong:[msg getLifetime]];
        [((NetI2pRouterTransportUdpOutboundMessageFragments *) nil_chk(_fragments_)) addWithNetI2pRouterOutNetMessage:msg];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"No message found to fragment"];
      }
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"No more fragments allowed, looping"];
    }
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_fragments_);
  RELEASE_(_messages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpOutboundMessageFragments:withNetI2pRouterTransportUdpMessageQueue:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fragments_", "LNetI2pRouterTransportUdpOutboundMessageFragments;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messages_", "LNetI2pRouterTransportUdpMessageQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpOutboundMessageFragments;LNetI2pRouterTransportUdpMessageQueue;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundRefiller = { "OutboundRefiller", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 4, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpOutboundRefiller;
}

@end

void NetI2pRouterTransportUdpOutboundRefiller_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_(NetI2pRouterTransportUdpOutboundRefiller *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<NetI2pRouterTransportUdpMessageQueue> messages) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpOutboundRefiller_class_()]);
  JreStrongAssign(&self->_fragments_, fragments);
  JreStrongAssign(&self->_messages_, messages);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.timeToActive" withNSString:@"Message lifetime until it reaches the outbound fragment queue" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpOutboundRefiller *new_NetI2pRouterTransportUdpOutboundRefiller_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<NetI2pRouterTransportUdpMessageQueue> messages) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundRefiller, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_, ctx, fragments, messages)
}

NetI2pRouterTransportUdpOutboundRefiller *create_NetI2pRouterTransportUdpOutboundRefiller_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpOutboundMessageFragments *fragments, id<NetI2pRouterTransportUdpMessageQueue> messages) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundRefiller, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpOutboundMessageFragments_withNetI2pRouterTransportUdpMessageQueue_, ctx, fragments, messages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundRefiller)
