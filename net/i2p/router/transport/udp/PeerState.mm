//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PeerState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/ACKSender.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/OutboundMessageState.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/CachedIteratorCollection.h"
#include "net/i2p/router/util/PriBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@class NetI2pRouterTransportUdpPeerState_ShouldSend;

@interface NetI2pRouterTransportUdpPeerState () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pDataHash *_remotePeer_;
  NetI2pDataSessionKey *_currentMACKey_;
  NetI2pDataSessionKey *_currentCipherKey_;
  NetI2pDataSessionKey *_nextMACKey_;
  NetI2pDataSessionKey *_nextCipherKey_;
  jlong _keyEstablishedTime_;
  jlong _clockSkew_;
  id _clockSkewLock_;
  jlong _currentReceiveSecond_;
  jlong _lastSendTime_;
  jlong _lastSendFullyTime_;
  jlong _lastPingTime_;
  jlong _lastReceiveTime_;
  jint _consecutiveFailedSends_;
  id<JavaUtilSet> _currentACKs_;
  id<JavaUtilQueue> _currentACKsResend_;
  volatile_jlong _lastACKSend_;
  volatile_jlong _wantACKSendSince_;
  jboolean _currentSecondECNReceived_;
  jint _sendWindowBytes_;
  jint _sendWindowBytesRemaining_;
  jlong _lastSendRefill_;
  jint _sendBps_;
  jint _sendBytes_;
  jint _receiveBps_;
  jint _receiveBytes_;
  jlong _receivePeriodBegin_;
  volatile_jlong _lastCongestionOccurred_;
  volatile_jint _slowStartThreshold_;
  IOSByteArray *_remoteIP_;
  volatile_id _remoteIPAddress_;
  volatile_jint _remotePort_;
  volatile_id _remoteHostId_;
  jlong _weRelayToThemAs_;
  jlong _theyRelayToUsAs_;
  jint _mtu_;
  jint _mtuReceive_;
  jint _largeMTU_;
  jlong _consecutiveSmall_;
  jint _mtuIncreases_;
  jint _mtuDecreases_;
  jint _rtt_;
  jint _rttDeviation_;
  jint _rto_;
  jint _messagesReceived_;
  jint _messagesSent_;
  jint _packetsTransmitted_;
  jint _packetsRetransmitted_;
  jint _packetsReceivedDuplicate_;
  jint _packetsReceived_;
  jboolean _mayDisconnect_;
  id<JavaUtilMap> _inboundMessages_;
  NetI2pRouterUtilCachedIteratorCollection *_outboundMessages_;
  NetI2pRouterUtilPriBlockingQueue *_outboundQueue_;
  NetI2pRouterTransportUdpOutboundMessageState *_retransmitter_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  volatile_jboolean _dead_;
  jint _concurrentMessagesAllowed_;
  jint _concurrentMessagesActive_;
  jint _consecutiveRejections_;
  jboolean _isInbound_;
  jlong _lastIntroducerTime_;
}

- (jboolean)allocateSendingBytesWithInt:(jint)size
                                withInt:(jint)messagePushCount OBJC_METHOD_FAMILY_NONE;

- (jboolean)allocateSendingBytesWithInt:(jint)size
                            withBoolean:(jboolean)isForACK
                                withInt:(jint)messagePushCount OBJC_METHOD_FAMILY_NONE;

- (void)messageFullyReceivedWithJavaLangLong:(JavaLangLong *)messageId
                                     withInt:(jint)bytes
                                 withBoolean:(jboolean)isForACK;

- (jboolean)congestionOccurred;

- (void)locked_messageACKedWithInt:(jint)bytesACKed
                          withLong:(jlong)lifetime
                           withInt:(jint)numSends;

- (void)messageACKedWithInt:(jint)bytesACKed
                   withLong:(jlong)lifetime
                    withInt:(jint)numSends;

- (void)recalculateTimeoutsWithLong:(jlong)lifetime;

- (void)adjustMTU;

- (jint)countMaxACKData;

- (jint)minRTO;

- (NetI2pRouterTransportUdpPeerState_ShouldSend *)locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _remotePeer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _currentMACKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _currentCipherKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _nextMACKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _nextCipherKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _clockSkewLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _currentACKs_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _currentACKsResend_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _remoteIP_, IOSByteArray *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _remoteIPAddress_, JavaNetInetAddress *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _remoteHostId_, NetI2pRouterTransportUdpRemoteHostId *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _inboundMessages_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _outboundMessages_, NetI2pRouterUtilCachedIteratorCollection *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _outboundQueue_, NetI2pRouterUtilPriBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _retransmitter_, NetI2pRouterTransportUdpOutboundMessageState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState, _transport_, NetI2pRouterTransportUdpUDPTransport *)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_CONCURRENT_MSGS(void);
#define NetI2pRouterTransportUdpPeerState_MIN_CONCURRENT_MSGS 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_CONCURRENT_MSGS, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_DEFAULT_SEND_WINDOW_BYTES(void);
#define NetI2pRouterTransportUdpPeerState_DEFAULT_SEND_WINDOW_BYTES 8192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, DEFAULT_SEND_WINDOW_BYTES, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MINIMUM_WINDOW_BYTES(void);
#define NetI2pRouterTransportUdpPeerState_MINIMUM_WINDOW_BYTES 8192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MINIMUM_WINDOW_BYTES, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_SEND_WINDOW_BYTES(void);
#define NetI2pRouterTransportUdpPeerState_MAX_SEND_WINDOW_BYTES 1048576
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_SEND_WINDOW_BYTES, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_ALLOCATE_SEND(void);
#define NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_ALLOCATE_SEND, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_SEND_MSGS_PENDING(void);
#define NetI2pRouterTransportUdpPeerState_MAX_SEND_MSGS_PENDING 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_SEND_MSGS_PENDING, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_DEFAULT_MTU(void);
#define NetI2pRouterTransportUdpPeerState_DEFAULT_MTU 620
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, DEFAULT_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_RTO(void);
#define NetI2pRouterTransportUdpPeerState_MIN_RTO 350
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_RTO, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_INIT_RTO(void);
#define NetI2pRouterTransportUdpPeerState_INIT_RTO 3000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, INIT_RTO, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_RTO(void);
#define NetI2pRouterTransportUdpPeerState_MAX_RTO 15000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_RTO, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_CLOCK_SKEW_FUDGE(void);
#define NetI2pRouterTransportUdpPeerState_CLOCK_SKEW_FUDGE 166
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, CLOCK_SKEW_FUDGE, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_RESEND_ACKS(void);
#define NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_RESEND_ACKS, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_RESEND_ACKS_LARGE(void);
#define NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_LARGE 21
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_RESEND_ACKS_LARGE, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_RESEND_ACKS_SMALL(void);
#define NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_SMALL 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_RESEND_ACKS_SMALL, jint)

inline jlong NetI2pRouterTransportUdpPeerState_get_RESEND_ACK_TIMEOUT(void);
#define NetI2pRouterTransportUdpPeerState_RESEND_ACK_TIMEOUT 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, RESEND_ACK_TIMEOUT, jlong)

inline jboolean NetI2pRouterTransportUdpPeerState_get_IGNORE_CWIN(void);
#define NetI2pRouterTransportUdpPeerState_IGNORE_CWIN false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, IGNORE_CWIN, jboolean)

inline jboolean NetI2pRouterTransportUdpPeerState_get_ALWAYS_ALLOW_FIRST_PUSH(void);
#define NetI2pRouterTransportUdpPeerState_ALWAYS_ALLOW_FIRST_PUSH false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, ALWAYS_ALLOW_FIRST_PUSH, jboolean)

inline jfloat NetI2pRouterTransportUdpPeerState_get_RTT_DAMPENING(void);
#define NetI2pRouterTransportUdpPeerState_RTT_DAMPENING 0.125f
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, RTT_DAMPENING, jfloat)

inline jint NetI2pRouterTransportUdpPeerState_get_MTU_RCV_DISPLAY_THRESHOLD(void);
#define NetI2pRouterTransportUdpPeerState_MTU_RCV_DISPLAY_THRESHOLD 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MTU_RCV_DISPLAY_THRESHOLD, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_OVERHEAD_SIZE(void);
#define NetI2pRouterTransportUdpPeerState_OVERHEAD_SIZE 60
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, OVERHEAD_SIZE, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_IPV6_OVERHEAD_SIZE(void);
#define NetI2pRouterTransportUdpPeerState_IPV6_OVERHEAD_SIZE 80
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, IPV6_OVERHEAD_SIZE, jint)

inline jboolean NetI2pRouterTransportUdpPeerState_get_THROTTLE_RESENDS(void);
#define NetI2pRouterTransportUdpPeerState_THROTTLE_RESENDS true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, THROTTLE_RESENDS, jboolean)

inline jboolean NetI2pRouterTransportUdpPeerState_get_THROTTLE_INITIAL_SEND(void);
#define NetI2pRouterTransportUdpPeerState_THROTTLE_INITIAL_SEND true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, THROTTLE_INITIAL_SEND, jboolean)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_EXPLICIT_ACKS(void);
#define NetI2pRouterTransportUdpPeerState_MIN_EXPLICIT_ACKS 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_EXPLICIT_ACKS, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_ACK_SIZE(void);
#define NetI2pRouterTransportUdpPeerState_MIN_ACK_SIZE 13
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_ACK_SIZE, jint)

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withInt_(NetI2pRouterTransportUdpPeerState *self, jint size, jint messagePushCount);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withBoolean_withInt_(NetI2pRouterTransportUdpPeerState *self, jint size, jboolean isForACK, jint messagePushCount);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_messageFullyReceivedWithJavaLangLong_withInt_withBoolean_(NetI2pRouterTransportUdpPeerState *self, JavaLangLong *messageId, jint bytes, jboolean isForACK);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpPeerState_congestionOccurred(NetI2pRouterTransportUdpPeerState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_locked_messageACKedWithInt_withLong_withInt_(NetI2pRouterTransportUdpPeerState *self, jint bytesACKed, jlong lifetime, jint numSends);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_messageACKedWithInt_withLong_withInt_(NetI2pRouterTransportUdpPeerState *self, jint bytesACKed, jlong lifetime, jint numSends);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_recalculateTimeoutsWithLong_(NetI2pRouterTransportUdpPeerState *self, jlong lifetime);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_adjustMTU(NetI2pRouterTransportUdpPeerState *self);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPeerState_countMaxACKData(NetI2pRouterTransportUdpPeerState *self);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPeerState_minRTO(NetI2pRouterTransportUdpPeerState *self);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(NetI2pRouterTransportUdpPeerState *self, NetI2pRouterTransportUdpOutboundMessageState *state);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$5(void);

@interface NetI2pRouterTransportUdpPeerState_FullACKBitfield : NSObject < NetI2pRouterTransportUdpACKBitfield > {
 @public
  jlong _msgId_;
}

- (instancetype)initWithLong:(jlong)id_;

- (jint)fragmentCount;

- (jint)ackCount;

- (jint)highestReceived;

- (jlong)getMessageId;

- (jboolean)receivedWithInt:(jint)fragmentNum;

- (jboolean)receivedComplete;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)o;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPeerState_FullACKBitfield)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(NetI2pRouterTransportUdpPeerState_FullACKBitfield *self, jlong id_);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_FullACKBitfield *new_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(jlong id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_FullACKBitfield *create_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(jlong id_);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerState_FullACKBitfield)

typedef NS_ENUM(NSUInteger, NetI2pRouterTransportUdpPeerState_ShouldSend_Enum) {
  NetI2pRouterTransportUdpPeerState_ShouldSend_Enum_YES = 0,
  NetI2pRouterTransportUdpPeerState_ShouldSend_Enum_NO = 1,
  NetI2pRouterTransportUdpPeerState_ShouldSend_Enum_NO_BW = 2,
};

@interface NetI2pRouterTransportUdpPeerState_ShouldSend : JavaLangEnum

@property (readonly, class, nonnull) NetI2pRouterTransportUdpPeerState_ShouldSend *YES_ NS_SWIFT_NAME(YES_);
@property (readonly, class, nonnull) NetI2pRouterTransportUdpPeerState_ShouldSend *NO_ NS_SWIFT_NAME(NO_);
@property (readonly, class, nonnull) NetI2pRouterTransportUdpPeerState_ShouldSend *NO_BW NS_SWIFT_NAME(NO_BW);
+ (IOSObjectArray *)values;

+ (NetI2pRouterTransportUdpPeerState_ShouldSend *)valueOfWithNSString:(NSString *)name;

- (NetI2pRouterTransportUdpPeerState_ShouldSend_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportUdpPeerState_ShouldSend)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_values_[];

inline NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_get_YES(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPeerState_ShouldSend, YES)

inline NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_get_NO(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPeerState_ShouldSend, NO)

inline NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_get_NO_BW(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTransportUdpPeerState_ShouldSend, NO_BW)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_ShouldSend_initWithNSString_withInt_(NetI2pRouterTransportUdpPeerState_ShouldSend *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpPeerState_ShouldSend_values(void);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerState_ShouldSend)

@interface NetI2pRouterTransportUdpPeerState_ResendACK : NSObject {
 @public
  JavaLangLong *id__;
  jlong time_;
}

- (instancetype)initWithJavaLangLong:(JavaLangLong *)id_
                            withLong:(jlong)time;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPeerState_ResendACK)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerState_ResendACK, id__, JavaLangLong *)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(NetI2pRouterTransportUdpPeerState_ResendACK *self, JavaLangLong *id_, jlong time);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_ResendACK *new_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(JavaLangLong *id_, jlong time) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState_ResendACK *create_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(JavaLangLong *id_, jlong time);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerState_ResendACK)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpPeerState)

jint NetI2pRouterTransportUdpPeerState_MAX_MTU;

@implementation NetI2pRouterTransportUdpPeerState

+ (jlong)RETRANSMISSION_PERIOD_WIDTH {
  return NetI2pRouterTransportUdpPeerState_RETRANSMISSION_PERIOD_WIDTH;
}

+ (jint)MIN_MTU {
  return NetI2pRouterTransportUdpPeerState_MIN_MTU;
}

+ (jint)MIN_IPV6_MTU {
  return NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
}

+ (jint)MAX_IPV6_MTU {
  return NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU;
}

+ (jint)LARGE_MTU {
  return NetI2pRouterTransportUdpPeerState_LARGE_MTU;
}

+ (jint)MAX_MTU {
  return NetI2pRouterTransportUdpPeerState_MAX_MTU;
}

+ (jint)INIT_RTT {
  return NetI2pRouterTransportUdpPeerState_INIT_RTT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                                    withByteArray:(IOSByteArray *)remoteIP
                                          withInt:(jint)remotePort
                               withNetI2pDataHash:(NetI2pDataHash *)remotePeer
                                      withBoolean:(jboolean)isInbound {
  NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(self, ctx, transport, remoteIP, remotePort, remotePeer, isInbound);
  return self;
}

- (void)changePortWithInt:(jint)newPort {
  if (newPort != JreLoadVolatileInt(&_remotePort_)) {
    JreVolatileStrongAssign(&_remoteHostId_, create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_(_remoteIP_, newPort));
    JreAssignVolatileInt(&_remotePort_, newPort);
  }
}

- (NetI2pDataHash *)getRemotePeer {
  return _remotePeer_;
}

- (NetI2pDataSessionKey *)getCurrentMACKey {
  return _currentMACKey_;
}

- (NetI2pDataSessionKey *)getCurrentCipherKey {
  return _currentCipherKey_;
}

- (NetI2pDataSessionKey *)getNextMACKey {
  return _nextMACKey_;
}

- (NetI2pDataSessionKey *)getNextCipherKey {
  return _nextCipherKey_;
}

- (jlong)getKeyEstablishedTime {
  return _keyEstablishedTime_;
}

- (jlong)getClockSkew {
  return _clockSkew_;
}

- (jlong)getCurrentReceiveSecond {
  return _currentReceiveSecond_;
}

- (jlong)getLastSendTime {
  return _lastSendTime_;
}

- (jlong)getLastSendFullyTime {
  return _lastSendFullyTime_;
}

- (jlong)getLastReceiveTime {
  return _lastReceiveTime_;
}

- (jint)getConsecutiveFailedSends {
  return _consecutiveFailedSends_;
}

- (jboolean)getCurrentSecondECNReceived {
  return _currentSecondECNReceived_;
}

- (jint)getSendWindowBytes {
  @synchronized(_outboundMessages_) {
    return _sendWindowBytes_;
  }
}

- (jint)getSendWindowBytesRemaining {
  @synchronized(_outboundMessages_) {
    return _sendWindowBytesRemaining_;
  }
}

- (IOSByteArray *)getRemoteIP {
  return _remoteIP_;
}

- (JavaNetInetAddress *)getRemoteIPAddress {
  if (JreLoadVolatileId(&_remoteIPAddress_) == nil) {
    @try {
      JreVolatileStrongAssign(&_remoteIPAddress_, JavaNetInetAddress_getByAddressWithByteArray_(_remoteIP_));
    }
    @catch (JavaNetUnknownHostException *uhe) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:@"Invalid IP? " withJavaLangThrowable:uhe];
    }
  }
  return JreLoadVolatileId(&_remoteIPAddress_);
}

- (jint)getRemotePort {
  return JreLoadVolatileInt(&_remotePort_);
}

- (jlong)getWeRelayToThemAs {
  return _weRelayToThemAs_;
}

- (jlong)getTheyRelayToUsAs {
  return _theyRelayToUsAs_;
}

- (jint)getMTU {
  return _mtu_;
}

- (jint)getReceiveMTU {
  return _mtuReceive_;
}

- (void)setCurrentMACKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_currentMACKey_, key);
}

- (void)setCurrentCipherKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_currentCipherKey_, key);
}

- (void)setNextMACKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_nextMACKey_, key);
}

- (void)setNextCipherKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_nextCipherKey_, key);
}

- (void)setKeyEstablishedTimeWithLong:(jlong)when {
  _keyEstablishedTime_ = when;
}

- (void)adjustClockSkewWithLong:(jlong)skew {
  jlong actualSkew = skew + NetI2pRouterTransportUdpPeerState_CLOCK_SKEW_FUDGE - (_rtt_ / 2);
  if (_packetsReceived_ <= 1) {
    @synchronized(_clockSkewLock_) {
      _clockSkew_ = actualSkew;
    }
    return;
  }
  jdouble adj = 0.1 * actualSkew;
  @synchronized(_clockSkewLock_) {
    _clockSkew_ = JreFpToLong((0.9 * _clockSkew_ + adj));
  }
}

- (void)setCurrentReceiveSecondWithLong:(jlong)sec {
  _currentReceiveSecond_ = sec;
}

- (void)setLastSendTimeWithLong:(jlong)when {
  _lastSendTime_ = when;
}

- (void)setLastReceiveTimeWithLong:(jlong)when {
  _lastReceiveTime_ = when;
}

- (void)setLastPingTimeWithLong:(jlong)when {
  _lastPingTime_ = when;
}

- (jlong)getLastSendOrPingTime {
  return JavaLangMath_maxWithLong_withLong_(JavaLangMath_maxWithLong_withLong_(_lastSendTime_, JreLoadVolatileLong(&_lastACKSend_)), _lastPingTime_);
}

- (jint)getSendBps {
  return _sendBps_;
}

- (jint)getReceiveBps {
  @synchronized(self) {
    return _receiveBps_;
  }
}

- (jint)incrementConsecutiveFailedSends {
  @synchronized(_outboundMessages_) {
    _concurrentMessagesActive_--;
    if (_concurrentMessagesActive_ < 0) _concurrentMessagesActive_ = 0;
    _consecutiveFailedSends_++;
    return _consecutiveFailedSends_;
  }
}

- (jlong)getInactivityTime {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jlong lastActivity = JavaLangMath_maxWithLong_withLong_(_lastReceiveTime_, _lastSendFullyTime_);
  return now - lastActivity;
}

- (jboolean)allocateSendingBytesWithInt:(jint)size
                                withInt:(jint)messagePushCount {
  return NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withInt_(self, size, messagePushCount);
}

- (jboolean)allocateSendingBytesWithInt:(jint)size
                            withBoolean:(jboolean)isForACK
                                withInt:(jint)messagePushCount {
  return NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withBoolean_withInt_(self, size, isForACK, messagePushCount);
}

- (void)setWeRelayToThemAsWithLong:(jlong)tag {
  _weRelayToThemAs_ = tag;
}

- (void)setTheyRelayToUsAsWithLong:(jlong)tag {
  _theyRelayToUsAs_ = tag;
}

- (jint)getSlowStartThreshold {
  return JreLoadVolatileInt(&_slowStartThreshold_);
}

- (jint)getConcurrentSends {
  @synchronized(_outboundMessages_) {
    return _concurrentMessagesActive_;
  }
}

- (jint)getConcurrentSendWindow {
  @synchronized(_outboundMessages_) {
    return _concurrentMessagesAllowed_;
  }
}

- (jint)getConsecutiveSendRejections {
  @synchronized(_outboundMessages_) {
    return _consecutiveRejections_;
  }
}

- (jboolean)isInbound {
  return _isInbound_;
}

- (jboolean)isIPv6 {
  return ((IOSByteArray *) nil_chk(_remoteIP_))->size_ == 16;
}

- (jlong)getIntroducerTime {
  return _lastIntroducerTime_;
}

- (void)setIntroducerTime {
  _lastIntroducerTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
}

- (void)messageFullyReceivedWithJavaLangLong:(JavaLangLong *)messageId
                                     withInt:(jint)bytes {
  NetI2pRouterTransportUdpPeerState_messageFullyReceivedWithJavaLangLong_withInt_withBoolean_(self, messageId, bytes, false);
}

- (void)messageFullyReceivedWithJavaLangLong:(JavaLangLong *)messageId
                                     withInt:(jint)bytes
                                 withBoolean:(jboolean)isForACK {
  NetI2pRouterTransportUdpPeerState_messageFullyReceivedWithJavaLangLong_withInt_withBoolean_(self, messageId, bytes, isForACK);
}

- (void)messagePartiallyReceived {
  if (JreLoadVolatileLong(&_wantACKSendSince_) <= 0) JreAssignVolatileLong(&_wantACKSendSince_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (id<JavaUtilMap>)getInboundMessages {
  return _inboundMessages_;
}

- (jint)expireInboundMessages {
  jint rv = 0;
  @synchronized(_inboundMessages_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(_inboundMessages_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterTransportUdpInboundMessageState *state = [iter next];
      if ([((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(state)) isExpired] || JreLoadVolatileBoolean(&_dead_)) {
        [iter remove];
      }
      else {
        if ([state isComplete]) {
          [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@$@", @"inbound message is complete, but wasn't handled inline? ", state, @" with ", self)];
          [iter remove];
        }
        else {
          rv++;
        }
      }
    }
  }
  return rv;
}

- (jboolean)congestionOccurred {
  return NetI2pRouterTransportUdpPeerState_congestionOccurred(self);
}

- (id<JavaUtilList>)getCurrentFullACKs {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithJavaUtilCollection_(_currentACKs_);
  return rv;
}

- (id<JavaUtilList>)getCurrentResendACKs {
  jint sz = [((id<JavaUtilQueue>) nil_chk(_currentACKsResend_)) size];
  id<JavaUtilList> randomResends = create_JavaUtilArrayList_initWithInt_(sz);
  if (sz > 0) {
    jlong cutoff = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - NetI2pRouterTransportUdpPeerState_RESEND_ACK_TIMEOUT;
    jint i = 0;
    for (id<JavaUtilIterator> iter = [_currentACKsResend_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterTransportUdpPeerState_ResendACK *rack = [iter next];
      if (((NetI2pRouterTransportUdpPeerState_ResendACK *) nil_chk(rack))->time_ > cutoff && i++ < NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS) {
        [randomResends addWithId:rack->id__];
      }
      else {
        [iter remove];
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$J$I$", @"Expired ack ", rack->id__, @" sent ", (cutoff + NetI2pRouterTransportUdpPeerState_RESEND_ACK_TIMEOUT - rack->time_), @" ago, now ", i, @" resend acks")];
      }
    }
    if (i > 1) JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(randomResends, [_context_ random]);
  }
  return randomResends;
}

- (void)removeACKMessageWithJavaLangLong:(JavaLangLong *)messageId {
  jboolean removed = [((id<JavaUtilSet>) nil_chk(_currentACKs_)) removeWithId:messageId];
  if (removed) {
    [((id<JavaUtilQueue>) nil_chk(_currentACKsResend_)) offerWithId:create_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(messageId, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now])];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$I$I$", @"Sent ack ", messageId, @" now ", [_currentACKs_ size], @" current and ", [_currentACKsResend_ size], @" resend acks")];
  }
  JreAssignVolatileLong(&_lastACKSend_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (id<JavaUtilList>)retrieveACKBitfields {
  return [self retrieveACKBitfieldsWithBoolean:true];
}

- (id<JavaUtilList>)retrieveACKBitfieldsWithBoolean:(jboolean)alwaysIncludeRetransmissions {
  jint bytesRemaining = NetI2pRouterTransportUdpPeerState_countMaxACKData(self);
  jint resendSize = [((id<JavaUtilQueue>) nil_chk(_currentACKsResend_)) size];
  jint maxResendAcks;
  if (bytesRemaining < NetI2pRouterTransportUdpPeerState_MIN_MTU) maxResendAcks = NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_SMALL;
  else maxResendAcks = NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_LARGE;
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(maxResendAcks);
  id<JavaUtilList> currentACKsRemoved = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilSet>) nil_chk(_currentACKs_)) size]);
  id<JavaUtilIterator> iter = [_currentACKs_ iterator];
  while (bytesRemaining >= 4 && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    JavaLangLong *val = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    [iter remove];
    jlong id_ = [((JavaLangLong *) nil_chk(val)) longLongValue];
    [rv addWithId:create_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(id_)];
    [currentACKsRemoved addWithId:val];
    bytesRemaining -= 4;
  }
  if ([_currentACKs_ isEmpty]) JreAssignVolatileLong(&_wantACKSendSince_, -1);
  if (alwaysIncludeRetransmissions || ![rv isEmpty]) {
    id<JavaUtilList> randomResends = [self getCurrentResendACKs];
    jint oldIndex = JavaLangMath_minWithInt_withInt_(resendSize, maxResendAcks);
    iter = [((id<JavaUtilList>) nil_chk(randomResends)) iterator];
    while (bytesRemaining >= 4 && oldIndex-- > 0 && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      JavaLangLong *cur = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      jlong c = [((JavaLangLong *) nil_chk(cur)) longLongValue];
      NetI2pRouterTransportUdpPeerState_FullACKBitfield *bf = create_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(c);
      [rv addWithId:bf];
      bytesRemaining -= 4;
    }
    if (![currentACKsRemoved isEmpty]) {
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
      for (JavaLangLong * __strong val in currentACKsRemoved) {
        [_currentACKsResend_ offerWithId:create_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(val, now)];
      }
    }
  }
  jint partialIncluded = 0;
  if (bytesRemaining > 4) {
    id<JavaUtilList> partial = create_JavaUtilArrayList_init();
    [self fetchPartialACKsWithJavaUtilList:partial];
    for (jint i = 0; (bytesRemaining > 4) && (i < [partial size]); i++) {
      id<NetI2pRouterTransportUdpACKBitfield> bitfield = [partial getWithInt:i];
      jint bytes = ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bitfield)) fragmentCount] / 7) + 1;
      if (bytesRemaining > bytes + 4) {
        [rv addWithId:bitfield];
        bytesRemaining -= bytes + 4;
        partialIncluded++;
      }
      else {
      }
    }
  }
  if (![rv isEmpty]) JreAssignVolatileLong(&_lastACKSend_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
  if (partialIncluded > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.sendACKPartial" withLong:partialIncluded withLong:[rv size] - partialIncluded];
  return rv;
}

- (void)fetchPartialACKsWithJavaUtilList:(id<JavaUtilList>)rv {
  id<JavaUtilList> states = nil;
  jint curState = 0;
  @synchronized(_inboundMessages_) {
    jint numMessages = [((id<JavaUtilMap>) nil_chk(_inboundMessages_)) size];
    if (numMessages <= 0) return;
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([_inboundMessages_ values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterTransportUdpInboundMessageState *state = [iter next];
      if ([((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(state)) isExpired]) {
        [iter remove];
      }
      else {
        if (![state isComplete]) {
          if (states == nil) states = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(numMessages));
          [states addWithId:state];
        }
      }
    }
  }
  if (states != nil) {
    for (NetI2pRouterTransportUdpInboundMessageState * __strong ims in states) {
      id<NetI2pRouterTransportUdpACKBitfield> abf = [((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(ims)) createACKBitfield];
      if (![((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(abf)) receivedComplete]) [((id<JavaUtilList>) nil_chk(rv)) addWithId:abf];
    }
  }
}

- (void)locked_messageACKedWithInt:(jint)bytesACKed
                          withLong:(jlong)lifetime
                           withInt:(jint)numSends {
  NetI2pRouterTransportUdpPeerState_locked_messageACKedWithInt_withLong_withInt_(self, bytesACKed, lifetime, numSends);
}

- (void)messageACKedWithInt:(jint)bytesACKed
                   withLong:(jlong)lifetime
                    withInt:(jint)numSends {
  NetI2pRouterTransportUdpPeerState_messageACKedWithInt_withLong_withInt_(self, bytesACKed, lifetime, numSends);
}

- (void)recalculateTimeoutsWithLong:(jlong)lifetime {
  NetI2pRouterTransportUdpPeerState_recalculateTimeoutsWithLong_(self, lifetime);
}

- (void)adjustMTU {
  NetI2pRouterTransportUdpPeerState_adjustMTU(self);
}

- (void)setHisMTUWithInt:(jint)mtu {
  @synchronized(self) {
    if (mtu <= NetI2pRouterTransportUdpPeerState_MIN_MTU || mtu >= _largeMTU_ || (((IOSByteArray *) nil_chk(_remoteIP_))->size_ == 16 && mtu <= NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU)) return;
    _largeMTU_ = mtu;
    if (mtu < _mtu_) _mtu_ = mtu;
  }
}

- (void)messageRetransmittedWithInt:(jint)packets {
  @synchronized(self) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.congestionOccurred" withLong:_sendWindowBytes_];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.congestedRTO" withLong:_rto_ withLong:_rttDeviation_];
    _packetsRetransmitted_ += packets;
    NetI2pRouterTransportUdpPeerState_congestionOccurred(self);
    NetI2pRouterTransportUdpPeerState_adjustMTU(self);
  }
}

- (void)packetsTransmittedWithInt:(jint)packets {
  @synchronized(self) {
    _packetsTransmitted_ += packets;
  }
}

- (jint)getRTT {
  @synchronized(self) {
    return _rtt_;
  }
}

- (jint)getRTO {
  @synchronized(self) {
    return _rto_;
  }
}

- (jint)getRTTDeviation {
  @synchronized(self) {
    return _rttDeviation_;
  }
}

- (jint)getMessagesSent {
  @synchronized(_outboundMessages_) {
    return _messagesSent_;
  }
}

- (jint)getMessagesReceived {
  @synchronized(self) {
    return _messagesReceived_;
  }
}

- (jint)getPacketsTransmitted {
  @synchronized(self) {
    return _packetsTransmitted_;
  }
}

- (jint)getPacketsRetransmitted {
  @synchronized(self) {
    return _packetsRetransmitted_;
  }
}

- (jint)getPacketsReceived {
  @synchronized(self) {
    return _packetsReceived_;
  }
}

- (jint)getPacketsReceivedDuplicate {
  @synchronized(self) {
    return _packetsReceivedDuplicate_;
  }
}

- (void)packetReceivedWithInt:(jint)size {
  @synchronized(self) {
    _packetsReceived_++;
    jint minMTU;
    if (((IOSByteArray *) nil_chk(_remoteIP_))->size_ == 4) {
      size += NetI2pRouterTransportUdpPeerState_OVERHEAD_SIZE;
      minMTU = NetI2pRouterTransportUdpPeerState_MIN_MTU;
    }
    else {
      size += NetI2pRouterTransportUdpPeerState_IPV6_OVERHEAD_SIZE;
      minMTU = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
    }
    if (size <= minMTU) {
      _consecutiveSmall_++;
      if (_consecutiveSmall_ >= NetI2pRouterTransportUdpPeerState_MTU_RCV_DISPLAY_THRESHOLD) _mtuReceive_ = minMTU;
    }
    else {
      _consecutiveSmall_ = 0;
      if (size > _mtuReceive_) _mtuReceive_ = size;
    }
  }
}

- (void)ECNReceived {
  @synchronized(self) {
    NetI2pRouterTransportUdpPeerState_congestionOccurred(self);
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.congestionOccurred" withLong:_sendWindowBytes_];
  _currentSecondECNReceived_ = true;
  _lastReceiveTime_ = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
}

- (void)dataReceived {
  _lastReceiveTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
}

- (jlong)getLastACKSend {
  return JreLoadVolatileLong(&_lastACKSend_);
}

- (void)setLastACKSendWithLong:(jlong)when {
  JreAssignVolatileLong(&_lastACKSend_, when);
}

- (jlong)getWantedACKSendSince {
  return JreLoadVolatileLong(&_wantACKSendSince_);
}

- (jboolean)unsentACKThresholdReached {
  return [((id<JavaUtilSet>) nil_chk(_currentACKs_)) size] >= NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS / 2;
}

- (jint)countMaxACKData {
  return NetI2pRouterTransportUdpPeerState_countMaxACKData(self);
}

- (jint)minRTO {
  return NetI2pRouterTransportUdpPeerState_minRTO(self);
}

- (NetI2pRouterTransportUdpRemoteHostId *)getRemoteHostId {
  return JreLoadVolatileId(&_remoteHostId_);
}

- (void)addWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state {
  if (JreLoadVolatileBoolean(&_dead_)) {
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failedWithNetI2pRouterTransportUdpOutboundMessageState:state withBoolean:false];
    return;
  }
  if ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getPeer] != self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Not for me!" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failedWithNetI2pRouterTransportUdpOutboundMessageState:state withBoolean:false];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J", @"Adding to ", _remotePeer_, @": ", [state getMessageId])];
  jint rv = 0;
  jboolean fail = ![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) offerWithId:state];
  if (fail) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Dropping msg, OB queue full for ", [self description])];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failedWithNetI2pRouterTransportUdpOutboundMessageState:state withBoolean:false];
  }
}

- (void)dropOutbound {
  JreAssignVolatileBoolean(&_dead_, true);
  id<JavaUtilList> tempList;
  @synchronized(_outboundMessages_) {
    JreStrongAssign(&_retransmitter_, nil);
    tempList = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_outboundMessages_));
    [((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) clear];
  }
  [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) drainToWithJavaUtilCollection:tempList];
  for (NetI2pRouterTransportUdpOutboundMessageState * __strong oms in tempList) {
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failedWithNetI2pRouterTransportUdpOutboundMessageState:oms withBoolean:false];
  }
  JreAssignVolatileLong(&_wantACKSendSince_, -1);
}

- (jint)getOutboundMessageCount {
  if (JreLoadVolatileBoolean(&_dead_)) return 0;
  return [((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) size] + [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) size];
}

- (void)setMayDisconnect {
  _mayDisconnect_ = true;
}

- (jboolean)getMayDisconnect {
  return _mayDisconnect_;
}

- (jint)finishMessages {
  if ([((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) isEmpty]) return [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) size];
  if (JreLoadVolatileBoolean(&_dead_)) {
    [self dropOutbound];
    return 0;
  }
  jint rv = 0;
  id<JavaUtilList> succeeded = nil;
  id<JavaUtilList> failed = nil;
  @synchronized(_outboundMessages_) {
    for (id<JavaUtilIterator> iter = [_outboundMessages_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterTransportUdpOutboundMessageState *state = [iter next];
      if ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) isComplete]) {
        [iter remove];
        if (_retransmitter_ == state) JreStrongAssign(&_retransmitter_, nil);
        if (succeeded == nil) succeeded = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(4));
        [succeeded addWithId:state];
      }
      else if ([state isExpired]) {
        [iter remove];
        if (_retransmitter_ == state) JreStrongAssign(&_retransmitter_, nil);
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.sendFailed" withLong:[state getPushCount]];
        if (failed == nil) failed = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(4));
        [failed addWithId:state];
      }
      else if ([state getPushCount] > NetI2pRouterTransportUdpOutboundMessageFragments_MAX_VOLLEYS) {
        [iter remove];
        if (state == _retransmitter_) JreStrongAssign(&_retransmitter_, nil);
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.sendAggressiveFailed" withLong:[state getPushCount]];
        if (failed == nil) failed = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(4));
        [failed addWithId:state];
      }
    }
    rv = [_outboundMessages_ size];
  }
  for (jint i = 0; succeeded != nil && i < [succeeded size]; i++) {
    NetI2pRouterTransportUdpOutboundMessageState *state = [succeeded getWithInt:i];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) succeededWithNetI2pRouterTransportUdpOutboundMessageState:state];
    NetI2pRouterOutNetMessage *msg = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessage];
    if (msg != nil) [msg timestampWithNSString:@"sending complete"];
  }
  for (jint i = 0; failed != nil && i < [failed size]; i++) {
    NetI2pRouterTransportUdpOutboundMessageState *state = [failed getWithInt:i];
    NetI2pRouterOutNetMessage *msg = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessage];
    if (msg != nil) {
      [msg timestampWithNSString:@"expired in the active pool"];
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failedWithNetI2pRouterTransportUdpOutboundMessageState:state];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Unable to send a direct message: ", state)];
    }
  }
  return rv + [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) size];
}

- (id<JavaUtilList>)allocateSend {
  if (JreLoadVolatileBoolean(&_dead_)) return nil;
  id<JavaUtilList> rv = nil;
  @synchronized(_outboundMessages_) {
    for (NetI2pRouterTransportUdpOutboundMessageState * __strong state in nil_chk(_outboundMessages_)) {
      NetI2pRouterTransportUdpPeerState_ShouldSend *should = NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(self, state);
      if (should == JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES)) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J", @"Allocate sending (OLD) to ", _remotePeer_, @": ", [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessageId])];
        if (rv == nil) rv = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND));
        [rv addWithId:state];
        if ([rv size] >= NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND) return JreRetainedLocalValue(rv);
      }
      else if (should == JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO_BW)) {
        if (rv == nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$@$I$I$", @"Nothing to send (BW) to ", _remotePeer_, @", with ", [_outboundMessages_ size], @" / ", [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) size], @" remaining")];
        return JreRetainedLocalValue(rv);
      }
    }
    NetI2pRouterTransportUdpOutboundMessageState *state;
    while ((state = ((NetI2pRouterTransportUdpOutboundMessageState *) [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) peek])) != nil && JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES) == NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(self, state)) {
      NetI2pRouterTransportUdpOutboundMessageState *dequeuedState = ((NetI2pRouterTransportUdpOutboundMessageState *) [_outboundQueue_ poll]);
      if (dequeuedState != nil) {
        [_outboundMessages_ addWithId:dequeuedState];
        if (dequeuedState == state || JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES) == NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(self, state)) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J", @"Allocate sending (NEW) to ", _remotePeer_, @": ", [dequeuedState getMessageId])];
          if (rv == nil) rv = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND));
          [rv addWithId:state];
          if ([rv size] >= NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND) return JreRetainedLocalValue(rv);
        }
      }
    }
  }
  if (rv == nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$@$I$I$", @"Nothing to send to ", _remotePeer_, @", with ", [_outboundMessages_ size], @" / ", [_outboundQueue_ size], @" remaining")];
  return rv;
}

- (jint)getNextDelay {
  jint rv = JavaLangInteger_MAX_VALUE;
  if (JreLoadVolatileBoolean(&_dead_)) return rv;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  @synchronized(_outboundMessages_) {
    if (_retransmitter_ != nil) {
      rv = (jint) ([_retransmitter_ getNextSendTime] - now);
      return rv;
    }
    for (NetI2pRouterTransportUdpOutboundMessageState * __strong state in nil_chk(_outboundMessages_)) {
      jint delay = (jint) ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getNextSendTime] - now);
      if (delay <= 0) return delay;
      if (delay < rv) rv = delay;
    }
  }
  if (rv > 100 && ![((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) isEmpty]) rv = 100;
  return rv;
}

- (jboolean)isBacklogged {
  return JreLoadVolatileBoolean(&_dead_) || [((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) isBacklogged];
}

- (jint)fragmentSize {
  return _mtu_ - (((IOSByteArray *) nil_chk(_remoteIP_))->size_ == 4 ? NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD : NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD) - NetI2pRouterTransportUdpPeerState_MIN_ACK_SIZE;
}

- (NetI2pRouterTransportUdpPeerState_ShouldSend *)locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state {
  return NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(self, state);
}

- (jboolean)ackedWithLong:(jlong)messageId {
  if (JreLoadVolatileBoolean(&_dead_)) return false;
  NetI2pRouterTransportUdpOutboundMessageState *state = nil;
  @synchronized(_outboundMessages_) {
    for (id<JavaUtilIterator> iter = [((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      state = JreRetainedLocalValue([iter next]);
      if ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessageId] == messageId) {
        [iter remove];
        break;
      }
      else if ([state getPushCount] <= 0) {
        state = JreRetainedLocalValue(nil);
        break;
      }
      else {
        state = JreRetainedLocalValue(nil);
      }
    }
    if ((state != nil) && (state == _retransmitter_)) JreStrongAssign(&_retransmitter_, nil);
  }
  if (state != nil) {
    jint numSends = [state getMaxSends];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J$@$J$I$", @"Received ack of ", messageId, @" by ", _remotePeer_, @" after ", [state getLifetime], @" and ", numSends, @" sends")];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.sendConfirmTime" withLong:[state getLifetime]];
    if ([state getFragmentCount] > 1) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.sendConfirmFragments" withLong:[state getFragmentCount]];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.sendConfirmVolley" withLong:numSends];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) succeededWithNetI2pRouterTransportUdpOutboundMessageState:state];
    NetI2pRouterTransportUdpPeerState_messageACKedWithInt_withLong_withInt_(self, [state getMessageSize], [state getLifetime], numSends);
  }
  else {
  }
  return state != nil;
}

- (jboolean)ackedWithNetI2pRouterTransportUdpACKBitfield:(id<NetI2pRouterTransportUdpACKBitfield>)bitfield {
  if (JreLoadVolatileBoolean(&_dead_)) return false;
  jlong messageId = [((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bitfield)) getMessageId];
  if ([bitfield receivedComplete]) {
    return [self ackedWithLong:messageId];
  }
  NetI2pRouterTransportUdpOutboundMessageState *state = nil;
  jboolean isComplete = false;
  @synchronized(_outboundMessages_) {
    for (id<JavaUtilIterator> iter = [((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      state = JreRetainedLocalValue([iter next]);
      if ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessageId] == messageId) {
        jboolean complete = [state ackedWithNetI2pRouterTransportUdpACKBitfield:bitfield];
        if (complete) {
          isComplete = true;
          [iter remove];
          if (state == _retransmitter_) JreStrongAssign(&_retransmitter_, nil);
        }
        break;
      }
      else if ([state getPushCount] <= 0) {
        state = JreRetainedLocalValue(nil);
        break;
      }
      else {
        state = JreRetainedLocalValue(nil);
      }
    }
  }
  if (state != nil) {
    jint numSends = [state getMaxSends];
    jint numACKed = [bitfield ackCount];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.partialACKReceived" withLong:numACKed];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J$@$J$I$@$Z$@", @"Received partial ack of ", [state getMessageId], @" by ", _remotePeer_, @" after ", [state getLifetime], @" and ", numSends, @" sends: ", bitfield, @": completely removed? ", isComplete, @": ", state)];
    if (isComplete) {
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.sendConfirmTime" withLong:[state getLifetime]];
      if ([state getFragmentCount] > 1) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.sendConfirmFragments" withLong:[state getFragmentCount]];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.sendConfirmVolley" withLong:numSends];
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) succeededWithNetI2pRouterTransportUdpOutboundMessageState:state];
      NetI2pRouterTransportUdpPeerState_messageACKedWithInt_withLong_withInt_(self, [state getMessageSize], [state getLifetime], numSends);
    }
    else {
    }
    return isComplete;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Received an ACK for a message not pending: ", bitfield)];
    return false;
  }
}

- (void)loadFromWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)oldPeer {
  _rto_ = ((NetI2pRouterTransportUdpPeerState *) nil_chk(oldPeer))->_rto_;
  _rtt_ = oldPeer->_rtt_;
  _rttDeviation_ = oldPeer->_rttDeviation_;
  JreAssignVolatileInt(&_slowStartThreshold_, JreLoadVolatileInt(&oldPeer->_slowStartThreshold_));
  _sendWindowBytes_ = oldPeer->_sendWindowBytes_;
  JreAssignVolatileBoolean(&oldPeer->_dead_, true);
  id<JavaUtilList> tmp = create_JavaUtilArrayList_init();
  for (JavaLangLong * __strong l in nil_chk(oldPeer->_currentACKs_)) {
    [tmp addWithId:l];
  }
  [oldPeer->_currentACKs_ clear];
  if (!JreLoadVolatileBoolean(&_dead_)) {
    [_currentACKs_ addAllWithJavaUtilCollection:tmp];
  }
  id<JavaUtilList> tmp3 = create_JavaUtilArrayList_init();
  [tmp3 addAllWithJavaUtilCollection:oldPeer->_currentACKsResend_];
  [((id<JavaUtilQueue>) nil_chk(oldPeer->_currentACKsResend_)) clear];
  if (!JreLoadVolatileBoolean(&_dead_)) {
    [_currentACKsResend_ addAllWithJavaUtilCollection:tmp3];
  }
  id<JavaUtilMap> msgs = create_JavaUtilHashMap_init();
  @synchronized(oldPeer->_inboundMessages_) {
    [msgs putAllWithJavaUtilMap:oldPeer->_inboundMessages_];
    [((id<JavaUtilMap>) nil_chk(oldPeer->_inboundMessages_)) clear];
  }
  if (!JreLoadVolatileBoolean(&_dead_)) {
    @synchronized(_inboundMessages_) {
      [_inboundMessages_ putAllWithJavaUtilMap:msgs];
    }
  }
  [msgs clear];
  id<JavaUtilList> tmp2 = create_JavaUtilArrayList_init();
  NetI2pRouterTransportUdpOutboundMessageState *retransmitter = nil;
  @synchronized(oldPeer->_outboundMessages_) {
    [tmp2 addAllWithJavaUtilCollection:oldPeer->_outboundMessages_];
    [((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(oldPeer->_outboundMessages_)) clear];
    retransmitter = JreRetainedLocalValue(oldPeer->_retransmitter_);
    JreStrongAssign(&oldPeer->_retransmitter_, nil);
  }
  if (!JreLoadVolatileBoolean(&_dead_)) {
    @synchronized(_outboundMessages_) {
      [_outboundMessages_ addAllWithJavaUtilCollection:tmp2];
      JreStrongAssign(&_retransmitter_, retransmitter);
    }
  }
}

- (NetI2pRouterTransportUdpUDPTransport *)getTransport {
  return _transport_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:[((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(JreLoadVolatileId(&_remoteHostId_))) description]];
  if (_remotePeer_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" "])) appendWithNSString:[((NSString *) nil_chk([_remotePeer_ toBase64])) java_substring:0 endIndex:6]];
  [buf appendWithNSString:_isInbound_ ? @" IB " : @" OB "];
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" recvAge: "])) appendWithLong:now - _lastReceiveTime_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" sendAge: "])) appendWithLong:now - _lastSendFullyTime_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" sendAttemptAge: "])) appendWithLong:now - _lastSendTime_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" sendACKAge: "])) appendWithLong:now - JreLoadVolatileLong(&_lastACKSend_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithLong:now - _keyEstablishedTime_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" cwin: "])) appendWithInt:_sendWindowBytes_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" acwin: "])) appendWithInt:_sendWindowBytesRemaining_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" consecFail: "])) appendWithInt:_consecutiveFailedSends_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" msgs rcvd: "])) appendWithInt:_messagesReceived_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" msgs sent: "])) appendWithInt:_messagesSent_];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" pkts rcvd OK/Dup: "])) appendWithInt:_packetsReceived_])) appendWithChar:'/'])) appendWithInt:_packetsReceivedDuplicate_];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" pkts sent OK/Dup: "])) appendWithInt:_packetsTransmitted_])) appendWithChar:'/'])) appendWithInt:_packetsRetransmitted_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" IBM: "])) appendWithInt:[((id<JavaUtilMap>) nil_chk(_inboundMessages_)) size]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" OBQ: "])) appendWithInt:[((NetI2pRouterUtilPriBlockingQueue *) nil_chk(_outboundQueue_)) size]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" OBL: "])) appendWithInt:[((NetI2pRouterUtilCachedIteratorCollection *) nil_chk(_outboundMessages_)) size]];
  return [buf description];
}

- (void)__javaClone:(NetI2pRouterTransportUdpPeerState *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_remoteIPAddress_, &original->_remoteIPAddress_);
  JreCloneVolatileStrong(&_remoteHostId_, &original->_remoteHostId_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_remotePeer_);
  RELEASE_(_currentMACKey_);
  RELEASE_(_currentCipherKey_);
  RELEASE_(_nextMACKey_);
  RELEASE_(_nextCipherKey_);
  RELEASE_(_clockSkewLock_);
  RELEASE_(_currentACKs_);
  RELEASE_(_currentACKsResend_);
  RELEASE_(_remoteIP_);
  JreReleaseVolatile(&_remoteIPAddress_);
  JreReleaseVolatile(&_remoteHostId_);
  RELEASE_(_inboundMessages_);
  RELEASE_(_outboundMessages_);
  RELEASE_(_outboundQueue_);
  RELEASE_(_retransmitter_);
  RELEASE_(_transport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, 8, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, 10, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, 13, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 12, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 24, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 31, 32, -1 },
    { NULL, "LJavaUtilList;", 0x1, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x0, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 43, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 45, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 46, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 12, -1, -1, 48, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpRemoteHostId;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 51, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState_ShouldSend;", 0x2, 52, 50, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 53, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPTransport;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 57, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withByteArray:withInt:withNetI2pDataHash:withBoolean:);
  methods[1].selector = @selector(changePortWithInt:);
  methods[2].selector = @selector(getRemotePeer);
  methods[3].selector = @selector(getCurrentMACKey);
  methods[4].selector = @selector(getCurrentCipherKey);
  methods[5].selector = @selector(getNextMACKey);
  methods[6].selector = @selector(getNextCipherKey);
  methods[7].selector = @selector(getKeyEstablishedTime);
  methods[8].selector = @selector(getClockSkew);
  methods[9].selector = @selector(getCurrentReceiveSecond);
  methods[10].selector = @selector(getLastSendTime);
  methods[11].selector = @selector(getLastSendFullyTime);
  methods[12].selector = @selector(getLastReceiveTime);
  methods[13].selector = @selector(getConsecutiveFailedSends);
  methods[14].selector = @selector(getCurrentSecondECNReceived);
  methods[15].selector = @selector(getSendWindowBytes);
  methods[16].selector = @selector(getSendWindowBytesRemaining);
  methods[17].selector = @selector(getRemoteIP);
  methods[18].selector = @selector(getRemoteIPAddress);
  methods[19].selector = @selector(getRemotePort);
  methods[20].selector = @selector(getWeRelayToThemAs);
  methods[21].selector = @selector(getTheyRelayToUsAs);
  methods[22].selector = @selector(getMTU);
  methods[23].selector = @selector(getReceiveMTU);
  methods[24].selector = @selector(setCurrentMACKeyWithNetI2pDataSessionKey:);
  methods[25].selector = @selector(setCurrentCipherKeyWithNetI2pDataSessionKey:);
  methods[26].selector = @selector(setNextMACKeyWithNetI2pDataSessionKey:);
  methods[27].selector = @selector(setNextCipherKeyWithNetI2pDataSessionKey:);
  methods[28].selector = @selector(setKeyEstablishedTimeWithLong:);
  methods[29].selector = @selector(adjustClockSkewWithLong:);
  methods[30].selector = @selector(setCurrentReceiveSecondWithLong:);
  methods[31].selector = @selector(setLastSendTimeWithLong:);
  methods[32].selector = @selector(setLastReceiveTimeWithLong:);
  methods[33].selector = @selector(setLastPingTimeWithLong:);
  methods[34].selector = @selector(getLastSendOrPingTime);
  methods[35].selector = @selector(getSendBps);
  methods[36].selector = @selector(getReceiveBps);
  methods[37].selector = @selector(incrementConsecutiveFailedSends);
  methods[38].selector = @selector(getInactivityTime);
  methods[39].selector = @selector(allocateSendingBytesWithInt:withInt:);
  methods[40].selector = @selector(allocateSendingBytesWithInt:withBoolean:withInt:);
  methods[41].selector = @selector(setWeRelayToThemAsWithLong:);
  methods[42].selector = @selector(setTheyRelayToUsAsWithLong:);
  methods[43].selector = @selector(getSlowStartThreshold);
  methods[44].selector = @selector(getConcurrentSends);
  methods[45].selector = @selector(getConcurrentSendWindow);
  methods[46].selector = @selector(getConsecutiveSendRejections);
  methods[47].selector = @selector(isInbound);
  methods[48].selector = @selector(isIPv6);
  methods[49].selector = @selector(getIntroducerTime);
  methods[50].selector = @selector(setIntroducerTime);
  methods[51].selector = @selector(messageFullyReceivedWithJavaLangLong:withInt:);
  methods[52].selector = @selector(messageFullyReceivedWithJavaLangLong:withInt:withBoolean:);
  methods[53].selector = @selector(messagePartiallyReceived);
  methods[54].selector = @selector(getInboundMessages);
  methods[55].selector = @selector(expireInboundMessages);
  methods[56].selector = @selector(congestionOccurred);
  methods[57].selector = @selector(getCurrentFullACKs);
  methods[58].selector = @selector(getCurrentResendACKs);
  methods[59].selector = @selector(removeACKMessageWithJavaLangLong:);
  methods[60].selector = @selector(retrieveACKBitfields);
  methods[61].selector = @selector(retrieveACKBitfieldsWithBoolean:);
  methods[62].selector = @selector(fetchPartialACKsWithJavaUtilList:);
  methods[63].selector = @selector(locked_messageACKedWithInt:withLong:withInt:);
  methods[64].selector = @selector(messageACKedWithInt:withLong:withInt:);
  methods[65].selector = @selector(recalculateTimeoutsWithLong:);
  methods[66].selector = @selector(adjustMTU);
  methods[67].selector = @selector(setHisMTUWithInt:);
  methods[68].selector = @selector(messageRetransmittedWithInt:);
  methods[69].selector = @selector(packetsTransmittedWithInt:);
  methods[70].selector = @selector(getRTT);
  methods[71].selector = @selector(getRTO);
  methods[72].selector = @selector(getRTTDeviation);
  methods[73].selector = @selector(getMessagesSent);
  methods[74].selector = @selector(getMessagesReceived);
  methods[75].selector = @selector(getPacketsTransmitted);
  methods[76].selector = @selector(getPacketsRetransmitted);
  methods[77].selector = @selector(getPacketsReceived);
  methods[78].selector = @selector(getPacketsReceivedDuplicate);
  methods[79].selector = @selector(packetReceivedWithInt:);
  methods[80].selector = @selector(ECNReceived);
  methods[81].selector = @selector(dataReceived);
  methods[82].selector = @selector(getLastACKSend);
  methods[83].selector = @selector(setLastACKSendWithLong:);
  methods[84].selector = @selector(getWantedACKSendSince);
  methods[85].selector = @selector(unsentACKThresholdReached);
  methods[86].selector = @selector(countMaxACKData);
  methods[87].selector = @selector(minRTO);
  methods[88].selector = @selector(getRemoteHostId);
  methods[89].selector = @selector(addWithNetI2pRouterTransportUdpOutboundMessageState:);
  methods[90].selector = @selector(dropOutbound);
  methods[91].selector = @selector(getOutboundMessageCount);
  methods[92].selector = @selector(setMayDisconnect);
  methods[93].selector = @selector(getMayDisconnect);
  methods[94].selector = @selector(finishMessages);
  methods[95].selector = @selector(allocateSend);
  methods[96].selector = @selector(getNextDelay);
  methods[97].selector = @selector(isBacklogged);
  methods[98].selector = @selector(fragmentSize);
  methods[99].selector = @selector(locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState:);
  methods[100].selector = @selector(ackedWithLong:);
  methods[101].selector = @selector(ackedWithNetI2pRouterTransportUdpACKBitfield:);
  methods[102].selector = @selector(loadFromWithNetI2pRouterTransportUdpPeerState:);
  methods[103].selector = @selector(getTransport);
  methods[104].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remotePeer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentMACKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentCipherKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextMACKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextCipherKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyEstablishedTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_clockSkew_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_clockSkewLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentReceiveSecond_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSendTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSendFullyTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastPingTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastReceiveTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consecutiveFailedSends_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentACKs_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 58, -1 },
    { "_currentACKsResend_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 59, -1 },
    { "_lastACKSend_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_wantACKSendSince_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_currentSecondECNReceived_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendWindowBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendWindowBytesRemaining_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSendRefill_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendBps_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveBps_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivePeriodBegin_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastCongestionOccurred_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_slowStartThreshold_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_remoteIP_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remoteIPAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_remotePort_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_remoteHostId_", "LNetI2pRouterTransportUdpRemoteHostId;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_weRelayToThemAs_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_theyRelayToUsAs_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mtu_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mtuReceive_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_largeMTU_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consecutiveSmall_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mtuIncreases_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mtuDecreases_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rtt_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rttDeviation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RETRANSMISSION_PERIOD_WIDTH", "J", .constantValue.asLong = NetI2pRouterTransportUdpPeerState_RETRANSMISSION_PERIOD_WIDTH, 0x18, -1, -1, -1, -1 },
    { "_messagesReceived_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messagesSent_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_packetsTransmitted_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_packetsRetransmitted_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_packetsReceivedDuplicate_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_packetsReceived_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mayDisconnect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inboundMessages_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 60, -1 },
    { "_outboundMessages_", "LNetI2pRouterUtilCachedIteratorCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 61, -1 },
    { "_outboundQueue_", "LNetI2pRouterUtilPriBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 62, -1 },
    { "_retransmitter_", "LNetI2pRouterTransportUdpOutboundMessageState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dead_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "MIN_CONCURRENT_MSGS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_CONCURRENT_MSGS, 0x1a, -1, -1, -1, -1 },
    { "_concurrentMessagesAllowed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_concurrentMessagesActive_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consecutiveRejections_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isInbound_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastIntroducerTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_SEND_WINDOW_BYTES", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_DEFAULT_SEND_WINDOW_BYTES, 0x1a, -1, -1, -1, -1 },
    { "MINIMUM_WINDOW_BYTES", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MINIMUM_WINDOW_BYTES, 0x1a, -1, -1, -1, -1 },
    { "MAX_SEND_WINDOW_BYTES", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_SEND_WINDOW_BYTES, 0x1a, -1, -1, -1, -1 },
    { "MAX_ALLOCATE_SEND", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_ALLOCATE_SEND, 0x1a, -1, -1, -1, -1 },
    { "MAX_SEND_MSGS_PENDING", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_SEND_MSGS_PENDING, 0x1a, -1, -1, -1, -1 },
    { "MIN_MTU", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_MTU, 0x19, -1, -1, -1, -1 },
    { "MIN_IPV6_MTU", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU, 0x19, -1, -1, -1, -1 },
    { "MAX_IPV6_MTU", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MTU", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_DEFAULT_MTU, 0x1a, -1, -1, -1, -1 },
    { "LARGE_MTU", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_LARGE_MTU, 0x19, -1, -1, -1, -1 },
    { "MAX_MTU", "I", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "MIN_RTO", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_RTO, 0x1a, -1, -1, -1, -1 },
    { "INIT_RTO", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_INIT_RTO, 0x1a, -1, -1, -1, -1 },
    { "INIT_RTT", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_INIT_RTT, 0x19, -1, -1, -1, -1 },
    { "MAX_RTO", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_RTO, 0x1a, -1, -1, -1, -1 },
    { "CLOCK_SKEW_FUDGE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_CLOCK_SKEW_FUDGE, 0x1a, -1, -1, -1, -1 },
    { "MAX_RESEND_ACKS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS, 0x1a, -1, -1, -1, -1 },
    { "MAX_RESEND_ACKS_LARGE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_LARGE, 0x1a, -1, -1, -1, -1 },
    { "MAX_RESEND_ACKS_SMALL", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MAX_RESEND_ACKS_SMALL, 0x1a, -1, -1, -1, -1 },
    { "RESEND_ACK_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterTransportUdpPeerState_RESEND_ACK_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "IGNORE_CWIN", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpPeerState_IGNORE_CWIN, 0x1a, -1, -1, -1, -1 },
    { "ALWAYS_ALLOW_FIRST_PUSH", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpPeerState_ALWAYS_ALLOW_FIRST_PUSH, 0x1a, -1, -1, -1, -1 },
    { "RTT_DAMPENING", "F", .constantValue.asFloat = NetI2pRouterTransportUdpPeerState_RTT_DAMPENING, 0x1a, -1, -1, -1, -1 },
    { "MTU_RCV_DISPLAY_THRESHOLD", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MTU_RCV_DISPLAY_THRESHOLD, 0x1a, -1, -1, -1, -1 },
    { "OVERHEAD_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_OVERHEAD_SIZE, 0x1a, -1, -1, -1, -1 },
    { "IPV6_OVERHEAD_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_IPV6_OVERHEAD_SIZE, 0x1a, -1, -1, -1, -1 },
    { "THROTTLE_RESENDS", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpPeerState_THROTTLE_RESENDS, 0x1a, -1, -1, -1, -1 },
    { "THROTTLE_INITIAL_SEND", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpPeerState_THROTTLE_INITIAL_SEND, 0x1a, -1, -1, -1, -1 },
    { "MIN_EXPLICIT_ACKS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_EXPLICIT_ACKS, 0x1a, -1, -1, -1, -1 },
    { "MIN_ACK_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerState_MIN_ACK_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;[BILNetI2pDataHash;Z", "changePort", "I", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$0, "setCurrentMACKey", "LNetI2pDataSessionKey;", "setCurrentCipherKey", "setNextMACKey", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$1, "setNextCipherKey", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$2, "setKeyEstablishedTime", "J", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$3, "adjustClockSkew", "setCurrentReceiveSecond", "setLastSendTime", "setLastReceiveTime", "setLastPingTime", "allocateSendingBytes", "II", "IZI", "setWeRelayToThemAs", "setTheyRelayToUsAs", "messageFullyReceived", "LJavaLangLong;I", "LJavaLangLong;IZ", "()Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/router/transport/udp/InboundMessageState;>;", "()Ljava/util/List<Ljava/lang/Long;>;", "removeACKMessage", "LJavaLangLong;", "()Ljava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$4, "retrieveACKBitfields", "Z", "(Z)Ljava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;", "fetchPartialACKs", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;)V", "locked_messageACKed", "IJI", "messageACKed", "recalculateTimeouts", "setHisMTU", "messageRetransmitted", "packetsTransmitted", "packetReceived", "setLastACKSend", (void *)&NetI2pRouterTransportUdpPeerState__Annotations$5, "add", "LNetI2pRouterTransportUdpOutboundMessageState;", "()Ljava/util/List<Lnet/i2p/router/transport/udp/OutboundMessageState;>;", "locked_shouldSend", "acked", "LNetI2pRouterTransportUdpACKBitfield;", "loadFrom", "LNetI2pRouterTransportUdpPeerState;", "toString", "Ljava/util/Set<Ljava/lang/Long;>;", "Ljava/util/Queue<Lnet/i2p/router/transport/udp/PeerState$ResendACK;>;", "Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/router/transport/udp/InboundMessageState;>;", "Lnet/i2p/router/util/CachedIteratorCollection<Lnet/i2p/router/transport/udp/OutboundMessageState;>;", "Lnet/i2p/router/util/PriBlockingQueue<Lnet/i2p/router/transport/udp/OutboundMessageState;>;", &NetI2pRouterTransportUdpPeerState_MAX_MTU, "LNetI2pRouterTransportUdpPeerState_FullACKBitfield;LNetI2pRouterTransportUdpPeerState_ShouldSend;LNetI2pRouterTransportUdpPeerState_ResendACK;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerState = { "PeerState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 105, 96, -1, 64, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpPeerState class]) {
    NetI2pRouterTransportUdpPeerState_MAX_MTU = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpPeerState_LARGE_MTU, NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU);
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpPeerState)
  }
}

@end

void NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterTransportUdpPeerState *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_clockSkewLock_, new_NSObject_init());
  self->_concurrentMessagesAllowed_ = NetI2pRouterTransportUdpPeerState_MIN_CONCURRENT_MSGS;
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPeerState_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  jlong now = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  self->_keyEstablishedTime_ = now;
  self->_currentReceiveSecond_ = now - (now % 1000);
  self->_lastSendTime_ = now;
  self->_lastReceiveTime_ = now;
  JreStrongAssignAndConsume(&self->_currentACKs_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_currentACKsResend_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  self->_sendWindowBytes_ = NetI2pRouterTransportUdpPeerState_DEFAULT_SEND_WINDOW_BYTES;
  self->_sendWindowBytesRemaining_ = NetI2pRouterTransportUdpPeerState_DEFAULT_SEND_WINDOW_BYTES;
  JreAssignVolatileInt(&self->_slowStartThreshold_, NetI2pRouterTransportUdpPeerState_MAX_SEND_WINDOW_BYTES / 2);
  self->_lastSendRefill_ = now;
  self->_receivePeriodBegin_ = now;
  JreAssignVolatileLong(&self->_lastCongestionOccurred_, -1);
  JreAssignVolatileInt(&self->_remotePort_, remotePort);
  if (((IOSByteArray *) nil_chk(remoteIP))->size_ == 4) {
    self->_mtu_ = NetI2pRouterTransportUdpPeerState_DEFAULT_MTU;
    self->_mtuReceive_ = NetI2pRouterTransportUdpPeerState_DEFAULT_MTU;
    self->_largeMTU_ = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(transport)) getMTUWithBoolean:false];
  }
  else {
    self->_mtu_ = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
    self->_mtuReceive_ = NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
    self->_largeMTU_ = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(transport)) getMTUWithBoolean:true];
  }
  JreAssignVolatileLong(&self->_lastACKSend_, -1);
  self->_rto_ = NetI2pRouterTransportUdpPeerState_INIT_RTO;
  self->_rtt_ = NetI2pRouterTransportUdpPeerState_INIT_RTT;
  self->_rttDeviation_ = self->_rtt_;
  JreStrongAssignAndConsume(&self->_inboundMessages_, new_JavaUtilHashMap_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_outboundMessages_, new_NetI2pRouterUtilCachedIteratorCollection_init());
  JreStrongAssignAndConsume(&self->_outboundQueue_, new_NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(ctx, @"UDP-PeerState", 32));
  JreStrongAssign(&self->_remoteIP_, remoteIP);
  JreStrongAssign(&self->_remotePeer_, remotePeer);
  self->_isInbound_ = isInbound;
  JreVolatileStrongAssign(&self->_remoteHostId_, create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_(remoteIP, remotePort));
}

NetI2pRouterTransportUdpPeerState *new_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_, ctx, transport, remoteIP, remotePort, remotePeer, isInbound)
}

NetI2pRouterTransportUdpPeerState *create_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_, ctx, transport, remoteIP, remotePort, remotePeer, isInbound)
}

jboolean NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withInt_(NetI2pRouterTransportUdpPeerState *self, jint size, jint messagePushCount) {
  return NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withBoolean_withInt_(self, size, false, messagePushCount);
}

jboolean NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withBoolean_withInt_(NetI2pRouterTransportUdpPeerState *self, jint size, jboolean isForACK, jint messagePushCount) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong duration = now - self->_lastSendRefill_;
  if (duration >= 1000) {
    self->_sendWindowBytesRemaining_ = self->_sendWindowBytes_;
    self->_sendBytes_ += size;
    self->_sendBps_ = JreFpToInt((0.9f * self->_sendBps_ + 0.1f * (self->_sendBytes_ * (1000.0f / duration))));
    self->_sendBytes_ = 0;
    self->_lastSendRefill_ = now;
  }
  if (size <= self->_sendWindowBytesRemaining_) {
    if ((messagePushCount == 0) && (self->_concurrentMessagesActive_ > self->_concurrentMessagesAllowed_)) {
      self->_consecutiveRejections_++;
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.rejectConcurrentActive" withLong:self->_concurrentMessagesActive_ withLong:self->_consecutiveRejections_];
      return false;
    }
    else if (messagePushCount == 0) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.allowConcurrentActive" withLong:self->_concurrentMessagesActive_ withLong:self->_concurrentMessagesAllowed_];
      self->_concurrentMessagesActive_++;
      if (self->_consecutiveRejections_ > 0) [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.rejectConcurrentSequence" withLong:self->_consecutiveRejections_ withLong:self->_concurrentMessagesActive_];
      self->_consecutiveRejections_ = 0;
    }
    self->_sendWindowBytesRemaining_ -= size;
    self->_sendBytes_ += size;
    self->_lastSendTime_ = now;
    return true;
  }
  else {
    return false;
  }
}

void NetI2pRouterTransportUdpPeerState_messageFullyReceivedWithJavaLangLong_withInt_withBoolean_(NetI2pRouterTransportUdpPeerState *self, JavaLangLong *messageId, jint bytes, jboolean isForACK) {
  @synchronized(self) {
    if (bytes > 0) {
      self->_receiveBytes_ += bytes;
      self->_messagesReceived_++;
    }
    else {
      self->_packetsReceivedDuplicate_++;
    }
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    jlong duration = now - self->_receivePeriodBegin_;
    if (duration >= 1000) {
      self->_receiveBps_ = JreFpToInt((0.9f * self->_receiveBps_ + 0.1f * (self->_receiveBytes_ * (1000.0f / duration))));
      self->_receiveBytes_ = 0;
      self->_receivePeriodBegin_ = now;
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.receiveBps" withLong:self->_receiveBps_];
    }
    if (JreLoadVolatileLong(&self->_wantACKSendSince_) <= 0) JreAssignVolatileLong(&self->_wantACKSendSince_, now);
    [((id<JavaUtilSet>) nil_chk(self->_currentACKs_)) addWithId:messageId];
  }
}

jboolean NetI2pRouterTransportUdpPeerState_congestionOccurred(NetI2pRouterTransportUdpPeerState *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if (JreLoadVolatileLong(&self->_lastCongestionOccurred_) + self->_rto_ > now) return false;
  JreAssignVolatileLong(&self->_lastCongestionOccurred_, now);
  jint congestionAt = self->_sendWindowBytes_;
  self->_sendWindowBytes_ = self->_sendWindowBytes_ / 2;
  if (self->_sendWindowBytes_ < NetI2pRouterTransportUdpPeerState_MINIMUM_WINDOW_BYTES) self->_sendWindowBytes_ = NetI2pRouterTransportUdpPeerState_MINIMUM_WINDOW_BYTES;
  JreAssignVolatileInt(&self->_slowStartThreshold_, congestionAt / 2);
  return true;
}

void NetI2pRouterTransportUdpPeerState_locked_messageACKedWithInt_withLong_withInt_(NetI2pRouterTransportUdpPeerState *self, jint bytesACKed, jlong lifetime, jint numSends) {
  self->_concurrentMessagesActive_--;
  if (self->_concurrentMessagesActive_ < 0) self->_concurrentMessagesActive_ = 0;
  self->_consecutiveFailedSends_ = 0;
  if (numSends < 2) {
    if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:self->_concurrentMessagesAllowed_] <= 0) self->_concurrentMessagesAllowed_++;
    if (self->_sendWindowBytes_ <= JreLoadVolatileInt(&self->_slowStartThreshold_)) {
      self->_sendWindowBytes_ += bytesACKed;
    }
    else {
      jfloat prob = ((jfloat) bytesACKed) / ((jfloat) (JreLShift32(self->_sendWindowBytes_, 1)));
      jfloat v = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextFloat];
      if (v < 0) v = 0 - v;
      if (v <= prob) self->_sendWindowBytes_ += bytesACKed;
    }
  }
  else {
    jint allow = self->_concurrentMessagesAllowed_ - 1;
    if (allow < NetI2pRouterTransportUdpPeerState_MIN_CONCURRENT_MSGS) allow = NetI2pRouterTransportUdpPeerState_MIN_CONCURRENT_MSGS;
    self->_concurrentMessagesAllowed_ = allow;
  }
  if (self->_sendWindowBytes_ > NetI2pRouterTransportUdpPeerState_MAX_SEND_WINDOW_BYTES) self->_sendWindowBytes_ = NetI2pRouterTransportUdpPeerState_MAX_SEND_WINDOW_BYTES;
  self->_lastReceiveTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  self->_lastSendFullyTime_ = self->_lastReceiveTime_;
  if (self->_sendWindowBytesRemaining_ + bytesACKed <= self->_sendWindowBytes_) self->_sendWindowBytesRemaining_ += bytesACKed;
  else self->_sendWindowBytesRemaining_ = self->_sendWindowBytes_;
  if (numSends < 2) {
    NetI2pRouterTransportUdpPeerState_recalculateTimeoutsWithLong_(self, lifetime);
    NetI2pRouterTransportUdpPeerState_adjustMTU(self);
  }
}

void NetI2pRouterTransportUdpPeerState_messageACKedWithInt_withLong_withInt_(NetI2pRouterTransportUdpPeerState *self, jint bytesACKed, jlong lifetime, jint numSends) {
  @synchronized(self) {
    NetI2pRouterTransportUdpPeerState_locked_messageACKedWithInt_withLong_withInt_(self, bytesACKed, lifetime, numSends);
  }
  if (numSends >= 2 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$I$J$I", @"acked after numSends=", numSends, @" w/ lifetime=", lifetime, @" and size=", bytesACKed)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendBps" withLong:self->_sendBps_];
}

void NetI2pRouterTransportUdpPeerState_recalculateTimeoutsWithLong_(NetI2pRouterTransportUdpPeerState *self, jlong lifetime) {
  self->_rttDeviation_ = self->_rttDeviation_ + JreFpToInt((0.25 * (JavaLangMath_absWithLong_(lifetime - self->_rtt_) - self->_rttDeviation_)));
  jfloat scale_ = NetI2pRouterTransportUdpPeerState_RTT_DAMPENING;
  self->_rtt_ = JreFpToInt((self->_rtt_ * (1.0f - scale_) + (scale_) * lifetime));
  self->_rto_ = JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPeerState_MAX_RTO, JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpPeerState_minRTO(self), self->_rtt_ + (JreLShift32(self->_rttDeviation_, 2))));
}

void NetI2pRouterTransportUdpPeerState_adjustMTU(NetI2pRouterTransportUdpPeerState *self) {
  jdouble retransPct = 0;
  if (self->_packetsTransmitted_ > 10) {
    retransPct = (jdouble) self->_packetsRetransmitted_ / (jdouble) self->_packetsTransmitted_;
    jboolean wantLarge = retransPct < .30;
    if (wantLarge && self->_mtu_ != self->_largeMTU_) {
      if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextLongWithLong:self->_mtuDecreases_] <= 0) {
        self->_mtu_ = self->_largeMTU_;
        self->_mtuIncreases_++;
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.mtuIncrease" withLong:self->_mtuIncreases_];
      }
    }
    else if (!wantLarge && self->_mtu_ == self->_largeMTU_) {
      self->_mtu_ = ((IOSByteArray *) nil_chk(self->_remoteIP_))->size_ == 4 ? NetI2pRouterTransportUdpPeerState_MIN_MTU : NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
      self->_mtuDecreases_++;
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.mtuDecrease" withLong:self->_mtuDecreases_];
    }
  }
  else {
    self->_mtu_ = ((IOSByteArray *) nil_chk(self->_remoteIP_))->size_ == 4 ? NetI2pRouterTransportUdpPeerState_DEFAULT_MTU : NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU;
  }
}

jint NetI2pRouterTransportUdpPeerState_countMaxACKData(NetI2pRouterTransportUdpPeerState *self) {
  return JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS * 4, self->_mtu_ - (((IOSByteArray *) nil_chk(self->_remoteIP_))->size_ == 4 ? NetI2pRouterTransportUdpPacketBuilder_IP_HEADER_SIZE : NetI2pRouterTransportUdpPacketBuilder_IPV6_HEADER_SIZE) - NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE - NetI2pRouterTransportUdpUDPPacket_IV_SIZE - NetI2pRouterTransportUdpUDPPacket_MAC_SIZE - 1 - 4 - 1 - 1 - 16);
}

jint NetI2pRouterTransportUdpPeerState_minRTO(NetI2pRouterTransportUdpPeerState *self) {
  return NetI2pRouterTransportUdpPeerState_MIN_RTO;
}

NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_locked_shouldSendWithNetI2pRouterTransportUdpOutboundMessageState_(NetI2pRouterTransportUdpPeerState *self, NetI2pRouterTransportUdpOutboundMessageState *state) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if ([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getNextSendTime] <= now) {
    NetI2pRouterTransportUdpOutboundMessageState *retrans = self->_retransmitter_;
    if ((retrans != nil) && (([((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(retrans)) isExpired] || [retrans isComplete]))) {
      JreStrongAssign(&self->_retransmitter_, nil);
      retrans = nil;
    }
    if ((retrans != nil) && (retrans != state)) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.blockedRetransmissions" withLong:self->_packetsRetransmitted_];
      jint max = [state getMaxSends];
      {
        return JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO);
      }
    }
    jint size = [state getUnackedSize];
    if (NetI2pRouterTransportUdpPeerState_allocateSendingBytesWithInt_withInt_(self, size, [state getPushCount])) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$ICI$J$@", @"Allocation of ", size, @" allowed with ", [self getSendWindowBytesRemaining], '/', [self getSendWindowBytes], @" remaining for message ", [state getMessageId], @": ", state)];
      if ([state getPushCount] > 0) JreStrongAssign(&self->_retransmitter_, state);
      if ([state push]) self->_messagesSent_++;
      jint rto = [self getRTO];
      [state setNextSendTimeWithLong:now + rto];
      return JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES);
    }
    else {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.sendRejected" withLong:[state getPushCount]];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$I$J$@", @"Allocation of ", size, @" rejected w/ wsize=", [self getSendWindowBytes], @" available=", [self getSendWindowBytesRemaining], @" for message ", [state getMessageId], @": ", state)];
      [state setNextSendTimeWithLong:now + (NetI2pRouterTransportUdpACKSender_ACK_FREQUENCY / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportUdpACKSender_ACK_FREQUENCY]];
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$J$", @"Retransmit after choke for next send time in ", ([state getNextSendTime] - now), @"ms")];
      return JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO_BW);
    }
  }
  return JreLoadEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO);
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerState)

@implementation NetI2pRouterTransportUdpPeerState_FullACKBitfield

- (instancetype)initWithLong:(jlong)id_ {
  NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(self, id_);
  return self;
}

- (jint)fragmentCount {
  return 1;
}

- (jint)ackCount {
  return 1;
}

- (jint)highestReceived {
  return 0;
}

- (jlong)getMessageId {
  return _msgId_;
}

- (jboolean)receivedWithInt:(jint)fragmentNum {
  return true;
}

- (jboolean)receivedComplete {
  return true;
}

- (NSUInteger)hash {
  return (jint) _msgId_;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[NetI2pRouterTransportUdpPeerState_FullACKBitfield class]])) return false;
  return _msgId_ == [((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(((id<NetI2pRouterTransportUdpACKBitfield>) cast_check(o, NetI2pRouterTransportUdpACKBitfield_class_())))) getMessageId];
}

- (NSString *)description {
  return JreStrcat("$J", @"Full ACK ", _msgId_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(fragmentCount);
  methods[2].selector = @selector(ackCount);
  methods[3].selector = @selector(highestReceived);
  methods[4].selector = @selector(getMessageId);
  methods[5].selector = @selector(receivedWithInt:);
  methods[6].selector = @selector(receivedComplete);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_msgId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "received", "I", "hashCode", "equals", "LNSObject;", "toString", "LNetI2pRouterTransportUdpPeerState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerState_FullACKBitfield = { "FullACKBitfield", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0xa, 10, 1, 7, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerState_FullACKBitfield;
}

@end

void NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(NetI2pRouterTransportUdpPeerState_FullACKBitfield *self, jlong id_) {
  NSObject_init(self);
  self->_msgId_ = id_;
}

NetI2pRouterTransportUdpPeerState_FullACKBitfield *new_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(jlong id_) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerState_FullACKBitfield, initWithLong_, id_)
}

NetI2pRouterTransportUdpPeerState_FullACKBitfield *create_NetI2pRouterTransportUdpPeerState_FullACKBitfield_initWithLong_(jlong id_) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerState_FullACKBitfield, initWithLong_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerState_FullACKBitfield)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpPeerState_ShouldSend)

NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_values_[3];

@implementation NetI2pRouterTransportUdpPeerState_ShouldSend

+ (NetI2pRouterTransportUdpPeerState_ShouldSend *)YES_ {
  return JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES);
}

+ (NetI2pRouterTransportUdpPeerState_ShouldSend *)NO_ {
  return JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO);
}

+ (NetI2pRouterTransportUdpPeerState_ShouldSend *)NO_BW {
  return JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO_BW);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportUdpPeerState_ShouldSend_values();
}

+ (NetI2pRouterTransportUdpPeerState_ShouldSend *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportUdpPeerState_ShouldSend_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportUdpPeerState_ShouldSend_Enum)toNSEnum {
  return (NetI2pRouterTransportUdpPeerState_ShouldSend_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportUdpPeerState_ShouldSend;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState_ShouldSend;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YES", "LNetI2pRouterTransportUdpPeerState_ShouldSend;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "NO", "LNetI2pRouterTransportUdpPeerState_ShouldSend;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NO_BW", "LNetI2pRouterTransportUdpPeerState_ShouldSend;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, YES), &JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO), &JreEnum(NetI2pRouterTransportUdpPeerState_ShouldSend, NO_BW), "LNetI2pRouterTransportUdpPeerState;", "Ljava/lang/Enum<Lnet/i2p/router/transport/udp/PeerState$ShouldSend;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerState_ShouldSend = { "ShouldSend", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_NetI2pRouterTransportUdpPeerState_ShouldSend;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpPeerState_ShouldSend class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(NetI2pRouterTransportUdpPeerState_ShouldSend_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportUdpPeerState_ShouldSend_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportUdpPeerState_ShouldSend_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpPeerState_ShouldSend)
  }
}

@end

void NetI2pRouterTransportUdpPeerState_ShouldSend_initWithNSString_withInt_(NetI2pRouterTransportUdpPeerState_ShouldSend *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportUdpPeerState_ShouldSend_values() {
  NetI2pRouterTransportUdpPeerState_ShouldSend_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportUdpPeerState_ShouldSend_values_ count:3 type:NetI2pRouterTransportUdpPeerState_ShouldSend_class_()];
}

NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportUdpPeerState_ShouldSend_initialize();
  for (int i = 0; i < 3; i++) {
    NetI2pRouterTransportUdpPeerState_ShouldSend *e = NetI2pRouterTransportUdpPeerState_ShouldSend_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportUdpPeerState_ShouldSend *NetI2pRouterTransportUdpPeerState_ShouldSend_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportUdpPeerState_ShouldSend_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return NetI2pRouterTransportUdpPeerState_ShouldSend_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerState_ShouldSend)

@implementation NetI2pRouterTransportUdpPeerState_ResendACK

- (instancetype)initWithJavaLangLong:(JavaLangLong *)id_
                            withLong:(jlong)time {
  NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(self, id_, time);
  return self;
}

- (void)dealloc {
  RELEASE_(id__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "LJavaLangLong;", .constantValue.asLong = 0, 0x11, 1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;J", "id", "LNetI2pRouterTransportUdpPeerState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerState_ResendACK = { "ResendACK", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0xa, 1, 2, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerState_ResendACK;
}

@end

void NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(NetI2pRouterTransportUdpPeerState_ResendACK *self, JavaLangLong *id_, jlong time) {
  NSObject_init(self);
  JreStrongAssign(&self->id__, id_);
  self->time_ = time;
}

NetI2pRouterTransportUdpPeerState_ResendACK *new_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(JavaLangLong *id_, jlong time) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerState_ResendACK, initWithJavaLangLong_withLong_, id_, time)
}

NetI2pRouterTransportUdpPeerState_ResendACK *create_NetI2pRouterTransportUdpPeerState_ResendACK_initWithJavaLangLong_withLong_(JavaLangLong *id_, jlong time) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerState_ResendACK, initWithJavaLangLong_withLong_, id_, time)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerState_ResendACK)
