//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPEndpoint.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/SocketException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/udp/UDPEndpoint.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPReceiver.h"
#include "net/i2p/router/transport/udp/UDPSender.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTransportUdpUDPEndpoint () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  jint _listenPort_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpUDPSender *_sender_;
  NetI2pRouterTransportUdpUDPReceiver *_receiver_;
  JavaNetDatagramSocket *_socket_;
  JavaNetInetAddress *_bindAddress_;
  jboolean _isIPv4_;
  jboolean _isIPv6_;
}

- (JavaNetDatagramSocket *)getSocket;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _sender_, NetI2pRouterTransportUdpUDPSender *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _receiver_, NetI2pRouterTransportUdpUDPReceiver *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _socket_, JavaNetDatagramSocket *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPEndpoint, _bindAddress_, JavaNetInetAddress *)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportUdpUDPEndpoint_get__counter(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterTransportUdpUDPEndpoint__counter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpUDPEndpoint, _counter, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint NetI2pRouterTransportUdpUDPEndpoint_get_MIN_RANDOM_PORT(void);
#define NetI2pRouterTransportUdpUDPEndpoint_MIN_RANDOM_PORT 9151
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPEndpoint, MIN_RANDOM_PORT, jint)

inline jint NetI2pRouterTransportUdpUDPEndpoint_get_MAX_RANDOM_PORT(void);
#define NetI2pRouterTransportUdpUDPEndpoint_MAX_RANDOM_PORT 30777
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPEndpoint, MAX_RANDOM_PORT, jint)

inline jint NetI2pRouterTransportUdpUDPEndpoint_get_MAX_PORT_RETRIES(void);
#define NetI2pRouterTransportUdpUDPEndpoint_MAX_PORT_RETRIES 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPEndpoint, MAX_PORT_RETRIES, jint)

__attribute__((unused)) static JavaNetDatagramSocket *NetI2pRouterTransportUdpUDPEndpoint_getSocket(NetI2pRouterTransportUdpUDPEndpoint *self);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpUDPEndpoint)

NSString *NetI2pRouterTransportUdpUDPEndpoint_PROP_MIN_PORT = @"i2np.udp.minPort";
NSString *NetI2pRouterTransportUdpUDPEndpoint_PROP_MAX_PORT = @"i2np.udp.maxPort";

@implementation NetI2pRouterTransportUdpUDPEndpoint

+ (NSString *)PROP_MIN_PORT {
  return NetI2pRouterTransportUdpUDPEndpoint_PROP_MIN_PORT;
}

+ (NSString *)PROP_MAX_PORT {
  return NetI2pRouterTransportUdpUDPEndpoint_PROP_MAX_PORT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                                          withInt:(jint)listenPort
                           withJavaNetInetAddress:(JavaNetInetAddress *)bindAddress {
  NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(self, ctx, transport, listenPort, bindAddress);
  return self;
}

- (void)startup {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Starting up the UDP endpoint"];
    [self shutdown];
    JreStrongAssign(&_socket_, NetI2pRouterTransportUdpUDPEndpoint_getSocket(self));
    if (_socket_ == nil) {
      [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"UDP Unable to open a port"];
      @throw create_JavaNetSocketException_initWithNSString_(JreStrcat("$@", @"SSU Unable to bind to a port on ", _bindAddress_));
    }
    jint count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterTransportUdpUDPEndpoint__counter)) incrementAndGet];
    JreStrongAssignAndConsume(&_sender_, new_NetI2pRouterTransportUdpUDPSender_initWithNetI2pRouterRouterContext_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(_context_, _socket_, JreStrcat("$I", @"UDPSender ", count), self));
    [_sender_ startup];
    if (_transport_ != nil) {
      JreStrongAssignAndConsume(&_receiver_, new_NetI2pRouterTransportUdpUDPReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withJavaNetDatagramSocket_withNSString_withNetI2pRouterTransportUdpSocketListener_(_context_, _transport_, _socket_, JreStrcat("$I", @"UDPReceiver ", count), self));
      [_receiver_ startup];
    }
  }
}

- (void)shutdown {
  @synchronized(self) {
    if (_sender_ != nil) {
      [_sender_ shutdown];
      [((NetI2pRouterTransportUdpUDPReceiver *) nil_chk(_receiver_)) shutdown];
    }
    if (_socket_ != nil) {
      [_socket_ close];
    }
  }
}

- (void)setListenPortWithInt:(jint)newPort {
  _listenPort_ = newPort;
}

- (JavaNetDatagramSocket *)getSocket {
  return NetI2pRouterTransportUdpUDPEndpoint_getSocket(self);
}

+ (jint)selectRandomPortWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTransportUdpUDPEndpoint_selectRandomPortWithNetI2pRouterRouterContext_(ctx);
}

- (jint)getListenPort {
  return _listenPort_;
}

- (NetI2pRouterTransportUdpUDPSender *)getSender {
  return _sender_;
}

- (void)sendWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  [((NetI2pRouterTransportUdpUDPSender *) nil_chk(_sender_)) addWithNetI2pRouterTransportUdpUDPPacket:packet];
}

- (NetI2pRouterTransportUdpUDPPacket *)receive {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(_context_, true);
  @try {
    [((JavaNetDatagramSocket *) nil_chk(_socket_)) receiveWithJavaNetDatagramPacket:[((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket]];
    return packet;
  }
  @catch (JavaIoIOException *ioe) {
    [packet release__];
    return nil;
  }
}

- (void)clearOutbound {
  if (_sender_ != nil) [_sender_ clear];
}

- (jboolean)isIPv4 {
  return _isIPv4_;
}

- (jboolean)isIPv6 {
  return _isIPv6_;
}

- (void)fail {
  [self shutdown];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) failWithNetI2pRouterTransportUdpUDPEndpoint:self];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:@"UDP Socket "];
  if (_bindAddress_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[_bindAddress_ description]])) appendWithChar:' '];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"port "])) appendWithInt:_listenPort_];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_sender_);
  RELEASE_(_receiver_);
  RELEASE_(_socket_);
  RELEASE_(_bindAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaNetDatagramSocket;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPSender;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withInt:withJavaNetInetAddress:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(setListenPortWithInt:);
  methods[4].selector = @selector(getSocket);
  methods[5].selector = @selector(selectRandomPortWithNetI2pRouterRouterContext:);
  methods[6].selector = @selector(getListenPort);
  methods[7].selector = @selector(getSender);
  methods[8].selector = @selector(sendWithNetI2pRouterTransportUdpUDPPacket:);
  methods[9].selector = @selector(receive);
  methods[10].selector = @selector(clearOutbound);
  methods[11].selector = @selector(isIPv4);
  methods[12].selector = @selector(isIPv6);
  methods[13].selector = @selector(fail);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_listenPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sender_", "LNetI2pRouterTransportUdpUDPSender;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiver_", "LNetI2pRouterTransportUdpUDPReceiver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetDatagramSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bindAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isIPv4_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isIPv6_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_counter", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "PROP_MIN_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "PROP_MAX_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "MIN_RANDOM_PORT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPEndpoint_MIN_RANDOM_PORT, 0x1a, -1, -1, -1, -1 },
    { "MAX_RANDOM_PORT", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPEndpoint_MAX_RANDOM_PORT, 0x1a, -1, -1, -1, -1 },
    { "MAX_PORT_RETRIES", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPEndpoint_MAX_PORT_RETRIES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;ILJavaNetInetAddress;", "LJavaNetSocketException;", "setListenPort", "I", "selectRandomPort", "LNetI2pRouterRouterContext;", "send", "LNetI2pRouterTransportUdpUDPPacket;", "toString", &NetI2pRouterTransportUdpUDPEndpoint__counter, &NetI2pRouterTransportUdpUDPEndpoint_PROP_MIN_PORT, &NetI2pRouterTransportUdpUDPEndpoint_PROP_MAX_PORT };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPEndpoint = { "UDPEndpoint", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 15, 16, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPEndpoint;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpUDPEndpoint class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportUdpUDPEndpoint__counter, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpUDPEndpoint)
  }
}

@end

void NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterTransportUdpUDPEndpoint *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpUDPEndpoint_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_bindAddress_, bindAddress);
  self->_listenPort_ = listenPort;
  self->_isIPv4_ = (bindAddress == nil || [bindAddress isKindOfClass:[JavaNetInet4Address class]]);
  self->_isIPv6_ = (bindAddress == nil || [bindAddress isKindOfClass:[JavaNetInet6Address class]]);
}

NetI2pRouterTransportUdpUDPEndpoint *new_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPEndpoint, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_, ctx, transport, listenPort, bindAddress)
}

NetI2pRouterTransportUdpUDPEndpoint *create_NetI2pRouterTransportUdpUDPEndpoint_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, jint listenPort, JavaNetInetAddress *bindAddress) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPEndpoint, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withInt_withJavaNetInetAddress_, ctx, transport, listenPort, bindAddress)
}

JavaNetDatagramSocket *NetI2pRouterTransportUdpUDPEndpoint_getSocket(NetI2pRouterTransportUdpUDPEndpoint *self) {
  JavaNetDatagramSocket *socket = nil;
  jint port = self->_listenPort_;
  if (port > 0 && !NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port)) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$I$", @"Specified UDP port ", port, @" is not valid, selecting a new port")];
    [self->_log_ errorWithNSString:@"Invalid ports are: 0-1023, 1900, 2049, 2827, 3659, 4045, 4444, 4445, 6000, 6665-6669, 6697, 7650-7668, 8998, 9001, 9030, 9050, 9100, 9150, 31000, 32000, 65536+"];
    port = -1;
  }
  for (jint i = 0; i < NetI2pRouterTransportUdpUDPEndpoint_MAX_PORT_RETRIES; i++) {
    if (port <= 0) {
      port = NetI2pRouterTransportUdpUDPEndpoint_selectRandomPortWithNetI2pRouterRouterContext_(self->_context_);
    }
    @try {
      if (self->_bindAddress_ == nil) socket = create_JavaNetDatagramSocket_initWithInt_(port);
      else socket = create_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(port, self->_bindAddress_);
      break;
    }
    @catch (JavaNetSocketException *se) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$", @"Binding to port ", port, @" failed") withJavaLangThrowable:se];
    }
    port = -1;
  }
  if (socket == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$@", @"SSU Unable to bind to a port on ", self->_bindAddress_)];
  }
  else if (port != self->_listenPort_) {
    if (self->_listenPort_ > 0) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$I$I", @"SSU Unable to bind to requested port ", self->_listenPort_, @", using random port ", port)];
    else [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$I", @"UDP selected random port ", port)];
  }
  self->_listenPort_ = port;
  return socket;
}

jint NetI2pRouterTransportUdpUDPEndpoint_selectRandomPortWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTransportUdpUDPEndpoint_initialize();
  jint minPort = JavaLangMath_minWithInt_withInt_(65535, JavaLangMath_maxWithInt_withInt_(1, [((NetI2pRouterRouterContext *) nil_chk(ctx)) getPropertyWithNSString:NetI2pRouterTransportUdpUDPEndpoint_PROP_MIN_PORT withInt:NetI2pRouterTransportUdpUDPEndpoint_MIN_RANDOM_PORT]));
  jint maxPort = JavaLangMath_minWithInt_withInt_(65535, JavaLangMath_maxWithInt_withInt_(minPort, [ctx getPropertyWithNSString:NetI2pRouterTransportUdpUDPEndpoint_PROP_MAX_PORT withInt:NetI2pRouterTransportUdpUDPEndpoint_MAX_RANDOM_PORT]));
  return minPort + [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextIntWithInt:1 + maxPort - minPort];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPEndpoint)
