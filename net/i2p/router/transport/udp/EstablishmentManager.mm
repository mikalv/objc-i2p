//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/EstablishmentManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/InboundEstablishState.h"
#include "net/i2p/router/transport/udp/MTU.h"
#include "net/i2p/router/transport/udp/OutboundEstablishState.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/router/util/DecayingHashSet.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pRouterTransportUdpEstablishmentManager () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpPacketBuilder *_builder_;
  jint _networkID_;
  JavaUtilConcurrentConcurrentHashMap *_inboundStates_;
  JavaUtilConcurrentConcurrentHashMap *_outboundStates_;
  JavaUtilConcurrentConcurrentHashMap *_queuedOutbound_;
  JavaUtilConcurrentConcurrentHashMap *_liveIntroductions_;
  JavaUtilConcurrentConcurrentHashMap *_outboundByClaimedAddress_;
  JavaUtilConcurrentConcurrentHashMap *_outboundByHash_;
  volatile_jboolean _alive_;
  id _activityLock_;
  jint _activity_;
  NetI2pRouterUtilDecayingBloomFilter *_replayFilter_;
  jint DEFAULT_MAX_CONCURRENT_ESTABLISH_;
}

- (jint)getMaxConcurrentEstablish;

- (void)establishWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)queueIfMaxExceeded;

- (jint)getMaxInboundEstablishers;

- (jint)locked_admitQueued;

- (void)notifyActivity;

- (void)handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state;

- (void)sendInboundCompleteWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

- (NetI2pRouterTransportUdpPeerState *)handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (NetI2pDataI2npDatabaseStoreMessage *)getOurInfo;

- (void)sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state;

- (void)sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (void)handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (jboolean)isValidWithByteArray:(IOSByteArray *)ip
                         withInt:(jint)port;

- (void)sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (void)sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state;

- (void)sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state;

- (jlong)handleInbound;

- (jlong)handleOutbound;

- (void)processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)outboundState;

- (void)processExpiredWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)inboundState;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _builder_, NetI2pRouterTransportUdpPacketBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _inboundStates_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _outboundStates_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _queuedOutbound_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _liveIntroductions_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _outboundByClaimedAddress_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _outboundByHash_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _activityLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpEstablishmentManager, _replayFilter_, NetI2pRouterUtilDecayingBloomFilter *)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH(void);
#define NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH, jint)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH(void);
#define NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH 150
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH, jint)

inline NSString *NetI2pRouterTransportUdpEstablishmentManager_get_PROP_MAX_CONCURRENT_ESTABLISH(void);
static NSString *NetI2pRouterTransportUdpEstablishmentManager_PROP_MAX_CONCURRENT_ESTABLISH = @"i2np.udp.maxConcurrentEstablish";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpEstablishmentManager, PROP_MAX_CONCURRENT_ESTABLISH, NSString *)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_MAX_QUEUED_OUTBOUND(void);
#define NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_OUTBOUND 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, MAX_QUEUED_OUTBOUND, jint)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_MAX_QUEUED_PER_PEER(void);
#define NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_PER_PEER 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, MAX_QUEUED_PER_PEER, jint)

inline jlong NetI2pRouterTransportUdpEstablishmentManager_get_MAX_NONCE(void);
#define NetI2pRouterTransportUdpEstablishmentManager_MAX_NONCE 4294967295LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, MAX_NONCE, jlong)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_MAX_OB_ESTABLISH_TIME(void);
#define NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME 35000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, MAX_OB_ESTABLISH_TIME, jint)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_MAX_IB_ESTABLISH_TIME(void);
#define NetI2pRouterTransportUdpEstablishmentManager_MAX_IB_ESTABLISH_TIME 20000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, MAX_IB_ESTABLISH_TIME, jint)

inline jint NetI2pRouterTransportUdpEstablishmentManager_get_DATA_MESSAGE_TIMEOUT(void);
#define NetI2pRouterTransportUdpEstablishmentManager_DATA_MESSAGE_TIMEOUT 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager, DATA_MESSAGE_TIMEOUT, jint)

inline NSString *NetI2pRouterTransportUdpEstablishmentManager_get_VERSION_ALLOW_EXTENDED_OPTIONS(void);
static NSString *NetI2pRouterTransportUdpEstablishmentManager_VERSION_ALLOW_EXTENDED_OPTIONS = @"0.9.24";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpEstablishmentManager, VERSION_ALLOW_EXTENDED_OPTIONS, NSString *)

inline NSString *NetI2pRouterTransportUdpEstablishmentManager_get_PROP_DISABLE_EXT_OPTS(void);
static NSString *NetI2pRouterTransportUdpEstablishmentManager_PROP_DISABLE_EXT_OPTS = @"i2np.udp.disableExtendedOptions";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpEstablishmentManager, PROP_DISABLE_EXT_OPTS, NSString *)

__attribute__((unused)) static jint NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_establishWithNetI2pRouterOutNetMessage_withBoolean_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterOutNetMessage *msg, jboolean queueIfMaxExceeded);

__attribute__((unused)) static jint NetI2pRouterTransportUdpEstablishmentManager_getMaxInboundEstablishers(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static jint NetI2pRouterTransportUdpEstablishmentManager_locked_admitQueued(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendInboundCompleteWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpPeerState *peer);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerState *NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static NetI2pDataI2npDatabaseStoreMessage *NetI2pRouterTransportUdpEstablishmentManager_getOurInfo(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpEstablishmentManager_isValidWithByteArray_withInt_(NetI2pRouterTransportUdpEstablishmentManager *self, IOSByteArray *ip, jint port);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state);

__attribute__((unused)) static jlong NetI2pRouterTransportUdpEstablishmentManager_handleInbound(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static jlong NetI2pRouterTransportUdpEstablishmentManager_handleOutbound(NetI2pRouterTransportUdpEstablishmentManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *outboundState);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *inboundState);

@interface NetI2pRouterTransportUdpEstablishmentManager_Establisher : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpEstablishmentManager *this$0_;
  jlong _lastFailsafe_;
  jlong _lastPrinted_;
}

- (instancetype)initWithNetI2pRouterTransportUdpEstablishmentManager:(NetI2pRouterTransportUdpEstablishmentManager *)outer$;

- (void)run;

- (void)doPass;

- (void)doFailsafe;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpEstablishmentManager_Establisher)

inline jlong NetI2pRouterTransportUdpEstablishmentManager_Establisher_get_FAILSAFE_INTERVAL(void);
#define NetI2pRouterTransportUdpEstablishmentManager_Establisher_FAILSAFE_INTERVAL 180000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager_Establisher, FAILSAFE_INTERVAL, jlong)

inline jlong NetI2pRouterTransportUdpEstablishmentManager_Establisher_get_PRINT_INTERVAL(void);
#define NetI2pRouterTransportUdpEstablishmentManager_Establisher_PRINT_INTERVAL 5000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpEstablishmentManager_Establisher, PRINT_INTERVAL, jlong)

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self, NetI2pRouterTransportUdpEstablishmentManager *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpEstablishmentManager_Establisher *new_NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpEstablishmentManager_Establisher *create_NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager *outer$);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_Establisher_doPass(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpEstablishmentManager_Establisher_doFailsafe(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpEstablishmentManager_Establisher)

@implementation NetI2pRouterTransportUdpEstablishmentManager

+ (jint)OB_MESSAGE_TIMEOUT {
  return NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT;
}

+ (jlong)MAX_TAG_VALUE {
  return NetI2pRouterTransportUdpEstablishmentManager_MAX_TAG_VALUE;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpEstablishmentManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self, ctx, transport);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, true);
    NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(create_NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(self), @"UDP Establisher", true);
    [t start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, false);
    NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
  }
}

- (NetI2pRouterTransportUdpInboundEstablishState *)getInboundStateWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from {
  NetI2pRouterTransportUdpInboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_inboundStates_)) getWithId:from];
  return state;
}

- (NetI2pRouterTransportUdpOutboundEstablishState *)getOutboundStateWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from {
  NetI2pRouterTransportUdpOutboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) getWithId:from];
  if (state == nil) {
    state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundByClaimedAddress_)) getWithId:from];
    if (state != nil && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@", @"Found by claimed address: ", state)];
  }
  return state;
}

- (jint)getMaxConcurrentEstablish {
  return NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(self);
}

- (void)establishWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pRouterTransportUdpEstablishmentManager_establishWithNetI2pRouterOutNetMessage_withBoolean_(self, msg, true);
}

- (void)establishWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)queueIfMaxExceeded {
  NetI2pRouterTransportUdpEstablishmentManager_establishWithNetI2pRouterOutNetMessage_withBoolean_(self, msg, queueIfMaxExceeded);
}

- (jint)getMaxInboundEstablishers {
  return NetI2pRouterTransportUdpEstablishmentManager_getMaxInboundEstablishers(self);
}

- (jboolean)shouldAllowInboundEstablishment {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_inboundStates_)) size] < NetI2pRouterTransportUdpEstablishmentManager_getMaxInboundEstablishers(self);
}

- (void)receiveSessionRequestWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                          withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  if (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getPort]) || ![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:[from getIP]]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Receive session request from invalid: ", from)];
    return;
  }
  jboolean isNew = false;
  NetI2pRouterTransportUdpInboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_inboundStates_)) getWithId:from];
  if (state == nil) {
    if (![self shouldAllowInboundEstablishment]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Dropping inbound establish, increase ", NetI2pRouterTransportUdpEstablishmentManager_PROP_MAX_CONCURRENT_ESTABLISH)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.establishDropped" withLong:1];
      return;
    }
    if ([((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) blocklist])) isBlocklistedWithByteArray:[from getIP]]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Receive session request from blocklisted IP: ", from)];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.establishBadIP" withLong:1];
      return;
    }
    if (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) allowConnection]) return;
    IOSByteArray *fromIP = [from getIP];
    state = create_NetI2pRouterTransportUdpInboundEstablishState_initWithNetI2pRouterRouterContext_withByteArray_withInt_withInt_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_(_context_, fromIP, [from getPort], [_transport_ getExternalPortWithBoolean:((IOSByteArray *) nil_chk(fromIP))->size_ == 16], [_transport_ getDHBuilder]);
    [state receiveSessionRequestWithNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader:[((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getSessionRequestReader]];
    if ([((NetI2pRouterUtilDecayingBloomFilter *) nil_chk(_replayFilter_)) addWithByteArray:[state getReceivedX] withInt:0 withInt:8]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Duplicate X in session request from: ", from)];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.dupDHX" withLong:1];
      return;
    }
    NetI2pRouterTransportUdpInboundEstablishState *oldState = [_inboundStates_ putIfAbsentWithId:from withId:state];
    isNew = (oldState == nil);
    if (!isNew) state = oldState;
  }
  if (isNew) {
    if ([((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) isIntroductionRequested] && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) canIntroduce] && [state getSentPort] >= 1024 && ((IOSByteArray *) nil_chk([state getSentIP]))->size_ == 4) {
      jlong tag = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextLongWithLong:NetI2pRouterTransportUdpEstablishmentManager_MAX_TAG_VALUE];
      [state setSentRelayTagWithLong:tag];
    }
    else {
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Received NEW session request ", state)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Receive DUP session request from: ", state)];
  }
  NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
}

- (void)receiveSessionConfirmedWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                            withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  NetI2pRouterTransportUdpInboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_inboundStates_)) getWithId:from];
  if (state != nil) {
    [state receiveSessionConfirmedWithNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader:[((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getSessionConfirmedReader]];
    NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Receive session confirmed from: ", state)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Receive (DUP?) session confirmed from: ", from)];
  }
}

- (void)receiveSessionCreatedWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                          withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  NetI2pRouterTransportUdpOutboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) getWithId:from];
  if (state != nil) {
    [state receiveSessionCreatedWithNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader:[((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getSessionCreatedReader]];
    NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Receive session created from: ", state)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Receive (DUP?) session created from: ", from)];
  }
}

- (void)receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                                withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)state {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Receive session destroy (EST) from: ", from)];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) dropPeerWithNetI2pRouterTransportUdpPeerState:state withBoolean:false withNSString:@"received destroy message"];
}

- (void)receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                   withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Receive session destroy (OB) from: ", from)];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) removeWithId:from];
  NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getRemoteIdentity])) calculateHash];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) dropPeerWithNetI2pDataHash:peer withBoolean:false withNSString:@"received destroy message during OB establish"];
}

- (void)receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Receive session destroy (none) from: ", from)];
}

- (NetI2pRouterTransportUdpPeerState *)receiveDataWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) dataReceived];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) removeWithId:[state getRemoteHostId]];
  id<JavaUtilList> queued = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_queuedOutbound_)) removeWithId:[state getRemoteHostId]];
  if (queued != nil) {
    @synchronized(queued) {
      for (NetI2pRouterOutNetMessage * __strong m in queued) {
        [state addMessageWithNetI2pRouterOutNetMessage:m];
      }
    }
  }
  if ([_outboundStates_ size] < NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(self) && ![_queuedOutbound_ isEmpty]) {
    NetI2pRouterTransportUdpEstablishmentManager_locked_admitQueued(self);
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Outbound established completely!  yay: ", state)];
  NetI2pRouterTransportUdpPeerState *peer = NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
  NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
  return peer;
}

- (jint)locked_admitQueued {
  return NetI2pRouterTransportUdpEstablishmentManager_locked_admitQueued(self);
}

- (void)notifyActivity {
  NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
}

- (void)handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState_(self, state);
}

- (void)sendInboundCompleteWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  NetI2pRouterTransportUdpEstablishmentManager_sendInboundCompleteWithNetI2pRouterTransportUdpPeerState_(self, peer);
}

- (NetI2pRouterTransportUdpPeerState *)handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  return NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
}

- (NetI2pDataI2npDatabaseStoreMessage *)getOurInfo {
  return NetI2pRouterTransportUdpEstablishmentManager_getOurInfo(self);
}

- (void)sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState_(self, state);
}

- (void)sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
}

- (void)handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
}

- (void)receiveRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)bob
                         withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  jlong nonce = [((NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *) nil_chk([((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getRelayResponseReader])) readNonce];
  NetI2pRouterTransportUdpOutboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_liveIntroductions_)) removeWithId:JavaLangLong_valueOfWithLong_(nonce)];
  if (state == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J", @"Dup or unknown RelayResponse: ", nonce)];
    return;
  }
  jint sz = [((NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *) nil_chk([reader getRelayResponseReader])) readCharlieIPSize];
  IOSByteArray *ip = [IOSByteArray arrayWithLength:sz];
  [((NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *) nil_chk([reader getRelayResponseReader])) readCharlieIPWithByteArray:ip withInt:0];
  jint port = [((NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *) nil_chk([reader getRelayResponseReader])) readCharliePort];
  if ((!NetI2pRouterTransportUdpEstablishmentManager_isValidWithByteArray_withInt_(self, ip, port)) || (!NetI2pRouterTransportUdpEstablishmentManager_isValidWithByteArray_withInt_(self, [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(bob)) getIP], [bob getPort]))) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$$", @"Bad relay resp from ", bob, @" for ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port))];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.relayBadIP" withLong:1];
    return;
  }
  JavaNetInetAddress *addr = nil;
  @try {
    addr = JavaNetInetAddress_getByAddressWithByteArray_(ip);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$$", @"Introducer for ", state, @" (", bob, @") sent us an invalid address for our target: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(ip, port)) withJavaLangThrowable:uhe];
    return;
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.receiveIntroRelayResponse" withLong:[state getLifetime]];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$$CI$@$J", @"Received RelayResponse for ", [((NetI2pDataRouterRouterIdentity *) nil_chk([state getRemoteIdentity])) calculateHash], @" - they are on ", [((JavaNetInetAddress *) nil_chk(addr)) description], ':', port, @" (according to ", bob, @") nonce=", nonce)];
  @synchronized(state) {
    NetI2pRouterTransportUdpRemoteHostId *oldId = [state getRemoteHostId];
    [state introducedWithByteArray:ip withInt:port];
    NetI2pRouterTransportUdpRemoteHostId *newId = [state getRemoteHostId];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundByHash_)) putWithId:[((NetI2pDataRouterRouterIdentity *) nil_chk([state getRemoteIdentity])) calculateHash] withId:state];
    NetI2pRouterTransportUdpRemoteHostId *claimed = [state getClaimedAddress];
    if (![((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(oldId)) isEqual:newId]) {
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) removeWithId:oldId];
      [_outboundStates_ putWithId:newId withId:state];
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@$@", @"RR replaced ", oldId, @" with ", newId, @", claimed address was ", claimed)];
    }
    if (claimed != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundByClaimedAddress_)) removeWithId:oldId withId:state];
  }
  NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
}

- (void)receiveHolePunchWithJavaNetInetAddress:(JavaNetInetAddress *)from
                                       withInt:(jint)fromPort {
  NetI2pRouterTransportUdpRemoteHostId *id_ = create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_([((JavaNetInetAddress *) nil_chk(from)) getAddress], fromPort);
  NetI2pRouterTransportUdpOutboundEstablishState *state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_outboundStates_)) getWithId:id_];
  if (state != nil) {
    jboolean sendNow = [state receiveHolePunch];
    if (sendNow) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Hole punch from ", state, @", sending SessionRequest now")];
      NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Hole punch from ", state, @", already sent SessionRequest")];
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$I", @"No state found for hole punch from ", from, @" port ", fromPort)];
  }
}

- (jboolean)isValidWithByteArray:(IOSByteArray *)ip
                         withInt:(jint)port {
  return NetI2pRouterTransportUdpEstablishmentManager_isValidWithByteArray_withInt_(self, ip, port);
}

- (void)sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
}

- (void)sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState_(self, state);
}

- (void)sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state {
  NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState_(self, state);
}

- (jlong)handleInbound {
  return NetI2pRouterTransportUdpEstablishmentManager_handleInbound(self);
}

- (jlong)handleOutbound {
  return NetI2pRouterTransportUdpEstablishmentManager_handleOutbound(self);
}

- (void)processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)outboundState {
  NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
}

- (void)processExpiredWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)inboundState {
  NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_builder_);
  RELEASE_(_inboundStates_);
  RELEASE_(_outboundStates_);
  RELEASE_(_queuedOutbound_);
  RELEASE_(_liveIntroductions_);
  RELEASE_(_outboundByClaimedAddress_);
  RELEASE_(_outboundByHash_);
  RELEASE_(_activityLock_);
  RELEASE_(_replayFilter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpInboundEstablishState;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpOutboundEstablishState;", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerState;", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDatabaseStoreMessage;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getInboundStateWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[4].selector = @selector(getOutboundStateWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[5].selector = @selector(getMaxConcurrentEstablish);
  methods[6].selector = @selector(establishWithNetI2pRouterOutNetMessage:);
  methods[7].selector = @selector(establishWithNetI2pRouterOutNetMessage:withBoolean:);
  methods[8].selector = @selector(getMaxInboundEstablishers);
  methods[9].selector = @selector(shouldAllowInboundEstablishment);
  methods[10].selector = @selector(receiveSessionRequestWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[11].selector = @selector(receiveSessionConfirmedWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[12].selector = @selector(receiveSessionCreatedWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[13].selector = @selector(receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpPeerState:);
  methods[14].selector = @selector(receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[15].selector = @selector(receiveSessionDestroyWithNetI2pRouterTransportUdpRemoteHostId:);
  methods[16].selector = @selector(receiveDataWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[17].selector = @selector(locked_admitQueued);
  methods[18].selector = @selector(notifyActivity);
  methods[19].selector = @selector(handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState:);
  methods[20].selector = @selector(sendInboundCompleteWithNetI2pRouterTransportUdpPeerState:);
  methods[21].selector = @selector(handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[22].selector = @selector(getOurInfo);
  methods[23].selector = @selector(sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState:);
  methods[24].selector = @selector(sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[25].selector = @selector(handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[26].selector = @selector(receiveRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[27].selector = @selector(receiveHolePunchWithJavaNetInetAddress:withInt:);
  methods[28].selector = @selector(isValidWithByteArray:withInt:);
  methods[29].selector = @selector(sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[30].selector = @selector(sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[31].selector = @selector(sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState:);
  methods[32].selector = @selector(handleInbound);
  methods[33].selector = @selector(handleOutbound);
  methods[34].selector = @selector(processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[35].selector = @selector(processExpiredWithNetI2pRouterTransportUdpInboundEstablishState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_builder_", "LNetI2pRouterTransportUdpPacketBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_networkID_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inboundStates_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "_outboundStates_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "_queuedOutbound_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 33, -1 },
    { "_liveIntroductions_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 34, -1 },
    { "_outboundByClaimedAddress_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "_outboundByHash_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_activityLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_activity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replayFilter_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_MAX_CONCURRENT_ESTABLISH_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH, 0x1a, -1, -1, -1, -1 },
    { "PROP_MAX_CONCURRENT_ESTABLISH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "MAX_QUEUED_OUTBOUND", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_OUTBOUND, 0x1a, -1, -1, -1, -1 },
    { "MAX_QUEUED_PER_PEER", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_PER_PEER, 0x1a, -1, -1, -1, -1 },
    { "MAX_NONCE", "J", .constantValue.asLong = NetI2pRouterTransportUdpEstablishmentManager_MAX_NONCE, 0x1a, -1, -1, -1, -1 },
    { "MAX_OB_ESTABLISH_TIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_IB_ESTABLISH_TIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_MAX_IB_ESTABLISH_TIME, 0x1a, -1, -1, -1, -1 },
    { "OB_MESSAGE_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "DATA_MESSAGE_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportUdpEstablishmentManager_DATA_MESSAGE_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_ALLOW_EXTENDED_OPTIONS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "PROP_DISABLE_EXT_OPTS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "MAX_TAG_VALUE", "J", .constantValue.asLong = NetI2pRouterTransportUdpEstablishmentManager_MAX_TAG_VALUE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;", "getInboundState", "LNetI2pRouterTransportUdpRemoteHostId;", "getOutboundState", "establish", "LNetI2pRouterOutNetMessage;", "LNetI2pRouterOutNetMessage;Z", "receiveSessionRequest", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpUDPPacketReader;", "receiveSessionConfirmed", "receiveSessionCreated", "receiveSessionDestroy", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpPeerState;", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpOutboundEstablishState;", "receiveData", "LNetI2pRouterTransportUdpOutboundEstablishState;", "handleCompletelyEstablished", "LNetI2pRouterTransportUdpInboundEstablishState;", "sendInboundComplete", "LNetI2pRouterTransportUdpPeerState;", "sendCreated", "sendRequest", "handlePendingIntro", "receiveRelayResponse", "receiveHolePunch", "LJavaNetInetAddress;I", "isValid", "[BI", "sendConfirmation", "sendDestroy", "processExpired", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/router/transport/udp/RemoteHostId;Lnet/i2p/router/transport/udp/InboundEstablishState;>;", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/router/transport/udp/RemoteHostId;Lnet/i2p/router/transport/udp/OutboundEstablishState;>;", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/router/transport/udp/RemoteHostId;Ljava/util/List<Lnet/i2p/router/OutNetMessage;>;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lnet/i2p/router/transport/udp/OutboundEstablishState;>;", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/data/Hash;Lnet/i2p/router/transport/udp/OutboundEstablishState;>;", &NetI2pRouterTransportUdpEstablishmentManager_PROP_MAX_CONCURRENT_ESTABLISH, &NetI2pRouterTransportUdpEstablishmentManager_VERSION_ALLOW_EXTENDED_OPTIONS, &NetI2pRouterTransportUdpEstablishmentManager_PROP_DISABLE_EXT_OPTS, "LNetI2pRouterTransportUdpEstablishmentManager_Establisher;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpEstablishmentManager = { "EstablishmentManager", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 36, 29, -1, 39, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpEstablishmentManager;
}

@end

void NetI2pRouterTransportUdpEstablishmentManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpEstablishmentManager_class_()]);
  self->_networkID_ = [((NetI2pRouterRouter *) nil_chk([ctx router])) getNetworkID];
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssignAndConsume(&self->_builder_, new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(ctx, transport));
  JreStrongAssignAndConsume(&self->_inboundStates_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_outboundStates_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_queuedOutbound_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_liveIntroductions_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_outboundByClaimedAddress_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_outboundByHash_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_activityLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_replayFilter_, new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(ctx, 10 * 60 * 1000, 8, @"SSU-DH-X"));
  self->DEFAULT_MAX_CONCURRENT_ESTABLISH_ = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_LOW_MAX_CONCURRENT_ESTABLISH, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpEstablishmentManager_DEFAULT_HIGH_MAX_CONCURRENT_ESTABLISH, [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([ctx bandwidthLimiter])) getOutboundKBytesPerSecond] / 2));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.inboundEstablishTime" withNSString:@"How long it takes for a new inbound session to be established" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.outboundEstablishTime" withNSString:@"How long it takes for a new outbound session to be established" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendIntroRelayRequest" withNSString:@"How often we send a relay request to reach a peer" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendIntroRelayTimeout" withNSString:@"How often a relay request times out before getting a response (due to the target or intro peer being offline)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receiveIntroRelayResponse" withNSString:@"How long it took to receive a relay response" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.establishDropped" withNSString:@"Dropped an inbound establish message" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.establishRejected" withNSString:@"How many pending outbound connections are there when we refuse to add any more?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.establishOverflow" withNSString:@"How many messages were queued up on a pending connection when it was too much?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.establishBadIP" withNSString:@"Received IP or port was bad" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.congestionOccurred" withNSString:@"How large the cwin was when congestion occurred (duration == sendBps)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.congestedRTO" withNSString:@"retransmission timeout after congestion (duration == rtt dev)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendACKPartial" withNSString:@"Number of partial ACKs sent (duration == number of full ACKs in that ack packet)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendBps" withNSString:@"How fast we are transmitting when a packet is acked" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receiveBps" withNSString:@"How fast we are receiving when a packet is fully received (at most one per second)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.mtuIncrease" withNSString:@"How many retransmissions have there been to the peer when the MTU was increased" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.mtuDecrease" withNSString:@"How many retransmissions have there been to the peer when the MTU was decreased" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.rejectConcurrentActive" withNSString:@"How many messages are currently being sent to the peer when we reject it (period is how many concurrent packets we allow)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.allowConcurrentActive" withNSString:@"How many messages are currently being sent to the peer when we accept it (period is how many concurrent packets we allow)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.rejectConcurrentSequence" withNSString:@"How many consecutive concurrency rejections have we had when we stop rejecting (period is how many concurrent packets we are on)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.dupDHX" withNSString:@"Session request replay" withNSString:@"udp" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000LL } count:1]];
}

NetI2pRouterTransportUdpEstablishmentManager *new_NetI2pRouterTransportUdpEstablishmentManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpEstablishmentManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

NetI2pRouterTransportUdpEstablishmentManager *create_NetI2pRouterTransportUdpEstablishmentManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpEstablishmentManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

jint NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(NetI2pRouterTransportUdpEstablishmentManager *self) {
  return [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpEstablishmentManager_PROP_MAX_CONCURRENT_ESTABLISH withInt:self->DEFAULT_MAX_CONCURRENT_ESTABLISH_];
}

void NetI2pRouterTransportUdpEstablishmentManager_establishWithNetI2pRouterOutNetMessage_withBoolean_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterOutNetMessage *msg, jboolean queueIfMaxExceeded) {
  NetI2pDataRouterRouterInfo *toRouterInfo = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget];
  NetI2pDataRouterRouterAddress *ra = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getTargetAddressWithNetI2pDataRouterRouterInfo:toRouterInfo];
  if (ra == nil) {
    [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Remote peer has no address, cannot establish"];
    return;
  }
  NetI2pDataRouterRouterIdentity *toIdentity = [((NetI2pDataRouterRouterInfo *) nil_chk(toRouterInfo)) getIdentity];
  NetI2pDataHash *toHash = [((NetI2pDataRouterRouterIdentity *) nil_chk(toIdentity)) calculateHash];
  if ([toRouterInfo getNetworkId] != self->_networkID_) {
    [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) banlistRouterWithNetI2pDataHash:toHash];
    [self->_transport_ markUnreachableWithNetI2pDataHash:toHash];
    [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Remote peer is on the wrong network, cannot establish"];
    return;
  }
  NetI2pRouterTransportUdpUDPAddress *addr = create_NetI2pRouterTransportUdpUDPAddress_initWithNetI2pDataRouterRouterAddress_(ra);
  NetI2pRouterTransportUdpRemoteHostId *maybeTo = nil;
  JavaNetInetAddress *remAddr = [addr getHostAddress];
  jint port = [addr getPort];
  if (remAddr != nil && port > 0 && port <= 65535) {
    maybeTo = create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_([remAddr getAddress], port);
    if ((![self->_transport_ isValidWithByteArray:[maybeTo getIP]]) || (JavaUtilArrays_equalsWithByteArray_withByteArray_([maybeTo getIP], [self->_transport_ getExternalIP]) && ![self->_transport_ allowLocal])) {
      [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Remote peer's IP isn't valid"];
      [self->_transport_ markUnreachableWithNetI2pDataHash:toHash];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.establishBadIP" withLong:1];
      return;
    }
    NetI2pRouterTransportUdpInboundEstablishState *inState = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_inboundStates_)) getWithId:maybeTo];
    if (inState != nil) {
      @synchronized(inState) {
        switch ([[inState getState] ordinal]) {
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_UNKNOWN:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_REQUEST_RECEIVED:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CREATED_SENT:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CONFIRMED_PARTIALLY:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CONFIRMED_COMPLETELY:
          [inState addMessageWithNetI2pRouterOutNetMessage:msg];
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ debugWithNSString:@"OB msg queued to IES"];
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_COMPLETE:
          [self->_transport_ sendIfEstablishedWithNetI2pRouterOutNetMessage:msg];
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_FAILED:
          [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"OB msg failed during IB establish"];
          break;
        }
      }
      return;
    }
  }
  NetI2pRouterTransportUdpRemoteHostId *to;
  jboolean isIndirect = [addr getIntroducerCount] > 0 || maybeTo == nil;
  if (isIndirect) {
    to = create_NetI2pRouterTransportUdpRemoteHostId_initWithNetI2pDataHash_(toHash);
  }
  else {
    to = maybeTo;
  }
  NetI2pRouterTransportUdpOutboundEstablishState *state = nil;
  jint deferred = 0;
  jboolean rejected = false;
  jint queueCount = 0;
  state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundStates_)) getWithId:to];
  if (state == nil) {
    state = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByHash_)) getWithId:toHash];
    if (state != nil && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$@", @"Found by hash: ", state)];
  }
  if (state == nil) {
    if (queueIfMaxExceeded && [self->_outboundStates_ size] >= NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(self)) {
      if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_queuedOutbound_)) size] >= NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_OUTBOUND && ![self->_queuedOutbound_ containsKeyWithId:to]) {
        rejected = true;
      }
      else {
        id<JavaUtilList> newQueued = create_JavaUtilArrayList_initWithInt_(NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_PER_PEER);
        id<JavaUtilList> queued = [self->_queuedOutbound_ putIfAbsentWithId:to withId:newQueued];
        if (queued == nil) {
          queued = newQueued;
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$$", @"Queueing outbound establish to ", to, @", increase ", NetI2pRouterTransportUdpEstablishmentManager_PROP_MAX_CONCURRENT_ESTABLISH)];
        }
        @synchronized(queued) {
          queueCount = [queued size];
          if (queueCount < NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_PER_PEER) {
            [queued addWithId:msg];
            queueCount++;
          }
          else {
            rejected = true;
          }
          deferred = [self->_queuedOutbound_ size];
        }
      }
    }
    else {
      IOSByteArray *keyBytes = [addr getIntroKey];
      if (keyBytes == nil) {
        [self->_transport_ markUnreachableWithNetI2pDataHash:toHash];
        [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Peer has no key, cannot establish"];
        return;
      }
      NetI2pDataSessionKey *sessionKey;
      @try {
        sessionKey = create_NetI2pDataSessionKey_initWithByteArray_(keyBytes);
      }
      @catch (JavaLangIllegalArgumentException *iae) {
        [self->_transport_ markUnreachableWithNetI2pDataHash:toHash];
        [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Peer has bad key, cannot establish"];
        return;
      }
      jboolean allowExtendedOptions = NetI2pUtilVersionComparator_compWithNSString_withNSString_([toRouterInfo getVersion], NetI2pRouterTransportUdpEstablishmentManager_VERSION_ALLOW_EXTENDED_OPTIONS) >= 0 && ![((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterTransportUdpEstablishmentManager_PROP_DISABLE_EXT_OPTS];
      jboolean requestIntroduction = allowExtendedOptions && !isIndirect && [self->_transport_ introducersMaybeRequired];
      state = create_NetI2pRouterTransportUdpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(self->_context_, maybeTo, to, toIdentity, allowExtendedOptions, requestIntroduction, sessionKey, addr, [self->_transport_ getDHFactory]);
      NetI2pRouterTransportUdpOutboundEstablishState *oldState = [self->_outboundStates_ putIfAbsentWithId:to withId:state];
      jboolean isNew = oldState == nil;
      if (isNew) {
        if (isIndirect && maybeTo != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByClaimedAddress_)) putWithId:maybeTo withId:state];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Adding new ", state)];
      }
      else {
        state = oldState;
      }
    }
  }
  if (state != nil) {
    [state addMessageWithNetI2pRouterOutNetMessage:msg];
    id<JavaUtilList> queued = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_queuedOutbound_)) removeWithId:to];
    if (queued != nil) {
      @synchronized(queued) {
        for (NetI2pRouterOutNetMessage * __strong m in queued) {
          [state addMessageWithNetI2pRouterOutNetMessage:m];
        }
      }
    }
  }
  if (rejected) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too many pending, rejecting outbound establish to ", to)];
    [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Too many pending outbound connections"];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.establishRejected" withLong:deferred];
    return;
  }
  if (queueCount >= NetI2pRouterTransportUdpEstablishmentManager_MAX_QUEUED_PER_PEER) {
    [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Too many pending messages for the given peer"];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.establishOverflow" withLong:queueCount withLong:deferred];
    return;
  }
  if (deferred > 0) [msg timestampWithNSString:@"too many deferred establishers"];
  else if (state != nil) [msg timestampWithNSString:@"establish state already waiting"];
  NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(self);
}

jint NetI2pRouterTransportUdpEstablishmentManager_getMaxInboundEstablishers(NetI2pRouterTransportUdpEstablishmentManager *self) {
  return NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(self) / 2;
}

jint NetI2pRouterTransportUdpEstablishmentManager_locked_admitQueued(NetI2pRouterTransportUdpEstablishmentManager *self) {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_queuedOutbound_)) isEmpty]) return 0;
  jint admitted = 0;
  jint max = NetI2pRouterTransportUdpEstablishmentManager_getMaxConcurrentEstablish(self);
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([self->_queuedOutbound_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundStates_)) size] < max; ) {
    id<JavaUtilMap_Entry> entry_ = [iter next];
    @try {
      [iter remove];
    }
    @catch (JavaLangIllegalStateException *ise) {
      continue;
    }
    NetI2pRouterTransportUdpRemoteHostId *to = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id<JavaUtilList> allQueued = [entry_ getValue];
    id<JavaUtilList> queued = create_JavaUtilArrayList_init();
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
    @synchronized(allQueued) {
      for (NetI2pRouterOutNetMessage * __strong msg in nil_chk(allQueued)) {
        if (now - NetI2pRouterRouter_CLOCK_FUDGE_FACTOR > [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getExpiration]) {
          [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Took too long in est. mgr OB queue"];
        }
        else {
          [queued addWithId:msg];
        }
      }
    }
    if ([queued isEmpty]) continue;
    for (NetI2pRouterOutNetMessage * __strong m in queued) {
      [((NetI2pRouterOutNetMessage *) nil_chk(m)) timestampWithNSString:@"no longer deferred... establishing"];
      NetI2pRouterTransportUdpEstablishmentManager_establishWithNetI2pRouterOutNetMessage_withBoolean_(self, m, false);
    }
    admitted++;
  }
  return admitted;
}

void NetI2pRouterTransportUdpEstablishmentManager_notifyActivity(NetI2pRouterTransportUdpEstablishmentManager *self) {
  @synchronized(self->_activityLock_) {
    self->_activity_++;
    [nil_chk(self->_activityLock_) java_notifyAll];
  }
}

void NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state) {
  if ([((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) isComplete]) return;
  NetI2pDataRouterRouterIdentity *remote = [state getConfirmedIdentity];
  NetI2pRouterTransportUdpPeerState *peer = create_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(self->_context_, self->_transport_, [state getSentIP], [state getSentPort], [((NetI2pDataRouterRouterIdentity *) nil_chk(remote)) calculateHash], true);
  [peer setCurrentCipherKeyWithNetI2pDataSessionKey:[state getCipherKey]];
  [peer setCurrentMACKeyWithNetI2pDataSessionKey:[state getMACKey]];
  [peer setWeRelayToThemAsWithLong:[state getSentRelayTag]];
  NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[remote calculateHash]];
  if (info != nil) {
    NetI2pDataRouterRouterAddress *addr = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getTargetAddressWithNetI2pDataRouterRouterInfo:info];
    if (addr != nil) {
      NSString *smtu = [addr getOptionWithNSString:NetI2pRouterTransportUdpUDPAddress_PROP_MTU];
      if (smtu != nil) {
        @try {
          jboolean isIPv6 = ((IOSByteArray *) nil_chk([state getSentIP]))->size_ == 16;
          jint mtu = NetI2pRouterTransportUdpMTU_rectifyWithBoolean_withInt_(isIPv6, JavaLangInteger_parseIntWithNSString_(smtu));
          [peer setHisMTUWithInt:mtu];
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Handle completely established (inbound): ", state, @" - ", [peer getRemotePeer])];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:peer];
  jboolean isIPv6 = ((IOSByteArray *) nil_chk([state getSentIP]))->size_ == 16;
  [self->_transport_ inboundConnectionReceivedWithBoolean:isIPv6];
  [self->_transport_ setIPWithNetI2pDataHash:[remote calculateHash] withByteArray:[state getSentIP]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.inboundEstablishTime" withLong:[state getLifetime]];
  NetI2pRouterTransportUdpEstablishmentManager_sendInboundCompleteWithNetI2pRouterTransportUdpPeerState_(self, peer);
  NetI2pRouterOutNetMessage *msg;
  while ((msg = [state getNextQueuedMessage]) != nil) {
    if ([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - NetI2pRouterRouter_CLOCK_FUDGE_FACTOR > [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getExpiration]) {
      [msg timestampWithNSString:@"took too long but established..."];
      [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Took too long to establish, but it was established"];
    }
    else {
      [msg timestampWithNSString:@"session fully established and sent"];
      [self->_transport_ sendWithNetI2pRouterOutNetMessage:msg];
    }
  }
  [state complete];
}

void NetI2pRouterTransportUdpEstablishmentManager_sendInboundCompleteWithNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpPeerState *peer) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Completing to the peer after IB confirm: ", peer)];
  NetI2pDataI2npDeliveryStatusMessage *dsm = create_NetI2pDataI2npDeliveryStatusMessage_initWithNetI2pI2PAppContext_(self->_context_);
  [dsm setArrivalWithLong:self->_networkID_];
  [dsm setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] + NetI2pRouterTransportUdpEstablishmentManager_DATA_MESSAGE_TIMEOUT];
  [dsm setMessageIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
  NetI2pDataHash *hash_ = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer];
  if ((hash_ != nil) && (![((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) isBanlistedWithNetI2pDataHash:hash_]) && (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isUnreachableWithNetI2pDataHash:hash_])) {
    NetI2pDataI2npDatabaseStoreMessage *dbsm = NetI2pRouterTransportUdpEstablishmentManager_getOurInfo(self);
    id<JavaUtilList> msgs = create_JavaUtilArrayList_initWithInt_(2);
    [msgs addWithId:dsm];
    [msgs addWithId:dbsm];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithJavaUtilList:msgs withNetI2pRouterTransportUdpPeerState:peer];
  }
  else {
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pDataI2npI2NPMessage:dsm withNetI2pRouterTransportUdpPeerState:peer];
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"NOT publishing to the peer after confirm plus delay (WITH banlist): ", (hash_ != nil ? [hash_ description] : @"unknown"))];
  }
}

NetI2pRouterTransportUdpPeerState *NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  if ([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) complete]) {
    NetI2pDataRouterRouterIdentity *rem = [state getRemoteIdentity];
    if (rem != nil) return [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pDataHash:[rem getHash]];
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  NetI2pDataRouterRouterIdentity *remote = [state getRemoteIdentity];
  NetI2pRouterTransportUdpRemoteHostId *claimed = [state getClaimedAddress];
  if (claimed != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByClaimedAddress_)) removeWithId:claimed withId:state];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByHash_)) removeWithId:[((NetI2pDataRouterRouterIdentity *) nil_chk(remote)) calculateHash] withId:state];
  NetI2pRouterTransportUdpPeerState *peer = create_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(self->_context_, self->_transport_, [state getSentIP], [state getSentPort], [remote calculateHash], false);
  [peer setCurrentCipherKeyWithNetI2pDataSessionKey:[state getCipherKey]];
  [peer setCurrentMACKeyWithNetI2pDataSessionKey:[state getMACKey]];
  [peer setTheyRelayToUsAsWithLong:[state getReceivedRelayTag]];
  jint mtu = [((NetI2pRouterTransportUdpUDPAddress *) nil_chk([state getRemoteAddress])) getMTU];
  if (mtu > 0) [peer setHisMTUWithInt:mtu];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Handle completely established (outbound): ", state, @" - ", [peer getRemotePeer])];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) addRemotePeerStateWithNetI2pRouterTransportUdpPeerState:peer];
  [self->_transport_ setIPWithNetI2pDataHash:[remote calculateHash] withByteArray:[state getSentIP]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.outboundEstablishTime" withLong:[state getLifetime]];
  NetI2pDataI2npDatabaseStoreMessage *dbsm = nil;
  if (![state isFirstMessageOurDSM]) {
    dbsm = NetI2pRouterTransportUdpEstablishmentManager_getOurInfo(self);
  }
  else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [self->_log_ infoWithNSString:JreStrcat("$@", @"Skipping publish: ", state)];
  }
  id<JavaUtilList> msgs = create_JavaUtilArrayList_initWithInt_(8);
  NetI2pRouterOutNetMessage *msg;
  while ((msg = [state getNextQueuedMessage]) != nil) {
    if (now - NetI2pRouterRouter_CLOCK_FUDGE_FACTOR > [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getExpiration]) {
      [msg timestampWithNSString:@"took too long but established..."];
      [self->_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Took too long to establish, but it was established"];
    }
    else {
      [msg timestampWithNSString:@"session fully established and sent"];
      [msgs addWithId:msg];
    }
  }
  [self->_transport_ sendWithNetI2pDataI2npI2NPMessage:dbsm withJavaUtilList:msgs withNetI2pRouterTransportUdpPeerState:peer];
  return peer;
}

NetI2pDataI2npDatabaseStoreMessage *NetI2pRouterTransportUdpEstablishmentManager_getOurInfo(NetI2pRouterTransportUdpEstablishmentManager *self) {
  NetI2pDataI2npDatabaseStoreMessage *m = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(self->_context_);
  [m setEntryWithNetI2pDataDatabaseEntry:[((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getRouterInfo]];
  [m setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + NetI2pRouterTransportUdpEstablishmentManager_DATA_MESSAGE_TIMEOUT];
  return m;
}

void NetI2pRouterTransportUdpEstablishmentManager_sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Send created to: ", state)];
  @try {
    [((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) generateSessionKey];
  }
  @catch (NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException *ippe) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$", @"Peer ", state, @" sent us an invalid DH parameter") withJavaLangThrowable:ippe];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_inboundStates_)) removeWithId:[state getRemoteHostId]];
    [state fail];
    return;
  }
  NetI2pRouterTransportUdpUDPPacket *pkt = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildSessionCreatedPacketWithNetI2pRouterTransportUdpInboundEstablishState:state withInt:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getExternalPortWithBoolean:((IOSByteArray *) nil_chk([state getSentIP]))->size_ == 16] withNetI2pDataSessionKey:[self->_transport_ getIntroKey]];
  if (pkt == nil) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$", @"Peer ", state, @" sent us an invalid IP?")];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_inboundStates_)) removeWithId:[state getRemoteHostId]];
    [state fail];
    return;
  }
  [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:pkt];
  [state createdPacketSent];
}

void NetI2pRouterTransportUdpEstablishmentManager_sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Send SessionRequest to: ", state)];
  NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildSessionRequestPacketWithNetI2pRouterTransportUdpOutboundEstablishState:state];
  if (packet != nil) {
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  else {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Unable to build a session request packet for ", state)];
  }
  [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) requestSent];
}

void NetI2pRouterTransportUdpEstablishmentManager_handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  jlong nonce = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getIntroNonce];
  if (nonce < 0) {
    NetI2pRouterTransportUdpOutboundEstablishState *old;
    do {
      nonce = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextLongWithLong:NetI2pRouterTransportUdpEstablishmentManager_MAX_NONCE];
      old = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_liveIntroductions_)) putIfAbsentWithId:JavaLangLong_valueOfWithLong_(nonce) withId:state];
    }
    while (old != nil);
    [state setIntroNonceWithLong:nonce];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendIntroRelayRequest" withLong:1];
  id<JavaUtilList> requests = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildRelayRequestWithNetI2pRouterTransportUdpUDPTransport:self->_transport_ withNetI2pRouterTransportUdpOutboundEstablishState:state withNetI2pDataSessionKey:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getIntroKey]];
  if ([((id<JavaUtilList>) nil_chk(requests)) isEmpty]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"No valid introducers! ", state)];
  }
  for (NetI2pRouterTransportUdpUDPPacket * __strong req in requests) {
    [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:req];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Send intro for ", state, @" with our intro key as ", [self->_transport_ getIntroKey])];
  [state introSent];
}

jboolean NetI2pRouterTransportUdpEstablishmentManager_isValidWithByteArray_withInt_(NetI2pRouterTransportUdpEstablishmentManager *self, IOSByteArray *ip, jint port) {
  return NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port) && ip != nil && ip->size_ == 4 && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isValidWithByteArray:ip] && (![self->_transport_ isTooCloseWithByteArray:ip]) && (![((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) blocklist])) isBlocklistedWithByteArray:ip]);
}

void NetI2pRouterTransportUdpEstablishmentManager_sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  jboolean valid = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) validateSessionCreated];
  if (!valid) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"SessionCreated validate failed: ", state)];
    return;
  }
  if (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) isValidWithByteArray:[state getReceivedIP]] || ![self->_transport_ isValidWithByteArray:[((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([state getRemoteHostId])) getIP]]) {
    [state fail];
    return;
  }
  [self->_transport_ externalAddressReceivedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([state getRemoteIdentity])) calculateHash] withByteArray:[state getReceivedIP] withInt:[state getReceivedPort]];
  [state prepareSessionConfirmed];
  IOSObjectArray *packets = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildSessionConfirmedPacketsWithNetI2pRouterTransportUdpOutboundEstablishState:state withNetI2pDataRouterRouterIdentity:[((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getRouterInfo])) getIdentity]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Send confirm to: ", state)];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(packets))->size_; i++) [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:IOSObjectArray_Get(packets, i)];
  [state confirmedPacketsSent];
}

void NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *state) {
  NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildSessionDestroyPacketWithNetI2pRouterTransportUdpOutboundEstablishState:state];
  if (packet != nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Send destroy to: ", state)];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
}

void NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *state) {
  NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildSessionDestroyPacketWithNetI2pRouterTransportUdpInboundEstablishState:state];
  if (packet != nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Send destroy to: ", state)];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
}

jlong NetI2pRouterTransportUdpEstablishmentManager_handleInbound(NetI2pRouterTransportUdpEstablishmentManager *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong nextSendTime = -1;
  NetI2pRouterTransportUdpInboundEstablishState *inboundState = nil;
  jboolean expired = false;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_inboundStates_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpInboundEstablishState *cur = [iter next];
    if ([((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(cur)) getState] == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_CONFIRMED_COMPLETELY)) {
      [iter remove];
      inboundState = cur;
      break;
    }
    else if ([cur getLifetime] > NetI2pRouterTransportUdpEstablishmentManager_MAX_IB_ESTABLISH_TIME) {
      [iter remove];
      inboundState = cur;
      expired = true;
      break;
    }
    else if ([cur getState] == JreLoadEnum(NetI2pRouterTransportUdpInboundEstablishState_InboundState, IB_STATE_FAILED)) {
      [iter remove];
    }
    else {
      if ([cur getNextSendTime] <= now) {
        inboundState = cur;
        break;
      }
      else {
        jlong when = -1;
        if ([cur getNextSendTime] <= 0) {
          when = [cur getEstablishBeginTime] + NetI2pRouterTransportUdpEstablishmentManager_MAX_IB_ESTABLISH_TIME;
        }
        else {
          when = [cur getNextSendTime];
        }
        if (when < nextSendTime) nextSendTime = when;
      }
    }
  }
  if (inboundState != nil) {
    @synchronized(inboundState) {
      {
        NetI2pDataRouterRouterIdentity *remote;
        switch ([[inboundState getState] ordinal]) {
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_REQUEST_RECEIVED:
          if (expired) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
          else NetI2pRouterTransportUdpEstablishmentManager_sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CREATED_SENT:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CONFIRMED_PARTIALLY:
          if (expired) {
            NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
            NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
          }
          else if ([inboundState getNextSendTime] <= now) {
            NetI2pRouterTransportUdpEstablishmentManager_sendCreatedWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
          }
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_CONFIRMED_COMPLETELY:
          remote = [inboundState getConfirmedIdentity];
          if (remote != nil) {
            if ([((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) isBanlistedForeverWithNetI2pDataHash:[remote calculateHash]]) {
              if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping inbound connection from permanently banlisted peer: ", [remote calculateHash])];
              [((NetI2pRouterBlocklist *) nil_chk([self->_context_ blocklist])) addWithByteArray:[inboundState getSentIP]];
              [inboundState fail];
              NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
            }
            else {
              NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
            }
          }
          else {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"confirmed with invalid? ", inboundState)];
            [inboundState fail];
            NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(self, inboundState);
          }
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_COMPLETE:
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_FAILED:
          break;
          case NetI2pRouterTransportUdpInboundEstablishState_InboundState_Enum_IB_STATE_UNKNOWN:
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:JreStrcat("$@", @"hrm, state is unknown for ", inboundState)];
        }
      }
    }
    nextSendTime = now;
  }
  return nextSendTime;
}

jlong NetI2pRouterTransportUdpEstablishmentManager_handleOutbound(NetI2pRouterTransportUdpEstablishmentManager *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong nextSendTime = -1;
  NetI2pRouterTransportUdpOutboundEstablishState *outboundState = nil;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundStates_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpOutboundEstablishState *cur = [iter next];
    NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *state = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(cur)) getState];
    if (state == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_COMPLETELY) || state == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED)) {
      [iter remove];
      outboundState = cur;
      break;
    }
    else if ([cur getLifetime] >= NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME) {
      [iter remove];
      outboundState = cur;
      break;
    }
    else {
      if ([cur getNextSendTime] <= now) {
        outboundState = cur;
        break;
      }
      else {
        jlong when = -1;
        if ([cur getNextSendTime] <= 0) {
          when = [cur getEstablishBeginTime] + NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME;
        }
        else {
          when = [cur getNextSendTime];
        }
        if ((nextSendTime <= 0) || (when < nextSendTime)) nextSendTime = when;
      }
    }
  }
  if (outboundState != nil) {
    @synchronized(outboundState) {
      jboolean expired = [outboundState getLifetime] >= NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME;
      {
        jlong rtime;
        jlong ctime;
        jlong itime;
        switch ([[outboundState getState] ordinal]) {
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_UNKNOWN:
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_INTRODUCED:
          if (expired) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          else NetI2pRouterTransportUdpEstablishmentManager_sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_REQUEST_SENT:
          rtime = [outboundState getRequestSentTime];
          if (expired || (rtime > 0 && rtime + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT <= now)) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          else if ([outboundState getNextSendTime] <= now) NetI2pRouterTransportUdpEstablishmentManager_sendRequestWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_CREATED_RECEIVED:
          if (expired) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          else if ([outboundState getNextSendTime] <= now) NetI2pRouterTransportUdpEstablishmentManager_sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_CONFIRMED_PARTIALLY:
          ctime = [outboundState getConfirmedSentTime];
          if (expired || (ctime > 0 && ctime + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT <= now)) {
            NetI2pRouterTransportUdpEstablishmentManager_sendDestroyWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
            NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          }
          else if ([outboundState getNextSendTime] <= now) {
            NetI2pRouterTransportUdpEstablishmentManager_sendConfirmationWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          }
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_CONFIRMED_COMPLETELY:
          if (expired) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          else NetI2pRouterTransportUdpEstablishmentManager_handleCompletelyEstablishedWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_PENDING_INTRO:
          itime = [outboundState getIntroSentTime];
          if (expired || (itime > 0 && itime + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT <= now)) NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          else if ([outboundState getNextSendTime] <= now) NetI2pRouterTransportUdpEstablishmentManager_handlePendingIntroWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
          case NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum_OB_STATE_VALIDATION_FAILED:
          NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(self, outboundState);
          break;
        }
      }
    }
    nextSendTime = now;
  }
  return nextSendTime;
}

void NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpOutboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpOutboundEstablishState *outboundState) {
  jlong nonce = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(outboundState)) getIntroNonce];
  if (nonce >= 0) {
    jboolean removed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_liveIntroductions_)) removeWithId:JavaLangLong_valueOfWithLong_(nonce) withId:outboundState];
    if (removed) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$", @"Send intro for ", outboundState, @" timed out")];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendIntroRelayTimeout" withLong:1];
    }
  }
  NetI2pRouterTransportUdpRemoteHostId *claimed = [outboundState getClaimedAddress];
  if (claimed != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByClaimedAddress_)) removeWithId:claimed withId:outboundState];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundByHash_)) removeWithId:[((NetI2pDataRouterRouterIdentity *) nil_chk([outboundState getRemoteIdentity])) calculateHash] withId:outboundState];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_outboundStates_)) removeWithId:[outboundState getRemoteHostId] withId:outboundState];
  if ([outboundState getState] != JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_COMPLETELY)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$J", @"Expired: ", outboundState, @" Lifetime: ", [outboundState getLifetime])];
    NetI2pRouterOutNetMessage *msg;
    while ((msg = [outboundState getNextQueuedMessage]) != nil) {
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Expired during failed establish"];
    }
    NSString *err = JreStrcat("$@", @"Took too long to establish OB connection, state = ", [outboundState getState]);
    NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([outboundState getRemoteIdentity])) calculateHash];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) markUnreachableWithNetI2pDataHash:peer];
    [self->_transport_ dropPeerWithNetI2pDataHash:peer withBoolean:false withNSString:err];
    [outboundState fail];
  }
  else {
    NetI2pRouterOutNetMessage *msg;
    while ((msg = [outboundState getNextQueuedMessage]) != nil) {
      [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterOutNetMessage:msg];
    }
  }
}

void NetI2pRouterTransportUdpEstablishmentManager_processExpiredWithNetI2pRouterTransportUdpInboundEstablishState_(NetI2pRouterTransportUdpEstablishmentManager *self, NetI2pRouterTransportUdpInboundEstablishState *inboundState) {
  NetI2pRouterOutNetMessage *msg;
  while ((msg = [((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(inboundState)) getNextQueuedMessage]) != nil) {
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Expired during failed establish"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpEstablishmentManager)

@implementation NetI2pRouterTransportUdpEstablishmentManager_Establisher

- (instancetype)initWithNetI2pRouterTransportUdpEstablishmentManager:(NetI2pRouterTransportUdpEstablishmentManager *)outer$ {
  NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(self, outer$);
  return self;
}

- (void)run {
  while (JreLoadVolatileBoolean(&this$0_->_alive_)) {
    @try {
      NetI2pRouterTransportUdpEstablishmentManager_Establisher_doPass(self);
    }
    @catch (JavaLangRuntimeException *re) {
      [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error in the establisher" withJavaLangThrowable:re];
    }
  }
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_inboundStates_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_outboundStates_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_queuedOutbound_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_outboundByClaimedAddress_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_outboundByHash_)) clear];
}

- (void)doPass {
  NetI2pRouterTransportUdpEstablishmentManager_Establisher_doPass(self);
}

- (void)doFailsafe {
  NetI2pRouterTransportUdpEstablishmentManager_Establisher_doFailsafe(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpEstablishmentManager:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(doPass);
  methods[3].selector = @selector(doFailsafe);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpEstablishmentManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_lastFailsafe_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FAILSAFE_INTERVAL", "J", .constantValue.asLong = NetI2pRouterTransportUdpEstablishmentManager_Establisher_FAILSAFE_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "_lastPrinted_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PRINT_INTERVAL", "J", .constantValue.asLong = NetI2pRouterTransportUdpEstablishmentManager_Establisher_PRINT_INTERVAL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpEstablishmentManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpEstablishmentManager_Establisher = { "Establisher", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 4, 5, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpEstablishmentManager_Establisher;
}

@end

void NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self, NetI2pRouterTransportUdpEstablishmentManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpEstablishmentManager_Establisher *new_NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpEstablishmentManager_Establisher, initWithNetI2pRouterTransportUdpEstablishmentManager_, outer$)
}

NetI2pRouterTransportUdpEstablishmentManager_Establisher *create_NetI2pRouterTransportUdpEstablishmentManager_Establisher_initWithNetI2pRouterTransportUdpEstablishmentManager_(NetI2pRouterTransportUdpEstablishmentManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpEstablishmentManager_Establisher, initWithNetI2pRouterTransportUdpEstablishmentManager_, outer$)
}

void NetI2pRouterTransportUdpEstablishmentManager_Establisher_doPass(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG] && self->_lastPrinted_ + NetI2pRouterTransportUdpEstablishmentManager_Establisher_PRINT_INTERVAL < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now]) {
    self->_lastPrinted_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now];
    jint iactive = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_inboundStates_)) size];
    jint oactive = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_outboundStates_)) size];
    if (iactive > 0 || oactive > 0) {
      jint queued = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_queuedOutbound_)) size];
      jint live = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_liveIntroductions_)) size];
      jint claimed = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_outboundByClaimedAddress_)) size];
      jint hash_ = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_outboundByHash_)) size];
      [self->this$0_->_log_ debugWithNSString:JreStrcat("$I$I$I$I$I$I", @"OB states: ", oactive, @" IB states: ", iactive, @" OB queued: ", queued, @" intros: ", live, @" OB claimed: ", claimed, @" hash: ", hash_)];
    }
  }
  self->this$0_->_activity_ = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now];
  if (self->_lastFailsafe_ + NetI2pRouterTransportUdpEstablishmentManager_Establisher_FAILSAFE_INTERVAL < [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now]) {
    self->_lastFailsafe_ = [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now];
    NetI2pRouterTransportUdpEstablishmentManager_Establisher_doFailsafe(self);
  }
  jlong nextSendTime = -1;
  jlong nextSendInbound = NetI2pRouterTransportUdpEstablishmentManager_handleInbound(self->this$0_);
  jlong nextSendOutbound = NetI2pRouterTransportUdpEstablishmentManager_handleOutbound(self->this$0_);
  if (nextSendInbound > 0) nextSendTime = nextSendInbound;
  if ((nextSendTime < 0) || (nextSendOutbound < nextSendTime)) nextSendTime = nextSendOutbound;
  jlong delay = nextSendTime - now;
  if ((nextSendTime == -1) || (delay > 0)) {
    if (delay > 1000) delay = 1000;
    @try {
      @synchronized(self->this$0_->_activityLock_) {
        if (self->this$0_->_activity_ > 0) return;
        if (nextSendTime == -1) [nil_chk(self->this$0_->_activityLock_) java_waitWithLong:1000];
        else [nil_chk(self->this$0_->_activityLock_) java_waitWithLong:delay];
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

void NetI2pRouterTransportUdpEstablishmentManager_Establisher_doFailsafe(NetI2pRouterTransportUdpEstablishmentManager_Establisher *self) {
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_liveIntroductions_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpOutboundEstablishState *state = [iter next];
    if ([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getLifetime] > 3 * NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME) {
      [iter remove];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Failsafe remove LI ", state)];
    }
  }
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_outboundByClaimedAddress_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpOutboundEstablishState *state = [iter next];
    if ([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getLifetime] > 3 * NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME) {
      [iter remove];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Failsafe remove OBBCA ", state)];
    }
  }
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->this$0_->_outboundByHash_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTransportUdpOutboundEstablishState *state = [iter next];
    if ([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getLifetime] > 3 * NetI2pRouterTransportUdpEstablishmentManager_MAX_OB_ESTABLISH_TIME) {
      [iter remove];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Failsafe remove OBBH ", state)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpEstablishmentManager_Establisher)
