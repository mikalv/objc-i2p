//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PacketBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/HMACGenerator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/InboundEstablishState.h"
#include "net/i2p/router/transport/udp/OutboundEstablishState.h"
#include "net/i2p/router/transport/udp/OutboundMessageState.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTransportUdpPacketBuilder () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                                                                             withInt:(jint)fragmentNum
                                                                                                             withInt:(jint)numFragments
                                                                                                       withByteArray:(IOSByteArray *)identity;

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                                                  withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                                                 withInt:(jint)port;

- (IOSByteArray *)getOurExplicitIP;

- (jint)getOurExplicitPort;

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayRequestWithJavaNetInetAddress:(JavaNetInetAddress *)introHost
                                                                       withInt:(jint)introPort
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                                                      withLong:(jlong)introTag
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey
                                                                      withLong:(jlong)introNonce;

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketHeaderWithByte:(jbyte)flagByte;

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketHeaderWithByte:(jbyte)flagByte
                                                   withByteArray:(IOSByteArray *)extendedOptions;

+ (void)setToWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                            withJavaNetInetAddress:(JavaNetInetAddress *)ip
                                           withInt:(jint)port;

- (jint)pad1WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off;

- (jint)pad2WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off;

- (jint)pad2WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off
                  withInt:(jint)maxLen;

- (void)authenticateWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey;

- (void)authenticateWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                            withByteArray:(IOSByteArray *)iv;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketBuilder, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketBuilder, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPacketBuilder, _transport_, NetI2pRouterTransportUdpUDPTransport *)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MAX_RESEND_ACKS_LARGE(void);
#define NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_LARGE 9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MAX_RESEND_ACKS_LARGE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MAX_RESEND_ACKS_SMALL(void);
#define NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_SMALL 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MAX_RESEND_ACKS_SMALL, jint)

inline NSString *NetI2pRouterTransportUdpPacketBuilder_get_PROP_PADDING(void);
static NSString *NetI2pRouterTransportUdpPacketBuilder_PROP_PADDING = @"i2np.udp.padding";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportUdpPacketBuilder, PROP_PADDING, NSString *)

inline jboolean NetI2pRouterTransportUdpPacketBuilder_get_DEFAULT_ENABLE_PADDING(void);
#define NetI2pRouterTransportUdpPacketBuilder_DEFAULT_ENABLE_PADDING true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, DEFAULT_ENABLE_PADDING, jboolean)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_SESSION_REQUEST_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_SESSION_REQUEST_FLAG_BYTE 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, SESSION_REQUEST_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_SESSION_CREATED_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_SESSION_CREATED_FLAG_BYTE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, SESSION_CREATED_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_SESSION_CONFIRMED_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_SESSION_CONFIRMED_FLAG_BYTE 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, SESSION_CONFIRMED_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_PEER_RELAY_REQUEST_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_REQUEST_FLAG_BYTE 48
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, PEER_RELAY_REQUEST_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_PEER_RELAY_RESPONSE_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_RESPONSE_FLAG_BYTE 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, PEER_RELAY_RESPONSE_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_PEER_RELAY_INTRO_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_INTRO_FLAG_BYTE 80
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, PEER_RELAY_INTRO_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_DATA_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_DATA_FLAG_BYTE 96
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, DATA_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_PEER_TEST_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE 112
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, PEER_TEST_FLAG_BYTE, jbyte)

inline jbyte NetI2pRouterTransportUdpPacketBuilder_get_SESSION_DESTROY_FLAG_BYTE(void);
#define NetI2pRouterTransportUdpPacketBuilder_SESSION_DESTROY_FLAG_BYTE -128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, SESSION_DESTROY_FLAG_BYTE, jbyte)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MAX_IDENTITY_FRAGMENT_SIZE(void);
#define NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE 512
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MAX_IDENTITY_FRAGMENT_SIZE, jint)

inline jint NetI2pRouterTransportUdpPacketBuilder_get_MAX_PAD2(void);
#define NetI2pRouterTransportUdpPacketBuilder_MAX_PAD2 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPacketBuilder, MAX_PAD2, jint)

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState_withInt_withInt_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpOutboundEstablishState *state, jint fragmentNum, jint numFragments, IOSByteArray *identity);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, JavaNetInetAddress *addr, jint port);

__attribute__((unused)) static IOSByteArray *NetI2pRouterTransportUdpPacketBuilder_getOurExplicitIP(NetI2pRouterTransportUdpPacketBuilder *self);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPacketBuilder_getOurExplicitPort(NetI2pRouterTransportUdpPacketBuilder *self);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildRelayRequestWithJavaNetInetAddress_withInt_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withLong_withNetI2pDataSessionKey_withLong_(NetI2pRouterTransportUdpPacketBuilder *self, JavaNetInetAddress *introHost, jint introPort, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, jlong introTag, NetI2pDataSessionKey *ourIntroKey, jlong introNonce);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(NetI2pRouterTransportUdpPacketBuilder *self, jbyte flagByte);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, jbyte flagByte, IOSByteArray *extendedOptions);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(NetI2pRouterTransportUdpUDPPacket *packet, JavaNetInetAddress *ip, jint port);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off);

__attribute__((unused)) static jint NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off, jint maxLen);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey);

__attribute__((unused)) static void NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, IOSByteArray *iv);

@implementation NetI2pRouterTransportUdpPacketBuilder

+ (jint)TYPE_FIRST {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_FIRST;
}

+ (jint)TYPE_ACK {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_ACK;
}

+ (jint)TYPE_PUNCH {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_PUNCH;
}

+ (jint)TYPE_RESP {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_RESP;
}

+ (jint)TYPE_INTRO {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_INTRO;
}

+ (jint)TYPE_RREQ {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_RREQ;
}

+ (jint)TYPE_TCB {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_TCB;
}

+ (jint)TYPE_TBC {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_TBC;
}

+ (jint)TYPE_TTA {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_TTA;
}

+ (jint)TYPE_TFA {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_TFA;
}

+ (jint)TYPE_CONF {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_CONF;
}

+ (jint)TYPE_SREQ {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_SREQ;
}

+ (jint)TYPE_CREAT {
  return NetI2pRouterTransportUdpPacketBuilder_TYPE_CREAT;
}

+ (jint)HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
}

+ (jint)FRAGMENT_HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_FRAGMENT_HEADER_SIZE;
}

+ (jint)DATA_HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_DATA_HEADER_SIZE;
}

+ (jint)IP_HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_IP_HEADER_SIZE;
}

+ (jint)UDP_HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE;
}

+ (jint)MIN_DATA_PACKET_OVERHEAD {
  return NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD;
}

+ (jint)IPV6_HEADER_SIZE {
  return NetI2pRouterTransportUdpPacketBuilder_IPV6_HEADER_SIZE;
}

+ (jint)MIN_IPV6_DATA_PACKET_OVERHEAD {
  return NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD;
}

+ (jint)ABSOLUTE_MAX_ACKS {
  return NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self, ctx, transport);
  return self;
}

+ (jint)getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                  withInt:(jint)numFragments
                                                                  withInt:(jint)curDataSize {
  return NetI2pRouterTransportUdpPacketBuilder_getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState_withInt_withInt_(peer, numFragments, curDataSize);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state
                                                                                           withInt:(jint)fragment
                                                             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                            withJavaUtilCollection:(id<JavaUtilCollection>)ackIdsRemaining
                                                                                           withInt:(jint)newAckCount
                                                                                  withJavaUtilList:(id<JavaUtilList>)partialACKsRemaining {
  id<JavaUtilList> frags = JavaUtilCollections_singletonListWithId_(create_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(state, fragment));
  return [self buildPacketWithJavaUtilList:frags withNetI2pRouterTransportUdpPeerState:peer withJavaUtilCollection:ackIdsRemaining withInt:newAckCount withJavaUtilList:partialACKsRemaining];
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithJavaUtilList:(id<JavaUtilList>)fragments
                             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                            withJavaUtilCollection:(id<JavaUtilCollection>)ackIdsRemaining
                                                           withInt:(jint)newAckCount
                                                  withJavaUtilList:(id<JavaUtilList>)partialACKsRemaining {
  JavaLangStringBuilder *msg = nil;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    msg = create_JavaLangStringBuilder_initWithInt_(256);
    [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"Data pkt to "])) appendWithNSString:[((NetI2pDataHash *) nil_chk([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])) toBase64]];
  }
  jint numFragments = [((id<JavaUtilList>) nil_chk(fragments)) size];
  jint dataSize = 0;
  for (jint i = 0; i < numFragments; i++) {
    NetI2pRouterTransportUdpPacketBuilder_Fragment *frag = [fragments getWithInt:i];
    NetI2pRouterTransportUdpOutboundMessageState *state = ((NetI2pRouterTransportUdpPacketBuilder_Fragment *) nil_chk(frag))->state_;
    jint fragment = frag->num_;
    jint sz = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) fragmentSizeWithInt:fragment];
    dataSize += sz;
    if (msg != nil) {
      [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" Fragment "])) appendWithInt:i];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@": msg "])) appendWithLong:[state getMessageId]])) appendWithChar:' '])) appendWithInt:fragment];
      [((JavaLangStringBuilder *) nil_chk([msg appendWithChar:'/'])) appendWithInt:[state getFragmentCount]];
      [((JavaLangStringBuilder *) nil_chk([msg appendWithChar:' '])) appendWithInt:sz];
    }
  }
  if (dataSize < 0) return nil;
  jint currentMTU = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getMTU];
  jint availableForAcks = currentMTU - dataSize;
  jint ipHeaderSize;
  if ([peer isIPv6]) {
    availableForAcks -= NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD;
    ipHeaderSize = NetI2pRouterTransportUdpPacketBuilder_IPV6_HEADER_SIZE;
  }
  else {
    availableForAcks -= NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD;
    ipHeaderSize = NetI2pRouterTransportUdpPacketBuilder_IP_HEADER_SIZE;
  }
  if (numFragments > 1) availableForAcks -= (numFragments - 1) * NetI2pRouterTransportUdpPacketBuilder_FRAGMENT_HEADER_SIZE;
  jint availableForExplicitAcks = availableForAcks;
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_DATA_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  *IOSByteArray_GetRef(nil_chk(data), off) |= NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_WANT_REPLY;
  jint partialAcksToSend = 0;
  if (availableForExplicitAcks >= 6 && ![((id<JavaUtilList>) nil_chk(partialACKsRemaining)) isEmpty]) {
    for (id<NetI2pRouterTransportUdpACKBitfield> __strong bf in nil_chk(partialACKsRemaining)) {
      if (partialAcksToSend >= NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS) break;
      if ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bf)) receivedComplete]) continue;
      jint bits = [bf highestReceived] + 1;
      if (bits <= 0) continue;
      jint acksz = bits / 7;
      if (bits % 7 > 0) acksz++;
      acksz += 4;
      if (partialAcksToSend == 0) acksz++;
      if (availableForExplicitAcks >= acksz) {
        availableForExplicitAcks -= acksz;
        partialAcksToSend++;
      }
      else {
        break;
      }
    }
    if (partialAcksToSend > 0) *IOSByteArray_GetRef(data, off) |= NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_ACK_BITFIELDS;
  }
  if (availableForExplicitAcks >= 5 && ![((id<JavaUtilCollection>) nil_chk(ackIdsRemaining)) isEmpty]) {
    *IOSByteArray_GetRef(data, off) |= NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_EXPLICIT_ACK;
  }
  off++;
  if (msg != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" Total data: "])) appendWithInt:dataSize])) appendWithNSString:@" bytes, mtu: "])) appendWithInt:currentMTU])) appendWithNSString:@", "])) appendWithInt:newAckCount])) appendWithNSString:@" new full acks requested, "])) appendWithInt:[((id<JavaUtilCollection>) nil_chk(ackIdsRemaining)) size] - newAckCount])) appendWithNSString:@" resend acks requested, "])) appendWithInt:[((id<JavaUtilList>) nil_chk(partialACKsRemaining)) size]])) appendWithNSString:@" partial acks requested, "])) appendWithInt:availableForAcks])) appendWithNSString:@" avail. for all acks, "])) appendWithInt:availableForExplicitAcks])) appendWithNSString:@" for full acks, "];
  }
  jint explicitToSend = JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS, JavaLangMath_minWithInt_withInt_(newAckCount + (currentMTU > NetI2pRouterTransportUdpPeerState_MIN_MTU ? NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_LARGE : NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_SMALL), JavaLangMath_minWithInt_withInt_((availableForExplicitAcks - 1) / 4, [((id<JavaUtilCollection>) nil_chk(ackIdsRemaining)) size])));
  if (explicitToSend > 0) {
    if (msg != nil) [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:explicitToSend])) appendWithNSString:@" full acks included:"];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, explicitToSend);
    off++;
    id<JavaUtilIterator> iter = [ackIdsRemaining iterator];
    for (jint i = 0; i < explicitToSend && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; i++) {
      JavaLangLong *ackId = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      [iter remove];
      NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [((JavaLangLong *) nil_chk(ackId)) longLongValue]);
      off += 4;
      if (msg != nil) [((JavaLangStringBuilder *) nil_chk([msg appendWithChar:' '])) appendWithLong:[ackId longLongValue]];
    }
  }
  if (partialAcksToSend > 0) {
    if (msg != nil) [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:partialAcksToSend])) appendWithNSString:@" partial acks included:"];
    jint origNumRemaining = [((id<JavaUtilList>) nil_chk(partialACKsRemaining)) size];
    jint numPartialOffset = off;
    off++;
    id<JavaUtilIterator> iter = [partialACKsRemaining iterator];
    for (jint i = 0; i < partialAcksToSend && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; i++) {
      id<NetI2pRouterTransportUdpACKBitfield> bitfield = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      if ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bitfield)) receivedComplete]) continue;
      jint bits = [bitfield highestReceived] + 1;
      if (bits <= 0) continue;
      jint size = bits / 7;
      if (bits % 7 > 0) size++;
      NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [bitfield getMessageId]);
      off += 4;
      for (jint curByte = 0; curByte < size; curByte++) {
        if (curByte + 1 < size) *IOSByteArray_GetRef(data, off) = (jbyte) (JreLShift32(1, 7));
        else *IOSByteArray_GetRef(data, off) = 0;
        for (jint curBit = 0; curBit < 7; curBit++) {
          if ([bitfield receivedWithInt:curBit + 7 * curByte]) *IOSByteArray_GetRef(data, off) |= (jbyte) (JreLShift32(1, curBit));
        }
        off++;
      }
      [iter remove];
      if (msg != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithChar:' '])) appendWithId:bitfield])) appendWithNSString:@" with ack bytes: "])) appendWithInt:size];
    }
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, numPartialOffset, 1, origNumRemaining - [partialACKsRemaining size]);
  }
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, numFragments);
  off++;
  jint sizeWritten = 0;
  for (jint i = 0; i < numFragments; i++) {
    NetI2pRouterTransportUdpPacketBuilder_Fragment *frag = [fragments getWithInt:i];
    NetI2pRouterTransportUdpOutboundMessageState *state = ((NetI2pRouterTransportUdpPacketBuilder_Fragment *) nil_chk(frag))->state_;
    jint fragment = frag->num_;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessageId]);
    off += 4;
    *IOSByteArray_GetRef(data, off) = (jbyte) (JreLShift32(fragment, 1));
    if (fragment == [state getFragmentCount] - 1) *IOSByteArray_GetRef(data, off) |= 1;
    off++;
    jint fragSize = [state fragmentSizeWithInt:fragment];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, fragSize);
    *IOSByteArray_GetRef(data, off) &= (jbyte) (jint) 0x3F;
    off += 2;
    jint sz = [state writeFragmentWithByteArray:data withInt:off withInt:fragment];
    off += sz;
    sizeWritten += sz;
  }
  if (sizeWritten != dataSize) {
    if (sizeWritten < 0) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Write failed for ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(fragments))];
    }
    else {
      [_log_ errorWithNSString:JreStrcat("$I$I$$", @"Size written: ", sizeWritten, @" but size: ", dataSize, @" for ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(fragments))];
    }
    [packet release__];
    return nil;
  }
  if (dataSize == 0) {
    [_log_ errorWithNSString:JreStrcat("$$", @"Sending zero-size fragment??? for ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(fragments))];
  }
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_withInt_(self, data, off, currentMTU - (ipHeaderSize + NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE));
  [pkt setLengthWithInt:off];
  if (msg != nil) {
    [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" pkt size "])) appendWithInt:off + (ipHeaderSize + NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE)];
    [_log_ infoWithNSString:[msg description]];
  }
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, [peer getCurrentCipherKey], [peer getCurrentMACKey]);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, [peer getRemoteIPAddress], [peer getRemotePort]);
  jint maxMTU = [peer isIPv6] ? NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU : NetI2pRouterTransportUdpPeerState_LARGE_MTU;
  if (off + (ipHeaderSize + NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE) > maxMTU) {
    [_log_ errorWithNSString:JreStrcat("$I$@$I$I$ICI$I$I$I$$", @"Size is ", off, @" for ", packet, @" data size ", dataSize, @" pkt size ", (off + (ipHeaderSize + NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE)), @" MTU ", currentMTU, ' ', availableForAcks, @" for all acks, ", availableForExplicitAcks, @" for full acks, ", explicitToSend, @" full acks included, ", partialAcksToSend, @" partial acks included,  Fragments: ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(fragments)) withJavaLangThrowable:create_JavaLangException_init()];
  }
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPingWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  return [self buildACKWithNetI2pRouterTransportUdpPeerState:peer withJavaUtilList:JavaUtilCollections_emptyList()];
}

- (NetI2pRouterTransportUdpUDPPacket *)buildACKWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                                                    withJavaUtilList:(id<JavaUtilList>)ackBitfields {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_DATA_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  JavaLangStringBuilder *msg = nil;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    msg = create_JavaLangStringBuilder_initWithInt_(128);
    [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"building ACK packet to "])) appendWithNSString:[((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])) toBase64])) java_substring:0 endIndex:6]];
  }
  jint fullACKCount = 0;
  jint partialACKCount = 0;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(ackBitfields)) size]; i++) {
    if ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk([ackBitfields getWithInt:i])) receivedComplete]) fullACKCount++;
    else partialACKCount++;
  }
  if (fullACKCount > NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS || partialACKCount > NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$ICI", @"Too many acks full/partial ", fullACKCount, '/', partialACKCount));
  if (fullACKCount > 0) *IOSByteArray_GetRef(nil_chk(data), off) |= NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_EXPLICIT_ACK;
  if (partialACKCount > 0) *IOSByteArray_GetRef(nil_chk(data), off) |= NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_ACK_BITFIELDS;
  off++;
  if (fullACKCount > 0) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, fullACKCount);
    off++;
    for (jint i = 0; i < [ackBitfields size]; i++) {
      id<NetI2pRouterTransportUdpACKBitfield> bf = [ackBitfields getWithInt:i];
      if ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bf)) receivedComplete]) {
        NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [bf getMessageId]);
        off += 4;
        if (msg != nil) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" full ack: "])) appendWithLong:[bf getMessageId]];
      }
    }
  }
  if (partialACKCount > 0) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, partialACKCount);
    off++;
    for (jint i = 0; i < [ackBitfields size]; i++) {
      id<NetI2pRouterTransportUdpACKBitfield> bitfield = [ackBitfields getWithInt:i];
      if ([((id<NetI2pRouterTransportUdpACKBitfield>) nil_chk(bitfield)) receivedComplete]) continue;
      NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [bitfield getMessageId]);
      off += 4;
      jint bits = [bitfield highestReceived] + 1;
      jint size = bits / 7;
      if (bits == 0 || bits % 7 > 0) size++;
      for (jint curByte = 0; curByte < size; curByte++) {
        if (curByte + 1 < size) *IOSByteArray_GetRef(nil_chk(data), off) = (jbyte) (JreLShift32(1, 7));
        else *IOSByteArray_GetRef(nil_chk(data), off) = 0;
        for (jint curBit = 0; curBit < 7; curBit++) {
          if ([bitfield receivedWithInt:curBit + 7 * curByte]) *IOSByteArray_GetRef(data, off) |= (jbyte) (JreLShift32(1, curBit));
        }
        off++;
      }
      if (msg != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" partial ack: "])) appendWithId:bitfield])) appendWithNSString:@" with ack bytes: "])) appendWithInt:size];
    }
  }
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, 0);
  off++;
  if (msg != nil) [_log_ debugWithNSString:[msg description]];
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getCurrentCipherKey], [peer getCurrentMACKey]);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, [peer getRemoteIPAddress], [peer getRemotePort]);
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionCreatedPacketWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)state
                                                                                                          withInt:(jint)externalPort
                                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_SESSION_CREATED_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  JavaNetInetAddress *to = nil;
  @try {
    to = JavaNetInetAddress_getByAddressWithByteArray_([((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(state)) getSentIP]);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$", @"How did we think this was a valid IP?  ", [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([state getRemoteHostId])) description])];
    [packet release__];
    return nil;
  }
  [state prepareSessionCreated];
  IOSByteArray *sentIP = [state getSentIP];
  if ((sentIP == nil) || (((IOSByteArray *) nil_chk(sentIP))->size_ <= 0) || (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:sentIP])) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$@", @"How did our sent IP become invalid? ", state)];
    [state fail];
    [packet release__];
    return nil;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([state getSentY], 0, data, off, ((IOSByteArray *) nil_chk([state getSentY]))->size_);
  off += ((IOSByteArray *) nil_chk([state getSentY]))->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(sentIP))->size_);
  off += 1;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sentIP, 0, data, off, sentIP->size_);
  off += sentIP->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, [state getSentPort]);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [state getSentRelayTag]);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [state getSentSignedOnTime]);
  off += 4;
  NetI2pDataSignature *sig = [state getSentSignature];
  jint siglen = [((NetI2pDataSignature *) nil_chk(sig)) length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([sig getData], 0, data, off, siglen);
  off += siglen;
  jint rem = siglen % 16;
  jint padding;
  if (rem > 0) {
    padding = 16 - rem;
    [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextBytesWithByteArray:data withInt:off withInt:padding];
    off += padding;
  }
  else {
    padding = 0;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [buf appendWithNSString:@"Sending sessionCreated:"];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Alice: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(sentIP, [state getSentPort])];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Bob: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_([state getReceivedOurIP], externalPort)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" RelayTag: "])) appendWithLong:[state getSentRelayTag]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" SignedOn: "])) appendWithLong:[state getSentSignedOnTime]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" signature: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_([sig getData])];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\nRawCreated: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, 0, off)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\nsignedTime: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, off - padding - siglen - 4, 4)];
    [_log_ debugWithNSString:[buf description]];
  }
  IOSByteArray *iv = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportUdpUDPPacket_IV_SIZE);
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextBytesWithByteArray:iv];
  jint encrWrite = siglen + padding;
  jint sigBegin = off - encrWrite;
  [((NetI2pCryptoAESEngine *) nil_chk([_context_ aes])) encryptWithByteArray:data withInt:sigBegin withByteArray:data withInt:sigBegin withNetI2pDataSessionKey:[state getCipherKey] withByteArray:iv withInt:encrWrite];
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_(self, packet, ourIntroKey, ourIntroKey, iv);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, to, [state getSentPort]);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(iv);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_CREAT];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionRequestPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state {
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  IOSByteArray *options;
  jboolean ext = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) isExtendedOptionsAllowed];
  if (ext) {
    options = [IOSByteArray arrayWithLength:NetI2pRouterTransportUdpUDPPacket_SESS_REQ_MIN_EXT_OPTIONS_LENGTH];
    jboolean intro = [state needIntroduction];
    if (intro) *IOSByteArray_GetRef(options, 1) = (jbyte) NetI2pRouterTransportUdpUDPPacket_SESS_REQ_EXT_FLAG_REQUEST_RELAY_TAG;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$ZC@", @"send sess req. w/ ext. options, need intro? ", intro, ' ', state)];
    off += NetI2pRouterTransportUdpUDPPacket_SESS_REQ_MIN_EXT_OPTIONS_LENGTH + 1;
  }
  else {
    options = nil;
  }
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_withByteArray_(self, NetI2pRouterTransportUdpPacketBuilder_SESSION_REQUEST_FLAG_BYTE, options);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  IOSByteArray *toIP = [state getSentIP];
  if (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:toIP]) {
    [packet release__];
    return nil;
  }
  JavaNetInetAddress *to = nil;
  @try {
    to = JavaNetInetAddress_getByAddressWithByteArray_(toIP);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$", @"How did we think this was a valid IP?  ", [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([state getRemoteHostId])) description])];
    [packet release__];
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Sending request to ", NetI2pUtilAddresses_toStringWithByteArray_(toIP))];
  IOSByteArray *x = [state getSentX];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(x, 0, data, off, ((IOSByteArray *) nil_chk(x))->size_);
  off += x->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(toIP))->size_);
  off += 1;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(toIP, 0, data, off, toIP->size_);
  off += toIP->size_;
  jint port = [state getSentPort];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, port);
  off += 2;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, [state getIntroKey], [state getIntroKey]);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, to, port);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_SREQ];
  return packet;
}

- (IOSObjectArray *)buildSessionConfirmedPacketsWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                                withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)ourIdentity {
  IOSByteArray *identity = [((NetI2pDataRouterRouterIdentity *) nil_chk(ourIdentity)) toByteArray];
  jint numFragments = ((IOSByteArray *) nil_chk(identity))->size_ / NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE;
  if (numFragments * NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE != identity->size_) numFragments++;
  IOSObjectArray *packets = [IOSObjectArray arrayWithLength:numFragments type:NetI2pRouterTransportUdpUDPPacket_class_()];
  for (jint i = 0; i < numFragments; i++) IOSObjectArray_Set(packets, i, NetI2pRouterTransportUdpPacketBuilder_buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState_withInt_withInt_withByteArray_(self, state, i, numFragments, identity));
  return packets;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                                                                             withInt:(jint)fragmentNum
                                                                                                             withInt:(jint)numFragments
                                                                                                       withByteArray:(IOSByteArray *)identity {
  return NetI2pRouterTransportUdpPacketBuilder_buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState_withInt_withInt_withByteArray_(self, state, fragmentNum, numFragments, identity);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$@", @"building session destroy packet to ", [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])];
  }
  return NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(self, [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getCurrentCipherKey], [peer getCurrentMACKey], [peer getRemoteIPAddress], [peer getRemotePort]);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)peer {
  NetI2pDataSessionKey *cipherKey = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(peer)) getCipherKey];
  NetI2pDataSessionKey *macKey = [peer getMACKey];
  IOSByteArray *ip = [peer getSentIP];
  jint port = [peer getSentPort];
  if (cipherKey == nil || macKey == nil || ip == nil || port <= 0) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Cannot send destroy, incomplete ", peer)];
    return nil;
  }
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByAddressWithByteArray_(ip);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"building session destroy packet to ", peer)];
  return NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(self, cipherKey, macKey, addr, port);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pRouterTransportUdpInboundEstablishState:(NetI2pRouterTransportUdpInboundEstablishState *)peer {
  NetI2pDataSessionKey *cipherKey = [((NetI2pRouterTransportUdpInboundEstablishState *) nil_chk(peer)) getCipherKey];
  NetI2pDataSessionKey *macKey = [peer getMACKey];
  IOSByteArray *ip = [peer getSentIP];
  jint port = [peer getSentPort];
  if (cipherKey == nil || macKey == nil || ip == nil || port <= 0) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Cannot send destroy, incomplete ", peer)];
    return nil;
  }
  JavaNetInetAddress *addr;
  @try {
    addr = JavaNetInetAddress_getByAddressWithByteArray_(ip);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"building session destroy packet to ", peer)];
  return NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(self, cipherKey, macKey, addr, port);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildSessionDestroyPacketWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                                                  withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                                                 withInt:(jint)port {
  return NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(self, cipherKey, macKey, addr, port);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestFromAliceWithJavaNetInetAddress:(JavaNetInetAddress *)toIP
                                                                            withInt:(jint)toPort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toIntroKey
                                                                           withLong:(jlong)nonce
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey {
  return [self buildPeerTestFromAliceWithJavaNetInetAddress:toIP withInt:toPort withNetI2pDataSessionKey:toIntroKey withNetI2pDataSessionKey:toIntroKey withLong:nonce withNetI2pDataSessionKey:aliceIntroKey];
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestFromAliceWithJavaNetInetAddress:(JavaNetInetAddress *)toIP
                                                                            withInt:(jint)toPort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toCipherKey
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)toMACKey
                                                                           withLong:(jlong)nonce
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$", @"Sending peer test ", nonce, @" to Bob")];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, nonce);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, 0);
  off++;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, 0);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(aliceIntroKey)) getData], 0, data, off, NetI2pDataSessionKey_KEYSIZE_BYTES);
  off += NetI2pDataSessionKey_KEYSIZE_BYTES;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, toCipherKey, toMACKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, toIP, toPort);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_TFA];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToAliceWithJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                          withInt:(jint)alicePort
                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieIntroKey
                                                                         withLong:(jlong)nonce {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$", @"Sending peer test ", nonce, @" to Alice")];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, nonce);
  off += 4;
  IOSByteArray *ip = [((JavaNetInetAddress *) nil_chk(aliceIP)) getAddress];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(ip))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, data, off, ip->size_);
  off += ip->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, alicePort);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(charlieIntroKey)) getData], 0, data, off, NetI2pDataSessionKey_KEYSIZE_BYTES);
  off += NetI2pDataSessionKey_KEYSIZE_BYTES;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, aliceIntroKey, aliceIntroKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, aliceIP, alicePort);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_TTA];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToCharlieWithJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                            withInt:(jint)alicePort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                                           withLong:(jlong)nonce
                                                             withJavaNetInetAddress:(JavaNetInetAddress *)charlieIP
                                                                            withInt:(jint)charliePort
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieCipherKey
                                                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)charlieMACKey {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$", @"Sending peer test ", nonce, @" to Charlie")];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, nonce);
  off += 4;
  IOSByteArray *ip = [((JavaNetInetAddress *) nil_chk(aliceIP)) getAddress];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(ip))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, data, off, ip->size_);
  off += ip->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, alicePort);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(aliceIntroKey)) getData], 0, data, off, NetI2pDataSessionKey_KEYSIZE_BYTES);
  off += NetI2pDataSessionKey_KEYSIZE_BYTES;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, charlieCipherKey, charlieMACKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, charlieIP, charliePort);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_TBC];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPeerTestToBobWithJavaNetInetAddress:(JavaNetInetAddress *)bobIP
                                                                        withInt:(jint)bobPort
                                                         withJavaNetInetAddress:(JavaNetInetAddress *)aliceIP
                                                                        withInt:(jint)alicePort
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)aliceIntroKey
                                                                       withLong:(jlong)nonce
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobCipherKey
                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobMACKey {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$", @"Sending peer test ", nonce, @" to Bob")];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, nonce);
  off += 4;
  IOSByteArray *ip = [((JavaNetInetAddress *) nil_chk(aliceIP)) getAddress];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(ip))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, data, off, ip->size_);
  off += ip->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, alicePort);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(aliceIntroKey)) getData], 0, data, off, NetI2pDataSessionKey_KEYSIZE_BYTES);
  off += NetI2pDataSessionKey_KEYSIZE_BYTES;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, bobCipherKey, bobMACKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, bobIP, bobPort);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_TCB];
  return packet;
}

- (IOSByteArray *)getOurExplicitIP {
  return NetI2pRouterTransportUdpPacketBuilder_getOurExplicitIP(self);
}

- (jint)getOurExplicitPort {
  return NetI2pRouterTransportUdpPacketBuilder_getOurExplicitPort(self);
}

- (id<JavaUtilList>)buildRelayRequestWithNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                           withNetI2pRouterTransportUdpOutboundEstablishState:(NetI2pRouterTransportUdpOutboundEstablishState *)state
                                                     withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey {
  NetI2pRouterTransportUdpUDPAddress *addr = [((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getRemoteAddress];
  jint count = [((NetI2pRouterTransportUdpUDPAddress *) nil_chk(addr)) getIntroducerCount];
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(count);
  jlong cutoff = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] + 5 * 60 * 1000LL;
  for (jint i = 0; i < count; i++) {
    JavaNetInetAddress *iaddr = [addr getIntroducerHostWithInt:i];
    jint iport = [addr getIntroducerPortWithInt:i];
    IOSByteArray *ikey = [addr getIntroducerKeyWithInt:i];
    jlong tag = [addr getIntroducerTagWithInt:i];
    jlong exp = [addr getIntroducerExpirationWithInt:i];
    if (ikey == nil || !NetI2pRouterTransportTransportUtil_isValidPortWithInt_(iport) || iaddr == nil || tag <= 0 || ((IOSByteArray *) nil_chk([iaddr getAddress]))->size_ != 4 || (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:[iaddr getAddress]]) || (exp > 0 && exp < cutoff) || (JavaUtilArrays_equalsWithByteArray_withByteArray_([iaddr getAddress], [_transport_ getExternalIP]) && ![_transport_ allowLocal])) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$I", @"Cannot build a relay request to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([state getRemoteIdentity])) calculateHash], @", as their UDP address is invalid: addr=", addr, @" index=", i)];
      continue;
    }
    NetI2pDataSessionKey *cipherKey = nil;
    NetI2pDataSessionKey *macKey = nil;
    NetI2pRouterTransportUdpPeerState *bobState = nil;
    if (ikey->size_ == NetI2pDataHash_HASH_LENGTH) {
      bobState = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(transport)) getPeerStateWithNetI2pDataHash:create_NetI2pDataHash_initWithByteArray_(ikey)];
    }
    if (bobState == nil) {
      NetI2pRouterTransportUdpRemoteHostId *rhid = create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_([iaddr getAddress], iport);
      bobState = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(transport)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:rhid];
    }
    if (bobState != nil) {
      cipherKey = [bobState getCurrentCipherKey];
      macKey = [bobState getCurrentMACKey];
    }
    if (cipherKey == nil || macKey == nil) {
      cipherKey = create_NetI2pDataSessionKey_initWithByteArray_(ikey);
      macKey = cipherKey;
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@CI", @"Sending relay request (w/ intro key) to ", iaddr, ':', iport)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@CI", @"Sending relay request (in-session) to ", iaddr, ':', iport)];
    }
    [rv addWithId:NetI2pRouterTransportUdpPacketBuilder_buildRelayRequestWithJavaNetInetAddress_withInt_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withLong_withNetI2pDataSessionKey_withLong_(self, iaddr, iport, cipherKey, macKey, tag, ourIntroKey, [state getIntroNonce])];
  }
  return rv;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayRequestWithJavaNetInetAddress:(JavaNetInetAddress *)introHost
                                                                       withInt:(jint)introPort
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                                                      withLong:(jlong)introTag
                                                      withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ourIntroKey
                                                                      withLong:(jlong)introNonce {
  return NetI2pRouterTransportUdpPacketBuilder_buildRelayRequestWithJavaNetInetAddress_withInt_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withLong_withNetI2pDataSessionKey_withLong_(self, introHost, introPort, cipherKey, macKey, introTag, ourIntroKey, introNonce);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)alice
                                                         withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)charlie
                                withNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader:(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *)request {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_INTRO_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@", @"Sending intro to ", charlie, @" for ", alice)];
  IOSByteArray *ip = [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(alice)) getIP];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(ip))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, data, off, ip->size_);
  off += ip->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, [alice getPort]);
  off += 2;
  jint sz = [((NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *) nil_chk(request)) readChallengeSize];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, sz);
  off++;
  if (sz > 0) {
    [request readChallengeSizeWithByteArray:data withInt:off];
    off += sz;
  }
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, [((NetI2pRouterTransportUdpPeerState *) nil_chk(charlie)) getCurrentCipherKey], [charlie getCurrentMACKey]);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, [charlie getRemoteIPAddress], [charlie getRemotePort]);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_INTRO];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)alice
                                                            withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)charlie
                                                                                         withLong:(jlong)nonce
                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                                                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey {
  JavaNetInetAddress *aliceAddr = nil;
  @try {
    aliceAddr = JavaNetInetAddress_getByAddressWithByteArray_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(alice)) getIP]);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    return nil;
  }
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_RESPONSE_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@$@", @"Sending relay response to ", alice, @" for ", charlie, @" with key ", cipherKey)];
  IOSByteArray *charlieIP = [((NetI2pRouterTransportUdpPeerState *) nil_chk(charlie)) getRemoteIP];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(charlieIP))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(charlieIP, 0, data, off, charlieIP->size_);
  off += charlieIP->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, [charlie getRemotePort]);
  off += 2;
  IOSByteArray *aliceIP = [alice getIP];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ((IOSByteArray *) nil_chk(aliceIP))->size_);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(aliceIP, 0, data, off, aliceIP->size_);
  off += aliceIP->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, [alice getPort]);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, nonce);
  off += 4;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, cipherKey, macKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, aliceAddr, [alice getPort]);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_RESP];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildHolePunchWithJavaNetInetAddress:(JavaNetInetAddress *)to
                                                                    withInt:(jint)port {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(_context_, false);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@CI", @"Sending relay hole punch to ", to, ':', port)];
  [((JavaNetDatagramPacket *) nil_chk([((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket])) setLengthWithInt:0];
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, to, port);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_PUNCH];
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketWithByteArray:(IOSByteArray *)data
                                         withJavaNetInetAddress:(JavaNetInetAddress *)to
                                                        withInt:(jint)port {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(_context_, false);
  IOSByteArray *d = [((JavaNetDatagramPacket *) nil_chk([((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket])) getData];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, d, 0, ((IOSByteArray *) nil_chk(data))->size_);
  [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) setLengthWithInt:data->size_];
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, to, port);
  return packet;
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketHeaderWithByte:(jbyte)flagByte {
  return NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, flagByte);
}

- (NetI2pRouterTransportUdpUDPPacket *)buildPacketHeaderWithByte:(jbyte)flagByte
                                                   withByteArray:(IOSByteArray *)extendedOptions {
  return NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_withByteArray_(self, flagByte, extendedOptions);
}

+ (void)setToWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                            withJavaNetInetAddress:(JavaNetInetAddress *)ip
                                           withInt:(jint)port {
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, ip, port);
}

- (jint)pad1WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off {
  return NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
}

- (jint)pad2WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off {
  return NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
}

- (jint)pad2WithByteArray:(IOSByteArray *)data
                  withInt:(jint)off
                  withInt:(jint)maxLen {
  return NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_withInt_(self, data, off, maxLen);
}

- (void)authenticateWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey {
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, cipherKey, macKey);
}

- (void)authenticateWithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)cipherKey
                                 withNetI2pDataSessionKey:(NetI2pDataSessionKey *)macKey
                                            withByteArray:(IOSByteArray *)iv {
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_(self, packet, cipherKey, macKey, iv);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "[LNetI2pRouterTransportUdpUDPPacket;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 21, 9, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 21, 16, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, 21, 23, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 24, 26, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 33, 34, -1, 35, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, 33, 36, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x0, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x0, 39, 40, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x1, 3, 43, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacket;", 0x2, 44, 46, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 48, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 49, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 51, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 55, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState:withInt:withInt:);
  methods[2].selector = @selector(buildPacketWithNetI2pRouterTransportUdpOutboundMessageState:withInt:withNetI2pRouterTransportUdpPeerState:withJavaUtilCollection:withInt:withJavaUtilList:);
  methods[3].selector = @selector(buildPacketWithJavaUtilList:withNetI2pRouterTransportUdpPeerState:withJavaUtilCollection:withInt:withJavaUtilList:);
  methods[4].selector = @selector(buildPingWithNetI2pRouterTransportUdpPeerState:);
  methods[5].selector = @selector(buildACKWithNetI2pRouterTransportUdpPeerState:withJavaUtilList:);
  methods[6].selector = @selector(buildSessionCreatedPacketWithNetI2pRouterTransportUdpInboundEstablishState:withInt:withNetI2pDataSessionKey:);
  methods[7].selector = @selector(buildSessionRequestPacketWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[8].selector = @selector(buildSessionConfirmedPacketsWithNetI2pRouterTransportUdpOutboundEstablishState:withNetI2pDataRouterRouterIdentity:);
  methods[9].selector = @selector(buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState:withInt:withInt:withByteArray:);
  methods[10].selector = @selector(buildSessionDestroyPacketWithNetI2pRouterTransportUdpPeerState:);
  methods[11].selector = @selector(buildSessionDestroyPacketWithNetI2pRouterTransportUdpOutboundEstablishState:);
  methods[12].selector = @selector(buildSessionDestroyPacketWithNetI2pRouterTransportUdpInboundEstablishState:);
  methods[13].selector = @selector(buildSessionDestroyPacketWithNetI2pDataSessionKey:withNetI2pDataSessionKey:withJavaNetInetAddress:withInt:);
  methods[14].selector = @selector(buildPeerTestFromAliceWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withLong:withNetI2pDataSessionKey:);
  methods[15].selector = @selector(buildPeerTestFromAliceWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withLong:withNetI2pDataSessionKey:);
  methods[16].selector = @selector(buildPeerTestToAliceWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withLong:);
  methods[17].selector = @selector(buildPeerTestToCharlieWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withLong:withJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withNetI2pDataSessionKey:);
  methods[18].selector = @selector(buildPeerTestToBobWithJavaNetInetAddress:withInt:withJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withLong:withNetI2pDataSessionKey:withNetI2pDataSessionKey:);
  methods[19].selector = @selector(getOurExplicitIP);
  methods[20].selector = @selector(getOurExplicitPort);
  methods[21].selector = @selector(buildRelayRequestWithNetI2pRouterTransportUdpUDPTransport:withNetI2pRouterTransportUdpOutboundEstablishState:withNetI2pDataSessionKey:);
  methods[22].selector = @selector(buildRelayRequestWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withLong:withNetI2pDataSessionKey:withLong:);
  methods[23].selector = @selector(buildRelayIntroWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpPeerState:withNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader:);
  methods[24].selector = @selector(buildRelayResponseWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpPeerState:withLong:withNetI2pDataSessionKey:withNetI2pDataSessionKey:);
  methods[25].selector = @selector(buildHolePunchWithJavaNetInetAddress:withInt:);
  methods[26].selector = @selector(buildPacketWithByteArray:withJavaNetInetAddress:withInt:);
  methods[27].selector = @selector(buildPacketHeaderWithByte:);
  methods[28].selector = @selector(buildPacketHeaderWithByte:withByteArray:);
  methods[29].selector = @selector(setToWithNetI2pRouterTransportUdpUDPPacket:withJavaNetInetAddress:withInt:);
  methods[30].selector = @selector(pad1WithByteArray:withInt:);
  methods[31].selector = @selector(pad2WithByteArray:withInt:);
  methods[32].selector = @selector(pad2WithByteArray:withInt:withInt:);
  methods[33].selector = @selector(authenticateWithNetI2pRouterTransportUdpUDPPacket:withNetI2pDataSessionKey:withNetI2pDataSessionKey:);
  methods[34].selector = @selector(authenticateWithNetI2pRouterTransportUdpUDPPacket:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TYPE_FIRST", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_FIRST, 0x18, -1, -1, -1, -1 },
    { "TYPE_ACK", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_ACK, 0x18, -1, -1, -1, -1 },
    { "TYPE_PUNCH", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_PUNCH, 0x18, -1, -1, -1, -1 },
    { "TYPE_RESP", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_RESP, 0x18, -1, -1, -1, -1 },
    { "TYPE_INTRO", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_INTRO, 0x18, -1, -1, -1, -1 },
    { "TYPE_RREQ", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_RREQ, 0x18, -1, -1, -1, -1 },
    { "TYPE_TCB", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_TCB, 0x18, -1, -1, -1, -1 },
    { "TYPE_TBC", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_TBC, 0x18, -1, -1, -1, -1 },
    { "TYPE_TTA", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_TTA, 0x18, -1, -1, -1, -1 },
    { "TYPE_TFA", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_TFA, 0x18, -1, -1, -1, -1 },
    { "TYPE_CONF", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_CONF, 0x18, -1, -1, -1, -1 },
    { "TYPE_SREQ", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_SREQ, 0x18, -1, -1, -1, -1 },
    { "TYPE_CREAT", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_TYPE_CREAT, 0x18, -1, -1, -1, -1 },
    { "HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "FRAGMENT_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_FRAGMENT_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "DATA_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_DATA_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "IP_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_IP_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "UDP_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_UDP_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "MIN_DATA_PACKET_OVERHEAD", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD, 0x19, -1, -1, -1, -1 },
    { "IPV6_HEADER_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_IPV6_HEADER_SIZE, 0x19, -1, -1, -1, -1 },
    { "MIN_IPV6_DATA_PACKET_OVERHEAD", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD, 0x19, -1, -1, -1, -1 },
    { "ABSOLUTE_MAX_ACKS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_ABSOLUTE_MAX_ACKS, 0x19, -1, -1, -1, -1 },
    { "MAX_RESEND_ACKS_LARGE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_LARGE, 0x1a, -1, -1, -1, -1 },
    { "MAX_RESEND_ACKS_SMALL", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MAX_RESEND_ACKS_SMALL, 0x1a, -1, -1, -1, -1 },
    { "PROP_PADDING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "DEFAULT_ENABLE_PADDING", "Z", .constantValue.asBOOL = NetI2pRouterTransportUdpPacketBuilder_DEFAULT_ENABLE_PADDING, 0x1a, -1, -1, -1, -1 },
    { "SESSION_REQUEST_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_SESSION_REQUEST_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "SESSION_CREATED_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_SESSION_CREATED_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "SESSION_CONFIRMED_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_SESSION_CONFIRMED_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "PEER_RELAY_REQUEST_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_REQUEST_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "PEER_RELAY_RESPONSE_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_RESPONSE_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "PEER_RELAY_INTRO_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_INTRO_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "DATA_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_DATA_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "PEER_TEST_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_PEER_TEST_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "SESSION_DESTROY_FLAG_BYTE", "B", .constantValue.asChar = NetI2pRouterTransportUdpPacketBuilder_SESSION_DESTROY_FLAG_BYTE, 0x1a, -1, -1, -1, -1 },
    { "MAX_IDENTITY_FRAGMENT_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_PAD2", "I", .constantValue.asInt = NetI2pRouterTransportUdpPacketBuilder_MAX_PAD2, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;", "getMaxAdditionalFragmentSize", "LNetI2pRouterTransportUdpPeerState;II", "buildPacket", "LNetI2pRouterTransportUdpOutboundMessageState;ILNetI2pRouterTransportUdpPeerState;LJavaUtilCollection;ILJavaUtilList;", "(Lnet/i2p/router/transport/udp/OutboundMessageState;ILnet/i2p/router/transport/udp/PeerState;Ljava/util/Collection<Ljava/lang/Long;>;ILjava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;)Lnet/i2p/router/transport/udp/UDPPacket;", "LJavaUtilList;LNetI2pRouterTransportUdpPeerState;LJavaUtilCollection;ILJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/transport/udp/PacketBuilder$Fragment;>;Lnet/i2p/router/transport/udp/PeerState;Ljava/util/Collection<Ljava/lang/Long;>;ILjava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;)Lnet/i2p/router/transport/udp/UDPPacket;", "buildPing", "LNetI2pRouterTransportUdpPeerState;", "buildACK", "LNetI2pRouterTransportUdpPeerState;LJavaUtilList;", "(Lnet/i2p/router/transport/udp/PeerState;Ljava/util/List<Lnet/i2p/router/transport/udp/ACKBitfield;>;)Lnet/i2p/router/transport/udp/UDPPacket;", "buildSessionCreatedPacket", "LNetI2pRouterTransportUdpInboundEstablishState;ILNetI2pDataSessionKey;", "buildSessionRequestPacket", "LNetI2pRouterTransportUdpOutboundEstablishState;", "buildSessionConfirmedPackets", "LNetI2pRouterTransportUdpOutboundEstablishState;LNetI2pDataRouterRouterIdentity;", "buildSessionConfirmedPacket", "LNetI2pRouterTransportUdpOutboundEstablishState;II[B", "buildSessionDestroyPacket", "LNetI2pRouterTransportUdpInboundEstablishState;", "LNetI2pDataSessionKey;LNetI2pDataSessionKey;LJavaNetInetAddress;I", "buildPeerTestFromAlice", "LJavaNetInetAddress;ILNetI2pDataSessionKey;JLNetI2pDataSessionKey;", "LJavaNetInetAddress;ILNetI2pDataSessionKey;LNetI2pDataSessionKey;JLNetI2pDataSessionKey;", "buildPeerTestToAlice", "LJavaNetInetAddress;ILNetI2pDataSessionKey;LNetI2pDataSessionKey;J", "buildPeerTestToCharlie", "LJavaNetInetAddress;ILNetI2pDataSessionKey;JLJavaNetInetAddress;ILNetI2pDataSessionKey;LNetI2pDataSessionKey;", "buildPeerTestToBob", "LJavaNetInetAddress;ILJavaNetInetAddress;ILNetI2pDataSessionKey;JLNetI2pDataSessionKey;LNetI2pDataSessionKey;", "buildRelayRequest", "LNetI2pRouterTransportUdpUDPTransport;LNetI2pRouterTransportUdpOutboundEstablishState;LNetI2pDataSessionKey;", "(Lnet/i2p/router/transport/udp/UDPTransport;Lnet/i2p/router/transport/udp/OutboundEstablishState;Lnet/i2p/data/SessionKey;)Ljava/util/List<Lnet/i2p/router/transport/udp/UDPPacket;>;", "LJavaNetInetAddress;ILNetI2pDataSessionKey;LNetI2pDataSessionKey;JLNetI2pDataSessionKey;J", "buildRelayIntro", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpPeerState;LNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;", "buildRelayResponse", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpPeerState;JLNetI2pDataSessionKey;LNetI2pDataSessionKey;", "buildHolePunch", "LJavaNetInetAddress;I", "[BLJavaNetInetAddress;I", "buildPacketHeader", "B", "B[B", "setTo", "LNetI2pRouterTransportUdpUDPPacket;LJavaNetInetAddress;I", "pad1", "[BI", "pad2", "[BII", "authenticate", "LNetI2pRouterTransportUdpUDPPacket;LNetI2pDataSessionKey;LNetI2pDataSessionKey;", "LNetI2pRouterTransportUdpUDPPacket;LNetI2pDataSessionKey;LNetI2pDataSessionKey;[B", &NetI2pRouterTransportUdpPacketBuilder_PROP_PADDING, "LNetI2pRouterTransportUdpPacketBuilder_Fragment;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketBuilder = { "PacketBuilder", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 35, 40, -1, 57, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPacketBuilder;
}

@end

void NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPacketBuilder_class_()]);
}

NetI2pRouterTransportUdpPacketBuilder *new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPacketBuilder, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

NetI2pRouterTransportUdpPacketBuilder *create_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPacketBuilder, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

jint NetI2pRouterTransportUdpPacketBuilder_getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState_withInt_withInt_(NetI2pRouterTransportUdpPeerState *peer, jint numFragments, jint curDataSize) {
  NetI2pRouterTransportUdpPacketBuilder_initialize();
  jint available = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getMTU] - curDataSize;
  if ([peer isIPv6]) available -= NetI2pRouterTransportUdpPacketBuilder_MIN_IPV6_DATA_PACKET_OVERHEAD;
  else available -= NetI2pRouterTransportUdpPacketBuilder_MIN_DATA_PACKET_OVERHEAD;
  available -= numFragments * NetI2pRouterTransportUdpPacketBuilder_FRAGMENT_HEADER_SIZE;
  return available;
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildSessionConfirmedPacketWithNetI2pRouterTransportUdpOutboundEstablishState_withInt_withInt_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpOutboundEstablishState *state, jint fragmentNum, jint numFragments, IOSByteArray *identity) {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_SESSION_CONFIRMED_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  JavaNetInetAddress *to = nil;
  @try {
    to = JavaNetInetAddress_getByAddressWithByteArray_([((NetI2pRouterTransportUdpOutboundEstablishState *) nil_chk(state)) getSentIP]);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:JreStrcat("$$", @"How did we think this was a valid IP?  ", [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk([state getRemoteHostId])) description])];
    [packet release__];
    return nil;
  }
  *IOSByteArray_GetRef(nil_chk(data), off) = (jbyte) (JreLShift32(fragmentNum, 4));
  *IOSByteArray_GetRef(data, off) |= (numFragments & (jint) 0xF);
  off++;
  jint curFragSize = NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE;
  if (fragmentNum == numFragments - 1) {
    if (((IOSByteArray *) nil_chk(identity))->size_ % NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE != 0) curFragSize = identity->size_ % NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE;
  }
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, curFragSize);
  off += 2;
  jint curFragOffset = fragmentNum * NetI2pRouterTransportUdpPacketBuilder_MAX_IDENTITY_FRAGMENT_SIZE;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(identity, curFragOffset, data, off, curFragSize);
  off += curFragSize;
  if (fragmentNum == numFragments - 1) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, [state getSentSignedOnTime]);
    off += 4;
    NetI2pDataSignature *sig = [state getSentSignature];
    jint siglen = [((NetI2pDataSignature *) nil_chk(sig)) length];
    jint mod = (off + siglen) & (jint) 0x0f;
    if (mod != 0) {
      jint paddingRequired = 16 - mod;
      [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:data withInt:off withInt:paddingRequired];
      off += paddingRequired;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([sig getData], 0, data, off, siglen);
    off += siglen;
  }
  else {
    off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  }
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, [state getCipherKey], [state getMACKey]);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, to, [state getSentPort]);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_CONF];
  return packet;
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildSessionDestroyPacketWithNetI2pDataSessionKey_withNetI2pDataSessionKey_withJavaNetInetAddress_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, JavaNetInetAddress *addr, jint port) {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_SESSION_DESTROY_FLAG_BYTE);
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, cipherKey, macKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, addr, port);
  return packet;
}

IOSByteArray *NetI2pRouterTransportUdpPacketBuilder_getOurExplicitIP(NetI2pRouterTransportUdpPacketBuilder *self) {
  return nil;
}

jint NetI2pRouterTransportUdpPacketBuilder_getOurExplicitPort(NetI2pRouterTransportUdpPacketBuilder *self) {
  return 0;
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildRelayRequestWithJavaNetInetAddress_withInt_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withLong_withNetI2pDataSessionKey_withLong_(NetI2pRouterTransportUdpPacketBuilder *self, JavaNetInetAddress *introHost, jint introPort, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, jlong introTag, NetI2pDataSessionKey *ourIntroKey, jlong introNonce) {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(self, NetI2pRouterTransportUdpPacketBuilder_PEER_RELAY_REQUEST_FLAG_BYTE);
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk(pkt)) getData];
  jint off = NetI2pRouterTransportUdpPacketBuilder_HEADER_SIZE;
  IOSByteArray *ourIP = NetI2pRouterTransportUdpPacketBuilder_getOurExplicitIP(self);
  jint ourPort = NetI2pRouterTransportUdpPacketBuilder_getOurExplicitPort(self);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, introTag);
  off += 4;
  if (ourIP != nil) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, ourIP->size_);
    off++;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ourIP, 0, data, off, ourIP->size_);
    off += ourIP->size_;
  }
  else {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, 0);
    off++;
  }
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, ourPort);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 1, 0);
  off++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(ourIntroKey)) getData], 0, data, off, NetI2pDataSessionKey_KEYSIZE_BYTES);
  off += NetI2pDataSessionKey_KEYSIZE_BYTES;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$J$I$$", @"wrote alice intro key: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, off - NetI2pDataSessionKey_KEYSIZE_BYTES, NetI2pDataSessionKey_KEYSIZE_BYTES), @" with nonce ", introNonce, @" size=", (off + 4 + (16 - (off + 4) % 16)), @" and data: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, 0, off))];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, introNonce);
  off += 4;
  off = NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(self, data, off);
  off = NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(self, data, off);
  [pkt setLengthWithInt:off];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(self, packet, cipherKey, macKey);
  NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(packet, introHost, introPort);
  [packet setMessageTypeWithInt:NetI2pRouterTransportUdpPacketBuilder_TYPE_RREQ];
  return packet;
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_(NetI2pRouterTransportUdpPacketBuilder *self, jbyte flagByte) {
  return NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_withByteArray_(self, flagByte, nil);
}

NetI2pRouterTransportUdpUDPPacket *NetI2pRouterTransportUdpPacketBuilder_buildPacketHeaderWithByte_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, jbyte flagByte, IOSByteArray *extendedOptions) {
  NetI2pRouterTransportUdpUDPPacket *packet = NetI2pRouterTransportUdpUDPPacket_acquireWithNetI2pRouterRouterContext_withBoolean_(self->_context_, false);
  IOSByteArray *data = [((JavaNetDatagramPacket *) nil_chk([((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket])) getData];
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(data, 0, ((IOSByteArray *) nil_chk(data))->size_, (jbyte) (jint) 0x0);
  jint off = NetI2pRouterTransportUdpUDPPacket_MAC_SIZE + NetI2pRouterTransportUdpUDPPacket_IV_SIZE;
  if (extendedOptions != nil) flagByte |= NetI2pRouterTransportUdpUDPPacket_HEADER_FLAG_EXTENDED_OPTIONS;
  *IOSByteArray_GetRef(data, off) = flagByte;
  off++;
  jlong now = ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] + 500) / 1000;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 4, now);
  if (extendedOptions != nil) {
    off += 4;
    jint len = extendedOptions->size_;
    if (len > 255) @throw create_JavaLangIllegalArgumentException_init();
    *IOSByteArray_GetRef(data, off++) = (jbyte) len;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(extendedOptions, 0, data, off, len);
  }
  return packet;
}

void NetI2pRouterTransportUdpPacketBuilder_setToWithNetI2pRouterTransportUdpUDPPacket_withJavaNetInetAddress_withInt_(NetI2pRouterTransportUdpUDPPacket *packet, JavaNetInetAddress *ip, jint port) {
  NetI2pRouterTransportUdpPacketBuilder_initialize();
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  [((JavaNetDatagramPacket *) nil_chk(pkt)) setAddressWithJavaNetInetAddress:ip];
  [pkt setPortWithInt:port];
}

jint NetI2pRouterTransportUdpPacketBuilder_pad1WithByteArray_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off) {
  jint mod = off & (jint) 0x0f;
  if (mod == 0) return off;
  jint padSize = 16 - mod;
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:data withInt:off withInt:padSize];
  return off + padSize;
}

jint NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off) {
  if (![((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpPacketBuilder_PROP_PADDING withBoolean:NetI2pRouterTransportUdpPacketBuilder_DEFAULT_ENABLE_PADDING]) return off;
  jint padSize = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTransportUdpPacketBuilder_MAX_PAD2];
  if (padSize == 0) return off;
  [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:data withInt:off withInt:padSize];
  return off + padSize;
}

jint NetI2pRouterTransportUdpPacketBuilder_pad2WithByteArray_withInt_withInt_(NetI2pRouterTransportUdpPacketBuilder *self, IOSByteArray *data, jint off, jint maxLen) {
  if (![((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportUdpPacketBuilder_PROP_PADDING withBoolean:NetI2pRouterTransportUdpPacketBuilder_DEFAULT_ENABLE_PADDING]) return off;
  if (off >= maxLen) return off;
  jint padSize = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpPacketBuilder_MAX_PAD2, 1 + maxLen - off)];
  if (padSize == 0) return off;
  [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBytesWithByteArray:data withInt:off withInt:padSize];
  return off + padSize;
}

void NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey) {
  IOSByteArray *iv = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTransportUdpUDPPacket_IV_SIZE);
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:iv];
  NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_(self, packet, cipherKey, macKey, iv);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(iv);
}

void NetI2pRouterTransportUdpPacketBuilder_authenticateWithNetI2pRouterTransportUdpUDPPacket_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_(NetI2pRouterTransportUdpPacketBuilder *self, NetI2pRouterTransportUdpUDPPacket *packet, NetI2pDataSessionKey *cipherKey, NetI2pDataSessionKey *macKey, IOSByteArray *iv) {
  JavaNetDatagramPacket *pkt = [((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket];
  jint off = [((JavaNetDatagramPacket *) nil_chk(pkt)) getOffset];
  jint hmacOff = off;
  jint encryptOffset = off + NetI2pRouterTransportUdpUDPPacket_IV_SIZE + NetI2pRouterTransportUdpUDPPacket_MAC_SIZE;
  jint totalSize = [pkt getLength] - NetI2pRouterTransportUdpUDPPacket_IV_SIZE - NetI2pRouterTransportUdpUDPPacket_MAC_SIZE - off;
  jint mod = totalSize & (jint) 0x0f;
  jint encryptSize = totalSize - mod;
  IOSByteArray *data = [pkt getData];
  [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) aes])) encryptWithByteArray:data withInt:encryptOffset withByteArray:data withInt:encryptOffset withNetI2pDataSessionKey:cipherKey withByteArray:iv withInt:encryptSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, encryptOffset, data, off, totalSize);
  off += totalSize;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, data, off, NetI2pRouterTransportUdpUDPPacket_IV_SIZE);
  off += NetI2pRouterTransportUdpUDPPacket_IV_SIZE;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(data, off, 2, totalSize);
  jint hmacLen = totalSize + NetI2pRouterTransportUdpUDPPacket_IV_SIZE + 2;
  IOSByteArray *ba = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoHMACGenerator *) nil_chk([self->_context_ hmac])) calculateWithNetI2pDataSessionKey:macKey withByteArray:data withInt:hmacOff withInt:hmacLen withByteArray:ba withInt:0];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$$$$$@", @"Authenticating ", [pkt getLength], @"\nIV: ", NetI2pDataBase64_encodeWithByteArray_(iv), @"\nraw mac: ", NetI2pDataBase64_encodeWithByteArray_(ba), @"\nMAC key: ", macKey)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, hmacOff, data, encryptOffset, totalSize);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ba, 0, data, hmacOff, NetI2pRouterTransportUdpUDPPacket_MAC_SIZE);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(ba);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, data, hmacOff + NetI2pRouterTransportUdpUDPPacket_MAC_SIZE, NetI2pRouterTransportUdpUDPPacket_IV_SIZE);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketBuilder)

@implementation NetI2pRouterTransportUdpPacketBuilder_Fragment

- (instancetype)initWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state
                                                             withInt:(jint)num {
  NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(self, state, num);
  return self;
}

- (NSString *)description {
  return JreStrcat("$I$I$@", @"Fragment ", num_, @" (", [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state_)) fragmentSizeWithInt:num_], @" bytes) of ", state_);
}

- (void)dealloc {
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpOutboundMessageState:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LNetI2pRouterTransportUdpOutboundMessageState;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "num_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpOutboundMessageState;I", "toString", "LNetI2pRouterTransportUdpPacketBuilder;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPacketBuilder_Fragment = { "Fragment", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x9, 2, 2, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPacketBuilder_Fragment;
}

@end

void NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpPacketBuilder_Fragment *self, NetI2pRouterTransportUdpOutboundMessageState *state, jint num) {
  NSObject_init(self);
  JreStrongAssign(&self->state_, state);
  self->num_ = num;
}

NetI2pRouterTransportUdpPacketBuilder_Fragment *new_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpOutboundMessageState *state, jint num) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPacketBuilder_Fragment, initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_, state, num)
}

NetI2pRouterTransportUdpPacketBuilder_Fragment *create_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(NetI2pRouterTransportUdpOutboundMessageState *state, jint num) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPacketBuilder_Fragment, initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_, state, num)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPacketBuilder_Fragment)
