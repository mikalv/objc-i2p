//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PeerTestState.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/transport/udp/PeerTestState.h"

@interface NetI2pRouterTransportUdpPeerTestState () {
 @public
  jlong _testNonce_;
  NetI2pRouterTransportUdpPeerTestState_Role *_ourRole_;
  jboolean _isIPv6_;
  JavaNetInetAddress *_aliceIP_;
  jint _alicePort_;
  JavaNetInetAddress *_bobIP_;
  jint _bobPort_;
  JavaNetInetAddress *_charlieIP_;
  jint _charliePort_;
  JavaNetInetAddress *_aliceIPFromCharlie_;
  jint _alicePortFromCharlie_;
  NetI2pDataSessionKey *_aliceIntroKey_;
  NetI2pDataSessionKey *_charlieIntroKey_;
  NetI2pDataSessionKey *_bobCipherKey_;
  NetI2pDataSessionKey *_bobMACKey_;
  jlong _beginTime_;
  jlong _lastSendTime_;
  jlong _receiveAliceTime_;
  jlong _receiveBobTime_;
  jlong _receiveCharlieTime_;
  JavaUtilConcurrentAtomicAtomicInteger *_packetsRelayed_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _ourRole_, NetI2pRouterTransportUdpPeerTestState_Role *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _aliceIP_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _bobIP_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _charlieIP_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _aliceIPFromCharlie_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _aliceIntroKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _charlieIntroKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _bobCipherKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _bobMACKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestState, _packetsRelayed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestState_Role_initWithNSString_withInt_(NetI2pRouterTransportUdpPeerTestState_Role *self, NSString *__name, jint __ordinal);

@implementation NetI2pRouterTransportUdpPeerTestState

- (instancetype)initWithNetI2pRouterTransportUdpPeerTestState_Role:(NetI2pRouterTransportUdpPeerTestState_Role *)role
                                                       withBoolean:(jboolean)isIPv6
                                                          withLong:(jlong)nonce
                                                          withLong:(jlong)now {
  NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(self, role, isIPv6, nonce, now);
  return self;
}

- (jlong)getNonce {
  return _testNonce_;
}

- (NetI2pRouterTransportUdpPeerTestState_Role *)getOurRole {
  return _ourRole_;
}

- (jboolean)isIPv6 {
  return _isIPv6_;
}

- (JavaNetInetAddress *)getAliceIP {
  return _aliceIP_;
}

- (void)setAliceIPWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  JreStrongAssign(&_aliceIP_, ip);
}

- (JavaNetInetAddress *)getBobIP {
  return _bobIP_;
}

- (void)setBobIPWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  JreStrongAssign(&_bobIP_, ip);
}

- (JavaNetInetAddress *)getCharlieIP {
  return _charlieIP_;
}

- (void)setCharlieIPWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  JreStrongAssign(&_charlieIP_, ip);
}

- (JavaNetInetAddress *)getAliceIPFromCharlie {
  return _aliceIPFromCharlie_;
}

- (void)setAliceIPFromCharlieWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  JreStrongAssign(&_aliceIPFromCharlie_, ip);
}

- (jint)getAlicePort {
  return _alicePort_;
}

- (void)setAlicePortWithInt:(jint)alicePort {
  _alicePort_ = alicePort;
}

- (jint)getBobPort {
  return _bobPort_;
}

- (void)setBobPortWithInt:(jint)bobPort {
  _bobPort_ = bobPort;
}

- (jint)getCharliePort {
  return _charliePort_;
}

- (void)setCharliePortWithInt:(jint)charliePort {
  _charliePort_ = charliePort;
}

- (jint)getAlicePortFromCharlie {
  return _alicePortFromCharlie_;
}

- (void)setAlicePortFromCharlieWithInt:(jint)alicePortFromCharlie {
  _alicePortFromCharlie_ = alicePortFromCharlie;
}

- (NetI2pDataSessionKey *)getAliceIntroKey {
  return _aliceIntroKey_;
}

- (void)setAliceIntroKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_aliceIntroKey_, key);
}

- (NetI2pDataSessionKey *)getCharlieIntroKey {
  return _charlieIntroKey_;
}

- (void)setCharlieIntroKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_charlieIntroKey_, key);
}

- (NetI2pDataSessionKey *)getBobCipherKey {
  return _bobCipherKey_;
}

- (void)setBobCipherKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_bobCipherKey_, key);
}

- (NetI2pDataSessionKey *)getBobMACKey {
  return _bobMACKey_;
}

- (void)setBobMACKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  JreStrongAssign(&_bobMACKey_, key);
}

- (jlong)getBeginTime {
  return _beginTime_;
}

- (jlong)getLastSendTime {
  return _lastSendTime_;
}

- (void)setLastSendTimeWithLong:(jlong)when {
  _lastSendTime_ = when;
}

- (jlong)getReceiveAliceTime {
  return _receiveAliceTime_;
}

- (void)setReceiveAliceTimeWithLong:(jlong)when {
  _receiveAliceTime_ = when;
}

- (jlong)getReceiveBobTime {
  return _receiveBobTime_;
}

- (void)setReceiveBobTimeWithLong:(jlong)when {
  _receiveBobTime_ = when;
}

- (jlong)getReceiveCharlieTime {
  return _receiveCharlieTime_;
}

- (void)setReceiveCharlieTimeWithLong:(jlong)when {
  _receiveCharlieTime_ = when;
}

- (jint)incrementPacketsRelayed {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_packetsRelayed_)) incrementAndGet];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"PeerTest "])) appendWithLong:_testNonce_])) appendWithNSString:@" as "])) appendWithNSString:[((NetI2pRouterTransportUdpPeerTestState_Role *) nil_chk(_ourRole_)) description]];
  if (_aliceIP_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; Alice: "])) appendWithId:_aliceIP_])) appendWithChar:':'])) appendWithInt:_alicePort_];
  if (_aliceIPFromCharlie_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" (fromCharlie "])) appendWithId:_aliceIPFromCharlie_])) appendWithChar:':'])) appendWithInt:_alicePortFromCharlie_])) appendWithChar:')'];
  if (_bobIP_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; Bob: "])) appendWithId:_bobIP_])) appendWithChar:':'])) appendWithInt:_bobPort_];
  if (_charlieIP_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Charlie: "])) appendWithId:_charlieIP_])) appendWithChar:':'])) appendWithInt:_charliePort_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; last send after "])) appendWithLong:_lastSendTime_ - _beginTime_];
  if (_receiveAliceTime_ > 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; rcvd from Alice after "])) appendWithLong:_receiveAliceTime_ - _beginTime_];
  if (_receiveBobTime_ > 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; rcvd from Bob after "])) appendWithLong:_receiveBobTime_ - _beginTime_];
  if (_receiveCharlieTime_ > 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; rcvd from Charlie after "])) appendWithLong:_receiveCharlieTime_ - _beginTime_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"; pkts relayed: "])) appendWithInt:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_packetsRelayed_)) get]];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_ourRole_);
  RELEASE_(_aliceIP_);
  RELEASE_(_bobIP_);
  RELEASE_(_charlieIP_);
  RELEASE_(_aliceIPFromCharlie_);
  RELEASE_(_aliceIntroKey_);
  RELEASE_(_charlieIntroKey_);
  RELEASE_(_bobCipherKey_);
  RELEASE_(_bobMACKey_);
  RELEASE_(_packetsRelayed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerTestState_Role;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpPeerTestState_Role:withBoolean:withLong:withLong:);
  methods[1].selector = @selector(getNonce);
  methods[2].selector = @selector(getOurRole);
  methods[3].selector = @selector(isIPv6);
  methods[4].selector = @selector(getAliceIP);
  methods[5].selector = @selector(setAliceIPWithJavaNetInetAddress:);
  methods[6].selector = @selector(getBobIP);
  methods[7].selector = @selector(setBobIPWithJavaNetInetAddress:);
  methods[8].selector = @selector(getCharlieIP);
  methods[9].selector = @selector(setCharlieIPWithJavaNetInetAddress:);
  methods[10].selector = @selector(getAliceIPFromCharlie);
  methods[11].selector = @selector(setAliceIPFromCharlieWithJavaNetInetAddress:);
  methods[12].selector = @selector(getAlicePort);
  methods[13].selector = @selector(setAlicePortWithInt:);
  methods[14].selector = @selector(getBobPort);
  methods[15].selector = @selector(setBobPortWithInt:);
  methods[16].selector = @selector(getCharliePort);
  methods[17].selector = @selector(setCharliePortWithInt:);
  methods[18].selector = @selector(getAlicePortFromCharlie);
  methods[19].selector = @selector(setAlicePortFromCharlieWithInt:);
  methods[20].selector = @selector(getAliceIntroKey);
  methods[21].selector = @selector(setAliceIntroKeyWithNetI2pDataSessionKey:);
  methods[22].selector = @selector(getCharlieIntroKey);
  methods[23].selector = @selector(setCharlieIntroKeyWithNetI2pDataSessionKey:);
  methods[24].selector = @selector(getBobCipherKey);
  methods[25].selector = @selector(setBobCipherKeyWithNetI2pDataSessionKey:);
  methods[26].selector = @selector(getBobMACKey);
  methods[27].selector = @selector(setBobMACKeyWithNetI2pDataSessionKey:);
  methods[28].selector = @selector(getBeginTime);
  methods[29].selector = @selector(getLastSendTime);
  methods[30].selector = @selector(setLastSendTimeWithLong:);
  methods[31].selector = @selector(getReceiveAliceTime);
  methods[32].selector = @selector(setReceiveAliceTimeWithLong:);
  methods[33].selector = @selector(getReceiveBobTime);
  methods[34].selector = @selector(setReceiveBobTimeWithLong:);
  methods[35].selector = @selector(getReceiveCharlieTime);
  methods[36].selector = @selector(setReceiveCharlieTimeWithLong:);
  methods[37].selector = @selector(incrementPacketsRelayed);
  methods[38].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_testNonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ourRole_", "LNetI2pRouterTransportUdpPeerTestState_Role;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isIPv6_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_aliceIP_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alicePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobIP_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_charlieIP_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_charliePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIPFromCharlie_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alicePortFromCharlie_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIntroKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_charlieIntroKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobCipherKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobMACKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_beginTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastSendTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveAliceTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveBobTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receiveCharlieTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_packetsRelayed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpPeerTestState_Role;ZJJ", "setAliceIP", "LJavaNetInetAddress;", "setBobIP", "setCharlieIP", "setAliceIPFromCharlie", "setAlicePort", "I", "setBobPort", "setCharliePort", "setAlicePortFromCharlie", "setAliceIntroKey", "LNetI2pDataSessionKey;", "setCharlieIntroKey", "setBobCipherKey", "setBobMACKey", "setLastSendTime", "J", "setReceiveAliceTime", "setReceiveBobTime", "setReceiveCharlieTime", "toString", "LNetI2pRouterTransportUdpPeerTestState_Role;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestState = { "PeerTestState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 39, 21, -1, 22, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerTestState;
}

@end

void NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(NetI2pRouterTransportUdpPeerTestState *self, NetI2pRouterTransportUdpPeerTestState_Role *role, jboolean isIPv6, jlong nonce, jlong now) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_packetsRelayed_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->_ourRole_, role);
  self->_isIPv6_ = isIPv6;
  self->_testNonce_ = nonce;
  self->_beginTime_ = now;
}

NetI2pRouterTransportUdpPeerTestState *new_NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(NetI2pRouterTransportUdpPeerTestState_Role *role, jboolean isIPv6, jlong nonce, jlong now) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerTestState, initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_, role, isIPv6, nonce, now)
}

NetI2pRouterTransportUdpPeerTestState *create_NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(NetI2pRouterTransportUdpPeerTestState_Role *role, jboolean isIPv6, jlong nonce, jlong now) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerTestState, initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_, role, isIPv6, nonce, now)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestState)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpPeerTestState_Role)

NetI2pRouterTransportUdpPeerTestState_Role *NetI2pRouterTransportUdpPeerTestState_Role_values_[3];

@implementation NetI2pRouterTransportUdpPeerTestState_Role

+ (NetI2pRouterTransportUdpPeerTestState_Role *)ALICE {
  return JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, ALICE);
}

+ (NetI2pRouterTransportUdpPeerTestState_Role *)BOB {
  return JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB);
}

+ (NetI2pRouterTransportUdpPeerTestState_Role *)CHARLIE {
  return JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, CHARLIE);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportUdpPeerTestState_Role_values();
}

+ (NetI2pRouterTransportUdpPeerTestState_Role *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportUdpPeerTestState_Role_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportUdpPeerTestState_Role_Enum)toNSEnum {
  return (NetI2pRouterTransportUdpPeerTestState_Role_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportUdpPeerTestState_Role;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpPeerTestState_Role;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALICE", "LNetI2pRouterTransportUdpPeerTestState_Role;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BOB", "LNetI2pRouterTransportUdpPeerTestState_Role;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CHARLIE", "LNetI2pRouterTransportUdpPeerTestState_Role;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, ALICE), &JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB), &JreEnum(NetI2pRouterTransportUdpPeerTestState_Role, CHARLIE), "LNetI2pRouterTransportUdpPeerTestState;", "Ljava/lang/Enum<Lnet/i2p/router/transport/udp/PeerTestState$Role;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestState_Role = { "Role", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_NetI2pRouterTransportUdpPeerTestState_Role;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpPeerTestState_Role class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(NetI2pRouterTransportUdpPeerTestState_Role_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportUdpPeerTestState_Role_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportUdpPeerTestState_Role_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpPeerTestState_Role)
  }
}

@end

void NetI2pRouterTransportUdpPeerTestState_Role_initWithNSString_withInt_(NetI2pRouterTransportUdpPeerTestState_Role *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportUdpPeerTestState_Role_values() {
  NetI2pRouterTransportUdpPeerTestState_Role_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportUdpPeerTestState_Role_values_ count:3 type:NetI2pRouterTransportUdpPeerTestState_Role_class_()];
}

NetI2pRouterTransportUdpPeerTestState_Role *NetI2pRouterTransportUdpPeerTestState_Role_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportUdpPeerTestState_Role_initialize();
  for (int i = 0; i < 3; i++) {
    NetI2pRouterTransportUdpPeerTestState_Role *e = NetI2pRouterTransportUdpPeerTestState_Role_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportUdpPeerTestState_Role *NetI2pRouterTransportUdpPeerTestState_Role_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportUdpPeerTestState_Role_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return NetI2pRouterTransportUdpPeerTestState_Role_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestState_Role)
