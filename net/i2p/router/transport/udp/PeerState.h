//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PeerState.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTransportUdpPeerState")
#ifdef RESTRICT_NetI2pRouterTransportUdpPeerState
#define INCLUDE_ALL_NetI2pRouterTransportUdpPeerState 0
#else
#define INCLUDE_ALL_NetI2pRouterTransportUdpPeerState 1
#endif
#undef RESTRICT_NetI2pRouterTransportUdpPeerState

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTransportUdpPeerState_) && (INCLUDE_ALL_NetI2pRouterTransportUdpPeerState || defined(INCLUDE_NetI2pRouterTransportUdpPeerState))
#define NetI2pRouterTransportUdpPeerState_

@class IOSByteArray;
@class JavaLangLong;
@class JavaNetInetAddress;
@class NetI2pDataHash;
@class NetI2pDataSessionKey;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTransportUdpOutboundMessageState;
@class NetI2pRouterTransportUdpRemoteHostId;
@class NetI2pRouterTransportUdpUDPTransport;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol NetI2pRouterTransportUdpACKBitfield;

@interface NetI2pRouterTransportUdpPeerState : NSObject
@property (readonly, class) jlong RETRANSMISSION_PERIOD_WIDTH NS_SWIFT_NAME(RETRANSMISSION_PERIOD_WIDTH);
@property (readonly, class) jint MIN_MTU NS_SWIFT_NAME(MIN_MTU);
@property (readonly, class) jint MIN_IPV6_MTU NS_SWIFT_NAME(MIN_IPV6_MTU);
@property (readonly, class) jint MAX_IPV6_MTU NS_SWIFT_NAME(MAX_IPV6_MTU);
@property (readonly, class) jint LARGE_MTU NS_SWIFT_NAME(LARGE_MTU);
@property (readonly, class) jint MAX_MTU NS_SWIFT_NAME(MAX_MTU);
@property (readonly, class) jint INIT_RTT NS_SWIFT_NAME(INIT_RTT);

+ (jlong)RETRANSMISSION_PERIOD_WIDTH;

+ (jint)MIN_MTU;

+ (jint)MIN_IPV6_MTU;

+ (jint)MAX_IPV6_MTU;

+ (jint)LARGE_MTU;

+ (jint)MAX_MTU;

+ (jint)INIT_RTT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                   withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
                                              withByteArray:(IOSByteArray *)remoteIP
                                                    withInt:(jint)remotePort
                                         withNetI2pDataHash:(NetI2pDataHash *)remotePeer
                                                withBoolean:(jboolean)isInbound;

- (jboolean)ackedWithNetI2pRouterTransportUdpACKBitfield:(id<NetI2pRouterTransportUdpACKBitfield>)bitfield;

- (jboolean)ackedWithLong:(jlong)messageId;

- (void)addWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state;

- (void)adjustClockSkewWithLong:(jlong)skew;

- (id<JavaUtilList>)allocateSend OBJC_METHOD_FAMILY_NONE;

- (void)changePortWithInt:(jint)newPort;

- (void)dataReceived;

- (void)dropOutbound;

- (void)ECNReceived;

- (jint)expireInboundMessages;

- (jint)finishMessages;

- (jint)fragmentSize;

- (jlong)getClockSkew;

- (jint)getConcurrentSends;

- (jint)getConcurrentSendWindow;

- (jint)getConsecutiveFailedSends;

- (jint)getConsecutiveSendRejections;

- (NetI2pDataSessionKey *)getCurrentCipherKey;

- (id<JavaUtilList>)getCurrentFullACKs;

- (NetI2pDataSessionKey *)getCurrentMACKey;

- (jlong)getCurrentReceiveSecond;

- (id<JavaUtilList>)getCurrentResendACKs;

- (jboolean)getCurrentSecondECNReceived;

- (jlong)getInactivityTime;

- (id<JavaUtilMap>)getInboundMessages;

- (jlong)getIntroducerTime;

- (jlong)getKeyEstablishedTime;

- (jlong)getLastACKSend;

- (jlong)getLastReceiveTime;

- (jlong)getLastSendFullyTime;

- (jlong)getLastSendOrPingTime;

- (jlong)getLastSendTime;

- (jboolean)getMayDisconnect;

- (jint)getMessagesReceived;

- (jint)getMessagesSent;

- (jint)getMTU;

- (NetI2pDataSessionKey *)getNextCipherKey;

- (jint)getNextDelay;

- (NetI2pDataSessionKey *)getNextMACKey;

- (jint)getOutboundMessageCount;

- (jint)getPacketsReceived;

- (jint)getPacketsReceivedDuplicate;

- (jint)getPacketsRetransmitted;

- (jint)getPacketsTransmitted;

- (jint)getReceiveBps;

- (jint)getReceiveMTU;

- (IOSByteArray *)getRemoteIP;

- (JavaNetInetAddress *)getRemoteIPAddress;

- (NetI2pDataHash *)getRemotePeer;

- (jint)getRemotePort;

- (jint)getRTO;

- (jint)getRTT;

- (jint)getRTTDeviation;

- (jint)getSendBps;

- (jint)getSendWindowBytes;

- (jint)getSendWindowBytesRemaining;

- (jint)getSlowStartThreshold;

- (jlong)getTheyRelayToUsAs;

- (NetI2pRouterTransportUdpUDPTransport *)getTransport;

- (jlong)getWantedACKSendSince;

- (jlong)getWeRelayToThemAs;

- (jint)incrementConsecutiveFailedSends;

- (jboolean)isBacklogged;

- (jboolean)isInbound;

- (jboolean)isIPv6;

- (void)loadFromWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)oldPeer;

- (void)messageFullyReceivedWithJavaLangLong:(JavaLangLong *)messageId
                                     withInt:(jint)bytes;

- (void)messagePartiallyReceived;

- (void)messageRetransmittedWithInt:(jint)packets;

- (void)packetReceivedWithInt:(jint)size;

- (void)packetsTransmittedWithInt:(jint)packets;

- (void)removeACKMessageWithJavaLangLong:(JavaLangLong *)messageId;

- (id<JavaUtilList>)retrieveACKBitfields;

- (id<JavaUtilList>)retrieveACKBitfieldsWithBoolean:(jboolean)alwaysIncludeRetransmissions;

- (void)setCurrentCipherKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)setCurrentMACKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)setCurrentReceiveSecondWithLong:(jlong)sec;

- (void)setHisMTUWithInt:(jint)mtu;

- (void)setIntroducerTime;

- (void)setKeyEstablishedTimeWithLong:(jlong)when;

- (void)setLastACKSendWithLong:(jlong)when;

- (void)setLastPingTimeWithLong:(jlong)when;

- (void)setLastReceiveTimeWithLong:(jlong)when;

- (void)setLastSendTimeWithLong:(jlong)when;

- (void)setMayDisconnect;

- (void)setNextCipherKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)setNextMACKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)setTheyRelayToUsAsWithLong:(jlong)tag;

- (void)setWeRelayToThemAsWithLong:(jlong)tag;

- (NSString *)description;

- (jboolean)unsentACKThresholdReached;

#pragma mark Package-Private

- (void)fetchPartialACKsWithJavaUtilList:(id<JavaUtilList>)rv;

- (NetI2pRouterTransportUdpRemoteHostId *)getRemoteHostId;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTransportUdpPeerState)

inline jlong NetI2pRouterTransportUdpPeerState_get_RETRANSMISSION_PERIOD_WIDTH(void);
#define NetI2pRouterTransportUdpPeerState_RETRANSMISSION_PERIOD_WIDTH 100LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, RETRANSMISSION_PERIOD_WIDTH, jlong)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_MTU(void);
#define NetI2pRouterTransportUdpPeerState_MIN_MTU 620
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MIN_IPV6_MTU(void);
#define NetI2pRouterTransportUdpPeerState_MIN_IPV6_MTU 1280
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MIN_IPV6_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_IPV6_MTU(void);
#define NetI2pRouterTransportUdpPeerState_MAX_IPV6_MTU 1488
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, MAX_IPV6_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_LARGE_MTU(void);
#define NetI2pRouterTransportUdpPeerState_LARGE_MTU 1484
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, LARGE_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_MAX_MTU(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pRouterTransportUdpPeerState_MAX_MTU;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTransportUdpPeerState, MAX_MTU, jint)

inline jint NetI2pRouterTransportUdpPeerState_get_INIT_RTT(void);
#define NetI2pRouterTransportUdpPeerState_INIT_RTT 1500
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerState, INIT_RTT, jint)

FOUNDATION_EXPORT void NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterTransportUdpPeerState *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound);

FOUNDATION_EXPORT NetI2pRouterTransportUdpPeerState *new_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTransportUdpPeerState *create_NetI2pRouterTransportUdpPeerState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withByteArray_withInt_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, IOSByteArray *remoteIP, jint remotePort, NetI2pDataHash *remotePeer, jboolean isInbound);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerState)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTransportUdpPeerState")
