//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/IPThrottler.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "net/i2p/router/transport/udp/IPThrottler.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SipHash.h"

@interface NetI2pRouterTransportUdpIPThrottler () {
 @public
  NetI2pUtilObjectCounter *_counter_;
  jint _max_;
}

+ (JavaLangInteger *)toIntWithByteArray:(IOSByteArray *)ip;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpIPThrottler, _counter_, NetI2pUtilObjectCounter *)

__attribute__((unused)) static JavaLangInteger *NetI2pRouterTransportUdpIPThrottler_toIntWithByteArray_(IOSByteArray *ip);

@interface NetI2pRouterTransportUdpIPThrottler_Cleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportUdpIPThrottler *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportUdpIPThrottler:(NetI2pRouterTransportUdpIPThrottler *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpIPThrottler_Cleaner)

__attribute__((unused)) static void NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler_Cleaner *self, NetI2pRouterTransportUdpIPThrottler *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpIPThrottler_Cleaner *new_NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpIPThrottler_Cleaner *create_NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpIPThrottler_Cleaner)

@implementation NetI2pRouterTransportUdpIPThrottler

- (instancetype)initWithInt:(jint)max
                   withLong:(jlong)time {
  NetI2pRouterTransportUdpIPThrottler_initWithInt_withLong_(self, max, time);
  return self;
}

- (jboolean)shouldThrottleWithByteArray:(IOSByteArray *)ip {
  JavaLangInteger *key;
  if (((IOSByteArray *) nil_chk(ip))->size_ == 4) key = NetI2pRouterTransportUdpIPThrottler_toIntWithByteArray_(ip);
  else key = JavaLangInteger_valueOfWithInt_(NetI2pUtilSipHash_hashCodeWithByteArray_(ip));
  return [((NetI2pUtilObjectCounter *) nil_chk(_counter_)) incrementWithId:key] > _max_;
}

+ (JavaLangInteger *)toIntWithByteArray:(IOSByteArray *)ip {
  return NetI2pRouterTransportUdpIPThrottler_toIntWithByteArray_(ip);
}

- (void)dealloc {
  RELEASE_(_counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:);
  methods[1].selector = @selector(shouldThrottleWithByteArray:);
  methods[2].selector = @selector(toIntWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_counter_", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
    { "_max_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJ", "shouldThrottle", "[B", "toInt", "Lnet/i2p/util/ObjectCounter<Ljava/lang/Integer;>;", "LNetI2pRouterTransportUdpIPThrottler_Cleaner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpIPThrottler = { "IPThrottler", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, 5, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpIPThrottler;
}

@end

void NetI2pRouterTransportUdpIPThrottler_initWithInt_withLong_(NetI2pRouterTransportUdpIPThrottler *self, jint max, jlong time) {
  NSObject_init(self);
  self->_max_ = max;
  JreStrongAssignAndConsume(&self->_counter_, new_NetI2pUtilObjectCounter_init());
  [((NetI2pUtilSimpleTimer2 *) nil_chk(NetI2pUtilSimpleTimer2_getInstance())) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(self) withLong:time];
}

NetI2pRouterTransportUdpIPThrottler *new_NetI2pRouterTransportUdpIPThrottler_initWithInt_withLong_(jint max, jlong time) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpIPThrottler, initWithInt_withLong_, max, time)
}

NetI2pRouterTransportUdpIPThrottler *create_NetI2pRouterTransportUdpIPThrottler_initWithInt_withLong_(jint max, jlong time) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpIPThrottler, initWithInt_withLong_, max, time)
}

JavaLangInteger *NetI2pRouterTransportUdpIPThrottler_toIntWithByteArray_(IOSByteArray *ip) {
  NetI2pRouterTransportUdpIPThrottler_initialize();
  jint rv = 0;
  for (jint i = 0; i < 4; i++) rv |= JreLShift32((IOSByteArray_Get(nil_chk(ip), i) & (jint) 0xff), ((3 - i) * 8));
  return JavaLangInteger_valueOfWithInt_(rv);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpIPThrottler)

@implementation NetI2pRouterTransportUdpIPThrottler_Cleaner

- (instancetype)initWithNetI2pRouterTransportUdpIPThrottler:(NetI2pRouterTransportUdpIPThrottler *)outer$ {
  NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(self, outer$);
  return self;
}

- (void)timeReached {
  [((NetI2pUtilObjectCounter *) nil_chk(this$0_->_counter_)) clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpIPThrottler:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpIPThrottler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpIPThrottler;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpIPThrottler_Cleaner = { "Cleaner", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpIPThrottler_Cleaner;
}

@end

void NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler_Cleaner *self, NetI2pRouterTransportUdpIPThrottler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportUdpIPThrottler_Cleaner *new_NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpIPThrottler_Cleaner, initWithNetI2pRouterTransportUdpIPThrottler_, outer$)
}

NetI2pRouterTransportUdpIPThrottler_Cleaner *create_NetI2pRouterTransportUdpIPThrottler_Cleaner_initWithNetI2pRouterTransportUdpIPThrottler_(NetI2pRouterTransportUdpIPThrottler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpIPThrottler_Cleaner, initWithNetI2pRouterTransportUdpIPThrottler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpIPThrottler_Cleaner)
