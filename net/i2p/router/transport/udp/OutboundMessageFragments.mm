//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/OutboundMessageFragments.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/udp/OutboundMessageFragments.h"
#include "net/i2p/router/transport/udp/OutboundMessageState.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpOutboundMessageFragments () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  id<JavaUtilSet> _activePeers_;
  id<JavaUtilIterator> _iterator_;
  volatile_jboolean _alive_;
  NetI2pRouterTransportUdpPacketBuilder *_builder_;
}

- (id<JavaUtilList>)preparePacketsWithJavaUtilList:(id<JavaUtilList>)states
             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _activePeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundMessageFragments, _builder_, NetI2pRouterTransportUdpPacketBuilder *)

inline jint NetI2pRouterTransportUdpOutboundMessageFragments_get_MAX_WAIT(void);
#define NetI2pRouterTransportUdpOutboundMessageFragments_MAX_WAIT 1000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpOutboundMessageFragments, MAX_WAIT, jint)

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterTransportUdpOutboundMessageFragments_preparePacketsWithJavaUtilList_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageFragments *self, id<JavaUtilList> states, NetI2pRouterTransportUdpPeerState *peer);

@interface NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle : NSObject

@end

@implementation NetI2pRouterTransportUdpOutboundMessageFragments

+ (jint)MAX_VOLLEYS {
  return NetI2pRouterTransportUdpOutboundMessageFragments_MAX_VOLLEYS;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport
withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle:(id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle>)throttle {
  NetI2pRouterTransportUdpOutboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_(self, ctx, transport, throttle);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, true);
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, false);
    [((id<JavaUtilSet>) nil_chk(_activePeers_)) clear];
    @synchronized(_activePeers_) {
      [_activePeers_ java_notify];
    }
  }
}

- (void)dropPeerWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Dropping peer ", [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])];
  [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) dropOutbound];
  [((id<JavaUtilSet>) nil_chk(_activePeers_)) removeWithId:peer];
}

- (jboolean)waitForMoreAllowed {
  return true;
}

- (void)addWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pDataRouterRouterInfo *target = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget];
  if (target == nil) return;
  NetI2pRouterTransportUdpPeerState *peer = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) getPeerStateWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([target getIdentity])) calculateHash]];
  @try {
    NetI2pRouterTransportUdpOutboundMessageState *state = create_NetI2pRouterTransportUdpOutboundMessageState_initWithNetI2pI2PAppContext_withNetI2pRouterOutNetMessage_withNetI2pRouterTransportUdpPeerState_(_context_, msg, peer);
    [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) addWithNetI2pRouterTransportUdpOutboundMessageState:state];
    [self addWithNetI2pRouterTransportUdpPeerState:peer withInt:[state fragmentSizeWithInt:0]];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    [_transport_ failedWithNetI2pRouterOutNetMessage:msg withNSString:@"Peer disconnected quickly"];
    return;
  }
}

- (void)addWithNetI2pRouterTransportUdpOutboundMessageState:(NetI2pRouterTransportUdpOutboundMessageState *)state
                      withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if (peer == nil) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"null peer for ", state));
  [peer addWithNetI2pRouterTransportUdpOutboundMessageState:state];
  [self addWithNetI2pRouterTransportUdpPeerState:peer withInt:[((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) fragmentSizeWithInt:0]];
}

- (void)addWithJavaUtilList:(id<JavaUtilList>)states
withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  if (peer == nil) @throw create_JavaLangRuntimeException_initWithNSString_(@"null peer");
  jint sz = [((id<JavaUtilList>) nil_chk(states)) size];
  jint min = [peer fragmentSize];
  for (jint i = 0; i < sz; i++) {
    NetI2pRouterTransportUdpOutboundMessageState *state = [states getWithInt:i];
    [peer addWithNetI2pRouterTransportUdpOutboundMessageState:state];
    jint fsz = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) fragmentSizeWithInt:0];
    if (fsz < min) min = fsz;
  }
  [self addWithNetI2pRouterTransportUdpPeerState:peer withInt:min];
}

- (void)addWithNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer
                                         withInt:(jint)size {
  jboolean added = [((id<JavaUtilSet>) nil_chk(_activePeers_)) addWithId:peer];
  if (added) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Add a new message to a new peer ", [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Add a new message to an existing peer ", [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getRemotePeer])];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.outboundActivePeers" withLong:[_activePeers_ size]];
  if (added || size <= 0 || [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) getSendWindowBytesRemaining] >= size) {
    @synchronized(_activePeers_) {
      [_activePeers_ java_notify];
    }
  }
}

- (id<JavaUtilList>)getNextVolley {
  NetI2pRouterTransportUdpPeerState *peer = nil;
  id<JavaUtilList> states = nil;
  jint peersProcessed = 0;
  while (JreLoadVolatileBoolean(&_alive_) && (states == nil)) {
    jint nextSendDelay = JavaLangInteger_MAX_VALUE;
    if (_iterator_ == nil || ((![((id<JavaUtilSet>) nil_chk(_activePeers_)) isEmpty]) && (![((id<JavaUtilIterator>) nil_chk(_iterator_)) hasNext]))) {
      JreStrongAssign(&_iterator_, [((id<JavaUtilSet>) nil_chk(_activePeers_)) iterator]);
    }
    while ([((id<JavaUtilIterator>) nil_chk(_iterator_)) hasNext]) {
      peer = [((id<JavaUtilIterator>) nil_chk(_iterator_)) next];
      jint remaining = [((NetI2pRouterTransportUdpPeerState *) nil_chk(peer)) finishMessages];
      if (remaining <= 0) {
        [((id<JavaUtilIterator>) nil_chk(_iterator_)) remove];
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"No more pending messages for ", [peer getRemotePeer])];
        continue;
      }
      peersProcessed++;
      states = [peer allocateSend];
      if (states != nil) {
        break;
      }
      else if (peersProcessed >= [((id<JavaUtilSet>) nil_chk(_activePeers_)) size]) {
        break;
      }
      else {
        jint delay = [peer getNextDelay];
        if (delay < nextSendDelay) nextSendDelay = delay;
        peer = nil;
      }
    }
    if (states == nil && peersProcessed >= [((id<JavaUtilSet>) nil_chk(_activePeers_)) size] && nextSendDelay > 0) {
      peersProcessed = 0;
      jint toWait = JavaLangMath_minWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(nextSendDelay, 10), NetI2pRouterTransportUdpOutboundMessageFragments_MAX_WAIT);
      @synchronized(_activePeers_) {
        @try {
          [((id<JavaUtilSet>) nil_chk(_activePeers_)) java_waitWithLong:toWait];
        }
        @catch (JavaLangInterruptedException *ie) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Woken up while waiting"];
        }
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Sending ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(states))];
  id<JavaUtilList> packets = NetI2pRouterTransportUdpOutboundMessageFragments_preparePacketsWithJavaUtilList_withNetI2pRouterTransportUdpPeerState_(self, states, peer);
  return packets;
}

- (id<JavaUtilList>)preparePacketsWithJavaUtilList:(id<JavaUtilList>)states
             withNetI2pRouterTransportUdpPeerState:(NetI2pRouterTransportUdpPeerState *)peer {
  return NetI2pRouterTransportUdpOutboundMessageFragments_preparePacketsWithJavaUtilList_withNetI2pRouterTransportUdpPeerState_(self, states, peer);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_activePeers_);
  RELEASE_(_iterator_);
  RELEASE_(_builder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 3, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 10, 6, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(dropPeerWithNetI2pRouterTransportUdpPeerState:);
  methods[4].selector = @selector(waitForMoreAllowed);
  methods[5].selector = @selector(addWithNetI2pRouterOutNetMessage:);
  methods[6].selector = @selector(addWithNetI2pRouterTransportUdpOutboundMessageState:withNetI2pRouterTransportUdpPeerState:);
  methods[7].selector = @selector(addWithJavaUtilList:withNetI2pRouterTransportUdpPeerState:);
  methods[8].selector = @selector(addWithNetI2pRouterTransportUdpPeerState:withInt:);
  methods[9].selector = @selector(getNextVolley);
  methods[10].selector = @selector(preparePacketsWithJavaUtilList:withNetI2pRouterTransportUdpPeerState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_activePeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "_iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_builder_", "LNetI2pRouterTransportUdpPacketBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_VOLLEYS", "I", .constantValue.asInt = NetI2pRouterTransportUdpOutboundMessageFragments_MAX_VOLLEYS, 0x18, -1, -1, -1, -1 },
    { "MAX_WAIT", "I", .constantValue.asInt = NetI2pRouterTransportUdpOutboundMessageFragments_MAX_WAIT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;LNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle;", "dropPeer", "LNetI2pRouterTransportUdpPeerState;", "add", "LNetI2pRouterOutNetMessage;", "LNetI2pRouterTransportUdpOutboundMessageState;LNetI2pRouterTransportUdpPeerState;", "LJavaUtilList;LNetI2pRouterTransportUdpPeerState;", "(Ljava/util/List<Lnet/i2p/router/transport/udp/OutboundMessageState;>;Lnet/i2p/router/transport/udp/PeerState;)V", "LNetI2pRouterTransportUdpPeerState;I", "()Ljava/util/List<Lnet/i2p/router/transport/udp/UDPPacket;>;", "preparePackets", "(Ljava/util/List<Lnet/i2p/router/transport/udp/OutboundMessageState;>;Lnet/i2p/router/transport/udp/PeerState;)Ljava/util/List<Lnet/i2p/router/transport/udp/UDPPacket;>;", "Ljava/util/Set<Lnet/i2p/router/transport/udp/PeerState;>;", "Ljava/util/Iterator<Lnet/i2p/router/transport/udp/PeerState;>;", "LNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundMessageFragments = { "OutboundMessageFragments", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 11, 9, -1, 14, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpOutboundMessageFragments;
}

@end

void NetI2pRouterTransportUdpOutboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_(NetI2pRouterTransportUdpOutboundMessageFragments *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle> throttle) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpOutboundMessageFragments_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssignAndConsume(&self->_activePeers_, new_NetI2pUtilConcurrentHashSet_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_builder_, new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(ctx, transport));
  JreAssignVolatileBoolean(&self->_alive_, true);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.sendVolleyTime" withNSString:@"Long it takes to send a full volley" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendConfirmTime" withNSString:@"How long it takes to send a message and get the ACK" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendConfirmFragments" withNSString:@"How many fragments are included in a fully ACKed message" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendFragmentsPerPacket" withNSString:@"How many fragments are sent in a data packet" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendConfirmVolley" withNSString:@"How many times did fragments need to be sent before ACK" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendFailed" withNSString:@"How many sends a failed message was pushed" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendAggressiveFailed" withNSString:@"How many volleys was a packet sent before we gave up" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.outboundActiveCount" withNSString:@"How many messages are in the peer's active pool" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.outboundActivePeers" withNSString:@"How many peers we are actively sending to" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendRejected" withNSString:@"What volley are we on when the peer was throttled" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.partialACKReceived" withNSString:@"How many fragments were partially ACKed" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendPiggyback" withNSString:@"How many acks were piggybacked on a data packet (time == message lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendPiggybackPartial" withNSString:@"How many partial acks were piggybacked on a data packet (time == message lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"udp.packetsRetransmitted" withNSString:@"Lifetime of packets during retransmission (ms)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.peerPacketsRetransmitted" withNSString:@"How many packets have been retransmitted to the peer (lifetime) when a burst of packets are retransmitted (period == packets transmitted, lifetime)" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.blockedRetransmissions" withNSString:@"How packets have been transmitted to the peer when we blocked a retransmission to them?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendCycleTime" withNSString:@"How long it takes to cycle through all of the active messages?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.sendCycleTimeSlow" withNSString:@"How long it takes to cycle through all of the active messages, when its going slowly?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpOutboundMessageFragments *new_NetI2pRouterTransportUdpOutboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle> throttle) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundMessageFragments, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_, ctx, transport, throttle)
}

NetI2pRouterTransportUdpOutboundMessageFragments *create_NetI2pRouterTransportUdpOutboundMessageFragments_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport, id<NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle> throttle) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundMessageFragments, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_withNetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle_, ctx, transport, throttle)
}

id<JavaUtilList> NetI2pRouterTransportUdpOutboundMessageFragments_preparePacketsWithJavaUtilList_withNetI2pRouterTransportUdpPeerState_(NetI2pRouterTransportUdpOutboundMessageFragments *self, id<JavaUtilList> states, NetI2pRouterTransportUdpPeerState *peer) {
  if (states == nil || peer == nil) return nil;
  id<JavaUtilList> msgIds = [peer getCurrentFullACKs];
  jint newFullAckCount = [((id<JavaUtilList>) nil_chk(msgIds)) size];
  [msgIds addAllWithJavaUtilCollection:[peer getCurrentResendACKs]];
  id<JavaUtilList> partialACKBitfields = create_JavaUtilArrayList_init();
  [peer fetchPartialACKsWithJavaUtilList:partialACKBitfields];
  jint piggybackedPartialACK = [partialACKBitfields size];
  id<JavaUtilSet> remaining = create_JavaUtilHashSet_initWithJavaUtilCollection_(msgIds);
  id<JavaUtilList> toSend = create_JavaUtilArrayList_initWithInt_(8);
  for (NetI2pRouterTransportUdpOutboundMessageState * __strong state in states) {
    jint fragments = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getFragmentCount];
    jint queued = 0;
    for (jint i = 0; i < fragments; i++) {
      if ([state needsSendingWithInt:i]) {
        [toSend addWithId:create_NetI2pRouterTransportUdpPacketBuilder_Fragment_initWithNetI2pRouterTransportUdpOutboundMessageState_withInt_(state, i)];
        queued++;
      }
    }
    if (queued > 0 && [state getPushCount] > 1) {
      [peer messageRetransmittedWithInt:queued];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.peerPacketsRetransmitted" withLong:[peer getPacketsRetransmitted] withLong:[peer getPacketsTransmitted]];
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.packetsRetransmitted" withLong:[state getLifetime] withLong:[peer getPacketsTransmitted]];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$@", @"Retransmitting ", state, @" to ", peer)];
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.sendVolleyTime" withLong:[state getLifetime] withLong:queued];
    }
  }
  if ([toSend isEmpty]) return nil;
  jint fragmentsToSend = [toSend size];
  id<JavaUtilList> sendNext = create_JavaUtilArrayList_initWithInt_(JavaLangMath_minWithInt_withInt_([toSend size], 4));
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([toSend size]);
  for (jint i = 0; i < [toSend size]; i++) {
    NetI2pRouterTransportUdpPacketBuilder_Fragment *next = [toSend getWithInt:i];
    [sendNext addWithId:next];
    NetI2pRouterTransportUdpOutboundMessageState *state = ((NetI2pRouterTransportUdpPacketBuilder_Fragment *) nil_chk(next))->state_;
    NetI2pRouterOutNetMessage *msg = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(state)) getMessage];
    jint msgType = (msg != nil) ? [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessageTypeId] : -1;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$@", @"Building packet for ", next, @" to ", peer)];
    jint curTotalDataSize = [state fragmentSizeWithInt:next->num_];
    if (i + 1 < [toSend size]) {
      jint maxAvail = NetI2pRouterTransportUdpPacketBuilder_getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState_withInt_withInt_(peer, [sendNext size], curTotalDataSize);
      for (jint j = i + 1; j < [toSend size]; j++) {
        next = [toSend getWithInt:j];
        jint nextDataSize = [((NetI2pRouterTransportUdpOutboundMessageState *) nil_chk(((NetI2pRouterTransportUdpPacketBuilder_Fragment *) nil_chk(next))->state_)) fragmentSizeWithInt:next->num_];
        if (nextDataSize <= maxAvail) {
          [toSend removeWithInt:j];
          j--;
          [sendNext addWithId:next];
          curTotalDataSize += nextDataSize;
          maxAvail = NetI2pRouterTransportUdpPacketBuilder_getMaxAdditionalFragmentSizeWithNetI2pRouterTransportUdpPeerState_withInt_withInt_(peer, [sendNext size], curTotalDataSize);
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$@", @"Adding in additional ", next, @" to ", peer)];
        }
      }
    }
    jint before = [remaining size];
    NetI2pRouterTransportUdpUDPPacket *pkt = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_builder_)) buildPacketWithJavaUtilList:sendNext withNetI2pRouterTransportUdpPeerState:peer withJavaUtilCollection:remaining withInt:newFullAckCount withJavaUtilList:partialACKBitfields];
    if (pkt != nil) {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$@", @"Built packet with ", [sendNext size], @" fragments totalling ", curTotalDataSize, @" data bytes to ", peer)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendFragmentsPerPacket" withLong:[sendNext size]];
    }
    [sendNext clear];
    if (pkt == nil) {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ infoWithNSString:JreStrcat("$$$@", @"Build packet FAIL for ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(sendNext), @" to ", peer)];
      continue;
    }
    [rv addWithId:pkt];
    jint after = [remaining size];
    newFullAckCount = JavaLangMath_maxWithInt_withInt_(0, newFullAckCount - (before - after));
    jint piggybackedAck = 0;
    if ([msgIds size] != [remaining size]) {
      for (jint j = 0; j < [msgIds size]; j++) {
        JavaLangLong *id_ = [msgIds getWithInt:j];
        if (![remaining containsWithId:id_]) {
          [peer removeACKMessageWithJavaLangLong:id_];
          piggybackedAck++;
        }
      }
    }
    if (piggybackedAck > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendPiggyback" withLong:piggybackedAck];
    if (piggybackedPartialACK - [partialACKBitfields size] > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.sendPiggybackPartial" withLong:piggybackedPartialACK - [partialACKBitfields size] withLong:[state getLifetime]];
    [pkt setFragmentCountWithInt:[sendNext size]];
    [pkt setMessageTypeWithInt:msgType];
  }
  jint sent = [rv size];
  [peer packetsTransmittedWithInt:sent];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$I$@", @"Sent ", fragmentsToSend, @" fragments of ", [states size], @" messages in ", sent, @" packets to ", peer)];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundMessageFragments)

@implementation NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(chokeWithNetI2pDataHash:);
  methods[1].selector = @selector(unchokeWithNetI2pDataHash:);
  methods[2].selector = @selector(isChokedWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "choke", "LNetI2pDataHash;", "unchoke", "isChoked", "LNetI2pRouterTransportUdpOutboundMessageFragments;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle = { "ActiveThrottle", "net.i2p.router.transport.udp", ptrTable, methods, NULL, 7, 0x609, 3, 0, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundMessageFragments_ActiveThrottle)
