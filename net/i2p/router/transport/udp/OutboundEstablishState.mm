//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/OutboundEstablishState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"
#include "net/i2p/router/transport/udp/EstablishmentManager.h"
#include "net/i2p/router/transport/udp/OutboundEstablishState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpOutboundEstablishState () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  IOSByteArray *_sentX_;
  IOSByteArray *_bobIP_;
  jint _bobPort_;
  id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> _keyFactory_;
  NetI2pRouterTransportCryptoDHSessionKeyBuilder *_keyBuilder_;
  IOSByteArray *_receivedY_;
  IOSByteArray *_aliceIP_;
  jint _alicePort_;
  jlong _receivedRelayTag_;
  jlong _receivedSignedOnTime_;
  NetI2pDataSessionKey *_sessionKey_;
  NetI2pDataSessionKey *_macKey_;
  NetI2pDataSignature *_receivedSignature_;
  IOSByteArray *_receivedEncryptedSignature_;
  IOSByteArray *_receivedIV_;
  jlong _sentSignedOnTime_;
  NetI2pDataSignature *_sentSignature_;
  jlong _establishBegin_;
  jlong _lastSend_;
  jlong _nextSend_;
  NetI2pRouterTransportUdpRemoteHostId *_remoteHostId_;
  NetI2pRouterTransportUdpRemoteHostId *_claimedAddress_;
  NetI2pDataRouterRouterIdentity *_remotePeer_;
  jboolean _allowExtendedOptions_;
  jboolean _needIntroduction_;
  NetI2pDataSessionKey *_introKey_;
  id<JavaUtilQueue> _queuedMessages_;
  NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *_currentState_;
  jlong _introductionNonce_;
  jboolean _isFirstMessageOurDSM_;
  NetI2pRouterTransportUdpUDPAddress *_remoteAddress_;
  jboolean _complete_;
  jint _confirmedSentCount_;
  jint _requestSentCount_;
  jint _introSentCount_;
  jlong _confirmedSentTime_;
  jlong _requestSentTime_;
  jlong _introSentTime_;
}

- (void)prepareSessionRequest;

- (void)generateSessionKey;

- (void)decryptSignature;

- (jboolean)verifySessionCreated;

- (void)packetReceived;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _sentX_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _bobIP_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _keyFactory_, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _keyBuilder_, NetI2pRouterTransportCryptoDHSessionKeyBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _receivedY_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _aliceIP_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _sessionKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _macKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _receivedSignature_, NetI2pDataSignature *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _receivedEncryptedSignature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _receivedIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _sentSignature_, NetI2pDataSignature *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _remoteHostId_, NetI2pRouterTransportUdpRemoteHostId *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _claimedAddress_, NetI2pRouterTransportUdpRemoteHostId *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _remotePeer_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _introKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _queuedMessages_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _currentState_, NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpOutboundEstablishState, _remoteAddress_, NetI2pRouterTransportUdpUDPAddress *)

inline jlong NetI2pRouterTransportUdpOutboundEstablishState_get_RETRANSMIT_DELAY(void);
#define NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpOutboundEstablishState, RETRANSMIT_DELAY, jlong)

inline jlong NetI2pRouterTransportUdpOutboundEstablishState_get_MAX_DELAY(void);
#define NetI2pRouterTransportUdpOutboundEstablishState_MAX_DELAY 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpOutboundEstablishState, MAX_DELAY, jlong)

inline jlong NetI2pRouterTransportUdpOutboundEstablishState_get_WAIT_FOR_HOLE_PUNCH_DELAY(void);
#define NetI2pRouterTransportUdpOutboundEstablishState_WAIT_FOR_HOLE_PUNCH_DELAY 500LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpOutboundEstablishState, WAIT_FOR_HOLE_PUNCH_DELAY, jlong)

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundEstablishState_prepareSessionRequest(NetI2pRouterTransportUdpOutboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundEstablishState_generateSessionKey(NetI2pRouterTransportUdpOutboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundEstablishState_decryptSignature(NetI2pRouterTransportUdpOutboundEstablishState *self);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpOutboundEstablishState_verifySessionCreated(NetI2pRouterTransportUdpOutboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(NetI2pRouterTransportUdpOutboundEstablishState *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initWithNSString_withInt_(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *self, NSString *__name, jint __ordinal);

@implementation NetI2pRouterTransportUdpOutboundEstablishState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)claimedAddress
         withNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)remoteHostId
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)remotePeer
                                      withBoolean:(jboolean)allowExtendedOptions
                                      withBoolean:(jboolean)needIntroduction
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)introKey
           withNetI2pRouterTransportUdpUDPAddress:(NetI2pRouterTransportUdpUDPAddress *)addr
withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:(id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)dh {
  NetI2pRouterTransportUdpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(self, ctx, claimedAddress, remoteHostId, remotePeer, allowExtendedOptions, needIntroduction, introKey, addr, dh);
  return self;
}

- (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)getState {
  @synchronized(self) {
    return JreRetainedLocalValue(_currentState_);
  }
}

- (jboolean)complete {
  @synchronized(self) {
    jboolean already = _complete_;
    _complete_ = true;
    return already;
  }
}

- (NetI2pRouterTransportUdpUDPAddress *)getRemoteAddress {
  return _remoteAddress_;
}

- (void)setIntroNonceWithLong:(jlong)nonce {
  _introductionNonce_ = nonce;
}

- (jlong)getIntroNonce {
  return _introductionNonce_;
}

- (jboolean)isExtendedOptionsAllowed {
  return _allowExtendedOptions_;
}

- (jboolean)needIntroduction {
  return _needIntroduction_;
}

- (void)addMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if ([((id<JavaUtilQueue>) nil_chk(_queuedMessages_)) isEmpty]) {
    id<NetI2pDataI2npI2NPMessage> m = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getMessage];
    if ([((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getType] == NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE) {
      NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(m, [NetI2pDataI2npDatabaseStoreMessage class]);
      if ([((NetI2pDataHash *) nil_chk([dsm getKey])) isEqual:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]]) {
        _isFirstMessageOurDSM_ = true;
      }
    }
  }
  if (![_queuedMessages_ containsWithId:msg]) [_queuedMessages_ offerWithId:msg];
  else if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"attempt to add duplicate msg to queue: ", msg)];
}

- (jboolean)isFirstMessageOurDSM {
  return _isFirstMessageOurDSM_;
}

- (NetI2pRouterOutNetMessage *)getNextQueuedMessage {
  return [((id<JavaUtilQueue>) nil_chk(_queuedMessages_)) poll];
}

- (NetI2pDataRouterRouterIdentity *)getRemoteIdentity {
  return _remotePeer_;
}

- (NetI2pDataSessionKey *)getIntroKey {
  return _introKey_;
}

- (void)prepareSessionRequest {
  NetI2pRouterTransportUdpOutboundEstablishState_prepareSessionRequest(self);
}

- (IOSByteArray *)getSentX {
  @synchronized(self) {
    if (_sentX_ == nil) NetI2pRouterTransportUdpOutboundEstablishState_prepareSessionRequest(self);
    return JreRetainedLocalValue(_sentX_);
  }
}

- (IOSByteArray *)getSentIP {
  @synchronized(self) {
    return JreRetainedLocalValue(_bobIP_);
  }
}

- (jint)getSentPort {
  @synchronized(self) {
    return _bobPort_;
  }
}

- (void)receiveSessionCreatedWithNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader:(NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *)reader {
  @synchronized(self) {
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Session created already failed"];
      return;
    }
    if (_receivedY_ != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Session created already received, ignoring"];
      return;
    }
    JreStrongAssignAndConsume(&_receivedY_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH]);
    [((NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *) nil_chk(reader)) readYWithByteArray:_receivedY_ withInt:0];
    if (_aliceIP_ == nil) JreStrongAssignAndConsume(&_aliceIP_, [IOSByteArray newArrayWithLength:[reader readIPSize]]);
    [reader readIPWithByteArray:_aliceIP_ withInt:0];
    _alicePort_ = [reader readPort];
    _receivedRelayTag_ = [reader readRelayTag];
    _receivedSignedOnTime_ = [reader readSignedOnTime];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk(_remotePeer_)) getSigningPublicKey])) getType];
    if (type == nil) {
      [self fail];
      NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(self);
      return;
    }
    jint sigLen = [type getSigLen];
    jint mod = sigLen % 16;
    jint pad = (mod == 0) ? 0 : (16 - mod);
    jint esigLen = sigLen + pad;
    JreStrongAssignAndConsume(&_receivedEncryptedSignature_, [IOSByteArray newArrayWithLength:esigLen]);
    [reader readEncryptedSignatureWithByteArray:_receivedEncryptedSignature_ withInt:0 withInt:esigLen];
    JreStrongAssignAndConsume(&_receivedIV_, [IOSByteArray newArrayWithLength:NetI2pRouterTransportUdpUDPPacket_IV_SIZE]);
    [reader readIVWithByteArray:_receivedIV_ withInt:0];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$$$$J$JC$", @"Receive session created:Sig: ", NetI2pDataBase64_encodeWithByteArray_(_receivedEncryptedSignature_), @"receivedIV: ", NetI2pDataBase64_encodeWithByteArray_(_receivedIV_), @"AliceIP: ", NetI2pUtilAddresses_toStringWithByteArray_(_aliceIP_), @" RelayTag: ", _receivedRelayTag_, @" SignedOn: ", _receivedSignedOnTime_, ' ', [self description])];
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_REQUEST_SENT) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CREATED_RECEIVED));
    NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(self);
  }
}

- (jboolean)validateSessionCreated {
  @synchronized(self) {
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Session created already failed"];
      return false;
    }
    if (_receivedSignature_ != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Session created already validated"];
      return true;
    }
    jboolean valid = true;
    @try {
      NetI2pRouterTransportUdpOutboundEstablishState_generateSessionKey(self);
    }
    @catch (NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException *ippe) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$", @"Peer ", [self getRemoteHostId], @" sent us an invalid DH parameter") withJavaLangThrowable:ippe];
      valid = false;
    }
    if (valid) NetI2pRouterTransportUdpOutboundEstablishState_decryptSignature(self);
    if (valid && NetI2pRouterTransportUdpOutboundEstablishState_verifySessionCreated(self)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Session created passed validation"];
      return true;
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Session created failed validation, clearing state for ", [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(_remoteHostId_)) description])];
      [self fail];
      return false;
    }
  }
}

- (void)fail {
  @synchronized(self) {
    JreStrongAssign(&_receivedY_, nil);
    JreStrongAssign(&_aliceIP_, nil);
    _receivedRelayTag_ = 0;
    _receivedSignedOnTime_ = -1;
    JreStrongAssign(&_receivedEncryptedSignature_, nil);
    JreStrongAssign(&_receivedIV_, nil);
    JreStrongAssign(&_receivedSignature_, nil);
    if (_keyBuilder_ != nil) {
      if ([_keyBuilder_ getPeerPublicValue] == nil) [((id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>) nil_chk(_keyFactory_)) returnUnusedWithNetI2pRouterTransportCryptoDHSessionKeyBuilder:_keyBuilder_];
      JreStrongAssign(&_keyBuilder_, nil);
    }
    JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED));
    _nextSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  }
}

- (void)generateSessionKey {
  NetI2pRouterTransportUdpOutboundEstablishState_generateSessionKey(self);
}

- (void)decryptSignature {
  NetI2pRouterTransportUdpOutboundEstablishState_decryptSignature(self);
}

- (jboolean)verifySessionCreated {
  return NetI2pRouterTransportUdpOutboundEstablishState_verifySessionCreated(self);
}

- (NetI2pDataSessionKey *)getCipherKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_sessionKey_);
  }
}

- (NetI2pDataSessionKey *)getMACKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_macKey_);
  }
}

- (jlong)getReceivedRelayTag {
  @synchronized(self) {
    return _receivedRelayTag_;
  }
}

- (jlong)getSentSignedOnTime {
  @synchronized(self) {
    return _sentSignedOnTime_;
  }
}

- (jlong)getReceivedSignedOnTime {
  @synchronized(self) {
    return _receivedSignedOnTime_;
  }
}

- (IOSByteArray *)getReceivedIP {
  @synchronized(self) {
    return JreRetainedLocalValue(_aliceIP_);
  }
}

- (jint)getReceivedPort {
  @synchronized(self) {
    return _alicePort_;
  }
}

- (void)prepareSessionConfirmed {
  @synchronized(self) {
    if (_sentSignedOnTime_ > 0) return;
    IOSByteArray *signed_ = [IOSByteArray arrayWithLength:256 + 256 + ((IOSByteArray *) nil_chk(_aliceIP_))->size_ + 2 + ((IOSByteArray *) nil_chk(_bobIP_))->size_ + 2 + 4 + 4];
    _sentSignedOnTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] / 1000;
    jint off = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_sentX_, 0, signed_, off, ((IOSByteArray *) nil_chk(_sentX_))->size_);
    off += ((IOSByteArray *) nil_chk(_sentX_))->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_receivedY_, 0, signed_, off, ((IOSByteArray *) nil_chk(_receivedY_))->size_);
    off += ((IOSByteArray *) nil_chk(_receivedY_))->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_aliceIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(_aliceIP_))->size_);
    off += ((IOSByteArray *) nil_chk(_aliceIP_))->size_;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, _alicePort_);
    off += 2;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_bobIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(_bobIP_))->size_);
    off += ((IOSByteArray *) nil_chk(_bobIP_))->size_;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, _bobPort_);
    off += 2;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, _receivedRelayTag_);
    off += 4;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, _sentSignedOnTime_);
    JreStrongAssign(&_sentSignature_, [((NetI2pCryptoDSAEngine *) nil_chk([_context_ dsa])) signWithByteArray:signed_ withNetI2pDataSigningPrivateKey:[((NetI2pRouterKeyManager *) nil_chk([_context_ keyManager])) getSigningPrivateKey]]);
  }
}

- (NetI2pDataSignature *)getSentSignature {
  @synchronized(self) {
    return JreRetainedLocalValue(_sentSignature_);
  }
}

- (void)confirmedPacketsSent {
  @synchronized(self) {
    _lastSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    jlong delay;
    if (_confirmedSentCount_ == 0) {
      delay = NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY;
      _confirmedSentTime_ = _lastSend_;
    }
    else {
      delay = JavaLangMath_minWithLong_withLong_(JreLShift64(NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY, _confirmedSentCount_), _confirmedSentTime_ + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT - _lastSend_);
    }
    _confirmedSentCount_++;
    _nextSend_ = _lastSend_ + delay;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Send confirm packets, nextSend in ", delay)];
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_REQUEST_SENT) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CREATED_RECEIVED)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_PARTIALLY));
  }
}

- (jlong)getConfirmedSentTime {
  return _confirmedSentTime_;
}

- (void)requestSent {
  @synchronized(self) {
    _lastSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    jlong delay;
    if (_requestSentCount_ == 0) {
      delay = NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY;
      _requestSentTime_ = _lastSend_;
    }
    else {
      delay = JavaLangMath_minWithLong_withLong_(JreLShift64(NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY, _requestSentCount_), _requestSentTime_ + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT - _lastSend_);
    }
    _requestSentCount_++;
    _nextSend_ = _lastSend_ + delay;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Send a request packet, nextSend in ", delay)];
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN) || _currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_REQUEST_SENT));
  }
}

- (jlong)getRequestSentTime {
  return _requestSentTime_;
}

- (void)introSent {
  @synchronized(self) {
    _lastSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    jlong delay;
    if (_introSentCount_ == 0) {
      delay = NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY;
      _introSentTime_ = _lastSend_;
    }
    else {
      delay = JavaLangMath_minWithLong_withLong_(JreLShift64(NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY, _introSentCount_), _introSentTime_ + NetI2pRouterTransportUdpEstablishmentManager_OB_MESSAGE_TIMEOUT - _lastSend_);
    }
    _introSentCount_++;
    _nextSend_ = _lastSend_ + delay;
    if (_currentState_ == JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN)) JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO));
  }
}

- (jlong)getIntroSentTime {
  return _introSentTime_;
}

- (void)introductionFailed {
  @synchronized(self) {
    _nextSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  }
}

- (void)introducedWithByteArray:(IOSByteArray *)bobIP
                        withInt:(jint)bobPort {
  @synchronized(self) {
    if (_currentState_ != JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO)) return;
    _nextSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] + NetI2pRouterTransportUdpOutboundEstablishState_WAIT_FOR_HOLE_PUNCH_DELAY;
    JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED));
    if (_claimedAddress_ != nil && bobPort == _bobPort_ && NetI2pDataDataHelper_eqWithByteArray_withByteArray_(bobIP, _bobIP_)) {
      JreStrongAssign(&_remoteHostId_, _claimedAddress_);
    }
    else {
      JreStrongAssign(&_bobIP_, bobIP);
      _bobPort_ = bobPort;
      JreStrongAssignAndConsume(&_remoteHostId_, new_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_(bobIP, bobPort));
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Introduced to ", _remoteHostId_, @", now lets get on with establishing")];
  }
}

- (jboolean)receiveHolePunch {
  @synchronized(self) {
    if (_currentState_ != JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED)) return false;
    if (_requestSentCount_ > 0) return false;
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$J$", [self description], @" accelerating SessionRequest by ", (_nextSend_ - now), @" ms")];
    _nextSend_ = now;
    return true;
  }
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _establishBegin_;
}

- (jlong)getEstablishBeginTime {
  return _establishBegin_;
}

- (jlong)getNextSendTime {
  @synchronized(self) {
    return _nextSend_;
  }
}

- (NetI2pRouterTransportUdpRemoteHostId *)getRemoteHostId {
  return _remoteHostId_;
}

- (NetI2pRouterTransportUdpRemoteHostId *)getClaimedAddress {
  return _claimedAddress_;
}

- (void)dataReceived {
  @synchronized(self) {
    NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(self);
    JreStrongAssign(&_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_COMPLETELY));
  }
}

- (void)packetReceived {
  NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(self);
}

- (NSString *)description {
  return JreStrcat("$@C@", @"OES ", _remoteHostId_, ' ', _currentState_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_sentX_);
  RELEASE_(_bobIP_);
  RELEASE_(_keyFactory_);
  RELEASE_(_keyBuilder_);
  RELEASE_(_receivedY_);
  RELEASE_(_aliceIP_);
  RELEASE_(_sessionKey_);
  RELEASE_(_macKey_);
  RELEASE_(_receivedSignature_);
  RELEASE_(_receivedEncryptedSignature_);
  RELEASE_(_receivedIV_);
  RELEASE_(_sentSignature_);
  RELEASE_(_remoteHostId_);
  RELEASE_(_claimedAddress_);
  RELEASE_(_remotePeer_);
  RELEASE_(_introKey_);
  RELEASE_(_queuedMessages_);
  RELEASE_(_currentState_);
  RELEASE_(_remoteAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterIdentity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSignature;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpRemoteHostId;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpRemoteHostId;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpRemoteHostId:withNetI2pDataRouterRouterIdentity:withBoolean:withBoolean:withNetI2pDataSessionKey:withNetI2pRouterTransportUdpUDPAddress:withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory:);
  methods[1].selector = @selector(getState);
  methods[2].selector = @selector(complete);
  methods[3].selector = @selector(getRemoteAddress);
  methods[4].selector = @selector(setIntroNonceWithLong:);
  methods[5].selector = @selector(getIntroNonce);
  methods[6].selector = @selector(isExtendedOptionsAllowed);
  methods[7].selector = @selector(needIntroduction);
  methods[8].selector = @selector(addMessageWithNetI2pRouterOutNetMessage:);
  methods[9].selector = @selector(isFirstMessageOurDSM);
  methods[10].selector = @selector(getNextQueuedMessage);
  methods[11].selector = @selector(getRemoteIdentity);
  methods[12].selector = @selector(getIntroKey);
  methods[13].selector = @selector(prepareSessionRequest);
  methods[14].selector = @selector(getSentX);
  methods[15].selector = @selector(getSentIP);
  methods[16].selector = @selector(getSentPort);
  methods[17].selector = @selector(receiveSessionCreatedWithNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader:);
  methods[18].selector = @selector(validateSessionCreated);
  methods[19].selector = @selector(fail);
  methods[20].selector = @selector(generateSessionKey);
  methods[21].selector = @selector(decryptSignature);
  methods[22].selector = @selector(verifySessionCreated);
  methods[23].selector = @selector(getCipherKey);
  methods[24].selector = @selector(getMACKey);
  methods[25].selector = @selector(getReceivedRelayTag);
  methods[26].selector = @selector(getSentSignedOnTime);
  methods[27].selector = @selector(getReceivedSignedOnTime);
  methods[28].selector = @selector(getReceivedIP);
  methods[29].selector = @selector(getReceivedPort);
  methods[30].selector = @selector(prepareSessionConfirmed);
  methods[31].selector = @selector(getSentSignature);
  methods[32].selector = @selector(confirmedPacketsSent);
  methods[33].selector = @selector(getConfirmedSentTime);
  methods[34].selector = @selector(requestSent);
  methods[35].selector = @selector(getRequestSentTime);
  methods[36].selector = @selector(introSent);
  methods[37].selector = @selector(getIntroSentTime);
  methods[38].selector = @selector(introductionFailed);
  methods[39].selector = @selector(introducedWithByteArray:withInt:);
  methods[40].selector = @selector(receiveHolePunch);
  methods[41].selector = @selector(getLifetime);
  methods[42].selector = @selector(getEstablishBeginTime);
  methods[43].selector = @selector(getNextSendTime);
  methods[44].selector = @selector(getRemoteHostId);
  methods[45].selector = @selector(getClaimedAddress);
  methods[46].selector = @selector(dataReceived);
  methods[47].selector = @selector(packetReceived);
  methods[48].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sentX_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobIP_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bobPort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyFactory_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_keyBuilder_", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedY_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliceIP_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alicePort_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedRelayTag_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedSignedOnTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessionKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_macKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedSignature_", "LNetI2pDataSignature;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedEncryptedSignature_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_receivedIV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentSignedOnTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentSignature_", "LNetI2pDataSignature;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_establishBegin_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastSend_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nextSend_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_remoteHostId_", "LNetI2pRouterTransportUdpRemoteHostId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_claimedAddress_", "LNetI2pRouterTransportUdpRemoteHostId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remotePeer_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_allowExtendedOptions_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_needIntroduction_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_introKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_queuedMessages_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_currentState_", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_introductionNonce_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isFirstMessageOurDSM_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_remoteAddress_", "LNetI2pRouterTransportUdpUDPAddress;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_complete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_confirmedSentCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_requestSentCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_introSentCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_confirmedSentTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_requestSentTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_introSentTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "RETRANSMIT_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUdpOutboundEstablishState_RETRANSMIT_DELAY, 0x1a, -1, -1, -1, -1 },
    { "MAX_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUdpOutboundEstablishState_MAX_DELAY, 0x1a, -1, -1, -1, -1 },
    { "WAIT_FOR_HOLE_PUNCH_DELAY", "J", .constantValue.asLong = NetI2pRouterTransportUdpOutboundEstablishState_WAIT_FOR_HOLE_PUNCH_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpRemoteHostId;LNetI2pDataRouterRouterIdentity;ZZLNetI2pDataSessionKey;LNetI2pRouterTransportUdpUDPAddress;LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", "setIntroNonce", "J", "addMessage", "LNetI2pRouterOutNetMessage;", "receiveSessionCreated", "LNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader;", "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException;", "introduced", "[BI", "toString", "Ljava/util/Queue<Lnet/i2p/router/OutNetMessage;>;", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundEstablishState = { "OutboundEstablishState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 49, 43, -1, 12, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpOutboundEstablishState;
}

@end

void NetI2pRouterTransportUdpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterTransportUdpOutboundEstablishState *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpRemoteHostId *claimedAddress, NetI2pRouterTransportUdpRemoteHostId *remoteHostId, NetI2pDataRouterRouterIdentity *remotePeer, jboolean allowExtendedOptions, jboolean needIntroduction, NetI2pDataSessionKey *introKey, NetI2pRouterTransportUdpUDPAddress *addr, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpOutboundEstablishState_class_()]);
  if (claimedAddress != nil) {
    JreStrongAssign(&self->_bobIP_, [claimedAddress getIP]);
    self->_bobPort_ = [claimedAddress getPort];
  }
  else {
    self->_bobPort_ = -1;
  }
  JreStrongAssign(&self->_claimedAddress_, claimedAddress);
  JreStrongAssign(&self->_remoteHostId_, remoteHostId);
  self->_allowExtendedOptions_ = allowExtendedOptions;
  self->_needIntroduction_ = needIntroduction;
  JreStrongAssign(&self->_remotePeer_, remotePeer);
  JreStrongAssign(&self->_introKey_, introKey);
  JreStrongAssignAndConsume(&self->_queuedMessages_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  self->_establishBegin_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  JreStrongAssign(&self->_remoteAddress_, addr);
  self->_introductionNonce_ = -1;
  JreStrongAssign(&self->_keyFactory_, dh);
  if ([((NetI2pRouterTransportUdpUDPAddress *) nil_chk(addr)) getIntroducerCount] > 0) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"new outbound establish to ", [((NetI2pDataRouterRouterIdentity *) nil_chk(remotePeer)) calculateHash], @", with address: ", addr)];
    JreStrongAssign(&self->_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO));
  }
  else {
    JreStrongAssign(&self->_currentState_, JreLoadEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN));
  }
}

NetI2pRouterTransportUdpOutboundEstablishState *new_NetI2pRouterTransportUdpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpRemoteHostId *claimedAddress, NetI2pRouterTransportUdpRemoteHostId *remoteHostId, NetI2pDataRouterRouterIdentity *remotePeer, jboolean allowExtendedOptions, jboolean needIntroduction, NetI2pDataSessionKey *introKey, NetI2pRouterTransportUdpUDPAddress *addr, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpOutboundEstablishState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_, ctx, claimedAddress, remoteHostId, remotePeer, allowExtendedOptions, needIntroduction, introKey, addr, dh)
}

NetI2pRouterTransportUdpOutboundEstablishState *create_NetI2pRouterTransportUdpOutboundEstablishState_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpRemoteHostId *claimedAddress, NetI2pRouterTransportUdpRemoteHostId *remoteHostId, NetI2pDataRouterRouterIdentity *remotePeer, jboolean allowExtendedOptions, jboolean needIntroduction, NetI2pDataSessionKey *introKey, NetI2pRouterTransportUdpUDPAddress *addr, id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory> dh) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpOutboundEstablishState, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpRemoteHostId_withNetI2pDataRouterRouterIdentity_withBoolean_withBoolean_withNetI2pDataSessionKey_withNetI2pRouterTransportUdpUDPAddress_withNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory_, ctx, claimedAddress, remoteHostId, remotePeer, allowExtendedOptions, needIntroduction, introKey, addr, dh)
}

void NetI2pRouterTransportUdpOutboundEstablishState_prepareSessionRequest(NetI2pRouterTransportUdpOutboundEstablishState *self) {
  JreStrongAssign(&self->_keyBuilder_, [((id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>) nil_chk(self->_keyFactory_)) getBuilder]);
  IOSByteArray *X = [((JavaMathBigInteger *) nil_chk([((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_keyBuilder_)) getMyPublicValue])) toByteArray];
  if (((IOSByteArray *) nil_chk(X))->size_ == 257) {
    JreStrongAssignAndConsume(&self->_sentX_, [IOSByteArray newArrayWithLength:256]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 1, self->_sentX_, 0, self->_sentX_->size_);
  }
  else if (X->size_ == 256) {
    JreStrongAssign(&self->_sentX_, X);
  }
  else {
    JreStrongAssignAndConsume(&self->_sentX_, [IOSByteArray newArrayWithLength:256]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, self->_sentX_, self->_sentX_->size_ - X->size_, X->size_);
  }
}

void NetI2pRouterTransportUdpOutboundEstablishState_generateSessionKey(NetI2pRouterTransportUdpOutboundEstablishState *self) {
  if (self->_sessionKey_ != nil) return;
  if (self->_keyBuilder_ == nil) @throw create_NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException_initWithNSString_(@"Illegal state - never generated a key builder");
  @try {
    [self->_keyBuilder_ setPeerPublicValueWithByteArray:self->_receivedY_];
  }
  @catch (JavaLangIllegalStateException *ise) {
    @throw create_NetI2pRouterTransportCryptoDHSessionKeyBuilder_InvalidPublicParameterException_initWithNSString_withJavaLangThrowable_(@"reused keys?", ise);
  }
  JreStrongAssign(&self->_sessionKey_, [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_keyBuilder_)) getSessionKey]);
  NetI2pDataByteArray *extra = [((NetI2pRouterTransportCryptoDHSessionKeyBuilder *) nil_chk(self->_keyBuilder_)) getExtraBytes];
  JreStrongAssignAndConsume(&self->_macKey_, new_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(extra)) getData], 0, [((NetI2pDataSessionKey *) nil_chk(self->_macKey_)) getData], 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Established outbound keys.  cipher: ", self->_sessionKey_, @" mac: ", self->_macKey_)];
}

void NetI2pRouterTransportUdpOutboundEstablishState_decryptSignature(NetI2pRouterTransportUdpOutboundEstablishState *self) {
  if (self->_receivedEncryptedSignature_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", @"encrypted signature is null! this=", [self description]));
  if (self->_sessionKey_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"SessionKey is null!");
  if (self->_receivedIV_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"IV is null!");
  [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) aes])) decryptWithByteArray:self->_receivedEncryptedSignature_ withInt:0 withByteArray:self->_receivedEncryptedSignature_ withInt:0 withNetI2pDataSessionKey:self->_sessionKey_ withByteArray:self->_receivedIV_ withInt:((IOSByteArray *) nil_chk(self->_receivedEncryptedSignature_))->size_];
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk(self->_remotePeer_)) getSigningPublicKey])) getType];
  jint sigLen = [((NetI2pCryptoSigType *) nil_chk(type)) getSigLen];
  jint mod = sigLen % 16;
  if (mod != 0) {
    IOSByteArray *signatureBytes = [IOSByteArray arrayWithLength:sigLen];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_receivedEncryptedSignature_, 0, signatureBytes, 0, sigLen);
    JreStrongAssignAndConsume(&self->_receivedSignature_, new_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, signatureBytes));
  }
  else {
    JreStrongAssignAndConsume(&self->_receivedSignature_, new_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, self->_receivedEncryptedSignature_));
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", @"Decrypted received signature: ", NetI2pDataBase64_encodeWithByteArray_([((NetI2pDataSignature *) nil_chk(self->_receivedSignature_)) getData]))];
}

jboolean NetI2pRouterTransportUdpOutboundEstablishState_verifySessionCreated(NetI2pRouterTransportUdpOutboundEstablishState *self) {
  IOSByteArray *signed_ = [IOSByteArray arrayWithLength:256 + 256 + ((IOSByteArray *) nil_chk(self->_aliceIP_))->size_ + 2 + ((IOSByteArray *) nil_chk(self->_bobIP_))->size_ + 2 + 4 + 4];
  jint off = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_sentX_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_sentX_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_sentX_))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_receivedY_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_receivedY_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_receivedY_))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_aliceIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_aliceIP_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_aliceIP_))->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_alicePort_);
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->_bobIP_, 0, signed_, off, ((IOSByteArray *) nil_chk(self->_bobIP_))->size_);
  off += ((IOSByteArray *) nil_chk(self->_bobIP_))->size_;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 2, self->_bobPort_);
  off += 2;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_receivedRelayTag_);
  off += 4;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(signed_, off, 4, self->_receivedSignedOnTime_);
  jboolean valid = [((NetI2pCryptoDSAEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) dsa])) verifySignatureWithNetI2pDataSignature:self->_receivedSignature_ withByteArray:signed_ withNetI2pDataSigningPublicKey:[((NetI2pDataRouterRouterIdentity *) nil_chk(self->_remotePeer_)) getSigningPublicKey]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG] || ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN] && !valid)) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [buf appendWithNSString:@"Signed sessionCreated:"];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Alice: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(self->_aliceIP_, self->_alicePort_)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Bob: "])) appendWithNSString:NetI2pUtilAddresses_toStringWithByteArray_withInt_(self->_bobIP_, self->_bobPort_)];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" RelayTag: "])) appendWithLong:self->_receivedRelayTag_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" SignedOn: "])) appendWithLong:self->_receivedSignedOnTime_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" signature: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_([((NetI2pDataSignature *) nil_chk(self->_receivedSignature_)) getData])];
    if (valid) [self->_log_ debugWithNSString:[buf description]];
    else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"INVALID: ", [buf description])];
  }
  return valid;
}

void NetI2pRouterTransportUdpOutboundEstablishState_packetReceived(NetI2pRouterTransportUdpOutboundEstablishState *self) {
  self->_nextSend_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:@"Got a packet, nextSend == now"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundEstablishState)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState)

NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values_[8];

@implementation NetI2pRouterTransportUdpOutboundEstablishState_OutboundState

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_UNKNOWN {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_REQUEST_SENT {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_REQUEST_SENT);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_CREATED_RECEIVED {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CREATED_RECEIVED);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_CONFIRMED_PARTIALLY {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_PARTIALLY);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_CONFIRMED_COMPLETELY {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_COMPLETELY);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_PENDING_INTRO {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_INTRODUCED {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED);
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)OB_STATE_VALIDATION_FAILED {
  return JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values();
}

+ (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum)toNSEnum {
  return (NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OB_STATE_UNKNOWN", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "OB_STATE_REQUEST_SENT", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "OB_STATE_CREATED_RECEIVED", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "OB_STATE_CONFIRMED_PARTIALLY", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "OB_STATE_CONFIRMED_COMPLETELY", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "OB_STATE_PENDING_INTRO", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "OB_STATE_INTRODUCED", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "OB_STATE_VALIDATION_FAILED", "LNetI2pRouterTransportUdpOutboundEstablishState_OutboundState;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_UNKNOWN), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_REQUEST_SENT), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CREATED_RECEIVED), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_PARTIALLY), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_CONFIRMED_COMPLETELY), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_PENDING_INTRO), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_INTRODUCED), &JreEnum(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState, OB_STATE_VALIDATION_FAILED), "LNetI2pRouterTransportUdpOutboundEstablishState;", "Ljava/lang/Enum<Lnet/i2p/router/transport/udp/OutboundEstablishState$OutboundState;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpOutboundEstablishState_OutboundState = { "OutboundState", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x4019, 2, 8, 10, -1, -1, 11, -1 };
  return &_NetI2pRouterTransportUdpOutboundEstablishState_OutboundState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportUdpOutboundEstablishState_OutboundState class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 8 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 8; i++) {
      ((void)(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState)
  }
}

@end

void NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initWithNSString_withInt_(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values() {
  NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values_ count:8 type:NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_class_()];
}

NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initialize();
  for (int i = 0; i < 8; i++) {
    NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *e = NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportUdpOutboundEstablishState_OutboundState *NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_initialize();
  if (ordinal >= 8) {
    return nil;
  }
  return NetI2pRouterTransportUdpOutboundEstablishState_OutboundState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpOutboundEstablishState_OutboundState)
