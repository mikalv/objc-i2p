//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/MessageReceiver.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/data/i2np/I2NPMessageImpl.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/MessageReceiver.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/router/util/CoDelBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTransportUdpMessageReceiver () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  id<JavaUtilConcurrentBlockingQueue> _completeMessages_;
  volatile_jboolean _alive_;
  jint _threadCount_;
}

- (id<NetI2pDataI2npI2NPMessage>)readMessageWithNetI2pDataByteArray:(NetI2pDataByteArray *)buf
                    withNetI2pRouterTransportUdpInboundMessageState:(NetI2pRouterTransportUdpInboundMessageState *)state
                               withNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler;

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpMessageReceiver, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpMessageReceiver, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpMessageReceiver, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpMessageReceiver, _completeMessages_, id<JavaUtilConcurrentBlockingQueue>)

inline jint NetI2pRouterTransportUdpMessageReceiver_get_MIN_THREADS(void);
#define NetI2pRouterTransportUdpMessageReceiver_MIN_THREADS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpMessageReceiver, MIN_THREADS, jint)

inline jint NetI2pRouterTransportUdpMessageReceiver_get_MAX_THREADS(void);
#define NetI2pRouterTransportUdpMessageReceiver_MAX_THREADS 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpMessageReceiver, MAX_THREADS, jint)

inline jint NetI2pRouterTransportUdpMessageReceiver_get_MIN_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpMessageReceiver_MIN_QUEUE_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpMessageReceiver, MIN_QUEUE_SIZE, jint)

inline jint NetI2pRouterTransportUdpMessageReceiver_get_MAX_QUEUE_SIZE(void);
#define NetI2pRouterTransportUdpMessageReceiver_MAX_QUEUE_SIZE 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpMessageReceiver, MAX_QUEUE_SIZE, jint)

inline jlong NetI2pRouterTransportUdpMessageReceiver_get_POISON_IMS(void);
#define NetI2pRouterTransportUdpMessageReceiver_POISON_IMS -99999999999LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpMessageReceiver, POISON_IMS, jlong)

__attribute__((unused)) static id<NetI2pDataI2npI2NPMessage> NetI2pRouterTransportUdpMessageReceiver_readMessageWithNetI2pDataByteArray_withNetI2pRouterTransportUdpInboundMessageState_withNetI2pDataI2npI2NPMessageHandler_(NetI2pRouterTransportUdpMessageReceiver *self, NetI2pDataByteArray *buf, NetI2pRouterTransportUdpInboundMessageState *state, NetI2pDataI2npI2NPMessageHandler *handler);

__attribute__((unused)) static NSString *NetI2pRouterTransportUdpMessageReceiver__xWithNSString_(NSString *s);

@interface NetI2pRouterTransportUdpMessageReceiver_Runner : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterTransportUdpMessageReceiver *this$0_;
  NetI2pDataI2npI2NPMessageHandler *_handler_;
}

- (instancetype)initWithNetI2pRouterTransportUdpMessageReceiver:(NetI2pRouterTransportUdpMessageReceiver *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpMessageReceiver_Runner)

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpMessageReceiver_Runner, _handler_, NetI2pDataI2npI2NPMessageHandler *)

__attribute__((unused)) static void NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver_Runner *self, NetI2pRouterTransportUdpMessageReceiver *outer$);

__attribute__((unused)) static NetI2pRouterTransportUdpMessageReceiver_Runner *new_NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpMessageReceiver_Runner *create_NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpMessageReceiver_Runner)

@implementation NetI2pRouterTransportUdpMessageReceiver

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self, ctx, transport);
  return self;
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, true);
    for (jint i = 0; i < _threadCount_; i++) {
      NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(create_NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(self), JreStrcat("$ICI", @"UDP message receiver ", (i + 1), '/', _threadCount_), true);
      [t start];
    }
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_alive_, false);
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_completeMessages_)) clear];
    for (jint i = 0; i < _threadCount_; i++) {
      NetI2pRouterTransportUdpInboundMessageState *ims = create_NetI2pRouterTransportUdpInboundMessageState_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataHash_(_context_, NetI2pRouterTransportUdpMessageReceiver_POISON_IMS, nil);
      [_completeMessages_ offerWithId:ims];
    }
    for (jint i = 1; i <= 5 && ![_completeMessages_ isEmpty]; i++) {
      @try {
        JavaLangThread_sleepWithLong_(i * 50);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    [_completeMessages_ clear];
  }
}

- (void)receiveMessageWithNetI2pRouterTransportUdpInboundMessageState:(NetI2pRouterTransportUdpInboundMessageState *)state {
  if (JreLoadVolatileBoolean(&_alive_)) {
    @try {
      [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_completeMessages_)) putWithId:state];
    }
    @catch (JavaLangInterruptedException *ie) {
      JreAssignVolatileBoolean(&_alive_, false);
    }
  }
}

- (void)loopWithNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  NetI2pRouterTransportUdpInboundMessageState *message = nil;
  NetI2pDataByteArray *buf = create_NetI2pDataByteArray_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataI2npI2NPMessage_MAX_SIZE]);
  while (JreLoadVolatileBoolean(&_alive_)) {
    jint expired = 0;
    jlong expiredLifetime = 0;
    @try {
      while (message == nil) {
        message = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_completeMessages_)) take];
        if ((message != nil) && ([((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(message)) getMessageId] == NetI2pRouterTransportUdpMessageReceiver_POISON_IMS)) {
          message = nil;
          break;
        }
        if ((message != nil) && ([((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(message)) isExpired])) {
          expiredLifetime += [((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(message)) getLifetime];
          message = nil;
          expired++;
        }
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    if (expired > 0) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.inboundExpired" withLong:expired withLong:expiredLifetime];
    if (message != nil) {
      jint size = [message getCompleteSize];
      @try {
        id<NetI2pDataI2npI2NPMessage> msg = NetI2pRouterTransportUdpMessageReceiver_readMessageWithNetI2pDataByteArray_withNetI2pRouterTransportUdpInboundMessageState_withNetI2pDataI2npI2NPMessageHandler_(self, buf, message, handler);
        if (msg != nil) [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) messageReceivedWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataRouterRouterIdentity:nil withNetI2pDataHash:[message getFrom] withLong:[message getLifetime] withInt:size];
      }
      @catch (JavaLangRuntimeException *re) {
        [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"b0rked receiving a message.. wazza huzza hmm?" withJavaLangThrowable:re];
        continue;
      }
      message = nil;
    }
  }
}

- (id<NetI2pDataI2npI2NPMessage>)readMessageWithNetI2pDataByteArray:(NetI2pDataByteArray *)buf
                    withNetI2pRouterTransportUdpInboundMessageState:(NetI2pRouterTransportUdpInboundMessageState *)state
                               withNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  return NetI2pRouterTransportUdpMessageReceiver_readMessageWithNetI2pDataByteArray_withNetI2pRouterTransportUdpInboundMessageState_withNetI2pDataI2npI2NPMessageHandler_(self, buf, state, handler);
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTransportUdpMessageReceiver__xWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_completeMessages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(receiveMessageWithNetI2pRouterTransportUdpInboundMessageState:);
  methods[4].selector = @selector(loopWithNetI2pDataI2npI2NPMessageHandler:);
  methods[5].selector = @selector(readMessageWithNetI2pDataByteArray:withNetI2pRouterTransportUdpInboundMessageState:withNetI2pDataI2npI2NPMessageHandler:);
  methods[6].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_completeMessages_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "MIN_THREADS", "I", .constantValue.asInt = NetI2pRouterTransportUdpMessageReceiver_MIN_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREADS", "I", .constantValue.asInt = NetI2pRouterTransportUdpMessageReceiver_MAX_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MIN_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpMessageReceiver_MIN_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterTransportUdpMessageReceiver_MAX_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_threadCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "POISON_IMS", "J", .constantValue.asLong = NetI2pRouterTransportUdpMessageReceiver_POISON_IMS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;", "receiveMessage", "LNetI2pRouterTransportUdpInboundMessageState;", "loop", "LNetI2pDataI2npI2NPMessageHandler;", "readMessage", "LNetI2pDataByteArray;LNetI2pRouterTransportUdpInboundMessageState;LNetI2pDataI2npI2NPMessageHandler;", "_x", "LNSString;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/transport/udp/InboundMessageState;>;", "LNetI2pRouterTransportUdpMessageReceiver_Runner;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpMessageReceiver = { "MessageReceiver", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 7, 11, -1, 10, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpMessageReceiver;
}

@end

void NetI2pRouterTransportUdpMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpMessageReceiver *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpMessageReceiver_class_()]);
  JreStrongAssign(&self->_transport_, transport);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint qsize;
  if (maxMemory < 32 * 1024 * 1024) {
    self->_threadCount_ = 1;
    qsize = 16;
  }
  else if (maxMemory < 64 * 1024 * 1024) {
    self->_threadCount_ = 2;
    qsize = 32;
  }
  else {
    self->_threadCount_ = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTransportUdpMessageReceiver_MIN_THREADS, JavaLangMath_minWithInt_withInt_(NetI2pRouterTransportUdpMessageReceiver_MAX_THREADS, [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([ctx bandwidthLimiter])) getInboundKBytesPerSecond] / 20));
    qsize = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pRouterTransportUdpMessageReceiver_MIN_QUEUE_SIZE, JavaLangMath_minWithLong_withLong_(NetI2pRouterTransportUdpMessageReceiver_MAX_QUEUE_SIZE, maxMemory / (2 * 1024 * 1024)));
  }
  JreStrongAssignAndConsume(&self->_completeMessages_, new_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(ctx, @"UDP-MessageReceiver", qsize));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.inboundExpired" withNSString:@"How many messages were expired before reception?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  JreAssignVolatileBoolean(&self->_alive_, true);
}

NetI2pRouterTransportUdpMessageReceiver *new_NetI2pRouterTransportUdpMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

NetI2pRouterTransportUdpMessageReceiver *create_NetI2pRouterTransportUdpMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *ctx, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, ctx, transport)
}

id<NetI2pDataI2npI2NPMessage> NetI2pRouterTransportUdpMessageReceiver_readMessageWithNetI2pDataByteArray_withNetI2pRouterTransportUdpInboundMessageState_withNetI2pDataI2npI2NPMessageHandler_(NetI2pRouterTransportUdpMessageReceiver *self, NetI2pDataByteArray *buf, NetI2pRouterTransportUdpInboundMessageState *state, NetI2pDataI2npI2NPMessageHandler *handler) {
  @try {
    id<NetI2pDataI2npI2NPMessage> m;
    jint numFragments = [((NetI2pRouterTransportUdpInboundMessageState *) nil_chk(state)) getFragmentCount];
    if (numFragments > 1) {
      IOSObjectArray *fragments = [state getFragments];
      jint off = 0;
      for (jint i = 0; i < numFragments; i++) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(nil_chk(fragments), i))) getData], 0, [((NetI2pDataByteArray *) nil_chk(buf)) getData], off, [((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(fragments, i))) getValid]);
        off += [((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(fragments, i))) getValid];
      }
      if (off != [state getCompleteSize]) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$I", @"Hmm, offset of the fragments = ", off, @" while the state says ", [state getCompleteSize])];
        return nil;
      }
      m = NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayWithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(self->_context_, [((NetI2pDataByteArray *) nil_chk(buf)) getData], 0, [state getCompleteSize], handler);
    }
    else {
      m = NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayWithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(self->_context_, [((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(nil_chk([state getFragments]), 0))) getData], 0, [state getCompleteSize], handler);
    }
    [((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) setUniqueIdWithLong:[state getMessageId]];
    return m;
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
      NetI2pDataByteArray *ba;
      if ([state getFragmentCount] > 1) ba = buf;
      else ba = IOSObjectArray_Get(nil_chk([state getFragments]), 0);
      IOSByteArray *data = [((NetI2pDataByteArray *) nil_chk(ba)) getData];
      [self->_log_ warnWithNSString:JreStrcat("$@$@$$$$", @"Message invalid: ", state, @" PeerState: ", [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pDataHash:[state getFrom]], @"\nDUMP:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_(data, 0, [state getCompleteSize]), @"\nRAW:\n", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, 0, [state getCompleteSize])) withJavaLangThrowable:ime];
    }
    if (IOSByteArray_Get(nil_chk([((NetI2pDataByteArray *) nil_chk(IOSObjectArray_Get(nil_chk([state getFragments]), 0))) getData]), 0) == NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE) {
      NetI2pRouterTransportUdpPeerState *ps = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pDataHash:[state getFrom]];
      if (ps != nil && [ps getRemotePort] == 65520) {
        [self->_transport_ sendDestroyWithNetI2pRouterTransportUdpPeerState:ps];
        [self->_transport_ dropPeerWithNetI2pRouterTransportUdpPeerState:ps withBoolean:true withNSString:@"Corrupt DSM"];
        [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) banlistRouterForeverWithNetI2pDataHash:[state getFrom] withNSString:NetI2pRouterTransportUdpMessageReceiver__xWithNSString_(@"Sent corrupt DSM")];
      }
    }
    [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) messageHistory])) droppedInboundMessageWithLong:[state getMessageId] withNetI2pDataHash:[state getFrom] withNSString:JreStrcat("$$$$", @"error: ", [ime description], @": ", [state description])];
    return nil;
  }
  @catch (JavaLangRuntimeException *e) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Error handling a message: ", state) withJavaLangThrowable:e];
    [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) messageHistory])) droppedInboundMessageWithLong:[state getMessageId] withNetI2pDataHash:[state getFrom] withNSString:JreStrcat("$$$$", @"error: ", [e description], @": ", [state description])];
    return nil;
  }
  @finally {
    [state releaseResources];
  }
}

NSString *NetI2pRouterTransportUdpMessageReceiver__xWithNSString_(NSString *s) {
  NetI2pRouterTransportUdpMessageReceiver_initialize();
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpMessageReceiver)

@implementation NetI2pRouterTransportUdpMessageReceiver_Runner

- (instancetype)initWithNetI2pRouterTransportUdpMessageReceiver:(NetI2pRouterTransportUdpMessageReceiver *)outer$ {
  NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ loopWithNetI2pDataI2npI2NPMessageHandler:_handler_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpMessageReceiver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpMessageReceiver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_handler_", "LNetI2pDataI2npI2NPMessageHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpMessageReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpMessageReceiver_Runner = { "Runner", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpMessageReceiver_Runner;
}

@end

void NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver_Runner *self, NetI2pRouterTransportUdpMessageReceiver *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_handler_, new_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(outer$->_context_));
}

NetI2pRouterTransportUdpMessageReceiver_Runner *new_NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpMessageReceiver_Runner, initWithNetI2pRouterTransportUdpMessageReceiver_, outer$)
}

NetI2pRouterTransportUdpMessageReceiver_Runner *create_NetI2pRouterTransportUdpMessageReceiver_Runner_initWithNetI2pRouterTransportUdpMessageReceiver_(NetI2pRouterTransportUdpMessageReceiver *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpMessageReceiver_Runner, initWithNetI2pRouterTransportUdpMessageReceiver_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpMessageReceiver_Runner)
