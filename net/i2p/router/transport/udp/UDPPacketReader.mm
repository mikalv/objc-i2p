//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/UDPPacketReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/DatagramPacket.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/transport/udp/ACKBitfield.h"
#include "net/i2p/router/transport/udp/InboundMessageState.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTransportUdpUDPPacketReader () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  IOSByteArray *_message_;
  jint _payloadBeginOffset_;
  jint _payloadLength_;
  NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *_sessionRequestReader_;
  NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *_sessionCreatedReader_;
  NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *_sessionConfirmedReader_;
  NetI2pRouterTransportUdpUDPPacketReader_DataReader *_dataReader_;
  NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *_peerTestReader_;
  NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *_relayRequestReader_;
  NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *_relayIntroReader_;
  NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *_relayResponseReader_;
}

- (void)initialize__WithByteArray:(IOSByteArray *)message
                          withInt:(jint)payloadOffset
                          withInt:(jint)payloadLength OBJC_METHOD_FAMILY_NONE;

- (jint)readBodyOffset;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _message_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _sessionRequestReader_, NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _sessionCreatedReader_, NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _sessionConfirmedReader_, NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _dataReader_, NetI2pRouterTransportUdpUDPPacketReader_DataReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _peerTestReader_, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _relayRequestReader_, NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _relayIntroReader_, NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpUDPPacketReader, _relayResponseReader_, NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *)

inline jint NetI2pRouterTransportUdpUDPPacketReader_get_KEYING_MATERIAL_LENGTH(void);
#define NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPPacketReader, KEYING_MATERIAL_LENGTH, jint)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPPacketReader_initialize__WithByteArray_withInt_withInt_(NetI2pRouterTransportUdpUDPPacketReader *self, IOSByteArray *message, jint payloadOffset, jint payloadLength);

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(NetI2pRouterTransportUdpUDPPacketReader *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader__Annotations$0(void);

@interface NetI2pRouterTransportUdpUDPPacketReader_Reader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$0_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_DataReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

- (jint)getFragmentBeginWithInt:(jint)fragmentNum;

- (jboolean)flagSetWithByte:(jbyte)flag;

@end

__attribute__((unused)) static jint NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(NetI2pRouterTransportUdpUDPPacketReader_DataReader *self, jint fragmentNum);

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(NetI2pRouterTransportUdpUDPPacketReader_DataReader *self, jbyte flag);

@interface NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield : NSObject < NetI2pRouterTransportUdpACKBitfield > {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$0_;
  jint _start_;
  jint _bitfieldStart_;
  jint _bitfieldSize_;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$
                                                        withInt:(jint)start;

- (jlong)getMessageId;

- (jint)getByteLength;

- (jint)fragmentCount;

- (jboolean)receivedComplete;

- (jint)ackCount;

- (jint)highestReceived;

- (jboolean)receivedWithInt:(jint)fragmentNum;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield)

__attribute__((unused)) static void NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *self, NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start);

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *new_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *create_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield)

@interface NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

inline jint NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_get_NONCE_LENGTH(void);
#define NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader, NONCE_LENGTH, jint)

@interface NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

@interface NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader () {
 @public
  NetI2pRouterTransportUdpUDPPacketReader *this$1_;
}

@end

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$2(void);

@implementation NetI2pRouterTransportUdpUDPPacketReader

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pRouterTransportUdpUDPPacketReader_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)initialize__WithNetI2pRouterTransportUdpUDPPacket:(NetI2pRouterTransportUdpUDPPacket *)packet {
  jint off = [((JavaNetDatagramPacket *) nil_chk([((NetI2pRouterTransportUdpUDPPacket *) nil_chk(packet)) getPacket])) getOffset];
  jint len = [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getLength];
  off += NetI2pRouterTransportUdpUDPPacket_MAC_SIZE + NetI2pRouterTransportUdpUDPPacket_IV_SIZE;
  len -= NetI2pRouterTransportUdpUDPPacket_MAC_SIZE + NetI2pRouterTransportUdpUDPPacket_IV_SIZE;
  NetI2pRouterTransportUdpUDPPacketReader_initialize__WithByteArray_withInt_withInt_(self, [((JavaNetDatagramPacket *) nil_chk([packet getPacket])) getData], off, len);
}

- (void)initialize__WithByteArray:(IOSByteArray *)message
                          withInt:(jint)payloadOffset
                          withInt:(jint)payloadLength {
  NetI2pRouterTransportUdpUDPPacketReader_initialize__WithByteArray_withInt_withInt_(self, message, payloadOffset, payloadLength);
}

- (jint)readPayloadType {
  return JreURShift32((IOSByteArray_Get(nil_chk(_message_), _payloadBeginOffset_) & (jint) 0xFF), 4);
}

- (jboolean)isRekeyingIncluded {
  return (IOSByteArray_Get(nil_chk(_message_), _payloadBeginOffset_) & NetI2pRouterTransportUdpUDPPacket_HEADER_FLAG_REKEY) != 0;
}

- (jboolean)isExtendedOptionsIncluded {
  return (IOSByteArray_Get(nil_chk(_message_), _payloadBeginOffset_) & NetI2pRouterTransportUdpUDPPacket_HEADER_FLAG_EXTENDED_OPTIONS) != 0;
}

- (jlong)readTimestamp {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_message_, _payloadBeginOffset_ + 1, 4);
}

- (IOSByteArray *)readKeyingMaterial {
  if (![self isRekeyingIncluded]) return nil;
  IOSByteArray *rv = [IOSByteArray arrayWithLength:NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_message_, _payloadBeginOffset_ + 1 + 4, rv, 0, NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH);
  return rv;
}

- (IOSByteArray *)readExtendedOptions {
  if (![self isExtendedOptionsIncluded]) return nil;
  jint offset = _payloadBeginOffset_ + 1 + 4;
  if ([self isRekeyingIncluded]) offset += NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH;
  jint optionsSize = IOSByteArray_Get(nil_chk(_message_), offset++) & (jint) 0xff;
  IOSByteArray *rv = [IOSByteArray arrayWithLength:optionsSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_message_, offset, rv, 0, optionsSize);
  return rv;
}

- (jint)readBodyOffset {
  return NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(self);
}

- (NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *)getSessionRequestReader {
  return _sessionRequestReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *)getSessionCreatedReader {
  return _sessionCreatedReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *)getSessionConfirmedReader {
  return _sessionConfirmedReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_DataReader *)getDataReader {
  return _dataReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)getPeerTestReader {
  return _peerTestReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *)getRelayRequestReader {
  return _relayRequestReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *)getRelayIntroReader {
  return _relayIntroReader_;
}

- (NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *)getRelayResponseReader {
  return _relayResponseReader_;
}

- (NSString *)description {
  jint type = [self readPayloadType];
  switch (type) {
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_DATA:
    return [((NetI2pRouterTransportUdpUDPPacketReader_DataReader *) nil_chk(_dataReader_)) description];
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_CONFIRMED:
    return @"Session confirmed packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_CREATED:
    return @"Session created packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_REQUEST:
    return @"Session request packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_TEST:
    return @"Peer test packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_INTRO:
    return @"Relay intro packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_REQUEST:
    return @"Relay request packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_RELAY_RESPONSE:
    return @"Relay response packet";
    case NetI2pRouterTransportUdpUDPPacket_PAYLOAD_TYPE_SESSION_DESTROY:
    return @"Session destroyed packet";
    default:
    return JreStrcat("$I", @"Unknown packet type ", type);
  }
}

- (void)toRawStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  if (_message_ != nil) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(_message_, _payloadBeginOffset_, _payloadLength_)];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_message_);
  RELEASE_(_sessionRequestReader_);
  RELEASE_(_sessionCreatedReader_);
  RELEASE_(_sessionConfirmedReader_);
  RELEASE_(_dataReader_);
  RELEASE_(_peerTestReader_);
  RELEASE_(_relayRequestReader_);
  RELEASE_(_relayIntroReader_);
  RELEASE_(_relayResponseReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_DataReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initialize__WithNetI2pRouterTransportUdpUDPPacket:);
  methods[2].selector = @selector(initialize__WithByteArray:withInt:withInt:);
  methods[3].selector = @selector(readPayloadType);
  methods[4].selector = @selector(isRekeyingIncluded);
  methods[5].selector = @selector(isExtendedOptionsIncluded);
  methods[6].selector = @selector(readTimestamp);
  methods[7].selector = @selector(readKeyingMaterial);
  methods[8].selector = @selector(readExtendedOptions);
  methods[9].selector = @selector(readBodyOffset);
  methods[10].selector = @selector(getSessionRequestReader);
  methods[11].selector = @selector(getSessionCreatedReader);
  methods[12].selector = @selector(getSessionConfirmedReader);
  methods[13].selector = @selector(getDataReader);
  methods[14].selector = @selector(getPeerTestReader);
  methods[15].selector = @selector(getRelayRequestReader);
  methods[16].selector = @selector(getRelayIntroReader);
  methods[17].selector = @selector(getRelayResponseReader);
  methods[18].selector = @selector(description);
  methods[19].selector = @selector(toRawStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_payloadBeginOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_payloadLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessionRequestReader_", "LNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sessionCreatedReader_", "LNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sessionConfirmedReader_", "LNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dataReader_", "LNetI2pRouterTransportUdpUDPPacketReader_DataReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peerTestReader_", "LNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_relayRequestReader_", "LNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_relayIntroReader_", "LNetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_relayResponseReader_", "LNetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "KEYING_MATERIAL_LENGTH", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "initialize", "LNetI2pRouterTransportUdpUDPPacket;", "[BII", (void *)&NetI2pRouterTransportUdpUDPPacketReader__Annotations$0, "toString", "toRawString", "LJavaLangStringBuilder;", "LNetI2pRouterTransportUdpUDPPacketReader_Reader;LNetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader;LNetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader;LNetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader;LNetI2pRouterTransportUdpUDPPacketReader_DataReader;LNetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield;LNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;LNetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;LNetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader;LNetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader = { "UDPPacketReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 20, 14, -1, 8, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_initWithNetI2pI2PAppContext_(NetI2pRouterTransportUdpUDPPacketReader *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpUDPPacketReader_class_()]);
  JreStrongAssignAndConsume(&self->_sessionRequestReader_, new_NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_sessionCreatedReader_, new_NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_sessionConfirmedReader_, new_NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_dataReader_, new_NetI2pRouterTransportUdpUDPPacketReader_DataReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_peerTestReader_, new_NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_relayRequestReader_, new_NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_relayIntroReader_, new_NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
  JreStrongAssignAndConsume(&self->_relayResponseReader_, new_NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self));
}

NetI2pRouterTransportUdpUDPPacketReader *new_NetI2pRouterTransportUdpUDPPacketReader_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pRouterTransportUdpUDPPacketReader *create_NetI2pRouterTransportUdpUDPPacketReader_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader, initWithNetI2pI2PAppContext_, ctx)
}

void NetI2pRouterTransportUdpUDPPacketReader_initialize__WithByteArray_withInt_withInt_(NetI2pRouterTransportUdpUDPPacketReader *self, IOSByteArray *message, jint payloadOffset, jint payloadLength) {
  JreStrongAssign(&self->_message_, message);
  self->_payloadBeginOffset_ = payloadOffset;
  self->_payloadLength_ = payloadLength;
}

jint NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(NetI2pRouterTransportUdpUDPPacketReader *self) {
  jint offset = self->_payloadBeginOffset_ + 1 + 4;
  if ([self isRekeyingIncluded]) offset += NetI2pRouterTransportUdpUDPPacketReader_KEYING_MATERIAL_LENGTH;
  if ([self isExtendedOptionsIncluded]) {
    jint optionsSize = IOSByteArray_Get(nil_chk(self->_message_), offset) & (jint) 0xff;
    offset += optionsSize + 1;
  }
  return offset;
}

IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_Reader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (IOSByteArray *)readExtendedOptions {
  return [this$0_ readExtendedOptions];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readExtendedOptions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_Reader = { "Reader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x401, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_Reader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_Reader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_Reader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader

+ (jint)X_LENGTH {
  return NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (void)readXWithByteArray:(IOSByteArray *)target
                   withInt:(jint)targetOffset {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, readOffset, target, targetOffset, NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH);
}

- (jint)readIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH;
  return IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
}

- (void)readIPWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readXWithByteArray:withInt:);
  methods[2].selector = @selector(readIPSize);
  methods[3].selector = @selector(readIPWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "X_LENGTH", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_X_LENGTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readX", "[BI", "readIP", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader = { "SessionRequestReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 4, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *new_NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader *create_NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_SessionRequestReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader

+ (jint)Y_LENGTH {
  return NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH;
}

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (void)readYWithByteArray:(IOSByteArray *)target
                   withInt:(jint)targetOffset {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, readOffset, target, targetOffset, NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH);
}

- (jint)readIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH;
  return IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
}

- (void)readIPWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (jint)readPort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH + 1 + [self readIPSize];
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
}

- (jlong)readRelayTag {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH + 1 + [self readIPSize] + 2;
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 4);
}

- (jlong)readSignedOnTime {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH + 1 + [self readIPSize] + 2 + 4;
  jlong rv = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 4);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$I$J$$", @"Signed on time offset: ", offset, @" val: ", rv, @"\nRawCreated: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(this$1_->_message_, this$1_->_payloadBeginOffset_, this$1_->_payloadLength_))];
  return rv;
}

- (void)readEncryptedSignatureWithByteArray:(IOSByteArray *)target
                                    withInt:(jint)targetOffset
                                    withInt:(jint)size {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH + 1 + [self readIPSize] + 2 + 4 + 4;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (void)readIVWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = this$1_->_payloadBeginOffset_ - NetI2pRouterTransportUdpUDPPacket_IV_SIZE;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, NetI2pRouterTransportUdpUDPPacket_IV_SIZE);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readYWithByteArray:withInt:);
  methods[2].selector = @selector(readIPSize);
  methods[3].selector = @selector(readIPWithByteArray:withInt:);
  methods[4].selector = @selector(readPort);
  methods[5].selector = @selector(readRelayTag);
  methods[6].selector = @selector(readSignedOnTime);
  methods[7].selector = @selector(readEncryptedSignatureWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(readIVWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "Y_LENGTH", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_Y_LENGTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readY", "[BI", "readIP", "readEncryptedSignature", "[BII", "readIV", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader = { "SessionCreatedReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 9, 2, 6, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *new_NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader *create_NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_SessionCreatedReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jint)readCurrentFragmentNum {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  return JreURShift32((IOSByteArray_Get(nil_chk(this$1_->_message_), readOffset) & (jint) 0xFF), 4);
}

- (jint)readTotalFragmentNum {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  return (IOSByteArray_Get(nil_chk(this$1_->_message_), readOffset) & (jint) 0xF);
}

- (jint)readCurrentFragmentSize {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, readOffset, 2);
}

- (void)readFragmentDataWithByteArray:(IOSByteArray *)target
                              withInt:(jint)targetOffset {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1 + 2;
  jint len = [self readCurrentFragmentSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, readOffset, target, targetOffset, len);
}

- (jlong)readFinalFragmentSignedOnTime {
  if ([self readCurrentFragmentNum] != [self readTotalFragmentNum] - 1) @throw create_JavaLangIllegalStateException_initWithNSString_(@"This is not the final fragment");
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1 + 2 + [self readCurrentFragmentSize];
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, readOffset, 4);
}

- (void)readFinalSignatureWithByteArray:(IOSByteArray *)target
                                withInt:(jint)targetOffset
                                withInt:(jint)size {
  if ([self readCurrentFragmentNum] != [self readTotalFragmentNum] - 1) @throw create_JavaLangIllegalStateException_initWithNSString_(@"This is not the final fragment");
  jint readOffset = this$1_->_payloadBeginOffset_ + this$1_->_payloadLength_ - size;
  if (readOffset < NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + (1 + 2 + 4)) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Sig split across fragments");
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, readOffset, target, targetOffset, size);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readCurrentFragmentNum);
  methods[2].selector = @selector(readTotalFragmentNum);
  methods[3].selector = @selector(readCurrentFragmentSize);
  methods[4].selector = @selector(readFragmentDataWithByteArray:withInt:);
  methods[5].selector = @selector(readFinalFragmentSignedOnTime);
  methods[6].selector = @selector(readFinalSignatureWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readFragmentData", "[BI", "readFinalSignature", "[BII", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader = { "SessionConfirmedReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 7, 1, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *new_NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader *create_NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_SessionConfirmedReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_DataReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_DataReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jint)getPacketSize {
  return this$1_->_payloadLength_;
}

- (jboolean)readACKsIncluded {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_EXPLICIT_ACK);
}

- (jboolean)readACKBitfieldsIncluded {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_ACK_BITFIELDS);
}

- (jboolean)readECN {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_ECN);
}

- (jboolean)readWantPreviousACKs {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_WANT_ACKS);
}

- (jboolean)readReplyRequested {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_WANT_REPLY);
}

- (jboolean)readExtendedDataIncluded {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, NetI2pRouterTransportUdpUDPPacket_DATA_FLAG_EXTENDED);
}

- (jint)readACKCount {
  if (![self readACKsIncluded]) return 0;
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  return IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
}

- (jlong)readACKWithInt:(jint)index {
  if (![self readACKsIncluded]) return -1;
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  off++;
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off + (4 * index), 4);
}

- (IOSObjectArray *)readACKBitfields {
  if (![self readACKBitfieldsIncluded]) return nil;
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  if ([self readACKsIncluded]) {
    jint numACKs = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    off += 4 * numACKs;
  }
  jint numBitfields = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
  off++;
  IOSObjectArray *rv = [IOSObjectArray arrayWithLength:numBitfields type:NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_class_()];
  for (jint i = 0; i < numBitfields; i++) {
    IOSObjectArray_SetAndConsume(rv, i, new_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(this$1_, off));
    off += [((NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *) nil_chk(IOSObjectArray_Get(rv, i))) getByteLength];
  }
  return rv;
}

- (jint)readFragmentCount {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  if ([self readACKsIncluded]) {
    jint numACKs = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    off += 4 * numACKs;
  }
  if ([self readACKBitfieldsIncluded]) {
    jint numBitfields = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    for (jint i = 0; i < numBitfields; i++) {
      NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *bf = create_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(this$1_, off);
      off += [bf getByteLength];
    }
  }
  if ([self readExtendedDataIncluded]) {
    jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    off += size;
  }
  return IOSByteArray_Get(nil_chk(this$1_->_message_), off);
}

- (jlong)readMessageIdWithInt:(jint)fragmentNum {
  jint fragmentBegin = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, fragmentBegin, 4);
}

- (jint)readMessageFragmentNumWithInt:(jint)fragmentNum {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
  off += 4;
  return JreURShift32((IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xFF), 1);
}

- (jboolean)readMessageIsLastWithInt:(jint)fragmentNum {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
  off += 4;
  return ((IOSByteArray_Get(nil_chk(this$1_->_message_), off) & 1) != 0);
}

- (jint)readMessageFragmentSizeWithInt:(jint)fragmentNum {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
  off += 5;
  return ((jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 2)) & (jint) 0x3FFF;
}

- (void)readMessageFragmentWithInt:(jint)fragmentNum
                     withByteArray:(IOSByteArray *)target
                           withInt:(jint)targetOffset {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
  off += 5;
  jint size = ((jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 2)) & (jint) 0x3FFF;
  off += 2;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, off, target, targetOffset, size);
}

- (jint)getFragmentBeginWithInt:(jint)fragmentNum {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, fragmentNum);
}

- (jboolean)flagSetWithByte:(jbyte)flag {
  return NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(self, flag);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  jlong msAgo = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$1_->_context_)) clock])) now] - [this$1_ readTimestamp] * 1000;
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Data packet sent "])) appendWithLong:msAgo])) appendWithNSString:@"ms ago "];
  [buf appendWithNSString:@"IV "];
  [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(this$1_->_message_, this$1_->_payloadBeginOffset_ - NetI2pRouterTransportUdpUDPPacket_IV_SIZE, NetI2pRouterTransportUdpUDPPacket_IV_SIZE)];
  [buf appendWithNSString:@" "];
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 1;
  if ([self readACKsIncluded]) {
    jint numACKs = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    [buf appendWithNSString:@"with ACKs for "];
    for (jint i = 0; i < numACKs; i++) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithLong:NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 4)])) appendWithChar:' '];
      off += 4;
    }
  }
  if ([self readACKBitfieldsIncluded]) {
    jint numBitfields = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    [buf appendWithNSString:@"with partial ACKs for "];
    @try {
      for (jint i = 0; i < numBitfields; i++) {
        NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *bf = create_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(this$1_, off);
        [((JavaLangStringBuilder *) nil_chk([buf appendWithLong:[bf getMessageId]])) appendWithChar:' '];
        off += [bf getByteLength];
      }
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      [buf appendWithNSString:@"CORRUPT"];
      return [buf description];
    }
  }
  if ([self readExtendedDataIncluded]) {
    jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
    off++;
    [buf appendWithNSString:@"with extended size of "];
    [buf appendWithInt:size];
    [buf appendWithChar:' '];
    off += size;
  }
  jint numFragments = IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xff;
  off++;
  [buf appendWithNSString:@"with fragmentCount of "];
  [buf appendWithInt:numFragments];
  [buf appendWithChar:' '];
  for (jint i = 0; i < numFragments; i++) {
    [buf appendWithNSString:@"containing messageId "];
    [buf appendWithLong:NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 4)];
    off += 4;
    jint fragNum = JreURShift32((IOSByteArray_Get(nil_chk(this$1_->_message_), off) & (jint) 0xFF), 1);
    jboolean isLast = (IOSByteArray_Get(this$1_->_message_, off) & 1) != 0;
    off++;
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" frag# "])) appendWithInt:fragNum];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" isLast? "])) appendWithBoolean:isLast];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" info "])) appendWithInt:IOSByteArray_Get(nil_chk(this$1_->_message_), off - 1)];
    jint size = ((jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 2)) & (jint) 0x3FFF;
    off += 2;
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with "])) appendWithInt:size])) appendWithNSString:@" bytes; "];
    off += size;
  }
  return [buf description];
}

- (void)toRawStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  [this$1_ toRawStringWithJavaLangStringBuilder:buf];
  [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@" payload: "];
  jint off = NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(self, 0);
  off += 4 + 1;
  jint size = ((jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, off, 2)) & (jint) 0x3FFF;
  off += 2;
  [buf appendWithNSString:NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(this$1_->_message_, off, size)];
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LNetI2pRouterTransportUdpACKBitfield;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(getPacketSize);
  methods[2].selector = @selector(readACKsIncluded);
  methods[3].selector = @selector(readACKBitfieldsIncluded);
  methods[4].selector = @selector(readECN);
  methods[5].selector = @selector(readWantPreviousACKs);
  methods[6].selector = @selector(readReplyRequested);
  methods[7].selector = @selector(readExtendedDataIncluded);
  methods[8].selector = @selector(readACKCount);
  methods[9].selector = @selector(readACKWithInt:);
  methods[10].selector = @selector(readACKBitfields);
  methods[11].selector = @selector(readFragmentCount);
  methods[12].selector = @selector(readMessageIdWithInt:);
  methods[13].selector = @selector(readMessageFragmentNumWithInt:);
  methods[14].selector = @selector(readMessageIsLastWithInt:);
  methods[15].selector = @selector(readMessageFragmentSizeWithInt:);
  methods[16].selector = @selector(readMessageFragmentWithInt:withByteArray:withInt:);
  methods[17].selector = @selector(getFragmentBeginWithInt:);
  methods[18].selector = @selector(flagSetWithByte:);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(toRawStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readACK", "I", "LNetI2pDataDataFormatException;", "readMessageId", "readMessageFragmentNum", "readMessageIsLast", "readMessageFragmentSize", "readMessageFragment", "I[BI", "getFragmentBegin", "flagSet", "B", "toString", "toRawString", "LJavaLangStringBuilder;", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_DataReader = { "DataReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 21, 1, 15, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_DataReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_DataReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_DataReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_DataReader *new_NetI2pRouterTransportUdpUDPPacketReader_DataReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_DataReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_DataReader *create_NetI2pRouterTransportUdpUDPPacketReader_DataReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_DataReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

jint NetI2pRouterTransportUdpUDPPacketReader_DataReader_getFragmentBeginWithInt_(NetI2pRouterTransportUdpUDPPacketReader_DataReader *self, jint fragmentNum) {
  jint off = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(self->this$1_) + 1;
  if ([self readACKsIncluded]) {
    jint numACKs = IOSByteArray_Get(nil_chk(self->this$1_->_message_), off) & (jint) 0xff;
    off++;
    off += 4 * numACKs;
  }
  if ([self readACKBitfieldsIncluded]) {
    jint numBitfields = IOSByteArray_Get(nil_chk(self->this$1_->_message_), off) & (jint) 0xff;
    off++;
    IOSObjectArray *bf = [IOSObjectArray arrayWithLength:numBitfields type:NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_class_()];
    for (jint i = 0; i < numBitfields; i++) {
      IOSObjectArray_SetAndConsume(bf, i, new_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(self->this$1_, off));
      off += [((NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *) nil_chk(IOSObjectArray_Get(bf, i))) getByteLength];
    }
  }
  if ([self readExtendedDataIncluded]) {
    jint size = IOSByteArray_Get(nil_chk(self->this$1_->_message_), off) & (jint) 0xff;
    off++;
    off += size;
  }
  off++;
  if (fragmentNum > 0) {
    for (jint i = 0; i < fragmentNum; i++) {
      off += 5;
      off += ((jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(self->this$1_->_message_, off, 2)) & (jint) 0x3FFF;
      off += 2;
    }
  }
  return off;
}

jboolean NetI2pRouterTransportUdpUDPPacketReader_DataReader_flagSetWithByte_(NetI2pRouterTransportUdpUDPPacketReader_DataReader *self, jbyte flag) {
  jint flagOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(self->this$1_);
  return ((IOSByteArray_Get(nil_chk(self->this$1_->_message_), flagOffset) & flag) != 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_DataReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$
                                                        withInt:(jint)start {
  NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(self, outer$, start);
  return self;
}

- (jlong)getMessageId {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$0_->_message_, _start_, 4);
}

- (jint)getByteLength {
  return 4 + _bitfieldSize_;
}

- (jint)fragmentCount {
  return _bitfieldSize_ * 7;
}

- (jboolean)receivedComplete {
  return false;
}

- (jint)ackCount {
  jint rv = 0;
  for (jint i = _bitfieldStart_; i < _bitfieldStart_ + _bitfieldSize_; i++) {
    jbyte b = IOSByteArray_Get(nil_chk(this$0_->_message_), i);
    if ((b & (jint) 0x7f) != 0) {
      for (jint j = 0; j < 7; j++) {
        if ((b & (jint) 0x01) != 0) rv++;
        JreRShiftAssignByte(&b, 1);
      }
    }
  }
  return rv;
}

- (jint)highestReceived {
  for (jint i = _bitfieldSize_ - 1; i >= 0; i--) {
    jbyte b = IOSByteArray_Get(nil_chk(this$0_->_message_), _bitfieldStart_ + i);
    if ((b & (jint) 0x7f) == 0) continue;
    for (jint j = 6; j >= 0; j--) {
      if ((b & (jint) 0x40) != 0) return (7 * i) + j;
      JreLShiftAssignByte(&b, 1);
    }
  }
  return -1;
}

- (jboolean)receivedWithInt:(jint)fragmentNum {
  if ((fragmentNum < 0) || (fragmentNum >= _bitfieldSize_ * 7)) return false;
  jint byteNum = _bitfieldStart_ + (fragmentNum / 7);
  jint flagNum = fragmentNum % 7;
  return (IOSByteArray_Get(nil_chk(this$0_->_message_), byteNum) & (JreLShift32(1, flagNum))) != (jint) 0x0;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:@"IB Partial ACK of "];
  [buf appendWithLong:[self getMessageId]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" highest: "])) appendWithInt:[self highestReceived]];
  [buf appendWithNSString:@" with ACKs for: ["];
  jint numFrags = [self fragmentCount];
  for (jint i = 0; i < numFrags; i++) {
    if (![self receivedWithInt:i]) [buf appendWithChar:'!'];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:i])) appendWithChar:' '];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] / "])) appendWithInt:numFrags];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:withInt:);
  methods[1].selector = @selector(getMessageId);
  methods[2].selector = @selector(getByteLength);
  methods[3].selector = @selector(fragmentCount);
  methods[4].selector = @selector(receivedComplete);
  methods[5].selector = @selector(ackCount);
  methods[6].selector = @selector(highestReceived);
  methods[7].selector = @selector(receivedWithInt:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_start_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bitfieldStart_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bitfieldSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LNetI2pDataDataFormatException;", "received", "toString", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield = { "PacketACKBitfield", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 9, 4, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *self, NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->_start_ = start;
  self->_bitfieldStart_ = start + 4;
  jint bfsz = 1;
  while ((IOSByteArray_Get(nil_chk(outer$->_message_), self->_bitfieldStart_ + bfsz - 1) & NetI2pRouterTransportUdpUDPPacket_BITFIELD_CONTINUATION) != (jint) 0x0) {
    bfsz++;
  }
  if (bfsz > NetI2pRouterTransportUdpInboundMessageState_MAX_PARTIAL_BITFIELD_BYTES) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"bitfield size: ", bfsz));
  self->_bitfieldSize_ = bfsz;
}

NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *new_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield, initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_, outer$, start)
}

NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield *create_NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield_initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_(NetI2pRouterTransportUdpUDPPacketReader *outer$, jint start) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield, initWithNetI2pRouterTransportUdpUDPPacketReader_withInt_, outer$, start)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_PacketACKBitfield)

@implementation NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jlong)readNonce {
  jint readOffset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, readOffset, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH);
}

- (jint)readIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH;
  return IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
}

- (void)readIPWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (jint)readPort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  offset += size;
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
}

- (void)readIntroKeyWithByteArray:(IOSByteArray *)target
                          withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  offset += size;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, NetI2pDataSessionKey_KEYSIZE_BYTES);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readNonce);
  methods[2].selector = @selector(readIPSize);
  methods[3].selector = @selector(readIPWithByteArray:withInt:);
  methods[4].selector = @selector(readPort);
  methods[5].selector = @selector(readIntroKeyWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "NONCE_LENGTH", "I", .constantValue.asInt = NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_NONCE_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readIP", "[BI", "readIntroKey", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader = { "PeerTestReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 6, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *new_NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *create_NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jlong)readTag {
  jlong rv = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_), 4);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$J", @"read alice tag: ", rv)];
  return rv;
}

- (jint)readIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  jint rv = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$I", @"read alice ip size: ", rv)];
  return rv;
}

- (void)readIPWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$$", @"read alice ip: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(target, targetOffset, size))];
}

- (jint)readPort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  jint rv = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$I", @"read alice port: ", rv)];
  return rv;
}

- (jint)readChallengeSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint rv = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$I", @"read challenge size: ", rv)];
  return rv;
}

- (void)readChallengeSizeWithByteArray:(IOSByteArray *)target
                               withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, sz);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$$", @"read challenge data: ", NetI2pDataBase64_encodeWithByteArray_(target))];
}

- (void)readAliceIntroKeyWithByteArray:(IOSByteArray *)target
                               withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  offset += sz;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, NetI2pDataSessionKey_KEYSIZE_BYTES);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$$$I$I$$", @"read alice intro key: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(target, targetOffset, NetI2pDataSessionKey_KEYSIZE_BYTES), @" packet size: ", this$1_->_payloadLength_, @" off: ", offset, @" data: ", NetI2pDataBase64_encodeWithByteArray_(this$1_->_message_))];
}

- (jlong)readNonce {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_) + 4;
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  offset += sz;
  offset += NetI2pDataSessionKey_KEYSIZE_BYTES;
  jlong rv = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 4);
  if ([((NetI2pUtilLog *) nil_chk(this$1_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$1_->_log_ debugWithNSString:JreStrcat("$J", @"read request nonce: ", rv)];
  return rv;
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readTag);
  methods[2].selector = @selector(readIPSize);
  methods[3].selector = @selector(readIPWithByteArray:withInt:);
  methods[4].selector = @selector(readPort);
  methods[5].selector = @selector(readChallengeSize);
  methods[6].selector = @selector(readChallengeSizeWithByteArray:withInt:);
  methods[7].selector = @selector(readAliceIntroKeyWithByteArray:withInt:);
  methods[8].selector = @selector(readNonce);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readIP", "[BI", "readChallengeSize", "readAliceIntroKey", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader = { "RelayRequestReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 9, 1, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *new_NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader *create_NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_RelayRequestReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jint)readIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  return IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
}

- (void)readIPWithByteArray:(IOSByteArray *)target
                    withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (jint)readPort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
}

- (jint)readChallengeSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  return IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
}

- (void)readChallengeSizeWithByteArray:(IOSByteArray *)target
                               withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, sz);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readIPSize);
  methods[2].selector = @selector(readIPWithByteArray:withInt:);
  methods[3].selector = @selector(readPort);
  methods[4].selector = @selector(readChallengeSize);
  methods[5].selector = @selector(readChallengeSizeWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readIP", "[BI", "readChallengeSize", "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader = { "RelayIntroReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 6, 1, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *new_NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader *create_NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_RelayIntroReader)

@implementation NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader

- (instancetype)initWithNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)outer$ {
  NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
  return self;
}

- (jint)readCharlieIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  return IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
}

- (void)readCharlieIPWithByteArray:(IOSByteArray *)target
                           withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  jint size = IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, size);
}

- (jint)readCharliePort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset++;
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
}

- (jint)readAliceIPSize {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  return IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
}

- (void)readAliceIPWithByteArray:(IOSByteArray *)target
                         withInt:(jint)targetOffset {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(this$1_->_message_, offset, target, targetOffset, sz);
}

- (jint)readAlicePort {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset++;
  offset += sz;
  return (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 2);
}

- (jlong)readNonce {
  jint offset = NetI2pRouterTransportUdpUDPPacketReader_readBodyOffset(this$1_);
  offset += IOSByteArray_Get(nil_chk(this$1_->_message_), offset) & (jint) 0xff;
  offset += 1 + 2;
  jint sz = IOSByteArray_Get(this$1_->_message_, offset) & (jint) 0xff;
  offset += 1 + 2;
  offset += sz;
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(this$1_->_message_, offset, 4);
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, 4, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpUDPPacketReader:);
  methods[1].selector = @selector(readCharlieIPSize);
  methods[2].selector = @selector(readCharlieIPWithByteArray:withInt:);
  methods[3].selector = @selector(readCharliePort);
  methods[4].selector = @selector(readAliceIPSize);
  methods[5].selector = @selector(readAliceIPWithByteArray:withInt:);
  methods[6].selector = @selector(readAlicePort);
  methods[7].selector = @selector(readNonce);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pRouterTransportUdpUDPPacketReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readCharlieIP", "[BI", (void *)&NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$0, "readAliceIP", (void *)&NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$1, (void *)&NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$2, "LNetI2pRouterTransportUdpUDPPacketReader;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader = { "RelayResponseReader", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x1, 8, 1, 6, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader;
}

@end

void NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *self, NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pRouterTransportUdpUDPPacketReader_Reader_initWithNetI2pRouterTransportUdpUDPPacketReader_(self, outer$);
}

NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *new_NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader *create_NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader_initWithNetI2pRouterTransportUdpUDPPacketReader_(NetI2pRouterTransportUdpUDPPacketReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader, initWithNetI2pRouterTransportUdpUDPPacketReader_, outer$)
}

IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpUDPPacketReader_RelayResponseReader)
