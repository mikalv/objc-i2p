//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/udp/PeerTestManager.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/transport/udp/IPThrottler.h"
#include "net/i2p/router/transport/udp/PacketBuilder.h"
#include "net/i2p/router/transport/udp/PeerState.h"
#include "net/i2p/router/transport/udp/PeerTestManager.h"
#include "net/i2p/router/transport/udp/PeerTestState.h"
#include "net/i2p/router/transport/udp/RemoteHostId.h"
#include "net/i2p/router/transport/udp/UDPAddress.h"
#include "net/i2p/router/transport/udp/UDPPacket.h"
#include "net/i2p/router/transport/udp/UDPPacketReader.h"
#include "net/i2p/router/transport/udp/UDPTransport.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTransportUdpPeerTestManager () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTransportUdpUDPTransport *_transport_;
  NetI2pRouterTransportUdpPacketBuilder *_packetBuilder_;
  id<JavaUtilMap> _activeTests_;
  NetI2pRouterTransportUdpPeerTestState *_currentTest_;
  jboolean _currentTestComplete_;
  id<JavaUtilQueue> _recentTests_;
  NetI2pRouterTransportUdpIPThrottler *_throttle_;
}

- (jboolean)expired;

- (void)sendTestToBob;

- (void)sendTestToCharlie;

- (void)receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
      withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo;

- (void)testCompleteWithBoolean:(jboolean)forgetTest;

- (void)honorStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status
                                               withBoolean:(jboolean)isIPv6;

- (void)receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
             withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                               withLong:(jlong)nonce
                              withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state;

- (void)receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
           withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                             withLong:(jlong)nonce
                            withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state;

- (void)receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                              withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state;

- (void)receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
               withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                                 withLong:(jlong)nonce
                                withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _transport_, NetI2pRouterTransportUdpUDPTransport *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _packetBuilder_, NetI2pRouterTransportUdpPacketBuilder *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _activeTests_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _currentTest_, NetI2pRouterTransportUdpPeerTestState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _recentTests_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportUdpPeerTestManager, _throttle_, NetI2pRouterTransportUdpIPThrottler *)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_RELAYED_PER_TEST_ALICE(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_ALICE 9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_RELAYED_PER_TEST_ALICE, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_RELAYED_PER_TEST_BOB(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_BOB 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_RELAYED_PER_TEST_BOB, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_RELAYED_PER_TEST_CHARLIE(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_CHARLIE 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_RELAYED_PER_TEST_CHARLIE, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_CHARLIE_LIFETIME(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_CHARLIE_LIFETIME 15000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_CHARLIE_LIFETIME, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_ACTIVE_TESTS(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_ACTIVE_TESTS 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_ACTIVE_TESTS, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_RECENT_TESTS(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_RECENT_TESTS 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_RECENT_TESTS, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_PER_IP(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_PER_IP 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_PER_IP, jint)

inline jlong NetI2pRouterTransportUdpPeerTestManager_get_THROTTLE_CLEAN_TIME(void);
#define NetI2pRouterTransportUdpPeerTestManager_THROTTLE_CLEAN_TIME 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, THROTTLE_CLEAN_TIME, jlong)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_RESEND_TIMEOUT(void);
#define NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT 4000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, RESEND_TIMEOUT, jint)

inline jint NetI2pRouterTransportUdpPeerTestManager_get_MAX_TEST_TIME(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_TEST_TIME 30000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_TEST_TIME, jint)

inline jlong NetI2pRouterTransportUdpPeerTestManager_get_MAX_NONCE(void);
#define NetI2pRouterTransportUdpPeerTestManager_MAX_NONCE 4294967295LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, MAX_NONCE, jlong)

inline jlong NetI2pRouterTransportUdpPeerTestManager_get_CHARLIE_RECENT_PERIOD(void);
#define NetI2pRouterTransportUdpPeerTestManager_CHARLIE_RECENT_PERIOD 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportUdpPeerTestManager, CHARLIE_RECENT_PERIOD, jlong)

__attribute__((unused)) static jboolean NetI2pRouterTransportUdpPeerTestManager_expired(NetI2pRouterTransportUdpPeerTestManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(NetI2pRouterTransportUdpPeerTestManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_sendTestToCharlie(NetI2pRouterTransportUdpPeerTestManager *self);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(NetI2pRouterTransportUdpPeerTestManager *self, jboolean forgetTest);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_honorStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterCommSystemFacade_Status *status, jboolean isIPv6);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpPeerTestState *state);

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state);

@interface NetI2pRouterTransportUdpPeerTestManager_ContinueTest : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportUdpPeerTestManager *this$0_;
  jlong _nonce_;
}

- (instancetype)initWithNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)outer$
                                                       withLong:(jlong)nonce;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPeerTestManager_ContinueTest)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager_ContinueTest *self, NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerTestManager_ContinueTest *new_NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpPeerTestManager_ContinueTest *create_NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerTestManager_ContinueTest)

@interface NetI2pRouterTransportUdpPeerTestManager_RemoveTest : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportUdpPeerTestManager *this$0_;
  jlong _nonce_;
}

- (instancetype)initWithNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)outer$
                                                       withLong:(jlong)nonce;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportUdpPeerTestManager_RemoveTest)

__attribute__((unused)) static void NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager_RemoveTest *self, NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce);

__attribute__((unused)) static NetI2pRouterTransportUdpPeerTestManager_RemoveTest *new_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportUdpPeerTestManager_RemoveTest *create_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportUdpPeerTestManager_RemoveTest)

@implementation NetI2pRouterTransportUdpPeerTestManager

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
         withNetI2pRouterTransportUdpUDPTransport:(NetI2pRouterTransportUdpUDPTransport *)transport {
  NetI2pRouterTransportUdpPeerTestManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(self, context, transport);
  return self;
}

- (void)runTestWithJavaNetInetAddress:(JavaNetInetAddress *)bobIP
                              withInt:(jint)bobPort
             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobCipherKey
             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)bobMACKey {
  @synchronized(self) {
    if (_currentTest_ != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"We are already running a test: ", _currentTest_, @", aborting test with bob = ", bobIP)];
      return;
    }
    if ([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isTooCloseWithByteArray:[((JavaNetInetAddress *) nil_chk(bobIP)) getAddress]]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Not running test with Bob too close to us ", bobIP)];
      return;
    }
    NetI2pRouterTransportUdpPeerTestState *test = create_NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, ALICE), [bobIP isKindOfClass:[JavaNetInet6Address class]], [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextLongWithLong:NetI2pRouterTransportUdpPeerTestManager_MAX_NONCE], [((NetI2pUtilClock *) nil_chk([_context_ clock])) now]);
    [test setBobIPWithJavaNetInetAddress:bobIP];
    [test setBobPortWithInt:bobPort];
    [test setBobCipherKeyWithNetI2pDataSessionKey:bobCipherKey];
    [test setBobMACKeyWithNetI2pDataSessionKey:bobMACKey];
    [test setLastSendTimeWithLong:[test getBeginTime]];
    JreStrongAssign(&_currentTest_, test);
    _currentTestComplete_ = false;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Start new test: ", test)];
    while ([((id<JavaUtilQueue>) nil_chk(_recentTests_)) size] > NetI2pRouterTransportUdpPeerTestManager_MAX_RECENT_TESTS) [_recentTests_ poll];
    [_recentTests_ offerWithId:JavaLangLong_valueOfWithLong_([test getNonce])];
    [test incrementPacketsRelayed];
    NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(self);
    [((NetI2pUtilSimpleTimer2 *) nil_chk([_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(self, [test getNonce]) withLong:NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT];
  }
}

- (jboolean)expired {
  return NetI2pRouterTransportUdpPeerTestManager_expired(self);
}

- (void)sendTestToBob {
  NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(self);
}

- (void)sendTestToCharlie {
  NetI2pRouterTransportUdpPeerTestManager_sendTestToCharlie(self);
}

- (void)receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
      withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo {
  NetI2pRouterTransportUdpPeerTestManager_receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_(self, from, testInfo);
}

- (void)testCompleteWithBoolean:(jboolean)forgetTest {
  NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(self, forgetTest);
}

- (void)honorStatusWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)status
                                               withBoolean:(jboolean)isIPv6 {
  NetI2pRouterTransportUdpPeerTestManager_honorStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(self, status, isIPv6);
}

- (void)receiveTestWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                withNetI2pRouterTransportUdpUDPPacketReader:(NetI2pRouterTransportUdpUDPPacketReader *)reader {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"udp.receiveTest" withLong:1];
  IOSByteArray *fromIP = [((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP];
  jint fromPort = [from getPort];
  if (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_(fromPort) || (![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:fromIP]) || [_transport_ isTooCloseWithByteArray:fromIP] || [((NetI2pRouterBlocklist *) nil_chk([_context_ blocklist])) isBlocklistedWithByteArray:fromIP]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Invalid PeerTest address: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
    return;
  }
  NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo = [((NetI2pRouterTransportUdpUDPPacketReader *) nil_chk(reader)) getPeerTestReader];
  IOSByteArray *testIP = nil;
  jint testPort = [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readPort];
  if ([testInfo readIPSize] > 0) {
    testIP = [IOSByteArray arrayWithLength:[testInfo readIPSize]];
    [testInfo readIPWithByteArray:testIP withInt:0];
  }
  if ((testPort > 0 && (!NetI2pRouterTransportTransportUtil_isValidPortWithInt_(testPort))) || (testIP != nil && ((![((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isValidWithByteArray:testIP]) || (testIP->size_ != 4 && testIP->size_ != 16) || [((NetI2pRouterBlocklist *) nil_chk([_context_ blocklist])) isBlocklistedWithByteArray:testIP]))) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Invalid address in PeerTest: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(testIP, testPort))];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
    return;
  }
  jlong nonce = [testInfo readNonce];
  NetI2pRouterTransportUdpPeerTestState *test = _currentTest_;
  if ((test != nil) && ([((NetI2pRouterTransportUdpPeerTestState *) nil_chk(test)) getNonce] == nonce)) {
    NetI2pRouterTransportUdpPeerTestManager_receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_(self, from, testInfo);
    return;
  }
  if ([((NetI2pRouterTransportUdpIPThrottler *) nil_chk(_throttle_)) shouldThrottleWithByteArray:fromIP]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"PeerTest throttle from ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
    return;
  }
  if (testIP != nil && [_throttle_ shouldThrottleWithByteArray:testIP]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"PeerTest throttle to ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(testIP, testPort))];
    return;
  }
  JavaLangLong *lNonce = JavaLangLong_valueOfWithLong_(nonce);
  NetI2pRouterTransportUdpPeerTestState *state = [((id<JavaUtilMap>) nil_chk(_activeTests_)) getWithId:lNonce];
  if (testIP != nil && [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) isTooCloseWithByteArray:testIP]) {
    if ([((id<JavaUtilQueue>) nil_chk(_recentTests_)) containsWithId:lNonce]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J$$", @"Got delayed reply on nonce ", nonce, @" from: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$$@", @"Nearby address in PeerTest: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(testIP, testPort), @" from: ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort), @" state? ", state)];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
    }
    return;
  }
  if (state == nil) {
    if ((testIP == nil) || (testPort <= 0)) {
      if ([_activeTests_ size] >= NetI2pRouterTransportUdpPeerTestManager_MAX_ACTIVE_TESTS) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Too many active tests, droppping from Alice ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
        return;
      }
      if ([((NetI2pRouterTransportUdpUDPTransport *) nil_chk(_transport_)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:from] == nil) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"No session, dropping new test from Alice ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
        return;
      }
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"test IP/port are blank coming from ", from, @", assuming we are Bob and they are alice")];
      NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, nil);
    }
    else {
      if ([((id<JavaUtilQueue>) nil_chk(_recentTests_)) containsWithId:lNonce]) {
      }
      else {
        if ([_activeTests_ size] >= NetI2pRouterTransportUdpPeerTestManager_MAX_ACTIVE_TESTS) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Too many active tests, droppping from Bob ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(fromIP, fromPort))];
          return;
        }
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$J", @"We are charlie, as the testIP/port is ", NetI2pUtilAddresses_toStringWithByteArray_withInt_(testIP, testPort), @" and the state is unknown for ", nonce)];
        NetI2pRouterTransportUdpPeerTestManager_receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, nil);
      }
    }
  }
  else {
    if ([state getOurRole] == JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB)) {
      if (NetI2pDataDataHelper_eqWithByteArray_withByteArray_(fromIP, [((JavaNetInetAddress *) nil_chk([state getAliceIP])) getAddress]) && (fromPort == [state getAlicePort])) {
        NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
      }
      else if (NetI2pDataDataHelper_eqWithByteArray_withByteArray_(fromIP, [((JavaNetInetAddress *) nil_chk([state getCharlieIP])) getAddress]) && (fromPort == [state getCharliePort])) {
        NetI2pRouterTransportUdpPeerTestManager_receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpPeerTestState_(self, from, state);
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$@", @"Received from a fourth party as bob!  alice: ", [state getAliceIP], @", charlie: ", [state getCharlieIP], @", dave: ", from)];
      }
    }
    else if ([state getOurRole] == JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, CHARLIE)) {
      if ((testIP == nil) || (testPort <= 0)) {
        NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
      }
      else {
        NetI2pRouterTransportUdpPeerTestManager_receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
      }
    }
  }
}

- (void)receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
             withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                               withLong:(jlong)nonce
                              withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state {
  NetI2pRouterTransportUdpPeerTestManager_receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
}

- (void)receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
           withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                             withLong:(jlong)nonce
                            withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state {
  NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
}

- (void)receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
                              withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state {
  NetI2pRouterTransportUdpPeerTestManager_receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpPeerTestState_(self, from, state);
}

- (void)receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:(NetI2pRouterTransportUdpRemoteHostId *)from
               withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:(NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *)testInfo
                                                                 withLong:(jlong)nonce
                                withNetI2pRouterTransportUdpPeerTestState:(NetI2pRouterTransportUdpPeerTestState *)state {
  NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(self, from, testInfo, nonce, state);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_transport_);
  RELEASE_(_packetBuilder_);
  RELEASE_(_activeTests_);
  RELEASE_(_currentTest_);
  RELEASE_(_recentTests_);
  RELEASE_(_throttle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTransportUdpUDPTransport:);
  methods[1].selector = @selector(runTestWithJavaNetInetAddress:withInt:withNetI2pDataSessionKey:withNetI2pDataSessionKey:);
  methods[2].selector = @selector(expired);
  methods[3].selector = @selector(sendTestToBob);
  methods[4].selector = @selector(sendTestToCharlie);
  methods[5].selector = @selector(receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:);
  methods[6].selector = @selector(testCompleteWithBoolean:);
  methods[7].selector = @selector(honorStatusWithNetI2pRouterCommSystemFacade_Status:withBoolean:);
  methods[8].selector = @selector(receiveTestWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader:);
  methods[9].selector = @selector(receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:withLong:withNetI2pRouterTransportUdpPeerTestState:);
  methods[10].selector = @selector(receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:withLong:withNetI2pRouterTransportUdpPeerTestState:);
  methods[11].selector = @selector(receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpPeerTestState:);
  methods[12].selector = @selector(receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId:withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader:withLong:withNetI2pRouterTransportUdpPeerTestState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_transport_", "LNetI2pRouterTransportUdpUDPTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_packetBuilder_", "LNetI2pRouterTransportUdpPacketBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_activeTests_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_currentTest_", "LNetI2pRouterTransportUdpPeerTestState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentTestComplete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_recentTests_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_throttle_", "LNetI2pRouterTransportUdpIPThrottler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_RELAYED_PER_TEST_ALICE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_ALICE, 0x1a, -1, -1, -1, -1 },
    { "MAX_RELAYED_PER_TEST_BOB", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_BOB, 0x1a, -1, -1, -1, -1 },
    { "MAX_RELAYED_PER_TEST_CHARLIE", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_CHARLIE, 0x1a, -1, -1, -1, -1 },
    { "MAX_CHARLIE_LIFETIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_CHARLIE_LIFETIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_ACTIVE_TESTS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_ACTIVE_TESTS, 0x1a, -1, -1, -1, -1 },
    { "MAX_RECENT_TESTS", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_RECENT_TESTS, 0x1a, -1, -1, -1, -1 },
    { "MAX_PER_IP", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_PER_IP, 0x1a, -1, -1, -1, -1 },
    { "THROTTLE_CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterTransportUdpPeerTestManager_THROTTLE_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
    { "RESEND_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_TEST_TIME", "I", .constantValue.asInt = NetI2pRouterTransportUdpPeerTestManager_MAX_TEST_TIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_NONCE", "J", .constantValue.asLong = NetI2pRouterTransportUdpPeerTestManager_MAX_NONCE, 0x1a, -1, -1, -1, -1 },
    { "CHARLIE_RECENT_PERIOD", "J", .constantValue.asLong = NetI2pRouterTransportUdpPeerTestManager_CHARLIE_RECENT_PERIOD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTransportUdpUDPTransport;", "runTest", "LJavaNetInetAddress;ILNetI2pDataSessionKey;LNetI2pDataSessionKey;", "receiveTestReply", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;", "testComplete", "Z", "honorStatus", "LNetI2pRouterCommSystemFacade_Status;Z", "receiveTest", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpUDPPacketReader;", "receiveFromBobAsCharlie", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader;JLNetI2pRouterTransportUdpPeerTestState;", "receiveFromAliceAsBob", "receiveFromCharlieAsBob", "LNetI2pRouterTransportUdpRemoteHostId;LNetI2pRouterTransportUdpPeerTestState;", "receiveFromAliceAsCharlie", "Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/router/transport/udp/PeerTestState;>;", "Ljava/util/Queue<Ljava/lang/Long;>;", "LNetI2pRouterTransportUdpPeerTestManager_ContinueTest;LNetI2pRouterTransportUdpPeerTestManager_RemoveTest;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestManager = { "PeerTestManager", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x0, 13, 21, -1, 19, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerTestManager;
}

@end

void NetI2pRouterTransportUdpPeerTestManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterRouterContext *context, NetI2pRouterTransportUdpUDPTransport *transport) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_transport_, transport);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTransportUdpPeerTestManager_class_()]);
  JreStrongAssignAndConsume(&self->_activeTests_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_recentTests_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  JreStrongAssignAndConsume(&self->_packetBuilder_, new_NetI2pRouterTransportUdpPacketBuilder_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(context, transport));
  JreStrongAssignAndConsume(&self->_throttle_, new_NetI2pRouterTransportUdpIPThrottler_initWithInt_withLong_(NetI2pRouterTransportUdpPeerTestManager_MAX_PER_IP, NetI2pRouterTransportUdpPeerTestManager_THROTTLE_CLEAN_TIME));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"udp.statusKnownCharlie" withNSString:@"How often the bob we pick passes us to a charlie we already have a session with?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receiveTestReply" withNSString:@"How often we get a reply to our peer test?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.receiveTest" withNSString:@"How often we get a packet requesting us to participate in a peer test?" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"udp.testBadIP" withNSString:@"Received IP or port was bad" withNSString:@"udp" withLongArray:JreLoadStatic(NetI2pRouterTransportUdpUDPTransport, RATES)];
}

NetI2pRouterTransportUdpPeerTestManager *new_NetI2pRouterTransportUdpPeerTestManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *context, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerTestManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, context, transport)
}

NetI2pRouterTransportUdpPeerTestManager *create_NetI2pRouterTransportUdpPeerTestManager_initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_(NetI2pRouterRouterContext *context, NetI2pRouterTransportUdpUDPTransport *transport) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerTestManager, initWithNetI2pRouterRouterContext_withNetI2pRouterTransportUdpUDPTransport_, context, transport)
}

jboolean NetI2pRouterTransportUdpPeerTestManager_expired(NetI2pRouterTransportUdpPeerTestManager *self) {
  NetI2pRouterTransportUdpPeerTestState *state = self->_currentTest_;
  if (state != nil) return [state getBeginTime] + NetI2pRouterTransportUdpPeerTestManager_MAX_TEST_TIME < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  else return true;
}

void NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(NetI2pRouterTransportUdpPeerTestManager *self) {
  NetI2pRouterTransportUdpPeerTestState *test = self->_currentTest_;
  if (!NetI2pRouterTransportUdpPeerTestManager_expired(self)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Sending test to Bob: ", test)];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestFromAliceWithJavaNetInetAddress:[((NetI2pRouterTransportUdpPeerTestState *) nil_chk(test)) getBobIP] withInt:[test getBobPort] withNetI2pDataSessionKey:[test getBobCipherKey] withNetI2pDataSessionKey:[test getBobMACKey] withLong:[test getNonce] withNetI2pDataSessionKey:[self->_transport_ getIntroKey]]];
  }
  else {
    JreStrongAssign(&self->_currentTest_, nil);
  }
}

void NetI2pRouterTransportUdpPeerTestManager_sendTestToCharlie(NetI2pRouterTransportUdpPeerTestManager *self) {
  NetI2pRouterTransportUdpPeerTestState *test = self->_currentTest_;
  if (!NetI2pRouterTransportUdpPeerTestManager_expired(self)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Sending test to Charlie: ", test)];
    [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:[((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestFromAliceWithJavaNetInetAddress:[((NetI2pRouterTransportUdpPeerTestState *) nil_chk(test)) getCharlieIP] withInt:[test getCharliePort] withNetI2pDataSessionKey:[test getCharlieIntroKey] withLong:[test getNonce] withNetI2pDataSessionKey:[self->_transport_ getIntroKey]]];
  }
  else {
    JreStrongAssign(&self->_currentTest_, nil);
  }
}

void NetI2pRouterTransportUdpPeerTestManager_receiveTestReplyWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo) {
  @synchronized(self) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"udp.receiveTestReply" withLong:1];
    NetI2pRouterTransportUdpPeerTestState *test = self->_currentTest_;
    if (NetI2pRouterTransportUdpPeerTestManager_expired(self)) return;
    if (self->_currentTestComplete_) return;
    if ((NetI2pDataDataHelper_eqWithByteArray_withByteArray_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP], [((JavaNetInetAddress *) nil_chk([((NetI2pRouterTransportUdpPeerTestState *) nil_chk(test)) getBobIP])) getAddress])) && ([from getPort] == [test getBobPort])) {
      jint ipSize = [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readIPSize];
      jboolean expectV6 = [test isIPv6];
      if ((!expectV6 && ipSize != 4) || (expectV6 && ipSize != 16)) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Bad IP length ", ipSize, @" from bob's reply: ", from, @", ", testInfo)];
        return;
      }
      IOSByteArray *ip = [IOSByteArray arrayWithLength:ipSize];
      [testInfo readIPWithByteArray:ip withInt:0];
      @try {
        JavaNetInetAddress *addr = JavaNetInetAddress_getByAddressWithByteArray_(ip);
        [test setAliceIPWithJavaNetInetAddress:addr];
        [test setReceiveBobTimeWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now]];
        jint testPort = [testInfo readPort];
        if (testPort == 0) @throw create_JavaNetUnknownHostException_initWithNSString_(@"port 0");
        [test setAlicePortWithInt:testPort];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive test reply from Bob: ", test)];
        if ([test getAlicePortFromCharlie] > 0) NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(self, true);
      }
      @catch (JavaNetUnknownHostException *uhe) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$@$@", @"Unable to get our IP (length ", ipSize, @") from bob's reply: ", from, @", ", testInfo) withJavaLangThrowable:uhe];
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
      }
    }
    else {
      NetI2pRouterTransportUdpPeerState *charlieSession = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:from];
      jlong recentBegin = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - NetI2pRouterTransportUdpPeerTestManager_CHARLIE_RECENT_PERIOD;
      if ((charlieSession != nil) && (([((NetI2pRouterTransportUdpPeerState *) nil_chk(charlieSession)) getLastACKSend] > recentBegin) || ([charlieSession getLastSendTime] > recentBegin))) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@C", @"Bob chose a charlie we already have a session to, cancelling the test and rerunning (bob: ", self->_currentTest_, @", charlie: ", from, ')')];
        self->_currentTestComplete_ = true;
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.statusKnownCharlie" withLong:1];
        NetI2pRouterTransportUdpPeerTestManager_honorStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(self, JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN), [test isIPv6]);
        JreStrongAssign(&self->_currentTest_, nil);
        return;
      }
      if ([test getReceiveCharlieTime] > 0) {
        @try {
          jint testPort = [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readPort];
          if (testPort == 0) @throw create_JavaNetUnknownHostException_initWithNSString_(@"port 0");
          [test setAlicePortFromCharlieWithInt:testPort];
          IOSByteArray *ip = [IOSByteArray arrayWithLength:[testInfo readIPSize]];
          jint ipSize = ip->size_;
          jboolean expectV6 = [test isIPv6];
          if ((!expectV6 && ipSize != 4) || (expectV6 && ipSize != 16)) @throw create_JavaNetUnknownHostException_initWithNSString_(JreStrcat("$Z$I", @"bad sz - expect v6? ", expectV6, @" act sz: ", ipSize));
          [testInfo readIPWithByteArray:ip withInt:0];
          JavaNetInetAddress *addr = JavaNetInetAddress_getByAddressWithByteArray_(ip);
          [test setAliceIPFromCharlieWithJavaNetInetAddress:addr];
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive test reply from Charlie: ", test)];
          if ([test getReceiveBobTime] > 0) NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(self, true);
        }
        @catch (JavaNetUnknownHostException *uhe) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:JreStrcat("$@$$", @"Charlie @ ", from, @" said we were an invalid IP address: ", [uhe getMessage]) withJavaLangThrowable:uhe];
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
        }
      }
      else {
        if ([test incrementPacketsRelayed] > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_ALICE) {
          NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(self, false);
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Sent too many packets on the test: ", test)];
          return;
        }
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO] && charlieSession != nil) [self->_log_ infoWithNSString:JreStrcat("$$$$$@$@C", @"Bob chose a charlie we last acked ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [charlieSession getLastACKSend]), @" last sent ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [charlieSession getLastSendTime]), @" (bob: ", self->_currentTest_, @", charlie: ", from, ')')];
        [test setReceiveCharlieTimeWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now]];
        NetI2pDataSessionKey *charlieIntroKey = create_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]);
        [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readIntroKeyWithByteArray:[charlieIntroKey getData] withInt:0];
        [test setCharlieIntroKeyWithNetI2pDataSessionKey:charlieIntroKey];
        @try {
          [test setCharlieIPWithJavaNetInetAddress:JavaNetInetAddress_getByAddressWithByteArray_([from getIP])];
          [test setCharliePortWithInt:[from getPort]];
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive test from Charlie: ", test)];
          NetI2pRouterTransportUdpPeerTestManager_sendTestToCharlie(self);
        }
        @catch (JavaNetUnknownHostException *uhe) {
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Charlie's IP is b0rked: ", from, @": ", testInfo)];
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
        }
      }
    }
  }
}

void NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(NetI2pRouterTransportUdpPeerTestManager *self, jboolean forgetTest) {
  self->_currentTestComplete_ = true;
  NetI2pRouterTransportUdpPeerTestState *test = self->_currentTest_;
  jboolean isIPv6 = [((NetI2pRouterTransportUdpPeerTestState *) nil_chk(test)) isIPv6];
  NetI2pRouterCommSystemFacade_Status *status;
  if ([test getAlicePortFromCharlie] > 0) {
    if (([test getAlicePort] == [test getAlicePortFromCharlie]) && ([test getAliceIP] != nil) && ([test getAliceIPFromCharlie] != nil) && ([((JavaNetInetAddress *) nil_chk([test getAliceIP])) isEqual:[test getAliceIPFromCharlie]])) {
      status = isIPv6 ? JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK) : JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN);
    }
    else {
      status = isIPv6 ? JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED) : JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_UNKNOWN);
    }
  }
  else if ([test getReceiveCharlieTime] > 0) {
    status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  }
  else if ([test getReceiveBobTime] > 0) {
    status = isIPv6 ? JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED) : JreLoadEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN);
  }
  else {
    status = JreLoadEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Test complete: ", test)];
  NetI2pRouterTransportUdpPeerTestManager_honorStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(self, status, isIPv6);
  if (forgetTest) JreStrongAssign(&self->_currentTest_, nil);
}

void NetI2pRouterTransportUdpPeerTestManager_honorStatusWithNetI2pRouterCommSystemFacade_Status_withBoolean_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterCommSystemFacade_Status *status, jboolean isIPv6) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$Z$@", @"Test results (IPv6? ", isIPv6, @"): status = ", status)];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) setReachabilityStatusWithNetI2pRouterCommSystemFacade_Status:status withBoolean:isIPv6];
}

void NetI2pRouterTransportUdpPeerTestManager_receiveFromBobAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jint sz = [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readIPSize];
  jboolean isNew = false;
  if (state == nil) {
    isNew = true;
    state = create_NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, CHARLIE), sz == 16, nonce, now);
  }
  else {
    if ([state getReceiveBobTime] > now - (NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT / 2)) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too soon, not retransmitting: ", state)];
      return;
    }
  }
  IOSByteArray *aliceIPData = [IOSByteArray arrayWithLength:sz];
  @try {
    [testInfo readIPWithByteArray:aliceIPData withInt:0];
    jboolean expectV6 = [state isIPv6];
    if ((!expectV6 && sz != 4) || (expectV6 && sz != 16)) @throw create_JavaNetUnknownHostException_initWithNSString_(JreStrcat("$Z$I", @"bad sz - expect v6? ", expectV6, @" act sz: ", sz));
    jint alicePort = [testInfo readPort];
    if (alicePort == 0) @throw create_JavaNetUnknownHostException_initWithNSString_(@"port 0");
    JavaNetInetAddress *aliceIP = JavaNetInetAddress_getByAddressWithByteArray_(aliceIPData);
    JavaNetInetAddress *bobIP = JavaNetInetAddress_getByAddressWithByteArray_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP]);
    NetI2pDataSessionKey *aliceIntroKey = create_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]);
    [testInfo readIntroKeyWithByteArray:[aliceIntroKey getData] withInt:0];
    [state setAliceIPWithJavaNetInetAddress:aliceIP];
    [state setAlicePortWithInt:alicePort];
    [state setAliceIntroKeyWithNetI2pDataSessionKey:aliceIntroKey];
    [state setBobIPWithJavaNetInetAddress:bobIP];
    [state setBobPortWithInt:[from getPort]];
    [state setLastSendTimeWithLong:now];
    [state setReceiveBobTimeWithLong:now];
    NetI2pRouterTransportUdpPeerState *bob = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:from];
    if (bob == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@CI", @"Received from bob (", from, @") who hasn't established a session with us, refusing to help him test ", aliceIP, ':', alicePort)];
      return;
    }
    else {
      [state setBobCipherKeyWithNetI2pDataSessionKey:[bob getCurrentCipherKey]];
      [state setBobMACKeyWithNetI2pDataSessionKey:[bob getCurrentMACKey]];
    }
    if ([state incrementPacketsRelayed] > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_CHARLIE) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too many, not retransmitting: ", state)];
      return;
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive from Bob: ", state)];
    if (isNew) {
      [((id<JavaUtilMap>) nil_chk(self->_activeTests_)) putWithId:JavaLangLong_valueOfWithLong_(nonce) withId:state];
      [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(self, nonce) withLong:NetI2pRouterTransportUdpPeerTestManager_MAX_CHARLIE_LIFETIME];
    }
    NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestToBobWithJavaNetInetAddress:bobIP withInt:[from getPort] withJavaNetInetAddress:aliceIP withInt:alicePort withNetI2pDataSessionKey:aliceIntroKey withLong:nonce withNetI2pDataSessionKey:[state getBobCipherKey] withNetI2pDataSessionKey:[state getBobMACKey]];
    [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:packet];
    packet = [self->_packetBuilder_ buildPeerTestToAliceWithJavaNetInetAddress:aliceIP withInt:alicePort withNetI2pDataSessionKey:aliceIntroKey withNetI2pDataSessionKey:[self->_transport_ getIntroKey] withLong:nonce];
    [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$I$$", @"Unable to build the aliceIP from ", from, @", ip size: ", sz, @" ip val: ", NetI2pDataBase64_encodeWithByteArray_(aliceIPData)) withJavaLangThrowable:uhe];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
  }
}

void NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state) {
  NetI2pRouterTransportUdpPeerState *charlie;
  NetI2pDataRouterRouterInfo *charlieInfo = nil;
  jint sz = ((IOSByteArray *) nil_chk([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP]))->size_;
  jboolean isIPv6 = sz == 16;
  if (state == nil) {
    charlie = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) pickTestPeerWithNetI2pRouterTransportUdpPeerTestState_Role:JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, CHARLIE) withBoolean:isIPv6 withNetI2pRouterTransportUdpRemoteHostId:from];
  }
  else {
    charlie = [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getPeerStateWithNetI2pRouterTransportUdpRemoteHostId:create_NetI2pRouterTransportUdpRemoteHostId_initWithByteArray_withInt_([((JavaNetInetAddress *) nil_chk([state getCharlieIP])) getAddress], [state getCharliePort])];
  }
  if (charlie == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$Z", @"Unable to pick a charlie (no peer), IPv6? ", isIPv6)];
    return;
  }
  charlieInfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[charlie getRemotePeer]];
  if (charlieInfo == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$Z", @"Unable to pick a charlie (no RI), IPv6? ", isIPv6)];
    return;
  }
  JavaNetInetAddress *aliceIP = nil;
  NetI2pDataSessionKey *aliceIntroKey = nil;
  @try {
    aliceIP = JavaNetInetAddress_getByAddressWithByteArray_([from getIP]);
    aliceIntroKey = create_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]);
    [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readIntroKeyWithByteArray:[aliceIntroKey getData] withInt:0];
    NetI2pDataRouterRouterAddress *raddr = [self->_transport_ getTargetAddressWithNetI2pDataRouterRouterInfo:charlieInfo];
    if (raddr == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$Z", @"Unable to pick a charlie (no addr), IPv6? ", isIPv6)];
      return;
    }
    NetI2pRouterTransportUdpUDPAddress *addr = create_NetI2pRouterTransportUdpUDPAddress_initWithNetI2pDataRouterRouterAddress_(raddr);
    IOSByteArray *ikey = [addr getIntroKey];
    if (ikey == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$Z", @"Unable to pick a charlie (no ikey), IPv6? ", isIPv6)];
      return;
    }
    NetI2pDataSessionKey *charlieIntroKey = create_NetI2pDataSessionKey_initWithByteArray_(ikey);
    jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
    jboolean isNew = false;
    if (state == nil) {
      isNew = true;
      state = create_NetI2pRouterTransportUdpPeerTestState_initWithNetI2pRouterTransportUdpPeerTestState_Role_withBoolean_withLong_withLong_(JreLoadEnum(NetI2pRouterTransportUdpPeerTestState_Role, BOB), isIPv6, nonce, now);
    }
    else {
      if ([state getReceiveAliceTime] > now - (NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT / 2)) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too soon, not retransmitting: ", state)];
        return;
      }
    }
    [state setAliceIPWithJavaNetInetAddress:aliceIP];
    [state setAlicePortWithInt:[from getPort]];
    [state setAliceIntroKeyWithNetI2pDataSessionKey:aliceIntroKey];
    [state setCharlieIPWithJavaNetInetAddress:[charlie getRemoteIPAddress]];
    [state setCharliePortWithInt:[charlie getRemotePort]];
    [state setCharlieIntroKeyWithNetI2pDataSessionKey:charlieIntroKey];
    [state setLastSendTimeWithLong:now];
    [state setReceiveAliceTimeWithLong:now];
    if ([state incrementPacketsRelayed] > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_BOB) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too many, not retransmitting: ", state)];
      return;
    }
    if (isNew) {
      [((id<JavaUtilMap>) nil_chk(self->_activeTests_)) putWithId:JavaLangLong_valueOfWithLong_(nonce) withId:state];
      [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(self, nonce) withLong:NetI2pRouterTransportUdpPeerTestManager_MAX_CHARLIE_LIFETIME];
    }
    NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestToCharlieWithJavaNetInetAddress:aliceIP withInt:[from getPort] withNetI2pDataSessionKey:aliceIntroKey withLong:nonce withJavaNetInetAddress:[charlie getRemoteIPAddress] withInt:[charlie getRemotePort] withNetI2pDataSessionKey:[charlie getCurrentCipherKey] withNetI2pDataSessionKey:[charlie getCurrentMACKey]];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive from Alice: ", state)];
    [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Unable to build the aliceIP from ", from) withJavaLangThrowable:uhe];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
  }
}

void NetI2pRouterTransportUdpPeerTestManager_receiveFromCharlieAsBobWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpPeerTestState *state) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if ([((NetI2pRouterTransportUdpPeerTestState *) nil_chk(state)) getReceiveCharlieTime] > now - (NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT / 2)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too soon, not retransmitting: ", state)];
    return;
  }
  if ([state incrementPacketsRelayed] > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_BOB) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too many, not retransmitting: ", state)];
    return;
  }
  [state setReceiveCharlieTimeWithLong:now];
  NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestToAliceWithJavaNetInetAddress:[state getAliceIP] withInt:[state getAlicePort] withNetI2pDataSessionKey:[state getAliceIntroKey] withNetI2pDataSessionKey:[state getCharlieIntroKey] withLong:[state getNonce]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive from Charlie, sending Alice back the OK: ", state)];
  [((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) sendWithNetI2pRouterTransportUdpUDPPacket:packet];
}

void NetI2pRouterTransportUdpPeerTestManager_receiveFromAliceAsCharlieWithNetI2pRouterTransportUdpRemoteHostId_withNetI2pRouterTransportUdpUDPPacketReader_PeerTestReader_withLong_withNetI2pRouterTransportUdpPeerTestState_(NetI2pRouterTransportUdpPeerTestManager *self, NetI2pRouterTransportUdpRemoteHostId *from, NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *testInfo, jlong nonce, NetI2pRouterTransportUdpPeerTestState *state) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if ([((NetI2pRouterTransportUdpPeerTestState *) nil_chk(state)) getReceiveAliceTime] > now - (NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT / 2)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too soon, not retransmitting: ", state)];
    return;
  }
  if ([state incrementPacketsRelayed] > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_CHARLIE) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Too many, not retransmitting: ", state)];
    return;
  }
  [state setReceiveAliceTimeWithLong:now];
  @try {
    JavaNetInetAddress *aliceIP = JavaNetInetAddress_getByAddressWithByteArray_([((NetI2pRouterTransportUdpRemoteHostId *) nil_chk(from)) getIP]);
    NetI2pDataSessionKey *aliceIntroKey = create_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]);
    [((NetI2pRouterTransportUdpUDPPacketReader_PeerTestReader *) nil_chk(testInfo)) readIntroKeyWithByteArray:[aliceIntroKey getData] withInt:0];
    NetI2pRouterTransportUdpUDPPacket *packet = [((NetI2pRouterTransportUdpPacketBuilder *) nil_chk(self->_packetBuilder_)) buildPeerTestToAliceWithJavaNetInetAddress:aliceIP withInt:[from getPort] withNetI2pDataSessionKey:aliceIntroKey withNetI2pDataSessionKey:[((NetI2pRouterTransportUdpUDPTransport *) nil_chk(self->_transport_)) getIntroKey] withLong:nonce];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Receive from Alice: ", state)];
    [self->_transport_ sendWithNetI2pRouterTransportUdpUDPPacket:packet];
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Unable to build the aliceIP from ", from) withJavaLangThrowable:uhe];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"udp.testBadIP" withLong:1];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestManager)

@implementation NetI2pRouterTransportUdpPeerTestManager_ContinueTest

- (instancetype)initWithNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)outer$
                                                       withLong:(jlong)nonce {
  NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(self, outer$, nonce);
  return self;
}

- (void)timeReached {
  @synchronized(this$0_) {
    NetI2pRouterTransportUdpPeerTestState *state = this$0_->_currentTest_;
    if (state == nil || [state getNonce] != _nonce_) {
      return;
    }
    else if (NetI2pRouterTransportUdpPeerTestManager_expired(this$0_)) {
      NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(this$0_, true);
    }
    else if ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now] - [state getLastSendTime] >= NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT) {
      jint sent = [state incrementPacketsRelayed];
      if (sent > NetI2pRouterTransportUdpPeerTestManager_MAX_RELAYED_PER_TEST_ALICE) {
        NetI2pRouterTransportUdpPeerTestManager_testCompleteWithBoolean_(this$0_, false);
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Sent too many packets: ", state)];
        return;
      }
      if ([state getReceiveBobTime] <= 0) {
        NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(this$0_);
      }
      else if ([state getReceiveCharlieTime] <= 0) {
        NetI2pRouterTransportUdpPeerTestManager_sendTestToBob(this$0_);
      }
      else {
        NetI2pRouterTransportUdpPeerTestManager_sendTestToCharlie(this$0_);
      }
      [((NetI2pUtilSimpleTimer2 *) nil_chk([this$0_->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:self withLong:NetI2pRouterTransportUdpPeerTestManager_RESEND_TIMEOUT + (sent * 1000)];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpPeerTestManager:withLong:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpPeerTestManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_nonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LNetI2pRouterTransportUdpPeerTestManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestManager_ContinueTest = { "ContinueTest", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerTestManager_ContinueTest;
}

@end

void NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager_ContinueTest *self, NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->_nonce_ = nonce;
}

NetI2pRouterTransportUdpPeerTestManager_ContinueTest *new_NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerTestManager_ContinueTest, initWithNetI2pRouterTransportUdpPeerTestManager_withLong_, outer$, nonce)
}

NetI2pRouterTransportUdpPeerTestManager_ContinueTest *create_NetI2pRouterTransportUdpPeerTestManager_ContinueTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerTestManager_ContinueTest, initWithNetI2pRouterTransportUdpPeerTestManager_withLong_, outer$, nonce)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestManager_ContinueTest)

@implementation NetI2pRouterTransportUdpPeerTestManager_RemoveTest

- (instancetype)initWithNetI2pRouterTransportUdpPeerTestManager:(NetI2pRouterTransportUdpPeerTestManager *)outer$
                                                       withLong:(jlong)nonce {
  NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(self, outer$, nonce);
  return self;
}

- (void)timeReached {
  [((id<JavaUtilMap>) nil_chk(this$0_->_activeTests_)) removeWithId:JavaLangLong_valueOfWithLong_(_nonce_)];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportUdpPeerTestManager:withLong:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportUdpPeerTestManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_nonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LNetI2pRouterTransportUdpPeerTestManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportUdpPeerTestManager_RemoveTest = { "RemoveTest", "net.i2p.router.transport.udp", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportUdpPeerTestManager_RemoveTest;
}

@end

void NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager_RemoveTest *self, NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->_nonce_ = nonce;
}

NetI2pRouterTransportUdpPeerTestManager_RemoveTest *new_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportUdpPeerTestManager_RemoveTest, initWithNetI2pRouterTransportUdpPeerTestManager_withLong_, outer$, nonce)
}

NetI2pRouterTransportUdpPeerTestManager_RemoveTest *create_NetI2pRouterTransportUdpPeerTestManager_RemoveTest_initWithNetI2pRouterTransportUdpPeerTestManager_withLong_(NetI2pRouterTransportUdpPeerTestManager *outer$, jlong nonce) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportUdpPeerTestManager_RemoveTest, initWithNetI2pRouterTransportUdpPeerTestManager_withLong_, outer$, nonce)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportUdpPeerTestManager_RemoveTest)
