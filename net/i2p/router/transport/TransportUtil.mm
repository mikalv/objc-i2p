//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/TransportUtil.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportUtil.h"

inline id<JavaUtilMap> NetI2pRouterTransportTransportUtil_get_BY_NAME(void);
static id<JavaUtilMap> NetI2pRouterTransportTransportUtil_BY_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportUtil, BY_NAME, id<JavaUtilMap>)

@interface NetI2pRouterTransportTransportUtil_IPv6Config () {
 @public
  NSString *cfgstr_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportUtil_IPv6Config, cfgstr_, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(NetI2pRouterTransportTransportUtil_IPv6Config *self, NSString *cfgstr, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportTransportUtil)

NSString *NetI2pRouterTransportTransportUtil_NTCP_IPV6_CONFIG = @"i2np.ntcp.ipv6";
NSString *NetI2pRouterTransportTransportUtil_SSU_IPV6_CONFIG = @"i2np.udp.ipv6";
NSString *NetI2pRouterTransportTransportUtil_PROP_IPV4_FIREWALLED = @"i2np.ipv4.firewalled";
NSString *NetI2pRouterTransportTransportUtil_PROP_IPV6_FIREWALLED = @"i2np.ipv6.firewalled";
NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG;

@implementation NetI2pRouterTransportTransportUtil

+ (NSString *)NTCP_IPV6_CONFIG {
  return NetI2pRouterTransportTransportUtil_NTCP_IPV6_CONFIG;
}

+ (NSString *)SSU_IPV6_CONFIG {
  return NetI2pRouterTransportTransportUtil_SSU_IPV6_CONFIG;
}

+ (NSString *)PROP_IPV4_FIREWALLED {
  return NetI2pRouterTransportTransportUtil_PROP_IPV4_FIREWALLED;
}

+ (NSString *)PROP_IPV6_FIREWALLED {
  return NetI2pRouterTransportTransportUtil_PROP_IPV6_FIREWALLED;
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)DEFAULT_IPV6_CONFIG {
  return NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTransportTransportUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)getIPv6ConfigWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                                 withNSString:(NSString *)transportStyle {
  return NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNetI2pRouterRouterContext_withNSString_(ctx, transportStyle);
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)getIPv6ConfigWithNSString:(NSString *)cfg {
  return NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNSString_(cfg);
}

+ (jboolean)isIPv4FirewalledWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                             withNSString:(NSString *)transportStyle {
  return NetI2pRouterTransportTransportUtil_isIPv4FirewalledWithNetI2pRouterRouterContext_withNSString_(ctx, transportStyle);
}

+ (jboolean)isIPv6FirewalledWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                             withNSString:(NSString *)transportStyle {
  return NetI2pRouterTransportTransportUtil_isIPv6FirewalledWithNetI2pRouterRouterContext_withNSString_(ctx, transportStyle);
}

+ (jboolean)isIPv6WithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)addr {
  return NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(addr);
}

+ (jboolean)isPubliclyRoutableWithByteArray:(IOSByteArray *)addr
                                withBoolean:(jboolean)allowIPv6 {
  return NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_(addr, allowIPv6);
}

+ (jboolean)isPubliclyRoutableWithByteArray:(IOSByteArray *)addr
                                withBoolean:(jboolean)allowIPv4
                                withBoolean:(jboolean)allowIPv6 {
  return NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_withBoolean_(addr, allowIPv4, allowIPv6);
}

+ (jboolean)isValidPortWithInt:(jint)port {
  return NetI2pRouterTransportTransportUtil_isValidPortWithInt_(port);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportUtil_IPv6Config;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportUtil_IPv6Config;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getIPv6ConfigWithNetI2pRouterRouterContext:withNSString:);
  methods[2].selector = @selector(getIPv6ConfigWithNSString:);
  methods[3].selector = @selector(isIPv4FirewalledWithNetI2pRouterRouterContext:withNSString:);
  methods[4].selector = @selector(isIPv6FirewalledWithNetI2pRouterRouterContext:withNSString:);
  methods[5].selector = @selector(isIPv6WithNetI2pDataRouterRouterAddress:);
  methods[6].selector = @selector(isPubliclyRoutableWithByteArray:withBoolean:);
  methods[7].selector = @selector(isPubliclyRoutableWithByteArray:withBoolean:withBoolean:);
  methods[8].selector = @selector(isValidPortWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NTCP_IPV6_CONFIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "SSU_IPV6_CONFIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "PROP_IPV4_FIREWALLED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "PROP_IPV6_FIREWALLED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "BY_NAME", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 16, 17, -1 },
    { "DEFAULT_IPV6_CONFIG", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "getIPv6Config", "LNetI2pRouterRouterContext;LNSString;", "LNSString;", "isIPv4Firewalled", "isIPv6Firewalled", "isIPv6", "LNetI2pDataRouterRouterAddress;", "isPubliclyRoutable", "[BZ", "[BZZ", "isValidPort", "I", &NetI2pRouterTransportTransportUtil_NTCP_IPV6_CONFIG, &NetI2pRouterTransportTransportUtil_SSU_IPV6_CONFIG, &NetI2pRouterTransportTransportUtil_PROP_IPV4_FIREWALLED, &NetI2pRouterTransportTransportUtil_PROP_IPV6_FIREWALLED, &NetI2pRouterTransportTransportUtil_BY_NAME, "Ljava/util/Map<Ljava/lang/String;Lnet/i2p/router/transport/TransportUtil$IPv6Config;>;", &NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG, "LNetI2pRouterTransportTransportUtil_IPv6Config;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportUtil = { "TransportUtil", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x401, 9, 6, -1, 19, -1, -1, -1 };
  return &_NetI2pRouterTransportTransportUtil;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportTransportUtil class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTransportTransportUtil_BY_NAME, new_JavaUtilHashMap_init());
    JreStrongAssign(&NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG, JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED));
    {
      {
        IOSObjectArray *a__ = NetI2pRouterTransportTransportUtil_IPv6Config_values();
        NetI2pRouterTransportTransportUtil_IPv6Config * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NetI2pRouterTransportTransportUtil_IPv6Config * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NetI2pRouterTransportTransportUtil_IPv6Config *cfg = *b__++;
          [NetI2pRouterTransportTransportUtil_BY_NAME putWithId:[((NetI2pRouterTransportTransportUtil_IPv6Config *) nil_chk(cfg)) toConfigString] withId:cfg];
        }
      }
      [NetI2pRouterTransportTransportUtil_BY_NAME putWithId:@"true" withId:JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ENABLED)];
      [NetI2pRouterTransportTransportUtil_BY_NAME putWithId:@"disable" withId:JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED)];
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportTransportUtil)
  }
}

@end

void NetI2pRouterTransportTransportUtil_init(NetI2pRouterTransportTransportUtil *self) {
  NSObject_init(self);
}

NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *transportStyle) {
  NetI2pRouterTransportTransportUtil_initialize();
  NSString *cfg;
  if ([((NSString *) nil_chk(transportStyle)) isEqual:@"NTCP"]) cfg = [((NetI2pRouterRouterContext *) nil_chk(ctx)) getPropertyWithNSString:NetI2pRouterTransportTransportUtil_NTCP_IPV6_CONFIG];
  else if ([transportStyle isEqual:@"SSU"]) cfg = [((NetI2pRouterRouterContext *) nil_chk(ctx)) getPropertyWithNSString:NetI2pRouterTransportTransportUtil_SSU_IPV6_CONFIG];
  else return NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG;
  return NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNSString_(cfg);
}

NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNSString_(NSString *cfg) {
  NetI2pRouterTransportTransportUtil_initialize();
  if (cfg == nil) return NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG;
  NetI2pRouterTransportTransportUtil_IPv6Config *c = [((id<JavaUtilMap>) nil_chk(NetI2pRouterTransportTransportUtil_BY_NAME)) getWithId:cfg];
  if (c != nil) return c;
  return NetI2pRouterTransportTransportUtil_DEFAULT_IPV6_CONFIG;
}

jboolean NetI2pRouterTransportTransportUtil_isIPv4FirewalledWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *transportStyle) {
  NetI2pRouterTransportTransportUtil_initialize();
  return [((NetI2pRouterRouterContext *) nil_chk(ctx)) getBooleanPropertyWithNSString:NetI2pRouterTransportTransportUtil_PROP_IPV4_FIREWALLED];
}

jboolean NetI2pRouterTransportTransportUtil_isIPv6FirewalledWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *transportStyle) {
  NetI2pRouterTransportTransportUtil_initialize();
  return [((NetI2pRouterRouterContext *) nil_chk(ctx)) getBooleanPropertyWithNSString:NetI2pRouterTransportTransportUtil_PROP_IPV6_FIREWALLED];
}

jboolean NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(NetI2pDataRouterRouterAddress *addr) {
  NetI2pRouterTransportTransportUtil_initialize();
  NSString *host = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getHost];
  return host != nil && [host java_contains:@":"];
}

jboolean NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_(IOSByteArray *addr, jboolean allowIPv6) {
  NetI2pRouterTransportTransportUtil_initialize();
  return NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_withBoolean_(addr, true, allowIPv6);
}

jboolean NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_withBoolean_(IOSByteArray *addr, jboolean allowIPv4, jboolean allowIPv6) {
  NetI2pRouterTransportTransportUtil_initialize();
  if ([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBooleanPropertyWithNSString:@"i2np.allowLocal"]) return true;
  if (((IOSByteArray *) nil_chk(addr))->size_ == 4) {
    if (!allowIPv4) return false;
    jint a0 = IOSByteArray_Get(addr, 0) & (jint) 0xFF;
    if (a0 == 0) return false;
    if (a0 == 10) return false;
    if (a0 == 25) return false;
    if (a0 == 127) return false;
    jint a1 = IOSByteArray_Get(addr, 1) & (jint) 0xFF;
    if (a0 == 100 && a1 >= 64 && a1 <= 127) return false;
    if (a0 == 169 && a1 == 254) return false;
    if (a0 == 172 && a1 >= 16 && a1 <= 31) return false;
    if (a0 == 192) {
      if (a1 == 168) return false;
      if (a1 == 0) {
        jint a2 = IOSByteArray_Get(addr, 2) & (jint) 0xFF;
        if (a2 == 0 || a2 == 2) return false;
      }
      if (a1 == 88 && (IOSByteArray_Get(addr, 2) & (jint) 0xff) == 99) return false;
    }
    if (a0 == 198) {
      if (a1 == 18 || a1 == 19) return false;
      if (a1 == 51 && (IOSByteArray_Get(addr, 2) & (jint) 0xff) == 100) return false;
    }
    if (a0 == 203 && a1 == 0 && (IOSByteArray_Get(addr, 2) & (jint) 0xff) == 113) return false;
    if (a0 >= 224) return false;
    return true;
  }
  else if (addr->size_ == 16) {
    if (allowIPv6) {
      if (IOSByteArray_Get(addr, 0) == 0) return false;
      if (IOSByteArray_Get(addr, 0) == (jint) 0x20) {
        if (IOSByteArray_Get(addr, 1) == (jint) 0x02) return false;
        if (IOSByteArray_Get(addr, 1) == (jint) 0x01) {
          if (IOSByteArray_Get(addr, 2) == (jint) 0x00 && IOSByteArray_Get(addr, 3) == (jint) 0x00) return false;
          if (IOSByteArray_Get(addr, 2) == (jint) 0x0d && (IOSByteArray_Get(addr, 3) & (jint) 0xff) == (jint) 0xb8) return false;
        }
      }
      if ((IOSByteArray_Get(addr, 0) & (jint) 0xfe) == (jint) 0xfc) return false;
      if (IOSByteArray_Get(addr, 0) == (jint) 0x26 && IOSByteArray_Get(addr, 1) == (jint) 0x20 && IOSByteArray_Get(addr, 2) == (jint) 0x00 && (IOSByteArray_Get(addr, 3) & (jint) 0xff) == (jint) 0x9b) return false;
      if (IOSByteArray_Get(addr, 0) == (jint) 0x3f && (IOSByteArray_Get(addr, 1) & (jint) 0xff) == (jint) 0xfe) return false;
      @try {
        JavaNetInetAddress *ia = JavaNetInetAddress_getByAddressWithByteArray_(addr);
        return (![((JavaNetInetAddress *) nil_chk(ia)) isLinkLocalAddress]) && (![ia isMulticastAddress]) && (![ia isAnyLocalAddress]) && (![ia isLoopbackAddress]) && (![ia isSiteLocalAddress]);
      }
      @catch (JavaNetUnknownHostException *uhe) {
      }
    }
  }
  return false;
}

jboolean NetI2pRouterTransportTransportUtil_isValidPortWithInt_(jint port) {
  NetI2pRouterTransportTransportUtil_initialize();
  return port >= 1024 && port <= 65535 && port != 1900 && port != 2049 && port != 2827 && port != 3659 && port != 4045 && port != 4444 && port != 4445 && port != 6000 && (!(port >= 6665 && port <= 6669)) && port != 6697 && (!(port >= 7650 && port <= 7668)) && port != 8998 && port != 9001 && port != 9030 && port != 9050 && port != 9100 && port != 9150 && port != 31000 && port != 32000;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportUtil)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportTransportUtil_IPv6Config)

NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_IPv6Config_values_[5];

@implementation NetI2pRouterTransportTransportUtil_IPv6Config

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)IPV6_DISABLED {
  return JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED);
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)IPV6_NOT_PREFERRED {
  return JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_NOT_PREFERRED);
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)IPV6_ENABLED {
  return JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ENABLED);
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)IPV6_PREFERRED {
  return JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED);
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)IPV6_ONLY {
  return JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY);
}

- (NSString *)toConfigString {
  return cfgstr_;
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTransportTransportUtil_IPv6Config_values();
}

+ (NetI2pRouterTransportTransportUtil_IPv6Config *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTransportTransportUtil_IPv6Config_valueOfWithNSString_(name);
}

- (NetI2pRouterTransportTransportUtil_IPv6Config_Enum)toNSEnum {
  return (NetI2pRouterTransportTransportUtil_IPv6Config_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNetI2pRouterTransportTransportUtil_IPv6Config;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportUtil_IPv6Config;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(toConfigString);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPV6_DISABLED", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "IPV6_NOT_PREFERRED", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "IPV6_ENABLED", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "IPV6_PREFERRED", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "IPV6_ONLY", "LNetI2pRouterTransportTransportUtil_IPv6Config;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "cfgstr_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED), &JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_NOT_PREFERRED), &JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ENABLED), &JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED), &JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY), "LNetI2pRouterTransportTransportUtil;", "Ljava/lang/Enum<Lnet/i2p/router/transport/TransportUtil$IPv6Config;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportUtil_IPv6Config = { "IPv6Config", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x4019, 3, 6, 7, -1, -1, 8, -1 };
  return &_NetI2pRouterTransportTransportUtil_IPv6Config;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportTransportUtil_IPv6Config class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(e, @"false", @"IPV6_DISABLED", 0);
    ((void) (JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_NOT_PREFERRED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(e, @"preferIPv4", @"IPV6_NOT_PREFERRED", 1);
    ((void) (JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ENABLED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(e, @"enable", @"IPV6_ENABLED", 2);
    ((void) (JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_PREFERRED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(e, @"preferIPv6", @"IPV6_PREFERRED", 3);
    ((void) (JreEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(e, @"only", @"IPV6_ONLY", 4);
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportTransportUtil_IPv6Config)
  }
}

@end

void NetI2pRouterTransportTransportUtil_IPv6Config_initWithNSString_withNSString_withInt_(NetI2pRouterTransportTransportUtil_IPv6Config *self, NSString *cfgstr, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->cfgstr_, cfgstr);
}

IOSObjectArray *NetI2pRouterTransportTransportUtil_IPv6Config_values() {
  NetI2pRouterTransportTransportUtil_IPv6Config_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTransportTransportUtil_IPv6Config_values_ count:5 type:NetI2pRouterTransportTransportUtil_IPv6Config_class_()];
}

NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_IPv6Config_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTransportTransportUtil_IPv6Config_initialize();
  for (int i = 0; i < 5; i++) {
    NetI2pRouterTransportTransportUtil_IPv6Config *e = NetI2pRouterTransportTransportUtil_IPv6Config_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTransportTransportUtil_IPv6Config *NetI2pRouterTransportTransportUtil_IPv6Config_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTransportTransportUtil_IPv6Config_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return NetI2pRouterTransportTransportUtil_IPv6Config_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportUtil_IPv6Config)
