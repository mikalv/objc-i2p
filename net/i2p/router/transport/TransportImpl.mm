//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/transport/TransportImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "java/util/concurrent/ArrayBlockingQueue.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/TransportEventListener.h"
#include "net/i2p/router/transport/TransportImpl.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterTransportTransportImpl () {
 @public
  NetI2pUtilLog *_log_;
  id<NetI2pRouterTransportTransportEventListener> _listener_;
  id<JavaUtilConcurrentBlockingQueue> _sendPool_;
  id<JavaUtilMap> _unreachableEntries_;
  id<JavaUtilMap> _wasUnreachableEntries_;
  id<JavaUtilSet> _localAddresses_;
}

- (void)markWasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer
                                 withBoolean:(jboolean)yes;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _listener_, id<NetI2pRouterTransportTransportEventListener>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _sendPool_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _unreachableEntries_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _wasUnreachableEntries_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTransportTransportImpl, _localAddresses_, id<JavaUtilSet>)

inline id<JavaUtilMap> NetI2pRouterTransportTransportImpl_get__IPMap(void);
static id<JavaUtilMap> NetI2pRouterTransportTransportImpl__IPMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportImpl, _IPMap, id<JavaUtilMap>)

inline jlong NetI2pRouterTransportTransportImpl_get_UNREACHABLE_PERIOD(void);
#define NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportImpl, UNREACHABLE_PERIOD, jlong)

inline jlong NetI2pRouterTransportTransportImpl_get_WAS_UNREACHABLE_PERIOD(void);
#define NetI2pRouterTransportTransportImpl_WAS_UNREACHABLE_PERIOD 1800000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportImpl, WAS_UNREACHABLE_PERIOD, jlong)

inline jint NetI2pRouterTransportTransportImpl_get_MAX_CONNECTION_FACTOR(void);
#define NetI2pRouterTransportTransportImpl_MAX_CONNECTION_FACTOR 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportImpl, MAX_CONNECTION_FACTOR, jint)

inline jint NetI2pRouterTransportTransportImpl_get_DEFAULT_CAPACITY_PCT(void);
#define NetI2pRouterTransportTransportImpl_DEFAULT_CAPACITY_PCT 75
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTransportTransportImpl, DEFAULT_CAPACITY_PCT, jint)

inline NSString *NetI2pRouterTransportTransportImpl_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterTransportTransportImpl_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTransportTransportImpl, BUNDLE_NAME, NSString *)

__attribute__((unused)) static void NetI2pRouterTransportTransportImpl_markWasUnreachableWithNetI2pDataHash_withBoolean_(NetI2pRouterTransportTransportImpl *self, NetI2pDataHash *peer, jboolean yes);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTransportTransportImpl__Annotations$0(void);

@interface NetI2pRouterTransportTransportImpl_AddrComparator : NSObject < JavaUtilComparator, JavaIoSerializable > {
 @public
  jint adj_;
}

- (instancetype)initWithInt:(jint)ipv6Adjustment;

- (jint)compareWithId:(NetI2pDataRouterRouterAddress *)l
               withId:(NetI2pDataRouterRouterAddress *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportTransportImpl_AddrComparator)

__attribute__((unused)) static void NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(NetI2pRouterTransportTransportImpl_AddrComparator *self, jint ipv6Adjustment);

__attribute__((unused)) static NetI2pRouterTransportTransportImpl_AddrComparator *new_NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(jint ipv6Adjustment) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportTransportImpl_AddrComparator *create_NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(jint ipv6Adjustment);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportTransportImpl_AddrComparator)

@interface NetI2pRouterTransportTransportImpl_CleanupUnreachable : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTransportTransportImpl *this$0_;
}

- (instancetype)initWithNetI2pRouterTransportTransportImpl:(NetI2pRouterTransportTransportImpl *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTransportTransportImpl_CleanupUnreachable)

__attribute__((unused)) static void NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl_CleanupUnreachable *self, NetI2pRouterTransportTransportImpl *outer$);

__attribute__((unused)) static NetI2pRouterTransportTransportImpl_CleanupUnreachable *new_NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTransportTransportImpl_CleanupUnreachable *create_NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTransportTransportImpl_CleanupUnreachable)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTransportTransportImpl)

@implementation NetI2pRouterTransportTransportImpl

+ (jboolean)ADJUST_COST {
  return NetI2pRouterTransportTransportImpl_ADJUST_COST;
}

+ (jint)CONGESTION_COST_ADJUSTMENT {
  return NetI2pRouterTransportTransportImpl_CONGESTION_COST_ADJUSTMENT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTransportTransportImpl_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jint)countPeers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)countActivePeers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)countActiveSendPeers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getMaxConnections {
  if ([((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) isDummy]) return 0;
  NSString *style = [self getStyle];
  NSString *maxProp;
  if ([((NSString *) nil_chk(style)) isEqual:@"SSU"]) maxProp = @"i2np.udp.maxConnections";
  else if ([style isEqual:@"NTCP"]) maxProp = @"i2np.ntcp.maxConnections";
  else maxProp = JreStrcat("$$$", @"i2np.", [style java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)], @".maxConnections");
  jint def = NetI2pRouterTransportTransportImpl_MAX_CONNECTION_FACTOR;
  jchar bw = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getBandwidthClass];
  switch (bw) {
    case NetI2pRouterRouter_CAPABILITY_BW12:
    case 'u':
    default:
    break;
    case NetI2pRouterRouter_CAPABILITY_BW32:
    def *= 2;
    break;
    case NetI2pRouterRouter_CAPABILITY_BW64:
    def *= 3;
    break;
    case NetI2pRouterRouter_CAPABILITY_BW128:
    def *= 5;
    break;
    case NetI2pRouterRouter_CAPABILITY_BW256:
    def *= 9;
    break;
    case NetI2pRouterRouter_CAPABILITY_BW512:
    def *= 11;
    break;
    case NetI2pRouterRouter_CAPABILITY_BW_UNLIMITED:
    def *= 14;
    break;
  }
  if ([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) floodfillEnabled]) {
    def *= 17;
    def /= 10;
  }
  if ([style isEqual:@"SSU"]) def *= 3;
  return [_context_ getPropertyWithNSString:maxProp withInt:def];
}

- (jboolean)haveCapacity {
  return [self haveCapacityWithInt:NetI2pRouterTransportTransportImpl_DEFAULT_CAPACITY_PCT];
}

- (jboolean)haveCapacityWithInt:(jint)pct {
  return [self countPeers] < [self getMaxConnections] * pct / 100;
}

- (JavaUtilVector *)getClockSkews {
  return create_JavaUtilVector_init();
}

- (id<JavaUtilList>)getMostRecentErrorMessages {
  return JavaUtilCollections_emptyList();
}

- (NetI2pRouterOutNetMessage *)getNextMessage {
  NetI2pRouterOutNetMessage *msg = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_sendPool_)) poll];
  if (msg != nil) [msg beginSend];
  return msg;
}

- (void)afterSendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)sendSuccessful {
  [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:sendSuccessful withBoolean:true withLong:0];
}

- (void)afterSendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)sendSuccessful
                                   withBoolean:(jboolean)allowRequeue {
  [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:sendSuccessful withBoolean:allowRequeue withLong:0];
}

- (void)afterSendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)sendSuccessful
                                      withLong:(jlong)msToSend {
  [self afterSendWithNetI2pRouterOutNetMessage:msg withBoolean:sendSuccessful withBoolean:true withLong:msToSend];
}

- (void)afterSendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg
                                   withBoolean:(jboolean)sendSuccessful
                                   withBoolean:(jboolean)allowRequeue
                                      withLong:(jlong)msToSend {
  if ([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget] == nil) {
    return;
  }
  jboolean log = false;
  if (sendSuccessful) [msg timestampWithNSString:@"afterSend(successful)"];
  else [msg timestampWithNSString:@"afterSend(failed)"];
  if (!sendSuccessful) [msg transportFailedWithNSString:[self getStyle]];
  if (msToSend > 1500) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$I$$CJ$$$J$", [self getStyle], @" afterSend slow: ", (sendSuccessful ? @"success " : @"FAIL "), [msg getMessageSize], @" byte ", [msg getMessageType], ' ', [msg getMessageId], @" to ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) calculateHash])) toBase64])) java_substring:0 endIndex:6], @" took ", msToSend, @" ms")];
  }
  jlong lifetime = [msg getLifetime];
  if (lifetime > 3000) {
    jint level = NetI2pUtilLog_INFO;
    if (!sendSuccessful) level = NetI2pUtilLog_DEBUG;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:level]) [_log_ logWithInt:level withNSString:JreStrcat("$$$JCJ$I$$CJ$$$$$$", [self getStyle], @" afterSend slow (", (sendSuccessful ? @"success " : @"FAIL "), lifetime, '/', msToSend, @"): ", [msg getMessageSize], @" byte ", [msg getMessageType], ' ', [msg getMessageId], @" from ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash])) toBase64])) java_substring:0 endIndex:6], @" to ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) calculateHash])) toBase64])) java_substring:0 endIndex:6], @": ", [msg description])];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$I$$CJ$$$$C$", [self getStyle], @" afterSend: ", (sendSuccessful ? @"success " : @"FAIL "), [msg getMessageSize], @" byte ", [msg getMessageType], ' ', [msg getMessageId], @" from ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash])) toBase64])) java_substring:0 endIndex:6], @" to ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) calculateHash])) toBase64])) java_substring:0 endIndex:6], 0x000a, [msg description])];
  }
  if (sendSuccessful) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$$", [self getStyle], @" Sent ", [msg getMessageType], @" successfully to ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash])) toBase64])];
    id<NetI2pRouterJob> j = [msg getOnSendJob];
    if (j != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:j];
    log = true;
    [msg discardData];
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$$$$@C", [self getStyle], @" Failed to send ", [msg getMessageType], @" to ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash])) toBase64], @" (details: ", msg, ')')];
    if ([msg getExpiration] < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.expiredOnQueueLifetime" withLong:lifetime];
    if (allowRequeue) {
      if ((([msg getExpiration] <= 0) || ([msg getExpiration] > [((NetI2pUtilClock *) nil_chk([_context_ clock])) now])) && ([msg getMessage] != nil)) {
        [((NetI2pRouterOutNetMessagePool *) nil_chk([_context_ outNetMessagePool])) addWithNetI2pRouterOutNetMessage:msg];
      }
      else {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$$", @"No more time left (", create_JavaUtilDate_initWithLong_([msg getExpiration]), @", expiring without sending successfully the ", [msg getMessageType])];
        if ([msg getOnFailedSendJob] != nil) [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedSendJob]];
        id<NetI2pRouterMessageSelector> selector = [msg getReplySelector];
        if (selector != nil) {
          [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([_context_ messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:msg];
        }
        log = true;
        [msg discardData];
      }
    }
    else {
      id<NetI2pRouterMessageSelector> selector = [msg getReplySelector];
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$$$@", @"Failed and no requeue allowed for a ", [msg getMessageSize], @" byte ", [msg getMessageType], @" message with selector ", selector) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"fail cause")];
      if ([msg getOnFailedSendJob] != nil) [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedSendJob]];
      if ([msg getOnFailedReplyJob] != nil) [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedReplyJob]];
      if (selector != nil) [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([_context_ messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:msg];
      log = true;
      [msg discardData];
    }
  }
  if (log) {
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jlong sendTime = now - [msg getSendBegin];
  jlong allTime = now - [msg getCreated];
  if (allTime > 5 * 1000) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$Z$J$J$@$$", @"Took too long from preparation to afterSend(ok? ", sendSuccessful, @"): ", allTime, @"ms/", sendTime, @"ms after failing on: ", [msg getFailedTransports], @" and succeeding on ", [self getStyle])];
    if ((allTime > 60 * 1000) && (sendSuccessful)) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$J$@$@$@", @"Severe latency? More than a minute slow? ", [msg getMessageType], @" of id ", [msg getMessageId], @" (send begin on ", create_JavaUtilDate_initWithLong_([msg getSendBegin]), @" / created on ", create_JavaUtilDate_initWithLong_([msg getCreated]), @"): ", msg)];
      [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) messageProcessingErrorWithLong:[msg getMessageId] withNSString:[msg getMessageType] withNSString:JreStrcat("$J$", @"Took too long to send [", allTime, @"ms]")];
    }
  }
  if (sendSuccessful) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendProcessingTime" withLong:lifetime];
    [((id<NetI2pRouterProfileManager>) nil_chk([_context_ profileManager])) messageSentWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash] withNSString:[self getStyle] withLong:sendTime withLong:[msg getMessageSize]];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageSize" withLong:[msg getMessageSize] withLong:sendTime];
  }
  else {
    [((id<NetI2pRouterProfileManager>) nil_chk([_context_ profileManager])) messageFailedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash] withNSString:[self getStyle]];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageFailureLifetime" withLong:lifetime];
  }
}

- (void)sendWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  if ([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget] == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$@", @"Error - bad message enqueued [target is null]: ", msg) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Added by")];
    return;
  }
  @try {
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_sendPool_)) putWithId:msg];
  }
  @catch (JavaLangInterruptedException *ie) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$@", @"Interrupted during send ", msg)];
    return;
  }
  [self outboundMessageReady];
}

- (void)outboundMessageReady {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)messageReceivedWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)inMsg
                  withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)remoteIdent
                                  withNetI2pDataHash:(NetI2pDataHash *)remoteIdentHash
                                            withLong:(jlong)msToReceive
                                             withInt:(jint)bytesReceived {
  jint level = NetI2pUtilLog_INFO;
  if (msToReceive > 5000) level = NetI2pUtilLog_WARN;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:level]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Message received: "])) appendWithNSString:[[((id<NetI2pDataI2npI2NPMessage>) nil_chk(inMsg)) java_getClass] getSimpleName]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" / "])) appendWithLong:[inMsg getUniqueId]];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" in "])) appendWithLong:msToReceive])) appendWithNSString:@"ms containing "];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:bytesReceived])) appendWithNSString:@" bytes "];
    [buf appendWithNSString:@" from "];
    if (remoteIdentHash != nil) {
      [buf appendWithNSString:[remoteIdentHash toBase64]];
    }
    else if (remoteIdent != nil) {
      [buf appendWithNSString:[((NetI2pDataHash *) nil_chk([remoteIdent getHash])) toBase64]];
    }
    else {
      [buf appendWithNSString:@"[unknown]"];
    }
    [buf appendWithNSString:@" and forwarding to listener: "];
    if (_listener_ != nil) [buf appendWithId:_listener_];
    [_log_ logWithInt:level withNSString:[buf description]];
  }
  if (remoteIdent != nil) remoteIdentHash = [remoteIdent getHash];
  if (remoteIdentHash != nil) {
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileManager])) messageReceivedWithNetI2pDataHash:remoteIdentHash withNSString:[self getStyle] withLong:msToReceive withInt:bytesReceived];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.receiveMessageSize" withLong:bytesReceived withLong:msToReceive];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"transport.receiveMessageTime" withLong:msToReceive];
  if (msToReceive > 1000) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.receiveMessageTimeSlow" withLong:msToReceive];
  }
  if (_listener_ != nil) {
    [_listener_ messageReceivedWithNetI2pDataI2npI2NPMessage:inMsg withNetI2pDataRouterRouterIdentity:remoteIdent withNetI2pDataHash:remoteIdentHash];
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$", @"Null listener! this = ", [self description]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Null listener")];
  }
}

- (id<JavaUtilList>)getCurrentAddresses {
  return _currentAddresses_;
}

- (NetI2pDataRouterRouterAddress *)getCurrentAddressWithBoolean:(jboolean)ipv6 {
  for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk(_currentAddresses_)) {
    if (ipv6 == NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(ra)) return ra;
  }
  return nil;
}

- (jboolean)hasCurrentAddress {
  return ![((id<JavaUtilList>) nil_chk(_currentAddresses_)) isEmpty];
}

- (id<JavaUtilList>)updateAddress {
  return _currentAddresses_;
}

- (void)replaceAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Replacing address with ", address) withJavaLangThrowable:create_JavaLangException_init()];
  if (address == nil) {
    [((id<JavaUtilList>) nil_chk(_currentAddresses_)) clear];
  }
  else {
    jboolean isIPv6 = NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(address);
    for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk(_currentAddresses_)) {
      if (isIPv6 == NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(ra)) [_currentAddresses_ removeWithId:ra];
    }
    [_currentAddresses_ addWithId:address];
  }
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$I$", [self getStyle], @" now has ", [_currentAddresses_ size], @" addresses")];
  if (_listener_ != nil) [_listener_ transportAddressChanged];
}

- (void)removeAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$@", @"Removing address ", address) withJavaLangThrowable:create_JavaLangException_init()];
  jboolean changed = [((id<JavaUtilList>) nil_chk(_currentAddresses_)) removeWithId:address];
  changed = true;
  if (changed) {
    if ([_log_ shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$I$", [self getStyle], @" now has ", [_currentAddresses_ size], @" addresses")];
    if (_listener_ != nil) [_listener_ transportAddressChanged];
  }
  else {
    if ([_log_ shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$", [self getStyle], @" no addresses removed")];
  }
}

- (void)removeAddressWithBoolean:(jboolean)ipv6 {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$Z", @"Removing addresses, ipv6? ", ipv6) withJavaLangThrowable:create_JavaLangException_init()];
  jboolean changed = false;
  for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk(_currentAddresses_)) {
    if (ipv6 == NetI2pRouterTransportTransportUtil_isIPv6WithNetI2pDataRouterRouterAddress_(ra)) {
      if ([_currentAddresses_ removeWithId:ra]) changed = true;
    }
  }
  if (changed) {
    if ([_log_ shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$I$", [self getStyle], @" now has ", [_currentAddresses_ size], @" addresses")];
    if (_listener_ != nil) [_listener_ transportAddressChanged];
  }
  else {
    if ([_log_ shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$", [self getStyle], @" no addresses removed")];
  }
}

- (void)saveLocalAddressWithJavaNetInetAddress:(JavaNetInetAddress *)address {
  [((id<JavaUtilSet>) nil_chk(_localAddresses_)) addWithId:address];
}

- (id<JavaUtilCollection>)getSavedLocalAddresses {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithJavaUtilCollection_(_localAddresses_);
  [((id<JavaUtilSet>) nil_chk(_localAddresses_)) clear];
  return rv;
}

- (id<JavaUtilList>)getTargetAddressesWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)target {
  id<JavaUtilList> rv;
  NSString *alt = [self getAltStyle];
  if (alt != nil) rv = [((NetI2pDataRouterRouterInfo *) nil_chk(target)) getTargetAddressesWithNSString:[self getStyle] withNSString:alt];
  else rv = [((NetI2pDataRouterRouterInfo *) nil_chk(target)) getTargetAddressesWithNSString:[self getStyle]];
  if ([((id<JavaUtilList>) nil_chk(rv)) isEmpty]) return rv;
  if ([rv size] > 1) {
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(rv, [((NetI2pRouterRouterContext *) nil_chk(_context_)) random]);
    NetI2pRouterTransportTransportUtil_IPv6Config *config = [self getIPv6Config];
    jint adj;
    switch ([config ordinal]) {
      case NetI2pRouterTransportTransportUtil_IPv6Config_Enum_IPV6_DISABLED:
      adj = 10;
      break;
      case NetI2pRouterTransportTransportUtil_IPv6Config_Enum_IPV6_NOT_PREFERRED:
      adj = 1;
      break;
      default:
      case NetI2pRouterTransportTransportUtil_IPv6Config_Enum_IPV6_ENABLED:
      adj = 0;
      break;
      case NetI2pRouterTransportTransportUtil_IPv6Config_Enum_IPV6_PREFERRED:
      adj = -1;
      break;
      case NetI2pRouterTransportTransportUtil_IPv6Config_Enum_IPV6_ONLY:
      adj = -10;
      break;
    }
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(rv, create_NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(adj));
  }
  return rv;
}

- (void)externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                  withByteArray:(IOSByteArray *)ip
                                                                        withInt:(jint)port {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:(NetI2pRouterTransportTransport_AddressSource *)source
                                                                   withBoolean:(jboolean)ipv6 {
}

- (void)forwardPortStatusWithByteArray:(IOSByteArray *)ip
                               withInt:(jint)port
                               withInt:(jint)externalPort
                           withBoolean:(jboolean)success
                          withNSString:(NSString *)reason {
}

- (jint)getRequestedPort {
  return -1;
}

- (void)setListenerWithNetI2pRouterTransportTransportEventListener:(id<NetI2pRouterTransportTransportEventListener>)listener {
  JreStrongAssign(&_listener_, listener);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
  [self renderStatusHTMLWithJavaIoWriter:outArg];
}

- (NetI2pRouterCommSystemFacade_Status *)getReachabilityStatus {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)recheckReachability {
}

- (jboolean)isIPv4Firewalled {
  return NetI2pRouterTransportTransportUtil_isIPv4FirewalledWithNetI2pRouterRouterContext_withNSString_(_context_, [self getStyle]);
}

- (jboolean)isIPv6Firewalled {
  return NetI2pRouterTransportTransportUtil_isIPv6FirewalledWithNetI2pRouterRouterContext_withNSString_(_context_, [self getStyle]);
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
}

- (jboolean)isUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  @synchronized(_unreachableEntries_) {
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_unreachableEntries_)) getWithId:peer];
    if (when == nil) return false;
    if ([when longLongValue] + NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD < now) {
      [_unreachableEntries_ removeWithId:peer];
      return false;
    }
    else {
      return true;
    }
  }
}

- (void)markUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterCommSystemFacade_Status *status = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) getStatus];
  if (status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED) || status == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, HOSED)) return;
  JavaLangLong *now = JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([_context_ clock])) now]);
  @synchronized(_unreachableEntries_) {
    [((id<JavaUtilMap>) nil_chk(_unreachableEntries_)) putWithId:peer withId:now];
  }
  NetI2pRouterTransportTransportImpl_markWasUnreachableWithNetI2pDataHash_withBoolean_(self, peer, true);
}

- (void)markReachableWithNetI2pDataHash:(NetI2pDataHash *)peer
                            withBoolean:(jboolean)isInbound {
  [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) unbanlistRouterWithNetI2pDataHash:peer];
  @synchronized(_unreachableEntries_) {
    [((id<JavaUtilMap>) nil_chk(_unreachableEntries_)) removeWithId:peer];
  }
  if (!isInbound) NetI2pRouterTransportTransportImpl_markWasUnreachableWithNetI2pDataHash_withBoolean_(self, peer, false);
}

- (jboolean)wasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  @synchronized(_wasUnreachableEntries_) {
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_wasUnreachableEntries_)) getWithId:peer];
    if (when != nil) {
      if ([when longLongValue] + NetI2pRouterTransportTransportImpl_WAS_UNREACHABLE_PERIOD < now) {
        [((id<JavaUtilMap>) nil_chk(_unreachableEntries_)) removeWithId:peer];
        return false;
      }
      else {
        return true;
      }
    }
  }
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (ri == nil) return false;
  return nil == [ri getTargetAddressWithNSString:[self getStyle]];
}

- (void)markWasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer
                                 withBoolean:(jboolean)yes {
  NetI2pRouterTransportTransportImpl_markWasUnreachableWithNetI2pDataHash_withBoolean_(self, peer, yes);
}

- (jboolean)allowLocal {
  return [((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:@"i2np.allowLocal"];
}

- (void)setIPWithNetI2pDataHash:(NetI2pDataHash *)peer
                  withByteArray:(IOSByteArray *)ip {
  IOSByteArray *old;
  @synchronized(NetI2pRouterTransportTransportImpl__IPMap) {
    old = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pRouterTransportTransportImpl__IPMap)) putWithId:peer withId:ip]);
  }
  if (!NetI2pDataDataHelper_eqWithByteArray_withByteArray_(old, ip)) [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) queueLookupWithByteArray:ip];
}

+ (IOSByteArray *)getIPWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterTransportTransportImpl_getIPWithNetI2pDataHash_(peer);
}

- (NSString *)getAltStyle {
  return nil;
}

+ (void)clearCaches {
  NetI2pRouterTransportTransportImpl_clearCaches();
}

- (NetI2pRouterTransportTransportUtil_IPv6Config *)getIPv6Config {
  return NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNetI2pRouterRouterContext_withNSString_(_context_, [self getStyle]);
}

- (jboolean)isPubliclyRoutableWithByteArray:(IOSByteArray *)addr {
  NetI2pRouterTransportTransportUtil_IPv6Config *cfg = [self getIPv6Config];
  return NetI2pRouterTransportTransportUtil_isPubliclyRoutableWithByteArray_withBoolean_withBoolean_(addr, cfg != JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY), cfg != JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_DISABLED));
}

- (NSString *)_tWithNSString:(NSString *)s {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(s, _context_, NetI2pRouterTransportTransportImpl_BUNDLE_NAME);
}

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o {
  return NetI2pUtilTranslate_getStringWithNSString_withId_withNetI2pI2PAppContext_withNSString_(s, o, _context_, NetI2pRouterTransportTransportImpl_BUNDLE_NAME);
}

- (NSString *)ngettextWithNSString:(NSString *)s
                      withNSString:(NSString *)p
                           withInt:(jint)n {
  return NetI2pUtilTranslate_getStringWithInt_withNSString_withNSString_withNetI2pI2PAppContext_withNSString_(n, s, p, _context_, NetI2pRouterTransportTransportImpl_BUNDLE_NAME);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_listener_);
  RELEASE_(_currentAddresses_);
  RELEASE_(_sendPool_);
  RELEASE_(_context_);
  RELEASE_(_unreachableEntries_);
  RELEASE_(_wasUnreachableEntries_);
  RELEASE_(_localAddresses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessage;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, -1, -1, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x401, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, 36, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 37, 36, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 43, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 47, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 51, 40, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportTransportUtil_IPv6Config;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 54, 55, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 54, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 57, 58, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(countPeers);
  methods[2].selector = @selector(countActivePeers);
  methods[3].selector = @selector(countActiveSendPeers);
  methods[4].selector = @selector(getMaxConnections);
  methods[5].selector = @selector(haveCapacity);
  methods[6].selector = @selector(haveCapacityWithInt:);
  methods[7].selector = @selector(getClockSkews);
  methods[8].selector = @selector(getMostRecentErrorMessages);
  methods[9].selector = @selector(getNextMessage);
  methods[10].selector = @selector(afterSendWithNetI2pRouterOutNetMessage:withBoolean:);
  methods[11].selector = @selector(afterSendWithNetI2pRouterOutNetMessage:withBoolean:withBoolean:);
  methods[12].selector = @selector(afterSendWithNetI2pRouterOutNetMessage:withBoolean:withLong:);
  methods[13].selector = @selector(afterSendWithNetI2pRouterOutNetMessage:withBoolean:withBoolean:withLong:);
  methods[14].selector = @selector(sendWithNetI2pRouterOutNetMessage:);
  methods[15].selector = @selector(outboundMessageReady);
  methods[16].selector = @selector(messageReceivedWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:withLong:withInt:);
  methods[17].selector = @selector(getCurrentAddresses);
  methods[18].selector = @selector(getCurrentAddressWithBoolean:);
  methods[19].selector = @selector(hasCurrentAddress);
  methods[20].selector = @selector(updateAddress);
  methods[21].selector = @selector(replaceAddressWithNetI2pDataRouterRouterAddress:);
  methods[22].selector = @selector(removeAddressWithNetI2pDataRouterRouterAddress:);
  methods[23].selector = @selector(removeAddressWithBoolean:);
  methods[24].selector = @selector(saveLocalAddressWithJavaNetInetAddress:);
  methods[25].selector = @selector(getSavedLocalAddresses);
  methods[26].selector = @selector(getTargetAddressesWithNetI2pDataRouterRouterInfo:);
  methods[27].selector = @selector(externalAddressReceivedWithNetI2pRouterTransportTransport_AddressSource:withByteArray:withInt:);
  methods[28].selector = @selector(externalAddressRemovedWithNetI2pRouterTransportTransport_AddressSource:withBoolean:);
  methods[29].selector = @selector(forwardPortStatusWithByteArray:withInt:withInt:withBoolean:withNSString:);
  methods[30].selector = @selector(getRequestedPort);
  methods[31].selector = @selector(setListenerWithNetI2pRouterTransportTransportEventListener:);
  methods[32].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[33].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  methods[34].selector = @selector(getReachabilityStatus);
  methods[35].selector = @selector(recheckReachability);
  methods[36].selector = @selector(isIPv4Firewalled);
  methods[37].selector = @selector(isIPv6Firewalled);
  methods[38].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[39].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[40].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[41].selector = @selector(isUnreachableWithNetI2pDataHash:);
  methods[42].selector = @selector(markUnreachableWithNetI2pDataHash:);
  methods[43].selector = @selector(markReachableWithNetI2pDataHash:withBoolean:);
  methods[44].selector = @selector(wasUnreachableWithNetI2pDataHash:);
  methods[45].selector = @selector(markWasUnreachableWithNetI2pDataHash:withBoolean:);
  methods[46].selector = @selector(allowLocal);
  methods[47].selector = @selector(setIPWithNetI2pDataHash:withByteArray:);
  methods[48].selector = @selector(getIPWithNetI2pDataHash:);
  methods[49].selector = @selector(getAltStyle);
  methods[50].selector = @selector(clearCaches);
  methods[51].selector = @selector(getIPv6Config);
  methods[52].selector = @selector(isPubliclyRoutableWithByteArray:);
  methods[53].selector = @selector(_tWithNSString:);
  methods[54].selector = @selector(_tWithNSString:withId:);
  methods[55].selector = @selector(ngettextWithNSString:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_listener_", "LNetI2pRouterTransportTransportEventListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentAddresses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 59, -1 },
    { "_sendPool_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 60, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_unreachableEntries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 61, -1 },
    { "_wasUnreachableEntries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 61, -1 },
    { "_localAddresses_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 62, -1 },
    { "_IPMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 63, 64, -1 },
    { "UNREACHABLE_PERIOD", "J", .constantValue.asLong = NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD, 0x1a, -1, -1, -1, -1 },
    { "WAS_UNREACHABLE_PERIOD", "J", .constantValue.asLong = NetI2pRouterTransportTransportImpl_WAS_UNREACHABLE_PERIOD, 0x1a, -1, -1, -1, -1 },
    { "MAX_CONNECTION_FACTOR", "I", .constantValue.asInt = NetI2pRouterTransportTransportImpl_MAX_CONNECTION_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_CAPACITY_PCT", "I", .constantValue.asInt = NetI2pRouterTransportTransportImpl_DEFAULT_CAPACITY_PCT, 0x1a, -1, -1, -1, -1 },
    { "ADJUST_COST", "Z", .constantValue.asBOOL = NetI2pRouterTransportTransportImpl_ADJUST_COST, 0x1c, -1, -1, -1, -1 },
    { "CONGESTION_COST_ADJUSTMENT", "I", .constantValue.asInt = NetI2pRouterTransportTransportImpl_CONGESTION_COST_ADJUSTMENT, 0x1c, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "haveCapacity", "I", "()Ljava/util/Vector<Ljava/lang/Long;>;", "()Ljava/util/List<Ljava/lang/String;>;", "afterSend", "LNetI2pRouterOutNetMessage;Z", "LNetI2pRouterOutNetMessage;ZZ", "LNetI2pRouterOutNetMessage;ZJ", "LNetI2pRouterOutNetMessage;ZZJ", "send", "LNetI2pRouterOutNetMessage;", "messageReceived", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;JI", "()Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "getCurrentAddress", "Z", "replaceAddress", "LNetI2pDataRouterRouterAddress;", "removeAddress", "saveLocalAddress", "LJavaNetInetAddress;", "()Ljava/util/Collection<Ljava/net/InetAddress;>;", "getTargetAddresses", "LNetI2pDataRouterRouterInfo;", "(Lnet/i2p/data/router/RouterInfo;)Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "externalAddressReceived", "LNetI2pRouterTransportTransport_AddressSource;[BI", "externalAddressRemoved", "LNetI2pRouterTransportTransport_AddressSource;Z", "forwardPortStatus", "[BIIZLNSString;", "setListener", "LNetI2pRouterTransportTransportEventListener;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "LJavaIoWriter;LNSString;I", (void *)&NetI2pRouterTransportTransportImpl__Annotations$0, "isBacklogged", "LNetI2pDataHash;", "isEstablished", "mayDisconnect", "isUnreachable", "markUnreachable", "markReachable", "LNetI2pDataHash;Z", "wasUnreachable", "markWasUnreachable", "setIP", "LNetI2pDataHash;[B", "getIP", "isPubliclyRoutable", "[B", "_t", "LNSString;", "LNSString;LNSObject;", "ngettext", "LNSString;LNSString;I", "Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/OutNetMessage;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/Long;>;", "Ljava/util/Set<Ljava/net/InetAddress;>;", &NetI2pRouterTransportTransportImpl__IPMap, "Ljava/util/Map<Lnet/i2p/data/Hash;[B>;", &NetI2pRouterTransportTransportImpl_BUNDLE_NAME, "LNetI2pRouterTransportTransportImpl_AddrComparator;LNetI2pRouterTransportTransportImpl_CleanupUnreachable;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportImpl = { "TransportImpl", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x401, 56, 16, -1, 66, -1, -1, -1 };
  return &_NetI2pRouterTransportTransportImpl;
}

+ (void)initialize {
  if (self == [NetI2pRouterTransportTransportImpl class]) {
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      jlong min = 512;
      jlong max = 4096;
      jint size = (jint) JavaLangMath_maxWithLong_withLong_(min, JavaLangMath_minWithLong_withLong_(max, 1 + (maxMemory / (128 * 1024))));
      JreStrongAssignAndConsume(&NetI2pRouterTransportTransportImpl__IPMap, new_NetI2pUtilLHMCache_initWithInt_(size));
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTransportTransportImpl)
  }
}

@end

void NetI2pRouterTransportTransportImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterTransportTransportImpl *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.sendMessageFailureLifetime" withNSString:@"How long the lifetime of messages that fail are?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.sendMessageSize" withNSString:@"Size of sent messages (bytes)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.receiveMessageSize" withNSString:@"Size of received messages (bytes)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.receiveMessageTime" withNSString:@"How long it takes to read a message?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.receiveMessageTimeSlow" withNSString:@"How long it takes to read a message (when it takes more than a second)?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.sendProcessingTime" withNSString:@"Time to process and send a message (ms)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.expiredOnQueueLifetime" withNSString:@"How long a message that expires on our outbound queue is processed" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  JreStrongAssignAndConsume(&self->_currentAddresses_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  if ([((NSString *) nil_chk([self getStyle])) isEqual:@"NTCP"]) JreStrongAssignAndConsume(&self->_sendPool_, new_JavaUtilConcurrentArrayBlockingQueue_initWithInt_(8));
  else JreStrongAssign(&self->_sendPool_, nil);
  JreStrongAssignAndConsume(&self->_unreachableEntries_, new_JavaUtilHashMap_initWithInt_(32));
  JreStrongAssignAndConsume(&self->_wasUnreachableEntries_, new_JavaUtilHashMap_initWithInt_(32));
  JreStrongAssignAndConsume(&self->_localAddresses_, new_NetI2pUtilConcurrentHashSet_initWithInt_(4));
  [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(self) withLong:2 * NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD withLong:NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD / 2];
}

void NetI2pRouterTransportTransportImpl_markWasUnreachableWithNetI2pDataHash_withBoolean_(NetI2pRouterTransportTransportImpl *self, NetI2pDataHash *peer, jboolean yes) {
  if (yes) {
    JavaLangLong *now = JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now]);
    @synchronized(self->_wasUnreachableEntries_) {
      [((id<JavaUtilMap>) nil_chk(self->_wasUnreachableEntries_)) putWithId:peer withId:now];
    }
  }
  else {
    @synchronized(self->_wasUnreachableEntries_) {
      [((id<JavaUtilMap>) nil_chk(self->_wasUnreachableEntries_)) removeWithId:peer];
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$Z$@", [self getStyle], @" setting wasUnreachable to ", yes, @" for ", peer) withJavaLangThrowable:yes ? create_JavaLangException_init() : nil];
}

IOSByteArray *NetI2pRouterTransportTransportImpl_getIPWithNetI2pDataHash_(NetI2pDataHash *peer) {
  NetI2pRouterTransportTransportImpl_initialize();
  @synchronized(NetI2pRouterTransportTransportImpl__IPMap) {
    return JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pRouterTransportTransportImpl__IPMap)) getWithId:peer]);
  }
}

void NetI2pRouterTransportTransportImpl_clearCaches() {
  NetI2pRouterTransportTransportImpl_initialize();
  @synchronized(NetI2pRouterTransportTransportImpl__IPMap) {
    [((id<JavaUtilMap>) nil_chk(NetI2pRouterTransportTransportImpl__IPMap)) clear];
  }
}

IOSObjectArray *NetI2pRouterTransportTransportImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportImpl)

@implementation NetI2pRouterTransportTransportImpl_AddrComparator

- (instancetype)initWithInt:(jint)ipv6Adjustment {
  NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(self, ipv6Adjustment);
  return self;
}

- (jint)compareWithId:(NetI2pDataRouterRouterAddress *)l
               withId:(NetI2pDataRouterRouterAddress *)r {
  jint lc = [((NetI2pDataRouterRouterAddress *) nil_chk(l)) getCost];
  jint rc = [((NetI2pDataRouterRouterAddress *) nil_chk(r)) getCost];
  IOSByteArray *lip = [l getIP];
  IOSByteArray *rip = [r getIP];
  if (lip == nil) lc += 20;
  else if (lip->size_ == 16) lc += adj_;
  if (rip == nil) rc += 20;
  else if (rip->size_ == 16) rc += adj_;
  if (lc > rc) return 1;
  if (lc < rc) return -1;
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "adj_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compare", "LNetI2pDataRouterRouterAddress;LNetI2pDataRouterRouterAddress;", "LNetI2pRouterTransportTransportImpl;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/data/router/RouterAddress;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportImpl_AddrComparator = { "AddrComparator", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterTransportTransportImpl_AddrComparator;
}

@end

void NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(NetI2pRouterTransportTransportImpl_AddrComparator *self, jint ipv6Adjustment) {
  NSObject_init(self);
  self->adj_ = ipv6Adjustment;
}

NetI2pRouterTransportTransportImpl_AddrComparator *new_NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(jint ipv6Adjustment) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportTransportImpl_AddrComparator, initWithInt_, ipv6Adjustment)
}

NetI2pRouterTransportTransportImpl_AddrComparator *create_NetI2pRouterTransportTransportImpl_AddrComparator_initWithInt_(jint ipv6Adjustment) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportTransportImpl_AddrComparator, initWithInt_, ipv6Adjustment)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportImpl_AddrComparator)

@implementation NetI2pRouterTransportTransportImpl_CleanupUnreachable

- (instancetype)initWithNetI2pRouterTransportTransportImpl:(NetI2pRouterTransportTransportImpl *)outer$ {
  NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(self, outer$);
  return self;
}

- (void)timeReached {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  @synchronized(this$0_->_unreachableEntries_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->_unreachableEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      JavaLangLong *when = [iter next];
      if ([((JavaLangLong *) nil_chk(when)) longLongValue] + NetI2pRouterTransportTransportImpl_UNREACHABLE_PERIOD < now) [iter remove];
    }
  }
  @synchronized(this$0_->_wasUnreachableEntries_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->_wasUnreachableEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      JavaLangLong *when = [iter next];
      if ([((JavaLangLong *) nil_chk(when)) longLongValue] + NetI2pRouterTransportTransportImpl_WAS_UNREACHABLE_PERIOD < now) [iter remove];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTransportTransportImpl:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTransportTransportImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTransportTransportImpl;" };
  static const J2ObjcClassInfo _NetI2pRouterTransportTransportImpl_CleanupUnreachable = { "CleanupUnreachable", "net.i2p.router.transport", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTransportTransportImpl_CleanupUnreachable;
}

@end

void NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl_CleanupUnreachable *self, NetI2pRouterTransportTransportImpl *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTransportTransportImpl_CleanupUnreachable *new_NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTransportTransportImpl_CleanupUnreachable, initWithNetI2pRouterTransportTransportImpl_, outer$)
}

NetI2pRouterTransportTransportImpl_CleanupUnreachable *create_NetI2pRouterTransportTransportImpl_CleanupUnreachable_initWithNetI2pRouterTransportTransportImpl_(NetI2pRouterTransportTransportImpl *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTransportTransportImpl_CleanupUnreachable, initWithNetI2pRouterTransportTransportImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTransportTransportImpl_CleanupUnreachable)
