//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/NetworkDatabaseFacade.java
//

#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collections.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/reseed/ReseedChecker.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation NetI2pRouterNetworkDatabaseFacade

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterNetworkDatabaseFacade_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilSet>)findNearestRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                withInt:(jint)maxNumRouters
                                        withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataDatabaseEntry *)lookupLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs
                      withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NetI2pDataLeaseSet *)lookupLeaseSetLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)lookupRouterInfoWithNetI2pDataHash:(NetI2pDataHash *)key
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                  withLong:(jlong)timeoutMs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NetI2pDataRouterRouterInfo *)lookupRouterInfoLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)lookupLeaseSetRemotelyWithNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)lookupDestinationWithNetI2pDataHash:(NetI2pDataHash *)key
                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFinishedJob
                                   withLong:(jlong)timeoutMs
                         withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NetI2pDataDestination *)lookupDestinationLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataLeaseSet *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataRouterRouterInfo *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataDatabaseEntry *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)entry_ {
  if ([((NetI2pDataDatabaseEntry *) nil_chk(entry_)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) return [self storeWithNetI2pDataHash:key withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *) cast_chk(entry_, [NetI2pDataRouterRouterInfo class])];
  if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) return [self storeWithNetI2pDataHash:key withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *) cast_chk(entry_, [NetI2pDataLeaseSet class])];
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unknown type");
}

- (void)publishWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)localRouterInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)publishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unpublishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)failWithNetI2pDataHash:(NetI2pDataHash *)dbEntry {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jlong)getLastRouterInfoPublishTime {
  return 0;
}

- (id<JavaUtilSet>)getAllRouters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getKnownRouters {
  return 0;
}

- (jint)getKnownLeaseSets {
  return 0;
}

- (jboolean)isInitialized {
  return true;
}

- (void)rescan {
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (id<JavaUtilSet>)getLeases {
  return JavaUtilCollections_emptySet();
}

- (id<JavaUtilSet>)getRouters {
  return JavaUtilCollections_emptySet();
}

- (NetI2pRouterNetworkdbReseedReseedChecker *)reseedChecker {
  return nil;
}

- (jboolean)floodfillEnabled {
  return false;
}

- (jboolean)isNegativeCachedForeverWithNetI2pDataHash:(NetI2pDataHash *)key {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x401, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x401, 10, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x401, 15, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x401, 16, 17, 18, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x401, 16, 19, 18, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 16, 20, 18, -1, -1, -1 },
    { NULL, "V", 0x401, 21, 22, 18, -1, -1, -1 },
    { NULL, "V", 0x401, 21, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, -1, -1, -1, 26, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbReseedReseedChecker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findNearestRoutersWithNetI2pDataHash:withInt:withJavaUtilSet:);
  methods[2].selector = @selector(lookupLocallyWithNetI2pDataHash:);
  methods[3].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[4].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[5].selector = @selector(lookupLeaseSetLocallyWithNetI2pDataHash:);
  methods[6].selector = @selector(lookupRouterInfoWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[7].selector = @selector(lookupRouterInfoLocallyWithNetI2pDataHash:);
  methods[8].selector = @selector(lookupLeaseSetRemotelyWithNetI2pDataHash:withNetI2pDataHash:);
  methods[9].selector = @selector(lookupDestinationWithNetI2pDataHash:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[10].selector = @selector(lookupDestinationLocallyWithNetI2pDataHash:);
  methods[11].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[12].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[13].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[14].selector = @selector(publishWithNetI2pDataRouterRouterInfo:);
  methods[15].selector = @selector(publishWithNetI2pDataLeaseSet:);
  methods[16].selector = @selector(unpublishWithNetI2pDataLeaseSet:);
  methods[17].selector = @selector(failWithNetI2pDataHash:);
  methods[18].selector = @selector(getLastRouterInfoPublishTime);
  methods[19].selector = @selector(getAllRouters);
  methods[20].selector = @selector(getKnownRouters);
  methods[21].selector = @selector(getKnownLeaseSets);
  methods[22].selector = @selector(isInitialized);
  methods[23].selector = @selector(rescan);
  methods[24].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[25].selector = @selector(getLeases);
  methods[26].selector = @selector(getRouters);
  methods[27].selector = @selector(reseedChecker);
  methods[28].selector = @selector(floodfillEnabled);
  methods[29].selector = @selector(isNegativeCachedForeverWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "findNearestRouters", "LNetI2pDataHash;ILJavaUtilSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "lookupLocally", "LNetI2pDataHash;", "lookupLeaseSet", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;J", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupLeaseSetLocally", "lookupRouterInfo", "lookupRouterInfoLocally", "lookupLeaseSetRemotely", "LNetI2pDataHash;LNetI2pDataHash;", "lookupDestination", "LNetI2pDataHash;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupDestinationLocally", "store", "LNetI2pDataHash;LNetI2pDataLeaseSet;", "LJavaLangIllegalArgumentException;", "LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;", "publish", "LNetI2pDataRouterRouterInfo;", "LNetI2pDataLeaseSet;", "unpublish", "fail", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "()Ljava/util/Set<Lnet/i2p/data/LeaseSet;>;", "()Ljava/util/Set<Lnet/i2p/data/router/RouterInfo;>;", "isNegativeCachedForever" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkDatabaseFacade = { "NetworkDatabaseFacade", "net.i2p.router", ptrTable, methods, NULL, 7, 0x401, 30, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkDatabaseFacade;
}

@end

void NetI2pRouterNetworkDatabaseFacade_init(NetI2pRouterNetworkDatabaseFacade *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkDatabaseFacade)
