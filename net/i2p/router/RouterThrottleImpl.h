//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/RouterThrottleImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterRouterThrottleImpl")
#ifdef RESTRICT_NetI2pRouterRouterThrottleImpl
#define INCLUDE_ALL_NetI2pRouterRouterThrottleImpl 0
#else
#define INCLUDE_ALL_NetI2pRouterRouterThrottleImpl 1
#endif
#undef RESTRICT_NetI2pRouterRouterThrottleImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterRouterThrottleImpl_) && (INCLUDE_ALL_NetI2pRouterRouterThrottleImpl || defined(INCLUDE_NetI2pRouterRouterThrottleImpl))
#define NetI2pRouterRouterThrottleImpl_

#define RESTRICT_NetI2pRouterRouterThrottle 1
#define INCLUDE_NetI2pRouterRouterThrottle 1
#include "net/i2p/router/RouterThrottle.h"

@class NetI2pDataHash;
@class NetI2pRouterRouterContext;

@interface NetI2pRouterRouterThrottleImpl : NSObject < NetI2pRouterRouterThrottle > {
 @public
  NetI2pRouterRouterContext *_context_;
}
@property (readonly, copy, class) NSString *PROP_MAX_TUNNELS NS_SWIFT_NAME(PROP_MAX_TUNNELS);
@property (readonly, class) jint DEFAULT_MAX_TUNNELS NS_SWIFT_NAME(DEFAULT_MAX_TUNNELS);
@property (readonly, class) jint TUNNEL_ACCEPT NS_SWIFT_NAME(TUNNEL_ACCEPT);

+ (NSString *)PROP_MAX_TUNNELS;

+ (jint)DEFAULT_MAX_TUNNELS;

+ (jint)TUNNEL_ACCEPT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

- (jboolean)acceptNetDbLookupRequestWithNetI2pDataHash:(NetI2pDataHash *)key;

- (jboolean)acceptNetworkMessage;

- (jint)acceptTunnelRequest;

- (void)cancelShutdownStatus;

- (jdouble)getInboundRateDelta;

- (jlong)getMessageDelay;

- (jlong)getTunnelLag;

- (NSString *)getTunnelStatus;

- (void)setShutdownStatus;

- (void)setTunnelStatusWithNSString:(NSString *)msg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterRouterThrottleImpl)

J2OBJC_FIELD_SETTER(NetI2pRouterRouterThrottleImpl, _context_, NetI2pRouterRouterContext *)

inline NSString *NetI2pRouterRouterThrottleImpl_get_PROP_MAX_TUNNELS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterRouterThrottleImpl_PROP_MAX_TUNNELS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouterThrottleImpl, PROP_MAX_TUNNELS, NSString *)

inline jint NetI2pRouterRouterThrottleImpl_get_DEFAULT_MAX_TUNNELS(void);
#define NetI2pRouterRouterThrottleImpl_DEFAULT_MAX_TUNNELS 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterThrottleImpl, DEFAULT_MAX_TUNNELS, jint)

inline jint NetI2pRouterRouterThrottleImpl_get_TUNNEL_ACCEPT(void);
#define NetI2pRouterRouterThrottleImpl_TUNNEL_ACCEPT 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterThrottleImpl, TUNNEL_ACCEPT, jint)

FOUNDATION_EXPORT void NetI2pRouterRouterThrottleImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterThrottleImpl *self, NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT NetI2pRouterRouterThrottleImpl *new_NetI2pRouterRouterThrottleImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterRouterThrottleImpl *create_NetI2pRouterRouterThrottleImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterRouterThrottleImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterRouterThrottleImpl")
