//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/MessageHistory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SecureFileOutputStream.h"

@class NetI2pRouterMessageHistory_ReinitializeJob;
@class NetI2pRouterMessageHistory_WriteJob;

@interface NetI2pRouterMessageHistory () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  id<JavaUtilQueue> _unwrittenEntries_;
  NSString *_historyFile_;
  NSString *_localIdent_;
  jboolean _doLog_;
  jboolean _doPause_;
  NetI2pRouterMessageHistory_ReinitializeJob *_reinitializeJob_;
  NetI2pRouterMessageHistory_WriteJob *_writeJob_;
  volatile_jboolean _firstPass_;
  JavaTextSimpleDateFormat *_fmt_;
}

- (void)updateSettings;

+ (NSString *)getNameWithNetI2pDataHash:(NetI2pDataHash *)router;

- (NSString *)getPrefix;

- (NSString *)getTimeWithLong:(jlong)when;

- (void)addEntryWithNSString:(NSString *)entry_;

- (void)flushEntries;

- (void)writeEntries;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _unwrittenEntries_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _historyFile_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _localIdent_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _reinitializeJob_, NetI2pRouterMessageHistory_ReinitializeJob *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _writeJob_, NetI2pRouterMessageHistory_WriteJob *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHistory, _fmt_, JavaTextSimpleDateFormat *)

inline IOSByteArray *NetI2pRouterMessageHistory_get_NL(void);
static IOSByteArray *NetI2pRouterMessageHistory_NL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterMessageHistory, NL, IOSByteArray *)

inline jint NetI2pRouterMessageHistory_get_FLUSH_SIZE(void);
#define NetI2pRouterMessageHistory_FLUSH_SIZE 1000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMessageHistory, FLUSH_SIZE, jint)

inline jlong NetI2pRouterMessageHistory_get_WRITE_DELAY(void);
#define NetI2pRouterMessageHistory_WRITE_DELAY 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMessageHistory, WRITE_DELAY, jlong)

__attribute__((unused)) static void NetI2pRouterMessageHistory_updateSettings(NetI2pRouterMessageHistory *self);

__attribute__((unused)) static NSString *NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(NetI2pDataHash *router);

__attribute__((unused)) static NSString *NetI2pRouterMessageHistory_getPrefix(NetI2pRouterMessageHistory *self);

__attribute__((unused)) static NSString *NetI2pRouterMessageHistory_getTimeWithLong_(NetI2pRouterMessageHistory *self, jlong when);

__attribute__((unused)) static void NetI2pRouterMessageHistory_addEntryWithNSString_(NetI2pRouterMessageHistory *self, NSString *entry_);

__attribute__((unused)) static void NetI2pRouterMessageHistory_flushEntries(NetI2pRouterMessageHistory *self);

__attribute__((unused)) static void NetI2pRouterMessageHistory_writeEntries(NetI2pRouterMessageHistory *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterMessageHistory__Annotations$0(void);

@interface NetI2pRouterMessageHistory_ReinitializeJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterMessageHistory *this$0_;
}

- (instancetype)initWithNetI2pRouterMessageHistory:(NetI2pRouterMessageHistory *)outer$;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterMessageHistory_ReinitializeJob)

__attribute__((unused)) static void NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory_ReinitializeJob *self, NetI2pRouterMessageHistory *outer$);

__attribute__((unused)) static NetI2pRouterMessageHistory_ReinitializeJob *new_NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterMessageHistory_ReinitializeJob *create_NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterMessageHistory_ReinitializeJob)

@interface NetI2pRouterMessageHistory_WriteJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterMessageHistory *this$0_;
}

- (instancetype)initWithNetI2pRouterMessageHistory:(NetI2pRouterMessageHistory *)outer$;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterMessageHistory_WriteJob)

__attribute__((unused)) static void NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory_WriteJob *self, NetI2pRouterMessageHistory *outer$);

__attribute__((unused)) static NetI2pRouterMessageHistory_WriteJob *new_NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterMessageHistory_WriteJob *create_NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterMessageHistory_WriteJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterMessageHistory)

NSString *NetI2pRouterMessageHistory_PROP_KEEP_MESSAGE_HISTORY = @"router.keepHistory";
NSString *NetI2pRouterMessageHistory_PROP_MESSAGE_HISTORY_FILENAME = @"router.historyFilename";
NSString *NetI2pRouterMessageHistory_DEFAULT_MESSAGE_HISTORY_FILENAME = @"messageHistory.txt";

@implementation NetI2pRouterMessageHistory

+ (NSString *)PROP_KEEP_MESSAGE_HISTORY {
  return NetI2pRouterMessageHistory_PROP_KEEP_MESSAGE_HISTORY;
}

+ (NSString *)PROP_MESSAGE_HISTORY_FILENAME {
  return NetI2pRouterMessageHistory_PROP_MESSAGE_HISTORY_FILENAME;
}

+ (NSString *)DEFAULT_MESSAGE_HISTORY_FILENAME {
  return NetI2pRouterMessageHistory_DEFAULT_MESSAGE_HISTORY_FILENAME;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterMessageHistory_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)shutdown {
  @synchronized(self) {
    if (_doLog_) NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$", NetI2pRouterMessageHistory_getPrefix(self), @"** Router shutdown"));
    _doPause_ = false;
    NetI2pRouterMessageHistory_flushEntries(self);
    _doLog_ = false;
  }
}

- (jboolean)getDoLog {
  return _doLog_;
}

- (void)setPauseFlushesWithBoolean:(jboolean)doPause {
  _doPause_ = doPause;
}

- (NSString *)getFilename {
  return _historyFile_;
}

- (void)updateSettings {
  NetI2pRouterMessageHistory_updateSettings(self);
}

- (void)initialize__WithBoolean:(jboolean)forceReinitialize {
  @synchronized(self) {
    if (!forceReinitialize) return;
    NetI2pRouterRouter *router = [((NetI2pRouterRouterContext *) nil_chk(_context_)) router];
    if (router == nil) {
      return;
    }
    if ([router getRouterInfo] == nil) {
      [((NetI2pRouterJobTiming *) nil_chk([((NetI2pRouterMessageHistory_ReinitializeJob *) nil_chk(_reinitializeJob_)) getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 15 * 1000];
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:_reinitializeJob_];
    }
    else {
      JreStrongAssign(&_localIdent_, NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_([_context_ routerHash]));
      NetI2pRouterMessageHistory_updateSettings(self);
      if (JreLoadVolatileBoolean(&_firstPass_)) {
        JavaIoFile *f = create_JavaIoFile_initWithNSString_(_historyFile_);
        if (![f isAbsolute]) f = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getLogDir], _historyFile_);
        [f delete__];
        [((NetI2pRouterJobTiming *) nil_chk([((NetI2pRouterMessageHistory_WriteJob *) nil_chk(_writeJob_)) getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterMessageHistory_WRITE_DELAY];
        [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:_writeJob_];
        JreAssignVolatileBoolean(&_firstPass_, false);
      }
      if (_doLog_) NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$", NetI2pRouterMessageHistory_getPrefix(self), @"** Router initialized (started up or changed identities)"));
    }
  }
}

- (void)tunnelJoinedWithNSString:(NSString *)state
      withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel {
  if (!_doLog_) return;
  if (tunnel == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"joining as ["])) appendWithNSString:state];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] to tunnel: "])) appendWithNSString:[tunnel description]];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelJoinedWithNSString:(NSString *)state
 withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)tunnel {
  if (!_doLog_) return;
  if (tunnel == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"joining as ["])) appendWithNSString:state];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] to tunnel: "])) appendWithNSString:[tunnel description]];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelDispatchedWithNSString:(NSString *)info {
  if (!_doLog_) return;
  if (info == nil) return;
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$$", NetI2pRouterMessageHistory_getPrefix(self), @"tunnel dispatched: ", info));
}

- (void)tunnelDispatchedWithLong:(jlong)messageId
                        withLong:(jlong)tunnelId
                    withNSString:(NSString *)type {
  if (!_doLog_) return;
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$J$J$$", NetI2pRouterMessageHistory_getPrefix(self), @"message ", messageId, @" on tunnel ", tunnelId, @" as ", type));
}

- (void)tunnelDispatchedWithLong:(jlong)messageId
                        withLong:(jlong)tunnelId
                        withLong:(jlong)toTunnel
              withNetI2pDataHash:(NetI2pDataHash *)toPeer
                    withNSString:(NSString *)type {
  if (!_doLog_) return;
  if (toPeer != nil) NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$J$J$J$$$$", NetI2pRouterMessageHistory_getPrefix(self), @"message ", messageId, @" on tunnel ", tunnelId, @" / ", toTunnel, @" to ", [toPeer toBase64], @" as ", type));
  else NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$J$J$J$$", NetI2pRouterMessageHistory_getPrefix(self), @"message ", messageId, @" on tunnel ", tunnelId, @" / ", toTunnel, @" as ", type));
}

- (void)tunnelDispatchedWithLong:(jlong)messageId
                        withLong:(jlong)innerMessageId
                        withLong:(jlong)tunnelId
                    withNSString:(NSString *)type {
  if (!_doLog_) return;
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$JCJ$J$$", NetI2pRouterMessageHistory_getPrefix(self), @"message ", messageId, '/', innerMessageId, @" on ", tunnelId, @" as ", type));
}

- (void)tunnelFailedWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnel {
  if (!_doLog_) return;
  if (tunnel == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"failing tunnel ["])) appendWithLong:[tunnel getTunnelId]])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelValidWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel
                                     withLong:(jlong)timeToTest {
  if (!_doLog_) return;
  if (tunnel == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"tunnel "])) appendWithId:tunnel])) appendWithNSString:@" tested ok after "])) appendWithLong:timeToTest])) appendWithNSString:@"ms"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelRejectedWithNetI2pDataHash:(NetI2pDataHash *)peer
                  withNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnel
                      withNetI2pDataHash:(NetI2pDataHash *)replyThrough
                            withNSString:(NSString *)reason {
  if (!_doLog_) return;
  if ((tunnel == nil) || (peer == nil)) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"tunnel ["])) appendWithLong:[((NetI2pDataTunnelId *) nil_chk(tunnel)) getTunnelId]])) appendWithNSString:@"] was rejected by ["];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(peer)])) appendWithNSString:@"] for ["])) appendWithNSString:reason])) appendWithNSString:@"]"];
  if (replyThrough != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with their reply intended to come through ["])) appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(replyThrough)])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelParticipantRejectedWithNetI2pDataHash:(NetI2pDataHash *)peer
                                       withNSString:(NSString *)msg {
  if (!_doLog_) return;
  if (peer == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [buf appendWithNSString:@"tunnel participation rejected by ["];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(peer)])) appendWithNSString:@"]: "])) appendWithNSString:msg];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)tunnelRequestTimedOutWithNetI2pDataHash:(NetI2pDataHash *)peer
                         withNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnel {
  if (!_doLog_) return;
  if ((tunnel == nil) || (peer == nil)) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"tunnel ["])) appendWithLong:[((NetI2pDataTunnelId *) nil_chk(tunnel)) getTunnelId]])) appendWithNSString:@"] timed out on ["];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(peer)])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedTunnelMessageWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_
                                          withLong:(jlong)msgId
                                  withJavaUtilDate:(JavaUtilDate *)expiration
                                withNetI2pDataHash:(NetI2pDataHash *)from {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"dropped message "])) appendWithLong:msgId])) appendWithNSString:@" for unknown tunnel ["])) appendWithLong:[((NetI2pDataTunnelId *) nil_chk(id_)) getTunnelId]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] from ["])) appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(from)])) appendWithNSString:@"]"])) appendWithNSString:@" expiring on "];
  [buf appendWithNSString:NetI2pRouterMessageHistory_getTimeWithLong_(self, [((JavaUtilDate *) nil_chk(expiration)) getTime])];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedOtherMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                                      withNetI2pDataHash:(NetI2pDataHash *)from {
  if (!_doLog_) return;
  if (message == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"dropped ["])) appendWithNSString:[[message java_getClass] getName]])) appendWithNSString:@"] "])) appendWithLong:[message getUniqueId]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" ["])) appendWithNSString:[message description]])) appendWithNSString:@"] from ["];
  if (from != nil) [buf appendWithNSString:[from toBase64]];
  else [buf appendWithNSString:@"unknown"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] expiring in "])) appendWithLong:[message getMessageExpiration] - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]])) appendWithNSString:@"ms"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedInboundMessageWithLong:(jlong)messageId
                   withNetI2pDataHash:(NetI2pDataHash *)from
                         withNSString:(NSString *)info {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"dropped inbound message "])) appendWithLong:messageId];
  [buf appendWithNSString:@" from "];
  if (from != nil) [buf appendWithNSString:[from toBase64]];
  else [buf appendWithNSString:@"unknown"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@": "])) appendWithNSString:info];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)replyTimedOutWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)sentMessage {
  if (!_doLog_) return;
  if (sentMessage == nil) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"timed out waiting for a reply to ["])) appendWithNSString:[sentMessage getMessageType]];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] ["])) appendWithLong:[sentMessage getMessageId]])) appendWithNSString:@"] expiring on ["];
  [buf appendWithNSString:NetI2pRouterMessageHistory_getTimeWithLong_(self, [((id<NetI2pRouterMessageSelector>) nil_chk([sentMessage getReplySelector])) getExpiration])];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"] "])) appendWithNSString:[((id<NetI2pRouterMessageSelector>) nil_chk([sentMessage getReplySelector])) description]];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)messageProcessingErrorWithLong:(jlong)messageId
                          withNSString:(NSString *)messageType
                          withNSString:(NSString *)error {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Error processing ["])) appendWithNSString:messageType])) appendWithNSString:@"] ["])) appendWithLong:messageId])) appendWithNSString:@"] failed with ["])) appendWithNSString:error])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)banlistWithNetI2pDataHash:(NetI2pDataHash *)peer
                     withNSString:(NSString *)reason {
  if (!_doLog_) return;
  if (peer == nil) return;
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$$$", @"Banlist ", [peer toBase64], @": ", reason));
}

- (void)unbanlistWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if (!_doLog_) return;
  if (peer == nil) return;
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, JreStrcat("$$", @"Unbanlist ", [peer toBase64]));
}

- (void)sendMessageWithNSString:(NSString *)messageType
                       withLong:(jlong)messageId
                       withLong:(jlong)expiration
             withNetI2pDataHash:(NetI2pDataHash *)peer
                    withBoolean:(jboolean)sentOk
                   withNSString:(NSString *)info {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"send ["])) appendWithNSString:messageType])) appendWithNSString:@"] message ["])) appendWithLong:messageId])) appendWithNSString:@"] "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"to ["])) appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(peer)])) appendWithNSString:@"] "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"expiring on ["])) appendWithNSString:NetI2pRouterMessageHistory_getTimeWithLong_(self, expiration)])) appendWithNSString:@"] "];
  if (sentOk) [buf appendWithNSString:@"successfully"];
  else [buf appendWithNSString:@"failed"];
  if (info != nil) [buf appendWithNSString:info];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)receiveMessageWithNSString:(NSString *)messageType
                          withLong:(jlong)messageId
                          withLong:(jlong)expiration
                withNetI2pDataHash:(NetI2pDataHash *)from
                       withBoolean:(jboolean)isValid {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"receive ["])) appendWithNSString:messageType])) appendWithNSString:@"] with id ["])) appendWithLong:messageId])) appendWithNSString:@"] "];
  if (from != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"from ["])) appendWithNSString:NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(from)])) appendWithNSString:@"] "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"expiring on ["])) appendWithNSString:NetI2pRouterMessageHistory_getTimeWithLong_(self, expiration)])) appendWithNSString:@"] valid? "])) appendWithBoolean:isValid];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)receiveMessageWithNSString:(NSString *)messageType
                          withLong:(jlong)messageId
                          withLong:(jlong)expiration
                       withBoolean:(jboolean)isValid {
  [self receiveMessageWithNSString:messageType withLong:messageId withLong:expiration withNetI2pDataHash:nil withBoolean:isValid];
}

- (void)wrapWithNSString:(NSString *)bodyMessageType
                withLong:(jlong)bodyMessageId
            withNSString:(NSString *)containerMessageType
                withLong:(jlong)containerMessageId {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Wrap message ["])) appendWithNSString:bodyMessageType])) appendWithNSString:@"] id ["])) appendWithLong:bodyMessageId])) appendWithNSString:@"] "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"in ["])) appendWithNSString:containerMessageType])) appendWithNSString:@"] id ["])) appendWithLong:containerMessageId])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)receivePayloadMessageWithLong:(jlong)messageId {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Receive payload message ["])) appendWithLong:messageId])) appendWithNSString:@"]"];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)sendPayloadMessageWithLong:(jlong)messageId
                       withBoolean:(jboolean)successfullySent
                          withLong:(jlong)timeToSend {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Send payload message in ["])) appendWithLong:messageId])) appendWithNSString:@"] in ["])) appendWithLong:timeToSend])) appendWithNSString:@"] successfully? "])) appendWithBoolean:successfullySent];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)receiveTunnelFragmentWithLong:(jlong)messageId
                              withInt:(jint)fragmentId
                               withId:(id)status {
  if (!_doLog_) return;
  if (messageId == -1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"why are you -1?");
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Receive fragment "])) appendWithInt:fragmentId])) appendWithNSString:@" in "])) appendWithLong:messageId];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" status: "])) appendWithNSString:[nil_chk(status) description]];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)receiveTunnelFragmentCompleteWithLong:(jlong)messageId {
  if (!_doLog_) return;
  if (messageId == -1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"why are you -1?");
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Receive fragmented message completely: "])) appendWithLong:messageId];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedFragmentedMessageWithLong:(jlong)messageId
                            withNSString:(NSString *)status {
  if (!_doLog_) return;
  if (messageId == -1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"why are you -1?");
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Fragmented message dropped: "])) appendWithLong:messageId];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" "])) appendWithNSString:status];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)fragmentMessageWithLong:(jlong)messageId
                        withInt:(jint)numFragments
                        withInt:(jint)totalLength
               withJavaUtilList:(id<JavaUtilList>)messageIds
                   withNSString:(NSString *)msg {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Break message "])) appendWithLong:messageId])) appendWithNSString:@" into fragments: "])) appendWithInt:numFragments];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" total size "])) appendWithInt:totalLength];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" contained in "])) appendWithId:messageIds];
  if (msg != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@": "])) appendWithNSString:msg];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)fragmentMessageWithLong:(jlong)messageId
                        withInt:(jint)numFragments
                        withInt:(jint)totalLength
               withJavaUtilList:(id<JavaUtilList>)messageIds
                         withId:(id)tunnel
                   withNSString:(NSString *)msg {
  if (!_doLog_) return;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Break message "])) appendWithLong:messageId])) appendWithNSString:@" into fragments: "])) appendWithInt:numFragments];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" total size "])) appendWithInt:totalLength];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" contained in "])) appendWithId:messageIds];
  if (tunnel != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" on "])) appendWithNSString:[tunnel description]];
  if (msg != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@": "])) appendWithNSString:msg];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedTunnelDataMessageUnknownWithLong:(jlong)msgId
                                       withLong:(jlong)tunnelId {
  if (!_doLog_) return;
  if (msgId == -1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"why are you -1?");
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Dropped data message "])) appendWithLong:msgId])) appendWithNSString:@" for unknown tunnel "])) appendWithLong:tunnelId];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

- (void)droppedTunnelGatewayMessageUnknownWithLong:(jlong)msgId
                                          withLong:(jlong)tunnelId {
  if (!_doLog_) return;
  if (msgId == -1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"why are you -1?");
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getPrefix(self)];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Dropped gateway message "])) appendWithLong:msgId])) appendWithNSString:@" for unknown tunnel "])) appendWithLong:tunnelId];
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, [buf description]);
}

+ (NSString *)getNameWithNetI2pDataHash:(NetI2pDataHash *)router {
  return NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(router);
}

- (NSString *)getPrefix {
  return NetI2pRouterMessageHistory_getPrefix(self);
}

- (NSString *)getTimeWithLong:(jlong)when {
  return NetI2pRouterMessageHistory_getTimeWithLong_(self, when);
}

- (void)addEntryWithNSString:(NSString *)entry_ {
  NetI2pRouterMessageHistory_addEntryWithNSString_(self, entry_);
}

- (void)flushEntries {
  NetI2pRouterMessageHistory_flushEntries(self);
}

- (void)writeEntries {
  NetI2pRouterMessageHistory_writeEntries(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_unwrittenEntries_);
  RELEASE_(_historyFile_);
  RELEASE_(_localIdent_);
  RELEASE_(_reinitializeJob_);
  RELEASE_(_writeJob_);
  RELEASE_(_fmt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, 3, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x1, 52, 55, -1, 56, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 60, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, 61, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(getDoLog);
  methods[3].selector = @selector(setPauseFlushesWithBoolean:);
  methods[4].selector = @selector(getFilename);
  methods[5].selector = @selector(updateSettings);
  methods[6].selector = @selector(initialize__WithBoolean:);
  methods[7].selector = @selector(tunnelJoinedWithNSString:withNetI2pRouterTunnelInfo:);
  methods[8].selector = @selector(tunnelJoinedWithNSString:withNetI2pRouterTunnelHopConfig:);
  methods[9].selector = @selector(tunnelDispatchedWithNSString:);
  methods[10].selector = @selector(tunnelDispatchedWithLong:withLong:withNSString:);
  methods[11].selector = @selector(tunnelDispatchedWithLong:withLong:withLong:withNetI2pDataHash:withNSString:);
  methods[12].selector = @selector(tunnelDispatchedWithLong:withLong:withLong:withNSString:);
  methods[13].selector = @selector(tunnelFailedWithNetI2pDataTunnelId:);
  methods[14].selector = @selector(tunnelValidWithNetI2pRouterTunnelInfo:withLong:);
  methods[15].selector = @selector(tunnelRejectedWithNetI2pDataHash:withNetI2pDataTunnelId:withNetI2pDataHash:withNSString:);
  methods[16].selector = @selector(tunnelParticipantRejectedWithNetI2pDataHash:withNSString:);
  methods[17].selector = @selector(tunnelRequestTimedOutWithNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[18].selector = @selector(droppedTunnelMessageWithNetI2pDataTunnelId:withLong:withJavaUtilDate:withNetI2pDataHash:);
  methods[19].selector = @selector(droppedOtherMessageWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:);
  methods[20].selector = @selector(droppedInboundMessageWithLong:withNetI2pDataHash:withNSString:);
  methods[21].selector = @selector(replyTimedOutWithNetI2pRouterOutNetMessage:);
  methods[22].selector = @selector(messageProcessingErrorWithLong:withNSString:withNSString:);
  methods[23].selector = @selector(banlistWithNetI2pDataHash:withNSString:);
  methods[24].selector = @selector(unbanlistWithNetI2pDataHash:);
  methods[25].selector = @selector(sendMessageWithNSString:withLong:withLong:withNetI2pDataHash:withBoolean:withNSString:);
  methods[26].selector = @selector(receiveMessageWithNSString:withLong:withLong:withNetI2pDataHash:withBoolean:);
  methods[27].selector = @selector(receiveMessageWithNSString:withLong:withLong:withBoolean:);
  methods[28].selector = @selector(wrapWithNSString:withLong:withNSString:withLong:);
  methods[29].selector = @selector(receivePayloadMessageWithLong:);
  methods[30].selector = @selector(sendPayloadMessageWithLong:withBoolean:withLong:);
  methods[31].selector = @selector(receiveTunnelFragmentWithLong:withInt:withId:);
  methods[32].selector = @selector(receiveTunnelFragmentCompleteWithLong:);
  methods[33].selector = @selector(droppedFragmentedMessageWithLong:withNSString:);
  methods[34].selector = @selector(fragmentMessageWithLong:withInt:withInt:withJavaUtilList:withNSString:);
  methods[35].selector = @selector(fragmentMessageWithLong:withInt:withInt:withJavaUtilList:withId:withNSString:);
  methods[36].selector = @selector(droppedTunnelDataMessageUnknownWithLong:withLong:);
  methods[37].selector = @selector(droppedTunnelGatewayMessageUnknownWithLong:withLong:);
  methods[38].selector = @selector(getNameWithNetI2pDataHash:);
  methods[39].selector = @selector(getPrefix);
  methods[40].selector = @selector(getTimeWithLong:);
  methods[41].selector = @selector(addEntryWithNSString:);
  methods[42].selector = @selector(flushEntries);
  methods[43].selector = @selector(writeEntries);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_unwrittenEntries_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 63, -1 },
    { "_historyFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_localIdent_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_doLog_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_doPause_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reinitializeJob_", "LNetI2pRouterMessageHistory_ReinitializeJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_writeJob_", "LNetI2pRouterMessageHistory_WriteJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_firstPass_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "NL", "[B", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "FLUSH_SIZE", "I", .constantValue.asInt = NetI2pRouterMessageHistory_FLUSH_SIZE, 0x1a, -1, -1, -1, -1 },
    { "PROP_KEEP_MESSAGE_HISTORY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "PROP_MESSAGE_HISTORY_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "DEFAULT_MESSAGE_HISTORY_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "_fmt_", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "WRITE_DELAY", "J", .constantValue.asLong = NetI2pRouterMessageHistory_WRITE_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setPauseFlushes", "Z", (void *)&NetI2pRouterMessageHistory__Annotations$0, "initialize", "tunnelJoined", "LNSString;LNetI2pRouterTunnelInfo;", "LNSString;LNetI2pRouterTunnelHopConfig;", "tunnelDispatched", "LNSString;", "JJLNSString;", "JJJLNetI2pDataHash;LNSString;", "JJJLNSString;", "tunnelFailed", "LNetI2pDataTunnelId;", "tunnelValid", "LNetI2pRouterTunnelInfo;J", "tunnelRejected", "LNetI2pDataHash;LNetI2pDataTunnelId;LNetI2pDataHash;LNSString;", "tunnelParticipantRejected", "LNetI2pDataHash;LNSString;", "tunnelRequestTimedOut", "LNetI2pDataHash;LNetI2pDataTunnelId;", "droppedTunnelMessage", "LNetI2pDataTunnelId;JLJavaUtilDate;LNetI2pDataHash;", "droppedOtherMessage", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;", "droppedInboundMessage", "JLNetI2pDataHash;LNSString;", "replyTimedOut", "LNetI2pRouterOutNetMessage;", "messageProcessingError", "JLNSString;LNSString;", "banlist", "unbanlist", "LNetI2pDataHash;", "sendMessage", "LNSString;JJLNetI2pDataHash;ZLNSString;", "receiveMessage", "LNSString;JJLNetI2pDataHash;Z", "LNSString;JJZ", "wrap", "LNSString;JLNSString;J", "receivePayloadMessage", "J", "sendPayloadMessage", "JZJ", "receiveTunnelFragment", "JILNSObject;", "receiveTunnelFragmentComplete", "droppedFragmentedMessage", "JLNSString;", "fragmentMessage", "JIILJavaUtilList;LNSString;", "(JIILjava/util/List<Ljava/lang/Long;>;Ljava/lang/String;)V", "JIILJavaUtilList;LNSObject;LNSString;", "(JIILjava/util/List<Ljava/lang/Long;>;Ljava/lang/Object;Ljava/lang/String;)V", "droppedTunnelDataMessageUnknown", "JJ", "droppedTunnelGatewayMessageUnknown", "getName", "getTime", "addEntry", "Ljava/util/Queue<Ljava/lang/String;>;", &NetI2pRouterMessageHistory_NL, &NetI2pRouterMessageHistory_PROP_KEEP_MESSAGE_HISTORY, &NetI2pRouterMessageHistory_PROP_MESSAGE_HISTORY_FILENAME, &NetI2pRouterMessageHistory_DEFAULT_MESSAGE_HISTORY_FILENAME, "LNetI2pRouterMessageHistory_ReinitializeJob;LNetI2pRouterMessageHistory_WriteJob;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageHistory = { "MessageHistory", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 44, 17, -1, 68, -1, -1, -1 };
  return &_NetI2pRouterMessageHistory;
}

+ (void)initialize {
  if (self == [NetI2pRouterMessageHistory class]) {
    JreStrongAssign(&NetI2pRouterMessageHistory_NL, NetI2pDataDataHelper_getUTF8WithNSString_(JavaLangSystem_getPropertyWithNSString_(@"line.separator")));
    J2OBJC_SET_INITIALIZED(NetI2pRouterMessageHistory)
  }
}

@end

void NetI2pRouterMessageHistory_initWithNetI2pRouterRouterContext_(NetI2pRouterMessageHistory *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssignAndConsume(&self->_fmt_, new_JavaTextSimpleDateFormat_initWithNSString_(@"yy/MM/dd.HH:mm:ss.SSS"));
  [self->_fmt_ setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT")];
  JreStrongAssignAndConsume(&self->_unwrittenEntries_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  JreStrongAssignAndConsume(&self->_reinitializeJob_, new_NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(self));
  JreStrongAssignAndConsume(&self->_writeJob_, new_NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(self));
  JreAssignVolatileBoolean(&self->_firstPass_, true);
  [self initialize__WithBoolean:true];
}

NetI2pRouterMessageHistory *new_NetI2pRouterMessageHistory_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageHistory, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterMessageHistory *create_NetI2pRouterMessageHistory_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageHistory, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterMessageHistory_updateSettings(NetI2pRouterMessageHistory *self) {
  self->_doLog_ = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterMessageHistory_PROP_KEEP_MESSAGE_HISTORY];
  JreStrongAssign(&self->_historyFile_, [self->_context_ getPropertyWithNSString:NetI2pRouterMessageHistory_PROP_MESSAGE_HISTORY_FILENAME withNSString:NetI2pRouterMessageHistory_DEFAULT_MESSAGE_HISTORY_FILENAME]);
}

NSString *NetI2pRouterMessageHistory_getNameWithNetI2pDataHash_(NetI2pDataHash *router) {
  NetI2pRouterMessageHistory_initialize();
  if (router == nil) return @"unknown";
  NSString *str = [router toBase64];
  if ((str == nil) || ([((NSString *) nil_chk(str)) java_length] < 6)) return @"invalid";
  return [((NSString *) nil_chk(str)) java_substring:0 endIndex:6];
}

NSString *NetI2pRouterMessageHistory_getPrefix(NetI2pRouterMessageHistory *self) {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(48);
  [buf appendWithNSString:NetI2pRouterMessageHistory_getTimeWithLong_(self, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now])];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithNSString:self->_localIdent_])) appendWithNSString:@": "];
  return [buf description];
}

NSString *NetI2pRouterMessageHistory_getTimeWithLong_(NetI2pRouterMessageHistory *self, jlong when) {
  @synchronized(self->_fmt_) {
    return JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(self->_fmt_)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(when)]);
  }
}

void NetI2pRouterMessageHistory_addEntryWithNSString_(NetI2pRouterMessageHistory *self, NSString *entry_) {
  if (entry_ == nil) return;
  [((id<JavaUtilQueue>) nil_chk(self->_unwrittenEntries_)) offerWithId:entry_];
  jint sz = [self->_unwrittenEntries_ size];
  if (sz > NetI2pRouterMessageHistory_FLUSH_SIZE) NetI2pRouterMessageHistory_flushEntries(self);
}

void NetI2pRouterMessageHistory_flushEntries(NetI2pRouterMessageHistory *self) {
  if (!self->_doLog_) [((id<JavaUtilQueue>) nil_chk(self->_unwrittenEntries_)) clear];
  else if ((![((id<JavaUtilQueue>) nil_chk(self->_unwrittenEntries_)) isEmpty]) && !self->_doPause_) NetI2pRouterMessageHistory_writeEntries(self);
}

void NetI2pRouterMessageHistory_writeEntries(NetI2pRouterMessageHistory *self) {
  @synchronized(self) {
    JavaIoFile *f = create_JavaIoFile_initWithNSString_(self->_historyFile_);
    if (![f isAbsolute]) f = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getLogDir], self->_historyFile_);
    JavaIoFileOutputStream *fos = nil;
    @try {
      fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_withBoolean_(f, true);
      NSString *entry_;
      while ((entry_ = [((id<JavaUtilQueue>) nil_chk(self->_unwrittenEntries_)) poll]) != nil) {
        [fos writeWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(entry_)];
        [fos writeWithByteArray:NetI2pRouterMessageHistory_NL];
      }
    }
    @catch (JavaIoIOException *ioe) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error writing trace entries" withJavaLangThrowable:ioe];
    }
    @finally {
      if (fos != nil) @try {
        [fos close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
}

IOSObjectArray *NetI2pRouterMessageHistory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageHistory)

@implementation NetI2pRouterMessageHistory_ReinitializeJob

- (instancetype)initWithNetI2pRouterMessageHistory:(NetI2pRouterMessageHistory *)outer$ {
  NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(self, outer$);
  return self;
}

- (void)runJob {
  [this$0_ initialize__WithBoolean:true];
}

- (NSString *)getName {
  return @"Reinitialize message history";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterMessageHistory:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterMessageHistory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterMessageHistory;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageHistory_ReinitializeJob = { "ReinitializeJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x12, 3, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageHistory_ReinitializeJob;
}

@end

void NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory_ReinitializeJob *self, NetI2pRouterMessageHistory *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
}

NetI2pRouterMessageHistory_ReinitializeJob *new_NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageHistory_ReinitializeJob, initWithNetI2pRouterMessageHistory_, outer$)
}

NetI2pRouterMessageHistory_ReinitializeJob *create_NetI2pRouterMessageHistory_ReinitializeJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageHistory_ReinitializeJob, initWithNetI2pRouterMessageHistory_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageHistory_ReinitializeJob)

@implementation NetI2pRouterMessageHistory_WriteJob

- (instancetype)initWithNetI2pRouterMessageHistory:(NetI2pRouterMessageHistory *)outer$ {
  NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(self, outer$);
  return self;
}

- (NSString *)getName {
  return this$0_->_doLog_ ? @"Message debug log" : @"Message debug log (disabled)";
}

- (void)runJob {
  NetI2pRouterMessageHistory_flushEntries(this$0_);
  NetI2pRouterMessageHistory_updateSettings(this$0_);
  [self requeueWithLong:NetI2pRouterMessageHistory_WRITE_DELAY];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterMessageHistory:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterMessageHistory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterMessageHistory;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageHistory_WriteJob = { "WriteJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 3, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageHistory_WriteJob;
}

@end

void NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory_WriteJob *self, NetI2pRouterMessageHistory *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
}

NetI2pRouterMessageHistory_WriteJob *new_NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageHistory_WriteJob, initWithNetI2pRouterMessageHistory_, outer$)
}

NetI2pRouterMessageHistory_WriteJob *create_NetI2pRouterMessageHistory_WriteJob_initWithNetI2pRouterMessageHistory_(NetI2pRouterMessageHistory *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageHistory_WriteJob, initWithNetI2pRouterMessageHistory_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageHistory_WriteJob)
