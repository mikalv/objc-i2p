//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/crypto/TransientSessionKeyManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/crypto/TagSetHandle.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/router/crypto/TransientSessionKeyManager.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@class NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;
@class NetI2pRouterCryptoTransientSessionKeyManager_TagSet;

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterCryptoTransientSessionKeyManager () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _outboundSessions_;
  id<JavaUtilMap> _inboundTagSets_;
  volatile_jboolean _alive_;
  JavaUtilConcurrentAtomicAtomicInteger *_rcvTagSetID_;
  JavaUtilConcurrentAtomicAtomicInteger *_sentTagSetID_;
  jint _tagsToSend_;
  jint _lowThreshold_;
}

- (id<JavaUtilSet>)getInboundTagSets;

- (id<JavaUtilSet>)getOutboundSessions;

- (NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)createAndReturnSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)clearExcessWithInt:(jint)overage;

- (NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)getSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (void)addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession:(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)sess;

- (void)removeSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (jint)aggressiveExpire;

- (id<JavaUtilMap>)getInboundTagSetsBySessionKey;

+ (NSString *)toStringWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _outboundSessions_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _inboundTagSets_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _rcvTagSetID_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _sentTagSetID_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jlong NetI2pRouterCryptoTransientSessionKeyManager_get_SESSION_TAG_DURATION_MS(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS 720000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, SESSION_TAG_DURATION_MS, jlong)

inline jlong NetI2pRouterCryptoTransientSessionKeyManager_get_SESSION_LIFETIME_MAX_MS(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS 900000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, SESSION_LIFETIME_MAX_MS, jlong)

inline jlong NetI2pRouterCryptoTransientSessionKeyManager_get_SESSION_TAG_EXPIRATION_WINDOW(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_EXPIRATION_WINDOW 90000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, SESSION_TAG_EXPIRATION_WINDOW, jlong)

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSets(NetI2pRouterCryptoTransientSessionKeyManager *self);

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterCryptoTransientSessionKeyManager_getOutboundSessions(NetI2pRouterCryptoTransientSessionKeyManager *self);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key);

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_clearExcessWithInt_(NetI2pRouterCryptoTransientSessionKeyManager *self, jint overage);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target);

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess);

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_removeSessionWithNetI2pDataPublicKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target);

__attribute__((unused)) static jint NetI2pRouterCryptoTransientSessionKeyManager_aggressiveExpire(NetI2pRouterCryptoTransientSessionKeyManager *self);

__attribute__((unused)) static id<JavaUtilMap> NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSetsBySessionKey(NetI2pRouterCryptoTransientSessionKeyManager *self);

__attribute__((unused)) static NSString *NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(NetI2pDataPublicKey *target);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterCryptoTransientSessionKeyManager__Annotations$0(void);

@interface NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterCryptoTransientSessionKeyManager *this$0_;
}

- (instancetype)initWithNetI2pRouterCryptoTransientSessionKeyManager:(NetI2pRouterCryptoTransientSessionKeyManager *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent)

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *self, NetI2pRouterCryptoTransientSessionKeyManager *outer$);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *new_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *create_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent)

@interface NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)l
               withId:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator)

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *self);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *new_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *create_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator)

@interface NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession : NSObject {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pDataPublicKey *_target_;
  NetI2pDataSessionKey *_currentKey_;
  jlong _established_;
  jlong _lastUsed_;
  id<JavaUtilSet> _unackedTagSets_;
  id<JavaUtilList> _tagSets_;
  volatile_jboolean _acked_;
  jint _consecutiveFailures_;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                          withNetI2pUtilLog:(NetI2pUtilLog *)log
                    withNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                   withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (id<JavaUtilList>)getTagSets;

- (void)ackTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set;

- (void)failTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set;

- (NetI2pDataPublicKey *)getTarget;

- (NetI2pDataSessionKey *)getCurrentKey;

- (void)setCurrentKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (jlong)getEstablishedDate;

- (jlong)getLastUsedDate;

- (jint)expireTags;

- (NetI2pDataSessionTag *)consumeNext;

- (jint)availableTags;

- (jlong)getLastExpirationDate;

- (void)addTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set;

- (jboolean)getAckReceived;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession)

J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _target_, NetI2pDataPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _currentKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _unackedTagSets_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, _tagSets_, id<JavaUtilList>)

inline jint NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_get_MAX_FAILS(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_MAX_FAILS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, MAX_FAILS, jint)

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *self, NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *new_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *create_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession)

@interface NetI2pRouterCryptoTransientSessionKeyManager_TagSet : NSObject < NetI2pCryptoTagSetHandle > {
 @public
  id<JavaUtilSet> _sessionTags_;
  NetI2pDataSessionKey *_key_;
  jlong _date_;
  jint _id_;
  jint _origSize_;
  jboolean _acked_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)tags
           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                           withLong:(jlong)date
                            withInt:(jint)id_;

- (jlong)getDate;

- (jint)getOriginalSize;

- (id<JavaUtilSet>)getTags;

- (NetI2pDataSessionKey *)getAssociatedKey;

- (void)consumeWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag;

- (NetI2pDataSessionTag *)consumeNext;

- (void)setAcked;

- (jboolean)getAcked;

- (jint)getID;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterCryptoTransientSessionKeyManager_TagSet)

J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_TagSet, _sessionTags_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager_TagSet, _key_, NetI2pDataSessionKey *)

__attribute__((unused)) static void NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *self, id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_);

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_TagSet *new_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterCryptoTransientSessionKeyManager_TagSet *create_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoTransientSessionKeyManager_TagSet)

@implementation NetI2pRouterCryptoTransientSessionKeyManager

+ (jint)MAX_INBOUND_SESSION_TAGS {
  return NetI2pRouterCryptoTransientSessionKeyManager_MAX_INBOUND_SESSION_TAGS;
}

+ (jint)DEFAULT_TAGS {
  return NetI2pRouterCryptoTransientSessionKeyManager_DEFAULT_TAGS;
}

+ (jint)LOW_THRESHOLD {
  return NetI2pRouterCryptoTransientSessionKeyManager_LOW_THRESHOLD;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)tagsToSend
                                    withInt:(jint)lowThreshold {
  NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(self, context, tagsToSend, lowThreshold);
  return self;
}

- (void)shutdown {
  JreAssignVolatileBoolean(&_alive_, false);
  @synchronized(_inboundTagSets_) {
    [((id<JavaUtilMap>) nil_chk(_inboundTagSets_)) clear];
  }
  @synchronized(_outboundSessions_) {
    [((id<JavaUtilMap>) nil_chk(_outboundSessions_)) clear];
  }
}

- (id<JavaUtilSet>)getInboundTagSets {
  return NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSets(self);
}

- (id<JavaUtilSet>)getOutboundSessions {
  return NetI2pRouterCryptoTransientSessionKeyManager_getOutboundSessions(self);
}

- (NetI2pDataSessionKey *)getCurrentKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) return nil;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  if ([sess getLastUsedDate] < now - NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$J$$", @"Expiring old session key established on ", create_JavaUtilDate_initWithLong_([sess getEstablishedDate]), @" but not used for ", (now - [sess getLastUsedDate]), @"ms with target ", NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target))];
    return nil;
  }
  return [sess getCurrentKey];
}

- (NetI2pDataSessionKey *)getCurrentOrNewKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  @synchronized(_outboundSessions_) {
    NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = [((id<JavaUtilMap>) nil_chk(_outboundSessions_)) getWithId:target];
    if (sess != nil) {
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
      if ([sess getLastUsedDate] < now - NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS) sess = nil;
    }
    if (sess == nil) {
      NetI2pDataSessionKey *key = [((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) keyGenerator])) generateSessionKey];
      NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(self, target, key);
      return JreRetainedLocalValue(key);
    }
    return JreRetainedLocalValue([sess getCurrentKey]);
  }
}

- (void)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                    withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(self, target, key);
}

- (NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)createAndReturnSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                                                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  return NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(self, target, key);
}

- (NetI2pDataSessionTag *)consumeNextAvailableTagWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"No session for ", NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target))];
    return nil;
  }
  if ([((NetI2pDataSessionKey *) nil_chk([sess getCurrentKey])) isEqual:key]) {
    NetI2pDataSessionTag *nxt = [sess consumeNext];
    return nxt;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Key does not match existing key, no tag"];
  return nil;
}

- (jint)getTagsToSend {
  return _tagsToSend_;
}

- (jint)getLowThreshold {
  return _lowThreshold_;
}

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                          withInt:(jint)lowThreshold {
  return [self getAvailableTagsWithNetI2pDataPublicKey:target withNetI2pDataSessionKey:key] < lowThreshold || [self getAvailableTimeLeftWithNetI2pDataPublicKey:target withNetI2pDataSessionKey:key] < NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_EXPIRATION_WINDOW;
}

- (jint)getAvailableTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    return 0;
  }
  if ([((NetI2pDataSessionKey *) nil_chk([sess getCurrentKey])) isEqual:key]) {
    return [sess availableTags];
  }
  return 0;
}

- (jlong)getAvailableTimeLeftWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    return 0;
  }
  if ([((NetI2pDataSessionKey *) nil_chk([sess getCurrentKey])) isEqual:key]) {
    jlong end = [sess getLastExpirationDate];
    if (end <= 0) return 0;
    else return end - [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  }
  return 0;
}

- (id<NetI2pCryptoTagSetHandle>)tagsDeliveredWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                     withJavaUtilSet:(id<JavaUtilSet>)sessionTags {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"No session for delivered TagSet to target: ", NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target))];
    sess = NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(self, target, key);
  }
  else {
    [sess setCurrentKeyWithNetI2pDataSessionKey:key];
  }
  NetI2pRouterCryptoTransientSessionKeyManager_TagSet *set = create_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(sessionTags, key, [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now], [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_sentTagSetID_)) incrementAndGet]);
  [((NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *) nil_chk(sess)) addTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:set];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$$", @"Tags delivered: ", set, @" target: ", NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target))];
  return set;
}

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  NetI2pRouterCryptoTransientSessionKeyManager_removeSessionWithNetI2pDataPublicKey_(self, target);
}

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
               withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
           withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"No session for failed TagSet: ", ts)];
    return;
  }
  if (![((NetI2pDataSessionKey *) nil_chk(key)) isEqual:[sess getCurrentKey]]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Wrong session key (wanted ", [sess getCurrentKey], @") for failed TagSet: ", ts)];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"TagSet failed: ", ts)];
  [sess failTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) cast_chk(ts, [NetI2pRouterCryptoTransientSessionKeyManager_TagSet class])];
}

- (void)tagsAckedWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
            withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
  if (sess == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"No session for acked TagSet: ", ts)];
    return;
  }
  if (![((NetI2pDataSessionKey *) nil_chk(key)) isEqual:[sess getCurrentKey]]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Wrong session key (wanted ", [sess getCurrentKey], @") for acked TagSet: ", ts)];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"TagSet acked: ", ts)];
  [sess ackTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) cast_chk(ts, [NetI2pRouterCryptoTransientSessionKeyManager_TagSet class])];
}

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags {
  [self tagsReceivedWithNetI2pDataSessionKey:key withJavaUtilSet:sessionTags withLong:NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS];
}

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags
                                    withLong:(jlong)expire {
  NetI2pRouterCryptoTransientSessionKeyManager_TagSet *tagSet = create_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(sessionTags, key, [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] + expire, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_rcvTagSetID_)) incrementAndGet]);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$@", @"Received ", tagSet)];
  }
  NetI2pRouterCryptoTransientSessionKeyManager_TagSet *old = nil;
  NetI2pDataSessionTag *dupTag = nil;
  @synchronized(_inboundTagSets_) {
    for (NetI2pDataSessionTag * __strong tag in nil_chk(sessionTags)) {
      old = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_inboundTagSets_)) putWithId:tag withId:tagSet]);
      if (old != nil) {
        if (![((NetI2pDataSessionKey *) nil_chk([old getAssociatedKey])) isEqual:[tagSet getAssociatedKey]]) {
          [_inboundTagSets_ removeWithId:tag];
          dupTag = JreRetainedLocalValue(tag);
          break;
        }
        else {
          old = JreRetainedLocalValue(nil);
        }
      }
    }
  }
  if (old != nil) {
    @synchronized(_inboundTagSets_) {
      for (NetI2pDataSessionTag * __strong tag in nil_chk([old getTags])) {
        [((id<JavaUtilMap>) nil_chk(_inboundTagSets_)) removeWithId:tag];
      }
      for (NetI2pDataSessionTag * __strong tag in sessionTags) {
        [((id<JavaUtilMap>) nil_chk(_inboundTagSets_)) removeWithId:tag];
      }
    }
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [_log_ warnWithNSString:JreStrcat("$@$@$@C@", @"Multiple tags matching!  tagSet: ", tagSet, @" and old tagSet: ", old, @" tag: ", dupTag, '/', dupTag)];
      [_log_ warnWithNSString:JreStrcat("$@$@", @"Earlier tag set creation: ", old, @": key=", [old getAssociatedKey])];
      [_log_ warnWithNSString:JreStrcat("$@$@", @"Current tag set creation: ", tagSet, @": key=", [tagSet getAssociatedKey])];
    }
  }
}

- (void)clearExcessWithInt:(jint)overage {
  NetI2pRouterCryptoTransientSessionKeyManager_clearExcessWithInt_(self, overage);
}

- (NetI2pDataSessionKey *)consumeTagWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag {
  NetI2pRouterCryptoTransientSessionKeyManager_TagSet *tagSet;
  @synchronized(_inboundTagSets_) {
    tagSet = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_inboundTagSets_)) removeWithId:tag]);
    if (tagSet == nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Cannot consume IB ", tag, @" as it is not known")];
      return JreRetainedLocalValue(nil);
    }
    [tagSet consumeWithNetI2pDataSessionTag:tag];
  }
  NetI2pDataSessionKey *key = [tagSet getAssociatedKey];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"IB Tag consumed: ", tag, @" from: ", tagSet)];
  return key;
}

- (NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)getSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  return NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(self, target);
}

- (void)addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession:(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *)sess {
  NetI2pRouterCryptoTransientSessionKeyManager_addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_(self, sess);
}

- (void)removeSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  NetI2pRouterCryptoTransientSessionKeyManager_removeSessionWithNetI2pDataPublicKey_(self, target);
}

- (jint)aggressiveExpire {
  return NetI2pRouterCryptoTransientSessionKeyManager_aggressiveExpire(self);
}

- (id<JavaUtilMap>)getInboundTagSetsBySessionKey {
  return NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSetsBySessionKey(self);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(1024);
  [buf appendWithNSString:@"<h3 class=\"debug_inboundsessions\">Inbound sessions</h3><table>"];
  id<JavaUtilMap> inboundSets = NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSetsBySessionKey(self);
  jint total = 0;
  jint totalSets = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  id<JavaUtilSet> sets = create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init());
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(inboundSets)) entrySet])) {
    NetI2pDataSessionKey *skey = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    [sets clear];
    [sets addAllWithJavaUtilCollection:[e getValue]];
    totalSets += [sets size];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<tr><td><b>Session key:</b> "])) appendWithNSString:[((NetI2pDataSessionKey *) nil_chk(skey)) toBase64]])) appendWithNSString:@"</td><td><b>Sets:</b> "])) appendWithInt:[sets size]])) appendWithNSString:@"</td></tr><tr class=\"expiry\"><td colspan=\"2\"><ul>"];
    for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong ts in sets) {
      jint size = [((id<JavaUtilSet>) nil_chk([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getTags])) size];
      total += size;
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<li><b>ID: "])) appendWithInt:[ts getID]];
      jlong expires = [ts getDate] - now;
      if (expires > 0) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" expires in:</b> "])) appendWithNSString:NetI2pDataDataHelper_formatDuration2WithLong_(expires)])) appendWithNSString:@" with "];
      else [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" expired:</b> "])) appendWithNSString:NetI2pDataDataHelper_formatDuration2WithLong_(0 - expires)])) appendWithNSString:@" ago with "];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithInt:size])) appendWithChar:'/'])) appendWithInt:[ts getOriginalSize]])) appendWithNSString:@" tags remaining</li>"];
    }
    [buf appendWithNSString:@"</ul></td></tr>\n"];
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[buf description]];
    [buf setLengthWithInt:0];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<tr><th colspan=\"2\">Total inbound tags: "])) appendWithInt:total])) appendWithNSString:@" ("])) appendWithNSString:NetI2pDataDataHelper_formatSize2WithLong_(32 * total)])) appendWithNSString:@"B); sets: "])) appendWithInt:totalSets])) appendWithNSString:@"; sessions: "])) appendWithInt:[inboundSets size]])) appendWithNSString:@"</th></tr>\n</table><h3 class=\"debug_outboundsessions\">Outbound sessions</h3><table>"];
  total = 0;
  totalSets = 0;
  id<JavaUtilSet> outbound = NetI2pRouterCryptoTransientSessionKeyManager_getOutboundSessions(self);
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(outbound)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = [iter next];
    [sets clear];
    [sets addAllWithJavaUtilCollection:[((NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *) nil_chk(sess)) getTagSets]];
    totalSets += [sets size];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<tr class=\"debug_outboundtarget\"><td><div class=\"debug_targetinfo\"><b>Target public key:</b> "])) appendWithNSString:NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_([sess getTarget])])) appendWithNSString:@"<br><b>Established:</b> "])) appendWithNSString:NetI2pDataDataHelper_formatDuration2WithLong_(now - [sess getEstablishedDate])])) appendWithNSString:@" ago<br><b>Ack Received?</b> "])) appendWithBoolean:[sess getAckReceived]])) appendWithNSString:@"<br><b>Last Used:</b> "])) appendWithNSString:NetI2pDataDataHelper_formatDuration2WithLong_(now - [sess getLastUsedDate])])) appendWithNSString:@" ago<br><b>Session key:</b> "])) appendWithNSString:[((NetI2pDataSessionKey *) nil_chk([sess getCurrentKey])) toBase64]])) appendWithNSString:@"</div></td><td><b># Sets:</b> "])) appendWithInt:[((id<JavaUtilList>) nil_chk([sess getTagSets])) size]])) appendWithNSString:@"</td></tr><tr><td colspan=\"2\"><ul>"];
    for (id<JavaUtilIterator> siter = [sets iterator]; [((id<JavaUtilIterator>) nil_chk(siter)) hasNext]; ) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *ts = [siter next];
      jint size = [((id<JavaUtilSet>) nil_chk([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getTags])) size];
      total += size;
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<li><b>ID: "])) appendWithInt:[ts getID]])) appendWithNSString:@" Sent:</b> "])) appendWithNSString:NetI2pDataDataHelper_formatDuration2WithLong_(now - [ts getDate])])) appendWithNSString:@" ago with "];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithInt:size])) appendWithChar:'/'])) appendWithInt:[ts getOriginalSize]])) appendWithNSString:@" tags remaining; acked? "])) appendWithBoolean:[ts getAcked]])) appendWithNSString:@"</li>"];
    }
    [buf appendWithNSString:@"</ul></td></tr>\n"];
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[buf description]];
    [buf setLengthWithInt:0];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<tr><th colspan=\"2\">Total outbound tags: "])) appendWithInt:total])) appendWithNSString:@" ("])) appendWithNSString:NetI2pDataDataHelper_formatSize2WithLong_(32 * total)])) appendWithNSString:@"B); sets: "])) appendWithInt:totalSets])) appendWithNSString:@"; sessions: "])) appendWithInt:[outbound size]])) appendWithNSString:@"</th></tr>\n</table>"];
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[buf description]];
}

+ (NSString *)toStringWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  return NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_outboundSessions_);
  RELEASE_(_inboundTagSets_);
  RELEASE_(_context_);
  RELEASE_(_rcvTagSetID_);
  RELEASE_(_sentTagSetID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionTag;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoTagSetHandle;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 5, -1, -1, 19, -1 },
    { NULL, "V", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 22, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;", 0x2, 31, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, -1, -1, -1, 35, -1, -1 },
    { NULL, "V", 0x1, 36, 37, 38, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 39, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getInboundTagSets);
  methods[4].selector = @selector(getOutboundSessions);
  methods[5].selector = @selector(getCurrentKeyWithNetI2pDataPublicKey:);
  methods[6].selector = @selector(getCurrentOrNewKeyWithNetI2pDataPublicKey:);
  methods[7].selector = @selector(createSessionWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[8].selector = @selector(createAndReturnSessionWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[9].selector = @selector(consumeNextAvailableTagWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[10].selector = @selector(getTagsToSend);
  methods[11].selector = @selector(getLowThreshold);
  methods[12].selector = @selector(shouldSendTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withInt:);
  methods[13].selector = @selector(getAvailableTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[14].selector = @selector(getAvailableTimeLeftWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[15].selector = @selector(tagsDeliveredWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withJavaUtilSet:);
  methods[16].selector = @selector(failTagsWithNetI2pDataPublicKey:);
  methods[17].selector = @selector(failTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pCryptoTagSetHandle:);
  methods[18].selector = @selector(tagsAckedWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pCryptoTagSetHandle:);
  methods[19].selector = @selector(tagsReceivedWithNetI2pDataSessionKey:withJavaUtilSet:);
  methods[20].selector = @selector(tagsReceivedWithNetI2pDataSessionKey:withJavaUtilSet:withLong:);
  methods[21].selector = @selector(clearExcessWithInt:);
  methods[22].selector = @selector(consumeTagWithNetI2pDataSessionTag:);
  methods[23].selector = @selector(getSessionWithNetI2pDataPublicKey:);
  methods[24].selector = @selector(addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession:);
  methods[25].selector = @selector(removeSessionWithNetI2pDataPublicKey:);
  methods[26].selector = @selector(aggressiveExpire);
  methods[27].selector = @selector(getInboundTagSetsBySessionKey);
  methods[28].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[29].selector = @selector(toStringWithNetI2pDataPublicKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outboundSessions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 40, -1 },
    { "_inboundTagSets_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 41, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_rcvTagSetID_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sentTagSetID_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tagsToSend_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lowThreshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SESSION_TAG_DURATION_MS", "J", .constantValue.asLong = NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS, 0x1a, -1, -1, -1, -1 },
    { "SESSION_LIFETIME_MAX_MS", "J", .constantValue.asLong = NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS, 0x1a, -1, -1, -1, -1 },
    { "SESSION_TAG_EXPIRATION_WINDOW", "J", .constantValue.asLong = NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_EXPIRATION_WINDOW, 0x1a, -1, -1, -1, -1 },
    { "MAX_INBOUND_SESSION_TAGS", "I", .constantValue.asInt = NetI2pRouterCryptoTransientSessionKeyManager_MAX_INBOUND_SESSION_TAGS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_TAGS", "I", .constantValue.asInt = NetI2pRouterCryptoTransientSessionKeyManager_DEFAULT_TAGS, 0x19, -1, -1, -1, -1 },
    { "LOW_THRESHOLD", "I", .constantValue.asInt = NetI2pRouterCryptoTransientSessionKeyManager_LOW_THRESHOLD, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;II", "()Ljava/util/Set<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;", "()Ljava/util/Set<Lnet/i2p/router/crypto/TransientSessionKeyManager$OutboundSession;>;", "getCurrentKey", "LNetI2pDataPublicKey;", "getCurrentOrNewKey", "createSession", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;", "createAndReturnSession", "consumeNextAvailableTag", "shouldSendTags", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;I", "getAvailableTags", "getAvailableTimeLeft", "tagsDelivered", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/PublicKey;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)Lnet/i2p/crypto/TagSetHandle;", "failTags", (void *)&NetI2pRouterCryptoTransientSessionKeyManager__Annotations$0, "LNetI2pDataPublicKey;LNetI2pDataSessionKey;LNetI2pCryptoTagSetHandle;", "tagsAcked", "tagsReceived", "LNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)V", "LNetI2pDataSessionKey;LJavaUtilSet;J", "(Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;J)V", "clearExcess", "I", "consumeTag", "LNetI2pDataSessionTag;", "getSession", "addSession", "LNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;", "removeSession", "()Ljava/util/Map<Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;>;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "toString", "Ljava/util/Map<Lnet/i2p/data/PublicKey;Lnet/i2p/router/crypto/TransientSessionKeyManager$OutboundSession;>;", "Ljava/util/Map<Lnet/i2p/data/SessionTag;Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;", "LNetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent;LNetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator;LNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;LNetI2pRouterCryptoTransientSessionKeyManager_TagSet;" };
  static const J2ObjcClassInfo _NetI2pRouterCryptoTransientSessionKeyManager = { "TransientSessionKeyManager", "net.i2p.router.crypto", ptrTable, methods, fields, 7, 0x1, 30, 15, -1, 42, -1, -1, -1 };
  return &_NetI2pRouterCryptoTransientSessionKeyManager;
}

@end

void NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pI2PAppContext *context) {
  NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(self, context, NetI2pRouterCryptoTransientSessionKeyManager_DEFAULT_TAGS, NetI2pRouterCryptoTransientSessionKeyManager_LOW_THRESHOLD);
}

NetI2pRouterCryptoTransientSessionKeyManager *new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterCryptoTransientSessionKeyManager *create_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager, initWithNetI2pI2PAppContext_, context)
}

void NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold) {
  NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(self, context);
  JreStrongAssignAndConsume(&self->_rcvTagSetID_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_sentTagSetID_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  if (tagsToSend <= 0 || tagsToSend > 128 || lowThreshold <= 0 || lowThreshold > 128) @throw create_JavaLangIllegalArgumentException_init();
  self->_tagsToSend_ = tagsToSend;
  self->_lowThreshold_ = lowThreshold;
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterCryptoTransientSessionKeyManager_class_()]);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssignAndConsume(&self->_outboundSessions_, new_JavaUtilHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_inboundTagSets_, new_JavaUtilHashMap_initWithInt_(128));
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"crypto.sessionTagsExpired" withNSString:@"How many tags/sessions are expired?" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000, 3 * 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"crypto.sessionTagsRemaining" withNSString:@"How many tags/sessions are remaining after a cleanup?" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000, 3 * 60 * 60 * 1000 } count:3]];
  JreAssignVolatileBoolean(&self->_alive_, true);
  [((NetI2pUtilSimpleTimer2 *) nil_chk([self->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(self) withLong:60 * 1000];
}

NetI2pRouterCryptoTransientSessionKeyManager *new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager, initWithNetI2pI2PAppContext_withInt_withInt_, context, tagsToSend, lowThreshold)
}

NetI2pRouterCryptoTransientSessionKeyManager *create_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager, initWithNetI2pI2PAppContext_withInt_withInt_, context, tagsToSend, lowThreshold)
}

id<JavaUtilSet> NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSets(NetI2pRouterCryptoTransientSessionKeyManager *self) {
  @synchronized(self->_inboundTagSets_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(self->_inboundTagSets_)) values]));
  }
}

id<JavaUtilSet> NetI2pRouterCryptoTransientSessionKeyManager_getOutboundSessions(NetI2pRouterCryptoTransientSessionKeyManager *self) {
  @synchronized(self->_outboundSessions_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(self->_outboundSessions_)) values]));
  }
}

NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *NetI2pRouterCryptoTransientSessionKeyManager_createAndReturnSessionWithNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$$", @"New OB session, sesskey: ", key, @" target: ", NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(target))];
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = create_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(self->_context_, self->_log_, target, key);
  NetI2pRouterCryptoTransientSessionKeyManager_addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_(self, sess);
  return sess;
}

void NetI2pRouterCryptoTransientSessionKeyManager_clearExcessWithInt_(NetI2pRouterCryptoTransientSessionKeyManager *self, jint overage) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
  jint old = 0;
  jint large = 0;
  jint absurd = 0;
  jint recent = 0;
  jint tags = 0;
  jint toRemove = overage * 2;
  [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$I", @"TOO MANY SESSION TAGS! Starting cleanup, overage = ", overage)];
  id<JavaUtilList> removed = create_JavaUtilArrayList_initWithInt_(toRemove);
  @synchronized(self->_inboundTagSets_) {
    for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong set in nil_chk([((id<JavaUtilMap>) nil_chk(self->_inboundTagSets_)) values])) {
      jint size = [((id<JavaUtilSet>) nil_chk([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getTags])) size];
      if (size > 1000) absurd++;
      if (size > 100) large++;
      if ([set getDate] - now < 3 * 60 * 1000) {
        old++;
        [removed addWithId:set];
        continue;
      }
      else if ([set getDate] - now > 8 * 60 * 1000) {
        recent++;
        continue;
      }
      if ([removed size] < toRemove) [removed addWithId:set];
    }
    for (jint i = 0; i < [removed size]; i++) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *cur = [removed getWithInt:i];
      for (NetI2pDataSessionTag * __strong tag in nil_chk([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(cur)) getTags])) {
        [self->_inboundTagSets_ removeWithId:tag];
        tags++;
      }
    }
  }
  [self->_log_ logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$I$I$I$I$I$I$I$", @"TOO MANY SESSION TAGS!  removed ", [removed size], @" tag sets arbitrarily, with ", tags, @" tags,where there are ", old, @" long lasting sessions, ", recent, @" ones created in the last few minutes, and ", large, @" sessions with more than 100 tags (and ", absurd, @" with more than 1000!), leaving a total of ", [self->_inboundTagSets_ size], @" tags behind")];
}

NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *NetI2pRouterCryptoTransientSessionKeyManager_getSessionWithNetI2pDataPublicKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target) {
  @synchronized(self->_outboundSessions_) {
    return JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->_outboundSessions_)) getWithId:target]);
  }
}

void NetI2pRouterCryptoTransientSessionKeyManager_addSessionWithNetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess) {
  @synchronized(self->_outboundSessions_) {
    [((id<JavaUtilMap>) nil_chk(self->_outboundSessions_)) putWithId:[((NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *) nil_chk(sess)) getTarget] withId:sess];
  }
}

void NetI2pRouterCryptoTransientSessionKeyManager_removeSessionWithNetI2pDataPublicKey_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pDataPublicKey *target) {
  if (target == nil) return;
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *session = nil;
  @synchronized(self->_outboundSessions_) {
    session = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->_outboundSessions_)) removeWithId:target]);
  }
  if ((session != nil) && ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN])) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$I$J$", @"Removing session tags with ", [((NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *) nil_chk(session)) availableTags], @" available for ", ([session getLastExpirationDate] - [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now]), @"ms more") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Removed by")];
}

jint NetI2pRouterCryptoTransientSessionKeyManager_aggressiveExpire(NetI2pRouterCryptoTransientSessionKeyManager *self) {
  jint removed = 0;
  jint remaining = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
  @synchronized(self->_inboundTagSets_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(self->_inboundTagSets_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *ts = [iter next];
      if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getDate] <= now) {
        [iter remove];
        removed++;
      }
    }
    remaining = [self->_inboundTagSets_ size];
    if (remaining > 500) {
      id<JavaUtilMap> inboundSets = NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSetsBySessionKey(self);
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(inboundSets)) entrySet])) {
        NetI2pDataSessionKey *skey = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        id<JavaUtilSet> sets = [e getValue];
        jint count = [((id<JavaUtilSet>) nil_chk(sets)) size];
        if (count >= 10) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$$$I$", @"Session key ", [((NetI2pDataSessionKey *) nil_chk(skey)) toBase64], @" has ", count, @" tag sets")];
          jlong age = JavaLangMath_minWithInt_withInt_(5 * 60 * 1000, JavaLangMath_maxWithInt_withInt_(60 * 1000, 9 * 60 * 1000 - ((count - 10) * 8 * 60 * 1000 / 40)));
          for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong ts in sets) {
            id<JavaUtilSet> tags = [((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getTags];
            jint curSize = [((id<JavaUtilSet>) nil_chk(tags)) size];
            jint origSize = [ts getOriginalSize];
            jlong expires = [ts getDate];
            if (curSize == origSize && curSize > 8 && expires < now + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS - age) {
              if ([self->_log_ shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Removed unused tag set ", ts)];
              for (NetI2pDataSessionTag * __strong tag in tags) {
                [self->_inboundTagSets_ removeWithId:tag];
              }
              removed += curSize;
            }
          }
        }
      }
      remaining = [self->_inboundTagSets_ size];
    }
  }
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"crypto.sessionTagsRemaining" withLong:remaining withLong:0];
  if (removed > 0 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$I", @"Expired inbound: ", removed)];
  jint oremoved = 0;
  @synchronized(self->_outboundSessions_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(self->_outboundSessions_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *sess = [iter next];
      oremoved += [((NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *) nil_chk(sess)) expireTags];
      if ([sess getLastUsedDate] < now - (NetI2pRouterCryptoTransientSessionKeyManager_SESSION_LIFETIME_MAX_MS / 2) && [sess availableTags] <= 0) {
        [iter remove];
        oremoved++;
      }
    }
  }
  if (oremoved > 0 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$I", @"Expired outbound: ", oremoved)];
  return removed + oremoved;
}

id<JavaUtilMap> NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSetsBySessionKey(NetI2pRouterCryptoTransientSessionKeyManager *self) {
  id<JavaUtilSet> inbound = NetI2pRouterCryptoTransientSessionKeyManager_getInboundTagSets(self);
  id<JavaUtilMap> inboundSets = create_JavaUtilHashMap_initWithInt_([((id<JavaUtilSet>) nil_chk(inbound)) size]);
  for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong ts in inbound) {
    id<JavaUtilSet> sets = [inboundSets getWithId:[((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getAssociatedKey]];
    if (sets == nil) {
      sets = create_JavaUtilHashSet_initWithInt_(4);
      [inboundSets putWithId:[ts getAssociatedKey] withId:sets];
    }
    [sets addWithId:ts];
  }
  return inboundSets;
}

NSString *NetI2pRouterCryptoTransientSessionKeyManager_toStringWithNetI2pDataPublicKey_(NetI2pDataPublicKey *target) {
  NetI2pRouterCryptoTransientSessionKeyManager_initialize();
  if (target == nil) return @"null";
  return JreStrcat("$$", [((NSString *) nil_chk([target toBase64])) java_substring:0 endIndex:20], @"...");
}

IOSObjectArray *NetI2pRouterCryptoTransientSessionKeyManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoTransientSessionKeyManager)

@implementation NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent

- (instancetype)initWithNetI2pRouterCryptoTransientSessionKeyManager:(NetI2pRouterCryptoTransientSessionKeyManager *)outer$ {
  NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(self, outer$);
  return self;
}

- (void)timeReached {
  if (!JreLoadVolatileBoolean(&this$0_->_alive_)) return;
  jlong beforeExpire = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now];
  jint expired = NetI2pRouterCryptoTransientSessionKeyManager_aggressiveExpire(this$0_);
  jint overage = [((id<JavaUtilMap>) nil_chk(this$0_->_inboundTagSets_)) size] - NetI2pRouterCryptoTransientSessionKeyManager_MAX_INBOUND_SESSION_TAGS;
  if (overage > 0) NetI2pRouterCryptoTransientSessionKeyManager_clearExcessWithInt_(this$0_, overage);
  jlong expireTime = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - beforeExpire;
  [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"crypto.sessionTagsExpired" withLong:expired withLong:expireTime];
  [((NetI2pUtilSimpleTimer2 *) nil_chk([this$0_->_context_ simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:self withLong:60 * 1000];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterCryptoTransientSessionKeyManager:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterCryptoTransientSessionKeyManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterCryptoTransientSessionKeyManager;" };
  static const J2ObjcClassInfo _NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent = { "CleanupEvent", "net.i2p.router.crypto", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent;
}

@end

void NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *self, NetI2pRouterCryptoTransientSessionKeyManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *new_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent, initWithNetI2pRouterCryptoTransientSessionKeyManager_, outer$)
}

NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent *create_NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent_initWithNetI2pRouterCryptoTransientSessionKeyManager_(NetI2pRouterCryptoTransientSessionKeyManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent, initWithNetI2pRouterCryptoTransientSessionKeyManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoTransientSessionKeyManager_CleanupEvent)

@implementation NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)l
               withId:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)r {
  jint rv = (jint) ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(l)) getDate] - [((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(r)) getDate]);
  if (rv != 0) return rv;
  return ((jint) [l hash]) - ((jint) [r hash]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pRouterCryptoTransientSessionKeyManager_TagSet;LNetI2pRouterCryptoTransientSessionKeyManager_TagSet;", "LNetI2pRouterCryptoTransientSessionKeyManager;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator = { "TagSetComparator", "net.i2p.router.crypto", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator;
}

@end

void NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *self) {
  NSObject_init(self);
}

NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *new_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator, init)
}

NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator *create_NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoTransientSessionKeyManager_TagSetComparator)

@implementation NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                          withNetI2pUtilLog:(NetI2pUtilLog *)log
                    withNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                   withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(self, ctx, log, target, key);
  return self;
}

- (id<JavaUtilList>)getTagSets {
  id<JavaUtilList> rv;
  @synchronized(_tagSets_) {
    rv = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_unackedTagSets_));
    [rv addAllWithJavaUtilCollection:_tagSets_];
  }
  return rv;
}

- (void)ackTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set {
  @synchronized(_tagSets_) {
    if ([((id<JavaUtilSet>) nil_chk(_unackedTagSets_)) removeWithId:set]) {
      [((id<JavaUtilList>) nil_chk(_tagSets_)) addWithId:set];
    }
    else if (![((id<JavaUtilList>) nil_chk(_tagSets_)) containsWithId:set]) {
      [_tagSets_ addWithId:set];
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Ack of unknown (previously failed?) tagset: ", set)];
    }
    else if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getAcked]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Dup ack of tagset: ", set)];
    }
    JreAssignVolatileBoolean(&_acked_, true);
    _consecutiveFailures_ = 0;
  }
  [((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) setAcked];
}

- (void)failTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set {
  @synchronized(_tagSets_) {
    [((id<JavaUtilSet>) nil_chk(_unackedTagSets_)) removeWithId:set];
    if ([((id<JavaUtilList>) nil_chk(_tagSets_)) removeWithId:set]) {
      if (++_consecutiveFailures_ >= NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_MAX_FAILS) {
        JreAssignVolatileBoolean(&_acked_, false);
        jint acked = 0;
        jint unacked = 0;
        for (id<JavaUtilIterator> iter = [_tagSets_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
          NetI2pRouterCryptoTransientSessionKeyManager_TagSet *ts = [iter next];
          if (![((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(ts)) getAcked]) {
            [iter remove];
            [_unackedTagSets_ addWithId:ts];
            unacked++;
          }
          else {
            acked++;
          }
        }
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("I$@$I$I$", _consecutiveFailures_, @" consecutive failed tagset deliveries to ", _currentKey_, @": reverting to full ElG and un-acking ", unacked, @" unacked tag sets, with ", acked, @" remaining acked tag sets")];
      }
    }
  }
}

- (NetI2pDataPublicKey *)getTarget {
  return _target_;
}

- (NetI2pDataSessionKey *)getCurrentKey {
  return _currentKey_;
}

- (void)setCurrentKeyWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  _lastUsed_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  if (_currentKey_ != nil) {
    if (![_currentKey_ isEqual:key]) {
      @synchronized(_tagSets_) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
          jint dropped = 0;
          for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong set in nil_chk(_tagSets_)) {
            dropped += [((id<JavaUtilSet>) nil_chk([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getTags])) size];
          }
          [_log_ warnWithNSString:JreStrcat("$@$@$I$", @"Rekeyed from ", _currentKey_, @" to ", key, @": dropping ", dropped, @" session tags") withJavaLangThrowable:create_JavaLangException_init()];
        }
        JreAssignVolatileBoolean(&_acked_, false);
        [((id<JavaUtilList>) nil_chk(_tagSets_)) clear];
      }
    }
  }
  JreStrongAssign(&_currentKey_, key);
}

- (jlong)getEstablishedDate {
  return _established_;
}

- (jlong)getLastUsedDate {
  return _lastUsed_;
}

- (jint)expireTags {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  jint removed = 0;
  @synchronized(_tagSets_) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(_tagSets_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *set = [iter next];
      if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getDate] + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS <= now) {
        [iter remove];
        removed++;
      }
    }
    if ((now & (jint) 0x0f) == 0) {
      for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(_unackedTagSets_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
        NetI2pRouterCryptoTransientSessionKeyManager_TagSet *set = [iter next];
        if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getDate] + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS <= now) {
          [iter remove];
          removed++;
        }
      }
    }
  }
  return removed;
}

- (NetI2pDataSessionTag *)consumeNext {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  _lastUsed_ = now;
  @synchronized(_tagSets_) {
    while (![((id<JavaUtilList>) nil_chk(_tagSets_)) isEmpty]) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *set = [_tagSets_ getWithInt:0];
      if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getDate] + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS > now) {
        NetI2pDataSessionTag *tag = [set consumeNext];
        if (tag != nil) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"OB Tag consumed: ", tag, @" from: ", set)];
          return JreRetainedLocalValue(tag);
        }
        else if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
          [_log_ infoWithNSString:JreStrcat("$@", @"Removing empty ", set)];
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Expired ", set)];
      }
      [_tagSets_ removeWithInt:0];
    }
  }
  return nil;
}

- (jint)availableTags {
  jint tags = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  @synchronized(_tagSets_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_tagSets_)) size]; i++) {
      NetI2pRouterCryptoTransientSessionKeyManager_TagSet *set = [_tagSets_ getWithInt:i];
      if ([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getDate] + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS > now) {
        jint sz = [((id<JavaUtilSet>) nil_chk([set getTags])) size];
        if (![set getAcked]) sz = (sz + 2) / 3;
        tags += sz;
      }
    }
  }
  return tags;
}

- (jlong)getLastExpirationDate {
  jlong last = 0;
  @synchronized(_tagSets_) {
    for (NetI2pRouterCryptoTransientSessionKeyManager_TagSet * __strong set in nil_chk(_tagSets_)) {
      if (([((NetI2pRouterCryptoTransientSessionKeyManager_TagSet *) nil_chk(set)) getDate] > last) && (![((id<JavaUtilSet>) nil_chk([set getTags])) isEmpty])) last = [set getDate];
    }
  }
  if (last > 0) return last + NetI2pRouterCryptoTransientSessionKeyManager_SESSION_TAG_DURATION_MS;
  else return -1;
}

- (void)addTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *)set {
  _lastUsed_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
  @synchronized(_tagSets_) {
    if (JreLoadVolatileBoolean(&_acked_)) [((id<JavaUtilList>) nil_chk(_tagSets_)) addWithId:set];
    else [((id<JavaUtilSet>) nil_chk(_unackedTagSets_)) addWithId:set];
  }
}

- (jboolean)getAckReceived {
  return JreLoadVolatileBoolean(&_acked_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_target_);
  RELEASE_(_currentKey_);
  RELEASE_(_unackedTagSets_);
  RELEASE_(_tagSets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionTag;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilLog:withNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[1].selector = @selector(getTagSets);
  methods[2].selector = @selector(ackTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:);
  methods[3].selector = @selector(failTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:);
  methods[4].selector = @selector(getTarget);
  methods[5].selector = @selector(getCurrentKey);
  methods[6].selector = @selector(setCurrentKeyWithNetI2pDataSessionKey:);
  methods[7].selector = @selector(getEstablishedDate);
  methods[8].selector = @selector(getLastUsedDate);
  methods[9].selector = @selector(expireTags);
  methods[10].selector = @selector(consumeNext);
  methods[11].selector = @selector(availableTags);
  methods[12].selector = @selector(getLastExpirationDate);
  methods[13].selector = @selector(addTagsWithNetI2pRouterCryptoTransientSessionKeyManager_TagSet:);
  methods[14].selector = @selector(getAckReceived);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_target_", "LNetI2pDataPublicKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_established_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastUsed_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_unackedTagSets_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "_tagSets_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_acked_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_consecutiveFailures_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_FAILS", "I", .constantValue.asInt = NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_MAX_FAILS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pUtilLog;LNetI2pDataPublicKey;LNetI2pDataSessionKey;", "()Ljava/util/List<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;", "ackTags", "LNetI2pRouterCryptoTransientSessionKeyManager_TagSet;", "failTags", "setCurrentKey", "LNetI2pDataSessionKey;", "addTags", "Ljava/util/Set<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;", "Ljava/util/List<Lnet/i2p/router/crypto/TransientSessionKeyManager$TagSet;>;", "LNetI2pRouterCryptoTransientSessionKeyManager;" };
  static const J2ObjcClassInfo _NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession = { "OutboundSession", "net.i2p.router.crypto", ptrTable, methods, fields, 7, 0xa, 15, 11, 10, -1, -1, -1, -1 };
  return &_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession;
}

@end

void NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *self, NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, log);
  JreStrongAssign(&self->_target_, target);
  JreStrongAssign(&self->_currentKey_, key);
  self->_established_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) clock])) now];
  self->_lastUsed_ = self->_established_;
  JreStrongAssignAndConsume(&self->_unackedTagSets_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_tagSets_, new_JavaUtilArrayList_initWithInt_(6));
}

NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *new_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_, ctx, log, target, key)
}

NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession *create_NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, NetI2pDataPublicKey *target, NetI2pDataSessionKey *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession, initWithNetI2pI2PAppContext_withNetI2pUtilLog_withNetI2pDataPublicKey_withNetI2pDataSessionKey_, ctx, log, target, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoTransientSessionKeyManager_OutboundSession)

@implementation NetI2pRouterCryptoTransientSessionKeyManager_TagSet

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)tags
           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                           withLong:(jlong)date
                            withInt:(jint)id_ {
  NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(self, tags, key, date, id_);
  return self;
}

- (jlong)getDate {
  return _date_;
}

- (jint)getOriginalSize {
  return _origSize_;
}

- (id<JavaUtilSet>)getTags {
  return _sessionTags_;
}

- (NetI2pDataSessionKey *)getAssociatedKey {
  return _key_;
}

- (void)consumeWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag {
  [((id<JavaUtilSet>) nil_chk(_sessionTags_)) removeWithId:tag];
}

- (NetI2pDataSessionTag *)consumeNext {
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(_sessionTags_)) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) return nil;
  NetI2pDataSessionTag *first = [iter next];
  [iter remove];
  return first;
}

- (void)setAcked {
  _acked_ = true;
}

- (jboolean)getAcked {
  return _acked_;
}

- (jint)getID {
  return _id_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"TagSet #"])) appendWithInt:_id_])) appendWithNSString:@" created: "])) appendWithId:create_JavaUtilDate_initWithLong_(_date_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Session key: "])) appendWithId:_key_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Size: "])) appendWithInt:[((id<JavaUtilSet>) nil_chk(_sessionTags_)) size]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'/'])) appendWithInt:_origSize_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" Acked? "])) appendWithBoolean:_acked_];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_sessionTags_);
  RELEASE_(_key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionTag;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:withNetI2pDataSessionKey:withLong:withInt:);
  methods[1].selector = @selector(getDate);
  methods[2].selector = @selector(getOriginalSize);
  methods[3].selector = @selector(getTags);
  methods[4].selector = @selector(getAssociatedKey);
  methods[5].selector = @selector(consumeWithNetI2pDataSessionTag:);
  methods[6].selector = @selector(consumeNext);
  methods[7].selector = @selector(setAcked);
  methods[8].selector = @selector(getAcked);
  methods[9].selector = @selector(getID);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sessionTags_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "_key_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_date_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_id_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_origSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_acked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;LNetI2pDataSessionKey;JI", "(Ljava/util/Set<Lnet/i2p/data/SessionTag;>;Lnet/i2p/data/SessionKey;JI)V", "()Ljava/util/Set<Lnet/i2p/data/SessionTag;>;", "consume", "LNetI2pDataSessionTag;", "toString", "Ljava/util/Set<Lnet/i2p/data/SessionTag;>;", "LNetI2pRouterCryptoTransientSessionKeyManager;" };
  static const J2ObjcClassInfo _NetI2pRouterCryptoTransientSessionKeyManager_TagSet = { "TagSet", "net.i2p.router.crypto", ptrTable, methods, fields, 7, 0xa, 11, 6, 7, -1, -1, -1, -1 };
  return &_NetI2pRouterCryptoTransientSessionKeyManager_TagSet;
}

@end

void NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(NetI2pRouterCryptoTransientSessionKeyManager_TagSet *self, id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_) {
  NSObject_init(self);
  if (key == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Missing key");
  if (tags == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Missing tags");
  JreStrongAssign(&self->_sessionTags_, tags);
  JreStrongAssign(&self->_key_, key);
  self->_date_ = date;
  self->_id_ = id_;
  self->_origSize_ = [tags size];
}

NetI2pRouterCryptoTransientSessionKeyManager_TagSet *new_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_TagSet, initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_, tags, key, date, id_)
}

NetI2pRouterCryptoTransientSessionKeyManager_TagSet *create_NetI2pRouterCryptoTransientSessionKeyManager_TagSet_initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_(id<JavaUtilSet> tags, NetI2pDataSessionKey *key, jlong date, jint id_) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoTransientSessionKeyManager_TagSet, initWithJavaUtilSet_withNetI2pDataSessionKey_withLong_withInt_, tags, key, date, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoTransientSessionKeyManager_TagSet)
