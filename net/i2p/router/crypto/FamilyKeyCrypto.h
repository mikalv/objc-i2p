//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/crypto/FamilyKeyCrypto.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterCryptoFamilyKeyCrypto")
#ifdef RESTRICT_NetI2pRouterCryptoFamilyKeyCrypto
#define INCLUDE_ALL_NetI2pRouterCryptoFamilyKeyCrypto 0
#else
#define INCLUDE_ALL_NetI2pRouterCryptoFamilyKeyCrypto 1
#endif
#undef RESTRICT_NetI2pRouterCryptoFamilyKeyCrypto

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterCryptoFamilyKeyCrypto_) && (INCLUDE_ALL_NetI2pRouterCryptoFamilyKeyCrypto || defined(INCLUDE_NetI2pRouterCryptoFamilyKeyCrypto))
#define NetI2pRouterCryptoFamilyKeyCrypto_

@class IOSObjectArray;
@class NetI2pDataHash;
@class NetI2pDataRouterRouterInfo;
@class NetI2pRouterRouterContext;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface NetI2pRouterCryptoFamilyKeyCrypto : NSObject
@property (readonly, copy, class) NSString *PROP_KEYSTORE_PASSWORD NS_SWIFT_NAME(PROP_KEYSTORE_PASSWORD);
@property (readonly, copy, class) NSString *PROP_FAMILY_NAME NS_SWIFT_NAME(PROP_FAMILY_NAME);
@property (readonly, copy, class) NSString *PROP_KEY_PASSWORD NS_SWIFT_NAME(PROP_KEY_PASSWORD);
@property (readonly, copy, class) NSString *CERT_SUFFIX NS_SWIFT_NAME(CERT_SUFFIX);
@property (readonly, copy, class) NSString *CRL_SUFFIX NS_SWIFT_NAME(CRL_SUFFIX);
@property (readonly, copy, class) NSString *KEYSTORE_PREFIX NS_SWIFT_NAME(KEYSTORE_PREFIX);
@property (readonly, copy, class) NSString *KEYSTORE_SUFFIX NS_SWIFT_NAME(KEYSTORE_SUFFIX);
@property (readonly, copy, class) NSString *CN_SUFFIX NS_SWIFT_NAME(CN_SUFFIX);
@property (readonly, copy, class) NSString *OPT_NAME NS_SWIFT_NAME(OPT_NAME);
@property (readonly, copy, class) NSString *OPT_SIG NS_SWIFT_NAME(OPT_SIG);
@property (readonly, copy, class) NSString *OPT_KEY NS_SWIFT_NAME(OPT_KEY);

+ (NSString *)PROP_KEYSTORE_PASSWORD;

+ (NSString *)PROP_FAMILY_NAME;

+ (NSString *)PROP_KEY_PASSWORD;

+ (NSString *)CERT_SUFFIX;

+ (NSString *)CRL_SUFFIX;

+ (NSString *)KEYSTORE_PREFIX;

+ (NSString *)KEYSTORE_SUFFIX;

+ (NSString *)CN_SUFFIX;

+ (NSString *)OPT_NAME;

+ (NSString *)OPT_SIG;

+ (NSString *)OPT_KEY;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

- (id<JavaUtilSet>)getOurFamily;

- (NSString *)getOurFamilyName;

- (jboolean)hasFamily;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (void)shutdown;

- (id<JavaUtilMap>)signWithNSString:(NSString *)family
                 withNetI2pDataHash:(NetI2pDataHash *)h;

- (jboolean)verifyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

- (jboolean)verifyOurFamilyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterCryptoFamilyKeyCrypto)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_PROP_KEYSTORE_PASSWORD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, PROP_KEYSTORE_PASSWORD, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_PROP_FAMILY_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, PROP_FAMILY_NAME, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_PROP_KEY_PASSWORD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, PROP_KEY_PASSWORD, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_CERT_SUFFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, CERT_SUFFIX, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_CRL_SUFFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_CRL_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, CRL_SUFFIX, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_KEYSTORE_PREFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, KEYSTORE_PREFIX, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_KEYSTORE_SUFFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, KEYSTORE_SUFFIX, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_CN_SUFFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, CN_SUFFIX, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_OPT_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, OPT_NAME, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_OPT_SIG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, OPT_SIG, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_OPT_KEY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, OPT_KEY, NSString *)

FOUNDATION_EXPORT void NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterCryptoFamilyKeyCrypto *self, NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT NetI2pRouterCryptoFamilyKeyCrypto *new_NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterCryptoFamilyKeyCrypto *create_NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT void NetI2pRouterCryptoFamilyKeyCrypto_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoFamilyKeyCrypto)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterCryptoFamilyKeyCrypto")
