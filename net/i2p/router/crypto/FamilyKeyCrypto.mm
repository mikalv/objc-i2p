//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/crypto/FamilyKeyCrypto.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/crypto/FamilyKeyCrypto.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SecureDirectory.h"

@interface NetI2pRouterCryptoFamilyKeyCrypto () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _verified_;
  id<JavaUtilSet> _negativeCache_;
  id<JavaUtilSet> _ourFamily_;
  NSString *_fname_;
  NetI2pDataSigningPrivateKey *_privkey_;
  NetI2pDataSigningPublicKey *_pubkey_;
}

- (NetI2pDataSigningPrivateKey *)initialize__ OBJC_METHOD_FAMILY_NONE;

- (jboolean)verifyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                    withNSString:(NSString *)name;

- (void)verifyKeyStoreWithJavaIoFile:(JavaIoFile *)ks;

- (void)createKeyStoreWithJavaIoFile:(JavaIoFile *)ks;

- (void)exportCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

- (void)exportCRLWithJavaIoFile:(JavaIoFile *)ksdir
    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

- (NetI2pDataSigningPublicKey *)loadCertWithNSString:(NSString *)familyName;

- (NetI2pDataSigningPrivateKey *)getPrivKeyWithJavaIoFile:(JavaIoFile *)ks;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _verified_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _negativeCache_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _ourFamily_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _fname_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _privkey_, NetI2pDataSigningPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterCryptoFamilyKeyCrypto, _pubkey_, NetI2pDataSigningPublicKey *)

inline jint NetI2pRouterCryptoFamilyKeyCrypto_get_DEFAULT_KEY_VALID_DAYS(void);
#define NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_VALID_DAYS 3652
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoFamilyKeyCrypto, DEFAULT_KEY_VALID_DAYS, jint)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_DEFAULT_KEY_ALGORITHM(void);
static NSString *NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_ALGORITHM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, DEFAULT_KEY_ALGORITHM, NSString *)

inline jint NetI2pRouterCryptoFamilyKeyCrypto_get_DEFAULT_KEY_SIZE(void);
static jint NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, DEFAULT_KEY_SIZE, jint)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_KS_DIR(void);
static NSString *NetI2pRouterCryptoFamilyKeyCrypto_KS_DIR = @"keystore";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, KS_DIR, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_CERT_DIR(void);
static NSString *NetI2pRouterCryptoFamilyKeyCrypto_CERT_DIR = @"certificates/family";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, CERT_DIR, NSString *)

inline NSString *NetI2pRouterCryptoFamilyKeyCrypto_get_CRL_DIR(void);
static NSString *NetI2pRouterCryptoFamilyKeyCrypto_CRL_DIR = @"crls";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterCryptoFamilyKeyCrypto, CRL_DIR, NSString *)

__attribute__((unused)) static NetI2pDataSigningPrivateKey *NetI2pRouterCryptoFamilyKeyCrypto_initialize__(NetI2pRouterCryptoFamilyKeyCrypto *self);

__attribute__((unused)) static jboolean NetI2pRouterCryptoFamilyKeyCrypto_verifyWithNetI2pDataRouterRouterInfo_withNSString_(NetI2pRouterCryptoFamilyKeyCrypto *self, NetI2pDataRouterRouterInfo *ri, NSString *name);

__attribute__((unused)) static void NetI2pRouterCryptoFamilyKeyCrypto_verifyKeyStoreWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks);

__attribute__((unused)) static void NetI2pRouterCryptoFamilyKeyCrypto_createKeyStoreWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks);

__attribute__((unused)) static void NetI2pRouterCryptoFamilyKeyCrypto_exportCertWithJavaSecurityCertX509Certificate_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static void NetI2pRouterCryptoFamilyKeyCrypto_exportCRLWithJavaIoFile_withJavaSecurityCertX509CRL_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ksdir, JavaSecurityCertX509CRL *crl);

__attribute__((unused)) static NetI2pDataSigningPublicKey *NetI2pRouterCryptoFamilyKeyCrypto_loadCertWithNSString_(NetI2pRouterCryptoFamilyKeyCrypto *self, NSString *familyName);

__attribute__((unused)) static NetI2pDataSigningPrivateKey *NetI2pRouterCryptoFamilyKeyCrypto_getPrivKeyWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterCryptoFamilyKeyCrypto)

NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD = @"netdb.family.keystorePassword";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME = @"netdb.family.name";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD = @"netdb.family.keyPassword";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX = @".crt";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_CRL_SUFFIX = @".crl";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX = @"family-";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX = @".ks";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX = @".family.i2p.net";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME = @"family";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG = @"family.sig";
NSString *NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY = @"family.key";

@implementation NetI2pRouterCryptoFamilyKeyCrypto

+ (NSString *)PROP_KEYSTORE_PASSWORD {
  return NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD;
}

+ (NSString *)PROP_FAMILY_NAME {
  return NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME;
}

+ (NSString *)PROP_KEY_PASSWORD {
  return NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD;
}

+ (NSString *)CERT_SUFFIX {
  return NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX;
}

+ (NSString *)CRL_SUFFIX {
  return NetI2pRouterCryptoFamilyKeyCrypto_CRL_SUFFIX;
}

+ (NSString *)KEYSTORE_PREFIX {
  return NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX;
}

+ (NSString *)KEYSTORE_SUFFIX {
  return NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX;
}

+ (NSString *)CN_SUFFIX {
  return NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX;
}

+ (NSString *)OPT_NAME {
  return NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME;
}

+ (NSString *)OPT_SIG {
  return NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG;
}

+ (NSString *)OPT_KEY {
  return NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (NetI2pDataSigningPrivateKey *)initialize__ {
  return NetI2pRouterCryptoFamilyKeyCrypto_initialize__(self);
}

- (void)shutdown {
  [((id<JavaUtilMap>) nil_chk(_verified_)) clear];
  [((id<JavaUtilSet>) nil_chk(_negativeCache_)) clear];
}

- (id<JavaUtilMap>)signWithNSString:(NSString *)family
                 withNetI2pDataHash:(NetI2pDataHash *)h {
  if (_privkey_ == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"family name now set, must restart router to generate or load keys"];
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"family name now set, must restart router to generate or load keys");
  }
  if (h == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"null router hash");
  if (![((NSString *) nil_chk(_fname_)) isEqual:family]) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"family name changed, must restart router to generate or load new keys"];
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"family name changed, must restart router to generate or load new keys");
  }
  IOSByteArray *nb = NetI2pDataDataHelper_getUTF8WithNSString_(_fname_);
  jint len = ((IOSByteArray *) nil_chk(nb))->size_ + NetI2pDataHash_HASH_LENGTH;
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nb, 0, b, 0, nb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([h getData], 0, b, nb->size_, NetI2pDataHash_HASH_LENGTH);
  NetI2pDataSignature *sig = [((NetI2pCryptoDSAEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) dsa])) signWithByteArray:b withNetI2pDataSigningPrivateKey:_privkey_];
  if (sig == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"sig failed");
  id<JavaUtilMap> rv = create_JavaUtilHashMap_initWithInt_(3);
  [rv putWithId:NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME withId:family];
  [rv putWithId:NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY withId:JreStrcat("IC$", [((NetI2pCryptoSigType *) nil_chk([((NetI2pDataSigningPublicKey *) nil_chk(_pubkey_)) getType])) getCode], ':', [_pubkey_ toBase64])];
  [rv putWithId:NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG withId:[sig toBase64]];
  return rv;
}

- (jboolean)hasFamily {
  return _pubkey_ != nil;
}

- (id<JavaUtilSet>)getOurFamily {
  return _ourFamily_;
}

- (NSString *)getOurFamilyName {
  return _fname_;
}

- (jboolean)verifyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  NSString *name = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getOptionWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME];
  if (name == nil) return true;
  return NetI2pRouterCryptoFamilyKeyCrypto_verifyWithNetI2pDataRouterRouterInfo_withNSString_(self, ri, name);
}

- (jboolean)verifyOurFamilyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  if (_pubkey_ == nil) return false;
  NSString *name = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getOptionWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME];
  if (![((NSString *) nil_chk(_fname_)) isEqual:name]) return false;
  NetI2pDataHash *h = [ri getHash];
  if ([((id<JavaUtilSet>) nil_chk(_ourFamily_)) containsWithId:h]) return true;
  if ([((NetI2pDataHash *) nil_chk(h)) isEqual:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]]) return false;
  jboolean rv = NetI2pRouterCryptoFamilyKeyCrypto_verifyWithNetI2pDataRouterRouterInfo_withNSString_(self, ri, name);
  if (rv) {
    [_ourFamily_ addWithId:h];
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$$$@", @"Found and verified member of our family (", _fname_, @"): ", h)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$$$@", @"Found spoofed member of our family (", _fname_, @"): ", h)];
  }
  return rv;
}

- (jboolean)verifyWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri
                                    withNSString:(NSString *)name {
  return NetI2pRouterCryptoFamilyKeyCrypto_verifyWithNetI2pDataRouterRouterInfo_withNSString_(self, ri, name);
}

- (void)verifyKeyStoreWithJavaIoFile:(JavaIoFile *)ks {
  NetI2pRouterCryptoFamilyKeyCrypto_verifyKeyStoreWithJavaIoFile_(self, ks);
}

- (void)createKeyStoreWithJavaIoFile:(JavaIoFile *)ks {
  NetI2pRouterCryptoFamilyKeyCrypto_createKeyStoreWithJavaIoFile_(self, ks);
}

- (void)exportCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  NetI2pRouterCryptoFamilyKeyCrypto_exportCertWithJavaSecurityCertX509Certificate_(self, cert);
}

- (void)exportCRLWithJavaIoFile:(JavaIoFile *)ksdir
    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  NetI2pRouterCryptoFamilyKeyCrypto_exportCRLWithJavaIoFile_withJavaSecurityCertX509CRL_(self, ksdir, crl);
}

- (NetI2pDataSigningPublicKey *)loadCertWithNSString:(NSString *)familyName {
  return NetI2pRouterCryptoFamilyKeyCrypto_loadCertWithNSString_(self, familyName);
}

- (NetI2pDataSigningPrivateKey *)getPrivKeyWithJavaIoFile:(JavaIoFile *)ks {
  return NetI2pRouterCryptoFamilyKeyCrypto_getPrivKeyWithJavaIoFile_(self, ks);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterCryptoFamilyKeyCrypto_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_verified_);
  RELEASE_(_negativeCache_);
  RELEASE_(_ourFamily_);
  RELEASE_(_fname_);
  RELEASE_(_privkey_);
  RELEASE_(_pubkey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x2, 2, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 3, 4, 1, 5, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, 14, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x2, 21, 12, 1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(initialize__);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(signWithNSString:withNetI2pDataHash:);
  methods[4].selector = @selector(hasFamily);
  methods[5].selector = @selector(getOurFamily);
  methods[6].selector = @selector(getOurFamilyName);
  methods[7].selector = @selector(verifyWithNetI2pDataRouterRouterInfo:);
  methods[8].selector = @selector(verifyOurFamilyWithNetI2pDataRouterRouterInfo:);
  methods[9].selector = @selector(verifyWithNetI2pDataRouterRouterInfo:withNSString:);
  methods[10].selector = @selector(verifyKeyStoreWithJavaIoFile:);
  methods[11].selector = @selector(createKeyStoreWithJavaIoFile:);
  methods[12].selector = @selector(exportCertWithJavaSecurityCertX509Certificate:);
  methods[13].selector = @selector(exportCRLWithJavaIoFile:withJavaSecurityCertX509CRL:);
  methods[14].selector = @selector(loadCertWithNSString:);
  methods[15].selector = @selector(getPrivKeyWithJavaIoFile:);
  methods[16].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_verified_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
    { "_negativeCache_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "_ourFamily_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "_fname_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_privkey_", "LNetI2pDataSigningPrivateKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pubkey_", "LNetI2pDataSigningPublicKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_KEYSTORE_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "PROP_FAMILY_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "PROP_KEY_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "CERT_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "CRL_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "KEYSTORE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "KEYSTORE_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "CN_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "DEFAULT_KEY_VALID_DAYS", "I", .constantValue.asInt = NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_VALID_DAYS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_KEY_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "DEFAULT_KEY_SIZE", "I", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "KS_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "CERT_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "CRL_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "OPT_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "OPT_SIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "OPT_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LJavaSecurityGeneralSecurityException;", "initialize", "sign", "LNSString;LNetI2pDataHash;", "(Ljava/lang/String;Lnet/i2p/data/Hash;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "verify", "LNetI2pDataRouterRouterInfo;", "verifyOurFamily", "LNetI2pDataRouterRouterInfo;LNSString;", "verifyKeyStore", "LJavaIoFile;", "createKeyStore", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "exportCert", "LJavaSecurityCertX509Certificate;", "exportCRL", "LJavaIoFile;LJavaSecurityCertX509CRL;", "loadCert", "LNSString;", "getPrivKey", "main", "[LNSString;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/String;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", &NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD, &NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME, &NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, &NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX, &NetI2pRouterCryptoFamilyKeyCrypto_CRL_SUFFIX, &NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX, &NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX, &NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX, &NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_ALGORITHM, &NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_SIZE, &NetI2pRouterCryptoFamilyKeyCrypto_KS_DIR, &NetI2pRouterCryptoFamilyKeyCrypto_CERT_DIR, &NetI2pRouterCryptoFamilyKeyCrypto_CRL_DIR, &NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME, &NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG, &NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY };
  static const J2ObjcClassInfo _NetI2pRouterCryptoFamilyKeyCrypto = { "FamilyKeyCrypto", "net.i2p.router.crypto", ptrTable, methods, fields, 7, 0x1, 17, 25, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterCryptoFamilyKeyCrypto;
}

+ (void)initialize {
  if (self == [NetI2pRouterCryptoFamilyKeyCrypto class]) {
    JreStrongAssign(&NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_ALGORITHM, [((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) isAvailable] ? @"EC" : @"DSA");
    NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_SIZE = [JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256) isAvailable] ? 256 : 1024;
    J2OBJC_SET_INITIALIZED(NetI2pRouterCryptoFamilyKeyCrypto)
  }
}

@end

void NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterCryptoFamilyKeyCrypto *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterCryptoFamilyKeyCrypto_class_()]);
  JreStrongAssign(&self->_fname_, [self->_context_ getPropertyWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME]);
  if (self->_fname_ != nil) {
    if ([self->_fname_ java_contains:@"/"] || [self->_fname_ java_contains:@"\\"] || [self->_fname_ java_contains:@".."] || [(create_JavaIoFile_initWithNSString_(self->_fname_)) isAbsolute] || [self->_fname_ java_length] <= 0) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$", @"Illegal family name: ", self->_fname_));
  }
  JreStrongAssign(&self->_privkey_, (self->_fname_ != nil) ? NetI2pRouterCryptoFamilyKeyCrypto_initialize__(self) : nil);
  JreStrongAssign(&self->_pubkey_, (self->_privkey_ != nil) ? [self->_privkey_ toPublic] : nil);
  JreStrongAssignAndConsume(&self->_verified_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_negativeCache_, new_NetI2pUtilConcurrentHashSet_initWithInt_(4));
  JreStrongAssign(&self->_ourFamily_, (self->_privkey_ != nil) ? create_NetI2pUtilConcurrentHashSet_initWithInt_(4) : JavaUtilCollections_emptySet());
}

NetI2pRouterCryptoFamilyKeyCrypto *new_NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterCryptoFamilyKeyCrypto, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterCryptoFamilyKeyCrypto *create_NetI2pRouterCryptoFamilyKeyCrypto_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterCryptoFamilyKeyCrypto, initWithNetI2pRouterRouterContext_, context)
}

NetI2pDataSigningPrivateKey *NetI2pRouterCryptoFamilyKeyCrypto_initialize__(NetI2pRouterCryptoFamilyKeyCrypto *self) {
  JavaIoFile *dir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getConfigDir], NetI2pRouterCryptoFamilyKeyCrypto_KS_DIR);
  JavaIoFile *keyStore = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, JreStrcat("$$$", NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX, self->_fname_, NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX));
  NetI2pRouterCryptoFamilyKeyCrypto_verifyKeyStoreWithJavaIoFile_(self, keyStore);
  return NetI2pRouterCryptoFamilyKeyCrypto_getPrivKeyWithJavaIoFile_(self, keyStore);
}

jboolean NetI2pRouterCryptoFamilyKeyCrypto_verifyWithNetI2pDataRouterRouterInfo_withNSString_(NetI2pRouterCryptoFamilyKeyCrypto *self, NetI2pDataRouterRouterInfo *ri, NSString *name) {
  NetI2pDataHash *h = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getHash];
  NSString *ssig = [ri getOptionWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_OPT_SIG];
  if (ssig == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@C$", @"No sig for ", h, ' ', name)];
    return false;
  }
  NSString *nameAndSig = [((id<JavaUtilMap>) nil_chk(self->_verified_)) getWithId:h];
  NSString *riNameAndSig = JreStrcat("$$", name, ssig);
  if (nameAndSig != nil) {
    if ([nameAndSig isEqual:riNameAndSig]) return true;
    [self->_verified_ removeWithId:h];
  }
  NetI2pDataSigningPublicKey *spk;
  if ([((NSString *) nil_chk(name)) isEqual:self->_fname_]) {
    spk = self->_pubkey_;
  }
  else {
    if ([((id<JavaUtilSet>) nil_chk(self->_negativeCache_)) containsWithId:h]) return false;
    spk = NetI2pRouterCryptoFamilyKeyCrypto_loadCertWithNSString_(self, name);
    if (spk == nil) {
      NSString *skey = [ri getOptionWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_OPT_KEY];
      if (skey != nil) {
        jint colon = [skey java_indexOf:':'];
        if (colon < 0) colon = [skey java_indexOf:';'];
        if (colon > 0) {
          @try {
            jint code = JavaLangInteger_parseIntWithNSString_([skey java_substring:0 endIndex:colon]);
            NetI2pCryptoSigType *type = NetI2pCryptoSigType_getByCodeWithInt_(code);
            if (type != nil) {
              IOSByteArray *bkey = NetI2pDataBase64_decodeWithNSString_([skey java_substring:colon + 1]);
              if (bkey != nil) {
                spk = create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(type, bkey);
              }
            }
          }
          @catch (JavaLangNumberFormatException *e) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Bad b64 family key: ", ri) withJavaLangThrowable:e];
          }
          @catch (JavaLangIllegalArgumentException *e) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Bad b64 family key: ", ri) withJavaLangThrowable:e];
          }
          @catch (JavaLangArrayIndexOutOfBoundsException *e) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Bad b64 family key: ", ri) withJavaLangThrowable:e];
          }
        }
      }
      if (spk == nil) {
        [self->_negativeCache_ addWithId:h];
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@C$", @"No cert or valid key for ", h, ' ', name)];
        return false;
      }
    }
  }
  if (![((NetI2pCryptoSigType *) nil_chk([((NetI2pDataSigningPublicKey *) nil_chk(spk)) getType])) isAvailable]) {
    [((id<JavaUtilSet>) nil_chk(self->_negativeCache_)) addWithId:h];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Unsupported crypto for sig for ", h)];
    return false;
  }
  IOSByteArray *bsig = NetI2pDataBase64_decodeWithNSString_(ssig);
  if (bsig == nil) {
    [((id<JavaUtilSet>) nil_chk(self->_negativeCache_)) addWithId:h];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@C$C$", @"Bad sig for ", h, ' ', name, ' ', ssig)];
    return false;
  }
  NetI2pDataSignature *sig;
  @try {
    sig = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_([spk getType], bsig);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    [((id<JavaUtilSet>) nil_chk(self->_negativeCache_)) addWithId:h];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Bad sig for ", ri) withJavaLangThrowable:iae];
    return false;
  }
  IOSByteArray *nb = NetI2pDataDataHelper_getUTF8WithNSString_(name);
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(nb))->size_ + NetI2pDataHash_HASH_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nb, 0, b, 0, nb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk([ri getHash])) getData], 0, b, nb->size_, NetI2pDataHash_HASH_LENGTH);
  jboolean rv = [((NetI2pCryptoDSAEngine *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) dsa])) verifySignatureWithNetI2pDataSignature:sig withByteArray:b withNetI2pDataSigningPublicKey:spk];
  if (rv) [self->_verified_ putWithId:h withId:riNameAndSig];
  else [((id<JavaUtilSet>) nil_chk(self->_negativeCache_)) addWithId:h];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$Z$@C$C$", @"Verified? ", rv, @" for ", h, ' ', name, ' ', ssig)];
  return rv;
}

void NetI2pRouterCryptoFamilyKeyCrypto_verifyKeyStoreWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks) {
  if ([((JavaIoFile *) nil_chk(ks)) exists]) {
    if ([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD] == nil) {
      NSString *s = JreStrcat("$$$$", @"Family key error, must set ", NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, @" in ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], @"router.config")) getAbsolutePath]);
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:s];
      @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(s);
    }
    return;
  }
  JavaIoFile *dir = [ks getParentFile];
  if (![((JavaIoFile *) nil_chk(dir)) exists]) {
    JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithNSString_([dir getAbsolutePath]);
    if (![sdir mkdirs]) {
      NSString *s = JreStrcat("$$$$", @"Family key error, must set ", NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, @" in ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getConfigDir], @"router.config")) getAbsolutePath]);
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:s];
      @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(s);
    }
  }
  @try {
    NetI2pRouterCryptoFamilyKeyCrypto_createKeyStoreWithJavaIoFile_(self, ks);
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"Failed to create NetDb family keystore", ioe);
  }
}

void NetI2pRouterCryptoFamilyKeyCrypto_createKeyStoreWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks) {
  NSString *keyPassword = NetI2pCryptoKeyStoreUtil_randomString();
  NSString *cname = JreStrcat("$$", self->_fname_, NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX);
  IOSObjectArray *rv = NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, self->_fname_, cname, @"family", NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_VALID_DAYS, NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_ALGORITHM, NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_SIZE, keyPassword);
  id<JavaUtilMap> changes = create_JavaUtilHashMap_init();
  [changes putWithId:NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD withId:NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD];
  [changes putWithId:NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD withId:keyPassword];
  [changes putWithId:NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME withId:self->_fname_];
  [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
  [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$$$$$$C$C$C$C$C$", @"Created new private key for netdb family \"", self->_fname_, @"\" in keystore: ", [((JavaIoFile *) nil_chk(ks)) getAbsolutePath], @"\nCopy the keystore to the other routers in the family,\nand add the following entries to their router.config file:\n", NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME, '=', self->_fname_, 0x000a, NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD, '=', NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, 0x000a, NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, '=', keyPassword)];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(rv), 2), [JavaSecurityCertX509Certificate class]);
  NetI2pRouterCryptoFamilyKeyCrypto_exportCertWithJavaSecurityCertX509Certificate_(self, cert);
  JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk(IOSObjectArray_Get(rv, 3), [JavaSecurityCertX509CRL class]);
  NetI2pRouterCryptoFamilyKeyCrypto_exportCRLWithJavaIoFile_withJavaSecurityCertX509CRL_(self, [ks getParentFile], crl);
}

void NetI2pRouterCryptoFamilyKeyCrypto_exportCertWithJavaSecurityCertX509Certificate_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaSecurityCertX509Certificate *cert) {
  JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getConfigDir], NetI2pRouterCryptoFamilyKeyCrypto_CERT_DIR);
  if ([sdir exists] || [sdir mkdirs]) {
    NSString *name = JreStrcat("$$", [((NSString *) nil_chk(self->_fname_)) java_replace:@"@" withSequence:@"_at_"], NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX);
    JavaIoFile *out = create_JavaIoFile_initWithJavaIoFile_withNSString_(sdir, name);
    jboolean success = NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(cert, out);
    if (success) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$$$$$$$", @"Created new public key certificate for netdb family \"", self->_fname_, @"\" in file: ", [out getAbsolutePath], @"\nThe certificate will be associated with your router identity.\nCopy the certificate to the directory $I2P/", NetI2pRouterCryptoFamilyKeyCrypto_CERT_DIR, @" for each of the other routers in the family.\nGive this certificate to an I2P developer for inclusion in the next I2P release.")];
    }
    else {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error saving family key certificate"];
    }
  }
  else {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error saving family key certificate"];
  }
}

void NetI2pRouterCryptoFamilyKeyCrypto_exportCRLWithJavaIoFile_withJavaSecurityCertX509CRL_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ksdir, JavaSecurityCertX509CRL *crl) {
  JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(ksdir, NetI2pRouterCryptoFamilyKeyCrypto_CRL_DIR);
  if ([sdir exists] || [sdir mkdirs]) {
    NSString *name = JreStrcat("$$CJ$", NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX, [((NSString *) nil_chk(self->_fname_)) java_replace:@"@" withSequence:@"_at_"], '-', JavaLangSystem_currentTimeMillis(), NetI2pRouterCryptoFamilyKeyCrypto_CRL_SUFFIX);
    JavaIoFile *out = create_JavaIoFile_initWithJavaIoFile_withNSString_(sdir, name);
    jboolean success = NetI2pCryptoCertUtil_saveCRLWithJavaSecurityCertX509CRL_withJavaIoFile_(crl, out);
    if (success) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$$$$$", @"Created certificate revocation list (CRL) for netdb family \"", self->_fname_, @"\" in file: ", [out getAbsolutePath], @"\nBack up the keystore and CRL files and keep them secure.\nIf your private key is ever compromised, give the CRL to an I2P developer for publication.")];
    }
    else {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error saving family key CRL"];
    }
  }
  else {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error saving family key CRL"];
  }
}

NetI2pDataSigningPublicKey *NetI2pRouterCryptoFamilyKeyCrypto_loadCertWithNSString_(NetI2pRouterCryptoFamilyKeyCrypto *self, NSString *familyName) {
  if ([((NSString *) nil_chk(familyName)) java_contains:@"/"] || [familyName java_contains:@"\\"] || [familyName java_contains:@".."] || [(create_JavaIoFile_initWithNSString_(familyName)) isAbsolute]) return nil;
  familyName = [familyName java_replace:@"@" withSequence:@"_at_"];
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBaseDir], NetI2pRouterCryptoFamilyKeyCrypto_CERT_DIR);
  JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, JreStrcat("$$", familyName, NetI2pRouterCryptoFamilyKeyCrypto_CERT_SUFFIX));
  if (![file exists]) return nil;
  @try {
    id<JavaSecurityPublicKey> pk = NetI2pCryptoCertUtil_loadKeyWithJavaIoFile_(file);
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_(pk);
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$", @"Error loading family key ", familyName) withJavaLangThrowable:gse];
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$", @"Error loading family key ", familyName) withJavaLangThrowable:ioe];
  }
  return nil;
}

NetI2pDataSigningPrivateKey *NetI2pRouterCryptoFamilyKeyCrypto_getPrivKeyWithJavaIoFile_(NetI2pRouterCryptoFamilyKeyCrypto *self, JavaIoFile *ks) {
  NSString *ksPass = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD withNSString:NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD];
  NSString *keyPass = [self->_context_ getPropertyWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD];
  if (keyPass == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$$$", @"No key password, set ", NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, @" in ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], @"router.config")) getAbsolutePath]));
  @try {
    id<JavaSecurityPrivateKey> pk = NetI2pCryptoKeyStoreUtil_getPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_(ks, ksPass, self->_fname_, keyPass);
    if (pk == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$", @"Family key not found: ", self->_fname_));
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_(pk);
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error loading family key ", self->_fname_), ioe);
  }
}

void NetI2pRouterCryptoFamilyKeyCrypto_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterCryptoFamilyKeyCrypto_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ != 2) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: FamilyKeyCrypto keystore.ks familyname"];
    JavaLangSystem_exitWithInt_(1);
  }
  JavaIoFile *ks = create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 0));
  if ([ks exists]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Keystore already exists: ", ks)];
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *fname = IOSObjectArray_Get(args, 1);
  NSString *cname = JreStrcat("$$", fname, NetI2pRouterCryptoFamilyKeyCrypto_CN_SUFFIX);
  NSString *keyPassword = NetI2pCryptoKeyStoreUtil_randomString();
  @try {
    NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, fname, cname, @"family", NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_VALID_DAYS, NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_ALGORITHM, NetI2pRouterCryptoFamilyKeyCrypto_DEFAULT_KEY_SIZE, keyPassword);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$$C$$$$$C$C$C$C$C$", @"Family keys generated and saved in ", ks, @"\nCopy to ", NetI2pRouterCryptoFamilyKeyCrypto_KS_DIR, '/', NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_PREFIX, fname, NetI2pRouterCryptoFamilyKeyCrypto_KEYSTORE_SUFFIX, @" in the i2p configuration directory\nFamily key configuration for router.config:\n", NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME, '=', fname, 0x000a, NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEYSTORE_PASSWORD, '=', NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, 0x000a, NetI2pRouterCryptoFamilyKeyCrypto_PROP_KEY_PASSWORD, '=', keyPassword)];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Failed"];
    [e printStackTrace];
    JavaLangSystem_exitWithInt_(1);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCryptoFamilyKeyCrypto)
