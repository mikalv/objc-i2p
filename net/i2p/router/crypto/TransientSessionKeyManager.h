//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/crypto/TransientSessionKeyManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterCryptoTransientSessionKeyManager")
#ifdef RESTRICT_NetI2pRouterCryptoTransientSessionKeyManager
#define INCLUDE_ALL_NetI2pRouterCryptoTransientSessionKeyManager 0
#else
#define INCLUDE_ALL_NetI2pRouterCryptoTransientSessionKeyManager 1
#endif
#undef RESTRICT_NetI2pRouterCryptoTransientSessionKeyManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterCryptoTransientSessionKeyManager_) && (INCLUDE_ALL_NetI2pRouterCryptoTransientSessionKeyManager || defined(INCLUDE_NetI2pRouterCryptoTransientSessionKeyManager))
#define NetI2pRouterCryptoTransientSessionKeyManager_

#define RESTRICT_NetI2pCryptoSessionKeyManager 1
#define INCLUDE_NetI2pCryptoSessionKeyManager 1
#include "net/i2p/crypto/SessionKeyManager.h"

@class JavaIoWriter;
@class NetI2pDataPublicKey;
@class NetI2pDataSessionKey;
@class NetI2pDataSessionTag;
@class NetI2pI2PAppContext;
@protocol JavaUtilSet;
@protocol NetI2pCryptoTagSetHandle;

@interface NetI2pRouterCryptoTransientSessionKeyManager : NetI2pCryptoSessionKeyManager {
 @public
  NetI2pI2PAppContext *_context_;
}
@property (readonly, class) jint MAX_INBOUND_SESSION_TAGS NS_SWIFT_NAME(MAX_INBOUND_SESSION_TAGS);
@property (readonly, class) jint DEFAULT_TAGS NS_SWIFT_NAME(DEFAULT_TAGS);
@property (readonly, class) jint LOW_THRESHOLD NS_SWIFT_NAME(LOW_THRESHOLD);

+ (jint)MAX_INBOUND_SESSION_TAGS;

+ (jint)DEFAULT_TAGS;

+ (jint)LOW_THRESHOLD;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                              withInt:(jint)tagsToSend
                                              withInt:(jint)lowThreshold;

- (NetI2pDataSessionTag *)consumeNextAvailableTagWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (NetI2pDataSessionKey *)consumeTagWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag;

- (void)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                    withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
               withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
           withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts;

- (jint)getAvailableTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (jlong)getAvailableTimeLeftWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (NetI2pDataSessionKey *)getCurrentKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (NetI2pDataSessionKey *)getCurrentOrNewKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (jint)getLowThreshold;

- (jint)getTagsToSend;

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg;

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                          withInt:(jint)lowThreshold;

- (void)shutdown;

- (void)tagsAckedWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
            withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts;

- (id<NetI2pCryptoTagSetHandle>)tagsDeliveredWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                     withJavaUtilSet:(id<JavaUtilSet>)sessionTags;

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags;

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags
                                    withLong:(jlong)expire;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterCryptoTransientSessionKeyManager)

J2OBJC_FIELD_SETTER(NetI2pRouterCryptoTransientSessionKeyManager, _context_, NetI2pI2PAppContext *)

inline jint NetI2pRouterCryptoTransientSessionKeyManager_get_MAX_INBOUND_SESSION_TAGS(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_MAX_INBOUND_SESSION_TAGS 750000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, MAX_INBOUND_SESSION_TAGS, jint)

inline jint NetI2pRouterCryptoTransientSessionKeyManager_get_DEFAULT_TAGS(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_DEFAULT_TAGS 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, DEFAULT_TAGS, jint)

inline jint NetI2pRouterCryptoTransientSessionKeyManager_get_LOW_THRESHOLD(void);
#define NetI2pRouterCryptoTransientSessionKeyManager_LOW_THRESHOLD 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterCryptoTransientSessionKeyManager, LOW_THRESHOLD, jint)

FOUNDATION_EXPORT void NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pRouterCryptoTransientSessionKeyManager *new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterCryptoTransientSessionKeyManager *create_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

FOUNDATION_EXPORT void NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pRouterCryptoTransientSessionKeyManager *self, NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold);

FOUNDATION_EXPORT NetI2pRouterCryptoTransientSessionKeyManager *new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterCryptoTransientSessionKeyManager *create_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint tagsToSend, jint lowThreshold);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterCryptoTransientSessionKeyManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterCryptoTransientSessionKeyManager")
