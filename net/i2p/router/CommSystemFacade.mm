//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/CommSystemFacade.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/transport/Transport.h"
#include "net/i2p/router/transport/crypto/DHSessionKeyBuilder.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static IOSObjectArray *NetI2pRouterCommSystemFacade__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterCommSystemFacade__Annotations$1(void);

@interface NetI2pRouterCommSystemFacade_Status () {
 @public
  jint code_;
  NSString *status_;
}

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterCommSystemFacade_Status, status_, NSString *)

__attribute__((unused)) static void NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(NetI2pRouterCommSystemFacade_Status *self, jint code, NSString *status, NSString *__name, jint __ordinal);

__attribute__((unused)) static NSString *NetI2pRouterCommSystemFacade_Status__xWithNSString_(NSString *s);

@implementation NetI2pRouterCommSystemFacade

+ (jshort)STATUS_OK {
  return NetI2pRouterCommSystemFacade_STATUS_OK;
}

+ (jshort)STATUS_IPV4_OK_IPV6_UNKNOWN {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_UNKNOWN;
}

+ (jshort)STATUS_IPV4_OK_IPV6_FIREWALLED {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_FIREWALLED;
}

+ (jshort)STATUS_IPV4_UNKNOWN_IPV6_OK {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_OK;
}

+ (jshort)STATUS_IPV4_FIREWALLED_IPV6_OK {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_OK;
}

+ (jshort)STATUS_IPV4_DISABLED_IPV6_OK {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_OK;
}

+ (jshort)STATUS_IPV4_SNAT_IPV6_OK {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_OK;
}

+ (jshort)STATUS_DIFFERENT {
  return NetI2pRouterCommSystemFacade_STATUS_DIFFERENT;
}

+ (jshort)STATUS_IPV4_SNAT_IPV6_UNKNOWN {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_UNKNOWN;
}

+ (jshort)STATUS_IPV4_FIREWALLED_IPV6_UNKNOWN {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_UNKNOWN;
}

+ (jshort)STATUS_REJECT_UNSOLICITED {
  return NetI2pRouterCommSystemFacade_STATUS_REJECT_UNSOLICITED;
}

+ (jshort)STATUS_IPV4_UNKNOWN_IPV6_FIREWALLED {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_FIREWALLED;
}

+ (jshort)STATUS_IPV4_DISABLED_IPV6_UNKNOWN {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_UNKNOWN;
}

+ (jshort)STATUS_IPV4_DISABLED_IPV6_FIREWALLED {
  return NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_FIREWALLED;
}

+ (jshort)STATUS_DISCONNECTED {
  return NetI2pRouterCommSystemFacade_STATUS_DISCONNECTED;
}

+ (jshort)STATUS_HOSED {
  return NetI2pRouterCommSystemFacade_STATUS_HOSED;
}

+ (jshort)STATUS_UNKNOWN {
  return NetI2pRouterCommSystemFacade_STATUS_UNKNOWN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterCommSystemFacade_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  [self renderStatusHTMLWithJavaIoWriter:outArg withNSString:nil withInt:0];
}

- (id<JavaUtilList>)createAddresses {
  return JavaUtilCollections_emptyList();
}

- (jint)countActivePeers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)countActiveSendPeers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)haveInboundCapacityWithInt:(jint)pct {
  return true;
}

- (jboolean)haveOutboundCapacityWithInt:(jint)pct {
  return true;
}

- (jboolean)haveHighOutboundCapacity {
  return true;
}

- (id<JavaUtilList>)getMostRecentErrorMessages {
  return JavaUtilCollections_emptyList();
}

- (JavaLangLong *)getMedianPeerClockSkew {
  return nil;
}

- (jlong)getFramedAveragePeerClockSkewWithInt:(jint)percentToInclude {
  return 0;
}

- (jshort)getReachabilityStatus {
  return (jshort) [((NetI2pRouterCommSystemFacade_Status *) nil_chk([self getStatus])) getCode];
}

- (NetI2pRouterCommSystemFacade_Status *)getStatus {
  return JreLoadEnum(NetI2pRouterCommSystemFacade_Status, OK);
}

- (void)recheckReachability {
}

- (jboolean)isBackloggedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (jboolean)wasUnreachableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getIPWithNetI2pDataHash:(NetI2pDataHash *)dest {
  return nil;
}

- (void)queueLookupWithByteArray:(IOSByteArray *)ip {
}

- (void)mayDisconnectWithNetI2pDataHash:(NetI2pDataHash *)peer {
}

- (NSString *)getOurCountry {
  return nil;
}

- (jboolean)isInBadCountry {
  return false;
}

- (jboolean)isInBadCountryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (jboolean)isInBadCountryWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  return false;
}

- (NSString *)getCountryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return nil;
}

- (NSString *)getCountryNameWithNSString:(NSString *)code {
  return code;
}

- (NSString *)renderPeerHTMLWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(peer)) toBase64])) java_substring:0 endIndex:4];
}

- (id<JavaUtilSortedMap>)getTransports {
  return create_JavaUtilTreeMap_init();
}

- (id<JavaUtilSet>)getEstablished {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isDummy {
  return true;
}

- (void)notifyReplaceAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
}

- (void)notifyRemoveAddressWithNetI2pDataRouterRouterAddress:(NetI2pDataRouterRouterAddress *)address {
}

- (void)notifyRemoveAddressWithBoolean:(jboolean)ipv6 {
}

- (void)registerTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
}

- (void)unregisterTransportWithNetI2pRouterTransportTransport:(id<NetI2pRouterTransportTransport>)t {
}

- (id<NetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory>)getDHFactory {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 17, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, -1, -1, -1, 29, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportCryptoDHSessionKeyBuilder_Factory;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processMessageWithNetI2pRouterOutNetMessage:);
  methods[2].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  methods[3].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[4].selector = @selector(createAddresses);
  methods[5].selector = @selector(countActivePeers);
  methods[6].selector = @selector(countActiveSendPeers);
  methods[7].selector = @selector(haveInboundCapacityWithInt:);
  methods[8].selector = @selector(haveOutboundCapacityWithInt:);
  methods[9].selector = @selector(haveHighOutboundCapacity);
  methods[10].selector = @selector(getMostRecentErrorMessages);
  methods[11].selector = @selector(getMedianPeerClockSkew);
  methods[12].selector = @selector(getFramedAveragePeerClockSkewWithInt:);
  methods[13].selector = @selector(getReachabilityStatus);
  methods[14].selector = @selector(getStatus);
  methods[15].selector = @selector(recheckReachability);
  methods[16].selector = @selector(isBackloggedWithNetI2pDataHash:);
  methods[17].selector = @selector(wasUnreachableWithNetI2pDataHash:);
  methods[18].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[19].selector = @selector(getIPWithNetI2pDataHash:);
  methods[20].selector = @selector(queueLookupWithByteArray:);
  methods[21].selector = @selector(mayDisconnectWithNetI2pDataHash:);
  methods[22].selector = @selector(getOurCountry);
  methods[23].selector = @selector(isInBadCountry);
  methods[24].selector = @selector(isInBadCountryWithNetI2pDataHash:);
  methods[25].selector = @selector(isInBadCountryWithNetI2pDataRouterRouterInfo:);
  methods[26].selector = @selector(getCountryWithNetI2pDataHash:);
  methods[27].selector = @selector(getCountryNameWithNSString:);
  methods[28].selector = @selector(renderPeerHTMLWithNetI2pDataHash:);
  methods[29].selector = @selector(getTransports);
  methods[30].selector = @selector(getEstablished);
  methods[31].selector = @selector(isDummy);
  methods[32].selector = @selector(notifyReplaceAddressWithNetI2pDataRouterRouterAddress:);
  methods[33].selector = @selector(notifyRemoveAddressWithNetI2pDataRouterRouterAddress:);
  methods[34].selector = @selector(notifyRemoveAddressWithBoolean:);
  methods[35].selector = @selector(registerTransportWithNetI2pRouterTransportTransport:);
  methods[36].selector = @selector(unregisterTransportWithNetI2pRouterTransportTransport:);
  methods[37].selector = @selector(getDHFactory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATUS_OK", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_OK, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_OK_IPV6_UNKNOWN", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_OK_IPV6_FIREWALLED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_FIREWALLED, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_UNKNOWN_IPV6_OK", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_OK, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_FIREWALLED_IPV6_OK", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_OK, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_DISABLED_IPV6_OK", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_OK, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_SNAT_IPV6_OK", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_OK, 0x19, -1, -1, -1, -1 },
    { "STATUS_DIFFERENT", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_DIFFERENT, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_SNAT_IPV6_UNKNOWN", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_FIREWALLED_IPV6_UNKNOWN", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "STATUS_REJECT_UNSOLICITED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_REJECT_UNSOLICITED, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_UNKNOWN_IPV6_FIREWALLED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_FIREWALLED, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_DISABLED_IPV6_UNKNOWN", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "STATUS_IPV4_DISABLED_IPV6_FIREWALLED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_FIREWALLED, 0x19, -1, -1, -1, -1 },
    { "STATUS_DISCONNECTED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_DISCONNECTED, 0x19, -1, -1, -1, -1 },
    { "STATUS_HOSED", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_HOSED, 0x19, -1, -1, -1, -1 },
    { "STATUS_UNKNOWN", "S", .constantValue.asShort = NetI2pRouterCommSystemFacade_STATUS_UNKNOWN, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "processMessage", "LNetI2pRouterOutNetMessage;", "renderStatusHTML", "LJavaIoWriter;LNSString;I", "LJavaIoIOException;", "LJavaIoWriter;", "()Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "haveInboundCapacity", "I", "haveOutboundCapacity", "()Ljava/util/List<Ljava/lang/String;>;", "getFramedAveragePeerClockSkew", (void *)&NetI2pRouterCommSystemFacade__Annotations$0, (void *)&NetI2pRouterCommSystemFacade__Annotations$1, "isBacklogged", "LNetI2pDataHash;", "wasUnreachable", "isEstablished", "getIP", "queueLookup", "[B", "mayDisconnect", "isInBadCountry", "LNetI2pDataRouterRouterInfo;", "getCountry", "getCountryName", "LNSString;", "renderPeerHTML", "()Ljava/util/SortedMap<Ljava/lang/String;Lnet/i2p/router/transport/Transport;>;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "notifyReplaceAddress", "LNetI2pDataRouterRouterAddress;", "notifyRemoveAddress", "Z", "registerTransport", "LNetI2pRouterTransportTransport;", "unregisterTransport", "LNetI2pRouterCommSystemFacade_Status;" };
  static const J2ObjcClassInfo _NetI2pRouterCommSystemFacade = { "CommSystemFacade", "net.i2p.router", ptrTable, methods, fields, 7, 0x401, 38, 17, -1, 37, -1, -1, -1 };
  return &_NetI2pRouterCommSystemFacade;
}

@end

void NetI2pRouterCommSystemFacade_init(NetI2pRouterCommSystemFacade *self) {
  NSObject_init(self);
}

IOSObjectArray *NetI2pRouterCommSystemFacade__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterCommSystemFacade__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCommSystemFacade)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterCommSystemFacade_Status)

NetI2pRouterCommSystemFacade_Status *NetI2pRouterCommSystemFacade_Status_values_[17];

@implementation NetI2pRouterCommSystemFacade_Status

+ (NetI2pRouterCommSystemFacade_Status *)OK {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, OK);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_OK_IPV6_UNKNOWN {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_OK_IPV6_FIREWALLED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_UNKNOWN_IPV6_OK {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_FIREWALLED_IPV6_OK {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_DISABLED_IPV6_OK {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_SNAT_IPV6_OK {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK);
}

+ (NetI2pRouterCommSystemFacade_Status *)DIFFERENT {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_SNAT_IPV6_UNKNOWN {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_UNKNOWN);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_FIREWALLED_IPV6_UNKNOWN {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN);
}

+ (NetI2pRouterCommSystemFacade_Status *)REJECT_UNSOLICITED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_UNKNOWN_IPV6_FIREWALLED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_DISABLED_IPV6_UNKNOWN {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN);
}

+ (NetI2pRouterCommSystemFacade_Status *)IPV4_DISABLED_IPV6_FIREWALLED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
}

+ (NetI2pRouterCommSystemFacade_Status *)DISCONNECTED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED);
}

+ (NetI2pRouterCommSystemFacade_Status *)HOSED {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, HOSED);
}

+ (NetI2pRouterCommSystemFacade_Status *)UNKNOWN {
  return JreEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN);
}

- (jint)getCode {
  return code_;
}

+ (NetI2pRouterCommSystemFacade_Status *)mergeWithNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)oldStatus
                                              withNetI2pRouterCommSystemFacade_Status:(NetI2pRouterCommSystemFacade_Status *)newStatus {
  return NetI2pRouterCommSystemFacade_Status_mergeWithNetI2pRouterCommSystemFacade_Status_withNetI2pRouterCommSystemFacade_Status_(oldStatus, newStatus);
}

- (NSString *)toStatusString {
  return status_;
}

- (NSString *)description {
  return JreStrcat("$$I$$C", [super description], @" (", code_, @"; ", status_, ')');
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterCommSystemFacade_Status__xWithNSString_(s);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterCommSystemFacade_Status_values();
}

+ (NetI2pRouterCommSystemFacade_Status *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterCommSystemFacade_Status_valueOfWithNSString_(name);
}

- (NetI2pRouterCommSystemFacade_Status_Enum)toNSEnum {
  return (NetI2pRouterCommSystemFacade_Status_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LNetI2pRouterCommSystemFacade_Status;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade_Status;", 0x9, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCode);
  methods[1].selector = @selector(mergeWithNetI2pRouterCommSystemFacade_Status:withNetI2pRouterCommSystemFacade_Status:);
  methods[2].selector = @selector(toStatusString);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(_xWithNSString:);
  methods[5].selector = @selector(values);
  methods[6].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OK", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "IPV4_OK_IPV6_UNKNOWN", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "IPV4_OK_IPV6_FIREWALLED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "IPV4_UNKNOWN_IPV6_OK", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "IPV4_FIREWALLED_IPV6_OK", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "IPV4_DISABLED_IPV6_OK", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "IPV4_SNAT_IPV6_OK", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "DIFFERENT", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "IPV4_SNAT_IPV6_UNKNOWN", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "IPV4_FIREWALLED_IPV6_UNKNOWN", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "REJECT_UNSOLICITED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "IPV4_UNKNOWN_IPV6_FIREWALLED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "IPV4_DISABLED_IPV6_UNKNOWN", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "IPV4_DISABLED_IPV6_FIREWALLED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "DISCONNECTED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "HOSED", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "UNKNOWN", "LNetI2pRouterCommSystemFacade_Status;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "status_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "merge", "LNetI2pRouterCommSystemFacade_Status;LNetI2pRouterCommSystemFacade_Status;", "toString", "_x", "LNSString;", "valueOf", &JreEnum(NetI2pRouterCommSystemFacade_Status, OK), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK), &JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_UNKNOWN), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN), &JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN), &JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED), &JreEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED), &JreEnum(NetI2pRouterCommSystemFacade_Status, HOSED), &JreEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN), "LNetI2pRouterCommSystemFacade;", "Ljava/lang/Enum<Lnet/i2p/router/CommSystemFacade$Status;>;" };
  static const J2ObjcClassInfo _NetI2pRouterCommSystemFacade_Status = { "Status", "net.i2p.router", ptrTable, methods, fields, 7, 0x4019, 7, 19, 23, -1, -1, 24, -1 };
  return &_NetI2pRouterCommSystemFacade_Status;
}

+ (void)initialize {
  if (self == [NetI2pRouterCommSystemFacade_Status class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 17 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, OK) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_OK, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"OK"), @"OK", 0);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_UNKNOWN) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_UNKNOWN, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: OK; IPv6: Testing"), @"IPV4_OK_IPV6_UNKNOWN", 1);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_OK_IPV6_FIREWALLED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: OK; IPv6: Firewalled"), @"IPV4_OK_IPV6_FIREWALLED", 2);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_OK) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_OK, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Testing; IPv6: OK"), @"IPV4_UNKNOWN_IPV6_OK", 3);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_OK, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Firewalled; IPv6: OK"), @"IPV4_FIREWALLED_IPV6_OK", 4);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_OK, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Disabled; IPv6: OK"), @"IPV4_DISABLED_IPV6_OK", 5);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_OK, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Symmetric NAT; IPv6: OK"), @"IPV4_SNAT_IPV6_OK", 6);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_DIFFERENT, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"Symmetric NAT"), @"DIFFERENT", 7);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_UNKNOWN) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_SNAT_IPV6_UNKNOWN, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Symmetric NAT; IPv6: Testing"), @"IPV4_SNAT_IPV6_UNKNOWN", 8);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_UNKNOWN) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_FIREWALLED_IPV6_UNKNOWN, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Firewalled; IPv6: Testing"), @"IPV4_FIREWALLED_IPV6_UNKNOWN", 9);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_REJECT_UNSOLICITED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"Firewalled"), @"REJECT_UNSOLICITED", 10);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_UNKNOWN_IPV6_FIREWALLED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_UNKNOWN_IPV6_FIREWALLED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Testing; IPv6: Firewalled"), @"IPV4_UNKNOWN_IPV6_FIREWALLED", 11);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_UNKNOWN) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_UNKNOWN, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Disabled; IPv6: Testing"), @"IPV4_DISABLED_IPV6_UNKNOWN", 12);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_IPV4_DISABLED_IPV6_FIREWALLED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"IPv4: Disabled; IPv6: Firewalled"), @"IPV4_DISABLED_IPV6_FIREWALLED", 13);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_DISCONNECTED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"Disconnected"), @"DISCONNECTED", 14);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, HOSED) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_HOSED, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"Port Conflict"), @"HOSED", 15);
    ((void) (JreEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(e, NetI2pRouterCommSystemFacade_STATUS_UNKNOWN, NetI2pRouterCommSystemFacade_Status__xWithNSString_(@"Testing"), @"UNKNOWN", 16);
    J2OBJC_SET_INITIALIZED(NetI2pRouterCommSystemFacade_Status)
  }
}

@end

void NetI2pRouterCommSystemFacade_Status_initWithInt_withNSString_withNSString_withInt_(NetI2pRouterCommSystemFacade_Status *self, jint code, NSString *status, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->code_ = code;
  JreStrongAssign(&self->status_, status);
}

NetI2pRouterCommSystemFacade_Status *NetI2pRouterCommSystemFacade_Status_mergeWithNetI2pRouterCommSystemFacade_Status_withNetI2pRouterCommSystemFacade_Status_(NetI2pRouterCommSystemFacade_Status *oldStatus, NetI2pRouterCommSystemFacade_Status *newStatus) {
  NetI2pRouterCommSystemFacade_Status_initialize();
  if (oldStatus == newStatus || newStatus == JreEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN)) return oldStatus;
  if (oldStatus == JreEnum(NetI2pRouterCommSystemFacade_Status, UNKNOWN) || oldStatus == JreEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED) || oldStatus == JreEnum(NetI2pRouterCommSystemFacade_Status, HOSED)) return newStatus;
  switch ([newStatus ordinal]) {
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      return oldStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return newStatus;
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return oldStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK);
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_FIREWALLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return newStatus;
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      return oldStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return oldStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_OK_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, REJECT_UNSOLICITED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_DISABLED_IPV6_FIREWALLED);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return newStatus;
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
    switch ([oldStatus ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      return newStatus;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, IPV4_SNAT_IPV6_OK);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      return JreEnum(NetI2pRouterCommSystemFacade_Status, DIFFERENT);
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      return newStatus;
      default:
      return newStatus;
    }
    case NetI2pRouterCommSystemFacade_Status_Enum_UNKNOWN:
    return oldStatus;
    default:
    return newStatus;
  }
}

NSString *NetI2pRouterCommSystemFacade_Status__xWithNSString_(NSString *s) {
  NetI2pRouterCommSystemFacade_Status_initialize();
  return s;
}

IOSObjectArray *NetI2pRouterCommSystemFacade_Status_values() {
  NetI2pRouterCommSystemFacade_Status_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterCommSystemFacade_Status_values_ count:17 type:NetI2pRouterCommSystemFacade_Status_class_()];
}

NetI2pRouterCommSystemFacade_Status *NetI2pRouterCommSystemFacade_Status_valueOfWithNSString_(NSString *name) {
  NetI2pRouterCommSystemFacade_Status_initialize();
  for (int i = 0; i < 17; i++) {
    NetI2pRouterCommSystemFacade_Status *e = NetI2pRouterCommSystemFacade_Status_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterCommSystemFacade_Status *NetI2pRouterCommSystemFacade_Status_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterCommSystemFacade_Status_initialize();
  if (ordinal >= 17) {
    return nil;
  }
  return NetI2pRouterCommSystemFacade_Status_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterCommSystemFacade_Status)
