//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/KeyManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataStructure.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/LeaseSetKeys.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/startup/CreateRouterInfoJob.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"

@interface NetI2pRouterKeyManager () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pDataPrivateKey *_privateKey_;
  NetI2pDataPublicKey *_publicKey_;
  NetI2pDataSigningPrivateKey *_signingPrivateKey_;
  NetI2pDataSigningPublicKey *_signingPublicKey_;
  id<JavaUtilMap> _leaseSetKeys_;
}

- (void)queueWrite;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _privateKey_, NetI2pDataPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _publicKey_, NetI2pDataPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _signingPrivateKey_, NetI2pDataSigningPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _signingPublicKey_, NetI2pDataSigningPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterKeyManager, _leaseSetKeys_, id<JavaUtilMap>)

__attribute__((unused)) static void NetI2pRouterKeyManager_queueWrite(NetI2pRouterKeyManager *self);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterKeyManager__Annotations$0(void);

@interface NetI2pRouterKeyManager_SynchronizeKeysJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterKeyManager *this$0_;
}

- (instancetype)initWithNetI2pRouterKeyManager:(NetI2pRouterKeyManager *)outer$;

- (void)runJob;

- (void)syncKeysWithJavaIoFile:(JavaIoFile *)keyDir;

- (void)syncPrivateKeyWithJavaIoFile:(JavaIoFile *)keyDir;

- (void)syncPublicKeyWithJavaIoFile:(JavaIoFile *)keyDir;

- (void)syncSigningKeyWithJavaIoFile:(JavaIoFile *)keyDir
             withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (void)syncVerificationKeyWithJavaIoFile:(JavaIoFile *)keyDir
                  withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (id<NetI2pDataDataStructure>)syncKeyWithJavaIoFile:(JavaIoFile *)keyFile
                         withNetI2pDataDataStructure:(id<NetI2pDataDataStructure>)structure
                                         withBoolean:(jboolean)exists;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterKeyManager_SynchronizeKeysJob)

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, NetI2pRouterKeyManager *outer$);

__attribute__((unused)) static NetI2pRouterKeyManager_SynchronizeKeysJob *new_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterKeyManager_SynchronizeKeysJob *create_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager *outer$);

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeysWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir);

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_syncPrivateKeyWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir);

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_syncPublicKeyWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir);

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_syncSigningKeyWithJavaIoFile_withNetI2pCryptoSigType_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir, NetI2pCryptoSigType *type);

__attribute__((unused)) static void NetI2pRouterKeyManager_SynchronizeKeysJob_syncVerificationKeyWithJavaIoFile_withNetI2pCryptoSigType_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir, NetI2pCryptoSigType *type);

__attribute__((unused)) static id<NetI2pDataDataStructure> NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyFile, id<NetI2pDataDataStructure> structure, jboolean exists);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterKeyManager_SynchronizeKeysJob)

NSString *NetI2pRouterKeyManager_PROP_KEYDIR = @"router.keyBackupDir";
NSString *NetI2pRouterKeyManager_DEFAULT_KEYDIR = @"keyBackup";
NSString *NetI2pRouterKeyManager_KEYFILE_PRIVATE_ENC = @"privateEncryption.key";
NSString *NetI2pRouterKeyManager_KEYFILE_PUBLIC_ENC = @"publicEncryption.key";
NSString *NetI2pRouterKeyManager_KEYFILE_PRIVATE_SIGNING = @"privateSigning.key";
NSString *NetI2pRouterKeyManager_KEYFILE_PUBLIC_SIGNING = @"publicSigning.key";

@implementation NetI2pRouterKeyManager

+ (NSString *)PROP_KEYDIR {
  return NetI2pRouterKeyManager_PROP_KEYDIR;
}

+ (NSString *)DEFAULT_KEYDIR {
  return NetI2pRouterKeyManager_DEFAULT_KEYDIR;
}

+ (NSString *)KEYFILE_PRIVATE_ENC {
  return NetI2pRouterKeyManager_KEYFILE_PRIVATE_ENC;
}

+ (NSString *)KEYFILE_PUBLIC_ENC {
  return NetI2pRouterKeyManager_KEYFILE_PUBLIC_ENC;
}

+ (NSString *)KEYFILE_PRIVATE_SIGNING {
  return NetI2pRouterKeyManager_KEYFILE_PRIVATE_SIGNING;
}

+ (NSString *)KEYFILE_PUBLIC_SIGNING {
  return NetI2pRouterKeyManager_KEYFILE_PUBLIC_SIGNING;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterKeyManager_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)startup {
  [(create_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(self)) runJob];
}

- (void)setKeysWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)key1
              withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)key2
        withNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)key3
       withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)key4 {
  @synchronized(self) {
    JreStrongAssign(&_publicKey_, key1);
    JreStrongAssign(&_privateKey_, key2);
    JreStrongAssign(&_signingPublicKey_, key3);
    JreStrongAssign(&_signingPrivateKey_, key4);
  }
  NetI2pRouterKeyManager_queueWrite(self);
}

- (NetI2pDataPrivateKey *)getPrivateKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_privateKey_);
  }
}

- (NetI2pDataPublicKey *)getPublicKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_publicKey_);
  }
}

- (NetI2pDataSigningPrivateKey *)getSigningPrivateKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_signingPrivateKey_);
  }
}

- (NetI2pDataSigningPublicKey *)getSigningPublicKey {
  @synchronized(self) {
    return JreRetainedLocalValue(_signingPublicKey_);
  }
}

- (void)registerKeysWithNetI2pDataDestination:(NetI2pDataDestination *)dest
              withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)leaseRevocationPrivateKey
                     withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)endpointDecryptionKey {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Registering keys for destination ", [((NetI2pDataHash *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) calculateHash])) toBase64])];
  NetI2pRouterLeaseSetKeys *keys = create_NetI2pRouterLeaseSetKeys_initWithNetI2pDataDestination_withNetI2pDataSigningPrivateKey_withNetI2pDataPrivateKey_(dest, leaseRevocationPrivateKey, endpointDecryptionKey);
  [((id<JavaUtilMap>) nil_chk(_leaseSetKeys_)) putWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash] withId:keys];
}

- (void)queueWrite {
  NetI2pRouterKeyManager_queueWrite(self);
}

- (NetI2pRouterLeaseSetKeys *)unregisterKeysWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Unregistering keys for destination ", [((NetI2pDataHash *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) calculateHash])) toBase64])];
  return [((id<JavaUtilMap>) nil_chk(_leaseSetKeys_)) removeWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
}

- (NetI2pRouterLeaseSetKeys *)getKeysWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return [self getKeysWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
}

- (NetI2pRouterLeaseSetKeys *)getKeysWithNetI2pDataHash:(NetI2pDataHash *)dest {
  return [((id<JavaUtilMap>) nil_chk(_leaseSetKeys_)) getWithId:dest];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_privateKey_);
  RELEASE_(_publicKey_);
  RELEASE_(_signingPrivateKey_);
  RELEASE_(_signingPublicKey_);
  RELEASE_(_leaseSetKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPrivateKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPublicKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterLeaseSetKeys;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterLeaseSetKeys;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterLeaseSetKeys;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(setKeysWithNetI2pDataPublicKey:withNetI2pDataPrivateKey:withNetI2pDataSigningPublicKey:withNetI2pDataSigningPrivateKey:);
  methods[3].selector = @selector(getPrivateKey);
  methods[4].selector = @selector(getPublicKey);
  methods[5].selector = @selector(getSigningPrivateKey);
  methods[6].selector = @selector(getSigningPublicKey);
  methods[7].selector = @selector(registerKeysWithNetI2pDataDestination:withNetI2pDataSigningPrivateKey:withNetI2pDataPrivateKey:);
  methods[8].selector = @selector(queueWrite);
  methods[9].selector = @selector(unregisterKeysWithNetI2pDataDestination:);
  methods[10].selector = @selector(getKeysWithNetI2pDataDestination:);
  methods[11].selector = @selector(getKeysWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_privateKey_", "LNetI2pDataPrivateKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_publicKey_", "LNetI2pDataPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_signingPrivateKey_", "LNetI2pDataSigningPrivateKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_signingPublicKey_", "LNetI2pDataSigningPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_leaseSetKeys_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "PROP_KEYDIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "DEFAULT_KEYDIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "KEYFILE_PRIVATE_ENC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "KEYFILE_PUBLIC_ENC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "KEYFILE_PRIVATE_SIGNING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "KEYFILE_PUBLIC_SIGNING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", (void *)&NetI2pRouterKeyManager__Annotations$0, "setKeys", "LNetI2pDataPublicKey;LNetI2pDataPrivateKey;LNetI2pDataSigningPublicKey;LNetI2pDataSigningPrivateKey;", "registerKeys", "LNetI2pDataDestination;LNetI2pDataSigningPrivateKey;LNetI2pDataPrivateKey;", "unregisterKeys", "LNetI2pDataDestination;", "getKeys", "LNetI2pDataHash;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/LeaseSetKeys;>;", &NetI2pRouterKeyManager_PROP_KEYDIR, &NetI2pRouterKeyManager_DEFAULT_KEYDIR, &NetI2pRouterKeyManager_KEYFILE_PRIVATE_ENC, &NetI2pRouterKeyManager_KEYFILE_PUBLIC_ENC, &NetI2pRouterKeyManager_KEYFILE_PRIVATE_SIGNING, &NetI2pRouterKeyManager_KEYFILE_PUBLIC_SIGNING, "LNetI2pRouterKeyManager_SynchronizeKeysJob;" };
  static const J2ObjcClassInfo _NetI2pRouterKeyManager = { "KeyManager", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 12, 13, -1, 17, -1, -1, -1 };
  return &_NetI2pRouterKeyManager;
}

@end

void NetI2pRouterKeyManager_initWithNetI2pRouterRouterContext_(NetI2pRouterKeyManager *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterKeyManager_class_()]);
  JreStrongAssignAndConsume(&self->_leaseSetKeys_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

NetI2pRouterKeyManager *new_NetI2pRouterKeyManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterKeyManager, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterKeyManager *create_NetI2pRouterKeyManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterKeyManager, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterKeyManager_queueWrite(NetI2pRouterKeyManager *self) {
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(self)];
}

IOSObjectArray *NetI2pRouterKeyManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterKeyManager)

@implementation NetI2pRouterKeyManager_SynchronizeKeysJob

- (instancetype)initWithNetI2pRouterKeyManager:(NetI2pRouterKeyManager *)outer$ {
  NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(self, outer$);
  return self;
}

- (void)runJob {
  NSString *keyDir = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterKeyManager_PROP_KEYDIR withNSString:NetI2pRouterKeyManager_DEFAULT_KEYDIR];
  JavaIoFile *dir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getRouterDir], keyDir);
  if (![dir exists]) [dir mkdirs];
  if ([dir exists] && [dir isDirectory] && [dir canRead] && [dir canWrite]) {
    @synchronized(this$0_) {
      NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeysWithJavaIoFile_(self, dir);
    }
  }
  else {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$$", @"Unable to synchronize keys in ", keyDir, @" - permissions problem?")];
  }
}

- (void)syncKeysWithJavaIoFile:(JavaIoFile *)keyDir {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeysWithJavaIoFile_(self, keyDir);
}

- (void)syncPrivateKeyWithJavaIoFile:(JavaIoFile *)keyDir {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncPrivateKeyWithJavaIoFile_(self, keyDir);
}

- (void)syncPublicKeyWithJavaIoFile:(JavaIoFile *)keyDir {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncPublicKeyWithJavaIoFile_(self, keyDir);
}

- (void)syncSigningKeyWithJavaIoFile:(JavaIoFile *)keyDir
             withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncSigningKeyWithJavaIoFile_withNetI2pCryptoSigType_(self, keyDir, type);
}

- (void)syncVerificationKeyWithJavaIoFile:(JavaIoFile *)keyDir
                  withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncVerificationKeyWithJavaIoFile_withNetI2pCryptoSigType_(self, keyDir, type);
}

- (id<NetI2pDataDataStructure>)syncKeyWithJavaIoFile:(JavaIoFile *)keyFile
                         withNetI2pDataDataStructure:(id<NetI2pDataDataStructure>)structure
                                         withBoolean:(jboolean)exists {
  return NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(self, keyFile, structure, exists);
}

- (NSString *)getName {
  return @"Synchronize Keys to Disk";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDataStructure;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterKeyManager:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(syncKeysWithJavaIoFile:);
  methods[3].selector = @selector(syncPrivateKeyWithJavaIoFile:);
  methods[4].selector = @selector(syncPublicKeyWithJavaIoFile:);
  methods[5].selector = @selector(syncSigningKeyWithJavaIoFile:withNetI2pCryptoSigType:);
  methods[6].selector = @selector(syncVerificationKeyWithJavaIoFile:withNetI2pCryptoSigType:);
  methods[7].selector = @selector(syncKeyWithJavaIoFile:withNetI2pDataDataStructure:withBoolean:);
  methods[8].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterKeyManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "syncKeys", "LJavaIoFile;", "syncPrivateKey", "syncPublicKey", "syncSigningKey", "LJavaIoFile;LNetI2pCryptoSigType;", "syncVerificationKey", "syncKey", "LJavaIoFile;LNetI2pDataDataStructure;Z", "LNetI2pRouterKeyManager;" };
  static const J2ObjcClassInfo _NetI2pRouterKeyManager_SynchronizeKeysJob = { "SynchronizeKeysJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 9, 1, 9, -1, -1, -1, -1 };
  return &_NetI2pRouterKeyManager_SynchronizeKeysJob;
}

@end

void NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, NetI2pRouterKeyManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
}

NetI2pRouterKeyManager_SynchronizeKeysJob *new_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterKeyManager_SynchronizeKeysJob, initWithNetI2pRouterKeyManager_, outer$)
}

NetI2pRouterKeyManager_SynchronizeKeysJob *create_NetI2pRouterKeyManager_SynchronizeKeysJob_initWithNetI2pRouterKeyManager_(NetI2pRouterKeyManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterKeyManager_SynchronizeKeysJob, initWithNetI2pRouterKeyManager_, outer$)
}

void NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeysWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir) {
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncPrivateKeyWithJavaIoFile_(self, keyDir);
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncPublicKeyWithJavaIoFile_(self, keyDir);
  NetI2pCryptoSigType *type = NetI2pRouterStartupCreateRouterInfoJob_getSigTypeConfigWithNetI2pRouterRouterContext_([self getContext]);
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncSigningKeyWithJavaIoFile_withNetI2pCryptoSigType_(self, keyDir, type);
  NetI2pRouterKeyManager_SynchronizeKeysJob_syncVerificationKeyWithJavaIoFile_withNetI2pCryptoSigType_(self, keyDir, type);
}

void NetI2pRouterKeyManager_SynchronizeKeysJob_syncPrivateKeyWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir) {
  id<NetI2pDataDataStructure> ds;
  JavaIoFile *keyFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(keyDir, NetI2pRouterKeyManager_KEYFILE_PRIVATE_ENC);
  jboolean exists = (self->this$0_->_privateKey_ != nil);
  if (exists) ds = self->this$0_->_privateKey_;
  else ds = create_NetI2pDataPrivateKey_init();
  id<NetI2pDataDataStructure> readin = NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(self, keyFile, ds, exists);
  if (readin != nil && !exists) JreStrongAssign(&self->this$0_->_privateKey_, (NetI2pDataPrivateKey *) cast_chk(readin, [NetI2pDataPrivateKey class]));
}

void NetI2pRouterKeyManager_SynchronizeKeysJob_syncPublicKeyWithJavaIoFile_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir) {
  id<NetI2pDataDataStructure> ds;
  JavaIoFile *keyFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(keyDir, NetI2pRouterKeyManager_KEYFILE_PUBLIC_ENC);
  jboolean exists = (self->this$0_->_publicKey_ != nil);
  if (exists) ds = self->this$0_->_publicKey_;
  else ds = create_NetI2pDataPublicKey_init();
  id<NetI2pDataDataStructure> readin = NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(self, keyFile, ds, exists);
  if (readin != nil && !exists) JreStrongAssign(&self->this$0_->_publicKey_, (NetI2pDataPublicKey *) cast_chk(readin, [NetI2pDataPublicKey class]));
}

void NetI2pRouterKeyManager_SynchronizeKeysJob_syncSigningKeyWithJavaIoFile_withNetI2pCryptoSigType_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir, NetI2pCryptoSigType *type) {
  id<NetI2pDataDataStructure> ds;
  JavaIoFile *keyFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(keyDir, NetI2pRouterKeyManager_KEYFILE_PRIVATE_SIGNING);
  jboolean exists = (self->this$0_->_signingPrivateKey_ != nil);
  if (exists) ds = self->this$0_->_signingPrivateKey_;
  else ds = create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_(type);
  id<NetI2pDataDataStructure> readin = NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(self, keyFile, ds, exists);
  if (readin != nil && !exists) JreStrongAssign(&self->this$0_->_signingPrivateKey_, (NetI2pDataSigningPrivateKey *) cast_chk(readin, [NetI2pDataSigningPrivateKey class]));
}

void NetI2pRouterKeyManager_SynchronizeKeysJob_syncVerificationKeyWithJavaIoFile_withNetI2pCryptoSigType_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyDir, NetI2pCryptoSigType *type) {
  id<NetI2pDataDataStructure> ds;
  JavaIoFile *keyFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(keyDir, NetI2pRouterKeyManager_KEYFILE_PUBLIC_SIGNING);
  jboolean exists = (self->this$0_->_signingPublicKey_ != nil);
  if (exists) ds = self->this$0_->_signingPublicKey_;
  else ds = create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_(type);
  id<NetI2pDataDataStructure> readin = NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(self, keyFile, ds, exists);
  if (readin != nil && !exists) JreStrongAssign(&self->this$0_->_signingPublicKey_, (NetI2pDataSigningPublicKey *) cast_chk(readin, [NetI2pDataSigningPublicKey class]));
}

id<NetI2pDataDataStructure> NetI2pRouterKeyManager_SynchronizeKeysJob_syncKeyWithJavaIoFile_withNetI2pDataDataStructure_withBoolean_(NetI2pRouterKeyManager_SynchronizeKeysJob *self, JavaIoFile *keyFile, id<NetI2pDataDataStructure> structure, jboolean exists) {
  JavaIoOutputStream *out = nil;
  JavaIoInputStream *in = nil;
  @try {
    if (exists) {
      out = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(keyFile));
      [((id<NetI2pDataDataStructure>) nil_chk(structure)) writeBytesWithJavaIoOutputStream:out];
      return structure;
    }
    else {
      if ([((JavaIoFile *) nil_chk(keyFile)) exists]) {
        in = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(keyFile));
        [((id<NetI2pDataDataStructure>) nil_chk(structure)) readBytesWithJavaIoInputStream:in];
        return structure;
      }
      else {
        return nil;
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) errorWithNSString:JreStrcat("$$", @"Error syncing the structure to ", [((JavaIoFile *) nil_chk(keyFile)) getAbsolutePath]) withJavaLangThrowable:ioe];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) errorWithNSString:JreStrcat("$$", @"Error syncing the structure with ", [((JavaIoFile *) nil_chk(keyFile)) getAbsolutePath]) withJavaLangThrowable:dfe];
  }
  @finally {
    if (out != nil) @try {
      [out close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  if (exists) return structure;
  else return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterKeyManager_SynchronizeKeysJob)
