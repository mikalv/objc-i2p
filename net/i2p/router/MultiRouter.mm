//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/MultiRouter.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Properties.h"
#include "java/util/Scanner.h"
#include "java/util/Set.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/MultiRouter.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterMultiRouter ()

+ (void)internalReseed;

+ (JavaUtilProperties *)buildRouterPropsWithInt:(jint)id_;

+ (JavaUtilProperties *)getRouterPropsWithInt:(jint)id_;

+ (JavaUtilProperties *)buildClientPropsWithInt:(jint)id_;

+ (JavaUtilProperties *)getClientProps;

+ (NSString *)getBaseDirWithInt:(jint)id_;

+ (void)waitForCompletion;

+ (void)usage;

@end

inline jint NetI2pRouterMultiRouter_get_BASE_PORT(void);
#define NetI2pRouterMultiRouter_BASE_PORT 5000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMultiRouter, BASE_PORT, jint)

inline jint NetI2pRouterMultiRouter_get_nbrRouters(void);
inline jint NetI2pRouterMultiRouter_set_nbrRouters(jint value);
inline jint *NetI2pRouterMultiRouter_getRef_nbrRouters(void);
static jint NetI2pRouterMultiRouter_nbrRouters;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pRouterMultiRouter, nbrRouters, jint)

inline JavaIoPrintStream *NetI2pRouterMultiRouter_get__out(void);
inline JavaIoPrintStream *NetI2pRouterMultiRouter_set__out(JavaIoPrintStream *value);
static JavaIoPrintStream *NetI2pRouterMultiRouter__out;
J2OBJC_STATIC_FIELD_OBJ(NetI2pRouterMultiRouter, _out, JavaIoPrintStream *)

inline JavaUtilArrayList *NetI2pRouterMultiRouter_get__routers(void);
inline JavaUtilArrayList *NetI2pRouterMultiRouter_set__routers(JavaUtilArrayList *value);
static JavaUtilArrayList *NetI2pRouterMultiRouter__routers;
J2OBJC_STATIC_FIELD_OBJ(NetI2pRouterMultiRouter, _routers, JavaUtilArrayList *)

inline NetI2pI2PAppContext *NetI2pRouterMultiRouter_get__defaultContext(void);
inline NetI2pI2PAppContext *NetI2pRouterMultiRouter_set__defaultContext(NetI2pI2PAppContext *value);
static NetI2pI2PAppContext *NetI2pRouterMultiRouter__defaultContext;
J2OBJC_STATIC_FIELD_OBJ(NetI2pRouterMultiRouter, _defaultContext, NetI2pI2PAppContext *)

__attribute__((unused)) static void NetI2pRouterMultiRouter_internalReseed(void);

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterMultiRouter_buildRouterPropsWithInt_(jint id_);

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterMultiRouter_getRouterPropsWithInt_(jint id_);

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterMultiRouter_buildClientPropsWithInt_(jint id_);

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterMultiRouter_getClientProps(void);

__attribute__((unused)) static NSString *NetI2pRouterMultiRouter_getBaseDirWithInt_(jint id_);

__attribute__((unused)) static void NetI2pRouterMultiRouter_waitForCompletion(void);

__attribute__((unused)) static void NetI2pRouterMultiRouter_usage(void);

@interface NetI2pRouterMultiRouter_1 : JavaLangThread

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterMultiRouter_1)

__attribute__((unused)) static void NetI2pRouterMultiRouter_1_init(NetI2pRouterMultiRouter_1 *self);

__attribute__((unused)) static NetI2pRouterMultiRouter_1 *new_NetI2pRouterMultiRouter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterMultiRouter_1 *create_NetI2pRouterMultiRouter_1_init(void);

@interface NetI2pRouterMultiRouter_2 : JavaLangThread {
 @public
  NetI2pRouterRouter *val$r_;
}

- (instancetype)initWithNetI2pRouterRouter:(NetI2pRouterRouter *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterMultiRouter_2)

__attribute__((unused)) static void NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterMultiRouter_2 *self, NetI2pRouterRouter *capture$0);

__attribute__((unused)) static NetI2pRouterMultiRouter_2 *new_NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterRouter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterMultiRouter_2 *create_NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterRouter *capture$0);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterMultiRouter)

@implementation NetI2pRouterMultiRouter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterMultiRouter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterMultiRouter_mainWithNSStringArray_(args);
}

+ (void)internalReseed {
  NetI2pRouterMultiRouter_internalReseed();
}

+ (JavaUtilProperties *)buildRouterPropsWithInt:(jint)id_ {
  return NetI2pRouterMultiRouter_buildRouterPropsWithInt_(id_);
}

+ (JavaUtilProperties *)getRouterPropsWithInt:(jint)id_ {
  return NetI2pRouterMultiRouter_getRouterPropsWithInt_(id_);
}

+ (JavaUtilProperties *)buildClientPropsWithInt:(jint)id_ {
  return NetI2pRouterMultiRouter_buildClientPropsWithInt_(id_);
}

+ (JavaUtilProperties *)getClientProps {
  return NetI2pRouterMultiRouter_getClientProps();
}

+ (NSString *)getBaseDirWithInt:(jint)id_ {
  return NetI2pRouterMultiRouter_getBaseDirWithInt_(id_);
}

+ (void)waitForCompletion {
  NetI2pRouterMultiRouter_waitForCompletion();
}

+ (void)usage {
  NetI2pRouterMultiRouter_usage();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(internalReseed);
  methods[3].selector = @selector(buildRouterPropsWithInt:);
  methods[4].selector = @selector(getRouterPropsWithInt:);
  methods[5].selector = @selector(buildClientPropsWithInt:);
  methods[6].selector = @selector(getClientProps);
  methods[7].selector = @selector(getBaseDirWithInt:);
  methods[8].selector = @selector(waitForCompletion);
  methods[9].selector = @selector(usage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_PORT", "I", .constantValue.asInt = NetI2pRouterMultiRouter_BASE_PORT, 0x1a, -1, -1, -1, -1 },
    { "nbrRouters", "I", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "_out", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "_routers", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0xa, -1, 9, 10, -1 },
    { "_defaultContext", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "buildRouterProps", "I", "getRouterProps", "buildClientProps", "getBaseDir", &NetI2pRouterMultiRouter_nbrRouters, &NetI2pRouterMultiRouter__out, &NetI2pRouterMultiRouter__routers, "Ljava/util/ArrayList<Lnet/i2p/router/Router;>;", &NetI2pRouterMultiRouter__defaultContext };
  static const J2ObjcClassInfo _NetI2pRouterMultiRouter = { "MultiRouter", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMultiRouter;
}

+ (void)initialize {
  if (self == [NetI2pRouterMultiRouter class]) {
    JreStrongAssignAndConsume(&NetI2pRouterMultiRouter__routers, new_JavaUtilArrayList_initWithInt_(8));
    J2OBJC_SET_INITIALIZED(NetI2pRouterMultiRouter)
  }
}

@end

void NetI2pRouterMultiRouter_init(NetI2pRouterMultiRouter *self) {
  NSObject_init(self);
}

NetI2pRouterMultiRouter *new_NetI2pRouterMultiRouter_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterMultiRouter, init)
}

NetI2pRouterMultiRouter *create_NetI2pRouterMultiRouter_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterMultiRouter, init)
}

void NetI2pRouterMultiRouter_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterMultiRouter_initialize();
  if ((args == nil) || (((IOSObjectArray *) nil_chk(args))->size_ < 1)) {
    NetI2pRouterMultiRouter_usage();
    return;
  }
  JavaUtilScanner *scan = nil;
  @try {
    scan = create_JavaUtilScanner_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0));
    if (![scan hasNextInt]) {
      NetI2pRouterMultiRouter_usage();
      return;
    }
    NetI2pRouterMultiRouter_nbrRouters = [scan nextInt];
    if (NetI2pRouterMultiRouter_nbrRouters < 0) {
      NetI2pRouterMultiRouter_usage();
      return;
    }
  }
  @finally {
    if (scan != nil) [scan close];
  }
  JreStrongAssign(&NetI2pRouterMultiRouter__out, JreLoadStatic(JavaLangSystem, out));
  NetI2pRouterMultiRouter_buildClientPropsWithInt_(0);
  JreStrongAssignAndConsume(&NetI2pRouterMultiRouter__defaultContext, new_NetI2pI2PAppContext_initWithJavaUtilProperties_(NetI2pRouterMultiRouter_buildRouterPropsWithInt_(0)));
  [((NetI2pUtilClock *) nil_chk([NetI2pRouterMultiRouter__defaultContext clock])) setOffsetWithLong:0];
  [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("$I", @"RouterConsole for Router 0 is listening on: 127.0.0.1:", (NetI2pRouterMultiRouter_BASE_PORT - 1))];
  [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) addShutdownHookWithJavaLangThread:create_NetI2pRouterMultiRouter_1_init()];
  for (jint i = 0; i < NetI2pRouterMultiRouter_nbrRouters; i++) {
    NetI2pRouterRouter *router = create_NetI2pRouterRouter_initWithJavaUtilProperties_(NetI2pRouterMultiRouter_buildRouterPropsWithInt_(i));
    [router setKillVMOnEndWithBoolean:false];
    [((JavaUtilArrayList *) nil_chk(NetI2pRouterMultiRouter__routers)) addWithId:router];
    [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("$I$", @"Router ", i, @" was created")];
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  for (jint i = 0; i < NetI2pRouterMultiRouter_nbrRouters; i++) {
    NetI2pRouterRouter *r = [((JavaUtilArrayList *) nil_chk(NetI2pRouterMultiRouter__routers)) getWithInt:i];
    jlong offset = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([((NetI2pRouterRouter *) nil_chk(r)) getContext])) random])) nextLongWithLong:NetI2pRouterRouter_CLOCK_FUDGE_FACTOR / 2];
    if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([r getContext])) random])) nextBoolean]) offset = 0 - offset;
    [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([r getContext])) clock])) setOffsetWithLong:offset withBoolean:true];
    [(create_NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(r)) start];
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("$I$J", @"Router ", i, @" was started with time offset ", offset)];
  }
  [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:@"All routers have been started"];
  jint waitForRouters = (NetI2pRouterMultiRouter_nbrRouters / 10) * 1000;
  [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("$I$", @"Waiting ", waitForRouters / 1000, @" seconds for routers to startbefore doing the internal reseed")];
  @try {
    JavaLangThread_sleepWithLong_(waitForRouters);
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  NetI2pRouterMultiRouter_internalReseed();
  NetI2pRouterMultiRouter_waitForCompletion();
}

void NetI2pRouterMultiRouter_internalReseed() {
  NetI2pRouterMultiRouter_initialize();
  JavaUtilHashSet *riSet = create_JavaUtilHashSet_init();
  for (NetI2pRouterRouter * __strong r in nil_chk(NetI2pRouterMultiRouter__routers)) {
    [riSet addAllWithJavaUtilCollection:[((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([((NetI2pRouterRouter *) nil_chk(r)) getContext])) netDb])) getRouters]];
  }
  for (NetI2pRouterRouter * __strong r in NetI2pRouterMultiRouter__routers) {
    for (NetI2pDataRouterRouterInfo * __strong ri in riSet) {
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([((NetI2pRouterRouter *) nil_chk(r)) getContext])) netDb])) publishWithNetI2pDataRouterRouterInfo:ri];
    }
  }
  [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("I$", [riSet size], @" RouterInfos were reseeded")];
}

JavaUtilProperties *NetI2pRouterMultiRouter_buildRouterPropsWithInt_(jint id_) {
  NetI2pRouterMultiRouter_initialize();
  JavaUtilProperties *props = NetI2pRouterMultiRouter_getRouterPropsWithInt_(id_);
  JavaIoFile *f = create_JavaIoFile_initWithNSString_([((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@"router.configLocation"]);
  if (![f exists]) {
    [((JavaIoFile *) nil_chk([f getParentFile])) mkdirs];
    @try {
      NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(props, f);
    }
    @catch (JavaIoIOException *e) {
      [e printStackTrace];
    }
  }
  return props;
}

JavaUtilProperties *NetI2pRouterMultiRouter_getRouterPropsWithInt_(jint id_) {
  NetI2pRouterMultiRouter_initialize();
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:@"router.profileDir" withNSString:@"/peerProfiles"];
  [props setPropertyWithNSString:@"router.sessionKeys.location" withNSString:@"/sessionKeys.dat"];
  [props setPropertyWithNSString:@"router.info.location" withNSString:@"/router.info"];
  [props setPropertyWithNSString:@"router.keys.location" withNSString:@"/router.keys"];
  [props setPropertyWithNSString:@"router.networkDatabase.dbDir" withNSString:@"/netDb"];
  [props setPropertyWithNSString:@"router.tunnelPoolFile" withNSString:@"/tunnelPool.dat"];
  [props setPropertyWithNSString:@"router.keyBackupDir" withNSString:@"/keyBackup"];
  [props setPropertyWithNSString:@"router.clientConfigFile" withNSString:JreStrcat("$$", NetI2pRouterMultiRouter_getBaseDirWithInt_(id_), @"/clients.config")];
  [props setPropertyWithNSString:@"router.configLocation" withNSString:JreStrcat("$$", NetI2pRouterMultiRouter_getBaseDirWithInt_(id_), @"/router.config")];
  [props setPropertyWithNSString:@"router.pingFile" withNSString:JreStrcat("$$", NetI2pRouterMultiRouter_getBaseDirWithInt_(id_), @"/router.ping")];
  [props setPropertyWithNSString:@"router.rejectStartupTime" withNSString:@"0"];
  [props setPropertyWithNSString:@"router.reseedDisable" withNSString:@"true"];
  [props setPropertyWithNSString:@"i2p.dir.app" withNSString:NetI2pRouterMultiRouter_getBaseDirWithInt_(id_)];
  [props setPropertyWithNSString:@"i2p.dir.config" withNSString:NetI2pRouterMultiRouter_getBaseDirWithInt_(id_)];
  [props setPropertyWithNSString:@"i2p.dir.log" withNSString:NetI2pRouterMultiRouter_getBaseDirWithInt_(id_)];
  [props setPropertyWithNSString:@"i2p.dir.router" withNSString:NetI2pRouterMultiRouter_getBaseDirWithInt_(id_)];
  [props setPropertyWithNSString:@"i2p.dir.pid" withNSString:NetI2pRouterMultiRouter_getBaseDirWithInt_(id_)];
  [props setPropertyWithNSString:@"i2np.ntcp.hostname" withNSString:@"127.0.0.1"];
  [props setPropertyWithNSString:@"i2np.udp.host" withNSString:@"127.0.0.1"];
  [props setPropertyWithNSString:@"i2np.ntcp.port" withNSString:JreStrcat("I", NetI2pRouterMultiRouter_BASE_PORT + id_)];
  [props setPropertyWithNSString:@"i2np.udp.port" withNSString:JreStrcat("I", NetI2pRouterMultiRouter_BASE_PORT + id_)];
  [props setPropertyWithNSString:@"i2np.allowLocal" withNSString:@"true"];
  [props setPropertyWithNSString:@"i2np.udp.internalPort" withNSString:JreStrcat("I", NetI2pRouterMultiRouter_BASE_PORT + id_)];
  [props setPropertyWithNSString:@"i2cp.port" withNSString:JavaLangInteger_toStringWithInt_((NetI2pRouterMultiRouter_BASE_PORT + NetI2pRouterMultiRouter_nbrRouters + id_))];
  return props;
}

JavaUtilProperties *NetI2pRouterMultiRouter_buildClientPropsWithInt_(jint id_) {
  NetI2pRouterMultiRouter_initialize();
  JavaUtilProperties *rProps = NetI2pRouterMultiRouter_getRouterPropsWithInt_(id_);
  JavaUtilProperties *props = NetI2pRouterMultiRouter_getClientProps();
  JavaIoFile *f = create_JavaIoFile_initWithNSString_([((JavaUtilProperties *) nil_chk(rProps)) getPropertyWithNSString:@"router.clientConfigFile"]);
  if (![f exists]) {
    [((JavaIoFile *) nil_chk([f getParentFile])) mkdirs];
    @try {
      NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(props, f);
    }
    @catch (JavaIoIOException *e) {
      [e printStackTrace];
    }
  }
  return props;
}

JavaUtilProperties *NetI2pRouterMultiRouter_getClientProps() {
  NetI2pRouterMultiRouter_initialize();
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:@"clientApp.0.args" withNSString:JreStrcat("I$", (NetI2pRouterMultiRouter_BASE_PORT - 1), @" 127.0.0.1 ./webapps")];
  [props setPropertyWithNSString:@"clientApp.0.main" withNSString:@"net.i2p.router.web.RouterConsoleRunner"];
  [props setPropertyWithNSString:@"clientApp.0.name" withNSString:@"webconsole"];
  [props setPropertyWithNSString:@"clientApp.0.onBoot" withNSString:@"true"];
  [props setPropertyWithNSString:@"clientApp.1.args" withNSString:@"i2ptunnel.config"];
  [props setPropertyWithNSString:@"clientApp.1.main" withNSString:@"net.i2p.i2ptunnel.TunnelControllerGroup"];
  [props setPropertyWithNSString:@"clientApp.1.name" withNSString:@"tunnels"];
  [props setPropertyWithNSString:@"clientApp.1.delay" withNSString:@"6"];
  return props;
}

NSString *NetI2pRouterMultiRouter_getBaseDirWithInt_(jint id_) {
  NetI2pRouterMultiRouter_initialize();
  JavaIoFile *f = create_JavaIoFile_initWithNSString_(@".");
  return JreStrcat("$$$", [((JavaIoFile *) nil_chk([((JavaIoFile *) nil_chk([f getAbsoluteFile])) getParentFile])) description], @"/multirouter/", JavaLangInteger_toStringWithInt_(id_));
}

void NetI2pRouterMultiRouter_waitForCompletion() {
  NetI2pRouterMultiRouter_initialize();
  while (true) {
    jint alive = 0;
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(NetI2pRouterMultiRouter__routers)) size]; i++) {
      NetI2pRouterRouter *r = [((JavaUtilArrayList *) nil_chk(NetI2pRouterMultiRouter__routers)) getWithInt:i];
      if (![((NetI2pRouterRouter *) nil_chk(r)) isAlive]) {
        [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:JreStrcat("$I$", @"Router ", i, @" is dead")];
      }
      else {
        alive++;
      }
    }
    if (alive > 0) {
      @try {
        JavaLangThread_sleepWithLong_(30 * 1000);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    else {
      break;
    }
  }
  [((JavaIoPrintStream *) nil_chk(NetI2pRouterMultiRouter__out)) printlnWithNSString:@"All routers shut down"];
}

void NetI2pRouterMultiRouter_usage() {
  NetI2pRouterMultiRouter_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: MultiRouter nbr_routers"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Where nbr_routers > 0"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMultiRouter)

@implementation NetI2pRouterMultiRouter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterMultiRouter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(NetI2pRouterMultiRouter, _out))) printlnWithNSString:@"Shutting down in a few moments.."];
  for (NetI2pRouterRouter * __strong r in nil_chk(JreLoadStatic(NetI2pRouterMultiRouter, _routers))) {
    [((NetI2pRouterRouter *) nil_chk(r)) shutdownWithInt:0];
  }
  @try {
    JavaLangThread_sleepWithLong_(1500);
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) haltWithInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pRouterMultiRouter;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _NetI2pRouterMultiRouter_1 = { "", "net.i2p.router", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, -1, -1 };
  return &_NetI2pRouterMultiRouter_1;
}

@end

void NetI2pRouterMultiRouter_1_init(NetI2pRouterMultiRouter_1 *self) {
  JavaLangThread_init(self);
}

NetI2pRouterMultiRouter_1 *new_NetI2pRouterMultiRouter_1_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterMultiRouter_1, init)
}

NetI2pRouterMultiRouter_1 *create_NetI2pRouterMultiRouter_1_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterMultiRouter_1, init)
}

@implementation NetI2pRouterMultiRouter_2

- (instancetype)initWithNetI2pRouterRouter:(NetI2pRouterRouter *)capture$0 {
  NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(self, capture$0);
  return self;
}

- (void)run {
  [((NetI2pRouterRouter *) nil_chk(val$r_)) runRouter];
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouter:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LNetI2pRouterRouter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterMultiRouter;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _NetI2pRouterMultiRouter_2 = { "", "net.i2p.router", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_NetI2pRouterMultiRouter_2;
}

@end

void NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterMultiRouter_2 *self, NetI2pRouterRouter *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  JavaLangThread_init(self);
}

NetI2pRouterMultiRouter_2 *new_NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterRouter *capture$0) {
  J2OBJC_NEW_IMPL(NetI2pRouterMultiRouter_2, initWithNetI2pRouterRouter_, capture$0)
}

NetI2pRouterMultiRouter_2 *create_NetI2pRouterMultiRouter_2_initWithNetI2pRouterRouter_(NetI2pRouterRouter *capture$0) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMultiRouter_2, initWithNetI2pRouterRouter_, capture$0)
}
