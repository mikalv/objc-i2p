//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/JobStats.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/router/JobStats.h"

@interface NetI2pRouterJobStats () {
 @public
  NSString *_job_;
  JavaUtilConcurrentAtomicAtomicLong *_numRuns_;
  JavaUtilConcurrentAtomicAtomicLong *_numDropped_;
  JavaUtilConcurrentAtomicAtomicLong *_totalTime_;
  volatile_jlong _maxTime_;
  volatile_jlong _minTime_;
  JavaUtilConcurrentAtomicAtomicLong *_totalPendingTime_;
  volatile_jlong _maxPendingTime_;
  volatile_jlong _minPendingTime_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterJobStats, _job_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobStats, _numRuns_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobStats, _numDropped_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobStats, _totalTime_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobStats, _totalPendingTime_, JavaUtilConcurrentAtomicAtomicLong *)

@implementation NetI2pRouterJobStats

- (instancetype)initWithNSString:(NSString *)name {
  NetI2pRouterJobStats_initWithNSString_(self, name);
  return self;
}

- (void)jobRanWithLong:(jlong)runTime
              withLong:(jlong)lag {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numRuns_)) incrementAndGet];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalTime_)) addAndGetWithLong:runTime];
  if ((JreLoadVolatileLong(&_maxTime_) < 0) || (runTime > JreLoadVolatileLong(&_maxTime_))) JreAssignVolatileLong(&_maxTime_, runTime);
  if ((JreLoadVolatileLong(&_minTime_) < 0) || (runTime < JreLoadVolatileLong(&_minTime_))) JreAssignVolatileLong(&_minTime_, runTime);
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalPendingTime_)) addAndGetWithLong:lag];
  if ((JreLoadVolatileLong(&_maxPendingTime_) < 0) || (lag > JreLoadVolatileLong(&_maxPendingTime_))) JreAssignVolatileLong(&_maxPendingTime_, lag);
  if ((JreLoadVolatileLong(&_minPendingTime_) < 0) || (lag < JreLoadVolatileLong(&_minPendingTime_))) JreAssignVolatileLong(&_minPendingTime_, lag);
}

- (void)jobDropped {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numDropped_)) incrementAndGet];
}

- (jlong)getDropped {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numDropped_)) get];
}

- (NSString *)getName {
  return _job_;
}

- (jlong)getRuns {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numRuns_)) get];
}

- (jlong)getTotalTime {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalTime_)) get];
}

- (jlong)getMaxTime {
  return JreLoadVolatileLong(&_maxTime_);
}

- (jlong)getMinTime {
  return JreLoadVolatileLong(&_minTime_);
}

- (jdouble)getAvgTime {
  jlong numRuns = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numRuns_)) get];
  if (numRuns > 0) return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalTime_)) get] / (jdouble) numRuns;
  else return 0;
}

- (jlong)getTotalPendingTime {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalPendingTime_)) get];
}

- (jlong)getMaxPendingTime {
  return JreLoadVolatileLong(&_maxPendingTime_);
}

- (jlong)getMinPendingTime {
  return JreLoadVolatileLong(&_minPendingTime_);
}

- (jdouble)getAvgPendingTime {
  jlong numRuns = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_numRuns_)) get];
  if (numRuns > 0) return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_totalPendingTime_)) get] / (jdouble) numRuns;
  else return 0;
}

- (void)dealloc {
  RELEASE_(_job_);
  RELEASE_(_numRuns_);
  RELEASE_(_numDropped_);
  RELEASE_(_totalTime_);
  RELEASE_(_totalPendingTime_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(jobRanWithLong:withLong:);
  methods[2].selector = @selector(jobDropped);
  methods[3].selector = @selector(getDropped);
  methods[4].selector = @selector(getName);
  methods[5].selector = @selector(getRuns);
  methods[6].selector = @selector(getTotalTime);
  methods[7].selector = @selector(getMaxTime);
  methods[8].selector = @selector(getMinTime);
  methods[9].selector = @selector(getAvgTime);
  methods[10].selector = @selector(getTotalPendingTime);
  methods[11].selector = @selector(getMaxPendingTime);
  methods[12].selector = @selector(getMinPendingTime);
  methods[13].selector = @selector(getAvgPendingTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_job_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_numRuns_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_numDropped_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_totalTime_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_minTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_totalPendingTime_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxPendingTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_minPendingTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "jobRan", "JJ" };
  static const J2ObjcClassInfo _NetI2pRouterJobStats = { "JobStats", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterJobStats;
}

@end

void NetI2pRouterJobStats_initWithNSString_(NetI2pRouterJobStats *self, NSString *name) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_numRuns_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_numDropped_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_totalTime_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_totalPendingTime_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->_job_, name);
  JreAssignVolatileLong(&self->_maxTime_, -1);
  JreAssignVolatileLong(&self->_minTime_, -1);
  JreAssignVolatileLong(&self->_maxPendingTime_, -1);
  JreAssignVolatileLong(&self->_minPendingTime_, -1);
}

NetI2pRouterJobStats *new_NetI2pRouterJobStats_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pRouterJobStats, initWithNSString_, name)
}

NetI2pRouterJobStats *create_NetI2pRouterJobStats_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pRouterJobStats, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterJobStats)
