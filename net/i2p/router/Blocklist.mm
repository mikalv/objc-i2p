//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/Blocklist.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Writer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/Translate.h"

@class NetI2pRouterBlocklist_Entry;

@interface NetI2pRouterBlocklist () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  IOSLongArray *_blocklist_;
  jint _blocklistSize_;
  id _lock_;
  NetI2pRouterBlocklist_Entry *_wrapSave_;
  id<JavaUtilSet> _inProcess_;
  JavaIoFile *_blocklistFeedFile_;
  jboolean _started_;
  id<JavaUtilMap> _peerBlocklist_;
  id<JavaUtilSet> _singleIPBlocklist_;
  id<JavaUtilMap> _singleIPv6Blocklist_;
}

- (instancetype)init;

- (void)allocateWithJavaUtilList:(id<JavaUtilList>)files OBJC_METHOD_FAMILY_NONE;

- (jint)readBlocklistFileWithJavaIoFile:(JavaIoFile *)blFile
                                withInt:(jint)count;

- (void)mergeWithInt:(jint)count;

- (NetI2pRouterBlocklist_Entry *)parseWithNSString:(NSString *)buf
                                       withBoolean:(jboolean)shouldLog;

- (jint)getSizeWithJavaIoFile:(JavaIoFile *)blFile;

- (jint)removeOverlapWithLongArray:(IOSLongArray *)blist
                           withInt:(jint)count;

- (jboolean)addWithInt:(jint)ip;

- (void)removeWithInt:(jint)ip;

- (jboolean)isOnSingleListWithInt:(jint)ip;

- (jboolean)addWithJavaMathBigInteger:(JavaMathBigInteger *)ip;

- (void)removeWithJavaMathBigInteger:(JavaMathBigInteger *)ip;

- (jboolean)isOnSingleListWithJavaMathBigInteger:(JavaMathBigInteger *)ip;

- (id<JavaUtilList>)getAddressesWithNetI2pDataHash:(NetI2pDataHash *)peer;

+ (id<JavaUtilList>)getAddressesWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)pinfo;

- (jboolean)isBlocklistedWithInt:(jint)ip;

- (jboolean)matchWithInt:(jint)ip
                 withInt:(jint)cur;

- (jboolean)matchWithInt:(jint)ip
                withLong:(jlong)entry_;

- (jboolean)isHigherWithInt:(jint)ip
                    withInt:(jint)cur;

+ (jint)getFromWithLong:(jlong)entry_;

+ (jint)getToWithLong:(jlong)entry_;

+ (jlong)toEntryWithByteArray:(IOSByteArray *)ip1
                withByteArray:(IOSByteArray *)ip2;

- (void)storeWithByteArray:(IOSByteArray *)ip1
             withByteArray:(IOSByteArray *)ip2
                   withInt:(jint)idx;

- (void)storeWithInt:(jint)ip1
             withInt:(jint)ip2
             withInt:(jint)idx;

+ (jint)toIntWithByteArray:(IOSByteArray *)ip;

+ (NSString *)toStrWithLong:(jlong)entry_;

+ (NSString *)toStrWithInt:(jint)ip;

- (void)banlistWithNetI2pDataHash:(NetI2pDataHash *)peer
                    withByteArray:(IOSByteArray *)ip;

- (void)banlistForeverWithNetI2pDataHash:(NetI2pDataHash *)peer
                        withJavaUtilList:(id<JavaUtilList>)ips;

+ (IOSByteArray *)toIPBytesWithJavaMathBigInteger:(JavaMathBigInteger *)bi;

+ (NSString *)_xWithNSString:(NSString *)s;

- (NSString *)_tWithNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _blocklist_, IOSLongArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _lock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _wrapSave_, NetI2pRouterBlocklist_Entry *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _inProcess_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _blocklistFeedFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _peerBlocklist_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _singleIPBlocklist_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist, _singleIPv6Blocklist_, id<JavaUtilMap>)

inline NSString *NetI2pRouterBlocklist_get_PROP_BLOCKLIST_ENABLED(void);
static NSString *NetI2pRouterBlocklist_PROP_BLOCKLIST_ENABLED = @"router.blocklist.enable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, PROP_BLOCKLIST_ENABLED, NSString *)

inline NSString *NetI2pRouterBlocklist_get_PROP_BLOCKLIST_DETAIL(void);
static NSString *NetI2pRouterBlocklist_PROP_BLOCKLIST_DETAIL = @"router.blocklist.detail";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, PROP_BLOCKLIST_DETAIL, NSString *)

inline NSString *NetI2pRouterBlocklist_get_PROP_BLOCKLIST_FILE(void);
static NSString *NetI2pRouterBlocklist_PROP_BLOCKLIST_FILE = @"router.blocklist.file";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, PROP_BLOCKLIST_FILE, NSString *)

inline NSString *NetI2pRouterBlocklist_get_BLOCKLIST_FILE_DEFAULT(void);
static NSString *NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT = @"blocklist.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, BLOCKLIST_FILE_DEFAULT, NSString *)

inline NSString *NetI2pRouterBlocklist_get_BLOCKLIST_FEED_FILE(void);
static NSString *NetI2pRouterBlocklist_BLOCKLIST_FEED_FILE = @"docs/feed/blocklist/blocklist.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, BLOCKLIST_FEED_FILE, NSString *)

inline jint NetI2pRouterBlocklist_get_MAX_IPV4_SINGLES(void);
#define NetI2pRouterBlocklist_MAX_IPV4_SINGLES 8192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterBlocklist, MAX_IPV4_SINGLES, jint)

inline jint NetI2pRouterBlocklist_get_MAX_IPV6_SINGLES(void);
#define NetI2pRouterBlocklist_MAX_IPV6_SINGLES 4096
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterBlocklist, MAX_IPV6_SINGLES, jint)

inline id NetI2pRouterBlocklist_get_DUMMY(void);
static id NetI2pRouterBlocklist_DUMMY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, DUMMY, id)

inline jint NetI2pRouterBlocklist_get_MAX_DISPLAY(void);
#define NetI2pRouterBlocklist_MAX_DISPLAY 1000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterBlocklist, MAX_DISPLAY, jint)

inline NSString *NetI2pRouterBlocklist_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterBlocklist_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterBlocklist, BUNDLE_NAME, NSString *)

__attribute__((unused)) static void NetI2pRouterBlocklist_init(NetI2pRouterBlocklist *self);

__attribute__((unused)) static NetI2pRouterBlocklist *new_NetI2pRouterBlocklist_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterBlocklist *create_NetI2pRouterBlocklist_init(void);

__attribute__((unused)) static void NetI2pRouterBlocklist_allocateWithJavaUtilList_(NetI2pRouterBlocklist *self, id<JavaUtilList> files);

__attribute__((unused)) static jint NetI2pRouterBlocklist_readBlocklistFileWithJavaIoFile_withInt_(NetI2pRouterBlocklist *self, JavaIoFile *blFile, jint count);

__attribute__((unused)) static void NetI2pRouterBlocklist_mergeWithInt_(NetI2pRouterBlocklist *self, jint count);

__attribute__((unused)) static NetI2pRouterBlocklist_Entry *NetI2pRouterBlocklist_parseWithNSString_withBoolean_(NetI2pRouterBlocklist *self, NSString *buf, jboolean shouldLog);

__attribute__((unused)) static jint NetI2pRouterBlocklist_getSizeWithJavaIoFile_(NetI2pRouterBlocklist *self, JavaIoFile *blFile);

__attribute__((unused)) static jint NetI2pRouterBlocklist_removeOverlapWithLongArray_withInt_(NetI2pRouterBlocklist *self, IOSLongArray *blist, jint count);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_addWithInt_(NetI2pRouterBlocklist *self, jint ip);

__attribute__((unused)) static void NetI2pRouterBlocklist_removeWithInt_(NetI2pRouterBlocklist *self, jint ip);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_isOnSingleListWithInt_(NetI2pRouterBlocklist *self, jint ip);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_addWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip);

__attribute__((unused)) static void NetI2pRouterBlocklist_removeWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_isOnSingleListWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterBlocklist_getAddressesWithNetI2pDataHash_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterBlocklist_getAddressesWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *pinfo);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_isBlocklistedWithInt_(NetI2pRouterBlocklist *self, jint ip);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_matchWithInt_withInt_(NetI2pRouterBlocklist *self, jint ip, jint cur);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_matchWithInt_withLong_(NetI2pRouterBlocklist *self, jint ip, jlong entry_);

__attribute__((unused)) static jboolean NetI2pRouterBlocklist_isHigherWithInt_withInt_(NetI2pRouterBlocklist *self, jint ip, jint cur);

__attribute__((unused)) static jint NetI2pRouterBlocklist_getFromWithLong_(jlong entry_);

__attribute__((unused)) static jint NetI2pRouterBlocklist_getToWithLong_(jlong entry_);

__attribute__((unused)) static jlong NetI2pRouterBlocklist_toEntryWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static void NetI2pRouterBlocklist_storeWithByteArray_withByteArray_withInt_(NetI2pRouterBlocklist *self, IOSByteArray *ip1, IOSByteArray *ip2, jint idx);

__attribute__((unused)) static void NetI2pRouterBlocklist_storeWithInt_withInt_withInt_(NetI2pRouterBlocklist *self, jint ip1, jint ip2, jint idx);

__attribute__((unused)) static jint NetI2pRouterBlocklist_toIntWithByteArray_(IOSByteArray *ip);

__attribute__((unused)) static NSString *NetI2pRouterBlocklist_toStrWithLong_(jlong entry_);

__attribute__((unused)) static NSString *NetI2pRouterBlocklist_toStrWithInt_(jint ip);

__attribute__((unused)) static void NetI2pRouterBlocklist_banlistWithNetI2pDataHash_withByteArray_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer, IOSByteArray *ip);

__attribute__((unused)) static void NetI2pRouterBlocklist_banlistForeverWithNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer, id<JavaUtilList> ips);

__attribute__((unused)) static IOSByteArray *NetI2pRouterBlocklist_toIPBytesWithJavaMathBigInteger_(JavaMathBigInteger *bi);

__attribute__((unused)) static NSString *NetI2pRouterBlocklist__xWithNSString_(NSString *s);

__attribute__((unused)) static NSString *NetI2pRouterBlocklist__tWithNSString_(NetI2pRouterBlocklist *self, NSString *key);

@interface NetI2pRouterBlocklist_ReadinJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterBlocklist *this$0_;
  id<JavaUtilList> _files_;
}

- (instancetype)initWithNetI2pRouterBlocklist:(NetI2pRouterBlocklist *)outer$
                             withJavaUtilList:(id<JavaUtilList>)files;

- (NSString *)getName;

- (void)runJob;

- (jint)process;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterBlocklist_ReadinJob)

J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_ReadinJob, _files_, id<JavaUtilList>)

__attribute__((unused)) static void NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist_ReadinJob *self, NetI2pRouterBlocklist *outer$, id<JavaUtilList> files);

__attribute__((unused)) static NetI2pRouterBlocklist_ReadinJob *new_NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist *outer$, id<JavaUtilList> files) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterBlocklist_ReadinJob *create_NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist *outer$, id<JavaUtilList> files);

__attribute__((unused)) static jint NetI2pRouterBlocklist_ReadinJob_process(NetI2pRouterBlocklist_ReadinJob *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterBlocklist_ReadinJob)

@interface NetI2pRouterBlocklist_Entry : NSObject {
 @public
  NSString *comment_;
  IOSByteArray *ip1_;
  IOSByteArray *ip2_;
  NetI2pDataHash *peer_;
}

- (instancetype)initWithNSString:(NSString *)c
              withNetI2pDataHash:(NetI2pDataHash *)h
                   withByteArray:(IOSByteArray *)i1
                   withByteArray:(IOSByteArray *)i2;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterBlocklist_Entry)

J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_Entry, comment_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_Entry, ip1_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_Entry, ip2_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_Entry, peer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NetI2pRouterBlocklist_Entry *self, NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2);

__attribute__((unused)) static NetI2pRouterBlocklist_Entry *new_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterBlocklist_Entry *create_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterBlocklist_Entry)

@interface NetI2pRouterBlocklist_BanlistJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterBlocklist *this$0_;
  NetI2pDataHash *_peer_;
  id<JavaUtilList> _ips_;
}

- (instancetype)initWithNetI2pRouterBlocklist:(NetI2pRouterBlocklist *)outer$
                           withNetI2pDataHash:(NetI2pDataHash *)p
                             withJavaUtilList:(id<JavaUtilList>)ips;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterBlocklist_BanlistJob)

J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_BanlistJob, _peer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterBlocklist_BanlistJob, _ips_, id<JavaUtilList>)

__attribute__((unused)) static void NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist_BanlistJob *self, NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips);

__attribute__((unused)) static NetI2pRouterBlocklist_BanlistJob *new_NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterBlocklist_BanlistJob *create_NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterBlocklist_BanlistJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterBlocklist)

@implementation NetI2pRouterBlocklist

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterBlocklist_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterBlocklist_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startup {
  @synchronized(self) {
    if (_started_) return;
    _started_ = true;
    if (![((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterBlocklist_PROP_BLOCKLIST_ENABLED]) return;
    id<JavaUtilList> files = create_JavaUtilArrayList_initWithInt_(4);
    JavaIoFile *blFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getBaseDir], NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT);
    [files addWithId:blFile];
    if (![((JavaIoFile *) nil_chk([_context_ getConfigDir])) isEqual:[_context_ getBaseDir]]) {
      blFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getConfigDir], NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT);
      [files addWithId:blFile];
    }
    [files addWithId:_blocklistFeedFile_];
    NSString *file = [_context_ getPropertyWithNSString:NetI2pRouterBlocklist_PROP_BLOCKLIST_FILE];
    if (file != nil && ![file isEqual:NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT]) {
      blFile = create_JavaIoFile_initWithNSString_(file);
      if (![blFile isAbsolute]) blFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getConfigDir], file);
      [files addWithId:blFile];
    }
    id<NetI2pRouterJob> job = create_NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(self, files);
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:job];
  }
}

- (void)disable {
  @synchronized(_lock_) {
    _blocklistSize_ = 0;
    JreStrongAssign(&_blocklist_, nil);
  }
}

- (void)allocateWithJavaUtilList:(id<JavaUtilList>)files {
  NetI2pRouterBlocklist_allocateWithJavaUtilList_(self, files);
}

- (jint)readBlocklistFileWithJavaIoFile:(JavaIoFile *)blFile
                                withInt:(jint)count {
  return NetI2pRouterBlocklist_readBlocklistFileWithJavaIoFile_withInt_(self, blFile, count);
}

- (void)mergeWithInt:(jint)count {
  NetI2pRouterBlocklist_mergeWithInt_(self, count);
}

- (NetI2pRouterBlocklist_Entry *)parseWithNSString:(NSString *)buf
                                       withBoolean:(jboolean)shouldLog {
  return NetI2pRouterBlocklist_parseWithNSString_withBoolean_(self, buf, shouldLog);
}

- (jint)getSizeWithJavaIoFile:(JavaIoFile *)blFile {
  return NetI2pRouterBlocklist_getSizeWithJavaIoFile_(self, blFile);
}

- (jint)removeOverlapWithLongArray:(IOSLongArray *)blist
                           withInt:(jint)count {
  return NetI2pRouterBlocklist_removeOverlapWithLongArray_withInt_(self, blist, count);
}

- (void)addWithNSString:(NSString *)ip {
  IOSByteArray *pib = NetI2pUtilAddresses_getIPWithNSString_(ip);
  if (pib == nil) return;
  [self addWithByteArray:pib];
}

- (void)addWithByteArray:(IOSByteArray *)ip {
  jboolean rv;
  if (((IOSByteArray *) nil_chk(ip))->size_ == 4) rv = NetI2pRouterBlocklist_addWithInt_(self, NetI2pRouterBlocklist_toIntWithByteArray_(ip));
  else if (ip->size_ == 16) rv = NetI2pRouterBlocklist_addWithJavaMathBigInteger_(self, create_JavaMathBigInteger_initWithInt_withByteArray_(1, ip));
  else rv = false;
  if (rv && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$$", @"Adding IP to blocklist: ", NetI2pUtilAddresses_toStringWithByteArray_(ip))];
}

- (void)removeWithByteArray:(IOSByteArray *)ip {
  if (((IOSByteArray *) nil_chk(ip))->size_ == 4) NetI2pRouterBlocklist_removeWithInt_(self, NetI2pRouterBlocklist_toIntWithByteArray_(ip));
  else if (ip->size_ == 16) NetI2pRouterBlocklist_removeWithJavaMathBigInteger_(self, create_JavaMathBigInteger_initWithInt_withByteArray_(1, ip));
}

- (jboolean)addWithInt:(jint)ip {
  return NetI2pRouterBlocklist_addWithInt_(self, ip);
}

- (void)removeWithInt:(jint)ip {
  NetI2pRouterBlocklist_removeWithInt_(self, ip);
}

- (jboolean)isOnSingleListWithInt:(jint)ip {
  return NetI2pRouterBlocklist_isOnSingleListWithInt_(self, ip);
}

- (jboolean)addWithJavaMathBigInteger:(JavaMathBigInteger *)ip {
  return NetI2pRouterBlocklist_addWithJavaMathBigInteger_(self, ip);
}

- (void)removeWithJavaMathBigInteger:(JavaMathBigInteger *)ip {
  NetI2pRouterBlocklist_removeWithJavaMathBigInteger_(self, ip);
}

- (jboolean)isOnSingleListWithJavaMathBigInteger:(JavaMathBigInteger *)ip {
  return NetI2pRouterBlocklist_isOnSingleListWithJavaMathBigInteger_(self, ip);
}

- (id<JavaUtilList>)getAddressesWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterBlocklist_getAddressesWithNetI2pDataHash_(self, peer);
}

+ (id<JavaUtilList>)getAddressesWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)pinfo {
  return NetI2pRouterBlocklist_getAddressesWithNetI2pDataRouterRouterInfo_(pinfo);
}

- (jboolean)isBlocklistedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  id<JavaUtilList> ips = NetI2pRouterBlocklist_getAddressesWithNetI2pDataHash_(self, peer);
  if ([((id<JavaUtilList>) nil_chk(ips)) isEmpty]) return false;
  for (IOSByteArray * __strong ip in ips) {
    if ([self isBlocklistedWithByteArray:ip]) {
      if (![((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) isBanlistedWithNetI2pDataHash:peer]) NetI2pRouterBlocklist_banlistWithNetI2pDataHash_withByteArray_(self, peer, ip);
      return true;
    }
  }
  return false;
}

- (jboolean)isBlocklistedWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)pinfo {
  id<JavaUtilList> ips = NetI2pRouterBlocklist_getAddressesWithNetI2pDataRouterRouterInfo_(pinfo);
  if ([((id<JavaUtilList>) nil_chk(ips)) isEmpty]) return false;
  for (IOSByteArray * __strong ip in ips) {
    if ([self isBlocklistedWithByteArray:ip]) {
      NetI2pDataHash *peer = [((NetI2pDataRouterRouterInfo *) nil_chk(pinfo)) getHash];
      if (![((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) isBanlistedWithNetI2pDataHash:peer]) NetI2pRouterBlocklist_banlistWithNetI2pDataHash_withByteArray_(self, peer, ip);
      return true;
    }
  }
  return false;
}

- (jboolean)isBlocklistedWithNSString:(NSString *)ip {
  IOSByteArray *pib = NetI2pUtilAddresses_getIPWithNSString_(ip);
  if (pib == nil) return false;
  return [self isBlocklistedWithByteArray:pib];
}

- (jboolean)isBlocklistedWithByteArray:(IOSByteArray *)ip {
  if (((IOSByteArray *) nil_chk(ip))->size_ == 4) return NetI2pRouterBlocklist_isBlocklistedWithInt_(self, NetI2pRouterBlocklist_toIntWithByteArray_(ip));
  if (ip->size_ == 16) return NetI2pRouterBlocklist_isOnSingleListWithJavaMathBigInteger_(self, create_JavaMathBigInteger_initWithInt_withByteArray_(1, ip));
  return false;
}

- (jboolean)isBlocklistedWithInt:(jint)ip {
  return NetI2pRouterBlocklist_isBlocklistedWithInt_(self, ip);
}

- (jboolean)matchWithInt:(jint)ip
                 withInt:(jint)cur {
  return NetI2pRouterBlocklist_matchWithInt_withInt_(self, ip, cur);
}

- (jboolean)matchWithInt:(jint)ip
                withLong:(jlong)entry_ {
  return NetI2pRouterBlocklist_matchWithInt_withLong_(self, ip, entry_);
}

- (jboolean)isHigherWithInt:(jint)ip
                    withInt:(jint)cur {
  return NetI2pRouterBlocklist_isHigherWithInt_withInt_(self, ip, cur);
}

+ (jint)getFromWithLong:(jlong)entry_ {
  return NetI2pRouterBlocklist_getFromWithLong_(entry_);
}

+ (jint)getToWithLong:(jlong)entry_ {
  return NetI2pRouterBlocklist_getToWithLong_(entry_);
}

+ (jlong)toEntryWithByteArray:(IOSByteArray *)ip1
                withByteArray:(IOSByteArray *)ip2 {
  return NetI2pRouterBlocklist_toEntryWithByteArray_withByteArray_(ip1, ip2);
}

- (void)storeWithByteArray:(IOSByteArray *)ip1
             withByteArray:(IOSByteArray *)ip2
                   withInt:(jint)idx {
  NetI2pRouterBlocklist_storeWithByteArray_withByteArray_withInt_(self, ip1, ip2, idx);
}

- (void)storeWithInt:(jint)ip1
             withInt:(jint)ip2
             withInt:(jint)idx {
  NetI2pRouterBlocklist_storeWithInt_withInt_withInt_(self, ip1, ip2, idx);
}

+ (jint)toIntWithByteArray:(IOSByteArray *)ip {
  return NetI2pRouterBlocklist_toIntWithByteArray_(ip);
}

+ (NSString *)toStrWithLong:(jlong)entry_ {
  return NetI2pRouterBlocklist_toStrWithLong_(entry_);
}

+ (NSString *)toStrWithInt:(jint)ip {
  return NetI2pRouterBlocklist_toStrWithInt_(ip);
}

- (void)banlistWithNetI2pDataHash:(NetI2pDataHash *)peer
                    withByteArray:(IOSByteArray *)ip {
  NetI2pRouterBlocklist_banlistWithNetI2pDataHash_withByteArray_(self, peer, ip);
}

- (void)banlistForeverWithNetI2pDataHash:(NetI2pDataHash *)peer
                        withJavaUtilList:(id<JavaUtilList>)ips {
  NetI2pRouterBlocklist_banlistForeverWithNetI2pDataHash_withJavaUtilList_(self, peer, ips);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"<table id=\"bannedips\"><tr><td>"];
  [outArg writeWithNSString:@"<table id=\"banneduntilrestart\"><tr><th align=\"center\"><b>"];
  [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"IPs Banned Until Restart")];
  [outArg writeWithNSString:@"</b></th></tr>"];
  id<JavaUtilSet> singles = create_JavaUtilTreeSet_init();
  [singles addAllWithJavaUtilCollection:_singleIPBlocklist_];
  if (!([singles isEmpty] && [((id<JavaUtilMap>) nil_chk(_singleIPv6Blocklist_)) isEmpty])) {
    if (![singles isEmpty]) {
      [outArg writeWithNSString:@"<tr id=\"ipv4\" align=\"center\"><td><b>"];
      [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"IPv4 Addresses")];
      [outArg writeWithNSString:@"</b></td></tr>"];
    }
    for (JavaLangInteger * __strong ii in singles) {
      jint ip = [((JavaLangInteger *) nil_chk(ii)) intValue];
      if (ip < 0) continue;
      [outArg writeWithNSString:@"<tr><td align=\"center\">"];
      [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(ip)];
      [outArg writeWithNSString:@"</td></tr>\n"];
    }
    for (JavaLangInteger * __strong ii in singles) {
      jint ip = [((JavaLangInteger *) nil_chk(ii)) intValue];
      if (ip >= 0) break;
      [outArg writeWithNSString:@"<tr><td align=\"center\">"];
      [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(ip)];
      [outArg writeWithNSString:@"</td></tr>\n"];
    }
    if (![((id<JavaUtilMap>) nil_chk(_singleIPv6Blocklist_)) isEmpty]) {
      [outArg writeWithNSString:@"<tr id=\"ipv6\" align=\"center\"><td><b>"];
      [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"IPv6 Addresses")];
      [outArg writeWithNSString:@"</b></td></tr>"];
      id<JavaUtilList> s6;
      @synchronized(_singleIPv6Blocklist_) {
        s6 = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_([_singleIPv6Blocklist_ keySet]));
      }
      JavaUtilCollections_sortWithJavaUtilList_(s6);
      for (JavaMathBigInteger * __strong bi in s6) {
        [outArg writeWithNSString:@"<tr><td align=\"center\">"];
        [outArg writeWithNSString:NetI2pUtilAddresses_toStringWithByteArray_(NetI2pRouterBlocklist_toIPBytesWithJavaMathBigInteger_(bi))];
        [outArg writeWithNSString:@"</td></tr>\n"];
      }
    }
  }
  else {
    [outArg writeWithNSString:@"<tr><td><i>"];
    [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"none")];
    [outArg writeWithNSString:@"</i></td></tr>"];
  }
  [outArg writeWithNSString:@"</table>"];
  [outArg writeWithNSString:@"</td><td>"];
  [outArg writeWithNSString:@"<table id=\"permabanned\"><tr><th align=\"center\" colspan=\"3\"><b>"];
  [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"IPs Permanently Banned")];
  [outArg writeWithNSString:@"</b></th></tr>"];
  if (_blocklistSize_ > 0) {
    [outArg writeWithNSString:@"<tr><td align=\"center\" width=\"49%\"><b>"];
    [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"From")];
    [outArg writeWithNSString:@"</b></td><td></td><td align=\"center\" width=\"49%\"><b>"];
    [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"To")];
    [outArg writeWithNSString:@"</b></td></tr>"];
    jint max = JavaLangMath_minWithInt_withInt_(_blocklistSize_, NetI2pRouterBlocklist_MAX_DISPLAY);
    jint displayed = 0;
    for (jint i = 0; i < _blocklistSize_ && displayed < max; i++) {
      jint from = NetI2pRouterBlocklist_getFromWithLong_(IOSLongArray_Get(nil_chk(_blocklist_), i));
      if (from < 0) continue;
      [outArg writeWithNSString:@"<tr><td align=\"center\" width=\"49%\">"];
      [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(from)];
      [outArg writeWithNSString:@"</td>"];
      jint to = NetI2pRouterBlocklist_getToWithLong_(IOSLongArray_Get(nil_chk(_blocklist_), i));
      if (to != from) {
        [outArg writeWithNSString:@"<td align=\"center\">-</td><td align=\"center\" width=\"49%\">"];
        [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(to)];
        [outArg writeWithNSString:@"</td></tr>\n"];
      }
      else [outArg writeWithNSString:@"<td></td><td width=\"49%\">&nbsp;</td></tr>\n"];
      displayed++;
    }
    for (jint i = 0; i < max && displayed++ < max; i++) {
      jint from = NetI2pRouterBlocklist_getFromWithLong_(IOSLongArray_Get(nil_chk(_blocklist_), i));
      if (from >= 0) break;
      [outArg writeWithNSString:@"<tr><td align=\"center\" width=\"49%\">"];
      [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(from)];
      [outArg writeWithNSString:@"</td>"];
      jint to = NetI2pRouterBlocklist_getToWithLong_(IOSLongArray_Get(nil_chk(_blocklist_), i));
      if (to != from) {
        [outArg writeWithNSString:@"<td align=\"center\">-</td><td align=\"center\" width=\"49%\">"];
        [outArg writeWithNSString:NetI2pRouterBlocklist_toStrWithInt_(to)];
        [outArg writeWithNSString:@"</td></tr>\n"];
      }
      else [outArg writeWithNSString:@"<td></td><td width=\"49%\">&nbsp;</td></tr>\n"];
    }
    if (_blocklistSize_ > NetI2pRouterBlocklist_MAX_DISPLAY) [outArg writeWithNSString:JreStrcat("$I$$$", @"<tr><th colspan=2>First ", NetI2pRouterBlocklist_MAX_DISPLAY, @" displayed, see the ", NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT, @" file for the full list</th></tr>")];
  }
  else {
    [outArg writeWithNSString:@"<tr><td><i>"];
    [outArg writeWithNSString:NetI2pRouterBlocklist__tWithNSString_(self, @"none")];
    [outArg writeWithNSString:@"</i></td></tr>"];
  }
  [outArg writeWithNSString:@"</table>"];
  [outArg writeWithNSString:@"</td></tr></table>"];
  [outArg flush];
}

+ (IOSByteArray *)toIPBytesWithJavaMathBigInteger:(JavaMathBigInteger *)bi {
  return NetI2pRouterBlocklist_toIPBytesWithJavaMathBigInteger_(bi);
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterBlocklist__xWithNSString_(s);
}

- (NSString *)_tWithNSString:(NSString *)key {
  return NetI2pRouterBlocklist__tWithNSString_(self, key);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_blocklist_);
  RELEASE_(_lock_);
  RELEASE_(_wrapSave_);
  RELEASE_(_inProcess_);
  RELEASE_(_blocklistFeedFile_);
  RELEASE_(_peerBlocklist_);
  RELEASE_(_singleIPBlocklist_);
  RELEASE_(_singleIPv6Blocklist_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterBlocklist_Entry;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 20, 23, -1, 24, -1, -1 },
    { NULL, "Z", 0x1, 25, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 26, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 27, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 32, 31, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 37, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 38, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 39, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 39, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 42, 43, -1, 44, -1, -1 },
    { NULL, "V", 0x1, 45, 46, 47, -1, -1, -1 },
    { NULL, "[B", 0xa, 48, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 49, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 50, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(startup);
  methods[3].selector = @selector(disable);
  methods[4].selector = @selector(allocateWithJavaUtilList:);
  methods[5].selector = @selector(readBlocklistFileWithJavaIoFile:withInt:);
  methods[6].selector = @selector(mergeWithInt:);
  methods[7].selector = @selector(parseWithNSString:withBoolean:);
  methods[8].selector = @selector(getSizeWithJavaIoFile:);
  methods[9].selector = @selector(removeOverlapWithLongArray:withInt:);
  methods[10].selector = @selector(addWithNSString:);
  methods[11].selector = @selector(addWithByteArray:);
  methods[12].selector = @selector(removeWithByteArray:);
  methods[13].selector = @selector(addWithInt:);
  methods[14].selector = @selector(removeWithInt:);
  methods[15].selector = @selector(isOnSingleListWithInt:);
  methods[16].selector = @selector(addWithJavaMathBigInteger:);
  methods[17].selector = @selector(removeWithJavaMathBigInteger:);
  methods[18].selector = @selector(isOnSingleListWithJavaMathBigInteger:);
  methods[19].selector = @selector(getAddressesWithNetI2pDataHash:);
  methods[20].selector = @selector(getAddressesWithNetI2pDataRouterRouterInfo:);
  methods[21].selector = @selector(isBlocklistedWithNetI2pDataHash:);
  methods[22].selector = @selector(isBlocklistedWithNetI2pDataRouterRouterInfo:);
  methods[23].selector = @selector(isBlocklistedWithNSString:);
  methods[24].selector = @selector(isBlocklistedWithByteArray:);
  methods[25].selector = @selector(isBlocklistedWithInt:);
  methods[26].selector = @selector(matchWithInt:withInt:);
  methods[27].selector = @selector(matchWithInt:withLong:);
  methods[28].selector = @selector(isHigherWithInt:withInt:);
  methods[29].selector = @selector(getFromWithLong:);
  methods[30].selector = @selector(getToWithLong:);
  methods[31].selector = @selector(toEntryWithByteArray:withByteArray:);
  methods[32].selector = @selector(storeWithByteArray:withByteArray:withInt:);
  methods[33].selector = @selector(storeWithInt:withInt:withInt:);
  methods[34].selector = @selector(toIntWithByteArray:);
  methods[35].selector = @selector(toStrWithLong:);
  methods[36].selector = @selector(toStrWithInt:);
  methods[37].selector = @selector(banlistWithNetI2pDataHash:withByteArray:);
  methods[38].selector = @selector(banlistForeverWithNetI2pDataHash:withJavaUtilList:);
  methods[39].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[40].selector = @selector(toIPBytesWithJavaMathBigInteger:);
  methods[41].selector = @selector(_xWithNSString:);
  methods[42].selector = @selector(_tWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_blocklist_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_blocklistSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_wrapSave_", "LNetI2pRouterBlocklist_Entry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inProcess_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 51, -1 },
    { "_blocklistFeedFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_started_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerBlocklist_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 52, -1 },
    { "PROP_BLOCKLIST_ENABLED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "PROP_BLOCKLIST_DETAIL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "PROP_BLOCKLIST_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "BLOCKLIST_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "BLOCKLIST_FEED_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "MAX_IPV4_SINGLES", "I", .constantValue.asInt = NetI2pRouterBlocklist_MAX_IPV4_SINGLES, 0x1a, -1, -1, -1, -1 },
    { "MAX_IPV6_SINGLES", "I", .constantValue.asInt = NetI2pRouterBlocklist_MAX_IPV6_SINGLES, 0x1a, -1, -1, -1, -1 },
    { "_singleIPBlocklist_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 58, -1 },
    { "_singleIPv6Blocklist_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 59, -1 },
    { "DUMMY", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "MAX_DISPLAY", "I", .constantValue.asInt = NetI2pRouterBlocklist_MAX_DISPLAY, 0x1a, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "allocate", "LJavaUtilList;", "(Ljava/util/List<Ljava/io/File;>;)V", "readBlocklistFile", "LJavaIoFile;I", "merge", "I", "parse", "LNSString;Z", "getSize", "LJavaIoFile;", "removeOverlap", "[JI", "add", "LNSString;", "[B", "remove", "isOnSingleList", "LJavaMathBigInteger;", "getAddresses", "LNetI2pDataHash;", "(Lnet/i2p/data/Hash;)Ljava/util/List<[B>;", "LNetI2pDataRouterRouterInfo;", "(Lnet/i2p/data/router/RouterInfo;)Ljava/util/List<[B>;", "isBlocklisted", "match", "II", "IJ", "isHigher", "getFrom", "J", "getTo", "toEntry", "[B[B", "store", "[B[BI", "III", "toInt", "toStr", "banlist", "LNetI2pDataHash;[B", "banlistForever", "LNetI2pDataHash;LJavaUtilList;", "(Lnet/i2p/data/Hash;Ljava/util/List<[B>;)V", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "toIPBytes", "_x", "_t", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/String;>;", &NetI2pRouterBlocklist_PROP_BLOCKLIST_ENABLED, &NetI2pRouterBlocklist_PROP_BLOCKLIST_DETAIL, &NetI2pRouterBlocklist_PROP_BLOCKLIST_FILE, &NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT, &NetI2pRouterBlocklist_BLOCKLIST_FEED_FILE, "Ljava/util/Set<Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/math/BigInteger;Ljava/lang/Object;>;", &NetI2pRouterBlocklist_DUMMY, &NetI2pRouterBlocklist_BUNDLE_NAME, "LNetI2pRouterBlocklist_ReadinJob;LNetI2pRouterBlocklist_Entry;LNetI2pRouterBlocklist_BanlistJob;" };
  static const J2ObjcClassInfo _NetI2pRouterBlocklist = { "Blocklist", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 43, 22, -1, 62, -1, -1, -1 };
  return &_NetI2pRouterBlocklist;
}

+ (void)initialize {
  if (self == [NetI2pRouterBlocklist class]) {
    JreStrongAssign(&NetI2pRouterBlocklist_DUMMY, JavaLangInteger_valueOfWithInt_(0));
    J2OBJC_SET_INITIALIZED(NetI2pRouterBlocklist)
  }
}

@end

void NetI2pRouterBlocklist_initWithNetI2pRouterRouterContext_(NetI2pRouterBlocklist *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_lock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_inProcess_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_peerBlocklist_, new_JavaUtilHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_singleIPBlocklist_, new_NetI2pUtilConcurrentHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_singleIPv6Blocklist_, new_NetI2pUtilLHMCache_initWithInt_(NetI2pRouterBlocklist_MAX_IPV6_SINGLES));
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterBlocklist_class_()]);
  JreStrongAssignAndConsume(&self->_blocklistFeedFile_, new_JavaIoFile_initWithJavaIoFile_withNSString_([context getConfigDir], NetI2pRouterBlocklist_BLOCKLIST_FEED_FILE));
}

NetI2pRouterBlocklist *new_NetI2pRouterBlocklist_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterBlocklist, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterBlocklist *create_NetI2pRouterBlocklist_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterBlocklist, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterBlocklist_init(NetI2pRouterBlocklist *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_lock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_inProcess_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_peerBlocklist_, new_JavaUtilHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_singleIPBlocklist_, new_NetI2pUtilConcurrentHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_singleIPv6Blocklist_, new_NetI2pUtilLHMCache_initWithInt_(NetI2pRouterBlocklist_MAX_IPV6_SINGLES));
  JreStrongAssign(&self->_context_, nil);
  JreStrongAssignAndConsume(&self->_log_, new_NetI2pUtilLog_initWithIOSClass_(NetI2pRouterBlocklist_class_()));
  JreStrongAssignAndConsume(&self->_blocklistFeedFile_, new_JavaIoFile_initWithNSString_(NetI2pRouterBlocklist_BLOCKLIST_FEED_FILE));
}

NetI2pRouterBlocklist *new_NetI2pRouterBlocklist_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterBlocklist, init)
}

NetI2pRouterBlocklist *create_NetI2pRouterBlocklist_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterBlocklist, init)
}

void NetI2pRouterBlocklist_allocateWithJavaUtilList_(NetI2pRouterBlocklist *self, id<JavaUtilList> files) {
  jint maxSize = 0;
  for (JavaIoFile * __strong f in nil_chk(files)) {
    maxSize += NetI2pRouterBlocklist_getSizeWithJavaIoFile_(self, f);
  }
  @try {
    JreStrongAssignAndConsume(&self->_blocklist_, [IOSLongArray newArrayWithLength:maxSize + [files size]]);
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"OOM creating the blocklist"];
    [self disable];
  }
}

jint NetI2pRouterBlocklist_readBlocklistFileWithJavaIoFile_withInt_(NetI2pRouterBlocklist *self, JavaIoFile *blFile, jint count) {
  if (blFile == nil || (![blFile exists]) || [blFile length] <= 0) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Blocklist file not found: ", blFile)];
    return count;
  }
  jlong start = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jint oldcount = count;
  jint badcount = 0;
  jint peercount = 0;
  jlong ipcount = 0;
  jboolean isFeedFile = [blFile isEqual:self->_blocklistFeedFile_];
  JavaIoBufferedReader *br = nil;
  @try {
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(blFile), @"UTF-8"));
    NSString *buf = nil;
    while ((buf = [br readLine]) != nil) {
      NetI2pRouterBlocklist_Entry *e = NetI2pRouterBlocklist_parseWithNSString_withBoolean_(self, buf, true);
      if (e == nil) {
        badcount++;
        continue;
      }
      if (e->peer_ != nil) {
        [((id<JavaUtilMap>) nil_chk(self->_peerBlocklist_)) putWithId:e->peer_ withId:e->comment_];
        peercount++;
        continue;
      }
      IOSByteArray *ip1 = e->ip1_;
      if (((IOSByteArray *) nil_chk(ip1))->size_ == 4) {
        if (isFeedFile) {
          [self addWithByteArray:ip1];
        }
        else {
          IOSByteArray *ip2 = e->ip2_;
          NetI2pRouterBlocklist_storeWithByteArray_withByteArray_withInt_(self, ip1, ip2, count++);
          ipcount += 1 + NetI2pRouterBlocklist_toIntWithByteArray_(ip2) - NetI2pRouterBlocklist_toIntWithByteArray_(ip1);
        }
      }
      else {
        [self addWithByteArray:ip1];
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:@"Error reading the blocklist file" withJavaLangThrowable:ioe];
    return count;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    JreStrongAssign(&self->_blocklist_, nil);
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"OOM reading the blocklist"];
    return count;
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  if (self->_wrapSave_ != nil) {
    NetI2pRouterBlocklist_storeWithByteArray_withByteArray_withInt_(self, self->_wrapSave_->ip1_, self->_wrapSave_->ip2_, count++);
    ipcount += 1 + NetI2pRouterBlocklist_toIntWithByteArray_(((NetI2pRouterBlocklist_Entry *) nil_chk(self->_wrapSave_))->ip2_) - NetI2pRouterBlocklist_toIntWithByteArray_(((NetI2pRouterBlocklist_Entry *) nil_chk(self->_wrapSave_))->ip1_);
    JreStrongAssign(&self->_wrapSave_, nil);
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [self->_log_ infoWithNSString:JreStrcat("$@", @"Stats for ", blFile)];
    [self->_log_ infoWithNSString:JreStrcat("$I$", @"Removed ", badcount, @" bad entries and comment lines")];
    [self->_log_ infoWithNSString:JreStrcat("$I$@", @"Read ", (count - oldcount), @" valid entries from the blocklist ", blFile)];
    [self->_log_ infoWithNSString:JreStrcat("$J$I$", @"Blocking ", ipcount, @" IPs and ", peercount, @" hashes")];
    [self->_log_ infoWithNSString:JreStrcat("$J", @"Blocklist processing finished, time: ", ([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - start))];
  }
  return count;
}

void NetI2pRouterBlocklist_mergeWithInt_(NetI2pRouterBlocklist *self, jint count) {
  jlong start = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jint removed = 0;
  @try {
    JavaUtilArrays_sortWithLongArray_withInt_withInt_(self->_blocklist_, 0, count);
    removed = NetI2pRouterBlocklist_removeOverlapWithLongArray_withInt_(self, self->_blocklist_, count);
    if (removed > 0) {
      JavaUtilArrays_sortWithLongArray_withInt_withInt_(self->_blocklist_, 0, count);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    JreStrongAssign(&self->_blocklist_, nil);
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"OOM sorting the blocklist"];
    return;
  }
  self->_blocklistSize_ = count - removed;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    [self->_log_ infoWithNSString:@"Merged Stats"];
    [self->_log_ infoWithNSString:JreStrcat("$I$", @"Read ", count, @" total entries from the blocklists")];
    [self->_log_ infoWithNSString:JreStrcat("$I$", @"Merged ", removed, @" overlapping entries")];
    [self->_log_ infoWithNSString:JreStrcat("$I$", @"Result is ", self->_blocklistSize_, @" entries")];
    [self->_log_ infoWithNSString:JreStrcat("$J", @"Blocklist processing finished, time: ", ([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - start))];
  }
}

NetI2pRouterBlocklist_Entry *NetI2pRouterBlocklist_parseWithNSString_withBoolean_(NetI2pRouterBlocklist *self, NSString *buf, jboolean shouldLog) {
  IOSByteArray *ip1;
  IOSByteArray *ip2;
  jint start1 = 0;
  jint end1 = [((NSString *) nil_chk(buf)) java_length];
  if (end1 <= 0) return nil;
  jint start2 = -1;
  jint mask = -1;
  NSString *comment = nil;
  jint index = [buf java_indexOf:'#'];
  if (index == 0) return nil;
  index = [buf java_lastIndexOf:':'];
  if (index >= 0) {
    comment = [buf java_substring:0 endIndex:index];
    start1 = index + 1;
  }
  if (end1 - start1 == 44 && [((NSString *) nil_chk([buf java_substring:start1])) java_indexOf:'.'] < 0) {
    IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_([buf java_substring:start1]);
    if (b != nil) return create_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(comment, NetI2pDataHash_createWithByteArray_(b), nil, nil);
  }
  index = [buf java_indexOf:'-' fromIndex:start1];
  if (index >= 0) {
    end1 = index;
    start2 = index + 1;
  }
  else {
    index = [buf java_indexOf:'/' fromIndex:start1];
    if (index >= 0) {
      end1 = index;
      mask = index + 1;
    }
  }
  if (end1 - start1 <= 0) return nil;
  @try {
    NSString *sip = [buf java_substring:start1 endIndex:end1];
    sip = [((NSString *) nil_chk(sip)) java_replace:';' withChar:':'];
    JavaNetInetAddress *pi = JavaNetInetAddress_getByNameWithNSString_(sip);
    if (pi == nil) return nil;
    ip1 = [pi getAddress];
    if (start2 >= 0) {
      pi = JavaNetInetAddress_getByNameWithNSString_([buf java_substring:start2]);
      if (pi == nil) return nil;
      ip2 = [pi getAddress];
      if (((IOSByteArray *) nil_chk(ip2))->size_ != 4) @throw create_JavaNetUnknownHostException_init();
      if ((IOSByteArray_Get(nil_chk(ip1), 0) & (jint) 0xff) < (jint) 0x80 && (IOSByteArray_Get(ip2, 0) & (jint) 0xff) >= (jint) 0x80) {
        if (self->_wrapSave_ == nil) {
          JreStrongAssignAndConsume(&self->_wrapSave_, new_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(comment, nil, [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x80, 0, 0, 0 } count:4], [IOSByteArray arrayWithBytes:(jbyte[]){ IOSByteArray_Get(ip2, 0), IOSByteArray_Get(ip2, 1), IOSByteArray_Get(ip2, 2), IOSByteArray_Get(ip2, 3) } count:4]));
          ip2 = [IOSByteArray arrayWithBytes:(jbyte[]){ 127, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:4];
        }
        else @throw create_JavaLangNumberFormatException_init();
      }
      for (jint i = 0; i < 4; i++) {
        if ((IOSByteArray_Get(ip2, i) & (jint) 0xff) > (IOSByteArray_Get(ip1, i) & (jint) 0xff)) break;
        if ((IOSByteArray_Get(ip2, i) & (jint) 0xff) < (IOSByteArray_Get(ip1, i) & (jint) 0xff)) @throw create_JavaLangNumberFormatException_init();
      }
    }
    else if (mask >= 0) {
      jint m = JavaLangInteger_parseIntWithNSString_([buf java_substring:mask]);
      if (m < 3 || m > 32) @throw create_JavaLangNumberFormatException_init();
      ip2 = [IOSByteArray arrayWithLength:4];
      for (jint i = 0; i < 4; i++) *IOSByteArray_GetRef(ip2, i) = IOSByteArray_Get(nil_chk(ip1), i);
      for (jint i = 0; i < 32 - m; i++) *IOSByteArray_GetRef(ip2, (31 - i) / 8) |= (JreLShift32((jint) 0x01, (i % 8)));
    }
    else {
      ip2 = ip1;
    }
  }
  @catch (JavaNetUnknownHostException *uhe) {
    if (shouldLog) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"Format error in the blocklist file: ", buf)];
    return nil;
  }
  @catch (JavaLangNumberFormatException *nfe) {
    if (shouldLog) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"Format error in the blocklist file: ", buf)];
    return nil;
  }
  @catch (JavaLangIndexOutOfBoundsException *ioobe) {
    if (shouldLog) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"Format error in the blocklist file: ", buf)];
    return nil;
  }
  return create_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(comment, nil, ip1, ip2);
}

jint NetI2pRouterBlocklist_getSizeWithJavaIoFile_(NetI2pRouterBlocklist *self, JavaIoFile *blFile) {
  if ((![((JavaIoFile *) nil_chk(blFile)) exists]) || ([blFile length] <= 0)) return 0;
  jint lines = 0;
  JavaIoBufferedReader *br = nil;
  @try {
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(blFile), @"ISO-8859-1"));
    NSString *s;
    while ((s = [br readLine]) != nil) {
      if ([((NSString *) nil_chk(s)) java_length] > 0 && ![s java_hasPrefix:@"#"]) lines++;
    }
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Error reading the blocklist file" withJavaLangThrowable:ioe];
    return 0;
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  return lines;
}

jint NetI2pRouterBlocklist_removeOverlapWithLongArray_withInt_(NetI2pRouterBlocklist *self, IOSLongArray *blist, jint count) {
  if (count <= 0) return 0;
  jint lines = 0;
  for (jint i = 0; i < count - 1; ) {
    jint removed = 0;
    jint to = NetI2pRouterBlocklist_getToWithLong_(IOSLongArray_Get(nil_chk(blist), i));
    for (jint next = i + 1; next < count; next++) {
      if (to < NetI2pRouterBlocklist_getFromWithLong_(IOSLongArray_Get(blist, next))) break;
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$$", @"Combining entries ", NetI2pRouterBlocklist_toStrWithLong_(IOSLongArray_Get(blist, i)), @" and ", NetI2pRouterBlocklist_toStrWithLong_(IOSLongArray_Get(blist, next)))];
      jint nextTo = NetI2pRouterBlocklist_getToWithLong_(IOSLongArray_Get(blist, next));
      if (nextTo > to) NetI2pRouterBlocklist_storeWithInt_withInt_withInt_(self, NetI2pRouterBlocklist_getFromWithLong_(IOSLongArray_Get(blist, i)), nextTo, i);
      *IOSLongArray_GetRef(blist, next) = JavaLangLong_MAX_VALUE;
      lines++;
      removed++;
    }
    i += removed + 1;
  }
  return lines;
}

jboolean NetI2pRouterBlocklist_addWithInt_(NetI2pRouterBlocklist *self, jint ip) {
  if ([((id<JavaUtilSet>) nil_chk(self->_singleIPBlocklist_)) size] >= NetI2pRouterBlocklist_MAX_IPV4_SINGLES) return false;
  return [self->_singleIPBlocklist_ addWithId:JavaLangInteger_valueOfWithInt_(ip)];
}

void NetI2pRouterBlocklist_removeWithInt_(NetI2pRouterBlocklist *self, jint ip) {
  [((id<JavaUtilSet>) nil_chk(self->_singleIPBlocklist_)) removeWithId:JavaLangInteger_valueOfWithInt_(ip)];
}

jboolean NetI2pRouterBlocklist_isOnSingleListWithInt_(NetI2pRouterBlocklist *self, jint ip) {
  return [((id<JavaUtilSet>) nil_chk(self->_singleIPBlocklist_)) containsWithId:JavaLangInteger_valueOfWithInt_(ip)];
}

jboolean NetI2pRouterBlocklist_addWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip) {
  @synchronized(self->_singleIPv6Blocklist_) {
    return [((id<JavaUtilMap>) nil_chk(self->_singleIPv6Blocklist_)) putWithId:ip withId:NetI2pRouterBlocklist_DUMMY] == nil;
  }
}

void NetI2pRouterBlocklist_removeWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip) {
  @synchronized(self->_singleIPv6Blocklist_) {
    [((id<JavaUtilMap>) nil_chk(self->_singleIPv6Blocklist_)) removeWithId:ip];
  }
}

jboolean NetI2pRouterBlocklist_isOnSingleListWithJavaMathBigInteger_(NetI2pRouterBlocklist *self, JavaMathBigInteger *ip) {
  @synchronized(self->_singleIPv6Blocklist_) {
    return [((id<JavaUtilMap>) nil_chk(self->_singleIPv6Blocklist_)) getWithId:ip] != nil;
  }
}

id<JavaUtilList> NetI2pRouterBlocklist_getAddressesWithNetI2pDataHash_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer) {
  NetI2pDataRouterRouterInfo *pinfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (pinfo == nil) return JavaUtilCollections_emptyList();
  return NetI2pRouterBlocklist_getAddressesWithNetI2pDataRouterRouterInfo_(pinfo);
}

id<JavaUtilList> NetI2pRouterBlocklist_getAddressesWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *pinfo) {
  NetI2pRouterBlocklist_initialize();
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(4);
  for (NetI2pDataRouterRouterAddress * __strong pa in nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(pinfo)) getAddresses])) {
    IOSByteArray *pib = [((NetI2pDataRouterRouterAddress *) nil_chk(pa)) getIP];
    if (pib == nil) continue;
    jboolean dup = false;
    for (jint i = 0; i < [rv size]; i++) {
      if (NetI2pDataDataHelper_eqWithByteArray_withByteArray_([rv getWithInt:i], pib)) {
        dup = true;
        break;
      }
    }
    if (!dup) [rv addWithId:pib];
  }
  return rv;
}

jboolean NetI2pRouterBlocklist_isBlocklistedWithInt_(NetI2pRouterBlocklist *self, jint ip) {
  if (NetI2pRouterBlocklist_isOnSingleListWithInt_(self, ip)) return true;
  jint hi = self->_blocklistSize_ - 1;
  if (hi <= 0) return false;
  jint lo = 0;
  jint cur = hi / 2;
  while (!NetI2pRouterBlocklist_matchWithInt_withInt_(self, ip, cur)) {
    if (NetI2pRouterBlocklist_isHigherWithInt_withInt_(self, ip, cur)) lo = cur;
    else hi = cur;
    if (hi - lo <= 1) {
      if (lo == cur) cur = hi;
      else cur = lo;
      break;
    }
    else {
      cur = lo + ((hi - lo) / 2);
    }
  }
  return NetI2pRouterBlocklist_matchWithInt_withInt_(self, ip, cur);
}

jboolean NetI2pRouterBlocklist_matchWithInt_withInt_(NetI2pRouterBlocklist *self, jint ip, jint cur) {
  return NetI2pRouterBlocklist_matchWithInt_withLong_(self, ip, IOSLongArray_Get(nil_chk(self->_blocklist_), cur));
}

jboolean NetI2pRouterBlocklist_matchWithInt_withLong_(NetI2pRouterBlocklist *self, jint ip, jlong entry_) {
  if (NetI2pRouterBlocklist_getFromWithLong_(entry_) > ip) return false;
  return (ip <= NetI2pRouterBlocklist_getToWithLong_(entry_));
}

jboolean NetI2pRouterBlocklist_isHigherWithInt_withInt_(NetI2pRouterBlocklist *self, jint ip, jint cur) {
  return ip > NetI2pRouterBlocklist_getFromWithLong_(IOSLongArray_Get(nil_chk(self->_blocklist_), cur));
}

jint NetI2pRouterBlocklist_getFromWithLong_(jlong entry_) {
  NetI2pRouterBlocklist_initialize();
  return (jint) ((JreRShift64(entry_, 32)) & (jint) 0xffffffff);
}

jint NetI2pRouterBlocklist_getToWithLong_(jlong entry_) {
  NetI2pRouterBlocklist_initialize();
  return (jint) (entry_ & (jint) 0xffffffff);
}

jlong NetI2pRouterBlocklist_toEntryWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  NetI2pRouterBlocklist_initialize();
  jlong entry_ = 0;
  for (jint i = 0; i < 4; i++) entry_ |= JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(ip2), i) & (jint) 0xff)), ((3 - i) * 8));
  for (jint i = 0; i < 4; i++) entry_ |= JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(ip1), i) & (jint) 0xff)), (32 + ((3 - i) * 8)));
  return entry_;
}

void NetI2pRouterBlocklist_storeWithByteArray_withByteArray_withInt_(NetI2pRouterBlocklist *self, IOSByteArray *ip1, IOSByteArray *ip2, jint idx) {
  *IOSLongArray_GetRef(nil_chk(self->_blocklist_), idx) = NetI2pRouterBlocklist_toEntryWithByteArray_withByteArray_(ip1, ip2);
}

void NetI2pRouterBlocklist_storeWithInt_withInt_withInt_(NetI2pRouterBlocklist *self, jint ip1, jint ip2, jint idx) {
  jlong entry_ = JreLShift64(((jlong) ip1), 32);
  entry_ |= ((jlong) ip2) & (jint) 0xffffffff;
  *IOSLongArray_GetRef(nil_chk(self->_blocklist_), idx) = entry_;
}

jint NetI2pRouterBlocklist_toIntWithByteArray_(IOSByteArray *ip) {
  NetI2pRouterBlocklist_initialize();
  jint rv = 0;
  for (jint i = 0; i < 4; i++) rv |= JreLShift32((IOSByteArray_Get(nil_chk(ip), i) & (jint) 0xff), ((3 - i) * 8));
  return rv;
}

NSString *NetI2pRouterBlocklist_toStrWithLong_(jlong entry_) {
  NetI2pRouterBlocklist_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(32);
  for (jint i = 7; i >= 0; i--) {
    [buf appendWithLong:(JreRShift64(entry_, (8 * i))) & (jint) 0xff];
    if (i == 4) [buf appendWithChar:'-'];
    else if (i > 0) [buf appendWithChar:'.'];
  }
  return [buf description];
}

NSString *NetI2pRouterBlocklist_toStrWithInt_(jint ip) {
  NetI2pRouterBlocklist_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(16);
  for (jint i = 3; i >= 0; i--) {
    [buf appendWithInt:(JreRShift32(ip, (8 * i))) & (jint) 0xff];
    if (i > 0) [buf appendWithChar:'.'];
  }
  return [buf description];
}

void NetI2pRouterBlocklist_banlistWithNetI2pDataHash_withByteArray_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer, IOSByteArray *ip) {
  NSString *reason = NetI2pRouterBlocklist__xWithNSString_(@"IP banned by blocklist.txt entry {0}");
  [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) banlistRouterForeverWithNetI2pDataHash:peer withNSString:reason withNSString:NetI2pUtilAddresses_toStringWithByteArray_(ip)];
  if (![self->_context_ getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterBlocklist_PROP_BLOCKLIST_DETAIL]) return;
  jboolean shouldRunJob;
  jint number;
  @synchronized(self->_inProcess_) {
    number = [((id<JavaUtilSet>) nil_chk(self->_inProcess_)) size];
    shouldRunJob = [self->_inProcess_ addWithId:peer];
  }
  if (!shouldRunJob) return;
  id<NetI2pRouterJob> job = create_NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(self, peer, NetI2pRouterBlocklist_getAddressesWithNetI2pDataHash_(self, peer));
  if (number > 0) [((NetI2pRouterJobTiming *) nil_chk([job getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + (30 * 1000l * number)];
  [((NetI2pRouterJobQueue *) nil_chk([self->_context_ jobQueue])) addJobWithNetI2pRouterJob:job];
}

void NetI2pRouterBlocklist_banlistForeverWithNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *self, NetI2pDataHash *peer, id<JavaUtilList> ips) {
  @synchronized(self) {
    JavaIoFile *blFile = nil;
    NSString *file = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterBlocklist_PROP_BLOCKLIST_FILE];
    if (file != nil) {
      blFile = create_JavaIoFile_initWithNSString_(file);
      if (![blFile isAbsolute]) blFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], file);
      if (![blFile exists]) blFile = nil;
    }
    if (blFile == nil) blFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], NetI2pRouterBlocklist_BLOCKLIST_FILE_DEFAULT);
    if ((![blFile exists]) || [blFile length] <= 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Banlisting ", peer)];
      [((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) banlistRouterForeverWithNetI2pDataHash:peer withNSString:@"Banned"];
      return;
    }
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(ips)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      IOSByteArray *ip = [iter next];
      jint ipint = NetI2pRouterBlocklist_toIntWithByteArray_(ip);
      JavaIoBufferedReader *br = nil;
      @try {
        br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(blFile), @"UTF-8"));
        NSString *buf = nil;
        while ((buf = [br readLine]) != nil) {
          NetI2pRouterBlocklist_Entry *e = NetI2pRouterBlocklist_parseWithNSString_withBoolean_(self, buf, false);
          if (e == nil || e->peer_ != nil) {
            continue;
          }
          if (NetI2pRouterBlocklist_matchWithInt_withLong_(self, ipint, NetI2pRouterBlocklist_toEntryWithByteArray_withByteArray_(e->ip1_, e->ip2_))) {
            @try {
              [br close];
            }
            @catch (JavaIoIOException *ioe) {
            }
            NSString *reason = NetI2pRouterBlocklist__xWithNSString_(@"IP banned by blocklist.txt entry {0}");
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@C$", @"Banlisting ", peer, ' ', reason)];
            [((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) banlistRouterForeverWithNetI2pDataHash:peer withNSString:reason withNSString:[((NSString *) nil_chk(buf)) description]];
            return;
          }
        }
      }
      @catch (JavaIoIOException *ioe) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Error reading the blocklist file" withJavaLangThrowable:ioe];
      }
      @finally {
        if (br != nil) @try {
          [br close];
        }
        @catch (JavaIoIOException *ioe) {
        }
      }
    }
  }
}

IOSByteArray *NetI2pRouterBlocklist_toIPBytesWithJavaMathBigInteger_(JavaMathBigInteger *bi) {
  NetI2pRouterBlocklist_initialize();
  IOSByteArray *ba = [((JavaMathBigInteger *) nil_chk(bi)) toByteArray];
  jint len = ((IOSByteArray *) nil_chk(ba))->size_;
  if (len == 16) return ba;
  IOSByteArray *rv = [IOSByteArray arrayWithLength:16];
  if (len < 16) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ba, 0, rv, 16 - len, len);
  else JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ba, len - 16, rv, 0, 16);
  return rv;
}

NSString *NetI2pRouterBlocklist__xWithNSString_(NSString *s) {
  NetI2pRouterBlocklist_initialize();
  return s;
}

NSString *NetI2pRouterBlocklist__tWithNSString_(NetI2pRouterBlocklist *self, NSString *key) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(key, self->_context_, NetI2pRouterBlocklist_BUNDLE_NAME);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterBlocklist)

@implementation NetI2pRouterBlocklist_ReadinJob

- (instancetype)initWithNetI2pRouterBlocklist:(NetI2pRouterBlocklist *)outer$
                             withJavaUtilList:(id<JavaUtilList>)files {
  NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(self, outer$, files);
  return self;
}

- (NSString *)getName {
  return @"Read Blocklist";
}

- (void)runJob {
  NetI2pRouterBlocklist_allocateWithJavaUtilList_(this$0_, _files_);
  if (this$0_->_blocklist_ == nil) return;
  jint ccount = NetI2pRouterBlocklist_ReadinJob_process(self);
  if (this$0_->_blocklist_ == nil) return;
  if (ccount <= 0) {
    [this$0_ disable];
    return;
  }
  NetI2pRouterBlocklist_mergeWithInt_(this$0_, ccount);
  JreStrongAssign(&this$0_->_peerBlocklist_, nil);
}

- (jint)process {
  return NetI2pRouterBlocklist_ReadinJob_process(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_files_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterBlocklist:withJavaUtilList:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(process);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterBlocklist;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_files_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/io/File;>;)V", "Ljava/util/List<Ljava/io/File;>;", "LNetI2pRouterBlocklist;" };
  static const J2ObjcClassInfo _NetI2pRouterBlocklist_ReadinJob = { "ReadinJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 4, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterBlocklist_ReadinJob;
}

@end

void NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist_ReadinJob *self, NetI2pRouterBlocklist *outer$, id<JavaUtilList> files) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
  JreStrongAssign(&self->_files_, files);
}

NetI2pRouterBlocklist_ReadinJob *new_NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist *outer$, id<JavaUtilList> files) {
  J2OBJC_NEW_IMPL(NetI2pRouterBlocklist_ReadinJob, initWithNetI2pRouterBlocklist_withJavaUtilList_, outer$, files)
}

NetI2pRouterBlocklist_ReadinJob *create_NetI2pRouterBlocklist_ReadinJob_initWithNetI2pRouterBlocklist_withJavaUtilList_(NetI2pRouterBlocklist *outer$, id<JavaUtilList> files) {
  J2OBJC_CREATE_IMPL(NetI2pRouterBlocklist_ReadinJob, initWithNetI2pRouterBlocklist_withJavaUtilList_, outer$, files)
}

jint NetI2pRouterBlocklist_ReadinJob_process(NetI2pRouterBlocklist_ReadinJob *self) {
  jint count = 0;
  @synchronized(self->this$0_->_lock_) {
    @try {
      for (JavaIoFile * __strong f in nil_chk(self->_files_)) {
        count = NetI2pRouterBlocklist_readBlocklistFileWithJavaIoFile_withInt_(self->this$0_, f, count);
      }
    }
    @catch (JavaLangOutOfMemoryError *oom) {
      [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"OOM processing the blocklist"];
      [self->this$0_ disable];
      return 0;
    }
  }
  for (NetI2pDataHash * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(self->this$0_->_peerBlocklist_)) keySet])) {
    NSString *reason;
    NSString *comment = [((id<JavaUtilMap>) nil_chk(self->this$0_->_peerBlocklist_)) getWithId:peer];
    if (comment != nil) reason = NetI2pRouterBlocklist__xWithNSString_(@"Banned by router hash: {0}");
    else reason = NetI2pRouterBlocklist__xWithNSString_(@"Banned by router hash");
    [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) banlist])) banlistRouterForeverWithNetI2pDataHash:peer withNSString:reason withNSString:comment];
  }
  [((id<JavaUtilMap>) nil_chk(self->this$0_->_peerBlocklist_)) clear];
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterBlocklist_ReadinJob)

@implementation NetI2pRouterBlocklist_Entry

- (instancetype)initWithNSString:(NSString *)c
              withNetI2pDataHash:(NetI2pDataHash *)h
                   withByteArray:(IOSByteArray *)i1
                   withByteArray:(IOSByteArray *)i2 {
  NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(self, c, h, i1, i2);
  return self;
}

- (void)dealloc {
  RELEASE_(comment_);
  RELEASE_(ip1_);
  RELEASE_(ip2_);
  RELEASE_(peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNetI2pDataHash:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comment_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "ip1_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "ip2_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNetI2pDataHash;[B[B", "LNetI2pRouterBlocklist;" };
  static const J2ObjcClassInfo _NetI2pRouterBlocklist_Entry = { "Entry", "net.i2p.router", ptrTable, methods, fields, 7, 0xa, 1, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterBlocklist_Entry;
}

@end

void NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NetI2pRouterBlocklist_Entry *self, NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2) {
  NSObject_init(self);
  JreStrongAssign(&self->comment_, c);
  JreStrongAssign(&self->peer_, h);
  JreStrongAssign(&self->ip1_, i1);
  JreStrongAssign(&self->ip2_, i2);
}

NetI2pRouterBlocklist_Entry *new_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2) {
  J2OBJC_NEW_IMPL(NetI2pRouterBlocklist_Entry, initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_, c, h, i1, i2)
}

NetI2pRouterBlocklist_Entry *create_NetI2pRouterBlocklist_Entry_initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_(NSString *c, NetI2pDataHash *h, IOSByteArray *i1, IOSByteArray *i2) {
  J2OBJC_CREATE_IMPL(NetI2pRouterBlocklist_Entry, initWithNSString_withNetI2pDataHash_withByteArray_withByteArray_, c, h, i1, i2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterBlocklist_Entry)

@implementation NetI2pRouterBlocklist_BanlistJob

- (instancetype)initWithNetI2pRouterBlocklist:(NetI2pRouterBlocklist *)outer$
                           withNetI2pDataHash:(NetI2pDataHash *)p
                             withJavaUtilList:(id<JavaUtilList>)ips {
  NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(self, outer$, p, ips);
  return self;
}

- (NSString *)getName {
  return @"Ban Peer by IP";
}

- (void)runJob {
  NetI2pRouterBlocklist_banlistForeverWithNetI2pDataHash_withJavaUtilList_(this$0_, _peer_, _ips_);
  @synchronized(this$0_->_inProcess_) {
    [((id<JavaUtilSet>) nil_chk(this$0_->_inProcess_)) removeWithId:_peer_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_ips_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterBlocklist:withNetI2pDataHash:withJavaUtilList:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterBlocklist;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ips_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;LJavaUtilList;", "(Lnet/i2p/data/Hash;Ljava/util/List<[B>;)V", "Ljava/util/List<[B>;", "LNetI2pRouterBlocklist;" };
  static const J2ObjcClassInfo _NetI2pRouterBlocklist_BanlistJob = { "BanlistJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 3, 3, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterBlocklist_BanlistJob;
}

@end

void NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist_BanlistJob *self, NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
  JreStrongAssign(&self->_peer_, p);
  JreStrongAssign(&self->_ips_, ips);
}

NetI2pRouterBlocklist_BanlistJob *new_NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips) {
  J2OBJC_NEW_IMPL(NetI2pRouterBlocklist_BanlistJob, initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_, outer$, p, ips)
}

NetI2pRouterBlocklist_BanlistJob *create_NetI2pRouterBlocklist_BanlistJob_initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_(NetI2pRouterBlocklist *outer$, NetI2pDataHash *p, id<JavaUtilList> ips) {
  J2OBJC_CREATE_IMPL(NetI2pRouterBlocklist_BanlistJob, initWithNetI2pRouterBlocklist_withNetI2pDataHash_withJavaUtilList_, outer$, p, ips)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterBlocklist_BanlistJob)
