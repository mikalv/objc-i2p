//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/LookupThrottler.java
//

#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/router/networkdb/kademlia/LookupThrottler.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterNetworkdbKademliaLookupThrottler () {
 @public
  NetI2pUtilObjectCounter *counter_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaLookupThrottler, counter_, NetI2pUtilObjectCounter *)

inline NetI2pDataTunnelId *NetI2pRouterNetworkdbKademliaLookupThrottler_get_DUMMY_ID(void);
static NetI2pDataTunnelId *NetI2pRouterNetworkdbKademliaLookupThrottler_DUMMY_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaLookupThrottler, DUMMY_ID, NetI2pDataTunnelId *)

inline jint NetI2pRouterNetworkdbKademliaLookupThrottler_get_MAX_LOOKUPS(void);
#define NetI2pRouterNetworkdbKademliaLookupThrottler_MAX_LOOKUPS 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaLookupThrottler, MAX_LOOKUPS, jint)

inline jlong NetI2pRouterNetworkdbKademliaLookupThrottler_get_CLEAN_TIME(void);
#define NetI2pRouterNetworkdbKademliaLookupThrottler_CLEAN_TIME 120000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaLookupThrottler, CLEAN_TIME, jlong)

@interface NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterNetworkdbKademliaLookupThrottler *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaLookupThrottler:(NetI2pRouterNetworkdbKademliaLookupThrottler *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *self, NetI2pRouterNetworkdbKademliaLookupThrottler *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *new_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *create_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner)

@interface NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel : NSObject {
 @public
  NetI2pDataHash *h_;
  NetI2pDataTunnelId *id__;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)h
                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel, h_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel, id__, NetI2pDataTunnelId *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *self, NetI2pDataHash *h, NetI2pDataTunnelId *id_);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *new_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *h, NetI2pDataTunnelId *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *create_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *h, NetI2pDataTunnelId *id_);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterNetworkdbKademliaLookupThrottler)

@implementation NetI2pRouterNetworkdbKademliaLookupThrottler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterNetworkdbKademliaLookupThrottler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)shouldThrottleWithNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  return [((NetI2pUtilObjectCounter *) nil_chk(self->counter_)) incrementWithId:create_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(key, id_)] > NetI2pRouterNetworkdbKademliaLookupThrottler_MAX_LOOKUPS;
}

- (void)dealloc {
  RELEASE_(counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(shouldThrottleWithNetI2pDataHash:withNetI2pDataTunnelId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "DUMMY_ID", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "MAX_LOOKUPS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaLookupThrottler_MAX_LOOKUPS, 0x1a, -1, -1, -1, -1 },
    { "CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaLookupThrottler_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "shouldThrottle", "LNetI2pDataHash;LNetI2pDataTunnelId;", "Lnet/i2p/util/ObjectCounter<Lnet/i2p/router/networkdb/kademlia/LookupThrottler$ReplyTunnel;>;", &NetI2pRouterNetworkdbKademliaLookupThrottler_DUMMY_ID, "LNetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner;LNetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaLookupThrottler = { "LookupThrottler", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 2, 4, -1, 4, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaLookupThrottler;
}

+ (void)initialize {
  if (self == [NetI2pRouterNetworkdbKademliaLookupThrottler class]) {
    JreStrongAssignAndConsume(&NetI2pRouterNetworkdbKademliaLookupThrottler_DUMMY_ID, new_NetI2pDataTunnelId_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterNetworkdbKademliaLookupThrottler)
  }
}

@end

void NetI2pRouterNetworkdbKademliaLookupThrottler_init(NetI2pRouterNetworkdbKademliaLookupThrottler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->counter_, new_NetI2pUtilObjectCounter_init());
  [((NetI2pUtilSimpleTimer2 *) nil_chk(NetI2pUtilSimpleTimer2_getInstance())) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(self) withLong:NetI2pRouterNetworkdbKademliaLookupThrottler_CLEAN_TIME];
}

NetI2pRouterNetworkdbKademliaLookupThrottler *new_NetI2pRouterNetworkdbKademliaLookupThrottler_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler, init)
}

NetI2pRouterNetworkdbKademliaLookupThrottler *create_NetI2pRouterNetworkdbKademliaLookupThrottler_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaLookupThrottler)

@implementation NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner

- (instancetype)initWithNetI2pRouterNetworkdbKademliaLookupThrottler:(NetI2pRouterNetworkdbKademliaLookupThrottler *)outer$ {
  NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(self, outer$);
  return self;
}

- (void)timeReached {
  [((NetI2pUtilObjectCounter *) nil_chk(this$0_->counter_)) clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaLookupThrottler:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaLookupThrottler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterNetworkdbKademliaLookupThrottler;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner = { "Cleaner", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner;
}

@end

void NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *self, NetI2pRouterNetworkdbKademliaLookupThrottler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *new_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner, initWithNetI2pRouterNetworkdbKademliaLookupThrottler_, outer$)
}

NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner *create_NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaLookupThrottler_(NetI2pRouterNetworkdbKademliaLookupThrottler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner, initWithNetI2pRouterNetworkdbKademliaLookupThrottler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaLookupThrottler_Cleaner)

@implementation NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)h
                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(self, h, id_);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil || !([obj isKindOfClass:[NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel class]])) return false;
  return [((NetI2pDataHash *) nil_chk(self->h_)) isEqual:((NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *) cast_chk(obj, [NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel class]))->h_] && [((NetI2pDataTunnelId *) nil_chk(self->id__)) isEqual:((NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *) cast_chk(obj, [NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel class]))->id__];
}

- (NSUInteger)hash {
  return ((jint) [((NetI2pDataHash *) nil_chk(self->h_)) hash]) ^ ((jint) [((NetI2pDataTunnelId *) nil_chk(self->id__)) hash]);
}

- (void)dealloc {
  RELEASE_(h_);
  RELEASE_(id__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "h_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "id__", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x11, 4, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;LNetI2pDataTunnelId;", "equals", "LNSObject;", "hashCode", "id", "LNetI2pRouterNetworkdbKademliaLookupThrottler;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel = { "ReplyTunnel", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0xa, 3, 2, 5, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel;
}

@end

void NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *self, NetI2pDataHash *h, NetI2pDataTunnelId *id_) {
  NSObject_init(self);
  JreStrongAssign(&self->h_, h);
  if (id_ != nil) JreStrongAssign(&self->id__, id_);
  else JreStrongAssign(&self->id__, JreLoadStatic(NetI2pRouterNetworkdbKademliaLookupThrottler, DUMMY_ID));
}

NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *new_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *h, NetI2pDataTunnelId *id_) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel, initWithNetI2pDataHash_withNetI2pDataTunnelId_, h, id_)
}

NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel *create_NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *h, NetI2pDataTunnelId *id_) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel, initWithNetI2pDataHash_withNetI2pDataTunnelId_, h, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaLookupThrottler_ReplyTunnel)
