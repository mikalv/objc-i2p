//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodfillVerifyStoreJob.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillVerifyStoreJob.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/SingleLookupJob.h"
#include "net/i2p/router/networkdb/kademlia/StoreJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/util/MaskedIPSet.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/KeyRing.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataHash *_key_;
  NetI2pDataHash *_target_;
  NetI2pDataHash *_sentTo_;
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *_facade_;
  jlong _expiration_;
  jlong _sendTime_;
  jlong _published_;
  jboolean _isRouterInfo_;
  NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *_wrappedMessage_;
  id<JavaUtilSet> _ignore_;
  NetI2pRouterUtilMaskedIPSet *_ipSet_;
}

- (NetI2pDataHash *)pickTarget;

- (NetI2pDataI2npDatabaseLookupMessage *)buildLookupWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnelInfo;

- (void)resend;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _target_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _sentTo_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _facade_, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _wrappedMessage_, NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _ignore_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, _ipSet_, NetI2pRouterUtilMaskedIPSet *)

inline jint NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_get_START_DELAY(void);
#define NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY 18000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, START_DELAY, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_get_START_DELAY_RAND(void);
#define NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY_RAND 9000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, START_DELAY_RAND, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_get_VERIFY_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VERIFY_TIMEOUT 20000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, VERIFY_TIMEOUT, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_get_MAX_PEERS_TO_TRY(void);
#define NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_MAX_PEERS_TO_TRY 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, MAX_PEERS_TO_TRY, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_get_IP_CLOSE_BYTES(void);
#define NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_IP_CLOSE_BYTES 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, IP_CLOSE_BYTES, jint)

__attribute__((unused)) static NetI2pDataHash *NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_pickTarget(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self);

__attribute__((unused)) static NetI2pDataI2npDatabaseLookupMessage *NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_buildLookupWithNetI2pRouterTunnelInfo_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self, id<NetI2pRouterTunnelInfo> replyTunnelInfo);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_resend(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self);

@interface NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector : NSObject < NetI2pRouterMessageSelector > {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$;

- (jboolean)continueMatching;

- (jlong)getExpiration;

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector)

@interface NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob : NetI2pRouterJobImpl < NetI2pRouterReplyJob > {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *this$0_;
  id<NetI2pDataI2npI2NPMessage> _message_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$
                                               withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob, _message_, id<NetI2pDataI2npI2NPMessage>)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob)

@interface NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$
                                               withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)key
                                         withLong:(jlong)published
                                      withBoolean:(jboolean)isRouterInfo
                               withNetI2pDataHash:(NetI2pDataHash *)sentTo
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(self, ctx, key, published, isRouterInfo, sentTo, facade);
  return self;
}

- (NSString *)getName {
  return @"Verify netdb store";
}

- (void)runJob {
  JreStrongAssign(&_target_, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_pickTarget(self));
  if (_target_ == nil) {
    [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) verifyFinishedWithNetI2pDataHash:_key_];
    return;
  }
  jboolean isInboundExploratory;
  id<NetI2pRouterTunnelInfo> replyTunnelInfo;
  if (_isRouterInfo_ || [((NetI2pUtilKeyRing *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyRing])) getWithId:_key_] != nil) {
    replyTunnelInfo = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundExploratoryTunnelWithNetI2pDataHash:_target_];
    isInboundExploratory = true;
  }
  else {
    replyTunnelInfo = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundTunnelWithNetI2pDataHash:_key_ withNetI2pDataHash:_target_];
    isInboundExploratory = false;
  }
  if (replyTunnelInfo == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No inbound tunnels to get a reply from!"];
    return;
  }
  NetI2pDataI2npDatabaseLookupMessage *lookup = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_buildLookupWithNetI2pRouterTunnelInfo_(self, replyTunnelInfo);
  id<NetI2pRouterTunnelInfo> outTunnel;
  if (_isRouterInfo_ || [((NetI2pUtilKeyRing *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyRing])) getWithId:_key_] != nil) outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundExploratoryTunnelWithNetI2pDataHash:_target_];
  else outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundTunnelWithNetI2pDataHash:_key_ withNetI2pDataHash:_target_];
  if (outTunnel == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No outbound tunnels to verify a store"];
    [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) verifyFinishedWithNetI2pDataHash:_key_];
    return;
  }
  NetI2pDataRouterRouterInfo *peer = [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) lookupRouterInfoLocallyWithNetI2pDataHash:_target_];
  if (peer == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Fail finding target RI"];
    [_facade_ verifyFinishedWithNetI2pDataHash:_key_];
    return;
  }
  if (NetI2pDataI2npDatabaseLookupMessage_supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo_(peer)) {
    NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *sess;
    if (isInboundExploratory) {
      sess = NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_([self getContext]);
    }
    else {
      sess = NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pDataHash_([self getContext], _key_);
      if (sess == nil) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No SKM to reply to"];
        [_facade_ verifyFinishedWithNetI2pDataHash:_key_];
        return;
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@C@C@", @"Requesting encrypted reply from ", _target_, ' ', ((NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *) nil_chk(sess))->key_, ' ', sess->tag_)];
    [((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(lookup)) setReplySessionWithNetI2pDataSessionKey:((NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *) nil_chk(sess))->key_ withNetI2pDataSessionTag:sess->tag_];
  }
  NetI2pDataHash *fromKey;
  if (_isRouterInfo_) fromKey = nil;
  else fromKey = _key_;
  JreStrongAssign(&_wrappedMessage_, NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_([self getContext], lookup, fromKey, peer));
  if (_wrappedMessage_ == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Fail Garlic encrypting"];
    [_facade_ verifyFinishedWithNetI2pDataHash:_key_];
    return;
  }
  id<NetI2pDataI2npI2NPMessage> sent = [_wrappedMessage_ getMessage];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@$@", @"Starting verify (stored ", _key_, @" to ", _sentTo_, @"), asking ", _target_)];
  _sendTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  _expiration_ = _sendTime_ + NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VERIFY_TIMEOUT;
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(self) withNetI2pRouterReplyJob:create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(self, [self getContext]) withNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(self, [self getContext])];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:sent withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataHash:_target_];
}

- (NetI2pDataHash *)pickTarget {
  return NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_pickTarget(self);
}

- (NetI2pDataI2npDatabaseLookupMessage *)buildLookupWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnelInfo {
  return NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_buildLookupWithNetI2pRouterTunnelInfo_(self, replyTunnelInfo);
}

- (void)resend {
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_resend(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_key_);
  RELEASE_(_target_);
  RELEASE_(_sentTo_);
  RELEASE_(_facade_);
  RELEASE_(_wrappedMessage_);
  RELEASE_(_ignore_);
  RELEASE_(_ipSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDatabaseLookupMessage;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withLong:withBoolean:withNetI2pDataHash:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(pickTarget);
  methods[4].selector = @selector(buildLookupWithNetI2pRouterTunnelInfo:);
  methods[5].selector = @selector(resend);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_target_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentTo_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_published_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isRouterInfo_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_wrappedMessage_", "LNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_ignore_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_ipSet_", "LNetI2pRouterUtilMaskedIPSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "START_DELAY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY, 0x1a, -1, -1, -1, -1 },
    { "START_DELAY_RAND", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY_RAND, 0x1a, -1, -1, -1, -1 },
    { "VERIFY_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VERIFY_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_PEERS_TO_TRY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_MAX_PEERS_TO_TRY, 0x1a, -1, -1, -1, -1 },
    { "IP_CLOSE_BYTES", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_IP_CLOSE_BYTES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;JZLNetI2pDataHash;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", "buildLookup", "LNetI2pRouterTunnelInfo;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector;LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob;LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob = { "FloodfillVerifyStoreJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 6, 17, -1, 4, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, jlong published, jboolean isRouterInfo, NetI2pDataHash *sentTo, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(facade)) verifyStartedWithNetI2pDataHash:key];
  JreStrongAssign(&self->_key_, key);
  self->_published_ = published;
  self->_isRouterInfo_ = isRouterInfo;
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_sentTo_, sentTo);
  JreStrongAssign(&self->_facade_, facade);
  JreStrongAssignAndConsume(&self->_ignore_, new_JavaUtilHashSet_initWithInt_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_MAX_PEERS_TO_TRY));
  if (sentTo != nil) {
    JreStrongAssignAndConsume(&self->_ipSet_, new_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(ctx, sentTo, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_IP_CLOSE_BYTES));
    [self->_ignore_ addWithId:self->_sentTo_];
  }
  else {
    JreStrongAssignAndConsume(&self->_ipSet_, new_NetI2pRouterUtilMaskedIPSet_initWithInt_(4));
  }
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([ctx clock])) now] + NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY + [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextIntWithInt:NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_START_DELAY_RAND]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"netDb.floodfillVerifyOK" withNSString:@"How long a floodfill verify takes when it succeeds" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"netDb.floodfillVerifyFail" withNSString:@"How long a floodfill verify takes when it fails" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"netDb.floodfillVerifyTimeout" withNSString:@"How long a floodfill verify takes when it times out" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, jlong published, jboolean isRouterInfo, NetI2pDataHash *sentTo, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, key, published, isRouterInfo, sentTo, facade)
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, jlong published, jboolean isRouterInfo, NetI2pDataHash *sentTo, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, key, published, isRouterInfo, sentTo, facade)
}

NetI2pDataHash *NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_pickTarget(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self) {
  NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:self->_key_];
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *sel = (NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(self->_facade_)) getPeerSelector], [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class]);
  NetI2pDataCertificate *keyCert = nil;
  if (!self->_isRouterInfo_) {
    NetI2pDataDestination *dest = [self->_facade_ lookupDestinationLocallyWithNetI2pDataHash:self->_key_];
    if (dest != nil) {
      NetI2pDataCertificate *cert = [dest getCertificate];
      if ([((NetI2pDataCertificate *) nil_chk(cert)) getCertificateType] == NetI2pDataCertificate_CERTIFICATE_TYPE_KEY) keyCert = cert;
    }
  }
  if (keyCert != nil) {
    while (true) {
      id<JavaUtilList> peers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(sel)) selectFloodfillParticipantsWithNetI2pDataHash:rkey withInt:1 withJavaUtilSet:self->_ignore_ withNetI2pKademliaKBucketSet:[self->_facade_ getKBuckets]];
      if ([((id<JavaUtilList>) nil_chk(peers)) isEmpty]) break;
      NetI2pDataHash *peer = [peers getWithInt:0];
      NetI2pDataRouterRouterInfo *ri = [self->_facade_ lookupRouterInfoLocallyWithNetI2pDataHash:peer];
      if (ri != nil && NetI2pRouterNetworkdbKademliaStoreJob_shouldStoreToWithNetI2pDataRouterRouterInfo_(ri)) {
        id<JavaUtilSet> peerIPs = create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_([self getContext], ri, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_IP_CLOSE_BYTES);
        if (![((NetI2pRouterUtilMaskedIPSet *) nil_chk(self->_ipSet_)) containsAnyWithJavaUtilSet:peerIPs]) {
          [self->_ipSet_ addAllWithJavaUtilCollection:peerIPs];
          return peer;
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Skipping verify w/ router too close to the store ", peer)];
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Skipping verify w/ router that is too old ", peer)];
      }
      [((id<JavaUtilSet>) nil_chk(self->_ignore_)) addWithId:peer];
    }
  }
  else {
    id<JavaUtilList> peers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(sel)) selectFloodfillParticipantsWithNetI2pDataHash:rkey withInt:1 withJavaUtilSet:self->_ignore_ withNetI2pKademliaKBucketSet:[self->_facade_ getKBuckets]];
    if (![((id<JavaUtilList>) nil_chk(peers)) isEmpty]) return [peers getWithInt:0];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No other peers to verify floodfill with, using the one we sent to"];
  return self->_sentTo_;
}

NetI2pDataI2npDatabaseLookupMessage *NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_buildLookupWithNetI2pRouterTunnelInfo_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self, id<NetI2pRouterTunnelInfo> replyTunnelInfo) {
  NetI2pDataI2npDatabaseLookupMessage *m = create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_([self getContext], true);
  [m setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VERIFY_TIMEOUT];
  [m setReplyTunnelWithNetI2pDataTunnelId:[((id<NetI2pRouterTunnelInfo>) nil_chk(replyTunnelInfo)) getReceiveTunnelIdWithInt:0]];
  [m setFromWithNetI2pDataHash:[replyTunnelInfo getPeerWithInt:0]];
  [m setSearchKeyWithNetI2pDataHash:self->_key_];
  [m setSearchTypeWithNetI2pDataI2npDatabaseLookupMessage_Type:self->_isRouterInfo_ ? JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, RI) : JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS)];
  return m;
}

void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_resend(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *self) {
  NetI2pDataDatabaseEntry *ds = [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(self->_facade_)) lookupLocallyWithNetI2pDataHash:self->_key_];
  if (ds != nil) {
    id<JavaUtilSet> toSkip = create_JavaUtilHashSet_initWithInt_(2);
    if (self->_sentTo_ != nil) [toSkip addWithId:self->_sentTo_];
    if (self->_target_ != nil) [toSkip addWithId:self->_target_];
    [self->_facade_ sendStoreWithNetI2pDataHash:self->_key_ withNetI2pDataDatabaseEntry:ds withNetI2pRouterJob:nil withNetI2pRouterJob:nil withLong:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_PUBLISH_TIMEOUT withJavaUtilSet:toSkip];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$ {
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(self, outer$);
  return self;
}

- (jboolean)continueMatching {
  return false;
}

- (jlong)getExpiration {
  return this$0_->_expiration_;
}

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  if ([message isKindOfClass:[NetI2pDataI2npDatabaseStoreMessage class]]) {
    NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(message, [NetI2pDataI2npDatabaseStoreMessage class]);
    return [((NetI2pDataHash *) nil_chk(this$0_->_key_)) isEqual:[((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(dsm)) getKey]];
  }
  else if ([message isKindOfClass:[NetI2pDataI2npDatabaseSearchReplyMessage class]]) {
    NetI2pDataI2npDatabaseSearchReplyMessage *dsrm = (NetI2pDataI2npDatabaseSearchReplyMessage *) cast_chk(message, [NetI2pDataI2npDatabaseSearchReplyMessage class]);
    return [((NetI2pDataHash *) nil_chk(this$0_->_key_)) isEqual:[((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(dsrm)) getSearchKey]];
  }
  return false;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:);
  methods[1].selector = @selector(continueMatching);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(isMatchWithNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector = { "VerifyReplySelector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 4, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_, outer$)
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplySelector)

@implementation NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$
                                               withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Handle floodfill verification reply";
}

- (void)runJob {
  jlong delay = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - this$0_->_sendTime_;
  if (this$0_->_wrappedMessage_ != nil) [this$0_->_wrappedMessage_ acked];
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(this$0_->_facade_)) verifyFinishedWithNetI2pDataHash:this$0_->_key_];
  if ([_message_ isKindOfClass:[NetI2pDataI2npDatabaseStoreMessage class]]) {
    NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(_message_, [NetI2pDataI2npDatabaseStoreMessage class]);
    jboolean success = [((NetI2pDataDatabaseEntry *) nil_chk([((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(dsm)) getEntry])) getDate] >= this$0_->_published_;
    if (success) {
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupSuccessfulWithNetI2pDataHash:this$0_->_target_ withLong:delay];
      if (this$0_->_sentTo_ != nil) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreSuccessfulWithNetI2pDataHash:this$0_->_sentTo_];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.floodfillVerifyOK" withLong:delay];
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Verify success for ", this$0_->_key_)];
      if (this$0_->_isRouterInfo_) [this$0_->_facade_ routerInfoPublishSuccessful];
      return;
    }
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Verify failed (older) for ", this$0_->_key_)];
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Rcvd older data: ", [dsm getEntry])];
  }
  else if ([_message_ isKindOfClass:[NetI2pDataI2npDatabaseSearchReplyMessage class]]) {
    NetI2pDataI2npDatabaseSearchReplyMessage *dsrm = (NetI2pDataI2npDatabaseSearchReplyMessage *) cast_chk(_message_, [NetI2pDataI2npDatabaseSearchReplyMessage class]);
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupReplyWithNetI2pDataHash:this$0_->_target_ withInt:0 withInt:[((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(dsrm)) getNumReplies] withInt:0 withInt:0 withLong:delay];
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Verify failed (DSRM) for ", this$0_->_key_)];
    if (this$0_->_isRouterInfo_) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_([self getContext], dsrm)];
  }
  if (this$0_->_sentTo_ != nil) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreFailedWithNetI2pDataHash:this$0_->_sentTo_];
  if (this$0_->_target_ != nil && ![this$0_->_target_ isEqual:this$0_->_sentTo_]) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:this$0_->_target_];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.floodfillVerifyFail" withLong:delay];
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_resend(this$0_);
}

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  JreStrongAssign(&_message_, message);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_message_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(setMessageWithNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setMessage", "LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob = { "VerifyReplyJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 4, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyReplyJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *)outer$
                                               withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Floodfill verification timeout";
}

- (void)runJob {
  if (this$0_->_wrappedMessage_ != nil) [this$0_->_wrappedMessage_ fail];
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:this$0_->_target_];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.floodfillVerifyTimeout" withLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - this$0_->_sendTime_];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Verify timed out for: ", this$0_->_key_)];
  if ([((id<JavaUtilSet>) nil_chk(this$0_->_ignore_)) size] < NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_MAX_PEERS_TO_TRY) {
    [this$0_->_ignore_ addWithId:this$0_->_target_];
    [this$0_ runJob];
  }
  else {
    [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(this$0_->_facade_)) verifyFinishedWithNetI2pDataHash:this$0_->_key_];
    NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_resend(this$0_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob = { "VerifyTimeoutJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *self, NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *new_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob *create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob_initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob, initWithNetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_VerifyTimeoutJob)
