//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/ExploreJob.java
//

#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/ExploreJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/IterativeSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchState.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterNetworkdbKademliaExploreJob () {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *_peerSelector_ExploreJob_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaExploreJob, _peerSelector_ExploreJob_, NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *)

inline jlong NetI2pRouterNetworkdbKademliaExploreJob_get_MAX_EXPLORE_TIME(void);
#define NetI2pRouterNetworkdbKademliaExploreJob_MAX_EXPLORE_TIME 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaExploreJob, MAX_EXPLORE_TIME, jlong)

inline jint NetI2pRouterNetworkdbKademliaExploreJob_get_EXPLORE_BREDTH(void);
#define NetI2pRouterNetworkdbKademliaExploreJob_EXPLORE_BREDTH 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaExploreJob, EXPLORE_BREDTH, jint)

@implementation NetI2pRouterNetworkdbKademliaExploreJob

+ (jint)MAX_CLOSEST {
  return NetI2pRouterNetworkdbKademliaExploreJob_MAX_CLOSEST;
}

+ (jint)PER_FLOODFILL_PEER_TIMEOUT {
  return NetI2pRouterNetworkdbKademliaExploreJob_PER_FLOODFILL_PEER_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key {
  NetI2pRouterNetworkdbKademliaExploreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(self, context, facade, key);
  return self;
}

- (id<NetI2pDataI2npI2NPMessage>)buildMessageWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnelId
                                                 withNetI2pDataHash:(NetI2pDataHash *)replyGateway
                                                           withLong:(jlong)expiration
                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  NetI2pDataI2npDatabaseLookupMessage *msg = create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_([self getContext], true);
  [msg setSearchKeyWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk([self getState])) getTarget]];
  [msg setFromWithNetI2pDataHash:replyGateway];
  id<JavaUtilSet> dontIncludePeers = [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk([self getState])) getClosestAttemptedWithInt:NetI2pRouterNetworkdbKademliaExploreJob_MAX_CLOSEST];
  [msg setMessageExpirationWithLong:expiration];
  if (replyTunnelId != nil) [msg setReplyTunnelWithNetI2pDataTunnelId:replyTunnelId];
  jint available = NetI2pRouterNetworkdbKademliaExploreJob_MAX_CLOSEST - [((id<JavaUtilSet>) nil_chk(dontIncludePeers)) size];
  if (available > 0) {
    if ([dontIncludePeers addWithId:JreLoadStatic(NetI2pDataHash, FAKE_HASH)]) available--;
  }
  [msg setSearchTypeWithNetI2pDataI2npDatabaseLookupMessage_Type:JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL)];
  NetI2pKademliaKBucketSet *ks = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) getKBuckets];
  NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk([self getState])) getTarget]];
  available = NetI2pRouterNetworkdbKademliaExploreJob_MAX_CLOSEST - [dontIncludePeers size];
  if (available > 0) {
    id<JavaUtilSet> dontInclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(dontIncludePeers);
    id<JavaUtilList> peers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(_peerSelector_ExploreJob_)) selectNearestExplicitWithNetI2pDataHash:rkey withInt:available withJavaUtilSet:dontInclude withNetI2pKademliaKBucketSet:ks];
    [dontIncludePeers addAllWithJavaUtilCollection:peers];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Peers we don't want to hear about: ", dontIncludePeers)];
  [msg setDontIncludePeersWithJavaUtilCollection:dontIncludePeers];
  id<NetI2pDataI2npI2NPMessage> outMsg;
  if (replyTunnelId != nil && [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI withBoolean:JreLoadStatic(NetI2pRouterNetworkdbKademliaIterativeSearchJob, DEFAULT_ENCRYPT_RI)]) {
    if (NetI2pDataI2npDatabaseLookupMessage_supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo_(peer)) {
      NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *sess;
      sess = NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_([self getContext]);
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@C@C@", [self getJobId], @": Requesting encrypted reply from ", [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) calculateHash], ' ', ((NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *) nil_chk(sess))->key_, ' ', sess->tag_)];
      [msg setReplySessionWithNetI2pDataSessionKey:((NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *) nil_chk(sess))->key_ withNetI2pDataSessionTag:sess->tag_];
    }
    outMsg = NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterInfo_([self getContext], msg, peer);
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@$@", [self getJobId], @": Encrypted exploratory DLM for ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk([self getState])) getTarget], @" to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) calculateHash])];
  }
  else {
    outMsg = msg;
  }
  return outMsg;
}

- (jint)getBredth {
  return NetI2pRouterNetworkdbKademliaExploreJob_EXPLORE_BREDTH;
}

- (void)newPeersFoundWithInt:(jint)numNewPeers {
  [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) setLastExploreNewDateWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]];
}

- (NSString *)getName {
  return @"Kademlia NetDb Explore";
}

- (void)dealloc {
  RELEASE_(_peerSelector_ExploreJob_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:withNetI2pDataHash:);
  methods[1].selector = @selector(buildMessageWithNetI2pDataTunnelId:withNetI2pDataHash:withLong:withNetI2pDataRouterRouterInfo:);
  methods[2].selector = @selector(getBredth);
  methods[3].selector = @selector(newPeersFoundWithInt:);
  methods[4].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_peerSelector_ExploreJob_", "LNetI2pRouterNetworkdbKademliaFloodfillPeerSelector;", .constantValue.asLong = 0, 0x2, 5, -1, -1, -1 },
    { "MAX_EXPLORE_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaExploreJob_MAX_EXPLORE_TIME, 0x1a, -1, -1, -1, -1 },
    { "EXPLORE_BREDTH", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaExploreJob_EXPLORE_BREDTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_CLOSEST", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaExploreJob_MAX_CLOSEST, 0x18, -1, -1, -1, -1 },
    { "PER_FLOODFILL_PEER_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaExploreJob_PER_FLOODFILL_PEER_TIMEOUT, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;LNetI2pDataHash;", "buildMessage", "LNetI2pDataTunnelId;LNetI2pDataHash;JLNetI2pDataRouterRouterInfo;", "newPeersFound", "I", "_peerSelector" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaExploreJob = { "ExploreJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaExploreJob;
}

@end

void NetI2pRouterNetworkdbKademliaExploreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaExploreJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key) {
  NetI2pRouterNetworkdbKademliaSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_(self, context, facade, key, nil, nil, NetI2pRouterNetworkdbKademliaExploreJob_MAX_EXPLORE_TIME, false, false);
  JreStrongAssign(&self->_peerSelector_ExploreJob_, (NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk(([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getPeerSelector]), [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class]));
}

NetI2pRouterNetworkdbKademliaExploreJob *new_NetI2pRouterNetworkdbKademliaExploreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaExploreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_, context, facade, key)
}

NetI2pRouterNetworkdbKademliaExploreJob *create_NetI2pRouterNetworkdbKademliaExploreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaExploreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_, context, facade, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaExploreJob)
