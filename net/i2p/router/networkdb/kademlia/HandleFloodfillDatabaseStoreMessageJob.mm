//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/HandleFloodfillDatabaseStoreMessageJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/message/SendMessageDirectJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/HandleFloodfillDatabaseStoreMessageJob.h"
#include "net/i2p/router/networkdb/kademlia/UnsupportedCryptoException.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataI2npDatabaseStoreMessage *_message_;
  NetI2pDataRouterRouterIdentity *_from_;
  NetI2pDataHash *_fromHash_;
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *_facade_;
}

- (void)sendAckWithNetI2pDataHash:(NetI2pDataHash *)storedKey;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, _message_, NetI2pDataI2npDatabaseStoreMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, _from_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, _fromHash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, _facade_, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)

inline jint NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_get_REPLY_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_REPLY_TIMEOUT 60000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, REPLY_TIMEOUT, jint)

inline jint NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_get_MESSAGE_PRIORITY(void);
#define NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_MESSAGE_PRIORITY 300
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, MESSAGE_PRIORITY, jint)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_sendAckWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob *self, NetI2pDataHash *storedKey);

@implementation NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
           withNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)receivedMessage
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                               withNetI2pDataHash:(NetI2pDataHash *)fromHash
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(self, ctx, receivedMessage, from, fromHash, facade);
  return self;
}

- (void)runJob {
  jlong recvBegin = JavaLangSystem_currentTimeMillis();
  NSString *invalidMessage = nil;
  jboolean dontBlamePeer = false;
  jboolean wasNew = false;
  NetI2pDataRouterRouterInfo *prevNetDb = nil;
  NetI2pDataHash *key = [((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(_message_)) getKey];
  NetI2pDataDatabaseEntry *entry_ = [_message_ getEntry];
  if ([((NetI2pDataDatabaseEntry *) nil_chk(entry_)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeLeaseSetHandled" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Handling dbStore of leaseset ", _message_)];
    @try {
      if ([((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) isLocalWithNetI2pDataHash:key]) {
        dontBlamePeer = true;
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Peer attempted to store local leaseSet: ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(key)) toBase64])) java_substring:0 endIndex:4]));
      }
      NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(entry_, [NetI2pDataLeaseSet class]);
      if (![ls getReceivedAsReply]) [ls setReceivedAsPublishedWithBoolean:true];
      NetI2pDataLeaseSet *match = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) storeWithNetI2pDataHash:key withNetI2pDataLeaseSet:ls];
      if (match == nil) {
        wasNew = true;
      }
      else if ([match getEarliestLeaseDate] < [ls getEarliestLeaseDate]) {
        wasNew = true;
        if ([match getReceivedAsPublished]) [ls setReceivedAsPublishedWithBoolean:true];
      }
      else {
        wasNew = false;
      }
    }
    @catch (NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *uce) {
      invalidMessage = [uce getMessage];
      dontBlamePeer = true;
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      invalidMessage = [iae getMessage];
    }
  }
  else if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    NetI2pDataRouterRouterInfo *ri = (NetI2pDataRouterRouterInfo *) cast_chk(entry_, [NetI2pDataRouterRouterInfo class]);
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeRouterInfoHandled" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@", @"Handling dbStore of router ", key, @" with publishDate of ", create_JavaUtilDate_initWithLong_([ri getPublished]))];
    @try {
      if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash])) isEqual:key]) {
        dontBlamePeer = true;
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Peer attempted to store our RouterInfo");
      }
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) heardAboutWithNetI2pDataHash:key];
      prevNetDb = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) storeWithNetI2pDataHash:key withNetI2pDataRouterRouterInfo:ri];
      wasNew = ((nil == prevNetDb) || ([((NetI2pDataRouterRouterInfo *) nil_chk(prevNetDb)) getPublished] < [ri getPublished]));
      if (wasNew) {
        if (prevNetDb == nil) {
          if ((![((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) isBanlistedForeverWithNetI2pDataHash:key]) && [((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) blocklist])) isBlocklistedWithNetI2pDataRouterRouterInfo:ri] && [_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@C@", @"Blocklisting new peer ", key, ' ', ri)];
        }
        else {
          id<JavaUtilCollection> oldAddr = [prevNetDb getAddresses];
          id<JavaUtilCollection> newAddr = [ri getAddresses];
          if ((![((id<JavaUtilCollection>) nil_chk(newAddr)) isEqual:oldAddr]) && (![((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) isBanlistedForeverWithNetI2pDataHash:key]) && [((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) blocklist])) isBlocklistedWithNetI2pDataRouterRouterInfo:ri] && [_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@C@", @"New address received, Blocklisting old peer ", key, ' ', ri)];
        }
      }
    }
    @catch (NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *uce) {
      invalidMessage = [uce getMessage];
      dontBlamePeer = true;
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      invalidMessage = [iae getMessage];
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$I$@", @"Invalid DatabaseStoreMessage data type - ", [entry_ getType], @": ", _message_)];
    return;
  }
  jlong recvEnd = JavaLangSystem_currentTimeMillis();
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeRecvTime" withLong:recvEnd - recvBegin];
  if ([_message_ getReplyToken] > 0) NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_sendAckWithNetI2pDataHash_(self, key);
  jlong ackEnd = JavaLangSystem_currentTimeMillis();
  if (_from_ != nil) JreStrongAssign(&_fromHash_, [_from_ getHash]);
  if (_fromHash_ != nil) {
    if (invalidMessage == nil || dontBlamePeer) {
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreReceivedWithNetI2pDataHash:_fromHash_ withBoolean:wasNew];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeHandled" withLong:ackEnd - recvEnd];
    }
    else {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$", @"Peer ", [((NetI2pDataHash *) nil_chk(_fromHash_)) toBase64], @" sent bad data: ", invalidMessage)];
    }
  }
  else if (invalidMessage != nil && !dontBlamePeer) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Unknown peer sent bad data: ", invalidMessage)];
  }
  if (invalidMessage == nil && [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) floodfillEnabled] && [_message_ getReplyToken] > 0) {
    if (wasNew) {
      if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) shouldThrottleFloodWithNetI2pDataHash:key]) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Too many recent stores, not flooding key: ", key)];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.floodThrottled" withLong:1];
        return;
      }
      jlong floodBegin = JavaLangSystem_currentTimeMillis();
      [_facade_ floodWithNetI2pDataDatabaseEntry:[_message_ getEntry]];
      jlong floodEnd = JavaLangSystem_currentTimeMillis();
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeFloodNew" withLong:floodEnd - floodBegin withLong:60 * 1000];
    }
    else {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeFloodOld" withLong:1];
    }
  }
}

- (void)sendAckWithNetI2pDataHash:(NetI2pDataHash *)storedKey {
  NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_sendAckWithNetI2pDataHash_(self, storedKey);
}

- (NSString *)getName {
  return @"Handle Database Store Message";
}

- (void)dropped {
  [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageHistory])) messageProcessingErrorWithLong:[((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(_message_)) getUniqueId] withNSString:[[_message_ java_getClass] getName] withNSString:@"Dropped due to overload"];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_message_);
  RELEASE_(_from_);
  RELEASE_(_fromHash_);
  RELEASE_(_facade_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npDatabaseStoreMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(sendAckWithNetI2pDataHash:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(dropped);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npDatabaseStoreMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_from_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fromHash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "REPLY_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_REPLY_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE_PRIORITY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_MESSAGE_PRIORITY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npDatabaseStoreMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", "sendAck", "LNetI2pDataHash;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob = { "HandleFloodfillDatabaseStoreMessageJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob;
}

@end

void NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseStoreMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_message_, receivedMessage);
  JreStrongAssign(&self->_from_, from);
  JreStrongAssign(&self->_fromHash_, fromHash);
  JreStrongAssign(&self->_facade_, facade);
}

NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob *new_NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseStoreMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, receivedMessage, from, fromHash, facade)
}

NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob *create_NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseStoreMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, receivedMessage, from, fromHash, facade)
}

void NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_sendAckWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob *self, NetI2pDataHash *storedKey) {
  NetI2pDataI2npDeliveryStatusMessage *msg = create_NetI2pDataI2npDeliveryStatusMessage_initWithNetI2pI2PAppContext_([self getContext]);
  [msg setMessageIdWithLong:[((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(self->_message_)) getReplyToken]];
  [msg setArrivalWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextIntWithInt:3 * 1000]];
  NetI2pDataTunnelId *replyTunnel = [self->_message_ getReplyTunnel];
  NetI2pDataI2npDatabaseStoreMessage *msg2;
  if (([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) floodfillEnabled] && ![((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) gracefulShutdownInProgress]) || [((NetI2pDataHash *) nil_chk(storedKey)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]]) {
    msg2 = nil;
  }
  else {
    msg2 = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_([self getContext]);
    NetI2pDataRouterRouterInfo *me = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo];
    [msg2 setEntryWithNetI2pDataDatabaseEntry:me];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Got a store w/ reply token, but we aren't ff: from: ", self->_from_, @" fromHash: ", self->_fromHash_, @" msg: ", self->_message_) withJavaLangThrowable:create_JavaLangException_init()];
  }
  NetI2pDataHash *toPeer = [self->_message_ getReplyGateway];
  jboolean toUs = [((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash])) isEqual:toPeer];
  if (toUs && replyTunnel != nil) {
    NetI2pDataI2npTunnelGatewayMessage *tgm = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_([self getContext]);
    [tgm setMessageWithNetI2pDataI2npI2NPMessage:msg];
    [tgm setTunnelIdWithNetI2pDataTunnelId:replyTunnel];
    [tgm setMessageExpirationWithLong:[msg getMessageExpiration]];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelGatewayMessage:tgm];
    if (msg2 != nil) {
      NetI2pDataI2npTunnelGatewayMessage *tgm2 = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_([self getContext]);
      [tgm2 setMessageWithNetI2pDataI2npI2NPMessage:msg2];
      [tgm2 setTunnelIdWithNetI2pDataTunnelId:replyTunnel];
      [tgm2 setMessageExpirationWithLong:[msg getMessageExpiration]];
      [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelGatewayMessage:tgm2];
    }
  }
  else if (toUs || [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) isEstablishedWithNetI2pDataHash:toPeer]) {
    id<NetI2pRouterJob> send = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], msg, toPeer, NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_REPLY_TIMEOUT, NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_MESSAGE_PRIORITY);
    [send runJob];
    if (msg2 != nil) {
      id<NetI2pRouterJob> send2 = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], msg2, toPeer, NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_REPLY_TIMEOUT, NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob_MESSAGE_PRIORITY);
      [send2 runJob];
    }
  }
  else {
    id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundExploratoryTunnelWithNetI2pDataHash:toPeer];
    if (outTunnel == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No outbound tunnel could be found"];
      return;
    }
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:replyTunnel withNetI2pDataHash:toPeer];
    if (msg2 != nil) [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg2 withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:replyTunnel withNetI2pDataHash:toPeer];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseStoreMessageJob)
