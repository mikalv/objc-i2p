//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/IterativeSearchJob.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/kademlia/XORComparator.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupMatchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupTimeoutJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/IterativeLookupSelector.h"
#include "net/i2p/router/networkdb/kademlia/IterativeSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/IterativeTimeoutJob.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/util/MaskedIPSet.h"
#include "net/i2p/router/util/RandomIterator.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/NativeBigInteger.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pRouterNetworkdbKademliaIterativeSearchJob () {
 @public
  id<JavaUtilSortedSet> _toTry_;
  id<JavaUtilSet> _unheardFrom_;
  id<JavaUtilSet> _failedPeers_;
  id<JavaUtilMap> _sentTime_;
  NetI2pDataHash *_rkey_;
  NetI2pRouterOutNetMessage *_out_;
  NetI2pDataHash *_fromLocalDest_;
  jint _totalSearchLimit_;
  NetI2pRouterUtilMaskedIPSet *_ipSet_;
  id<JavaUtilSet> _skippedPeers_;
  jlong _singleSearchTime_;
  jint _maxConcurrent_;
}

- (void)retry;

- (void)sendQueryWithNetI2pDataHash:(NetI2pDataHash *)peer;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _toTry_, id<JavaUtilSortedSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _unheardFrom_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _failedPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _sentTime_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _rkey_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _out_, NetI2pRouterOutNetMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _fromLocalDest_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _ipSet_, NetI2pRouterUtilMaskedIPSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _skippedPeers_, id<JavaUtilSet>)

inline NetI2pDataHash *NetI2pRouterNetworkdbKademliaIterativeSearchJob_get__alwaysQueryHash(void);
inline NetI2pDataHash *NetI2pRouterNetworkdbKademliaIterativeSearchJob_set__alwaysQueryHash(NetI2pDataHash *value);
static NetI2pDataHash *NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash;
J2OBJC_STATIC_FIELD_OBJ(NetI2pRouterNetworkdbKademliaIterativeSearchJob, _alwaysQueryHash, NetI2pDataHash *)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_MAX_NON_FF(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_NON_FF 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, MAX_NON_FF, jint)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_TOTAL_SEARCH_LIMIT(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, TOTAL_SEARCH_LIMIT, jint)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_TOTAL_SEARCH_LIMIT_WHEN_FF(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT_WHEN_FF 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, TOTAL_SEARCH_LIMIT_WHEN_FF, jint)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_EXTRA_PEERS(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_EXTRA_PEERS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, EXTRA_PEERS, jint)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_IP_CLOSE_BYTES(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_IP_CLOSE_BYTES 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, IP_CLOSE_BYTES, jint)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_MAX_SEARCH_TIME(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_SEARCH_TIME 30000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, MAX_SEARCH_TIME, jint)

inline jlong NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_SINGLE_SEARCH_TIME(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_TIME 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, SINGLE_SEARCH_TIME, jlong)

inline jlong NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_SINGLE_SEARCH_MSG_TIME(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_MSG_TIME 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, SINGLE_SEARCH_MSG_TIME, jlong)

inline jint NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_MAX_CONCURRENT(void);
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_CONCURRENT 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaIterativeSearchJob, MAX_CONCURRENT, jint)

inline NSString *NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_MIN_QUERY_VERSION(void);
static NSString *NetI2pRouterNetworkdbKademliaIterativeSearchJob_MIN_QUERY_VERSION = @"0.9.28";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, MIN_QUERY_VERSION, NSString *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaIterativeSearchJob_sendQueryWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pDataHash *peer);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterNetworkdbKademliaIterativeSearchJob)

NSString *NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI = @"router.encryptRouterLookups";
jboolean NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI;

@implementation NetI2pRouterNetworkdbKademliaIterativeSearchJob

+ (NSString *)PROP_ENCRYPT_RI {
  return NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI;
}

+ (jboolean)DEFAULT_ENCRYPT_RI {
  return NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                                          withInt:(jint)timeoutMs
                                      withBoolean:(jboolean)isLease {
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                                          withInt:(jint)timeoutMs
                                      withBoolean:(jboolean)isLease
                               withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease, fromLocalDest);
  return self;
}

- (void)runJob {
  if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) isNegativeCachedWithNetI2pDataHash:_key_]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$@", @"Negative cached, not searching: ", _key_)];
    [self failed];
    return;
  }
  id<JavaUtilList> floodfillPeers;
  NetI2pKademliaKBucketSet *ks = [_facade_ getKBuckets];
  if (ks != nil) {
    floodfillPeers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk([_facade_ getPeerSelector], [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class])))) selectFloodfillParticipantsWithNetI2pDataHash:_rkey_ withInt:_totalSearchLimit_ + NetI2pRouterNetworkdbKademliaIterativeSearchJob_EXTRA_PEERS withNetI2pKademliaKBucketSet:ks];
  }
  else {
    floodfillPeers = create_JavaUtilArrayList_initWithInt_(_totalSearchLimit_);
  }
  NSString *alwaysQuery = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:@"netDb.alwaysQuery"];
  if (alwaysQuery != nil) {
    if (NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash == nil) {
      IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_(alwaysQuery);
      if (b != nil && b->size_ == NetI2pDataHash_HASH_LENGTH) JreStrongAssign(&NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash, NetI2pDataHash_createWithByteArray_(b));
    }
  }
  if ([((id<JavaUtilList>) nil_chk(floodfillPeers)) isEmpty]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Running netDb searches against the floodfill peers, but we don't know any"];
    id<JavaUtilList> all = create_JavaUtilArrayList_initWithJavaUtilCollection_([_facade_ getAllRouters]);
    if ([all isEmpty]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:@"We don't know any peers at all"];
      [self failed];
      return;
    }
    id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(all);
    for (jint i = 0; [iter hasNext] && i < NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_NON_FF; i++) {
      [floodfillPeers addWithId:[iter next]];
    }
  }
  jboolean empty;
  NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash];
  @synchronized(self) {
    [((id<JavaUtilSortedSet>) nil_chk(_toTry_)) addAllWithJavaUtilCollection:floodfillPeers];
    [_toTry_ removeWithId:us];
    [_toTry_ removeWithId:_key_];
    empty = [_toTry_ isEmpty];
  }
  if (empty) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("J$@$", [self getJobId], @": ISJ for ", _key_, @" had no peers to send to")];
    [self failed];
    return;
  }
  id<NetI2pRouterMessageSelector> replySelector = create_NetI2pRouterNetworkdbKademliaIterativeLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_([self getContext], self);
  id<NetI2pRouterReplyJob> onReply = create_NetI2pRouterNetworkdbKademliaFloodOnlyLookupMatchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodSearchJob_([self getContext], self);
  id<NetI2pRouterJob> onTimeout = create_NetI2pRouterNetworkdbKademliaFloodOnlyLookupTimeoutJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodSearchJob_([self getContext], self);
  JreStrongAssign(&_out_, [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:replySelector withNetI2pRouterReplyJob:onReply withNetI2pRouterJob:onTimeout]);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$$@$@$$$$", [self getJobId], @": New ISJ for ", (_isLease_ ? @"LS " : @"RI "), _key_, @" (rkey ", _rkey_, @") timeout ", NetI2pDataDataHelper_formatDurationWithLong_(_timeoutMs_), @" toTry: ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(_toTry_))];
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(self);
}

- (void)retry {
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(self);
}

- (void)sendQueryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_sendQueryWithNetI2pDataHash_(self, peer);
}

- (NSString *)getName {
  return @"Iterative search";
}

- (void)failedWithNetI2pDataHash:(NetI2pDataHash *)peer
                     withBoolean:(jboolean)timedOut {
  jboolean isNewFail;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    [((id<JavaUtilSet>) nil_chk(_unheardFrom_)) removeWithId:peer];
    isNewFail = [((id<JavaUtilSet>) nil_chk(_failedPeers_)) addWithId:peer];
  }
  if (isNewFail) {
    if (timedOut) {
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:peer];
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": search timed out to ", peer)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": search failed to ", peer)];
    }
  }
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(self);
}

- (void)newPeerToTryWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]] || [peer isEqual:_key_]) return;
  if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) isBanlistedForeverWithNetI2pDataHash:peer]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": banlisted peer from DSRM ", peer)];
    return;
  }
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (ri != nil && !NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(ri)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": non-ff peer from DSRM ", peer)];
    return;
  }
  @synchronized(self) {
    if ([((id<JavaUtilSet>) nil_chk(_failedPeers_)) containsWithId:peer] || [((id<JavaUtilSet>) nil_chk(_unheardFrom_)) containsWithId:peer] || [((id<JavaUtilSet>) nil_chk(_skippedPeers_)) containsWithId:peer]) return;
    if (![((id<JavaUtilSortedSet>) nil_chk(_toTry_)) addWithId:peer]) return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$ZC@", [self getJobId], @": new peer from DSRM: known? ", (ri != nil), ' ', peer)];
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(self);
}

- (NetI2pDataHash *)getFromHash {
  return _fromLocalDest_;
}

- (jboolean)wasQueriedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(self) {
    return [((id<JavaUtilSet>) nil_chk(_unheardFrom_)) containsWithId:peer] || [((id<JavaUtilSet>) nil_chk(_failedPeers_)) containsWithId:peer];
  }
}

- (jlong)timeSentWithNetI2pDataHash:(NetI2pDataHash *)peer {
  JavaLangLong *rv = [((id<JavaUtilMap>) nil_chk(_sentTime_)) getWithId:peer];
  return rv == nil ? -1 : [rv longLongValue];
}

- (void)dropped {
  [self failed];
}

- (void)failed {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    JreAssignVolatileBoolean(&_dead_, true);
  }
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) completeWithNetI2pDataHash:_key_];
  if ([((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) getStatus] != JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED)) [_facade_ lookupFailedWithNetI2pDataHash:_key_];
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:_out_];
  jint tries;
  id<JavaUtilList> unheard;
  @synchronized(self) {
    tries = [((id<JavaUtilSet>) nil_chk(_unheardFrom_)) size] + [((id<JavaUtilSet>) nil_chk(_failedPeers_)) size];
    unheard = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_unheardFrom_));
  }
  for (NetI2pDataHash * __strong h in unheard) {
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:h];
  }
  jlong time = JavaLangSystem_currentTimeMillis() - _created_;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jlong timeRemaining = _expiration_ - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
    [_log_ infoWithNSString:JreStrcat("J$@$J$J$I", [self getJobId], @": ISJ for ", _key_, @" failed with ", timeRemaining, @" remaining after ", time, @", peers queried: ", tries)];
  }
  if (tries > 0) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedTime" withLong:time];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedRetries" withLong:tries - 1];
  }
  for (id<NetI2pRouterJob> __strong j in nil_chk(_onFailed_)) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
  }
  [_onFailed_ clear];
}

- (void)success {
  jint tries;
  NetI2pDataHash *peer = nil;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    JreAssignVolatileBoolean(&_dead_, true);
    _success_ = true;
    tries = [((id<JavaUtilSet>) nil_chk(_unheardFrom_)) size] + [((id<JavaUtilSet>) nil_chk(_failedPeers_)) size];
    if ([_unheardFrom_ size] == 1) {
      peer = JreRetainedLocalValue([((id<JavaUtilIterator>) nil_chk([_unheardFrom_ iterator])) next]);
      [_unheardFrom_ clear];
    }
  }
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) completeWithNetI2pDataHash:_key_];
  if (peer != nil) {
    JavaLangLong *timeSent = [((id<JavaUtilMap>) nil_chk(_sentTime_)) getWithId:peer];
    if (timeSent != nil) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupSuccessfulWithNetI2pDataHash:peer withLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [timeSent longLongValue]];
  }
  jlong time = JavaLangSystem_currentTimeMillis() - _created_;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@$J$I", [self getJobId], @": ISJ for ", _key_, @" successful after ", time, @", peers queried: ", tries)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.successTime" withLong:time];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.successRetries" withLong:tries - 1];
  for (id<NetI2pRouterJob> __strong j in nil_chk(_onFind_)) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
  }
  [_onFind_ clear];
}

- (void)dealloc {
  RELEASE_(_toTry_);
  RELEASE_(_unheardFrom_);
  RELEASE_(_failedPeers_);
  RELEASE_(_sentTime_);
  RELEASE_(_rkey_);
  RELEASE_(_out_);
  RELEASE_(_fromLocalDest_);
  RELEASE_(_ipSet_);
  RELEASE_(_skippedPeers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withInt:withBoolean:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withInt:withBoolean:withNetI2pDataHash:);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(retry);
  methods[4].selector = @selector(sendQueryWithNetI2pDataHash:);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(failedWithNetI2pDataHash:withBoolean:);
  methods[7].selector = @selector(newPeerToTryWithNetI2pDataHash:);
  methods[8].selector = @selector(getFromHash);
  methods[9].selector = @selector(wasQueriedWithNetI2pDataHash:);
  methods[10].selector = @selector(timeSentWithNetI2pDataHash:);
  methods[11].selector = @selector(dropped);
  methods[12].selector = @selector(failed);
  methods[13].selector = @selector(success);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_toTry_", "LJavaUtilSortedSet;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_unheardFrom_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_failedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_sentTime_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_rkey_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_out_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fromLocalDest_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alwaysQueryHash", "LNetI2pDataHash;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "_totalSearchLimit_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ipSet_", "LNetI2pRouterUtilMaskedIPSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_skippedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "MAX_NON_FF", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_NON_FF, 0x1a, -1, -1, -1, -1 },
    { "TOTAL_SEARCH_LIMIT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "TOTAL_SEARCH_LIMIT_WHEN_FF", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT_WHEN_FF, 0x1a, -1, -1, -1, -1 },
    { "EXTRA_PEERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_EXTRA_PEERS, 0x1a, -1, -1, -1, -1 },
    { "IP_CLOSE_BYTES", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_IP_CLOSE_BYTES, 0x1a, -1, -1, -1, -1 },
    { "MAX_SEARCH_TIME", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_SEARCH_TIME, 0x1a, -1, -1, -1, -1 },
    { "_singleSearchTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SINGLE_SEARCH_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_TIME, 0x1a, -1, -1, -1, -1 },
    { "SINGLE_SEARCH_MSG_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_MSG_TIME, 0x1a, -1, -1, -1, -1 },
    { "_maxConcurrent_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_CONCURRENT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_CONCURRENT, 0x1a, -1, -1, -1, -1 },
    { "PROP_ENCRYPT_RI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "DEFAULT_ENCRYPT_RI", "Z", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "MIN_QUERY_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;IZ", "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;IZLNetI2pDataHash;", "sendQuery", "LNetI2pDataHash;", "failed", "LNetI2pDataHash;Z", "newPeerToTry", "wasQueried", "timeSent", "Ljava/util/SortedSet<Lnet/i2p/data/Hash;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/Long;>;", &NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash, &NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI, &NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI, &NetI2pRouterNetworkdbKademliaIterativeSearchJob_MIN_QUERY_VERSION };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaIterativeSearchJob = { "IterativeSearchJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x1, 14, 25, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaIterativeSearchJob;
}

+ (void)initialize {
  if (self == [NetI2pRouterNetworkdbKademliaIterativeSearchJob class]) {
    NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI = (NetI2pUtilSystemVersion_isX86() && !NetI2pUtilSystemVersion_isApache() && !NetI2pUtilSystemVersion_isGNU() && NetI2pUtilNativeBigInteger_isNative());
    J2OBJC_SET_INITIALIZED(NetI2pRouterNetworkdbKademliaIterativeSearchJob)
  }
}

@end

void NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease) {
  NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease, nil);
}

NetI2pRouterNetworkdbKademliaIterativeSearchJob *new_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_, ctx, facade, key, onFind, onFailed, timeoutMs, isLease)
}

NetI2pRouterNetworkdbKademliaIterativeSearchJob *create_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_, ctx, facade, key, onFind, onFailed, timeoutMs, isLease)
}

void NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest) {
  NetI2pRouterNetworkdbKademliaFloodSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease);
  self->_timeoutMs_ = JavaLangMath_minWithInt_withInt_(timeoutMs, NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_SEARCH_TIME);
  self->_expiration_ = self->_timeoutMs_ + [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now];
  JreStrongAssign(&self->_rkey_, [((NetI2pDataRoutingKeyGenerator *) nil_chk([ctx routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:key]);
  JreStrongAssignAndConsume(&self->_toTry_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(self->_rkey_)));
  jint totalSearchLimit = ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(facade)) floodfillEnabled] && [((NetI2pRouterRouter *) nil_chk([ctx router])) getUptime] > 30 * 60 * 1000) ? NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT_WHEN_FF : NetI2pRouterNetworkdbKademliaIterativeSearchJob_TOTAL_SEARCH_LIMIT;
  self->_totalSearchLimit_ = [ctx getPropertyWithNSString:@"netdb.searchLimit" withInt:totalSearchLimit];
  JreStrongAssignAndConsume(&self->_ipSet_, new_NetI2pRouterUtilMaskedIPSet_initWithInt_(2 * (self->_totalSearchLimit_ + NetI2pRouterNetworkdbKademliaIterativeSearchJob_EXTRA_PEERS)));
  self->_singleSearchTime_ = [ctx getPropertyWithNSString:@"netdb.singleSearchTime" withLong:NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_TIME];
  self->_maxConcurrent_ = [ctx getPropertyWithNSString:@"netdb.maxConcurrent" withInt:NetI2pRouterNetworkdbKademliaIterativeSearchJob_MAX_CONCURRENT];
  JreStrongAssignAndConsume(&self->_unheardFrom_, new_JavaUtilHashSet_initWithInt_(NetI2pRouterNetworkdbKademliaFloodSearchJob_CONCURRENT_SEARCHES));
  JreStrongAssignAndConsume(&self->_failedPeers_, new_JavaUtilHashSet_initWithInt_(self->_totalSearchLimit_));
  JreStrongAssignAndConsume(&self->_skippedPeers_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_sentTime_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(self->_totalSearchLimit_));
  JreStrongAssign(&self->_fromLocalDest_, fromLocalDest);
  if (fromLocalDest != nil && !isLease && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$@$@", @"Search for RI ", key, @" down client tunnel ", fromLocalDest) withJavaLangThrowable:create_JavaLangException_init()];
}

NetI2pRouterNetworkdbKademliaIterativeSearchJob *new_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_, ctx, facade, key, onFind, onFailed, timeoutMs, isLease, fromLocalDest)
}

NetI2pRouterNetworkdbKademliaIterativeSearchJob *create_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_, ctx, facade, key, onFind, onFailed, timeoutMs, isLease, fromLocalDest)
}

void NetI2pRouterNetworkdbKademliaIterativeSearchJob_retry(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if (self->_expiration_ < now) {
    [self failed];
    return;
  }
  if (self->_expiration_ - 500 < now) {
    return;
  }
  while (true) {
    NetI2pDataHash *peer = nil;
    jint done;
    jint pend;
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&self->_dead_)) return;
      pend = [((id<JavaUtilSet>) nil_chk(self->_unheardFrom_)) size];
      if (pend >= self->_maxConcurrent_) return;
      done = [((id<JavaUtilSet>) nil_chk(self->_failedPeers_)) size];
    }
    if (done >= self->_totalSearchLimit_) {
      [self failed];
      return;
    }
    if (done + pend >= self->_totalSearchLimit_) return;
    @synchronized(self) {
      if (NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash != nil && ![self->_unheardFrom_ containsWithId:NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash] && ![self->_failedPeers_ containsWithId:NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash]) {
        peer = JreRetainedLocalValue(NetI2pRouterNetworkdbKademliaIterativeSearchJob__alwaysQueryHash);
      }
      else {
        if ([((id<JavaUtilSortedSet>) nil_chk(self->_toTry_)) isEmpty]) return;
        for (id<JavaUtilIterator> iter = [self->_toTry_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
          NetI2pDataHash *h = [iter next];
          [iter remove];
          id<JavaUtilSet> peerIPs = create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_([self getContext], h, NetI2pRouterNetworkdbKademliaIterativeSearchJob_IP_CLOSE_BYTES);
          if (![((NetI2pRouterUtilMaskedIPSet *) nil_chk(self->_ipSet_)) containsAnyWithJavaUtilSet:peerIPs]) {
            [self->_ipSet_ addAllWithJavaUtilCollection:peerIPs];
            peer = JreRetainedLocalValue(h);
            break;
          }
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Skipping query w/ router too close to others ", h)];
          [((id<JavaUtilSet>) nil_chk(self->_skippedPeers_)) addWithId:h];
        }
        if (peer == nil) return;
      }
      [self->_unheardFrom_ addWithId:peer];
    }
    NetI2pRouterNetworkdbKademliaIterativeSearchJob_sendQueryWithNetI2pDataHash_(self, peer);
  }
}

void NetI2pRouterNetworkdbKademliaIterativeSearchJob_sendQueryWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pDataHash *peer) {
  id<NetI2pRouterTunnelManagerFacade> tm = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager];
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (ri != nil) {
    NSString *v = [ri getVersion];
    NSString *since = NetI2pRouterNetworkdbKademliaIterativeSearchJob_MIN_QUERY_VERSION;
    if (NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, since) < 0) {
      [self failedWithNetI2pDataHash:peer withBoolean:false];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("J$$$@", [self getJobId], @": not sending query to old version ", v, @": ", peer)];
      return;
    }
  }
  id<NetI2pRouterTunnelInfo> outTunnel;
  id<NetI2pRouterTunnelInfo> replyTunnel;
  jboolean isClientReplyTunnel;
  jboolean isDirect;
  if (self->_fromLocalDest_ != nil) {
    outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(tm)) selectOutboundTunnelWithNetI2pDataHash:self->_fromLocalDest_ withNetI2pDataHash:peer];
    if (outTunnel == nil) outTunnel = [tm selectOutboundExploratoryTunnelWithNetI2pDataHash:peer];
    replyTunnel = [tm selectInboundTunnelWithNetI2pDataHash:self->_fromLocalDest_ withNetI2pDataHash:peer];
    isClientReplyTunnel = (replyTunnel != nil);
    if (!isClientReplyTunnel) replyTunnel = [tm selectInboundExploratoryTunnelWithNetI2pDataHash:peer];
    isDirect = false;
  }
  else if ((!self->_isLease_) && ri != nil && [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) isEstablishedWithNetI2pDataHash:peer]) {
    outTunnel = nil;
    replyTunnel = nil;
    isClientReplyTunnel = false;
    isDirect = true;
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.RILookupDirect" withLong:1];
  }
  else {
    outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(tm)) selectOutboundExploratoryTunnelWithNetI2pDataHash:peer];
    replyTunnel = [tm selectInboundExploratoryTunnelWithNetI2pDataHash:peer];
    isClientReplyTunnel = false;
    isDirect = false;
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.RILookupDirect" withLong:0];
  }
  if ((!isDirect) && (replyTunnel == nil || outTunnel == nil)) {
    [self failed];
    return;
  }
  if (outTunnel != nil && [outTunnel getLength] <= 1) {
    if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:self->_key_]) {
      [self failedWithNetI2pDataHash:peer withBoolean:false];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("J$@", [self getJobId], @": not doing zero-hop self-lookup of ", peer)];
      return;
    }
    if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(self->_facade_)) lookupLocallyWithoutValidationWithNetI2pDataHash:peer] == nil) {
      [self failedWithNetI2pDataHash:peer withBoolean:false];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("J$@", [self getJobId], @": not doing zero-hop lookup to unknown ", peer)];
      return;
    }
  }
  NetI2pDataI2npDatabaseLookupMessage *dlm = create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_([self getContext], true);
  if (isDirect) {
    [dlm setFromWithNetI2pDataHash:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]];
  }
  else {
    [dlm setFromWithNetI2pDataHash:[((id<NetI2pRouterTunnelInfo>) nil_chk(replyTunnel)) getPeerWithInt:0]];
    [dlm setReplyTunnelWithNetI2pDataTunnelId:[replyTunnel getReceiveTunnelIdWithInt:0]];
  }
  [dlm setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + NetI2pRouterNetworkdbKademliaIterativeSearchJob_SINGLE_SEARCH_MSG_TIME];
  [dlm setSearchKeyWithNetI2pDataHash:self->_key_];
  [dlm setSearchTypeWithNetI2pDataI2npDatabaseLookupMessage_Type:self->_isLease_ ? JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS) : JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, RI)];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jint tries;
    @synchronized(self) {
      tries = [((id<JavaUtilSet>) nil_chk(self->_unheardFrom_)) size] + [((id<JavaUtilSet>) nil_chk(self->_failedPeers_)) size];
    }
    [self->_log_ infoWithNSString:JreStrcat("J$I$$@$@$Z$Z", [self getJobId], @": ISJ try ", tries, @" for ", (self->_isLease_ ? @"LS " : @"RI "), self->_key_, @" to ", peer, @" direct? ", isDirect, @" reply via client tunnel? ", isClientReplyTunnel)];
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  [((id<JavaUtilMap>) nil_chk(self->_sentTime_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_(now)];
  id<NetI2pDataI2npI2NPMessage> outMsg = nil;
  if (isDirect) {
  }
  else if (self->_isLease_ || ([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI withBoolean:NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI] && [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) getMaxLag] < 300)) {
    if (ri != nil) {
      {
        NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *sess;
        if (isClientReplyTunnel) sess = NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pDataHash_([self getContext], self->_fromLocalDest_);
        else sess = NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_([self getContext]);
        if (sess != nil) {
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@C@C@", [self getJobId], @": Requesting encrypted reply from ", peer, ' ', sess->key_, ' ', sess->tag_)];
          [dlm setReplySessionWithNetI2pDataSessionKey:sess->key_ withNetI2pDataSessionTag:sess->tag_];
        }
      }
      outMsg = NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterInfo_([self getContext], dlm, ri);
      if (JreLoadVolatileBoolean(&self->_dead_)) {
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": aborting send, finished while wrapping msg to ", peer)];
        return;
      }
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@$@", [self getJobId], @": Encrypted DLM for ", self->_key_, @" to ", peer)];
    }
  }
  if (outMsg == nil) outMsg = dlm;
  if (isDirect) {
    NetI2pRouterOutNetMessage *m = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_([self getContext], outMsg, [outMsg getMessageExpiration], NetI2pRouterOutNetMessage_PRIORITY_MY_NETDB_LOOKUP, ri);
    [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) processMessageWithNetI2pRouterOutNetMessage:m];
  }
  else {
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:outMsg withNetI2pDataTunnelId:[((id<NetI2pRouterTunnelInfo>) nil_chk(outTunnel)) getSendTunnelIdWithInt:0] withNetI2pDataHash:peer];
  }
  id<NetI2pRouterJob> j = create_NetI2pRouterNetworkdbKademliaIterativeTimeoutJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_([self getContext], peer, self);
  jlong expire = JavaLangMath_minWithLong_withLong_(self->_expiration_, now + self->_singleSearchTime_);
  [((NetI2pRouterJobTiming *) nil_chk([j getTiming])) setStartAfterWithLong:expire];
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaIterativeSearchJob)
