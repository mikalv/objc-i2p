//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/StoreState.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/networkdb/kademlia/StoreState.h"
#include "net/i2p/util/Clock.h"

@interface NetI2pRouterNetworkdbKademliaStoreState () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pDataHash *_key_;
  NetI2pDataDatabaseEntry *_data_;
  JavaUtilHashSet *_pendingPeers_;
  id<JavaUtilMap> _pendingPeerTimes_;
  id<JavaUtilMap> _pendingMessages_;
  JavaUtilHashSet *_successfulPeers_;
  JavaUtilHashSet *_failedPeers_;
  JavaUtilHashSet *_attemptedPeers_;
  jint _completeCount_;
  volatile_jlong _completed_;
  volatile_jlong _started_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _data_, NetI2pDataDatabaseEntry *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _pendingPeers_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _pendingPeerTimes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _pendingMessages_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _successfulPeers_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _failedPeers_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreState, _attemptedPeers_, JavaUtilHashSet *)

@implementation NetI2pRouterNetworkdbKademliaStoreState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data {
  NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_(self, ctx, key, data);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                                  withJavaUtilSet:(id<JavaUtilSet>)toSkip {
  NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_(self, ctx, key, data, toSkip);
  return self;
}

- (NetI2pDataHash *)getTarget {
  return _key_;
}

- (NetI2pDataDatabaseEntry *)getData {
  return _data_;
}

- (id<JavaUtilSet>)getPending {
  @synchronized(_pendingPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_pendingPeers_));
  }
}

- (id<JavaUtilSet>)getAttempted {
  @synchronized(_attemptedPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_attemptedPeers_));
  }
}

- (id<JavaUtilSet>)getSuccessful {
  @synchronized(_successfulPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_successfulPeers_));
  }
}

- (id<JavaUtilSet>)getFailed {
  @synchronized(_failedPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_failedPeers_));
  }
}

- (jboolean)completed {
  return JreLoadVolatileLong(&_completed_) != -1;
}

- (void)completeWithBoolean:(jboolean)completed {
  if (completed && JreLoadVolatileLong(&_completed_) <= 0) JreAssignVolatileLong(&_completed_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (jint)getCompleteCount {
  return _completeCount_;
}

- (jlong)getWhenStarted {
  return JreLoadVolatileLong(&_started_);
}

- (jlong)getWhenCompleted {
  return JreLoadVolatileLong(&_completed_);
}

- (void)addPendingWithNetI2pDataHash:(NetI2pDataHash *)peer
withNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage:(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *)msg {
  [self addPendingWithNetI2pDataHash:peer];
  [((id<JavaUtilMap>) nil_chk(_pendingMessages_)) putWithId:peer withId:msg];
}

- (NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *)getPendingMessageWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((id<JavaUtilMap>) nil_chk(_pendingMessages_)) removeWithId:peer];
}

- (void)addPendingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_pendingPeers_) {
    [((JavaUtilHashSet *) nil_chk(_pendingPeers_)) addWithId:peer];
    [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now])];
  }
  @synchronized(_attemptedPeers_) {
    [((JavaUtilHashSet *) nil_chk(_attemptedPeers_)) addWithId:peer];
  }
}

- (void)addPendingWithJavaUtilCollection:(id<JavaUtilCollection>)pending {
  @synchronized(_pendingPeers_) {
    [((JavaUtilHashSet *) nil_chk(_pendingPeers_)) addAllWithJavaUtilCollection:pending];
    for (NetI2pDataHash * __strong peer in nil_chk(pending)) [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now])];
  }
  @synchronized(_attemptedPeers_) {
    [((JavaUtilHashSet *) nil_chk(_attemptedPeers_)) addAllWithJavaUtilCollection:pending];
  }
}

- (void)addSkippedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_attemptedPeers_) {
    [((JavaUtilHashSet *) nil_chk(_attemptedPeers_)) addWithId:peer];
  }
}

- (jlong)confirmedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jlong rv = -1;
  @synchronized(_pendingPeers_) {
    [((JavaUtilHashSet *) nil_chk(_pendingPeers_)) removeWithId:peer];
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) removeWithId:peer];
    if (when != nil) rv = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - [when longLongValue];
  }
  @synchronized(_successfulPeers_) {
    [((JavaUtilHashSet *) nil_chk(_successfulPeers_)) addWithId:peer];
  }
  _completeCount_++;
  return rv;
}

- (void)replyTimeoutWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_pendingPeers_) {
    [((JavaUtilHashSet *) nil_chk(_pendingPeers_)) removeWithId:peer];
  }
  @synchronized(_failedPeers_) {
    [((JavaUtilHashSet *) nil_chk(_failedPeers_)) addWithId:peer];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Storing "])) appendWithId:_key_];
  [buf appendWithNSString:@" "];
  if (JreLoadVolatileLong(&_completed_) <= 0) [buf appendWithNSString:@" completed? false "];
  else [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" completed on "])) appendWithId:create_JavaUtilDate_initWithLong_(JreLoadVolatileLong(&_completed_))];
  [buf appendWithNSString:@" Attempted: "];
  @synchronized(_attemptedPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((JavaUtilHashSet *) nil_chk(_attemptedPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _attemptedPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@" Pending: "];
  @synchronized(_pendingPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((JavaUtilHashSet *) nil_chk(_pendingPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _pendingPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@" Failed: "];
  @synchronized(_failedPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((JavaUtilHashSet *) nil_chk(_failedPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _failedPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@" Successful: "];
  @synchronized(_successfulPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((JavaUtilHashSet *) nil_chk(_successfulPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _successfulPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_key_);
  RELEASE_(_data_);
  RELEASE_(_pendingPeers_);
  RELEASE_(_pendingPeerTimes_);
  RELEASE_(_pendingMessages_);
  RELEASE_(_successfulPeers_);
  RELEASE_(_failedPeers_);
  RELEASE_(_attemptedPeers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withNetI2pDataDatabaseEntry:withJavaUtilSet:);
  methods[2].selector = @selector(getTarget);
  methods[3].selector = @selector(getData);
  methods[4].selector = @selector(getPending);
  methods[5].selector = @selector(getAttempted);
  methods[6].selector = @selector(getSuccessful);
  methods[7].selector = @selector(getFailed);
  methods[8].selector = @selector(completed);
  methods[9].selector = @selector(completeWithBoolean:);
  methods[10].selector = @selector(getCompleteCount);
  methods[11].selector = @selector(getWhenStarted);
  methods[12].selector = @selector(getWhenCompleted);
  methods[13].selector = @selector(addPendingWithNetI2pDataHash:withNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage:);
  methods[14].selector = @selector(getPendingMessageWithNetI2pDataHash:);
  methods[15].selector = @selector(addPendingWithNetI2pDataHash:);
  methods[16].selector = @selector(addPendingWithJavaUtilCollection:);
  methods[17].selector = @selector(addSkippedWithNetI2pDataHash:);
  methods[18].selector = @selector(confirmedWithNetI2pDataHash:);
  methods[19].selector = @selector(replyTimeoutWithNetI2pDataHash:);
  methods[20].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_data_", "LNetI2pDataDatabaseEntry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingPeers_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_pendingPeerTimes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_pendingMessages_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_successfulPeers_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_failedPeers_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_attemptedPeers_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_completeCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_completed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;LNetI2pDataDatabaseEntry;", "LNetI2pRouterRouterContext;LNetI2pDataHash;LNetI2pDataDatabaseEntry;LJavaUtilSet;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;Ljava/util/Set<Lnet/i2p/data/Hash;>;)V", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "complete", "Z", "addPending", "LNetI2pDataHash;LNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;", "getPendingMessage", "LNetI2pDataHash;", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/Hash;>;)V", "addSkipped", "confirmed", "replyTimeout", "toString", "Ljava/util/HashSet<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/Long;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/networkdb/kademlia/MessageWrapper$WrappedMessage;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreState = { "StoreState", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 21, 12, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreState;
}

@end

void NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaStoreState *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data) {
  NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_(self, ctx, key, data, nil);
}

NetI2pRouterNetworkdbKademliaStoreState *new_NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_, ctx, key, data)
}

NetI2pRouterNetworkdbKademliaStoreState *create_NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_, ctx, key, data)
}

void NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaStoreState *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<JavaUtilSet> toSkip) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_key_, key);
  JreStrongAssign(&self->_data_, data);
  JreStrongAssignAndConsume(&self->_pendingPeers_, new_JavaUtilHashSet_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_pendingPeerTimes_, new_JavaUtilHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_pendingMessages_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_attemptedPeers_, new_JavaUtilHashSet_initWithInt_(8));
  if (toSkip != nil) {
    [self->_attemptedPeers_ addAllWithJavaUtilCollection:toSkip];
    self->_completeCount_ = [toSkip size];
  }
  JreStrongAssignAndConsume(&self->_failedPeers_, new_JavaUtilHashSet_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_successfulPeers_, new_JavaUtilHashSet_initWithInt_(4));
  JreAssignVolatileLong(&self->_completed_, -1);
  JreAssignVolatileLong(&self->_started_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now]);
}

NetI2pRouterNetworkdbKademliaStoreState *new_NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<JavaUtilSet> toSkip) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_, ctx, key, data, toSkip)
}

NetI2pRouterNetworkdbKademliaStoreState *create_NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<JavaUtilSet> toSkip) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_, ctx, key, data, toSkip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreState)
