//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/RefreshRoutersJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/RefreshRoutersJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaRefreshRoutersJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *_facade_;
  id<JavaUtilList> _routers_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, _facade_, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, _routers_, id<JavaUtilList>)

inline jlong NetI2pRouterNetworkdbKademliaRefreshRoutersJob_get_RERUN_DELAY_MS(void);
#define NetI2pRouterNetworkdbKademliaRefreshRoutersJob_RERUN_DELAY_MS 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, RERUN_DELAY_MS, jlong)

inline jlong NetI2pRouterNetworkdbKademliaRefreshRoutersJob_get_EXPIRE(void);
#define NetI2pRouterNetworkdbKademliaRefreshRoutersJob_EXPIRE 7200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, EXPIRE, jlong)

@implementation NetI2pRouterNetworkdbKademliaRefreshRoutersJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaRefreshRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(self, ctx, facade);
  return self;
}

- (NSString *)getName {
  return @"Refresh Routers Job";
}

- (void)runJob {
  if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) isInitialized]) {
    if (_routers_ == nil) {
      JreStrongAssign(&_routers_, [_facade_ getFloodfillPeers]);
      jint ff = [((id<JavaUtilList>) nil_chk(_routers_)) size];
      id<JavaUtilSet> all = [_facade_ getAllRouters];
      [((id<JavaUtilSet>) nil_chk(all)) removeAllWithJavaUtilCollection:_routers_];
      jint non = [all size];
      [((id<JavaUtilList>) nil_chk(_routers_)) addAllWithJavaUtilCollection:all];
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"To check: ", ff, @" floodfills and ", non, @" non-floodfills")];
    }
    if ([((id<JavaUtilList>) nil_chk(_routers_)) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Finished"];
      return;
    }
    jlong expire = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - NetI2pRouterNetworkdbKademliaRefreshRoutersJob_EXPIRE;
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(_routers_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pDataHash *h = [iter next];
      [iter remove];
      if ([((NetI2pDataHash *) nil_chk(h)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]]) continue;
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Checking ", h)];
      NetI2pDataRouterRouterInfo *ri = [_facade_ lookupRouterInfoLocallyWithNetI2pDataHash:h];
      if (ri == nil) continue;
      if ([ri getPublished] < expire) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Refreshing ", h)];
        [_facade_ searchWithNetI2pDataHash:h withNetI2pRouterJob:nil withNetI2pRouterJob:nil withLong:15 * 1000 withBoolean:false];
        break;
      }
    }
  }
  [self requeueWithLong:NetI2pRouterNetworkdbKademliaRefreshRoutersJob_RERUN_DELAY_MS];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_facade_);
  RELEASE_(_routers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_routers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
    { "RERUN_DELAY_MS", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaRefreshRoutersJob_RERUN_DELAY_MS, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaRefreshRoutersJob_EXPIRE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", "Ljava/util/List<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaRefreshRoutersJob = { "RefreshRoutersJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 3, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaRefreshRoutersJob;
}

@end

void NetI2pRouterNetworkdbKademliaRefreshRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaRefreshRoutersJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaRefreshRoutersJob_class_()]);
  JreStrongAssign(&self->_facade_, facade);
}

NetI2pRouterNetworkdbKademliaRefreshRoutersJob *new_NetI2pRouterNetworkdbKademliaRefreshRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, facade)
}

NetI2pRouterNetworkdbKademliaRefreshRoutersJob *create_NetI2pRouterNetworkdbKademliaRefreshRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaRefreshRoutersJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_, ctx, facade)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaRefreshRoutersJob)
