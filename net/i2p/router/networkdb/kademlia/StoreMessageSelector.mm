//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/StoreMessageSelector.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/StoreMessageSelector.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaStoreMessageSelector () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataHash *_peer_;
  jlong _storeJobId_;
  jlong _waitingForId_;
  jlong _expiration_;
  volatile_jboolean _found_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreMessageSelector, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreMessageSelector, _peer_, NetI2pDataHash *)

@implementation NetI2pRouterNetworkdbKademliaStoreMessageSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                         withLong:(jlong)storeJobId
                   withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                         withLong:(jlong)waitingForId
                                         withLong:(jlong)expiration {
  NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_(self, ctx, storeJobId, peer, waitingForId, expiration);
  return self;
}

- (jboolean)continueMatching {
  return !JreLoadVolatileBoolean(&_found_);
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$$$@C", _storeJobId_, @": isMatch(", [[((id<NetI2pDataI2npI2NPMessage>) nil_chk(message)) java_getClass] getName], @") [want deliveryStatusMessage from ", _peer_, ']')];
  if ([message isKindOfClass:[NetI2pDataI2npDeliveryStatusMessage class]]) {
    NetI2pDataI2npDeliveryStatusMessage *msg = (NetI2pDataI2npDeliveryStatusMessage *) cast_chk(message, [NetI2pDataI2npDeliveryStatusMessage class]);
    if ([((NetI2pDataI2npDeliveryStatusMessage *) nil_chk(msg)) getMessageId] == _waitingForId_) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$J", _storeJobId_, @": Found match for the key we're waiting for: ", _waitingForId_)];
      JreAssignVolatileBoolean(&_found_, true);
      return true;
    }
    else {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$", _storeJobId_, @": DeliveryStatusMessage of a key we're not looking for")];
      return false;
    }
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$", _storeJobId_, @": Not a DeliveryStatusMessage")];
    return false;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(128);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Waiting for netDb confirm from "])) appendWithId:_peer_])) appendWithNSString:@", found? "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithBoolean:JreLoadVolatileBoolean(&_found_)])) appendWithNSString:@" waiting for "])) appendWithLong:_waitingForId_];
  return [rv description];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withLong:withNetI2pDataRouterRouterInfo:withLong:withLong:);
  methods[1].selector = @selector(continueMatching);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(isMatchWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_storeJobId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_waitingForId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_found_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;JLNetI2pDataRouterRouterInfo;JJ", "isMatch", "LNetI2pDataI2npI2NPMessage;", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreMessageSelector = { "StoreMessageSelector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreMessageSelector;
}

@end

void NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_(NetI2pRouterNetworkdbKademliaStoreMessageSelector *self, NetI2pRouterRouterContext *ctx, jlong storeJobId, NetI2pDataRouterRouterInfo *peer, jlong waitingForId, jlong expiration) {
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaStoreMessageSelector_class_()]);
  JreStrongAssign(&self->_peer_, [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash]);
  self->_storeJobId_ = storeJobId;
  self->_waitingForId_ = waitingForId;
  self->_expiration_ = expiration;
}

NetI2pRouterNetworkdbKademliaStoreMessageSelector *new_NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_(NetI2pRouterRouterContext *ctx, jlong storeJobId, NetI2pDataRouterRouterInfo *peer, jlong waitingForId, jlong expiration) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreMessageSelector, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_, ctx, storeJobId, peer, waitingForId, expiration)
}

NetI2pRouterNetworkdbKademliaStoreMessageSelector *create_NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_(NetI2pRouterRouterContext *ctx, jlong storeJobId, NetI2pDataRouterRouterInfo *peer, jlong waitingForId, jlong expiration) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreMessageSelector, initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_, ctx, storeJobId, peer, waitingForId, expiration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreMessageSelector)
