//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/ExpireLeasesJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/ExpireLeasesJob.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaExpireLeasesJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *_facade_;
}

- (id<JavaUtilSet>)selectKeysToExpire;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaExpireLeasesJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaExpireLeasesJob, _facade_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)

inline jlong NetI2pRouterNetworkdbKademliaExpireLeasesJob_get_RERUN_DELAY_MS(void);
#define NetI2pRouterNetworkdbKademliaExpireLeasesJob_RERUN_DELAY_MS 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaExpireLeasesJob, RERUN_DELAY_MS, jlong)

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterNetworkdbKademliaExpireLeasesJob_selectKeysToExpire(NetI2pRouterNetworkdbKademliaExpireLeasesJob *self);

@implementation NetI2pRouterNetworkdbKademliaExpireLeasesJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaExpireLeasesJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(self, ctx, facade);
  return self;
}

- (NSString *)getName {
  return @"Expire Lease Sets Job";
}

- (void)runJob {
  id<JavaUtilSet> toExpire = NetI2pRouterNetworkdbKademliaExpireLeasesJob_selectKeysToExpire(self);
  [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@", @"Leases to expire: ", toExpire)];
  for (NetI2pDataHash * __strong key in nil_chk(toExpire)) {
    [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) failWithNetI2pDataHash:key];
  }
  [self requeueWithLong:NetI2pRouterNetworkdbKademliaExpireLeasesJob_RERUN_DELAY_MS];
}

- (id<JavaUtilSet>)selectKeysToExpire {
  return NetI2pRouterNetworkdbKademliaExpireLeasesJob_selectKeysToExpire(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_facade_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(selectKeysToExpire);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "RERUN_DELAY_MS", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaExpireLeasesJob_RERUN_DELAY_MS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaExpireLeasesJob = { "ExpireLeasesJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaExpireLeasesJob;
}

@end

void NetI2pRouterNetworkdbKademliaExpireLeasesJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaExpireLeasesJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaExpireLeasesJob_class_()]);
  JreStrongAssign(&self->_facade_, facade);
}

NetI2pRouterNetworkdbKademliaExpireLeasesJob *new_NetI2pRouterNetworkdbKademliaExpireLeasesJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaExpireLeasesJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, ctx, facade)
}

NetI2pRouterNetworkdbKademliaExpireLeasesJob *create_NetI2pRouterNetworkdbKademliaExpireLeasesJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaExpireLeasesJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, ctx, facade)
}

id<JavaUtilSet> NetI2pRouterNetworkdbKademliaExpireLeasesJob_selectKeysToExpire(NetI2pRouterNetworkdbKademliaExpireLeasesJob *self) {
  id<JavaUtilSet> toExpire = create_JavaUtilHashSet_initWithInt_(128);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getDataStore])) getMapEntries])) {
    NetI2pDataDatabaseEntry *obj = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([((NetI2pDataDatabaseEntry *) nil_chk(obj)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
      NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(obj, [NetI2pDataLeaseSet class]);
      if (![ls isCurrentWithLong:NetI2pRouterRouter_CLOCK_FUDGE_FACTOR]) [toExpire addWithId:[entry_ getKey]];
      else if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$", @"Lease ", [((NetI2pDataDestination *) nil_chk([ls getDestination])) calculateHash], @" is current, no need to expire")];
    }
  }
  return toExpire;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaExpireLeasesJob)
