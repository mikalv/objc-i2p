//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/data/router/RouterKeyGenerator.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/HandlerJobBuilder.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/FloodSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodThrottler.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillDatabaseLookupMessageHandler.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillDatabaseStoreMessageHandler.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillMonitorJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillStoreJob.h"
#include "net/i2p/router/networkdb/kademlia/IterativeSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/LookupThrottler.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/RefreshRoutersJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade () {
 @public
  id<JavaUtilMap> _activeFloodQueries_;
  jboolean _floodfillEnabled_;
  id<JavaUtilSet> _verifiesInProgress_;
  NetI2pRouterNetworkdbKademliaFloodThrottler *_floodThrottler_;
  NetI2pRouterNetworkdbKademliaLookupThrottler *_lookupThrottler_;
  id<NetI2pRouterJob> _ffMonitor_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, _activeFloodQueries_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, _verifiesInProgress_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, _floodThrottler_, NetI2pRouterNetworkdbKademliaFloodThrottler *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, _lookupThrottler_, NetI2pRouterNetworkdbKademliaLookupThrottler *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, _ffMonitor_, id<NetI2pRouterJob>)

inline jint NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_FLOOD_PRIORITY(void);
#define NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_PRIORITY 200
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, FLOOD_PRIORITY, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_FLOOD_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_TIMEOUT 30000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, FLOOD_TIMEOUT, jint)

inline jlong NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_NEXT_RKEY_RI_ADVANCE_TIME(void);
#define NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_RI_ADVANCE_TIME 2700000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, NEXT_RKEY_RI_ADVANCE_TIME, jlong)

inline jlong NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_NEXT_RKEY_LS_ADVANCE_TIME(void);
#define NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_LS_ADVANCE_TIME 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, NEXT_RKEY_LS_ADVANCE_TIME, jlong)

inline jint NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_NEXT_FLOOD_QTY(void);
#define NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_FLOOD_QTY 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, NEXT_FLOOD_QTY, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_get_MAX_DB_BEFORE_SKIPPING_SEARCH(void);
static jint NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_DB_BEFORE_SKIPPING_SEARCH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, MAX_DB_BEFORE_SKIPPING_SEARCH, jint)

@interface NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob : NetI2pRouterJobImpl {
 @public
  NetI2pDataHash *_peer_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob, _peer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob)

@interface NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob : NetI2pRouterJobImpl {
 @public
  NetI2pDataHash *_peer_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob, _peer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob)

@interface NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *this$0_;
  NetI2pDataHash *_peer_;
  NetI2pDataRouterRouterInfo *_info_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)outer$
                                                      withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                 withNetI2pDataHash:(NetI2pDataHash *)peer
                                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob, _peer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob, _info_, NetI2pDataRouterRouterInfo *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *self, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob)

@interface NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *this$0_;
  NetI2pDataHash *_peer_;
  NetI2pDataRouterRouterInfo *_info_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)outer$
                                                      withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                 withNetI2pDataHash:(NetI2pDataHash *)peer
                                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob, _peer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob, _info_, NetI2pDataRouterRouterInfo *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *self, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade)

@implementation NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade

+ (jchar)CAPABILITY_FLOODFILL {
  return NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL;
}

+ (jint)MAX_TO_FLOOD {
  return NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_TO_FLOOD;
}

+ (jlong)PUBLISH_TIMEOUT {
  return NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_PUBLISH_TIMEOUT;
}

+ (jint)MIN_ACTIVE_PEERS {
  return NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MIN_ACTIVE_PEERS;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)startup {
  @synchronized(self) {
    [super startup];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:_ffMonitor_];
    JreStrongAssignAndConsume(&_lookupThrottler_, new_NetI2pRouterNetworkdbKademliaLookupThrottler_init());
    id<NetI2pRouterJob> rrj = create_NetI2pRouterNetworkdbKademliaRefreshRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(_context_, self);
    [((NetI2pRouterJobTiming *) nil_chk([rrj getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 5 * 60 * 1000];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:rrj];
  }
}

- (void)createHandlers {
  [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:create_NetI2pRouterNetworkdbKademliaFloodfillDatabaseLookupMessageHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(_context_, self)];
  [((NetI2pRouterInNetMessagePool *) nil_chk([_context_ inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:create_NetI2pRouterNetworkdbKademliaFloodfillDatabaseStoreMessageHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(_context_, self)];
}

- (void)shutdown {
  @synchronized(self) {
    if (_floodfillEnabled_ && (![((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbKademliaFloodfillMonitorJob_PROP_FLOODFILL_PARTICIPANT] || !([((NetI2pRouterRouter *) nil_chk([_context_ router])) scheduledGracefulExitCode] == NetI2pRouterRouter_EXIT_HARD_RESTART || [((NetI2pRouterRouter *) nil_chk([_context_ router])) scheduledGracefulExitCode] == NetI2pRouterRouter_EXIT_GRACEFUL_RESTART))) {
      _floodfillEnabled_ = false;
      [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) rebuildRouterInfoWithBoolean:true];
      NetI2pDataRouterRouterInfo *local = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getRouterInfo];
      if (local != nil && [((NetI2pRouterRouter *) nil_chk([_context_ router])) getUptime] > NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_JOB_DELAY) {
        [self floodWithNetI2pDataDatabaseEntry:local];
        @try {
          JavaLangThread_sleepWithLong_(3000);
        }
        @catch (JavaLangInterruptedException *ie) {
        }
      }
    }
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) removeJobWithNetI2pRouterJob:_ffMonitor_];
    [super shutdown];
  }
}

- (void)publishWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)localRouterInfo {
  if (localRouterInfo == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"impossible: null localRouterInfo?");
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isHidden]) return;
  [super publishWithNetI2pDataRouterRouterInfo:localRouterInfo];
  if (![self isInitialized]) return;
  if ([((id<JavaUtilCollection>) nil_chk([localRouterInfo getAddresses])) isEmpty]) return;
  [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Publishing our RI"];
  [self sendStoreWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([localRouterInfo getIdentity])) calculateHash] withNetI2pDataDatabaseEntry:localRouterInfo withNetI2pRouterJob:nil withNetI2pRouterJob:nil withLong:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_PUBLISH_TIMEOUT withJavaUtilSet:nil];
}

- (void)sendStoreWithNetI2pDataHash:(NetI2pDataHash *)key
        withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)ds
                withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                           withLong:(jlong)sendTimeout
                    withJavaUtilSet:(id<JavaUtilSet>)toIgnore {
  if ([self floodfillEnabled] && ([((NetI2pDataDatabaseEntry *) nil_chk(ds)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO)) {
    [self floodWithNetI2pDataDatabaseEntry:ds];
    if (onSuccess != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onSuccess];
  }
  else {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(_context_, self, key, ds, onSuccess, onFailure, sendTimeout, toIgnore)];
  }
}

- (jboolean)shouldThrottleFloodWithNetI2pDataHash:(NetI2pDataHash *)key {
  return _floodThrottler_ != nil && [_floodThrottler_ shouldThrottleWithNetI2pDataHash:key];
}

- (jboolean)shouldThrottleLookupWithNetI2pDataHash:(NetI2pDataHash *)from
                            withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  return _lookupThrottler_ == nil || [_lookupThrottler_ shouldThrottleWithNetI2pDataHash:from withNetI2pDataTunnelId:id_];
}

- (jboolean)floodConditionalWithNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)ds {
  if (![self floodfillEnabled]) return false;
  if ([self shouldThrottleFloodWithNetI2pDataHash:[((NetI2pDataDatabaseEntry *) nil_chk(ds)) getHash]]) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.floodThrottled" withLong:1];
    return false;
  }
  [self floodWithNetI2pDataDatabaseEntry:ds];
  return true;
}

- (void)floodWithNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)ds {
  NetI2pDataHash *key = [((NetI2pDataDatabaseEntry *) nil_chk(ds)) getHash];
  NetI2pDataRouterRouterKeyGenerator *gen = [((NetI2pRouterRouterContext *) nil_chk(_context_)) routerKeyGenerator];
  NetI2pDataHash *rkey = [((NetI2pDataRouterRouterKeyGenerator *) nil_chk(gen)) getRoutingKeyWithNetI2pDataHash:key];
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *sel = (NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk([self getPeerSelector], [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class]);
  id<JavaUtilList> peers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(sel)) selectFloodfillParticipantsWithNetI2pDataHash:rkey withInt:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_TO_FLOOD withNetI2pKademliaKBucketSet:[self getKBuckets]];
  jlong until = [gen getTimeTillMidnight];
  if (until < NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_LS_ADVANCE_TIME || ([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO && until < NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_RI_ADVANCE_TIME)) {
    NetI2pDataHash *nkey = [gen getNextRoutingKeyWithNetI2pDataHash:key];
    id<JavaUtilList> nextPeers = [sel selectFloodfillParticipantsWithNetI2pDataHash:nkey withInt:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_FLOOD_QTY withNetI2pKademliaKBucketSet:[self getKBuckets]];
    jint i = 0;
    for (NetI2pDataHash * __strong h in nil_chk(nextPeers)) {
      if ([((NetI2pDataHash *) nil_chk(h)) isEqual:key]) continue;
      if (![((id<JavaUtilList>) nil_chk(peers)) containsWithId:h]) {
        [peers addWithId:h];
        i++;
      }
    }
    if (i > 0 && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@$I$", @"Flooding the entry for ", key, @" to ", i, @" more, just before midnight")];
  }
  jint flooded = 0;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(peers)) size]; i++) {
    NetI2pDataHash *peer = [peers getWithInt:i];
    NetI2pDataRouterRouterInfo *target = [self lookupRouterInfoLocallyWithNetI2pDataHash:peer];
    if ((target == nil) || ([((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) isBanlistedWithNetI2pDataHash:peer])) continue;
    if ([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO && [((NetI2pDataHash *) nil_chk(peer)) isEqual:key]) continue;
    if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[_context_ routerHash]]) continue;
    NetI2pDataI2npDatabaseStoreMessage *msg = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(_context_);
    [msg setEntryWithNetI2pDataDatabaseEntry:ds];
    NetI2pRouterOutNetMessage *m = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(_context_, msg, [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_TIMEOUT, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_PRIORITY, target);
    id<NetI2pRouterJob> floodFail = create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(_context_, peer);
    [m setOnFailedSendJobWithNetI2pRouterJob:floodFail];
    id<NetI2pRouterJob> floodGood = create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(_context_, peer);
    [m setOnSendJobWithNetI2pRouterJob:floodGood];
    [((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) processMessageWithNetI2pRouterOutNetMessage:m];
    flooded++;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$$", @"Flooding the entry for ", [((NetI2pDataHash *) nil_chk(key)) toBase64], @" to ", [peer toBase64])];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"Flooded the data to ", flooded, @" of ", [peers size], @" peers")];
}

- (NetI2pRouterNetworkdbKademliaPeerSelector *)createPeerSelector {
  return create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_initWithNetI2pRouterRouterContext_(_context_);
}

- (void)setFloodfillEnabledWithBoolean:(jboolean)yes {
  @synchronized(self) {
    if (yes != _floodfillEnabled_) {
      [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) removeJobWithNetI2pRouterJob:_ffMonitor_];
      [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(_ffMonitor_)) getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 1000];
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:_ffMonitor_];
    }
  }
}

- (void)setFloodfillEnabledFromMonitorWithBoolean:(jboolean)yes {
  @synchronized(self) {
    _floodfillEnabled_ = yes;
    if (yes && _floodThrottler_ == nil) {
      JreStrongAssignAndConsume(&_floodThrottler_, new_NetI2pRouterNetworkdbKademliaFloodThrottler_init());
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) createRateStatWithNSString:@"netDb.floodThrottled" withNSString:@"How often do we decline to flood?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) createRateStatWithNSString:@"netDb.storeFloodNew" withNSString:@"How long it takes to flood out a newly received entry?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) createRateStatWithNSString:@"netDb.storeFloodOld" withNSString:@"How often we receive an old entry?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
    }
  }
}

- (jboolean)floodfillEnabled {
  return _floodfillEnabled_;
}

+ (jboolean)isFloodfillWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  return NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(peer);
}

- (id<JavaUtilList>)getKnownRouterData {
  id<JavaUtilList> rv = create_JavaUtilArrayList_init();
  id<NetI2pRouterNetworkdbKademliaDataStore> ds = [self getDataStore];
  if (ds != nil) {
    for (NetI2pDataDatabaseEntry * __strong o in nil_chk([ds getEntries])) {
      if ([((NetI2pDataDatabaseEntry *) nil_chk(o)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) [rv addWithId:(NetI2pDataRouterRouterInfo *) cast_chk(o, [NetI2pDataRouterRouterInfo class])];
    }
  }
  return rv;
}

- (NetI2pRouterNetworkdbKademliaSearchJob *)searchWithNetI2pDataHash:(NetI2pDataHash *)key
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                                            withLong:(jlong)timeoutMs
                                                         withBoolean:(jboolean)isLease {
  return [self searchWithNetI2pDataHash:key withNetI2pRouterJob:onFindJob withNetI2pRouterJob:onFailedLookupJob withLong:timeoutMs withBoolean:isLease withNetI2pDataHash:nil];
}

- (NetI2pRouterNetworkdbKademliaSearchJob *)searchWithNetI2pDataHash:(NetI2pDataHash *)key
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                                            withLong:(jlong)timeoutMs
                                                         withBoolean:(jboolean)isLease
                                                  withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  if (key == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"searchin for nothin, eh?");
  jboolean isNew = false;
  NetI2pRouterNetworkdbKademliaFloodSearchJob *searchJob;
  @synchronized(_activeFloodQueries_) {
    searchJob = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_activeFloodQueries_)) getWithId:key]);
    if (searchJob == nil) {
      searchJob = JreRetainedLocalValue(create_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(_context_, self, key, onFindJob, onFailedLookupJob, (jint) timeoutMs, isLease, fromLocalDest));
      [_activeFloodQueries_ putWithId:key withId:searchJob];
      isNew = true;
    }
  }
  if (isNew) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"this is the first search for that key, fire off the FloodSearchJob"];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:searchJob];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$I$", @"Deferring flood search for ", [key toBase64], @" with ", [_activeFloodQueries_ size], @" in progress")];
    [searchJob addDeferredWithNetI2pRouterJob:onFindJob withNetI2pRouterJob:onFailedLookupJob withLong:timeoutMs withBoolean:isLease];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.lookupDeferred" withLong:1 withLong:[searchJob getExpiration] - [((NetI2pUtilClock *) nil_chk([_context_ clock])) now]];
  }
  return nil;
}

- (void)completeWithNetI2pDataHash:(NetI2pDataHash *)key {
  @synchronized(_activeFloodQueries_) {
    [((id<JavaUtilMap>) nil_chk(_activeFloodQueries_)) removeWithId:key];
  }
}

- (id<JavaUtilList>)getFloodfillPeers {
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *sel = (NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk([self getPeerSelector], [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class]);
  return [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(sel)) selectFloodfillParticipantsWithNetI2pKademliaKBucketSet:[self getKBuckets]];
}

- (jboolean)isVerifyInProgressWithNetI2pDataHash:(NetI2pDataHash *)h {
  return [((id<JavaUtilSet>) nil_chk(_verifiesInProgress_)) containsWithId:h];
}

- (void)verifyStartedWithNetI2pDataHash:(NetI2pDataHash *)h {
  [((id<JavaUtilSet>) nil_chk(_verifiesInProgress_)) addWithId:h];
}

- (void)verifyFinishedWithNetI2pDataHash:(NetI2pDataHash *)h {
  [((id<JavaUtilSet>) nil_chk(_verifiesInProgress_)) removeWithId:h];
}

- (void)lookupBeforeDroppingWithNetI2pDataHash:(NetI2pDataHash *)peer
                withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  if ([((NetI2pDataRouterRouterInfo *) nil_chk(info)) getNetworkId] == _networkID_ && ([self getKBucketSetSize] < NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_REMAINING_ROUTERS || [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getUptime] < NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DONT_FAIL_PERIOD || [((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) countActivePeers] <= NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MIN_ACTIVE_PEERS)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$", @"Not failing ", [((NetI2pDataHash *) nil_chk(peer)) toBase64], @" as we are just starting up or have problems")];
    return;
  }
  if (_floodfillEnabled_ || [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) getMaxLag] > 500 || [((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) isBanlistedForeverWithNetI2pDataHash:peer] || [self getKBucketSetSize] > NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_DB_BEFORE_SKIPPING_SEARCH) {
    [super lookupBeforeDroppingWithNetI2pDataHash:peer withNetI2pDataRouterRouterInfo:info];
    return;
  }
  [self searchWithNetI2pDataHash:peer withNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, _context_, peer, info) withNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, _context_, peer, info) withLong:10 * 1000 withBoolean:false];
}

- (void)dealloc {
  RELEASE_(_activeFloodQueries_);
  RELEASE_(_verifiesInProgress_);
  RELEASE_(_floodThrottler_);
  RELEASE_(_lookupThrottler_);
  RELEASE_(_ffMonitor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaPeerSelector;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaSearchJob;", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaSearchJob;", 0x0, 19, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 23, -1, -1 },
    { NULL, "Z", 0x0, 24, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(createHandlers);
  methods[3].selector = @selector(shutdown);
  methods[4].selector = @selector(publishWithNetI2pDataRouterRouterInfo:);
  methods[5].selector = @selector(sendStoreWithNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withJavaUtilSet:);
  methods[6].selector = @selector(shouldThrottleFloodWithNetI2pDataHash:);
  methods[7].selector = @selector(shouldThrottleLookupWithNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[8].selector = @selector(floodConditionalWithNetI2pDataDatabaseEntry:);
  methods[9].selector = @selector(floodWithNetI2pDataDatabaseEntry:);
  methods[10].selector = @selector(createPeerSelector);
  methods[11].selector = @selector(setFloodfillEnabledWithBoolean:);
  methods[12].selector = @selector(setFloodfillEnabledFromMonitorWithBoolean:);
  methods[13].selector = @selector(floodfillEnabled);
  methods[14].selector = @selector(isFloodfillWithNetI2pDataRouterRouterInfo:);
  methods[15].selector = @selector(getKnownRouterData);
  methods[16].selector = @selector(searchWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:);
  methods[17].selector = @selector(searchWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:withNetI2pDataHash:);
  methods[18].selector = @selector(completeWithNetI2pDataHash:);
  methods[19].selector = @selector(getFloodfillPeers);
  methods[20].selector = @selector(isVerifyInProgressWithNetI2pDataHash:);
  methods[21].selector = @selector(verifyStartedWithNetI2pDataHash:);
  methods[22].selector = @selector(verifyFinishedWithNetI2pDataHash:);
  methods[23].selector = @selector(lookupBeforeDroppingWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CAPABILITY_FLOODFILL", "C", .constantValue.asUnichar = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL, 0x19, -1, -1, -1, -1 },
    { "_activeFloodQueries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "_floodfillEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_verifiesInProgress_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "_floodThrottler_", "LNetI2pRouterNetworkdbKademliaFloodThrottler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lookupThrottler_", "LNetI2pRouterNetworkdbKademliaLookupThrottler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_ffMonitor_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_TO_FLOOD", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_TO_FLOOD, 0x19, -1, -1, -1, -1 },
    { "FLOOD_PRIORITY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "FLOOD_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FLOOD_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "NEXT_RKEY_RI_ADVANCE_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_RI_ADVANCE_TIME, 0x1a, -1, -1, -1, -1 },
    { "NEXT_RKEY_LS_ADVANCE_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_RKEY_LS_ADVANCE_TIME, 0x1a, -1, -1, -1, -1 },
    { "NEXT_FLOOD_QTY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_NEXT_FLOOD_QTY, 0x1a, -1, -1, -1, -1 },
    { "PUBLISH_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_PUBLISH_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "MIN_ACTIVE_PEERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MIN_ACTIVE_PEERS, 0x1c, -1, -1, -1, -1 },
    { "MAX_DB_BEFORE_SKIPPING_SEARCH", "I", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "publish", "LNetI2pDataRouterRouterInfo;", "LJavaLangIllegalArgumentException;", "sendStore", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;JLJavaUtilSet;", "(Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;Lnet/i2p/router/Job;Lnet/i2p/router/Job;JLjava/util/Set<Lnet/i2p/data/Hash;>;)V", "shouldThrottleFlood", "LNetI2pDataHash;", "shouldThrottleLookup", "LNetI2pDataHash;LNetI2pDataTunnelId;", "floodConditional", "LNetI2pDataDatabaseEntry;", "flood", "setFloodfillEnabled", "Z", "setFloodfillEnabledFromMonitor", "isFloodfill", "()Ljava/util/List<Lnet/i2p/data/router/RouterInfo;>;", "search", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JZ", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JZLNetI2pDataHash;", "complete", "()Ljava/util/List<Lnet/i2p/data/Hash;>;", "isVerifyInProgress", "verifyStarted", "verifyFinished", "lookupBeforeDropping", "LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/networkdb/kademlia/FloodSearchJob;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", &NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_DB_BEFORE_SKIPPING_SEARCH, "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade = { "FloodfillNetworkDatabaseFacade", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x1, 24, 16, -1, 32, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;
}

+ (void)initialize {
  if (self == [NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade class]) {
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_MAX_DB_BEFORE_SKIPPING_SEARCH = (jint) JavaLangMath_maxWithLong_withLong_(250l, JavaLangMath_minWithLong_withLong_(1250l, maxMemory / ((32 * 1024 * 1024l) / 250)));
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade)
  }
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssignAndConsume(&self->_activeFloodQueries_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->_verifiesInProgress_, new_NetI2pUtilConcurrentHashSet_initWithInt_(8));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRequiredRateStatWithNSString:@"netDb.successTime" withNSString:@"Time for successful lookup (ms)" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.failedTime" withNSString:@"How long a failed search takes" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.failedRetries" withNSString:@"How many additional queries for an iterative search" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.successRetries" withNSString:@"How many additional queries for an iterative search" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.failedAttemptedPeers" withNSString:@"How many peers we sent a search to when the search fails" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.successPeers" withNSString:@"How many peers are contacted in a successful search" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.failedPeers" withNSString:@"How many peers fail to respond to a lookup?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.searchCount" withNSString:@"Overall number of searches sent" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.searchMessageCount" withNSString:@"Overall number of mesages for all searches sent" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.searchReplyValidated" withNSString:@"How many search replies we get that we are able to validate (fetch)" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.searchReplyNotValidated" withNSString:@"How many search replies we get that we are NOT able to validate (fetch)" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.searchReplyValidationSkipped" withNSString:@"How many search replies we get from unreliable peers that we skip?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:5]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.republishQuantity" withNSString:@"How many peers do we need to send a found leaseSet to?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"netDb.RILookupDirect" withNSString:@"Was an iterative RI lookup sent directly?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  JreStrongAssignAndConsume(&self->_ffMonitor_, new_NetI2pRouterNetworkdbKademliaFloodfillMonitorJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_(self->_context_, self));
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade, initWithNetI2pRouterRouterContext_, context)
}

jboolean NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *peer) {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initialize();
  if (peer == nil) return false;
  NSString *caps = [peer getCapabilities];
  return [((NSString *) nil_chk(caps)) java_indexOf:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL] >= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade)

@implementation NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(self, ctx, peer);
  return self;
}

- (NSString *)getName {
  return @"Flood failed";
}

- (void)runJob {
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreFailedWithNetI2pDataHash:_peer_];
}

- (void)dealloc {
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob = { "FloodFailedJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0xa, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_peer_, peer);
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, ctx, peer)
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, ctx, peer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodFailedJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(self, ctx, peer);
  return self;
}

- (NSString *)getName {
  return @"Flood succeeded";
}

- (void)runJob {
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreSuccessfulWithNetI2pDataHash:_peer_];
}

- (void)dealloc {
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob = { "FloodSuccessJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0xa, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_peer_, peer);
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, ctx, peer)
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, ctx, peer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_FloodSuccessJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)outer$
                                                      withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                 withNetI2pDataHash:(NetI2pDataHash *)peer
                                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, outer$, ctx, peer, info);
  return self;
}

- (NSString *)getName {
  return @"Lookup on failure of netDb peer timed out";
}

- (void)runJob {
  [this$0_ dropAfterLookupFailedWithNetI2pDataHash:_peer_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_info_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pRouterRouterContext:withNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_info_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob = { "DropLookupFailedJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *self, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_peer_, peer);
  JreStrongAssign(&self->_info_, info);
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob, initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_, outer$, ctx, peer, info)
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob, initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_, outer$, ctx, peer, info)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFailedJob)

@implementation NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)outer$
                                                      withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                 withNetI2pDataHash:(NetI2pDataHash *)peer
                                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, outer$, ctx, peer, info);
  return self;
}

- (NSString *)getName {
  return @"Lookup on failure of netDb peer matched";
}

- (void)runJob {
  NetI2pDataRouterRouterInfo *updated = [this$0_ lookupRouterInfoLocallyWithNetI2pDataHash:_peer_];
  if ((updated != nil) && ([((NetI2pDataRouterRouterInfo *) nil_chk(updated)) getPublished] > [((NetI2pDataRouterRouterInfo *) nil_chk(_info_)) getPublished])) {
  }
  else {
    [this$0_ dropAfterLookupFailedWithNetI2pDataHash:_peer_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_info_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pRouterRouterContext:withNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_info_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob = { "DropLookupFoundJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *self, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_peer_, peer);
  JreStrongAssign(&self->_info_, info);
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob, initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_, outer$, ctx, peer, info)
}

NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob *create_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob_initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *info) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob, initWithNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_, outer$, ctx, peer, info)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_DropLookupFoundJob)
