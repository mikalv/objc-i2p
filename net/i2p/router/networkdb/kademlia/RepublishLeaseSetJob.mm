//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/RepublishLeaseSetJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/RepublishLeaseSetJob.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataHash *_dest_;
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *_facade_;
  jlong _lastPublished_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, _dest_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, _facade_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)

inline jint NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_get_RETRY_DELAY(void);
#define NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_RETRY_DELAY 20000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, RETRY_DELAY, jint)

@interface NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *_job_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob:(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *)job;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure, _job_, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *new_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *create_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure)

@implementation NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob

+ (jlong)REPUBLISH_LEASESET_TIMEOUT {
  return NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_REPUBLISH_LEASESET_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)destHash {
  NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(self, ctx, facade, destHash);
  return self;
}

- (NSString *)getName {
  return @"Republish a local leaseSet";
}

- (void)runJob {
  if (![((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) shouldPublishLeaseSetWithNetI2pDataHash:_dest_]) return;
  @try {
    if ([((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) isLocalWithNetI2pDataHash:_dest_]) {
      NetI2pDataLeaseSet *ls = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) lookupLeaseSetLocallyWithNetI2pDataHash:_dest_];
      if (ls != nil) {
        if (![ls isCurrentWithLong:NetI2pRouterRouter_CLOCK_FUDGE_FACTOR]) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Not publishing a LOCAL lease that isn't current - ", _dest_) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Publish expired LOCAL lease?")];
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Publishing ", ls)];
          [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.republishLeaseSetCount" withLong:1];
          [_facade_ sendStoreWithNetI2pDataHash:_dest_ withNetI2pDataDatabaseEntry:ls withNetI2pRouterJob:nil withNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_([self getContext], self) withLong:NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_REPUBLISH_LEASESET_TIMEOUT withJavaUtilSet:nil];
          _lastPublished_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$", @"Client ", _dest_, @" is local, but we can't find a valid LeaseSet?  perhaps its being rebuilt?")];
      }
      return;
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Client ", _dest_, @" is no longer local, so no more republishing their leaseSet")];
    }
    [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) stopPublishingWithNetI2pDataHash:_dest_];
  }
  @catch (JavaLangRuntimeException *re) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:@"Uncaught error republishing the leaseSet" withJavaLangThrowable:re];
    [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) stopPublishingWithNetI2pDataHash:_dest_];
    @throw re;
  }
}

- (void)requeueRepublish {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"FAILED publishing of the leaseSet for ", _dest_)];
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) removeJobWithNetI2pRouterJob:self];
  [self requeueWithLong:NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_RETRY_DELAY + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextIntWithInt:NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_RETRY_DELAY]];
}

- (jlong)lastPublished {
  return _lastPublished_;
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_dest_);
  RELEASE_(_facade_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(requeueRepublish);
  methods[4].selector = @selector(lastPublished);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "REPUBLISH_LEASESET_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_REPUBLISH_LEASESET_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "RETRY_DELAY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_RETRY_DELAY, 0x1a, -1, -1, -1, -1 },
    { "_dest_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastPublished_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;LNetI2pDataHash;", "LNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob = { "RepublishLeaseSetJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 6, -1, 1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob;
}

@end

void NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *destHash) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_class_()]);
  JreStrongAssign(&self->_facade_, facade);
  JreStrongAssign(&self->_dest_, destHash);
}

NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *new_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *destHash) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_, ctx, facade, destHash)
}

NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *create_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *destHash) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_, ctx, facade, destHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob)

@implementation NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob:(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *)job {
  NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(self, ctx, job);
  return self;
}

- (NSString *)getName {
  return @"Publish leaseSet failed";
}

- (void)runJob {
  [((NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *) nil_chk(_job_)) requeueRepublish];
}

- (void)dealloc {
  RELEASE_(_job_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_job_", "LNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob;", "LNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure = { "OnRepublishFailure", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0xa, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure;
}

@end

void NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_job_, job);
}

NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *new_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_, ctx, job)
}

NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure *create_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *job) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_, ctx, job)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_OnRepublishFailure)
