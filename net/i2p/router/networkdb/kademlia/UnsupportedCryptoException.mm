//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/UnsupportedCryptoException.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "net/i2p/router/networkdb/kademlia/UnsupportedCryptoException.h"

@implementation NetI2pRouterNetworkdbKademliaUnsupportedCryptoException

- (instancetype)initWithNSString:(NSString *)msg {
  NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(self, msg);
  return self;
}

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_withJavaLangThrowable_(self, msg, t);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaUnsupportedCryptoException = { "UnsupportedCryptoException", "net.i2p.router.networkdb.kademlia", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException;
}

@end

void NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *self, NSString *msg) {
  JavaLangIllegalArgumentException_initWithNSString_(self, msg);
}

NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *new_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException, initWithNSString_, msg)
}

NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *create_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException, initWithNSString_, msg)
}

void NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_withJavaLangThrowable_(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *self, NSString *msg, JavaLangThrowable *t) {
  JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(self, msg, t);
}

NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *new_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException, initWithNSString_withJavaLangThrowable_, msg, t)
}

NetI2pRouterNetworkdbKademliaUnsupportedCryptoException *create_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException, initWithNSString_withJavaLangThrowable_, msg, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaUnsupportedCryptoException)
