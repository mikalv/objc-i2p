//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/NegativeLookupCache.java
//

#include "J2ObjC_source.h"
#include "java/util/Map.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/NegativeLookupCache.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterNetworkdbKademliaNegativeLookupCache () {
 @public
  NetI2pUtilObjectCounter *counter_;
  id<JavaUtilMap> badDests_;
  jint _maxFails_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaNegativeLookupCache, counter_, NetI2pUtilObjectCounter *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaNegativeLookupCache, badDests_, id<JavaUtilMap>)

inline jint NetI2pRouterNetworkdbKademliaNegativeLookupCache_get_MAX_FAILS(void);
#define NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_FAILS 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaNegativeLookupCache, MAX_FAILS, jint)

inline jint NetI2pRouterNetworkdbKademliaNegativeLookupCache_get_MAX_BAD_DESTS(void);
#define NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_BAD_DESTS 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaNegativeLookupCache, MAX_BAD_DESTS, jint)

inline jlong NetI2pRouterNetworkdbKademliaNegativeLookupCache_get_CLEAN_TIME(void);
#define NetI2pRouterNetworkdbKademliaNegativeLookupCache_CLEAN_TIME 120000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaNegativeLookupCache, CLEAN_TIME, jlong)

@interface NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterNetworkdbKademliaNegativeLookupCache *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache:(NetI2pRouterNetworkdbKademliaNegativeLookupCache *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *self, NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *new_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *create_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner)

@implementation NetI2pRouterNetworkdbKademliaNegativeLookupCache

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterNetworkdbKademliaNegativeLookupCache_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)lookupFailedWithNetI2pDataHash:(NetI2pDataHash *)h {
  [((NetI2pUtilObjectCounter *) nil_chk(self->counter_)) incrementWithId:h];
}

- (jboolean)isCachedWithNetI2pDataHash:(NetI2pDataHash *)h {
  if ([((NetI2pUtilObjectCounter *) nil_chk(counter_)) countWithId:h] >= _maxFails_) return true;
  @synchronized(badDests_) {
    return [((id<JavaUtilMap>) nil_chk(badDests_)) getWithId:h] != nil;
  }
}

- (void)failPermanentlyWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk(dest)) calculateHash];
  @synchronized(badDests_) {
    [((id<JavaUtilMap>) nil_chk(badDests_)) putWithId:h withId:dest];
  }
}

- (NetI2pDataDestination *)getBadDestWithNetI2pDataHash:(NetI2pDataHash *)h {
  @synchronized(badDests_) {
    return JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(badDests_)) getWithId:h]);
  }
}

- (void)clear {
  [((NetI2pUtilObjectCounter *) nil_chk(counter_)) clear];
  @synchronized(badDests_) {
    [((id<JavaUtilMap>) nil_chk(badDests_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(counter_);
  RELEASE_(badDests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(lookupFailedWithNetI2pDataHash:);
  methods[2].selector = @selector(isCachedWithNetI2pDataHash:);
  methods[3].selector = @selector(failPermanentlyWithNetI2pDataDestination:);
  methods[4].selector = @selector(getBadDestWithNetI2pDataHash:);
  methods[5].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "badDests_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "_maxFails_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_FAILS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_FAILS, 0x1a, -1, -1, -1, -1 },
    { "MAX_BAD_DESTS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_BAD_DESTS, 0x1a, -1, -1, -1, -1 },
    { "CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaNegativeLookupCache_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "lookupFailed", "LNetI2pDataHash;", "isCached", "failPermanently", "LNetI2pDataDestination;", "getBadDest", "Lnet/i2p/util/ObjectCounter<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/data/Destination;>;", "LNetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaNegativeLookupCache = { "NegativeLookupCache", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 6, 6, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaNegativeLookupCache;
}

@end

void NetI2pRouterNetworkdbKademliaNegativeLookupCache_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaNegativeLookupCache *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->counter_, new_NetI2pUtilObjectCounter_init());
  JreStrongAssignAndConsume(&self->badDests_, new_NetI2pUtilLHMCache_initWithInt_(NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_BAD_DESTS));
  self->_maxFails_ = [((NetI2pRouterRouterContext *) nil_chk(context)) getPropertyWithNSString:@"netdb.negativeCache.maxFails" withInt:NetI2pRouterNetworkdbKademliaNegativeLookupCache_MAX_FAILS];
  jlong cleanTime = [context getPropertyWithNSString:@"netdb.negativeCache.cleanupInterval" withLong:NetI2pRouterNetworkdbKademliaNegativeLookupCache_CLEAN_TIME];
  [((NetI2pUtilSimpleTimer2 *) nil_chk(NetI2pUtilSimpleTimer2_getInstance())) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(self) withLong:cleanTime];
}

NetI2pRouterNetworkdbKademliaNegativeLookupCache *new_NetI2pRouterNetworkdbKademliaNegativeLookupCache_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaNegativeLookupCache, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterNetworkdbKademliaNegativeLookupCache *create_NetI2pRouterNetworkdbKademliaNegativeLookupCache_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaNegativeLookupCache, initWithNetI2pRouterRouterContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaNegativeLookupCache)

@implementation NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner

- (instancetype)initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache:(NetI2pRouterNetworkdbKademliaNegativeLookupCache *)outer$ {
  NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(self, outer$);
  return self;
}

- (void)timeReached {
  [((NetI2pUtilObjectCounter *) nil_chk(this$0_->counter_)) clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaNegativeLookupCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterNetworkdbKademliaNegativeLookupCache;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner = { "Cleaner", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner;
}

@end

void NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *self, NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *new_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner, initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_, outer$)
}

NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner *create_NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner_initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_(NetI2pRouterNetworkdbKademliaNegativeLookupCache *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner, initWithNetI2pRouterNetworkdbKademliaNegativeLookupCache_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaNegativeLookupCache_Cleaner)
