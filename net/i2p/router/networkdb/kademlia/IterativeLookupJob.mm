//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/IterativeLookupJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/IterativeFollowupJob.h"
#include "net/i2p/router/networkdb/kademlia/IterativeLookupJob.h"
#include "net/i2p/router/networkdb/kademlia/IterativeSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/SingleLookupJob.h"
#include "net/i2p/router/networkdb/kademlia/SingleSearchJob.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaIterativeLookupJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataI2npDatabaseSearchReplyMessage *_dsrm_;
  NetI2pRouterNetworkdbKademliaIterativeSearchJob *_search_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeLookupJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeLookupJob, _dsrm_, NetI2pDataI2npDatabaseSearchReplyMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaIterativeLookupJob, _search_, NetI2pRouterNetworkdbKademliaIterativeSearchJob *)

@implementation NetI2pRouterNetworkdbKademliaIterativeLookupJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
     withNetI2pDataI2npDatabaseSearchReplyMessage:(NetI2pDataI2npDatabaseSearchReplyMessage *)dsrm
withNetI2pRouterNetworkdbKademliaIterativeSearchJob:(NetI2pRouterNetworkdbKademliaIterativeSearchJob *)search {
  NetI2pRouterNetworkdbKademliaIterativeLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_(self, ctx, dsrm, search);
  return self;
}

- (void)runJob {
  NetI2pDataHash *from = [((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(_dsrm_)) getFromHash];
  if (![((NetI2pRouterNetworkdbKademliaIterativeSearchJob *) nil_chk(_search_)) wasQueriedWithNetI2pDataHash:from]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("J$@", [_search_ getJobId], @": ILJ DSRM from unqueried peer: ", _dsrm_)];
    return;
  }
  jint limit = JavaLangMath_minWithInt_withInt_([_dsrm_ getNumReplies], NetI2pRouterNetworkdbKademliaSingleLookupJob_MAX_TO_FOLLOW);
  jint newPeers = 0;
  jint oldPeers = 0;
  jint invalidPeers = 0;
  for (jint i = 0; i < limit; i++) {
    NetI2pDataHash *peer = [_dsrm_ getReplyWithInt:i];
    if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]]) {
      oldPeers++;
      continue;
    }
    if ([peer isEqual:from]) {
      invalidPeers++;
      continue;
    }
    if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) isBanlistedForeverWithNetI2pDataHash:peer]) {
      oldPeers++;
      continue;
    }
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
    if (ri == nil) {
      [_search_ newPeerToTryWithNetI2pDataHash:peer];
      if ([_search_ getFromHash] == nil) {
        [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSingleSearchJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataHash_([self getContext], peer, from)];
      }
      else {
      }
      newPeers++;
    }
    else if ([ri getPublished] < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - 60 * 60 * 1000 || !NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(ri)) {
      if ([_search_ getFromHash] == nil) {
        [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaIterativeFollowupJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_([self getContext], peer, peer, _search_)];
      }
      else {
      }
      oldPeers++;
    }
    else {
      [_search_ newPeerToTryWithNetI2pDataHash:peer];
      oldPeers++;
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$ICICI$", [_search_ getJobId], @": ILJ DSRM processed ", newPeers, '/', oldPeers, '/', invalidPeers, @" new/old/invalid hashes")];
  jlong timeSent = [_search_ timeSentWithNetI2pDataHash:from];
  if (timeSent > 0) {
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupReplyWithNetI2pDataHash:from withInt:newPeers withInt:oldPeers withInt:invalidPeers withInt:0 withLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - timeSent];
  }
  [_search_ failedWithNetI2pDataHash:[_dsrm_ getFromHash] withBoolean:false];
}

- (NSString *)getName {
  return @"NetDb process DSRM";
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_dsrm_);
  RELEASE_(_search_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npDatabaseSearchReplyMessage:withNetI2pRouterNetworkdbKademliaIterativeSearchJob:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dsrm_", "LNetI2pDataI2npDatabaseSearchReplyMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_search_", "LNetI2pRouterNetworkdbKademliaIterativeSearchJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npDatabaseSearchReplyMessage;LNetI2pRouterNetworkdbKademliaIterativeSearchJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaIterativeLookupJob = { "IterativeLookupJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 3, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaIterativeLookupJob;
}

@end

void NetI2pRouterNetworkdbKademliaIterativeLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_(NetI2pRouterNetworkdbKademliaIterativeLookupJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm, NetI2pRouterNetworkdbKademliaIterativeSearchJob *search) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaIterativeLookupJob_class_()]);
  JreStrongAssign(&self->_dsrm_, dsrm);
  JreStrongAssign(&self->_search_, search);
}

NetI2pRouterNetworkdbKademliaIterativeLookupJob *new_NetI2pRouterNetworkdbKademliaIterativeLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm, NetI2pRouterNetworkdbKademliaIterativeSearchJob *search) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaIterativeLookupJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_, ctx, dsrm, search)
}

NetI2pRouterNetworkdbKademliaIterativeLookupJob *create_NetI2pRouterNetworkdbKademliaIterativeLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm, NetI2pRouterNetworkdbKademliaIterativeSearchJob *search) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaIterativeLookupJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pRouterNetworkdbKademliaIterativeSearchJob_, ctx, dsrm, search)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaIterativeLookupJob)
