//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/PeerSelector.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/kademlia/SelectionCollector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/util/HashDistance.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector : NSObject < NetI2pKademliaSelectionCollector > {
 @public
  NetI2pRouterNetworkdbKademliaPeerSelector *this$0_;
  JavaUtilTreeMap *_sorted_;
  NetI2pDataHash *_key_;
  id<JavaUtilSet> _toIgnore_;
  jint _matches_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPeerSelector:(NetI2pRouterNetworkdbKademliaPeerSelector *)outer$
                                               withNetI2pDataHash:(NetI2pDataHash *)key
                                                  withJavaUtilSet:(id<JavaUtilSet>)toIgnore;

- (void)addWithNetI2pDataSimpleDataStructure:(NetI2pDataHash *)entry_;

- (id<JavaUtilList>)getWithInt:(jint)howMany;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector, _sorted_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector, _toIgnore_, id<JavaUtilSet>)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *self, NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *new_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *create_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector)

@implementation NetI2pRouterNetworkdbKademliaPeerSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbKademliaPeerSelector_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (id<JavaUtilList>)selectMostReliablePeersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                      withInt:(jint)numClosest
                                              withJavaUtilSet:(id<JavaUtilSet>)alreadyChecked
                                 withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return [self selectNearestExplicitWithNetI2pDataHash:key withInt:numClosest withJavaUtilSet:alreadyChecked withNetI2pKademliaKBucketSet:kbuckets];
}

- (id<JavaUtilList>)selectNearestExplicitWithNetI2pDataHash:(NetI2pDataHash *)key
                                                    withInt:(jint)maxNumRouters
                                            withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                               withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return [self selectNearestExplicitThinWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:peersToIgnore withNetI2pKademliaKBucketSet:kbuckets];
}

- (id<JavaUtilList>)selectNearestExplicitThinWithNetI2pDataHash:(NetI2pDataHash *)key
                                                        withInt:(jint)maxNumRouters
                                                withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                                   withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  if (peersToIgnore == nil) peersToIgnore = create_JavaUtilHashSet_initWithInt_(1);
  [peersToIgnore addWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]];
  NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *matches = create_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(self, key, peersToIgnore);
  [((NetI2pKademliaKBucketSet *) nil_chk(kbuckets)) getAllWithNetI2pKademliaSelectionCollector:matches];
  id<JavaUtilList> rv = [matches getWithInt:maxNumRouters];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@$@$@$IC", @"Searching for ", maxNumRouters, @" peers close to ", key, @": ", rv, @" (not including ", peersToIgnore, @") [allHashes.size = ", [matches size], ']')];
  return rv;
}

- (id<JavaUtilList>)selectNearestWithNetI2pDataHash:(NetI2pDataHash *)key
                                            withInt:(jint)maxNumRouters
                                    withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                       withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return [self selectNearestExplicitWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:peersToIgnore withNetI2pKademliaKBucketSet:kbuckets];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 4, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 5, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 6, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectMostReliablePeersWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[2].selector = @selector(selectNearestExplicitWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[3].selector = @selector(selectNearestExplicitThinWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[4].selector = @selector(selectNearestWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectMostReliablePeers", "LNetI2pDataHash;ILJavaUtilSet;LNetI2pKademliaKBucketSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "selectNearestExplicit", "selectNearestExplicitThin", "selectNearest", "LNetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPeerSelector = { "PeerSelector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x400, 5, 2, -1, 7, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPeerSelector;
}

@end

void NetI2pRouterNetworkdbKademliaPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaPeerSelector *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:[self java_getClass]]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPeerSelector)

@implementation NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPeerSelector:(NetI2pRouterNetworkdbKademliaPeerSelector *)outer$
                                               withNetI2pDataHash:(NetI2pDataHash *)key
                                                  withJavaUtilSet:(id<JavaUtilSet>)toIgnore {
  NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(self, outer$, key, toIgnore);
  return self;
}

- (void)addWithNetI2pDataSimpleDataStructure:(NetI2pDataHash *)entry_ {
  if ([((id<JavaUtilSet>) nil_chk(_toIgnore_)) containsWithId:entry_]) return;
  NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:entry_];
  if (info == nil) return;
  if ([info isHidden]) return;
  JavaMathBigInteger *diff = NetI2pRouterUtilHashDistance_getDistanceWithNetI2pDataHash_withNetI2pDataHash_(_key_, entry_);
  [((JavaUtilTreeMap *) nil_chk(_sorted_)) putWithId:diff withId:entry_];
  _matches_++;
}

- (id<JavaUtilList>)getWithInt:(jint)howMany {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(howMany);
  for (jint i = 0; i < howMany; i++) {
    if ([((JavaUtilTreeMap *) nil_chk(_sorted_)) isEmpty]) break;
    [rv addWithId:[_sorted_ removeWithId:[_sorted_ firstKey]]];
  }
  return rv;
}

- (jint)size {
  return _matches_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_sorted_);
  RELEASE_(_key_);
  RELEASE_(_toIgnore_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaPeerSelector:withNetI2pDataHash:withJavaUtilSet:);
  methods[1].selector = @selector(addWithNetI2pDataSimpleDataStructure:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaPeerSelector;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_sorted_", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_toIgnore_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "_matches_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;LJavaUtilSet;", "(Lnet/i2p/data/Hash;Ljava/util/Set<Lnet/i2p/data/Hash;>;)V", "add", "LNetI2pDataHash;", "get", "I", "(I)Ljava/util/List<Lnet/i2p/data/Hash;>;", "Ljava/util/TreeMap<Ljava/math/BigInteger;Lnet/i2p/data/Hash;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "LNetI2pRouterNetworkdbKademliaPeerSelector;", "Ljava/lang/Object;Lnet/i2p/kademlia/SelectionCollector<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector = { "MatchSelectionCollector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 4, 5, 9, -1, -1, 10, -1 };
  return &_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector;
}

@end

void NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *self, NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_key_, key);
  JreStrongAssignAndConsume(&self->_sorted_, new_JavaUtilTreeMap_init());
  JreStrongAssign(&self->_toIgnore_, toIgnore);
}

NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *new_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector, initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_, outer$, key, toIgnore)
}

NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector *create_NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector_initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector, initWithNetI2pRouterNetworkdbKademliaPeerSelector_withNetI2pDataHash_withJavaUtilSet_, outer$, key, toIgnore)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPeerSelector_MatchSelectionCollector)
