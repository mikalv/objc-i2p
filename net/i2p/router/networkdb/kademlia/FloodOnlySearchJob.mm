//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodOnlySearchJob.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupMatchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupSelector.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupTimeoutJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlySearchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodSearchJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbKademliaFloodOnlySearchJob () {
 @public
  jboolean _shouldProcessDSRM_;
  JavaUtilHashSet *_unheardFrom_;
  NetI2pRouterOutNetMessage *_out_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob, _unheardFrom_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob, _out_, NetI2pRouterOutNetMessage *)

inline jint NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_get_MIN_FOR_NO_DSRM(void);
#define NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_MIN_FOR_NO_DSRM 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob, MIN_FOR_NO_DSRM, jint)

inline jlong NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_get_SINGLE_SEARCH_MSG_TIME(void);
#define NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_SINGLE_SEARCH_MSG_TIME 10000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob, SINGLE_SEARCH_MSG_TIME, jlong)

@implementation NetI2pRouterNetworkdbKademliaFloodOnlySearchJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                                          withInt:(jint)timeoutMs
                                      withBoolean:(jboolean)isLease {
  NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease);
  return self;
}

- (jboolean)shouldProcessDSRM {
  return _shouldProcessDSRM_;
}

- (void)runJob {
  id<JavaUtilList> floodfillPeers;
  NetI2pKademliaKBucketSet *ks = [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) getKBuckets];
  if (ks != nil) {
    NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:_key_];
    floodfillPeers = [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk([_facade_ getPeerSelector], [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class])))) selectFloodfillParticipantsWithNetI2pDataHash:rkey withInt:NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_MIN_FOR_NO_DSRM withNetI2pKademliaKBucketSet:ks];
  }
  else {
    floodfillPeers = JavaUtilCollections_emptyList();
  }
  _shouldProcessDSRM_ = ([((id<JavaUtilList>) nil_chk(floodfillPeers)) size] < NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_MIN_FOR_NO_DSRM || [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getLastChanged] > [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - 60 * 60 * 1000);
  if ([floodfillPeers isEmpty]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Running netDb searches against the floodfill peers, but we don't know any"];
    floodfillPeers = create_JavaUtilArrayList_initWithJavaUtilCollection_([_facade_ getAllRouters]);
    if ([floodfillPeers isEmpty]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:@"We don't know any peers at all"];
      [self failed];
      return;
    }
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(floodfillPeers, [((NetI2pRouterRouterContext *) nil_chk([self getContext])) random]);
  }
  JreStrongAssign(&_out_, [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:_replySelector_ withNetI2pRouterReplyJob:_onReply_ withNetI2pRouterJob:_onTimeout_]);
  jint count = 0;
  for (jint i = 0; [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_lookupsRemaining_)) get] < NetI2pRouterNetworkdbKademliaFloodSearchJob_CONCURRENT_SEARCHES && i < [floodfillPeers size]; i++) {
    NetI2pDataHash *peer = [floodfillPeers getWithInt:i];
    if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]]) continue;
    NetI2pDataI2npDatabaseLookupMessage *dlm = create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_([self getContext], true);
    id<NetI2pRouterTunnelInfo> replyTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundTunnel];
    id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundTunnel];
    if ((replyTunnel == nil) || (outTunnel == nil)) {
      [self failed];
      return;
    }
    if ([((id<NetI2pRouterTunnelInfo>) nil_chk(outTunnel)) getLength] <= 1 && [peer isEqual:_key_] && [floodfillPeers size] > 1) continue;
    @synchronized(_unheardFrom_) {
      [((JavaUtilHashSet *) nil_chk(_unheardFrom_)) addWithId:peer];
    }
    [dlm setFromWithNetI2pDataHash:[((id<NetI2pRouterTunnelInfo>) nil_chk(replyTunnel)) getPeerWithInt:0]];
    [dlm setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_SINGLE_SEARCH_MSG_TIME];
    [dlm setReplyTunnelWithNetI2pDataTunnelId:[replyTunnel getReceiveTunnelIdWithInt:0]];
    [dlm setSearchKeyWithNetI2pDataHash:_key_];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@$@", [self getJobId], @": Floodfill search for ", _key_, @" to ", peer)];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:dlm withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataHash:peer];
    count++;
    [_lookupsRemaining_ incrementAndGet];
  }
  if (count <= 0) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@$", [self getJobId], @": Floodfill search for ", _key_, @" had no peers to send to")];
    [self failed];
  }
}

- (NSString *)getName {
  return @"NetDb flood search";
}

- (jint)decrementRemainingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_unheardFrom_) {
    [((JavaUtilHashSet *) nil_chk(_unheardFrom_)) removeWithId:peer];
    return [self decrementRemaining];
  }
}

- (void)failed {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    JreAssignVolatileBoolean(&_dead_, true);
  }
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:_out_];
  jlong time = JavaLangSystem_currentTimeMillis() - _created_;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jint timeRemaining = (jint) (_expiration_ - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]);
    [_log_ infoWithNSString:JreStrcat("J$@$I$J", [self getJobId], @": Floodfill search for ", _key_, @" failed with ", timeRemaining, @" remaining after ", time)];
  }
  @synchronized(_unheardFrom_) {
    for (NetI2pDataHash * __strong h in nil_chk(_unheardFrom_)) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:h];
  }
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) completeWithNetI2pDataHash:_key_];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedTime" withLong:time];
  for (id<NetI2pRouterJob> __strong j in nil_chk(_onFailed_)) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
  }
  [_onFailed_ clear];
}

- (void)success {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    JreAssignVolatileBoolean(&_dead_, true);
    [super success];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@$", [self getJobId], @": Floodfill search for ", _key_, @" successful")];
  jlong time = JavaLangSystem_currentTimeMillis() - _created_;
  @synchronized(_unheardFrom_) {
    if ([((JavaUtilHashSet *) nil_chk(_unheardFrom_)) size] == 1) {
      NetI2pDataHash *peer = [((id<JavaUtilIterator>) nil_chk([_unheardFrom_ iterator])) next];
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupSuccessfulWithNetI2pDataHash:peer withLong:time];
    }
  }
  [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_)) completeWithNetI2pDataHash:_key_];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.successTime" withLong:time];
  for (id<NetI2pRouterJob> __strong j in nil_chk(_onFind_)) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
  }
}

- (void)dealloc {
  RELEASE_(_unheardFrom_);
  RELEASE_(_out_);
  RELEASE_(_replySelector_);
  RELEASE_(_onReply_);
  RELEASE_(_onTimeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withInt:withBoolean:);
  methods[1].selector = @selector(shouldProcessDSRM);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(decrementRemainingWithNetI2pDataHash:);
  methods[5].selector = @selector(failed);
  methods[6].selector = @selector(success);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_shouldProcessDSRM_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_unheardFrom_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_out_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replySelector_", "LNetI2pRouterMessageSelector;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_onReply_", "LNetI2pRouterReplyJob;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_onTimeout_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "MIN_FOR_NO_DSRM", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_MIN_FOR_NO_DSRM, 0x1a, -1, -1, -1, -1 },
    { "SINGLE_SEARCH_MSG_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_SINGLE_SEARCH_MSG_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;IZ", "decrementRemaining", "LNetI2pDataHash;", "Ljava/util/HashSet<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodOnlySearchJob = { "FloodOnlySearchJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x400, 7, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodOnlySearchJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodOnlySearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease) {
  NetI2pRouterNetworkdbKademliaFloodSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(self, ctx, facade, key, onFind, onFailed, timeoutMs, isLease);
  self->_timeoutMs_ = JavaLangMath_minWithInt_withInt_(timeoutMs, NetI2pRouterNetworkdbKademliaSearchJob_PER_FLOODFILL_PEER_TIMEOUT);
  self->_expiration_ = self->_timeoutMs_ + [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now];
  JreStrongAssignAndConsume(&self->_unheardFrom_, new_JavaUtilHashSet_initWithInt_(NetI2pRouterNetworkdbKademliaFloodSearchJob_CONCURRENT_SEARCHES));
  JreStrongAssignAndConsume(&self->_replySelector_, new_NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_([self getContext], self));
  JreStrongAssignAndConsume(&self->_onReply_, new_NetI2pRouterNetworkdbKademliaFloodOnlyLookupMatchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodSearchJob_([self getContext], self));
  JreStrongAssignAndConsume(&self->_onTimeout_, new_NetI2pRouterNetworkdbKademliaFloodOnlyLookupTimeoutJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodSearchJob_([self getContext], self));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob)
