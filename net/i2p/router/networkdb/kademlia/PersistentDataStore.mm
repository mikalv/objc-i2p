//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/PersistentDataStore.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/FileInputStream.h"
#include "java/io/Flushable.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/PersistentDataStore.h"
#include "net/i2p/router/networkdb/kademlia/TransientDataStore.h"
#include "net/i2p/router/networkdb/reseed/ReseedChecker.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/FileSuffixFilter.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"

@class NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob;
@class NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer;

@interface NetI2pRouterNetworkdbKademliaPersistentDataStore () {
 @public
  JavaIoFile *_dbDir_;
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *_facade_;
  NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *_writer_;
  NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *_readJob_;
  volatile_jboolean _initialized_;
  jboolean _flat_;
  jint _networkID_;
}

- (void)writeWithNetI2pDataHash:(NetI2pDataHash *)key
    withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data;

- (jlong)getPublishDateWithNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data;

- (JavaIoFile *)getDbDirWithNSString:(NSString *)dbDir;

+ (void)unmigrateWithJavaIoFile:(JavaIoFile *)dbdir;

+ (void)migrateWithJavaIoFile:(JavaIoFile *)dbdir
          withJavaIoFileArray:(IOSObjectArray *)files;

+ (NSString *)getLeaseSetNameWithNetI2pDataHash:(NetI2pDataHash *)hash_;

- (NSString *)getRouterInfoNameWithNetI2pDataHash:(NetI2pDataHash *)hash_;

+ (NetI2pDataHash *)getHashWithNSString:(NSString *)filename
                           withNSString:(NSString *)prefix
                           withNSString:(NSString *)suffix;

- (void)removeFileWithNetI2pDataHash:(NetI2pDataHash *)key
                      withJavaIoFile:(JavaIoFile *)dir;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore, _dbDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore, _facade_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore, _writer_, NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore, _readJob_, NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *)

inline jint NetI2pRouterNetworkdbKademliaPersistentDataStore_get_READ_DELAY(void);
#define NetI2pRouterNetworkdbKademliaPersistentDataStore_READ_DELAY 120000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaPersistentDataStore, READ_DELAY, jint)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_PROP_FLAT(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_PROP_FLAT = @"router.networkDatabase.flat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, PROP_FLAT, NSString *)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_B64(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_B64 = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-~";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, B64, NSString *)

inline jint NetI2pRouterNetworkdbKademliaPersistentDataStore_get_WRITE_LIMIT(void);
#define NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_LIMIT 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaPersistentDataStore, WRITE_LIMIT, jint)

inline jlong NetI2pRouterNetworkdbKademliaPersistentDataStore_get_WRITE_DELAY(void);
#define NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_DELAY 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaPersistentDataStore, WRITE_DELAY, jlong)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_LEASESET_PREFIX(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_PREFIX = @"leaseSet-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, LEASESET_PREFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_LEASESET_SUFFIX(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_SUFFIX = @".dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, LEASESET_SUFFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_ROUTERINFO_PREFIX(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX = @"routerInfo-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, ROUTERINFO_PREFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_get_ROUTERINFO_SUFFIX(void);
static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX = @".dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaPersistentDataStore, ROUTERINFO_SUFFIX, NSString *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_writeWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data);

__attribute__((unused)) static jlong NetI2pRouterNetworkdbKademliaPersistentDataStore_getPublishDateWithNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataDatabaseEntry *data);

__attribute__((unused)) static JavaIoFile *NetI2pRouterNetworkdbKademliaPersistentDataStore_getDbDirWithNSString_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NSString *dbDir);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_unmigrateWithJavaIoFile_(JavaIoFile *dbdir);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_migrateWithJavaIoFile_withJavaIoFileArray_(JavaIoFile *dbdir, IOSObjectArray *files);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_getLeaseSetNameWithNetI2pDataHash_(NetI2pDataHash *hash_);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoNameWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *hash_);

__attribute__((unused)) static NetI2pDataHash *NetI2pRouterNetworkdbKademliaPersistentDataStore_getHashWithNSString_withNSString_withNSString_(NSString *filename, NSString *prefix, NSString *suffix);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_removeFileWithNetI2pDataHash_withJavaIoFile_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *key, JavaIoFile *dir);

@interface NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaPersistentDataStore *this$0_;
  NetI2pDataHash *_key_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$
                                                      withNetI2pDataHash:(NetI2pDataHash *)key;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob, _key_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob)

@interface NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer : NSObject < JavaLangRunnable, JavaIoFlushable > {
 @public
  NetI2pRouterNetworkdbKademliaPersistentDataStore *this$0_;
  id<JavaUtilMap> _keys_;
  id _waitLock_;
  volatile_jboolean _quit_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$;

- (void)queueWithNetI2pDataHash:(NetI2pDataHash *)key
    withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data;

- (void)removeWithNetI2pDataHash:(NetI2pDataHash *)key;

- (void)run;

- (void)flush;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer, _keys_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer, _waitLock_, id)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer)

@interface NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaPersistentDataStore *this$0_;
  volatile_jlong _lastModified_;
  volatile_jlong _lastReseed_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$;

- (NSString *)getName;

- (void)runJob;

- (void)wakeup;

- (void)readFiles;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob)

inline jint NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_get_MIN_ROUTERS(void);
#define NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_ROUTERS 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob, MIN_ROUTERS, jint)

inline jlong NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_get_MIN_RESEED_INTERVAL(void);
#define NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_RESEED_INTERVAL 5400000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob, MIN_RESEED_INTERVAL, jlong)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_readFiles(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob)

@interface NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaPersistentDataStore *this$0_;
  JavaIoFile *_routerFile_;
  NetI2pDataHash *_key_;
  jlong _knownDate_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$
                                                          withJavaIoFile:(JavaIoFile *)routerFile
                                                      withNetI2pDataHash:(NetI2pDataHash *)key;

- (NSString *)getName;

- (jboolean)shouldRead;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob, _routerFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob, _key_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_shouldRead(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterNetworkdbKademliaPersistentDataStore)

NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX = @"r";
id<JavaIoFileFilter> NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER;

@implementation NetI2pRouterNetworkdbKademliaPersistentDataStore

+ (NSString *)DIR_PREFIX {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX;
}

+ (id<JavaIoFileFilter>)RI_FILTER {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withNSString:(NSString *)dbDir
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(self, ctx, dbDir, facade);
  return self;
}

- (jboolean)isInitialized {
  return JreLoadVolatileBoolean(&_initialized_);
}

- (void)stop {
  [super stop];
  [((NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *) nil_chk(_writer_)) flush];
}

- (void)restart {
  [super restart];
}

- (void)rescan {
  if (JreLoadVolatileBoolean(&_initialized_)) [((NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *) nil_chk(_readJob_)) wakeup];
}

- (NetI2pDataDatabaseEntry *)getWithNetI2pDataHash:(NetI2pDataHash *)key {
  return [self getWithNetI2pDataHash:key withBoolean:true];
}

- (NetI2pDataDatabaseEntry *)getWithNetI2pDataHash:(NetI2pDataHash *)key
                                       withBoolean:(jboolean)persist {
  NetI2pDataDatabaseEntry *rv = [super getWithNetI2pDataHash:key];
  return rv;
}

- (NetI2pDataDatabaseEntry *)removeWithNetI2pDataHash:(NetI2pDataHash *)key {
  return [self removeWithNetI2pDataHash:key withBoolean:true];
}

- (NetI2pDataDatabaseEntry *)removeWithNetI2pDataHash:(NetI2pDataHash *)key
                                          withBoolean:(jboolean)persist {
  if (persist) {
    [((NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *) nil_chk(_writer_)) removeWithNetI2pDataHash:key];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(self, key)];
  }
  return [super removeWithNetI2pDataHash:key];
}

- (jboolean)putWithNetI2pDataHash:(NetI2pDataHash *)key
      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data {
  return [self putWithNetI2pDataHash:key withNetI2pDataDatabaseEntry:data withBoolean:true];
}

- (jboolean)putWithNetI2pDataHash:(NetI2pDataHash *)key
      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                      withBoolean:(jboolean)persist {
  if ((data == nil) || (key == nil)) return false;
  jboolean rv = [super putWithNetI2pDataHash:key withNetI2pDataDatabaseEntry:data];
  if (rv && persist && [((NetI2pDataDatabaseEntry *) nil_chk(data)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) [((NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *) nil_chk(_writer_)) queueWithNetI2pDataHash:key withNetI2pDataDatabaseEntry:data];
  return rv;
}

- (void)writeWithNetI2pDataHash:(NetI2pDataHash *)key
    withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_writeWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(self, key, data);
}

- (jlong)getPublishDateWithNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getPublishDateWithNetI2pDataDatabaseEntry_(self, data);
}

- (JavaIoFile *)getDbDirWithNSString:(NSString *)dbDir {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getDbDirWithNSString_(self, dbDir);
}

+ (void)unmigrateWithJavaIoFile:(JavaIoFile *)dbdir {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_unmigrateWithJavaIoFile_(dbdir);
}

+ (void)migrateWithJavaIoFile:(JavaIoFile *)dbdir
          withJavaIoFileArray:(IOSObjectArray *)files {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_migrateWithJavaIoFile_withJavaIoFileArray_(dbdir, files);
}

+ (NSString *)getLeaseSetNameWithNetI2pDataHash:(NetI2pDataHash *)hash_ {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getLeaseSetNameWithNetI2pDataHash_(hash_);
}

- (NSString *)getRouterInfoNameWithNetI2pDataHash:(NetI2pDataHash *)hash_ {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoNameWithNetI2pDataHash_(self, hash_);
}

+ (JavaIoFile *)getRouterInfoFileWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                            withNetI2pDataHash:(NetI2pDataHash *)hash_ {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoFileWithNetI2pRouterRouterContext_withNetI2pDataHash_(ctx, hash_);
}

+ (NetI2pDataHash *)getRouterInfoHashWithNSString:(NSString *)filename {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoHashWithNSString_(filename);
}

+ (NetI2pDataHash *)getHashWithNSString:(NSString *)filename
                           withNSString:(NSString *)prefix
                           withNSString:(NSString *)suffix {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getHashWithNSString_withNSString_withNSString_(filename, prefix, suffix);
}

- (void)removeFileWithNetI2pDataHash:(NetI2pDataHash *)key
                      withJavaIoFile:(JavaIoFile *)dir {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_removeFileWithNetI2pDataHash_withJavaIoFile_(self, key, dir);
}

- (void)dealloc {
  RELEASE_(_dbDir_);
  RELEASE_(_facade_);
  RELEASE_(_writer_);
  RELEASE_(_readJob_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 12, 13, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 18, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 19, 3, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x8, 22, 13, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNSString:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:);
  methods[1].selector = @selector(isInitialized);
  methods[2].selector = @selector(stop);
  methods[3].selector = @selector(restart);
  methods[4].selector = @selector(rescan);
  methods[5].selector = @selector(getWithNetI2pDataHash:);
  methods[6].selector = @selector(getWithNetI2pDataHash:withBoolean:);
  methods[7].selector = @selector(removeWithNetI2pDataHash:);
  methods[8].selector = @selector(removeWithNetI2pDataHash:withBoolean:);
  methods[9].selector = @selector(putWithNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[10].selector = @selector(putWithNetI2pDataHash:withNetI2pDataDatabaseEntry:withBoolean:);
  methods[11].selector = @selector(writeWithNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[12].selector = @selector(getPublishDateWithNetI2pDataDatabaseEntry:);
  methods[13].selector = @selector(getDbDirWithNSString:);
  methods[14].selector = @selector(unmigrateWithJavaIoFile:);
  methods[15].selector = @selector(migrateWithJavaIoFile:withJavaIoFileArray:);
  methods[16].selector = @selector(getLeaseSetNameWithNetI2pDataHash:);
  methods[17].selector = @selector(getRouterInfoNameWithNetI2pDataHash:);
  methods[18].selector = @selector(getRouterInfoFileWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[19].selector = @selector(getRouterInfoHashWithNSString:);
  methods[20].selector = @selector(getHashWithNSString:withNSString:withNSString:);
  methods[21].selector = @selector(removeFileWithNetI2pDataHash:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_dbDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_writer_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore_Writer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_readJob_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_initialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_flat_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_networkID_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "READ_DELAY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaPersistentDataStore_READ_DELAY, 0x1a, -1, -1, -1, -1 },
    { "PROP_FLAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "DIR_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "B64", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "WRITE_LIMIT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "WRITE_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_DELAY, 0x1a, -1, -1, -1, -1 },
    { "LEASESET_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "LEASESET_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "ROUTERINFO_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "ROUTERINFO_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "RI_FILTER", "LJavaIoFileFilter;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNSString;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", "LJavaIoIOException;", "get", "LNetI2pDataHash;", "LNetI2pDataHash;Z", "remove", "put", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;Z", "write", "getPublishDate", "LNetI2pDataDatabaseEntry;", "getDbDir", "LNSString;", "unmigrate", "LJavaIoFile;", "migrate", "LJavaIoFile;[LJavaIoFile;", "getLeaseSetName", "getRouterInfoName", "getRouterInfoFile", "LNetI2pRouterRouterContext;LNetI2pDataHash;", "getRouterInfoHash", "getHash", "LNSString;LNSString;LNSString;", "removeFile", "LNetI2pDataHash;LJavaIoFile;", &NetI2pRouterNetworkdbKademliaPersistentDataStore_PROP_FLAT, &NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, &NetI2pRouterNetworkdbKademliaPersistentDataStore_B64, &NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_PREFIX, &NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_SUFFIX, &NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, &NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX, &NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER, "LNetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob;LNetI2pRouterNetworkdbKademliaPersistentDataStore_Writer;LNetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob;LNetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPersistentDataStore = { "PersistentDataStore", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x1, 22, 18, -1, 35, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPersistentDataStore;
}

+ (void)initialize {
  if (self == [NetI2pRouterNetworkdbKademliaPersistentDataStore class]) {
    JreStrongAssignAndConsume(&NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER, new_NetI2pUtilFileSuffixFilter_initWithNSString_withNSString_(NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX));
    J2OBJC_SET_INITIALIZED(NetI2pRouterNetworkdbKademliaPersistentDataStore)
  }
}

@end

void NetI2pRouterNetworkdbKademliaPersistentDataStore_initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pRouterRouterContext *ctx, NSString *dbDir, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  NetI2pRouterNetworkdbKademliaTransientDataStore_initWithNetI2pRouterRouterContext_(self, ctx);
  self->_networkID_ = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) router])) getNetworkID];
  self->_flat_ = [ctx getBooleanPropertyWithNSString:NetI2pRouterNetworkdbKademliaPersistentDataStore_PROP_FLAT];
  JreStrongAssign(&self->_dbDir_, NetI2pRouterNetworkdbKademliaPersistentDataStore_getDbDirWithNSString_(self, dbDir));
  JreStrongAssign(&self->_facade_, facade);
  JreStrongAssignAndConsume(&self->_readJob_, new_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(self));
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) jobQueue])) addJobWithNetI2pRouterJob:self->_readJob_];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"netDb.writeClobber" withNSString:@"How often we clobber a pending netDb write" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 20 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"netDb.writePending" withNSString:@"How many pending writes are there" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"netDb.writeOut" withNSString:@"How many we wrote" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 20 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"netDb.writeTime" withNSString:@"How long it took" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 20 * 60 * 1000 } count:1]];
  JreStrongAssignAndConsume(&self->_writer_, new_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(self));
  NetI2pUtilI2PThread *writer = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(self->_writer_, @"DBWriter");
  [writer start];
}

NetI2pRouterNetworkdbKademliaPersistentDataStore *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NSString *dbDir, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore, initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, ctx, dbDir, facade)
}

NetI2pRouterNetworkdbKademliaPersistentDataStore *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *ctx, NSString *dbDir, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore, initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, ctx, dbDir, facade)
}

void NetI2pRouterNetworkdbKademliaPersistentDataStore_writeWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Writing key ", key)];
  JavaIoOutputStream *fos = nil;
  JavaIoFile *dbFile = nil;
  @try {
    NSString *filename = nil;
    if ([((NetI2pDataDatabaseEntry *) nil_chk(data)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) filename = NetI2pRouterNetworkdbKademliaPersistentDataStore_getLeaseSetNameWithNetI2pDataHash_(key);
    else if ([data getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) filename = NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoNameWithNetI2pDataHash_(self, key);
    else @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"We don't know how to write objects of type ", [[data java_getClass] getName]));
    dbFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->_dbDir_, filename);
    jlong dataPublishDate = NetI2pRouterNetworkdbKademliaPersistentDataStore_getPublishDateWithNetI2pDataDatabaseEntry_(self, data);
    if ([dbFile lastModified] < dataPublishDate) {
      fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(dbFile);
      fos = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(fos);
      @try {
        [data writeBytesWithJavaIoOutputStream:fos];
        [fos close];
        [dbFile setLastModifiedWithLong:dataPublishDate];
      }
      @catch (NetI2pDataDataFormatException *dfe) {
        [self->_log_ errorWithNSString:JreStrcat("$@$@", @"Error writing out malformed object as ", key, @": ", data) withJavaLangThrowable:dfe];
        [dbFile delete__];
      }
    }
    else {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$JC", @"Not writing ", [((NetI2pDataHash *) nil_chk(key)) toBase64], @", as its up to date on disk (file mod-publish=", ([dbFile lastModified] - dataPublishDate), ')')];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [self->_log_ errorWithNSString:@"Error writing out the object" withJavaLangThrowable:ioe];
  }
  @finally {
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jlong NetI2pRouterNetworkdbKademliaPersistentDataStore_getPublishDateWithNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataDatabaseEntry *data) {
  return [((NetI2pDataDatabaseEntry *) nil_chk(data)) getDate];
}

JavaIoFile *NetI2pRouterNetworkdbKademliaPersistentDataStore_getDbDirWithNSString_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NSString *dbDir) {
  JavaIoFile *f = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getRouterDir], dbDir);
  if (![f exists]) {
    jboolean created = [f mkdirs];
    if (!created) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$C", @"Unable to create the DB directory [", [f getAbsolutePath], ']'));
  }
  if (![f isDirectory]) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"DB directory [", [f getAbsolutePath], @"] is not a directory!"));
  if (![f canRead]) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"DB directory [", [f getAbsolutePath], @"] is not readable!"));
  if (![f canWrite]) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"DB directory [", [f getAbsolutePath], @"] is not writable!"));
  if (self->_flat_) {
    NetI2pRouterNetworkdbKademliaPersistentDataStore_unmigrateWithJavaIoFile_(f);
  }
  else {
    for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterNetworkdbKademliaPersistentDataStore_B64)) java_length]; j++) {
      JavaIoFile *subdir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(f, JreStrcat("$C", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [NetI2pRouterNetworkdbKademliaPersistentDataStore_B64 charAtWithInt:j]));
      if (![subdir exists]) [subdir mkdir];
    }
    IOSObjectArray *routerInfoFiles = [f listFilesWithJavaIoFileFilter:NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER];
    if (routerInfoFiles != nil) NetI2pRouterNetworkdbKademliaPersistentDataStore_migrateWithJavaIoFile_withJavaIoFileArray_(f, routerInfoFiles);
  }
  return f;
}

void NetI2pRouterNetworkdbKademliaPersistentDataStore_unmigrateWithJavaIoFile_(JavaIoFile *dbdir) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterNetworkdbKademliaPersistentDataStore_B64)) java_length]; j++) {
    JavaIoFile *subdir = create_JavaIoFile_initWithJavaIoFile_withNSString_(dbdir, JreStrcat("$C", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [NetI2pRouterNetworkdbKademliaPersistentDataStore_B64 charAtWithInt:j]));
    IOSObjectArray *files = [subdir listFilesWithJavaIoFileFilter:NetI2pRouterNetworkdbKademliaPersistentDataStore_RI_FILTER];
    if (files == nil) continue;
    for (jint i = 0; i < files->size_; i++) {
      JavaIoFile *from = IOSObjectArray_Get(files, i);
      JavaIoFile *to = create_JavaIoFile_initWithJavaIoFile_withNSString_(dbdir, [((JavaIoFile *) nil_chk(from)) getName]);
      NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(from, to);
    }
  }
}

void NetI2pRouterNetworkdbKademliaPersistentDataStore_migrateWithJavaIoFile_withJavaIoFileArray_(JavaIoFile *dbdir, IOSObjectArray *files) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    JavaIoFile *from = IOSObjectArray_Get(files, i);
    if (![((JavaIoFile *) nil_chk(from)) isFile]) continue;
    JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_(dbdir, JreStrcat("$C", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [((NSString *) nil_chk([from getName])) charAtWithInt:[((NSString *) nil_chk(NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX)) java_length]]));
    JavaIoFile *to = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, [from getName]);
    NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(from, to);
  }
}

NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_getLeaseSetNameWithNetI2pDataHash_(NetI2pDataHash *hash_) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  return JreStrcat("$$$", NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_PREFIX, [((NetI2pDataHash *) nil_chk(hash_)) toBase64], NetI2pRouterNetworkdbKademliaPersistentDataStore_LEASESET_SUFFIX);
}

NSString *NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoNameWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *hash_) {
  NSString *b64 = [((NetI2pDataHash *) nil_chk(hash_)) toBase64];
  if (self->_flat_) return JreStrcat("$$$", NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, b64, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX);
  return JreStrcat("$CC$$$", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [((NSString *) nil_chk(b64)) charAtWithInt:0], JreLoadStatic(JavaIoFile, separatorChar), NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, b64, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX);
}

JavaIoFile *NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoFileWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *hash_) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  NSString *b64 = [((NetI2pDataHash *) nil_chk(hash_)) toBase64];
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(ctx)) getRouterDir], [ctx getPropertyWithNSString:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR withNSString:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR]);
  if ([ctx getBooleanPropertyWithNSString:NetI2pRouterNetworkdbKademliaPersistentDataStore_PROP_FLAT]) return create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, JreStrcat("$$$", NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, b64, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX));
  return create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, JreStrcat("$CC$$$", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [((NSString *) nil_chk(b64)) charAtWithInt:0], JreLoadStatic(JavaIoFile, separatorChar), NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, b64, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX));
}

NetI2pDataHash *NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoHashWithNSString_(NSString *filename) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_getHashWithNSString_withNSString_withNSString_(filename, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_PREFIX, NetI2pRouterNetworkdbKademliaPersistentDataStore_ROUTERINFO_SUFFIX);
}

NetI2pDataHash *NetI2pRouterNetworkdbKademliaPersistentDataStore_getHashWithNSString_withNSString_withNSString_(NSString *filename, NSString *prefix, NSString *suffix) {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_initialize();
  @try {
    NSString *key = [((NSString *) nil_chk(filename)) java_substring:[((NSString *) nil_chk(prefix)) java_length]];
    key = [((NSString *) nil_chk(key)) java_substring:0 endIndex:[key java_length] - [((NSString *) nil_chk(suffix)) java_length]];
    IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_(key);
    if (b == nil) return nil;
    NetI2pDataHash *h = NetI2pDataHash_createWithByteArray_(b);
    return h;
  }
  @catch (JavaLangRuntimeException *e) {
    return nil;
  }
}

void NetI2pRouterNetworkdbKademliaPersistentDataStore_removeFileWithNetI2pDataHash_withJavaIoFile_(NetI2pRouterNetworkdbKademliaPersistentDataStore *self, NetI2pDataHash *key, JavaIoFile *dir) {
  NSString *riName = NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoNameWithNetI2pDataHash_(self, key);
  JavaIoFile *f = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, riName);
  if ([f exists]) {
    jboolean removed = [f delete__];
    if (!removed) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"Unable to remove router info at ", [f getAbsolutePath])];
    }
    else if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
      [self->_log_ infoWithNSString:JreStrcat("$$", @"Removed router info at ", [f getAbsolutePath])];
    }
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPersistentDataStore)

@implementation NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$
                                                      withNetI2pDataHash:(NetI2pDataHash *)key {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(self, outer$, key);
  return self;
}

- (NSString *)getName {
  return @"Delete RI file";
}

- (void)runJob {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Removing key ", _key_)];
  @try {
    NetI2pRouterNetworkdbKademliaPersistentDataStore_removeFileWithNetI2pDataHash_withJavaIoFile_(this$0_, _key_, this$0_->_dbDir_);
  }
  @catch (JavaIoIOException *ioe) {
    [this$0_->_log_ errorWithNSString:JreStrcat("$@", @"Error removing key ", _key_) withJavaLangThrowable:ioe];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob = { "RemoveJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob;
}

@end

void NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
  JreStrongAssign(&self->_key_, key);
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_, outer$, key)
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, NetI2pDataHash *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withNetI2pDataHash_, outer$, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPersistentDataStore_RemoveJob)

@implementation NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$ {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(self, outer$);
  return self;
}

- (void)queueWithNetI2pDataHash:(NetI2pDataHash *)key
    withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data {
  jint pending = [((id<JavaUtilMap>) nil_chk(_keys_)) size];
  jboolean exists = (nil != [_keys_ putWithId:key withId:data]);
  if (exists) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"netDb.writeClobber" withLong:pending];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"netDb.writePending" withLong:pending];
}

- (void)removeWithNetI2pDataHash:(NetI2pDataHash *)key {
  [((id<JavaUtilMap>) nil_chk(_keys_)) removeWithId:key];
}

- (void)run {
  JreAssignVolatileBoolean(&_quit_, false);
  NetI2pDataHash *key = nil;
  NetI2pDataDatabaseEntry *data = nil;
  jint count = 0;
  jint lastCount = 0;
  jlong startTime = 0;
  while (true) {
    id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(_keys_)) entrySet])) iterator];
    @try {
      id<JavaUtilMap_Entry> entry_ = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      data = [entry_ getValue];
      [iter remove];
      count++;
    }
    @catch (JavaUtilNoSuchElementException *nsee) {
      lastCount = count;
      count = 0;
    }
    @catch (JavaLangIllegalStateException *ise) {
      lastCount = count;
      count = 0;
    }
    if (key != nil) {
      if (data != nil) {
        @synchronized(this$0_->_dbDir_) {
          NetI2pRouterNetworkdbKademliaPersistentDataStore_writeWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(this$0_, key, data);
        }
        data = nil;
      }
      key = nil;
    }
    if (count >= NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_LIMIT) count = 0;
    if (count == 0) {
      if (lastCount > 0) {
        jlong time = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now] - startTime;
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$I$J", @"Wrote ", lastCount, @" entries to disk in ", time)];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"netDb.writeOut" withLong:lastCount];
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"netDb.writeTime" withLong:time];
      }
      if (JreLoadVolatileBoolean(&_quit_)) break;
      @synchronized(_waitLock_) {
        @try {
          [nil_chk(_waitLock_) java_waitWithLong:NetI2pRouterNetworkdbKademliaPersistentDataStore_WRITE_DELAY];
        }
        @catch (JavaLangInterruptedException *ie) {
        }
      }
      startTime = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
    }
  }
}

- (void)flush {
  @synchronized(_waitLock_) {
    JreAssignVolatileBoolean(&_quit_, true);
    [nil_chk(_waitLock_) java_notifyAll];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_keys_);
  RELEASE_(_waitLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:);
  methods[1].selector = @selector(queueWithNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[2].selector = @selector(removeWithNetI2pDataHash:);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(flush);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_keys_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "_waitLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_quit_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "queue", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;", "remove", "LNetI2pDataHash;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;>;", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer = { "Writer", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 5, 4, 5, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer;
}

@end

void NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_keys_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_waitLock_, new_NSObject_init());
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_, outer$)
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPersistentDataStore_Writer)

@implementation NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$ {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(self, outer$);
  return self;
}

- (NSString *)getName {
  return @"DB Read Job";
}

- (void)runJob {
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) gracefulShutdownInProgress]) {
    [self requeueWithLong:NetI2pRouterNetworkdbKademliaPersistentDataStore_READ_DELAY];
    return;
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  jlong lastMod = [((JavaIoFile *) nil_chk(this$0_->_dbDir_)) lastModified];
  jboolean shouldScan = lastMod > JreLoadVolatileLong(&_lastModified_) || [this$0_ size] < NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_ROUTERS + 10;
  if (!shouldScan && !this$0_->_flat_) {
    for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterNetworkdbKademliaPersistentDataStore_B64)) java_length]; j++) {
      JavaIoFile *subdir = create_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->_dbDir_, JreStrcat("$C", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [NetI2pRouterNetworkdbKademliaPersistentDataStore_B64 charAtWithInt:j]));
      if ([subdir lastModified] > JreLoadVolatileLong(&_lastModified_)) {
        shouldScan = true;
        break;
      }
    }
  }
  if (shouldScan) {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) infoWithNSString:@"Rereading new files"];
    @synchronized(this$0_->_dbDir_) {
      NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_readFiles(self);
    }
    JreAssignVolatileLong(&_lastModified_, now);
  }
  [self requeueWithLong:NetI2pRouterNetworkdbKademliaPersistentDataStore_READ_DELAY];
}

- (void)wakeup {
  [self requeueWithLong:0];
}

- (void)readFiles {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_readFiles(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(wakeup);
  methods[4].selector = @selector(readFiles);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_lastModified_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastReseed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "MIN_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_ROUTERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_RESEED_INTERVAL", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_RESEED_INTERVAL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterNetworkdbKademliaPersistentDataStore;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob = { "ReadJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 5, 5, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob;
}

@end

void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_, outer$)
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_, outer$)
}

void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_readFiles(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob *self) {
  jint routerCount = 0;
  IOSObjectArray *routerInfoFiles = [((JavaIoFile *) nil_chk(self->this$0_->_dbDir_)) listFilesWithJavaIoFileFilter:JreLoadStatic(NetI2pRouterNetworkdbKademliaPersistentDataStore, RI_FILTER)];
  if (self->this$0_->_flat_) {
    if (routerInfoFiles != nil) {
      routerCount = routerInfoFiles->size_;
      for (jint i = 0; i < routerInfoFiles->size_; i++) {
        if (![((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) router])) isAlive]) break;
        NetI2pDataHash *key = NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoHashWithNSString_([((JavaIoFile *) nil_chk(IOSObjectArray_Get(routerInfoFiles, i))) getName]);
        if ((key != nil) && (![self->this$0_ isKnownWithNetI2pDataHash:key])) {
          [(create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(self->this$0_, IOSObjectArray_Get(routerInfoFiles, i), key)) runJob];
        }
      }
    }
  }
  else {
    if (routerInfoFiles != nil) NetI2pRouterNetworkdbKademliaPersistentDataStore_migrateWithJavaIoFile_withJavaIoFileArray_(self->this$0_->_dbDir_, routerInfoFiles);
    id<JavaUtilList> toRead = create_JavaUtilArrayList_initWithInt_(2048);
    for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterNetworkdbKademliaPersistentDataStore_B64)) java_length]; j++) {
      JavaIoFile *subdir = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->this$0_->_dbDir_, JreStrcat("$C", NetI2pRouterNetworkdbKademliaPersistentDataStore_DIR_PREFIX, [NetI2pRouterNetworkdbKademliaPersistentDataStore_B64 charAtWithInt:j]));
      IOSObjectArray *files = [subdir listFilesWithJavaIoFileFilter:JreLoadStatic(NetI2pRouterNetworkdbKademliaPersistentDataStore, RI_FILTER)];
      if (files == nil) continue;
      jlong lastMod = [subdir lastModified];
      if (routerCount >= NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_ROUTERS && lastMod <= JreLoadVolatileLong(&self->_lastModified_)) continue;
      routerCount += files->size_;
      if (lastMod <= JreLoadVolatileLong(&self->_lastModified_)) continue;
      for (jint i = 0; i < files->size_; i++) {
        [toRead addWithId:IOSObjectArray_Get(files, i)];
      }
    }
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(toRead, [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) random]);
    for (JavaIoFile * __strong file in toRead) {
      NetI2pDataHash *key = NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoHashWithNSString_([((JavaIoFile *) nil_chk(file)) getName]);
      if (key != nil && ![self->this$0_ isKnownWithNetI2pDataHash:key]) [(create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(self->this$0_, file, key)) runJob];
    }
  }
  if (!JreLoadVolatileBoolean(&self->this$0_->_initialized_)) {
    JreAssignVolatileBoolean(&self->this$0_->_initialized_, true);
    if ([((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->this$0_->_facade_)) reseedChecker])) checkReseedWithInt:routerCount]) {
      JreAssignVolatileLong(&self->_lastReseed_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now]);
    }
    else {
      [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) router])) setNetDbReady];
    }
  }
  else if (JreLoadVolatileLong(&self->_lastReseed_) < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now] - NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_RESEED_INTERVAL) {
    jint count = JavaLangMath_minWithInt_withInt_(routerCount, [self->this$0_ size]);
    if (count < NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob_MIN_ROUTERS) {
      if ([((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->this$0_->_facade_)) reseedChecker])) checkReseedWithInt:count]) JreAssignVolatileLong(&self->_lastReseed_, [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now]);
    }
    else {
      [((NetI2pRouterRouter *) nil_chk([self->this$0_->_context_ router])) setNetDbReady];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadJob)

@implementation NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:(NetI2pRouterNetworkdbKademliaPersistentDataStore *)outer$
                                                          withJavaIoFile:(JavaIoFile *)routerFile
                                                      withNetI2pDataHash:(NetI2pDataHash *)key {
  NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(self, outer$, routerFile, key);
  return self;
}

- (NSString *)getName {
  return @"Read RouterInfo";
}

- (jboolean)shouldRead {
  return NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_shouldRead(self);
}

- (void)runJob {
  if (!NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_shouldRead(self)) return;
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Reading ", _routerFile_)];
  JavaIoInputStream *fis = nil;
  jboolean corrupt = false;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(_routerFile_);
    fis = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(fis);
    NetI2pDataRouterRouterInfo *ri = create_NetI2pDataRouterRouterInfo_init();
    [ri readBytesWithJavaIoInputStream:fis withBoolean:true];
    if ([ri getNetworkId] != this$0_->_networkID_) {
      corrupt = true;
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [this$0_->_log_ errorWithNSString:JreStrcat("$$$", @"The router ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) calculateHash])) toBase64], @" is from a different network")];
    }
    else if (![((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) calculateHash])) isEqual:_key_]) {
      corrupt = true;
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("@$@$@", [((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) calculateHash], @" does not match ", _key_, @" from ", _routerFile_)];
    }
    else if ([ri getPublished] <= _knownDate_) {
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Skipping since netdb newer than ", _routerFile_)];
    }
    else if ([((NetI2pRouterBlocklist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) blocklist])) isBlocklistedWithNetI2pDataRouterRouterInfo:ri]) {
      corrupt = true;
      if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("@$", [ri getHash], @" is blocklisted")];
    }
    else {
      @try {
        [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(this$0_->_facade_)) storeWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) getHash] withNetI2pDataRouterRouterInfo:ri withBoolean:false];
        [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) heardAboutWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) getHash] withLong:[ri getPublished]];
      }
      @catch (JavaLangIllegalArgumentException *iae) {
        if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:@"Refused locally loaded routerInfo - deleting" withJavaLangThrowable:iae];
        corrupt = true;
      }
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$$", @"Error reading the routerInfo from ", [((JavaIoFile *) nil_chk(_routerFile_)) getName]) withJavaLangThrowable:dfe];
    corrupt = true;
  }
  @catch (JavaIoIOException *ioe) {
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$$", @"Unable to read the router reference in ", [((JavaIoFile *) nil_chk(_routerFile_)) getName]) withJavaLangThrowable:ioe];
    corrupt = true;
  }
  @catch (JavaLangRuntimeException *e) {
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$$", @"Unable to read the router reference in ", [((JavaIoFile *) nil_chk(_routerFile_)) getName]) withJavaLangThrowable:e];
    corrupt = true;
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  if (corrupt) [((JavaIoFile *) nil_chk(_routerFile_)) delete__];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_routerFile_);
  RELEASE_(_key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaPersistentDataStore:withJavaIoFile:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(shouldRead);
  methods[3].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_routerFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_knownDate_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LNetI2pDataHash;", "LNetI2pRouterNetworkdbKademliaPersistentDataStore;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob = { "ReadRouterJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 4, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob;
}

@end

void NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *self, NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
  JreStrongAssign(&self->_routerFile_, routerFile);
  JreStrongAssign(&self->_key_, key);
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *new_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_, outer$, routerFile, key)
}

NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *create_NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaPersistentDataStore *outer$, JavaIoFile *routerFile, NetI2pDataHash *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob, initWithNetI2pRouterNetworkdbKademliaPersistentDataStore_withJavaIoFile_withNetI2pDataHash_, outer$, routerFile, key)
}

jboolean NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob_shouldRead(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob *self) {
  NetI2pDataDatabaseEntry *data = [self->this$0_ getWithNetI2pDataHash:self->_key_ withBoolean:false];
  if (data == nil) return true;
  if ([data getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    self->_knownDate_ = [((NetI2pDataRouterRouterInfo *) cast_chk(data, [NetI2pDataRouterRouterInfo class])) getPublished];
    jlong fileDate = [((JavaIoFile *) nil_chk(self->_routerFile_)) lastModified];
    return fileDate > self->_knownDate_ + (60 * 60 * 1000);
  }
  else {
    [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) errorWithNSString:JreStrcat("$@$@", @"Prevented LS overwrite by RI ", self->_key_, @" from ", self->_routerFile_)];
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaPersistentDataStore_ReadRouterJob)
