//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodOnlyLookupSelector.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlyLookupSelector.h"
#include "net/i2p/router/networkdb/kademlia/FloodOnlySearchJob.h"
#include "net/i2p/router/networkdb/kademlia/SingleLookupJob.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *_search_;
  jboolean _matchFound_;
  NetI2pUtilLog *_log_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector, _search_, NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector, _log_, NetI2pUtilLog *)

@implementation NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob:(NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *)search {
  NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_(self, ctx, search);
  return self;
}

- (jboolean)continueMatching {
  return [((NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *) nil_chk(_search_)) getLookupsRemaining] > 0 && !_matchFound_ && [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] < [self getExpiration];
}

- (jlong)getExpiration {
  return (_matchFound_ ? -1 : [((NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *) nil_chk(_search_)) getExpiration]);
}

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  if (message == nil) return false;
  if ([message isKindOfClass:[NetI2pDataI2npDatabaseStoreMessage class]]) {
    NetI2pDataI2npDatabaseStoreMessage *dsm = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(message, [NetI2pDataI2npDatabaseStoreMessage class]);
    if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *) nil_chk(_search_)) getKey])) isEqual:[dsm getKey]]) {
      [_search_ decrementRemaining];
      _matchFound_ = true;
      return true;
    }
  }
  else if ([message isKindOfClass:[NetI2pDataI2npDatabaseSearchReplyMessage class]]) {
    NetI2pDataI2npDatabaseSearchReplyMessage *dsrm = (NetI2pDataI2npDatabaseSearchReplyMessage *) cast_chk(message, [NetI2pDataI2npDatabaseSearchReplyMessage class]);
    if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *) nil_chk(_search_)) getKey])) isEqual:[dsrm getSearchKey]]) {
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileManager])) dbLookupReplyWithNetI2pDataHash:[dsrm getFromHash] withInt:0 withInt:[dsrm getNumReplies] withInt:0 withInt:0 withLong:JavaLangSystem_currentTimeMillis() - [_search_ getCreated]];
      if ([_search_ shouldProcessDSRM]) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [_search_ getJobId], @": Processing DSRM via SingleLookupJob, apparently from ", [dsrm getFromHash])];
        [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_(_context_, dsrm)];
      }
      else if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
        jint remaining = [_search_ getLookupsRemaining];
        [_log_ infoWithNSString:JreStrcat("J$@$@$I$", [_search_ getJobId], @": got a DSRM apparently from ", [dsrm getFromHash], @" when we were looking for ", [_search_ getKey], @", with ", remaining, @" outstanding searches")];
      }
      jint remaining = [_search_ decrementRemainingWithNetI2pDataHash:[dsrm getFromHash]];
      return remaining <= 0;
    }
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("$@", @"FOL Selector for ", [((NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *) nil_chk(_search_)) getKey]);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_search_);
  RELEASE_(_log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob:);
  methods[1].selector = @selector(continueMatching);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(isMatchWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_search_", "LNetI2pRouterNetworkdbKademliaFloodOnlySearchJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_matchFound_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodOnlySearchJob;", "isMatch", "LNetI2pDataI2npI2NPMessage;", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector = { "FloodOnlyLookupSelector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector;
}

@end

void NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *search) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_search_, search);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
}

NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector *new_NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *search) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_, ctx, search)
}

NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector *create_NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodOnlySearchJob *search) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodOnlySearchJob_, ctx, search)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodOnlyLookupSelector)
