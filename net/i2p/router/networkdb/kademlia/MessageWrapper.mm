//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/MessageWrapper.java
//

#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/crypto/TagSetHandle.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/GarlicMessageBuilder.h"
#include "net/i2p/router/message/PayloadGarlicConfig.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/util/RemovableSingletonSet.h"
#include "net/i2p/util/RandomSource.h"

inline jint NetI2pRouterNetworkdbKademliaMessageWrapper_get_NETDB_TAGS_TO_DELIVER(void);
#define NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_TAGS_TO_DELIVER 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaMessageWrapper, NETDB_TAGS_TO_DELIVER, jint)

inline jint NetI2pRouterNetworkdbKademliaMessageWrapper_get_NETDB_LOW_THRESHOLD(void);
#define NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_LOW_THRESHOLD 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaMessageWrapper, NETDB_LOW_THRESHOLD, jint)

@interface NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage () {
 @public
  NetI2pDataI2npGarlicMessage *msg_;
  NetI2pCryptoSessionKeyManager *skm_;
  NetI2pDataPublicKey *sentTo_;
  NetI2pDataSessionKey *sessionKey_;
  id<NetI2pCryptoTagSetHandle> tsh_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, msg_, NetI2pDataI2npGarlicMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, skm_, NetI2pCryptoSessionKeyManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, sentTo_, NetI2pDataPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, sessionKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, tsh_, id<NetI2pCryptoTagSetHandle>)

@implementation NetI2pRouterNetworkdbKademliaMessageWrapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterNetworkdbKademliaMessageWrapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *)wrapWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
                                                                               withNetI2pDataHash:(NetI2pDataHash *)from
                                                                   withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)to {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(ctx, m, from, to);
}

+ (NetI2pDataI2npGarlicMessage *)wrapWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
                                    withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)to {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterInfo_(ctx, m, to);
}

+ (NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *)generateSessionWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_(ctx);
}

+ (NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *)generateSessionWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                                          withNetI2pDataHash:(NetI2pDataHash *)localDest {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pDataHash_(ctx, localDest);
}

+ (NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *)generateSessionWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                                           withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pCryptoSessionKeyManager_(ctx, skm);
}

+ (NetI2pDataI2npGarlicMessage *)wrapWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
    withNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession:(NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *)session {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_(ctx, m, session);
}

+ (NetI2pDataI2npGarlicMessage *)wrapWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
                                          withNetI2pDataSessionKey:(NetI2pDataSessionKey *)encryptKey
                                          withNetI2pDataSessionTag:(NetI2pDataSessionTag *)encryptTag {
  return NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, m, encryptKey, encryptTag);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x8, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 0, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 0, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(wrapWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[2].selector = @selector(wrapWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterInfo:);
  methods[3].selector = @selector(generateSessionWithNetI2pRouterRouterContext:);
  methods[4].selector = @selector(generateSessionWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[5].selector = @selector(generateSessionWithNetI2pRouterRouterContext:withNetI2pCryptoSessionKeyManager:);
  methods[6].selector = @selector(wrapWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession:);
  methods[7].selector = @selector(wrapWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataSessionKey:withNetI2pDataSessionTag:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NETDB_TAGS_TO_DELIVER", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_TAGS_TO_DELIVER, 0x1a, -1, -1, -1, -1 },
    { "NETDB_LOW_THRESHOLD", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_LOW_THRESHOLD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "wrap", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterInfo;", "generateSession", "LNetI2pRouterRouterContext;", "LNetI2pRouterRouterContext;LNetI2pDataHash;", "LNetI2pRouterRouterContext;LNetI2pCryptoSessionKeyManager;", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataSessionKey;LNetI2pDataSessionTag;", "LNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;LNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaMessageWrapper = { "MessageWrapper", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaMessageWrapper;
}

@end

void NetI2pRouterNetworkdbKademliaMessageWrapper_init(NetI2pRouterNetworkdbKademliaMessageWrapper *self) {
  NSObject_init(self);
}

NetI2pRouterNetworkdbKademliaMessageWrapper *new_NetI2pRouterNetworkdbKademliaMessageWrapper_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper, init)
}

NetI2pRouterNetworkdbKademliaMessageWrapper *create_NetI2pRouterNetworkdbKademliaMessageWrapper_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper, init)
}

NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataHash *from, NetI2pDataRouterRouterInfo *to) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  NetI2pRouterMessagePayloadGarlicConfig *payload = create_NetI2pRouterMessagePayloadGarlicConfig_init();
  [payload setCertificateWithNetI2pDataCertificate:JreLoadStatic(NetI2pDataCertificate, NULL_CERT)];
  [payload setIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
  [payload setPayloadWithNetI2pDataI2npI2NPMessage:m];
  [payload setRecipientWithNetI2pDataRouterRouterInfo:to];
  [payload setDeliveryInstructionsWithNetI2pDataI2npDeliveryInstructions:JreLoadStatic(NetI2pDataI2npDeliveryInstructions, LOCAL)];
  [payload setExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getMessageExpiration]];
  NetI2pCryptoSessionKeyManager *skm;
  if (from != nil) skm = [((NetI2pRouterClientManagerFacade *) nil_chk([ctx clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:from];
  else skm = [ctx sessionKeyManager];
  if (skm == nil) return nil;
  NetI2pDataSessionKey *sentKey = create_NetI2pDataSessionKey_init();
  id<JavaUtilSet> sentTags = create_JavaUtilHashSet_init();
  NetI2pDataI2npGarlicMessage *msg = NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withInt_withNetI2pCryptoSessionKeyManager_(ctx, payload, sentKey, sentTags, NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_TAGS_TO_DELIVER, NetI2pRouterNetworkdbKademliaMessageWrapper_NETDB_LOW_THRESHOLD, skm);
  if (msg == nil) return nil;
  id<NetI2pCryptoTagSetHandle> tsh = nil;
  NetI2pDataPublicKey *sentTo = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(to)) getIdentity])) getPublicKey];
  if (![sentTags isEmpty]) tsh = [skm tagsDeliveredWithNetI2pDataPublicKey:sentTo withNetI2pDataSessionKey:sentKey withJavaUtilSet:sentTags];
  return create_NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage_initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_(msg, skm, sentTo, sentKey, tsh);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterInfo *to) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  NetI2pRouterMessagePayloadGarlicConfig *payload = create_NetI2pRouterMessagePayloadGarlicConfig_init();
  [payload setCertificateWithNetI2pDataCertificate:JreLoadStatic(NetI2pDataCertificate, NULL_CERT)];
  [payload setIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
  [payload setPayloadWithNetI2pDataI2npI2NPMessage:m];
  [payload setRecipientWithNetI2pDataRouterRouterInfo:to];
  [payload setDeliveryInstructionsWithNetI2pDataI2npDeliveryInstructions:JreLoadStatic(NetI2pDataI2npDeliveryInstructions, LOCAL)];
  [payload setExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getMessageExpiration]];
  NetI2pDataSessionKey *sentKey = [((NetI2pCryptoKeyGenerator *) nil_chk([ctx keyGenerator])) generateSessionKey];
  NetI2pDataPublicKey *key = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(to)) getIdentity])) getPublicKey];
  NetI2pDataI2npGarlicMessage *msg = NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, payload, nil, nil, key, sentKey, nil);
  return msg;
}

NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  return NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pCryptoSessionKeyManager_(ctx, [((NetI2pRouterRouterContext *) nil_chk(ctx)) sessionKeyManager]);
}

NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *localDest) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  NetI2pCryptoSessionKeyManager *skm = [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:localDest];
  if (skm == nil) return nil;
  return NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pCryptoSessionKeyManager_(ctx, skm);
}

NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *NetI2pRouterNetworkdbKademliaMessageWrapper_generateSessionWithNetI2pRouterRouterContext_withNetI2pCryptoSessionKeyManager_(NetI2pRouterRouterContext *ctx, NetI2pCryptoSessionKeyManager *skm) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  NetI2pDataSessionKey *key = [((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) keyGenerator])) generateSessionKey];
  NetI2pDataSessionTag *tag = create_NetI2pDataSessionTag_initWithBoolean_(true);
  id<JavaUtilSet> tags = create_NetI2pRouterUtilRemovableSingletonSet_initWithId_(tag);
  [((NetI2pCryptoSessionKeyManager *) nil_chk(skm)) tagsReceivedWithNetI2pDataSessionKey:key withJavaUtilSet:tags withLong:2 * 60 * 1000];
  return create_NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_(key, tag);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *session) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  return NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, m, ((NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *) nil_chk(session))->key_, session->tag_);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataSessionKey *encryptKey, NetI2pDataSessionTag *encryptTag) {
  NetI2pRouterNetworkdbKademliaMessageWrapper_initialize();
  NetI2pRouterMessagePayloadGarlicConfig *payload = create_NetI2pRouterMessagePayloadGarlicConfig_init();
  [payload setCertificateWithNetI2pDataCertificate:JreLoadStatic(NetI2pDataCertificate, NULL_CERT)];
  [payload setIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
  [payload setPayloadWithNetI2pDataI2npI2NPMessage:m];
  [payload setDeliveryInstructionsWithNetI2pDataI2npDeliveryInstructions:JreLoadStatic(NetI2pDataI2npDeliveryInstructions, LOCAL)];
  [payload setExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getMessageExpiration]];
  NetI2pDataI2npGarlicMessage *msg = NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, payload, nil, nil, nil, encryptKey, encryptTag);
  return msg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaMessageWrapper)

@implementation NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage

- (instancetype)initWithNetI2pDataI2npGarlicMessage:(NetI2pDataI2npGarlicMessage *)msg
                  withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm
                            withNetI2pDataPublicKey:(NetI2pDataPublicKey *)sentTo
                           withNetI2pDataSessionKey:(NetI2pDataSessionKey *)sentKey
                       withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)tsh {
  NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage_initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_(self, msg, skm, sentTo, sentKey, tsh);
  return self;
}

- (NetI2pDataI2npGarlicMessage *)getMessage {
  return self->msg_;
}

- (void)acked {
  if (self->tsh_ != nil) {
    [((NetI2pCryptoSessionKeyManager *) nil_chk(self->skm_)) tagsAckedWithNetI2pDataPublicKey:self->sentTo_ withNetI2pDataSessionKey:self->sessionKey_ withNetI2pCryptoTagSetHandle:self->tsh_];
  }
}

- (void)fail {
  if (self->tsh_ != nil) {
    [((NetI2pCryptoSessionKeyManager *) nil_chk(self->skm_)) failTagsWithNetI2pDataPublicKey:self->sentTo_ withNetI2pDataSessionKey:self->sessionKey_ withNetI2pCryptoTagSetHandle:self->tsh_];
  }
}

- (void)dealloc {
  RELEASE_(msg_);
  RELEASE_(skm_);
  RELEASE_(sentTo_);
  RELEASE_(sessionKey_);
  RELEASE_(tsh_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2npGarlicMessage:withNetI2pCryptoSessionKeyManager:withNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pCryptoTagSetHandle:);
  methods[1].selector = @selector(getMessage);
  methods[2].selector = @selector(acked);
  methods[3].selector = @selector(fail);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "msg_", "LNetI2pDataI2npGarlicMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skm_", "LNetI2pCryptoSessionKeyManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sentTo_", "LNetI2pDataPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sessionKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tsh_", "LNetI2pCryptoTagSetHandle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2npGarlicMessage;LNetI2pCryptoSessionKeyManager;LNetI2pDataPublicKey;LNetI2pDataSessionKey;LNetI2pCryptoTagSetHandle;", "LNetI2pRouterNetworkdbKademliaMessageWrapper;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage = { "WrappedMessage", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x8, 4, 5, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage;
}

@end

void NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage_initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *self, NetI2pDataI2npGarlicMessage *msg, NetI2pCryptoSessionKeyManager *skm, NetI2pDataPublicKey *sentTo, NetI2pDataSessionKey *sentKey, id<NetI2pCryptoTagSetHandle> tsh) {
  NSObject_init(self);
  JreStrongAssign(&self->msg_, msg);
  JreStrongAssign(&self->skm_, skm);
  JreStrongAssign(&self->sentTo_, sentTo);
  JreStrongAssign(&self->sessionKey_, sentKey);
  JreStrongAssign(&self->tsh_, tsh);
}

NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *new_NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage_initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_(NetI2pDataI2npGarlicMessage *msg, NetI2pCryptoSessionKeyManager *skm, NetI2pDataPublicKey *sentTo, NetI2pDataSessionKey *sentKey, id<NetI2pCryptoTagSetHandle> tsh) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_, msg, skm, sentTo, sentKey, tsh)
}

NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *create_NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage_initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_(NetI2pDataI2npGarlicMessage *msg, NetI2pCryptoSessionKeyManager *skm, NetI2pDataPublicKey *sentTo, NetI2pDataSessionKey *sentKey, id<NetI2pCryptoTagSetHandle> tsh) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage, initWithNetI2pDataI2npGarlicMessage_withNetI2pCryptoSessionKeyManager_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pCryptoTagSetHandle_, msg, skm, sentTo, sentKey, tsh)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage)

@implementation NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession

- (instancetype)initWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                    withNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag {
  NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_(self, key, tag);
  return self;
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(tag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataSessionKey:withNetI2pDataSessionTag:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tag_", "LNetI2pDataSessionTag;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataSessionKey;LNetI2pDataSessionTag;", "LNetI2pRouterNetworkdbKademliaMessageWrapper;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession = { "OneTimeSession", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x9, 1, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession;
}

@end

void NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_(NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *self, NetI2pDataSessionKey *key, NetI2pDataSessionTag *tag) {
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssign(&self->tag_, tag);
}

NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *new_NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_(NetI2pDataSessionKey *key, NetI2pDataSessionTag *tag) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession, initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_, key, tag)
}

NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession *create_NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession_initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_(NetI2pDataSessionKey *key, NetI2pDataSessionTag *tag) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession, initWithNetI2pDataSessionKey_withNetI2pDataSessionTag_, key, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaMessageWrapper_OneTimeSession)
