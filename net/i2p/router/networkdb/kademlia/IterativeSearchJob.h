//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/IterativeSearchJob.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterNetworkdbKademliaIterativeSearchJob")
#ifdef RESTRICT_NetI2pRouterNetworkdbKademliaIterativeSearchJob
#define INCLUDE_ALL_NetI2pRouterNetworkdbKademliaIterativeSearchJob 0
#else
#define INCLUDE_ALL_NetI2pRouterNetworkdbKademliaIterativeSearchJob 1
#endif
#undef RESTRICT_NetI2pRouterNetworkdbKademliaIterativeSearchJob

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterNetworkdbKademliaIterativeSearchJob_) && (INCLUDE_ALL_NetI2pRouterNetworkdbKademliaIterativeSearchJob || defined(INCLUDE_NetI2pRouterNetworkdbKademliaIterativeSearchJob))
#define NetI2pRouterNetworkdbKademliaIterativeSearchJob_

#define RESTRICT_NetI2pRouterNetworkdbKademliaFloodSearchJob 1
#define INCLUDE_NetI2pRouterNetworkdbKademliaFloodSearchJob 1
#include "net/i2p/router/networkdb/kademlia/FloodSearchJob.h"

@class NetI2pDataHash;
@class NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;
@class NetI2pRouterRouterContext;
@protocol NetI2pRouterJob;

@interface NetI2pRouterNetworkdbKademliaIterativeSearchJob : NetI2pRouterNetworkdbKademliaFloodSearchJob
@property (readonly, copy, class) NSString *PROP_ENCRYPT_RI NS_SWIFT_NAME(PROP_ENCRYPT_RI);
@property (readonly, class) jboolean DEFAULT_ENCRYPT_RI NS_SWIFT_NAME(DEFAULT_ENCRYPT_RI);

+ (NSString *)PROP_ENCRYPT_RI;

+ (jboolean)DEFAULT_ENCRYPT_RI;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                                         withNetI2pDataHash:(NetI2pDataHash *)key
                                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                                                    withInt:(jint)timeoutMs
                                                withBoolean:(jboolean)isLease;

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                                         withNetI2pDataHash:(NetI2pDataHash *)key
                                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                                                    withInt:(jint)timeoutMs
                                                withBoolean:(jboolean)isLease
                                         withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest;

- (void)dropped;

- (NetI2pDataHash *)getFromHash;

- (NSString *)getName;

- (void)runJob;

- (jboolean)wasQueriedWithNetI2pDataHash:(NetI2pDataHash *)peer;

#pragma mark Package-Private

- (void)failed;

- (void)failedWithNetI2pDataHash:(NetI2pDataHash *)peer
                     withBoolean:(jboolean)timedOut;

- (void)newPeerToTryWithNetI2pDataHash:(NetI2pDataHash *)peer OBJC_METHOD_FAMILY_NONE;

- (void)success;

- (jlong)timeSentWithNetI2pDataHash:(NetI2pDataHash *)peer;

@end

J2OBJC_STATIC_INIT(NetI2pRouterNetworkdbKademliaIterativeSearchJob)

inline NSString *NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_PROP_ENCRYPT_RI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterNetworkdbKademliaIterativeSearchJob_PROP_ENCRYPT_RI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, PROP_ENCRYPT_RI, NSString *)

inline jboolean NetI2pRouterNetworkdbKademliaIterativeSearchJob_get_DEFAULT_ENCRYPT_RI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean NetI2pRouterNetworkdbKademliaIterativeSearchJob_DEFAULT_ENCRYPT_RI;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterNetworkdbKademliaIterativeSearchJob, DEFAULT_ENCRYPT_RI, jboolean)

FOUNDATION_EXPORT void NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease);

FOUNDATION_EXPORT NetI2pRouterNetworkdbKademliaIterativeSearchJob *new_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterNetworkdbKademliaIterativeSearchJob *create_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease);

FOUNDATION_EXPORT void NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaIterativeSearchJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest);

FOUNDATION_EXPORT NetI2pRouterNetworkdbKademliaIterativeSearchJob *new_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterNetworkdbKademliaIterativeSearchJob *create_NetI2pRouterNetworkdbKademliaIterativeSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withInt_withBoolean_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFailed, jint timeoutMs, jboolean isLease, NetI2pDataHash *fromLocalDest);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaIterativeSearchJob)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterNetworkdbKademliaIterativeSearchJob")
