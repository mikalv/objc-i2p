//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodThrottler.java
//

#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/networkdb/kademlia/FloodThrottler.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterNetworkdbKademliaFloodThrottler () {
 @public
  NetI2pUtilObjectCounter *counter_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodThrottler, counter_, NetI2pUtilObjectCounter *)

inline jint NetI2pRouterNetworkdbKademliaFloodThrottler_get_MAX_FLOODS(void);
#define NetI2pRouterNetworkdbKademliaFloodThrottler_MAX_FLOODS 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodThrottler, MAX_FLOODS, jint)

inline jlong NetI2pRouterNetworkdbKademliaFloodThrottler_get_CLEAN_TIME(void);
#define NetI2pRouterNetworkdbKademliaFloodThrottler_CLEAN_TIME 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodThrottler, CLEAN_TIME, jlong)

@interface NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterNetworkdbKademliaFloodThrottler *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodThrottler:(NetI2pRouterNetworkdbKademliaFloodThrottler *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *self, NetI2pRouterNetworkdbKademliaFloodThrottler *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *new_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *create_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner)

@implementation NetI2pRouterNetworkdbKademliaFloodThrottler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterNetworkdbKademliaFloodThrottler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)shouldThrottleWithNetI2pDataHash:(NetI2pDataHash *)h {
  return [((NetI2pUtilObjectCounter *) nil_chk(self->counter_)) incrementWithId:h] > NetI2pRouterNetworkdbKademliaFloodThrottler_MAX_FLOODS;
}

- (void)dealloc {
  RELEASE_(counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(shouldThrottleWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "MAX_FLOODS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodThrottler_MAX_FLOODS, 0x1a, -1, -1, -1, -1 },
    { "CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodThrottler_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "shouldThrottle", "LNetI2pDataHash;", "Lnet/i2p/util/ObjectCounter<Lnet/i2p/data/Hash;>;", "LNetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodThrottler = { "FloodThrottler", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 2, 3, -1, 3, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodThrottler;
}

@end

void NetI2pRouterNetworkdbKademliaFloodThrottler_init(NetI2pRouterNetworkdbKademliaFloodThrottler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->counter_, new_NetI2pUtilObjectCounter_init());
  [((NetI2pUtilSimpleTimer2 *) nil_chk(NetI2pUtilSimpleTimer2_getInstance())) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(self) withLong:NetI2pRouterNetworkdbKademliaFloodThrottler_CLEAN_TIME];
}

NetI2pRouterNetworkdbKademliaFloodThrottler *new_NetI2pRouterNetworkdbKademliaFloodThrottler_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodThrottler, init)
}

NetI2pRouterNetworkdbKademliaFloodThrottler *create_NetI2pRouterNetworkdbKademliaFloodThrottler_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodThrottler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodThrottler)

@implementation NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodThrottler:(NetI2pRouterNetworkdbKademliaFloodThrottler *)outer$ {
  NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(self, outer$);
  return self;
}

- (void)timeReached {
  [((NetI2pUtilObjectCounter *) nil_chk(this$0_->counter_)) clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodThrottler:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodThrottler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterNetworkdbKademliaFloodThrottler;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner = { "Cleaner", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner;
}

@end

void NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *self, NetI2pRouterNetworkdbKademliaFloodThrottler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *new_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner, initWithNetI2pRouterNetworkdbKademliaFloodThrottler_, outer$)
}

NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner *create_NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner_initWithNetI2pRouterNetworkdbKademliaFloodThrottler_(NetI2pRouterNetworkdbKademliaFloodThrottler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner, initWithNetI2pRouterNetworkdbKademliaFloodThrottler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodThrottler_Cleaner)
