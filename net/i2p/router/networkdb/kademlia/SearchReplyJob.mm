//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/SearchReplyJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchReplyJob.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaSearchReplyJob () {
 @public
  NetI2pDataI2npDatabaseSearchReplyMessage *_msg_;
  NetI2pUtilLog *_log_;
  NetI2pDataHash *_peer_;
  jint _curIndex_;
  jint _invalidPeers_;
  jint _seenPeers_;
  jint _newPeers_;
  jint _duplicatePeers_;
  jint _repliesPendingVerification_;
  jlong _duration_;
  NetI2pRouterNetworkdbKademliaSearchJob *_searchJob_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchReplyJob, _msg_, NetI2pDataI2npDatabaseSearchReplyMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchReplyJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchReplyJob, _peer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchReplyJob, _searchJob_, NetI2pRouterNetworkdbKademliaSearchJob *)

@implementation NetI2pRouterNetworkdbKademliaSearchReplyJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
       withNetI2pRouterNetworkdbKademliaSearchJob:(NetI2pRouterNetworkdbKademliaSearchJob *)job
     withNetI2pDataI2npDatabaseSearchReplyMessage:(NetI2pDataI2npDatabaseSearchReplyMessage *)message
                               withNetI2pDataHash:(NetI2pDataHash *)peer
                                         withLong:(jlong)duration {
  NetI2pRouterNetworkdbKademliaSearchReplyJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_(self, enclosingContext, job, message, peer, duration);
  return self;
}

- (NSString *)getName {
  return @"Process Reply for Kademlia Search";
}

- (void)runJob {
  if (_curIndex_ >= [((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(_msg_)) getNumReplies]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG] && [((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(_msg_)) getNumReplies] == 0) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("J$", [self getJobId], @": dbSearchReply received with no routers referenced")];
    if (_repliesPendingVerification_ > 0) {
      [self requeueWithLong:[((NetI2pRouterNetworkdbKademliaSearchJob *) nil_chk(_searchJob_)) timeoutMs]];
    }
    else {
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupReplyWithNetI2pDataHash:_peer_ withInt:_newPeers_ withInt:_seenPeers_ withInt:_invalidPeers_ withInt:_duplicatePeers_ withLong:_duration_];
      if (_newPeers_ > 0) [((NetI2pRouterNetworkdbKademliaSearchJob *) nil_chk(_searchJob_)) newPeersFoundWithInt:_newPeers_];
    }
  }
  else {
    NetI2pDataHash *peer = [((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(_msg_)) getReplyWithInt:_curIndex_];
    jboolean shouldAdd = false;
    NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
    if (info == nil) {
      jboolean sendsBadInfo = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileOrganizer])) peerSendsBadRepliesWithNetI2pDataHash:_peer_];
      if (!sendsBadInfo) {
        if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) isBanlistedWithNetI2pDataHash:peer]) {
        }
        else {
          shouldAdd = true;
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$$$$", @"Peer ", [((NetI2pDataHash *) nil_chk(_peer_)) toBase64], @" sends us bad replies, so not verifying ", [((NetI2pDataHash *) nil_chk(peer)) toBase64])];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.searchReplyValidationSkipped" withLong:1];
      }
    }
    if ([((NetI2pRouterNetworkdbKademliaSearchJob *) nil_chk(_searchJob_)) wasAttemptedWithNetI2pDataHash:peer]) {
      _duplicatePeers_++;
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("J$@$Z", [self getJobId], @": dbSearchReply received on search referencing router ", peer, @" already known? ", (info != nil))];
    if (shouldAdd) {
      if ([((NetI2pRouterNetworkdbKademliaSearchJob *) nil_chk(_searchJob_)) addWithNetI2pDataHash:peer]) _newPeers_++;
      else _seenPeers_++;
    }
    _curIndex_++;
    [self requeueWithLong:0];
  }
}

- (void)replyVerified {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$$", @"Peer reply from ", [((NetI2pDataHash *) nil_chk(_peer_)) toBase64])];
  _repliesPendingVerification_--;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.searchReplyValidated" withLong:1];
}

- (void)replyNotVerified {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$$", @"Peer reply from ", [((NetI2pDataHash *) nil_chk(_peer_)) toBase64])];
  _repliesPendingVerification_--;
  _invalidPeers_++;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.searchReplyNotValidated" withLong:1];
}

- (void)dealloc {
  RELEASE_(_msg_);
  RELEASE_(_log_);
  RELEASE_(_peer_);
  RELEASE_(_searchJob_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaSearchJob:withNetI2pDataI2npDatabaseSearchReplyMessage:withNetI2pDataHash:withLong:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(replyVerified);
  methods[4].selector = @selector(replyNotVerified);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_msg_", "LNetI2pDataI2npDatabaseSearchReplyMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_curIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_invalidPeers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_seenPeers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_newPeers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_duplicatePeers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_repliesPendingVerification_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_duration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_searchJob_", "LNetI2pRouterNetworkdbKademliaSearchJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaSearchJob;LNetI2pDataI2npDatabaseSearchReplyMessage;LNetI2pDataHash;J" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchReplyJob = { "SearchReplyJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 11, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchReplyJob;
}

@end

void NetI2pRouterNetworkdbKademliaSearchReplyJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_(NetI2pRouterNetworkdbKademliaSearchReplyJob *self, NetI2pRouterRouterContext *enclosingContext, NetI2pRouterNetworkdbKademliaSearchJob *job, NetI2pDataI2npDatabaseSearchReplyMessage *message, NetI2pDataHash *peer, jlong duration) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(enclosingContext)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_searchJob_, job);
  JreStrongAssign(&self->_msg_, message);
  JreStrongAssign(&self->_peer_, peer);
  self->_curIndex_ = 0;
  self->_invalidPeers_ = 0;
  self->_seenPeers_ = 0;
  self->_newPeers_ = 0;
  self->_duplicatePeers_ = 0;
  self->_repliesPendingVerification_ = 0;
  if (duration > 0) self->_duration_ = duration;
  else self->_duration_ = 0;
}

NetI2pRouterNetworkdbKademliaSearchReplyJob *new_NetI2pRouterNetworkdbKademliaSearchReplyJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_(NetI2pRouterRouterContext *enclosingContext, NetI2pRouterNetworkdbKademliaSearchJob *job, NetI2pDataI2npDatabaseSearchReplyMessage *message, NetI2pDataHash *peer, jlong duration) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchReplyJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_, enclosingContext, job, message, peer, duration)
}

NetI2pRouterNetworkdbKademliaSearchReplyJob *create_NetI2pRouterNetworkdbKademliaSearchReplyJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_(NetI2pRouterRouterContext *enclosingContext, NetI2pRouterNetworkdbKademliaSearchJob *job, NetI2pDataI2npDatabaseSearchReplyMessage *message, NetI2pDataHash *peer, jlong duration) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchReplyJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_, enclosingContext, job, message, peer, duration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchReplyJob)
