//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/SingleLookupJob.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/SingleLookupJob.h"
#include "net/i2p/router/networkdb/kademlia/SingleSearchJob.h"
#include "net/i2p/util/Clock.h"

@interface NetI2pRouterNetworkdbKademliaSingleLookupJob () {
 @public
  NetI2pDataI2npDatabaseSearchReplyMessage *_dsrm_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSingleLookupJob, _dsrm_, NetI2pDataI2npDatabaseSearchReplyMessage *)

@implementation NetI2pRouterNetworkdbKademliaSingleLookupJob

+ (jint)MAX_TO_FOLLOW {
  return NetI2pRouterNetworkdbKademliaSingleLookupJob_MAX_TO_FOLLOW;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
     withNetI2pDataI2npDatabaseSearchReplyMessage:(NetI2pDataI2npDatabaseSearchReplyMessage *)dsrm {
  NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_(self, ctx, dsrm);
  return self;
}

- (void)runJob {
  NetI2pDataHash *from = [((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(_dsrm_)) getFromHash];
  jint limit = JavaLangMath_minWithInt_withInt_([_dsrm_ getNumReplies], NetI2pRouterNetworkdbKademliaSingleLookupJob_MAX_TO_FOLLOW);
  for (jint i = 0; i < limit; i++) {
    NetI2pDataHash *peer = [_dsrm_ getReplyWithInt:i];
    if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]]) continue;
    if ([peer isEqual:from]) continue;
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
    if (ri == nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSingleSearchJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataHash_([self getContext], peer, from)];
    else if ([ri getPublished] < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - 60 * 60 * 1000 || !NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(ri)) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSingleSearchJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataHash_([self getContext], peer, peer)];
  }
}

- (NSString *)getName {
  return @"NetDb process DSRM";
}

- (void)dealloc {
  RELEASE_(_dsrm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npDatabaseSearchReplyMessage:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_dsrm_", "LNetI2pDataI2npDatabaseSearchReplyMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_TO_FOLLOW", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSingleLookupJob_MAX_TO_FOLLOW, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npDatabaseSearchReplyMessage;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSingleLookupJob = { "SingleLookupJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSingleLookupJob;
}

@end

void NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_(NetI2pRouterNetworkdbKademliaSingleLookupJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_dsrm_, dsrm);
}

NetI2pRouterNetworkdbKademliaSingleLookupJob *new_NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSingleLookupJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_, ctx, dsrm)
}

NetI2pRouterNetworkdbKademliaSingleLookupJob *create_NetI2pRouterNetworkdbKademliaSingleLookupJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseSearchReplyMessage *dsrm) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSingleLookupJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseSearchReplyMessage_, ctx, dsrm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSingleLookupJob)
