//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodfillStoreJob.java
//

#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillStoreJob.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillVerifyStoreJob.h"
#include "net/i2p/router/networkdb/kademlia/StoreJob.h"
#include "net/i2p/router/networkdb/kademlia/StoreState.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterNetworkdbKademliaFloodfillStoreJob () {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *_facade_FloodfillStoreJob_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, _facade_FloodfillStoreJob_, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)

inline NSString *NetI2pRouterNetworkdbKademliaFloodfillStoreJob_get_PROP_RI_VERIFY(void);
static NSString *NetI2pRouterNetworkdbKademliaFloodfillStoreJob_PROP_RI_VERIFY = @"router.verifyRouterInfoStore";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, PROP_RI_VERIFY, NSString *)

@implementation NetI2pRouterNetworkdbKademliaFloodfillStoreJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                                         withLong:(jlong)timeoutMs {
  NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                                         withLong:(jlong)timeoutMs
                                  withJavaUtilSet:(id<JavaUtilSet>)toSkip {
  NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip);
  return self;
}

- (jint)getParallelization {
  return 1;
}

- (jint)getRedundancy {
  return 1;
}

- (void)succeed {
  [super succeed];
  if ([((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(_facade_FloodfillStoreJob_)) isVerifyInProgressWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(_state_)) getTarget]]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Skipping verify, one already in progress for: ", [_state_ getTarget])];
    return;
  }
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) gracefulShutdownInProgress]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Skipping verify, shutdown in progress for: ", [_state_ getTarget])];
    return;
  }
  NetI2pDataDatabaseEntry *data = [_state_ getData];
  jboolean isRouterInfo = [((NetI2pDataDatabaseEntry *) nil_chk(data)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO;
  if (isRouterInfo && ![((NetI2pRouterRouterContext *) nil_chk([self getContext])) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbKademliaFloodfillStoreJob_PROP_RI_VERIFY]) {
    [_facade_FloodfillStoreJob_ routerInfoPublishSuccessful];
    return;
  }
  jlong published = [data getDate];
  NetI2pDataHash *sentTo = nil;
  @try {
    sentTo = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([_state_ getSuccessful])) iterator])) next];
  }
  @catch (JavaUtilNoSuchElementException *nsee) {
  }
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaFloodfillVerifyStoreJob_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withLong_withBoolean_withNetI2pDataHash_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_([self getContext], [_state_ getTarget], published, isRouterInfo, sentTo, _facade_FloodfillStoreJob_)];
}

- (NSString *)getName {
  return @"Floodfill netDb store";
}

- (void)dealloc {
  RELEASE_(_facade_FloodfillStoreJob_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withJavaUtilSet:);
  methods[2].selector = @selector(getParallelization);
  methods[3].selector = @selector(getRedundancy);
  methods[4].selector = @selector(succeed);
  methods[5].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_facade_FloodfillStoreJob_", "LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, 3, -1, -1, -1 },
    { "PROP_RI_VERIFY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;J", "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;JLJavaUtilSet;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade;Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;Lnet/i2p/router/Job;Lnet/i2p/router/Job;JLjava/util/Set<Lnet/i2p/data/Hash;>;)V", "_facade", &NetI2pRouterNetworkdbKademliaFloodfillStoreJob_PROP_RI_VERIFY };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillStoreJob = { "FloodfillStoreJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 6, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillStoreJob;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(NetI2pRouterNetworkdbKademliaFloodfillStoreJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs) {
  NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs, nil);
}

NetI2pRouterNetworkdbKademliaFloodfillStoreJob *new_NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_, context, facade, key, data, onSuccess, onFailure, timeoutMs)
}

NetI2pRouterNetworkdbKademliaFloodfillStoreJob *create_NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_, context, facade, key, data, onSuccess, onFailure, timeoutMs)
}

void NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaFloodfillStoreJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, id<JavaUtilSet> toSkip) {
  NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip);
  JreStrongAssign(&self->_facade_FloodfillStoreJob_, facade);
}

NetI2pRouterNetworkdbKademliaFloodfillStoreJob *new_NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, id<JavaUtilSet> toSkip) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_, context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip)
}

NetI2pRouterNetworkdbKademliaFloodfillStoreJob *create_NetI2pRouterNetworkdbKademliaFloodfillStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, id<JavaUtilSet> toSkip) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillStoreJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_, context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillStoreJob)
