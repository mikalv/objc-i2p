//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/SearchJob.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/message/SendMessageDirectJob.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchMessageSelector.h"
#include "net/i2p/router/networkdb/kademlia/SearchReplyJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchState.h"
#include "net/i2p/router/networkdb/kademlia/SearchUpdateReplyFoundJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaSearchJob () {
 @public
  NetI2pRouterNetworkdbKademliaSearchState *_state_;
  id<NetI2pRouterJob> _onSuccess_;
  id<NetI2pRouterJob> _onFailure_;
  jlong _expiration_;
  jlong _timeoutMs_;
  jboolean _keepStats_;
  jboolean _isLease_;
  id<NetI2pRouterJob> _pendingRequeueJob_;
  NetI2pRouterNetworkdbKademliaPeerSelector *_peerSelector_;
  id<JavaUtilList> _deferredSearches_;
  jboolean _deferredCleared_;
  jlong _startedOn_;
  jboolean _floodfillPeersExhausted_;
  jint _floodfillSearchesOutstanding_;
}

- (jboolean)isLocal;

- (jboolean)isExpired;

- (void)requeuePending;

- (void)requeuePendingWithLong:(jlong)ms;

- (id<JavaUtilList>)getClosestRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                withInt:(jint)numClosest
                                        withJavaUtilSet:(id<JavaUtilSet>)alreadyChecked;

- (void)succeed;

- (void)resend;

- (jboolean)resendWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)toPeer
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls;

- (void)handleDeferredWithBoolean:(jboolean)success;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _state_, NetI2pRouterNetworkdbKademliaSearchState *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _onSuccess_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _onFailure_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _pendingRequeueJob_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _peerSelector_, NetI2pRouterNetworkdbKademliaPeerSelector *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob, _deferredSearches_, id<JavaUtilList>)

inline jint NetI2pRouterNetworkdbKademliaSearchJob_get_SEARCH_BREDTH(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_SEARCH_BREDTH 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, SEARCH_BREDTH, jint)

inline jint NetI2pRouterNetworkdbKademliaSearchJob_get_PER_PEER_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_PER_PEER_TIMEOUT 5000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, PER_PEER_TIMEOUT, jint)

inline jlong NetI2pRouterNetworkdbKademliaSearchJob_get_RESEND_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_RESEND_TIMEOUT 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, RESEND_TIMEOUT, jlong)

inline jlong NetI2pRouterNetworkdbKademliaSearchJob_get_REQUEUE_DELAY(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_REQUEUE_DELAY 1000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, REQUEUE_DELAY, jlong)

inline jboolean NetI2pRouterNetworkdbKademliaSearchJob_get_DEFAULT_FLOODFILL_ONLY(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_DEFAULT_FLOODFILL_ONLY true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, DEFAULT_FLOODFILL_ONLY, jboolean)

inline jint NetI2pRouterNetworkdbKademliaSearchJob_get_MAX_PEERS_QUERIED(void);
inline jint NetI2pRouterNetworkdbKademliaSearchJob_set_MAX_PEERS_QUERIED(jint value);
inline jint *NetI2pRouterNetworkdbKademliaSearchJob_getRef_MAX_PEERS_QUERIED(void);
static jint NetI2pRouterNetworkdbKademliaSearchJob_MAX_PEERS_QUERIED = 40;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pRouterNetworkdbKademliaSearchJob, MAX_PEERS_QUERIED, jint)

inline jint NetI2pRouterNetworkdbKademliaSearchJob_get_MAX_LEASE_RESEND(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_MAX_LEASE_RESEND 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, MAX_LEASE_RESEND, jint)

inline jboolean NetI2pRouterNetworkdbKademliaSearchJob_get_SHOULD_RESEND_ROUTERINFO(void);
#define NetI2pRouterNetworkdbKademliaSearchJob_SHOULD_RESEND_ROUTERINFO false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaSearchJob, SHOULD_RESEND_ROUTERINFO, jboolean)

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaSearchJob_isLocal(NetI2pRouterNetworkdbKademliaSearchJob *self);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaSearchJob_isExpired(NetI2pRouterNetworkdbKademliaSearchJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_requeuePending(NetI2pRouterNetworkdbKademliaSearchJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_requeuePendingWithLong_(NetI2pRouterNetworkdbKademliaSearchJob *self, jlong ms);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterNetworkdbKademliaSearchJob_getClosestRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaSearchJob *self, NetI2pDataHash *key, jint numClosest, id<JavaUtilSet> alreadyChecked);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_succeed(NetI2pRouterNetworkdbKademliaSearchJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_resend(NetI2pRouterNetworkdbKademliaSearchJob *self);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaSearchJob_resendWithNetI2pDataRouterRouterInfo_withNetI2pDataLeaseSet_(NetI2pRouterNetworkdbKademliaSearchJob *self, NetI2pDataRouterRouterInfo *toPeer, NetI2pDataLeaseSet *ls);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_handleDeferredWithBoolean_(NetI2pRouterNetworkdbKademliaSearchJob *self, jboolean success);

@interface NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaSearchJob *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaSearchJob:(NetI2pRouterNetworkdbKademliaSearchJob *)outer$
                                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *self, NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *new_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *create_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending)

@interface NetI2pRouterNetworkdbKademliaSearchJob_FailedJob () {
 @public
  NetI2pRouterNetworkdbKademliaSearchJob *this$0_;
  NetI2pDataHash *_peer_;
  jboolean _isFloodfill_;
  jboolean _penalizePeer_;
  jlong _sentOn_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob, _peer_, NetI2pDataHash *)

@interface NetI2pRouterNetworkdbKademliaSearchJob_Search : NSObject {
 @public
  id<NetI2pRouterJob> _onFind_;
  id<NetI2pRouterJob> _onFail_;
  jlong _expiration_;
  jboolean _isLease_;
}

- (instancetype)initWithNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                    withNetI2pRouterJob:(id<NetI2pRouterJob>)onFail
                               withLong:(jlong)expiration
                            withBoolean:(jboolean)isLease;

- (id<NetI2pRouterJob>)getOnFind;

- (id<NetI2pRouterJob>)getOnFail;

- (jlong)getExpiration;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaSearchJob_Search)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob_Search, _onFind_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchJob_Search, _onFail_, id<NetI2pRouterJob>)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob_Search *self, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaSearchJob_Search *new_NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaSearchJob_Search *create_NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaSearchJob_Search)

@implementation NetI2pRouterNetworkdbKademliaSearchJob

+ (jint)MAX_CLOSEST {
  return NetI2pRouterNetworkdbKademliaSearchJob_MAX_CLOSEST;
}

+ (jint)PER_FLOODFILL_PEER_TIMEOUT {
  return NetI2pRouterNetworkdbKademliaSearchJob_PER_FLOODFILL_PEER_TIMEOUT;
}

+ (jlong)MIN_TIMEOUT {
  return NetI2pRouterNetworkdbKademliaSearchJob_MIN_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                                         withLong:(jlong)timeoutMs
                                      withBoolean:(jboolean)keepStats
                                      withBoolean:(jboolean)isLease {
  NetI2pRouterNetworkdbKademliaSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_(self, context, facade, key, onSuccess, onFailure, timeoutMs, keepStats, isLease);
  return self;
}

- (void)runJob {
  if (_startedOn_ <= 0) _startedOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Searching for ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget])];
  [self searchNext];
}

- (NetI2pRouterNetworkdbKademliaSearchState *)getState {
  return _state_;
}

- (NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)getFacade {
  return _facade_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jlong)getTimeoutMs {
  return _timeoutMs_;
}

+ (jboolean)onlyQueryFloodfillPeersWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterNetworkdbKademliaSearchJob_onlyQueryFloodfillPeersWithNetI2pRouterRouterContext_(ctx);
}

- (jint)getPerPeerTimeoutMsWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jint timeout = 0;
  if (_floodfillPeersExhausted_ && _floodfillSearchesOutstanding_ <= 0) timeout = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) getPeerTimeoutWithNetI2pDataHash:peer];
  else timeout = NetI2pRouterNetworkdbKademliaSearchJob_PER_FLOODFILL_PEER_TIMEOUT;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if (now + timeout > _expiration_) return (jint) JavaLangMath_maxWithLong_withLong_(_expiration_ - now, NetI2pRouterNetworkdbKademliaSearchJob_MIN_TIMEOUT);
  else return timeout;
}

- (jint)getPerPeerTimeoutMs {
  if (_floodfillPeersExhausted_ && _floodfillSearchesOutstanding_ <= 0) return NetI2pRouterNetworkdbKademliaSearchJob_PER_PEER_TIMEOUT;
  else return NetI2pRouterNetworkdbKademliaSearchJob_PER_FLOODFILL_PEER_TIMEOUT;
}

- (void)searchNext {
  if ([((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) completed]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$", [self getJobId], @": Already completed")];
    return;
  }
  if ([_state_ isAborted]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": Search aborted")];
    [_state_ complete];
    [self fail];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Searching: ", _state_)];
  if (NetI2pRouterNetworkdbKademliaSearchJob_isLocal(self)) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": Key found locally")];
    [_state_ complete];
    NetI2pRouterNetworkdbKademliaSearchJob_succeed(self);
  }
  else if (NetI2pRouterNetworkdbKademliaSearchJob_isExpired(self)) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": Key search expired")];
    [_state_ complete];
    [self fail];
  }
  else if ([((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size] > NetI2pRouterNetworkdbKademliaSearchJob_MAX_PEERS_QUERIED) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": Too many peers quried")];
    [_state_ complete];
    [self fail];
  }
  else {
    [self continueSearch];
  }
}

- (jboolean)isLocal {
  return NetI2pRouterNetworkdbKademliaSearchJob_isLocal(self);
}

- (jboolean)isExpired {
  return NetI2pRouterNetworkdbKademliaSearchJob_isExpired(self);
}

- (jint)getBredth {
  return NetI2pRouterNetworkdbKademliaSearchJob_SEARCH_BREDTH;
}

- (void)continueSearch {
  if ([((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) completed]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$", [self getJobId], @": Search already completed") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"already completed")];
    return;
  }
  jint toCheck = [self getBredth] - [((id<JavaUtilSet>) nil_chk([_state_ getPending])) size];
  if (toCheck <= 0) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$I$IC", [self getJobId], @": Too many searches already pending (pending: ", [((id<JavaUtilSet>) nil_chk([_state_ getPending])) size], @" max: ", [self getBredth], ')')];
    NetI2pRouterNetworkdbKademliaSearchJob_requeuePending(self);
    return;
  }
  jint sent = 0;
  id<JavaUtilSet> attempted = [_state_ getAttempted];
  while (sent <= 0) {
    jboolean onlyFloodfill = true;
    if (_floodfillPeersExhausted_ && onlyFloodfill && [((id<JavaUtilSet>) nil_chk([_state_ getPending])) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("J$I$I", [self getJobId], @": no non-floodfill peers left, and no more pending.  Searched: ", [((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size], @" failed: ", [((id<JavaUtilSet>) nil_chk([_state_ getFailed])) size])];
      [self fail];
      return;
    }
    id<JavaUtilList> closestHashes = NetI2pRouterNetworkdbKademliaSearchJob_getClosestRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(self, [_state_ getTarget], toCheck, attempted);
    if ((closestHashes == nil) || ([((id<JavaUtilList>) nil_chk(closestHashes)) isEmpty])) {
      if ([((id<JavaUtilSet>) nil_chk([_state_ getPending])) isEmpty]) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$I$I", [self getJobId], @": No peers left, and none pending!  Already searched: ", [((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size], @" failed: ", [((id<JavaUtilSet>) nil_chk([_state_ getFailed])) size])];
        [self fail];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$I$I$I", [self getJobId], @": No peers left, but some are pending!  Pending: ", [((id<JavaUtilSet>) nil_chk([_state_ getPending])) size], @" attempted: ", [((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size], @" failed: ", [((id<JavaUtilSet>) nil_chk([_state_ getFailed])) size])];
        NetI2pRouterNetworkdbKademliaSearchJob_requeuePending(self);
      }
      return;
    }
    else {
      [((id<JavaUtilSet>) nil_chk(attempted)) addAllWithJavaUtilCollection:closestHashes];
      for (NetI2pDataHash * __strong peer in nil_chk(closestHashes)) {
        NetI2pDataDatabaseEntry *ds = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) getDataStore])) getWithNetI2pDataHash:peer];
        if (ds == nil) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"Next closest peer ", peer, @" was only recently referred to us, sending a search for them")];
          [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoWithNetI2pDataHash:peer withNetI2pRouterJob:nil withNetI2pRouterJob:nil withLong:_timeoutMs_];
        }
        else if (!([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO)) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("J$@$$", [self getJobId], @": Error selecting closest hash that wasnt a router! ", peer, @" : ", [[ds java_getClass] getName])];
          [_state_ replyTimeoutWithNetI2pDataHash:peer];
        }
        else {
          NetI2pDataRouterRouterInfo *ri = (NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class]);
          if (!NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(ri)) {
            _floodfillPeersExhausted_ = true;
            if (onlyFloodfill) continue;
          }
          if ([ri isHidden]) {
          }
          else {
            [_state_ addPendingWithNetI2pDataHash:peer];
            [self sendSearchWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class])];
            sent++;
          }
        }
      }
    }
  }
}

- (void)requeuePending {
  NetI2pRouterNetworkdbKademliaSearchJob_requeuePending(self);
}

- (void)requeuePendingWithLong:(jlong)ms {
  NetI2pRouterNetworkdbKademliaSearchJob_requeuePendingWithLong_(self, ms);
}

- (id<JavaUtilList>)getClosestRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                withInt:(jint)numClosest
                                        withJavaUtilSet:(id<JavaUtilSet>)alreadyChecked {
  return NetI2pRouterNetworkdbKademliaSearchJob_getClosestRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(self, key, numClosest, alreadyChecked);
}

- (void)sendSearchWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)router {
  if ([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(router)) getIdentity])) isEqual:[((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo])) getIdentity]]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("J$", [self getJobId], @": Dont send search to ourselves - why did we try?")];
    return;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@$@$I", [self getJobId], @": Send search to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) getHash], @" for ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget], @" w/ timeout ", [self getPerPeerTimeoutMsWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) calculateHash]])];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.searchMessageCount" withLong:1];
  if (_isLease_ || ![((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) isEstablishedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) calculateHash]]) [self sendLeaseSearchWithNetI2pDataRouterRouterInfo:router];
  else [self sendRouterSearchWithNetI2pDataRouterRouterInfo:router];
}

- (void)sendLeaseSearchWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)router {
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(router)) getIdentity])) getHash];
  id<NetI2pRouterTunnelInfo> inTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundExploratoryTunnelWithNetI2pDataHash:to];
  if (inTunnel == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"No tunnels to get search replies through!"];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router)];
    return;
  }
  NetI2pDataTunnelId *inTunnelId = [inTunnel getReceiveTunnelIdWithInt:0];
  jint timeout = [self getPerPeerTimeoutMsWithNetI2pDataHash:to];
  jlong expiration = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + timeout;
  id<NetI2pDataI2npI2NPMessage> msg = [self buildMessageWithNetI2pDataTunnelId:inTunnelId withNetI2pDataHash:[inTunnel getPeerWithInt:0] withLong:expiration withNetI2pDataRouterRouterInfo:router];
  if (msg == nil) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router)];
    return;
  }
  id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundExploratoryTunnelWithNetI2pDataHash:to];
  if (outTunnel == nil) {
    [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"No tunnels to send search out through! Impossible?"];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router)];
    return;
  }
  NetI2pDataTunnelId *outTunnelId = [outTunnel getSendTunnelIdWithInt:0];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@$@$@$@", [self getJobId], @": Sending search to ", to, @" for ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk([self getState])) getTarget], @" w/ replies through ", [inTunnel getPeerWithInt:0], @" via tunnel ", inTunnelId)];
  NetI2pRouterNetworkdbKademliaSearchMessageSelector *sel = create_NetI2pRouterNetworkdbKademliaSearchMessageSelector_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_withNetI2pRouterNetworkdbKademliaSearchState_([self getContext], router, _expiration_, _state_);
  NetI2pRouterNetworkdbKademliaSearchUpdateReplyFoundJob *reply = create_NetI2pRouterNetworkdbKademliaSearchUpdateReplyFoundJob_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterNetworkdbKademliaSearchState_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_([self getContext], router, _state_, _facade_, self, outTunnel, inTunnel);
  if (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(router)) _floodfillSearchesOutstanding_++;
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:sel withNetI2pRouterReplyJob:reply withNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router)];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:outTunnelId withNetI2pDataHash:to];
}

- (void)sendRouterSearchWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)router {
  jint timeout = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) getPeerTimeoutWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(router)) getIdentity])) getHash]];
  jlong expiration = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + timeout;
  id<NetI2pDataI2npI2NPMessage> msg = [self buildMessageWithNetI2pDataTunnelId:nil withNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) getHash] withLong:expiration withNetI2pDataRouterRouterInfo:router];
  if (msg == nil) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router)];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@$@", [self getJobId], @": Sending router search directly to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) getHash], @" for ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget])];
  NetI2pRouterNetworkdbKademliaSearchMessageSelector *sel = create_NetI2pRouterNetworkdbKademliaSearchMessageSelector_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_withNetI2pRouterNetworkdbKademliaSearchState_([self getContext], router, _expiration_, _state_);
  NetI2pRouterNetworkdbKademliaSearchUpdateReplyFoundJob *reply = create_NetI2pRouterNetworkdbKademliaSearchUpdateReplyFoundJob_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterNetworkdbKademliaSearchState_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pRouterNetworkdbKademliaSearchJob_([self getContext], router, _state_, _facade_, self);
  NetI2pRouterMessageSendMessageDirectJob *j = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_([self getContext], msg, [((NetI2pDataRouterRouterIdentity *) nil_chk([router getIdentity])) getHash], reply, create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], router), sel, timeout, NetI2pRouterOutNetMessage_PRIORITY_EXPLORATORY);
  if (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(router)) _floodfillSearchesOutstanding_++;
  [j runJob];
}

- (id<NetI2pDataI2npI2NPMessage>)buildMessageWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnelId
                                                 withNetI2pDataHash:(NetI2pDataHash *)replyGateway
                                                           withLong:(jlong)expiration
                                     withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"see ExploreJob");
}

- (void)replyFoundWithNetI2pDataI2npDatabaseSearchReplyMessage:(NetI2pDataI2npDatabaseSearchReplyMessage *)message
                                            withNetI2pDataHash:(NetI2pDataHash *)peer {
  jlong duration = [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) replyFoundWithNetI2pDataHash:peer];
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaSearchReplyJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pDataI2npDatabaseSearchReplyMessage_withNetI2pDataHash_withLong_([self getContext], self, message, peer, duration)];
}

- (void)newPeersFoundWithInt:(jint)numNewPeers {
}

- (void)succeed {
  NetI2pRouterNetworkdbKademliaSearchJob_succeed(self);
}

- (void)resend {
  NetI2pRouterNetworkdbKademliaSearchJob_resend(self);
}

- (jboolean)resendWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)toPeer
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls {
  return NetI2pRouterNetworkdbKademliaSearchJob_resendWithNetI2pDataRouterRouterInfo_withNetI2pDataLeaseSet_(self, toPeer, ls);
}

- (void)fail {
  if (NetI2pRouterNetworkdbKademliaSearchJob_isLocal(self)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("J$@", [self getJobId], @": why did we fail if the target is local?: ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"failure cause")];
    NetI2pRouterNetworkdbKademliaSearchJob_succeed(self);
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Failed search for key ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget])];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": State of failed search: ", _state_)];
  jlong time = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getWhenStarted];
  jint attempted = [((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedAttemptedPeers" withLong:attempted withLong:time];
  if (_keepStats_) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedTime" withLong:time];
  }
  if (_onFailure_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:_onFailure_];
  [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) searchCompleteWithNetI2pDataHash:[_state_ getTarget]];
  NetI2pRouterNetworkdbKademliaSearchJob_handleDeferredWithBoolean_(self, false);
}

- (jint)addDeferredWithNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                   withNetI2pRouterJob:(id<NetI2pRouterJob>)onFail
                              withLong:(jlong)expiration
                           withBoolean:(jboolean)isLease {
  NetI2pRouterNetworkdbKademliaSearchJob_Search *search = create_NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(onFind, onFail, expiration, isLease);
  jboolean ok = true;
  jint deferred = 0;
  @synchronized(_deferredSearches_) {
    if (_deferredCleared_) ok = false;
    else [((id<JavaUtilList>) nil_chk(_deferredSearches_)) addWithId:search];
    deferred = [((id<JavaUtilList>) nil_chk(_deferredSearches_)) size];
  }
  if (!ok) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Race deferred before searchCompleting?  our onFind=", _onSuccess_, @" new one: ", onFind)];
    [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) searchCompleteWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) getTarget]];
    [_facade_ searchWithNetI2pDataHash:[_state_ getTarget] withNetI2pRouterJob:onFind withNetI2pRouterJob:onFail withLong:expiration - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] withBoolean:isLease];
    return 0;
  }
  else {
    return deferred;
  }
}

- (void)handleDeferredWithBoolean:(jboolean)success {
  NetI2pRouterNetworkdbKademliaSearchJob_handleDeferredWithBoolean_(self, success);
}

- (NSString *)getName {
  return @"Kademlia NetDb Search";
}

- (NSString *)description {
  return JreStrcat("$$$$", [super description], @" started ", NetI2pDataDataHelper_formatDurationWithLong_(([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _startedOn_)), @" ago");
}

- (jboolean)wasAttemptedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(_state_)) wasAttemptedWithNetI2pDataHash:peer];
}

- (jlong)timeoutMs {
  return _timeoutMs_;
}

- (jboolean)addWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jboolean rv = [((NetI2pKademliaKBucketSet *) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) getKBuckets])) addWithNetI2pDataSimpleDataStructure:peer];
  if (rv) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": Queueing up for next time: ", peer)];
    id<JavaUtilSet> s = JavaUtilCollections_singletonWithId_(peer);
    [_facade_ queueForExplorationWithJavaUtilCollection:s];
  }
  return rv;
}

- (void)decrementOutstandingFloodfillSearches {
  _floodfillSearchesOutstanding_--;
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_facade_);
  RELEASE_(_state_);
  RELEASE_(_onSuccess_);
  RELEASE_(_onFailure_);
  RELEASE_(_pendingRequeueJob_);
  RELEASE_(_peerSelector_);
  RELEASE_(_deferredSearches_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaSearchState;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 11, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 27, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 28, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:withBoolean:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getState);
  methods[3].selector = @selector(getFacade);
  methods[4].selector = @selector(getExpiration);
  methods[5].selector = @selector(getTimeoutMs);
  methods[6].selector = @selector(onlyQueryFloodfillPeersWithNetI2pRouterRouterContext:);
  methods[7].selector = @selector(getPerPeerTimeoutMsWithNetI2pDataHash:);
  methods[8].selector = @selector(getPerPeerTimeoutMs);
  methods[9].selector = @selector(searchNext);
  methods[10].selector = @selector(isLocal);
  methods[11].selector = @selector(isExpired);
  methods[12].selector = @selector(getBredth);
  methods[13].selector = @selector(continueSearch);
  methods[14].selector = @selector(requeuePending);
  methods[15].selector = @selector(requeuePendingWithLong:);
  methods[16].selector = @selector(getClosestRoutersWithNetI2pDataHash:withInt:withJavaUtilSet:);
  methods[17].selector = @selector(sendSearchWithNetI2pDataRouterRouterInfo:);
  methods[18].selector = @selector(sendLeaseSearchWithNetI2pDataRouterRouterInfo:);
  methods[19].selector = @selector(sendRouterSearchWithNetI2pDataRouterRouterInfo:);
  methods[20].selector = @selector(buildMessageWithNetI2pDataTunnelId:withNetI2pDataHash:withLong:withNetI2pDataRouterRouterInfo:);
  methods[21].selector = @selector(replyFoundWithNetI2pDataI2npDatabaseSearchReplyMessage:withNetI2pDataHash:);
  methods[22].selector = @selector(newPeersFoundWithInt:);
  methods[23].selector = @selector(succeed);
  methods[24].selector = @selector(resend);
  methods[25].selector = @selector(resendWithNetI2pDataRouterRouterInfo:withNetI2pDataLeaseSet:);
  methods[26].selector = @selector(fail);
  methods[27].selector = @selector(addDeferredWithNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:);
  methods[28].selector = @selector(handleDeferredWithBoolean:);
  methods[29].selector = @selector(getName);
  methods[30].selector = @selector(description);
  methods[31].selector = @selector(wasAttemptedWithNetI2pDataHash:);
  methods[32].selector = @selector(timeoutMs);
  methods[33].selector = @selector(addWithNetI2pDataHash:);
  methods[34].selector = @selector(decrementOutstandingFloodfillSearches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterNetworkdbKademliaSearchState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onSuccess_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFailure_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_timeoutMs_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_keepStats_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isLease_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingRequeueJob_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerSelector_", "LNetI2pRouterNetworkdbKademliaPeerSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_deferredSearches_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "_deferredCleared_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_startedOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_floodfillPeersExhausted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_floodfillSearchesOutstanding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SEARCH_BREDTH", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSearchJob_SEARCH_BREDTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_CLOSEST", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSearchJob_MAX_CLOSEST, 0x18, -1, -1, -1, -1 },
    { "PER_PEER_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSearchJob_PER_PEER_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "RESEND_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaSearchJob_RESEND_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "REQUEUE_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaSearchJob_REQUEUE_DELAY, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_FLOODFILL_ONLY", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbKademliaSearchJob_DEFAULT_FLOODFILL_ONLY, 0x1a, -1, -1, -1, -1 },
    { "PER_FLOODFILL_PEER_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSearchJob_PER_FLOODFILL_PEER_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "MIN_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaSearchJob_MIN_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "MAX_PEERS_QUERIED", "I", .constantValue.asLong = 0, 0xa, -1, 30, -1, -1 },
    { "MAX_LEASE_RESEND", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaSearchJob_MAX_LEASE_RESEND, 0x1a, -1, -1, -1, -1 },
    { "SHOULD_RESEND_ROUTERINFO", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbKademliaSearchJob_SHOULD_RESEND_ROUTERINFO, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JZZ", "onlyQueryFloodfillPeers", "LNetI2pRouterRouterContext;", "getPerPeerTimeoutMs", "LNetI2pDataHash;", "requeuePending", "J", "getClosestRouters", "LNetI2pDataHash;ILJavaUtilSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "sendSearch", "LNetI2pDataRouterRouterInfo;", "sendLeaseSearch", "sendRouterSearch", "buildMessage", "LNetI2pDataTunnelId;LNetI2pDataHash;JLNetI2pDataRouterRouterInfo;", "replyFound", "LNetI2pDataI2npDatabaseSearchReplyMessage;LNetI2pDataHash;", "newPeersFound", "I", "resend", "LNetI2pDataRouterRouterInfo;LNetI2pDataLeaseSet;", "addDeferred", "LNetI2pRouterJob;LNetI2pRouterJob;JZ", "handleDeferred", "Z", "toString", "wasAttempted", "add", "Ljava/util/List<Lnet/i2p/router/networkdb/kademlia/SearchJob$Search;>;", &NetI2pRouterNetworkdbKademliaSearchJob_MAX_PEERS_QUERIED, "LNetI2pRouterNetworkdbKademliaSearchJob_RequeuePending;LNetI2pRouterNetworkdbKademliaSearchJob_FailedJob;LNetI2pRouterNetworkdbKademliaSearchJob_Search;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchJob = { "SearchJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 35, 27, -1, 31, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchJob;
}

@end

void NetI2pRouterNetworkdbKademliaSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, jboolean keepStats, jboolean isLease) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  if ((key == nil) || ([((NetI2pDataHash *) nil_chk(key)) getData] == nil)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Search for null key?");
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_facade_, facade);
  JreStrongAssignAndConsume(&self->_state_, new_NetI2pRouterNetworkdbKademliaSearchState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_([self getContext], key));
  JreStrongAssign(&self->_onSuccess_, onSuccess);
  JreStrongAssign(&self->_onFailure_, onFailure);
  self->_timeoutMs_ = timeoutMs;
  self->_keepStats_ = keepStats;
  self->_isLease_ = isLease;
  JreStrongAssignAndConsume(&self->_deferredSearches_, new_JavaUtilArrayList_initWithInt_(0));
  JreStrongAssign(&self->_peerSelector_, [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(facade)) getPeerSelector]);
  self->_startedOn_ = -1;
  self->_expiration_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + timeoutMs;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.searchCount" withLong:1];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$@", @"Search (", [[self java_getClass] getName], @" for ", key) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Search enqueued by")];
}

NetI2pRouterNetworkdbKademliaSearchJob *new_NetI2pRouterNetworkdbKademliaSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, jboolean keepStats, jboolean isLease) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_, context, facade, key, onSuccess, onFailure, timeoutMs, keepStats, isLease)
}

NetI2pRouterNetworkdbKademliaSearchJob *create_NetI2pRouterNetworkdbKademliaSearchJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, jboolean keepStats, jboolean isLease) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_withBoolean_, context, facade, key, onSuccess, onFailure, timeoutMs, keepStats, isLease)
}

jboolean NetI2pRouterNetworkdbKademliaSearchJob_onlyQueryFloodfillPeersWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterNetworkdbKademliaSearchJob_initialize();
  if ([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) netDb])) floodfillEnabled]) return false;
  return [ctx getPropertyWithNSString:@"netDb.floodfillOnly" withBoolean:NetI2pRouterNetworkdbKademliaSearchJob_DEFAULT_FLOODFILL_ONLY];
}

jboolean NetI2pRouterNetworkdbKademliaSearchJob_isLocal(NetI2pRouterNetworkdbKademliaSearchJob *self) {
  return [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getDataStore])) isKnownWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(self->_state_)) getTarget]];
}

jboolean NetI2pRouterNetworkdbKademliaSearchJob_isExpired(NetI2pRouterNetworkdbKademliaSearchJob *self) {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] >= self->_expiration_;
}

void NetI2pRouterNetworkdbKademliaSearchJob_requeuePending(NetI2pRouterNetworkdbKademliaSearchJob *self) {
  jlong perPeerTimeout = [self getPerPeerTimeoutMs] / 2;
  if (perPeerTimeout < NetI2pRouterNetworkdbKademliaSearchJob_REQUEUE_DELAY) NetI2pRouterNetworkdbKademliaSearchJob_requeuePendingWithLong_(self, perPeerTimeout);
  else NetI2pRouterNetworkdbKademliaSearchJob_requeuePendingWithLong_(self, NetI2pRouterNetworkdbKademliaSearchJob_REQUEUE_DELAY);
}

void NetI2pRouterNetworkdbKademliaSearchJob_requeuePendingWithLong_(NetI2pRouterNetworkdbKademliaSearchJob *self, jlong ms) {
  if (self->_pendingRequeueJob_ == nil) JreStrongAssignAndConsume(&self->_pendingRequeueJob_, new_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(self, [self getContext]));
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if ([((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(self->_pendingRequeueJob_)) getTiming])) getStartAfter] < now) [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(self->_pendingRequeueJob_)) getTiming])) setStartAfterWithLong:now + ms];
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self->_pendingRequeueJob_];
}

id<JavaUtilList> NetI2pRouterNetworkdbKademliaSearchJob_getClosestRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaSearchJob *self, NetI2pDataHash *key, jint numClosest, id<JavaUtilSet> alreadyChecked) {
  NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:key];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@$@", [self getJobId], @": Current routing key for ", key, @": ", rkey)];
  return [((NetI2pRouterNetworkdbKademliaPeerSelector *) nil_chk(self->_peerSelector_)) selectNearestExplicitWithNetI2pDataHash:rkey withInt:numClosest withJavaUtilSet:alreadyChecked withNetI2pKademliaKBucketSet:[((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getKBuckets]];
}

void NetI2pRouterNetworkdbKademliaSearchJob_succeed(NetI2pRouterNetworkdbKademliaSearchJob *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@$I", [self getJobId], @": Succeeded search for key ", [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(self->_state_)) getTarget], @" after querying ", [((id<JavaUtilSet>) nil_chk([self->_state_ getAttempted])) size])];
  if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": State of successful search: ", self->_state_)];
  if (self->_keepStats_) {
    jlong time = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(self->_state_)) getWhenStarted];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.successTime" withLong:time];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.successPeers" withLong:[((id<JavaUtilSet>) nil_chk([self->_state_ getAttempted])) size] withLong:time];
  }
  if (self->_onSuccess_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self->_onSuccess_];
  [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) searchCompleteWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(self->_state_)) getTarget]];
  NetI2pRouterNetworkdbKademliaSearchJob_handleDeferredWithBoolean_(self, true);
  NetI2pRouterNetworkdbKademliaSearchJob_resend(self);
}

void NetI2pRouterNetworkdbKademliaSearchJob_resend(NetI2pRouterNetworkdbKademliaSearchJob *self) {
  NetI2pDataDatabaseEntry *ds = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) lookupLeaseSetLocallyWithNetI2pDataHash:[((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(self->_state_)) getTarget]];
  if (ds == nil) {
  }
  else {
    id<JavaUtilSet> sendTo = [self->_state_ getRepliedPeers];
    [((id<JavaUtilSet>) nil_chk(sendTo)) addAllWithJavaUtilCollection:[self->_state_ getPending]];
    jint numSent = 0;
    for (NetI2pDataHash * __strong peer in sendTo) {
      NetI2pDataRouterRouterInfo *peerInfo = [self->_facade_ lookupRouterInfoLocallyWithNetI2pDataHash:peer];
      if (peerInfo == nil) continue;
      if (NetI2pRouterNetworkdbKademliaSearchJob_resendWithNetI2pDataRouterRouterInfo_withNetI2pDataLeaseSet_(self, peerInfo, (NetI2pDataLeaseSet *) cast_chk(ds, [NetI2pDataLeaseSet class]))) numSent++;
      if (numSent >= NetI2pRouterNetworkdbKademliaSearchJob_MAX_LEASE_RESEND) break;
    }
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.republishQuantity" withLong:numSent withLong:numSent];
  }
}

jboolean NetI2pRouterNetworkdbKademliaSearchJob_resendWithNetI2pDataRouterRouterInfo_withNetI2pDataLeaseSet_(NetI2pRouterNetworkdbKademliaSearchJob *self, NetI2pDataRouterRouterInfo *toPeer, NetI2pDataLeaseSet *ls) {
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(toPeer)) getIdentity])) getHash];
  NetI2pDataI2npDatabaseStoreMessage *msg = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_([self getContext]);
  [msg setEntryWithNetI2pDataDatabaseEntry:ls];
  [msg setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + NetI2pRouterNetworkdbKademliaSearchJob_RESEND_TIMEOUT];
  id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundExploratoryTunnelWithNetI2pDataHash:to];
  if (outTunnel != nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@$@", @"resending leaseSet out to ", to, @" through ", outTunnel, @": ", msg)];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:nil withNetI2pDataHash:to];
    return true;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"unable to resend a leaseSet - no outbound exploratory tunnels!"];
    return false;
  }
}

void NetI2pRouterNetworkdbKademliaSearchJob_handleDeferredWithBoolean_(NetI2pRouterNetworkdbKademliaSearchJob *self, jboolean success) {
  id<JavaUtilList> deferred = nil;
  @synchronized(self->_deferredSearches_) {
    if (![((id<JavaUtilList>) nil_chk(self->_deferredSearches_)) isEmpty]) {
      deferred = JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(self->_deferredSearches_));
      [self->_deferredSearches_ clear];
    }
    self->_deferredCleared_ = true;
  }
  if (deferred != nil) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
    for (jint i = 0; i < [deferred size]; i++) {
      NetI2pRouterNetworkdbKademliaSearchJob_Search *cur = [deferred getWithInt:i];
      if ([((NetI2pRouterNetworkdbKademliaSearchJob_Search *) nil_chk(cur)) getExpiration] < now) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:[cur getOnFail]];
      else if (success) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:[cur getOnFind]];
      else [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:[cur getOnFail]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchJob)

@implementation NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending

- (instancetype)initWithNetI2pRouterNetworkdbKademliaSearchJob:(NetI2pRouterNetworkdbKademliaSearchJob *)outer$
                                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext {
  NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(self, outer$, enclosingContext);
  return self;
}

- (NSString *)getName {
  return @"Requeue search with pending";
}

- (void)runJob {
  [this$0_ searchNext];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaSearchJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaSearchJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterNetworkdbKademliaSearchJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending = { "RequeuePending", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending;
}

@end

void NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *self, NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
}

NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *new_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_, outer$, enclosingContext)
}

NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending *create_NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_, outer$, enclosingContext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchJob_RequeuePending)

@implementation NetI2pRouterNetworkdbKademliaSearchJob_FailedJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaSearchJob:(NetI2pRouterNetworkdbKademliaSearchJob *)outer$
                                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                                withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, outer$, enclosingContext, peer);
  return self;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaSearchJob:(NetI2pRouterNetworkdbKademliaSearchJob *)outer$
                                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                                withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                   withBoolean:(jboolean)penalizePeer {
  NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_(self, outer$, enclosingContext, peer, penalizePeer);
  return self;
}

- (void)runJob {
  if (_isFloodfill_) this$0_->_floodfillSearchesOutstanding_--;
  if ([((NetI2pRouterNetworkdbKademliaSearchState *) nil_chk(this$0_->_state_)) completed]) return;
  [this$0_->_state_ replyTimeoutWithNetI2pDataHash:_peer_];
  if (_penalizePeer_) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@$J", @"Penalizing peer for timeout on search: ", _peer_, @" after ", ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _sentOn_))];
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:_peer_];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [this$0_->_log_ errorWithNSString:JreStrcat("$@", @"NOT (!!) Penalizing peer for timeout on search: ", _peer_)];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.failedPeers" withLong:1];
  [this$0_ searchNext];
}

- (NSString *)getName {
  return @"Kademlia Search Failed";
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaSearchJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:);
  methods[1].selector = @selector(initWithNetI2pRouterNetworkdbKademliaSearchJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withBoolean:);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaSearchJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isFloodfill_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_penalizePeer_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;Z", "LNetI2pRouterNetworkdbKademliaSearchJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchJob_FailedJob = { "FailedJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x4, 4, 5, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob;
}

@end

void NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *self, NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_(self, outer$, enclosingContext, peer, true);
}

NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *new_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_, outer$, enclosingContext, peer)
}

NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_, outer$, enclosingContext, peer)
}

void NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *self, NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jboolean penalizePeer) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
  self->_penalizePeer_ = penalizePeer;
  JreStrongAssign(&self->_peer_, [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash]);
  self->_sentOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(enclosingContext)) clock])) now];
  self->_isFloodfill_ = NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(peer);
}

NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *new_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jboolean penalizePeer) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_, outer$, enclosingContext, peer, penalizePeer)
}

NetI2pRouterNetworkdbKademliaSearchJob_FailedJob *create_NetI2pRouterNetworkdbKademliaSearchJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jboolean penalizePeer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaSearchJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withBoolean_, outer$, enclosingContext, peer, penalizePeer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchJob_FailedJob)

@implementation NetI2pRouterNetworkdbKademliaSearchJob_Search

- (instancetype)initWithNetI2pRouterJob:(id<NetI2pRouterJob>)onFind
                    withNetI2pRouterJob:(id<NetI2pRouterJob>)onFail
                               withLong:(jlong)expiration
                            withBoolean:(jboolean)isLease {
  NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(self, onFind, onFail, expiration, isLease);
  return self;
}

- (id<NetI2pRouterJob>)getOnFind {
  return _onFind_;
}

- (id<NetI2pRouterJob>)getOnFail {
  return _onFail_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (void)dealloc {
  RELEASE_(_onFind_);
  RELEASE_(_onFail_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:);
  methods[1].selector = @selector(getOnFind);
  methods[2].selector = @selector(getOnFail);
  methods[3].selector = @selector(getExpiration);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_onFind_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFail_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isLease_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterJob;LNetI2pRouterJob;JZ", "LNetI2pRouterNetworkdbKademliaSearchJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchJob_Search = { "Search", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0xa, 4, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchJob_Search;
}

@end

void NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(NetI2pRouterNetworkdbKademliaSearchJob_Search *self, id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease) {
  NSObject_init(self);
  JreStrongAssign(&self->_onFind_, onFind);
  JreStrongAssign(&self->_onFail_, onFail);
  self->_expiration_ = expiration;
  self->_isLease_ = isLease;
}

NetI2pRouterNetworkdbKademliaSearchJob_Search *new_NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_Search, initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_, onFind, onFail, expiration, isLease)
}

NetI2pRouterNetworkdbKademliaSearchJob_Search *create_NetI2pRouterNetworkdbKademliaSearchJob_Search_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_(id<NetI2pRouterJob> onFind, id<NetI2pRouterJob> onFail, jlong expiration, jboolean isLease) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchJob_Search, initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withBoolean_, onFind, onFail, expiration, isLease)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchJob_Search)
