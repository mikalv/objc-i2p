//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/StartExplorersJob.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterThrottle.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/ExploreJob.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/StartExplorersJob.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbKademliaStartExplorersJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *_facade_;
}

- (jlong)getNextRunDelay;

- (id<JavaUtilSet>)selectKeysToExploreWithInt:(jint)num;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStartExplorersJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStartExplorersJob, _facade_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MAX_PER_RUN(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_PER_RUN 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MAX_PER_RUN, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MIN_RERUN_DELAY_MS(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS 99000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MIN_RERUN_DELAY_MS, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MAX_RERUN_DELAY_MS(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS 900000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MAX_RERUN_DELAY_MS, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_STARTUP_TIME(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_STARTUP_TIME 3600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, STARTUP_TIME, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_LOW_ROUTERS(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_LOW_ROUTERS 125
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, LOW_ROUTERS, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MIN_ROUTERS(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_ROUTERS 250
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MIN_ROUTERS, jint)

inline jint NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MAX_ROUTERS(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_ROUTERS 800
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MAX_ROUTERS, jint)

inline jlong NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MAX_LAG(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_LAG 100LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MAX_LAG, jlong)

inline jlong NetI2pRouterNetworkdbKademliaStartExplorersJob_get_MAX_MSG_DELAY(void);
#define NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_MSG_DELAY 1500LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStartExplorersJob, MAX_MSG_DELAY, jlong)

__attribute__((unused)) static jlong NetI2pRouterNetworkdbKademliaStartExplorersJob_getNextRunDelay(NetI2pRouterNetworkdbKademliaStartExplorersJob *self);

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterNetworkdbKademliaStartExplorersJob_selectKeysToExploreWithInt_(NetI2pRouterNetworkdbKademliaStartExplorersJob *self, jint num);

@implementation NetI2pRouterNetworkdbKademliaStartExplorersJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade {
  NetI2pRouterNetworkdbKademliaStartExplorersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(self, context, facade);
  return self;
}

- (NSString *)getName {
  return @"Start Explorers Job";
}

- (void)runJob {
  if (!([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(_facade_)) floodfillEnabled] || [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) getMaxLag] > NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_LAG || [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) throttle])) getMessageDelay] > NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_MSG_DELAY || [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) gracefulShutdownInProgress])) {
    jint num = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_PER_RUN;
    if ([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([_facade_ getDataStore])) size] < NetI2pRouterNetworkdbKademliaStartExplorersJob_LOW_ROUTERS) num *= 3;
    if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getUptime] < NetI2pRouterNetworkdbKademliaStartExplorersJob_STARTUP_TIME) num *= 3;
    id<JavaUtilSet> toExplore = NetI2pRouterNetworkdbKademliaStartExplorersJob_selectKeysToExploreWithInt_(self, num);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Keys to explore during this run: ", toExplore)];
    [_facade_ removeFromExploreKeysWithJavaUtilCollection:toExplore];
    jlong delay = 0;
    for (NetI2pDataHash * __strong key in nil_chk(toExplore)) {
      NetI2pRouterNetworkdbKademliaExploreJob *j = create_NetI2pRouterNetworkdbKademliaExploreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_([self getContext], _facade_, key);
      if (delay > 0) [((NetI2pRouterJobTiming *) nil_chk([j getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + delay];
      [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:j];
      delay += 200;
    }
  }
  jlong delay = NetI2pRouterNetworkdbKademliaStartExplorersJob_getNextRunDelay(self);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Reenqueueing the exploration with a delay of ", delay)];
  [self requeueWithLong:delay];
}

- (void)updateExploreSchedule {
}

- (jlong)getNextRunDelay {
  return NetI2pRouterNetworkdbKademliaStartExplorersJob_getNextRunDelay(self);
}

- (id<JavaUtilSet>)selectKeysToExploreWithInt:(jint)num {
  return NetI2pRouterNetworkdbKademliaStartExplorersJob_selectKeysToExploreWithInt_(self, num);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_facade_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(updateExploreSchedule);
  methods[4].selector = @selector(getNextRunDelay);
  methods[5].selector = @selector(selectKeysToExploreWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_PER_RUN", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_PER_RUN, 0x1a, -1, -1, -1, -1 },
    { "MIN_RERUN_DELAY_MS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS, 0x1a, -1, -1, -1, -1 },
    { "MAX_RERUN_DELAY_MS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS, 0x1a, -1, -1, -1, -1 },
    { "STARTUP_TIME", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_STARTUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "LOW_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_LOW_ROUTERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_ROUTERS, 0x1a, -1, -1, -1, -1 },
    { "MAX_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_ROUTERS, 0x1a, -1, -1, -1, -1 },
    { "MAX_LAG", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_LAG, 0x1a, -1, -1, -1, -1 },
    { "MAX_MSG_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_MSG_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", "selectKeysToExplore", "I", "(I)Ljava/util/Set<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStartExplorersJob = { "StartExplorersJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 6, 11, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStartExplorersJob;
}

@end

void NetI2pRouterNetworkdbKademliaStartExplorersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterNetworkdbKademliaStartExplorersJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaStartExplorersJob_class_()]);
  JreStrongAssign(&self->_facade_, facade);
}

NetI2pRouterNetworkdbKademliaStartExplorersJob *new_NetI2pRouterNetworkdbKademliaStartExplorersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStartExplorersJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, context, facade)
}

NetI2pRouterNetworkdbKademliaStartExplorersJob *create_NetI2pRouterNetworkdbKademliaStartExplorersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStartExplorersJob, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_, context, facade)
}

jlong NetI2pRouterNetworkdbKademliaStartExplorersJob_getNextRunDelay(NetI2pRouterNetworkdbKademliaStartExplorersJob *self) {
  if ([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) floodfillEnabled]) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS;
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getUptime] < NetI2pRouterNetworkdbKademliaStartExplorersJob_STARTUP_TIME || [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([self->_facade_ getDataStore])) size] < NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_ROUTERS || [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) isHidden]) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS;
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo];
  if (ri != nil && [((NSString *) nil_chk([ri getCapabilities])) java_contains:JreStrcat("C", NetI2pRouterRouter_CAPABILITY_BW12)]) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS;
  if ([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([self->_facade_ getDataStore])) size] > NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_ROUTERS) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS;
  jlong delay = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [self->_facade_ getLastExploreNewDate];
  if (delay < NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MIN_RERUN_DELAY_MS;
  else if (delay > NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS) return NetI2pRouterNetworkdbKademliaStartExplorersJob_MAX_RERUN_DELAY_MS;
  else return delay;
}

id<JavaUtilSet> NetI2pRouterNetworkdbKademliaStartExplorersJob_selectKeysToExploreWithInt_(NetI2pRouterNetworkdbKademliaStartExplorersJob *self, jint num) {
  id<JavaUtilSet> queued = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getExploreKeys];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"Keys waiting for exploration: ", [((id<JavaUtilSet>) nil_chk(queued)) size])];
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_(num);
  for (NetI2pDataHash * __strong key in nil_chk(queued)) {
    if ([rv size] >= num) break;
    [rv addWithId:key];
  }
  for (jint i = [rv size]; i < num; i++) {
    IOSByteArray *hash_ = [IOSByteArray arrayWithLength:NetI2pDataHash_HASH_LENGTH];
    [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextBytesWithByteArray:hash_];
    NetI2pDataHash *key = create_NetI2pDataHash_initWithByteArray_(hash_);
    [rv addWithId:key];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStartExplorersJob)
