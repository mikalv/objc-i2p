//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/LocalHash.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/networkdb/kademlia/LocalHash.h"

@interface NetI2pRouterNetworkdbKademliaLocalHash () {
 @public
  id<JavaUtilMap> _xorCache_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaLocalHash, _xorCache_, id<JavaUtilMap>)

inline jint NetI2pRouterNetworkdbKademliaLocalHash_get_MAX_CACHED_XOR(void);
#define NetI2pRouterNetworkdbKademliaLocalHash_MAX_CACHED_XOR 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaLocalHash, MAX_CACHED_XOR, jint)

@implementation NetI2pRouterNetworkdbKademliaLocalHash

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterNetworkdbKademliaLocalHash_initWithNetI2pDataHash_(self, h);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)b {
  NetI2pRouterNetworkdbKademliaLocalHash_initWithByteArray_(self, b);
  return self;
}

- (void)prepareCache {
  @synchronized(self) {
    if (_xorCache_ == nil) JreStrongAssignAndConsume(&_xorCache_, new_JavaUtilHashMap_initWithInt_(NetI2pRouterNetworkdbKademliaLocalHash_MAX_CACHED_XOR));
  }
}

- (IOSByteArray *)cachedXorWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (_xorCache_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"To use the cache, you must first prepare it");
  IOSByteArray *distance = [_xorCache_ getWithId:key];
  if (distance == nil) {
    @synchronized(_xorCache_) {
      jint toRemove = [((id<JavaUtilMap>) nil_chk(_xorCache_)) size] + 1 - NetI2pRouterNetworkdbKademliaLocalHash_MAX_CACHED_XOR;
      if (toRemove > 0) {
        id<JavaUtilSet> keys = create_JavaUtilHashSet_initWithInt_(toRemove);
        jint removed = 0;
        for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(_xorCache_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && removed < toRemove; removed++) [keys addWithId:[iter next]];
        for (id<JavaUtilIterator> iter = [keys iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) [((id<JavaUtilMap>) nil_chk(_xorCache_)) removeWithId:[iter next]];
      }
      distance = JreRetainedLocalValue(NetI2pDataDataHelper_xor__WithByteArray_withByteArray_([((NetI2pDataHash *) nil_chk(key)) getData], [self getData]));
      [((id<JavaUtilMap>) nil_chk(_xorCache_)) putWithId:key withId:distance];
    }
  }
  else {
  }
  return distance;
}

- (void)clearXorCache {
  @synchronized(_xorCache_) {
    [((id<JavaUtilMap>) nil_chk(_xorCache_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(_xorCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 0, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(prepareCache);
  methods[3].selector = @selector(cachedXorWithNetI2pDataHash:);
  methods[4].selector = @selector(clearXorCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_xorCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
    { "MAX_CACHED_XOR", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaLocalHash_MAX_CACHED_XOR, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;", "[B", "cachedXor", "LJavaLangIllegalStateException;", "Ljava/util/Map<Lnet/i2p/data/Hash;[B>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaLocalHash = { "LocalHash", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaLocalHash;
}

@end

void NetI2pRouterNetworkdbKademliaLocalHash_initWithNetI2pDataHash_(NetI2pRouterNetworkdbKademliaLocalHash *self, NetI2pDataHash *h) {
  NetI2pDataHash_initWithByteArray_(self, [((NetI2pDataHash *) nil_chk(h)) getData]);
}

NetI2pRouterNetworkdbKademliaLocalHash *new_NetI2pRouterNetworkdbKademliaLocalHash_initWithNetI2pDataHash_(NetI2pDataHash *h) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaLocalHash, initWithNetI2pDataHash_, h)
}

NetI2pRouterNetworkdbKademliaLocalHash *create_NetI2pRouterNetworkdbKademliaLocalHash_initWithNetI2pDataHash_(NetI2pDataHash *h) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaLocalHash, initWithNetI2pDataHash_, h)
}

void NetI2pRouterNetworkdbKademliaLocalHash_initWithByteArray_(NetI2pRouterNetworkdbKademliaLocalHash *self, IOSByteArray *b) {
  NetI2pDataHash_initWithByteArray_(self, b);
}

NetI2pRouterNetworkdbKademliaLocalHash *new_NetI2pRouterNetworkdbKademliaLocalHash_initWithByteArray_(IOSByteArray *b) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaLocalHash, initWithByteArray_, b)
}

NetI2pRouterNetworkdbKademliaLocalHash *create_NetI2pRouterNetworkdbKademliaLocalHash_initWithByteArray_(IOSByteArray *b) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaLocalHash, initWithByteArray_, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaLocalHash)
