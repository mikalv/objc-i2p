//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/SearchState.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/kademlia/XORComparator.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/SearchState.h"
#include "net/i2p/util/Clock.h"

@interface NetI2pRouterNetworkdbKademliaSearchState () {
 @public
  NetI2pRouterRouterContext *_context_;
  id<JavaUtilSet> _pendingPeers_;
  id<JavaUtilMap> _pendingPeerTimes_;
  id<JavaUtilSet> _attemptedPeers_;
  id<JavaUtilSet> _failedPeers_;
  id<JavaUtilSet> _successfulPeers_;
  id<JavaUtilSet> _repliedPeers_;
  NetI2pDataHash *_searchKey_;
  volatile_jlong _completed_;
  volatile_jlong _started_;
  volatile_jboolean _aborted_;
}

- (id<JavaUtilSet>)locked_getClosestWithJavaUtilSet:(id<JavaUtilSet>)peers
                                            withInt:(jint)max
                                 withNetI2pDataHash:(NetI2pDataHash *)target;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _pendingPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _pendingPeerTimes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _attemptedPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _failedPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _successfulPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _repliedPeers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaSearchState, _searchKey_, NetI2pDataHash *)

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterNetworkdbKademliaSearchState_locked_getClosestWithJavaUtilSet_withInt_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaSearchState *self, id<JavaUtilSet> peers, jint max, NetI2pDataHash *target);

@implementation NetI2pRouterNetworkdbKademliaSearchState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                               withNetI2pDataHash:(NetI2pDataHash *)key {
  NetI2pRouterNetworkdbKademliaSearchState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(self, context, key);
  return self;
}

- (NetI2pDataHash *)getTarget {
  return _searchKey_;
}

- (id<JavaUtilSet>)getPending {
  @synchronized(_pendingPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_pendingPeers_));
  }
}

- (id<JavaUtilSet>)getAttempted {
  @synchronized(_attemptedPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_attemptedPeers_));
  }
}

- (id<JavaUtilSet>)getClosestAttemptedWithInt:(jint)max {
  @synchronized(_attemptedPeers_) {
    return JreRetainedLocalValue(NetI2pRouterNetworkdbKademliaSearchState_locked_getClosestWithJavaUtilSet_withInt_withNetI2pDataHash_(self, _attemptedPeers_, max, _searchKey_));
  }
}

- (id<JavaUtilSet>)locked_getClosestWithJavaUtilSet:(id<JavaUtilSet>)peers
                                            withInt:(jint)max
                                 withNetI2pDataHash:(NetI2pDataHash *)target {
  return NetI2pRouterNetworkdbKademliaSearchState_locked_getClosestWithJavaUtilSet_withInt_withNetI2pDataHash_(self, peers, max, target);
}

- (jboolean)wasAttemptedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_attemptedPeers_) {
    return [((id<JavaUtilSet>) nil_chk(_attemptedPeers_)) containsWithId:peer];
  }
}

- (id<JavaUtilSet>)getSuccessful {
  @synchronized(_successfulPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_successfulPeers_));
  }
}

- (id<JavaUtilSet>)getFailed {
  @synchronized(_failedPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_failedPeers_));
  }
}

- (jboolean)completed {
  return JreLoadVolatileLong(&_completed_) != -1;
}

- (void)complete {
  JreAssignVolatileLong(&_completed_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (jboolean)isAborted {
  return JreLoadVolatileBoolean(&_aborted_);
}

- (void)abort {
  JreAssignVolatileBoolean(&_aborted_, true);
}

- (jlong)getWhenStarted {
  return JreLoadVolatileLong(&_started_);
}

- (jlong)getWhenCompleted {
  return JreLoadVolatileLong(&_completed_);
}

- (void)addPendingWithJavaUtilCollection:(id<JavaUtilCollection>)pending {
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) addAllWithJavaUtilCollection:pending];
    for (NetI2pDataHash * __strong peer in nil_chk(pending)) [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now])];
  }
  @synchronized(_attemptedPeers_) {
    [((id<JavaUtilSet>) nil_chk(_attemptedPeers_)) addAllWithJavaUtilCollection:pending];
  }
}

- (void)addPendingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) addWithId:peer];
    [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now])];
  }
  @synchronized(_attemptedPeers_) {
    [((id<JavaUtilSet>) nil_chk(_attemptedPeers_)) addWithId:peer];
  }
}

- (void)removePendingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) removeWithId:peer];
  }
  @synchronized(_attemptedPeers_) {
    [((id<JavaUtilSet>) nil_chk(_attemptedPeers_)) removeWithId:peer];
  }
}

- (jlong)dataFoundWithNetI2pDataHash:(NetI2pDataHash *)peer {
  jlong rv = -1;
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) removeWithId:peer];
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) removeWithId:peer];
    if (when != nil) rv = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - [when longLongValue];
  }
  @synchronized(_successfulPeers_) {
    [((id<JavaUtilSet>) nil_chk(_successfulPeers_)) addWithId:peer];
  }
  return rv;
}

- (jlong)replyFoundWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_repliedPeers_) {
    [((id<JavaUtilSet>) nil_chk(_repliedPeers_)) addWithId:peer];
  }
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) removeWithId:peer];
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) removeWithId:peer];
    if (when != nil) return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - [when longLongValue];
    else return -1;
  }
}

- (id<JavaUtilSet>)getRepliedPeers {
  @synchronized(_repliedPeers_) {
    return JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_(_repliedPeers_));
  }
}

- (void)replyTimeoutWithNetI2pDataHash:(NetI2pDataHash *)peer {
  @synchronized(_pendingPeers_) {
    [((id<JavaUtilSet>) nil_chk(_pendingPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(_pendingPeerTimes_)) removeWithId:peer];
  }
  @synchronized(_failedPeers_) {
    [((id<JavaUtilSet>) nil_chk(_failedPeers_)) addWithId:peer];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Searching for "])) appendWithId:_searchKey_];
  [buf appendWithNSString:@" "];
  if (JreLoadVolatileLong(&_completed_) <= 0) [buf appendWithNSString:@" completed? false "];
  else [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" completed on "])) appendWithId:create_JavaUtilDate_initWithLong_(JreLoadVolatileLong(&_completed_))];
  if (JreLoadVolatileBoolean(&_aborted_)) [buf appendWithNSString:@"  (Aborted)"];
  [buf appendWithNSString:@"\n\tAttempted: "];
  @synchronized(_attemptedPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((id<JavaUtilSet>) nil_chk(_attemptedPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _attemptedPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@"\n\tPending: "];
  @synchronized(_pendingPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((id<JavaUtilSet>) nil_chk(_pendingPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _pendingPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@"\n\tFailed: "];
  @synchronized(_failedPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((id<JavaUtilSet>) nil_chk(_failedPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _failedPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  [buf appendWithNSString:@"\n\tSuccessful: "];
  @synchronized(_successfulPeers_) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((id<JavaUtilSet>) nil_chk(_successfulPeers_)) size]])) appendWithChar:' '];
    for (NetI2pDataHash * __strong peer in _successfulPeers_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((NetI2pDataHash *) nil_chk(peer)) toBase64]])) appendWithNSString:@" "];
    }
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_pendingPeers_);
  RELEASE_(_pendingPeerTimes_);
  RELEASE_(_attemptedPeers_);
  RELEASE_(_failedPeers_);
  RELEASE_(_successfulPeers_);
  RELEASE_(_repliedPeers_);
  RELEASE_(_searchKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[1].selector = @selector(getTarget);
  methods[2].selector = @selector(getPending);
  methods[3].selector = @selector(getAttempted);
  methods[4].selector = @selector(getClosestAttemptedWithInt:);
  methods[5].selector = @selector(locked_getClosestWithJavaUtilSet:withInt:withNetI2pDataHash:);
  methods[6].selector = @selector(wasAttemptedWithNetI2pDataHash:);
  methods[7].selector = @selector(getSuccessful);
  methods[8].selector = @selector(getFailed);
  methods[9].selector = @selector(completed);
  methods[10].selector = @selector(complete);
  methods[11].selector = @selector(isAborted);
  methods[12].selector = @selector(abort);
  methods[13].selector = @selector(getWhenStarted);
  methods[14].selector = @selector(getWhenCompleted);
  methods[15].selector = @selector(addPendingWithJavaUtilCollection:);
  methods[16].selector = @selector(addPendingWithNetI2pDataHash:);
  methods[17].selector = @selector(removePendingWithNetI2pDataHash:);
  methods[18].selector = @selector(dataFoundWithNetI2pDataHash:);
  methods[19].selector = @selector(replyFoundWithNetI2pDataHash:);
  methods[20].selector = @selector(getRepliedPeers);
  methods[21].selector = @selector(replyTimeoutWithNetI2pDataHash:);
  methods[22].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_pendingPeerTimes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "_attemptedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_failedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_successfulPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_repliedPeers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_searchKey_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_completed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_aborted_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "getClosestAttempted", "I", "(I)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "locked_getClosest", "LJavaUtilSet;ILNetI2pDataHash;", "(Ljava/util/Set<Lnet/i2p/data/Hash;>;ILnet/i2p/data/Hash;)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "wasAttempted", "LNetI2pDataHash;", "addPending", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/Hash;>;)V", "removePending", "dataFound", "replyFound", "replyTimeout", "toString", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaSearchState = { "SearchState", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 23, 11, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaSearchState;
}

@end

void NetI2pRouterNetworkdbKademliaSearchState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaSearchState *self, NetI2pRouterRouterContext *context, NetI2pDataHash *key) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_searchKey_, key);
  JreStrongAssignAndConsume(&self->_pendingPeers_, new_JavaUtilHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_attemptedPeers_, new_JavaUtilHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_failedPeers_, new_JavaUtilHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_successfulPeers_, new_JavaUtilHashSet_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_pendingPeerTimes_, new_JavaUtilHashMap_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_repliedPeers_, new_JavaUtilHashSet_initWithInt_(16));
  JreAssignVolatileLong(&self->_completed_, -1);
  JreAssignVolatileLong(&self->_started_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now]);
}

NetI2pRouterNetworkdbKademliaSearchState *new_NetI2pRouterNetworkdbKademliaSearchState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataHash *key) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaSearchState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, context, key)
}

NetI2pRouterNetworkdbKademliaSearchState *create_NetI2pRouterNetworkdbKademliaSearchState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataHash *key) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaSearchState, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, context, key)
}

id<JavaUtilSet> NetI2pRouterNetworkdbKademliaSearchState_locked_getClosestWithJavaUtilSet_withInt_withNetI2pDataHash_(NetI2pRouterNetworkdbKademliaSearchState *self, id<JavaUtilSet> peers, jint max, NetI2pDataHash *target) {
  if ([((id<JavaUtilSet>) nil_chk(self->_attemptedPeers_)) size] <= max) return create_JavaUtilHashSet_initWithJavaUtilCollection_(self->_attemptedPeers_);
  JavaUtilTreeSet *closest = create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(target));
  [closest addAllWithJavaUtilCollection:self->_attemptedPeers_];
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_(max);
  jint i = 0;
  for (id<JavaUtilIterator> iter = [closest iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && i < max; i++) {
    [rv addWithId:[iter next]];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaSearchState)
