//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/StoreJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/StoreJob.h"
#include "net/i2p/router/networkdb/kademlia/StoreMessageSelector.h"
#include "net/i2p/router/networkdb/kademlia/StoreState.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/ConnectChecker.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/KeyRing.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pRouterNetworkdbKademliaStoreJob () {
 @public
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *_facade_;
  id<NetI2pRouterJob> _onSuccess_;
  id<NetI2pRouterJob> _onFailure_;
  jlong _timeoutMs_;
  jlong _expiration_;
  NetI2pRouterNetworkdbKademliaPeerSelector *_peerSelector_;
  NetI2pRouterTunnelPoolConnectChecker *_connectChecker_;
  jint _connectMask_;
}

- (jboolean)isExpired;

- (void)sendNext;

- (void)continueSending;

- (id<JavaUtilList>)getClosestFloodfillRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                         withInt:(jint)numClosest
                                                 withJavaUtilSet:(id<JavaUtilSet>)alreadyChecked;

- (void)sendStoreWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)router
                                        withInt:(jint)responseTime;

- (void)sendStoreWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                               withLong:(jlong)expiration;

- (void)sendDirectWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                          withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                withLong:(jlong)expiration;

- (void)sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                                      withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withLong:(jlong)expiration;

- (void)sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                                      withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withLong:(jlong)expiration;

+ (jboolean)supportsEncryptionWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob, _facade_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob, _onSuccess_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob, _onFailure_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob, _peerSelector_, NetI2pRouterNetworkdbKademliaPeerSelector *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob, _connectChecker_, NetI2pRouterTunnelPoolConnectChecker *)

inline jint NetI2pRouterNetworkdbKademliaStoreJob_get_PARALLELIZATION(void);
#define NetI2pRouterNetworkdbKademliaStoreJob_PARALLELIZATION 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStoreJob, PARALLELIZATION, jint)

inline jint NetI2pRouterNetworkdbKademliaStoreJob_get_REDUNDANCY(void);
#define NetI2pRouterNetworkdbKademliaStoreJob_REDUNDANCY 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStoreJob, REDUNDANCY, jint)

inline jint NetI2pRouterNetworkdbKademliaStoreJob_get_STORE_PRIORITY(void);
#define NetI2pRouterNetworkdbKademliaStoreJob_STORE_PRIORITY 460
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStoreJob, STORE_PRIORITY, jint)

inline jint NetI2pRouterNetworkdbKademliaStoreJob_get_MAX_PEERS_SENT(void);
#define NetI2pRouterNetworkdbKademliaStoreJob_MAX_PEERS_SENT 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStoreJob, MAX_PEERS_SENT, jint)

inline jint NetI2pRouterNetworkdbKademliaStoreJob_get_MAX_DIRECT_EXPIRATION(void);
#define NetI2pRouterNetworkdbKademliaStoreJob_MAX_DIRECT_EXPIRATION 15000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaStoreJob, MAX_DIRECT_EXPIRATION, jint)

inline NSString *NetI2pRouterNetworkdbKademliaStoreJob_get_MIN_ENCRYPTION_VERSION(void);
static NSString *NetI2pRouterNetworkdbKademliaStoreJob_MIN_ENCRYPTION_VERSION = @"0.7.10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbKademliaStoreJob, MIN_ENCRYPTION_VERSION, NSString *)

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaStoreJob_isExpired(NetI2pRouterNetworkdbKademliaStoreJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendNext(NetI2pRouterNetworkdbKademliaStoreJob *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_continueSending(NetI2pRouterNetworkdbKademliaStoreJob *self);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterNetworkdbKademliaStoreJob_getClosestFloodfillRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataHash *key, jint numClosest, id<JavaUtilSet> alreadyChecked);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataRouterRouterInfo *router, jint responseTime);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendDirectWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbKademliaStoreJob_supportsEncryptionWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri);

@interface NetI2pRouterNetworkdbKademliaStoreJob_WaitJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaStoreJob *this$0_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *new_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *create_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob)

@interface NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob : NetI2pRouterJobImpl < NetI2pRouterReplyJob > {
 @public
  NetI2pRouterNetworkdbKademliaStoreJob *this$0_;
  NetI2pDataRouterRouterInfo *_peer_;
  id<NetI2pRouterTunnelInfo> _sendThrough_;
  jint _msgSize_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer;

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                   withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendThrough
                                                      withInt:(jint)size;

- (NSString *)getName;

- (void)runJob;

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, _peer_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, _sendThrough_, id<NetI2pRouterTunnelInfo>)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *new_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *new_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob)

@interface NetI2pRouterNetworkdbKademliaStoreJob_FailedJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterNetworkdbKademliaStoreJob *this$0_;
  NetI2pDataRouterRouterInfo *_peer_;
  jlong _sendOn_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                     withLong:(jlong)sendOn;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob, _peer_, NetI2pDataRouterRouterInfo *)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *new_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *create_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob)

NSString *NetI2pRouterNetworkdbKademliaStoreJob_MIN_STORE_VERSION = @"0.9.28";

@implementation NetI2pRouterNetworkdbKademliaStoreJob

+ (NSString *)MIN_STORE_VERSION {
  return NetI2pRouterNetworkdbKademliaStoreJob_MIN_STORE_VERSION;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                                         withLong:(jlong)timeoutMs {
  NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *)facade
                               withNetI2pDataHash:(NetI2pDataHash *)key
                      withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                                         withLong:(jlong)timeoutMs
                                  withJavaUtilSet:(id<JavaUtilSet>)toSkip {
  NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs, toSkip);
  return self;
}

- (NSString *)getName {
  return @"Kademlia NetDb Store";
}

- (void)runJob {
  NetI2pRouterNetworkdbKademliaStoreJob_sendNext(self);
}

- (jboolean)isExpired {
  return NetI2pRouterNetworkdbKademliaStoreJob_isExpired(self);
}

- (void)sendNext {
  NetI2pRouterNetworkdbKademliaStoreJob_sendNext(self);
}

- (jint)getParallelization {
  return NetI2pRouterNetworkdbKademliaStoreJob_PARALLELIZATION;
}

- (jint)getRedundancy {
  return NetI2pRouterNetworkdbKademliaStoreJob_REDUNDANCY;
}

- (void)continueSending {
  NetI2pRouterNetworkdbKademliaStoreJob_continueSending(self);
}

- (id<JavaUtilList>)getClosestFloodfillRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                         withInt:(jint)numClosest
                                                 withJavaUtilSet:(id<JavaUtilSet>)alreadyChecked {
  return NetI2pRouterNetworkdbKademliaStoreJob_getClosestFloodfillRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(self, key, numClosest, alreadyChecked);
}

- (void)sendStoreWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)router
                                        withInt:(jint)responseTime {
  NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataRouterRouterInfo_withInt_(self, router, responseTime);
}

- (void)sendStoreWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                               withLong:(jlong)expiration {
  NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
}

- (void)sendDirectWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                          withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                withLong:(jlong)expiration {
  NetI2pRouterNetworkdbKademliaStoreJob_sendDirectWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
}

- (void)sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                                      withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withLong:(jlong)expiration {
  NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
}

- (void)sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage:(NetI2pDataI2npDatabaseStoreMessage *)msg
                                      withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withLong:(jlong)expiration {
  NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
}

+ (jboolean)supportsEncryptionWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  return NetI2pRouterNetworkdbKademliaStoreJob_supportsEncryptionWithNetI2pDataRouterRouterInfo_(ri);
}

+ (jboolean)shouldStoreToWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  return NetI2pRouterNetworkdbKademliaStoreJob_shouldStoreToWithNetI2pDataRouterRouterInfo_(ri);
}

- (void)succeed {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Succeeded sending key ", [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(_state_)) getTarget])];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": State of successful send: ", _state_)];
  if (_onSuccess_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:_onSuccess_];
  [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(_state_)) completeWithBoolean:true];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storePeers" withLong:[((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size] withLong:[_state_ getWhenCompleted] - [_state_ getWhenStarted]];
}

- (void)fail {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Failed sending key ", [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(_state_)) getTarget])];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": State of failed send: ", _state_) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Who failed me?")];
  if (_onFailure_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:_onFailure_];
  [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(_state_)) completeWithBoolean:true];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeFailedPeers" withLong:[((id<JavaUtilSet>) nil_chk([_state_ getAttempted])) size] withLong:[_state_ getWhenCompleted] - [_state_ getWhenStarted]];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_facade_);
  RELEASE_(_state_);
  RELEASE_(_onSuccess_);
  RELEASE_(_onFailure_);
  RELEASE_(_peerSelector_);
  RELEASE_(_connectChecker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade:withNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withJavaUtilSet:);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(runJob);
  methods[4].selector = @selector(isExpired);
  methods[5].selector = @selector(sendNext);
  methods[6].selector = @selector(getParallelization);
  methods[7].selector = @selector(getRedundancy);
  methods[8].selector = @selector(continueSending);
  methods[9].selector = @selector(getClosestFloodfillRoutersWithNetI2pDataHash:withInt:withJavaUtilSet:);
  methods[10].selector = @selector(sendStoreWithNetI2pDataRouterRouterInfo:withInt:);
  methods[11].selector = @selector(sendStoreWithNetI2pDataI2npDatabaseStoreMessage:withNetI2pDataRouterRouterInfo:withLong:);
  methods[12].selector = @selector(sendDirectWithNetI2pDataI2npDatabaseStoreMessage:withNetI2pDataRouterRouterInfo:withLong:);
  methods[13].selector = @selector(sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage:withNetI2pDataRouterRouterInfo:withLong:);
  methods[14].selector = @selector(sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage:withNetI2pDataRouterRouterInfo:withLong:);
  methods[15].selector = @selector(supportsEncryptionWithNetI2pDataRouterRouterInfo:);
  methods[16].selector = @selector(shouldStoreToWithNetI2pDataRouterRouterInfo:);
  methods[17].selector = @selector(succeed);
  methods[18].selector = @selector(fail);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_facade_", "LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterNetworkdbKademliaStoreState;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_onSuccess_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFailure_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_timeoutMs_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peerSelector_", "LNetI2pRouterNetworkdbKademliaPeerSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_connectChecker_", "LNetI2pRouterTunnelPoolConnectChecker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_connectMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PARALLELIZATION", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStoreJob_PARALLELIZATION, 0x1a, -1, -1, -1, -1 },
    { "REDUNDANCY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStoreJob_REDUNDANCY, 0x1a, -1, -1, -1, -1 },
    { "STORE_PRIORITY", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStoreJob_STORE_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "MAX_PEERS_SENT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStoreJob_MAX_PEERS_SENT, 0x1a, -1, -1, -1, -1 },
    { "MAX_DIRECT_EXPIRATION", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaStoreJob_MAX_DIRECT_EXPIRATION, 0x1a, -1, -1, -1, -1 },
    { "MIN_ENCRYPTION_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "MIN_STORE_VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;J", "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;JLJavaUtilSet;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade;Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;Lnet/i2p/router/Job;Lnet/i2p/router/Job;JLjava/util/Set<Lnet/i2p/data/Hash;>;)V", "getClosestFloodfillRouters", "LNetI2pDataHash;ILJavaUtilSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "sendStore", "LNetI2pDataRouterRouterInfo;I", "LNetI2pDataI2npDatabaseStoreMessage;LNetI2pDataRouterRouterInfo;J", "sendDirect", "sendStoreThroughGarlic", "sendStoreThroughClient", "supportsEncryption", "LNetI2pDataRouterRouterInfo;", "shouldStoreTo", &NetI2pRouterNetworkdbKademliaStoreJob_MIN_ENCRYPTION_VERSION, &NetI2pRouterNetworkdbKademliaStoreJob_MIN_STORE_VERSION, "LNetI2pRouterNetworkdbKademliaStoreJob_WaitJob;LNetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob;LNetI2pRouterNetworkdbKademliaStoreJob_FailedJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreJob = { "StoreJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x400, 19, 17, -1, 17, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreJob;
}

@end

void NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs) {
  NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(self, context, facade, key, data, onSuccess, onFailure, timeoutMs, nil);
}

void NetI2pRouterNetworkdbKademliaStoreJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pRouterJob_withNetI2pRouterJob_withLong_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pRouterRouterContext *context, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *facade, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, id<NetI2pRouterJob> onSuccess, id<NetI2pRouterJob> onFailure, jlong timeoutMs, id<JavaUtilSet> toSkip) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbKademliaStoreJob_class_()]);
  JreStrongAssign(&self->_facade_, facade);
  JreStrongAssignAndConsume(&self->_state_, new_NetI2pRouterNetworkdbKademliaStoreState_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataDatabaseEntry_withJavaUtilSet_([self getContext], key, data, toSkip));
  JreStrongAssign(&self->_onSuccess_, onSuccess);
  JreStrongAssign(&self->_onFailure_, onFailure);
  self->_timeoutMs_ = timeoutMs;
  self->_expiration_ = [((NetI2pUtilClock *) nil_chk([context clock])) now] + timeoutMs;
  JreStrongAssign(&self->_peerSelector_, [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(facade)) getPeerSelector]);
  if ([((NetI2pDataDatabaseEntry *) nil_chk(data)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    JreStrongAssign(&self->_connectChecker_, nil);
    self->_connectMask_ = 0;
  }
  else {
    JreStrongAssignAndConsume(&self->_connectChecker_, new_NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(context));
    NetI2pDataRouterRouterInfo *us = [((NetI2pRouterRouter *) nil_chk([context router])) getRouterInfo];
    if (us != nil) self->_connectMask_ = [self->_connectChecker_ getOutboundMaskWithNetI2pDataRouterRouterInfo:us];
    else self->_connectMask_ = NetI2pRouterTunnelPoolConnectChecker_ANY_V4;
  }
}

jboolean NetI2pRouterNetworkdbKademliaStoreJob_isExpired(NetI2pRouterNetworkdbKademliaStoreJob *self) {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] >= self->_expiration_;
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendNext(NetI2pRouterNetworkdbKademliaStoreJob *self) {
  if ([((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) completed]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:@"Already completed"];
    return;
  }
  if (NetI2pRouterNetworkdbKademliaStoreJob_isExpired(self)) {
    [self->_state_ completeWithBoolean:true];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$J", [self getJobId], @": Expired: ", self->_timeoutMs_)];
    [self fail];
  }
  else if ([((id<JavaUtilSet>) nil_chk([self->_state_ getAttempted])) size] > NetI2pRouterNetworkdbKademliaStoreJob_MAX_PEERS_SENT) {
    [self->_state_ completeWithBoolean:true];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": Max sent")];
    [self fail];
  }
  else {
    NetI2pRouterNetworkdbKademliaStoreJob_continueSending(self);
  }
}

void NetI2pRouterNetworkdbKademliaStoreJob_continueSending(NetI2pRouterNetworkdbKademliaStoreJob *self) {
  @synchronized(self) {
    if ([((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) completed]) return;
    jint toCheck = [self getParallelization] - [((id<JavaUtilSet>) nil_chk([self->_state_ getPending])) size];
    if (toCheck <= 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$", [self getJobId], @": Too many store messages pending")];
      return;
    }
    if (toCheck > [self getParallelization]) toCheck = [self getParallelization];
    id<JavaUtilList> closestHashes;
    closestHashes = NetI2pRouterNetworkdbKademliaStoreJob_getClosestFloodfillRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(self, [self->_state_ getTarget], toCheck, [self->_state_ getAttempted]);
    if ((closestHashes == nil) || ([((id<JavaUtilList>) nil_chk(closestHashes)) isEmpty])) {
      if ([((id<JavaUtilSet>) nil_chk([self->_state_ getPending])) isEmpty]) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": No more peers left and none pending")];
        [self fail];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$", [self getJobId], @": No more peers left but some are pending, so keep waiting")];
        return;
      }
    }
    else {
      jint queued = 0;
      jint skipped = 0;
      for (NetI2pDataHash * __strong peer in nil_chk(closestHashes)) {
        NetI2pDataDatabaseEntry *ds = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getDataStore])) getWithNetI2pDataHash:peer];
        if ((ds == nil) || !([((NetI2pDataDatabaseEntry *) nil_chk(ds)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO)) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@$@", [self getJobId], @": Error selecting closest hash that wasnt a router! ", peer, @" : ", ds)];
          [self->_state_ addSkippedWithNetI2pDataHash:peer];
          skipped++;
        }
        else if (!NetI2pRouterNetworkdbKademliaStoreJob_shouldStoreToWithNetI2pDataRouterRouterInfo_((NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class]))) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@", [self getJobId], @": Skipping old router ", peer)];
          [self->_state_ addSkippedWithNetI2pDataHash:peer];
          skipped++;
        }
        else {
          jint peerTimeout = [self->_facade_ getPeerTimeoutWithNetI2pDataHash:peer];
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@$I$@", [self getJobId], @": Continue sending key ", [self->_state_ getTarget], @" after ", [((id<JavaUtilSet>) nil_chk([self->_state_ getAttempted])) size], @" tries to ", closestHashes)];
          [self->_state_ addPendingWithNetI2pDataHash:peer];
          NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataRouterRouterInfo_withInt_(self, (NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class]), peerTimeout);
          queued++;
        }
      }
      if (queued == 0 && [((id<JavaUtilSet>) nil_chk([self->_state_ getPending])) isEmpty]) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$I$", [self getJobId], @": No more peers left after skipping ", skipped, @" and none pending")];
        [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(self, [self getContext])];
      }
    }
  }
}

id<JavaUtilList> NetI2pRouterNetworkdbKademliaStoreJob_getClosestFloodfillRoutersWithNetI2pDataHash_withInt_withJavaUtilSet_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataHash *key, jint numClosest, id<JavaUtilSet> alreadyChecked) {
  NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:key];
  NetI2pKademliaKBucketSet *ks = [((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *) nil_chk(self->_facade_)) getKBuckets];
  if (ks == nil) return create_JavaUtilArrayList_init();
  return [((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) nil_chk(((NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *) cast_chk(self->_peerSelector_, [NetI2pRouterNetworkdbKademliaFloodfillPeerSelector class])))) selectFloodfillParticipantsWithNetI2pDataHash:rkey withInt:numClosest withJavaUtilSet:alreadyChecked withNetI2pKademliaKBucketSet:ks];
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataRouterRouterInfo *router, jint responseTime) {
  if (![((NetI2pDataHash *) nil_chk([((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) getTarget])) isEqual:[((NetI2pDataDatabaseEntry *) nil_chk([self->_state_ getData])) getHash]]) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Hash mismatch StoreJob"];
    return;
  }
  NetI2pDataI2npDatabaseStoreMessage *msg = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_([self getContext]);
  if ([((NetI2pDataDatabaseEntry *) nil_chk([self->_state_ getData])) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    if (responseTime > NetI2pRouterNetworkdbKademliaStoreJob_MAX_DIRECT_EXPIRATION) responseTime = NetI2pRouterNetworkdbKademliaStoreJob_MAX_DIRECT_EXPIRATION;
  }
  else if ([((NetI2pDataDatabaseEntry *) nil_chk([self->_state_ getData])) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Storing an unknown data type! ", [self->_state_ getData]));
  }
  [msg setEntryWithNetI2pDataDatabaseEntry:[self->_state_ getData]];
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  [msg setMessageExpirationWithLong:now + self->_timeoutMs_];
  if ([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(router)) getIdentity])) isEqual:[((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo])) getIdentity]]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [self->_log_ errorWithNSString:JreStrcat("J$", [self getJobId], @": Dont send store to ourselves - why did we try?")];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$I", [self getJobId], @": Send store timeout is ", responseTime)];
  NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, router, now + responseTime);
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration) {
  if ([((NetI2pDataDatabaseEntry *) nil_chk([((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(msg)) getEntry])) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeLeaseSetSent" withLong:1];
    if ([((NetI2pUtilKeyRing *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyRing])) getWithId:[msg getKey]] != nil) NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
    else NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
  }
  else {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.storeRouterInfoSent" withLong:1];
    if ([((NetI2pRouterTunnelPoolConnectChecker *) nil_chk(self->_connectChecker_)) canConnectWithInt:self->_connectMask_ withNetI2pDataRouterRouterInfo:peer]) NetI2pRouterNetworkdbKademliaStoreJob_sendDirectWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
    else NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(self, msg, peer, expiration);
  }
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendDirectWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration) {
  jlong token = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
  [((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(msg)) setReplyTokenWithLong:token];
  [msg setReplyGatewayWithNetI2pDataHash:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]];
  [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) addPendingWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash]];
  NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *onReply = create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, [self getContext], peer);
  NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *onFail = create_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(self, [self getContext], peer, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]);
  NetI2pRouterNetworkdbKademliaStoreMessageSelector *selector = create_NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_([self getContext], [self getJobId], peer, token, expiration);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@", [self getJobId], @": sending store directly to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([peer getIdentity])) getHash])];
  NetI2pRouterOutNetMessage *m = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_([self getContext], msg, expiration, NetI2pRouterNetworkdbKademliaStoreJob_STORE_PRIORITY, peer);
  [m setOnFailedReplyJobWithNetI2pRouterJob:onFail];
  [m setOnFailedSendJobWithNetI2pRouterJob:onFail];
  [m setOnReplyJobWithNetI2pRouterReplyJob:onReply];
  [m setReplySelectorWithNetI2pRouterMessageSelector:selector];
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterOutNetMessage:m];
  [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) processMessageWithNetI2pRouterOutNetMessage:m];
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughGarlicWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration) {
  jlong token = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash];
  id<NetI2pRouterTunnelInfo> replyTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundExploratoryTunnelWithNetI2pDataHash:to];
  if (replyTunnel == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:@"No reply inbound tunnels available!"];
    return;
  }
  NetI2pDataTunnelId *replyTunnelId = [replyTunnel getReceiveTunnelIdWithInt:0];
  [((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(msg)) setReplyTokenWithLong:token];
  [msg setReplyTunnelWithNetI2pDataTunnelId:replyTunnelId];
  [msg setReplyGatewayWithNetI2pDataHash:[replyTunnel getPeerWithInt:0]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$@$J", [self getJobId], @": send store thru expl. tunnel to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([peer getIdentity])) getHash], @"  w/ token expected ", token)];
  [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) addPendingWithNetI2pDataHash:to];
  id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundExploratoryTunnelWithNetI2pDataHash:to];
  if (outTunnel != nil) {
    NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *onReply = create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(self, [self getContext], peer, outTunnel, [msg getMessageSize]);
    NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *onFail = create_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(self, [self getContext], peer, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]);
    NetI2pRouterNetworkdbKademliaStoreMessageSelector *selector = create_NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_([self getContext], [self getJobId], peer, token, expiration);
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@$@", @"sending store to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([peer getIdentity])) getHash], @" through ", outTunnel, @": ", msg)];
    [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:selector withNetI2pRouterReplyJob:onReply withNetI2pRouterJob:onFail];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:nil withNetI2pDataHash:to];
  }
  else {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No outbound tunnels to send a dbStore out!"];
    [self fail];
  }
}

void NetI2pRouterNetworkdbKademliaStoreJob_sendStoreThroughClientWithNetI2pDataI2npDatabaseStoreMessage_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *self, NetI2pDataI2npDatabaseStoreMessage *msg, NetI2pDataRouterRouterInfo *peer, jlong expiration) {
  jlong token = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
  NetI2pDataHash *client = [((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(msg)) getKey];
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash];
  id<NetI2pRouterTunnelInfo> replyTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundTunnelWithNetI2pDataHash:client withNetI2pDataHash:to];
  if (replyTunnel == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No reply inbound tunnels available!"];
    [self fail];
    return;
  }
  NetI2pDataTunnelId *replyTunnelId = [replyTunnel getReceiveTunnelIdWithInt:0];
  [msg setReplyTokenWithLong:token];
  [msg setReplyTunnelWithNetI2pDataTunnelId:replyTunnelId];
  [msg setReplyGatewayWithNetI2pDataHash:[replyTunnel getPeerWithInt:0]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$J", [self getJobId], @": send(dbStore) w/ token expected ", token)];
  id<NetI2pRouterTunnelInfo> outTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundTunnelWithNetI2pDataHash:client withNetI2pDataHash:to];
  if (outTunnel != nil) {
    id<NetI2pDataI2npI2NPMessage> sent;
    jboolean shouldEncrypt = NetI2pRouterNetworkdbKademliaStoreJob_supportsEncryptionWithNetI2pDataRouterRouterInfo_(peer);
    if (shouldEncrypt) {
      NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *wm = NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_([self getContext], msg, client, peer);
      if (wm == nil) {
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Fail garlic encrypting from: ", client)];
        [self fail];
        return;
      }
      sent = [wm getMessage];
      [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) addPendingWithNetI2pDataHash:to withNetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage:wm];
    }
    else {
      [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) addPendingWithNetI2pDataHash:to];
      [self->_state_ replyTimeoutWithNetI2pDataHash:to];
      [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(self, [self getContext])];
      return;
    }
    NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *onReply = create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(self, [self getContext], peer, outTunnel, [((id<NetI2pDataI2npI2NPMessage>) nil_chk(sent)) getMessageSize]);
    NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *onFail = create_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(self, [self getContext], peer, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]);
    NetI2pRouterNetworkdbKademliaStoreMessageSelector *selector = create_NetI2pRouterNetworkdbKademliaStoreMessageSelector_initWithNetI2pRouterRouterContext_withLong_withNetI2pDataRouterRouterInfo_withLong_withLong_([self getContext], [self getJobId], peer, token, expiration);
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
      [self->_log_ debugWithNSString:JreStrcat("$@$@$@", @"sending encrypted store to ", [((NetI2pDataRouterRouterIdentity *) nil_chk([peer getIdentity])) getHash], @" through ", outTunnel, @": ", sent)];
    }
    [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:selector withNetI2pRouterReplyJob:onReply withNetI2pRouterJob:onFail];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:sent withNetI2pDataTunnelId:[outTunnel getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:nil withNetI2pDataHash:to];
  }
  else {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No outbound tunnels to send a dbStore out - delaying..."];
    [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(self->_state_)) replyTimeoutWithNetI2pDataHash:to];
    id<NetI2pRouterJob> waiter = create_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(self, [self getContext]);
    [((NetI2pRouterJobTiming *) nil_chk([waiter getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + 3 * 1000];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:waiter];
  }
}

jboolean NetI2pRouterNetworkdbKademliaStoreJob_supportsEncryptionWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri) {
  NetI2pRouterNetworkdbKademliaStoreJob_initialize();
  NSString *v = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getVersion];
  return NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterNetworkdbKademliaStoreJob_MIN_ENCRYPTION_VERSION) >= 0;
}

jboolean NetI2pRouterNetworkdbKademliaStoreJob_shouldStoreToWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *ri) {
  NetI2pRouterNetworkdbKademliaStoreJob_initialize();
  NSString *v = [((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getVersion];
  return NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pRouterNetworkdbKademliaStoreJob_MIN_STORE_VERSION) >= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreJob)

@implementation NetI2pRouterNetworkdbKademliaStoreJob_WaitJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext {
  NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(self, outer$, enclosingContext);
  return self;
}

- (void)runJob {
  NetI2pRouterNetworkdbKademliaStoreJob_sendNext(this$0_);
}

- (NSString *)getName {
  return @"Kademlia Store Send Delay";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaStoreJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterNetworkdbKademliaStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreJob_WaitJob = { "WaitJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob;
}

@end

void NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
}

NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *new_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_, outer$, enclosingContext)
}

NetI2pRouterNetworkdbKademliaStoreJob_WaitJob *create_NetI2pRouterNetworkdbKademliaStoreJob_WaitJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_, outer$, enclosingContext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreJob_WaitJob)

@implementation NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(self, outer$, enclosingContext, peer);
  return self;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                   withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendThrough
                                                      withInt:(jint)size {
  NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(self, outer$, enclosingContext, peer, sendThrough, size);
  return self;
}

- (NSString *)getName {
  return @"Kademlia Store Send Success";
}

- (void)runJob {
  NetI2pDataHash *hash_ = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash];
  NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *wm = [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(this$0_->_state_)) getPendingMessageWithNetI2pDataHash:hash_];
  if (wm != nil) [wm acked];
  jlong howLong = [this$0_->_state_ confirmedWithNetI2pDataHash:hash_];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("J$@$$$J", [this$0_ getJobId], @": Marking store of ", [this$0_->_state_ getTarget], @" to ", [((NetI2pDataHash *) nil_chk(hash_)) toBase64], @" successful after ", howLong)];
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreSentWithNetI2pDataHash:hash_ withLong:howLong];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.ackTime" withLong:howLong withLong:howLong];
  if ((_sendThrough_ != nil) && (_msgSize_ > 0)) {
    if ([this$0_->_log_ shouldDebug]) [this$0_->_log_ debugWithNSString:JreStrcat("$I$@$J", @"sent a ", _msgSize_, @" byte netDb message through tunnel ", _sendThrough_, @" after ", howLong)];
    for (jint i = 0; i < [((id<NetI2pRouterTunnelInfo>) nil_chk(_sendThrough_)) getLength]; i++) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) tunnelDataPushedWithNetI2pDataHash:[_sendThrough_ getPeerWithInt:i] withLong:howLong withInt:_msgSize_];
    [_sendThrough_ incrementVerifiedBytesTransferredWithInt:_msgSize_];
  }
  if (_sendThrough_ == nil) {
    [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) mayDisconnectWithNetI2pDataHash:[_peer_ getHash]];
  }
  if ([this$0_->_state_ getCompleteCount] >= [this$0_ getRedundancy]) {
    [this$0_ succeed];
  }
  else {
    NetI2pRouterNetworkdbKademliaStoreJob_sendNext(this$0_);
  }
}

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_sendThrough_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaStoreJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:);
  methods[1].selector = @selector(initWithNetI2pRouterNetworkdbKademliaStoreJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withNetI2pRouterTunnelInfo:withInt:);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(runJob);
  methods[4].selector = @selector(setMessageWithNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sendThrough_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_msgSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;LNetI2pRouterTunnelInfo;I", "setMessage", "LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterNetworkdbKademliaStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob = { "SendSuccessJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 5, 4, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob;
}

@end

void NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(self, outer$, enclosingContext, peer, nil, 0);
}

NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *new_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_, outer$, enclosingContext, peer)
}

NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_, outer$, enclosingContext, peer)
}

void NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
  JreStrongAssign(&self->_peer_, peer);
  JreStrongAssign(&self->_sendThrough_, sendThrough);
  if (size <= 0) self->_msgSize_ = 0;
  else self->_msgSize_ = ((size + 1023) / 1024) * 1024;
}

NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *new_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_, outer$, enclosingContext, peer, sendThrough, size)
}

NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob *create_NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> sendThrough, jint size) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withInt_, outer$, enclosingContext, peer, sendThrough, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreJob_SendSuccessJob)

@implementation NetI2pRouterNetworkdbKademliaStoreJob_FailedJob

- (instancetype)initWithNetI2pRouterNetworkdbKademliaStoreJob:(NetI2pRouterNetworkdbKademliaStoreJob *)outer$
                                withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                               withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                     withLong:(jlong)sendOn {
  NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(self, outer$, enclosingContext, peer, sendOn);
  return self;
}

- (void)runJob {
  NetI2pDataHash *hash_ = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("J$$$@", [this$0_ getJobId], @": Peer ", [((NetI2pDataHash *) nil_chk(hash_)) toBase64], @" timed out sending ", [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(this$0_->_state_)) getTarget])];
  NetI2pRouterNetworkdbKademliaMessageWrapper_WrappedMessage *wm = [((NetI2pRouterNetworkdbKademliaStoreState *) nil_chk(this$0_->_state_)) getPendingMessageWithNetI2pDataHash:hash_];
  if (wm != nil) [wm fail];
  [this$0_->_state_ replyTimeoutWithNetI2pDataHash:hash_];
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbStoreFailedWithNetI2pDataHash:hash_];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.replyTimeout" withLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _sendOn_];
  NetI2pRouterNetworkdbKademliaStoreJob_sendNext(this$0_);
}

- (NSString *)getName {
  return @"Kademlia Store Send Failed";
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaStoreJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withLong:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaStoreJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sendOn_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;J", "LNetI2pRouterNetworkdbKademliaStoreJob;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaStoreJob_FailedJob = { "FailedJob", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob;
}

@end

void NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *self, NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, enclosingContext);
  JreStrongAssign(&self->_peer_, peer);
  self->_sendOn_ = sendOn;
}

NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *new_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_, outer$, enclosingContext, peer, sendOn)
}

NetI2pRouterNetworkdbKademliaStoreJob_FailedJob *create_NetI2pRouterNetworkdbKademliaStoreJob_FailedJob_initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_(NetI2pRouterNetworkdbKademliaStoreJob *outer$, NetI2pRouterRouterContext *enclosingContext, NetI2pDataRouterRouterInfo *peer, jlong sendOn) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob, initWithNetI2pRouterNetworkdbKademliaStoreJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withLong_, outer$, enclosingContext, peer, sendOn)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaStoreJob_FailedJob)
