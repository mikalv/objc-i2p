//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/kademlia/SelectionCollector.h"
#include "net/i2p/kademlia/XORComparator.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillPeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/peermanager/DBHistory.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/util/MaskedIPSet.h"
#include "net/i2p/router/util/RandomIterator.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterNetworkdbKademliaFloodfillPeerSelector ()

- (id<JavaUtilList>)selectFloodfillParticipantsWithJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                  withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets;

- (id<JavaUtilList>)selectFloodfillParticipantsIncludingUsWithNetI2pDataHash:(NetI2pDataHash *)key
                                                                     withInt:(jint)howMany
                                                             withJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                                withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets;

@end

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_NO_FAIL_STORE_OK(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_OK 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, NO_FAIL_STORE_OK, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_NO_FAIL_STORE_GOOD(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_GOOD 1200000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, NO_FAIL_STORE_GOOD, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_NO_FAIL_LOOKUP_OK(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_OK 75000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, NO_FAIL_LOOKUP_OK, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_NO_FAIL_LOOKUP_GOOD(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_GOOD 225000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, NO_FAIL_LOOKUP_GOOD, jint)

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_MAX_GOOD_RESP_TIME(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_MAX_GOOD_RESP_TIME 5000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, MAX_GOOD_RESP_TIME, jint)

inline jlong NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_HEARD_AGE(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_HEARD_AGE 3600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, HEARD_AGE, jlong)

inline jlong NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_get_INSTALL_AGE(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_INSTALL_AGE 7200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, INSTALL_AGE, jlong)

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *self, id<JavaUtilSet> toIgnore, NetI2pKademliaKBucketSet *kbuckets);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsIncludingUsWithNetI2pDataHash_withInt_withJavaUtilSet_withNetI2pKademliaKBucketSet_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *self, NetI2pDataHash *key, jint howMany, id<JavaUtilSet> toIgnore, NetI2pKademliaKBucketSet *kbuckets);

@interface NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector : NSObject < NetI2pKademliaSelectionCollector > {
 @public
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *this$0_;
  JavaUtilTreeSet *_sorted_;
  id<JavaUtilList> _floodfillMatches_;
  NetI2pDataHash *_key_;
  id<JavaUtilSet> _toIgnore_;
  jint _matches_;
  jint _wanted_;
}

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector:(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *)outer$
                                                        withNetI2pDataHash:(NetI2pDataHash *)key
                                                           withJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                                                   withInt:(jint)wanted;

- (void)addWithNetI2pDataSimpleDataStructure:(NetI2pDataHash *)entry_;

- (id<JavaUtilList>)getWithInt:(jint)howMany;

- (id<JavaUtilList>)getWithInt:(jint)howMany
                   withBoolean:(jboolean)preferConnected;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, _sorted_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, _floodfillMatches_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, _toIgnore_, id<JavaUtilSet>)

inline jint NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_get_EXTRA_MATCHES(void);
#define NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_EXTRA_MATCHES 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, EXTRA_MATCHES, jint)

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *self, NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted);

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *new_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector)

@implementation NetI2pRouterNetworkdbKademliaFloodfillPeerSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (id<JavaUtilList>)selectMostReliablePeersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                      withInt:(jint)maxNumRouters
                                              withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                                 withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return [self selectNearestExplicitThinWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:peersToIgnore withNetI2pKademliaKBucketSet:kbuckets withBoolean:true];
}

- (id<JavaUtilList>)selectNearestExplicitThinWithNetI2pDataHash:(NetI2pDataHash *)key
                                                        withInt:(jint)maxNumRouters
                                                withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                                   withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return [self selectNearestExplicitThinWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:peersToIgnore withNetI2pKademliaKBucketSet:kbuckets withBoolean:false];
}

- (id<JavaUtilList>)selectNearestExplicitThinWithNetI2pDataHash:(NetI2pDataHash *)key
                                                        withInt:(jint)maxNumRouters
                                                withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                                   withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets
                                                    withBoolean:(jboolean)preferConnected {
  if (peersToIgnore == nil) peersToIgnore = JavaUtilCollections_singletonWithId_([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]);
  else [peersToIgnore addWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]];
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *matches = create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(self, key, peersToIgnore, maxNumRouters);
  if (kbuckets == nil) return create_JavaUtilArrayList_init();
  [kbuckets getAllWithNetI2pKademliaSelectionCollector:matches];
  id<JavaUtilList> rv = [matches getWithInt:maxNumRouters withBoolean:preferConnected];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@$@$@$IC", @"Searching for ", maxNumRouters, @" peers close to ", key, @": ", rv, @" (not including ", peersToIgnore, @") [allHashes.size = ", [matches size], ']') withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Search by")];
  return rv;
}

- (id<JavaUtilList>)selectFloodfillParticipantsWithNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  id<JavaUtilSet> ignore = JavaUtilCollections_singletonWithId_([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]);
  return NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(self, ignore, kbuckets);
}

- (id<JavaUtilList>)selectFloodfillParticipantsWithJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                  withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(self, toIgnore, kbuckets);
}

- (id<JavaUtilList>)selectFloodfillParticipantsWithNetI2pDataHash:(NetI2pDataHash *)key
                                                          withInt:(jint)maxNumRouters
                                     withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  id<JavaUtilSet> ignore = JavaUtilCollections_singletonWithId_([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]);
  return [self selectFloodfillParticipantsWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:ignore withNetI2pKademliaKBucketSet:kbuckets];
}

- (id<JavaUtilList>)selectFloodfillParticipantsWithNetI2pDataHash:(NetI2pDataHash *)key
                                                          withInt:(jint)howMany
                                                  withJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                     withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  if (toIgnore == nil) {
    toIgnore = JavaUtilCollections_singletonWithId_([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]);
  }
  else if (![toIgnore containsWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]]) {
    toIgnore = create_JavaUtilHashSet_initWithJavaUtilCollection_(toIgnore);
    [toIgnore addWithId:[_context_ routerHash]];
  }
  return NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsIncludingUsWithNetI2pDataHash_withInt_withJavaUtilSet_withNetI2pKademliaKBucketSet_(self, key, howMany, toIgnore, kbuckets);
}

- (id<JavaUtilList>)selectFloodfillParticipantsIncludingUsWithNetI2pDataHash:(NetI2pDataHash *)key
                                                                     withInt:(jint)howMany
                                                             withJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                                withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  return NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsIncludingUsWithNetI2pDataHash_withInt_withJavaUtilSet_withNetI2pKademliaKBucketSet_(self, key, howMany, toIgnore, kbuckets);
}

- (id<JavaUtilList>)selectNearestWithNetI2pDataHash:(NetI2pDataHash *)key
                                            withInt:(jint)maxNumRouters
                                    withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore
                       withNetI2pKademliaKBucketSet:(NetI2pKademliaKBucketSet *)kbuckets {
  NetI2pDataHash *rkey = [((NetI2pDataRoutingKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routingKeyGenerator])) getRoutingKeyWithNetI2pDataHash:key];
  if (peersToIgnore != nil && [peersToIgnore containsWithId:JreLoadStatic(NetI2pDataHash, FAKE_HASH)]) {
    [peersToIgnore addAllWithJavaUtilCollection:NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(self, peersToIgnore, kbuckets)];
    NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *matches = create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(self, rkey, peersToIgnore, maxNumRouters);
    [((NetI2pKademliaKBucketSet *) nil_chk(kbuckets)) getAllWithNetI2pKademliaSelectionCollector:matches];
    return [matches getWithInt:maxNumRouters];
  }
  else {
    return NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsIncludingUsWithNetI2pDataHash_withInt_withJavaUtilSet_withNetI2pKademliaKBucketSet_(self, rkey, maxNumRouters, peersToIgnore, kbuckets);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 4, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 7, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 7, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 7, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 14, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 15, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectMostReliablePeersWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[2].selector = @selector(selectNearestExplicitThinWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[3].selector = @selector(selectNearestExplicitThinWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:withBoolean:);
  methods[4].selector = @selector(selectFloodfillParticipantsWithNetI2pKademliaKBucketSet:);
  methods[5].selector = @selector(selectFloodfillParticipantsWithJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[6].selector = @selector(selectFloodfillParticipantsWithNetI2pDataHash:withInt:withNetI2pKademliaKBucketSet:);
  methods[7].selector = @selector(selectFloodfillParticipantsWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[8].selector = @selector(selectFloodfillParticipantsIncludingUsWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  methods[9].selector = @selector(selectNearestWithNetI2pDataHash:withInt:withJavaUtilSet:withNetI2pKademliaKBucketSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_FAIL_STORE_OK", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_OK, 0x1a, -1, -1, -1, -1 },
    { "NO_FAIL_STORE_GOOD", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_GOOD, 0x1a, -1, -1, -1, -1 },
    { "NO_FAIL_LOOKUP_OK", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_OK, 0x1a, -1, -1, -1, -1 },
    { "NO_FAIL_LOOKUP_GOOD", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_GOOD, 0x1a, -1, -1, -1, -1 },
    { "MAX_GOOD_RESP_TIME", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_MAX_GOOD_RESP_TIME, 0x1a, -1, -1, -1, -1 },
    { "HEARD_AGE", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_HEARD_AGE, 0x1a, -1, -1, -1, -1 },
    { "INSTALL_AGE", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_INSTALL_AGE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectMostReliablePeers", "LNetI2pDataHash;ILJavaUtilSet;LNetI2pKademliaKBucketSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "selectNearestExplicitThin", "LNetI2pDataHash;ILJavaUtilSet;LNetI2pKademliaKBucketSet;Z", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;Z)Ljava/util/List<Lnet/i2p/data/Hash;>;", "selectFloodfillParticipants", "LNetI2pKademliaKBucketSet;", "(Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "LJavaUtilSet;LNetI2pKademliaKBucketSet;", "(Ljava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "LNetI2pDataHash;ILNetI2pKademliaKBucketSet;", "(Lnet/i2p/data/Hash;ILnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "selectFloodfillParticipantsIncludingUs", "selectNearest", "LNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillPeerSelector = { "FloodfillPeerSelector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x0, 10, 7, -1, 16, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterNetworkdbKademliaPeerSelector_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *new_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector, initWithNetI2pRouterRouterContext_, ctx)
}

id<JavaUtilList> NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *self, id<JavaUtilSet> toIgnore, NetI2pKademliaKBucketSet *kbuckets) {
  id<JavaUtilSet> set = [((id<NetI2pRouterPeerManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) peerManager])) getPeersByCapabilityWithChar:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL];
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilSet>) nil_chk(set)) size]);
  for (NetI2pDataHash * __strong h in set) {
    if ((toIgnore != nil && [toIgnore containsWithId:h]) || [((NetI2pRouterBanlist *) nil_chk([self->_context_ banlist])) isBanlistedForeverWithNetI2pDataHash:h]) continue;
    [rv addWithId:h];
  }
  return rv;
}

id<JavaUtilList> NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsIncludingUsWithNetI2pDataHash_withInt_withJavaUtilSet_withNetI2pKademliaKBucketSet_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *self, NetI2pDataHash *key, jint howMany, id<JavaUtilSet> toIgnore, NetI2pKademliaKBucketSet *kbuckets) {
  id<JavaUtilList> ffs = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_selectFloodfillParticipantsWithJavaUtilSet_withNetI2pKademliaKBucketSet_(self, toIgnore, kbuckets);
  JavaUtilTreeSet *sorted = create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(key));
  [sorted addAllWithJavaUtilCollection:ffs];
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(howMany);
  id<JavaUtilList> okff = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(ffs)) size]);
  id<JavaUtilList> badff = create_JavaUtilArrayList_initWithInt_([ffs size]);
  jint found = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong installed = [self->_context_ getPropertyWithNSString:@"router.firstInstalled" withLong:0LL];
  jboolean enforceHeard = installed > 0 && (now - installed) > NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_INSTALL_AGE;
  jdouble maxFailRate = 100;
  if ([((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getUptime] > 60 * 60 * 1000) {
    NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"peer.failedLookupRate"];
    if (rs != nil) {
      NetI2pStatRate *r = [rs getRateWithLong:60 * 60 * 1000];
      if (r != nil) {
        jdouble currentFailRate = [r getAverageValue];
        maxFailRate = JavaLangMath_maxWithDouble_withDouble_(0.20, 1.5 * currentFailRate);
      }
    }
  }
  jint limit = JavaLangMath_maxWithInt_withInt_(5, howMany);
  limit = JavaLangMath_minWithInt_withInt_(limit, [ffs size]);
  NetI2pRouterUtilMaskedIPSet *maskedIPs = create_NetI2pRouterUtilMaskedIPSet_initWithInt_(limit * 3);
  for (jint i = 0; found < howMany && i < limit; i++) {
    NetI2pDataHash *entry_ = [sorted first];
    if (entry_ == nil) break;
    [sorted removeWithId:entry_];
    NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:entry_];
    NetI2pRouterUtilMaskedIPSet *entryIPs = create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(self->_context_, entry_, info, 2);
    jboolean sameIP = false;
    for (NSString * __strong ip in entryIPs) {
      if (![maskedIPs addWithId:ip]) sameIP = true;
    }
    if (sameIP) {
      [badff addWithId:entry_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Same /16, family, or port: ", entry_)];
    }
    else if (info != nil && now - [info getPublished] > 3 * 60 * 60 * 1000) {
      [badff addWithId:entry_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Old: ", entry_)];
    }
    else if (info != nil && [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) isInBadCountryWithNetI2pDataRouterRouterInfo:info]) {
      [badff addWithId:entry_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Bad country: ", entry_)];
    }
    else if (info != nil && [((NSString *) nil_chk([info getBandwidthTier])) isEqual:@"L"]) {
      [badff addWithId:entry_];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Slow: ", entry_)];
    }
    else {
      NetI2pRouterPeermanagerPeerProfile *prof = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([self->_context_ profileOrganizer])) getProfileWithNetI2pDataHash:entry_];
      jdouble maxGoodRespTime = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_MAX_GOOD_RESP_TIME;
      NetI2pStatRateStat *ttst = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.testSuccessTime"];
      if (ttst != nil) {
        NetI2pStatRate *tunnelTestTime = [ttst getRateWithLong:10 * 60 * 1000];
        if (tunnelTestTime != nil && [tunnelTestTime getAverageValue] > 500) maxGoodRespTime = 2 * [tunnelTestTime getAverageValue];
      }
      if (prof != nil) {
        if (enforceHeard && [prof getFirstHeardAbout] > now - NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_HEARD_AGE) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Bad (new): ", entry_)];
          [badff addWithId:entry_];
        }
        else if ([prof getDBHistory] != nil) {
          if ([((NetI2pStatRate *) nil_chk([((NetI2pStatRateStat *) nil_chk([prof getDbResponseTime])) getRateWithLong:10 * 60 * 1000])) getAverageValue] < maxGoodRespTime && [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastStoreFailed] < now - NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_GOOD && [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastLookupFailed] < now - NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_GOOD && [((NetI2pStatRate *) nil_chk([((NetI2pStatRateStat *) nil_chk([((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getFailedLookupRate])) getRateWithLong:60 * 60 * 1000])) getAverageValue] < maxFailRate) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Good: ", entry_)];
            [rv addWithId:entry_];
            found++;
          }
          else if ([((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastStoreFailed] <= [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastStoreSuccessful] || [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastLookupFailed] <= [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastLookupSuccessful] || ([((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastStoreFailed] < now - NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_STORE_OK && [((NetI2pRouterPeermanagerDBHistory *) nil_chk([prof getDBHistory])) getLastLookupFailed] < now - NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_NO_FAIL_LOOKUP_OK)) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"OK: ", entry_)];
            [okff addWithId:entry_];
          }
          else {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Bad (DB): ", entry_)];
            [badff addWithId:entry_];
          }
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Bad (no hist): ", entry_)];
          [badff addWithId:entry_];
        }
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Bad (no prof): ", entry_)];
        [badff addWithId:entry_];
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@$@$@", @"Good: ", rv, @" OK: ", okff, @" Bad: ", badff)];
  for (jint i = 0; found < howMany && i < [okff size]; i++) {
    [rv addWithId:[okff getWithInt:i]];
    found++;
  }
  for (jint i = 0; found < howMany && i < [badff size]; i++) {
    [rv addWithId:[badff getWithInt:i]];
    found++;
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector)

@implementation NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector

- (instancetype)initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector:(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *)outer$
                                                        withNetI2pDataHash:(NetI2pDataHash *)key
                                                           withJavaUtilSet:(id<JavaUtilSet>)toIgnore
                                                                   withInt:(jint)wanted {
  NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(self, outer$, key, toIgnore, wanted);
  return self;
}

- (void)addWithNetI2pDataSimpleDataStructure:(NetI2pDataHash *)entry_ {
  if ((_toIgnore_ != nil) && ([((id<JavaUtilSet>) nil_chk(_toIgnore_)) containsWithId:entry_])) return;
  if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) banlist])) isBanlistedForeverWithNetI2pDataHash:entry_]) return;
  NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([this$0_->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:entry_];
  if (info != nil && NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_isFloodfillWithNetI2pDataRouterRouterInfo_(info)) {
    [((id<JavaUtilList>) nil_chk(_floodfillMatches_)) addWithId:entry_];
  }
  else {
    if ((!NetI2pRouterNetworkdbKademliaSearchJob_onlyQueryFloodfillPeersWithNetI2pRouterRouterContext_(this$0_->_context_)) && (_wanted_ + NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_EXTRA_MATCHES > _matches_) && (_key_ != nil)) {
      [((JavaUtilTreeSet *) nil_chk(_sorted_)) addWithId:entry_];
    }
    else {
      return;
    }
  }
  _matches_++;
}

- (id<JavaUtilList>)getWithInt:(jint)howMany {
  return [self getWithInt:howMany withBoolean:false];
}

- (id<JavaUtilList>)getWithInt:(jint)howMany
                   withBoolean:(jboolean)preferConnected {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(howMany);
  id<JavaUtilList> badff = create_JavaUtilArrayList_initWithInt_(howMany);
  id<JavaUtilList> unconnectedff = create_JavaUtilArrayList_initWithInt_(howMany);
  jint found = 0;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  for (id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(_floodfillMatches_); (found < howMany) && [iter hasNext]; ) {
    NetI2pDataHash *entry_ = [iter next];
    NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([this$0_->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:entry_];
    if (info != nil && now - [info getPublished] > 3 * 60 * 60 * 1000) {
      [badff addWithId:entry_];
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Skipping, published a while ago: ", entry_)];
    }
    else {
      NetI2pRouterPeermanagerPeerProfile *prof = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([this$0_->_context_ profileOrganizer])) getProfileWithNetI2pDataHash:entry_];
      if (prof != nil && now - [prof getLastSendFailed] < 30 * 60 * 1000) {
        [badff addWithId:entry_];
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Skipping, recent failed send: ", entry_)];
      }
      else if (preferConnected && ![((NetI2pRouterCommSystemFacade *) nil_chk([this$0_->_context_ commSystem])) isEstablishedWithNetI2pDataHash:entry_]) {
        [unconnectedff addWithId:entry_];
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Skipping, unconnected: ", entry_)];
      }
      else {
        [rv addWithId:entry_];
        found++;
      }
    }
  }
  for (jint i = 0; found < howMany && i < [unconnectedff size]; i++) {
    [rv addWithId:[unconnectedff getWithInt:i]];
    found++;
  }
  for (jint i = 0; found < howMany && i < [badff size]; i++) {
    [rv addWithId:[badff getWithInt:i]];
    found++;
  }
  for (jint i = [rv size]; i < howMany; i++) {
    if ([((JavaUtilTreeSet *) nil_chk(_sorted_)) isEmpty]) break;
    NetI2pDataHash *entry_ = [_sorted_ first];
    [rv addWithId:entry_];
    [_sorted_ removeWithId:entry_];
  }
  return rv;
}

- (jint)size {
  return _matches_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_sorted_);
  RELEASE_(_floodfillMatches_);
  RELEASE_(_key_);
  RELEASE_(_toIgnore_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 7, -1, 8, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector:withNetI2pDataHash:withJavaUtilSet:withInt:);
  methods[1].selector = @selector(addWithNetI2pDataSimpleDataStructure:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(getWithInt:withBoolean:);
  methods[4].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbKademliaFloodfillPeerSelector;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_sorted_", "LJavaUtilTreeSet;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_floodfillMatches_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_toIgnore_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_matches_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_wanted_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "EXTRA_MATCHES", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_EXTRA_MATCHES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;LJavaUtilSet;I", "(Lnet/i2p/data/Hash;Ljava/util/Set<Lnet/i2p/data/Hash;>;I)V", "add", "LNetI2pDataHash;", "get", "I", "(I)Ljava/util/List<Lnet/i2p/data/Hash;>;", "IZ", "(IZ)Ljava/util/List<Lnet/i2p/data/Hash;>;", "Ljava/util/TreeSet<Lnet/i2p/data/Hash;>;", "Ljava/util/List<Lnet/i2p/data/Hash;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "LNetI2pRouterNetworkdbKademliaFloodfillPeerSelector;", "Ljava/lang/Object;Lnet/i2p/kademlia/SelectionCollector<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector = { "FloodfillSelectionCollector", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x2, 5, 8, 12, -1, -1, 13, -1 };
  return &_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector;
}

@end

void NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *self, NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_key_, key);
  JreStrongAssignAndConsume(&self->_sorted_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(key)));
  JreStrongAssignAndConsume(&self->_floodfillMatches_, new_JavaUtilArrayList_initWithInt_(8));
  JreStrongAssign(&self->_toIgnore_, toIgnore);
  self->_wanted_ = wanted;
}

NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *new_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_, outer$, key, toIgnore, wanted)
}

NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector *create_NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector_initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector *outer$, NetI2pDataHash *key, id<JavaUtilSet> toIgnore, jint wanted) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector, initWithNetI2pRouterNetworkdbKademliaFloodfillPeerSelector_withNetI2pDataHash_withJavaUtilSet_withInt_, outer$, key, toIgnore, wanted)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaFloodfillPeerSelector_FloodfillSelectionCollector)
