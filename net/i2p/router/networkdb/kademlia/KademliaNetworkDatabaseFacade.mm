//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/crypto/SigAlgo.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/KeyCertificate.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/kademlia/RejectTrimmer.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/crypto/FamilyKeyCrypto.h"
#include "net/i2p/router/networkdb/PublishLocalRouterInfoJob.h"
#include "net/i2p/router/networkdb/kademlia/DataStore.h"
#include "net/i2p/router/networkdb/kademlia/ExpireLeasesJob.h"
#include "net/i2p/router/networkdb/kademlia/ExpireRoutersJob.h"
#include "net/i2p/router/networkdb/kademlia/KademliaNetworkDatabaseFacade.h"
#include "net/i2p/router/networkdb/kademlia/NegativeLookupCache.h"
#include "net/i2p/router/networkdb/kademlia/PeerSelector.h"
#include "net/i2p/router/networkdb/kademlia/PersistentDataStore.h"
#include "net/i2p/router/networkdb/kademlia/RepublishLeaseSetJob.h"
#include "net/i2p/router/networkdb/kademlia/SearchJob.h"
#include "net/i2p/router/networkdb/kademlia/StartExplorersJob.h"
#include "net/i2p/router/networkdb/kademlia/UnsupportedCryptoException.h"
#include "net/i2p/router/networkdb/reseed/ReseedChecker.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade () {
 @public
  NetI2pKademliaKBucketSet *_kb_;
  id<NetI2pRouterNetworkdbKademliaDataStore> _ds_;
  NSString *_dbDir_;
  id<JavaUtilSet> _exploreKeys_;
  jboolean _initialized_;
  jlong _started_;
  NetI2pRouterNetworkdbKademliaStartExplorersJob *_exploreJob_;
  jlong _lastExploreNew_;
  NetI2pRouterNetworkdbReseedReseedChecker *_reseedChecker_;
  volatile_jlong _lastRIPublishTime_;
  NetI2pRouterNetworkdbKademliaNegativeLookupCache *_negativeCache_;
  id<JavaUtilMap> _publishingLeaseSets_;
  id<JavaUtilMap> _activeRequests_;
}

- (NSString *)validateWithNetI2pDataHash:(NetI2pDataHash *)key
                  withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet;

- (NSString *)validateWithNetI2pDataHash:(NetI2pDataHash *)key
          withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo;

- (void)processStoreFailureWithNetI2pDataHash:(NetI2pDataHash *)h
                  withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)entry_;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _kb_, NetI2pKademliaKBucketSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _ds_, id<NetI2pRouterNetworkdbKademliaDataStore>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _dbDir_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _exploreKeys_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _exploreJob_, NetI2pRouterNetworkdbKademliaStartExplorersJob *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _reseedChecker_, NetI2pRouterNetworkdbReseedReseedChecker *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _negativeCache_, NetI2pRouterNetworkdbKademliaNegativeLookupCache *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _publishingLeaseSets_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, _activeRequests_, id<JavaUtilMap>)

inline jboolean NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_QUIET(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_QUIET false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, QUIET, jboolean)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_ROUTER_INFO_EXPIRATION(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION 97200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, ROUTER_INFO_EXPIRATION, jlong)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_ROUTER_INFO_EXPIRATION_MIN(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_MIN 5400000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, ROUTER_INFO_EXPIRATION_MIN, jlong)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_ROUTER_INFO_EXPIRATION_SHORT(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_SHORT 4500000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, ROUTER_INFO_EXPIRATION_SHORT, jlong)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_ROUTER_INFO_EXPIRATION_FLOODFILL(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_FLOODFILL 3600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, ROUTER_INFO_EXPIRATION_FLOODFILL, jlong)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_ROUTER_INFO_EXPIRATION_INTRODUCED(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_INTRODUCED 2700000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, ROUTER_INFO_EXPIRATION_INTRODUCED, jlong)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_EXPLORE_JOB_DELAY(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_EXPLORE_JOB_DELAY 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, EXPLORE_JOB_DELAY, jlong)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_BUCKET_SIZE(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_BUCKET_SIZE 24
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, BUCKET_SIZE, jint)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_KAD_B(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_KAD_B 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, KAD_B, jint)

inline jlong NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_PUBLISH_DELAY(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_DELAY 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, PUBLISH_DELAY, jlong)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_MIN_ROUTERS(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_ROUTERS 90
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, MIN_ROUTERS, jint)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_MIN_PER_PEER_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_PER_PEER_TIMEOUT 2000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, MIN_PER_PEER_TIMEOUT, jint)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_MAX_PER_PEER_TIMEOUT(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_PER_PEER_TIMEOUT 7000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, MAX_PER_PEER_TIMEOUT, jint)

inline jint NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_get_TIMEOUT_MULTIPLIER(void);
#define NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_TIMEOUT_MULTIPLIER 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade, TIMEOUT_MULTIPLIER, jint)

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataLeaseSet_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *key, NetI2pDataLeaseSet *leaseSet);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *key, NetI2pDataRouterRouterInfo *routerInfo);

__attribute__((unused)) static void NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_processStoreFailureWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *h, NetI2pDataDatabaseEntry *entry_);

NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR = @"router.networkDatabase.dbDir";
NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR = @"netDb";

@implementation NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade

+ (jlong)DONT_FAIL_PERIOD {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DONT_FAIL_PERIOD;
}

+ (NSString *)PROP_DB_DIR {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR;
}

+ (NSString *)DEFAULT_DB_DIR {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR;
}

+ (jint)MIN_RESEED {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_RESEED;
}

+ (jint)MIN_REMAINING_ROUTERS {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_REMAINING_ROUTERS;
}

+ (jlong)PUBLISH_JOB_DELAY {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_JOB_DELAY;
}

+ (jint)MAX_EXPLORE_QUEUE {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_EXPLORE_QUEUE;
}

+ (jlong)MAX_LEASE_FUTURE {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_LEASE_FUTURE;
}

- (void)searchCompleteWithNetI2pDataHash:(NetI2pDataHash *)key {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"search Complete: ", key)];
  @synchronized(_activeRequests_) {
    [((id<JavaUtilMap>) nil_chk(_activeRequests_)) removeWithId:key];
  }
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jboolean)isInitialized {
  return _initialized_ && _ds_ != nil && [_ds_ isInitialized];
}

- (NetI2pRouterNetworkdbKademliaPeerSelector *)createPeerSelector {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pRouterNetworkdbKademliaPeerSelector *)getPeerSelector {
  return _peerSelector_;
}

- (NetI2pRouterNetworkdbReseedReseedChecker *)reseedChecker {
  return _reseedChecker_;
}

- (NetI2pKademliaKBucketSet *)getKBuckets {
  return _kb_;
}

- (id<NetI2pRouterNetworkdbKademliaDataStore>)getDataStore {
  return _ds_;
}

- (jlong)getLastExploreNewDate {
  return _lastExploreNew_;
}

- (void)setLastExploreNewDateWithLong:(jlong)when {
  _lastExploreNew_ = when;
  if (_exploreJob_ != nil) [_exploreJob_ updateExploreSchedule];
}

- (id<JavaUtilSet>)getExploreKeys {
  if (!_initialized_) return JavaUtilCollections_emptySet();
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(_exploreKeys_);
}

- (void)removeFromExploreKeysWithJavaUtilCollection:(id<JavaUtilCollection>)toRemove {
  if (!_initialized_) return;
  [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) removeAllWithJavaUtilCollection:toRemove];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.exploreKeySet" withLong:[_exploreKeys_ size]];
}

- (void)queueForExplorationWithJavaUtilCollection:(id<JavaUtilCollection>)keys {
  if (!_initialized_) return;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(keys)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) size] < NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_EXPLORE_QUEUE; ) {
    [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) addWithId:[iter next]];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.exploreKeySet" withLong:[((id<JavaUtilSet>) nil_chk(_exploreKeys_)) size]];
}

- (void)shutdown {
  @synchronized(self) {
    _initialized_ = false;
    if (_kb_ != nil) [_kb_ clear];
    if (_ds_ != nil) [_ds_ stop];
    [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) clear];
    [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) clear];
  }
}

- (void)restart {
  @synchronized(self) {
    JreStrongAssign(&_dbDir_, [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getConfigSettingWithNSString:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR]);
    if (_dbDir_ == nil) {
      [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$$$$C", @"No DB dir specified [", NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR, @"], using [", NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR, ']')];
      JreStrongAssign(&_dbDir_, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR);
    }
    [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) restart];
    [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) clear];
    _initialized_ = true;
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getRouterInfo];
    [self publishWithNetI2pDataRouterRouterInfo:ri];
  }
}

- (void)rescan {
  if ([self isInitialized]) [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) rescan];
}

- (NSString *)getDbDir {
  return _dbDir_;
}

- (void)startup {
  @synchronized(self) {
    [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Starting up the kademlia network database"];
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getRouterInfo];
    NSString *dbDir = [_context_ getPropertyWithNSString:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR withNSString:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR];
    JreStrongAssignAndConsume(&_kb_, new_NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(_context_, [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getIdentity])) getHash], NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_BUCKET_SIZE, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_KAD_B, create_NetI2pKademliaRejectTrimmer_init()));
    @try {
      JreStrongAssignAndConsume(&_ds_, new_NetI2pRouterNetworkdbKademliaPersistentDataStore_initWithNetI2pRouterRouterContext_withNSString_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(_context_, dbDir, self));
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Unable to initialize netdb storage", ioe);
    }
    JreStrongAssign(&_dbDir_, dbDir);
    JreStrongAssignAndConsume(&_negativeCache_, new_NetI2pRouterNetworkdbKademliaNegativeLookupCache_initWithNetI2pRouterRouterContext_(_context_));
    [self createHandlers];
    _initialized_ = true;
    _started_ = JavaLangSystem_currentTimeMillis();
    id<NetI2pRouterJob> elj = create_NetI2pRouterNetworkdbKademliaExpireLeasesJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(_context_, self);
    [((NetI2pRouterJobTiming *) nil_chk([elj getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 2 * 60 * 1000];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:elj];
    if (![((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) isDummy]) {
      id<NetI2pRouterJob> erj = create_NetI2pRouterNetworkdbKademliaExpireRoutersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(_context_, self);
      [((NetI2pRouterJobTiming *) nil_chk([erj getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_FLOODFILL + 10 * 60 * 1000];
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:erj];
    }
    {
      if (_exploreJob_ == nil) JreStrongAssignAndConsume(&_exploreJob_, new_NetI2pRouterNetworkdbKademliaStartExplorersJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_(_context_, self));
      [((NetI2pRouterJobTiming *) nil_chk([_exploreJob_ getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_EXPLORE_JOB_DELAY];
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:_exploreJob_];
    }
    id<NetI2pRouterJob> plrij = create_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_initWithNetI2pRouterRouterContext_(_context_);
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:plrij];
  }
}

- (void)createHandlers {
}

- (id<JavaUtilSet>)findNearestRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                withInt:(jint)maxNumRouters
                                        withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore {
  if (!_initialized_) return JavaUtilCollections_emptySet();
  return create_JavaUtilHashSet_initWithJavaUtilCollection_([((NetI2pRouterNetworkdbKademliaPeerSelector *) nil_chk(_peerSelector_)) selectNearestWithNetI2pDataHash:key withInt:maxNumRouters withJavaUtilSet:peersToIgnore withNetI2pKademliaKBucketSet:_kb_]);
}

- (id<JavaUtilSet>)getAllRouters {
  if (!_initialized_) return JavaUtilCollections_emptySet();
  id<JavaUtilSet> entries = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getMapEntries];
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_([((id<JavaUtilSet>) nil_chk(entries)) size]);
  for (id<JavaUtilMap_Entry> __strong entry_ in entries) {
    if ([((NetI2pDataDatabaseEntry *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
      [rv addWithId:[entry_ getKey]];
    }
  }
  return rv;
}

- (jint)getKnownRouters {
  if (_ds_ == nil) return 0;
  jint rv = 0;
  for (NetI2pDataDatabaseEntry * __strong ds in nil_chk([_ds_ getEntries])) {
    if ([((NetI2pDataDatabaseEntry *) nil_chk(ds)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) rv++;
  }
  return rv;
}

- (jint)getKnownLeaseSets {
  if (_ds_ == nil) return 0;
  jint rv = 0;
  for (NetI2pDataDatabaseEntry * __strong ds in nil_chk([_ds_ getEntries])) {
    if ([((NetI2pDataDatabaseEntry *) nil_chk(ds)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET && [((NetI2pDataLeaseSet *) cast_chk(ds, [NetI2pDataLeaseSet class])) getReceivedAsPublished]) rv++;
  }
  return rv;
}

- (jint)getKBucketSetSize {
  if (_kb_ == nil) return 0;
  return [_kb_ size];
}

- (NetI2pDataDatabaseEntry *)lookupLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (!_initialized_) return nil;
  NetI2pDataDatabaseEntry *rv = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key];
  if (rv == nil) return nil;
  if ([rv getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(rv, [NetI2pDataLeaseSet class]);
    if ([ls isCurrentWithLong:NetI2pRouterRouter_CLOCK_FUDGE_FACTOR]) return rv;
    else [self failWithNetI2pDataHash:key];
  }
  else if ([rv getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    @try {
      if ([self validateWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *) cast_chk(rv, [NetI2pDataRouterRouterInfo class])] == nil) return rv;
    }
    @catch (JavaLangIllegalArgumentException *iae) {
    }
    [self failWithNetI2pDataHash:key];
  }
  return nil;
}

- (NetI2pDataDatabaseEntry *)lookupLocallyWithoutValidationWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (!_initialized_) return nil;
  return [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key];
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs {
  [self lookupLeaseSetWithNetI2pDataHash:key withNetI2pRouterJob:onFindJob withNetI2pRouterJob:onFailedLookupJob withLong:timeoutMs withNetI2pDataHash:nil];
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs
                      withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  if (!_initialized_) return;
  NetI2pDataLeaseSet *ls = [self lookupLeaseSetLocallyWithNetI2pDataHash:key];
  if (ls != nil) {
    if (onFindJob != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFindJob];
  }
  else if ([self isNegativeCachedWithNetI2pDataHash:key]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$@", @"Negative cached, not searching LS: ", key)];
    if (onFailedLookupJob != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFailedLookupJob];
  }
  else {
    [self searchWithNetI2pDataHash:key withNetI2pRouterJob:onFindJob withNetI2pRouterJob:onFailedLookupJob withLong:timeoutMs withBoolean:true withNetI2pDataHash:fromLocalDest];
  }
}

- (void)lookupLeaseSetRemotelyWithNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  if (!_initialized_) return;
  [self searchWithNetI2pDataHash:key withNetI2pRouterJob:nil withNetI2pRouterJob:nil withLong:20 * 1000 withBoolean:true withNetI2pDataHash:fromLocalDest];
}

- (NetI2pDataLeaseSet *)lookupLeaseSetLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (!_initialized_) return nil;
  NetI2pDataDatabaseEntry *ds = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key];
  if (ds != nil) {
    if ([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
      NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(ds, [NetI2pDataLeaseSet class]);
      if ([ls isCurrentWithLong:NetI2pRouterRouter_CLOCK_FUDGE_FACTOR]) {
        return ls;
      }
      else {
        [self failWithNetI2pDataHash:key];
        [((id<JavaUtilSet>) nil_chk(_exploreKeys_)) addWithId:key];
        return nil;
      }
    }
    else {
      return nil;
    }
  }
  else {
    return nil;
  }
}

- (void)lookupDestinationWithNetI2pDataHash:(NetI2pDataHash *)key
                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFinishedJob
                                   withLong:(jlong)timeoutMs
                         withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  if (!_initialized_) return;
  NetI2pDataDestination *d = [self lookupDestinationLocallyWithNetI2pDataHash:key];
  if (d != nil) {
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFinishedJob];
  }
  else if ([self isNegativeCachedWithNetI2pDataHash:key]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$@", @"Negative cached, not searching dest: ", key)];
  }
  else {
    [self searchWithNetI2pDataHash:key withNetI2pRouterJob:onFinishedJob withNetI2pRouterJob:onFinishedJob withLong:timeoutMs withBoolean:true withNetI2pDataHash:fromLocalDest];
  }
}

- (NetI2pDataDestination *)lookupDestinationLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (!_initialized_) return nil;
  NetI2pDataDatabaseEntry *ds = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key];
  if (ds != nil) {
    if ([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
      NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(ds, [NetI2pDataLeaseSet class]);
      return [ls getDestination];
    }
  }
  else {
    return [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) getBadDestWithNetI2pDataHash:key];
  }
  return nil;
}

- (void)lookupRouterInfoWithNetI2pDataHash:(NetI2pDataHash *)key
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                  withLong:(jlong)timeoutMs {
  if (!_initialized_) return;
  NetI2pDataRouterRouterInfo *ri = [self lookupRouterInfoLocallyWithNetI2pDataHash:key];
  if (ri != nil) {
    if (onFindJob != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFindJob];
  }
  else if ([((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) banlist])) isBanlistedForeverWithNetI2pDataHash:key]) {
    if (onFailedLookupJob != nil) [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:onFailedLookupJob];
  }
  else if ([self isNegativeCachedWithNetI2pDataHash:key]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [_log_ infoWithNSString:JreStrcat("$@", @"Negative cached, not searching RI: ", key)];
  }
  else {
    [self searchWithNetI2pDataHash:key withNetI2pRouterJob:onFindJob withNetI2pRouterJob:onFailedLookupJob withLong:timeoutMs withBoolean:false];
  }
}

- (NetI2pDataRouterRouterInfo *)lookupRouterInfoLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (!_initialized_) return nil;
  NetI2pDataDatabaseEntry *ds = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key];
  if (ds != nil) {
    if ([ds getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
      jboolean valid = true;
      @try {
        valid = (nil == [self validateWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class])]);
      }
      @catch (JavaLangIllegalArgumentException *iae) {
        valid = false;
      }
      if (!valid) {
        [self failWithNetI2pDataHash:key];
        return nil;
      }
      return (NetI2pDataRouterRouterInfo *) cast_chk(ds, [NetI2pDataRouterRouterInfo class]);
    }
    else {
      return nil;
    }
  }
  else {
    return nil;
  }
}

- (void)publishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
  if (!_initialized_) return;
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(localLeaseSet)) getDestination])) calculateHash];
  @try {
    [self storeWithNetI2pDataHash:h withNetI2pDataLeaseSet:localLeaseSet];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"locally published leaseSet is not valid?" withJavaLangThrowable:iae];
    @throw iae;
  }
  if (![((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) shouldPublishLeaseSetWithNetI2pDataHash:h]) return;
  if ([((NetI2pRouterRouter *) nil_chk([_context_ router])) gracefulShutdownInProgress]) {
    jint code = [((NetI2pRouterRouter *) nil_chk([_context_ router])) scheduledGracefulExitCode];
    if (code == NetI2pRouterRouter_EXIT_GRACEFUL || code == NetI2pRouterRouter_EXIT_HARD) return;
  }
  NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob *j = nil;
  @synchronized(_publishingLeaseSets_) {
    j = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_publishingLeaseSets_)) getWithId:h]);
    if (j == nil) {
      j = JreRetainedLocalValue(create_NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_withNetI2pDataHash_(_context_, self, h));
      [_publishingLeaseSets_ putWithId:h withId:j];
    }
  }
  jlong nextTime = JavaLangMath_maxWithLong_withLong_([j lastPublished] + NetI2pRouterNetworkdbKademliaRepublishLeaseSetJob_REPUBLISH_LEASESET_TIMEOUT, [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_DELAY);
  [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) removeJobWithNetI2pRouterJob:j];
  [((NetI2pRouterJobTiming *) nil_chk([j getTiming])) setStartAfterWithLong:nextTime];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@C@", @"Queueing to publish at ", (create_JavaUtilDate_initWithLong_(nextTime)), ' ', localLeaseSet)];
  [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:j];
}

- (void)stopPublishingWithNetI2pDataHash:(NetI2pDataHash *)target {
  @synchronized(_publishingLeaseSets_) {
    [((id<JavaUtilMap>) nil_chk(_publishingLeaseSets_)) removeWithId:target];
  }
}

- (void)publishWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)localRouterInfo {
  if (!_initialized_) return;
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) gracefulShutdownInProgress]) return;
  if ([((NetI2pRouterRouter *) nil_chk([_context_ router])) isHidden]) return;
  NetI2pDataHash *h = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(localRouterInfo)) getIdentity])) getHash];
  [self storeWithNetI2pDataHash:h withNetI2pDataRouterRouterInfo:localRouterInfo];
}

- (void)routerInfoPublishSuccessful {
  JreAssignVolatileLong(&_lastRIPublishTime_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (jlong)getLastRouterInfoPublishTime {
  return JreLoadVolatileLong(&_lastRIPublishTime_);
}

- (NSString *)validateWithNetI2pDataHash:(NetI2pDataHash *)key
                  withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataLeaseSet_(self, key, leaseSet);
}

- (NetI2pDataLeaseSet *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet {
  if (!_initialized_) return nil;
  NetI2pDataLeaseSet *rv = nil;
  @try {
    rv = (NetI2pDataLeaseSet *) cast_chk([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key], [NetI2pDataLeaseSet class]);
    if ((rv != nil) && ([((NetI2pDataLeaseSet *) nil_chk(rv)) isEqual:leaseSet])) {
      return rv;
    }
  }
  @catch (JavaLangClassCastException *cce) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Attempt to replace RI with ", leaseSet));
  }
  if (rv != nil && ![((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(leaseSet)) getDestination])) isEqual:[rv getDestination]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"LS Hash collision");
  NSString *err = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataLeaseSet_(self, key, leaseSet);
  if (err != nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid store attempt - ", err));
  [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) putWithNetI2pDataHash:key withNetI2pDataDatabaseEntry:leaseSet];
  return rv;
}

- (NSString *)validateWithNetI2pDataHash:(NetI2pDataHash *)key
          withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo {
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, key, routerInfo);
}

- (NSString *)validateWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jboolean upLongEnough = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getUptime] > 60 * 60 * 1000;
  jlong adjustedExpiration;
  if ([self floodfillEnabled]) adjustedExpiration = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_FLOODFILL;
  else adjustedExpiration = JavaLangMath_minWithLong_withLong_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION, NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_MIN + ((NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION - NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_MIN) * NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_ROUTERS / ([((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) size] + 1)));
  if (upLongEnough && ![((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) isCurrentWithLong:adjustedExpiration]) {
    jlong age = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - [((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) getPublished];
    jint existing = [((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) size];
    if (existing >= NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_REMAINING_ROUTERS) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Expired RI ", [((NetI2pDataRouterRouterIdentity *) nil_chk([routerInfo getIdentity])) getHash]) withJavaLangThrowable:create_JavaLangException_init()];
      return JreStrcat("$$$", @"Peer expired ", NetI2pDataDataHelper_formatDurationWithLong_(age), @" ago");
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$@", @"Even though the peer is old, we have only ", existing, @" peers left ", routerInfo)];
    }
  }
  if ([((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) getPublished] > now + 2 * NetI2pRouterRouter_CLOCK_FUDGE_FACTOR) {
    jlong age = [routerInfo getPublished] - [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@C", @"Peer ", [((NetI2pDataRouterRouterIdentity *) nil_chk([routerInfo getIdentity])) getHash], @" published their routerInfo in the future?! [", create_JavaUtilDate_initWithLong_([routerInfo getPublished]), ']') withJavaLangThrowable:create_JavaLangException_init()];
    return JreStrcat("$$$", @"Peer published ", NetI2pDataDataHelper_formatDurationWithLong_(age), @" in the future?!");
  }
  if (![routerInfo isCurrentWithLong:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_INTRODUCED]) {
    if ([((id<JavaUtilCollection>) nil_chk([routerInfo getAddresses])) isEmpty]) return @"Old peer with no addresses";
    if ([((NSString *) nil_chk([routerInfo getCapabilities])) java_indexOf:NetI2pRouterRouter_CAPABILITY_UNREACHABLE] >= 0) return @"Old peer and thinks it is unreachable";
    for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk([routerInfo getAddresses])) {
      if ([((NetI2pDataRouterRouterAddress *) nil_chk(ra)) getOptionWithNSString:@"ihost0"] != nil) return @"Old peer with SSU Introducers";
    }
  }
  if (upLongEnough && ([routerInfo getPublished] < now - 2 * 24 * 60 * 60 * 1000l)) {
    jlong age = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - [routerInfo getPublished];
    return JreStrcat("$$$", @"Peer published ", NetI2pDataDataHelper_formatDurationWithLong_(age), @" ago");
  }
  if (upLongEnough && ![routerInfo isCurrentWithLong:NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_SHORT]) {
    if ([routerInfo getTargetAddressWithNSString:@"NTCP"] == nil) return @"Peer published > 75m ago, SSU only without introducers";
  }
  return nil;
}

- (NetI2pDataRouterRouterInfo *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo {
  return [self storeWithNetI2pDataHash:key withNetI2pDataRouterRouterInfo:routerInfo withBoolean:true];
}

- (NetI2pDataRouterRouterInfo *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo
                                            withBoolean:(jboolean)persist {
  if (!_initialized_) return nil;
  NetI2pDataRouterRouterInfo *rv = nil;
  @try {
    rv = (NetI2pDataRouterRouterInfo *) cast_chk([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:key withBoolean:persist], [NetI2pDataRouterRouterInfo class]);
    if ((rv != nil) && ([((NetI2pDataRouterRouterInfo *) nil_chk(rv)) isEqual:routerInfo])) {
      return rv;
    }
  }
  @catch (JavaLangClassCastException *cce) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Attempt to replace LS with ", routerInfo));
  }
  if (rv != nil && ![((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) getIdentity])) isEqual:[rv getIdentity]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"RI Hash collision");
  NSString *err = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataRouterRouterInfo_(self, key, routerInfo);
  if (err != nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid store attempt - ", err));
  [((id<NetI2pRouterPeerManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) peerManager])) setCapabilitiesWithNetI2pDataHash:key withNSString:[((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) getCapabilities]];
  [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) putWithNetI2pDataHash:key withNetI2pDataDatabaseEntry:routerInfo withBoolean:persist];
  if (rv == nil) [((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) addWithNetI2pDataSimpleDataStructure:key];
  return rv;
}

- (void)processStoreFailureWithNetI2pDataHash:(NetI2pDataHash *)h
                  withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)entry_ {
  NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_processStoreFailureWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(self, h, entry_);
}

- (void)failWithNetI2pDataHash:(NetI2pDataHash *)dbEntry {
  if (!_initialized_) return;
  NetI2pDataDatabaseEntry *o = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) getWithNetI2pDataHash:dbEntry];
  if (o == nil) {
    [((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) removeWithNetI2pDataSimpleDataStructure:dbEntry];
    [((id<NetI2pRouterPeerManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) peerManager])) removeCapabilitiesWithNetI2pDataHash:dbEntry];
    return;
  }
  if ([o getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    [self lookupBeforeDroppingWithNetI2pDataHash:dbEntry withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *) cast_chk(o, [NetI2pDataRouterRouterInfo class])];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Dropping a lease: ", dbEntry)];
  [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) removeWithNetI2pDataHash:dbEntry withBoolean:false];
}

- (void)lookupBeforeDroppingWithNetI2pDataHash:(NetI2pDataHash *)peer
                withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  [self dropAfterLookupFailedWithNetI2pDataHash:peer];
}

- (void)dropAfterLookupFailedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  [((id<NetI2pRouterPeerManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) peerManager])) removeCapabilitiesWithNetI2pDataHash:peer];
  [((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) removeWithNetI2pDataSimpleDataStructure:peer];
  [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) removeWithNetI2pDataHash:peer];
}

- (void)unpublishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
  if (!_initialized_) return;
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(localLeaseSet)) getDestination])) calculateHash];
  NetI2pDataDatabaseEntry *data = [((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk(_ds_)) removeWithNetI2pDataHash:h];
  if (data == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Unpublished a lease we don't know...: ", localLeaseSet)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Unpublished a lease: ", h)];
  }
}

- (NetI2pRouterNetworkdbKademliaSearchJob *)searchWithNetI2pDataHash:(NetI2pDataHash *)key
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                                            withLong:(jlong)timeoutMs
                                                         withBoolean:(jboolean)isLease {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NetI2pRouterNetworkdbKademliaSearchJob *)searchWithNetI2pDataHash:(NetI2pDataHash *)key
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                                                 withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                                            withLong:(jlong)timeoutMs
                                                         withBoolean:(jboolean)isLease
                                                  withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilSet>)getLeases {
  if (!_initialized_) return nil;
  id<JavaUtilSet> leases = create_JavaUtilHashSet_init();
  for (NetI2pDataDatabaseEntry * __strong o in nil_chk([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([self getDataStore])) getEntries])) {
    if ([((NetI2pDataDatabaseEntry *) nil_chk(o)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) [leases addWithId:(NetI2pDataLeaseSet *) cast_chk(o, [NetI2pDataLeaseSet class])];
  }
  return leases;
}

- (id<JavaUtilSet>)getRouters {
  if (!_initialized_) return nil;
  id<JavaUtilSet> routers = create_JavaUtilHashSet_init();
  for (NetI2pDataDatabaseEntry * __strong o in nil_chk([((id<NetI2pRouterNetworkdbKademliaDataStore>) nil_chk([self getDataStore])) getEntries])) {
    if ([((NetI2pDataDatabaseEntry *) nil_chk(o)) getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) [routers addWithId:(NetI2pDataRouterRouterInfo *) cast_chk(o, [NetI2pDataRouterRouterInfo class])];
  }
  return routers;
}

- (jint)getPeerTimeoutWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *prof = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileOrganizer])) getProfileWithNetI2pDataHash:peer];
  jdouble responseTime = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_PER_PEER_TIMEOUT;
  if (prof != nil && [prof getIsExpandedDB]) {
    responseTime = [((NetI2pStatRate *) nil_chk([((NetI2pStatRateStat *) nil_chk([prof getDbResponseTime])) getRateWithLong:24 * 60 * 60 * 1000l])) getAverageValue];
    if (responseTime <= 0 || responseTime > NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_PER_PEER_TIMEOUT) responseTime = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_PER_PEER_TIMEOUT;
    else if (responseTime < NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_PER_PEER_TIMEOUT) responseTime = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_PER_PEER_TIMEOUT;
  }
  return NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_TIMEOUT_MULTIPLIER * JreFpToInt(responseTime);
}

- (void)sendStoreWithNetI2pDataHash:(NetI2pDataHash *)key
        withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)ds
                withNetI2pRouterJob:(id<NetI2pRouterJob>)onSuccess
                withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailure
                           withLong:(jlong)sendTimeout
                    withJavaUtilSet:(id<JavaUtilSet>)toIgnore {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)lookupFailedWithNetI2pDataHash:(NetI2pDataHash *)key {
  [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) lookupFailedWithNetI2pDataHash:key];
}

- (jboolean)isNegativeCachedWithNetI2pDataHash:(NetI2pDataHash *)key {
  jboolean rv = [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) isCachedWithNetI2pDataHash:key];
  if (rv) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.negativeCache" withLong:1];
  return rv;
}

- (void)failPermanentlyWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) failPermanentlyWithNetI2pDataDestination:dest];
}

- (jboolean)isNegativeCachedForeverWithNetI2pDataHash:(NetI2pDataHash *)key {
  return [((NetI2pRouterNetworkdbKademliaNegativeLookupCache *) nil_chk(_negativeCache_)) getBadDestWithNetI2pDataHash:key] != nil;
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[((NSString *) nil_chk([((NetI2pKademliaKBucketSet *) nil_chk(_kb_)) description])) java_replace:@"\n" withSequence:@"<br>\n"]];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_kb_);
  RELEASE_(_ds_);
  RELEASE_(_dbDir_);
  RELEASE_(_exploreKeys_);
  RELEASE_(_exploreJob_);
  RELEASE_(_peerSelector_);
  RELEASE_(_context_);
  RELEASE_(_reseedChecker_);
  RELEASE_(_negativeCache_);
  RELEASE_(_publishingLeaseSets_);
  RELEASE_(_activeRequests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaPeerSelector;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaPeerSelector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbReseedReseedChecker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pKademliaKBucketSet;", 0x0, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaDataStore;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x0, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 17, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 31, 29, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 32, 33, 34, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, 35, 33, 29, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 32, 36, 29, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 32, 31, 29, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, 35, 36, 29, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x0, 35, 37, 29, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, 34, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 41, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 28, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaSearchJob;", 0x0, 44, 45, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkdbKademliaSearchJob;", 0x0, 44, 46, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 47, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 48, -1, -1 },
    { NULL, "I", 0x1, 49, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x0, 53, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 54, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 55, 56, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 57, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 59, 60, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(searchCompleteWithNetI2pDataHash:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[2].selector = @selector(isInitialized);
  methods[3].selector = @selector(createPeerSelector);
  methods[4].selector = @selector(getPeerSelector);
  methods[5].selector = @selector(reseedChecker);
  methods[6].selector = @selector(getKBuckets);
  methods[7].selector = @selector(getDataStore);
  methods[8].selector = @selector(getLastExploreNewDate);
  methods[9].selector = @selector(setLastExploreNewDateWithLong:);
  methods[10].selector = @selector(getExploreKeys);
  methods[11].selector = @selector(removeFromExploreKeysWithJavaUtilCollection:);
  methods[12].selector = @selector(queueForExplorationWithJavaUtilCollection:);
  methods[13].selector = @selector(shutdown);
  methods[14].selector = @selector(restart);
  methods[15].selector = @selector(rescan);
  methods[16].selector = @selector(getDbDir);
  methods[17].selector = @selector(startup);
  methods[18].selector = @selector(createHandlers);
  methods[19].selector = @selector(findNearestRoutersWithNetI2pDataHash:withInt:withJavaUtilSet:);
  methods[20].selector = @selector(getAllRouters);
  methods[21].selector = @selector(getKnownRouters);
  methods[22].selector = @selector(getKnownLeaseSets);
  methods[23].selector = @selector(getKBucketSetSize);
  methods[24].selector = @selector(lookupLocallyWithNetI2pDataHash:);
  methods[25].selector = @selector(lookupLocallyWithoutValidationWithNetI2pDataHash:);
  methods[26].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[27].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[28].selector = @selector(lookupLeaseSetRemotelyWithNetI2pDataHash:withNetI2pDataHash:);
  methods[29].selector = @selector(lookupLeaseSetLocallyWithNetI2pDataHash:);
  methods[30].selector = @selector(lookupDestinationWithNetI2pDataHash:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[31].selector = @selector(lookupDestinationLocallyWithNetI2pDataHash:);
  methods[32].selector = @selector(lookupRouterInfoWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[33].selector = @selector(lookupRouterInfoLocallyWithNetI2pDataHash:);
  methods[34].selector = @selector(publishWithNetI2pDataLeaseSet:);
  methods[35].selector = @selector(stopPublishingWithNetI2pDataHash:);
  methods[36].selector = @selector(publishWithNetI2pDataRouterRouterInfo:);
  methods[37].selector = @selector(routerInfoPublishSuccessful);
  methods[38].selector = @selector(getLastRouterInfoPublishTime);
  methods[39].selector = @selector(validateWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[40].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[41].selector = @selector(validateWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[42].selector = @selector(validateWithNetI2pDataRouterRouterInfo:);
  methods[43].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[44].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:withBoolean:);
  methods[45].selector = @selector(processStoreFailureWithNetI2pDataHash:withNetI2pDataDatabaseEntry:);
  methods[46].selector = @selector(failWithNetI2pDataHash:);
  methods[47].selector = @selector(lookupBeforeDroppingWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[48].selector = @selector(dropAfterLookupFailedWithNetI2pDataHash:);
  methods[49].selector = @selector(unpublishWithNetI2pDataLeaseSet:);
  methods[50].selector = @selector(searchWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:);
  methods[51].selector = @selector(searchWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withBoolean:withNetI2pDataHash:);
  methods[52].selector = @selector(getLeases);
  methods[53].selector = @selector(getRouters);
  methods[54].selector = @selector(getPeerTimeoutWithNetI2pDataHash:);
  methods[55].selector = @selector(sendStoreWithNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withJavaUtilSet:);
  methods[56].selector = @selector(lookupFailedWithNetI2pDataHash:);
  methods[57].selector = @selector(isNegativeCachedWithNetI2pDataHash:);
  methods[58].selector = @selector(failPermanentlyWithNetI2pDataDestination:);
  methods[59].selector = @selector(isNegativeCachedForeverWithNetI2pDataHash:);
  methods[60].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_kb_", "LNetI2pKademliaKBucketSet;", .constantValue.asLong = 0, 0x2, -1, -1, 61, -1 },
    { "_ds_", "LNetI2pRouterNetworkdbKademliaDataStore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dbDir_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_exploreKeys_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 62, -1 },
    { "_initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_exploreJob_", "LNetI2pRouterNetworkdbKademliaStartExplorersJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastExploreNew_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerSelector_", "LNetI2pRouterNetworkdbKademliaPeerSelector;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_reseedChecker_", "LNetI2pRouterNetworkdbReseedReseedChecker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastRIPublishTime_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_negativeCache_", "LNetI2pRouterNetworkdbKademliaNegativeLookupCache;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_networkID_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_publishingLeaseSets_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 63, -1 },
    { "_activeRequests_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 64, -1 },
    { "DONT_FAIL_PERIOD", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DONT_FAIL_PERIOD, 0x1c, -1, -1, -1, -1 },
    { "QUIET", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_QUIET, 0x1a, -1, -1, -1, -1 },
    { "PROP_DB_DIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "DEFAULT_DB_DIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "MIN_RESEED", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_RESEED, 0x18, -1, -1, -1, -1 },
    { "MIN_REMAINING_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_REMAINING_ROUTERS, 0x1c, -1, -1, -1, -1 },
    { "ROUTER_INFO_EXPIRATION", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION, 0x1a, -1, -1, -1, -1 },
    { "ROUTER_INFO_EXPIRATION_MIN", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_MIN, 0x1a, -1, -1, -1, -1 },
    { "ROUTER_INFO_EXPIRATION_SHORT", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_SHORT, 0x1a, -1, -1, -1, -1 },
    { "ROUTER_INFO_EXPIRATION_FLOODFILL", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_FLOODFILL, 0x1a, -1, -1, -1, -1 },
    { "ROUTER_INFO_EXPIRATION_INTRODUCED", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_ROUTER_INFO_EXPIRATION_INTRODUCED, 0x1a, -1, -1, -1, -1 },
    { "EXPLORE_JOB_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_EXPLORE_JOB_DELAY, 0x1a, -1, -1, -1, -1 },
    { "PUBLISH_JOB_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_JOB_DELAY, 0x1c, -1, -1, -1, -1 },
    { "MAX_EXPLORE_QUEUE", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_EXPLORE_QUEUE, 0x18, -1, -1, -1, -1 },
    { "BUCKET_SIZE", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_BUCKET_SIZE, 0x1a, -1, -1, -1, -1 },
    { "KAD_B", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_KAD_B, 0x1a, -1, -1, -1, -1 },
    { "PUBLISH_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PUBLISH_DELAY, 0x1a, -1, -1, -1, -1 },
    { "MAX_LEASE_FUTURE", "J", .constantValue.asLong = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_LEASE_FUTURE, 0x18, -1, -1, -1, -1 },
    { "MIN_ROUTERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_ROUTERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_PER_PEER_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MIN_PER_PEER_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_PER_PEER_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_PER_PEER_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "TIMEOUT_MULTIPLIER", "I", .constantValue.asInt = NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_TIMEOUT_MULTIPLIER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "searchComplete", "LNetI2pDataHash;", "LNetI2pRouterRouterContext;", "()Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;", "setLastExploreNewDate", "J", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "removeFromExploreKeys", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/Hash;>;)V", "queueForExploration", "findNearestRouters", "LNetI2pDataHash;ILJavaUtilSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "lookupLocally", "lookupLocallyWithoutValidation", "lookupLeaseSet", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;J", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupLeaseSetRemotely", "LNetI2pDataHash;LNetI2pDataHash;", "lookupLeaseSetLocally", "lookupDestination", "LNetI2pDataHash;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupDestinationLocally", "lookupRouterInfo", "lookupRouterInfoLocally", "publish", "LNetI2pDataLeaseSet;", "LJavaLangIllegalArgumentException;", "stopPublishing", "LNetI2pDataRouterRouterInfo;", "validate", "LNetI2pDataHash;LNetI2pDataLeaseSet;", "LNetI2pRouterNetworkdbKademliaUnsupportedCryptoException;", "store", "LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "LNetI2pDataHash;LNetI2pDataRouterRouterInfo;Z", "processStoreFailure", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;", "fail", "lookupBeforeDropping", "dropAfterLookupFailed", "unpublish", "search", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JZ", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JZLNetI2pDataHash;", "()Ljava/util/Set<Lnet/i2p/data/LeaseSet;>;", "()Ljava/util/Set<Lnet/i2p/data/router/RouterInfo;>;", "getPeerTimeout", "sendStore", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pRouterJob;LNetI2pRouterJob;JLJavaUtilSet;", "(Lnet/i2p/data/Hash;Lnet/i2p/data/DatabaseEntry;Lnet/i2p/router/Job;Lnet/i2p/router/Job;JLjava/util/Set<Lnet/i2p/data/Hash;>;)V", "lookupFailed", "isNegativeCached", "failPermanently", "LNetI2pDataDestination;", "isNegativeCachedForever", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "Lnet/i2p/kademlia/KBucketSet<Lnet/i2p/data/Hash;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/networkdb/kademlia/RepublishLeaseSetJob;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/networkdb/kademlia/SearchJob;>;", &NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_PROP_DB_DIR, &NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_DEFAULT_DB_DIR };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade = { "KademliaNetworkDatabaseFacade", "net.i2p.router.networkdb.kademlia", ptrTable, methods, fields, 7, 0x401, 61, 39, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade;
}

@end

void NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterNetworkDatabaseFacade_init(self);
  JreStrongAssignAndConsume(&self->_exploreKeys_, new_NetI2pUtilConcurrentHashSet_initWithInt_(64));
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  self->_networkID_ = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) router])) getNetworkID];
  JreStrongAssign(&self->_peerSelector_, [self createPeerSelector]);
  JreStrongAssignAndConsume(&self->_publishingLeaseSets_, new_JavaUtilHashMap_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_activeRequests_, new_JavaUtilHashMap_initWithInt_(8));
  JreStrongAssignAndConsume(&self->_reseedChecker_, new_NetI2pRouterNetworkdbReseedReseedChecker_initWithNetI2pRouterRouterContext_(context));
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.lookupDeferred" withNSString:@"how many lookups are deferred?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.exploreKeySet" withNSString:@"how many keys are queued for exploration?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.negativeCache" withNSString:@"Aborted lookup, already cached" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.storeRouterInfoSent" withNSString:@"How many routerInfo store messages have we sent?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.storeLeaseSetSent" withNSString:@"How many leaseSet store messages have we sent?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.storePeers" withNSString:@"How many peers each netDb must be sent to before success?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.storeFailedPeers" withNSString:@"How many peers each netDb must be sent to before failing completely?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.ackTime" withNSString:@"How long does it take for a peer to ack a netDb store?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.replyTimeout" withNSString:@"How long after a netDb send does the timeout expire (when the peer doesn't reply in time)?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.republishLeaseSetCount" withNSString:@"How often we republish a leaseSet?" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.DSMAllZeros" withNSString:@"Store with zero key" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:@"netDb.DLMAllZeros" withNSString:@"Lookup with zero key" withNSString:@"NetworkDatabase" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
}

NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataLeaseSet_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *key, NetI2pDataLeaseSet *leaseSet) {
  if (![((NetI2pDataHash *) nil_chk(key)) isEqual:[((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(leaseSet)) getDestination])) calculateHash]]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Invalid store attempt! key does not match leaseSet.destination!  key = ", key, @", leaseSet = ", leaseSet)];
    return JreStrcat("$$", @"Key does not match leaseSet.destination - ", [key toBase64]);
  }
  if (![leaseSet verifySignature]) {
    NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_processStoreFailureWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(self, key, leaseSet);
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Invalid leaseSet signature! ", leaseSet)];
    return JreStrcat("$@", @"Invalid leaseSet signature on ", key);
  }
  jlong earliest = [leaseSet getEarliestLeaseDate];
  jlong latest = [leaseSet getLatestLeaseDate];
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if (earliest <= now - 10 * 60 * 1000LL || latest <= now - NetI2pRouterRouter_CLOCK_FUDGE_FACTOR) {
    jlong age = now - earliest;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$@$@", @"Old leaseSet!  not storing it: ", [((NetI2pDataDestination *) nil_chk([leaseSet getDestination])) toBase32], @" first exp. ", create_JavaUtilDate_initWithLong_(earliest), @" last exp. ", create_JavaUtilDate_initWithLong_(latest)) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Rejecting store")];
    return JreStrcat("$$$$$", @"Expired leaseSet for ", [((NetI2pDataDestination *) nil_chk([leaseSet getDestination])) toBase32], @" expired ", NetI2pDataDataHelper_formatDurationWithLong_(age), @" ago");
  }
  if (latest > now + (NetI2pRouterRouter_CLOCK_FUDGE_FACTOR + NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_MAX_LEASE_FUTURE)) {
    jlong age = latest - now;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$$$", @"LeaseSet expires too far in the future: ", [((NetI2pDataDestination *) nil_chk([leaseSet getDestination])) toBase32], @" expires ", NetI2pDataDataHelper_formatDurationWithLong_(age), @" from now")];
    return JreStrcat("$$$$", @"Future expiring leaseSet for ", [((NetI2pDataDestination *) nil_chk([leaseSet getDestination])) toBase32], @" expiring in ", NetI2pDataDataHelper_formatDurationWithLong_(age));
  }
  return nil;
}

NSString *NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_validateWithNetI2pDataHash_withNetI2pDataRouterRouterInfo_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *key, NetI2pDataRouterRouterInfo *routerInfo) {
  if (![((NetI2pDataHash *) nil_chk(key)) isEqual:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(routerInfo)) getIdentity])) getHash]]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Invalid store attempt! key does not match routerInfo.identity!  key = ", key, @", router = ", routerInfo)];
    return @"Key does not match routerInfo.identity";
  }
  if (![routerInfo isValid]) {
    NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_processStoreFailureWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(self, key, routerInfo);
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Invalid routerInfo signature!  forged router structure!  router = ", routerInfo)];
    return @"Invalid routerInfo signature";
  }
  if ([routerInfo getNetworkId] != self->_networkID_) {
    [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) banlistRouterWithNetI2pDataHash:key withNSString:@"Not in our network"];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Bad network: ", routerInfo)];
    return @"Not in our network";
  }
  NetI2pRouterCryptoFamilyKeyCrypto *fkc = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getFamilyKeyCrypto];
  if (fkc != nil) {
    jboolean validFamily = [fkc verifyWithNetI2pDataRouterRouterInfo:routerInfo];
    if (!validFamily) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Bad family sig: ", [routerInfo getHash])];
    }
  }
  return [self validateWithNetI2pDataRouterRouterInfo:routerInfo];
}

void NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade_processStoreFailureWithNetI2pDataHash_withNetI2pDataDatabaseEntry_(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade *self, NetI2pDataHash *h, NetI2pDataDatabaseEntry *entry_) {
  if ([((NetI2pDataHash *) nil_chk([((NetI2pDataDatabaseEntry *) nil_chk(entry_)) getHash])) isEqual:h]) {
    if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
      NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(entry_, [NetI2pDataLeaseSet class]);
      NetI2pDataDestination *d = [ls getDestination];
      NetI2pDataCertificate *c = [((NetI2pDataDestination *) nil_chk(d)) getCertificate];
      if ([((NetI2pDataCertificate *) nil_chk(c)) getCertificateType] == NetI2pDataCertificate_CERTIFICATE_TYPE_KEY) {
        @try {
          NetI2pDataKeyCertificate *kc = [c toKeyCertificate];
          NetI2pCryptoSigType *type = [((NetI2pDataKeyCertificate *) nil_chk(kc)) getSigType];
          if (type == nil || ![type isAvailable] || [type getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, RSA)) {
            [self failPermanentlyWithNetI2pDataDestination:d];
            NSString *stype = (type != nil) ? [((NetI2pCryptoSigType *) nil_chk(type)) description] : JavaLangInteger_toStringWithInt_([kc getSigTypeCode]);
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$@", @"Unsupported sig type ", stype, @" for destination ", h)];
            @throw create_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(JreStrcat("$$", @"Sig type ", stype));
          }
        }
        @catch (NetI2pDataDataFormatException *dfe) {
        }
      }
    }
    else if ([entry_ getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
      NetI2pDataRouterRouterInfo *ri = (NetI2pDataRouterRouterInfo *) cast_chk(entry_, [NetI2pDataRouterRouterInfo class]);
      NetI2pDataRouterRouterIdentity *id_ = [ri getIdentity];
      NetI2pDataCertificate *c = [((NetI2pDataRouterRouterIdentity *) nil_chk(id_)) getCertificate];
      if ([((NetI2pDataCertificate *) nil_chk(c)) getCertificateType] == NetI2pDataCertificate_CERTIFICATE_TYPE_KEY) {
        @try {
          NetI2pDataKeyCertificate *kc = [c toKeyCertificate];
          NetI2pCryptoSigType *type = [((NetI2pDataKeyCertificate *) nil_chk(kc)) getSigType];
          if (type == nil || ![type isAvailable]) {
            NSString *stype = (type != nil) ? [((NetI2pCryptoSigType *) nil_chk(type)) description] : JavaLangInteger_toStringWithInt_([kc getSigTypeCode]);
            [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) banlist])) banlistRouterForeverWithNetI2pDataHash:h withNSString:JreStrcat("$$", @"Unsupported signature type ", stype)];
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$@", @"Unsupported sig type ", stype, @" for router ", h)];
            @throw create_NetI2pRouterNetworkdbKademliaUnsupportedCryptoException_initWithNSString_(JreStrcat("$$", @"Sig type ", stype));
          }
        }
        @catch (NetI2pDataDataFormatException *dfe) {
        }
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Verify fail, cause unknown: ", entry_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbKademliaKademliaNetworkDatabaseFacade)
