//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/HandleDatabaseLookupMessageJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/SendMessageDirectJob.h"
#include "net/i2p/router/networkdb/HandleDatabaseLookupMessageJob.h"
#include "net/i2p/router/networkdb/kademlia/MessageWrapper.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataI2npDatabaseLookupMessage *_message_;
  jboolean _replyKeyConsumed_;
}

- (id<JavaUtilSet>)getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type:(NetI2pDataI2npDatabaseLookupMessage_Type *)lookupType;

+ (jboolean)isUnreachableWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info;

- (jboolean)publishUnreachable;

- (jboolean)weAreClosestWithJavaUtilSet:(id<JavaUtilSet>)routerHashSet;

- (void)sendDataWithNetI2pDataHash:(NetI2pDataHash *)key
       withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                withNetI2pDataHash:(NetI2pDataHash *)toPeer
            withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel;

- (void)sendThroughTunnelWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                                    withNetI2pDataHash:(NetI2pDataHash *)toPeer
                                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, _message_, NetI2pDataI2npDatabaseLookupMessage *)

inline jint NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_get_MAX_ROUTERS_RETURNED(void);
#define NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MAX_ROUTERS_RETURNED 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, MAX_ROUTERS_RETURNED, jint)

inline jint NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_get_CLOSENESS_THRESHOLD(void);
#define NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_CLOSENESS_THRESHOLD 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, CLOSENESS_THRESHOLD, jint)

inline jint NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_get_REPLY_TIMEOUT(void);
#define NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_REPLY_TIMEOUT 60000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, REPLY_TIMEOUT, jint)

inline jint NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_get_MESSAGE_PRIORITY(void);
#define NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MESSAGE_PRIORITY 300
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, MESSAGE_PRIORITY, jint)

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, NetI2pDataI2npDatabaseLookupMessage_Type *lookupType);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_isUnreachableWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *info);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_publishUnreachable(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_weAreClosestWithJavaUtilSet_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, id<JavaUtilSet> routerHashSet);

__attribute__((unused)) static void NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, NetI2pDataHash *toPeer, NetI2pDataTunnelId *replyTunnel);

__attribute__((unused)) static void NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendThroughTunnelWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, NetI2pDataTunnelId *replyTunnel);

NSString *NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_PROP_PUBLISH_UNREACHABLE = @"router.publishUnreachableRouters";

@implementation NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob

+ (jlong)EXPIRE_DELAY {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_EXPIRE_DELAY;
}

+ (NSString *)PROP_PUBLISH_UNREACHABLE {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_PROP_PUBLISH_UNREACHABLE;
}

+ (jboolean)DEFAULT_PUBLISH_UNREACHABLE {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_DEFAULT_PUBLISH_UNREACHABLE;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
          withNetI2pDataI2npDatabaseLookupMessage:(NetI2pDataI2npDatabaseLookupMessage *)receivedMessage
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                               withNetI2pDataHash:(NetI2pDataHash *)fromHash {
  NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(self, ctx, receivedMessage, from, fromHash);
  return self;
}

- (jboolean)answerAllQueries {
  return false;
}

- (void)runJob {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Handling database lookup message for ", [((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(_message_)) getSearchKey])];
  NetI2pDataHash *fromKey = [((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(_message_)) getFrom];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    if ([_message_ getReplyTunnel] != nil) [_log_ debugWithNSString:JreStrcat("$@$@C", @"dbLookup received with replies going to ", fromKey, @" (tunnel ", [_message_ getReplyTunnel], ')')];
  }
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) isHidden]) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [_log_ warnWithNSString:JreStrcat("$@$@C", @"Uninvited dbLookup received with replies going to ", fromKey, @" (tunnel ", [_message_ getReplyTunnel], ')')];
    }
    return;
  }
  if ([((NetI2pDataHash *) nil_chk([_message_ getSearchKey])) isEqual:JreLoadStatic(NetI2pDataHash, FAKE_HASH)]) {
    if ([_log_ shouldWarn]) [_log_ warnWithNSString:@"Zero lookup" withJavaLangThrowable:create_JavaLangException_init()];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.DLMAllZeros" withLong:1];
    return;
  }
  NetI2pDataI2npDatabaseLookupMessage_Type *lookupType = [_message_ getSearchType];
  NetI2pDataDatabaseEntry *dbe = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupLocallyWithNetI2pDataHash:[_message_ getSearchKey]];
  if (dbe != nil && [dbe getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET && (lookupType == JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, ANY) || lookupType == JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS))) {
    NetI2pDataLeaseSet *ls = (NetI2pDataLeaseSet *) cast_chk(dbe, [NetI2pDataLeaseSet class]);
    jboolean isLocal = [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) isLocalWithNetI2pDataDestination:[ls getDestination]];
    jboolean shouldPublishLocal = isLocal && [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) shouldPublishLeaseSetWithNetI2pDataHash:[_message_ getSearchKey]];
    if ([ls getReceivedAsPublished]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"We have the published LS ", [_message_ getSearchKey], @", answering query")];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatchedReceivedPublished" withLong:1];
      NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(self, [_message_ getSearchKey], ls, fromKey, [_message_ getReplyTunnel]);
    }
    else if (shouldPublishLocal && [self answerAllQueries]) {
      id<JavaUtilSet> closestHashes = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) findNearestRoutersWithNetI2pDataHash:[_message_ getSearchKey] withInt:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_CLOSENESS_THRESHOLD withJavaUtilSet:nil];
      if (NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_weAreClosestWithJavaUtilSet_(self, closestHashes)) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"We have local LS ", [_message_ getSearchKey], @", answering query, in our keyspace")];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatchedLocalClosest" withLong:1];
        NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(self, [_message_ getSearchKey], ls, fromKey, [_message_ getReplyTunnel]);
      }
      else {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$", @"We have local LS ", [_message_ getSearchKey], @", NOT answering query, out of our keyspace")];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatchedLocalNotClosest" withLong:1];
        id<JavaUtilSet> routerHashSet = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(self, lookupType);
        [self sendClosestWithNetI2pDataHash:[_message_ getSearchKey] withJavaUtilSet:routerHashSet withNetI2pDataHash:fromKey withNetI2pDataTunnelId:[_message_ getReplyTunnel]];
      }
    }
    else {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$Z$Z$Z$Z", @"We have LS ", [_message_ getSearchKey], @", NOT answering query - local? ", isLocal, @" shouldPublish? ", shouldPublishLocal, @" RAP? ", [ls getReceivedAsPublished], @" RAR? ", [ls getReceivedAsReply])];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatchedRemoteNotClosest" withLong:1];
      id<JavaUtilSet> routerHashSet = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(self, lookupType);
      [self sendClosestWithNetI2pDataHash:[_message_ getSearchKey] withJavaUtilSet:routerHashSet withNetI2pDataHash:fromKey withNetI2pDataTunnelId:[_message_ getReplyTunnel]];
    }
  }
  else if (dbe != nil && [dbe getType] == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO && lookupType != JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS)) {
    NetI2pDataRouterRouterInfo *info = (NetI2pDataRouterRouterInfo *) cast_chk(dbe, [NetI2pDataRouterRouterInfo class]);
    if ([info isCurrentWithLong:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_EXPIRE_DELAY]) {
      if (([info isHidden]) || (NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_isUnreachableWithNetI2pDataRouterRouterInfo_(info) && !NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_publishUnreachable(self))) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Not answering a query for a netDb peer who isn't reachable"];
        id<JavaUtilSet> us = JavaUtilCollections_singletonWithId_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]);
        [self sendClosestWithNetI2pDataHash:[_message_ getSearchKey] withJavaUtilSet:us withNetI2pDataHash:fromKey withNetI2pDataTunnelId:[_message_ getReplyTunnel]];
      }
      else {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"We do have key ", [_message_ getSearchKey], @" locally as a router info.  sending to ", fromKey)];
        NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(self, [_message_ getSearchKey], info, fromKey, [_message_ getReplyTunnel]);
      }
    }
    else {
      id<JavaUtilSet> routerHashSet = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(self, lookupType);
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$I$@", @"Expired ", [_message_ getSearchKey], @" locally.  sending back ", [((id<JavaUtilSet>) nil_chk(routerHashSet)) size], @" peers to ", fromKey)];
      [self sendClosestWithNetI2pDataHash:[_message_ getSearchKey] withJavaUtilSet:routerHashSet withNetI2pDataHash:fromKey withNetI2pDataTunnelId:[_message_ getReplyTunnel]];
    }
  }
  else {
    id<JavaUtilSet> routerHashSet = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(self, lookupType);
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$I$@", @"We do not have key ", [_message_ getSearchKey], @" locally.  sending back ", [((id<JavaUtilSet>) nil_chk(routerHashSet)) size], @" peers to ", fromKey)];
    [self sendClosestWithNetI2pDataHash:[_message_ getSearchKey] withJavaUtilSet:routerHashSet withNetI2pDataHash:fromKey withNetI2pDataTunnelId:[_message_ getReplyTunnel]];
  }
}

- (id<JavaUtilSet>)getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type:(NetI2pDataI2npDatabaseLookupMessage_Type *)lookupType {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(self, lookupType);
}

+ (jboolean)isUnreachableWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)info {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_isUnreachableWithNetI2pDataRouterRouterInfo_(info);
}

- (jboolean)publishUnreachable {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_publishUnreachable(self);
}

- (jboolean)weAreClosestWithJavaUtilSet:(id<JavaUtilSet>)routerHashSet {
  return NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_weAreClosestWithJavaUtilSet_(self, routerHashSet);
}

- (void)sendDataWithNetI2pDataHash:(NetI2pDataHash *)key
       withNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)data
                withNetI2pDataHash:(NetI2pDataHash *)toPeer
            withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel {
  NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(self, key, data, toPeer, replyTunnel);
}

- (void)sendClosestWithNetI2pDataHash:(NetI2pDataHash *)key
                      withJavaUtilSet:(id<JavaUtilSet>)routerHashes
                   withNetI2pDataHash:(NetI2pDataHash *)toPeer
               withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$I$@", @"Sending closest routers to key ", key, @": # peers = ", [((id<JavaUtilSet>) nil_chk(routerHashes)) size], @" tunnel ", replyTunnel)];
  NetI2pDataI2npDatabaseSearchReplyMessage *msg = create_NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_([self getContext]);
  [msg setFromHashWithNetI2pDataHash:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]];
  [msg setSearchKeyWithNetI2pDataHash:key];
  jint i = 0;
  for (NetI2pDataHash * __strong h in nil_chk(routerHashes)) {
    [msg addReplyWithNetI2pDataHash:h];
    if (++i >= NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MAX_ROUTERS_RETURNED) break;
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsHandled" withLong:1];
  [self sendMessageWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataHash:toPeer withNetI2pDataTunnelId:replyTunnel];
}

- (void)sendMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                              withNetI2pDataHash:(NetI2pDataHash *)toPeer
                          withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel {
  if (replyTunnel != nil) {
    NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendThroughTunnelWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(self, message, toPeer, replyTunnel);
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Sending reply directly to ", toPeer)];
    id<NetI2pRouterJob> send = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], message, toPeer, NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_REPLY_TIMEOUT, NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MESSAGE_PRIORITY);
    [send runJob];
  }
}

- (void)sendThroughTunnelWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                                    withNetI2pDataHash:(NetI2pDataHash *)toPeer
                                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel {
  NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendThroughTunnelWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(self, message, toPeer, replyTunnel);
}

- (NSString *)getName {
  return @"Handle Database Lookup Message";
}

- (void)dropped {
  [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageHistory])) messageProcessingErrorWithLong:[((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(_message_)) getUniqueId] withNSString:[[_message_ java_getClass] getName] withNSString:@"Dropped due to overload"];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_message_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npDatabaseLookupMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  methods[1].selector = @selector(answerAllQueries);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type:);
  methods[4].selector = @selector(isUnreachableWithNetI2pDataRouterRouterInfo:);
  methods[5].selector = @selector(publishUnreachable);
  methods[6].selector = @selector(weAreClosestWithJavaUtilSet:);
  methods[7].selector = @selector(sendDataWithNetI2pDataHash:withNetI2pDataDatabaseEntry:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[8].selector = @selector(sendClosestWithNetI2pDataHash:withJavaUtilSet:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[9].selector = @selector(sendMessageWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[10].selector = @selector(sendThroughTunnelWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[11].selector = @selector(getName);
  methods[12].selector = @selector(dropped);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npDatabaseLookupMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_replyKeyConsumed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_ROUTERS_RETURNED", "I", .constantValue.asInt = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MAX_ROUTERS_RETURNED, 0x1a, -1, -1, -1, -1 },
    { "CLOSENESS_THRESHOLD", "I", .constantValue.asInt = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_CLOSENESS_THRESHOLD, 0x1a, -1, -1, -1, -1 },
    { "REPLY_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_REPLY_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE_PRIORITY", "I", .constantValue.asInt = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MESSAGE_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_EXPIRE_DELAY, 0x19, -1, -1, -1, -1 },
    { "PROP_PUBLISH_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "DEFAULT_PUBLISH_UNREACHABLE", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_DEFAULT_PUBLISH_UNREACHABLE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npDatabaseLookupMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "getNearestRouters", "LNetI2pDataI2npDatabaseLookupMessage_Type;", "(Lnet/i2p/data/i2np/DatabaseLookupMessage$Type;)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "isUnreachable", "LNetI2pDataRouterRouterInfo;", "weAreClosest", "LJavaUtilSet;", "(Ljava/util/Set<Lnet/i2p/data/Hash;>;)Z", "sendData", "LNetI2pDataHash;LNetI2pDataDatabaseEntry;LNetI2pDataHash;LNetI2pDataTunnelId;", "sendClosest", "LNetI2pDataHash;LJavaUtilSet;LNetI2pDataHash;LNetI2pDataTunnelId;", "(Lnet/i2p/data/Hash;Ljava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/data/Hash;Lnet/i2p/data/TunnelId;)V", "sendMessage", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "sendThroughTunnel", &NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_PROP_PUBLISH_UNREACHABLE };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob = { "HandleDatabaseLookupMessageJob", "net.i2p.router.networkdb", ptrTable, methods, fields, 7, 0x1, 13, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob;
}

@end

void NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseLookupMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_class_()]);
  JreStrongAssign(&self->_message_, receivedMessage);
}

NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *new_NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseLookupMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, ctx, receivedMessage, from, fromHash)
}

NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *create_NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, NetI2pDataI2npDatabaseLookupMessage *receivedMessage, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npDatabaseLookupMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, ctx, receivedMessage, from, fromHash)
}

id<JavaUtilSet> NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_getNearestRoutersWithNetI2pDataI2npDatabaseLookupMessage_Type_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, NetI2pDataI2npDatabaseLookupMessage_Type *lookupType) {
  id<JavaUtilSet> dontInclude = [((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(self->_message_)) getDontIncludePeers];
  NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash];
  if (dontInclude == nil && lookupType == JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL)) {
    dontInclude = create_JavaUtilHashSet_initWithInt_(2);
    [dontInclude addWithId:us];
    [dontInclude addWithId:JreLoadStatic(NetI2pDataHash, FAKE_HASH)];
  }
  else if (dontInclude == nil) {
    dontInclude = JavaUtilCollections_singletonWithId_(us);
  }
  else if (lookupType == JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL)) {
    [dontInclude addWithId:us];
    [dontInclude addWithId:JreLoadStatic(NetI2pDataHash, FAKE_HASH)];
  }
  else {
    [dontInclude addWithId:us];
  }
  return [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) findNearestRoutersWithNetI2pDataHash:[self->_message_ getSearchKey] withInt:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MAX_ROUTERS_RETURNED withJavaUtilSet:dontInclude];
}

jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_isUnreachableWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *info) {
  NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_initialize();
  if (info == nil) return true;
  NSString *cap = [info getCapabilities];
  return [((NSString *) nil_chk(cap)) java_indexOf:NetI2pRouterRouter_CAPABILITY_REACHABLE] >= 0;
}

jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_publishUnreachable(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self) {
  return [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_PROP_PUBLISH_UNREACHABLE withBoolean:NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_DEFAULT_PUBLISH_UNREACHABLE];
}

jboolean NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_weAreClosestWithJavaUtilSet_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, id<JavaUtilSet> routerHashSet) {
  return [((id<JavaUtilSet>) nil_chk(routerHashSet)) containsWithId:[((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash]];
}

void NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendDataWithNetI2pDataHash_withNetI2pDataDatabaseEntry_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, NetI2pDataHash *key, NetI2pDataDatabaseEntry *data, NetI2pDataHash *toPeer, NetI2pDataTunnelId *replyTunnel) {
  if (![((NetI2pDataHash *) nil_chk(key)) isEqual:[((NetI2pDataDatabaseEntry *) nil_chk(data)) getHash]]) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Hash mismatch HDLMJ"];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@$@", @"Sending data matching key ", key, @" to peer ", toPeer, @" tunnel ", replyTunnel)];
  NetI2pDataI2npDatabaseStoreMessage *msg = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_([self getContext]);
  if ([data getType] == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatchedLeaseSet" withLong:1];
  }
  [msg setEntryWithNetI2pDataDatabaseEntry:data];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsMatched" withLong:1];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"netDb.lookupsHandled" withLong:1];
  [self sendMessageWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataHash:toPeer withNetI2pDataTunnelId:replyTunnel];
}

void NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_sendThroughTunnelWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob *self, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, NetI2pDataTunnelId *replyTunnel) {
  if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash])) isEqual:toPeer]) {
    NetI2pDataI2npTunnelGatewayMessage *m = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_([self getContext]);
    [m setMessageWithNetI2pDataI2npI2NPMessage:message];
    [m setTunnelIdWithNetI2pDataTunnelId:replyTunnel];
    [m setMessageExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(message)) getMessageExpiration]];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelGatewayMessage:m];
  }
  else {
    if (!self->_replyKeyConsumed_) {
      NetI2pDataSessionKey *replyKey = [((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(self->_message_)) getReplyKey];
      if (replyKey != nil) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@C@C@", @"Sending encrypted reply to ", toPeer, ' ', replyKey, ' ', [self->_message_ getReplyTag])];
        message = NetI2pRouterNetworkdbKademliaMessageWrapper_wrapWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataSessionKey_withNetI2pDataSessionTag_([self getContext], message, replyKey, [self->_message_ getReplyTag]);
        if (message == nil) {
          [self->_log_ errorWithNSString:@"Encryption error"];
          return;
        }
        self->_replyKeyConsumed_ = true;
      }
    }
    NetI2pDataI2npTunnelGatewayMessage *m = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_([self getContext]);
    [m setMessageWithNetI2pDataI2npI2NPMessage:message];
    [m setMessageExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(message)) getMessageExpiration]];
    [m setTunnelIdWithNetI2pDataTunnelId:replyTunnel];
    NetI2pRouterMessageSendMessageDirectJob *j = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], m, toPeer, 10 * 1000, NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob_MESSAGE_PRIORITY);
    [j runJob];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbHandleDatabaseLookupMessageJob)
