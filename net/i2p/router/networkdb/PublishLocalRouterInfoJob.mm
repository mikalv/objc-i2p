//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/PublishLocalRouterInfoJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/StatisticsManager.h"
#include "net/i2p/router/networkdb/PublishLocalRouterInfoJob.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterNetworkdbPublishLocalRouterInfoJob () {
 @public
  NetI2pUtilLog *_log_;
  volatile_jboolean _notFirstTime_;
  JavaUtilConcurrentAtomicAtomicInteger *_runCount_;
}

- (jlong)getDelay;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, _runCount_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jlong NetI2pRouterNetworkdbPublishLocalRouterInfoJob_get_MIN_PUBLISH_DELAY(void);
#define NetI2pRouterNetworkdbPublishLocalRouterInfoJob_MIN_PUBLISH_DELAY 540000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, MIN_PUBLISH_DELAY, jlong)

inline jlong NetI2pRouterNetworkdbPublishLocalRouterInfoJob_get_PUBLISH_DELAY(void);
#define NetI2pRouterNetworkdbPublishLocalRouterInfoJob_PUBLISH_DELAY 3120000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, PUBLISH_DELAY, jlong)

inline jlong NetI2pRouterNetworkdbPublishLocalRouterInfoJob_get_FIRST_TIME_DELAY(void);
#define NetI2pRouterNetworkdbPublishLocalRouterInfoJob_FIRST_TIME_DELAY 90000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, FIRST_TIME_DELAY, jlong)

__attribute__((unused)) static jlong NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(NetI2pRouterNetworkdbPublishLocalRouterInfoJob *self);

@interface NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(NetI2pDataRouterRouterAddress *)l
               withId:(NetI2pDataRouterRouterAddress *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator)

__attribute__((unused)) static void NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *self);

__attribute__((unused)) static NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *new_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *create_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator)

@implementation NetI2pRouterNetworkdbPublishLocalRouterInfoJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbPublishLocalRouterInfoJob_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (NSString *)getName {
  return @"Publish Local Router Info";
}

- (void)runJob {
  jlong last = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) getLastRouterInfoPublishTime];
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if (last + NetI2pRouterNetworkdbPublishLocalRouterInfoJob_MIN_PUBLISH_DELAY > now) {
    jlong delay = NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(self);
    [self requeueWithLong:last + delay - now];
    return;
  }
  NetI2pDataRouterRouterInfo *oldRI = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$I$", @"Old routerInfo contains ", [((id<JavaUtilCollection>) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(oldRI)) getAddresses])) size], @" addresses and ", [((id<JavaUtilMap>) nil_chk([oldRI getOptionsMap])) size], @" options")];
  @try {
    id<JavaUtilList> oldAddrs = create_JavaUtilArrayList_initWithJavaUtilCollection_([((NetI2pDataRouterRouterInfo *) nil_chk(oldRI)) getAddresses]);
    id<JavaUtilList> newAddrs = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) commSystem])) createAddresses];
    jint count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_runCount_)) incrementAndGet];
    NetI2pDataRouterRouterInfo *ri = create_NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(oldRI);
    if (JreLoadVolatileBoolean(&_notFirstTime_) && (count % 4) != 0 && [oldAddrs size] == [((id<JavaUtilList>) nil_chk(newAddrs)) size]) {
      NSString *newcaps = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getCapabilities];
      jboolean different = ![((NSString *) nil_chk([oldRI getCapabilities])) isEqual:newcaps];
      if (!different) {
        id<JavaUtilComparator> comp = create_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init();
        JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(oldAddrs, comp);
        JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(newAddrs, comp);
        for (jint i = 0; i < [oldAddrs size]; i++) {
          if (![((NetI2pDataRouterRouterAddress *) nil_chk([oldAddrs getWithInt:i])) deepEqualsWithNetI2pDataRouterRouterAddress:[((id<JavaUtilList>) nil_chk(newAddrs)) getWithInt:i]]) {
            different = true;
            break;
          }
        }
        if (!different) {
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Not republishing early because costs and caps and addresses are the same"];
          [self requeueWithLong:NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(self)];
          return;
        }
      }
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$$$@$@", @"Republishing early because addresses or costs or caps have changed - oldCaps: ", [oldRI getCapabilities], @" newCaps: ", newcaps, @" old:\n", oldAddrs, @"\nnew:\n", newAddrs)];
    }
    [ri setPublishedWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]];
    JavaUtilProperties *stats = [((NetI2pRouterStatisticsManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statPublisher])) publishStatistics];
    [ri setOptionsWithJavaUtilProperties:stats];
    [ri setAddressesWithJavaUtilCollection:newAddrs];
    NetI2pDataSigningPrivateKey *key = [((NetI2pRouterKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyManager])) getSigningPrivateKey];
    if (key == nil) {
      [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Internal error - signing private key not known?  rescheduling publish for 30s"];
      [self requeueWithLong:30 * 1000];
      return;
    }
    [ri signWithNetI2pDataSigningPrivateKey:key];
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) setRouterInfoWithNetI2pDataRouterRouterInfo:ri];
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$ICI$@", @"Newly updated routerInfo is published with ", [((JavaUtilProperties *) nil_chk(stats)) size], '/', [((id<JavaUtilMap>) nil_chk([ri getOptionsMap])) size], @" options on ", create_JavaUtilDate_initWithLong_([ri getPublished]))];
    @try {
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) publishWithNetI2pDataRouterRouterInfo:ri];
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error publishing our identity - corrupt? Restart required" withJavaLangThrowable:iae];
      [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) rebuildNewIdentity];
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [_log_ errorWithNSString:@"Error signing the updated local router info!" withJavaLangThrowable:dfe];
  }
  if (JreLoadVolatileBoolean(&_notFirstTime_)) {
    [self requeueWithLong:NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(self)];
  }
  else {
    [self requeueWithLong:NetI2pRouterNetworkdbPublishLocalRouterInfoJob_FIRST_TIME_DELAY];
    JreAssignVolatileBoolean(&_notFirstTime_, true);
  }
}

- (jlong)getDelay {
  return NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_runCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(getDelay);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MIN_PUBLISH_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbPublishLocalRouterInfoJob_MIN_PUBLISH_DELAY, 0x1a, -1, -1, -1, -1 },
    { "PUBLISH_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbPublishLocalRouterInfoJob_PUBLISH_DELAY, 0x1a, -1, -1, -1, -1 },
    { "FIRST_TIME_DELAY", "J", .constantValue.asLong = NetI2pRouterNetworkdbPublishLocalRouterInfoJob_FIRST_TIME_DELAY, 0x1a, -1, -1, -1, -1 },
    { "_notFirstTime_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_runCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbPublishLocalRouterInfoJob = { "PublishLocalRouterInfoJob", "net.i2p.router.networkdb", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, 1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbPublishLocalRouterInfoJob;
}

@end

void NetI2pRouterNetworkdbPublishLocalRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbPublishLocalRouterInfoJob *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssignAndConsume(&self->_runCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbPublishLocalRouterInfoJob_class_()]);
}

NetI2pRouterNetworkdbPublishLocalRouterInfoJob *new_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterNetworkdbPublishLocalRouterInfoJob *create_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbPublishLocalRouterInfoJob, initWithNetI2pRouterRouterContext_, ctx)
}

jlong NetI2pRouterNetworkdbPublishLocalRouterInfoJob_getDelay(NetI2pRouterNetworkdbPublishLocalRouterInfoJob *self) {
  jlong rv = (NetI2pRouterNetworkdbPublishLocalRouterInfoJob_PUBLISH_DELAY * 3 / 4) + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pRouterNetworkdbPublishLocalRouterInfoJob_PUBLISH_DELAY / 4];
  rv /= 4;
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbPublishLocalRouterInfoJob)

@implementation NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(NetI2pDataRouterRouterAddress *)l
               withId:(NetI2pDataRouterRouterAddress *)r {
  jint c = [((NSString *) nil_chk([((NetI2pDataRouterRouterAddress *) nil_chk(l)) getTransportStyle])) compareToWithId:[((NetI2pDataRouterRouterAddress *) nil_chk(r)) getTransportStyle]];
  if (c != 0) return c;
  NSString *lh = [l getHost];
  NSString *rh = [r getHost];
  if (lh == nil) return rh == nil ? 0 : -1;
  if (rh == nil) return 1;
  return [lh compareToWithId:rh];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pDataRouterRouterAddress;LNetI2pDataRouterRouterAddress;", "LNetI2pRouterNetworkdbPublishLocalRouterInfoJob;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/data/router/RouterAddress;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator = { "AddrComparator", "net.i2p.router.networkdb", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator;
}

@end

void NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *self) {
  NSObject_init(self);
}

NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *new_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator, init)
}

NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator *create_NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbPublishLocalRouterInfoJob_AddrComparator)
