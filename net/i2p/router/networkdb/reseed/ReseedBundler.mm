//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/reseed/ReseedBundler.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/zip/ZipEntry.h"
#include "java/util/zip/ZipOutputStream.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/reseed/ReseedBundler.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterNetworkdbReseedReseedBundler () {
 @public
  NetI2pRouterRouterContext *_context_;
}

+ (NSString *)getRouterInfoNameWithNetI2pDataHash:(NetI2pDataHash *)hash_;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedBundler, _context_, NetI2pRouterRouterContext *)

inline NSString *NetI2pRouterNetworkdbReseedReseedBundler_get_ROUTERINFO_PREFIX(void);
static NSString *NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_PREFIX = @"routerInfo-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseedBundler, ROUTERINFO_PREFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbReseedReseedBundler_get_ROUTERINFO_SUFFIX(void);
static NSString *NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_SUFFIX = @".dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseedBundler, ROUTERINFO_SUFFIX, NSString *)

inline jint NetI2pRouterNetworkdbReseedReseedBundler_get_MINIMUM(void);
#define NetI2pRouterNetworkdbReseedReseedBundler_MINIMUM 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseedBundler, MINIMUM, jint)

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseedBundler_getRouterInfoNameWithNetI2pDataHash_(NetI2pDataHash *hash_);

@implementation NetI2pRouterNetworkdbReseedReseedBundler

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterNetworkdbReseedReseedBundler_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (JavaIoFile *)createZipWithInt:(jint)count {
  NetI2pDataHash *me = [((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash];
  jint routerCount = 0;
  jint copied = 0;
  jlong tooOld = JavaLangSystem_currentTimeMillis() - 7 * 24 * 60 * 60 * 1000LL;
  id<JavaUtilList> infos = create_JavaUtilArrayList_initWithJavaUtilCollection_([((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) getRouters]);
  id<JavaUtilMap> ipMap = create_JavaUtilHashMap_initWithInt_(count);
  id<JavaUtilList> toWrite = create_JavaUtilArrayList_initWithInt_(count);
  JavaUtilCollections_shuffleWithJavaUtilList_(infos);
  for (NetI2pDataRouterRouterInfo * __strong ri in infos) {
    if (copied >= count) break;
    NetI2pDataHash *key = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getIdentity])) calculateHash];
    if ([((NetI2pDataHash *) nil_chk(key)) isEqual:me]) {
      continue;
    }
    if ([ri getPublished] < tooOld) continue;
    if ([((NSString *) nil_chk([ri getCapabilities])) java_contains:@"U"]) continue;
    if ([((NSString *) nil_chk([ri getCapabilities])) java_contains:@"K"]) continue;
    id<JavaUtilCollection> addrs = [ri getAddresses];
    if ([((id<JavaUtilCollection>) nil_chk(addrs)) isEmpty]) continue;
    NSString *name = NetI2pRouterNetworkdbReseedReseedBundler_getRouterInfoNameWithNetI2pDataHash_(key);
    jboolean hasIntro = false;
    jboolean hasIPv4 = false;
    jboolean dupIP = false;
    for (NetI2pDataRouterRouterAddress * __strong addr in addrs) {
      if ([@"SSU" isEqual:[((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getTransportStyle]] && [addr getOptionWithNSString:@"ihost0"] != nil) {
        hasIntro = true;
        break;
      }
      NSString *host = [addr getHost];
      if (host != nil && [host java_contains:@"."]) {
        hasIPv4 = true;
        NetI2pDataHash *old = [ipMap putWithId:host withId:key];
        if (old != nil && ![old isEqual:key]) {
          dupIP = true;
          break;
        }
      }
    }
    if (dupIP) continue;
    if (hasIntro) continue;
    if (!hasIPv4) continue;
    if ([((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) isInBadCountryWithNetI2pDataRouterRouterInfo:ri]) continue;
    [toWrite addWithId:ri];
    copied++;
  }
  if ([toWrite isEmpty]) @throw create_JavaIoIOException_initWithNSString_(@"No router infos to include. Reseed yourself first.");
  if ([toWrite size] < JavaLangMath_minWithInt_withInt_(count, NetI2pRouterNetworkdbReseedReseedBundler_MINIMUM)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$I$", @"Not enough router infos to include, wanted ", count, @" but only found ", [toWrite size], @". Please try again later."));
  JavaIoFile *rv = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getTempDir], JreStrcat("$I$", @"genreseed-", [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextInt], @".zip"));
  JavaUtilZipZipOutputStream *zip = nil;
  @try {
    zip = create_JavaUtilZipZipOutputStream_initWithJavaIoOutputStream_(create_JavaIoFileOutputStream_initWithJavaIoFile_(rv));
    for (NetI2pDataRouterRouterInfo * __strong ri in toWrite) {
      NSString *name = NetI2pRouterNetworkdbReseedReseedBundler_getRouterInfoNameWithNetI2pDataHash_([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(ri)) getIdentity])) calculateHash]);
      JavaUtilZipZipEntry *entry_ = create_JavaUtilZipZipEntry_initWithNSString_(name);
      [entry_ setTimeWithLong:[ri getPublished]];
      [zip putNextEntryWithJavaUtilZipZipEntry:entry_];
      [ri writeBytesWithJavaIoOutputStream:zip];
      [zip closeEntry];
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [rv delete__];
    JavaIoIOException *ioe = create_JavaIoIOException_initWithNSString_([dfe getMessage]);
    [ioe initCauseWithJavaLangThrowable:dfe];
    @throw ioe;
  }
  @catch (JavaIoIOException *ioe) {
    [rv delete__];
    @throw ioe;
  }
  @finally {
    if (zip != nil) {
      @try {
        [zip finish];
        [zip close];
      }
      @catch (JavaIoIOException *ioe) {
        [rv delete__];
        @throw ioe;
      }
    }
  }
  return rv;
}

+ (NSString *)getRouterInfoNameWithNetI2pDataHash:(NetI2pDataHash *)hash_ {
  return NetI2pRouterNetworkdbReseedReseedBundler_getRouterInfoNameWithNetI2pDataHash_(hash_);
}

- (void)dealloc {
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(createZipWithInt:);
  methods[2].selector = @selector(getRouterInfoNameWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ROUTERINFO_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "ROUTERINFO_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "MINIMUM", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseedBundler_MINIMUM, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "createZip", "I", "LJavaIoIOException;", "getRouterInfoName", "LNetI2pDataHash;", &NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_PREFIX, &NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_SUFFIX };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbReseedReseedBundler = { "ReseedBundler", "net.i2p.router.networkdb.reseed", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbReseedReseedBundler;
}

@end

void NetI2pRouterNetworkdbReseedReseedBundler_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbReseedReseedBundler *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pRouterNetworkdbReseedReseedBundler *new_NetI2pRouterNetworkdbReseedReseedBundler_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseedBundler, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterNetworkdbReseedReseedBundler *create_NetI2pRouterNetworkdbReseedReseedBundler_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseedBundler, initWithNetI2pRouterRouterContext_, ctx)
}

NSString *NetI2pRouterNetworkdbReseedReseedBundler_getRouterInfoNameWithNetI2pDataHash_(NetI2pDataHash *hash_) {
  NetI2pRouterNetworkdbReseedReseedBundler_initialize();
  NSString *b64 = [((NetI2pDataHash *) nil_chk(hash_)) toBase64];
  return JreStrcat("$$$", NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_PREFIX, b64, NetI2pRouterNetworkdbReseedReseedBundler_ROUTERINFO_SUFFIX);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbReseedReseedBundler)
