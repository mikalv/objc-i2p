//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/reseed/Reseeder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "net/i2p/crypto/SU3File.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterClock.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/reseed/ReseedChecker.h"
#include "net/i2p/router/networkdb/reseed/Reseeder.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/PortMapper.h"
#include "net/i2p/util/RFC822Date.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SSLEepGet.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"

@interface NetI2pRouterNetworkdbReseedReseeder () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterNetworkdbReseedReseedChecker *_checker_;
}

+ (jboolean)isSNISupported;

- (NSString *)_tWithNSString:(NSString *)key;

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o;

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o
                      withId:(id)o2;

- (NSString *)ngettextWithNSString:(NSString *)s
                      withNSString:(NSString *)p
                           withInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder, _checker_, NetI2pRouterNetworkdbReseedReseedChecker *)

inline jlong NetI2pRouterNetworkdbReseedReseeder_get_MAX_RESEED_RESPONSE_SIZE(void);
#define NetI2pRouterNetworkdbReseedReseeder_MAX_RESEED_RESPONSE_SIZE 2097152LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MAX_RESEED_RESPONSE_SIZE, jlong)

inline jlong NetI2pRouterNetworkdbReseedReseeder_get_MAX_SU3_RESPONSE_SIZE(void);
#define NetI2pRouterNetworkdbReseedReseeder_MAX_SU3_RESPONSE_SIZE 1048576LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MAX_SU3_RESPONSE_SIZE, jlong)

inline jint NetI2pRouterNetworkdbReseedReseeder_get_MAX_TIME_PER_HOST(void);
#define NetI2pRouterNetworkdbReseedReseeder_MAX_TIME_PER_HOST 420000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MAX_TIME_PER_HOST, jint)

inline jlong NetI2pRouterNetworkdbReseedReseeder_get_MAX_FILE_AGE(void);
#define NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE 2592000000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MAX_FILE_AGE, jlong)

inline jboolean NetI2pRouterNetworkdbReseedReseeder_get_ENABLE_SU3(void);
#define NetI2pRouterNetworkdbReseedReseeder_ENABLE_SU3 true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, ENABLE_SU3, jboolean)

inline jboolean NetI2pRouterNetworkdbReseedReseeder_get_ENABLE_NON_SU3(void);
#define NetI2pRouterNetworkdbReseedReseeder_ENABLE_NON_SU3 false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, ENABLE_NON_SU3, jboolean)

inline jint NetI2pRouterNetworkdbReseedReseeder_get_MIN_RI_WANTED(void);
#define NetI2pRouterNetworkdbReseedReseeder_MIN_RI_WANTED 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MIN_RI_WANTED, jint)

inline jint NetI2pRouterNetworkdbReseedReseeder_get_MIN_RESEED_SERVERS(void);
#define NetI2pRouterNetworkdbReseedReseeder_MIN_RESEED_SERVERS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder, MIN_RESEED_SERVERS, jint)

inline NSString *NetI2pRouterNetworkdbReseedReseeder_get_SU3_FILENAME(void);
static NSString *NetI2pRouterNetworkdbReseedReseeder_SU3_FILENAME = @"i2pseeds.su3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseeder, SU3_FILENAME, NSString *)

inline NSString *NetI2pRouterNetworkdbReseedReseeder_get_ROUTERINFO_PREFIX(void);
static NSString *NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX = @"routerInfo-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseeder, ROUTERINFO_PREFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbReseedReseeder_get_ROUTERINFO_SUFFIX(void);
static NSString *NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX = @".dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseeder, ROUTERINFO_SUFFIX, NSString *)

inline NSString *NetI2pRouterNetworkdbReseedReseeder_get_BUNDLE_NAME(void);
static NSString *NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterNetworkdbReseedReseeder, BUNDLE_NAME, NSString *)

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbReseedReseeder_isSNISupported(void);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *key);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, id o);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, id o, id o2);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder_ngettextWithNSString_withNSString_withInt_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, NSString *p, jint n);

@interface NetI2pRouterNetworkdbReseedReseeder_ReseedRunner : NSObject < JavaLangRunnable, NetI2pUtilEepGet_StatusListener > {
 @public
  NetI2pRouterNetworkdbReseedReseeder *this$0_;
  jboolean _isRunning_;
  NSString *_proxyHost_;
  NSString *_sproxyHost_;
  jint _proxyPort_;
  jint _sproxyPort_;
  jboolean _shouldProxyHTTP_;
  jboolean _shouldProxySSL_;
  NetI2pUtilSSLEepGet_ProxyType *_sproxyType_;
  NetI2pUtilSSLEepGet_SSLState *_sslState_;
  jint _gotDate_;
  jlong _attemptStarted_;
  id<JavaUtilList> _bandwidths_;
  JavaNetURI *_url_;
}

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseeder:(NetI2pRouterNetworkdbReseedReseeder *)outer$;

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseeder:(NetI2pRouterNetworkdbReseedReseeder *)outer$
                                             withJavaNetURI:(JavaNetURI *)url;

- (void)run;

- (void)run2;

- (void)processBandwidths;

- (void)attemptFailedWithNSString:(NSString *)url
                         withLong:(jlong)bytesTransferred
                         withLong:(jlong)bytesRemaining
                          withInt:(jint)currentAttempt
                          withInt:(jint)numRetries
            withJavaLangException:(JavaLangException *)cause;

- (void)bytesTransferredWithLong:(jlong)alreadyTransferred
                         withInt:(jint)currentWrite
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url;

- (void)transferCompleteWithLong:(jlong)alreadyTransferred
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url
                    withNSString:(NSString *)outputFile
                     withBoolean:(jboolean)notModified;

- (void)transferFailedWithNSString:(NSString *)url
                          withLong:(jlong)bytesTransferred
                          withLong:(jlong)bytesRemaining
                           withInt:(jint)currentAttempt;

- (void)headerReceivedWithNSString:(NSString *)url
                           withInt:(jint)attemptNum
                      withNSString:(NSString *)key
                      withNSString:(NSString *)val;

- (void)attemptingWithNSString:(NSString *)url;

- (jint)reseedWithBoolean:(jboolean)echoStatus;

- (jint)reseedWithJavaUtilList:(id<JavaUtilList>)URLList
                   withBoolean:(jboolean)echoStatus;

- (jint)reseedOneWithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus;

- (jint)reseedSU3WithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus;

- (jint)reseedZipWithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus;

- (jint)reseedSU3OrZipWithJavaNetURI:(JavaNetURI *)seedURL
                         withBoolean:(jboolean)isSU3
                         withBoolean:(jboolean)echoStatus;

- (IOSIntArray *)extractSU3WithJavaIoFile:(JavaIoFile *)contentRaw;

- (IOSIntArray *)extractZipWithJavaIoFile:(JavaIoFile *)zip;

- (jboolean)fetchSeedWithNSString:(NSString *)seedURL
                     withNSString:(NSString *)peer;

- (IOSByteArray *)readURLWithJavaNetURI:(JavaNetURI *)url;

- (JavaIoFile *)fetchURLWithJavaNetURI:(JavaNetURI *)url;

- (jboolean)writeSeedWithNSString:(NSString *)name
                    withByteArray:(IOSByteArray *)data;

- (NetI2pUtilSSLEepGet_ProxyType *)getProxyType;

- (NSString *)getDisplayStringWithJavaNetURI:(JavaNetURI *)url;

- (NSString *)getDisplayStringWithNSString:(NSString *)url;

- (NSString *)getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _proxyHost_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _sproxyHost_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _sproxyType_, NetI2pUtilSSLEepGet_ProxyType *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _sslState_, NetI2pUtilSSLEepGet_SSLState *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _bandwidths_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, _url_, JavaNetURI *)

inline jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_get_MAX_DATE_SETS(void);
#define NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_MAX_DATE_SETS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, MAX_DATE_SETS, jint)

__attribute__((unused)) static void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pRouterNetworkdbReseedReseeder *outer$);

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *new_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder *outer$);

__attribute__((unused)) static void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url);

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *new_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url);

__attribute__((unused)) static void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_run2(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self);

__attribute__((unused)) static void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_processBandwidths(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self);

__attribute__((unused)) static jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, jboolean echoStatus);

__attribute__((unused)) static jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithJavaUtilList_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, id<JavaUtilList> URLList, jboolean echoStatus);

__attribute__((unused)) static jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedOneWithJavaNetURI_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *seedURL, jboolean echoStatus);

__attribute__((unused)) static jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedSU3OrZipWithJavaNetURI_withBoolean_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *seedURL, jboolean isSU3, jboolean echoStatus);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchSeedWithNSString_withNSString_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *seedURL, NSString *peer);

__attribute__((unused)) static IOSByteArray *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_readURLWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url);

__attribute__((unused)) static JavaIoFile *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchURLWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url);

__attribute__((unused)) static jboolean NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_writeSeedWithNSString_withByteArray_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *name, IOSByteArray *data);

__attribute__((unused)) static NetI2pUtilSSLEepGet_ProxyType *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getProxyType(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNSString_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *url);

__attribute__((unused)) static NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pUtilSSLEepGet_ProxyType *type);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner)

NSString *NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SEED_URL = @"";
NSString *NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SSL_SEED_URL = @"https://i2p.novg.net/,https://i2pseed.creativecowpat.net:8443/,https://itoopie.atomike.ninja/,https://reseed.onion.im/,https://reseed.memcpy.io/,https://reseed.atomike.ninja/,https://i2p.manas.ca:8443/,https://i2p-0.manas.ca:8443/,https://i2p.mooo.com/netDb/,https://download.xxlspeed.com/,https://netdb.i2p2.no/,https://reseed.i2p-projekt.de/";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_HOST = @"router.reseedProxyHost";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PORT = @"router.reseedProxyPort";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_ENABLE = @"router.reseedProxyEnable";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_DISABLE = @"router.reseedSSLDisable";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_REQUIRED = @"router.reseedSSLRequired";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_RESEED_URL = @"i2p.reseedURL";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_USERNAME = @"router.reseedProxy.username";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PASSWORD = @"router.reseedProxy.password";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_AUTH_ENABLE = @"router.reseedProxy.authEnable";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_HOST = @"router.reseedSSLProxyHost";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PORT = @"router.reseedSSLProxyPort";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_ENABLE = @"router.reseedSSLProxyEnable";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_USERNAME = @"router.reseedSSLProxy.username";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PASSWORD = @"router.reseedSSLProxy.password";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_AUTH_ENABLE = @"router.reseedSSLProxy.authEnable";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_TYPE = @"router.reseedSSLProxyType";
NSString *NetI2pRouterNetworkdbReseedReseeder_PROP_DISABLE = @"router.reseedDisable";

@implementation NetI2pRouterNetworkdbReseedReseeder

+ (NSString *)DEFAULT_SEED_URL {
  return NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SEED_URL;
}

+ (NSString *)DEFAULT_SSL_SEED_URL {
  return NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SSL_SEED_URL;
}

+ (NSString *)PROP_PROXY_HOST {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_HOST;
}

+ (NSString *)PROP_PROXY_PORT {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PORT;
}

+ (NSString *)PROP_PROXY_ENABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_ENABLE;
}

+ (NSString *)PROP_SSL_DISABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_DISABLE;
}

+ (NSString *)PROP_SSL_REQUIRED {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_REQUIRED;
}

+ (NSString *)PROP_RESEED_URL {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_RESEED_URL;
}

+ (NSString *)PROP_PROXY_USERNAME {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_USERNAME;
}

+ (NSString *)PROP_PROXY_PASSWORD {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PASSWORD;
}

+ (NSString *)PROP_PROXY_AUTH_ENABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_AUTH_ENABLE;
}

+ (NSString *)PROP_SPROXY_HOST {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_HOST;
}

+ (NSString *)PROP_SPROXY_PORT {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PORT;
}

+ (NSString *)PROP_SPROXY_ENABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_ENABLE;
}

+ (NSString *)PROP_SPROXY_USERNAME {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_USERNAME;
}

+ (NSString *)PROP_SPROXY_PASSWORD {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PASSWORD;
}

+ (NSString *)PROP_SPROXY_AUTH_ENABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_AUTH_ENABLE;
}

+ (NSString *)PROP_SPROXY_TYPE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_TYPE;
}

+ (NSString *)PROP_DISABLE {
  return NetI2pRouterNetworkdbReseedReseeder_PROP_DISABLE;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
     withNetI2pRouterNetworkdbReseedReseedChecker:(NetI2pRouterNetworkdbReseedReseedChecker *)rc {
  NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(self, ctx, rc);
  return self;
}

- (void)requestReseed {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *reseedRunner = create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(self);
  JavaLangThread *reseed = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(reseedRunner, @"Reseed", true);
  [reseed start];
}

- (void)requestReseedWithJavaNetURI:(JavaNetURI *)url {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *reseedRunner = create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(self, url);
  JavaLangThread *reseed = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(reseedRunner, @"Reseed", true);
  [reseed start];
}

- (jint)requestReseedWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(_checker_)) setErrorWithNSString:@""];
  [_checker_ setStatusWithNSString:@"Reseeding from file"];
  IOSByteArray *su3Magic = NetI2pDataDataHelper_getASCIIWithNSString_(NetI2pCryptoSU3File_MAGIC);
  IOSByteArray *zipMagic = [IOSByteArray arrayWithBytes:(jbyte[]){ (jint) 0x50, (jint) 0x4b, (jint) 0x03, (jint) 0x04 } count:4];
  jint len = JavaLangMath_maxWithInt_withInt_(((IOSByteArray *) nil_chk(su3Magic))->size_, zipMagic->size_);
  IOSByteArray *magic = [IOSByteArray arrayWithLength:len];
  JavaIoFile *tmp = nil;
  JavaIoOutputStream *out = nil;
  @try {
    NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(inArg, magic);
    jboolean isSU3;
    if (NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(magic, 0, su3Magic, 0, su3Magic->size_)) isSU3 = true;
    else if (NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(magic, 0, zipMagic, 0, zipMagic->size_)) isSU3 = false;
    else @throw create_JavaIoIOException_initWithNSString_(@"Not a zip or su3 file");
    tmp = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(_context_)) getTempDir], JreStrcat("$I$", @"manualreseeds-", [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextInt], (isSU3 ? @".su3" : @".zip")));
    out = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(tmp));
    [out writeWithByteArray:magic];
    NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(inArg, out);
    [out close];
    IOSIntArray *stats;
    NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *reseedRunner = create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(self);
    if (isSU3) stats = [reseedRunner extractSU3WithJavaIoFile:tmp];
    else stats = [reseedRunner extractZipWithJavaIoFile:tmp];
    jint fetched = IOSIntArray_Get(nil_chk(stats), 0);
    jint errors = IOSIntArray_Get(stats, 1);
    if (fetched <= 0) @throw create_JavaIoIOException_initWithNSString_(@"No seeds extracted");
    [_checker_ setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(self, @"Reseeding: got router info from file ({0} successful, {1} errors).", JavaLangInteger_valueOfWithInt_(fetched), JavaLangInteger_valueOfWithInt_(errors))];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$I$", @"Reseed got ", fetched, @" router infos from file with ", errors, @" errors")];
    [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([_context_ router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_RESEED withNSString:JreStrcat("I$", fetched, @" from file")];
    return fetched;
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(inArg)) close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (out != nil) @try {
      [out close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (tmp != nil) [tmp delete__];
  }
}

+ (jboolean)isSNISupported {
  return NetI2pRouterNetworkdbReseedReseeder_isSNISupported();
}

- (NSString *)_tWithNSString:(NSString *)key {
  return NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self, key);
}

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o {
  return NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_(self, s, o);
}

- (NSString *)_tWithNSString:(NSString *)s
                      withId:(id)o
                      withId:(id)o2 {
  return NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(self, s, o, o2);
}

- (NSString *)ngettextWithNSString:(NSString *)s
                      withNSString:(NSString *)p
                           withInt:(jint)n {
  return NetI2pRouterNetworkdbReseedReseeder_ngettextWithNSString_withNSString_withInt_(self, s, p, n);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_checker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterNetworkdbReseedReseedChecker:);
  methods[1].selector = @selector(requestReseed);
  methods[2].selector = @selector(requestReseedWithJavaNetURI:);
  methods[3].selector = @selector(requestReseedWithJavaIoInputStream:);
  methods[4].selector = @selector(isSNISupported);
  methods[5].selector = @selector(_tWithNSString:);
  methods[6].selector = @selector(_tWithNSString:withId:);
  methods[7].selector = @selector(_tWithNSString:withId:withId:);
  methods[8].selector = @selector(ngettextWithNSString:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_checker_", "LNetI2pRouterNetworkdbReseedReseedChecker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_RESEED_RESPONSE_SIZE", "J", .constantValue.asLong = NetI2pRouterNetworkdbReseedReseeder_MAX_RESEED_RESPONSE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_SU3_RESPONSE_SIZE", "J", .constantValue.asLong = NetI2pRouterNetworkdbReseedReseeder_MAX_SU3_RESPONSE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_TIME_PER_HOST", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseeder_MAX_TIME_PER_HOST, 0x1a, -1, -1, -1, -1 },
    { "MAX_FILE_AGE", "J", .constantValue.asLong = NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE, 0x1a, -1, -1, -1, -1 },
    { "ENABLE_SU3", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbReseedReseeder_ENABLE_SU3, 0x1a, -1, -1, -1, -1 },
    { "ENABLE_NON_SU3", "Z", .constantValue.asBOOL = NetI2pRouterNetworkdbReseedReseeder_ENABLE_NON_SU3, 0x1a, -1, -1, -1, -1 },
    { "MIN_RI_WANTED", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseeder_MIN_RI_WANTED, 0x1a, -1, -1, -1, -1 },
    { "MIN_RESEED_SERVERS", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseeder_MIN_RESEED_SERVERS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SEED_URL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "DEFAULT_SSL_SEED_URL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "SU3_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "PROP_PROXY_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "PROP_PROXY_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "PROP_PROXY_ENABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "PROP_SSL_DISABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "PROP_SSL_REQUIRED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "PROP_RESEED_URL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "PROP_PROXY_USERNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "PROP_PROXY_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "PROP_PROXY_AUTH_ENABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "PROP_SPROXY_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "PROP_SPROXY_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "PROP_SPROXY_ENABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "PROP_SPROXY_USERNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "PROP_SPROXY_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "PROP_SPROXY_AUTH_ENABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "PROP_SPROXY_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "PROP_DISABLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "ROUTERINFO_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "ROUTERINFO_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterNetworkdbReseedReseedChecker;", "requestReseed", "LJavaNetURI;", "LJavaLangIllegalArgumentException;", "LJavaIoInputStream;", "LJavaIoIOException;", "_t", "LNSString;", "LNSString;LNSObject;", "LNSString;LNSObject;LNSObject;", "ngettext", "LNSString;LNSString;I", &NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SEED_URL, &NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SSL_SEED_URL, &NetI2pRouterNetworkdbReseedReseeder_SU3_FILENAME, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_HOST, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PORT, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_ENABLE, &NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_DISABLE, &NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_REQUIRED, &NetI2pRouterNetworkdbReseedReseeder_PROP_RESEED_URL, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_USERNAME, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PASSWORD, &NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_AUTH_ENABLE, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_HOST, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PORT, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_ENABLE, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_USERNAME, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PASSWORD, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_AUTH_ENABLE, &NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_TYPE, &NetI2pRouterNetworkdbReseedReseeder_PROP_DISABLE, &NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX, &NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX, &NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME, "LNetI2pRouterNetworkdbReseedReseeder_ReseedRunner;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbReseedReseeder = { "Reseeder", "net.i2p.router.networkdb.reseed", ptrTable, methods, fields, 7, 0x1, 9, 34, -1, 35, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbReseedReseeder;
}

@end

void NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(NetI2pRouterNetworkdbReseedReseeder *self, NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbReseedReseedChecker *rc) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbReseedReseeder_class_()]);
  JreStrongAssign(&self->_checker_, rc);
}

NetI2pRouterNetworkdbReseedReseeder *new_NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbReseedReseedChecker *rc) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseeder, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_, ctx, rc)
}

NetI2pRouterNetworkdbReseedReseeder *create_NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(NetI2pRouterRouterContext *ctx, NetI2pRouterNetworkdbReseedReseedChecker *rc) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseeder, initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_, ctx, rc)
}

jboolean NetI2pRouterNetworkdbReseedReseeder_isSNISupported() {
  NetI2pRouterNetworkdbReseedReseeder_initialize();
  return NetI2pUtilSystemVersion_isJava7() || NetI2pUtilSystemVersion_isAndroid();
}

NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *key) {
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(key, self->_context_, NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME);
}

NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, id o) {
  return NetI2pUtilTranslate_getStringWithNSString_withId_withNetI2pI2PAppContext_withNSString_(s, o, self->_context_, NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME);
}

NSString *NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, id o, id o2) {
  return NetI2pUtilTranslate_getStringWithNSString_withId_withId_withNetI2pI2PAppContext_withNSString_(s, o, o2, self->_context_, NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME);
}

NSString *NetI2pRouterNetworkdbReseedReseeder_ngettextWithNSString_withNSString_withInt_(NetI2pRouterNetworkdbReseedReseeder *self, NSString *s, NSString *p, jint n) {
  return NetI2pUtilTranslate_getStringWithInt_withNSString_withNSString_withNetI2pI2PAppContext_withNSString_(n, s, p, self->_context_, NetI2pRouterNetworkdbReseedReseeder_BUNDLE_NAME);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbReseedReseeder)

@implementation NetI2pRouterNetworkdbReseedReseeder_ReseedRunner

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseeder:(NetI2pRouterNetworkdbReseedReseeder *)outer$ {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(self, outer$);
  return self;
}

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseeder:(NetI2pRouterNetworkdbReseedReseeder *)outer$
                                             withJavaNetURI:(JavaNetURI *)url {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(self, outer$, url);
  return self;
}

- (void)run {
  @try {
    NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_run2(self);
  }
  @finally {
    [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(this$0_->_checker_)) done];
    NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_processBandwidths(self);
  }
}

- (void)run2 {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_run2(self);
}

- (void)processBandwidths {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_processBandwidths(self);
}

- (void)attemptFailedWithNSString:(NSString *)url
                         withLong:(jlong)bytesTransferred
                         withLong:(jlong)bytesRemaining
                          withInt:(jint)currentAttempt
                          withInt:(jint)numRetries
            withJavaLangException:(JavaLangException *)cause {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$$", @"EepGet failed on ", url) withJavaLangThrowable:cause];
  else [this$0_->_log_ logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$@", @"EepGet failed on ", url, @" : ", cause)];
  if (cause != nil && [cause getMessage] != nil) [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(this$0_->_checker_)) setErrorWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([cause getMessage])];
}

- (void)bytesTransferredWithLong:(jlong)alreadyTransferred
                         withInt:(jint)currentWrite
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url {
}

- (void)transferCompleteWithLong:(jlong)alreadyTransferred
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url
                    withNSString:(NSString *)outputFile
                     withBoolean:(jboolean)notModified {
}

- (void)transferFailedWithNSString:(NSString *)url
                          withLong:(jlong)bytesTransferred
                          withLong:(jlong)bytesRemaining
                           withInt:(jint)currentAttempt {
}

- (void)headerReceivedWithNSString:(NSString *)url
                           withInt:(jint)attemptNum
                      withNSString:(NSString *)key
                      withNSString:(NSString *)val {
  if (_gotDate_ < NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_MAX_DATE_SETS && [@"date" isEqual:[((NSString *) nil_chk(key)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]] && _attemptStarted_ > 0) {
    jlong timeRcvd = JavaLangSystem_currentTimeMillis();
    jlong serverTime = NetI2pUtilRFC822Date_parse822DateWithNSString_(val);
    if (serverTime > 0) {
      jlong now = serverTime + 500 + ((timeRcvd - _attemptStarted_) / 2);
      jlong offset = now - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
      if ([((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) getUpdatedSuccessfully]) {
        if (_gotDate_ > 0) [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) setNowWithLong:now withInt:NetI2pRouterRouterClock_DEFAULT_STRATUM - 2];
        else [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) setNowWithLong:now withInt:NetI2pRouterRouterClock_DEFAULT_STRATUM - 1];
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$$", @"Reseed adjusting clock by ", NetI2pDataDataHelper_formatDurationWithLong_(JavaLangMath_absWithLong_(offset)))];
      }
      else {
        [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) setNowWithLong:now withInt:NetI2pRouterRouterClock_DEFAULT_STRATUM - 1];
        [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"NTP failure, Reseed adjusting clock by ", NetI2pDataDataHelper_formatDurationWithLong_(JavaLangMath_absWithLong_(offset)))];
      }
      _gotDate_++;
    }
  }
}

- (void)attemptingWithNSString:(NSString *)url {
  if (_gotDate_ < NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_MAX_DATE_SETS) _attemptStarted_ = JavaLangSystem_currentTimeMillis();
}

- (jint)reseedWithBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithBoolean_(self, echoStatus);
}

- (jint)reseedWithJavaUtilList:(id<JavaUtilList>)URLList
                   withBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithJavaUtilList_withBoolean_(self, URLList, echoStatus);
}

- (jint)reseedOneWithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedOneWithJavaNetURI_withBoolean_(self, seedURL, echoStatus);
}

- (jint)reseedSU3WithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedSU3OrZipWithJavaNetURI_withBoolean_withBoolean_(self, seedURL, true, echoStatus);
}

- (jint)reseedZipWithJavaNetURI:(JavaNetURI *)seedURL
                    withBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedSU3OrZipWithJavaNetURI_withBoolean_withBoolean_(self, seedURL, false, echoStatus);
}

- (jint)reseedSU3OrZipWithJavaNetURI:(JavaNetURI *)seedURL
                         withBoolean:(jboolean)isSU3
                         withBoolean:(jboolean)echoStatus {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedSU3OrZipWithJavaNetURI_withBoolean_withBoolean_(self, seedURL, isSU3, echoStatus);
}

- (IOSIntArray *)extractSU3WithJavaIoFile:(JavaIoFile *)contentRaw {
  jint fetched = 0;
  jint errors = 0;
  JavaIoFile *zip = nil;
  @try {
    NetI2pCryptoSU3File *su3 = create_NetI2pCryptoSU3File_initWithNetI2pI2PAppContext_withJavaIoFile_(this$0_->_context_, contentRaw);
    zip = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) getTempDir], JreStrcat("$I$", @"reseed-", [((NetI2pUtilRandomSource *) nil_chk([this$0_->_context_ random])) nextInt], @".zip"));
    [su3 verifyAndMigrateWithJavaIoFile:zip];
    jint type = [su3 getContentType];
    if (type != NetI2pCryptoSU3File_CONTENT_RESEED) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad content type ", type));
    NSString *version_ = [su3 getVersionString];
    @try {
      JavaLangLong *ver = JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_([((NSString *) nil_chk(version_)) java_trim]));
      if ([ver longLongValue] >= 1400000000LL) {
        JreBoxedTimesAssignLong(&ver, 1000);
        if ([ver longLongValue] < [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE) @throw create_JavaIoIOException_initWithNSString_(@"su3 file too old");
      }
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
    IOSIntArray *stats = [self extractZipWithJavaIoFile:zip];
    fetched = IOSIntArray_Get(nil_chk(stats), 0);
    errors = IOSIntArray_Get(stats, 1);
  }
  @catch (JavaLangThrowable *t) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error reseeding: ", t)];
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"Error reseeding" withJavaLangThrowable:t];
    errors++;
  }
  @finally {
    [((JavaIoFile *) nil_chk(contentRaw)) delete__];
    if (zip != nil) [zip delete__];
  }
  IOSIntArray *rv = [IOSIntArray arrayWithLength:2];
  *IOSIntArray_GetRef(rv, 0) = fetched;
  *IOSIntArray_GetRef(rv, 1) = errors;
  return rv;
}

- (IOSIntArray *)extractZipWithJavaIoFile:(JavaIoFile *)zip {
  jint fetched = 0;
  jint errors = 0;
  JavaIoFile *tmpDir = nil;
  @try {
    tmpDir = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) getTempDir], JreStrcat("$I", @"reseeds-", [((NetI2pUtilRandomSource *) nil_chk([this$0_->_context_ random])) nextInt]));
    if (!NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_(zip, tmpDir)) @throw create_JavaIoIOException_initWithNSString_(@"Bad zip file");
    NetI2pDataHash *ourHash = [this$0_->_context_ routerHash];
    NSString *ourB64 = ourHash != nil ? JreStrcat("$$$", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX, [ourHash toBase64], NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX) : @"";
    IOSObjectArray *files = [tmpDir listFiles];
    if (files == nil || files->size_ == 0) @throw create_JavaIoIOException_initWithNSString_(@"No files in zip");
    id<JavaUtilList> fList = JavaUtilArrays_asListWithNSObjectArray_(files);
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(fList, [this$0_->_context_ random]);
    jlong minTime = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE;
    JavaIoFile *netDbDir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([this$0_->_context_ getRouterDir], @"netDb");
    if (![netDbDir exists]) [netDbDir mkdirs];
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(fList)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && fetched < 400; ) {
      JavaIoFile *f = [iter next];
      NSString *name = [((JavaIoFile *) nil_chk(f)) getName];
      if ([((NSString *) nil_chk(name)) java_length] != [((NSString *) nil_chk(NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX)) java_length] + 44 + [((NSString *) nil_chk(NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX)) java_length] || [name isEqual:ourB64] || [f length] > 10 * 1024 || [f lastModified] < minTime || ![name java_hasPrefix:NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX] || ![name java_hasSuffix:NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX] || ![f isFile]) {
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Skipping ", f)];
        [f delete__];
        errors++;
        continue;
      }
      JavaIoFile *to = create_JavaIoFile_initWithJavaIoFile_withNSString_(netDbDir, name);
      if (NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(f, to)) {
        fetched++;
      }
      else {
        [f delete__];
        errors++;
      }
      if (errors >= 5) break;
    }
  }
  @finally {
    if (tmpDir != nil) NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(tmpDir, false);
  }
  if (fetched > 0) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([this$0_->_context_ netDb])) rescan];
  IOSIntArray *rv = [IOSIntArray arrayWithLength:2];
  *IOSIntArray_GetRef(rv, 0) = fetched;
  *IOSIntArray_GetRef(rv, 1) = errors;
  return rv;
}

- (jboolean)fetchSeedWithNSString:(NSString *)seedURL
                     withNSString:(NSString *)peer {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchSeedWithNSString_withNSString_(self, seedURL, peer);
}

- (IOSByteArray *)readURLWithJavaNetURI:(JavaNetURI *)url {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_readURLWithJavaNetURI_(self, url);
}

- (JavaIoFile *)fetchURLWithJavaNetURI:(JavaNetURI *)url {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchURLWithJavaNetURI_(self, url);
}

- (jboolean)writeSeedWithNSString:(NSString *)name
                    withByteArray:(IOSByteArray *)data {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_writeSeedWithNSString_withByteArray_(self, name, data);
}

- (NetI2pUtilSSLEepGet_ProxyType *)getProxyType {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getProxyType(self);
}

- (NSString *)getDisplayStringWithJavaNetURI:(JavaNetURI *)url {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, url);
}

- (NSString *)getDisplayStringWithNSString:(NSString *)url {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNSString_(self, url);
}

- (NSString *)getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType:(NetI2pUtilSSLEepGet_ProxyType *)type {
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType_(self, type);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_proxyHost_);
  RELEASE_(_sproxyHost_);
  RELEASE_(_sproxyType_);
  RELEASE_(_sslState_);
  RELEASE_(_bandwidths_);
  RELEASE_(_url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 16, -1, 17, -1, -1 },
    { NULL, "I", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 24, 25, 26, -1, -1, -1 },
    { NULL, "[I", 0x1, 27, 25, 26, -1, -1, -1 },
    { NULL, "Z", 0x2, 28, 29, 30, -1, -1, -1 },
    { NULL, "[B", 0x2, 31, 0, 26, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 32, 0, 26, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 34, 26, -1, -1, -1 },
    { NULL, "LNetI2pUtilSSLEepGet_ProxyType;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 35, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 35, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbReseedReseeder:);
  methods[1].selector = @selector(initWithNetI2pRouterNetworkdbReseedReseeder:withJavaNetURI:);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(run2);
  methods[4].selector = @selector(processBandwidths);
  methods[5].selector = @selector(attemptFailedWithNSString:withLong:withLong:withInt:withInt:withJavaLangException:);
  methods[6].selector = @selector(bytesTransferredWithLong:withInt:withLong:withLong:withNSString:);
  methods[7].selector = @selector(transferCompleteWithLong:withLong:withLong:withNSString:withNSString:withBoolean:);
  methods[8].selector = @selector(transferFailedWithNSString:withLong:withLong:withInt:);
  methods[9].selector = @selector(headerReceivedWithNSString:withInt:withNSString:withNSString:);
  methods[10].selector = @selector(attemptingWithNSString:);
  methods[11].selector = @selector(reseedWithBoolean:);
  methods[12].selector = @selector(reseedWithJavaUtilList:withBoolean:);
  methods[13].selector = @selector(reseedOneWithJavaNetURI:withBoolean:);
  methods[14].selector = @selector(reseedSU3WithJavaNetURI:withBoolean:);
  methods[15].selector = @selector(reseedZipWithJavaNetURI:withBoolean:);
  methods[16].selector = @selector(reseedSU3OrZipWithJavaNetURI:withBoolean:withBoolean:);
  methods[17].selector = @selector(extractSU3WithJavaIoFile:);
  methods[18].selector = @selector(extractZipWithJavaIoFile:);
  methods[19].selector = @selector(fetchSeedWithNSString:withNSString:);
  methods[20].selector = @selector(readURLWithJavaNetURI:);
  methods[21].selector = @selector(fetchURLWithJavaNetURI:);
  methods[22].selector = @selector(writeSeedWithNSString:withByteArray:);
  methods[23].selector = @selector(getProxyType);
  methods[24].selector = @selector(getDisplayStringWithJavaNetURI:);
  methods[25].selector = @selector(getDisplayStringWithNSString:);
  methods[26].selector = @selector(getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbReseedReseeder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_proxyHost_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sproxyHost_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_proxyPort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sproxyPort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_shouldProxyHTTP_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_shouldProxySSL_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sproxyType_", "LNetI2pUtilSSLEepGet_ProxyType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_sslState_", "LNetI2pUtilSSLEepGet_SSLState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_gotDate_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_attemptStarted_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bandwidths_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 37, -1 },
    { "MAX_DATE_SETS", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_MAX_DATE_SETS, 0x1a, -1, -1, -1, -1 },
    { "_url_", "LJavaNetURI;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURI;", "LJavaLangIllegalArgumentException;", "attemptFailed", "LNSString;JJIILJavaLangException;", "bytesTransferred", "JIJJLNSString;", "transferComplete", "JJJLNSString;LNSString;Z", "transferFailed", "LNSString;JJI", "headerReceived", "LNSString;ILNSString;LNSString;", "attempting", "LNSString;", "reseed", "Z", "LJavaUtilList;Z", "(Ljava/util/List<Ljava/net/URI;>;Z)I", "reseedOne", "LJavaNetURI;Z", "reseedSU3", "reseedZip", "reseedSU3OrZip", "LJavaNetURI;ZZ", "extractSU3", "LJavaIoFile;", "LJavaIoIOException;", "extractZip", "fetchSeed", "LNSString;LNSString;", "LJavaIoIOException;LJavaNetURISyntaxException;", "readURL", "fetchURL", "writeSeed", "LNSString;[B", "getDisplayString", "LNetI2pUtilSSLEepGet_ProxyType;", "Ljava/util/List<Ljava/lang/Long;>;", "LNetI2pRouterNetworkdbReseedReseeder;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbReseedReseeder_ReseedRunner = { "ReseedRunner", "net.i2p.router.networkdb.reseed", ptrTable, methods, fields, 7, 0x2, 27, 15, 38, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner;
}

@end

void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pRouterNetworkdbReseedReseeder *outer$) {
  NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(self, outer$, nil);
}

NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *new_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, initWithNetI2pRouterNetworkdbReseedReseeder_, outer$)
}

NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_(NetI2pRouterNetworkdbReseedReseeder *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, initWithNetI2pRouterNetworkdbReseedReseeder_, outer$)
}

void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  if (url != nil) {
    NSString *lc = [((NSString *) nil_chk([url getPath])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    if (!([((NSString *) nil_chk(lc)) java_hasSuffix:@".zip"] || [lc java_hasSuffix:@".su3"])) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Reseed URL must end with .zip or .su3");
  }
  JreStrongAssign(&self->_url_, url);
  JreStrongAssignAndConsume(&self->_bandwidths_, new_JavaUtilArrayList_initWithInt_(4));
  if ([((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_ENABLE]) {
    JreStrongAssign(&self->_proxyHost_, [outer$->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_HOST]);
    self->_proxyPort_ = [outer$->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PORT withInt:-1];
  }
  else {
    JreStrongAssign(&self->_proxyHost_, nil);
    self->_proxyPort_ = -1;
  }
  self->_shouldProxyHTTP_ = (self->_proxyHost_ != nil && [self->_proxyHost_ java_length] > 0 && self->_proxyPort_ > 0);
  jboolean shouldProxySSL = [outer$->_context_ getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_ENABLE];
  NetI2pUtilSSLEepGet_ProxyType *sproxyType;
  if (shouldProxySSL) {
    sproxyType = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getProxyType(self);
    if (sproxyType == JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, INTERNAL)) {
      JreStrongAssign(&self->_sproxyHost_, @"localhost");
      self->_sproxyPort_ = [((NetI2pUtilPortMapper *) nil_chk([outer$->_context_ portMapper])) getPortWithNSString:NetI2pUtilPortMapper_SVC_HTTP_PROXY withInt:4444];
    }
    else {
      JreStrongAssign(&self->_sproxyHost_, [outer$->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_HOST]);
      self->_sproxyPort_ = [outer$->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PORT withInt:-1];
    }
  }
  else {
    sproxyType = JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE);
    JreStrongAssign(&self->_sproxyHost_, nil);
    self->_sproxyPort_ = -1;
  }
  self->_shouldProxySSL_ = (shouldProxySSL && self->_sproxyHost_ != nil && [self->_sproxyHost_ java_length] > 0 && self->_sproxyPort_ > 0);
  JreStrongAssign(&self->_sproxyType_, self->_shouldProxySSL_ ? sproxyType : JreLoadEnum(NetI2pUtilSSLEepGet_ProxyType, NONE));
}

NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *new_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_, outer$, url)
}

NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *create_NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder *outer$, JavaNetURI *url) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner, initWithNetI2pRouterNetworkdbReseedReseeder_withJavaNetURI_, outer$, url)
}

void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_run2(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self) {
  self->_isRunning_ = true;
  [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(self->this$0_->_checker_)) setErrorWithNSString:@""];
  [self->this$0_->_checker_ setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self->this$0_, @"Reseeding")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Reseed start"];
  jint total;
  if (self->_url_ != nil) {
    NSString *lc = [((NSString *) nil_chk([self->_url_ getPath])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    if ([((NSString *) nil_chk(lc)) java_hasSuffix:@".su3"]) total = [self reseedSU3WithJavaNetURI:self->_url_ withBoolean:false];
    else if ([lc java_hasSuffix:@".zip"]) total = [self reseedZipWithJavaNetURI:self->_url_ withBoolean:false];
    else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must end with .zip or .su3");
  }
  else {
    total = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithBoolean_(self, false);
  }
  if (total >= 20) {
    NSString *s = NetI2pRouterNetworkdbReseedReseeder_ngettextWithNSString_withNSString_withInt_(self->this$0_, @"Reseed successful, fetched {0} router info", @"Reseed successful, fetched {0} router infos", total);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", s, NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, self->_url_))];
    [self->this$0_->_checker_ setStatusWithNSString:s];
    [self->this$0_->_checker_ setErrorWithNSString:@""];
  }
  else if (total > 0) {
    NSString *s = NetI2pRouterNetworkdbReseedReseeder_ngettextWithNSString_withNSString_withInt_(self->this$0_, @"Reseed fetched only 1 router.", @"Reseed fetched only {0} routers.", total);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", s, NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, self->_url_))];
    [self->this$0_->_checker_ setErrorWithNSString:s];
    [self->this$0_->_checker_ setStatusWithNSString:@""];
  }
  else {
    if (total == 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Reseed failed ", NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, self->_url_), @"- check network connection")];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Ensure that nothing blocks outbound HTTP or HTTPS, check the logs, and if nothing helps, read the FAQ about reseeding manually."];
      if (self->_url_ == nil || [@"https" isEqual:[self->_url_ getScheme]]) {
        if (self->_sproxyHost_ != nil && self->_sproxyPort_ > 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$I", @"Check current proxy setting! Type: ", NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType_(self, self->_sproxyType_), @" Host: ", self->_sproxyHost_, @" Port: ", self->_sproxyPort_)];
        else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Consider enabling a proxy for https on the reseed configuration page"];
      }
      else {
        if (self->_proxyHost_ != nil && self->_proxyPort_ > 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I", @"Check HTTP proxy setting - host: ", self->_proxyHost_, @" port: ", self->_proxyPort_)];
        else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Consider enabling an HTTP proxy on the reseed configuration page"];
      }
    }
    NSString *old = [self->this$0_->_checker_ getError];
    [self->this$0_->_checker_ setErrorWithNSString:JreStrcat("$C$$$", NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self->this$0_, @"Reseed failed."), ' ', NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_(self->this$0_, @"See {0} for help.", JreStrcat("$$$", @"<a target=\"_top\" href=\"/configreseed\">", NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self->this$0_, @"reseed configuration page"), @"</a>")), @"<br>", old)];
    [self->this$0_->_checker_ setStatusWithNSString:@""];
  }
  self->_isRunning_ = false;
  [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_RESEED withNSString:JavaLangInteger_toStringWithInt_(total)];
}

void NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_processBandwidths(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self) {
  if ([((id<JavaUtilList>) nil_chk(self->_bandwidths_)) isEmpty]) return;
  jlong tot = 0;
  for (JavaLangLong * __strong sample in self->_bandwidths_) {
    tot += [((JavaLangLong *) nil_chk(sample)) longLongValue];
  }
  jlong avg = tot / [self->_bandwidths_ size];
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$J$I$", @"Bandwidth average: ", avg, @" KBps from ", [self->_bandwidths_ size], @" samples")];
}

jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, jboolean echoStatus) {
  id<JavaUtilList> URLList = create_JavaUtilArrayList_init();
  NSString *URLs = [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_RESEED_URL];
  jboolean defaulted = URLs == nil;
  jboolean SSLDisable = [self->this$0_->_context_ getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_DISABLE];
  jboolean SSLRequired = [self->this$0_->_context_ getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SSL_REQUIRED];
  if (defaulted) {
    if (SSLDisable) URLs = NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SEED_URL;
    else URLs = NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SSL_SEED_URL;
    JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(URLs, @" ,");
    while ([tok hasMoreTokens]) {
      NSString *u = [((NSString *) nil_chk([tok nextToken])) java_trim];
      if (![((NSString *) nil_chk(u)) java_hasSuffix:@"/"]) u = JreStrcat("$C", u, '/');
      @try {
        [URLList addWithId:create_JavaNetURI_initWithNSString_(u)];
      }
      @catch (JavaNetURISyntaxException *mue) {
      }
    }
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(URLList, [self->this$0_->_context_ random]);
    if (!SSLDisable && !SSLRequired) {
      id<JavaUtilList> URLList2 = create_JavaUtilArrayList_init();
      tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(NetI2pRouterNetworkdbReseedReseeder_DEFAULT_SEED_URL, @" ,");
      while ([tok hasMoreTokens]) {
        NSString *u = [((NSString *) nil_chk([tok nextToken])) java_trim];
        if (![((NSString *) nil_chk(u)) java_hasSuffix:@"/"]) u = JreStrcat("$C", u, '/');
        @try {
          [URLList2 addWithId:create_JavaNetURI_initWithNSString_(u)];
        }
        @catch (JavaNetURISyntaxException *mue) {
        }
      }
      JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(URLList2, [self->this$0_->_context_ random]);
      [URLList addAllWithJavaUtilCollection:URLList2];
    }
  }
  else {
    id<JavaUtilList> SSLList = create_JavaUtilArrayList_init();
    id<JavaUtilList> nonSSLList = create_JavaUtilArrayList_init();
    JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(URLs, @" ,");
    while ([tok hasMoreTokens]) {
      NSString *u = [((NSString *) nil_chk([tok nextToken])) java_trim];
      if (![((NSString *) nil_chk(u)) java_hasSuffix:@"/"]) u = JreStrcat("$C", u, '/');
      if ([u java_hasPrefix:@"https"]) {
        @try {
          [SSLList addWithId:create_JavaNetURI_initWithNSString_(u)];
        }
        @catch (JavaNetURISyntaxException *mue) {
        }
      }
      else {
        @try {
          [nonSSLList addWithId:create_JavaNetURI_initWithNSString_(u)];
        }
        @catch (JavaNetURISyntaxException *mue) {
        }
      }
    }
    if (!SSLDisable) {
      JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(SSLList, [self->this$0_->_context_ random]);
      [URLList addAllWithJavaUtilCollection:SSLList];
    }
    if (SSLDisable || !SSLRequired) {
      JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(nonSSLList, [self->this$0_->_context_ random]);
      [URLList addAllWithJavaUtilCollection:nonSSLList];
    }
  }
  if (!NetI2pRouterNetworkdbReseedReseeder_isSNISupported()) {
    @try {
      [URLList removeWithId:create_JavaNetURI_initWithNSString_(@"https://i2p.manas.ca:8443/")];
      [URLList removeWithId:create_JavaNetURI_initWithNSString_(@"https://i2p-0.manas.ca:8443/")];
      [URLList removeWithId:create_JavaNetURI_initWithNSString_(@"https://download.xxlspeed.com/")];
      [URLList removeWithId:create_JavaNetURI_initWithNSString_(@"https://netdb.i2p2.no/")];
    }
    @catch (JavaNetURISyntaxException *mue) {
    }
  }
  if ([URLList isEmpty]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"No valid reseed URLs"];
    [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(self->this$0_->_checker_)) setErrorWithNSString:@"No valid reseed URLs"];
    return -1;
  }
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithJavaUtilList_withBoolean_(self, URLList, echoStatus);
}

jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedWithJavaUtilList_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, id<JavaUtilList> URLList, jboolean echoStatus) {
  jint total = 0;
  jint fetched_reseed_servers = 0;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(URLList)) size] && self->_isRunning_; i++) {
    if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) router])) gracefulShutdownInProgress]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Reseed aborted, shutdown in progress"];
      return total;
    }
    JavaNetURI *url = [URLList getWithInt:i];
    jint dl = 0;
    {
      @try {
        dl = [self reseedSU3WithJavaNetURI:create_JavaNetURI_initWithNSString_(JreStrcat("$$", [((JavaNetURI *) nil_chk(url)) description], NetI2pRouterNetworkdbReseedReseeder_SU3_FILENAME)) withBoolean:echoStatus];
      }
      @catch (JavaNetURISyntaxException *mue) {
      }
    }
    if (dl > 0) {
      total += dl;
      fetched_reseed_servers++;
      if (total >= NetI2pRouterNetworkdbReseedReseeder_MIN_RI_WANTED && fetched_reseed_servers >= NetI2pRouterNetworkdbReseedReseeder_MIN_RESEED_SERVERS) break;
      for (jint j = i + 1; j < [URLList size]; ) {
        if ([((NSString *) nil_chk([url getHost])) isEqual:[((JavaNetURI *) nil_chk([URLList getWithInt:j])) getHost]]) [URLList removeWithInt:j];
        else j++;
      }
    }
  }
  return total;
}

jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedOneWithJavaNetURI_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *seedURL, jboolean echoStatus) {
  NSString *s = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, seedURL);
  @try {
    jlong timeLimit = JavaLangSystem_currentTimeMillis() + NetI2pRouterNetworkdbReseedReseeder_MAX_TIME_PER_HOST;
    [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(self->this$0_->_checker_)) setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self->this$0_, @"Reseeding: fetching seed URL.")];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseeding from ", s)];
    IOSByteArray *contentRaw = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_readURLWithJavaNetURI_(self, seedURL);
    if (contentRaw == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$$", @"Failed reading seed ", s)];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseed got no router infos ", s)];
      return 0;
    }
    NSString *content = NetI2pDataDataHelper_getUTF8WithByteArray_(contentRaw);
    id<JavaUtilSet> urls = create_JavaUtilHashSet_initWithInt_(1024);
    NetI2pDataHash *ourHash = [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) routerHash];
    NSString *ourB64 = ourHash != nil ? [ourHash toBase64] : nil;
    jint cur = 0;
    jint total = 0;
    while (total++ < 1000) {
      jint start = [((NSString *) nil_chk(content)) java_indexOfString:JreStrcat("$$", @"href=\"", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX) fromIndex:cur];
      if (start < 0) {
        start = [content java_indexOfString:JreStrcat("$$", @"HREF=\"", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX) fromIndex:cur];
        if (start < 0) break;
      }
      jint end = [content java_indexOfString:JreStrcat("$$", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX, @"\">") fromIndex:start];
      if (end < 0) break;
      if (start - end > 200) {
        cur = end + 1;
        continue;
      }
      NSString *name = [content java_substring:start + [(JreStrcat("$$", @"href=\"", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX)) java_length] endIndex:end];
      if (ourB64 == nil || ![((NSString *) nil_chk(name)) java_contains:ourB64]) {
        [urls addWithId:name];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:@"Skipping our own RI"];
      }
      cur = end + 1;
    }
    if (total <= 0) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$I$$$", @"Read ", contentRaw->size_, @" bytes ", s, @", but found no routerInfo URLs.")];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseed got no router infos ", s)];
      return 0;
    }
    id<JavaUtilList> urlList = create_JavaUtilArrayList_initWithJavaUtilCollection_(urls);
    JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(urlList, [self->this$0_->_context_ random]);
    jint fetched = 0;
    jint errors = 0;
    for (id<JavaUtilIterator> iter = [urlList iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && fetched < 200 && JavaLangSystem_currentTimeMillis() < timeLimit; ) {
      @try {
        [self->this$0_->_checker_ setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(self->this$0_, @"Reseeding: fetching router info from seed URL ({0} successful, {1} errors).", JavaLangInteger_valueOfWithInt_(fetched), JavaLangInteger_valueOfWithInt_(errors))];
        if (!NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchSeedWithNSString_withNSString_(self, [((JavaNetURI *) nil_chk(seedURL)) description], [iter next])) continue;
        fetched++;
        if (echoStatus) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"."];
          if (fetched % 60 == 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
        }
      }
      @catch (JavaLangRuntimeException *e) {
        if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:@"Failed fetch" withJavaLangThrowable:e];
        errors++;
      }
      if (errors >= 50 || (errors >= 10 && fetched <= 1)) break;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$$I$", @"Reseed got ", fetched, @" router infos ", s, @" with ", errors, @" errors")];
    if (fetched > 0) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->this$0_->_context_ netDb])) rescan];
    return fetched;
  }
  @catch (JavaLangThrowable *t) {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:@"Error reseeding" withJavaLangThrowable:t];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseed got no router infos ", s)];
    return 0;
  }
}

jint NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_reseedSU3OrZipWithJavaNetURI_withBoolean_withBoolean_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *seedURL, jboolean isSU3, jboolean echoStatus) {
  jint fetched = 0;
  jint errors = 0;
  JavaIoFile *contentRaw = nil;
  @try {
    [((NetI2pRouterNetworkdbReseedReseedChecker *) nil_chk(self->this$0_->_checker_)) setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_(self->this$0_, @"Reseeding: fetching seed URL.")];
    NSString *s = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, seedURL);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseeding ", s)];
    jlong startTime = JavaLangSystem_currentTimeMillis();
    contentRaw = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchURLWithJavaNetURI_(self, seedURL);
    jlong totalTime = JavaLangSystem_currentTimeMillis() - startTime;
    if (contentRaw == nil) {
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldWarn]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$$", @"Failed reading ", s)];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reseed got no router infos ", s)];
      return 0;
    }
    if (totalTime > 0) {
      jlong sz = [contentRaw length];
      jlong bw = 1000 * sz / totalTime;
      [((id<JavaUtilList>) nil_chk(self->_bandwidths_)) addWithId:JavaLangLong_valueOfWithLong_(bw)];
      if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$J$J$$", @"Rcvd ", sz, @" bytes in ", totalTime, @" ms ", NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, seedURL))];
    }
    IOSIntArray *stats;
    if (isSU3) stats = [self extractSU3WithJavaIoFile:contentRaw];
    else stats = [self extractZipWithJavaIoFile:contentRaw];
    fetched = IOSIntArray_Get(nil_chk(stats), 0);
    errors = IOSIntArray_Get(stats, 1);
  }
  @catch (JavaLangThrowable *t) {
    NSString *s = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, seedURL);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Error reseeding ", s, @": ", t)];
    [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) errorWithNSString:JreStrcat("$$", @"Error reseeding ", s) withJavaLangThrowable:t];
    errors++;
  }
  @finally {
    if (contentRaw != nil) [contentRaw delete__];
  }
  [self->this$0_->_checker_ setStatusWithNSString:NetI2pRouterNetworkdbReseedReseeder__tWithNSString_withId_withId_(self->this$0_, @"Reseeding: fetching router info from seed URL ({0} successful, {1} errors).", JavaLangInteger_valueOfWithInt_(fetched), JavaLangInteger_valueOfWithInt_(errors))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$$I$", @"Reseed got ", fetched, @" router infos ", NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(self, seedURL), @" with ", errors, @" errors")];
  return fetched;
}

jboolean NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchSeedWithNSString_withNSString_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *seedURL, NSString *peer) {
  JavaNetURI *uri = create_JavaNetURI_initWithNSString_(peer);
  NSString *b64 = [uri getPath];
  if (b64 == nil) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"bad hash ", peer));
  IOSByteArray *hash_ = NetI2pDataBase64_decodeWithNSString_(b64);
  if (hash_ == nil || hash_->size_ != NetI2pDataHash_HASH_LENGTH) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"bad hash ", peer));
  NetI2pDataHash *ourHash = [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) routerHash];
  if (ourHash != nil && NetI2pDataDataHelper_eqWithByteArray_withByteArray_(hash_, [ourHash getData])) return false;
  JavaNetURI *url = create_JavaNetURI_initWithNSString_(JreStrcat("$$$$$", seedURL, ([((NSString *) nil_chk(seedURL)) java_hasSuffix:@"/"] ? @"" : @"/"), NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX, peer, NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX));
  IOSByteArray *data = NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_readURLWithJavaNetURI_(self, url);
  if (data == nil || data->size_ <= 0) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed fetch of ", url));
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_writeSeedWithNSString_withByteArray_(self, b64, data);
}

IOSByteArray *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_readURLWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url) {
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(4 * 1024);
  NetI2pUtilEepGet *get;
  jboolean ssl = [@"https" isEqual:[((JavaNetURI *) nil_chk(url)) getScheme]];
  if (ssl) {
    NetI2pUtilSSLEepGet *sslget;
    if (self->_sslState_ == nil) {
      if (self->_shouldProxySSL_) sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_(self->this$0_->_context_, self->_sproxyType_, self->_sproxyHost_, self->_sproxyPort_, baos, [url description]);
      else sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_(self->this$0_->_context_, baos, [url description]);
      JreStrongAssign(&self->_sslState_, [sslget getSSLState]);
    }
    else {
      if (self->_shouldProxySSL_) sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self->this$0_->_context_, self->_sproxyType_, self->_sproxyHost_, self->_sproxyPort_, baos, [url description], self->_sslState_);
      else sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self->this$0_->_context_, baos, [url description], self->_sslState_);
    }
    get = sslget;
    if (self->_shouldProxySSL_ && [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_AUTH_ENABLE]) {
      NSString *user = [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_USERNAME];
      NSString *pass = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PASSWORD];
      if (user != nil && [user java_length] > 0 && pass != nil && [pass java_length] > 0) [get addAuthorizationWithNSString:user withNSString:pass];
    }
  }
  else {
    get = create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self->this$0_->_context_, self->_shouldProxyHTTP_, self->_proxyHost_, self->_proxyPort_, 0, 0, NetI2pRouterNetworkdbReseedReseeder_MAX_RESEED_RESPONSE_SIZE, nil, baos, [url description], false, nil, nil);
    if (self->_shouldProxyHTTP_ && [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_AUTH_ENABLE]) {
      NSString *user = [((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_USERNAME];
      NSString *pass = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PASSWORD];
      if (user != nil && [user java_length] > 0 && pass != nil && [pass java_length] > 0) [get addAuthorizationWithNSString:user withNSString:pass];
    }
  }
  if (![((NSString *) nil_chk([url description])) java_hasSuffix:@"/"]) {
    NSString *minLastMod = NetI2pUtilRFC822Date_to822DateWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) clock])) now] - NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE);
    [get addHeaderWithNSString:@"If-Modified-Since" withNSString:minLastMod];
  }
  [get addStatusListenerWithNetI2pUtilEepGet_StatusListener:self];
  if ([get fetch] && [get getStatusCode] == 200) return [baos toByteArray];
  return nil;
}

JavaIoFile *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_fetchURLWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url) {
  JavaIoFile *out = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getTempDir], JreStrcat("$I$", @"reseed-", [((NetI2pUtilRandomSource *) nil_chk([self->this$0_->_context_ random])) nextInt], @".tmp"));
  NetI2pUtilEepGet *get;
  jboolean ssl = [@"https" isEqual:[((JavaNetURI *) nil_chk(url)) getScheme]];
  if (ssl) {
    NetI2pUtilSSLEepGet *sslget;
    if (self->_sslState_ == nil) {
      if (self->_shouldProxySSL_) sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_(self->this$0_->_context_, self->_sproxyType_, self->_sproxyHost_, self->_sproxyPort_, [out getPath], [url description]);
      else sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_(self->this$0_->_context_, [out getPath], [url description]);
      JreStrongAssign(&self->_sslState_, [sslget getSSLState]);
    }
    else {
      if (self->_shouldProxySSL_) sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_ProxyType_withNSString_withInt_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self->this$0_->_context_, self->_sproxyType_, self->_sproxyHost_, self->_sproxyPort_, [out getPath], [url description], self->_sslState_);
      else sslget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withNSString_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self->this$0_->_context_, [out getPath], [url description], self->_sslState_);
    }
    get = sslget;
    if (self->_shouldProxySSL_ && [self->this$0_->_context_ getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_AUTH_ENABLE]) {
      NSString *user = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_USERNAME];
      NSString *pass = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_PASSWORD];
      if (user != nil && [user java_length] > 0 && pass != nil && [pass java_length] > 0) [get addAuthorizationWithNSString:user withNSString:pass];
    }
  }
  else {
    get = create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self->this$0_->_context_, self->_shouldProxyHTTP_, self->_proxyHost_, self->_proxyPort_, 0, 0, NetI2pRouterNetworkdbReseedReseeder_MAX_SU3_RESPONSE_SIZE, [out getPath], nil, [url description], false, nil, nil);
    if (self->_shouldProxyHTTP_ && [self->this$0_->_context_ getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_AUTH_ENABLE]) {
      NSString *user = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_USERNAME];
      NSString *pass = [self->this$0_->_context_ getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_PROXY_PASSWORD];
      if (user != nil && [user java_length] > 0 && pass != nil && [pass java_length] > 0) [get addAuthorizationWithNSString:user withNSString:pass];
    }
  }
  if (![((NSString *) nil_chk([url description])) java_hasSuffix:@"/"]) {
    NSString *minLastMod = NetI2pUtilRFC822Date_to822DateWithLong_([((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now] - NetI2pRouterNetworkdbReseedReseeder_MAX_FILE_AGE);
    [get addHeaderWithNSString:@"If-Modified-Since" withNSString:minLastMod];
  }
  [get addStatusListenerWithNetI2pUtilEepGet_StatusListener:self];
  if ([get fetch] && [get getStatusCode] == 200) return out;
  [out delete__];
  return nil;
}

jboolean NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_writeSeedWithNSString_withByteArray_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *name, IOSByteArray *data) {
  NSString *dirName = @"netDb";
  JavaIoFile *netDbDir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getRouterDir], dirName);
  if (![netDbDir exists]) {
    [netDbDir mkdirs];
  }
  JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_(netDbDir, JreStrcat("$$$", NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_PREFIX, name, NetI2pRouterNetworkdbReseedReseeder_ROUTERINFO_SUFFIX));
  if ([file exists] && [file lastModified] > [((NetI2pUtilClock *) nil_chk([self->this$0_->_context_ clock])) now] - 60 * 60 * 1000) {
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$@", @"Skipping RI, ours is recent: ", file)];
    return false;
  }
  JavaIoFileOutputStream *fos = nil;
  @try {
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(file);
    [fos writeWithByteArray:data];
    if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->this$0_->_log_ infoWithNSString:JreStrcat("$I$@", @"Saved RI (", ((IOSByteArray *) nil_chk(data))->size_, @" bytes) to ", file)];
  }
  @finally {
    @try {
      if (fos != nil) [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  return true;
}

NetI2pUtilSSLEepGet_ProxyType *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getProxyType(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self) {
  NSString *sptype = [((NSString *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->this$0_->_context_)) getPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_SPROXY_TYPE withNSString:@"HTTP"])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  return NetI2pUtilSSLEepGet_ProxyType_valueOfWithNSString_(sptype);
}

NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithJavaNetURI_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, JavaNetURI *url) {
  if (url == nil) return @"";
  return NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNSString_(self, [url description]);
}

NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNSString_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NSString *url) {
  if (url == nil) return @"";
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"from "])) appendWithNSString:url];
  jboolean ssl = [url java_hasPrefix:@"https://"];
  if (ssl && self->_shouldProxySSL_) {
    [buf appendWithNSString:@" (using "];
    [buf appendWithNSString:NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType_(self, self->_sproxyType_)];
    [buf appendWithNSString:@" proxy "];
    if ([((NSString *) nil_chk(self->_sproxyHost_)) java_contains:@":"]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithNSString:self->_sproxyHost_])) appendWithChar:']'];
    else [buf appendWithNSString:self->_sproxyHost_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithInt:self->_sproxyPort_];
    [buf appendWithChar:')'];
  }
  else if (!ssl && self->_shouldProxyHTTP_) {
    [buf appendWithNSString:@" (using HTTP proxy "];
    if ([((NSString *) nil_chk(self->_proxyHost_)) java_contains:@":"]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithNSString:self->_proxyHost_])) appendWithChar:']'];
    else [buf appendWithNSString:self->_proxyHost_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithInt:self->_proxyPort_];
    [buf appendWithChar:')'];
  }
  return [buf description];
}

NSString *NetI2pRouterNetworkdbReseedReseeder_ReseedRunner_getDisplayStringWithNetI2pUtilSSLEepGet_ProxyType_(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner *self, NetI2pUtilSSLEepGet_ProxyType *type) {
  switch ([type ordinal]) {
    case NetI2pUtilSSLEepGet_ProxyType_Enum_HTTP:
    return @"HTTPS";
    case NetI2pUtilSSLEepGet_ProxyType_Enum_SOCKS4:
    return @"SOCKS 4/4a";
    case NetI2pUtilSSLEepGet_ProxyType_Enum_SOCKS5:
    return @"SOCKS 5";
    case NetI2pUtilSSLEepGet_ProxyType_Enum_INTERNAL:
    return @"I2P Outproxy";
    default:
    return [((NetI2pUtilSSLEepGet_ProxyType *) nil_chk(type)) description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbReseedReseeder_ReseedRunner)
