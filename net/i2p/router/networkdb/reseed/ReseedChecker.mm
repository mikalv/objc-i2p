//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/networkdb/reseed/ReseedChecker.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/URI.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/networkdb/reseed/ReseedChecker.h"
#include "net/i2p/router/networkdb/reseed/Reseeder.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterNetworkdbReseedReseedChecker () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  JavaUtilConcurrentAtomicAtomicBoolean *_inProgress_;
  volatile_id _lastStatus_;
  volatile_id _lastError_;
  volatile_jboolean _networkLogged_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker, _inProgress_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker, _lastStatus_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker, _lastError_, NSString *)

inline jlong NetI2pRouterNetworkdbReseedReseedChecker_get_STATUS_CLEAN_TIME(void);
#define NetI2pRouterNetworkdbReseedReseedChecker_STATUS_CLEAN_TIME 1200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterNetworkdbReseedReseedChecker, STATUS_CLEAN_TIME, jlong)

@interface NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterNetworkdbReseedReseedChecker *this$0_;
  NSString *_status_;
  NSString *_error_;
}

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseedChecker:(NetI2pRouterNetworkdbReseedReseedChecker *)outer$
                                                    withNSString:(NSString *)status
                                                    withNSString:(NSString *)error;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner)

J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner, _status_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner, _error_, NSString *)

__attribute__((unused)) static void NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *self, NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error);

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *new_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *create_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner)

@implementation NetI2pRouterNetworkdbReseedReseedChecker

+ (jint)MINIMUM {
  return NetI2pRouterNetworkdbReseedReseedChecker_MINIMUM;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterNetworkdbReseedReseedChecker_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jboolean)checkReseedWithInt:(jint)count {
  if (count >= NetI2pRouterNetworkdbReseedReseedChecker_MINIMUM) return false;
  if ([((NetI2pRouterRouterContext *) nil_chk(_context_)) getBooleanPropertyWithNSString:NetI2pRouterNetworkdbReseedReseeder_PROP_DISABLE]) {
    jint x = count - 1;
    NSString *s;
    if (x > 0) s = JreStrcat("$I$", @"Only ", x, @" peers remaining but reseed disabled by configuration");
    else s = @"No peers remaining but reseed disabled by configuration";
    JreVolatileStrongAssign(&_lastError_, s);
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:s];
    return false;
  }
  if ([((NetI2pRouterRouter *) nil_chk([_context_ router])) gracefulShutdownInProgress]) {
    jint x = count - 1;
    NSString *s;
    if (x > 0) s = JreStrcat("$I$", @"Only ", x, @" peers remaining but reseed disabled by shutdown in progress");
    else s = @"No peers remaining but reseed disabled by shutdown in progress";
    JreVolatileStrongAssign(&_lastError_, s);
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:s];
    return false;
  }
  JavaIoFile *noReseedFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(create_JavaIoFile_initWithNSString_(JavaLangSystem_getPropertyWithNSString_(@"user.home")), @".i2pnoreseed");
  JavaIoFile *noReseedFileAlt1 = create_JavaIoFile_initWithJavaIoFile_withNSString_(create_JavaIoFile_initWithNSString_(JavaLangSystem_getPropertyWithNSString_(@"user.home")), @"noreseed.i2p");
  JavaIoFile *noReseedFileAlt2 = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getConfigDir], @".i2pnoreseed");
  JavaIoFile *noReseedFileAlt3 = create_JavaIoFile_initWithJavaIoFile_withNSString_([_context_ getConfigDir], @"noreseed.i2p");
  if (![noReseedFile exists] && ![noReseedFileAlt1 exists] && ![noReseedFileAlt2 exists] && ![noReseedFileAlt3 exists]) {
    if (!NetI2pUtilAddresses_isConnected()) {
      if (!JreLoadVolatileBoolean(&_networkLogged_)) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Cannot reseed, no network connection"];
        JreAssignVolatileBoolean(&_networkLogged_, true);
      }
      return false;
    }
    JreAssignVolatileBoolean(&_networkLogged_, false);
    if (count <= 1) [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:@"Downloading peer router information for a new I2P installation"];
    else [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Very few known peers remaining - reseeding now"];
    return [self requestReseed];
  }
  else {
    jint x = count - 1;
    NSString *s;
    if (x > 0) s = JreStrcat("$I$", @"Only ", x, @" peers remaining but reseed disabled by config file");
    else s = @"No peers remaining but reseed disabled by config file";
    JreVolatileStrongAssign(&_lastError_, s);
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:s];
    return false;
  }
}

- (jboolean)requestReseed {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_inProgress_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      NetI2pRouterNetworkdbReseedReseeder *reseeder = create_NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(_context_, self);
      [reseeder requestReseed];
      return true;
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Reseed failed to start" withJavaLangThrowable:t];
      [self done];
      return false;
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Reseed already in progress"];
    return false;
  }
}

- (jboolean)requestReseedWithJavaNetURI:(JavaNetURI *)url {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_inProgress_)) compareAndSetWithBoolean:false withBoolean:true]) {
    NetI2pRouterNetworkdbReseedReseeder *reseeder = create_NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(_context_, self);
    @try {
      [reseeder requestReseedWithJavaNetURI:url];
      return true;
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      if ([iae getMessage] != nil) [self setErrorWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([iae getMessage])];
      [self done];
      @throw iae;
    }
    @catch (JavaLangThrowable *t) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Reseed failed to start" withJavaLangThrowable:t];
      [self done];
      return false;
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Reseed already in progress"];
    return false;
  }
}

- (jint)requestReseedWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_inProgress_)) compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      NetI2pRouterNetworkdbReseedReseeder *reseeder = create_NetI2pRouterNetworkdbReseedReseeder_initWithNetI2pRouterRouterContext_withNetI2pRouterNetworkdbReseedReseedChecker_(_context_, self);
      return [reseeder requestReseedWithJavaIoInputStream:inArg];
    }
    @catch (JavaIoIOException *ioe) {
      if ([ioe getMessage] != nil) [self setErrorWithNSString:NetI2pDataDataHelper_escapeHTMLWithNSString_([ioe getMessage])];
      @throw ioe;
    }
    @finally {
      [self done];
    }
  }
  else {
    @throw create_JavaIoIOException_initWithNSString_(@"Reseed already in progress");
  }
}

- (jboolean)inProgress {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_inProgress_)) get];
}

- (void)done {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_inProgress_)) setWithBoolean:false];
  [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(self, JreLoadVolatileId(&_lastStatus_), JreLoadVolatileId(&_lastError_)) withLong:NetI2pRouterNetworkdbReseedReseedChecker_STATUS_CLEAN_TIME];
}

- (NSString *)getStatus {
  return JreLoadVolatileId(&_lastStatus_);
}

- (void)setStatusWithNSString:(NSString *)s {
  JreVolatileStrongAssign(&_lastStatus_, s);
}

- (NSString *)getError {
  return JreLoadVolatileId(&_lastError_);
}

- (void)setErrorWithNSString:(NSString *)s {
  JreVolatileStrongAssign(&_lastError_, s);
}

- (void)__javaClone:(NetI2pRouterNetworkdbReseedReseedChecker *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_lastStatus_, &original->_lastStatus_);
  JreCloneVolatileStrong(&_lastError_, &original->_lastError_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_inProgress_);
  JreReleaseVolatile(&_lastStatus_);
  JreReleaseVolatile(&_lastError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 6, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(checkReseedWithInt:);
  methods[2].selector = @selector(requestReseed);
  methods[3].selector = @selector(requestReseedWithJavaNetURI:);
  methods[4].selector = @selector(requestReseedWithJavaIoInputStream:);
  methods[5].selector = @selector(inProgress);
  methods[6].selector = @selector(done);
  methods[7].selector = @selector(getStatus);
  methods[8].selector = @selector(setStatusWithNSString:);
  methods[9].selector = @selector(getError);
  methods[10].selector = @selector(setErrorWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inProgress_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastStatus_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastError_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_networkLogged_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "MINIMUM", "I", .constantValue.asInt = NetI2pRouterNetworkdbReseedReseedChecker_MINIMUM, 0x19, -1, -1, -1, -1 },
    { "STATUS_CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterNetworkdbReseedReseedChecker_STATUS_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "checkReseed", "I", "requestReseed", "LJavaNetURI;", "LJavaLangIllegalArgumentException;", "LJavaIoInputStream;", "LJavaIoIOException;", "setStatus", "LNSString;", "setError", "LNetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbReseedReseedChecker = { "ReseedChecker", "net.i2p.router.networkdb.reseed", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, 11, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbReseedReseedChecker;
}

@end

void NetI2pRouterNetworkdbReseedReseedChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterNetworkdbReseedReseedChecker *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_inProgress_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreVolatileStrongAssign(&self->_lastStatus_, @"");
  JreVolatileStrongAssign(&self->_lastError_, @"");
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterNetworkdbReseedReseedChecker_class_()]);
}

NetI2pRouterNetworkdbReseedReseedChecker *new_NetI2pRouterNetworkdbReseedReseedChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseedChecker, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterNetworkdbReseedReseedChecker *create_NetI2pRouterNetworkdbReseedReseedChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseedChecker, initWithNetI2pRouterRouterContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbReseedReseedChecker)

@implementation NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner

- (instancetype)initWithNetI2pRouterNetworkdbReseedReseedChecker:(NetI2pRouterNetworkdbReseedReseedChecker *)outer$
                                                    withNSString:(NSString *)status
                                                    withNSString:(NSString *)error {
  NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(self, outer$, status, error);
  return self;
}

- (void)timeReached {
  if ([((NSString *) nil_chk(_status_)) isEqual:[this$0_ getStatus]]) [this$0_ setStatusWithNSString:@""];
  if ([((NSString *) nil_chk(_error_)) isEqual:[this$0_ getError]]) [this$0_ setErrorWithNSString:@""];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_status_);
  RELEASE_(_error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterNetworkdbReseedReseedChecker:withNSString:withNSString:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterNetworkdbReseedReseedChecker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_status_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_error_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LNetI2pRouterNetworkdbReseedReseedChecker;" };
  static const J2ObjcClassInfo _NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner = { "StatusCleaner", "net.i2p.router.networkdb.reseed", ptrTable, methods, fields, 7, 0x2, 2, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner;
}

@end

void NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *self, NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_status_, status);
  JreStrongAssign(&self->_error_, error);
}

NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *new_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error) {
  J2OBJC_NEW_IMPL(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner, initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_, outer$, status, error)
}

NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner *create_NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner_initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_(NetI2pRouterNetworkdbReseedReseedChecker *outer$, NSString *status, NSString *error) {
  J2OBJC_CREATE_IMPL(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner, initWithNetI2pRouterNetworkdbReseedReseedChecker_withNSString_withNSString_, outer$, status, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterNetworkdbReseedReseedChecker_StatusCleaner)
