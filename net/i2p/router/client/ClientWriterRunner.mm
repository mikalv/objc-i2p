//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientWriterRunner.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/internal/PoisonI2CPMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/ClientWriterRunner.h"

@interface NetI2pRouterClientClientWriterRunner () {
 @public
  id<JavaUtilConcurrentBlockingQueue> _messagesToWrite_;
  NetI2pRouterClientClientConnectionRunner *_runner_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientWriterRunner, _messagesToWrite_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientWriterRunner, _runner_, NetI2pRouterClientClientConnectionRunner *)

inline jint NetI2pRouterClientClientWriterRunner_get_QUEUE_SIZE(void);
#define NetI2pRouterClientClientWriterRunner_QUEUE_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientWriterRunner, QUEUE_SIZE, jint)

@implementation NetI2pRouterClientClientWriterRunner

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
     withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner {
  NetI2pRouterClientClientWriterRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_(self, context, runner);
  return self;
}

- (void)addMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg {
  jboolean success = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) offerWithId:msg];
  if (!success) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"I2CP write to queue failed");
}

- (void)stopWriting {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) clear];
  @try {
    [_messagesToWrite_ putWithId:create_NetI2pInternalPoisonI2CPMessage_init()];
  }
  @catch (JavaLangInterruptedException *ie) {
  }
}

- (void)run {
  id<NetI2pDataI2cpI2CPMessage> msg;
  while (![((NetI2pRouterClientClientConnectionRunner *) nil_chk(_runner_)) getIsDead]) {
    @try {
      msg = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_messagesToWrite_)) take];
    }
    @catch (JavaLangInterruptedException *ie) {
      continue;
    }
    if ([((id<NetI2pDataI2cpI2CPMessage>) nil_chk(msg)) getType] == NetI2pInternalPoisonI2CPMessage_MESSAGE_TYPE) break;
    [_runner_ writeMessageWithNetI2pDataI2cpI2CPMessage:msg];
  }
}

- (void)dealloc {
  RELEASE_(_messagesToWrite_);
  RELEASE_(_runner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterClientClientConnectionRunner:);
  methods[1].selector = @selector(addMessageWithNetI2pDataI2cpI2CPMessage:);
  methods[2].selector = @selector(stopWriting);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_messagesToWrite_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "_runner_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterClientClientWriterRunner_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterClientClientConnectionRunner;", "addMessage", "LNetI2pDataI2cpI2CPMessage;", "LNetI2pDataI2cpI2CPMessageException;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/data/i2cp/I2CPMessage;>;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientWriterRunner = { "ClientWriterRunner", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientWriterRunner;
}

@end

void NetI2pRouterClientClientWriterRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_(NetI2pRouterClientClientWriterRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientConnectionRunner *runner) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_messagesToWrite_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pRouterClientClientWriterRunner_QUEUE_SIZE));
  JreStrongAssign(&self->_runner_, runner);
}

NetI2pRouterClientClientWriterRunner *new_NetI2pRouterClientClientWriterRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientConnectionRunner *runner) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientWriterRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_, context, runner)
}

NetI2pRouterClientClientWriterRunner *create_NetI2pRouterClientClientWriterRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientConnectionRunner *runner) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientWriterRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_, context, runner)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientWriterRunner)
