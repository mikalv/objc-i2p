//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterClientClientManager")
#ifdef RESTRICT_NetI2pRouterClientClientManager
#define INCLUDE_ALL_NetI2pRouterClientClientManager 0
#else
#define INCLUDE_ALL_NetI2pRouterClientClientManager 1
#endif
#undef RESTRICT_NetI2pRouterClientClientManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterClientClientManager_) && (INCLUDE_ALL_NetI2pRouterClientClientManager || defined(INCLUDE_NetI2pRouterClientClientManager))
#define NetI2pRouterClientClientManager_

@class JavaIoWriter;
@class NetI2pCryptoSessionKeyManager;
@class NetI2pDataDestination;
@class NetI2pDataHash;
@class NetI2pDataI2cpMessageId;
@class NetI2pDataI2cpSessionConfig;
@class NetI2pDataI2cpSessionId;
@class NetI2pDataLeaseSet;
@class NetI2pDataPayload;
@class NetI2pInternalI2CPMessageQueue;
@class NetI2pRouterClientClientConnectionRunner;
@class NetI2pRouterClientMessage;
@class NetI2pRouterRouterContext;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol NetI2pRouterJob;

@interface NetI2pRouterClientClientManager : NSObject {
 @public
  id<JavaUtilList> _listeners_;
  NetI2pRouterRouterContext *_ctx_;
  jint _port_;
  volatile_jboolean _isStarted_;
}
@property (readonly, class, strong) NetI2pDataI2cpSessionId *UNKNOWN_SESSION_ID NS_SWIFT_NAME(UNKNOWN_SESSION_ID);

+ (NetI2pDataI2cpSessionId *)UNKNOWN_SESSION_ID;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                                                    withInt:(jint)port;

- (jint)destinationEstablishedWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner
                                                 withNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (NetI2pDataI2cpSessionConfig *)getClientSessionConfigWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (NetI2pCryptoSessionKeyManager *)getClientSessionKeyManagerWithNetI2pDataHash:(NetI2pDataHash *)dest;

- (NetI2pInternalI2CPMessageQueue *)internalConnect;

- (jboolean)isAlive;

- (jboolean)isLocalWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (jboolean)isLocalWithNetI2pDataHash:(NetI2pDataHash *)destHash;

- (id<JavaUtilSet>)listClients;

- (void)messageDeliveryStatusUpdateWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)messageNonce
                                                     withInt:(jint)status;

- (void)messageReceivedWithNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg;

- (void)registerConnectionWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner;

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg;

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity;

- (void)requestLeaseSetWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                        withLong:(jlong)timeout
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob;

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)dest
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls;

- (void)restart;

- (jboolean)shouldPublishLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)destHash;

- (void)shutdownWithNSString:(NSString *)msg;

- (void)start;

- (void)unregisterConnectionWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner;

- (void)unregisterSessionWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_
                           withNetI2pDataDestination:(NetI2pDataDestination *)dest;

#pragma mark Protected

- (void)startListeners;

#pragma mark Package-Private

- (void)distributeMessageWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                         withNetI2pDataDestination:(NetI2pDataDestination *)toDest
                             withNetI2pDataPayload:(NetI2pDataPayload *)payload
                       withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)msgId
                                          withLong:(jlong)messageNonce
                                          withLong:(jlong)expiration
                                           withInt:(jint)flags;

- (NetI2pRouterClientClientConnectionRunner *)getRunnerWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (id<JavaUtilSet>)getRunnerDestinations;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterClientClientManager)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _listeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _ctx_, NetI2pRouterRouterContext *)

inline NetI2pDataI2cpSessionId *NetI2pRouterClientClientManager_get_UNKNOWN_SESSION_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetI2pDataI2cpSessionId *NetI2pRouterClientClientManager_UNKNOWN_SESSION_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientManager, UNKNOWN_SESSION_ID, NetI2pDataI2cpSessionId *)

FOUNDATION_EXPORT void NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterClientClientManager *self, NetI2pRouterRouterContext *context, jint port);

FOUNDATION_EXPORT NetI2pRouterClientClientManager *new_NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *context, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterClientClientManager *create_NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *context, jint port);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterClientClientManager")
