//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/SSLClientListenerRunner.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/KeyStore.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "javax/net/ssl/KeyManagerFactory.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLServerSocket.h"
#include "javax/net/ssl/SSLServerSocketFactory.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientListenerRunner.h"
#include "net/i2p/router/client/ClientManager.h"
#include "net/i2p/router/client/ClientManagerFacadeImpl.h"
#include "net/i2p/router/client/SSLClientListenerRunner.h"
#include "net/i2p/util/I2PSSLSocketFactory.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SecureDirectory.h"

@interface NetI2pRouterClientSSLClientListenerRunner () {
 @public
  JavaxNetSslSSLServerSocketFactory *_factory_;
}

- (jboolean)verifyKeyStoreWithJavaIoFile:(JavaIoFile *)ks;

- (jboolean)createKeyStoreWithJavaIoFile:(JavaIoFile *)ks;

- (void)exportCertWithJavaIoFile:(JavaIoFile *)ks;

- (jboolean)initializeFactoryWithJavaIoFile:(JavaIoFile *)ks OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientSSLClientListenerRunner, _factory_, JavaxNetSslSSLServerSocketFactory *)

inline NSString *NetI2pRouterClientSSLClientListenerRunner_get_PROP_KEYSTORE_PASSWORD(void);
static NSString *NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD = @"i2cp.keystorePassword";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientSSLClientListenerRunner, PROP_KEYSTORE_PASSWORD, NSString *)

inline NSString *NetI2pRouterClientSSLClientListenerRunner_get_PROP_KEY_PASSWORD(void);
static NSString *NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD = @"i2cp.keyPassword";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientSSLClientListenerRunner, PROP_KEY_PASSWORD, NSString *)

inline NSString *NetI2pRouterClientSSLClientListenerRunner_get_KEY_ALIAS(void);
static NSString *NetI2pRouterClientSSLClientListenerRunner_KEY_ALIAS = @"i2cp";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientSSLClientListenerRunner, KEY_ALIAS, NSString *)

inline NSString *NetI2pRouterClientSSLClientListenerRunner_get_ASCII_KEYFILE(void);
static NSString *NetI2pRouterClientSSLClientListenerRunner_ASCII_KEYFILE = @"i2cp.local.crt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientSSLClientListenerRunner, ASCII_KEYFILE, NSString *)

__attribute__((unused)) static jboolean NetI2pRouterClientSSLClientListenerRunner_verifyKeyStoreWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks);

__attribute__((unused)) static jboolean NetI2pRouterClientSSLClientListenerRunner_createKeyStoreWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks);

__attribute__((unused)) static void NetI2pRouterClientSSLClientListenerRunner_exportCertWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks);

__attribute__((unused)) static jboolean NetI2pRouterClientSSLClientListenerRunner_initializeFactoryWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks);

@implementation NetI2pRouterClientSSLClientListenerRunner

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
              withNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)manager
                                          withInt:(jint)port {
  NetI2pRouterClientSSLClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(self, context, manager, port);
  return self;
}

- (jboolean)verifyKeyStoreWithJavaIoFile:(JavaIoFile *)ks {
  return NetI2pRouterClientSSLClientListenerRunner_verifyKeyStoreWithJavaIoFile_(self, ks);
}

- (jboolean)createKeyStoreWithJavaIoFile:(JavaIoFile *)ks {
  return NetI2pRouterClientSSLClientListenerRunner_createKeyStoreWithJavaIoFile_(self, ks);
}

- (void)exportCertWithJavaIoFile:(JavaIoFile *)ks {
  NetI2pRouterClientSSLClientListenerRunner_exportCertWithJavaIoFile_(self, ks);
}

- (jboolean)initializeFactoryWithJavaIoFile:(JavaIoFile *)ks {
  return NetI2pRouterClientSSLClientListenerRunner_initializeFactoryWithJavaIoFile_(self, ks);
}

- (JavaNetServerSocket *)getServerSocket {
  JavaNetServerSocket *rv;
  if (_bindAllInterfaces_) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$", @"Listening on port ", _port_, @" on all interfaces")];
    rv = [((JavaxNetSslSSLServerSocketFactory *) nil_chk(_factory_)) createServerSocketWithInt:_port_];
  }
  else {
    NSString *listenInterface = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_HOST withNSString:NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_HOST];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$$", @"Listening on port ", _port_, @" of the specific interface: ", listenInterface)];
    rv = [((JavaxNetSslSSLServerSocketFactory *) nil_chk(_factory_)) createServerSocketWithInt:_port_ withInt:0 withJavaNetInetAddress:JavaNetInetAddress_getByNameWithNSString_(listenInterface)];
  }
  NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket_((JavaxNetSslSSLServerSocket *) cast_chk(rv, [JavaxNetSslSSLServerSocket class]));
  return rv;
}

- (void)runServer {
  JavaIoFile *keyStore = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(_context_)) getConfigDir], @"keystore/i2cp.ks");
  if (NetI2pRouterClientSSLClientListenerRunner_verifyKeyStoreWithJavaIoFile_(self, keyStore) && NetI2pRouterClientSSLClientListenerRunner_initializeFactoryWithJavaIoFile_(self, keyStore)) {
    [super runServer];
  }
  else {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"SSL I2CP server error - Failed to create or open key store"];
  }
}

- (jboolean)validateWithJavaNetSocket:(JavaNetSocket *)socket {
  @try {
    JavaIoInputStream *is = [((JavaNetSocket *) nil_chk(socket)) getInputStream];
    jint oldTimeout = [socket getSoTimeout];
    [socket setSoTimeoutWithInt:4 * NetI2pRouterClientClientListenerRunner_CONNECT_TIMEOUT];
    jboolean rv = [((JavaIoInputStream *) nil_chk(is)) read] == NetI2pClientI2PClient_PROTOCOL_BYTE;
    [socket setSoTimeoutWithInt:oldTimeout];
    return rv;
  }
  @catch (JavaIoIOException *ioe) {
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Peer did not authenticate themselves as I2CP quickly enough, dropping"];
  return false;
}

- (void)dealloc {
  RELEASE_(_factory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "LJavaNetServerSocket;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterClientClientManager:withInt:);
  methods[1].selector = @selector(verifyKeyStoreWithJavaIoFile:);
  methods[2].selector = @selector(createKeyStoreWithJavaIoFile:);
  methods[3].selector = @selector(exportCertWithJavaIoFile:);
  methods[4].selector = @selector(initializeFactoryWithJavaIoFile:);
  methods[5].selector = @selector(getServerSocket);
  methods[6].selector = @selector(runServer);
  methods[7].selector = @selector(validateWithJavaNetSocket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_factory_", "LJavaxNetSslSSLServerSocketFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROP_KEYSTORE_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "PROP_KEY_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "KEY_ALIAS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "ASCII_KEYFILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterClientClientManager;I", "verifyKeyStore", "LJavaIoFile;", "createKeyStore", "exportCert", "initializeFactory", "LJavaIoIOException;", "validate", "LJavaNetSocket;", &NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD, &NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD, &NetI2pRouterClientSSLClientListenerRunner_KEY_ALIAS, &NetI2pRouterClientSSLClientListenerRunner_ASCII_KEYFILE };
  static const J2ObjcClassInfo _NetI2pRouterClientSSLClientListenerRunner = { "SSLClientListenerRunner", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 8, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientSSLClientListenerRunner;
}

@end

void NetI2pRouterClientSSLClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterClientSSLClientListenerRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(self, context, manager, port);
}

NetI2pRouterClientSSLClientListenerRunner *new_NetI2pRouterClientSSLClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientSSLClientListenerRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_, context, manager, port)
}

NetI2pRouterClientSSLClientListenerRunner *create_NetI2pRouterClientSSLClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientSSLClientListenerRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_, context, manager, port)
}

jboolean NetI2pRouterClientSSLClientListenerRunner_verifyKeyStoreWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks) {
  if ([((JavaIoFile *) nil_chk(ks)) exists]) {
    jboolean rv = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD] != nil;
    if (!rv) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$$", @"I2CP SSL error, must set ", NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD, @" in ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], @"router.config")) getAbsolutePath])];
    return rv;
  }
  JavaIoFile *dir = [ks getParentFile];
  if (![((JavaIoFile *) nil_chk(dir)) exists]) {
    JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithNSString_([dir getAbsolutePath]);
    if (![sdir mkdir]) return false;
  }
  jboolean rv = NetI2pRouterClientSSLClientListenerRunner_createKeyStoreWithJavaIoFile_(self, ks);
  if (rv) NetI2pRouterClientSSLClientListenerRunner_exportCertWithJavaIoFile_(self, ks);
  return rv;
}

jboolean NetI2pRouterClientSSLClientListenerRunner_createKeyStoreWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks) {
  NSString *keyPassword = NetI2pCryptoKeyStoreUtil_randomString();
  NSString *cname = @"localhost";
  jboolean success = NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_(ks, NetI2pRouterClientSSLClientListenerRunner_KEY_ALIAS, cname, @"I2CP", keyPassword);
  if (success) {
    success = [((JavaIoFile *) nil_chk(ks)) exists];
    if (success) {
      id<JavaUtilMap> changes = create_JavaUtilHashMap_init();
      [changes putWithId:NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD withId:NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD];
      [changes putWithId:NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD withId:keyPassword];
      [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) saveConfigWithJavaUtilMap:changes withJavaUtilCollection:nil];
    }
  }
  if (success) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_INFO withNSString:JreStrcat("$$$$$", @"Created self-signed certificate for ", cname, @" in keystore: ", [((JavaIoFile *) nil_chk(ks)) getAbsolutePath], @"\nThe certificate was generated randomly, and is not associated with your IP address, host name, router identity, or destination keys.")];
  }
  else {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$$$$", @"Failed to create I2CP SSL keystore.\nThis is for the Sun/Oracle keytool, others may be incompatible.\nIf you create the keystore manually, you must add ", NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD, @" and ", NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD, @" to ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getConfigDir], @"router.config")) getAbsolutePath])];
  }
  return success;
}

void NetI2pRouterClientSSLClientListenerRunner_exportCertWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks) {
  JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getConfigDir], @"certificates/i2cp");
  if ([sdir exists] || [sdir mkdirs]) {
    NSString *ksPass = [self->_context_ getPropertyWithNSString:NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD withNSString:NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD];
    JavaIoFile *out = create_JavaIoFile_initWithJavaIoFile_withNSString_(sdir, NetI2pRouterClientSSLClientListenerRunner_ASCII_KEYFILE);
    jboolean success = NetI2pCryptoKeyStoreUtil_exportCertWithJavaIoFile_withNSString_withNSString_withJavaIoFile_(ks, ksPass, NetI2pRouterClientSSLClientListenerRunner_KEY_ALIAS, out);
    if (!success) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error getting SSL cert to save as ASCII"];
  }
  else {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error saving ASCII SSL keys"];
  }
}

jboolean NetI2pRouterClientSSLClientListenerRunner_initializeFactoryWithJavaIoFile_(NetI2pRouterClientSSLClientListenerRunner *self, JavaIoFile *ks) {
  NSString *ksPass = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterClientSSLClientListenerRunner_PROP_KEYSTORE_PASSWORD withNSString:NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD];
  NSString *keyPass = [self->_context_ getPropertyWithNSString:NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD];
  if (keyPass == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$$", @"No key password, set ", NetI2pRouterClientSSLClientListenerRunner_PROP_KEY_PASSWORD, @" in ", [(create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getConfigDir], @"router.config")) getAbsolutePath])];
    return false;
  }
  JavaIoInputStream *fis = nil;
  @try {
    JavaxNetSslSSLContext *sslc = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
    JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ks);
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:fis withCharArray:[((NSString *) nil_chk(ksPass)) java_toCharArray]];
    NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaSecurityKeyStore_withNSString_withLong_(keyStore, [((JavaIoFile *) nil_chk(ks)) getAbsolutePath], 180 * 24 * 60 * 60 * 1000LL);
    JavaxNetSslKeyManagerFactory *kmf = JavaxNetSslKeyManagerFactory_getInstanceWithNSString_(JavaxNetSslKeyManagerFactory_getDefaultAlgorithm());
    [((JavaxNetSslKeyManagerFactory *) nil_chk(kmf)) init__WithJavaSecurityKeyStore:keyStore withCharArray:[keyPass java_toCharArray]];
    [((JavaxNetSslSSLContext *) nil_chk(sslc)) init__WithJavaxNetSslKeyManagerArray:[kmf getKeyManagers] withJavaxNetSslTrustManagerArray:nil withJavaSecuritySecureRandom:[self->_context_ random]];
    JreStrongAssign(&self->_factory_, [sslc getServerSocketFactory]);
    return true;
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error loading SSL keys" withJavaLangThrowable:gse];
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error loading SSL keys" withJavaLangThrowable:ioe];
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientSSLClientListenerRunner)
