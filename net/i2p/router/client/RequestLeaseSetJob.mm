//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/RequestLeaseSetJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Date.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/RequestLeaseSetMessage.h"
#include "net/i2p/data/i2cp/RequestVariableLeaseSetMessage.h"
#include "net/i2p/data/i2cp/SessionId.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/LeaseRequestState.h"
#include "net/i2p/router/client/QueuedClientConnectionRunner.h"
#include "net/i2p/router/client/RequestLeaseSetJob.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterClientRequestLeaseSetJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterClientClientConnectionRunner *_runner_;
  NetI2pRouterClientLeaseRequestState *_requestState_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientRequestLeaseSetJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientRequestLeaseSetJob, _runner_, NetI2pRouterClientClientConnectionRunner *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientRequestLeaseSetJob, _requestState_, NetI2pRouterClientLeaseRequestState *)

inline jlong NetI2pRouterClientRequestLeaseSetJob_get_MAX_FUDGE(void);
#define NetI2pRouterClientRequestLeaseSetJob_MAX_FUDGE 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientRequestLeaseSetJob, MAX_FUDGE, jlong)

inline NSString *NetI2pRouterClientRequestLeaseSetJob_get_PROP_VARIABLE(void);
static NSString *NetI2pRouterClientRequestLeaseSetJob_PROP_VARIABLE = @"router.variableLeaseExpiration";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientRequestLeaseSetJob, PROP_VARIABLE, NSString *)

inline jboolean NetI2pRouterClientRequestLeaseSetJob_get_DFLT_VARIABLE(void);
#define NetI2pRouterClientRequestLeaseSetJob_DFLT_VARIABLE true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientRequestLeaseSetJob, DFLT_VARIABLE, jboolean)

@interface NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus : NetI2pRouterJobImpl {
 @public
  NetI2pRouterClientRequestLeaseSetJob *this$0_;
  jlong _start_;
}

- (instancetype)initWithNetI2pRouterClientRequestLeaseSetJob:(NetI2pRouterClientRequestLeaseSetJob *)outer$;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus)

__attribute__((unused)) static void NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *self, NetI2pRouterClientRequestLeaseSetJob *outer$);

__attribute__((unused)) static NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *new_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *create_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus)

@implementation NetI2pRouterClientRequestLeaseSetJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
     withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner
          withNetI2pRouterClientLeaseRequestState:(NetI2pRouterClientLeaseRequestState *)state {
  NetI2pRouterClientRequestLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_(self, ctx, runner, state);
  return self;
}

- (NSString *)getName {
  return @"Request Lease Set";
}

- (void)runJob {
  if ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(_runner_)) isDead]) return;
  NetI2pDataLeaseSet *requested = [((NetI2pRouterClientLeaseRequestState *) nil_chk(_requestState_)) getRequested];
  jlong endTime = [((NetI2pDataLeaseSet *) nil_chk(requested)) getEarliestLeaseDate];
  jlong fudge = NetI2pRouterClientRequestLeaseSetJob_MAX_FUDGE - ((endTime - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]) / (10 * 60 * 1000 / NetI2pRouterClientRequestLeaseSetJob_MAX_FUDGE));
  endTime += fudge;
  NetI2pDataI2cpSessionId *id_ = [_runner_ getSessionIdWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk([requested getDestination])) calculateHash]];
  if (id_ == nil) {
    [_runner_ failLeaseRequestWithNetI2pRouterClientLeaseRequestState:_requestState_];
    return;
  }
  id<NetI2pDataI2cpI2CPMessage> msg;
  if ([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterClientRequestLeaseSetJob_PROP_VARIABLE withBoolean:NetI2pRouterClientRequestLeaseSetJob_DFLT_VARIABLE] && ([_runner_ isKindOfClass:[NetI2pRouterClientQueuedClientConnectionRunner class]] || NetI2pDataI2cpRequestVariableLeaseSetMessage_isSupportedWithNSString_([_runner_ getClientVersion]))) {
    NetI2pDataI2cpRequestVariableLeaseSetMessage *rmsg = create_NetI2pDataI2cpRequestVariableLeaseSetMessage_init();
    [rmsg setSessionIdWithNetI2pDataI2cpSessionId:id_];
    for (jint i = 0; i < [requested getLeaseCount]; i++) {
      NetI2pDataLease *lease = [requested getLeaseWithInt:i];
      if ([((JavaUtilDate *) nil_chk([((NetI2pDataLease *) nil_chk(lease)) getEndDate])) getTime] < endTime) {
        NetI2pDataLease *nl = create_NetI2pDataLease_init();
        [nl setGatewayWithNetI2pDataHash:[lease getGateway]];
        [nl setTunnelIdWithNetI2pDataTunnelId:[lease getTunnelId]];
        [nl setEndDateWithJavaUtilDate:create_JavaUtilDate_initWithLong_(endTime)];
        lease = nl;
      }
      [rmsg addEndpointWithNetI2pDataLease:lease];
    }
    msg = rmsg;
  }
  else {
    NetI2pDataI2cpRequestLeaseSetMessage *rmsg = create_NetI2pDataI2cpRequestLeaseSetMessage_init();
    JavaUtilDate *end = create_JavaUtilDate_initWithLong_(endTime);
    [rmsg setEndDateWithJavaUtilDate:end];
    [rmsg setSessionIdWithNetI2pDataI2cpSessionId:id_];
    for (jint i = 0; i < [requested getLeaseCount]; i++) {
      NetI2pDataLease *lease = [requested getLeaseWithInt:i];
      [rmsg addEndpointWithNetI2pDataHash:[((NetI2pDataLease *) nil_chk(lease)) getGateway] withNetI2pDataTunnelId:[lease getTunnelId]];
    }
    msg = rmsg;
  }
  @try {
    [_runner_ doSendWithNetI2pDataI2cpI2CPMessage:msg];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(self)];
  }
  @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"client.requestLeaseSetDropped" withLong:1];
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error sending I2CP message requesting the lease set" withJavaLangThrowable:ime];
    [_requestState_ setIsSuccessfulWithBoolean:false];
    if ([_requestState_ getOnFailed] != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:[_requestState_ getOnFailed]];
    [_runner_ failLeaseRequestWithNetI2pRouterClientLeaseRequestState:_requestState_];
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_runner_);
  RELEASE_(_requestState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterClientClientConnectionRunner:withNetI2pRouterClientLeaseRequestState:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_runner_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_requestState_", "LNetI2pRouterClientLeaseRequestState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_FUDGE", "J", .constantValue.asLong = NetI2pRouterClientRequestLeaseSetJob_MAX_FUDGE, 0x1a, -1, -1, -1, -1 },
    { "PROP_VARIABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "DFLT_VARIABLE", "Z", .constantValue.asBOOL = NetI2pRouterClientRequestLeaseSetJob_DFLT_VARIABLE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterClientClientConnectionRunner;LNetI2pRouterClientLeaseRequestState;", &NetI2pRouterClientRequestLeaseSetJob_PROP_VARIABLE, "LNetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus;" };
  static const J2ObjcClassInfo _NetI2pRouterClientRequestLeaseSetJob = { "RequestLeaseSetJob", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 3, 6, -1, 2, -1, -1, -1 };
  return &_NetI2pRouterClientRequestLeaseSetJob;
}

@end

void NetI2pRouterClientRequestLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_(NetI2pRouterClientRequestLeaseSetJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterClientClientConnectionRunner *runner, NetI2pRouterClientLeaseRequestState *state) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterClientRequestLeaseSetJob_class_()]);
  JreStrongAssign(&self->_runner_, runner);
  JreStrongAssign(&self->_requestState_, state);
}

NetI2pRouterClientRequestLeaseSetJob *new_NetI2pRouterClientRequestLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_(NetI2pRouterRouterContext *ctx, NetI2pRouterClientClientConnectionRunner *runner, NetI2pRouterClientLeaseRequestState *state) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientRequestLeaseSetJob, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_, ctx, runner, state)
}

NetI2pRouterClientRequestLeaseSetJob *create_NetI2pRouterClientRequestLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_(NetI2pRouterRouterContext *ctx, NetI2pRouterClientClientConnectionRunner *runner, NetI2pRouterClientLeaseRequestState *state) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientRequestLeaseSetJob, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_, ctx, runner, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientRequestLeaseSetJob)

@implementation NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus

- (instancetype)initWithNetI2pRouterClientRequestLeaseSetJob:(NetI2pRouterClientRequestLeaseSetJob *)outer$ {
  NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(self, outer$);
  return self;
}

- (void)runJob {
  if ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(this$0_->_runner_)) isDead]) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:@"Already dead, dont try to expire the leaseSet lookup"];
    return;
  }
  if ([((NetI2pRouterClientLeaseRequestState *) nil_chk(this$0_->_requestState_)) getIsSuccessful]) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"client.requestLeaseSetSuccess" withLong:1];
    return;
  }
  else {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"client.requestLeaseSetTimeout" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) {
      jlong waited = JavaLangSystem_currentTimeMillis() - _start_;
      [this$0_->_log_ errorWithNSString:JreStrcat("$J$@", @"Failed to receive a leaseSet in the time allotted (", waited, @"): ", this$0_->_requestState_)];
    }
    if ([this$0_->_requestState_ getOnFailed] != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([this$0_ getContext])) jobQueue])) addJobWithNetI2pRouterJob:[this$0_->_requestState_ getOnFailed]];
    [this$0_->_runner_ failLeaseRequestWithNetI2pRouterClientLeaseRequestState:this$0_->_requestState_];
  }
}

- (NSString *)getName {
  return @"Check LeaseRequest Status";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientRequestLeaseSetJob:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterClientRequestLeaseSetJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_start_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterClientRequestLeaseSetJob;" };
  static const J2ObjcClassInfo _NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus = { "CheckLeaseRequestStatus", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 3, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus;
}

@end

void NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *self, NetI2pRouterClientRequestLeaseSetJob *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, [outer$ getContext]);
  self->_start_ = JavaLangSystem_currentTimeMillis();
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:[((NetI2pRouterClientLeaseRequestState *) nil_chk(outer$->_requestState_)) getExpiration]];
}

NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *new_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus, initWithNetI2pRouterClientRequestLeaseSetJob_, outer$)
}

NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus *create_NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus_initWithNetI2pRouterClientRequestLeaseSetJob_(NetI2pRouterClientRequestLeaseSetJob *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus, initWithNetI2pRouterClientRequestLeaseSetJob_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientRequestLeaseSetJob_CheckLeaseRequestStatus)
