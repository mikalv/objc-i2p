//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientManagerFacadeImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collections.h"
#include "java/util/Set.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/internal/I2CPMessageQueue.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientMessage.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/ClientManager.h"
#include "net/i2p/router/client/ClientManagerFacadeImpl.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterClientClientManagerFacadeImpl () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterClientClientManager *_manager_;
  NetI2pRouterRouterContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManagerFacadeImpl, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManagerFacadeImpl, _manager_, NetI2pRouterClientClientManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManagerFacadeImpl, _context_, NetI2pRouterRouterContext *)

inline jlong NetI2pRouterClientClientManagerFacadeImpl_get_MAX_TIME_TO_REBUILD(void);
#define NetI2pRouterClientClientManagerFacadeImpl_MAX_TIME_TO_REBUILD 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManagerFacadeImpl, MAX_TIME_TO_REBUILD, jlong)

__attribute__((unused)) static IOSObjectArray *NetI2pRouterClientClientManagerFacadeImpl__Annotations$0(void);

NSString *NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_PORT = @"i2cp.port";
NSString *NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_HOST = @"i2cp.hostname";
NSString *NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_HOST = @"127.0.0.1";

@implementation NetI2pRouterClientClientManagerFacadeImpl

+ (NSString *)PROP_CLIENT_PORT {
  return NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_PORT;
}

+ (jint)DEFAULT_PORT {
  return NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_PORT;
}

+ (NSString *)PROP_CLIENT_HOST {
  return NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_HOST;
}

+ (NSString *)DEFAULT_HOST {
  return NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_HOST;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterClientClientManagerFacadeImpl_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)startup {
  @synchronized(self) {
    [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Starting up the client subsystem"];
    jint port = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_PORT withInt:NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_PORT];
    JreStrongAssignAndConsume(&_manager_, new_NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(_context_, port));
    [_manager_ start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    [self shutdownWithNSString:@"Router shutdown"];
  }
}

- (void)shutdownWithNSString:(NSString *)msg {
  @synchronized(self) {
    if (_manager_ != nil) [_manager_ shutdownWithNSString:msg];
  }
}

- (void)restart {
  @synchronized(self) {
    if (_manager_ != nil) [_manager_ restart];
    else [self startup];
  }
}

- (jboolean)isAlive {
  return _manager_ != nil && [_manager_ isAlive];
}

- (jboolean)verifyClientLiveliness {
  if (_manager_ == nil) return true;
  jboolean lively = true;
  for (NetI2pDataDestination * __strong dest in nil_chk([_manager_ getRunnerDestinations])) {
    NetI2pRouterClientClientConnectionRunner *runner = [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) getRunnerWithNetI2pDataDestination:dest];
    if ((runner == nil) || ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) getIsDead])) continue;
    NetI2pDataLeaseSet *ls = [((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) getLeaseSetWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
    if (ls == nil) continue;
    jlong howLongAgo = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - [ls getEarliestLeaseDate];
    if (howLongAgo > NetI2pRouterClientClientManagerFacadeImpl_MAX_TIME_TO_REBUILD) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$$$$", @"Client ", [dest toBase32], @" has a leaseSet that expired ", NetI2pDataDataHelper_formatDurationWithLong_(howLongAgo), @" ago")];
      lively = false;
    }
  }
  return lively;
}

- (void)requestLeaseSetWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                        withLong:(jlong)timeout
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob {
  if (_manager_ != nil) [_manager_ requestLeaseSetWithNetI2pDataDestination:dest withNetI2pDataLeaseSet:set withLong:timeout withNetI2pRouterJob:onCreateJob withNetI2pRouterJob:onFailedJob];
  else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on requestLeaseSet!"];
}

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)dest
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set {
  if (_manager_ != nil) [_manager_ requestLeaseSetWithNetI2pDataHash:dest withNetI2pDataLeaseSet:set];
}

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity {
  if (_manager_ != nil) [_manager_ reportAbuseWithNetI2pDataDestination:dest withNSString:reason withInt:severity];
  else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on reportAbuse!"];
}

- (jboolean)isLocalWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  if (_manager_ != nil) return [_manager_ isLocalWithNetI2pDataDestination:dest];
  else {
    [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Null manager on isLocal(dest)!"];
    return false;
  }
}

- (jboolean)isLocalWithNetI2pDataHash:(NetI2pDataHash *)destHash {
  if (_manager_ != nil) return [_manager_ isLocalWithNetI2pDataHash:destHash];
  else {
    [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:@"Null manager on isLocal(hash)!"];
    return false;
  }
}

- (jboolean)shouldPublishLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)destinationHash {
  return [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) shouldPublishLeaseSetWithNetI2pDataHash:destinationHash];
}

- (void)messageDeliveryStatusUpdateWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)messageNonce
                                                     withInt:(jint)status {
  if (_manager_ != nil) [_manager_ messageDeliveryStatusUpdateWithNetI2pDataDestination:fromDest withNetI2pDataI2cpMessageId:id_ withLong:messageNonce withInt:status];
  else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on messageDeliveryStatusUpdate!"];
}

- (void)messageReceivedWithNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg {
  if (_manager_ != nil) [_manager_ messageReceivedWithNetI2pRouterClientMessage:msg];
  else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on messageReceived!"];
}

- (NetI2pDataI2cpSessionConfig *)getClientSessionConfigWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  if (_manager_ != nil) return [_manager_ getClientSessionConfigWithNetI2pDataDestination:dest];
  else {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on getClientSessionConfig!"];
    return nil;
  }
}

- (NetI2pCryptoSessionKeyManager *)getClientSessionKeyManagerWithNetI2pDataHash:(NetI2pDataHash *)dest {
  if (_manager_ != nil) return [_manager_ getClientSessionKeyManagerWithNetI2pDataHash:dest];
  else {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Null manager on getClientSessionKeyManager!"];
    return nil;
  }
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  if (_manager_ != nil) [_manager_ renderStatusHTMLWithJavaIoWriter:outArg];
}

- (id<JavaUtilSet>)listClients {
  if (_manager_ != nil) return [_manager_ listClients];
  else return JavaUtilCollections_emptySet();
}

- (NetI2pInternalI2CPMessageQueue *)connect {
  if (_manager_ != nil) return [_manager_ internalConnect];
  @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"No manager yet");
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_manager_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSessionKeyManager;", 0x1, 17, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 20, -1, 21, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LNetI2pInternalI2CPMessageQueue;", 0x1, -1, -1, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(shutdownWithNSString:);
  methods[4].selector = @selector(restart);
  methods[5].selector = @selector(isAlive);
  methods[6].selector = @selector(verifyClientLiveliness);
  methods[7].selector = @selector(requestLeaseSetWithNetI2pDataDestination:withNetI2pDataLeaseSet:withLong:withNetI2pRouterJob:withNetI2pRouterJob:);
  methods[8].selector = @selector(requestLeaseSetWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[9].selector = @selector(reportAbuseWithNetI2pDataDestination:withNSString:withInt:);
  methods[10].selector = @selector(isLocalWithNetI2pDataDestination:);
  methods[11].selector = @selector(isLocalWithNetI2pDataHash:);
  methods[12].selector = @selector(shouldPublishLeaseSetWithNetI2pDataHash:);
  methods[13].selector = @selector(messageDeliveryStatusUpdateWithNetI2pDataDestination:withNetI2pDataI2cpMessageId:withLong:withInt:);
  methods[14].selector = @selector(messageReceivedWithNetI2pRouterClientMessage:);
  methods[15].selector = @selector(getClientSessionConfigWithNetI2pDataDestination:);
  methods[16].selector = @selector(getClientSessionKeyManagerWithNetI2pDataHash:);
  methods[17].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[18].selector = @selector(listClients);
  methods[19].selector = @selector(connect);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterClientClientManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_CLIENT_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "DEFAULT_PORT", "I", .constantValue.asInt = NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_PORT, 0x19, -1, -1, -1, -1 },
    { "PROP_CLIENT_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "DEFAULT_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "MAX_TIME_TO_REBUILD", "J", .constantValue.asLong = NetI2pRouterClientClientManagerFacadeImpl_MAX_TIME_TO_REBUILD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "shutdown", "LNSString;", "requestLeaseSet", "LNetI2pDataDestination;LNetI2pDataLeaseSet;JLNetI2pRouterJob;LNetI2pRouterJob;", "LNetI2pDataHash;LNetI2pDataLeaseSet;", "reportAbuse", "LNetI2pDataDestination;LNSString;I", "isLocal", "LNetI2pDataDestination;", "LNetI2pDataHash;", "shouldPublishLeaseSet", "messageDeliveryStatusUpdate", "LNetI2pDataDestination;LNetI2pDataI2cpMessageId;JI", "messageReceived", "LNetI2pRouterClientMessage;", "getClientSessionConfig", "getClientSessionKeyManager", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterClientClientManagerFacadeImpl__Annotations$0, "()Ljava/util/Set<Lnet/i2p/data/Destination;>;", "LNetI2pClientI2PSessionException;", &NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_PORT, &NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_HOST, &NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_HOST };
  static const J2ObjcClassInfo _NetI2pRouterClientClientManagerFacadeImpl = { "ClientManagerFacadeImpl", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x1, 20, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientManagerFacadeImpl;
}

@end

void NetI2pRouterClientClientManagerFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterClientClientManagerFacadeImpl *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterClientManagerFacade_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterClientClientManagerFacadeImpl_class_()]);
}

NetI2pRouterClientClientManagerFacadeImpl *new_NetI2pRouterClientClientManagerFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientManagerFacadeImpl, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterClientClientManagerFacadeImpl *create_NetI2pRouterClientClientManagerFacadeImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientManagerFacadeImpl, initWithNetI2pRouterRouterContext_, context)
}

IOSObjectArray *NetI2pRouterClientClientManagerFacadeImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientManagerFacadeImpl)
