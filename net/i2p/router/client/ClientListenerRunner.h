//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientListenerRunner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterClientClientListenerRunner")
#ifdef RESTRICT_NetI2pRouterClientClientListenerRunner
#define INCLUDE_ALL_NetI2pRouterClientClientListenerRunner 0
#else
#define INCLUDE_ALL_NetI2pRouterClientClientListenerRunner 1
#endif
#undef RESTRICT_NetI2pRouterClientClientListenerRunner

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterClientClientListenerRunner_) && (INCLUDE_ALL_NetI2pRouterClientClientListenerRunner || defined(INCLUDE_NetI2pRouterClientClientListenerRunner))
#define NetI2pRouterClientClientListenerRunner_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaNetServerSocket;
@class JavaNetSocket;
@class NetI2pRouterClientClientManager;
@class NetI2pRouterRouterContext;
@class NetI2pUtilLog;

@interface NetI2pRouterClientClientListenerRunner : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterClientClientManager *_manager_;
  JavaNetServerSocket *_socket_;
  jint _port_;
  jboolean _bindAllInterfaces_;
  volatile_jboolean _running_;
  volatile_jboolean _listening_;
}
@property (readonly, copy, class) NSString *BIND_ALL_INTERFACES NS_SWIFT_NAME(BIND_ALL_INTERFACES);
@property (readonly, class) jint CONNECT_TIMEOUT NS_SWIFT_NAME(CONNECT_TIMEOUT);

+ (NSString *)BIND_ALL_INTERFACES;

+ (jint)CONNECT_TIMEOUT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                        withNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)manager
                                                    withInt:(jint)port;

- (jboolean)isListening;

- (void)run;

- (void)stopListening;

#pragma mark Protected

- (JavaNetServerSocket *)getServerSocket;

- (void)runConnectionWithJavaNetSocket:(JavaNetSocket *)socket;

- (void)runServer;

- (jboolean)validateWithJavaNetSocket:(JavaNetSocket *)socket;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientListenerRunner)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientListenerRunner, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientListenerRunner, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientListenerRunner, _manager_, NetI2pRouterClientClientManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientListenerRunner, _socket_, JavaNetServerSocket *)

inline NSString *NetI2pRouterClientClientListenerRunner_get_BIND_ALL_INTERFACES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterClientClientListenerRunner_BIND_ALL_INTERFACES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientListenerRunner, BIND_ALL_INTERFACES, NSString *)

inline jint NetI2pRouterClientClientListenerRunner_get_CONNECT_TIMEOUT(void);
#define NetI2pRouterClientClientListenerRunner_CONNECT_TIMEOUT 5000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientListenerRunner, CONNECT_TIMEOUT, jint)

FOUNDATION_EXPORT void NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterClientClientListenerRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port);

FOUNDATION_EXPORT NetI2pRouterClientClientListenerRunner *new_NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterClientClientListenerRunner *create_NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientListenerRunner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterClientClientListenerRunner")
