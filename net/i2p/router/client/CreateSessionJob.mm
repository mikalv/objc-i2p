//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/CreateSessionJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Properties.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/router/ClientTunnelSettings.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/client/CreateSessionJob.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterClientCreateSessionJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataI2cpSessionConfig *_config_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientCreateSessionJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientCreateSessionJob, _config_, NetI2pDataI2cpSessionConfig *)

@implementation NetI2pRouterClientCreateSessionJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                  withNetI2pDataI2cpSessionConfig:(NetI2pDataI2cpSessionConfig *)config {
  NetI2pRouterClientCreateSessionJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_(self, context, config);
  return self;
}

- (NSString *)getName {
  return @"Request tunnels for a new client";
}

- (void)runJob {
  NetI2pDataHash *dest = [((NetI2pDataDestination *) nil_chk([((NetI2pDataI2cpSessionConfig *) nil_chk(_config_)) getDestination])) calculateHash];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Requesting lease set for destination ", dest)];
  NetI2pRouterClientTunnelSettings *settings = create_NetI2pRouterClientTunnelSettings_initWithNetI2pDataHash_(dest);
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props putAllWithJavaUtilMap:[_config_ getOptions]];
  [settings readFromPropertiesWithJavaUtilProperties:props];
  [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) buildTunnelsWithNetI2pDataDestination:[_config_ getDestination] withNetI2pRouterClientTunnelSettings:settings];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_config_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2cpSessionConfig:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pDataI2cpSessionConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2cpSessionConfig;" };
  static const J2ObjcClassInfo _NetI2pRouterClientCreateSessionJob = { "CreateSessionJob", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientCreateSessionJob;
}

@end

void NetI2pRouterClientCreateSessionJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_(NetI2pRouterClientCreateSessionJob *self, NetI2pRouterRouterContext *context, NetI2pDataI2cpSessionConfig *config) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterClientCreateSessionJob_class_()]);
  JreStrongAssign(&self->_config_, config);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"CreateSessionJob for config: ", config)];
}

NetI2pRouterClientCreateSessionJob *new_NetI2pRouterClientCreateSessionJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_(NetI2pRouterRouterContext *context, NetI2pDataI2cpSessionConfig *config) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientCreateSessionJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_, context, config)
}

NetI2pRouterClientCreateSessionJob *create_NetI2pRouterClientCreateSessionJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_(NetI2pRouterRouterContext *context, NetI2pDataI2cpSessionConfig *config) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientCreateSessionJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2cpSessionConfig_, context, config)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientCreateSessionJob)
