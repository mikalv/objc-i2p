//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/CoreVersion.h"
#include "net/i2p/client/I2PSessionException.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/MessageStatusMessage.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/data/i2cp/SessionId.h"
#include "net/i2p/data/i2cp/SessionStatusMessage.h"
#include "net/i2p/data/i2cp/SetDateMessage.h"
#include "net/i2p/internal/I2CPMessageQueue.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientMessage.h"
#include "net/i2p/router/ClientMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/ClientListenerRunner.h"
#include "net/i2p/router/client/ClientManager.h"
#include "net/i2p/router/client/I2CPMessageQueueImpl.h"
#include "net/i2p/router/client/QueuedClientConnectionRunner.h"
#include "net/i2p/router/client/SSLClientListenerRunner.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterClientClientManager () {
 @public
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _runners_;
  id<JavaUtilMap> _runnersByHash_;
  id<JavaUtilSet> _pendingRunners_;
  id<JavaUtilSet> _runnerSessionIds_;
  NetI2pUtilSimpleTimer2_TimedEvent *_clientTimestamper_;
}

- (NetI2pDataI2cpSessionId *)locked_getNextSessionId;

- (NetI2pRouterClientClientConnectionRunner *)getRunnerWithNetI2pDataHash:(NetI2pDataHash *)destHash;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _runners_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _runnersByHash_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _pendingRunners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _runnerSessionIds_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager, _clientTimestamper_, NetI2pUtilSimpleTimer2_TimedEvent *)

inline NSString *NetI2pRouterClientClientManager_get_PROP_DISABLE_EXTERNAL(void);
static NSString *NetI2pRouterClientClientManager_PROP_DISABLE_EXTERNAL = @"i2cp.disableInterface";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientManager, PROP_DISABLE_EXTERNAL, NSString *)

inline NSString *NetI2pRouterClientClientManager_get_PROP_ENABLE_SSL(void);
static NSString *NetI2pRouterClientClientManager_PROP_ENABLE_SSL = @"i2cp.SSL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientManager, PROP_ENABLE_SSL, NSString *)

inline jint NetI2pRouterClientClientManager_get_INTERNAL_QUEUE_SIZE(void);
#define NetI2pRouterClientClientManager_INTERNAL_QUEUE_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManager, INTERNAL_QUEUE_SIZE, jint)

inline jlong NetI2pRouterClientClientManager_get_REQUEST_LEASESET_TIMEOUT(void);
#define NetI2pRouterClientClientManager_REQUEST_LEASESET_TIMEOUT 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManager, REQUEST_LEASESET_TIMEOUT, jlong)

inline jint NetI2pRouterClientClientManager_get_MAX_SESSION_ID(void);
#define NetI2pRouterClientClientManager_MAX_SESSION_ID 65534
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManager, MAX_SESSION_ID, jint)

inline NSString *NetI2pRouterClientClientManager_get_PROP_MAX_SESSIONS(void);
static NSString *NetI2pRouterClientClientManager_PROP_MAX_SESSIONS = @"i2cp.maxSessions";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientManager, PROP_MAX_SESSIONS, NSString *)

inline jint NetI2pRouterClientClientManager_get_DEFAULT_MAX_SESSIONS(void);
#define NetI2pRouterClientClientManager_DEFAULT_MAX_SESSIONS 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManager, DEFAULT_MAX_SESSIONS, jint)

__attribute__((unused)) static NetI2pDataI2cpSessionId *NetI2pRouterClientClientManager_locked_getNextSessionId(NetI2pRouterClientClientManager *self);

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner *NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(NetI2pRouterClientClientManager *self, NetI2pDataHash *destHash);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterClientClientManager__Annotations$0(void);

@interface NetI2pRouterClientClientManager_DistributeLocal : NetI2pRouterJobImpl {
 @public
  NetI2pDataDestination *_toDest_;
  NetI2pRouterClientClientConnectionRunner *_to_;
  NetI2pRouterClientClientConnectionRunner *_from_;
  NetI2pDataDestination *_fromDest_;
  NetI2pDataPayload *_payload_;
  NetI2pDataI2cpMessageId *_msgId_;
  jlong _messageNonce_;
}

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$
                              withNetI2pDataDestination:(NetI2pDataDestination *)toDest
           withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)to
           withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)from
                              withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                  withNetI2pDataPayload:(NetI2pDataPayload *)payload
                            withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                               withLong:(jlong)messageNonce;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientManager_DistributeLocal)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _toDest_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _to_, NetI2pRouterClientClientConnectionRunner *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _from_, NetI2pRouterClientClientConnectionRunner *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _fromDest_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _payload_, NetI2pDataPayload *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_DistributeLocal, _msgId_, NetI2pDataI2cpMessageId *)

__attribute__((unused)) static void NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager_DistributeLocal *self, NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce);

__attribute__((unused)) static NetI2pRouterClientClientManager_DistributeLocal *new_NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientManager_DistributeLocal *create_NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientManager_DistributeLocal)

@interface NetI2pRouterClientClientManager_HandleJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterClientClientManager *this$0_;
  NetI2pRouterClientMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$
                          withNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientManager_HandleJob)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientManager_HandleJob, _msg_, NetI2pRouterClientMessage *)

__attribute__((unused)) static void NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager_HandleJob *self, NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg);

__attribute__((unused)) static NetI2pRouterClientClientManager_HandleJob *new_NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientManager_HandleJob *create_NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientManager_HandleJob)

@interface NetI2pRouterClientClientManager_ClientTimestamper : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterClientClientManager *this$0_;
}

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientManager_ClientTimestamper)

inline jlong NetI2pRouterClientClientManager_ClientTimestamper_get_LOOP_TIME(void);
#define NetI2pRouterClientClientManager_ClientTimestamper_LOOP_TIME 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientManager_ClientTimestamper, LOOP_TIME, jlong)

__attribute__((unused)) static void NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager_ClientTimestamper *self, NetI2pRouterClientClientManager *outer$);

__attribute__((unused)) static NetI2pRouterClientClientManager_ClientTimestamper *new_NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientManager_ClientTimestamper *create_NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientManager_ClientTimestamper)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterClientClientManager)

NetI2pDataI2cpSessionId *NetI2pRouterClientClientManager_UNKNOWN_SESSION_ID;

@implementation NetI2pRouterClientClientManager

+ (NetI2pDataI2cpSessionId *)UNKNOWN_SESSION_ID {
  return NetI2pRouterClientClientManager_UNKNOWN_SESSION_ID;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                                          withInt:(jint)port {
  NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(self, context, port);
  return self;
}

- (void)start {
  @synchronized(self) {
    [self startListeners];
  }
}

- (void)startListeners {
  NetI2pRouterClientClientListenerRunner *listener;
  if (NetI2pUtilSystemVersion_isAndroid()) {
    @try {
      IOSClass *clazz = [((IOSClass *) nil_chk(IOSClass_forName_(@"net.i2p.router.client.DomainClientListenerRunner"))) asSubclass:NetI2pRouterClientClientListenerRunner_class_()];
      JavaLangReflectConstructor *ctor = [((IOSClass *) nil_chk(clazz)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pRouterRouterContext_class_(), NetI2pRouterClientClientManager_class_() } count:2 type:IOSClass_class_()]];
      listener = [((JavaLangReflectConstructor *) nil_chk(ctor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ _ctx_, self } count:2 type:NSObject_class_()]];
      JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(listener, @"DomainClientListener", true);
      [t start];
      [((id<JavaUtilList>) nil_chk(_listeners_)) addWithId:listener];
    }
    @catch (JavaLangClassNotFoundException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"Could not find DomainClientListenerRunner class" withJavaLangThrowable:e];
    }
    @catch (JavaLangClassCastException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error creating DomainClientListenerRunner" withJavaLangThrowable:e];
    }
    @catch (JavaLangNoSuchMethodException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error creating DomainClientListenerRunner" withJavaLangThrowable:e];
    }
    @catch (JavaLangInstantiationException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error creating DomainClientListenerRunner" withJavaLangThrowable:e];
    }
    @catch (JavaLangIllegalAccessException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error creating DomainClientListenerRunner" withJavaLangThrowable:e];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error creating DomainClientListenerRunner" withJavaLangThrowable:e];
    }
  }
  if (![((NetI2pRouterRouterContext *) nil_chk(_ctx_)) getBooleanPropertyWithNSString:NetI2pRouterClientClientManager_PROP_DISABLE_EXTERNAL]) {
    if ([_ctx_ getBooleanPropertyWithNSString:NetI2pRouterClientClientManager_PROP_ENABLE_SSL]) listener = create_NetI2pRouterClientSSLClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(_ctx_, self, _port_);
    else listener = create_NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(_ctx_, self, _port_);
    JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(listener, JreStrcat("$I", @"ClientListener:", _port_), true);
    [t start];
    [((id<JavaUtilList>) nil_chk(_listeners_)) addWithId:listener];
    [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_clientTimestamper_)) scheduleWithLong:NetI2pRouterClientClientManager_ClientTimestamper_LOOP_TIME];
  }
  JreAssignVolatileBoolean(&_isStarted_, true);
}

- (void)restart {
  @synchronized(self) {
    [self shutdownWithNSString:@"Router restart"];
    @try {
      JavaLangThread_sleepWithLong_(2 * 1000);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    [self startListeners];
  }
}

- (void)shutdownWithNSString:(NSString *)msg {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isStarted_, false);
    [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:@"Shutting down the ClientManager"];
    for (NetI2pRouterClientClientListenerRunner * __strong listener in nil_chk(_listeners_)) [((NetI2pRouterClientClientListenerRunner *) nil_chk(listener)) stopListening];
    [_listeners_ clear];
    id<JavaUtilSet> runners = create_JavaUtilHashSet_init();
    @synchronized(_runners_) {
      for (NetI2pRouterClientClientConnectionRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_runners_)) values])) {
        [runners addWithId:runner];
      }
    }
    @synchronized(_pendingRunners_) {
      for (NetI2pRouterClientClientConnectionRunner * __strong runner in nil_chk(_pendingRunners_)) {
        [runners addWithId:runner];
      }
    }
    for (NetI2pRouterClientClientConnectionRunner * __strong runner in runners) {
      [((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) disconnectClientWithNSString:msg withInt:NetI2pUtilLog_WARN];
    }
    [((id<JavaUtilMap>) nil_chk(_runnersByHash_)) clear];
    [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_clientTimestamper_)) cancel];
  }
}

- (NetI2pInternalI2CPMessageQueue *)internalConnect {
  if (!JreLoadVolatileBoolean(&_isStarted_)) @throw create_NetI2pClientI2PSessionException_initWithNSString_(@"Router client manager is shut down");
  JavaUtilConcurrentLinkedBlockingQueue *in = create_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pRouterClientClientManager_INTERNAL_QUEUE_SIZE);
  JavaUtilConcurrentLinkedBlockingQueue *out = create_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pRouterClientClientManager_INTERNAL_QUEUE_SIZE);
  NetI2pInternalI2CPMessageQueue *myQueue = create_NetI2pRouterClientI2CPMessageQueueImpl_initWithJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentBlockingQueue_(in, out);
  NetI2pInternalI2CPMessageQueue *hisQueue = create_NetI2pRouterClientI2CPMessageQueueImpl_initWithJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentBlockingQueue_(out, in);
  NetI2pRouterClientClientConnectionRunner *runner = create_NetI2pRouterClientQueuedClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withNetI2pInternalI2CPMessageQueue_(_ctx_, self, myQueue);
  [self registerConnectionWithNetI2pRouterClientClientConnectionRunner:runner];
  return hisQueue;
}

- (jboolean)isAlive {
  @synchronized(self) {
    jboolean listening = true;
    if (![((id<JavaUtilList>) nil_chk(_listeners_)) isEmpty]) {
      for (NetI2pRouterClientClientListenerRunner * __strong listener in _listeners_) listening = (listening && [((NetI2pRouterClientClientListenerRunner *) nil_chk(listener)) isListening]);
    }
    return JreLoadVolatileBoolean(&_isStarted_) && ([_listeners_ isEmpty] || listening);
  }
}

- (void)registerConnectionWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner {
  @try {
    [((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) startRunning];
    @synchronized(_pendingRunners_) {
      [((id<JavaUtilSet>) nil_chk(_pendingRunners_)) addWithId:runner];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error starting up the runner" withJavaLangThrowable:ioe];
    [runner stopRunning];
  }
}

- (void)unregisterConnectionWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner {
  @synchronized(_pendingRunners_) {
    [((id<JavaUtilSet>) nil_chk(_pendingRunners_)) removeWithId:runner];
  }
  id<JavaUtilList> ids = [((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) getSessionIds];
  id<JavaUtilList> dests = [runner getDestinations];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Unregistering (dropping) a client connection with ids: ", ids)];
  @synchronized(_runners_) {
    for (NetI2pDataI2cpSessionId * __strong id_ in nil_chk(ids)) {
      [((id<JavaUtilSet>) nil_chk(_runnerSessionIds_)) removeWithId:id_];
    }
    for (NetI2pDataDestination * __strong dest in nil_chk(dests)) {
      [((id<JavaUtilMap>) nil_chk(_runners_)) removeWithId:dest];
      [((id<JavaUtilMap>) nil_chk(_runnersByHash_)) removeWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
    }
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(_runners_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterClientClientConnectionRunner *r = [iter next];
      if ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(r)) isEqual:runner]) [iter remove];
    }
    for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(_runnersByHash_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterClientClientConnectionRunner *r = [iter next];
      if ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(r)) isEqual:runner]) [iter remove];
    }
  }
}

- (void)unregisterSessionWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_
                           withNetI2pDataDestination:(NetI2pDataDestination *)dest {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Unregistering client session ", id_)];
  @synchronized(_runners_) {
    [((id<JavaUtilSet>) nil_chk(_runnerSessionIds_)) removeWithId:id_];
    [((id<JavaUtilMap>) nil_chk(_runners_)) removeWithId:dest];
    [((id<JavaUtilMap>) nil_chk(_runnersByHash_)) removeWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
  }
}

- (jint)destinationEstablishedWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)runner
                                                 withNetI2pDataDestination:(NetI2pDataDestination *)dest {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"DestinationEstablished called for destination ", [((NetI2pDataDestination *) nil_chk(dest)) toBase32])];
  @synchronized(_pendingRunners_) {
    [((id<JavaUtilSet>) nil_chk(_pendingRunners_)) removeWithId:runner];
  }
  jint rv;
  @synchronized(_runners_) {
    jboolean fail = [((id<JavaUtilMap>) nil_chk(_runnersByHash_)) containsKeyWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
    if (fail) {
      rv = NetI2pDataI2cpSessionStatusMessage_STATUS_INVALID;
    }
    else {
      NetI2pDataI2cpSessionId *id_ = NetI2pRouterClientClientManager_locked_getNextSessionId(self);
      if (id_ != nil) {
        NetI2pDataHash *h = [dest calculateHash];
        [((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) setSessionIdWithNetI2pDataHash:h withNetI2pDataI2cpSessionId:id_];
        [((id<JavaUtilMap>) nil_chk(_runners_)) putWithId:dest withId:runner];
        [_runnersByHash_ putWithId:h withId:runner];
        rv = NetI2pDataI2cpSessionStatusMessage_STATUS_CREATED;
      }
      else {
        rv = NetI2pDataI2cpSessionStatusMessage_STATUS_REFUSED;
      }
    }
  }
  if (rv == NetI2pDataI2cpSessionStatusMessage_STATUS_INVALID) {
    [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"Client attempted to register duplicate destination ", [dest toBase32])];
  }
  else if (rv == NetI2pDataI2cpSessionStatusMessage_STATUS_REFUSED) {
    [_log_ errorWithNSString:JreStrcat("$$", @"Max sessions exceeded ", [dest toBase32])];
  }
  return rv;
}

- (NetI2pDataI2cpSessionId *)locked_getNextSessionId {
  return NetI2pRouterClientClientManager_locked_getNextSessionId(self);
}

- (void)distributeMessageWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                         withNetI2pDataDestination:(NetI2pDataDestination *)toDest
                             withNetI2pDataPayload:(NetI2pDataPayload *)payload
                       withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)msgId
                                          withLong:(jlong)messageNonce
                                          withLong:(jlong)expiration
                                           withInt:(jint)flags {
  NetI2pRouterClientClientConnectionRunner *runner = [self getRunnerWithNetI2pDataDestination:toDest];
  if (runner != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Message ", msgId, @" is targeting a local destination.  distribute it as such")];
    NetI2pRouterClientClientConnectionRunner *sender = [self getRunnerWithNetI2pDataDestination:fromDest];
    if (sender == nil) {
      return;
    }
    id<NetI2pRouterJob> j = create_NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(self, toDest, runner, sender, fromDest, payload, msgId, messageNonce);
    [j runJob];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$", @"Message ", msgId, @" is targeting a REMOTE destination!  Added to the client message pool")];
    runner = [self getRunnerWithNetI2pDataDestination:fromDest];
    if (runner == nil) {
      return;
    }
    NetI2pDataI2cpSessionConfig *config = [runner getConfigWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk(fromDest)) calculateHash]];
    if (config == nil) return;
    NetI2pRouterClientMessage *msg = create_NetI2pRouterClientMessage_initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_(toDest, payload, config, fromDest, msgId, messageNonce, expiration, flags);
    [((NetI2pRouterClientMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) clientMessagePool])) addWithNetI2pRouterClientMessage:msg withBoolean:true];
  }
}

- (void)requestLeaseSetWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                        withLong:(jlong)timeout
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob {
  NetI2pRouterClientClientConnectionRunner *runner = [self getRunnerWithNetI2pDataDestination:dest];
  if (runner == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$", @"Cannot request the lease set, as we can't find a client runner for ", [((NetI2pDataDestination *) nil_chk(dest)) toBase32], @".  disconnected?")];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) jobQueue])) addJobWithNetI2pRouterJob:onFailedJob];
  }
  else {
    [runner requestLeaseSetWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash] withNetI2pDataLeaseSet:set withLong:timeout withNetI2pRouterJob:onCreateJob withNetI2pRouterJob:onFailedJob];
  }
}

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)dest
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls {
  NetI2pRouterClientClientConnectionRunner *runner = NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(self, dest);
  if (runner != nil) {
    [runner requestLeaseSetWithNetI2pDataHash:dest withNetI2pDataLeaseSet:ls withLong:NetI2pRouterClientClientManager_REQUEST_LEASESET_TIMEOUT withNetI2pRouterJob:nil withNetI2pRouterJob:nil];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$", @"Cannot request the lease set, as we can't find a client runner for ", dest, @".  disconnected?")];
  }
}

- (jboolean)isLocalWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return [((id<JavaUtilMap>) nil_chk(_runners_)) containsKeyWithId:dest];
}

- (jboolean)isLocalWithNetI2pDataHash:(NetI2pDataHash *)destHash {
  if (destHash == nil) return false;
  return [((id<JavaUtilMap>) nil_chk(_runnersByHash_)) containsKeyWithId:destHash];
}

- (jboolean)shouldPublishLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)destHash {
  if (destHash == nil) return true;
  NetI2pRouterClientClientConnectionRunner *runner = NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(self, destHash);
  if (runner == nil) return true;
  NetI2pDataI2cpSessionConfig *config = [runner getConfigWithNetI2pDataHash:destHash];
  if (config == nil) return true;
  return !JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk([config getOptions])) getPropertyWithNSString:NetI2pRouterClientManagerFacade_PROP_CLIENT_ONLY]);
}

- (id<JavaUtilSet>)listClients {
  id<JavaUtilSet> rv = create_JavaUtilHashSet_init();
  [rv addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(_runners_)) keySet]];
  return rv;
}

- (NetI2pRouterClientClientConnectionRunner *)getRunnerWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return [((id<JavaUtilMap>) nil_chk(_runners_)) getWithId:dest];
}

- (NetI2pDataI2cpSessionConfig *)getClientSessionConfigWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  NetI2pRouterClientClientConnectionRunner *runner = [self getRunnerWithNetI2pDataDestination:dest];
  if (runner != nil) return [runner getConfigWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
  else return nil;
}

- (NetI2pCryptoSessionKeyManager *)getClientSessionKeyManagerWithNetI2pDataHash:(NetI2pDataHash *)dest {
  NetI2pRouterClientClientConnectionRunner *runner = NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(self, dest);
  if (runner != nil) return [runner getSessionKeyManager];
  else return nil;
}

- (NetI2pRouterClientClientConnectionRunner *)getRunnerWithNetI2pDataHash:(NetI2pDataHash *)destHash {
  return NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(self, destHash);
}

- (void)messageDeliveryStatusUpdateWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)messageNonce
                                                     withInt:(jint)status {
  NetI2pRouterClientClientConnectionRunner *runner = [self getRunnerWithNetI2pDataDestination:fromDest];
  if (runner != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@$@", @"Delivering status ", status, @" to ", [((NetI2pDataDestination *) nil_chk(fromDest)) calculateHash], @" for message ", id_)];
    [runner updateMessageDeliveryStatusWithNetI2pDataDestination:fromDest withNetI2pDataI2cpMessageId:id_ withLong:messageNonce withInt:status];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$@$@", @"Cannot deliver status ", status, @" to ", [((NetI2pDataDestination *) nil_chk(fromDest)) calculateHash], @" for message ", id_)];
  }
}

- (id<JavaUtilSet>)getRunnerDestinations {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<JavaUtilMap>) nil_chk(_runners_)) keySet]);
}

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity {
  if (dest != nil) {
    NetI2pRouterClientClientConnectionRunner *runner = [self getRunnerWithNetI2pDataDestination:dest];
    if (runner != nil) {
      [runner reportAbuseWithNetI2pDataDestination:dest withNSString:reason withInt:severity];
    }
  }
  else {
    for (NetI2pDataDestination * __strong d in nil_chk([((id<JavaUtilMap>) nil_chk(_runners_)) keySet])) {
      [self reportAbuseWithNetI2pDataDestination:d withNSString:reason withInt:severity];
    }
  }
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)messageReceivedWithNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg {
  [(create_NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(self, msg)) runJob];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_listeners_);
  RELEASE_(_runners_);
  RELEASE_(_runnersByHash_);
  RELEASE_(_pendingRunners_);
  RELEASE_(_runnerSessionIds_);
  RELEASE_(_ctx_);
  RELEASE_(_clientTimestamper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pInternalI2CPMessageQueue;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "LNetI2pRouterClientClientConnectionRunner;", 0x0, 21, 17, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, 22, 17, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSessionKeyManager;", 0x1, 23, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterClientClientConnectionRunner;", 0x2, 21, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 30, -1, 31, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withInt:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(startListeners);
  methods[3].selector = @selector(restart);
  methods[4].selector = @selector(shutdownWithNSString:);
  methods[5].selector = @selector(internalConnect);
  methods[6].selector = @selector(isAlive);
  methods[7].selector = @selector(registerConnectionWithNetI2pRouterClientClientConnectionRunner:);
  methods[8].selector = @selector(unregisterConnectionWithNetI2pRouterClientClientConnectionRunner:);
  methods[9].selector = @selector(unregisterSessionWithNetI2pDataI2cpSessionId:withNetI2pDataDestination:);
  methods[10].selector = @selector(destinationEstablishedWithNetI2pRouterClientClientConnectionRunner:withNetI2pDataDestination:);
  methods[11].selector = @selector(locked_getNextSessionId);
  methods[12].selector = @selector(distributeMessageWithNetI2pDataDestination:withNetI2pDataDestination:withNetI2pDataPayload:withNetI2pDataI2cpMessageId:withLong:withLong:withInt:);
  methods[13].selector = @selector(requestLeaseSetWithNetI2pDataDestination:withNetI2pDataLeaseSet:withLong:withNetI2pRouterJob:withNetI2pRouterJob:);
  methods[14].selector = @selector(requestLeaseSetWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[15].selector = @selector(isLocalWithNetI2pDataDestination:);
  methods[16].selector = @selector(isLocalWithNetI2pDataHash:);
  methods[17].selector = @selector(shouldPublishLeaseSetWithNetI2pDataHash:);
  methods[18].selector = @selector(listClients);
  methods[19].selector = @selector(getRunnerWithNetI2pDataDestination:);
  methods[20].selector = @selector(getClientSessionConfigWithNetI2pDataDestination:);
  methods[21].selector = @selector(getClientSessionKeyManagerWithNetI2pDataHash:);
  methods[22].selector = @selector(getRunnerWithNetI2pDataHash:);
  methods[23].selector = @selector(messageDeliveryStatusUpdateWithNetI2pDataDestination:withNetI2pDataI2cpMessageId:withLong:withInt:);
  methods[24].selector = @selector(getRunnerDestinations);
  methods[25].selector = @selector(reportAbuseWithNetI2pDataDestination:withNSString:withInt:);
  methods[26].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[27].selector = @selector(messageReceivedWithNetI2pRouterClientMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 34, -1 },
    { "_runners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "_runnersByHash_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 36, -1 },
    { "_pendingRunners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 37, -1 },
    { "_runnerSessionIds_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 38, -1 },
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_port_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_isStarted_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_clientTimestamper_", "LNetI2pUtilSimpleTimer2_TimedEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_DISABLE_EXTERNAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "PROP_ENABLE_SSL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "INTERNAL_QUEUE_SIZE", "I", .constantValue.asInt = NetI2pRouterClientClientManager_INTERNAL_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "REQUEST_LEASESET_TIMEOUT", "J", .constantValue.asLong = NetI2pRouterClientClientManager_REQUEST_LEASESET_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_SESSION_ID", "I", .constantValue.asInt = NetI2pRouterClientClientManager_MAX_SESSION_ID, 0x1a, -1, -1, -1, -1 },
    { "PROP_MAX_SESSIONS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "DEFAULT_MAX_SESSIONS", "I", .constantValue.asInt = NetI2pRouterClientClientManager_DEFAULT_MAX_SESSIONS, 0x1a, -1, -1, -1, -1 },
    { "UNKNOWN_SESSION_ID", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;I", "shutdown", "LNSString;", "LNetI2pClientI2PSessionException;", "registerConnection", "LNetI2pRouterClientClientConnectionRunner;", "unregisterConnection", "unregisterSession", "LNetI2pDataI2cpSessionId;LNetI2pDataDestination;", "destinationEstablished", "LNetI2pRouterClientClientConnectionRunner;LNetI2pDataDestination;", "distributeMessage", "LNetI2pDataDestination;LNetI2pDataDestination;LNetI2pDataPayload;LNetI2pDataI2cpMessageId;JJI", "requestLeaseSet", "LNetI2pDataDestination;LNetI2pDataLeaseSet;JLNetI2pRouterJob;LNetI2pRouterJob;", "LNetI2pDataHash;LNetI2pDataLeaseSet;", "isLocal", "LNetI2pDataDestination;", "LNetI2pDataHash;", "shouldPublishLeaseSet", "()Ljava/util/Set<Lnet/i2p/data/Destination;>;", "getRunner", "getClientSessionConfig", "getClientSessionKeyManager", "messageDeliveryStatusUpdate", "LNetI2pDataDestination;LNetI2pDataI2cpMessageId;JI", "reportAbuse", "LNetI2pDataDestination;LNSString;I", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterClientClientManager__Annotations$0, "messageReceived", "LNetI2pRouterClientMessage;", "Ljava/util/List<Lnet/i2p/router/client/ClientListenerRunner;>;", "Ljava/util/Map<Lnet/i2p/data/Destination;Lnet/i2p/router/client/ClientConnectionRunner;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/client/ClientConnectionRunner;>;", "Ljava/util/Set<Lnet/i2p/router/client/ClientConnectionRunner;>;", "Ljava/util/Set<Lnet/i2p/data/i2cp/SessionId;>;", &NetI2pRouterClientClientManager_PROP_DISABLE_EXTERNAL, &NetI2pRouterClientClientManager_PROP_ENABLE_SSL, &NetI2pRouterClientClientManager_PROP_MAX_SESSIONS, &NetI2pRouterClientClientManager_UNKNOWN_SESSION_ID, "LNetI2pRouterClientClientManager_DistributeLocal;LNetI2pRouterClientClientManager_HandleJob;LNetI2pRouterClientClientManager_ClientTimestamper;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientManager = { "ClientManager", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 28, 18, -1, 43, -1, -1, -1 };
  return &_NetI2pRouterClientClientManager;
}

+ (void)initialize {
  if (self == [NetI2pRouterClientClientManager class]) {
    JreStrongAssignAndConsume(&NetI2pRouterClientClientManager_UNKNOWN_SESSION_ID, new_NetI2pDataI2cpSessionId_initWithInt_(NetI2pRouterClientClientManager_MAX_SESSION_ID + 1));
    J2OBJC_SET_INITIALIZED(NetI2pRouterClientClientManager)
  }
}

@end

void NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterClientClientManager *self, NetI2pRouterRouterContext *context, jint port) {
  NSObject_init(self);
  JreStrongAssign(&self->_ctx_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterClientClientManager_class_()]);
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->_runners_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_runnersByHash_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_pendingRunners_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->_runnerSessionIds_, new_JavaUtilHashSet_init());
  self->_port_ = port;
  JreStrongAssignAndConsume(&self->_clientTimestamper_, new_NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(self));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_ctx_)) statManager])) createRateStatWithNSString:@"client.requestLeaseSetSuccess" withNSString:@"How frequently the router requests successfully a new leaseSet?" withNSString:@"ClientMessages" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_ctx_ statManager])) createRateStatWithNSString:@"client.requestLeaseSetTimeout" withNSString:@"How frequently the router requests a new leaseSet but gets no reply?" withNSString:@"ClientMessages" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_ctx_ statManager])) createRateStatWithNSString:@"client.requestLeaseSetDropped" withNSString:@"How frequently the router requests a new leaseSet but the client drops?" withNSString:@"ClientMessages" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
}

NetI2pRouterClientClientManager *new_NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *context, jint port) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientManager, initWithNetI2pRouterRouterContext_withInt_, context, port)
}

NetI2pRouterClientClientManager *create_NetI2pRouterClientClientManager_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *context, jint port) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientManager, initWithNetI2pRouterRouterContext_withInt_, context, port)
}

NetI2pDataI2cpSessionId *NetI2pRouterClientClientManager_locked_getNextSessionId(NetI2pRouterClientClientManager *self) {
  jint max = JavaLangMath_maxWithInt_withInt_(1, JavaLangMath_minWithInt_withInt_(2048, [((NetI2pRouterRouterContext *) nil_chk(self->_ctx_)) getPropertyWithNSString:NetI2pRouterClientClientManager_PROP_MAX_SESSIONS withInt:NetI2pRouterClientClientManager_DEFAULT_MAX_SESSIONS]));
  if ([((id<JavaUtilSet>) nil_chk(self->_runnerSessionIds_)) size] >= max) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$I$$", @"Session refused, max is ", max, @", increase ", NetI2pRouterClientClientManager_PROP_MAX_SESSIONS)];
    return nil;
  }
  for (jint i = 0; i < 100; i++) {
    NetI2pDataI2cpSessionId *id_ = create_NetI2pDataI2cpSessionId_initWithInt_([((NetI2pUtilRandomSource *) nil_chk([self->_ctx_ random])) nextIntWithInt:NetI2pRouterClientClientManager_MAX_SESSION_ID + 1]);
    if ([self->_runnerSessionIds_ addWithId:id_]) return id_;
  }
  [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Session refused, can't find id slot"];
  return nil;
}

NetI2pRouterClientClientConnectionRunner *NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(NetI2pRouterClientClientManager *self, NetI2pDataHash *destHash) {
  if (destHash == nil) return nil;
  return [((id<JavaUtilMap>) nil_chk(self->_runnersByHash_)) getWithId:destHash];
}

IOSObjectArray *NetI2pRouterClientClientManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientManager)

@implementation NetI2pRouterClientClientManager_DistributeLocal

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$
                              withNetI2pDataDestination:(NetI2pDataDestination *)toDest
           withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)to
           withNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)from
                              withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                  withNetI2pDataPayload:(NetI2pDataPayload *)payload
                            withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                               withLong:(jlong)messageNonce {
  NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(self, outer$, toDest, to, from, fromDest, payload, id_, messageNonce);
  return self;
}

- (NSString *)getName {
  return @"Distribute local message";
}

- (void)runJob {
  jboolean ok = [((NetI2pRouterClientClientConnectionRunner *) nil_chk(_to_)) receiveMessageWithNetI2pDataDestination:_toDest_ withNetI2pDataDestination:_fromDest_ withNetI2pDataPayload:_payload_];
  if (_from_ != nil) {
    jint rc = ok ? NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_SUCCESS_LOCAL : NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_LOCAL;
    [_from_ updateMessageDeliveryStatusWithNetI2pDataDestination:_fromDest_ withNetI2pDataI2cpMessageId:_msgId_ withLong:_messageNonce_ withInt:rc];
  }
}

- (void)dealloc {
  RELEASE_(_toDest_);
  RELEASE_(_to_);
  RELEASE_(_from_);
  RELEASE_(_fromDest_);
  RELEASE_(_payload_);
  RELEASE_(_msgId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientClientManager:withNetI2pDataDestination:withNetI2pRouterClientClientConnectionRunner:withNetI2pRouterClientClientConnectionRunner:withNetI2pDataDestination:withNetI2pDataPayload:withNetI2pDataI2cpMessageId:withLong:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_toDest_", "LNetI2pDataDestination;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_to_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_from_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fromDest_", "LNetI2pDataDestination;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_payload_", "LNetI2pDataPayload;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_msgId_", "LNetI2pDataI2cpMessageId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageNonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDestination;LNetI2pRouterClientClientConnectionRunner;LNetI2pRouterClientClientConnectionRunner;LNetI2pDataDestination;LNetI2pDataPayload;LNetI2pDataI2cpMessageId;J", "LNetI2pRouterClientClientManager;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientManager_DistributeLocal = { "DistributeLocal", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 3, 7, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientManager_DistributeLocal;
}

@end

void NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager_DistributeLocal *self, NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_ctx_);
  JreStrongAssign(&self->_toDest_, toDest);
  JreStrongAssign(&self->_to_, to);
  JreStrongAssign(&self->_from_, from);
  JreStrongAssign(&self->_fromDest_, fromDest);
  JreStrongAssign(&self->_payload_, payload);
  JreStrongAssign(&self->_msgId_, id_);
  self->_messageNonce_ = messageNonce;
}

NetI2pRouterClientClientManager_DistributeLocal *new_NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientManager_DistributeLocal, initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_, outer$, toDest, to, from, fromDest, payload, id_, messageNonce)
}

NetI2pRouterClientClientManager_DistributeLocal *create_NetI2pRouterClientClientManager_DistributeLocal_initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_(NetI2pRouterClientClientManager *outer$, NetI2pDataDestination *toDest, NetI2pRouterClientClientConnectionRunner *to, NetI2pRouterClientClientConnectionRunner *from, NetI2pDataDestination *fromDest, NetI2pDataPayload *payload, NetI2pDataI2cpMessageId *id_, jlong messageNonce) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientManager_DistributeLocal, initWithNetI2pRouterClientClientManager_withNetI2pDataDestination_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpMessageId_withLong_, outer$, toDest, to, from, fromDest, payload, id_, messageNonce)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientManager_DistributeLocal)

@implementation NetI2pRouterClientClientManager_HandleJob

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$
                          withNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg {
  NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(self, outer$, msg);
  return self;
}

- (NSString *)getName {
  return @"Handle Inbound Client Messages";
}

- (void)runJob {
  NetI2pRouterClientClientConnectionRunner *runner;
  NetI2pDataDestination *dest = [((NetI2pRouterClientMessage *) nil_chk(_msg_)) getDestination];
  if (dest != nil) runner = [this$0_ getRunnerWithNetI2pDataDestination:dest];
  else runner = NetI2pRouterClientClientManager_getRunnerWithNetI2pDataHash_(this$0_, [_msg_ getDestinationHash]);
  if (runner != nil) {
    if (dest != nil) [runner receiveMessageWithNetI2pDataDestination:dest withNetI2pDataDestination:nil withNetI2pDataPayload:[_msg_ getPayload]];
    else [runner receiveMessageWithNetI2pDataHash:[_msg_ getDestinationHash] withNetI2pDataDestination:nil withNetI2pDataPayload:[_msg_ getPayload]];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@C@$", @"Message received but we don't have a connection to ", dest, '/', [_msg_ getDestinationHash], @" currently.  DROPPED")];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientClientManager:withNetI2pRouterClientMessage:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterClientClientManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pRouterClientMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterClientMessage;", "LNetI2pRouterClientClientManager;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientManager_HandleJob = { "HandleJob", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientManager_HandleJob;
}

@end

void NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager_HandleJob *self, NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_ctx_);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterClientClientManager_HandleJob *new_NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientManager_HandleJob, initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_, outer$, msg)
}

NetI2pRouterClientClientManager_HandleJob *create_NetI2pRouterClientClientManager_HandleJob_initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_(NetI2pRouterClientClientManager *outer$, NetI2pRouterClientMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientManager_HandleJob, initWithNetI2pRouterClientClientManager_withNetI2pRouterClientMessage_, outer$, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientManager_HandleJob)

@implementation NetI2pRouterClientClientManager_ClientTimestamper

- (instancetype)initWithNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)outer$ {
  NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(self, outer$);
  return self;
}

- (void)timeReached {
  if (!JreLoadVolatileBoolean(&this$0_->_isStarted_)) return;
  for (NetI2pRouterClientClientConnectionRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->_runners_)) values])) {
    if ([runner isKindOfClass:[NetI2pRouterClientQueuedClientConnectionRunner class]]) continue;
    if ([((NetI2pRouterClientClientConnectionRunner *) nil_chk(runner)) isDead]) continue;
    NetI2pDataI2cpSessionConfig *cfg = [runner getPrimaryConfig];
    if (cfg == nil) continue;
    if ([runner getLeaseSetWithNetI2pDataHash:[((NetI2pDataDestination *) nil_chk([cfg getDestination])) calculateHash]] == nil) continue;
    @try {
      [runner doSendWithNetI2pDataI2cpI2CPMessage:create_NetI2pDataI2cpSetDateMessage_initWithNSString_([runner getClientVersion] != nil ? NetI2pCoreVersion_VERSION : nil)];
    }
    @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    }
  }
  if (JreLoadVolatileBoolean(&this$0_->_isStarted_)) [self scheduleWithLong:NetI2pRouterClientClientManager_ClientTimestamper_LOOP_TIME];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientClientManager:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterClientClientManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "LOOP_TIME", "J", .constantValue.asLong = NetI2pRouterClientClientManager_ClientTimestamper_LOOP_TIME, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterClientClientManager;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientManager_ClientTimestamper = { "ClientTimestamper", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 2, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientManager_ClientTimestamper;
}

@end

void NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager_ClientTimestamper *self, NetI2pRouterClientClientManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_ctx_)) simpleTimer2]);
}

NetI2pRouterClientClientManager_ClientTimestamper *new_NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientManager_ClientTimestamper, initWithNetI2pRouterClientClientManager_, outer$)
}

NetI2pRouterClientClientManager_ClientTimestamper *create_NetI2pRouterClientClientManager_ClientTimestamper_initWithNetI2pRouterClientClientManager_(NetI2pRouterClientClientManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientManager_ClientTimestamper, initWithNetI2pRouterClientClientManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientManager_ClientTimestamper)
