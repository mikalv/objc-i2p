//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/LeaseRequestState.java
//

#include "J2ObjC_source.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/client/LeaseRequestState.h"

@interface NetI2pRouterClientLeaseRequestState () {
 @public
  NetI2pDataLeaseSet *_grantedLeaseSet_;
  NetI2pDataLeaseSet *_requestedLeaseSet_;
  id<NetI2pRouterJob> _onGranted_;
  id<NetI2pRouterJob> _onFailed_;
  jlong _expiration_;
  jboolean _successful_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientLeaseRequestState, _grantedLeaseSet_, NetI2pDataLeaseSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientLeaseRequestState, _requestedLeaseSet_, NetI2pDataLeaseSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientLeaseRequestState, _onGranted_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientLeaseRequestState, _onFailed_, id<NetI2pRouterJob>)

@implementation NetI2pRouterClientLeaseRequestState

- (instancetype)initWithNetI2pRouterJob:(id<NetI2pRouterJob>)onGranted
                    withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed
                               withLong:(jlong)expiration
                 withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)requested {
  NetI2pRouterClientLeaseRequestState_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_(self, onGranted, onFailed, expiration, requested);
  return self;
}

- (NetI2pDataLeaseSet *)getGranted {
  return _grantedLeaseSet_;
}

- (void)setGrantedWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls {
  JreStrongAssign(&_grantedLeaseSet_, ls);
}

- (NetI2pDataLeaseSet *)getRequested {
  return _requestedLeaseSet_;
}

- (id<NetI2pRouterJob>)getOnGranted {
  return _onGranted_;
}

- (id<NetI2pRouterJob>)getOnFailed {
  return _onFailed_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jboolean)getIsSuccessful {
  return _successful_;
}

- (void)setIsSuccessfulWithBoolean:(jboolean)is {
  _successful_ = is;
}

- (NSString *)description {
  return JreStrcat("$@$@$Z$J", @"leaseSet request asking for ", _requestedLeaseSet_, @" having received ", _grantedLeaseSet_, @" succeeding? ", _successful_, @" expiring on ", _expiration_);
}

- (void)dealloc {
  RELEASE_(_grantedLeaseSet_);
  RELEASE_(_requestedLeaseSet_);
  RELEASE_(_onGranted_);
  RELEASE_(_onFailed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterJob:withNetI2pRouterJob:withLong:withNetI2pDataLeaseSet:);
  methods[1].selector = @selector(getGranted);
  methods[2].selector = @selector(setGrantedWithNetI2pDataLeaseSet:);
  methods[3].selector = @selector(getRequested);
  methods[4].selector = @selector(getOnGranted);
  methods[5].selector = @selector(getOnFailed);
  methods[6].selector = @selector(getExpiration);
  methods[7].selector = @selector(getIsSuccessful);
  methods[8].selector = @selector(setIsSuccessfulWithBoolean:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_grantedLeaseSet_", "LNetI2pDataLeaseSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_requestedLeaseSet_", "LNetI2pDataLeaseSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onGranted_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFailed_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_successful_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterJob;LNetI2pRouterJob;JLNetI2pDataLeaseSet;", "setGranted", "LNetI2pDataLeaseSet;", "setIsSuccessful", "Z", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterClientLeaseRequestState = { "LeaseRequestState", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 10, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientLeaseRequestState;
}

@end

void NetI2pRouterClientLeaseRequestState_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_(NetI2pRouterClientLeaseRequestState *self, id<NetI2pRouterJob> onGranted, id<NetI2pRouterJob> onFailed, jlong expiration, NetI2pDataLeaseSet *requested) {
  NSObject_init(self);
  JreStrongAssign(&self->_onGranted_, onGranted);
  JreStrongAssign(&self->_onFailed_, onFailed);
  self->_expiration_ = expiration;
  JreStrongAssign(&self->_requestedLeaseSet_, requested);
}

NetI2pRouterClientLeaseRequestState *new_NetI2pRouterClientLeaseRequestState_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_(id<NetI2pRouterJob> onGranted, id<NetI2pRouterJob> onFailed, jlong expiration, NetI2pDataLeaseSet *requested) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientLeaseRequestState, initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_, onGranted, onFailed, expiration, requested)
}

NetI2pRouterClientLeaseRequestState *create_NetI2pRouterClientLeaseRequestState_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_(id<NetI2pRouterJob> onGranted, id<NetI2pRouterJob> onFailed, jlong expiration, NetI2pDataLeaseSet *requested) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientLeaseRequestState, initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_, onGranted, onFailed, expiration, requested)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientLeaseRequestState)
