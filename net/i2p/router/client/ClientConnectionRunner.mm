//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientConnectionRunner.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/Socket.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2cp/DisconnectMessage.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageReader.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/MessageStatusMessage.h"
#include "net/i2p/data/i2cp/SendMessageExpiresMessage.h"
#include "net/i2p/data/i2cp/SendMessageMessage.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/data/i2cp/SessionId.h"
#include "net/i2p/data/i2cp/SessionStatusMessage.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/ClientManager.h"
#include "net/i2p/router/client/ClientMessageEventListener.h"
#include "net/i2p/router/client/ClientWriterRunner.h"
#include "net/i2p/router/client/LeaseRequestState.h"
#include "net/i2p/router/client/MessageReceivedJob.h"
#include "net/i2p/router/client/ReportAbuseJob.h"
#include "net/i2p/router/client/RequestLeaseSetJob.h"
#include "net/i2p/router/crypto/TransientSessionKeyManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@class NetI2pRouterClientClientConnectionRunner_Rerequest;

@interface NetI2pRouterClientClientConnectionRunner () {
 @public
  JavaNetSocket *_socket_;
  JavaIoOutputStream *_out_;
  JavaUtilConcurrentConcurrentHashMap *_sessions_;
  NSString *_clientVersion_;
  id<JavaUtilMap> _messages_;
  jint _consecutiveLeaseRequestFails_;
  id<JavaUtilSet> _acceptedPending_;
  NetI2pCryptoSessionKeyManager *_sessionKeyManager_;
  id<JavaUtilList> _alreadyProcessed_;
  NetI2pRouterClientClientWriterRunner *_writer_;
  volatile_jboolean _dead_;
  jboolean _dontSendMSM_;
  jboolean _dontSendMSMOnReceive_;
  JavaUtilConcurrentAtomicAtomicInteger *_messageId_;
}

- (jboolean)alreadyAcceptedWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _out_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _sessions_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _clientVersion_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _messages_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _acceptedPending_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _sessionKeyManager_, NetI2pCryptoSessionKeyManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _alreadyProcessed_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _writer_, NetI2pRouterClientClientWriterRunner *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _messageId_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint NetI2pRouterClientClientConnectionRunner_get_MAX_MESSAGE_ID(void);
#define NetI2pRouterClientClientConnectionRunner_MAX_MESSAGE_ID 67108864
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, MAX_MESSAGE_ID, jint)

inline jint NetI2pRouterClientClientConnectionRunner_get_MAX_LEASE_FAILS(void);
#define NetI2pRouterClientClientConnectionRunner_MAX_LEASE_FAILS 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, MAX_LEASE_FAILS, jint)

inline jint NetI2pRouterClientClientConnectionRunner_get_BUF_SIZE(void);
#define NetI2pRouterClientClientConnectionRunner_BUF_SIZE 32768
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, BUF_SIZE, jint)

inline jint NetI2pRouterClientClientConnectionRunner_get_MAX_SESSIONS(void);
#define NetI2pRouterClientClientConnectionRunner_MAX_SESSIONS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, MAX_SESSIONS, jint)

inline NSString *NetI2pRouterClientClientConnectionRunner_get_PROP_TAGS(void);
static NSString *NetI2pRouterClientClientConnectionRunner_PROP_TAGS = @"crypto.tagsToSend";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientConnectionRunner, PROP_TAGS, NSString *)

inline NSString *NetI2pRouterClientClientConnectionRunner_get_PROP_THRESH(void);
static NSString *NetI2pRouterClientClientConnectionRunner_PROP_THRESH = @"crypto.lowTagThreshold";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientConnectionRunner, PROP_THRESH, NSString *)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterClientClientConnectionRunner_get___id(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterClientClientConnectionRunner___id;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterClientClientConnectionRunner, __id, JavaUtilConcurrentAtomicAtomicInteger *)

inline jlong NetI2pRouterClientClientConnectionRunner_get_REQUEUE_DELAY(void);
#define NetI2pRouterClientClientConnectionRunner_REQUEUE_DELAY 500LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, REQUEUE_DELAY, jlong)

inline jint NetI2pRouterClientClientConnectionRunner_get_MAX_REQUEUE(void);
#define NetI2pRouterClientClientConnectionRunner_MAX_REQUEUE 60
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterClientClientConnectionRunner, MAX_REQUEUE, jint)

__attribute__((unused)) static jboolean NetI2pRouterClientClientConnectionRunner_alreadyAcceptedWithNetI2pDataI2cpMessageId_(NetI2pRouterClientClientConnectionRunner *self, NetI2pDataI2cpMessageId *id_);

@interface NetI2pRouterClientClientConnectionRunner_SessionParams : NSObject {
 @public
  NetI2pDataDestination *dest_;
  jboolean isPrimary_;
  NetI2pDataI2cpSessionId *sessionId_;
  NetI2pDataI2cpSessionConfig *config_;
  NetI2pRouterClientLeaseRequestState *leaseRequest_;
  NetI2pRouterClientClientConnectionRunner_Rerequest *rerequestTimer_;
  NetI2pDataLeaseSet *currentLeaseSet_;
}

- (instancetype)initWithNetI2pDataDestination:(NetI2pDataDestination *)d
                                  withBoolean:(jboolean)isPrimary;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientConnectionRunner_SessionParams)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, dest_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, sessionId_, NetI2pDataI2cpSessionId *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, config_, NetI2pDataI2cpSessionConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, leaseRequest_, NetI2pRouterClientLeaseRequestState *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, rerequestTimer_, NetI2pRouterClientClientConnectionRunner_Rerequest *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_SessionParams, currentLeaseSet_, NetI2pDataLeaseSet *)

__attribute__((unused)) static void NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pRouterClientClientConnectionRunner_SessionParams *self, NetI2pDataDestination *d, jboolean isPrimary);

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_SessionParams *new_NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pDataDestination *d, jboolean isPrimary) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_SessionParams *create_NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pDataDestination *d, jboolean isPrimary);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientConnectionRunner_SessionParams)

@interface NetI2pRouterClientClientConnectionRunner_Rerequest : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterClientClientConnectionRunner *this$0_;
  NetI2pDataLeaseSet *_ls_;
  jlong _expirationTime_;
  id<NetI2pRouterJob> _onCreate_;
  id<NetI2pRouterJob> _onFailed_;
}

- (instancetype)initWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)outer$
                                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls
                                                        withLong:(jlong)expirationTime
                                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreate
                                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientConnectionRunner_Rerequest)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_Rerequest, _ls_, NetI2pDataLeaseSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_Rerequest, _onCreate_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_Rerequest, _onFailed_, id<NetI2pRouterJob>)

__attribute__((unused)) static void NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner_Rerequest *self, NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed);

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_Rerequest *new_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_Rerequest *create_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientConnectionRunner_Rerequest)

@interface NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate : NetI2pRouterJobImpl {
 @public
  NetI2pRouterClientClientConnectionRunner *this$0_;
  NetI2pDataI2cpSessionId *_sessId_;
  NetI2pDataI2cpMessageId *_messageId_;
  jlong _messageNonce_;
  jint _status_;
  jlong _lastTried_;
  jint _requeueCount_;
}

- (instancetype)initWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)outer$
                                     withNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)sid
                                     withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                        withLong:(jlong)messageNonce
                                                         withInt:(jint)status;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate, _sessId_, NetI2pDataI2cpSessionId *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate, _messageId_, NetI2pDataI2cpMessageId *)

__attribute__((unused)) static void NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *self, NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status);

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *new_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *create_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterClientClientConnectionRunner)

@implementation NetI2pRouterClientClientConnectionRunner

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
              withNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)manager
                                withJavaNetSocket:(JavaNetSocket *)socket {
  NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(self, context, manager, socket);
  return self;
}

- (void)startRunning {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_) || _reader_ != nil) @throw create_JavaLangIllegalStateException_init();
    JreStrongAssignAndConsume(&_reader_, new_NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(create_JavaIoBufferedInputStream_initWithJavaIoInputStream_withInt_([((JavaNetSocket *) nil_chk(_socket_)) getInputStream], NetI2pRouterClientClientConnectionRunner_BUF_SIZE), [self createListener]));
    JreStrongAssignAndConsume(&_writer_, new_NetI2pRouterClientClientWriterRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_(_context_, self));
    NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(_writer_);
    [t setNameWithNSString:JreStrcat("$I", @"I2CP Writer ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterClientClientConnectionRunner___id)) incrementAndGet])];
    [t setDaemonWithBoolean:true];
    [t start];
    JreStrongAssignAndConsume(&_out_, new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_([_socket_ getOutputStream]));
    [((NetI2pDataI2cpI2CPMessageReader *) nil_chk(_reader_)) startReading];
  }
}

- (id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)createListener {
  return create_NetI2pRouterClientClientMessageEventListener_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withBoolean_(_context_, self, true);
}

- (void)stopRunning {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_dead_)) return;
    if (([((NetI2pRouterRouterContext *) nil_chk(_context_)) router] == nil || [((NetI2pRouterRouter *) nil_chk([_context_ router])) isAlive]) && [((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"Stop the I2CP connection!" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Stop client connection")];
    JreAssignVolatileBoolean(&_dead_, true);
    if (_reader_ != nil) [_reader_ stopReading];
    if (_writer_ != nil) [_writer_ stopWriting];
    if (_socket_ != nil) @try {
      [_socket_ close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    [((id<JavaUtilMap>) nil_chk(_messages_)) clear];
    [((id<JavaUtilSet>) nil_chk(_acceptedPending_)) clear];
    if (_sessionKeyManager_ != nil) [_sessionKeyManager_ shutdown];
    [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) unregisterConnectionWithNetI2pRouterClientClientConnectionRunner:self];
    if ([_context_ netDb] != nil) {
      for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) values])) {
        NetI2pDataLeaseSet *ls = ((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->currentLeaseSet_;
        if (ls != nil) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) unpublishWithNetI2pDataLeaseSet:ls];
        if (!sp->isPrimary_) [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([_context_ tunnelManager])) removeAliasWithNetI2pDataDestination:sp->dest_];
      }
    }
    @synchronized(_alreadyProcessed_) {
      [((id<JavaUtilList>) nil_chk(_alreadyProcessed_)) clear];
    }
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) clear];
  }
}

- (NetI2pDataI2cpSessionConfig *)getConfigWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return nil;
  return sp->config_;
}

- (NetI2pDataI2cpSessionConfig *)getConfigWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  if (id_ == nil) return nil;
  for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) values])) {
    if ([id_ isEqual:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_]) return sp->config_;
  }
  return nil;
}

- (NetI2pDataI2cpSessionConfig *)getPrimaryConfig {
  for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) values])) {
    if (((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->isPrimary_) return sp->config_;
  }
  return nil;
}

- (void)setClientVersionWithNSString:(NSString *)version_ {
  JreStrongAssign(&_clientVersion_, version_);
}

- (NSString *)getClientVersion {
  return _clientVersion_;
}

- (NetI2pCryptoSessionKeyManager *)getSessionKeyManager {
  return _sessionKeyManager_;
}

- (NetI2pDataLeaseSet *)getLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return nil;
  return sp->currentLeaseSet_;
}

- (NetI2pDataHash *)getDestHash {
  NetI2pDataI2cpSessionConfig *cfg = [self getPrimaryConfig];
  if (cfg != nil) return [((NetI2pDataDestination *) nil_chk([cfg getDestination])) calculateHash];
  return nil;
}

- (NetI2pDataHash *)getDestHashWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  if (id_ == nil) return nil;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) entrySet])) {
    if ([id_ isEqual:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue]))->sessionId_]) return [e getKey];
  }
  return nil;
}

- (NetI2pDataDestination *)getDestinationWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  if (id_ == nil) return nil;
  for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) values])) {
    if ([id_ isEqual:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_]) return sp->dest_;
  }
  return nil;
}

- (NetI2pDataI2cpSessionId *)getSessionIdWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return nil;
  return sp->sessionId_;
}

- (id<JavaUtilList>)getSessionIds {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) size]);
  for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([_sessions_ values])) {
    NetI2pDataI2cpSessionId *id_ = ((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_;
    if (id_ != nil) [rv addWithId:id_];
  }
  return rv;
}

- (id<JavaUtilList>)getDestinations {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) size]);
  for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([_sessions_ values])) {
    [rv addWithId:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->dest_];
  }
  return rv;
}

- (void)setSessionIdWithNetI2pDataHash:(NetI2pDataHash *)hash_
           withNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  if (hash_ == nil) @throw create_JavaLangIllegalStateException_init();
  if (id_ == nil) @throw create_JavaLangNullPointerException_init();
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:hash_];
  if (sp == nil || sp->sessionId_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&sp->sessionId_, id_);
}

- (void)removeSessionWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  if (id_ == nil) return;
  jboolean isPrimary = false;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [iter next];
    if ([id_ isEqual:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Destroying client session ", id_)];
      [iter remove];
      [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) unregisterSessionWithNetI2pDataI2cpSessionId:id_ withNetI2pDataDestination:sp->dest_];
      NetI2pDataLeaseSet *ls = sp->currentLeaseSet_;
      if (ls != nil) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) unpublishWithNetI2pDataLeaseSet:ls];
      isPrimary = sp->isPrimary_;
      if (!isPrimary) [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelManager])) removeAliasWithNetI2pDataDestination:sp->dest_];
      break;
    }
  }
  if (isPrimary && ![_sessions_ isEmpty]) {
    for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([_sessions_ values])) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Destroying remaining client subsession ", ((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_)];
      [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) unregisterSessionWithNetI2pDataI2cpSessionId:((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->sessionId_ withNetI2pDataDestination:sp->dest_];
      NetI2pDataLeaseSet *ls = sp->currentLeaseSet_;
      if (ls != nil) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) unpublishWithNetI2pDataLeaseSet:ls];
      [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelManager])) removeAliasWithNetI2pDataDestination:sp->dest_];
    }
  }
}

- (NetI2pRouterClientLeaseRequestState *)getLeaseRequestWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return nil;
  return sp->leaseRequest_;
}

- (void)failLeaseRequestWithNetI2pRouterClientLeaseRequestState:(NetI2pRouterClientLeaseRequestState *)req {
  jboolean disconnect = false;
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk([((NetI2pRouterClientLeaseRequestState *) nil_chk(req)) getRequested])) getDestination])) calculateHash];
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return;
  @synchronized(self) {
    if (sp->leaseRequest_ == req) {
      JreStrongAssign(&sp->leaseRequest_, nil);
      disconnect = (++_consecutiveLeaseRequestFails_ > NetI2pRouterClientClientConnectionRunner_MAX_LEASE_FAILS);
    }
  }
  if (disconnect) [self disconnectClientWithNSString:@"Too many leaseset request fails"];
}

- (jboolean)isDead {
  return JreLoadVolatileBoolean(&_dead_);
}

- (NetI2pDataPayload *)getPayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_ {
  return [((id<JavaUtilMap>) nil_chk(_messages_)) getWithId:id_];
}

- (void)setPayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                        withNetI2pDataPayload:(NetI2pDataPayload *)payload {
  if (!_dontSendMSMOnReceive_) [((id<JavaUtilMap>) nil_chk(_messages_)) putWithId:id_ withId:payload];
}

- (void)removePayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_ {
  [((id<JavaUtilMap>) nil_chk(_messages_)) removeWithId:id_];
}

- (jint)sessionEstablishedWithNetI2pDataI2cpSessionConfig:(NetI2pDataI2cpSessionConfig *)config {
  NetI2pDataDestination *dest = [((NetI2pDataI2cpSessionConfig *) nil_chk(config)) getDestination];
  NetI2pDataHash *destHash = [((NetI2pDataDestination *) nil_chk(dest)) calculateHash];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"SessionEstablished called for destination ", destHash)];
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) size] > NetI2pRouterClientClientConnectionRunner_MAX_SESSIONS) return NetI2pDataI2cpSessionStatusMessage_STATUS_REFUSED;
  jboolean isPrimary = [_sessions_ isEmpty];
  if (!isPrimary) {
    for (NetI2pRouterClientClientConnectionRunner_SessionParams * __strong sp in nil_chk([_sessions_ values])) {
      if (![((NetI2pDataPublicKey *) nil_chk([dest getPublicKey])) isEqual:[((NetI2pDataDestination *) nil_chk(((NetI2pRouterClientClientConnectionRunner_SessionParams *) nil_chk(sp))->dest_)) getPublicKey]]) return NetI2pDataI2cpSessionStatusMessage_STATUS_INVALID;
    }
  }
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = create_NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(dest, isPrimary);
  JreStrongAssign(&sp->config_, config);
  NetI2pRouterClientClientConnectionRunner_SessionParams *old = [_sessions_ putIfAbsentWithId:destHash withId:sp];
  if (old != nil) return NetI2pDataI2cpSessionStatusMessage_STATUS_INVALID;
  JavaUtilProperties *opts = [config getOptions];
  if (isPrimary && opts != nil) {
    _dontSendMSM_ = [@"none" isEqual:[((NSString *) nil_chk([opts getPropertyWithNSString:NetI2pClientI2PClient_PROP_RELIABILITY withNSString:@""])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
    _dontSendMSMOnReceive_ = JavaLangBoolean_parseBooleanWithNSString_([opts getPropertyWithNSString:NetI2pClientI2PClient_PROP_FAST_RECEIVE]);
  }
  if (isPrimary && _sessionKeyManager_ == nil) {
    jint tags = NetI2pRouterCryptoTransientSessionKeyManager_DEFAULT_TAGS;
    jint thresh = NetI2pRouterCryptoTransientSessionKeyManager_LOW_THRESHOLD;
    if (opts != nil) {
      NSString *ptags = [opts getPropertyWithNSString:NetI2pRouterClientClientConnectionRunner_PROP_TAGS];
      if (ptags != nil) {
        @try {
          tags = JavaLangInteger_parseIntWithNSString_(ptags);
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
      NSString *pthresh = [opts getPropertyWithNSString:NetI2pRouterClientClientConnectionRunner_PROP_THRESH];
      if (pthresh != nil) {
        @try {
          thresh = JavaLangInteger_parseIntWithNSString_(pthresh);
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
    }
    JreStrongAssignAndConsume(&_sessionKeyManager_, new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_withInt_withInt_(_context_, tags, thresh));
  }
  return [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) destinationEstablishedWithNetI2pRouterClientClientConnectionRunner:self withNetI2pDataDestination:dest];
}

- (void)updateMessageDeliveryStatusWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)messageNonce
                                                     withInt:(jint)status {
  if (JreLoadVolatileBoolean(&_dead_) || messageNonce <= 0) return;
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:[((NetI2pDataDestination *) nil_chk(dest)) calculateHash]];
  if (sp == nil) return;
  NetI2pDataI2cpSessionId *sid = sp->sessionId_;
  if (sid == nil) return;
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(self, sid, id_, messageNonce, status)];
}

- (void)leaseSetCreatedWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls {
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(ls)) getDestination])) calculateHash];
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) return;
  NetI2pRouterClientLeaseRequestState *state;
  @synchronized(self) {
    JreStrongAssign(&sp->currentLeaseSet_, ls);
    state = JreRetainedLocalValue(sp->leaseRequest_);
    if (state == nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"LeaseRequest is null and we've received a new lease? ", ls)];
      return;
    }
    else {
      [state setIsSuccessfulWithBoolean:true];
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"LeaseSet created fully: ", state, @" / ", ls)];
      JreStrongAssign(&sp->leaseRequest_, nil);
      _consecutiveLeaseRequestFails_ = 0;
    }
  }
  if ((state != nil) && ([state getOnGranted] != nil)) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:[state getOnGranted]];
}

- (void)disconnectClientWithNSString:(NSString *)reason {
  [self disconnectClientWithNSString:reason withInt:NetI2pUtilLog_ERROR];
}

- (void)disconnectClientWithNSString:(NSString *)reason
                             withInt:(jint)logLevel {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:logLevel]) [_log_ logWithInt:logLevel withNSString:JreStrcat("$$", @"Disconnecting the client - ", reason)];
  NetI2pDataI2cpDisconnectMessage *msg = create_NetI2pDataI2cpDisconnectMessage_init();
  if ([((NSString *) nil_chk(reason)) java_length] > 255) reason = [reason java_substring:0 endIndex:255];
  [msg setReasonWithNSString:reason];
  @try {
    [self doSendWithNetI2pDataI2cpI2CPMessage:msg];
  }
  @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Error writing out the disconnect message" withJavaLangThrowable:ime];
  }
  @try {
    JavaLangThread_sleepWithLong_(50);
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  [self stopRunning];
}

- (NetI2pDataI2cpMessageId *)distributeMessageWithNetI2pDataI2cpSendMessageMessage:(NetI2pDataI2cpSendMessageMessage *)message {
  NetI2pDataPayload *payload = [((NetI2pDataI2cpSendMessageMessage *) nil_chk(message)) getPayload];
  NetI2pDataDestination *dest = [message getDestination];
  NetI2pDataI2cpMessageId *id_ = create_NetI2pDataI2cpMessageId_init();
  [id_ setMessageIdWithLong:[self getNextMessageId]];
  jlong expiration = 0;
  jint flags = 0;
  if ([message getType] == NetI2pDataI2cpSendMessageExpiresMessage_MESSAGE_TYPE) {
    NetI2pDataI2cpSendMessageExpiresMessage *msg = (NetI2pDataI2cpSendMessageExpiresMessage *) cast_chk(message, [NetI2pDataI2cpSendMessageExpiresMessage class]);
    expiration = [msg getExpirationTime];
    flags = [msg getFlags];
  }
  if ((!_dontSendMSM_) && [message getNonce] != 0) [((id<JavaUtilSet>) nil_chk(_acceptedPending_)) addWithId:id_];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$I$@", @"** Receiving message ", [id_ getMessageId], @" with payload of size ", [((NetI2pDataPayload *) nil_chk(payload)) getSize], @" for session ", [message getSessionId])];
  NetI2pDataDestination *fromDest = [self getDestinationWithNetI2pDataI2cpSessionId:[message getSessionId]];
  if (fromDest != nil) [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) distributeMessageWithNetI2pDataDestination:fromDest withNetI2pDataDestination:dest withNetI2pDataPayload:payload withNetI2pDataI2cpMessageId:id_ withLong:[message getNonce] withLong:expiration withInt:flags];
  return id_;
}

- (void)ackSendMessageWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)sid
                      withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                         withLong:(jlong)nonce {
  if (_dontSendMSM_ || nonce == 0) return;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J$@", @"Acking message send [accepted]", id_, @" / ", nonce, @" for sessionId ", sid)];
  NetI2pDataI2cpMessageStatusMessage *status = create_NetI2pDataI2cpMessageStatusMessage_init();
  [status setMessageIdWithLong:[((NetI2pDataI2cpMessageId *) nil_chk(id_)) getMessageId]];
  [status setSessionIdWithLong:[((NetI2pDataI2cpSessionId *) nil_chk(sid)) getSessionId]];
  [status setSizeWithLong:0LL];
  [status setNonceWithLong:nonce];
  [status setStatusWithInt:NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_ACCEPTED];
  @try {
    [self doSendWithNetI2pDataI2cpI2CPMessage:status];
    [((id<JavaUtilSet>) nil_chk(_acceptedPending_)) removeWithId:id_];
  }
  @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Error writing out the message status message" withJavaLangThrowable:ime];
  }
}

- (jboolean)receiveMessageWithNetI2pDataDestination:(NetI2pDataDestination *)toDest
                          withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                              withNetI2pDataPayload:(NetI2pDataPayload *)payload {
  if (JreLoadVolatileBoolean(&_dead_)) return false;
  NetI2pRouterClientMessageReceivedJob *j = create_NetI2pRouterClientMessageReceivedJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNetI2pDataDestination_withNetI2pDataPayload_withBoolean_(_context_, self, toDest, fromDest, payload, _dontSendMSMOnReceive_);
  return [j receiveMessage];
}

- (jboolean)receiveMessageWithNetI2pDataHash:(NetI2pDataHash *)toHash
                   withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                       withNetI2pDataPayload:(NetI2pDataPayload *)payload {
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:toHash];
  if (sp == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No session found for receiveMessage()"];
    return false;
  }
  return [self receiveMessageWithNetI2pDataDestination:sp->dest_ withNetI2pDataDestination:fromDest withNetI2pDataPayload:payload];
}

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity {
  if (JreLoadVolatileBoolean(&_dead_)) return;
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterClientReportAbuseJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pDataDestination_withNSString_withInt_(_context_, self, dest, reason, severity)];
}

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)h
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                 withLong:(jlong)expirationTime
                      withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                      withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob {
  if (JreLoadVolatileBoolean(&_dead_)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Requesting leaseSet from a dead client: ", set)];
    if (onFailedJob != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFailedJob];
    return;
  }
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_sessions_)) getWithId:h];
  if (sp == nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Requesting leaseSet for an unknown sesssion"];
    return;
  }
  jint leases = [((NetI2pDataLeaseSet *) nil_chk(set)) getLeaseCount];
  NetI2pDataLeaseSet *current = nil;
  NetI2pDataDestination *dest = sp->dest_;
  NetI2pRouterClientLeaseRequestState *state;
  @synchronized(self) {
    current = JreRetainedLocalValue(sp->currentLeaseSet_);
    if (current != nil && [current getLeaseCount] == leases) {
      for (jint i = 0; i < leases; i++) {
        if (![((NetI2pDataTunnelId *) nil_chk([((NetI2pDataLease *) nil_chk([current getLeaseWithInt:i])) getTunnelId])) isEqual:[((NetI2pDataLease *) nil_chk([set getLeaseWithInt:i])) getTunnelId]]) break;
        if (![((NetI2pDataHash *) nil_chk([((NetI2pDataLease *) nil_chk([current getLeaseWithInt:i])) getGateway])) isEqual:[((NetI2pDataLease *) nil_chk([set getLeaseWithInt:i])) getGateway]]) break;
        if (i == leases - 1) {
          if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Requested leaseSet hasn't changed"];
          if (onCreateJob != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onCreateJob];
          return;
        }
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$@", @"Current leaseSet ", current, @"\nNew leaseSet ", set)];
    state = JreRetainedLocalValue(sp->leaseRequest_);
    if (state != nil) {
      NetI2pDataLeaseSet *requested = [state getRequested];
      NetI2pDataLeaseSet *granted = [state getGranted];
      jlong ours = [set getEarliestLeaseDate];
      if (((requested != nil) && ([((NetI2pDataLeaseSet *) nil_chk(requested)) getEarliestLeaseDate] > ours)) || ((granted != nil) && ([((NetI2pDataLeaseSet *) nil_chk(granted)) getEarliestLeaseDate] > ours))) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Already requesting, theirs newer, do nothing: ", state)];
      }
      else {
        [set setDestinationWithNetI2pDataDestination:dest];
        NetI2pRouterClientClientConnectionRunner_Rerequest *timer = create_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(self, set, expirationTime, onCreateJob, onFailedJob);
        JreStrongAssign(&sp->rerequestTimer_, timer);
        [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:timer withLong:3 * 1000];
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Already requesting, ours newer, wait 3 sec: ", state)];
      }
      return;
    }
    else {
      [set setDestinationWithNetI2pDataDestination:dest];
      if (current == nil && [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelManager])) getOutboundClientTunnelCountWithNetI2pDataHash:h] <= 0) {
        NetI2pRouterClientClientConnectionRunner_Rerequest *timer = create_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(self, set, expirationTime, onCreateJob, onFailedJob);
        JreStrongAssign(&sp->rerequestTimer_, timer);
        [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:timer withLong:1000];
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"No current LS but no OB tunnels, wait 1 sec for ", h)];
        return;
      }
      else {
        JreStrongAssign(&sp->rerequestTimer_, nil);
        JreStrongAssign(&sp->leaseRequest_, state = JreRetainedLocalValue(create_NetI2pRouterClientLeaseRequestState_initWithNetI2pRouterJob_withNetI2pRouterJob_withLong_withNetI2pDataLeaseSet_(onCreateJob, onFailedJob, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] + expirationTime, set)));
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"New request: ", state)];
      }
    }
  }
  [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterClientRequestLeaseSetJob_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientConnectionRunner_withNetI2pRouterClientLeaseRequestState_(_context_, self, state)];
}

- (void)disconnected {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Disconnected" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Disconnected?")];
  [self stopRunning];
}

- (jboolean)getIsDead {
  return JreLoadVolatileBoolean(&_dead_);
}

- (void)writeMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg {
  @try {
    [((id<NetI2pDataI2cpI2CPMessage>) nil_chk(msg)) writeMessageWithJavaIoOutputStream:_out_];
    [((JavaIoOutputStream *) nil_chk(_out_)) flush];
  }
  @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error sending I2CP message to client" withJavaLangThrowable:ime];
    [self stopRunning];
  }
  @catch (JavaIoEOFException *eofe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Error sending I2CP message - client went away" withJavaLangThrowable:eofe];
    [self stopRunning];
  }
  @catch (JavaIoIOException *ioe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:@"IO Error sending I2CP message to client" withJavaLangThrowable:ioe];
    [self stopRunning];
  }
  @catch (JavaLangThrowable *t) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Unhandled exception sending I2CP message to client" withJavaLangThrowable:t];
    [self stopRunning];
  }
}

- (void)doSendWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg {
  if (_out_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Output stream is not initialized");
  if (msg == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Null message?!");
  [((NetI2pRouterClientClientWriterRunner *) nil_chk(_writer_)) addMessageWithNetI2pDataI2cpI2CPMessage:msg];
}

- (jint)getNextMessageId {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(_messageId_)) incrementAndGet] & (NetI2pRouterClientClientConnectionRunner_MAX_MESSAGE_ID - 1);
}

- (jboolean)alreadyAcceptedWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_ {
  return NetI2pRouterClientClientConnectionRunner_alreadyAcceptedWithNetI2pDataI2cpMessageId_(self, id_);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_manager_);
  RELEASE_(_socket_);
  RELEASE_(_out_);
  RELEASE_(_sessions_);
  RELEASE_(_clientVersion_);
  RELEASE_(_messages_);
  RELEASE_(_acceptedPending_);
  RELEASE_(_reader_);
  RELEASE_(_sessionKeyManager_);
  RELEASE_(_alreadyProcessed_);
  RELEASE_(_writer_);
  RELEASE_(_messageId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSessionKeyManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x0, 10, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterClientLeaseRequestState;", 0x0, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPayload;", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpMessageId;", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 34, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 36, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 45, 44, 46, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 47, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterClientClientManager:withJavaNetSocket:);
  methods[1].selector = @selector(startRunning);
  methods[2].selector = @selector(createListener);
  methods[3].selector = @selector(stopRunning);
  methods[4].selector = @selector(getConfigWithNetI2pDataHash:);
  methods[5].selector = @selector(getConfigWithNetI2pDataI2cpSessionId:);
  methods[6].selector = @selector(getPrimaryConfig);
  methods[7].selector = @selector(setClientVersionWithNSString:);
  methods[8].selector = @selector(getClientVersion);
  methods[9].selector = @selector(getSessionKeyManager);
  methods[10].selector = @selector(getLeaseSetWithNetI2pDataHash:);
  methods[11].selector = @selector(getDestHash);
  methods[12].selector = @selector(getDestHashWithNetI2pDataI2cpSessionId:);
  methods[13].selector = @selector(getDestinationWithNetI2pDataI2cpSessionId:);
  methods[14].selector = @selector(getSessionIdWithNetI2pDataHash:);
  methods[15].selector = @selector(getSessionIds);
  methods[16].selector = @selector(getDestinations);
  methods[17].selector = @selector(setSessionIdWithNetI2pDataHash:withNetI2pDataI2cpSessionId:);
  methods[18].selector = @selector(removeSessionWithNetI2pDataI2cpSessionId:);
  methods[19].selector = @selector(getLeaseRequestWithNetI2pDataHash:);
  methods[20].selector = @selector(failLeaseRequestWithNetI2pRouterClientLeaseRequestState:);
  methods[21].selector = @selector(isDead);
  methods[22].selector = @selector(getPayloadWithNetI2pDataI2cpMessageId:);
  methods[23].selector = @selector(setPayloadWithNetI2pDataI2cpMessageId:withNetI2pDataPayload:);
  methods[24].selector = @selector(removePayloadWithNetI2pDataI2cpMessageId:);
  methods[25].selector = @selector(sessionEstablishedWithNetI2pDataI2cpSessionConfig:);
  methods[26].selector = @selector(updateMessageDeliveryStatusWithNetI2pDataDestination:withNetI2pDataI2cpMessageId:withLong:withInt:);
  methods[27].selector = @selector(leaseSetCreatedWithNetI2pDataLeaseSet:);
  methods[28].selector = @selector(disconnectClientWithNSString:);
  methods[29].selector = @selector(disconnectClientWithNSString:withInt:);
  methods[30].selector = @selector(distributeMessageWithNetI2pDataI2cpSendMessageMessage:);
  methods[31].selector = @selector(ackSendMessageWithNetI2pDataI2cpSessionId:withNetI2pDataI2cpMessageId:withLong:);
  methods[32].selector = @selector(receiveMessageWithNetI2pDataDestination:withNetI2pDataDestination:withNetI2pDataPayload:);
  methods[33].selector = @selector(receiveMessageWithNetI2pDataHash:withNetI2pDataDestination:withNetI2pDataPayload:);
  methods[34].selector = @selector(reportAbuseWithNetI2pDataDestination:withNSString:withInt:);
  methods[35].selector = @selector(requestLeaseSetWithNetI2pDataHash:withNetI2pDataLeaseSet:withLong:withNetI2pRouterJob:withNetI2pRouterJob:);
  methods[36].selector = @selector(disconnected);
  methods[37].selector = @selector(getIsDead);
  methods[38].selector = @selector(writeMessageWithNetI2pDataI2cpI2CPMessage:);
  methods[39].selector = @selector(doSendWithNetI2pDataI2cpI2CPMessage:);
  methods[40].selector = @selector(getNextMessageId);
  methods[41].selector = @selector(alreadyAcceptedWithNetI2pDataI2cpMessageId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterClientClientManager;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessions_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "_clientVersion_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messages_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "_consecutiveLeaseRequestFails_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_acceptedPending_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "_reader_", "LNetI2pDataI2cpI2CPMessageReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_sessionKeyManager_", "LNetI2pCryptoSessionKeyManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alreadyProcessed_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 51, -1 },
    { "_writer_", "LNetI2pRouterClientClientWriterRunner;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dead_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_dontSendMSM_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dontSendMSMOnReceive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messageId_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_MESSAGE_ID", "I", .constantValue.asInt = NetI2pRouterClientClientConnectionRunner_MAX_MESSAGE_ID, 0x1a, -1, -1, -1, -1 },
    { "MAX_LEASE_FAILS", "I", .constantValue.asInt = NetI2pRouterClientClientConnectionRunner_MAX_LEASE_FAILS, 0x1a, -1, -1, -1, -1 },
    { "BUF_SIZE", "I", .constantValue.asInt = NetI2pRouterClientClientConnectionRunner_BUF_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MAX_SESSIONS", "I", .constantValue.asInt = NetI2pRouterClientClientConnectionRunner_MAX_SESSIONS, 0x1a, -1, -1, -1, -1 },
    { "PROP_TAGS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "PROP_THRESH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "__id", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "REQUEUE_DELAY", "J", .constantValue.asLong = NetI2pRouterClientClientConnectionRunner_REQUEUE_DELAY, 0x1a, -1, -1, -1, -1 },
    { "MAX_REQUEUE", "I", .constantValue.asInt = NetI2pRouterClientClientConnectionRunner_MAX_REQUEUE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterClientClientManager;LJavaNetSocket;", "LJavaIoIOException;", "getConfig", "LNetI2pDataHash;", "LNetI2pDataI2cpSessionId;", "setClientVersion", "LNSString;", "getLeaseSet", "getDestHash", "getDestination", "getSessionId", "()Ljava/util/List<Lnet/i2p/data/i2cp/SessionId;>;", "()Ljava/util/List<Lnet/i2p/data/Destination;>;", "setSessionId", "LNetI2pDataHash;LNetI2pDataI2cpSessionId;", "removeSession", "getLeaseRequest", "failLeaseRequest", "LNetI2pRouterClientLeaseRequestState;", "getPayload", "LNetI2pDataI2cpMessageId;", "setPayload", "LNetI2pDataI2cpMessageId;LNetI2pDataPayload;", "removePayload", "sessionEstablished", "LNetI2pDataI2cpSessionConfig;", "updateMessageDeliveryStatus", "LNetI2pDataDestination;LNetI2pDataI2cpMessageId;JI", "leaseSetCreated", "LNetI2pDataLeaseSet;", "disconnectClient", "LNSString;I", "distributeMessage", "LNetI2pDataI2cpSendMessageMessage;", "ackSendMessage", "LNetI2pDataI2cpSessionId;LNetI2pDataI2cpMessageId;J", "receiveMessage", "LNetI2pDataDestination;LNetI2pDataDestination;LNetI2pDataPayload;", "LNetI2pDataHash;LNetI2pDataDestination;LNetI2pDataPayload;", "reportAbuse", "LNetI2pDataDestination;LNSString;I", "requestLeaseSet", "LNetI2pDataHash;LNetI2pDataLeaseSet;JLNetI2pRouterJob;LNetI2pRouterJob;", "writeMessage", "LNetI2pDataI2cpI2CPMessage;", "doSend", "LNetI2pDataI2cpI2CPMessageException;", "alreadyAccepted", "Ljava/util/concurrent/ConcurrentHashMap<Lnet/i2p/data/Hash;Lnet/i2p/router/client/ClientConnectionRunner$SessionParams;>;", "Ljava/util/Map<Lnet/i2p/data/i2cp/MessageId;Lnet/i2p/data/Payload;>;", "Ljava/util/Set<Lnet/i2p/data/i2cp/MessageId;>;", "Ljava/util/List<Lnet/i2p/data/i2cp/MessageId;>;", &NetI2pRouterClientClientConnectionRunner_PROP_TAGS, &NetI2pRouterClientClientConnectionRunner_PROP_THRESH, &NetI2pRouterClientClientConnectionRunner___id, "LNetI2pRouterClientClientConnectionRunner_SessionParams;LNetI2pRouterClientClientConnectionRunner_Rerequest;LNetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientConnectionRunner = { "ClientConnectionRunner", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 42, 27, -1, 55, -1, -1, -1 };
  return &_NetI2pRouterClientClientConnectionRunner;
}

+ (void)initialize {
  if (self == [NetI2pRouterClientClientConnectionRunner class]) {
    JreStrongAssignAndConsume(&NetI2pRouterClientClientConnectionRunner___id, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterClientClientConnectionRunner)
  }
}

@end

void NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterClientClientConnectionRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterClientClientConnectionRunner_class_()]);
  JreStrongAssign(&self->_manager_, manager);
  JreStrongAssign(&self->_socket_, socket);
  JreStrongAssignAndConsume(&self->_messages_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_sessions_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_alreadyProcessed_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->_acceptedPending_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_messageId_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_([((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextInt]));
}

NetI2pRouterClientClientConnectionRunner *new_NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientConnectionRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_, context, manager, socket)
}

NetI2pRouterClientClientConnectionRunner *create_NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientConnectionRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_, context, manager, socket)
}

jboolean NetI2pRouterClientClientConnectionRunner_alreadyAcceptedWithNetI2pDataI2cpMessageId_(NetI2pRouterClientClientConnectionRunner *self, NetI2pDataI2cpMessageId *id_) {
  if (JreLoadVolatileBoolean(&self->_dead_)) return false;
  return ![((id<JavaUtilSet>) nil_chk(self->_acceptedPending_)) containsWithId:id_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientConnectionRunner)

@implementation NetI2pRouterClientClientConnectionRunner_SessionParams

- (instancetype)initWithNetI2pDataDestination:(NetI2pDataDestination *)d
                                  withBoolean:(jboolean)isPrimary {
  NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(self, d, isPrimary);
  return self;
}

- (void)dealloc {
  RELEASE_(dest_);
  RELEASE_(sessionId_);
  RELEASE_(config_);
  RELEASE_(leaseRequest_);
  RELEASE_(rerequestTimer_);
  RELEASE_(currentLeaseSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataDestination:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dest_", "LNetI2pDataDestination;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "isPrimary_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sessionId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "config_", "LNetI2pDataI2cpSessionConfig;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "leaseRequest_", "LNetI2pRouterClientLeaseRequestState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rerequestTimer_", "LNetI2pRouterClientClientConnectionRunner_Rerequest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentLeaseSet_", "LNetI2pDataLeaseSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDestination;Z", "LNetI2pRouterClientClientConnectionRunner;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientConnectionRunner_SessionParams = { "SessionParams", "net.i2p.router.client", ptrTable, methods, fields, 7, 0xa, 1, 7, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientConnectionRunner_SessionParams;
}

@end

void NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pRouterClientClientConnectionRunner_SessionParams *self, NetI2pDataDestination *d, jboolean isPrimary) {
  NSObject_init(self);
  JreStrongAssign(&self->dest_, d);
  self->isPrimary_ = isPrimary;
}

NetI2pRouterClientClientConnectionRunner_SessionParams *new_NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pDataDestination *d, jboolean isPrimary) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientConnectionRunner_SessionParams, initWithNetI2pDataDestination_withBoolean_, d, isPrimary)
}

NetI2pRouterClientClientConnectionRunner_SessionParams *create_NetI2pRouterClientClientConnectionRunner_SessionParams_initWithNetI2pDataDestination_withBoolean_(NetI2pDataDestination *d, jboolean isPrimary) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientConnectionRunner_SessionParams, initWithNetI2pDataDestination_withBoolean_, d, isPrimary)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientConnectionRunner_SessionParams)

@implementation NetI2pRouterClientClientConnectionRunner_Rerequest

- (instancetype)initWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)outer$
                                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls
                                                        withLong:(jlong)expirationTime
                                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreate
                                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailed {
  NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(self, outer$, ls, expirationTime, onCreate, onFailed);
  return self;
}

- (void)timeReached {
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk([((NetI2pDataLeaseSet *) nil_chk(_ls_)) getDestination])) calculateHash];
  NetI2pRouterClientClientConnectionRunner_SessionParams *sp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->_sessions_)) getWithId:h];
  if (sp == nil) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"cancelling rerequest, session went away: ", h)];
    return;
  }
  @synchronized(this$0_) {
    if (sp->rerequestTimer_ != self) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"cancelling rerequest, newer request came in: ", h)];
      return;
    }
  }
  [this$0_ requestLeaseSetWithNetI2pDataHash:h withNetI2pDataLeaseSet:_ls_ withLong:_expirationTime_ withNetI2pRouterJob:_onCreate_ withNetI2pRouterJob:_onFailed_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_ls_);
  RELEASE_(_onCreate_);
  RELEASE_(_onFailed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientClientConnectionRunner:withNetI2pDataLeaseSet:withLong:withNetI2pRouterJob:withNetI2pRouterJob:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_ls_", "LNetI2pDataLeaseSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expirationTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onCreate_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFailed_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataLeaseSet;JLNetI2pRouterJob;LNetI2pRouterJob;", "LNetI2pRouterClientClientConnectionRunner;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientConnectionRunner_Rerequest = { "Rerequest", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 2, 5, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientConnectionRunner_Rerequest;
}

@end

void NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner_Rerequest *self, NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_ls_, ls);
  self->_expirationTime_ = expirationTime;
  JreStrongAssign(&self->_onCreate_, onCreate);
  JreStrongAssign(&self->_onFailed_, onFailed);
}

NetI2pRouterClientClientConnectionRunner_Rerequest *new_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientConnectionRunner_Rerequest, initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_, outer$, ls, expirationTime, onCreate, onFailed)
}

NetI2pRouterClientClientConnectionRunner_Rerequest *create_NetI2pRouterClientClientConnectionRunner_Rerequest_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataLeaseSet *ls, jlong expirationTime, id<NetI2pRouterJob> onCreate, id<NetI2pRouterJob> onFailed) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientConnectionRunner_Rerequest, initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataLeaseSet_withLong_withNetI2pRouterJob_withNetI2pRouterJob_, outer$, ls, expirationTime, onCreate, onFailed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientConnectionRunner_Rerequest)

@implementation NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate

- (instancetype)initWithNetI2pRouterClientClientConnectionRunner:(NetI2pRouterClientClientConnectionRunner *)outer$
                                     withNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)sid
                                     withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                        withLong:(jlong)messageNonce
                                                         withInt:(jint)status {
  NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(self, outer$, sid, id_, messageNonce, status);
  return self;
}

- (NSString *)getName {
  return @"Update Delivery Status";
}

- (void)runJob {
  if (JreLoadVolatileBoolean(&this$0_->_dead_)) return;
  NetI2pDataI2cpMessageStatusMessage *msg = create_NetI2pDataI2cpMessageStatusMessage_init();
  [msg setMessageIdWithLong:[((NetI2pDataI2cpMessageId *) nil_chk(_messageId_)) getMessageId]];
  [msg setSessionIdWithLong:[((NetI2pDataI2cpSessionId *) nil_chk(_sessId_)) getSessionId]];
  [msg setNonceWithLong:_messageNonce_];
  [msg setSizeWithLong:0];
  [msg setStatusWithInt:_status_];
  if (!NetI2pRouterClientClientConnectionRunner_alreadyAcceptedWithNetI2pDataI2cpMessageId_(this$0_, _messageId_)) {
    if (_requeueCount_++ > NetI2pRouterClientClientConnectionRunner_MAX_REQUEUE) {
      [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:JreStrcat("$@$$$@", @"Abandon update for message ", _messageId_, @" to ", NetI2pDataI2cpMessageStatusMessage_getStatusStringWithInt_([msg getStatus]), @" for ", _sessId_)];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$$$@$", @"Almost send an update for message ", _messageId_, @" to ", NetI2pDataI2cpMessageStatusMessage_getStatusStringWithInt_([msg getStatus]), @" for ", _sessId_, @" before they knew the messageId!  delaying .5s")];
      _lastTried_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
      [self requeueWithLong:NetI2pRouterClientClientConnectionRunner_REQUEUE_DELAY];
    }
    return;
  }
  jboolean alreadyProcessed = false;
  jlong beforeLock = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
  jlong inLock = 0;
  @synchronized(this$0_->_alreadyProcessed_) {
    inLock = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now];
    if ([((id<JavaUtilList>) nil_chk(this$0_->_alreadyProcessed_)) containsWithId:_messageId_]) {
      [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) infoWithNSString:@"Status already updated"];
      alreadyProcessed = true;
    }
    else {
      [this$0_->_alreadyProcessed_ addWithId:_messageId_];
      while ([this$0_->_alreadyProcessed_ size] > 10) [this$0_->_alreadyProcessed_ removeWithInt:0];
    }
  }
  jlong afterLock = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now];
  if (afterLock - beforeLock > 50) {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) warnWithNSString:JreStrcat("$J$J", @"MessageDeliveryStatusUpdate.locking took too long: ", (afterLock - beforeLock), @" overall, synchronized took ", (inLock - beforeLock))];
  }
  if (alreadyProcessed) return;
  if (_lastTried_ > 0) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ infoWithNSString:JreStrcat("$@$$$@$J", @"Updating message status for message ", _messageId_, @" to ", NetI2pDataI2cpMessageStatusMessage_getStatusStringWithInt_([msg getStatus]), @" for ", _sessId_, @" (with nonce=2), retrying after ", ([((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - _lastTried_))];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@$$$@$", @"Updating message status for message ", _messageId_, @" to ", NetI2pDataI2cpMessageStatusMessage_getStatusStringWithInt_([msg getStatus]), @" for ", _sessId_, @" (with nonce=2)")];
  }
  @try {
    [this$0_ doSendWithNetI2pDataI2cpI2CPMessage:msg];
  }
  @catch (NetI2pDataI2cpI2CPMessageException *ime) {
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Error updating the status for message ID ", _messageId_) withJavaLangThrowable:ime];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_sessId_);
  RELEASE_(_messageId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterClientClientConnectionRunner:withNetI2pDataI2cpSessionId:withNetI2pDataI2cpMessageId:withLong:withInt:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterClientClientConnectionRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_sessId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageId_", "LNetI2pDataI2cpMessageId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageNonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_status_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastTried_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_requeueCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2cpSessionId;LNetI2pDataI2cpMessageId;JI", "LNetI2pRouterClientClientConnectionRunner;" };
  static const J2ObjcClassInfo _NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate = { "MessageDeliveryStatusUpdate", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x2, 3, 7, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate;
}

@end

void NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *self, NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, outer$->_context_);
  JreStrongAssign(&self->_sessId_, sid);
  JreStrongAssign(&self->_messageId_, id_);
  self->_messageNonce_ = messageNonce;
  self->_status_ = status;
}

NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *new_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate, initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_, outer$, sid, id_, messageNonce, status)
}

NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate *create_NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate_initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_(NetI2pRouterClientClientConnectionRunner *outer$, NetI2pDataI2cpSessionId *sid, NetI2pDataI2cpMessageId *id_, jlong messageNonce, jint status) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate, initWithNetI2pRouterClientClientConnectionRunner_withNetI2pDataI2cpSessionId_withNetI2pDataI2cpMessageId_withLong_withInt_, outer$, sid, id_, messageNonce, status)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientConnectionRunner_MessageDeliveryStatusUpdate)
