//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientConnectionRunner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterClientClientConnectionRunner")
#ifdef RESTRICT_NetI2pRouterClientClientConnectionRunner
#define INCLUDE_ALL_NetI2pRouterClientClientConnectionRunner 0
#else
#define INCLUDE_ALL_NetI2pRouterClientClientConnectionRunner 1
#endif
#undef RESTRICT_NetI2pRouterClientClientConnectionRunner

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterClientClientConnectionRunner_) && (INCLUDE_ALL_NetI2pRouterClientClientConnectionRunner || defined(INCLUDE_NetI2pRouterClientClientConnectionRunner))
#define NetI2pRouterClientClientConnectionRunner_

@class JavaNetSocket;
@class NetI2pCryptoSessionKeyManager;
@class NetI2pDataDestination;
@class NetI2pDataHash;
@class NetI2pDataI2cpI2CPMessageReader;
@class NetI2pDataI2cpMessageId;
@class NetI2pDataI2cpSendMessageMessage;
@class NetI2pDataI2cpSessionConfig;
@class NetI2pDataI2cpSessionId;
@class NetI2pDataLeaseSet;
@class NetI2pDataPayload;
@class NetI2pRouterClientClientManager;
@class NetI2pRouterClientLeaseRequestState;
@class NetI2pRouterRouterContext;
@class NetI2pUtilLog;
@protocol JavaUtilList;
@protocol NetI2pDataI2cpI2CPMessage;
@protocol NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;
@protocol NetI2pRouterJob;

@interface NetI2pRouterClientClientConnectionRunner : NSObject {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterClientClientManager *_manager_;
  NetI2pDataI2cpI2CPMessageReader *_reader_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                        withNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)manager
                                          withJavaNetSocket:(JavaNetSocket *)socket;

- (void)failLeaseRequestWithNetI2pRouterClientLeaseRequestState:(NetI2pRouterClientLeaseRequestState *)req;

- (NSString *)getClientVersion;

- (NetI2pDataI2cpSessionConfig *)getConfigWithNetI2pDataHash:(NetI2pDataHash *)h;

- (NetI2pDataI2cpSessionConfig *)getConfigWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_;

- (NetI2pDataHash *)getDestHash;

- (NetI2pDataHash *)getDestHashWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_;

- (NetI2pDataDestination *)getDestinationWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_;

- (NetI2pDataLeaseSet *)getLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)h;

- (jint)getNextMessageId;

- (NetI2pDataI2cpSessionConfig *)getPrimaryConfig;

- (NetI2pCryptoSessionKeyManager *)getSessionKeyManager;

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity;

- (jint)sessionEstablishedWithNetI2pDataI2cpSessionConfig:(NetI2pDataI2cpSessionConfig *)config;

- (void)setClientVersionWithNSString:(NSString *)version_;

- (void)startRunning;

- (void)stopRunning;

#pragma mark Protected

- (id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)createListener;

#pragma mark Package-Private

- (void)ackSendMessageWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)sid
                      withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                         withLong:(jlong)nonce;

- (void)disconnectClientWithNSString:(NSString *)reason;

- (void)disconnectClientWithNSString:(NSString *)reason
                             withInt:(jint)logLevel;

- (void)disconnected;

- (NetI2pDataI2cpMessageId *)distributeMessageWithNetI2pDataI2cpSendMessageMessage:(NetI2pDataI2cpSendMessageMessage *)message;

- (void)doSendWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg;

- (id<JavaUtilList>)getDestinations;

- (jboolean)getIsDead;

- (NetI2pRouterClientLeaseRequestState *)getLeaseRequestWithNetI2pDataHash:(NetI2pDataHash *)h;

- (NetI2pDataPayload *)getPayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_;

- (NetI2pDataI2cpSessionId *)getSessionIdWithNetI2pDataHash:(NetI2pDataHash *)h;

- (id<JavaUtilList>)getSessionIds;

- (jboolean)isDead;

- (void)leaseSetCreatedWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)ls;

- (jboolean)receiveMessageWithNetI2pDataDestination:(NetI2pDataDestination *)toDest
                          withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                              withNetI2pDataPayload:(NetI2pDataPayload *)payload;

- (jboolean)receiveMessageWithNetI2pDataHash:(NetI2pDataHash *)toHash
                   withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                       withNetI2pDataPayload:(NetI2pDataPayload *)payload;

- (void)removePayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_;

- (void)removeSessionWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_;

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)h
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                 withLong:(jlong)expirationTime
                      withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                      withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob;

- (void)setPayloadWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                        withNetI2pDataPayload:(NetI2pDataPayload *)payload;

- (void)setSessionIdWithNetI2pDataHash:(NetI2pDataHash *)hash_
           withNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_;

- (void)updateMessageDeliveryStatusWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)messageNonce
                                                     withInt:(jint)status;

- (void)writeMessageWithNetI2pDataI2cpI2CPMessage:(id<NetI2pDataI2cpI2CPMessage>)msg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterClientClientConnectionRunner)

J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _manager_, NetI2pRouterClientClientManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientClientConnectionRunner, _reader_, NetI2pDataI2cpI2CPMessageReader *)

FOUNDATION_EXPORT void NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterClientClientConnectionRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket);

FOUNDATION_EXPORT NetI2pRouterClientClientConnectionRunner *new_NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterClientClientConnectionRunner *create_NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, JavaNetSocket *socket);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterClientClientConnectionRunner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterClientClientConnectionRunner")
