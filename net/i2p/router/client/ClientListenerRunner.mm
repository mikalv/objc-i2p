//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/client/ClientListenerRunner.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/client/ClientConnectionRunner.h"
#include "net/i2p/router/client/ClientListenerRunner.h"
#include "net/i2p/router/client/ClientManager.h"
#include "net/i2p/router/client/ClientManagerFacadeImpl.h"
#include "net/i2p/router/client/SSLClientListenerRunner.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/PortMapper.h"

@interface NetI2pRouterClientClientListenerRunner ()

- (jboolean)isAlive;

@end

__attribute__((unused)) static jboolean NetI2pRouterClientClientListenerRunner_isAlive(NetI2pRouterClientClientListenerRunner *self);

NSString *NetI2pRouterClientClientListenerRunner_BIND_ALL_INTERFACES = @"i2cp.tcp.bindAllInterfaces";

@implementation NetI2pRouterClientClientListenerRunner

+ (NSString *)BIND_ALL_INTERFACES {
  return NetI2pRouterClientClientListenerRunner_BIND_ALL_INTERFACES;
}

+ (jint)CONNECT_TIMEOUT {
  return NetI2pRouterClientClientListenerRunner_CONNECT_TIMEOUT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
              withNetI2pRouterClientClientManager:(NetI2pRouterClientClientManager *)manager
                                          withInt:(jint)port {
  NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(self, context, manager, port);
  return self;
}

- (jboolean)isListening {
  return JreLoadVolatileBoolean(&_running_) && JreLoadVolatileBoolean(&_listening_);
}

- (JavaNetServerSocket *)getServerSocket {
  if (_bindAllInterfaces_) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$", @"Listening on port ", _port_, @" on all interfaces")];
    return create_JavaNetServerSocket_initWithInt_(_port_);
  }
  else {
    NSString *listenInterface = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterClientClientManagerFacadeImpl_PROP_CLIENT_HOST withNSString:NetI2pRouterClientClientManagerFacadeImpl_DEFAULT_HOST];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$$", @"Listening on port ", _port_, @" of the specific interface: ", listenInterface)];
    return create_JavaNetServerSocket_initWithInt_withInt_withJavaNetInetAddress_(_port_, 0, JavaNetInetAddress_getByNameWithNSString_(listenInterface));
  }
}

- (void)run {
  [self runServer];
}

- (void)runServer {
  JreAssignVolatileBoolean(&_running_, true);
  jint curDelay = 1000;
  NSString *portMapperService = ([self isKindOfClass:[NetI2pRouterClientSSLClientListenerRunner class]]) ? NetI2pUtilPortMapper_SVC_I2CP_SSL : NetI2pUtilPortMapper_SVC_I2CP;
  while (JreLoadVolatileBoolean(&_running_)) {
    @try {
      JreStrongAssign(&_socket_, [self getServerSocket]);
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"ServerSocket created, before accept: ", _socket_)];
      if (_port_ > 0) {
        [((NetI2pUtilPortMapper *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) portMapper])) register__WithNSString:portMapperService withNSString:[((JavaNetInetAddress *) nil_chk([((JavaNetServerSocket *) nil_chk(_socket_)) getInetAddress])) getHostAddress] withInt:_port_];
      }
      curDelay = 1000;
      JreAssignVolatileBoolean(&_listening_, true);
      while (JreLoadVolatileBoolean(&_running_)) {
        @try {
          JavaNetSocket *socket = [((JavaNetServerSocket *) nil_chk(_socket_)) accept];
          if ([self validateWithJavaNetSocket:socket]) {
            if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Connection received"];
            [((JavaNetSocket *) nil_chk(socket)) setKeepAliveWithBoolean:true];
            [self runConnectionWithJavaNetSocket:socket];
          }
          else {
            if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Refused connection from ", [((JavaNetSocket *) nil_chk(socket)) getInetAddress])];
            @try {
              [((JavaNetSocket *) nil_chk(socket)) close];
            }
            @catch (JavaIoIOException *ioe) {
            }
          }
        }
        @catch (JavaIoIOException *ioe) {
          if (NetI2pRouterClientClientListenerRunner_isAlive(self)) [_log_ errorWithNSString:@"Server error accepting" withJavaLangThrowable:ioe];
        }
        @catch (JavaLangThrowable *t) {
          if (NetI2pRouterClientClientListenerRunner_isAlive(self)) [_log_ errorWithNSString:@"Fatal error running client listener - killing the thread!" withJavaLangThrowable:t];
          JreAssignVolatileBoolean(&_listening_, false);
          return;
        }
      }
    }
    @catch (JavaIoIOException *ioe) {
      if (NetI2pRouterClientClientListenerRunner_isAlive(self)) [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I", @"Error listening on port ", _port_) withJavaLangThrowable:ioe];
    }
    @finally {
      if (_port_ > 0) {
        [((NetI2pUtilPortMapper *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) portMapper])) unregisterWithNSString:portMapperService];
      }
    }
    JreAssignVolatileBoolean(&_listening_, false);
    if (_socket_ != nil) {
      @try {
        [_socket_ close];
      }
      @catch (JavaIoIOException *ioe) {
      }
      JreStrongAssign(&_socket_, nil);
    }
    if (!NetI2pRouterClientClientListenerRunner_isAlive(self)) break;
    if (curDelay < 60 * 1000) [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I$", @"Error listening, waiting ", (curDelay / 1000), @"s before we try again")];
    else [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$I$", @"I2CP error listening to port ", _port_, @" - is another I2P instance running? Resolve conflicts and restart")];
    @try {
      JavaLangThread_sleepWithLong_(curDelay);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    curDelay = JavaLangMath_minWithInt_withInt_(curDelay * 3, 60 * 1000);
  }
  if (NetI2pRouterClientClientListenerRunner_isAlive(self)) [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"CANCELING I2CP LISTEN" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I2CP Listen cancelled!!!")];
  JreAssignVolatileBoolean(&_running_, false);
}

- (jboolean)isAlive {
  return NetI2pRouterClientClientListenerRunner_isAlive(self);
}

- (jboolean)validateWithJavaNetSocket:(JavaNetSocket *)socket {
  @try {
    JavaIoInputStream *is = [((JavaNetSocket *) nil_chk(socket)) getInputStream];
    [socket setSoTimeoutWithInt:NetI2pRouterClientClientListenerRunner_CONNECT_TIMEOUT];
    jboolean rv = [((JavaIoInputStream *) nil_chk(is)) read] == NetI2pClientI2PClient_PROTOCOL_BYTE;
    [socket setSoTimeoutWithInt:0];
    return rv;
  }
  @catch (JavaIoIOException *ioe) {
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Peer did not authenticate themselves as I2CP quickly enough, dropping"];
  return false;
}

- (void)runConnectionWithJavaNetSocket:(JavaNetSocket *)socket {
  NetI2pRouterClientClientConnectionRunner *runner = create_NetI2pRouterClientClientConnectionRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withJavaNetSocket_(_context_, _manager_, socket);
  [((NetI2pRouterClientClientManager *) nil_chk(_manager_)) registerConnectionWithNetI2pRouterClientClientConnectionRunner:runner];
}

- (void)stopListening {
  JreAssignVolatileBoolean(&_running_, false);
  if (_socket_ != nil) @try {
    [_socket_ close];
    JreStrongAssign(&_socket_, nil);
  }
  @catch (JavaIoIOException *ioe) {
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_manager_);
  RELEASE_(_socket_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetServerSocket;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterClientClientManager:withInt:);
  methods[1].selector = @selector(isListening);
  methods[2].selector = @selector(getServerSocket);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(runServer);
  methods[5].selector = @selector(isAlive);
  methods[6].selector = @selector(validateWithJavaNetSocket:);
  methods[7].selector = @selector(runConnectionWithJavaNetSocket:);
  methods[8].selector = @selector(stopListening);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterClientClientManager;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_port_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_bindAllInterfaces_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_running_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_listening_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "BIND_ALL_INTERFACES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "CONNECT_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterClientClientListenerRunner_CONNECT_TIMEOUT, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterClientClientManager;I", "LJavaIoIOException;", "validate", "LJavaNetSocket;", "runConnection", &NetI2pRouterClientClientListenerRunner_BIND_ALL_INTERFACES };
  static const J2ObjcClassInfo _NetI2pRouterClientClientListenerRunner = { "ClientListenerRunner", "net.i2p.router.client", ptrTable, methods, fields, 7, 0x0, 9, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientClientListenerRunner;
}

@end

void NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterClientClientListenerRunner *self, NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_manager_, manager);
  self->_port_ = port;
  self->_bindAllInterfaces_ = [((NetI2pRouterRouterContext *) nil_chk(context)) getBooleanPropertyWithNSString:NetI2pRouterClientClientListenerRunner_BIND_ALL_INTERFACES];
}

NetI2pRouterClientClientListenerRunner *new_NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientClientListenerRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_, context, manager, port)
}

NetI2pRouterClientClientListenerRunner *create_NetI2pRouterClientClientListenerRunner_initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_(NetI2pRouterRouterContext *context, NetI2pRouterClientClientManager *manager, jint port) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientClientListenerRunner, initWithNetI2pRouterRouterContext_withNetI2pRouterClientClientManager_withInt_, context, manager, port)
}

jboolean NetI2pRouterClientClientListenerRunner_isAlive(NetI2pRouterClientClientListenerRunner *self) {
  NetI2pRouterRouter *r = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router];
  return r == nil || [r isAlive];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientClientListenerRunner)
