//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/TunnelPoolSettings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolSettings")
#ifdef RESTRICT_NetI2pRouterTunnelPoolSettings
#define INCLUDE_ALL_NetI2pRouterTunnelPoolSettings 0
#else
#define INCLUDE_ALL_NetI2pRouterTunnelPoolSettings 1
#endif
#undef RESTRICT_NetI2pRouterTunnelPoolSettings

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTunnelPoolSettings_) && (INCLUDE_ALL_NetI2pRouterTunnelPoolSettings || defined(INCLUDE_NetI2pRouterTunnelPoolSettings))
#define NetI2pRouterTunnelPoolSettings_

@class JavaUtilProperties;
@class NetI2pDataHash;
@protocol JavaUtilSet;

@interface NetI2pRouterTunnelPoolSettings : NSObject
@property (readonly, copy, class) NSString *PREFIX_INBOUND_EXPLORATORY NS_SWIFT_NAME(PREFIX_INBOUND_EXPLORATORY);
@property (readonly, copy, class) NSString *PREFIX_OUTBOUND_EXPLORATORY NS_SWIFT_NAME(PREFIX_OUTBOUND_EXPLORATORY);
@property (readonly, copy, class) NSString *PROP_NICKNAME NS_SWIFT_NAME(PROP_NICKNAME);
@property (readonly, copy, class) NSString *PROP_QUANTITY NS_SWIFT_NAME(PROP_QUANTITY);
@property (readonly, copy, class) NSString *PROP_BACKUP_QUANTITY NS_SWIFT_NAME(PROP_BACKUP_QUANTITY);
@property (readonly, copy, class) NSString *PROP_DURATION NS_SWIFT_NAME(PROP_DURATION);
@property (readonly, copy, class) NSString *PROP_LENGTH NS_SWIFT_NAME(PROP_LENGTH);
@property (readonly, copy, class) NSString *PROP_LENGTH_VARIANCE NS_SWIFT_NAME(PROP_LENGTH_VARIANCE);
@property (readonly, copy, class) NSString *PROP_ALLOW_ZERO_HOP NS_SWIFT_NAME(PROP_ALLOW_ZERO_HOP);
@property (readonly, copy, class) NSString *PROP_IP_RESTRICTION NS_SWIFT_NAME(PROP_IP_RESTRICTION);
@property (readonly, copy, class) NSString *PROP_PRIORITY NS_SWIFT_NAME(PROP_PRIORITY);
@property (readonly, copy, class) NSString *PROP_RANDOM_KEY NS_SWIFT_NAME(PROP_RANDOM_KEY);
@property (readonly, class) jint DEFAULT_QUANTITY NS_SWIFT_NAME(DEFAULT_QUANTITY);
@property (readonly, class) jint DEFAULT_BACKUP_QUANTITY NS_SWIFT_NAME(DEFAULT_BACKUP_QUANTITY);
@property (readonly, class) jint DEFAULT_DURATION NS_SWIFT_NAME(DEFAULT_DURATION);
@property (readonly, class) jboolean DEFAULT_ALLOW_ZERO_HOP NS_SWIFT_NAME(DEFAULT_ALLOW_ZERO_HOP);
@property (readonly, class) jint DEFAULT_IP_RESTRICTION NS_SWIFT_NAME(DEFAULT_IP_RESTRICTION);

+ (NSString *)PREFIX_INBOUND_EXPLORATORY;

+ (NSString *)PREFIX_OUTBOUND_EXPLORATORY;

+ (NSString *)PROP_NICKNAME;

+ (NSString *)PROP_QUANTITY;

+ (NSString *)PROP_BACKUP_QUANTITY;

+ (NSString *)PROP_DURATION;

+ (NSString *)PROP_LENGTH;

+ (NSString *)PROP_LENGTH_VARIANCE;

+ (NSString *)PROP_ALLOW_ZERO_HOP;

+ (NSString *)PROP_IP_RESTRICTION;

+ (NSString *)PROP_PRIORITY;

+ (NSString *)PROP_RANDOM_KEY;

+ (jint)DEFAULT_QUANTITY;

+ (jint)DEFAULT_BACKUP_QUANTITY;

+ (jint)DEFAULT_DURATION;

+ (jboolean)DEFAULT_ALLOW_ZERO_HOP;

+ (jint)DEFAULT_IP_RESTRICTION;

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)isInbound;

- (instancetype __nonnull)initWithNetI2pDataHash:(NetI2pDataHash *)dest
                                     withBoolean:(jboolean)isInbound;

- (id<JavaUtilSet>)getAliases;

- (NetI2pDataHash *)getAliasOf;

- (jboolean)getAllowZeroHop;

- (jint)getBackupQuantity;

- (NetI2pDataHash *)getDestination;

- (NSString *)getDestinationNickname;

- (jint)getIPRestriction;

- (jint)getLength;

- (jint)getLengthOverride;

- (jint)getLengthVariance;

- (jint)getPriority;

- (jint)getQuantity;

- (NetI2pDataHash *)getRandomKey;

- (jint)getTotalQuantity;

- (JavaUtilProperties *)getUnknownOptions;

- (jboolean)isExploratory;

- (jboolean)isInbound;

- (void)readFromPropertiesWithNSString:(NSString *)prefix
                withJavaUtilProperties:(JavaUtilProperties *)props;

- (void)setAliasOfWithNetI2pDataHash:(NetI2pDataHash *)h;

- (void)setAllowZeroHopWithBoolean:(jboolean)ok;

- (void)setBackupQuantityWithInt:(jint)quantity;

- (void)setDestinationNicknameWithNSString:(NSString *)name;

- (void)setIPRestrictionWithInt:(jint)b;

- (void)setLengthWithInt:(jint)length;

- (void)setLengthOverrideWithInt:(jint)length;

- (void)setLengthVarianceWithInt:(jint)variance;

- (void)setQuantityWithInt:(jint)quantity;

- (NSString *)description;

- (void)writeToPropertiesWithNSString:(NSString *)prefix
               withJavaUtilProperties:(JavaUtilProperties *)props;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTunnelPoolSettings)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PREFIX_INBOUND_EXPLORATORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PREFIX_INBOUND_EXPLORATORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PREFIX_INBOUND_EXPLORATORY, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PREFIX_OUTBOUND_EXPLORATORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PREFIX_OUTBOUND_EXPLORATORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PREFIX_OUTBOUND_EXPLORATORY, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_NICKNAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_NICKNAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_NICKNAME, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_QUANTITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_QUANTITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_QUANTITY, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_BACKUP_QUANTITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_BACKUP_QUANTITY, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_DURATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_DURATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_DURATION, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_LENGTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_LENGTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_LENGTH, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_LENGTH_VARIANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_LENGTH_VARIANCE, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_ALLOW_ZERO_HOP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_ALLOW_ZERO_HOP, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_IP_RESTRICTION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_IP_RESTRICTION, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_PRIORITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_PRIORITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_PRIORITY, NSString *)

inline NSString *NetI2pRouterTunnelPoolSettings_get_PROP_RANDOM_KEY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTunnelPoolSettings_PROP_RANDOM_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolSettings, PROP_RANDOM_KEY, NSString *)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_QUANTITY(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_QUANTITY 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_QUANTITY, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_BACKUP_QUANTITY(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_BACKUP_QUANTITY 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_BACKUP_QUANTITY, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_DURATION(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_DURATION 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_DURATION, jint)

inline jboolean NetI2pRouterTunnelPoolSettings_get_DEFAULT_ALLOW_ZERO_HOP(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_ALLOW_ZERO_HOP false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_ALLOW_ZERO_HOP, jboolean)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_IP_RESTRICTION(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_IP_RESTRICTION 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_IP_RESTRICTION, jint)

FOUNDATION_EXPORT void NetI2pRouterTunnelPoolSettings_initWithBoolean_(NetI2pRouterTunnelPoolSettings *self, jboolean isInbound);

FOUNDATION_EXPORT NetI2pRouterTunnelPoolSettings *new_NetI2pRouterTunnelPoolSettings_initWithBoolean_(jboolean isInbound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelPoolSettings *create_NetI2pRouterTunnelPoolSettings_initWithBoolean_(jboolean isInbound);

FOUNDATION_EXPORT void NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pRouterTunnelPoolSettings *self, NetI2pDataHash *dest, jboolean isInbound);

FOUNDATION_EXPORT NetI2pRouterTunnelPoolSettings *new_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *dest, jboolean isInbound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelPoolSettings *create_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *dest, jboolean isInbound);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolSettings)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolSettings")
