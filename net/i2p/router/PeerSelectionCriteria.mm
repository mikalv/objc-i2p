//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/PeerSelectionCriteria.java
//

#include "J2ObjC_source.h"
#include "net/i2p/router/PeerSelectionCriteria.h"

@interface NetI2pRouterPeerSelectionCriteria () {
 @public
  jint _minReq_;
  jint _maxReq_;
  jint _purpose_;
}

@end

@implementation NetI2pRouterPeerSelectionCriteria

+ (jint)PURPOSE_TUNNEL {
  return NetI2pRouterPeerSelectionCriteria_PURPOSE_TUNNEL;
}

+ (jint)PURPOSE_GARLIC {
  return NetI2pRouterPeerSelectionCriteria_PURPOSE_GARLIC;
}

+ (jint)PURPOSE_SOURCE_ROUTE {
  return NetI2pRouterPeerSelectionCriteria_PURPOSE_SOURCE_ROUTE;
}

+ (jint)PURPOSE_TEST {
  return NetI2pRouterPeerSelectionCriteria_PURPOSE_TEST;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterPeerSelectionCriteria_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getMinimumRequired {
  return _minReq_;
}

- (void)setMinimumRequiredWithInt:(jint)min {
  _minReq_ = min;
}

- (jint)getMaximumRequired {
  return _maxReq_;
}

- (void)setMaximumRequiredWithInt:(jint)max {
  _maxReq_ = max;
}

- (jint)getPurpose {
  return _purpose_;
}

- (void)setPurposeWithInt:(jint)purpose {
  _purpose_ = purpose;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMinimumRequired);
  methods[2].selector = @selector(setMinimumRequiredWithInt:);
  methods[3].selector = @selector(getMaximumRequired);
  methods[4].selector = @selector(setMaximumRequiredWithInt:);
  methods[5].selector = @selector(getPurpose);
  methods[6].selector = @selector(setPurposeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PURPOSE_TUNNEL", "I", .constantValue.asInt = NetI2pRouterPeerSelectionCriteria_PURPOSE_TUNNEL, 0x19, -1, -1, -1, -1 },
    { "PURPOSE_GARLIC", "I", .constantValue.asInt = NetI2pRouterPeerSelectionCriteria_PURPOSE_GARLIC, 0x19, -1, -1, -1, -1 },
    { "PURPOSE_SOURCE_ROUTE", "I", .constantValue.asInt = NetI2pRouterPeerSelectionCriteria_PURPOSE_SOURCE_ROUTE, 0x19, -1, -1, -1, -1 },
    { "PURPOSE_TEST", "I", .constantValue.asInt = NetI2pRouterPeerSelectionCriteria_PURPOSE_TEST, 0x19, -1, -1, -1, -1 },
    { "_minReq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_maxReq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_purpose_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMinimumRequired", "I", "setMaximumRequired", "setPurpose" };
  static const J2ObjcClassInfo _NetI2pRouterPeerSelectionCriteria = { "PeerSelectionCriteria", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 7, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeerSelectionCriteria;
}

@end

void NetI2pRouterPeerSelectionCriteria_init(NetI2pRouterPeerSelectionCriteria *self) {
  NSObject_init(self);
}

NetI2pRouterPeerSelectionCriteria *new_NetI2pRouterPeerSelectionCriteria_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterPeerSelectionCriteria, init)
}

NetI2pRouterPeerSelectionCriteria *create_NetI2pRouterPeerSelectionCriteria_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeerSelectionCriteria, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeerSelectionCriteria)
