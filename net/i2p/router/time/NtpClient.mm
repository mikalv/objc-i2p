//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/time/NtpClient.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/DatagramSocket.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/SocketAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/time/NtpClient.h"
#include "net/i2p/router/time/NtpMessage.h"
#include "net/i2p/util/DNSOverHTTPS.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterTimeNtpClient ()

+ (IOSLongArray *)currentTimeAndStratumWithNSString:(NSString *)serverName
                                            withInt:(jint)timeout
                                        withBoolean:(jboolean)preferIPv6
                                  withNetI2pUtilLog:(NetI2pUtilLog *)log;

@end

inline jint NetI2pRouterTimeNtpClient_get_NTP_PORT(void);
#define NetI2pRouterTimeNtpClient_NTP_PORT 123
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, NTP_PORT, jint)

inline jint NetI2pRouterTimeNtpClient_get_DEFAULT_TIMEOUT(void);
#define NetI2pRouterTimeNtpClient_DEFAULT_TIMEOUT 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, DEFAULT_TIMEOUT, jint)

inline jint NetI2pRouterTimeNtpClient_get_OFF_ORIGTIME(void);
#define NetI2pRouterTimeNtpClient_OFF_ORIGTIME 24
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, OFF_ORIGTIME, jint)

inline jint NetI2pRouterTimeNtpClient_get_OFF_TXTIME(void);
#define NetI2pRouterTimeNtpClient_OFF_TXTIME 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, OFF_TXTIME, jint)

inline jint NetI2pRouterTimeNtpClient_get_MIN_PKT_LEN(void);
#define NetI2pRouterTimeNtpClient_MIN_PKT_LEN 48
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, MIN_PKT_LEN, jint)

inline id<JavaUtilMap> NetI2pRouterTimeNtpClient_get_kisses(void);
static id<JavaUtilMap> NetI2pRouterTimeNtpClient_kisses;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeNtpClient, kisses, id<JavaUtilMap>)

inline NSString *NetI2pRouterTimeNtpClient_get_PROP_USE_DNS_OVER_HTTPS(void);
static NSString *NetI2pRouterTimeNtpClient_PROP_USE_DNS_OVER_HTTPS = @"time.useDNSOverHTTPS";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeNtpClient, PROP_USE_DNS_OVER_HTTPS, NSString *)

inline jboolean NetI2pRouterTimeNtpClient_get_DEFAULT_USE_DNS_OVER_HTTPS(void);
#define NetI2pRouterTimeNtpClient_DEFAULT_USE_DNS_OVER_HTTPS false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTimeNtpClient, DEFAULT_USE_DNS_OVER_HTTPS, jboolean)

__attribute__((unused)) static IOSLongArray *NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSString_withInt_withBoolean_withNetI2pUtilLog_(NSString *serverName, jint timeout, jboolean preferIPv6, NetI2pUtilLog *log);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTimeNtpClient)

@implementation NetI2pRouterTimeNtpClient

+ (jdouble)SECONDS_1900_TO_EPOCH {
  return NetI2pRouterTimeNtpClient_SECONDS_1900_TO_EPOCH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTimeNtpClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSLongArray *)currentTimeAndStratumWithNSStringArray:(IOSObjectArray *)serverNames
                                                 withInt:(jint)perServerTimeout
                                             withBoolean:(jboolean)preferIPv6
                                       withNetI2pUtilLog:(NetI2pUtilLog *)log {
  return NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSStringArray_withInt_withBoolean_withNetI2pUtilLog_(serverNames, perServerTimeout, preferIPv6, log);
}

+ (IOSLongArray *)currentTimeAndStratumWithNSString:(NSString *)serverName
                                            withInt:(jint)timeout
                                        withBoolean:(jboolean)preferIPv6
                                  withNetI2pUtilLog:(NetI2pUtilLog *)log {
  return NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSString_withInt_withBoolean_withNetI2pUtilLog_(serverName, timeout, preferIPv6, log);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterTimeNtpClient_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[J", 0xa, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(currentTimeAndStratumWithNSStringArray:withInt:withBoolean:withNetI2pUtilLog:);
  methods[2].selector = @selector(currentTimeAndStratumWithNSString:withInt:withBoolean:withNetI2pUtilLog:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SECONDS_1900_TO_EPOCH", "D", .constantValue.asDouble = NetI2pRouterTimeNtpClient_SECONDS_1900_TO_EPOCH, 0x18, -1, -1, -1, -1 },
    { "NTP_PORT", "I", .constantValue.asInt = NetI2pRouterTimeNtpClient_NTP_PORT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTimeNtpClient_DEFAULT_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "OFF_ORIGTIME", "I", .constantValue.asInt = NetI2pRouterTimeNtpClient_OFF_ORIGTIME, 0x1a, -1, -1, -1, -1 },
    { "OFF_TXTIME", "I", .constantValue.asInt = NetI2pRouterTimeNtpClient_OFF_TXTIME, 0x1a, -1, -1, -1, -1 },
    { "MIN_PKT_LEN", "I", .constantValue.asInt = NetI2pRouterTimeNtpClient_MIN_PKT_LEN, 0x1a, -1, -1, -1, -1 },
    { "kisses", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 6, 7, -1 },
    { "PROP_USE_DNS_OVER_HTTPS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "DEFAULT_USE_DNS_OVER_HTTPS", "Z", .constantValue.asBOOL = NetI2pRouterTimeNtpClient_DEFAULT_USE_DNS_OVER_HTTPS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "currentTimeAndStratum", "[LNSString;IZLNetI2pUtilLog;", "LNSString;IZLNetI2pUtilLog;", "main", "[LNSString;", "LJavaIoIOException;", &NetI2pRouterTimeNtpClient_kisses, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &NetI2pRouterTimeNtpClient_PROP_USE_DNS_OVER_HTTPS };
  static const J2ObjcClassInfo _NetI2pRouterTimeNtpClient = { "NtpClient", "net.i2p.router.time", ptrTable, methods, fields, 7, 0x1, 4, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTimeNtpClient;
}

+ (void)initialize {
  if (self == [NetI2pRouterTimeNtpClient class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTimeNtpClient_kisses, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(2));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTimeNtpClient)
  }
}

@end

void NetI2pRouterTimeNtpClient_init(NetI2pRouterTimeNtpClient *self) {
  NSObject_init(self);
}

NetI2pRouterTimeNtpClient *new_NetI2pRouterTimeNtpClient_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTimeNtpClient, init)
}

NetI2pRouterTimeNtpClient *create_NetI2pRouterTimeNtpClient_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTimeNtpClient, init)
}

IOSLongArray *NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSStringArray_withInt_withBoolean_withNetI2pUtilLog_(IOSObjectArray *serverNames, jint perServerTimeout, jboolean preferIPv6, NetI2pUtilLog *log) {
  NetI2pRouterTimeNtpClient_initialize();
  if (serverNames == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No NTP servers specified");
  JavaUtilArrayList *names = create_JavaUtilArrayList_initWithInt_(serverNames->size_);
  for (jint i = 0; i < serverNames->size_; i++) [names addWithId:IOSObjectArray_Get(serverNames, i)];
  JavaUtilCollections_shuffleWithJavaUtilList_(names);
  for (jint i = 0; i < [names size]; i++) {
    IOSLongArray *rv = NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSString_withInt_withBoolean_withNetI2pUtilLog_([names getWithInt:i], perServerTimeout, preferIPv6, log);
    if (rv != nil && IOSLongArray_Get(rv, 0) > 0) return rv;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No reachable NTP servers specified");
}

IOSLongArray *NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSString_withInt_withBoolean_withNetI2pUtilLog_(NSString *serverName, jint timeout, jboolean preferIPv6, NetI2pUtilLog *log) {
  NetI2pRouterTimeNtpClient_initialize();
  JavaNetDatagramSocket *socket = nil;
  NetI2pI2PAppContext *ctx = NetI2pI2PAppContext_getGlobalContext();
  jboolean useDNSOverHTTPS = [((NetI2pI2PAppContext *) nil_chk(ctx)) getPropertyWithNSString:NetI2pRouterTimeNtpClient_PROP_USE_DNS_OVER_HTTPS withBoolean:NetI2pRouterTimeNtpClient_DEFAULT_USE_DNS_OVER_HTTPS];
  @try {
    JavaNetInetAddress *address;
    if (preferIPv6) {
      NSString *ip = nil;
      if (useDNSOverHTTPS) {
        NetI2pUtilDNSOverHTTPS *doh = create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(ctx);
        ip = [doh lookupWithNSString:serverName withNetI2pUtilDNSOverHTTPS_Type:JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED)];
      }
      if (ip != nil) {
        address = JavaNetInetAddress_getByNameWithNSString_(ip);
      }
      else {
        IOSObjectArray *addrs = JavaNetInetAddress_getAllByNameWithNSString_(serverName);
        if (addrs == nil || addrs->size_ == 0) @throw create_JavaNetUnknownHostException_init();
        address = nil;
        for (jint i = 0; i < addrs->size_; i++) {
          if ([IOSObjectArray_Get(addrs, i) isKindOfClass:[JavaNetInet6Address class]]) {
            address = IOSObjectArray_Get(addrs, i);
            break;
          }
          if (address == nil) address = IOSObjectArray_Get(addrs, 0);
        }
      }
    }
    else {
      if (useDNSOverHTTPS) {
        NetI2pUtilDNSOverHTTPS *doh = create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(ctx);
        NSString *ip = [doh lookupWithNSString:serverName withNetI2pUtilDNSOverHTTPS_Type:JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY)];
        if (ip != nil) serverName = ip;
      }
      address = JavaNetInetAddress_getByNameWithNSString_(serverName);
    }
    NSString *who = [((JavaNetInetAddress *) nil_chk(address)) getHostAddress];
    NSString *why = [((id<JavaUtilMap>) nil_chk(NetI2pRouterTimeNtpClient_kisses)) getWithId:who];
    if (why != nil) {
      if (log != nil) [log warnWithNSString:JreStrcat("$$$$$$", @"Not querying, previous KoD from NTP server ", serverName, @" (", who, @") ", why)];
      return nil;
    }
    IOSByteArray *buf = [create_NetI2pRouterTimeNtpMessage_init() toByteArray];
    JavaNetDatagramPacket *packet = create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(buf, ((IOSByteArray *) nil_chk(buf))->size_, address, NetI2pRouterTimeNtpClient_NTP_PORT);
    IOSByteArray *txtime = [IOSByteArray arrayWithLength:8];
    socket = create_JavaNetDatagramSocket_init();
    NetI2pRouterTimeNtpMessage_encodeTimestampWithByteArray_withInt_withDouble_([packet getData], NetI2pRouterTimeNtpClient_OFF_TXTIME, (JavaLangSystem_currentTimeMillis() / 1000.0) + NetI2pRouterTimeNtpClient_SECONDS_1900_TO_EPOCH);
    [socket sendWithJavaNetDatagramPacket:packet];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([packet getData], NetI2pRouterTimeNtpClient_OFF_TXTIME, txtime, 0, 8);
    if (log != nil && [log shouldDebug]) [log debugWithNSString:JreStrcat("$$$$$$", @"Sent to ", serverName, @" (", who, @")\n", NetI2pUtilHexDump_dumpWithByteArray_(buf))];
    packet = create_JavaNetDatagramPacket_initWithByteArray_withInt_(buf, buf->size_);
    [socket setSoTimeoutWithInt:timeout];
    [socket receiveWithJavaNetDatagramPacket:packet];
    jdouble destinationTimestamp = (JavaLangSystem_currentTimeMillis() / 1000.0) + NetI2pRouterTimeNtpClient_SECONDS_1900_TO_EPOCH;
    if ([packet getLength] < NetI2pRouterTimeNtpClient_MIN_PKT_LEN) {
      if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$I", @"Short packet length ", [packet getLength])];
      return nil;
    }
    NetI2pRouterTimeNtpMessage *msg = create_NetI2pRouterTimeNtpMessage_initWithByteArray_([packet getData]);
    NSString *from = [((JavaNetInetAddress *) nil_chk([packet getAddress])) getHostAddress];
    jint port = [packet getPort];
    if (log != nil && [log shouldDebug]) [log debugWithNSString:JreStrcat("$$$IC@C$", @"Received from: ", from, @" port ", port, 0x000a, msg, 0x000a, NetI2pUtilHexDump_dumpWithByteArray_([packet getData]))];
    if (port != NetI2pRouterTimeNtpClient_NTP_PORT || ![((NSString *) nil_chk(who)) isEqual:from]) {
      if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$$$I$@", @"Sent to ", who, @" port ", NetI2pRouterTimeNtpClient_NTP_PORT, @" but received from ", [packet getSocketAddress])];
      return nil;
    }
    if (msg->stratum_ > 15) {
      if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$$$S", @"NTP server ", serverName, @" bad stratum ", msg->stratum_)];
      return nil;
    }
    if (!NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(txtime, 0, [packet getData], NetI2pRouterTimeNtpClient_OFF_ORIGTIME, 8)) {
      if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$$$$", @"Origin time mismatch sent:\n", NetI2pUtilHexDump_dumpWithByteArray_(txtime), @"rcvd:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_([packet getData], NetI2pRouterTimeNtpClient_OFF_ORIGTIME, 8))];
      return nil;
    }
    if (msg->leapIndicator_ == 3 || msg->version__ < 3 || msg->mode_ != 4 || msg->transmitTimestamp_ <= 0 || JavaLangMath_absWithDouble_(msg->rootDelay_) > 1.0 || JavaLangMath_absWithDouble_(msg->rootDispersion_) > 1.0) {
      if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$@", @"Failed sanity checks:\n", msg)];
      return nil;
    }
    if (msg->stratum_ == 0) {
      why = [msg referenceIdentifierToString];
      [NetI2pRouterTimeNtpClient_kisses putWithId:who withId:why];
      if (log != nil) [log logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$$$", @"KoD from NTP server ", serverName, @" (", who, @") ", why)];
      return nil;
    }
    jdouble localClockOffset = ((msg->receiveTimestamp_ - msg->originateTimestamp_) + (msg->transmitTimestamp_ - destinationTimestamp)) / 2;
    IOSLongArray *rv = [IOSLongArray arrayWithLength:2];
    *IOSLongArray_GetRef(rv, 0) = JreFpToLong((JavaLangSystem_currentTimeMillis() + localClockOffset * 1000));
    *IOSLongArray_GetRef(rv, 1) = msg->stratum_;
    if (log != nil && [log shouldInfo]) {
      jdouble roundTripDelay = (destinationTimestamp - msg->originateTimestamp_) - (msg->receiveTimestamp_ - msg->transmitTimestamp_);
      [log infoWithNSString:JreStrcat("$$$D$D$", @"host: ", [((JavaNetInetAddress *) nil_chk([packet getAddress])) getHostAddress], @" rtt: ", roundTripDelay, @" offset: ", localClockOffset, @" seconds")];
    }
    return rv;
  }
  @catch (JavaIoIOException *ioe) {
    if (log != nil && [log shouldWarn]) [log warnWithNSString:JreStrcat("$$", @"NTP failure from ", serverName) withJavaLangThrowable:ioe];
    return nil;
  }
  @finally {
    if (socket != nil) [socket close];
  }
}

void NetI2pRouterTimeNtpClient_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterTimeNtpClient_initialize();
  jboolean ipv6 = false;
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-6"]) {
    ipv6 = true;
    if (args->size_ == 1) args = [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
    else args = JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(args, 1, args->size_);
  }
  if (((IOSObjectArray *) nil_chk(args))->size_ <= 0) {
    args = [IOSObjectArray arrayWithObjects:(id[]){ @"pool.ntp.org" } count:1 type:NSString_class_()];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Querying ", JavaUtilArrays_toStringWithNSObjectArray_(args))];
  NetI2pUtilLog *log = create_NetI2pUtilLog_initWithIOSClass_(NetI2pRouterTimeNtpClient_class_());
  @try {
    IOSLongArray *rv = NetI2pRouterTimeNtpClient_currentTimeAndStratumWithNSStringArray_withInt_withBoolean_withNetI2pUtilLog_(args, NetI2pRouterTimeNtpClient_DEFAULT_TIMEOUT, ipv6, log);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$J$J$", @"Current time: ", create_JavaUtilDate_initWithLong_(IOSLongArray_Get(nil_chk(rv), 0)), @" (stratum ", IOSLongArray_Get(rv, 1), @") offset ", (IOSLongArray_Get(rv, 0) - JavaLangSystem_currentTimeMillis()), @"ms")];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Failed: ", [iae getMessage])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTimeNtpClient)
