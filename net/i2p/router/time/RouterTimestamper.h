//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/time/RouterTimestamper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTimeRouterTimestamper")
#ifdef RESTRICT_NetI2pRouterTimeRouterTimestamper
#define INCLUDE_ALL_NetI2pRouterTimeRouterTimestamper 0
#else
#define INCLUDE_ALL_NetI2pRouterTimeRouterTimestamper 1
#endif
#undef RESTRICT_NetI2pRouterTimeRouterTimestamper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTimeRouterTimestamper_) && (INCLUDE_ALL_NetI2pRouterTimeRouterTimestamper || defined(INCLUDE_NetI2pRouterTimeRouterTimestamper))
#define NetI2pRouterTimeRouterTimestamper_

#define RESTRICT_NetI2pTimeTimestamper 1
#define INCLUDE_NetI2pTimeTimestamper 1
#include "net/i2p/time/Timestamper.h"

@class NetI2pI2PAppContext;
@protocol NetI2pTimeTimestamper_UpdateListener;

@interface NetI2pRouterTimeRouterTimestamper : NetI2pTimeTimestamper
@property (readonly, copy, class) NSString *PROP_QUERY_FREQUENCY NS_SWIFT_NAME(PROP_QUERY_FREQUENCY);
@property (readonly, copy, class) NSString *PROP_SERVER_LIST NS_SWIFT_NAME(PROP_SERVER_LIST);
@property (readonly, copy, class) NSString *PROP_DISABLED NS_SWIFT_NAME(PROP_DISABLED);
@property (readonly, copy, class) NSString *PROP_CONCURRING_SERVERS NS_SWIFT_NAME(PROP_CONCURRING_SERVERS);
@property (readonly, copy, class) NSString *PROP_IP_COUNTRY NS_SWIFT_NAME(PROP_IP_COUNTRY);

+ (NSString *)PROP_QUERY_FREQUENCY;

+ (NSString *)PROP_SERVER_LIST;

+ (NSString *)PROP_DISABLED;

+ (NSString *)PROP_CONCURRING_SERVERS;

+ (NSString *)PROP_IP_COUNTRY;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
             withNetI2pTimeTimestamper_UpdateListener:(id<NetI2pTimeTimestamper_UpdateListener>)lsnr;

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
             withNetI2pTimeTimestamper_UpdateListener:(id<NetI2pTimeTimestamper_UpdateListener>)lsnr
                                          withBoolean:(jboolean)daemon;

- (void)addListenerWithNetI2pTimeTimestamper_UpdateListener:(id<NetI2pTimeTimestamper_UpdateListener>)lsnr;

- (jboolean)getIsDisabled;

- (id<NetI2pTimeTimestamper_UpdateListener>)getListenerWithInt:(jint)index;

- (jint)getListenerCount;

- (jint)getQueryFrequencyMs;

- (NSString *)getServerWithInt:(jint)index;

- (jint)getServerCount;

- (void)removeListenerWithNetI2pTimeTimestamper_UpdateListener:(id<NetI2pTimeTimestamper_UpdateListener>)lsnr;

- (void)run;

- (void)startTimestamper;

- (void)timestampNow;

- (void)waitForInitialization;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTimeRouterTimestamper)

inline NSString *NetI2pRouterTimeRouterTimestamper_get_PROP_QUERY_FREQUENCY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTimeRouterTimestamper_PROP_QUERY_FREQUENCY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeRouterTimestamper, PROP_QUERY_FREQUENCY, NSString *)

inline NSString *NetI2pRouterTimeRouterTimestamper_get_PROP_SERVER_LIST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTimeRouterTimestamper_PROP_SERVER_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeRouterTimestamper, PROP_SERVER_LIST, NSString *)

inline NSString *NetI2pRouterTimeRouterTimestamper_get_PROP_DISABLED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTimeRouterTimestamper_PROP_DISABLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeRouterTimestamper, PROP_DISABLED, NSString *)

inline NSString *NetI2pRouterTimeRouterTimestamper_get_PROP_CONCURRING_SERVERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTimeRouterTimestamper_PROP_CONCURRING_SERVERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeRouterTimestamper, PROP_CONCURRING_SERVERS, NSString *)

inline NSString *NetI2pRouterTimeRouterTimestamper_get_PROP_IP_COUNTRY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterTimeRouterTimestamper_PROP_IP_COUNTRY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeRouterTimestamper, PROP_IP_COUNTRY, NSString *)

FOUNDATION_EXPORT void NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_(NetI2pRouterTimeRouterTimestamper *self, NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *new_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *create_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT void NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_(NetI2pRouterTimeRouterTimestamper *self, NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr);

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *new_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_(NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *create_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_(NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr);

FOUNDATION_EXPORT void NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_withBoolean_(NetI2pRouterTimeRouterTimestamper *self, NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr, jboolean daemon);

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *new_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_withBoolean_(NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr, jboolean daemon) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTimeRouterTimestamper *create_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_withBoolean_(NetI2pI2PAppContext *ctx, id<NetI2pTimeTimestamper_UpdateListener> lsnr, jboolean daemon);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTimeRouterTimestamper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTimeRouterTimestamper")
