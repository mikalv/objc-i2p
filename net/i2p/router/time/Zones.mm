//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/time/Zones.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/time/Zones.h"
#include "net/i2p/router/transport/GeoIP.h"

@interface NetI2pRouterTimeZones () {
 @public
  NetI2pI2PAppContext *_context_;
  id<JavaUtilMap> _countryToZone_;
  id<JavaUtilMap> _continentToZone_;
}

- (void)readContinentFile;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTimeZones, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTimeZones, _countryToZone_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTimeZones, _continentToZone_, id<JavaUtilMap>)

inline NSString *NetI2pRouterTimeZones_get_CONTINENT_FILE_DEFAULT(void);
static NSString *NetI2pRouterTimeZones_CONTINENT_FILE_DEFAULT = @"continents.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeZones, CONTINENT_FILE_DEFAULT, NSString *)

inline IOSObjectArray *NetI2pRouterTimeZones_get_ZONES(void);
static IOSObjectArray *NetI2pRouterTimeZones_ZONES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTimeZones, ZONES, IOSObjectArray *)

__attribute__((unused)) static void NetI2pRouterTimeZones_readContinentFile(NetI2pRouterTimeZones *self);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTimeZones)

@implementation NetI2pRouterTimeZones

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pRouterTimeZones_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (NSString *)getZoneWithNSString:(NSString *)country {
  return [((id<JavaUtilMap>) nil_chk(_countryToZone_)) getWithId:[((NSString *) nil_chk(country)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
}

- (void)readContinentFile {
  NetI2pRouterTimeZones_readContinentFile(self);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_countryToZone_);
  RELEASE_(_continentToZone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getZoneWithNSString:);
  methods[2].selector = @selector(readContinentFile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_countryToZone_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_continentToZone_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "CONTINENT_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "ZONES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "getZone", "LNSString;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &NetI2pRouterTimeZones_CONTINENT_FILE_DEFAULT, &NetI2pRouterTimeZones_ZONES };
  static const J2ObjcClassInfo _NetI2pRouterTimeZones = { "Zones", "net.i2p.router.time", ptrTable, methods, fields, 7, 0x0, 3, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTimeZones;
}

+ (void)initialize {
  if (self == [NetI2pRouterTimeZones class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTimeZones_ZONES, [IOSObjectArray newArrayWithObjects:(id[]){ @"AF", @"africa", @"AS", @"asia", @"EU", @"europe", @"NA", @"north-america", @"OC", @"oceania", @"SA", @"south-america" } count:12 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterTimeZones)
  }
}

@end

void NetI2pRouterTimeZones_initWithNetI2pI2PAppContext_(NetI2pRouterTimeZones *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssignAndConsume(&self->_countryToZone_, new_JavaUtilHashMap_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_continentToZone_, new_JavaUtilHashMap_initWithInt_(8));
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(NetI2pRouterTimeZones_ZONES))->size_; i += 2) {
    [self->_continentToZone_ putWithId:IOSObjectArray_Get(NetI2pRouterTimeZones_ZONES, i) withId:IOSObjectArray_Get(NetI2pRouterTimeZones_ZONES, i + 1)];
  }
  NetI2pRouterTimeZones_readContinentFile(self);
}

NetI2pRouterTimeZones *new_NetI2pRouterTimeZones_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTimeZones, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pRouterTimeZones *create_NetI2pRouterTimeZones_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTimeZones, initWithNetI2pI2PAppContext_, ctx)
}

void NetI2pRouterTimeZones_readContinentFile(NetI2pRouterTimeZones *self) {
  NSString *geoDir = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterTransportGeoIP_PROP_GEOIP_DIR withNSString:NetI2pRouterTransportGeoIP_GEOIP_DIR_DEFAULT];
  JavaIoFile *geoFile = create_JavaIoFile_initWithNSString_(geoDir);
  if (![geoFile isAbsolute]) geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getBaseDir], geoDir);
  geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(geoFile, NetI2pRouterTimeZones_CONTINENT_FILE_DEFAULT);
  if (![geoFile exists]) {
    return;
  }
  JavaIoBufferedReader *br = nil;
  @try {
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(geoFile), @"UTF-8"));
    NSString *line = nil;
    while ((line = [br readLine]) != nil) {
      @try {
        if ([((NSString *) nil_chk(line)) charAtWithInt:0] == '#') continue;
        IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_(line, @",");
        NSString *ucContinent = [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(s), 1))) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_trim];
        NSString *zone = [((id<JavaUtilMap>) nil_chk(self->_continentToZone_)) getWithId:ucContinent];
        if (zone == nil) continue;
        NSString *lcCountry = [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_trim];
        [((id<JavaUtilMap>) nil_chk(self->_countryToZone_)) putWithId:lcCountry withId:zone];
      }
      @catch (JavaLangIndexOutOfBoundsException *ioobe) {
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Error reading the continent file ", [geoFile getAbsolutePath])];
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTimeZones)
