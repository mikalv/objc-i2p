//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/TunnelPoolSettings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTunnelPoolSettings () {
 @public
  NetI2pDataHash *_destination_;
  NSString *_destinationNickname_;
  jint _quantity_;
  jint _backupQuantity_;
  jint _length_;
  jint _lengthVariance_;
  jint _lengthOverride_;
  jboolean _isInbound_;
  jboolean _isExploratory_;
  jboolean _allowZeroHop_;
  jint _IPRestriction_;
  JavaUtilProperties *_unknownOptions_;
  NetI2pDataHash *_randomKey_;
  jint _priority_;
  id<JavaUtilSet> _aliases_;
  NetI2pDataHash *_aliasOf_;
}

+ (NetI2pDataHash *)generateRandomKey;

+ (jboolean)getBooleanWithNSString:(NSString *)str
                       withBoolean:(jboolean)defaultValue;

+ (jint)getIntWithNSString:(NSString *)str
                   withInt:(jint)defaultValue;

+ (jlong)getLongWithNSString:(NSString *)str
                    withLong:(jlong)defaultValue;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _destination_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _destinationNickname_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _unknownOptions_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _randomKey_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _aliases_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolSettings, _aliasOf_, NetI2pDataHash *)

inline jboolean NetI2pRouterTunnelPoolSettings_get_isSlow(void);
static jboolean NetI2pRouterTunnelPoolSettings_isSlow;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTunnelPoolSettings, isSlow, jboolean)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_IB_LENGTH(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_IB_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_IB_LENGTH, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_OB_LENGTH(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_OB_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_OB_LENGTH, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_LENGTH_VARIANCE(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_LENGTH_VARIANCE 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_LENGTH_VARIANCE, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_IB_EXPL_LENGTH(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_IB_EXPL_LENGTH, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_OB_EXPL_LENGTH(void);
static jint NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTunnelPoolSettings, DEFAULT_OB_EXPL_LENGTH, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_IB_EXPL_LENGTH_VARIANCE(void);
static jint NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH_VARIANCE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterTunnelPoolSettings, DEFAULT_IB_EXPL_LENGTH_VARIANCE, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_DEFAULT_OB_EXPL_LENGTH_VARIANCE(void);
#define NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH_VARIANCE 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, DEFAULT_OB_EXPL_LENGTH_VARIANCE, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_MIN_PRIORITY(void);
#define NetI2pRouterTunnelPoolSettings_MIN_PRIORITY -25
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, MIN_PRIORITY, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_MAX_PRIORITY(void);
#define NetI2pRouterTunnelPoolSettings_MAX_PRIORITY 25
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, MAX_PRIORITY, jint)

inline jint NetI2pRouterTunnelPoolSettings_get_EXPLORATORY_PRIORITY(void);
#define NetI2pRouterTunnelPoolSettings_EXPLORATORY_PRIORITY 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolSettings, EXPLORATORY_PRIORITY, jint)

__attribute__((unused)) static NetI2pDataHash *NetI2pRouterTunnelPoolSettings_generateRandomKey(void);

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolSettings_getBooleanWithNSString_withBoolean_(NSString *str, jboolean defaultValue);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(NSString *str, jint defaultValue);

__attribute__((unused)) static jlong NetI2pRouterTunnelPoolSettings_getLongWithNSString_withLong_(NSString *str, jlong defaultValue);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelPoolSettings__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelPoolSettings)

NSString *NetI2pRouterTunnelPoolSettings_PREFIX_INBOUND_EXPLORATORY = @"router.inboundPool.";
NSString *NetI2pRouterTunnelPoolSettings_PREFIX_OUTBOUND_EXPLORATORY = @"router.outboundPool.";
NSString *NetI2pRouterTunnelPoolSettings_PROP_NICKNAME = @"nickname";
NSString *NetI2pRouterTunnelPoolSettings_PROP_QUANTITY = @"quantity";
NSString *NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY = @"backupQuantity";
NSString *NetI2pRouterTunnelPoolSettings_PROP_DURATION = @"duration";
NSString *NetI2pRouterTunnelPoolSettings_PROP_LENGTH = @"length";
NSString *NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE = @"lengthVariance";
NSString *NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP = @"allowZeroHop";
NSString *NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION = @"IPRestriction";
NSString *NetI2pRouterTunnelPoolSettings_PROP_PRIORITY = @"priority";
NSString *NetI2pRouterTunnelPoolSettings_PROP_RANDOM_KEY = @"randomKey";

@implementation NetI2pRouterTunnelPoolSettings

+ (NSString *)PREFIX_INBOUND_EXPLORATORY {
  return NetI2pRouterTunnelPoolSettings_PREFIX_INBOUND_EXPLORATORY;
}

+ (NSString *)PREFIX_OUTBOUND_EXPLORATORY {
  return NetI2pRouterTunnelPoolSettings_PREFIX_OUTBOUND_EXPLORATORY;
}

+ (NSString *)PROP_NICKNAME {
  return NetI2pRouterTunnelPoolSettings_PROP_NICKNAME;
}

+ (NSString *)PROP_QUANTITY {
  return NetI2pRouterTunnelPoolSettings_PROP_QUANTITY;
}

+ (NSString *)PROP_BACKUP_QUANTITY {
  return NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY;
}

+ (NSString *)PROP_DURATION {
  return NetI2pRouterTunnelPoolSettings_PROP_DURATION;
}

+ (NSString *)PROP_LENGTH {
  return NetI2pRouterTunnelPoolSettings_PROP_LENGTH;
}

+ (NSString *)PROP_LENGTH_VARIANCE {
  return NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE;
}

+ (NSString *)PROP_ALLOW_ZERO_HOP {
  return NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP;
}

+ (NSString *)PROP_IP_RESTRICTION {
  return NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION;
}

+ (NSString *)PROP_PRIORITY {
  return NetI2pRouterTunnelPoolSettings_PROP_PRIORITY;
}

+ (NSString *)PROP_RANDOM_KEY {
  return NetI2pRouterTunnelPoolSettings_PROP_RANDOM_KEY;
}

+ (jint)DEFAULT_QUANTITY {
  return NetI2pRouterTunnelPoolSettings_DEFAULT_QUANTITY;
}

+ (jint)DEFAULT_BACKUP_QUANTITY {
  return NetI2pRouterTunnelPoolSettings_DEFAULT_BACKUP_QUANTITY;
}

+ (jint)DEFAULT_DURATION {
  return NetI2pRouterTunnelPoolSettings_DEFAULT_DURATION;
}

+ (jboolean)DEFAULT_ALLOW_ZERO_HOP {
  return NetI2pRouterTunnelPoolSettings_DEFAULT_ALLOW_ZERO_HOP;
}

+ (jint)DEFAULT_IP_RESTRICTION {
  return NetI2pRouterTunnelPoolSettings_DEFAULT_IP_RESTRICTION;
}

- (instancetype)initWithBoolean:(jboolean)isInbound {
  NetI2pRouterTunnelPoolSettings_initWithBoolean_(self, isInbound);
  return self;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)dest
                           withBoolean:(jboolean)isInbound {
  NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(self, dest, isInbound);
  return self;
}

- (jint)getQuantity {
  return _quantity_;
}

- (void)setQuantityWithInt:(jint)quantity {
  _quantity_ = quantity;
}

- (jint)getBackupQuantity {
  return _backupQuantity_;
}

- (void)setBackupQuantityWithInt:(jint)quantity {
  _backupQuantity_ = quantity;
}

- (jint)getTotalQuantity {
  return _quantity_ + _backupQuantity_;
}

- (jint)getLength {
  return _length_;
}

- (void)setLengthWithInt:(jint)length {
  _length_ = length;
}

- (jboolean)getAllowZeroHop {
  return _allowZeroHop_ || _length_ + JavaLangMath_minWithInt_withInt_(_lengthVariance_, 0) <= 0 || _lengthOverride_ == 0;
}

- (void)setAllowZeroHopWithBoolean:(jboolean)ok {
  if (!_isExploratory_) _allowZeroHop_ = ok;
}

- (jint)getLengthVariance {
  return _lengthVariance_;
}

- (void)setLengthVarianceWithInt:(jint)variance {
  _lengthVariance_ = variance;
}

- (jint)getLengthOverride {
  return _lengthOverride_;
}

- (void)setLengthOverrideWithInt:(jint)length {
  _lengthOverride_ = length;
}

- (jboolean)isInbound {
  return _isInbound_;
}

- (jboolean)isExploratory {
  return _isExploratory_;
}

- (NetI2pDataHash *)getDestination {
  return _destination_;
}

- (id<JavaUtilSet>)getAliases {
  return _aliases_;
}

- (NetI2pDataHash *)getAliasOf {
  return _aliasOf_;
}

- (void)setAliasOfWithNetI2pDataHash:(NetI2pDataHash *)h {
  JreStrongAssign(&_aliasOf_, h);
}

- (NetI2pDataHash *)getRandomKey {
  return _randomKey_;
}

- (NSString *)getDestinationNickname {
  return _destinationNickname_;
}

- (void)setDestinationNicknameWithNSString:(NSString *)name {
  JreStrongAssign(&_destinationNickname_, name);
}

- (jint)getIPRestriction {
  jint r = _IPRestriction_;
  if (r > 4) r = 4;
  else if (r < 0) r = 0;
  return r;
}

- (void)setIPRestrictionWithInt:(jint)b {
  _IPRestriction_ = b;
}

- (jint)getPriority {
  return _priority_;
}

- (JavaUtilProperties *)getUnknownOptions {
  return _unknownOptions_;
}

- (void)readFromPropertiesWithNSString:(NSString *)prefix
                withJavaUtilProperties:(JavaUtilProperties *)props {
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilProperties *) nil_chk(props)) entrySet])) {
    NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    NSString *value = (NSString *) cast_chk([e getValue], [NSString class]);
    if ([((NSString *) nil_chk(name)) java_hasPrefix:prefix]) {
      if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP)]) {
        if (!_isExploratory_) _allowZeroHop_ = NetI2pRouterTunnelPoolSettings_getBooleanWithNSString_withBoolean_(value, NetI2pRouterTunnelPoolSettings_DEFAULT_ALLOW_ZERO_HOP);
      }
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY)]) _backupQuantity_ = NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, NetI2pRouterTunnelPoolSettings_DEFAULT_BACKUP_QUANTITY);
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_LENGTH)]) _length_ = NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, _isInbound_ ? (_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH : NetI2pRouterTunnelPoolSettings_DEFAULT_IB_LENGTH) : (_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH : NetI2pRouterTunnelPoolSettings_DEFAULT_OB_LENGTH));
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE)]) _lengthVariance_ = NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, _isExploratory_ ? (_isInbound_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH_VARIANCE : NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH_VARIANCE) : NetI2pRouterTunnelPoolSettings_DEFAULT_LENGTH_VARIANCE);
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_QUANTITY)]) _quantity_ = NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, NetI2pRouterTunnelPoolSettings_DEFAULT_QUANTITY);
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_NICKNAME)]) JreStrongAssign(&_destinationNickname_, value);
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION)]) _IPRestriction_ = NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, NetI2pRouterTunnelPoolSettings_DEFAULT_IP_RESTRICTION);
      else if ((!_isInbound_) && [name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_PRIORITY)]) {
        jint def = _isExploratory_ ? NetI2pRouterTunnelPoolSettings_EXPLORATORY_PRIORITY : 0;
        jint max = _isExploratory_ ? NetI2pRouterTunnelPoolSettings_EXPLORATORY_PRIORITY : NetI2pRouterTunnelPoolSettings_MAX_PRIORITY;
        _priority_ = JavaLangMath_minWithInt_withInt_(max, JavaLangMath_maxWithInt_withInt_(NetI2pRouterTunnelPoolSettings_MIN_PRIORITY, NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(value, def)));
      }
      else if ([name java_equalsIgnoreCase:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_RANDOM_KEY)]) {
        IOSByteArray *rk = NetI2pDataBase64_decodeWithNSString_(value);
        if (rk != nil && rk->size_ == NetI2pDataHash_HASH_LENGTH) JreStrongAssignAndConsume(&_randomKey_, new_NetI2pDataHash_initWithByteArray_(rk));
      }
      else [((JavaUtilProperties *) nil_chk(_unknownOptions_)) setPropertyWithNSString:[name java_substring:[((NSString *) nil_chk(prefix)) java_length]] withNSString:value];
    }
  }
}

- (void)writeToPropertiesWithNSString:(NSString *)prefix
               withJavaUtilProperties:(JavaUtilProperties *)props {
  if (props == nil) return;
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP) withNSString:JavaLangBoolean_toStringWithBoolean_(_allowZeroHop_)];
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY) withNSString:JavaLangInteger_toStringWithInt_(_backupQuantity_)];
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_LENGTH) withNSString:JavaLangInteger_toStringWithInt_(_length_)];
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE) withNSString:JavaLangInteger_toStringWithInt_(_lengthVariance_)];
  if (_destinationNickname_ != nil) [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_NICKNAME) withNSString:_destinationNickname_];
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_QUANTITY) withNSString:JavaLangInteger_toStringWithInt_(_quantity_)];
  [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION) withNSString:JavaLangInteger_toStringWithInt_(_IPRestriction_)];
  if (!_isInbound_) [props setPropertyWithNSString:JreStrcat("$$", prefix, NetI2pRouterTunnelPoolSettings_PROP_PRIORITY) withNSString:JavaLangInteger_toStringWithInt_(_priority_)];
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilProperties *) nil_chk(_unknownOptions_)) entrySet])) {
    NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    NSString *val = (NSString *) cast_chk([e getValue], [NSString class]);
    [props setPropertyWithNSString:JreStrcat("$$", prefix, name) withNSString:val];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  JavaUtilProperties *p = create_JavaUtilProperties_init();
  [self writeToPropertiesWithNSString:@"" withJavaUtilProperties:p];
  [buf appendWithNSString:@"Tunnel pool settings:\n"];
  [buf appendWithNSString:@"====================================\n"];
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([p entrySet])) {
    NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    NSString *val = (NSString *) cast_chk([e getValue], [NSString class]);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:name])) appendWithNSString:@" = ["])) appendWithNSString:val])) appendWithNSString:@"]\n"];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"is inbound? "])) appendWithBoolean:_isInbound_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"is exploratory? "])) appendWithBoolean:_isExploratory_])) appendWithNSString:@"\n"];
  [buf appendWithNSString:@"====================================\n"];
  return [buf description];
}

+ (NetI2pDataHash *)generateRandomKey {
  return NetI2pRouterTunnelPoolSettings_generateRandomKey();
}

+ (jboolean)getBooleanWithNSString:(NSString *)str
                       withBoolean:(jboolean)defaultValue {
  return NetI2pRouterTunnelPoolSettings_getBooleanWithNSString_withBoolean_(str, defaultValue);
}

+ (jint)getIntWithNSString:(NSString *)str
                   withInt:(jint)defaultValue {
  return NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(str, defaultValue);
}

+ (jlong)getLongWithNSString:(NSString *)str
                    withLong:(jlong)defaultValue {
  return NetI2pRouterTunnelPoolSettings_getLongWithNSString_withLong_(str, defaultValue);
}

- (void)dealloc {
  RELEASE_(_destination_);
  RELEASE_(_destinationNickname_);
  RELEASE_(_unknownOptions_);
  RELEASE_(_randomKey_);
  RELEASE_(_aliases_);
  RELEASE_(_aliasOf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, 7, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1a, 22, 23, -1, -1, -1, -1 },
    { NULL, "J", 0x1a, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(initWithNetI2pDataHash:withBoolean:);
  methods[2].selector = @selector(getQuantity);
  methods[3].selector = @selector(setQuantityWithInt:);
  methods[4].selector = @selector(getBackupQuantity);
  methods[5].selector = @selector(setBackupQuantityWithInt:);
  methods[6].selector = @selector(getTotalQuantity);
  methods[7].selector = @selector(getLength);
  methods[8].selector = @selector(setLengthWithInt:);
  methods[9].selector = @selector(getAllowZeroHop);
  methods[10].selector = @selector(setAllowZeroHopWithBoolean:);
  methods[11].selector = @selector(getLengthVariance);
  methods[12].selector = @selector(setLengthVarianceWithInt:);
  methods[13].selector = @selector(getLengthOverride);
  methods[14].selector = @selector(setLengthOverrideWithInt:);
  methods[15].selector = @selector(isInbound);
  methods[16].selector = @selector(isExploratory);
  methods[17].selector = @selector(getDestination);
  methods[18].selector = @selector(getAliases);
  methods[19].selector = @selector(getAliasOf);
  methods[20].selector = @selector(setAliasOfWithNetI2pDataHash:);
  methods[21].selector = @selector(getRandomKey);
  methods[22].selector = @selector(getDestinationNickname);
  methods[23].selector = @selector(setDestinationNicknameWithNSString:);
  methods[24].selector = @selector(getIPRestriction);
  methods[25].selector = @selector(setIPRestrictionWithInt:);
  methods[26].selector = @selector(getPriority);
  methods[27].selector = @selector(getUnknownOptions);
  methods[28].selector = @selector(readFromPropertiesWithNSString:withJavaUtilProperties:);
  methods[29].selector = @selector(writeToPropertiesWithNSString:withJavaUtilProperties:);
  methods[30].selector = @selector(description);
  methods[31].selector = @selector(generateRandomKey);
  methods[32].selector = @selector(getBooleanWithNSString:withBoolean:);
  methods[33].selector = @selector(getIntWithNSString:withInt:);
  methods[34].selector = @selector(getLongWithNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_destination_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_destinationNickname_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_quantity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_backupQuantity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lengthVariance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lengthOverride_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isInbound_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isExploratory_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_allowZeroHop_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_IPRestriction_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_unknownOptions_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_randomKey_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_aliases_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "_aliasOf_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PREFIX_INBOUND_EXPLORATORY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "PREFIX_OUTBOUND_EXPLORATORY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "PROP_NICKNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "PROP_QUANTITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "PROP_BACKUP_QUANTITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "PROP_DURATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "PROP_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "PROP_LENGTH_VARIANCE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "PROP_ALLOW_ZERO_HOP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "PROP_IP_RESTRICTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "PROP_PRIORITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "PROP_RANDOM_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "DEFAULT_QUANTITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_QUANTITY, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BACKUP_QUANTITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_BACKUP_QUANTITY, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_DURATION", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_DURATION, 0x19, -1, -1, -1, -1 },
    { "isSlow", "Z", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "DEFAULT_IB_LENGTH", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_IB_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_OB_LENGTH", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_OB_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_LENGTH_VARIANCE", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_LENGTH_VARIANCE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_IB_EXPL_LENGTH", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_OB_EXPL_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "DEFAULT_IB_EXPL_LENGTH_VARIANCE", "I", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "DEFAULT_OB_EXPL_LENGTH_VARIANCE", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH_VARIANCE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_ALLOW_ZERO_HOP", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolSettings_DEFAULT_ALLOW_ZERO_HOP, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_IP_RESTRICTION", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_DEFAULT_IP_RESTRICTION, 0x19, -1, -1, -1, -1 },
    { "MIN_PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_MIN_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "MAX_PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_MAX_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "EXPLORATORY_PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolSettings_EXPLORATORY_PRIORITY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LNetI2pDataHash;Z", "setQuantity", "I", "setBackupQuantity", "setLength", "setAllowZeroHop", (void *)&NetI2pRouterTunnelPoolSettings__Annotations$0, "setLengthVariance", "setLengthOverride", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "setAliasOf", "LNetI2pDataHash;", "setDestinationNickname", "LNSString;", "setIPRestriction", "readFromProperties", "LNSString;LJavaUtilProperties;", "writeToProperties", "toString", "getBoolean", "LNSString;Z", "getInt", "LNSString;I", "getLong", "LNSString;J", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", &NetI2pRouterTunnelPoolSettings_PREFIX_INBOUND_EXPLORATORY, &NetI2pRouterTunnelPoolSettings_PREFIX_OUTBOUND_EXPLORATORY, &NetI2pRouterTunnelPoolSettings_PROP_NICKNAME, &NetI2pRouterTunnelPoolSettings_PROP_QUANTITY, &NetI2pRouterTunnelPoolSettings_PROP_BACKUP_QUANTITY, &NetI2pRouterTunnelPoolSettings_PROP_DURATION, &NetI2pRouterTunnelPoolSettings_PROP_LENGTH, &NetI2pRouterTunnelPoolSettings_PROP_LENGTH_VARIANCE, &NetI2pRouterTunnelPoolSettings_PROP_ALLOW_ZERO_HOP, &NetI2pRouterTunnelPoolSettings_PROP_IP_RESTRICTION, &NetI2pRouterTunnelPoolSettings_PROP_PRIORITY, &NetI2pRouterTunnelPoolSettings_PROP_RANDOM_KEY, &NetI2pRouterTunnelPoolSettings_isSlow, &NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH, &NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH_VARIANCE };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolSettings = { "TunnelPoolSettings", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 35, 44, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolSettings;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelPoolSettings class]) {
    NetI2pRouterTunnelPoolSettings_isSlow = NetI2pUtilSystemVersion_isSlow();
    NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH = NetI2pRouterTunnelPoolSettings_isSlow ? 2 : 3;
    NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH_VARIANCE = NetI2pRouterTunnelPoolSettings_isSlow ? 0 : 1;
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelPoolSettings)
  }
}

@end

void NetI2pRouterTunnelPoolSettings_initWithBoolean_(NetI2pRouterTunnelPoolSettings *self, jboolean isInbound) {
  NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(self, nil, isInbound);
}

NetI2pRouterTunnelPoolSettings *new_NetI2pRouterTunnelPoolSettings_initWithBoolean_(jboolean isInbound) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolSettings, initWithBoolean_, isInbound)
}

NetI2pRouterTunnelPoolSettings *create_NetI2pRouterTunnelPoolSettings_initWithBoolean_(jboolean isInbound) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolSettings, initWithBoolean_, isInbound)
}

void NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pRouterTunnelPoolSettings *self, NetI2pDataHash *dest, jboolean isInbound) {
  NSObject_init(self);
  JreStrongAssign(&self->_destination_, dest);
  self->_isExploratory_ = (dest == nil);
  self->_isInbound_ = isInbound;
  self->_quantity_ = NetI2pRouterTunnelPoolSettings_DEFAULT_QUANTITY;
  self->_backupQuantity_ = NetI2pRouterTunnelPoolSettings_DEFAULT_BACKUP_QUANTITY;
  if (isInbound) {
    self->_length_ = self->_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH : NetI2pRouterTunnelPoolSettings_DEFAULT_IB_LENGTH;
    self->_lengthVariance_ = self->_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_IB_EXPL_LENGTH_VARIANCE : NetI2pRouterTunnelPoolSettings_DEFAULT_LENGTH_VARIANCE;
  }
  else {
    self->_length_ = self->_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH : NetI2pRouterTunnelPoolSettings_DEFAULT_OB_LENGTH;
    self->_lengthVariance_ = self->_isExploratory_ ? NetI2pRouterTunnelPoolSettings_DEFAULT_OB_EXPL_LENGTH_VARIANCE : NetI2pRouterTunnelPoolSettings_DEFAULT_LENGTH_VARIANCE;
  }
  self->_lengthOverride_ = -1;
  if (self->_isExploratory_) self->_allowZeroHop_ = true;
  else self->_allowZeroHop_ = NetI2pRouterTunnelPoolSettings_DEFAULT_ALLOW_ZERO_HOP;
  self->_IPRestriction_ = NetI2pRouterTunnelPoolSettings_DEFAULT_IP_RESTRICTION;
  JreStrongAssignAndConsume(&self->_unknownOptions_, new_JavaUtilProperties_init());
  JreStrongAssign(&self->_randomKey_, NetI2pRouterTunnelPoolSettings_generateRandomKey());
  if (self->_isExploratory_ && !self->_isInbound_) self->_priority_ = NetI2pRouterTunnelPoolSettings_EXPLORATORY_PRIORITY;
  if (!self->_isExploratory_) JreStrongAssignAndConsume(&self->_aliases_, new_NetI2pUtilConcurrentHashSet_initWithInt_(4));
  else JreStrongAssign(&self->_aliases_, nil);
}

NetI2pRouterTunnelPoolSettings *new_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *dest, jboolean isInbound) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolSettings, initWithNetI2pDataHash_withBoolean_, dest, isInbound)
}

NetI2pRouterTunnelPoolSettings *create_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *dest, jboolean isInbound) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolSettings, initWithNetI2pDataHash_withBoolean_, dest, isInbound)
}

NetI2pDataHash *NetI2pRouterTunnelPoolSettings_generateRandomKey() {
  NetI2pRouterTunnelPoolSettings_initialize();
  IOSByteArray *hash_ = [IOSByteArray arrayWithLength:NetI2pDataHash_HASH_LENGTH];
  [((NetI2pUtilRandomSource *) nil_chk(NetI2pUtilRandomSource_getInstance())) nextBytesWithByteArray:hash_];
  return create_NetI2pDataHash_initWithByteArray_(hash_);
}

jboolean NetI2pRouterTunnelPoolSettings_getBooleanWithNSString_withBoolean_(NSString *str, jboolean defaultValue) {
  NetI2pRouterTunnelPoolSettings_initialize();
  if (str == nil) return defaultValue;
  jboolean v = JavaLangBoolean_parseBooleanWithNSString_(str) || [@"YES" isEqual:[str java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]];
  return v;
}

jint NetI2pRouterTunnelPoolSettings_getIntWithNSString_withInt_(NSString *str, jint defaultValue) {
  NetI2pRouterTunnelPoolSettings_initialize();
  return (jint) NetI2pRouterTunnelPoolSettings_getLongWithNSString_withLong_(str, defaultValue);
}

jlong NetI2pRouterTunnelPoolSettings_getLongWithNSString_withLong_(NSString *str, jlong defaultValue) {
  NetI2pRouterTunnelPoolSettings_initialize();
  if (str == nil) return defaultValue;
  @try {
    jlong val = JavaLangLong_parseLongWithNSString_(str);
    return val;
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

IOSObjectArray *NetI2pRouterTunnelPoolSettings__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolSettings)
