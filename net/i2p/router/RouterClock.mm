//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/RouterClock.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/RouterClock.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/time/RouterTimestamper.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/time/BuildTime.h"
#include "net/i2p/time/Timestamper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterRouterClock () {
 @public
  volatile_jlong _desiredOffset_;
  volatile_jlong _lastSlewed_;
  jlong _lastChanged_;
  jint _lastStratum_;
  NetI2pRouterTimeRouterTimestamper *_timeStamper_;
  id<JavaUtilSet> _shiftListeners_;
  volatile_jlong _lastShiftNanos_;
}

- (void)setOffsetWithLong:(jlong)offsetMs
                  withInt:(jint)stratum;

- (void)setOffsetWithLong:(jlong)offsetMs
              withBoolean:(jboolean)force
                  withInt:(jint)stratum;

- (void)notifyMassiveWithLong:(jlong)shift;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterRouterClock, _timeStamper_, NetI2pRouterTimeRouterTimestamper *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterClock, _shiftListeners_, id<JavaUtilSet>)

inline jlong NetI2pRouterRouterClock_get_MAX_SLEW(void);
#define NetI2pRouterRouterClock_MAX_SLEW 25LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterClock, MAX_SLEW, jlong)

inline jint NetI2pRouterRouterClock_get_WORST_STRATUM(void);
#define NetI2pRouterRouterClock_WORST_STRATUM 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterClock, WORST_STRATUM, jint)

inline jlong NetI2pRouterRouterClock_get_MIN_DELAY_FOR_WORSE_STRATUM(void);
#define NetI2pRouterRouterClock_MIN_DELAY_FOR_WORSE_STRATUM 2700000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterClock, MIN_DELAY_FOR_WORSE_STRATUM, jlong)

inline jlong NetI2pRouterRouterClock_get_MASSIVE_SHIFT_FORWARD(void);
#define NetI2pRouterRouterClock_MASSIVE_SHIFT_FORWARD 150000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterClock, MASSIVE_SHIFT_FORWARD, jlong)

inline jlong NetI2pRouterRouterClock_get_MASSIVE_SHIFT_BACKWARD(void);
#define NetI2pRouterRouterClock_MASSIVE_SHIFT_BACKWARD 61000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterRouterClock, MASSIVE_SHIFT_BACKWARD, jlong)

inline NSString *NetI2pRouterRouterClock_get_PROP_DISABLE_ADJUSTMENT(void);
static NSString *NetI2pRouterRouterClock_PROP_DISABLE_ADJUSTMENT = @"time.disableOffset";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouterClock, PROP_DISABLE_ADJUSTMENT, NSString *)

__attribute__((unused)) static void NetI2pRouterRouterClock_setOffsetWithLong_withInt_(NetI2pRouterRouterClock *self, jlong offsetMs, jint stratum);

__attribute__((unused)) static void NetI2pRouterRouterClock_setOffsetWithLong_withBoolean_withInt_(NetI2pRouterRouterClock *self, jlong offsetMs, jboolean force, jint stratum);

__attribute__((unused)) static void NetI2pRouterRouterClock_notifyMassiveWithLong_(NetI2pRouterRouterClock *self, jlong shift);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouterClock__Annotations$0(void);

@interface NetI2pRouterRouterClock_ClockShiftListener : NSObject

@end

@implementation NetI2pRouterRouterClock

+ (jint)DEFAULT_STRATUM {
  return NetI2pRouterRouterClock_DEFAULT_STRATUM;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterRouterClock_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)start {
  [((NetI2pRouterTimeRouterTimestamper *) nil_chk(_timeStamper_)) startTimestamper];
}

- (NetI2pTimeTimestamper *)getTimestamper {
  return _timeStamper_;
}

- (void)setOffsetWithLong:(jlong)offsetMs
              withBoolean:(jboolean)force {
  NetI2pRouterRouterClock_setOffsetWithLong_withBoolean_withInt_(self, offsetMs, force, NetI2pRouterRouterClock_DEFAULT_STRATUM);
}

- (void)setOffsetWithLong:(jlong)offsetMs
                  withInt:(jint)stratum {
  NetI2pRouterRouterClock_setOffsetWithLong_withInt_(self, offsetMs, stratum);
}

- (void)setOffsetWithLong:(jlong)offsetMs
              withBoolean:(jboolean)force
                  withInt:(jint)stratum {
  NetI2pRouterRouterClock_setOffsetWithLong_withBoolean_withInt_(self, offsetMs, force, stratum);
}

- (void)setNowWithLong:(jlong)realTime
               withInt:(jint)stratum {
  if (realTime < NetI2pTimeBuildTime_getEarliestTime() || realTime > NetI2pTimeBuildTime_getLatestTime()) {
    NetI2pUtilLog *log = [self getLog];
    NSString *msg = JreStrcat("$@", @"Invalid time received: ", create_JavaUtilDate_initWithLong_(realTime));
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:msg withJavaLangThrowable:create_JavaLangException_init()];
    else [log logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:msg];
    return;
  }
  jlong diff = realTime - JavaLangSystem_currentTimeMillis();
  NetI2pRouterRouterClock_setOffsetWithLong_withInt_(self, diff, stratum);
}

- (jlong)now {
  jlong systemNow = JavaLangSystem_currentTimeMillis();
  jlong offset = JreLoadVolatileLong(&_offset_);
  jlong sinceLastSlewed = systemNow - JreLoadVolatileLong(&_lastSlewed_);
  if (sinceLastSlewed >= NetI2pRouterRouterClock_MASSIVE_SHIFT_FORWARD || sinceLastSlewed <= 0 - NetI2pRouterRouterClock_MASSIVE_SHIFT_BACKWARD) {
    JreAssignVolatileLong(&_lastSlewed_, systemNow);
    NetI2pRouterRouterClock_notifyMassiveWithLong_(self, sinceLastSlewed);
  }
  else if (sinceLastSlewed >= NetI2pRouterRouterClock_MAX_SLEW) {
    jlong desiredOffset = JreLoadVolatileLong(&_desiredOffset_);
    if (desiredOffset > offset) {
      offset += JavaLangMath_minWithLong_withLong_(10, sinceLastSlewed / NetI2pRouterRouterClock_MAX_SLEW);
      JreAssignVolatileLong(&_offset_, offset);
    }
    else if (desiredOffset < offset) {
      JreAssignVolatileLong(&_offset_, --offset);
    }
    JreAssignVolatileLong(&_lastSlewed_, systemNow);
  }
  return offset + systemNow;
}

- (void)notifyMassiveWithLong:(jlong)shift {
  NetI2pRouterRouterClock_notifyMassiveWithLong_(self, shift);
}

- (void)addShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:(id<NetI2pRouterRouterClock_ClockShiftListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_shiftListeners_)) addWithId:lsnr];
}

- (void)removeShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:(id<NetI2pRouterRouterClock_ClockShiftListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_shiftListeners_)) removeWithId:lsnr];
}

- (jlong)getDeltaOffset {
  return JreLoadVolatileLong(&_desiredOffset_) - JreLoadVolatileLong(&_offset_);
}

- (void)dealloc {
  RELEASE_(_timeStamper_);
  RELEASE_(_shiftListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pTimeTimestamper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, 11, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(getTimestamper);
  methods[3].selector = @selector(setOffsetWithLong:withBoolean:);
  methods[4].selector = @selector(setOffsetWithLong:withInt:);
  methods[5].selector = @selector(setOffsetWithLong:withBoolean:withInt:);
  methods[6].selector = @selector(setNowWithLong:withInt:);
  methods[7].selector = @selector(now);
  methods[8].selector = @selector(notifyMassiveWithLong:);
  methods[9].selector = @selector(addShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:);
  methods[10].selector = @selector(removeShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:);
  methods[11].selector = @selector(getDeltaOffset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SLEW", "J", .constantValue.asLong = NetI2pRouterRouterClock_MAX_SLEW, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_STRATUM", "I", .constantValue.asInt = NetI2pRouterRouterClock_DEFAULT_STRATUM, 0x19, -1, -1, -1, -1 },
    { "WORST_STRATUM", "I", .constantValue.asInt = NetI2pRouterRouterClock_WORST_STRATUM, 0x1a, -1, -1, -1, -1 },
    { "MIN_DELAY_FOR_WORSE_STRATUM", "J", .constantValue.asLong = NetI2pRouterRouterClock_MIN_DELAY_FOR_WORSE_STRATUM, 0x1a, -1, -1, -1, -1 },
    { "_desiredOffset_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastSlewed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastChanged_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastStratum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_timeStamper_", "LNetI2pRouterTimeRouterTimestamper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MASSIVE_SHIFT_FORWARD", "J", .constantValue.asLong = NetI2pRouterRouterClock_MASSIVE_SHIFT_FORWARD, 0x1a, -1, -1, -1, -1 },
    { "MASSIVE_SHIFT_BACKWARD", "J", .constantValue.asLong = NetI2pRouterRouterClock_MASSIVE_SHIFT_BACKWARD, 0x1a, -1, -1, -1, -1 },
    { "PROP_DISABLE_ADJUSTMENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "_shiftListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_lastShiftNanos_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setOffset", "JZ", "JI", "JZI", "setNow", "notifyMassive", "J", "addShiftListener", "LNetI2pRouterRouterClock_ClockShiftListener;", "removeShiftListener", (void *)&NetI2pRouterRouterClock__Annotations$0, &NetI2pRouterRouterClock_PROP_DISABLE_ADJUSTMENT, "Ljava/util/Set<Lnet/i2p/router/RouterClock$ClockShiftListener;>;" };
  static const J2ObjcClassInfo _NetI2pRouterRouterClock = { "RouterClock", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 12, 14, -1, 9, -1, -1, -1 };
  return &_NetI2pRouterRouterClock;
}

@end

void NetI2pRouterRouterClock_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterClock *self, NetI2pRouterRouterContext *context) {
  NetI2pUtilClock_initWithNetI2pI2PAppContext_(self, context);
  self->_lastStratum_ = NetI2pRouterRouterClock_WORST_STRATUM;
  JreAssignVolatileLong(&self->_lastSlewed_, JavaLangSystem_currentTimeMillis());
  JreStrongAssignAndConsume(&self->_shiftListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  JreAssignVolatileLong(&self->_lastShiftNanos_, JavaLangSystem_nanoTime());
  JreStrongAssignAndConsume(&self->_timeStamper_, new_NetI2pRouterTimeRouterTimestamper_initWithNetI2pI2PAppContext_withNetI2pTimeTimestamper_UpdateListener_(context, self));
}

NetI2pRouterRouterClock *new_NetI2pRouterRouterClock_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouterClock, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterRouterClock *create_NetI2pRouterRouterClock_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouterClock, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterRouterClock_setOffsetWithLong_withInt_(NetI2pRouterRouterClock *self, jlong offsetMs, jint stratum) {
  NetI2pRouterRouterClock_setOffsetWithLong_withBoolean_withInt_(self, offsetMs, false, stratum);
}

void NetI2pRouterRouterClock_setOffsetWithLong_withBoolean_withInt_(NetI2pRouterRouterClock *self, jlong offsetMs, jboolean force, jint stratum) {
  @synchronized(self) {
    jlong delta = offsetMs - JreLoadVolatileLong(&self->_offset_);
    if (!force) {
      if (!self->_isSystemClockBad_ && (offsetMs > NetI2pUtilClock_MAX_OFFSET || offsetMs < 0 - NetI2pUtilClock_MAX_OFFSET)) {
        NetI2pUtilLog *log = [self getLog];
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$J$", @"Maximum offset shift exceeded [", offsetMs, @"], NOT HONORING IT")];
        return;
      }
      if (self->_alreadyChanged_ && (JavaLangSystem_currentTimeMillis() - self->_startedOn_ > 10 * 60 * 1000)) {
        if ((delta > NetI2pUtilClock_MAX_LIVE_OFFSET) || (delta < 0 - NetI2pUtilClock_MAX_LIVE_OFFSET)) {
          NetI2pUtilLog *log = [self getLog];
          if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$J$J", @"The clock has already been updated, ignoring request to change it by ", delta, @" to ", offsetMs) withJavaLangThrowable:create_JavaLangException_init()];
          return;
        }
      }
      if (delta == 0) {
        [((NetI2pUtilLog *) nil_chk([self getLog])) debugWithNSString:@"Not changing offset, delta=0"];
        self->_alreadyChanged_ = true;
        return;
      }
      if (self->_alreadyChanged_ && stratum > self->_lastStratum_ && JavaLangSystem_currentTimeMillis() - self->_lastChanged_ < NetI2pRouterRouterClock_MIN_DELAY_FOR_WORSE_STRATUM) {
        NetI2pUtilLog *log = [self getLog];
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$I$I$", @"Ignoring update from a stratum ", stratum, @" clock, we recently had an update from a stratum ", self->_lastStratum_, @" clock")];
        return;
      }
      if ([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getBooleanPropertyDefaultTrueWithNSString:@"router.clockOffsetSanityCheck"] && self->_alreadyChanged_) {
        NetI2pRouterCommSystemFacade *csf = [((NetI2pRouterRouterContext *) cast_chk(self->_context_, [NetI2pRouterRouterContext class])) commSystem];
        jlong currentPeerClockSkew = (csf != nil) ? [((NetI2pRouterCommSystemFacade *) nil_chk(csf)) getFramedAveragePeerClockSkewWithInt:33] : 0;
        jlong predictedPeerClockSkew = currentPeerClockSkew + delta;
        NetI2pUtilLog *log = [self getLog];
        if ((JavaLangMath_absWithLong_(predictedPeerClockSkew) > (JavaLangMath_absWithLong_(currentPeerClockSkew) + 5 * 1000)) || (JavaLangMath_absWithLong_(predictedPeerClockSkew) > 20 * 1000)) {
          if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:JreStrcat("$J$J$J$J$I", @"Ignoring clock offset ", offsetMs, @"ms (current ", JreLoadVolatileLong(&self->_offset_), @"ms) since it would increase peer clock skew from ", currentPeerClockSkew, @"ms to ", predictedPeerClockSkew, @"ms. Stratrum: ", stratum)];
          return;
        }
        else {
          if ([((NetI2pUtilLog *) nil_chk(log)) shouldInfo]) [log infoWithNSString:JreStrcat("$J$J$J$J$I", @"Approving clock offset ", offsetMs, @"ms (current ", JreLoadVolatileLong(&self->_offset_), @"ms) since it would decrease peer clock skew from ", currentPeerClockSkew, @"ms to ", predictedPeerClockSkew, @"ms. Stratrum: ", stratum)];
        }
      }
    }
    if (self->_alreadyChanged_ && (stratum >= self->_lastStratum_ || JavaLangSystem_currentTimeMillis() - self->_startedOn_ > 60 * 1000)) {
      if (delta > 15 * 1000) [((NetI2pUtilLog *) nil_chk([self getLog])) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$J$J$I", @"Warning - Updating target clock offset to ", offsetMs, @"ms from ", JreLoadVolatileLong(&self->_offset_), @"ms, Stratum ", stratum)];
      else if ([((NetI2pUtilLog *) nil_chk([self getLog])) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk([self getLog])) infoWithNSString:JreStrcat("$J$J$I", @"Updating target clock offset to ", offsetMs, @"ms from ", JreLoadVolatileLong(&self->_offset_), @"ms, Stratum ", stratum)];
      if (!self->_statCreated_) {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) createRequiredRateStatWithNSString:@"clock.skew" withNSString:@"Clock step adjustment (ms)" withNSString:@"Clock" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 3 * 60 * 60 * 1000, 24 * 60 * 60 * 1000 } count:3]];
        self->_statCreated_ = true;
      }
      [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"clock.skew" withLong:delta];
      if ([self->_context_ getBooleanPropertyWithNSString:NetI2pRouterRouterClock_PROP_DISABLE_ADJUSTMENT]) {
        [((NetI2pUtilLog *) nil_chk([self getLog])) errorWithNSString:@"Clock adjustment disabled" withJavaLangThrowable:create_JavaLangException_init()];
      }
      else {
        JreAssignVolatileLong(&self->_desiredOffset_, offsetMs);
      }
    }
    else {
      NetI2pUtilLog *log = [self getLog];
      if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$J$I", @"Initializing clock offset to ", offsetMs, @"ms, Stratum ", stratum)];
      self->_alreadyChanged_ = true;
      if ([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterRouterClock_PROP_DISABLE_ADJUSTMENT]) {
        [log errorWithNSString:@"Clock adjustment disabled" withJavaLangThrowable:create_JavaLangException_init()];
      }
      else {
        JreAssignVolatileLong(&self->_offset_, offsetMs);
        JreAssignVolatileLong(&self->_desiredOffset_, offsetMs);
        [self fireOffsetChangedWithLong:delta];
      }
    }
    self->_lastChanged_ = JavaLangSystem_currentTimeMillis();
    self->_lastStratum_ = stratum;
  }
}

void NetI2pRouterRouterClock_notifyMassiveWithLong_(NetI2pRouterRouterClock *self, jlong shift) {
  @synchronized(self) {
    jlong nowNanos = JavaLangSystem_nanoTime();
    if (nowNanos < JreLoadVolatileLong(&self->_lastShiftNanos_) + (NetI2pRouterRouterClock_MASSIVE_SHIFT_FORWARD * 1000 * 1000LL)) return;
    JreAssignVolatileLong(&self->_lastShiftNanos_, nowNanos);
    self->_startedOn_ = JavaLangSystem_currentTimeMillis();
    self->_alreadyChanged_ = false;
    [((NetI2pTimeTimestamper *) nil_chk([self getTimestamper])) timestampNow];
    if (shift > 0) [((NetI2pUtilLog *) nil_chk([self getLog])) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"Large clock shift forward by ", NetI2pDataDataHelper_formatDurationWithLong_(shift))];
    else [((NetI2pUtilLog *) nil_chk([self getLog])) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"Large clock shift backward by ", NetI2pDataDataHelper_formatDurationWithLong_(0 - shift))];
    for (id<NetI2pRouterRouterClock_ClockShiftListener> __strong lsnr in nil_chk(self->_shiftListeners_)) {
      [((id<NetI2pRouterRouterClock_ClockShiftListener>) nil_chk(lsnr)) clockShiftWithLong:shift];
    }
  }
}

IOSObjectArray *NetI2pRouterRouterClock__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterRouterClock)

@implementation NetI2pRouterRouterClock_ClockShiftListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(clockShiftWithLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clockShift", "J", "LNetI2pRouterRouterClock;" };
  static const J2ObjcClassInfo _NetI2pRouterRouterClock_ClockShiftListener = { "ClockShiftListener", "net.i2p.router", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterRouterClock_ClockShiftListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterRouterClock_ClockShiftListener)
