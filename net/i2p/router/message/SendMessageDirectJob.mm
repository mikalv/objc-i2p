//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/SendMessageDirectJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Date.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/SendMessageDirectJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterMessageSendMessageDirectJob () {
 @public
  NetI2pUtilLog *_log_;
  id<NetI2pDataI2npI2NPMessage> _message_;
  NetI2pDataHash *_targetHash_;
  NetI2pDataRouterRouterInfo *_router_;
  jlong _expiration_;
  jint _priority_;
  id<NetI2pRouterJob> _onSend_;
  id<NetI2pRouterReplyJob> _onSuccess_;
  id<NetI2pRouterJob> _onFail_;
  id<NetI2pRouterMessageSelector> _selector_;
  jboolean _alreadySearched_;
  jboolean _sent_;
  jlong _searchOn_;
}

- (void)send;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _message_, id<NetI2pDataI2npI2NPMessage>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _targetHash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _router_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _onSend_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _onSuccess_, id<NetI2pRouterReplyJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _onFail_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageSendMessageDirectJob, _selector_, id<NetI2pRouterMessageSelector>)

__attribute__((unused)) static void NetI2pRouterMessageSendMessageDirectJob_send(NetI2pRouterMessageSendMessageDirectJob *self);

@implementation NetI2pRouterMessageSendMessageDirectJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                               withNetI2pDataHash:(NetI2pDataHash *)toPeer
                                          withInt:(jint)timeoutMs
                                          withInt:(jint)priority {
  NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_(self, ctx, message, toPeer, timeoutMs, priority);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                               withNetI2pDataHash:(NetI2pDataHash *)toPeer
                         withNetI2pRouterReplyJob:(id<NetI2pRouterReplyJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFail
                  withNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)selector
                                          withInt:(jint)timeoutMs
                                          withInt:(jint)priority {
  NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(self, ctx, message, toPeer, onSuccess, onFail, selector, timeoutMs, priority);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                               withNetI2pDataHash:(NetI2pDataHash *)toPeer
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onSend
                         withNetI2pRouterReplyJob:(id<NetI2pRouterReplyJob>)onSuccess
                              withNetI2pRouterJob:(id<NetI2pRouterJob>)onFail
                  withNetI2pRouterMessageSelector:(id<NetI2pRouterMessageSelector>)selector
                                          withInt:(jint)timeoutMs
                                          withInt:(jint)priority {
  NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(self, ctx, message, toPeer, onSend, onSuccess, onFail, selector, timeoutMs, priority);
  return self;
}

- (NSString *)getName {
  return @"Send Message Direct";
}

- (void)runJob {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
  if (_expiration_ < now) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$$", @"Timed out sending message ", _message_, @" directly (expiration = ", create_JavaUtilDate_initWithLong_(_expiration_), @") to ", [((NetI2pDataHash *) nil_chk(_targetHash_)) toBase64])];
    if (_onFail_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:_onFail_];
    return;
  }
  if (_router_ != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Router specified, sending"];
    NetI2pRouterMessageSendMessageDirectJob_send(self);
  }
  else {
    JreStrongAssign(&_router_, [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:_targetHash_]);
    if (_router_ != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Router not specified but lookup found it"];
      NetI2pRouterMessageSendMessageDirectJob_send(self);
    }
    else {
      if (!_alreadySearched_) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Router not specified, so we're looking for it..."];
        [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoWithNetI2pDataHash:_targetHash_ withNetI2pRouterJob:self withNetI2pRouterJob:self withLong:_expiration_ - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]];
        _searchOn_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
        _alreadySearched_ = true;
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$J$@", @"Unable to find the router to send to: ", _targetHash_, @" after searching for ", ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _searchOn_), @"ms, message: ", _message_)];
        if (_onFail_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:_onFail_];
      }
    }
  }
}

- (void)send {
  NetI2pRouterMessageSendMessageDirectJob_send(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_message_);
  RELEASE_(_targetHash_);
  RELEASE_(_router_);
  RELEASE_(_onSend_);
  RELEASE_(_onSuccess_);
  RELEASE_(_onFail_);
  RELEASE_(_selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withInt:withInt:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pRouterReplyJob:withNetI2pRouterJob:withNetI2pRouterMessageSelector:withInt:withInt:);
  methods[2].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterReplyJob:withNetI2pRouterJob:withNetI2pRouterMessageSelector:withInt:withInt:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(runJob);
  methods[5].selector = @selector(send);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_targetHash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_router_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onSend_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onSuccess_", "LNetI2pRouterReplyJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_onFail_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_selector_", "LNetI2pRouterMessageSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alreadySearched_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_searchOn_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;II", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pRouterReplyJob;LNetI2pRouterJob;LNetI2pRouterMessageSelector;II", "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterReplyJob;LNetI2pRouterJob;LNetI2pRouterMessageSelector;II" };
  static const J2ObjcClassInfo _NetI2pRouterMessageSendMessageDirectJob = { "SendMessageDirectJob", "net.i2p.router.message", ptrTable, methods, fields, 7, 0x1, 6, 13, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageSendMessageDirectJob;
}

@end

void NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_(NetI2pRouterMessageSendMessageDirectJob *self, NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, jint timeoutMs, jint priority) {
  NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(self, ctx, message, toPeer, nil, nil, nil, nil, timeoutMs, priority);
}

NetI2pRouterMessageSendMessageDirectJob *new_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, jint timeoutMs, jint priority) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_, ctx, message, toPeer, timeoutMs, priority)
}

NetI2pRouterMessageSendMessageDirectJob *create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, jint timeoutMs, jint priority) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_, ctx, message, toPeer, timeoutMs, priority)
}

void NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterMessageSendMessageDirectJob *self, NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(self, ctx, message, toPeer, nil, onSuccess, onFail, selector, timeoutMs, priority);
}

NetI2pRouterMessageSendMessageDirectJob *new_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_, ctx, message, toPeer, onSuccess, onFail, selector, timeoutMs, priority)
}

NetI2pRouterMessageSendMessageDirectJob *create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_, ctx, message, toPeer, onSuccess, onFail, selector, timeoutMs, priority)
}

void NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterMessageSendMessageDirectJob *self, NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterJob> onSend, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) logManager])) getLogWithIOSClass:NetI2pRouterMessageSendMessageDirectJob_class_()]);
  JreStrongAssign(&self->_message_, message);
  JreStrongAssign(&self->_targetHash_, toPeer);
  if (timeoutMs < 10 * 1000) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$", @"Very little time given [", timeoutMs, @"], resetting to 5s") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"stingy caller!")];
    self->_expiration_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now] + 10 * 1000;
  }
  else {
    self->_expiration_ = timeoutMs + [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now];
  }
  self->_priority_ = priority;
  JreStrongAssign(&self->_onSend_, onSend);
  JreStrongAssign(&self->_onSuccess_, onSuccess);
  JreStrongAssign(&self->_onFail_, onFail);
  JreStrongAssign(&self->_selector_, selector);
  if (message == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Attempt to send a null message");
  if (self->_targetHash_ == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Attempt to send a message to a null peer");
}

NetI2pRouterMessageSendMessageDirectJob *new_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterJob> onSend, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_, ctx, message, toPeer, onSend, onSuccess, onFail, selector, timeoutMs, priority)
}

NetI2pRouterMessageSendMessageDirectJob *create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toPeer, id<NetI2pRouterJob> onSend, id<NetI2pRouterReplyJob> onSuccess, id<NetI2pRouterJob> onFail, id<NetI2pRouterMessageSelector> selector, jint timeoutMs, jint priority) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageSendMessageDirectJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pRouterJob_withNetI2pRouterReplyJob_withNetI2pRouterJob_withNetI2pRouterMessageSelector_withInt_withInt_, ctx, message, toPeer, onSend, onSuccess, onFail, selector, timeoutMs, priority)
}

void NetI2pRouterMessageSendMessageDirectJob_send(NetI2pRouterMessageSendMessageDirectJob *self) {
  if (self->_sent_) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Not resending!" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"blah")];
    return;
  }
  self->_sent_ = true;
  NetI2pDataHash *to = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(self->_router_)) getIdentity])) getHash];
  NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash];
  if ([((NetI2pDataHash *) nil_chk(us)) isEqual:to]) {
    if (self->_selector_ != nil) {
      NetI2pRouterOutNetMessage *outM = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_([self getContext], self->_message_, self->_expiration_, self->_priority_, self->_router_);
      [outM setOnFailedReplyJobWithNetI2pRouterJob:self->_onFail_];
      [outM setOnFailedSendJobWithNetI2pRouterJob:self->_onFail_];
      [outM setOnReplyJobWithNetI2pRouterReplyJob:self->_onSuccess_];
      [outM setOnSendJobWithNetI2pRouterJob:self->_onSend_];
      [outM setReplySelectorWithNetI2pRouterMessageSelector:self->_selector_];
      [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterOutNetMessage:outM];
    }
    if (self->_onSend_ != nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self->_onSend_];
    [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) inNetMessagePool])) addWithNetI2pDataI2npI2NPMessage:self->_message_ withNetI2pDataRouterRouterIdentity:[((NetI2pDataRouterRouterInfo *) nil_chk(self->_router_)) getIdentity] withNetI2pDataHash:nil];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$", @"Adding ", [[((id<NetI2pDataI2npI2NPMessage>) nil_chk(self->_message_)) java_getClass] getName], @" to inbound message pool as it was destined for ourselves")];
  }
  else {
    NetI2pRouterOutNetMessage *msg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_([self getContext], self->_message_, self->_expiration_, self->_priority_, self->_router_);
    [msg setOnFailedReplyJobWithNetI2pRouterJob:self->_onFail_];
    [msg setOnFailedSendJobWithNetI2pRouterJob:self->_onFail_];
    [msg setOnReplyJobWithNetI2pRouterReplyJob:self->_onSuccess_];
    [msg setOnSendJobWithNetI2pRouterJob:self->_onSend_];
    [msg setReplySelectorWithNetI2pRouterMessageSelector:self->_selector_];
    [((NetI2pRouterOutNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) outNetMessagePool])) addWithNetI2pRouterOutNetMessage:msg];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$$", @"Adding ", [[((id<NetI2pDataI2npI2NPMessage>) nil_chk(self->_message_)) java_getClass] getName], @" to outbound message pool targeting ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(self->_router_)) getIdentity])) getHash])) toBase64])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageSendMessageDirectJob)
