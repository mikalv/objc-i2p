//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/GarlicMessageParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/ElGamalAESEngine.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/i2np/GarlicClove.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/router/message/CloveSet.h"
#include "net/i2p/router/message/GarlicMessageParser.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterMessageGarlicMessageParser () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
}

- (NetI2pRouterMessageCloveSet *)readCloveSetWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageParser, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageParser, _context_, NetI2pI2PAppContext *)

inline jint NetI2pRouterMessageGarlicMessageParser_get_MAX_CLOVES(void);
#define NetI2pRouterMessageGarlicMessageParser_MAX_CLOVES 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMessageGarlicMessageParser, MAX_CLOVES, jint)

__attribute__((unused)) static NetI2pRouterMessageCloveSet *NetI2pRouterMessageGarlicMessageParser_readCloveSetWithByteArray_(NetI2pRouterMessageGarlicMessageParser *self, IOSByteArray *data);

@implementation NetI2pRouterMessageGarlicMessageParser

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterMessageGarlicMessageParser_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pRouterMessageCloveSet *)getGarlicClovesWithNetI2pDataI2npGarlicMessage:(NetI2pDataI2npGarlicMessage *)message
                                                       withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)encryptionKey
                                              withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm {
  IOSByteArray *encData = [((NetI2pDataI2npGarlicMessage *) nil_chk(message)) getData];
  IOSByteArray *decrData;
  @try {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Decrypting with private key ", encryptionKey)];
    decrData = [((NetI2pCryptoElGamalAESEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) elGamalAESEngine])) decryptWithByteArray:encData withNetI2pDataPrivateKey:encryptionKey withNetI2pCryptoSessionKeyManager:skm];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Error decrypting" withJavaLangThrowable:dfe];
    return nil;
  }
  if (decrData == nil) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Decryption of garlic message failed" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Decrypt fail")];
    return nil;
  }
  else {
    @try {
      return NetI2pRouterMessageGarlicMessageParser_readCloveSetWithByteArray_(self, decrData);
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Unable to read cloveSet" withJavaLangThrowable:dfe];
      return nil;
    }
  }
}

- (NetI2pRouterMessageCloveSet *)readCloveSetWithByteArray:(IOSByteArray *)data {
  return NetI2pRouterMessageGarlicMessageParser_readCloveSetWithByteArray_(self, data);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageCloveSet;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageCloveSet;", 0x2, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getGarlicClovesWithNetI2pDataI2npGarlicMessage:withNetI2pDataPrivateKey:withNetI2pCryptoSessionKeyManager:);
  methods[2].selector = @selector(readCloveSetWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_CLOVES", "I", .constantValue.asInt = NetI2pRouterMessageGarlicMessageParser_MAX_CLOVES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "getGarlicCloves", "LNetI2pDataI2npGarlicMessage;LNetI2pDataPrivateKey;LNetI2pCryptoSessionKeyManager;", "readCloveSet", "[B", "LNetI2pDataDataFormatException;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageGarlicMessageParser = { "GarlicMessageParser", "net.i2p.router.message", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageGarlicMessageParser;
}

@end

void NetI2pRouterMessageGarlicMessageParser_initWithNetI2pI2PAppContext_(NetI2pRouterMessageGarlicMessageParser *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageParser_class_()]);
}

NetI2pRouterMessageGarlicMessageParser *new_NetI2pRouterMessageGarlicMessageParser_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageGarlicMessageParser, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterMessageGarlicMessageParser *create_NetI2pRouterMessageGarlicMessageParser_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageGarlicMessageParser, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterMessageCloveSet *NetI2pRouterMessageGarlicMessageParser_readCloveSetWithByteArray_(NetI2pRouterMessageGarlicMessageParser *self, IOSByteArray *data) {
  jint offset = 0;
  jint numCloves = IOSByteArray_Get(nil_chk(data), offset) & (jint) 0xff;
  offset++;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I", @"# cloves to read: ", numCloves)];
  if (numCloves <= 0 || numCloves > NetI2pRouterMessageGarlicMessageParser_MAX_CLOVES) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"bad clove count ", numCloves));
  IOSObjectArray *cloves = [IOSObjectArray arrayWithLength:numCloves type:NetI2pDataI2npGarlicClove_class_()];
  for (jint i = 0; i < numCloves; i++) {
    NetI2pDataI2npGarlicClove *clove = create_NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(self->_context_);
    offset += [clove readBytesWithByteArray:data withInt:offset];
    IOSObjectArray_Set(cloves, i, clove);
  }
  NetI2pDataCertificate *cert = NetI2pDataCertificate_createWithByteArray_withInt_(data, offset);
  offset += [((NetI2pDataCertificate *) nil_chk(cert)) size];
  jlong msgId = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, offset, 4);
  offset += 4;
  jlong expiration = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, offset, 8);
  NetI2pRouterMessageCloveSet *set = create_NetI2pRouterMessageCloveSet_initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_(cloves, cert, msgId, expiration);
  return set;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageGarlicMessageParser)
