//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/GarlicMessageReceiver.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/Date.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/GarlicClove.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/LeaseSetKeys.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageValidator.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/CloveSet.h"
#include "net/i2p/router/message/GarlicMessageParser.h"
#include "net/i2p/router/message/GarlicMessageReceiver.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterMessageGarlicMessageReceiver () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> _receiver_;
  NetI2pDataHash *_clientDestination_;
}

- (void)handleCloveWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove;

- (jboolean)isValidWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageReceiver, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageReceiver, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageReceiver, _receiver_, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver>)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageGarlicMessageReceiver, _clientDestination_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterMessageGarlicMessageReceiver_handleCloveWithNetI2pDataI2npGarlicClove_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pDataI2npGarlicClove *clove);

__attribute__((unused)) static jboolean NetI2pRouterMessageGarlicMessageReceiver_isValidWithNetI2pDataI2npGarlicClove_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pDataI2npGarlicClove *clove);

@interface NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver : NSObject

@end

@implementation NetI2pRouterMessageGarlicMessageReceiver

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver:(id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver>)receiver {
  NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_(self, context, receiver);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver:(id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver>)receiver
                               withNetI2pDataHash:(NetI2pDataHash *)clientDestination {
  NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_(self, context, receiver, clientDestination);
  return self;
}

- (void)receiveWithNetI2pDataI2npGarlicMessage:(NetI2pDataI2npGarlicMessage *)message {
  NetI2pDataPrivateKey *decryptionKey;
  NetI2pCryptoSessionKeyManager *skm;
  if (_clientDestination_ != nil) {
    NetI2pRouterLeaseSetKeys *keys = [((NetI2pRouterKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) keyManager])) getKeysWithNetI2pDataHash:_clientDestination_];
    skm = [((NetI2pRouterClientManagerFacade *) nil_chk([_context_ clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:_clientDestination_];
    if (keys != nil && skm != nil) {
      decryptionKey = [keys getDecryptionKey];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Not trying to decrypt a garlic routed message to a disconnected client"];
      return;
    }
  }
  else {
    decryptionKey = [((NetI2pRouterKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) keyManager])) getPrivateKey];
    skm = [_context_ sessionKeyManager];
  }
  NetI2pRouterMessageCloveSet *set = [((NetI2pRouterMessageGarlicMessageParser *) nil_chk([_context_ garlicMessageParser])) getGarlicClovesWithNetI2pDataI2npGarlicMessage:message withNetI2pDataPrivateKey:decryptionKey withNetI2pCryptoSessionKeyManager:skm];
  if (set != nil) {
    for (jint i = 0; i < [set getCloveCount]; i++) {
      NetI2pDataI2npGarlicClove *clove = [set getCloveWithInt:i];
      NetI2pRouterMessageGarlicMessageReceiver_handleCloveWithNetI2pDataI2npGarlicClove_(self, clove);
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$JC", @"CloveMessageParser failed to decrypt the message [", [((NetI2pDataI2npGarlicMessage *) nil_chk(message)) getUniqueId], ']') withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Decrypt garlic failed")];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"crypto.garlic.decryptFail" withLong:1];
    [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) messageProcessingErrorWithLong:[((NetI2pDataI2npGarlicMessage *) nil_chk(message)) getUniqueId] withNSString:[[message java_getClass] getName] withNSString:@"Garlic could not be decrypted"];
  }
}

- (void)handleCloveWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove {
  NetI2pRouterMessageGarlicMessageReceiver_handleCloveWithNetI2pDataI2npGarlicClove_(self, clove);
}

- (jboolean)isValidWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove {
  return NetI2pRouterMessageGarlicMessageReceiver_isValidWithNetI2pDataI2npGarlicClove_(self, clove);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_receiver_);
  RELEASE_(_clientDestination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver:withNetI2pDataHash:);
  methods[2].selector = @selector(receiveWithNetI2pDataI2npGarlicMessage:);
  methods[3].selector = @selector(handleCloveWithNetI2pDataI2npGarlicClove:);
  methods[4].selector = @selector(isValidWithNetI2pDataI2npGarlicClove:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_receiver_", "LNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_clientDestination_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver;", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver;LNetI2pDataHash;", "receive", "LNetI2pDataI2npGarlicMessage;", "handleClove", "LNetI2pDataI2npGarlicClove;", "isValid", "LNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageGarlicMessageReceiver = { "GarlicMessageReceiver", "net.i2p.router.message", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, 7, -1, -1, -1 };
  return &_NetI2pRouterMessageGarlicMessageReceiver;
}

@end

void NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver) {
  NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_(self, context, receiver, nil);
}

NetI2pRouterMessageGarlicMessageReceiver *new_NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageGarlicMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_, context, receiver)
}

NetI2pRouterMessageGarlicMessageReceiver *create_NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageGarlicMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_, context, receiver)
}

void NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver, NetI2pDataHash *clientDestination) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageReceiver_class_()]);
  JreStrongAssign(&self->_clientDestination_, clientDestination);
  JreStrongAssign(&self->_receiver_, receiver);
}

NetI2pRouterMessageGarlicMessageReceiver *new_NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_(NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver, NetI2pDataHash *clientDestination) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageGarlicMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_, context, receiver, clientDestination)
}

NetI2pRouterMessageGarlicMessageReceiver *create_NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_(NetI2pRouterRouterContext *context, id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver> receiver, NetI2pDataHash *clientDestination) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageGarlicMessageReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_withNetI2pDataHash_, context, receiver, clientDestination)
}

void NetI2pRouterMessageGarlicMessageReceiver_handleCloveWithNetI2pDataI2npGarlicClove_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pDataI2npGarlicClove *clove) {
  if (!NetI2pRouterMessageGarlicMessageReceiver_isValidWithNetI2pDataI2npGarlicClove_(self, clove)) {
    return;
  }
  [((id<NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver>) nil_chk(self->_receiver_)) handleCloveWithNetI2pDataI2npDeliveryInstructions:[((NetI2pDataI2npGarlicClove *) nil_chk(clove)) getInstructions] withNetI2pDataI2npI2NPMessage:[clove getData]];
}

jboolean NetI2pRouterMessageGarlicMessageReceiver_isValidWithNetI2pDataI2npGarlicClove_(NetI2pRouterMessageGarlicMessageReceiver *self, NetI2pDataI2npGarlicClove *clove) {
  NSString *invalidReason = [((NetI2pRouterMessageValidator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) messageValidator])) validateMessageWithLong:[((NetI2pDataI2npGarlicClove *) nil_chk(clove)) getCloveId] withLong:[((JavaUtilDate *) nil_chk([clove getExpiration])) getTime]];
  jboolean rv = invalidReason == nil;
  if (!rv) {
    NSString *howLongAgo = NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - [((JavaUtilDate *) nil_chk([clove getExpiration])) getTime]);
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$$$", @"Clove is NOT valid: id=", [clove getCloveId], @" expiration ", howLongAgo, @" ago") withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Invalid within...")];
    else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$$$$$@", @"Clove is NOT valid: id=", [clove getCloveId], @" expiration ", howLongAgo, @" ago: ", invalidReason, @": ", clove)];
    [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) messageProcessingErrorWithLong:[clove getCloveId] withNSString:[[((id<NetI2pDataI2npI2NPMessage>) nil_chk([clove getData])) java_getClass] getSimpleName] withNSString:JreStrcat("$$$", @"Clove is not valid (expiration ", howLongAgo, @" ago)")];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageGarlicMessageReceiver)

@implementation NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handleCloveWithNetI2pDataI2npDeliveryInstructions:withNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handleClove", "LNetI2pDataI2npDeliveryInstructions;LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterMessageGarlicMessageReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver = { "CloveReceiver", "net.i2p.router.message", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterMessageGarlicMessageReceiver_CloveReceiver)
