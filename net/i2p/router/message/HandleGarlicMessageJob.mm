//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/HandleGarlicMessageJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/GarlicMessageReceiver.h"
#include "net/i2p/router/message/HandleGarlicMessageJob.h"
#include "net/i2p/router/message/SendMessageDirectJob.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterMessageHandleGarlicMessageJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataI2npGarlicMessage *_message_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageHandleGarlicMessageJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageHandleGarlicMessageJob, _message_, NetI2pDataI2npGarlicMessage *)

inline jint NetI2pRouterMessageHandleGarlicMessageJob_get_ROUTER_PRIORITY(void);
#define NetI2pRouterMessageHandleGarlicMessageJob_ROUTER_PRIORITY 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMessageHandleGarlicMessageJob, ROUTER_PRIORITY, jint)

inline jint NetI2pRouterMessageHandleGarlicMessageJob_get_TUNNEL_PRIORITY(void);
#define NetI2pRouterMessageHandleGarlicMessageJob_TUNNEL_PRIORITY 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterMessageHandleGarlicMessageJob, TUNNEL_PRIORITY, jint)

@implementation NetI2pRouterMessageHandleGarlicMessageJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                  withNetI2pDataI2npGarlicMessage:(NetI2pDataI2npGarlicMessage *)msg
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                               withNetI2pDataHash:(NetI2pDataHash *)fromHash {
  NetI2pRouterMessageHandleGarlicMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(self, context, msg, from, fromHash);
  return self;
}

- (NSString *)getName {
  return @"Handle Inbound Garlic Message";
}

- (void)runJob {
  NetI2pRouterMessageGarlicMessageReceiver *recv = create_NetI2pRouterMessageGarlicMessageReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicMessageReceiver_CloveReceiver_([self getContext], self);
  [recv receiveWithNetI2pDataI2npGarlicMessage:_message_];
}

- (void)handleCloveWithNetI2pDataI2npDeliveryInstructions:(NetI2pDataI2npDeliveryInstructions *)instructions
                            withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)data {
  {
    NetI2pDataI2npTunnelGatewayMessage *gw;
    NetI2pRouterMessageSendMessageDirectJob *job;
    switch ([((NetI2pDataI2npDeliveryInstructions *) nil_chk(instructions)) getDeliveryMode]) {
      case NetI2pDataI2npDeliveryInstructions_DELIVERY_MODE_LOCAL:
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"local delivery instructions for clove: ", data)];
      [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) inNetMessagePool])) addWithNetI2pDataI2npI2NPMessage:data withNetI2pDataRouterRouterIdentity:nil withNetI2pDataHash:nil];
      return;
      case NetI2pDataI2npDeliveryInstructions_DELIVERY_MODE_DESTINATION:
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$@$@", @"this message didn't come down a tunnel, not forwarding to a destination: ", instructions, @" - ", data)];
      return;
      case NetI2pDataI2npDeliveryInstructions_DELIVERY_MODE_ROUTER:
      if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) routerHash])) isEqual:[instructions getRouter]]) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"router delivery instructions targetting us"];
        [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) inNetMessagePool])) addWithNetI2pDataI2npI2NPMessage:data withNetI2pDataRouterRouterIdentity:nil withNetI2pDataHash:nil];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@", @"router delivery instructions targetting ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([instructions getRouter])) toBase64])) java_substring:0 endIndex:4], @" for ", data)];
        NetI2pRouterMessageSendMessageDirectJob *j = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], data, [instructions getRouter], 10 * 1000, NetI2pRouterMessageHandleGarlicMessageJob_ROUTER_PRIORITY);
        [j runJob];
      }
      return;
      case NetI2pDataI2npDeliveryInstructions_DELIVERY_MODE_TUNNEL:
      gw = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_([self getContext]);
      [gw setMessageWithNetI2pDataI2npI2NPMessage:data];
      [gw setTunnelIdWithNetI2pDataTunnelId:[instructions getTunnelId]];
      [gw setMessageExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(data)) getMessageExpiration]];
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@", @"tunnel delivery instructions targetting ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([instructions getRouter])) toBase64])) java_substring:0 endIndex:4], @" for ", data)];
      job = create_NetI2pRouterMessageSendMessageDirectJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withInt_withInt_([self getContext], gw, [instructions getRouter], 10 * 1000, NetI2pRouterMessageHandleGarlicMessageJob_TUNNEL_PRIORITY);
      [job runJob];
      return;
      default:
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I$@", @"Unknown instruction ", [instructions getDeliveryMode], @": ", instructions)];
      return;
    }
  }
}

- (void)dropped {
  [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageHistory])) messageProcessingErrorWithLong:[((NetI2pDataI2npGarlicMessage *) nil_chk(_message_)) getUniqueId] withNSString:[[_message_ java_getClass] getName] withNSString:@"Dropped due to overload"];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_message_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npGarlicMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(handleCloveWithNetI2pDataI2npDeliveryInstructions:withNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(dropped);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_message_", "LNetI2pDataI2npGarlicMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ROUTER_PRIORITY", "I", .constantValue.asInt = NetI2pRouterMessageHandleGarlicMessageJob_ROUTER_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "TUNNEL_PRIORITY", "I", .constantValue.asInt = NetI2pRouterMessageHandleGarlicMessageJob_TUNNEL_PRIORITY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npGarlicMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "handleClove", "LNetI2pDataI2npDeliveryInstructions;LNetI2pDataI2npI2NPMessage;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageHandleGarlicMessageJob = { "HandleGarlicMessageJob", "net.i2p.router.message", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageHandleGarlicMessageJob;
}

@end

void NetI2pRouterMessageHandleGarlicMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterMessageHandleGarlicMessageJob *self, NetI2pRouterRouterContext *context, NetI2pDataI2npGarlicMessage *msg, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterMessageHandleGarlicMessageJob_class_()]);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@C", @"Garlic Message not down a tunnel from [", from, ']')];
  JreStrongAssign(&self->_message_, msg);
}

NetI2pRouterMessageHandleGarlicMessageJob *new_NetI2pRouterMessageHandleGarlicMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataI2npGarlicMessage *msg, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageHandleGarlicMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, context, msg, from, fromHash)
}

NetI2pRouterMessageHandleGarlicMessageJob *create_NetI2pRouterMessageHandleGarlicMessageJob_initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataI2npGarlicMessage *msg, NetI2pDataRouterRouterIdentity *from, NetI2pDataHash *fromHash) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageHandleGarlicMessageJob, initWithNetI2pRouterRouterContext_withNetI2pDataI2npGarlicMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, context, msg, from, fromHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageHandleGarlicMessageJob)
