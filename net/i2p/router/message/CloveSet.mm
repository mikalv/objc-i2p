//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/CloveSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/i2np/GarlicClove.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/message/CloveSet.h"

@interface NetI2pRouterMessageCloveSet () {
 @public
  IOSObjectArray *_cloves_;
  NetI2pDataCertificate *_cert_;
  jlong _msgId_;
  jlong _expiration_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterMessageCloveSet, _cloves_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterMessageCloveSet, _cert_, NetI2pDataCertificate *)

@implementation NetI2pRouterMessageCloveSet

- (instancetype)initWithNetI2pDataI2npGarlicCloveArray:(IOSObjectArray *)cloves
                             withNetI2pDataCertificate:(NetI2pDataCertificate *)cert
                                              withLong:(jlong)msgId
                                              withLong:(jlong)expiration {
  NetI2pRouterMessageCloveSet_initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_(self, cloves, cert, msgId, expiration);
  return self;
}

- (jint)getCloveCount {
  return ((IOSObjectArray *) nil_chk(_cloves_))->size_;
}

- (NetI2pDataI2npGarlicClove *)getCloveWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(_cloves_), index);
}

- (NetI2pDataCertificate *)getCertificate {
  return _cert_;
}

- (jlong)getMessageId {
  return _msgId_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:@"{"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(_cloves_))->size_; i++) {
    NetI2pDataI2npGarlicClove *clove = IOSObjectArray_Get(_cloves_, i);
    if ([((NetI2pDataI2npGarlicClove *) nil_chk(clove)) getData] != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[[((id<NetI2pDataI2npI2NPMessage>) nil_chk([clove getData])) java_getClass] getName]])) appendWithNSString:@", "];
    else [buf appendWithNSString:@"[null clove], "];
  }
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_cloves_);
  RELEASE_(_cert_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicClove;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2npGarlicCloveArray:withNetI2pDataCertificate:withLong:withLong:);
  methods[1].selector = @selector(getCloveCount);
  methods[2].selector = @selector(getCloveWithInt:);
  methods[3].selector = @selector(getCertificate);
  methods[4].selector = @selector(getMessageId);
  methods[5].selector = @selector(getExpiration);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_cloves_", "[LNetI2pDataI2npGarlicClove;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cert_", "LNetI2pDataCertificate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_msgId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNetI2pDataI2npGarlicClove;LNetI2pDataCertificate;JJ", "getClove", "I", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterMessageCloveSet = { "CloveSet", "net.i2p.router.message", ptrTable, methods, fields, 7, 0x0, 7, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageCloveSet;
}

@end

void NetI2pRouterMessageCloveSet_initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_(NetI2pRouterMessageCloveSet *self, IOSObjectArray *cloves, NetI2pDataCertificate *cert, jlong msgId, jlong expiration) {
  NSObject_init(self);
  JreStrongAssign(&self->_cloves_, cloves);
  JreStrongAssign(&self->_cert_, cert);
  self->_msgId_ = msgId;
  self->_expiration_ = expiration;
}

NetI2pRouterMessageCloveSet *new_NetI2pRouterMessageCloveSet_initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_(IOSObjectArray *cloves, NetI2pDataCertificate *cert, jlong msgId, jlong expiration) {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageCloveSet, initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_, cloves, cert, msgId, expiration)
}

NetI2pRouterMessageCloveSet *create_NetI2pRouterMessageCloveSet_initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_(IOSObjectArray *cloves, NetI2pDataCertificate *cert, jlong msgId, jlong expiration) {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageCloveSet, initWithNetI2pDataI2npGarlicCloveArray_withNetI2pDataCertificate_withLong_withLong_, cloves, cert, msgId, expiration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageCloveSet)
