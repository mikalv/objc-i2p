//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/message/GarlicMessageBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "net/i2p/crypto/ElGamalAESEngine.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/GarlicClove.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/GarlicConfig.h"
#include "net/i2p/router/message/GarlicMessageBuilder.h"
#include "net/i2p/router/message/PayloadGarlicConfig.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterMessageGarlicMessageBuilder ()

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config;

+ (IOSByteArray *)buildCloveSetWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                         withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config;

+ (IOSByteArray *)buildCloveWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
               withNetI2pRouterMessagePayloadGarlicConfig:(NetI2pRouterMessagePayloadGarlicConfig *)config;

+ (IOSByteArray *)buildCloveWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                      withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config;

+ (IOSByteArray *)buildCommonCloveWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove
                            withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config;

@end

__attribute__((unused)) static NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config);

__attribute__((unused)) static IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveSetWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config);

__attribute__((unused)) static IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessagePayloadGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessagePayloadGarlicConfig *config);

__attribute__((unused)) static IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config);

__attribute__((unused)) static IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCommonCloveWithNetI2pDataI2npGarlicClove_withNetI2pRouterMessageGarlicConfig_(NetI2pDataI2npGarlicClove *clove, NetI2pRouterMessageGarlicConfig *config);

@implementation NetI2pRouterMessageGarlicMessageBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterMessageGarlicMessageBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)needsTagsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                           withNetI2pDataPublicKey:(NetI2pDataPublicKey *)key
                                withNetI2pDataHash:(NetI2pDataHash *)local
                                           withInt:(jint)minTagOverride {
  return NetI2pRouterMessageGarlicMessageBuilder_needsTagsWithNetI2pRouterRouterContext_withNetI2pDataPublicKey_withNetI2pDataHash_withInt_(ctx, key, local, minTagOverride);
}

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config {
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, config);
}

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config
                                                  withNetI2pDataSessionKey:(NetI2pDataSessionKey *)wrappedKey
                                                           withJavaUtilSet:(id<JavaUtilSet>)wrappedTags
                                         withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm {
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pCryptoSessionKeyManager_(ctx, config, wrappedKey, wrappedTags, skm);
}

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config
                                                  withNetI2pDataSessionKey:(NetI2pDataSessionKey *)wrappedKey
                                                           withJavaUtilSet:(id<JavaUtilSet>)wrappedTags
                                                                   withInt:(jint)numTagsToDeliver
                                         withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm {
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withNetI2pCryptoSessionKeyManager_(ctx, config, wrappedKey, wrappedTags, numTagsToDeliver, skm);
}

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config
                                                  withNetI2pDataSessionKey:(NetI2pDataSessionKey *)wrappedKey
                                                           withJavaUtilSet:(id<JavaUtilSet>)wrappedTags
                                                                   withInt:(jint)numTagsToDeliver
                                                                   withInt:(jint)lowTagsThreshold
                                         withNetI2pCryptoSessionKeyManager:(NetI2pCryptoSessionKeyManager *)skm {
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withInt_withNetI2pCryptoSessionKeyManager_(ctx, config, wrappedKey, wrappedTags, numTagsToDeliver, lowTagsThreshold, skm);
}

+ (NetI2pDataI2npGarlicMessage *)buildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                       withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config
                                                  withNetI2pDataSessionKey:(NetI2pDataSessionKey *)wrappedKey
                                                           withJavaUtilSet:(id<JavaUtilSet>)wrappedTags
                                                   withNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                  withNetI2pDataSessionKey:(NetI2pDataSessionKey *)encryptKey
                                                  withNetI2pDataSessionTag:(NetI2pDataSessionTag *)encryptTag {
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, config, wrappedKey, wrappedTags, target, encryptKey, encryptTag);
}

+ (IOSByteArray *)buildCloveSetWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                         withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config {
  return NetI2pRouterMessageGarlicMessageBuilder_buildCloveSetWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, config);
}

+ (IOSByteArray *)buildCloveWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
               withNetI2pRouterMessagePayloadGarlicConfig:(NetI2pRouterMessagePayloadGarlicConfig *)config {
  return NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessagePayloadGarlicConfig_(ctx, config);
}

+ (IOSByteArray *)buildCloveWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                      withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config {
  return NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, config);
}

+ (IOSByteArray *)buildCommonCloveWithNetI2pDataI2npGarlicClove:(NetI2pDataI2npGarlicClove *)clove
                            withNetI2pRouterMessageGarlicConfig:(NetI2pRouterMessageGarlicConfig *)config {
  return NetI2pRouterMessageGarlicMessageBuilder_buildCommonCloveWithNetI2pDataI2npGarlicClove_withNetI2pRouterMessageGarlicConfig_(clove, config);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 2, 4, -1, 5, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 2, 6, -1, 7, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 2, 8, -1, 9, -1, -1 },
    { NULL, "LNetI2pDataI2npGarlicMessage;", 0x9, 2, 10, -1, 11, -1, -1 },
    { NULL, "[B", 0xa, 12, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 13, 14, 15, -1, -1, -1 },
    { NULL, "[B", 0xa, 13, 3, 15, -1, -1, -1 },
    { NULL, "[B", 0xa, 16, 17, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(needsTagsWithNetI2pRouterRouterContext:withNetI2pDataPublicKey:withNetI2pDataHash:withInt:);
  methods[2].selector = @selector(buildMessageWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:);
  methods[3].selector = @selector(buildMessageWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:withNetI2pDataSessionKey:withJavaUtilSet:withNetI2pCryptoSessionKeyManager:);
  methods[4].selector = @selector(buildMessageWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:withNetI2pDataSessionKey:withJavaUtilSet:withInt:withNetI2pCryptoSessionKeyManager:);
  methods[5].selector = @selector(buildMessageWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:withNetI2pDataSessionKey:withJavaUtilSet:withInt:withInt:withNetI2pCryptoSessionKeyManager:);
  methods[6].selector = @selector(buildMessageWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:withNetI2pDataSessionKey:withJavaUtilSet:withNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pDataSessionTag:);
  methods[7].selector = @selector(buildCloveSetWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:);
  methods[8].selector = @selector(buildCloveWithNetI2pRouterRouterContext:withNetI2pRouterMessagePayloadGarlicConfig:);
  methods[9].selector = @selector(buildCloveWithNetI2pRouterRouterContext:withNetI2pRouterMessageGarlicConfig:);
  methods[10].selector = @selector(buildCommonCloveWithNetI2pDataI2npGarlicClove:withNetI2pRouterMessageGarlicConfig:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "needsTags", "LNetI2pRouterRouterContext;LNetI2pDataPublicKey;LNetI2pDataHash;I", "buildMessage", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicConfig;", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicConfig;LNetI2pDataSessionKey;LJavaUtilSet;LNetI2pCryptoSessionKeyManager;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/message/GarlicConfig;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;Lnet/i2p/crypto/SessionKeyManager;)Lnet/i2p/data/i2np/GarlicMessage;", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicConfig;LNetI2pDataSessionKey;LJavaUtilSet;ILNetI2pCryptoSessionKeyManager;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/message/GarlicConfig;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;ILnet/i2p/crypto/SessionKeyManager;)Lnet/i2p/data/i2np/GarlicMessage;", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicConfig;LNetI2pDataSessionKey;LJavaUtilSet;IILNetI2pCryptoSessionKeyManager;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/message/GarlicConfig;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;IILnet/i2p/crypto/SessionKeyManager;)Lnet/i2p/data/i2np/GarlicMessage;", "LNetI2pRouterRouterContext;LNetI2pRouterMessageGarlicConfig;LNetI2pDataSessionKey;LJavaUtilSet;LNetI2pDataPublicKey;LNetI2pDataSessionKey;LNetI2pDataSessionTag;", "(Lnet/i2p/router/RouterContext;Lnet/i2p/router/message/GarlicConfig;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;Lnet/i2p/data/PublicKey;Lnet/i2p/data/SessionKey;Lnet/i2p/data/SessionTag;)Lnet/i2p/data/i2np/GarlicMessage;", "buildCloveSet", "buildClove", "LNetI2pRouterRouterContext;LNetI2pRouterMessagePayloadGarlicConfig;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "buildCommonClove", "LNetI2pDataI2npGarlicClove;LNetI2pRouterMessageGarlicConfig;" };
  static const J2ObjcClassInfo _NetI2pRouterMessageGarlicMessageBuilder = { "GarlicMessageBuilder", "net.i2p.router.message", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterMessageGarlicMessageBuilder;
}

@end

void NetI2pRouterMessageGarlicMessageBuilder_init(NetI2pRouterMessageGarlicMessageBuilder *self) {
  NSObject_init(self);
}

NetI2pRouterMessageGarlicMessageBuilder *new_NetI2pRouterMessageGarlicMessageBuilder_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterMessageGarlicMessageBuilder, init)
}

NetI2pRouterMessageGarlicMessageBuilder *create_NetI2pRouterMessageGarlicMessageBuilder_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterMessageGarlicMessageBuilder, init)
}

jboolean NetI2pRouterMessageGarlicMessageBuilder_needsTagsWithNetI2pRouterRouterContext_withNetI2pDataPublicKey_withNetI2pDataHash_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataPublicKey *key, NetI2pDataHash *local, jint minTagOverride) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pCryptoSessionKeyManager *skm = [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:local];
  if (skm == nil) return true;
  NetI2pDataSessionKey *curKey = [skm getCurrentKeyWithNetI2pDataPublicKey:key];
  if (curKey == nil) return true;
  if (minTagOverride > 0) return [skm shouldSendTagsWithNetI2pDataPublicKey:key withNetI2pDataSessionKey:curKey withInt:minTagOverride];
  return [skm shouldSendTagsWithNetI2pDataPublicKey:key withNetI2pDataSessionKey:curKey];
}

NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageBuilder_class_()];
  [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"buildMessage 2 args, using router SKM" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"who did it")];
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pCryptoSessionKeyManager_(ctx, config, create_NetI2pDataSessionKey_init(), create_JavaUtilHashSet_init(), [ctx sessionKeyManager]);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pCryptoSessionKeyManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config, NetI2pDataSessionKey *wrappedKey, id<JavaUtilSet> wrappedTags, NetI2pCryptoSessionKeyManager *skm) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withNetI2pCryptoSessionKeyManager_(ctx, config, wrappedKey, wrappedTags, [((NetI2pCryptoSessionKeyManager *) nil_chk(skm)) getTagsToSend], skm);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withNetI2pCryptoSessionKeyManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config, NetI2pDataSessionKey *wrappedKey, id<JavaUtilSet> wrappedTags, jint numTagsToDeliver, NetI2pCryptoSessionKeyManager *skm) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withInt_withNetI2pCryptoSessionKeyManager_(ctx, config, wrappedKey, wrappedTags, numTagsToDeliver, [((NetI2pCryptoSessionKeyManager *) nil_chk(skm)) getLowThreshold], skm);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withInt_withInt_withNetI2pCryptoSessionKeyManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config, NetI2pDataSessionKey *wrappedKey, id<JavaUtilSet> wrappedTags, jint numTagsToDeliver, jint lowTagsThreshold, NetI2pCryptoSessionKeyManager *skm) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageBuilder_class_()];
  NetI2pDataPublicKey *key = [((NetI2pRouterMessageGarlicConfig *) nil_chk(config)) getRecipientPublicKey];
  if (key == nil) {
    if ([config getRecipient] == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null recipient specified");
    }
    else if ([((NetI2pDataRouterRouterInfo *) nil_chk([config getRecipient])) getIdentity] == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null recipient.identity specified");
    }
    else if ([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([config getRecipient])) getIdentity])) getPublicKey] == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null recipient.identity.publicKey specified");
    }
    else key = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([config getRecipient])) getIdentity])) getPublicKey];
  }
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$@", @"Encrypted with public key to expire on ", create_JavaUtilDate_initWithLong_([config getExpiration]))];
  NetI2pDataSessionKey *curKey = [((NetI2pCryptoSessionKeyManager *) nil_chk(skm)) getCurrentOrNewKeyWithNetI2pDataPublicKey:key];
  NetI2pDataSessionTag *curTag = nil;
  curTag = [skm consumeNextAvailableTagWithNetI2pDataPublicKey:key withNetI2pDataSessionKey:curKey];
  if ([log shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    jint availTags = [skm getAvailableTagsWithNetI2pDataPublicKey:key withNetI2pDataSessionKey:curKey];
    [log debugWithNSString:JreStrcat("$I$I", @"Available tags for encryption: ", availTags, @" low threshold: ", lowTagsThreshold)];
  }
  if (numTagsToDeliver > 0 && [skm shouldSendTagsWithNetI2pDataPublicKey:key withNetI2pDataSessionKey:curKey withInt:lowTagsThreshold]) {
    for (jint i = 0; i < numTagsToDeliver; i++) [((id<JavaUtilSet>) nil_chk(wrappedTags)) addWithId:create_NetI2pDataSessionTag_initWithBoolean_(true)];
    if ([log shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$I", @"Too few tags available so we're including ", numTagsToDeliver)];
  }
  [((NetI2pDataSessionKey *) nil_chk(wrappedKey)) setDataWithByteArray:[((NetI2pDataSessionKey *) nil_chk(curKey)) getData]];
  return NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(ctx, config, wrappedKey, wrappedTags, key, curKey, curTag);
}

NetI2pDataI2npGarlicMessage *NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config, NetI2pDataSessionKey *wrappedKey, id<JavaUtilSet> wrappedTags, NetI2pDataPublicKey *target, NetI2pDataSessionKey *encryptKey, NetI2pDataSessionTag *encryptTag) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageBuilder_class_()];
  if (config == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null config specified");
  NetI2pDataI2npGarlicMessage *msg = create_NetI2pDataI2npGarlicMessage_initWithNetI2pI2PAppContext_(ctx);
  IOSByteArray *cloveSet = NetI2pRouterMessageGarlicMessageBuilder_buildCloveSetWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, config);
  IOSByteArray *encData = [((NetI2pCryptoElGamalAESEngine *) nil_chk([ctx elGamalAESEngine])) encryptWithByteArray:cloveSet withNetI2pDataPublicKey:target withNetI2pDataSessionKey:encryptKey withJavaUtilSet:wrappedTags withNetI2pDataSessionTag:encryptTag withLong:128];
  [msg setDataWithByteArray:encData];
  [msg setMessageExpirationWithLong:[config getExpiration]];
  jlong timeFromNow = [config getExpiration] - [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  if (timeFromNow < 1 * 1000) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$J$@", @"Building a message expiring in ", timeFromNow, @"ms: ", config) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"created by")];
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$I$J$I$I$", @"CloveSet (", [config getCloveCount], @" cloves) for message ", [msg getUniqueId], @" is ", ((IOSByteArray *) nil_chk(cloveSet))->size_, @" bytes and encrypted message data is ", ((IOSByteArray *) nil_chk(encData))->size_, @" bytes")];
  return msg;
}

IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveSetWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  JavaIoByteArrayOutputStream *baos = nil;
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterMessageGarlicMessageBuilder_class_()];
  @try {
    if ([config isKindOfClass:[NetI2pRouterMessagePayloadGarlicConfig class]]) {
      IOSByteArray *clove = NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessagePayloadGarlicConfig_(ctx, (NetI2pRouterMessagePayloadGarlicConfig *) cast_chk(config, [NetI2pRouterMessagePayloadGarlicConfig class]));
      baos = create_JavaIoByteArrayOutputStream_initWithInt_(((IOSByteArray *) nil_chk(clove))->size_ + 16);
      [baos writeWithInt:(jbyte) 1];
      [baos writeWithByteArray:clove];
    }
    else {
      IOSObjectArray *cloves = [IOSObjectArray arrayWithLength:[((NetI2pRouterMessageGarlicConfig *) nil_chk(config)) getCloveCount] type:IOSClass_byteArray(1)];
      for (jint i = 0; i < [config getCloveCount]; i++) {
        NetI2pRouterMessageGarlicConfig *c = [config getCloveWithInt:i];
        if ([c isKindOfClass:[NetI2pRouterMessagePayloadGarlicConfig class]]) {
          IOSObjectArray_Set(cloves, i, NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessagePayloadGarlicConfig_(ctx, (NetI2pRouterMessagePayloadGarlicConfig *) cast_chk(c, [NetI2pRouterMessagePayloadGarlicConfig class])));
        }
        else {
          [((NetI2pUtilLog *) nil_chk(log)) debugWithNSString:@"Subclove IS NOT a payload garlic clove"];
          IOSObjectArray_Set(cloves, i, NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, c));
        }
      }
      jint len = 1;
      for (jint i = 0; i < cloves->size_; i++) len += ((IOSByteArray *) nil_chk(IOSObjectArray_Get(cloves, i)))->size_;
      baos = create_JavaIoByteArrayOutputStream_initWithInt_(len + 16);
      [baos writeWithInt:(jbyte) cloves->size_];
      for (jint i = 0; i < cloves->size_; i++) [baos writeWithByteArray:IOSObjectArray_Get(cloves, i)];
    }
    [((NetI2pDataCertificate *) nil_chk([((NetI2pRouterMessageGarlicConfig *) nil_chk(config)) getCertificate])) writeBytesWithJavaIoOutputStream:baos];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(baos, 4, [config getId]);
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(baos, NetI2pDataDataHelper_DATE_LENGTH, [config getExpiration]);
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Error building the clove set" withJavaLangThrowable:ioe];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(@"Error building the clove set", ioe);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Error building the clove set" withJavaLangThrowable:dfe];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(@"Error building the clove set", dfe);
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessagePayloadGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessagePayloadGarlicConfig *config) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pDataI2npGarlicClove *clove = create_NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(ctx);
  [clove setDataWithNetI2pDataI2npI2NPMessage:[((NetI2pRouterMessagePayloadGarlicConfig *) nil_chk(config)) getPayload]];
  return NetI2pRouterMessageGarlicMessageBuilder_buildCommonCloveWithNetI2pDataI2npGarlicClove_withNetI2pRouterMessageGarlicConfig_(clove, config);
}

IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCloveWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterMessageGarlicConfig *config) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  NetI2pDataI2npGarlicClove *clove = create_NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(ctx);
  NetI2pDataI2npGarlicMessage *msg = NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_(ctx, config);
  if (msg == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Unable to build message from clove config");
  [clove setDataWithNetI2pDataI2npI2NPMessage:msg];
  return NetI2pRouterMessageGarlicMessageBuilder_buildCommonCloveWithNetI2pDataI2npGarlicClove_withNetI2pRouterMessageGarlicConfig_(clove, config);
}

IOSByteArray *NetI2pRouterMessageGarlicMessageBuilder_buildCommonCloveWithNetI2pDataI2npGarlicClove_withNetI2pRouterMessageGarlicConfig_(NetI2pDataI2npGarlicClove *clove, NetI2pRouterMessageGarlicConfig *config) {
  NetI2pRouterMessageGarlicMessageBuilder_initialize();
  [((NetI2pDataI2npGarlicClove *) nil_chk(clove)) setCertificateWithNetI2pDataCertificate:[((NetI2pRouterMessageGarlicConfig *) nil_chk(config)) getCertificate]];
  [clove setCloveIdWithLong:[config getId]];
  [clove setExpirationWithJavaUtilDate:create_JavaUtilDate_initWithLong_([config getExpiration])];
  [clove setInstructionsWithNetI2pDataI2npDeliveryInstructions:[config getDeliveryInstructions]];
  return [clove toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterMessageGarlicMessageBuilder)
