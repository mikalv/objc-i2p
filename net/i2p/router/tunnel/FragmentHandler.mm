//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/FragmentHandler.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/FragmentHandler.h"
#include "net/i2p/router/tunnel/FragmentedMessage.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/TrivialPreprocessor.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTunnelFragmentHandler () {
 @public
  id<JavaUtilMap> _fragmentedMessages_;
  id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> _receiver_;
  jint _completed_;
  jint _failed_;
}

- (jboolean)verifyPreprocessedWithByteArray:(IOSByteArray *)preprocessed
                                    withInt:(jint)offset
                                    withInt:(jint)length;

- (jint)receiveFragmentWithByteArray:(IOSByteArray *)preprocessed
                             withInt:(jint)offset
                             withInt:(jint)length;

- (jint)receiveInitialFragmentWithByteArray:(IOSByteArray *)preprocessed
                                    withInt:(jint)offset
                                    withInt:(jint)length;

- (jint)receiveSubsequentFragmentWithByteArray:(IOSByteArray *)preprocessed
                                       withInt:(jint)offset
                                       withInt:(jint)length;

- (void)receiveCompleteWithNetI2pRouterTunnelFragmentedMessage:(NetI2pRouterTunnelFragmentedMessage *)msg;

- (void)receiveCompleteWithByteArray:(IOSByteArray *)data
                             withInt:(jint)offset
                             withInt:(jint)len
                  withNetI2pDataHash:(NetI2pDataHash *)router
              withNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnelId;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentHandler, _fragmentedMessages_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentHandler, _receiver_, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver>)

inline NetI2pUtilByteCache *NetI2pRouterTunnelFragmentHandler_get__cache(void);
static NetI2pUtilByteCache *NetI2pRouterTunnelFragmentHandler__cache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelFragmentHandler, _cache, NetI2pUtilByteCache *)

inline NetI2pUtilByteCache *NetI2pRouterTunnelFragmentHandler_get__validateCache(void);
static NetI2pUtilByteCache *NetI2pRouterTunnelFragmentHandler__validateCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelFragmentHandler, _validateCache, NetI2pUtilByteCache *)

inline jint NetI2pRouterTunnelFragmentHandler_get_MASK_FRAGMENT_NUM(void);
#define NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENT_NUM 126
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, MASK_FRAGMENT_NUM, jint)

__attribute__((unused)) static jboolean NetI2pRouterTunnelFragmentHandler_verifyPreprocessedWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length);

__attribute__((unused)) static jint NetI2pRouterTunnelFragmentHandler_receiveFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length);

__attribute__((unused)) static jint NetI2pRouterTunnelFragmentHandler_receiveInitialFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length);

__attribute__((unused)) static jint NetI2pRouterTunnelFragmentHandler_receiveSubsequentFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length);

__attribute__((unused)) static void NetI2pRouterTunnelFragmentHandler_receiveCompleteWithNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *self, NetI2pRouterTunnelFragmentedMessage *msg);

__attribute__((unused)) static void NetI2pRouterTunnelFragmentHandler_receiveCompleteWithByteArray_withInt_withInt_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *data, jint offset, jint len, NetI2pDataHash *router, NetI2pDataTunnelId *tunnelId);

@interface NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver : NSObject

@end

@interface NetI2pRouterTunnelFragmentHandler_RemoveFailed : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterTunnelFragmentHandler *this$0_;
  NetI2pRouterTunnelFragmentedMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterTunnelFragmentHandler:(NetI2pRouterTunnelFragmentHandler *)outer$
                  withNetI2pRouterTunnelFragmentedMessage:(NetI2pRouterTunnelFragmentedMessage *)msg;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelFragmentHandler_RemoveFailed)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentHandler_RemoveFailed, _msg_, NetI2pRouterTunnelFragmentedMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler_RemoveFailed *self, NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg);

__attribute__((unused)) static NetI2pRouterTunnelFragmentHandler_RemoveFailed *new_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelFragmentHandler_RemoveFailed *create_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelFragmentHandler_RemoveFailed)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelFragmentHandler)

jlong NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME = 60000;

@implementation NetI2pRouterTunnelFragmentHandler

+ (jlong)MAX_DEFRAGMENT_TIME {
  return NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME;
}

+ (void)setMAX_DEFRAGMENT_TIME:(jlong)value {
  NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME = value;
}

+ (jbyte)MASK_IS_SUBSEQUENT {
  return NetI2pRouterTunnelFragmentHandler_MASK_IS_SUBSEQUENT;
}

+ (jbyte)MASK_TYPE {
  return NetI2pRouterTunnelFragmentHandler_MASK_TYPE;
}

+ (jbyte)MASK_FRAGMENTED {
  return NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENTED;
}

+ (jbyte)MASK_EXTENDED {
  return NetI2pRouterTunnelFragmentHandler_MASK_EXTENDED;
}

+ (jshort)TYPE_LOCAL {
  return NetI2pRouterTunnelFragmentHandler_TYPE_LOCAL;
}

+ (jshort)TYPE_TUNNEL {
  return NetI2pRouterTunnelFragmentHandler_TYPE_TUNNEL;
}

+ (jshort)TYPE_ROUTER {
  return NetI2pRouterTunnelFragmentHandler_TYPE_ROUTER;
}

+ (jshort)TYPE_UNDEF {
  return NetI2pRouterTunnelFragmentHandler_TYPE_UNDEF;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver:(id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver>)receiver {
  NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(self, context, receiver);
  return self;
}

- (void)receiveTunnelMessageWithByteArray:(IOSByteArray *)preprocessed
                                  withInt:(jint)offset
                                  withInt:(jint)length {
  jboolean ok = NetI2pRouterTunnelFragmentHandler_verifyPreprocessedWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
  if (!ok) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$I$I", @"Unable to verify preprocessed data (pre.length=", ((IOSByteArray *) nil_chk(preprocessed))->size_, @" off=", offset, @" len=", length)];
    [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentHandler__cache)) release__WithId:create_NetI2pDataByteArray_initWithByteArray_(preprocessed)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
    return;
  }
  offset += NetI2pRouterTunnelHopProcessor_IV_LENGTH;
  offset += 4;
  jint padding = 0;
  while (IOSByteArray_Get(nil_chk(preprocessed), offset) != (jbyte) (jint) 0x00) {
    offset++;
    if (offset >= NetI2pRouterTunnelTrivialPreprocessor_PREPROCESSED_SIZE) {
      [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentHandler__cache)) release__WithId:create_NetI2pDataByteArray_initWithByteArray_(preprocessed)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
      return;
    }
    padding++;
  }
  offset++;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$I$I", @"Fragments begin at offset=", offset, @" padding=", padding)];
  }
  @try {
    while (offset < length) {
      jint off = NetI2pRouterTunnelFragmentHandler_receiveFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
      if (off < 0) {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
        return;
      }
      offset = off;
    }
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
  }
  @catch (JavaLangNullPointerException *npe) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$I", @"Corrupt fragment received: offset = ", offset) withJavaLangThrowable:npe];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
  }
  @catch (JavaLangRuntimeException *e) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$I", @"Corrupt fragment received: offset = ", offset) withJavaLangThrowable:e];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
  }
  @finally {
    [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentHandler__cache)) release__WithId:create_NetI2pDataByteArray_initWithByteArray_(preprocessed)];
  }
}

- (jint)getCompleteCount {
  return _completed_;
}

- (jint)getFailedCount {
  return _failed_;
}

- (jboolean)verifyPreprocessedWithByteArray:(IOSByteArray *)preprocessed
                                    withInt:(jint)offset
                                    withInt:(jint)length {
  return NetI2pRouterTunnelFragmentHandler_verifyPreprocessedWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
}

- (jint)receiveFragmentWithByteArray:(IOSByteArray *)preprocessed
                             withInt:(jint)offset
                             withInt:(jint)length {
  return NetI2pRouterTunnelFragmentHandler_receiveFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
}

- (jint)receiveInitialFragmentWithByteArray:(IOSByteArray *)preprocessed
                                    withInt:(jint)offset
                                    withInt:(jint)length {
  return NetI2pRouterTunnelFragmentHandler_receiveInitialFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
}

- (jint)receiveSubsequentFragmentWithByteArray:(IOSByteArray *)preprocessed
                                       withInt:(jint)offset
                                       withInt:(jint)length {
  return NetI2pRouterTunnelFragmentHandler_receiveSubsequentFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
}

- (void)receiveCompleteWithNetI2pRouterTunnelFragmentedMessage:(NetI2pRouterTunnelFragmentedMessage *)msg {
  NetI2pRouterTunnelFragmentHandler_receiveCompleteWithNetI2pRouterTunnelFragmentedMessage_(self, msg);
}

- (void)receiveCompleteWithByteArray:(IOSByteArray *)data
                             withInt:(jint)offset
                             withInt:(jint)len
                  withNetI2pDataHash:(NetI2pDataHash *)router
              withNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnelId {
  NetI2pRouterTunnelFragmentHandler_receiveCompleteWithByteArray_withInt_withInt_withNetI2pDataHash_withNetI2pDataTunnelId_(self, data, offset, len, router, tunnelId);
}

- (void)noteReceptionWithLong:(jlong)messageId
                      withInt:(jint)fragmentId
                       withId:(id)status {
}

- (void)noteCompletionWithLong:(jlong)messageId {
}

- (void)noteFailureWithLong:(jlong)messageId
               withNSString:(NSString *)status {
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_fragmentedMessages_);
  RELEASE_(_receiver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver:);
  methods[1].selector = @selector(receiveTunnelMessageWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(getCompleteCount);
  methods[3].selector = @selector(getFailedCount);
  methods[4].selector = @selector(verifyPreprocessedWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(receiveFragmentWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(receiveInitialFragmentWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(receiveSubsequentFragmentWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(receiveCompleteWithNetI2pRouterTunnelFragmentedMessage:);
  methods[9].selector = @selector(receiveCompleteWithByteArray:withInt:withInt:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[10].selector = @selector(noteReceptionWithLong:withInt:withId:);
  methods[11].selector = @selector(noteCompletionWithLong:);
  methods[12].selector = @selector(noteFailureWithLong:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_fragmentedMessages_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_receiver_", "LNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_completed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_failed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_DEFRAGMENT_TIME", "J", .constantValue.asLong = 0, 0x8, -1, 17, -1, -1 },
    { "_cache", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "_validateCache", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "MASK_IS_SUBSEQUENT", "B", .constantValue.asChar = NetI2pRouterTunnelFragmentHandler_MASK_IS_SUBSEQUENT, 0x18, -1, -1, -1, -1 },
    { "MASK_TYPE", "B", .constantValue.asChar = NetI2pRouterTunnelFragmentHandler_MASK_TYPE, 0x18, -1, -1, -1, -1 },
    { "MASK_FRAGMENTED", "B", .constantValue.asChar = NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENTED, 0x18, -1, -1, -1, -1 },
    { "MASK_EXTENDED", "B", .constantValue.asChar = NetI2pRouterTunnelFragmentHandler_MASK_EXTENDED, 0x18, -1, -1, -1, -1 },
    { "MASK_FRAGMENT_NUM", "I", .constantValue.asInt = NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENT_NUM, 0x1a, -1, -1, -1, -1 },
    { "TYPE_LOCAL", "S", .constantValue.asShort = NetI2pRouterTunnelFragmentHandler_TYPE_LOCAL, 0x18, -1, -1, -1, -1 },
    { "TYPE_TUNNEL", "S", .constantValue.asShort = NetI2pRouterTunnelFragmentHandler_TYPE_TUNNEL, 0x18, -1, -1, -1, -1 },
    { "TYPE_ROUTER", "S", .constantValue.asShort = NetI2pRouterTunnelFragmentHandler_TYPE_ROUTER, 0x18, -1, -1, -1, -1 },
    { "TYPE_UNDEF", "S", .constantValue.asShort = NetI2pRouterTunnelFragmentHandler_TYPE_UNDEF, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver;", "receiveTunnelMessage", "[BII", "verifyPreprocessed", "receiveFragment", "receiveInitialFragment", "receiveSubsequentFragment", "receiveComplete", "LNetI2pRouterTunnelFragmentedMessage;", "[BIILNetI2pDataHash;LNetI2pDataTunnelId;", "noteReception", "JILNSObject;", "noteCompletion", "J", "noteFailure", "JLNSString;", "Ljava/util/Map<Ljava/lang/Long;Lnet/i2p/router/tunnel/FragmentedMessage;>;", &NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME, &NetI2pRouterTunnelFragmentHandler__cache, &NetI2pRouterTunnelFragmentHandler__validateCache, "LNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver;LNetI2pRouterTunnelFragmentHandler_RemoveFailed;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelFragmentHandler = { "FragmentHandler", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 13, 18, -1, 20, -1, -1, -1 };
  return &_NetI2pRouterTunnelFragmentHandler;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelFragmentHandler class]) {
    JreStrongAssign(&NetI2pRouterTunnelFragmentHandler__cache, NetI2pUtilByteCache_getInstanceWithInt_withInt_(512, NetI2pRouterTunnelTrivialPreprocessor_PREPROCESSED_SIZE));
    JreStrongAssign(&NetI2pRouterTunnelFragmentHandler__validateCache, NetI2pUtilByteCache_getInstanceWithInt_withInt_(512, NetI2pRouterTunnelTrivialPreprocessor_PREPROCESSED_SIZE));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelFragmentHandler)
  }
}

@end

void NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterTunnelFragmentHandler *self, NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelFragmentHandler_class_()]);
  JreStrongAssignAndConsume(&self->_fragmentedMessages_, new_JavaUtilHashMap_initWithInt_(16));
  JreStrongAssign(&self->_receiver_, receiver);
}

NetI2pRouterTunnelFragmentHandler *new_NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelFragmentHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_, context, receiver)
}

NetI2pRouterTunnelFragmentHandler *create_NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelFragmentHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_, context, receiver)
}

jboolean NetI2pRouterTunnelFragmentHandler_verifyPreprocessedWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length) {
  jint paddingEnd = NetI2pRouterTunnelHopProcessor_IV_LENGTH + 4;
  while (IOSByteArray_Get(nil_chk(preprocessed), offset + paddingEnd) != (jbyte) (jint) 0x00) {
    paddingEnd++;
    if (offset + paddingEnd >= length) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$I$I$$", @"cannot verify, going past the end [off=", offset, @" len=", length, @" paddingEnd=", paddingEnd, @" data: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(preprocessed, offset, length))];
      return false;
    }
  }
  paddingEnd++;
  NetI2pDataByteArray *ba = [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentHandler__validateCache)) acquire];
  IOSByteArray *preV = [((NetI2pDataByteArray *) nil_chk(ba)) getData];
  jint validLength = length - offset - paddingEnd + NetI2pRouterTunnelHopProcessor_IV_LENGTH;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(preprocessed, offset + paddingEnd, preV, 0, validLength - NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(preprocessed, 0, preV, validLength - NetI2pRouterTunnelHopProcessor_IV_LENGTH, NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", @"endpoint IV: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(preV, validLength - NetI2pRouterTunnelHopProcessor_IV_LENGTH, NetI2pRouterTunnelHopProcessor_IV_LENGTH))];
  IOSByteArray *v = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) sha])) calculateHashWithByteArray:preV withInt:0 withInt:validLength withByteArray:v withInt:0];
  [NetI2pRouterTunnelFragmentHandler__validateCache release__WithId:ba];
  jboolean eq = NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(v, 0, preprocessed, offset + NetI2pRouterTunnelHopProcessor_IV_LENGTH, 4);
  if (!eq) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [self->_log_ warnWithNSString:JreStrcat("$$$$", @"Corrupt tunnel message - verification fails: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(preprocessed, offset + NetI2pRouterTunnelHopProcessor_IV_LENGTH, 4), @" != ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(v, 0, 4))];
      [self->_log_ warnWithNSString:JreStrcat("$I$I$I$IC$", @"No matching endpoint: # pad bytes: ", (paddingEnd - (NetI2pRouterTunnelHopProcessor_IV_LENGTH + 4) - 1), @" offset=", offset, @" length=", length, @" paddingEnd=", paddingEnd, ' ', NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(preprocessed, offset, length)) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"trace")];
    }
  }
  NetI2pUtilSimpleByteCache_release__WithByteArray_(v);
  if (eq) {
    jint excessPadding = paddingEnd - (NetI2pRouterTunnelHopProcessor_IV_LENGTH + 4 + 1);
    if (excessPadding > 0) [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.smallFragments" withLong:excessPadding];
    else [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.fullFragments" withLong:1];
  }
  return eq;
}

jint NetI2pRouterTunnelFragmentHandler_receiveFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$I", @"CONTROL: 0x", JavaLangInteger_toHexStringWithInt_(IOSByteArray_Get(nil_chk(preprocessed), offset) & (jint) 0xff), @" at offset ", offset)];
  if (0 == (IOSByteArray_Get(nil_chk(preprocessed), offset) & NetI2pRouterTunnelFragmentHandler_MASK_IS_SUBSEQUENT)) return NetI2pRouterTunnelFragmentHandler_receiveInitialFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
  else return NetI2pRouterTunnelFragmentHandler_receiveSubsequentFragmentWithByteArray_withInt_withInt_(self, preprocessed, offset, length);
}

jint NetI2pRouterTunnelFragmentHandler_receiveInitialFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$I", @"initial begins at ", offset, @" for ", length)];
  jint type = JreURShift32((IOSByteArray_Get(nil_chk(preprocessed), offset) & NetI2pRouterTunnelFragmentHandler_MASK_TYPE), 5);
  jboolean fragmented = (0 != (IOSByteArray_Get(preprocessed, offset) & NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENTED));
  jboolean extended = (0 != (IOSByteArray_Get(preprocessed, offset) & NetI2pRouterTunnelFragmentHandler_MASK_EXTENDED));
  offset++;
  NetI2pDataTunnelId *tunnelId = nil;
  NetI2pDataHash *router = nil;
  jlong messageId = -1;
  if (type == NetI2pRouterTunnelFragmentHandler_TYPE_TUNNEL) {
    if (offset + 4 >= preprocessed->size_) return -1;
    jlong id_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(preprocessed, offset, 4);
    tunnelId = create_NetI2pDataTunnelId_initWithLong_(id_);
    offset += 4;
  }
  if ((type == NetI2pRouterTunnelFragmentHandler_TYPE_ROUTER) || (type == NetI2pRouterTunnelFragmentHandler_TYPE_TUNNEL)) {
    if (offset + NetI2pDataHash_HASH_LENGTH >= preprocessed->size_) return -1;
    router = NetI2pDataHash_createWithByteArray_withInt_(preprocessed, offset);
    offset += NetI2pDataHash_HASH_LENGTH;
  }
  if (fragmented) {
    if (offset + 4 >= preprocessed->size_) return -1;
    messageId = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(preprocessed, offset, 4);
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$I$I$$$@", @"reading messageId ", messageId, @" at offset ", offset, @" type = ", type, @" router = ", (router != nil ? [((NSString *) nil_chk([router toBase64])) java_substring:0 endIndex:4] : @"n/a"), @" tunnelId = ", tunnelId)];
    offset += 4;
  }
  if (extended) {
    jint extendedSize = IOSByteArray_Get(preprocessed, offset) & (jint) 0xff;
    offset++;
    offset += extendedSize;
  }
  if (offset + 2 >= preprocessed->size_) return -1;
  jint size = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(preprocessed, offset, 2);
  offset += 2;
  if (type == NetI2pRouterTunnelFragmentHandler_TYPE_UNDEF) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"Dropping msg at tunnel endpoint with unsupported delivery instruction type ", type, @" rcvr: ", self->_receiver_)];
  }
  else if (fragmented) {
    NetI2pRouterTunnelFragmentedMessage *msg;
    @synchronized(self->_fragmentedMessages_) {
      msg = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->_fragmentedMessages_)) getWithId:JavaLangLong_valueOfWithLong_(messageId)]);
      if (msg == nil) {
        msg = JreRetainedLocalValue(create_NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(self->_context_, messageId));
        [self->_fragmentedMessages_ putWithId:JavaLangLong_valueOfWithLong_(messageId) withId:msg];
      }
    }
    @synchronized(msg) {
      jboolean ok = [msg receiveWithByteArray:preprocessed withInt:offset withInt:size withBoolean:false withNetI2pDataHash:router withNetI2pDataTunnelId:tunnelId];
      if (!ok) return -1;
      if ([msg isComplete]) {
        @synchronized(self->_fragmentedMessages_) {
          [self->_fragmentedMessages_ removeWithId:JavaLangLong_valueOfWithLong_(messageId)];
        }
        if ([msg getExpireEvent] != nil) [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk([msg getExpireEvent])) cancel];
        NetI2pRouterTunnelFragmentHandler_receiveCompleteWithNetI2pRouterTunnelFragmentedMessage_(self, msg);
      }
      else {
        [self noteReceptionWithLong:[msg getMessageId] withInt:0 withId:msg];
        if ([msg getExpireEvent] == nil) {
          NetI2pRouterTunnelFragmentHandler_RemoveFailed *evt = create_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(self, msg);
          [msg setExpireEventWithNetI2pUtilSimpleTimer2_TimedEvent:evt];
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$J", @"In ", NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME, @" dropping ", messageId)];
          [evt scheduleWithLong:NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME];
        }
      }
    }
  }
  else {
    NetI2pRouterTunnelFragmentHandler_receiveCompleteWithByteArray_withInt_withInt_withNetI2pDataHash_withNetI2pDataTunnelId_(self, preprocessed, offset, size, router, tunnelId);
  }
  offset += size;
  return offset;
}

jint NetI2pRouterTunnelFragmentHandler_receiveSubsequentFragmentWithByteArray_withInt_withInt_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *preprocessed, jint offset, jint length) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$I", @"subsequent begins at ", offset, @" for ", length)];
  jint fragmentNum = (JreURShift32((IOSByteArray_Get(nil_chk(preprocessed), offset) & NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENT_NUM), 1));
  jboolean isLast = (0 != (IOSByteArray_Get(preprocessed, offset) & 1));
  offset++;
  jlong messageId = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(preprocessed, offset, 4);
  offset += 4;
  jint size = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(preprocessed, offset, 2);
  offset += 2;
  if (messageId < 0) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$I$I$I", @"Preprocessed message was invalid [messageId =", messageId, @" size=", size, @" offset=", offset, @" fragment=", fragmentNum));
  NetI2pRouterTunnelFragmentedMessage *msg = nil;
  @synchronized(self->_fragmentedMessages_) {
    msg = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->_fragmentedMessages_)) getWithId:JavaLangLong_valueOfWithLong_(messageId)]);
    if (msg == nil) {
      msg = JreRetainedLocalValue(create_NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(self->_context_, messageId));
      [self->_fragmentedMessages_ putWithId:JavaLangLong_valueOfWithLong_(messageId) withId:msg];
    }
  }
  @synchronized(msg) {
    jboolean ok = [msg receiveWithInt:fragmentNum withByteArray:preprocessed withInt:offset withInt:size withBoolean:isLast];
    if (!ok) return -1;
    if ([msg isComplete]) {
      @synchronized(self->_fragmentedMessages_) {
        [self->_fragmentedMessages_ removeWithId:JavaLangLong_valueOfWithLong_(messageId)];
      }
      if ([msg getExpireEvent] != nil) [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk([msg getExpireEvent])) cancel];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.fragmentedComplete" withLong:[msg getFragmentCount] withLong:[msg getLifetime]];
      NetI2pRouterTunnelFragmentHandler_receiveCompleteWithNetI2pRouterTunnelFragmentedMessage_(self, msg);
    }
    else {
      [self noteReceptionWithLong:[msg getMessageId] withInt:fragmentNum withId:msg];
      if ([msg getExpireEvent] == nil) {
        NetI2pRouterTunnelFragmentHandler_RemoveFailed *evt = create_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(self, msg);
        [msg setExpireEventWithNetI2pUtilSimpleTimer2_TimedEvent:evt];
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$JCI", @"In ", NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME, @" dropping ", [msg getMessageId], '/', fragmentNum)];
        [evt scheduleWithLong:NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME];
      }
    }
  }
  offset += size;
  return offset;
}

void NetI2pRouterTunnelFragmentHandler_receiveCompleteWithNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *self, NetI2pRouterTunnelFragmentedMessage *msg) {
  if (msg == nil) return;
  self->_completed_++;
  NSString *stringified = nil;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) stringified = [msg description];
  IOSByteArray *data = nil;
  @try {
    jint fragmentCount = [msg getFragmentCount];
    data = [msg toByteArray];
    if (data == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"null data");
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$", @"RECV(", data->size_, @"): ")];
    id<NetI2pDataI2npI2NPMessage> m = [create_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(self->_context_) readMessageWithByteArray:data];
    [self noteReceptionWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getUniqueId] withInt:fragmentCount - 1 withId:@"complete: "];
    [self noteCompletionWithLong:[m getUniqueId]];
    [((id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver>) nil_chk(self->_receiver_)) receiveCompleteWithNetI2pDataI2npI2NPMessage:m withNetI2pDataHash:[msg getTargetRouter] withNetI2pDataTunnelId:[msg getTargetTunnel]];
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    if (stringified == nil) stringified = [msg description];
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [self->_log_ warnWithNSString:JreStrcat("$$", @"Error receiving fragmented message (corrupt?): ", stringified) withJavaLangThrowable:ime];
      [self->_log_ warnWithNSString:JreStrcat("$$", @"DUMP:\n", NetI2pUtilHexDump_dumpWithByteArray_(data))];
      [self->_log_ warnWithNSString:JreStrcat("$$", @"RAW:\n", NetI2pDataBase64_encodeWithByteArray_(data))];
    }
  }
}

void NetI2pRouterTunnelFragmentHandler_receiveCompleteWithByteArray_withInt_withInt_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterTunnelFragmentHandler *self, IOSByteArray *data, jint offset, jint len, NetI2pDataHash *router, NetI2pDataTunnelId *tunnelId) {
  self->_completed_++;
  @try {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$IC", @"RECV unfrag(", len, ')')];
    NetI2pDataI2npI2NPMessageHandler *h = create_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(self->_context_);
    [h readMessageWithByteArray:data withInt:offset withInt:len];
    id<NetI2pDataI2npI2NPMessage> m = [h lastRead];
    [self noteReceptionWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getUniqueId] withInt:0 withId:@"complete: "];
    [self noteCompletionWithLong:[m getUniqueId]];
    [((id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver>) nil_chk(self->_receiver_)) receiveCompleteWithNetI2pDataI2npI2NPMessage:m withNetI2pDataHash:router withNetI2pDataTunnelId:tunnelId];
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [self->_log_ warnWithNSString:@"Error receiving unfragmented message (corrupt?)" withJavaLangThrowable:ime];
      [self->_log_ warnWithNSString:JreStrcat("$$", @"DUMP:\n", NetI2pUtilHexDump_dumpWithByteArray_withInt_withInt_(data, offset, len))];
      [self->_log_ warnWithNSString:JreStrcat("$$", @"RAW:\n", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, offset, len))];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelFragmentHandler)

@implementation NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(receiveCompleteWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "receiveComplete", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "LNetI2pRouterTunnelFragmentHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver = { "DefragmentedReceiver", "net.i2p.router.tunnel", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver)

@implementation NetI2pRouterTunnelFragmentHandler_RemoveFailed

- (instancetype)initWithNetI2pRouterTunnelFragmentHandler:(NetI2pRouterTunnelFragmentHandler *)outer$
                  withNetI2pRouterTunnelFragmentedMessage:(NetI2pRouterTunnelFragmentedMessage *)msg {
  NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(self, outer$, msg);
  return self;
}

- (void)timeReached {
  jboolean removed = false;
  @synchronized(this$0_->_fragmentedMessages_) {
    removed = (nil != [((id<JavaUtilMap>) nil_chk(this$0_->_fragmentedMessages_)) removeWithId:JavaLangLong_valueOfWithLong_([((NetI2pRouterTunnelFragmentedMessage *) nil_chk(_msg_)) getMessageId])]);
  }
  @synchronized(_msg_) {
    if (removed && ![_msg_ getReleased]) {
      this$0_->_failed_++;
      [this$0_ noteFailureWithLong:[_msg_ getMessageId] withNSString:[_msg_ description]];
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Dropped incomplete fragmented message: ", _msg_)];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"tunnel.fragmentedDropped" withLong:[_msg_ getFragmentCount] withLong:[_msg_ getLifetime]];
      [_msg_ failed];
    }
    else {
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelFragmentHandler:withNetI2pRouterTunnelFragmentedMessage:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelFragmentHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pRouterTunnelFragmentedMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTunnelFragmentedMessage;", "LNetI2pRouterTunnelFragmentHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelFragmentHandler_RemoveFailed = { "RemoveFailed", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelFragmentHandler_RemoveFailed;
}

@end

void NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler_RemoveFailed *self, NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTunnelFragmentHandler_RemoveFailed *new_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelFragmentHandler_RemoveFailed, initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_, outer$, msg)
}

NetI2pRouterTunnelFragmentHandler_RemoveFailed *create_NetI2pRouterTunnelFragmentHandler_RemoveFailed_initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_(NetI2pRouterTunnelFragmentHandler *outer$, NetI2pRouterTunnelFragmentedMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelFragmentHandler_RemoveFailed, initWithNetI2pRouterTunnelFragmentHandler_withNetI2pRouterTunnelFragmentedMessage_, outer$, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelFragmentHandler_RemoveFailed)
