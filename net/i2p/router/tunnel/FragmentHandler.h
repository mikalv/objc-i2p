//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/FragmentHandler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler")
#ifdef RESTRICT_NetI2pRouterTunnelFragmentHandler
#define INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler 0
#else
#define INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler 1
#endif
#undef RESTRICT_NetI2pRouterTunnelFragmentHandler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTunnelFragmentHandler_) && (INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler || defined(INCLUDE_NetI2pRouterTunnelFragmentHandler))
#define NetI2pRouterTunnelFragmentHandler_

@class IOSByteArray;
@class NetI2pRouterRouterContext;
@class NetI2pUtilLog;
@protocol NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver;

@interface NetI2pRouterTunnelFragmentHandler : NSObject {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
}
@property (class) jlong MAX_DEFRAGMENT_TIME NS_SWIFT_NAME(MAX_DEFRAGMENT_TIME);
@property (readonly, class) jbyte MASK_IS_SUBSEQUENT NS_SWIFT_NAME(MASK_IS_SUBSEQUENT);
@property (readonly, class) jbyte MASK_TYPE NS_SWIFT_NAME(MASK_TYPE);
@property (readonly, class) jbyte MASK_FRAGMENTED NS_SWIFT_NAME(MASK_FRAGMENTED);
@property (readonly, class) jbyte MASK_EXTENDED NS_SWIFT_NAME(MASK_EXTENDED);
@property (readonly, class) jshort TYPE_LOCAL NS_SWIFT_NAME(TYPE_LOCAL);
@property (readonly, class) jshort TYPE_TUNNEL NS_SWIFT_NAME(TYPE_TUNNEL);
@property (readonly, class) jshort TYPE_ROUTER NS_SWIFT_NAME(TYPE_ROUTER);
@property (readonly, class) jshort TYPE_UNDEF NS_SWIFT_NAME(TYPE_UNDEF);

+ (jlong)MAX_DEFRAGMENT_TIME;

+ (void)setMAX_DEFRAGMENT_TIME:(jlong)value;

+ (jbyte)MASK_IS_SUBSEQUENT;

+ (jbyte)MASK_TYPE;

+ (jbyte)MASK_FRAGMENTED;

+ (jbyte)MASK_EXTENDED;

+ (jshort)TYPE_LOCAL;

+ (jshort)TYPE_TUNNEL;

+ (jshort)TYPE_ROUTER;

+ (jshort)TYPE_UNDEF;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
 withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver:(id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver>)receiver;

- (jint)getCompleteCount;

- (jint)getFailedCount;

- (void)receiveTunnelMessageWithByteArray:(IOSByteArray *)preprocessed
                                  withInt:(jint)offset
                                  withInt:(jint)length;

#pragma mark Protected

- (void)noteCompletionWithLong:(jlong)messageId;

- (void)noteFailureWithLong:(jlong)messageId
               withNSString:(NSString *)status;

- (void)noteReceptionWithLong:(jlong)messageId
                      withInt:(jint)fragmentId
                       withId:(id)status;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTunnelFragmentHandler)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentHandler, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentHandler, _log_, NetI2pUtilLog *)

inline jlong NetI2pRouterTunnelFragmentHandler_get_MAX_DEFRAGMENT_TIME(void);
inline jlong NetI2pRouterTunnelFragmentHandler_set_MAX_DEFRAGMENT_TIME(jlong value);
inline jlong *NetI2pRouterTunnelFragmentHandler_getRef_MAX_DEFRAGMENT_TIME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong NetI2pRouterTunnelFragmentHandler_MAX_DEFRAGMENT_TIME;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pRouterTunnelFragmentHandler, MAX_DEFRAGMENT_TIME, jlong)

inline jbyte NetI2pRouterTunnelFragmentHandler_get_MASK_IS_SUBSEQUENT(void);
#define NetI2pRouterTunnelFragmentHandler_MASK_IS_SUBSEQUENT -128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, MASK_IS_SUBSEQUENT, jbyte)

inline jbyte NetI2pRouterTunnelFragmentHandler_get_MASK_TYPE(void);
#define NetI2pRouterTunnelFragmentHandler_MASK_TYPE 96
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, MASK_TYPE, jbyte)

inline jbyte NetI2pRouterTunnelFragmentHandler_get_MASK_FRAGMENTED(void);
#define NetI2pRouterTunnelFragmentHandler_MASK_FRAGMENTED 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, MASK_FRAGMENTED, jbyte)

inline jbyte NetI2pRouterTunnelFragmentHandler_get_MASK_EXTENDED(void);
#define NetI2pRouterTunnelFragmentHandler_MASK_EXTENDED 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, MASK_EXTENDED, jbyte)

inline jshort NetI2pRouterTunnelFragmentHandler_get_TYPE_LOCAL(void);
#define NetI2pRouterTunnelFragmentHandler_TYPE_LOCAL 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, TYPE_LOCAL, jshort)

inline jshort NetI2pRouterTunnelFragmentHandler_get_TYPE_TUNNEL(void);
#define NetI2pRouterTunnelFragmentHandler_TYPE_TUNNEL 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, TYPE_TUNNEL, jshort)

inline jshort NetI2pRouterTunnelFragmentHandler_get_TYPE_ROUTER(void);
#define NetI2pRouterTunnelFragmentHandler_TYPE_ROUTER 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, TYPE_ROUTER, jshort)

inline jshort NetI2pRouterTunnelFragmentHandler_get_TYPE_UNDEF(void);
#define NetI2pRouterTunnelFragmentHandler_TYPE_UNDEF 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentHandler, TYPE_UNDEF, jshort)

FOUNDATION_EXPORT void NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterTunnelFragmentHandler *self, NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver);

FOUNDATION_EXPORT NetI2pRouterTunnelFragmentHandler *new_NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelFragmentHandler *create_NetI2pRouterTunnelFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver> receiver);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelFragmentHandler)

#endif

#if !defined (NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_) && (INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler || defined(INCLUDE_NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver))
#define NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_

@class NetI2pDataHash;
@class NetI2pDataTunnelId;
@protocol NetI2pDataI2npI2NPMessage;

@protocol NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver < JavaObject >

- (void)receiveCompleteWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                                  withNetI2pDataHash:(NetI2pDataHash *)toRouter
                              withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver)

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTunnelFragmentHandler")
