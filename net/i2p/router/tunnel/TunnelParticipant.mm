//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/TunnelParticipant.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/TunnelDataMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/tunnel/FragmentHandler.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/InboundEndpointProcessor.h"
#include "net/i2p/router/tunnel/InboundMessageDistributor.h"
#include "net/i2p/router/tunnel/RouterFragmentHandler.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/TunnelParticipant.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTunnelTunnelParticipant () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelHopConfig *_config_;
  NetI2pRouterTunnelHopProcessor *_processor_;
  NetI2pRouterTunnelInboundEndpointProcessor *_inboundEndpointProcessor_;
  NetI2pRouterTunnelInboundMessageDistributor *_inboundDistributor_;
  NetI2pRouterTunnelFragmentHandler *_handler_;
  NetI2pDataRouterRouterInfo *_nextHopCache_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
               withNetI2pRouterTunnelHopProcessor:(NetI2pRouterTunnelHopProcessor *)processor
   withNetI2pRouterTunnelInboundEndpointProcessor:(NetI2pRouterTunnelInboundEndpointProcessor *)inEndProc;

- (void)sendWithNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg
             withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _config_, NetI2pRouterTunnelHopConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _processor_, NetI2pRouterTunnelHopProcessor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _inboundEndpointProcessor_, NetI2pRouterTunnelInboundEndpointProcessor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _inboundDistributor_, NetI2pRouterTunnelInboundMessageDistributor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _handler_, NetI2pRouterTunnelFragmentHandler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant, _nextHopCache_, NetI2pDataRouterRouterInfo *)

inline jlong NetI2pRouterTunnelTunnelParticipant_get_MAX_LOOKUP_TIME(void);
#define NetI2pRouterTunnelTunnelParticipant_MAX_LOOKUP_TIME 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelTunnelParticipant, MAX_LOOKUP_TIME, jlong)

inline jlong NetI2pRouterTunnelTunnelParticipant_get_LONG_MAX_LOOKUP_TIME(void);
#define NetI2pRouterTunnelTunnelParticipant_LONG_MAX_LOOKUP_TIME 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelTunnelParticipant, LONG_MAX_LOOKUP_TIME, jlong)

inline jint NetI2pRouterTunnelTunnelParticipant_get_PRIORITY(void);
#define NetI2pRouterTunnelTunnelParticipant_PRIORITY 200
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelTunnelParticipant, PRIORITY, jint)

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc);

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant *new_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant *create_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc);

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterTunnelHopConfig *config, NetI2pDataI2npTunnelDataMessage *msg, NetI2pDataRouterRouterInfo *ri);

@interface NetI2pRouterTunnelTunnelParticipant_Found : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelTunnelParticipant *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelTunnelParticipant_Found)

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant_Found *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_Found *new_NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_Found *create_NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelTunnelParticipant_Found)

@interface NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler : NSObject < NetI2pRouterTunnelFragmentHandler_DefragmentedReceiver > {
 @public
  NetI2pRouterTunnelTunnelParticipant *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$;

- (void)receiveCompleteWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                                  withNetI2pDataHash:(NetI2pDataHash *)toRouter
                              withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler)

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *self, NetI2pRouterTunnelTunnelParticipant *outer$);

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *new_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *create_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler)

@interface NetI2pRouterTunnelTunnelParticipant_SendJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelTunnelParticipant *this$0_;
  NetI2pDataI2npTunnelDataMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelTunnelParticipant_SendJob)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant_SendJob, _msg_, NetI2pDataI2npTunnelDataMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant_SendJob *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_SendJob *new_NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_SendJob *create_NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelTunnelParticipant_SendJob)

@interface NetI2pRouterTunnelTunnelParticipant_TimeoutJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelTunnelParticipant *this$0_;
  NetI2pDataI2npTunnelDataMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelTunnelParticipant_TimeoutJob)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelParticipant_TimeoutJob, _msg_, NetI2pDataI2npTunnelDataMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant_TimeoutJob *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_TimeoutJob *new_NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelTunnelParticipant_TimeoutJob *create_NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelTunnelParticipant_TimeoutJob)

@implementation NetI2pRouterTunnelTunnelParticipant

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
               withNetI2pRouterTunnelHopProcessor:(NetI2pRouterTunnelHopProcessor *)processor {
  NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_(self, ctx, config, processor);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
   withNetI2pRouterTunnelInboundEndpointProcessor:(NetI2pRouterTunnelInboundEndpointProcessor *)inEndProc {
  NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_(self, ctx, inEndProc);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
               withNetI2pRouterTunnelHopProcessor:(NetI2pRouterTunnelHopProcessor *)processor
   withNetI2pRouterTunnelInboundEndpointProcessor:(NetI2pRouterTunnelInboundEndpointProcessor *)inEndProc {
  NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(self, ctx, config, processor, inEndProc);
  return self;
}

- (void)dispatchWithNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg
                                 withNetI2pDataHash:(NetI2pDataHash *)recvFrom {
  jboolean ok = false;
  if (_processor_ != nil) ok = [_processor_ processWithByteArray:[((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getData] withInt:0 withInt:((IOSByteArray *) nil_chk([msg getData]))->size_ withNetI2pDataHash:recvFrom];
  else if (_inboundEndpointProcessor_ != nil) ok = [_inboundEndpointProcessor_ retrievePreprocessedDataWithByteArray:[((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getData] withInt:0 withInt:((IOSByteArray *) nil_chk([msg getData]))->size_ withNetI2pDataHash:recvFrom];
  if (!ok) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$@", @"Failed to dispatch ", msg, @": processor=", _processor_, @" inboundEndpoint=", _inboundEndpointProcessor_)];
    if (_config_ != nil) [_config_ incrementProcessedMessages];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.corruptMessage" withLong:1 withLong:1];
    return;
  }
  if ((_config_ != nil) && ([((NetI2pRouterTunnelHopConfig *) nil_chk(_config_)) getSendTo] != nil)) {
    [((NetI2pRouterTunnelHopConfig *) nil_chk(_config_)) incrementProcessedMessages];
    NetI2pDataRouterRouterInfo *ri = _nextHopCache_;
    if (ri == nil) ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[_config_ getSendTo]];
    if (ri != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Send off to nextHop directly (", [_config_ getSendTo], @" for ", msg)];
      NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(self, _config_, msg, ri);
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Lookup the nextHop (", [_config_ getSendTo], @" for ", msg)];
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoWithNetI2pDataHash:[_config_ getSendTo] withNetI2pRouterJob:create_NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, _context_, msg) withNetI2pRouterJob:create_NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, _context_, msg) withLong:NetI2pRouterTunnelTunnelParticipant_MAX_LOOKUP_TIME];
    }
  }
  else {
    [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk([((NetI2pRouterTunnelInboundEndpointProcessor *) nil_chk(_inboundEndpointProcessor_)) getConfig])) incrementProcessedMessages];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Receive fragment: on ", _config_, @": ", msg)];
    [((NetI2pRouterTunnelFragmentHandler *) nil_chk(_handler_)) receiveTunnelMessageWithByteArray:[((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getData] withInt:0 withInt:((IOSByteArray *) nil_chk([msg getData]))->size_];
  }
}

- (jint)getCompleteCount {
  if (_handler_ != nil) return [_handler_ getCompleteCount];
  else return 0;
}

- (jint)getFailedCount {
  if (_handler_ != nil) return [_handler_ getFailedCount];
  else return 0;
}

- (void)sendWithNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg
             withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(self, config, msg, ri);
}

- (NSString *)description {
  if (_config_ != nil) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"participant at "])) appendWithNSString:[_config_ description]];
    return [buf description];
  }
  else {
    return @"inbound endpoint";
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_config_);
  RELEASE_(_processor_);
  RELEASE_(_inboundEndpointProcessor_);
  RELEASE_(_inboundDistributor_);
  RELEASE_(_handler_);
  RELEASE_(_nextHopCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelHopConfig:withNetI2pRouterTunnelHopProcessor:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelInboundEndpointProcessor:);
  methods[2].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelHopConfig:withNetI2pRouterTunnelHopProcessor:withNetI2pRouterTunnelInboundEndpointProcessor:);
  methods[3].selector = @selector(dispatchWithNetI2pDataI2npTunnelDataMessage:withNetI2pDataHash:);
  methods[4].selector = @selector(getCompleteCount);
  methods[5].selector = @selector(getFailedCount);
  methods[6].selector = @selector(sendWithNetI2pRouterTunnelHopConfig:withNetI2pDataI2npTunnelDataMessage:withNetI2pDataRouterRouterInfo:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pRouterTunnelHopConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_processor_", "LNetI2pRouterTunnelHopProcessor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inboundEndpointProcessor_", "LNetI2pRouterTunnelInboundEndpointProcessor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inboundDistributor_", "LNetI2pRouterTunnelInboundMessageDistributor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_handler_", "LNetI2pRouterTunnelFragmentHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextHopCache_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_LOOKUP_TIME", "J", .constantValue.asLong = NetI2pRouterTunnelTunnelParticipant_MAX_LOOKUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "LONG_MAX_LOOKUP_TIME", "J", .constantValue.asLong = NetI2pRouterTunnelTunnelParticipant_LONG_MAX_LOOKUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelTunnelParticipant_PRIORITY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelHopConfig;LNetI2pRouterTunnelHopProcessor;", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelInboundEndpointProcessor;", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelHopConfig;LNetI2pRouterTunnelHopProcessor;LNetI2pRouterTunnelInboundEndpointProcessor;", "dispatch", "LNetI2pDataI2npTunnelDataMessage;LNetI2pDataHash;", "send", "LNetI2pRouterTunnelHopConfig;LNetI2pDataI2npTunnelDataMessage;LNetI2pDataRouterRouterInfo;", "toString", "LNetI2pRouterTunnelTunnelParticipant_Found;LNetI2pRouterTunnelTunnelParticipant_DefragmentedHandler;LNetI2pRouterTunnelTunnelParticipant_SendJob;LNetI2pRouterTunnelTunnelParticipant_TimeoutJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelParticipant = { "TunnelParticipant", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 8, 11, -1, 8, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelParticipant;
}

@end

void NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor) {
  NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(self, ctx, config, processor, nil);
}

NetI2pRouterTunnelTunnelParticipant *new_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_, ctx, config, processor)
}

NetI2pRouterTunnelTunnelParticipant *create_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_, ctx, config, processor)
}

void NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(self, ctx, nil, nil, inEndProc);
}

NetI2pRouterTunnelTunnelParticipant *new_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_, ctx, inEndProc)
}

NetI2pRouterTunnelTunnelParticipant *create_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelInboundEndpointProcessor_, ctx, inEndProc)
}

void NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelTunnelParticipant_class_()]);
  JreStrongAssign(&self->_config_, config);
  JreStrongAssign(&self->_processor_, processor);
  if ((config == nil) || ([((NetI2pRouterTunnelHopConfig *) nil_chk(config)) getSendTo] == nil)) JreStrongAssignAndConsume(&self->_handler_, new_NetI2pRouterTunnelRouterFragmentHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelFragmentHandler_DefragmentedReceiver_(ctx, create_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(self)));
  else JreStrongAssign(&self->_handler_, nil);
  JreStrongAssign(&self->_inboundEndpointProcessor_, inEndProc);
  if (inEndProc != nil) JreStrongAssignAndConsume(&self->_inboundDistributor_, new_NetI2pRouterTunnelInboundMessageDistributor_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(ctx, [inEndProc getDestination]));
  else JreStrongAssign(&self->_inboundDistributor_, nil);
  if ((self->_config_ != nil) && ([((NetI2pRouterTunnelHopConfig *) nil_chk(self->_config_)) getSendTo] != nil)) {
    JreStrongAssign(&self->_nextHopCache_, [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelHopConfig *) nil_chk(self->_config_)) getSendTo]]);
    if (self->_nextHopCache_ == nil) [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoWithNetI2pDataHash:[self->_config_ getSendTo] withNetI2pRouterJob:create_NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(self, self->_context_) withNetI2pRouterJob:nil withLong:NetI2pRouterTunnelTunnelParticipant_LONG_MAX_LOOKUP_TIME];
  }
}

NetI2pRouterTunnelTunnelParticipant *new_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_, ctx, config, processor, inEndProc)
}

NetI2pRouterTunnelTunnelParticipant *create_NetI2pRouterTunnelTunnelParticipant_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *config, NetI2pRouterTunnelHopProcessor *processor, NetI2pRouterTunnelInboundEndpointProcessor *inEndProc) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelHopProcessor_withNetI2pRouterTunnelInboundEndpointProcessor_, ctx, config, processor, inEndProc)
}

void NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(NetI2pRouterTunnelTunnelParticipant *self, NetI2pRouterTunnelHopConfig *config, NetI2pDataI2npTunnelDataMessage *msg, NetI2pDataRouterRouterInfo *ri) {
  if ([((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) tunnelDispatcher])) shouldDropParticipatingMessageWithNetI2pRouterTunnelTunnelDispatcher_Location:JreLoadEnum(NetI2pRouterTunnelTunnelDispatcher_Location, PARTICIPANT) withInt:NetI2pDataI2npTunnelDataMessage_MESSAGE_TYPE withInt:1024]) return;
  [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([self->_context_ bandwidthLimiter])) sentParticipatingMessageWithInt:1024];
  jlong oldId = [((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getUniqueId];
  jlong newId = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
  [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) wrapWithNSString:@"TunnelDataMessage" withLong:oldId withNSString:@"TunnelDataMessage" withLong:newId];
  [msg setUniqueIdWithLong:newId];
  [msg setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 10 * 1000];
  [msg setTunnelIdWithNetI2pDataTunnelId:[((NetI2pRouterTunnelHopConfig *) nil_chk(config)) getSendTunnel]];
  NetI2pRouterOutNetMessage *m = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self->_context_, msg, [msg getMessageExpiration], NetI2pRouterTunnelTunnelParticipant_PRIORITY, ri);
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Forward on from ", self->_config_, @": ", msg)];
  [((NetI2pRouterOutNetMessagePool *) nil_chk([self->_context_ outNetMessagePool])) addWithNetI2pRouterOutNetMessage:m];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelParticipant)

@implementation NetI2pRouterTunnelTunnelParticipant_Found

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Next hop info found";
}

- (void)runJob {
  if (this$0_->_nextHopCache_ == nil) {
    JreStrongAssign(&this$0_->_nextHopCache_, [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelHopConfig *) nil_chk(this$0_->_config_)) getSendTo]]);
    [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.participantLookupSuccess" withLong:1];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelTunnelParticipant:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelTunnelParticipant;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterTunnelTunnelParticipant;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelParticipant_Found = { "Found", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelParticipant_Found;
}

@end

void NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant_Found *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterTunnelTunnelParticipant_Found *new_NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant_Found, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterTunnelTunnelParticipant_Found *create_NetI2pRouterTunnelTunnelParticipant_Found_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant_Found, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelParticipant_Found)

@implementation NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$ {
  NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(self, outer$);
  return self;
}

- (void)receiveCompleteWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                                  withNetI2pDataHash:(NetI2pDataHash *)toRouter
                              withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@$@", @"Receive complete: on ", this$0_->_config_, @": ", msg)];
  [((NetI2pRouterTunnelInboundMessageDistributor *) nil_chk(this$0_->_inboundDistributor_)) distributeWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataHash:toRouter withNetI2pDataTunnelId:toTunnel];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelTunnelParticipant:);
  methods[1].selector = @selector(receiveCompleteWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelTunnelParticipant;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receiveComplete", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "LNetI2pRouterTunnelTunnelParticipant;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler = { "DefragmentedHandler", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler;
}

@end

void NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *self, NetI2pRouterTunnelTunnelParticipant *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *new_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler, initWithNetI2pRouterTunnelTunnelParticipant_, outer$)
}

NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler *create_NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler_initWithNetI2pRouterTunnelTunnelParticipant_(NetI2pRouterTunnelTunnelParticipant *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler, initWithNetI2pRouterTunnelTunnelParticipant_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelParticipant_DefragmentedHandler)

@implementation NetI2pRouterTunnelTunnelParticipant_SendJob

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg {
  NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, outer$, ctx, msg);
  return self;
}

- (NSString *)getName {
  return @"Participant send after lookup";
}

- (void)runJob {
  if (this$0_->_nextHopCache_ != nil) {
    NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(this$0_, this$0_->_config_, _msg_, this$0_->_nextHopCache_);
  }
  else {
    NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelHopConfig *) nil_chk(this$0_->_config_)) getSendTo]];
    jint stat;
    if (ri != nil) {
      JreStrongAssign(&this$0_->_nextHopCache_, ri);
      NetI2pRouterTunnelTunnelParticipant_sendWithNetI2pRouterTunnelHopConfig_withNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(this$0_, this$0_->_config_, _msg_, ri);
      stat = 1;
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Lookup the nextHop (", [this$0_->_config_ getSendTo], @" failed!  where do we go for ", this$0_->_config_, @"?  msg dropped: ", _msg_)];
      stat = 0;
    }
    [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.participantLookupSuccess" withLong:stat];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelTunnelParticipant:withNetI2pRouterRouterContext:withNetI2pDataI2npTunnelDataMessage:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelTunnelParticipant;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pDataI2npTunnelDataMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npTunnelDataMessage;", "LNetI2pRouterTunnelTunnelParticipant;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelParticipant_SendJob = { "SendJob", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelParticipant_SendJob;
}

@end

void NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant_SendJob *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTunnelTunnelParticipant_SendJob *new_NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant_SendJob, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

NetI2pRouterTunnelTunnelParticipant_SendJob *create_NetI2pRouterTunnelTunnelParticipant_SendJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant_SendJob, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelParticipant_SendJob)

@implementation NetI2pRouterTunnelTunnelParticipant_TimeoutJob

- (instancetype)initWithNetI2pRouterTunnelTunnelParticipant:(NetI2pRouterTunnelTunnelParticipant *)outer$
                              withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg {
  NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, outer$, ctx, msg);
  return self;
}

- (NSString *)getName {
  return @"Participant next hop lookup timeout";
}

- (void)runJob {
  if (this$0_->_nextHopCache_ != nil) return;
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelHopConfig *) nil_chk(this$0_->_config_)) getSendTo]];
  if (ri != nil) {
    JreStrongAssign(&this$0_->_nextHopCache_, ri);
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Lookup the nextHop (", [this$0_->_config_ getSendTo], @" failed, but we found it!!  where do we go for ", this$0_->_config_, @"?  msg dropped: ", _msg_)];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$@$@", @"Lookup the nextHop (", [this$0_->_config_ getSendTo], @" failed!  where do we go for ", this$0_->_config_, @"?  msg dropped: ", _msg_)];
  }
  [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.participantLookupSuccess" withLong:0];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelTunnelParticipant:withNetI2pRouterRouterContext:withNetI2pDataI2npTunnelDataMessage:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelTunnelParticipant;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pDataI2npTunnelDataMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npTunnelDataMessage;", "LNetI2pRouterTunnelTunnelParticipant;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelParticipant_TimeoutJob = { "TimeoutJob", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelParticipant_TimeoutJob;
}

@end

void NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant_TimeoutJob *self, NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTunnelTunnelParticipant_TimeoutJob *new_NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelParticipant_TimeoutJob, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

NetI2pRouterTunnelTunnelParticipant_TimeoutJob *create_NetI2pRouterTunnelTunnelParticipant_TimeoutJob_initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelTunnelParticipant *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelParticipant_TimeoutJob, initWithNetI2pRouterTunnelTunnelParticipant_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelParticipant_TimeoutJob)
