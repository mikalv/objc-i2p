//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/HopProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/tunnel/HashSetIVValidator.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/IVValidator.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTunnelHopProcessor () {
 @public
  NetI2pUtilLog *_log_;
  id<NetI2pRouterTunnelIVValidator> _validator_;
}

+ (id<NetI2pRouterTunnelIVValidator>)createValidator;

- (void)encryptWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length;

- (void)updateIVWithByteArray:(IOSByteArray *)orig
                      withInt:(jint)offset;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelHopProcessor, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelHopProcessor, _validator_, id<NetI2pRouterTunnelIVValidator>)

__attribute__((unused)) static id<NetI2pRouterTunnelIVValidator> NetI2pRouterTunnelHopProcessor_createValidator(void);

__attribute__((unused)) static void NetI2pRouterTunnelHopProcessor_encryptWithByteArray_withInt_withInt_(NetI2pRouterTunnelHopProcessor *self, IOSByteArray *data, jint offset, jint length);

__attribute__((unused)) static void NetI2pRouterTunnelHopProcessor_updateIVWithByteArray_withInt_(NetI2pRouterTunnelHopProcessor *self, IOSByteArray *orig, jint offset);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelHopProcessor__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelHopProcessor__Annotations$1(void);

@implementation NetI2pRouterTunnelHopProcessor

+ (jint)IV_LENGTH {
  return NetI2pRouterTunnelHopProcessor_IV_LENGTH;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
            withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config {
  NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(self, ctx, config);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
            withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
          withNetI2pRouterTunnelIVValidator:(id<NetI2pRouterTunnelIVValidator>)validator {
  NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(self, ctx, config, validator);
  return self;
}

+ (id<NetI2pRouterTunnelIVValidator>)createValidator {
  return NetI2pRouterTunnelHopProcessor_createValidator();
}

- (jboolean)processWithByteArray:(IOSByteArray *)orig
                         withInt:(jint)offset
                         withInt:(jint)length
              withNetI2pDataHash:(NetI2pDataHash *)prev {
  if (prev != nil) {
    if ([((NetI2pRouterTunnelHopConfig *) nil_chk(_config_)) getReceiveFrom] == nil) {
      [_config_ setReceiveFromWithNetI2pDataHash:prev];
    }
    else if (![((NetI2pDataHash *) nil_chk([_config_ getReceiveFrom])) isEqual:prev]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Attempted mid-tunnel injection from ", prev, @", expected ", [_config_ getReceiveFrom])];
      return false;
    }
  }
  jboolean okIV = [((id<NetI2pRouterTunnelIVValidator>) nil_chk(_validator_)) receiveIVWithByteArray:orig withInt:offset withByteArray:orig withInt:offset + NetI2pRouterTunnelHopProcessor_IV_LENGTH];
  if (!okIV) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Invalid IV, dropping at hop ", _config_)];
    return false;
  }
  NetI2pRouterTunnelHopProcessor_updateIVWithByteArray_withInt_(self, orig, offset);
  NetI2pRouterTunnelHopProcessor_encryptWithByteArray_withInt_withInt_(self, orig, offset, length);
  NetI2pRouterTunnelHopProcessor_updateIVWithByteArray_withInt_(self, orig, offset);
  return true;
}

- (void)encryptWithByteArray:(IOSByteArray *)data
                     withInt:(jint)offset
                     withInt:(jint)length {
  NetI2pRouterTunnelHopProcessor_encryptWithByteArray_withInt_withInt_(self, data, offset, length);
}

- (void)updateIVWithByteArray:(IOSByteArray *)orig
                      withInt:(jint)offset {
  NetI2pRouterTunnelHopProcessor_updateIVWithByteArray_withInt_(self, orig, offset);
}

- (NSString *)description {
  return JreStrcat("$$@", [[self java_getClass] getSimpleName], @" for ", _config_);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_config_);
  RELEASE_(_validator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelIVValidator;", 0xa, -1, -1, -1, -1, 3, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTunnelHopConfig:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTunnelHopConfig:withNetI2pRouterTunnelIVValidator:);
  methods[2].selector = @selector(createValidator);
  methods[3].selector = @selector(processWithByteArray:withInt:withInt:withNetI2pDataHash:);
  methods[4].selector = @selector(encryptWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(updateIVWithByteArray:withInt:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pRouterTunnelHopConfig;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_validator_", "LNetI2pRouterTunnelIVValidator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "IV_LENGTH", "I", .constantValue.asInt = NetI2pRouterTunnelHopProcessor_IV_LENGTH, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pRouterTunnelHopConfig;", (void *)&NetI2pRouterTunnelHopProcessor__Annotations$0, "LNetI2pI2PAppContext;LNetI2pRouterTunnelHopConfig;LNetI2pRouterTunnelIVValidator;", (void *)&NetI2pRouterTunnelHopProcessor__Annotations$1, "process", "[BIILNetI2pDataHash;", "encrypt", "[BII", "updateIV", "[BI", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelHopProcessor = { "HopProcessor", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 7, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelHopProcessor;
}

@end

void NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelHopProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(self, ctx, config, NetI2pRouterTunnelHopProcessor_createValidator());
}

NetI2pRouterTunnelHopProcessor *new_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelHopProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_, ctx, config)
}

NetI2pRouterTunnelHopProcessor *create_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelHopProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_, ctx, config)
}

void NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pRouterTunnelHopProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelHopProcessor_class_()]);
  JreStrongAssign(&self->_config_, config);
  JreStrongAssign(&self->_validator_, validator);
}

NetI2pRouterTunnelHopProcessor *new_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelHopProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_, ctx, config, validator)
}

NetI2pRouterTunnelHopProcessor *create_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelHopProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_, ctx, config, validator)
}

id<NetI2pRouterTunnelIVValidator> NetI2pRouterTunnelHopProcessor_createValidator() {
  NetI2pRouterTunnelHopProcessor_initialize();
  return create_NetI2pRouterTunnelHashSetIVValidator_init();
}

void NetI2pRouterTunnelHopProcessor_encryptWithByteArray_withInt_withInt_(NetI2pRouterTunnelHopProcessor *self, IOSByteArray *data, jint offset, jint length) {
  for (jint off = offset + NetI2pRouterTunnelHopProcessor_IV_LENGTH; off < length; off += NetI2pRouterTunnelHopProcessor_IV_LENGTH) {
    for (jint j = 0; j < NetI2pRouterTunnelHopProcessor_IV_LENGTH; j++) {
      *IOSByteArray_GetRef(nil_chk(data), off + j) ^= IOSByteArray_Get(data, (off - NetI2pRouterTunnelHopProcessor_IV_LENGTH) + j);
    }
    [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) aes])) encryptBlockWithByteArray:data withInt:off withNetI2pDataSessionKey:[((NetI2pRouterTunnelHopConfig *) nil_chk(self->_config_)) getLayerKey] withByteArray:data withInt:off];
  }
}

void NetI2pRouterTunnelHopProcessor_updateIVWithByteArray_withInt_(NetI2pRouterTunnelHopProcessor *self, IOSByteArray *orig, jint offset) {
  [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) aes])) encryptBlockWithByteArray:orig withInt:offset withNetI2pDataSessionKey:[((NetI2pRouterTunnelHopConfig *) nil_chk(self->_config_)) getIVKey] withByteArray:orig withInt:offset];
}

IOSObjectArray *NetI2pRouterTunnelHopProcessor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTunnelHopProcessor__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelHopProcessor)
