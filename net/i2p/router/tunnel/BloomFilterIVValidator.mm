//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/BloomFilterIVValidator.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tasks/OOMListener.h"
#include "net/i2p/router/tunnel/BloomFilterIVValidator.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/router/util/DecayingHashSet.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTunnelBloomFilterIVValidator () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterUtilDecayingBloomFilter *_filter_;
}

- (void)warnWithLong:(jlong)maxMemory
             withInt:(jint)KBps
            withLong:(jlong)recMaxMem
             withInt:(jint)threshKBps;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelBloomFilterIVValidator, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelBloomFilterIVValidator, _filter_, NetI2pRouterUtilDecayingBloomFilter *)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_HALFLIFE_MS(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, HALFLIFE_MS, jint)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_SHARE_KBPS_TO_USE_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_TO_USE_BLOOM 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_SHARE_KBPS_TO_USE_BLOOM, jint)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_SHARE_KBPS_FOR_BIG_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_BIG_BLOOM 512
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_SHARE_KBPS_FOR_BIG_BLOOM, jint)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_SHARE_KBPS_FOR_HUGE_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE_BLOOM 1536
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_SHARE_KBPS_FOR_HUGE_BLOOM, jint)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM 4096
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_SHARE_KBPS_FOR_HUGE2_BLOOM, jint)

inline jint NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM 8192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_SHARE_KBPS_FOR_HUGE3_BLOOM, jint)

inline jlong NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_MEM_TO_USE_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_TO_USE_BLOOM 67108864LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_MEM_TO_USE_BLOOM, jlong)

inline jlong NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_MEM_FOR_BIG_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_BIG_BLOOM 134217728LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_MEM_FOR_BIG_BLOOM, jlong)

inline jlong NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_MEM_FOR_HUGE_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE_BLOOM 268435456LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_MEM_FOR_HUGE_BLOOM, jlong)

inline jlong NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_MEM_FOR_HUGE2_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE2_BLOOM 402653184LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_MEM_FOR_HUGE2_BLOOM, jlong)

inline jlong NetI2pRouterTunnelBloomFilterIVValidator_get_MIN_MEM_FOR_HUGE3_BLOOM(void);
#define NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE3_BLOOM 536870912LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBloomFilterIVValidator, MIN_MEM_FOR_HUGE3_BLOOM, jlong)

inline NSString *NetI2pRouterTunnelBloomFilterIVValidator_get_PROP_FORCE(void);
static NSString *NetI2pRouterTunnelBloomFilterIVValidator_PROP_FORCE = @"router.forceDecayingBloomFilter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelBloomFilterIVValidator, PROP_FORCE, NSString *)

inline NSString *NetI2pRouterTunnelBloomFilterIVValidator_get_PROP_DISABLE(void);
static NSString *NetI2pRouterTunnelBloomFilterIVValidator_PROP_DISABLE = @"router.disableDecayingBloomFilter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelBloomFilterIVValidator, PROP_DISABLE, NSString *)

__attribute__((unused)) static void NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(NetI2pRouterTunnelBloomFilterIVValidator *self, jlong maxMemory, jint KBps, jlong recMaxMem, jint threshKBps);

@implementation NetI2pRouterTunnelBloomFilterIVValidator

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                          withInt:(jint)KBps {
  NetI2pRouterTunnelBloomFilterIVValidator_initWithNetI2pRouterRouterContext_withInt_(self, ctx, KBps);
  return self;
}

- (jboolean)receiveIVWithByteArray:(IOSByteArray *)ivData
                           withInt:(jint)ivOffset
                     withByteArray:(IOSByteArray *)payload
                           withInt:(jint)payloadOffset {
  if (_filter_ == nil) return true;
  IOSByteArray *buf = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(ivData, ivOffset, payload, payloadOffset, buf, 0, NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  jboolean dup = [_filter_ addWithByteArray:buf];
  NetI2pUtilSimpleByteCache_release__WithByteArray_(buf);
  if (dup) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.duplicateIV" withLong:1];
  return !dup;
}

- (void)destroy {
  if (_filter_ != nil) [_filter_ stopDecaying];
}

- (void)warnWithLong:(jlong)maxMemory
             withInt:(jint)KBps
            withLong:(jlong)recMaxMem
             withInt:(jint)threshKBps {
  NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, recMaxMem, threshKBps);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_filter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withInt:);
  methods[1].selector = @selector(receiveIVWithByteArray:withInt:withByteArray:withInt:);
  methods[2].selector = @selector(destroy);
  methods[3].selector = @selector(warnWithLong:withInt:withLong:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_filter_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "HALFLIFE_MS", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 0x1a, -1, -1, -1, -1 },
    { "MIN_SHARE_KBPS_TO_USE_BLOOM", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_TO_USE_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_SHARE_KBPS_FOR_BIG_BLOOM", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_BIG_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_SHARE_KBPS_FOR_HUGE_BLOOM", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_SHARE_KBPS_FOR_HUGE2_BLOOM", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_SHARE_KBPS_FOR_HUGE3_BLOOM", "I", .constantValue.asInt = NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_MEM_TO_USE_BLOOM", "J", .constantValue.asLong = NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_TO_USE_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_MEM_FOR_BIG_BLOOM", "J", .constantValue.asLong = NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_BIG_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_MEM_FOR_HUGE_BLOOM", "J", .constantValue.asLong = NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_MEM_FOR_HUGE2_BLOOM", "J", .constantValue.asLong = NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE2_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "MIN_MEM_FOR_HUGE3_BLOOM", "J", .constantValue.asLong = NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE3_BLOOM, 0x1a, -1, -1, -1, -1 },
    { "PROP_FORCE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PROP_DISABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;I", "receiveIV", "[BI[BI", "warn", "JIJI", &NetI2pRouterTunnelBloomFilterIVValidator_PROP_FORCE, &NetI2pRouterTunnelBloomFilterIVValidator_PROP_DISABLE };
  static const J2ObjcClassInfo _NetI2pRouterTunnelBloomFilterIVValidator = { "BloomFilterIVValidator", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 4, 15, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelBloomFilterIVValidator;
}

@end

void NetI2pRouterTunnelBloomFilterIVValidator_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterTunnelBloomFilterIVValidator *self, NetI2pRouterRouterContext *ctx, jint KBps) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  if ([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:NetI2pRouterTunnelBloomFilterIVValidator_PROP_FORCE]) {
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV"));
  }
  else if ([self->_context_ getBooleanPropertyWithNSString:NetI2pRouterTunnelBloomFilterIVValidator_PROP_DISABLE]) {
    JreStrongAssign(&self->_filter_, nil);
  }
  else if (KBps < NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_TO_USE_BLOOM || maxMemory < NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_TO_USE_BLOOM) {
    if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_TO_USE_BLOOM) NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_TO_USE_BLOOM, NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_TO_USE_BLOOM);
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV"));
  }
  else if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM && maxMemory >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE3_BLOOM) {
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV", 27));
  }
  else if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM && maxMemory >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE2_BLOOM) {
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV", 26));
    if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM) NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE3_BLOOM, NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE3_BLOOM);
  }
  else if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE_BLOOM && maxMemory >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE_BLOOM) {
    if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM) NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE2_BLOOM, NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE2_BLOOM);
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV", 25));
  }
  else if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_BIG_BLOOM && maxMemory >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_BIG_BLOOM) {
    if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE_BLOOM) NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_HUGE_BLOOM, NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_HUGE_BLOOM);
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV", 24));
  }
  else {
    if (KBps >= NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_BIG_BLOOM) NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(self, maxMemory, KBps, NetI2pRouterTunnelBloomFilterIVValidator_MIN_MEM_FOR_BIG_BLOOM, NetI2pRouterTunnelBloomFilterIVValidator_MIN_SHARE_KBPS_FOR_BIG_BLOOM);
    JreStrongAssignAndConsume(&self->_filter_, new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(ctx, NetI2pRouterTunnelBloomFilterIVValidator_HALFLIFE_MS, 16, @"TunnelIVV"));
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) statManager])) createRateStatWithNSString:@"tunnel.duplicateIV" withNSString:@"Note that a duplicate IV was received" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
}

NetI2pRouterTunnelBloomFilterIVValidator *new_NetI2pRouterTunnelBloomFilterIVValidator_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *ctx, jint KBps) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelBloomFilterIVValidator, initWithNetI2pRouterRouterContext_withInt_, ctx, KBps)
}

NetI2pRouterTunnelBloomFilterIVValidator *create_NetI2pRouterTunnelBloomFilterIVValidator_initWithNetI2pRouterRouterContext_withInt_(NetI2pRouterRouterContext *ctx, jint KBps) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelBloomFilterIVValidator, initWithNetI2pRouterRouterContext_withInt_, ctx, KBps)
}

void NetI2pRouterTunnelBloomFilterIVValidator_warnWithLong_withInt_withLong_withInt_(NetI2pRouterTunnelBloomFilterIVValidator *self, jlong maxMemory, jint KBps, jlong recMaxMem, jint threshKBps) {
  if (NetI2pUtilSystemVersion_isAndroid()) return;
  NSString *path = NetI2pRouterTasksOOMListener_getWrapperConfigPathWithNetI2pRouterRouterContext_(self->_context_);
  NSString *msg = JreStrcat("$$$$$", @"Configured for ", NetI2pDataDataHelper_formatSizeWithLong_(KBps * 1024LL), @"Bps share bandwidth but only ", NetI2pDataDataHelper_formatSizeWithLong_(maxMemory), @"B available memory.");
  if ([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) hasWrapper]) {
    JreStrAppend(&msg, "$$", @" Recommend increasing wrapper.java.maxmemory in ", path);
  }
  else if (!NetI2pUtilSystemVersion_isWindows()) {
    JreStrAppend(&msg, "$@C$", @" Recommend increasing MAXMEMOPT in ", [self->_context_ getBaseDir], JreLoadStatic(JavaIoFile, separatorChar), @"runplain.sh or /usr/bin/i2prouter-nowrapper");
  }
  else {
    JreStrAppend(&msg, "$$", @" Recommend running the restartable version of I2P, and increasing wrapper.java.maxmemory in ", path);
  }
  JreStrAppend(&msg, "$J$$$", @" to at least ", (recMaxMem * 11 / 10 / (1024 * 1024)), @" (MB) if the actual share bandwidth exceeds ", NetI2pDataDataHelper_formatSizeWithLong_(threshKBps * 1024LL), @"Bps.");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"WARN: ", msg)];
  [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([self->_context_ logManager])) getLogWithIOSClass:NetI2pRouterTunnelBloomFilterIVValidator_class_()])) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:msg];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelBloomFilterIVValidator)
