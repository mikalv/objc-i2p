//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/PendingGatewayMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/tunnel/PendingGatewayMessage.h"

@interface NetI2pRouterTunnelPendingGatewayMessage () {
 @public
  id<JavaUtilList> _messageIds_;
  jlong _enqueueTime_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPendingGatewayMessage, _messageIds_, id<JavaUtilList>)

@implementation NetI2pRouterTunnelPendingGatewayMessage

- (instancetype)initWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message
                               withNetI2pDataHash:(NetI2pDataHash *)toRouter
                           withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  NetI2pRouterTunnelPendingGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(self, message, toRouter, toTunnel);
  return self;
}

- (NetI2pDataHash *)getToRouter {
  return _toRouter_;
}

- (NetI2pDataTunnelId *)getToTunnel {
  return _toTunnel_;
}

- (jlong)getMessageId {
  return _messageId_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (IOSByteArray *)getData {
  return _remaining_;
}

- (jint)getOffset {
  return _offset_;
}

- (void)setOffsetWithInt:(jint)offset {
  _offset_ = offset;
}

- (jlong)getLifetime {
  return JavaLangSystem_currentTimeMillis() - _created_;
}

- (jint)getFragmentNumber {
  return _fragmentNumber_;
}

- (void)incrementFragmentNumber {
  _fragmentNumber_++;
}

- (void)addMessageIdWithLong:(jlong)id_ {
  @synchronized(self) {
    if (_messageIds_ == nil) JreStrongAssignAndConsume(&_messageIds_, new_JavaUtilArrayList_init());
    [_messageIds_ addWithId:JavaLangLong_valueOfWithLong_(id_)];
  }
}

- (id<JavaUtilList>)getMessageIds {
  @synchronized(self) {
    if (_messageIds_ != nil) return JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_messageIds_));
    else return JreRetainedLocalValue(create_JavaUtilArrayList_init());
  }
}

- (void)setEnqueueTimeWithLong:(jlong)now {
  _enqueueTime_ = now;
}

- (jlong)getEnqueueTime {
  return _enqueueTime_;
}

- (void)drop {
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Message "])) appendWithLong:_messageId_];
  if (_toRouter_ != nil) {
    [buf appendWithNSString:@" targetting "];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[_toRouter_ toBase64]])) appendWithNSString:@" "];
    if (_toTunnel_ != nil) [buf appendWithLong:[_toTunnel_ getTunnelId]];
  }
  [buf appendWithNSString:@" actual lifetime "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithLong:[self getLifetime]])) appendWithNSString:@"ms"];
  [buf appendWithNSString:@" potential lifetime "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithLong:_expiration_ - _created_])) appendWithNSString:@"ms"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" size "])) appendWithInt:((IOSByteArray *) nil_chk(_remaining_))->size_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" offset "])) appendWithInt:_offset_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" frag "])) appendWithInt:_fragmentNumber_];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_toRouter_);
  RELEASE_(_toTunnel_);
  RELEASE_(_remaining_);
  RELEASE_(_messageIds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[1].selector = @selector(getToRouter);
  methods[2].selector = @selector(getToTunnel);
  methods[3].selector = @selector(getMessageId);
  methods[4].selector = @selector(getExpiration);
  methods[5].selector = @selector(getData);
  methods[6].selector = @selector(getOffset);
  methods[7].selector = @selector(setOffsetWithInt:);
  methods[8].selector = @selector(getLifetime);
  methods[9].selector = @selector(getFragmentNumber);
  methods[10].selector = @selector(incrementFragmentNumber);
  methods[11].selector = @selector(addMessageIdWithLong:);
  methods[12].selector = @selector(getMessageIds);
  methods[13].selector = @selector(setEnqueueTimeWithLong:);
  methods[14].selector = @selector(getEnqueueTime);
  methods[15].selector = @selector(drop);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_toRouter_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_toTunnel_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_messageId_", "J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_remaining_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_offset_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_fragmentNumber_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_created_", "J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_messageIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "_enqueueTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "setOffset", "I", "addMessageId", "J", "()Ljava/util/List<Ljava/lang/Long;>;", "setEnqueueTime", "toString", "Ljava/util/List<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPendingGatewayMessage = { "PendingGatewayMessage", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 17, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPendingGatewayMessage;
}

@end

void NetI2pRouterTunnelPendingGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pRouterTunnelPendingGatewayMessage *self, id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toRouter, NetI2pDataTunnelId *toTunnel) {
  NSObject_init(self);
  JreStrongAssign(&self->_toRouter_, toRouter);
  JreStrongAssign(&self->_toTunnel_, toTunnel);
  self->_messageId_ = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(message)) getUniqueId];
  self->_expiration_ = [message getMessageExpiration];
  JreStrongAssign(&self->_remaining_, [message toByteArray]);
  self->_created_ = JavaLangSystem_currentTimeMillis();
}

NetI2pRouterTunnelPendingGatewayMessage *new_NetI2pRouterTunnelPendingGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toRouter, NetI2pDataTunnelId *toTunnel) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPendingGatewayMessage, initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_, message, toRouter, toTunnel)
}

NetI2pRouterTunnelPendingGatewayMessage *create_NetI2pRouterTunnelPendingGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(id<NetI2pDataI2npI2NPMessage> message, NetI2pDataHash *toRouter, NetI2pDataTunnelId *toTunnel) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPendingGatewayMessage, initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_, message, toRouter, toTunnel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPendingGatewayMessage)
