//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/InboundEndpointProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/DummyValidator.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/IVValidator.h"
#include "net/i2p/router/tunnel/InboundEndpointProcessor.h"
#include "net/i2p/router/tunnel/OutboundGatewayProcessor.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTunnelInboundEndpointProcessor () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelTunnelCreatorConfig *_config_;
  id<NetI2pRouterTunnelIVValidator> _validator_;
}

- (void)decryptWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
   withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                               withByteArray:(IOSByteArray *)iv
                               withByteArray:(IOSByteArray *)orig
                                     withInt:(jint)offset
                                     withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelInboundEndpointProcessor, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelInboundEndpointProcessor, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelInboundEndpointProcessor, _config_, NetI2pRouterTunnelTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelInboundEndpointProcessor, _validator_, id<NetI2pRouterTunnelIVValidator>)

__attribute__((unused)) static void NetI2pRouterTunnelInboundEndpointProcessor_decryptWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(NetI2pRouterTunnelInboundEndpointProcessor *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, IOSByteArray *iv, IOSByteArray *orig, jint offset, jint length);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelInboundEndpointProcessor__Annotations$0(void);

@implementation NetI2pRouterTunnelInboundEndpointProcessor

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg {
  NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(self, ctx, cfg);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                withNetI2pRouterTunnelIVValidator:(id<NetI2pRouterTunnelIVValidator>)validator {
  NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_(self, ctx, cfg, validator);
  return self;
}

- (NetI2pDataHash *)getDestination {
  return [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) getDestination];
}

- (NetI2pRouterTunnelTunnelCreatorConfig *)getConfig {
  return _config_;
}

- (jboolean)retrievePreprocessedDataWithByteArray:(IOSByteArray *)orig
                                          withInt:(jint)offset
                                          withInt:(jint)length
                               withNetI2pDataHash:(NetI2pDataHash *)prev {
  NetI2pDataHash *last = [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) getPeerWithInt:[_config_ getLength] - 2];
  if (![((NetI2pDataHash *) nil_chk(last)) isEqual:prev]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"Attempted IBEP injection from ", prev, @", expected ", last)];
    return false;
  }
  IOSByteArray *iv = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(orig, offset, iv, 0, ((IOSByteArray *) nil_chk(iv))->size_);
  jboolean ok = [((id<NetI2pRouterTunnelIVValidator>) nil_chk(_validator_)) receiveIVWithByteArray:iv withInt:0 withByteArray:orig withInt:offset + NetI2pRouterTunnelHopProcessor_IV_LENGTH];
  if (!ok) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Invalid IV, dropping at IBEP ", _config_)];
    NetI2pUtilSimpleByteCache_release__WithByteArray_(iv);
    return false;
  }
  NetI2pRouterTunnelInboundEndpointProcessor_decryptWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(self, _context_, _config_, iv, orig, offset, length);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(iv);
  if ([_config_ getLength] > 0) {
    jint rtt = 0;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@", @"Received a ", length, @"byte message through tunnel ", _config_)];
    for (jint i = 0; i < [_config_ getLength]; i++) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileManager])) tunnelDataPushedWithNetI2pDataHash:[_config_ getPeerWithInt:i] withLong:rtt withInt:length];
    [_config_ incrementVerifiedBytesTransferredWithInt:length];
  }
  return true;
}

- (void)decryptWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
   withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                               withByteArray:(IOSByteArray *)iv
                               withByteArray:(IOSByteArray *)orig
                                     withInt:(jint)offset
                                     withInt:(jint)length {
  NetI2pRouterTunnelInboundEndpointProcessor_decryptWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(self, ctx, cfg, iv, orig, offset, length);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_config_);
  RELEASE_(_validator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelTunnelCreatorConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:withNetI2pRouterTunnelIVValidator:);
  methods[2].selector = @selector(getDestination);
  methods[3].selector = @selector(getConfig);
  methods[4].selector = @selector(retrievePreprocessedDataWithByteArray:withInt:withInt:withNetI2pDataHash:);
  methods[5].selector = @selector(decryptWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:withByteArray:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pRouterTunnelTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_validator_", "LNetI2pRouterTunnelIVValidator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;", (void *)&NetI2pRouterTunnelInboundEndpointProcessor__Annotations$0, "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;LNetI2pRouterTunnelIVValidator;", "retrievePreprocessedData", "[BIILNetI2pDataHash;", "decrypt", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;[B[BII" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelInboundEndpointProcessor = { "InboundEndpointProcessor", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 6, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelInboundEndpointProcessor;
}

@end

void NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterTunnelInboundEndpointProcessor *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_(self, ctx, cfg, NetI2pRouterTunnelDummyValidator_getInstance());
}

NetI2pRouterTunnelInboundEndpointProcessor *new_NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelInboundEndpointProcessor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

NetI2pRouterTunnelInboundEndpointProcessor *create_NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelInboundEndpointProcessor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

void NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_(NetI2pRouterTunnelInboundEndpointProcessor *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, id<NetI2pRouterTunnelIVValidator> validator) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelInboundEndpointProcessor_class_()]);
  JreStrongAssign(&self->_config_, cfg);
  JreStrongAssign(&self->_validator_, validator);
}

NetI2pRouterTunnelInboundEndpointProcessor *new_NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, id<NetI2pRouterTunnelIVValidator> validator) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelInboundEndpointProcessor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_, ctx, cfg, validator)
}

NetI2pRouterTunnelInboundEndpointProcessor *create_NetI2pRouterTunnelInboundEndpointProcessor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, id<NetI2pRouterTunnelIVValidator> validator) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelInboundEndpointProcessor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelIVValidator_, ctx, cfg, validator)
}

void NetI2pRouterTunnelInboundEndpointProcessor_decryptWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(NetI2pRouterTunnelInboundEndpointProcessor *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, IOSByteArray *iv, IOSByteArray *orig, jint offset, jint length) {
  IOSByteArray *cur = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  for (jint i = [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(cfg)) getLength] - 2; i >= 0; i--) {
    NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withByteArray_withByteArray_withInt_withInt_withByteArray_withNetI2pRouterTunnelHopConfig_(ctx, iv, orig, offset, length, cur, [cfg getConfigWithInt:i]);
  }
  NetI2pUtilSimpleByteCache_release__WithByteArray_(cur);
}

IOSObjectArray *NetI2pRouterTunnelInboundEndpointProcessor__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelInboundEndpointProcessor)
