//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/OutboundGatewayProcessor.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/OutboundGatewayProcessor.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTunnelOutboundGatewayProcessor () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelTunnelCreatorConfig *_config_;
}

- (void)decryptWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                         withByteArray:(IOSByteArray *)iv
                         withByteArray:(IOSByteArray *)orig
                               withInt:(jint)offset
                               withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundGatewayProcessor, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundGatewayProcessor, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundGatewayProcessor, _config_, NetI2pRouterTunnelTunnelCreatorConfig *)

__attribute__((unused)) static void NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(NetI2pRouterTunnelOutboundGatewayProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, IOSByteArray *iv, IOSByteArray *orig, jint offset, jint length);

@implementation NetI2pRouterTunnelOutboundGatewayProcessor

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
  withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg {
  NetI2pRouterTunnelOutboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_(self, ctx, cfg);
  return self;
}

- (void)processWithByteArray:(IOSByteArray *)orig
                     withInt:(jint)offset
                     withInt:(jint)length {
  IOSByteArray *iv = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(orig, offset, iv, 0, NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$$", @"Orig random IV: ", NetI2pDataBase64_encodeWithByteArray_(iv))];
  }
  NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(self, _context_, _config_, iv, orig, offset, length);
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"finished processing the preprocessed data"];
  NetI2pUtilSimpleByteCache_release__WithByteArray_(iv);
}

- (void)decryptWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                         withByteArray:(IOSByteArray *)iv
                         withByteArray:(IOSByteArray *)orig
                               withInt:(jint)offset
                               withInt:(jint)length {
  NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(self, ctx, cfg, iv, orig, offset, length);
}

+ (void)decryptWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                         withByteArray:(IOSByteArray *)iv
                         withByteArray:(IOSByteArray *)orig
                               withInt:(jint)offset
                               withInt:(jint)length
                         withByteArray:(IOSByteArray *)cur
       withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config {
  NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withByteArray_withByteArray_withInt_withInt_withByteArray_withNetI2pRouterTunnelHopConfig_(ctx, iv, orig, offset, length, cur, config);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_config_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTunnelTunnelCreatorConfig:);
  methods[1].selector = @selector(processWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(decryptWithNetI2pI2PAppContext:withNetI2pRouterTunnelTunnelCreatorConfig:withByteArray:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(decryptWithNetI2pI2PAppContext:withByteArray:withByteArray:withInt:withInt:withByteArray:withNetI2pRouterTunnelHopConfig:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pRouterTunnelTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pRouterTunnelTunnelCreatorConfig;", "process", "[BII", "decrypt", "LNetI2pI2PAppContext;LNetI2pRouterTunnelTunnelCreatorConfig;[B[BII", "LNetI2pI2PAppContext;[B[BII[BLNetI2pRouterTunnelHopConfig;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelOutboundGatewayProcessor = { "OutboundGatewayProcessor", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelOutboundGatewayProcessor;
}

@end

void NetI2pRouterTunnelOutboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterTunnelOutboundGatewayProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelOutboundGatewayProcessor_class_()]);
  JreStrongAssign(&self->_config_, cfg);
}

NetI2pRouterTunnelOutboundGatewayProcessor *new_NetI2pRouterTunnelOutboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelOutboundGatewayProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

NetI2pRouterTunnelOutboundGatewayProcessor *create_NetI2pRouterTunnelOutboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelOutboundGatewayProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

void NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withNetI2pRouterTunnelTunnelCreatorConfig_withByteArray_withByteArray_withInt_withInt_(NetI2pRouterTunnelOutboundGatewayProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, IOSByteArray *iv, IOSByteArray *orig, jint offset, jint length) {
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelOutboundGatewayProcessor_class_()];
  IOSByteArray *cur = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  for (jint i = [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(cfg)) getLength] - 1; i >= 1; i--) {
    NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withByteArray_withByteArray_withInt_withInt_withByteArray_withNetI2pRouterTunnelHopConfig_(ctx, iv, orig, offset, length, cur, [cfg getConfigWithInt:i]);
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
      [log debugWithNSString:JreStrcat("$I$$", @"IV at hop ", i, @": ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(orig, offset, NetI2pRouterTunnelHopProcessor_IV_LENGTH))];
    }
  }
  NetI2pUtilSimpleByteCache_release__WithByteArray_(cur);
}

void NetI2pRouterTunnelOutboundGatewayProcessor_decryptWithNetI2pI2PAppContext_withByteArray_withByteArray_withInt_withInt_withByteArray_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, IOSByteArray *iv, IOSByteArray *orig, jint offset, jint length, IOSByteArray *cur, NetI2pRouterTunnelHopConfig *config) {
  NetI2pRouterTunnelOutboundGatewayProcessor_initialize();
  [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) aes])) decryptBlockWithByteArray:orig withInt:offset withNetI2pDataSessionKey:[((NetI2pRouterTunnelHopConfig *) nil_chk(config)) getIVKey] withByteArray:orig withInt:offset];
  jint numBlocks = (length - NetI2pRouterTunnelHopProcessor_IV_LENGTH) / NetI2pRouterTunnelHopProcessor_IV_LENGTH;
  IOSByteArray *prev = iv;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(orig, offset, prev, 0, NetI2pRouterTunnelHopProcessor_IV_LENGTH);
  for (jint i = 0; i < numBlocks; i++) {
    jint off = (i + 1) * NetI2pRouterTunnelHopProcessor_IV_LENGTH + offset;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(orig, off, cur, 0, NetI2pRouterTunnelHopProcessor_IV_LENGTH);
    [((NetI2pCryptoAESEngine *) nil_chk([ctx aes])) decryptBlockWithByteArray:orig withInt:off withNetI2pDataSessionKey:[config getLayerKey] withByteArray:orig withInt:off];
    for (jint j = 0; j < NetI2pRouterTunnelHopProcessor_IV_LENGTH; j++) {
      *IOSByteArray_GetRef(nil_chk(orig), off + j) ^= IOSByteArray_Get(nil_chk(prev), j);
    }
    IOSByteArray *xf = prev;
    prev = cur;
    cur = xf;
  }
  [((NetI2pCryptoAESEngine *) nil_chk([ctx aes])) decryptBlockWithByteArray:orig withInt:offset withNetI2pDataSessionKey:[config getIVKey] withByteArray:orig withInt:offset];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelOutboundGatewayProcessor)
