//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/InboundGatewayProcessor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/tunnel/DummyValidator.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/HopProcessor.h"
#include "net/i2p/router/tunnel/InboundGatewayProcessor.h"

@implementation NetI2pRouterTunnelInboundGatewayProcessor

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
            withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config {
  NetI2pRouterTunnelInboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(self, ctx, config);
  return self;
}

- (void)processWithByteArray:(IOSByteArray *)orig
                     withInt:(jint)offset
                     withInt:(jint)length {
  jboolean ok = [super processWithByteArray:orig withInt:offset withInt:length withNetI2pDataHash:nil];
  if (!ok) @throw create_JavaLangRuntimeException_initWithNSString_(@"we are the gateway, how did it fail?");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pRouterTunnelHopConfig:);
  methods[1].selector = @selector(processWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pRouterTunnelHopConfig;", "process", "[BII" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelInboundGatewayProcessor = { "InboundGatewayProcessor", "net.i2p.router.tunnel", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelInboundGatewayProcessor;
}

@end

void NetI2pRouterTunnelInboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelInboundGatewayProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(self, ctx, config, NetI2pRouterTunnelDummyValidator_getInstance());
}

NetI2pRouterTunnelInboundGatewayProcessor *new_NetI2pRouterTunnelInboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelInboundGatewayProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_, ctx, config)
}

NetI2pRouterTunnelInboundGatewayProcessor *create_NetI2pRouterTunnelInboundGatewayProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelInboundGatewayProcessor, initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_, ctx, config)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelInboundGatewayProcessor)
