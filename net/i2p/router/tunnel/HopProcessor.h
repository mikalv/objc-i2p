//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/HopProcessor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTunnelHopProcessor")
#ifdef RESTRICT_NetI2pRouterTunnelHopProcessor
#define INCLUDE_ALL_NetI2pRouterTunnelHopProcessor 0
#else
#define INCLUDE_ALL_NetI2pRouterTunnelHopProcessor 1
#endif
#undef RESTRICT_NetI2pRouterTunnelHopProcessor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTunnelHopProcessor_) && (INCLUDE_ALL_NetI2pRouterTunnelHopProcessor || defined(INCLUDE_NetI2pRouterTunnelHopProcessor))
#define NetI2pRouterTunnelHopProcessor_

@class IOSByteArray;
@class NetI2pDataHash;
@class NetI2pI2PAppContext;
@class NetI2pRouterTunnelHopConfig;
@protocol NetI2pRouterTunnelIVValidator;

@interface NetI2pRouterTunnelHopProcessor : NSObject {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pRouterTunnelHopConfig *_config_;
}
@property (readonly, class) jint IV_LENGTH NS_SWIFT_NAME(IV_LENGTH);

+ (jint)IV_LENGTH;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                      withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config
                    withNetI2pRouterTunnelIVValidator:(id<NetI2pRouterTunnelIVValidator>)validator;

- (jboolean)processWithByteArray:(IOSByteArray *)orig
                         withInt:(jint)offset
                         withInt:(jint)length
              withNetI2pDataHash:(NetI2pDataHash *)prev;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                      withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelHopProcessor)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelHopProcessor, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelHopProcessor, _config_, NetI2pRouterTunnelHopConfig *)

inline jint NetI2pRouterTunnelHopProcessor_get_IV_LENGTH(void);
#define NetI2pRouterTunnelHopProcessor_IV_LENGTH 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelHopProcessor, IV_LENGTH, jint)

FOUNDATION_EXPORT void NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelHopProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config);

FOUNDATION_EXPORT NetI2pRouterTunnelHopProcessor *new_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelHopProcessor *create_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config);

FOUNDATION_EXPORT void NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pRouterTunnelHopProcessor *self, NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator);

FOUNDATION_EXPORT NetI2pRouterTunnelHopProcessor *new_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelHopProcessor *create_NetI2pRouterTunnelHopProcessor_initWithNetI2pI2PAppContext_withNetI2pRouterTunnelHopConfig_withNetI2pRouterTunnelIVValidator_(NetI2pI2PAppContext *ctx, NetI2pRouterTunnelHopConfig *config, id<NetI2pRouterTunnelIVValidator> validator);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelHopProcessor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTunnelHopProcessor")
