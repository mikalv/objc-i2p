//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/BatchedPreprocessor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/BatchedPreprocessor.h"
#include "net/i2p/router/tunnel/PendingGatewayMessage.h"
#include "net/i2p/router/tunnel/TrivialPreprocessor.h"
#include "net/i2p/router/tunnel/TunnelGateway.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterTunnelBatchedPreprocessor () {
 @public
  jlong _pendingSince_;
  NSString *_name_;
}

- (jlong)getDelayAmountWithBoolean:(jboolean)shouldStat;

- (void)displayWithLong:(jlong)allocated
       withJavaUtilList:(id<JavaUtilList>)pending
           withNSString:(NSString *)title;

- (jint)writeFragmentsWithJavaUtilList:(id<JavaUtilList>)pending
                               withInt:(jint)startAt
                               withInt:(jint)sendThrough
                         withByteArray:(IOSByteArray *)target
                               withInt:(jint)offset;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelBatchedPreprocessor, _name_, NSString *)

inline jboolean NetI2pRouterTunnelBatchedPreprocessor_get_DEBUG(void);
#define NetI2pRouterTunnelBatchedPreprocessor_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBatchedPreprocessor, DEBUG, jboolean)

inline jint NetI2pRouterTunnelBatchedPreprocessor_get_FULL_SIZE(void);
#define NetI2pRouterTunnelBatchedPreprocessor_FULL_SIZE 1003
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBatchedPreprocessor, FULL_SIZE, jint)

inline jint NetI2pRouterTunnelBatchedPreprocessor_get_FORCE_BATCH_FLUSH(void);
#define NetI2pRouterTunnelBatchedPreprocessor_FORCE_BATCH_FLUSH 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBatchedPreprocessor, FORCE_BATCH_FLUSH, jint)

inline jint NetI2pRouterTunnelBatchedPreprocessor_get_FULL_ENOUGH_SIZE(void);
#define NetI2pRouterTunnelBatchedPreprocessor_FULL_ENOUGH_SIZE 802
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelBatchedPreprocessor, FULL_ENOUGH_SIZE, jint)

__attribute__((unused)) static jlong NetI2pRouterTunnelBatchedPreprocessor_getDelayAmountWithBoolean_(NetI2pRouterTunnelBatchedPreprocessor *self, jboolean shouldStat);

__attribute__((unused)) static void NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(NetI2pRouterTunnelBatchedPreprocessor *self, jlong allocated, id<JavaUtilList> pending, NSString *title);

__attribute__((unused)) static jint NetI2pRouterTunnelBatchedPreprocessor_writeFragmentsWithJavaUtilList_withInt_withInt_withByteArray_withInt_(NetI2pRouterTunnelBatchedPreprocessor *self, id<JavaUtilList> pending, jint startAt, jint sendThrough, IOSByteArray *target, jint offset);

jlong NetI2pRouterTunnelBatchedPreprocessor_DEFAULT_DELAY = 100;

@implementation NetI2pRouterTunnelBatchedPreprocessor

+ (jlong)DEFAULT_DELAY {
  return NetI2pRouterTunnelBatchedPreprocessor_DEFAULT_DELAY;
}

+ (void)setDEFAULT_DELAY:(jlong)value {
  NetI2pRouterTunnelBatchedPreprocessor_DEFAULT_DELAY = value;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                     withNSString:(NSString *)name {
  NetI2pRouterTunnelBatchedPreprocessor_initWithNetI2pRouterRouterContext_withNSString_(self, ctx, name);
  return self;
}

- (jlong)getSendDelay {
  return NetI2pRouterTunnelBatchedPreprocessor_DEFAULT_DELAY;
}

- (jlong)getDelayAmount {
  return NetI2pRouterTunnelBatchedPreprocessor_getDelayAmountWithBoolean_(self, true);
}

- (jlong)getDelayAmountWithBoolean:(jboolean)shouldStat {
  return NetI2pRouterTunnelBatchedPreprocessor_getDelayAmountWithBoolean_(self, shouldStat);
}

- (jboolean)preprocessQueueWithJavaUtilList:(id<JavaUtilList>)pending
 withNetI2pRouterTunnelTunnelGateway_Sender:(id<NetI2pRouterTunnelTunnelGateway_Sender>)sender
withNetI2pRouterTunnelTunnelGateway_Receiver:(id<NetI2pRouterTunnelTunnelGateway_Receiver>)rec {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, 0, pending, @"Starting");
  JavaLangStringBuilder *timingBuf = nil;
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$I$", @"Preprocess queue with ", [((id<JavaUtilList>) nil_chk(pending)) size], @" to send")];
    timingBuf = create_JavaLangStringBuilder_initWithInt_(128);
    [timingBuf appendWithNSString:JreStrcat("$I$", @"Preprocess with ", [pending size], @" to send. ")];
  }
  jlong start = JavaLangSystem_currentTimeMillis();
  jint batchCount = 0;
  jint beforeLooping = [((id<JavaUtilList>) nil_chk(pending)) size];
  while (![pending isEmpty]) {
    jint allocated = 0;
    jlong beforePendingLoop = JavaLangSystem_currentTimeMillis();
    for (jint i = 0; i < [pending size]; i++) {
      jlong pendingStart = JavaLangSystem_currentTimeMillis();
      NetI2pRouterTunnelPendingGatewayMessage *msg = [pending getWithInt:i];
      jint instructionsSize = NetI2pRouterTunnelTrivialPreprocessor_getInstructionsSizeWithNetI2pRouterTunnelPendingGatewayMessage_(msg);
      instructionsSize += NetI2pRouterTunnelTrivialPreprocessor_getInstructionAugmentationSizeWithNetI2pRouterTunnelPendingGatewayMessage_withInt_withInt_(msg, allocated, instructionsSize);
      jint curWanted = ((IOSByteArray *) nil_chk([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(msg)) getData]))->size_ - [msg getOffset] + instructionsSize;
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$ICI$J$I$I$I", @"pending ", i, '/', [pending size], @" (", [msg getMessageId], @") curWanted=", curWanted, @" instructionSize=", instructionsSize, @" allocated=", allocated)];
      allocated += curWanted;
      if (allocated >= NetI2pRouterTunnelBatchedPreprocessor_FULL_SIZE) {
        if (allocated - curWanted + instructionsSize >= NetI2pRouterTunnelBatchedPreprocessor_FULL_SIZE) {
          i--;
          msg = [pending getWithInt:i];
          allocated -= curWanted;
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$I$@C", @"Pushback of ", curWanted, @" (message ", (i + 1), @" in ", pending, ')')];
        }
        if (_pendingSince_ > 0) {
          jlong waited = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - _pendingSince_;
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchDelaySent" withLong:[pending size] withLong:waited];
        }
        jlong beforeSend = JavaLangSystem_currentTimeMillis();
        _pendingSince_ = 0;
        [self sendWithJavaUtilList:pending withInt:0 withInt:i withNetI2pRouterTunnelTunnelGateway_Sender:sender withNetI2pRouterTunnelTunnelGateway_Receiver:rec];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.batchFullFragments" withLong:1];
        jlong afterSend = JavaLangSystem_currentTimeMillis();
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, JreStrcat("$I", @"Sent the message with ", (i + 1)));
        for (jint j = 0; j < i; j++) {
          NetI2pRouterTunnelPendingGatewayMessage *cur = [pending removeWithInt:0];
          if ([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(cur)) getOffset] < ((IOSByteArray *) nil_chk([cur getData]))->size_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I$I$I", @"i=", i, @" j=", j, @" off=", [cur getOffset], @" len=", ((IOSByteArray *) nil_chk([cur getData]))->size_, @" alloc=", allocated));
          if (timingBuf != nil) [timingBuf appendWithNSString:JreStrcat("$@", @" sent ", cur)];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchFragmentation" withLong:[cur getFragmentNumber] + 1];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.writeDelay" withLong:[cur getLifetime] withLong:((IOSByteArray *) nil_chk([cur getData]))->size_];
        }
        if ([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(msg)) getOffset] >= ((IOSByteArray *) nil_chk([msg getData]))->size_) {
          NetI2pRouterTunnelPendingGatewayMessage *cur = [pending removeWithInt:0];
          if (timingBuf != nil) [((JavaLangStringBuilder *) nil_chk([timingBuf appendWithNSString:JreStrcat("$@", @" sent perfect fit ", cur)])) appendWithNSString:@"."];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchFragmentation" withLong:[((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(cur)) getFragmentNumber] + 1];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.writeDelay" withLong:[cur getLifetime] withLong:((IOSByteArray *) nil_chk([cur getData]))->size_];
        }
        if (i > 0) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchMultipleCount" withLong:i + 1];
        allocated = 0;
        batchCount++;
        jlong pendingEnd = JavaLangSystem_currentTimeMillis();
        if (timingBuf != nil) [((JavaLangStringBuilder *) nil_chk([timingBuf appendWithNSString:JreStrcat("$ICI$J$J$JCJ$J", @" After sending ", (i + 1), '/', [pending size], @" in ", (afterSend - beforeSend), @" after ", (beforeSend - pendingStart), @" since ", (beforeSend - beforePendingLoop), '/', (beforeSend - start), @" pending current ", (pendingEnd - pendingStart))])) appendWithNSString:@"."];
        break;
      }
      if (timingBuf != nil) [((JavaLangStringBuilder *) nil_chk([timingBuf appendWithNSString:JreStrcat("$J", @" After pending loop ", (JavaLangSystem_currentTimeMillis() - beforePendingLoop))])) appendWithNSString:@"."];
    }
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, JreStrcat("$I", @"after looping to clear ", (beforeLooping - [pending size])));
    jlong afterDisplayed = JavaLangSystem_currentTimeMillis();
    if (allocated > 0) {
      if (([pending size] > NetI2pRouterTunnelBatchedPreprocessor_FORCE_BATCH_FLUSH) || ((_pendingSince_ > 0) && ([self getDelayAmount] <= 0)) || (allocated >= NetI2pRouterTunnelBatchedPreprocessor_FULL_ENOUGH_SIZE)) {
        if ([pending size] > 1) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.batchMultipleCount" withLong:[pending size]];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.batchDelaySent" withLong:[pending size] withLong:0];
        [self sendWithJavaUtilList:pending withInt:0 withInt:[pending size] - 1 withNetI2pRouterTunnelTunnelGateway_Sender:sender withNetI2pRouterTunnelTunnelGateway_Receiver:rec];
        [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchSmallFragments" withLong:NetI2pRouterTunnelBatchedPreprocessor_FULL_SIZE - allocated];
        jint beforeSize = [pending size];
        for (jint i = 0; i < beforeSize; i++) {
          NetI2pRouterTunnelPendingGatewayMessage *cur = [pending getWithInt:0];
          if ([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(cur)) getOffset] < ((IOSByteArray *) nil_chk([cur getData]))->size_) break;
          [pending removeWithInt:0];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchFragmentation" withLong:[cur getFragmentNumber] + 1];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.writeDelay" withLong:[cur getLifetime] withLong:((IOSByteArray *) nil_chk([cur getData]))->size_];
        }
        if (![pending isEmpty]) {
          _pendingSince_ = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchFlushRemaining" withLong:[pending size] withLong:beforeSize];
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, @"flushed, some remain");
          if (timingBuf != nil) {
            [timingBuf appendWithNSString:JreStrcat("$JC", @" flushed, some remain (displayed to now: ", (JavaLangSystem_currentTimeMillis() - afterDisplayed), ')')];
            [timingBuf appendWithNSString:JreStrcat("$J", @" total time: ", (JavaLangSystem_currentTimeMillis() - start))];
            [_log_ debugWithNSString:[timingBuf description]];
          }
          return true;
        }
        else {
          jlong delayAmount = 0;
          if (_pendingSince_ > 0) {
            delayAmount = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - _pendingSince_;
            _pendingSince_ = 0;
          }
          if (batchCount > 1) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchCount" withLong:batchCount];
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, JreStrcat("$I$J$", @"flushed ", (beforeSize), @", no remaining after ", delayAmount, @"ms"));
          if (timingBuf != nil) {
            [timingBuf appendWithNSString:JreStrcat("$JC", @" flushed, none remain (displayed to now: ", (JavaLangSystem_currentTimeMillis() - afterDisplayed), ')')];
            [timingBuf appendWithNSString:JreStrcat("$J", @" total time: ", (JavaLangSystem_currentTimeMillis() - start))];
            [_log_ debugWithNSString:[timingBuf description]];
          }
          return false;
        }
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.batchDelay" withLong:[pending size]];
        if (_pendingSince_ <= 0) _pendingSince_ = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
        if (batchCount > 1) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.batchCount" withLong:batchCount];
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, @"dont flush");
        if (timingBuf != nil) {
          [timingBuf appendWithNSString:JreStrcat("$JC", @" dont flush (displayed to now: ", (JavaLangSystem_currentTimeMillis() - afterDisplayed), ')')];
          [timingBuf appendWithNSString:JreStrcat("$J", @" total time: ", (JavaLangSystem_currentTimeMillis() - start))];
          [_log_ debugWithNSString:[timingBuf description]];
        }
        return true;
      }
    }
    else {
      if (timingBuf != nil) [timingBuf appendWithNSString:@" Keep looping"];
    }
  }
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$IC", @"Sent everything on the list (pending=", [pending size], ')')];
  if (timingBuf != nil) [timingBuf appendWithNSString:JreStrcat("$J", @" total time: ", (JavaLangSystem_currentTimeMillis() - start))];
  if (timingBuf != nil) [_log_ debugWithNSString:[timingBuf description]];
  return false;
}

- (void)displayWithLong:(jlong)allocated
       withJavaUtilList:(id<JavaUtilList>)pending
           withNSString:(NSString *)title {
  NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(self, allocated, pending, title);
}

- (void)sendWithJavaUtilList:(id<JavaUtilList>)pending
                     withInt:(jint)startAt
                     withInt:(jint)sendThrough
withNetI2pRouterTunnelTunnelGateway_Sender:(id<NetI2pRouterTunnelTunnelGateway_Sender>)sender
withNetI2pRouterTunnelTunnelGateway_Receiver:(id<NetI2pRouterTunnelTunnelGateway_Receiver>)rec {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$ICI$@", @"Sending ", startAt, ':', sendThrough, @" out of ", pending)];
  IOSByteArray *preprocessed = [((NetI2pDataByteArray *) nil_chk([((NetI2pUtilByteCache *) nil_chk(JreLoadStatic(NetI2pRouterTunnelTrivialPreprocessor, _dataCache))) acquire])) getData];
  jint offset = 0;
  offset = NetI2pRouterTunnelBatchedPreprocessor_writeFragmentsWithJavaUtilList_withInt_withInt_withByteArray_withInt_(self, pending, startAt, sendThrough, preprocessed, offset);
  if (offset <= 0) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"uh? written offset is "])) appendWithInt:offset];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" for "])) appendWithInt:startAt])) appendWithNSString:@" through "])) appendWithInt:sendThrough];
    for (jint i = startAt; i <= sendThrough; i++) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" "])) appendWithNSString:[((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk([((id<JavaUtilList>) nil_chk(pending)) getWithInt:i])) description]];
    }
    [_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:[buf description]];
    return;
  }
  @try {
    [self preprocessWithByteArray:preprocessed withInt:offset];
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$I$I$I$I$I", @"Error preprocessing the messages (offset=", offset, @" start=", startAt, @" through=", sendThrough, @" pending=", [((id<JavaUtilList>) nil_chk(pending)) size], @" preproc=", ((IOSByteArray *) nil_chk(preprocessed))->size_)];
    return;
  }
  jlong msgId = [((id<NetI2pRouterTunnelTunnelGateway_Sender>) nil_chk(sender)) sendPreprocessedWithByteArray:preprocessed withNetI2pRouterTunnelTunnelGateway_Receiver:rec];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$ICI$@$J", @"Sent ", startAt, ':', sendThrough, @" out of ", pending, @" in message ", msgId)];
}

- (jint)writeFragmentsWithJavaUtilList:(id<JavaUtilList>)pending
                               withInt:(jint)startAt
                               withInt:(jint)sendThrough
                         withByteArray:(IOSByteArray *)target
                               withInt:(jint)offset {
  return NetI2pRouterTunnelBatchedPreprocessor_writeFragmentsWithJavaUtilList_withInt_withInt_withByteArray_withInt_(self, pending, startAt, sendThrough, target, offset);
}

- (void)dealloc {
  RELEASE_(_name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNSString:);
  methods[1].selector = @selector(getSendDelay);
  methods[2].selector = @selector(getDelayAmount);
  methods[3].selector = @selector(getDelayAmountWithBoolean:);
  methods[4].selector = @selector(preprocessQueueWithJavaUtilList:withNetI2pRouterTunnelTunnelGateway_Sender:withNetI2pRouterTunnelTunnelGateway_Receiver:);
  methods[5].selector = @selector(displayWithLong:withJavaUtilList:withNSString:);
  methods[6].selector = @selector(sendWithJavaUtilList:withInt:withInt:withNetI2pRouterTunnelTunnelGateway_Sender:withNetI2pRouterTunnelTunnelGateway_Receiver:);
  methods[7].selector = @selector(writeFragmentsWithJavaUtilList:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pendingSince_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = NetI2pRouterTunnelBatchedPreprocessor_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "FULL_SIZE", "I", .constantValue.asInt = NetI2pRouterTunnelBatchedPreprocessor_FULL_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_DELAY", "J", .constantValue.asLong = 0, 0x8, -1, 15, -1, -1 },
    { "FORCE_BATCH_FLUSH", "I", .constantValue.asInt = NetI2pRouterTunnelBatchedPreprocessor_FORCE_BATCH_FLUSH, 0x1a, -1, -1, -1, -1 },
    { "FULL_ENOUGH_SIZE", "I", .constantValue.asInt = NetI2pRouterTunnelBatchedPreprocessor_FULL_ENOUGH_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNSString;", "getDelayAmount", "Z", "preprocessQueue", "LJavaUtilList;LNetI2pRouterTunnelTunnelGateway_Sender;LNetI2pRouterTunnelTunnelGateway_Receiver;", "(Ljava/util/List<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;Lnet/i2p/router/tunnel/TunnelGateway$Sender;Lnet/i2p/router/tunnel/TunnelGateway$Receiver;)Z", "display", "JLJavaUtilList;LNSString;", "(JLjava/util/List<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;Ljava/lang/String;)V", "send", "LJavaUtilList;IILNetI2pRouterTunnelTunnelGateway_Sender;LNetI2pRouterTunnelTunnelGateway_Receiver;", "(Ljava/util/List<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;IILnet/i2p/router/tunnel/TunnelGateway$Sender;Lnet/i2p/router/tunnel/TunnelGateway$Receiver;)V", "writeFragments", "LJavaUtilList;II[BI", "(Ljava/util/List<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;II[BI)I", &NetI2pRouterTunnelBatchedPreprocessor_DEFAULT_DELAY };
  static const J2ObjcClassInfo _NetI2pRouterTunnelBatchedPreprocessor = { "BatchedPreprocessor", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 8, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelBatchedPreprocessor;
}

@end

void NetI2pRouterTunnelBatchedPreprocessor_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterTunnelBatchedPreprocessor *self, NetI2pRouterRouterContext *ctx, NSString *name) {
  NetI2pRouterTunnelTrivialPreprocessor_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_name_, name);
}

NetI2pRouterTunnelBatchedPreprocessor *new_NetI2pRouterTunnelBatchedPreprocessor_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelBatchedPreprocessor, initWithNetI2pRouterRouterContext_withNSString_, ctx, name)
}

NetI2pRouterTunnelBatchedPreprocessor *create_NetI2pRouterTunnelBatchedPreprocessor_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *ctx, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelBatchedPreprocessor, initWithNetI2pRouterRouterContext_withNSString_, ctx, name)
}

jlong NetI2pRouterTunnelBatchedPreprocessor_getDelayAmountWithBoolean_(NetI2pRouterTunnelBatchedPreprocessor *self, jboolean shouldStat) {
  jlong rv = -1;
  jlong defaultAmount = [self getSendDelay];
  if (self->_pendingSince_ > 0) rv = self->_pendingSince_ + defaultAmount - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if (rv > defaultAmount) rv = defaultAmount;
  if (shouldStat) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.batchDelayAmount" withLong:rv];
  return rv;
}

void NetI2pRouterTunnelBatchedPreprocessor_displayWithLong_withJavaUtilList_withNSString_(NetI2pRouterTunnelBatchedPreprocessor *self, jlong allocated, id<JavaUtilList> pending, NSString *title) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jlong highestDelay = 0;
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:self->_name_])) appendWithNSString:@": "];
    [buf appendWithNSString:title];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" - allocated: "])) appendWithLong:allocated];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" pending: "])) appendWithInt:[((id<JavaUtilList>) nil_chk(pending)) size]];
    if (self->_pendingSince_ > 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" delay: "])) appendWithLong:NetI2pRouterTunnelBatchedPreprocessor_getDelayAmountWithBoolean_(self, false)];
    for (jint i = 0; i < [pending size]; i++) {
      NetI2pRouterTunnelPendingGatewayMessage *curPending = [pending getWithInt:i];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" ["])) appendWithInt:i])) appendWithNSString:@"]:"];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithInt:[((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(curPending)) getOffset]])) appendWithChar:'/'])) appendWithInt:((IOSByteArray *) nil_chk([curPending getData]))->size_])) appendWithChar:'/'];
      [buf appendWithLong:[curPending getLifetime]];
      if ([curPending getLifetime] > highestDelay) highestDelay = [curPending getLifetime];
    }
    [self->_log_ infoWithNSString:[buf description]];
  }
}

jint NetI2pRouterTunnelBatchedPreprocessor_writeFragmentsWithJavaUtilList_withInt_withInt_withByteArray_withInt_(NetI2pRouterTunnelBatchedPreprocessor *self, id<JavaUtilList> pending, jint startAt, jint sendThrough, IOSByteArray *target, jint offset) {
  for (jint i = startAt; i <= sendThrough; i++) {
    NetI2pRouterTunnelPendingGatewayMessage *msg = [((id<JavaUtilList>) nil_chk(pending)) getWithInt:i];
    jint prevOffset = offset;
    if ([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(msg)) getOffset] == 0) {
      offset = [self writeFirstFragmentWithNetI2pRouterTunnelPendingGatewayMessage:msg withByteArray:target withInt:offset];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$I$I$I$", @"writing ", [msg getMessageId], @" fragment 0, ending at ", offset, @" prev ", prevOffset, @" leaving ", (((IOSByteArray *) nil_chk([msg getData]))->size_ - [msg getOffset]), @" bytes for later")];
    }
    else {
      offset = [self writeSubsequentFragmentWithNetI2pRouterTunnelPendingGatewayMessage:msg withByteArray:target withInt:offset];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
        jint frag = [msg getFragmentNumber];
        jint later = ((IOSByteArray *) nil_chk([msg getData]))->size_ - [msg getOffset];
        if (later > 0) frag--;
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$I$I$I$I$", @"writing ", [msg getMessageId], @" fragment ", frag, @", ending at ", offset, @" prev ", prevOffset, @" leaving ", later, @" bytes for later")];
      }
    }
  }
  return offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelBatchedPreprocessor)
