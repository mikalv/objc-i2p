//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/DummyValidator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/router/tunnel/DummyValidator.h"

@interface NetI2pRouterTunnelDummyValidator ()

- (instancetype)init;

@end

inline NetI2pRouterTunnelDummyValidator *NetI2pRouterTunnelDummyValidator_get__instance(void);
static NetI2pRouterTunnelDummyValidator *NetI2pRouterTunnelDummyValidator__instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelDummyValidator, _instance, NetI2pRouterTunnelDummyValidator *)

__attribute__((unused)) static void NetI2pRouterTunnelDummyValidator_init(NetI2pRouterTunnelDummyValidator *self);

__attribute__((unused)) static NetI2pRouterTunnelDummyValidator *new_NetI2pRouterTunnelDummyValidator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelDummyValidator *create_NetI2pRouterTunnelDummyValidator_init(void);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelDummyValidator)

@implementation NetI2pRouterTunnelDummyValidator

+ (NetI2pRouterTunnelDummyValidator *)getInstance {
  return NetI2pRouterTunnelDummyValidator_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTunnelDummyValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)receiveIVWithByteArray:(IOSByteArray *)ivData
                           withInt:(jint)ivOffset
                     withByteArray:(IOSByteArray *)payload
                           withInt:(jint)payloadOffset {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pRouterTunnelDummyValidator;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(receiveIVWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_instance", "LNetI2pRouterTunnelDummyValidator;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "receiveIV", "[BI[BI", &NetI2pRouterTunnelDummyValidator__instance };
  static const J2ObjcClassInfo _NetI2pRouterTunnelDummyValidator = { "DummyValidator", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelDummyValidator;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelDummyValidator class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTunnelDummyValidator__instance, new_NetI2pRouterTunnelDummyValidator_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelDummyValidator)
  }
}

@end

NetI2pRouterTunnelDummyValidator *NetI2pRouterTunnelDummyValidator_getInstance() {
  NetI2pRouterTunnelDummyValidator_initialize();
  return NetI2pRouterTunnelDummyValidator__instance;
}

void NetI2pRouterTunnelDummyValidator_init(NetI2pRouterTunnelDummyValidator *self) {
  NSObject_init(self);
}

NetI2pRouterTunnelDummyValidator *new_NetI2pRouterTunnelDummyValidator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelDummyValidator, init)
}

NetI2pRouterTunnelDummyValidator *create_NetI2pRouterTunnelDummyValidator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelDummyValidator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelDummyValidator)
