//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/BuildHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/BuildRequestRecord.h"
#include "net/i2p/data/i2np/BuildResponseRecord.h"
#include "net/i2p/data/i2np/EncryptedBuildRecord.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/TunnelBuildMessage.h"
#include "net/i2p/data/i2np/TunnelBuildMessageBase.h"
#include "net/i2p/data/i2np/TunnelBuildReplyMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/i2np/VariableTunnelBuildMessage.h"
#include "net/i2p/data/i2np/VariableTunnelBuildReplyMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/HandlerJobBuilder.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterThrottle.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/router/tunnel/BuildMessageProcessor.h"
#include "net/i2p/router/tunnel/BuildReplyHandler.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/BuildExecutor.h"
#include "net/i2p/router/tunnel/pool/BuildHandler.h"
#include "net/i2p/router/tunnel/pool/BuildRequestor.h"
#include "net/i2p/router/tunnel/pool/ExpireJob.h"
#include "net/i2p/router/tunnel/pool/ParticipatingThrottler.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/RequestThrottler.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/router/util/CDQEntry.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@class NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState;
@class NetI2pRouterTunnelPoolBuildHandler_BuildMessageState;
@class NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState;
@class NetI2pRouterTunnelPoolBuildHandler_ExplState;

@interface NetI2pRouterTunnelPoolBuildHandler () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelPoolTunnelPoolManager *_manager_;
  NetI2pRouterTunnelPoolBuildExecutor *_exec_;
  id<NetI2pRouterJob> _buildMessageHandlerJob_;
  id<NetI2pRouterJob> _buildReplyMessageHandlerJob_;
  id<JavaUtilConcurrentBlockingQueue> _inboundBuildMessages_;
  NetI2pRouterTunnelBuildMessageProcessor *_processor_;
  NetI2pRouterTunnelPoolRequestThrottler *_requestThrottler_;
  NetI2pRouterTunnelPoolParticipatingThrottler *_throttler_;
  NetI2pRouterTunnelBuildReplyHandler *_buildReplyHandler_;
  JavaUtilConcurrentAtomicAtomicInteger *_currentLookups_;
  volatile_jboolean _isRunning_;
  id _startupLock_;
  NetI2pRouterTunnelPoolBuildHandler_ExplState *_explState_;
}

- (void)handleInboundRequest;

- (void)handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *)state;

- (void)handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage:(NetI2pDataI2npTunnelBuildReplyMessage *)msg
         withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
                                                    withLong:(jlong)delay;

- (jlong)handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state;

- (void)handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *)state;

- (void)handleReqWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)nextPeerInfo
withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
           withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                             withNetI2pDataHash:(NetI2pDataHash *)nextPeer;

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _manager_, NetI2pRouterTunnelPoolTunnelPoolManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _exec_, NetI2pRouterTunnelPoolBuildExecutor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _buildMessageHandlerJob_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _buildReplyMessageHandlerJob_, id<NetI2pRouterJob>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _inboundBuildMessages_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _processor_, NetI2pRouterTunnelBuildMessageProcessor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _requestThrottler_, NetI2pRouterTunnelPoolRequestThrottler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _throttler_, NetI2pRouterTunnelPoolParticipatingThrottler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _buildReplyHandler_, NetI2pRouterTunnelBuildReplyHandler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _currentLookups_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _startupLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler, _explState_, NetI2pRouterTunnelPoolBuildHandler_ExplState *)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_MIN_QUEUE(void);
#define NetI2pRouterTunnelPoolBuildHandler_MIN_QUEUE 18
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MIN_QUEUE, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_MAX_QUEUE(void);
#define NetI2pRouterTunnelPoolBuildHandler_MAX_QUEUE 192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MAX_QUEUE, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_NEXT_HOP_LOOKUP_TIMEOUT(void);
#define NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_LOOKUP_TIMEOUT 15000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, NEXT_HOP_LOOKUP_TIMEOUT, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_PRIORITY(void);
#define NetI2pRouterTunnelPoolBuildHandler_PRIORITY 300
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, PRIORITY, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_MIN_LOOKUP_LIMIT(void);
#define NetI2pRouterTunnelPoolBuildHandler_MIN_LOOKUP_LIMIT 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MIN_LOOKUP_LIMIT, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_MAX_LOOKUP_LIMIT(void);
#define NetI2pRouterTunnelPoolBuildHandler_MAX_LOOKUP_LIMIT 100
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MAX_LOOKUP_LIMIT, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_PERCENT_LOOKUP_LIMIT(void);
#define NetI2pRouterTunnelPoolBuildHandler_PERCENT_LOOKUP_LIMIT 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, PERCENT_LOOKUP_LIMIT, jint)

inline jint NetI2pRouterTunnelPoolBuildHandler_get_NEXT_HOP_SEND_TIMEOUT(void);
#define NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_SEND_TIMEOUT 25000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, NEXT_HOP_SEND_TIMEOUT, jint)

inline jlong NetI2pRouterTunnelPoolBuildHandler_get_MAX_REQUEST_FUTURE(void);
#define NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_FUTURE 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MAX_REQUEST_FUTURE, jlong)

inline jlong NetI2pRouterTunnelPoolBuildHandler_get_MAX_REQUEST_AGE(void);
#define NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_AGE 3900000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, MAX_REQUEST_AGE, jlong)

inline jlong NetI2pRouterTunnelPoolBuildHandler_get_JOB_LAG_LIMIT_TUNNEL(void);
#define NetI2pRouterTunnelPoolBuildHandler_JOB_LAG_LIMIT_TUNNEL 350LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildHandler, JOB_LAG_LIMIT_TUNNEL, jlong)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_handleInboundRequest(NetI2pRouterTunnelPoolBuildHandler *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *state);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withLong_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pDataI2npTunnelBuildReplyMessage *msg, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, jlong delay);

__attribute__((unused)) static jlong NetI2pRouterTunnelPoolBuildHandler_handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *state);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_handleReqWithNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pDataRouterRouterInfo *nextPeerInfo, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer);

__attribute__((unused)) static NSString *NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(NSString *s);

typedef NS_ENUM(NSUInteger, NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum) {
  NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_NONE = 0,
  NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_IB = 1,
  NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_OB = 2,
  NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_BOTH = 3,
};

@interface NetI2pRouterTunnelPoolBuildHandler_ExplState : JavaLangEnum

@property (readonly, class, nonnull) NetI2pRouterTunnelPoolBuildHandler_ExplState *NONE NS_SWIFT_NAME(NONE);
@property (readonly, class, nonnull) NetI2pRouterTunnelPoolBuildHandler_ExplState *IB NS_SWIFT_NAME(IB);
@property (readonly, class, nonnull) NetI2pRouterTunnelPoolBuildHandler_ExplState *OB NS_SWIFT_NAME(OB);
@property (readonly, class, nonnull) NetI2pRouterTunnelPoolBuildHandler_ExplState *BOTH NS_SWIFT_NAME(BOTH);
+ (IOSObjectArray *)values;

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)valueOfWithNSString:(NSString *)name;

- (NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_ExplState)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_values_[];

inline NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_get_NONE(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTunnelPoolBuildHandler_ExplState, NONE)

inline NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_get_IB(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTunnelPoolBuildHandler_ExplState, IB)

inline NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_get_OB(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTunnelPoolBuildHandler_ExplState, OB)

inline NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_get_BOTH(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_ExplState_initWithNSString_withInt_(NetI2pRouterTunnelPoolBuildHandler_ExplState *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelPoolBuildHandler_ExplState_values(void);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_ExplState)

@interface NetI2pRouterTunnelPoolBuildHandler_HandleReq : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelPoolBuildHandler *this$0_;
  NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *_state_;
  NetI2pDataI2npBuildRequestRecord *_req_;
  NetI2pDataHash *_nextPeer_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
  withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
                      withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                                        withNetI2pDataHash:(NetI2pDataHash *)nextPeer;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_HandleReq)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_HandleReq, _state_, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_HandleReq, _req_, NetI2pDataI2npBuildRequestRecord *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_HandleReq, _nextPeer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_HandleReq *self, NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_HandleReq *new_NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_HandleReq *create_NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_HandleReq)

@interface NetI2pRouterTunnelPoolBuildHandler_TimeoutReq : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelPoolBuildHandler *this$0_;
  NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *_state_;
  NetI2pDataI2npBuildRequestRecord *_req_;
  NetI2pDataHash *_nextPeer_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
  withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
                      withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                                        withNetI2pDataHash:(NetI2pDataHash *)nextPeer;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq, _state_, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq, _req_, NetI2pDataI2npBuildRequestRecord *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq, _nextPeer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *self, NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *new_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *create_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq)

@interface NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder : NSObject < NetI2pRouterHandlerJobBuilder > {
 @public
  NetI2pRouterTunnelPoolBuildHandler *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$;

- (id<NetI2pRouterJob>)createJobWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)receivedMessage
                           withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                                           withNetI2pDataHash:(NetI2pDataHash *)fromHash;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *self, NetI2pRouterTunnelPoolBuildHandler *outer$);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder)

@interface NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder : NSObject < NetI2pRouterHandlerJobBuilder > {
 @public
  NetI2pRouterTunnelPoolBuildHandler *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$;

- (id<NetI2pRouterJob>)createJobWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)receivedMessage
                           withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                                           withNetI2pDataHash:(NetI2pDataHash *)fromHash;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *self, NetI2pRouterTunnelPoolBuildHandler *outer$);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder)

@interface NetI2pRouterTunnelPoolBuildHandler_BuildMessageState : NSObject < NetI2pRouterUtilCDQEntry > {
 @public
  NetI2pRouterRouterContext *_ctx_;
  NetI2pDataI2npTunnelBuildMessage *msg_;
  NetI2pDataRouterRouterIdentity *from_;
  NetI2pDataHash *fromHash_;
  jlong recvTime_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)f
                               withNetI2pDataHash:(NetI2pDataHash *)h;

- (void)setEnqueueTimeWithLong:(jlong)time;

- (jlong)getEnqueueTime;

- (void)drop;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, _ctx_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, msg_, NetI2pDataI2npTunnelBuildMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, from_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, fromHash_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *self, NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState)

@interface NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState : NSObject {
 @public
  NetI2pDataI2npTunnelBuildReplyMessage *msg_;
  jlong recvTime_;
}

- (instancetype)initWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState, msg_, NetI2pDataI2npTunnelBuildReplyMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *self, id<NetI2pDataI2npI2NPMessage> m);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> m) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> m);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState)

@interface NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState : NSObject {
 @public
  NetI2pDataI2npTunnelBuildMessage *msg_;
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg_;
  jlong recvTime_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)c
                                          withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState, msg_, NetI2pDataI2npTunnelBuildMessage *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState, cfg_, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *self, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState)

@interface NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob : NetI2pRouterJobImpl

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *self, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob)

@interface NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob : NetI2pRouterJobImpl

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *self, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob)

@interface NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelHopConfig *_cfg_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)cfg;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob, _cfg_, NetI2pRouterTunnelHopConfig *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob)

@implementation NetI2pRouterTunnelPoolBuildHandler

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
      withNetI2pRouterTunnelPoolTunnelPoolManager:(NetI2pRouterTunnelPoolTunnelPoolManager *)manager
          withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec {
  NetI2pRouterTunnelPoolBuildHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_(self, ctx, manager, exec);
  return self;
}

- (void)init__ {
  if ([((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) isDummy]) {
    JreStrongAssign(&_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH));
    [((NetI2pRouterRouter *) nil_chk([_context_ router])) setExplTunnelsReady];
    return;
  }
  jint ibl = [((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) getInboundSettings])) getLength];
  jint ibv = [((NetI2pRouterTunnelPoolSettings *) nil_chk([_manager_ getInboundSettings])) getLengthVariance];
  jint obl = [((NetI2pRouterTunnelPoolSettings *) nil_chk([_manager_ getOutboundSettings])) getLength];
  jint obv = [((NetI2pRouterTunnelPoolSettings *) nil_chk([_manager_ getOutboundSettings])) getLengthVariance];
  jboolean ibz = ibl <= 0 || ibl + ibv <= 0;
  jboolean obz = obl <= 0 || obl + obv <= 0;
  if (ibz && obz) {
    JreStrongAssign(&_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH));
    [((NetI2pRouterRouter *) nil_chk([_context_ router])) setExplTunnelsReady];
  }
  else if (ibz) {
    JreStrongAssign(&_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, IB));
  }
  else if (obz) {
    JreStrongAssign(&_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, OB));
  }
}

- (void)restart {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_inboundBuildMessages_)) clear];
}

- (void)shutdownWithInt:(jint)numThreads {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isRunning_, false);
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_inboundBuildMessages_)) clear];
    NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *poison = create_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(_context_, nil, nil, nil);
    for (jint i = 0; i < numThreads; i++) {
      [_inboundBuildMessages_ offerWithId:poison];
    }
  }
}

- (void)run {
  JreAssignVolatileBoolean(&_isRunning_, true);
  while (JreLoadVolatileBoolean(&_isRunning_) && ![((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) isShutdown]) {
    @try {
      NetI2pRouterTunnelPoolBuildHandler_handleInboundRequest(self);
    }
    @catch (JavaLangRuntimeException *e) {
      [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"B0rked in the tunnel handler" withJavaLangThrowable:e];
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Done handling"];
  JreAssignVolatileBoolean(&_isRunning_, false);
}

- (void)handleInboundRequest {
  NetI2pRouterTunnelPoolBuildHandler_handleInboundRequest(self);
}

- (void)handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *)state {
  NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_(self, state);
}

- (void)handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage:(NetI2pDataI2npTunnelBuildReplyMessage *)msg
         withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
                                                    withLong:(jlong)delay {
  NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withLong_(self, msg, cfg, delay);
}

- (jlong)handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state {
  return NetI2pRouterTunnelPoolBuildHandler_handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_(self, state);
}

- (void)handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *)state {
  NetI2pRouterTunnelPoolBuildHandler_handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_(self, state);
}

- (void)handleReqWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)nextPeerInfo
withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
           withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                             withNetI2pDataHash:(NetI2pDataHash *)nextPeer {
  NetI2pRouterTunnelPoolBuildHandler_handleReqWithNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, nextPeerInfo, state, req, nextPeer);
}

- (jint)getInboundBuildQueueSize {
  return [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_inboundBuildMessages_)) size];
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_manager_);
  RELEASE_(_exec_);
  RELEASE_(_buildMessageHandlerJob_);
  RELEASE_(_buildReplyMessageHandlerJob_);
  RELEASE_(_inboundBuildMessages_);
  RELEASE_(_processor_);
  RELEASE_(_requestThrottler_);
  RELEASE_(_throttler_);
  RELEASE_(_buildReplyHandler_);
  RELEASE_(_currentLookups_);
  RELEASE_(_startupLock_);
  RELEASE_(_explState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPoolManager:withNetI2pRouterTunnelPoolBuildExecutor:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(shutdownWithInt:);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(handleInboundRequest);
  methods[6].selector = @selector(handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState:);
  methods[7].selector = @selector(handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withLong:);
  methods[8].selector = @selector(handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:);
  methods[9].selector = @selector(handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState:);
  methods[10].selector = @selector(handleReqWithNetI2pDataRouterRouterInfo:withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:withNetI2pDataI2npBuildRequestRecord:withNetI2pDataHash:);
  methods[11].selector = @selector(getInboundBuildQueueSize);
  methods[12].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterTunnelPoolTunnelPoolManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_exec_", "LNetI2pRouterTunnelPoolBuildExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_buildMessageHandlerJob_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_buildReplyMessageHandlerJob_", "LNetI2pRouterJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_inboundBuildMessages_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "_processor_", "LNetI2pRouterTunnelBuildMessageProcessor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_requestThrottler_", "LNetI2pRouterTunnelPoolRequestThrottler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_throttler_", "LNetI2pRouterTunnelPoolParticipatingThrottler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_buildReplyHandler_", "LNetI2pRouterTunnelBuildReplyHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentLookups_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_startupLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_explState_", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MIN_QUEUE", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_MIN_QUEUE, 0x1a, -1, -1, -1, -1 },
    { "MAX_QUEUE", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_MAX_QUEUE, 0x1a, -1, -1, -1, -1 },
    { "NEXT_HOP_LOOKUP_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_LOOKUP_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "MIN_LOOKUP_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_MIN_LOOKUP_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "MAX_LOOKUP_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_MAX_LOOKUP_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "PERCENT_LOOKUP_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_PERCENT_LOOKUP_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "NEXT_HOP_SEND_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_SEND_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_REQUEST_FUTURE", "J", .constantValue.asLong = NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_FUTURE, 0x1a, -1, -1, -1, -1 },
    { "MAX_REQUEST_AGE", "J", .constantValue.asLong = NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_AGE, 0x1a, -1, -1, -1, -1 },
    { "JOB_LAG_LIMIT_TUNNEL", "J", .constantValue.asLong = NetI2pRouterTunnelPoolBuildHandler_JOB_LAG_LIMIT_TUNNEL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPoolManager;LNetI2pRouterTunnelPoolBuildExecutor;", "init", "shutdown", "I", "handleReply", "LNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState;", "LNetI2pDataI2npTunnelBuildReplyMessage;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;J", "handleRequest", "LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;", "handleRequestAsInboundEndpoint", "LNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState;", "handleReq", "LNetI2pDataRouterRouterInfo;LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;LNetI2pDataI2npBuildRequestRecord;LNetI2pDataHash;", "_x", "LNSString;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/tunnel/pool/BuildHandler$BuildMessageState;>;", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;LNetI2pRouterTunnelPoolBuildHandler_HandleReq;LNetI2pRouterTunnelPoolBuildHandler_TimeoutReq;LNetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder;LNetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder;LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;LNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState;LNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState;LNetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob;LNetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob;LNetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler = { "BuildHandler", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 13, 26, -1, 16, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *manager, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_currentLookups_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->_startupLock_, new_NSObject_init());
  JreStrongAssign(&self->_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, NONE));
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_manager_, manager);
  JreStrongAssign(&self->_exec_, exec);
  jint sz = JavaLangMath_minWithInt_withInt_(NetI2pRouterTunnelPoolBuildHandler_MAX_QUEUE, JavaLangMath_maxWithInt_withInt_(NetI2pRouterTunnelPoolBuildHandler_MIN_QUEUE, NetI2pRouterTunnelTunnelDispatcher_getShareBandwidthWithNetI2pRouterRouterContext_(ctx) * NetI2pRouterTunnelPoolBuildHandler_MIN_QUEUE / 48));
  JreStrongAssignAndConsume(&self->_inboundBuildMessages_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(sz));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"tunnel.reject.10" withNSString:@"How often we reject a tunnel probabalistically" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.reject.20" withNSString:@"How often we reject a tunnel because of transient overload" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.reject.30" withNSString:@"How often we reject a tunnel because of bandwidth overload" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.reject.50" withNSString:@"How often we reject a tunnel because of a critical issue (shutdown, etc)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.decryptRequestTime" withNSString:@"Time to decrypt a build request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.rejectTooOld" withNSString:@"Reject tunnel count (too old)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 3 * 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.rejectFuture" withNSString:@"Reject tunnel count (time in future)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 3 * 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.rejectTimeout" withNSString:@"Reject tunnel count (unknown next hop)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.rejectTimeout2" withNSString:@"Reject tunnel count (can't contact next hop)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.rejectDupID" withNSString:@"Part. tunnel dup ID" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.ownDupID" withNSString:@"Our tunnel dup. ID" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.rejectHostile" withNSString:@"Reject malicious tunnel" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.rejectHopThrottle" withNSString:@"Reject per-hop limit" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropReqThrottle" withNSString:@"Drop per-hop limit" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLookupThrottle" withNSString:@"Drop next hop lookup" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.dropDecryptFail" withNSString:@"Can't find our slot" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.rejectOverloaded" withNSString:@"Delay to process rejected request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.acceptLoad" withNSString:@"Delay to process accepted request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.dropConnLimits" withNSString:@"Drop instead of reject due to conn limits" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.rejectConnLimits" withNSString:@"Reject due to conn limits" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLoad" withNSString:@"Delay before dropping request (ms)?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLoadDelay" withNSString:@"Delay before abandoning request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLoadBacklog" withNSString:@"Pending request count when dropped" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLoadProactive" withNSString:@"Delay estimate when dropped (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.dropLoadProactiveAbort" withNSString:@"Allowed requests during load" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.buildReplyTooSlow" withNSString:@"How often a tunnel build reply came back after we had given up waiting for it?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.receiveRejectionProbabalistic" withNSString:@"How often we are rejected probabalistically?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.receiveRejectionTransient" withNSString:@"How often we are rejected due to transient overload?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.receiveRejectionBandwidth" withNSString:@"How often we are rejected due to bandwidth overload?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.receiveRejectionCritical" withNSString:@"How often we are rejected due to critical failure?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.corruptBuildReply" withNSString:@"" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 24 * 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.buildLookupSuccess" withNSString:@"Was a deferred lookup successful?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  JreStrongAssignAndConsume(&self->_processor_, new_NetI2pRouterTunnelBuildMessageProcessor_initWithNetI2pI2PAppContext_(ctx));
  JreStrongAssignAndConsume(&self->_requestThrottler_, new_NetI2pRouterTunnelPoolRequestThrottler_initWithNetI2pRouterRouterContext_(ctx));
  JreStrongAssignAndConsume(&self->_throttler_, new_NetI2pRouterTunnelPoolParticipatingThrottler_initWithNetI2pRouterRouterContext_(ctx));
  JreStrongAssignAndConsume(&self->_buildReplyHandler_, new_NetI2pRouterTunnelBuildReplyHandler_initWithNetI2pI2PAppContext_(ctx));
  JreStrongAssignAndConsume(&self->_buildMessageHandlerJob_, new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(ctx));
  JreStrongAssignAndConsume(&self->_buildReplyMessageHandlerJob_, new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(ctx));
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *tbmhjb = create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(self);
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *tbrmhjb = create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(self);
  [((NetI2pRouterInNetMessagePool *) nil_chk([ctx inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npTunnelBuildMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:tbmhjb];
  [((NetI2pRouterInNetMessagePool *) nil_chk([ctx inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npTunnelBuildReplyMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:tbrmhjb];
  [((NetI2pRouterInNetMessagePool *) nil_chk([ctx inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npVariableTunnelBuildMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:tbmhjb];
  [((NetI2pRouterInNetMessagePool *) nil_chk([ctx inNetMessagePool])) registerHandlerJobBuilderWithInt:NetI2pDataI2npVariableTunnelBuildReplyMessage_MESSAGE_TYPE withNetI2pRouterHandlerJobBuilder:tbrmhjb];
}

NetI2pRouterTunnelPoolBuildHandler *new_NetI2pRouterTunnelPoolBuildHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *manager, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_, ctx, manager, exec)
}

NetI2pRouterTunnelPoolBuildHandler *create_NetI2pRouterTunnelPoolBuildHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *manager, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_, ctx, manager, exec)
}

void NetI2pRouterTunnelPoolBuildHandler_handleInboundRequest(NetI2pRouterTunnelPoolBuildHandler *self) {
  NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state = nil;
  @try {
    state = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->_inboundBuildMessages_)) take];
  }
  @catch (JavaLangInterruptedException *ie) {
    return;
  }
  if (((NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *) nil_chk(state))->msg_ == nil) {
    JreAssignVolatileBoolean(&self->_isRunning_, false);
    return;
  }
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong dropBefore = now - (NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT / 4);
  if (state->recvTime_ <= dropBefore) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$J", @"Not even trying to handle/decrypt the request ", [state->msg_ getUniqueId], @", since we received it a long time ago: ", (now - state->recvTime_))];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropLoadDelay" withLong:now - state->recvTime_];
    [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: Too slow")];
    return;
  }
  jlong lag = [((NetI2pRouterJobQueue *) nil_chk([self->_context_ jobQueue])) getMaxLag];
  if (lag > NetI2pRouterTunnelPoolBuildHandler_JOB_LAG_LIMIT_TUNNEL) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J", @"Dropping tunnel request, as the job lag is ", lag)];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"router.throttleTunnelCause" withLong:lag];
    [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: High job lag")];
    return;
  }
  NetI2pRouterTunnelPoolBuildHandler_handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_(self, state);
}

void NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *state) {
  jlong replyMessageId = [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(((NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *) nil_chk(state))->msg_)) getUniqueId];
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) removeFromBuildingWithLong:replyMessageId];
  if (cfg == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$", @"The reply ", replyMessageId, @" did not match any pending tunnels")];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.buildReplyTooSlow" withLong:1];
  }
  else {
    NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withLong_(self, state->msg_, cfg, JavaLangSystem_currentTimeMillis() - state->recvTime_);
  }
}

void NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withLong_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pDataI2npTunnelBuildReplyMessage *msg, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, jlong delay) {
  jlong requestedOn = [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getExpiration] - 10 * 60 * 1000;
  jlong rtt = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] - requestedOn;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$J$J$@", [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(msg)) getUniqueId], @": Handling the reply after ", rtt, @", delayed ", delay, @" waiting for ", cfg)];
  id<JavaUtilList> order = [cfg getReplyOrder];
  IOSIntArray *statuses = [((NetI2pRouterTunnelBuildReplyHandler *) nil_chk(self->_buildReplyHandler_)) decryptWithNetI2pDataI2npTunnelBuildReplyMessage:msg withNetI2pRouterTunnelTunnelCreatorConfig:cfg withJavaUtilList:order];
  if (statuses != nil) {
    jboolean allAgree = true;
    for (jint i = 0; i < [cfg getLength]; i++) {
      NetI2pDataHash *peer = [cfg getPeerWithInt:i];
      if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[self->_context_ routerHash]]) continue;
      jint record = [((id<JavaUtilList>) nil_chk(order)) indexOfWithId:JavaLangInteger_valueOfWithInt_(i)];
      if (record < 0) {
        [self->_log_ errorWithNSString:JreStrcat("$I", @"Bad status index ", i)];
        [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:[cfg getTunnelPool]];
        return;
      }
      jint howBad = IOSIntArray_Get(statuses, record);
      NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
      NSString *bwTier = @"Unknown";
      if (ri != nil) bwTier = [ri getBandwidthTier];
      else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Failed detecting bwTier, null routerInfo for: ", peer)];
      if (howBad == 0) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:JreStrcat("$$", @"tunnel.tierAgree", bwTier) withLong:1];
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:JreStrcat("$$", @"tunnel.tierReject", bwTier) withLong:1];
      }
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$@$I", [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(msg)) getUniqueId], @": Peer ", peer, @" replied with status ", howBad)];
      if (howBad == 0) {
        [((id<NetI2pRouterProfileManager>) nil_chk([self->_context_ profileManager])) tunnelJoinedWithNetI2pDataHash:peer withLong:rtt];
      }
      else {
        allAgree = false;
        switch (howBad) {
          case NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH:
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.receiveRejectionBandwidth" withLong:1];
          break;
          case NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD:
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.receiveRejectionTransient" withLong:1];
          break;
          case NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_PROBABALISTIC_REJECT:
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.receiveRejectionProbabalistic" withLong:1];
          break;
          case NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_CRIT:
          default:
          [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.receiveRejectionCritical" withLong:1];
        }
        [((id<NetI2pRouterProfileManager>) nil_chk([self->_context_ profileManager])) tunnelRejectedWithNetI2pDataHash:peer withLong:rtt withInt:howBad];
        [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) tunnelParticipantRejectedWithNetI2pDataHash:peer withNSString:JreStrcat("$J$I$$", @"peer rejected after ", rtt, @" with ", howBad, @": ", [cfg description])];
      }
    }
    if (allAgree) {
      jboolean success;
      if ([cfg isInbound]) success = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) joinInboundWithNetI2pRouterTunnelTunnelCreatorConfig:cfg];
      else success = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) joinOutboundWithNetI2pRouterTunnelTunnelCreatorConfig:cfg];
      if (!success) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.ownDupID" withLong:1];
        [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:[cfg getTunnelPool]];
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dup ID for our own tunnel ", cfg)];
        return;
      }
      [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk([cfg getTunnelPool])) addTunnelWithNetI2pRouterTunnelInfo:cfg];
      [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:[cfg getTunnelPool]];
      [self->_exec_ buildSuccessfulWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
      if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk([cfg getTunnelPool])) getSettings])) isExploratory]) {
        jboolean isIn = [cfg isInbound];
        @synchronized(self->_startupLock_) {
          switch ([self->_explState_ ordinal]) {
            case NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_NONE:
            if (isIn) JreStrongAssign(&self->_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, IB));
            else JreStrongAssign(&self->_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, OB));
            break;
            case NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_IB:
            if (!isIn) {
              JreStrongAssign(&self->_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH));
              [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) setExplTunnelsReady];
            }
            break;
            case NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_OB:
            if (isIn) {
              JreStrongAssign(&self->_explState_, JreLoadEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH));
              [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) setExplTunnelsReady];
            }
            break;
            case NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum_BOTH:
            break;
          }
        }
      }
      NetI2pRouterTunnelPoolExpireJob *expireJob = create_NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(self->_context_, cfg, [cfg getTunnelPool]);
      [cfg setExpireJobWithNetI2pRouterJob:expireJob];
      [((NetI2pRouterJobQueue *) nil_chk([self->_context_ jobQueue])) addJobWithNetI2pRouterJob:expireJob];
      if ([cfg getDestination] == nil) [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildExploratorySuccess" withLong:rtt];
      else [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildClientSuccess" withLong:rtt];
    }
    else {
      [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:[cfg getTunnelPool]];
      if ([cfg getDestination] == nil) [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildExploratoryReject" withLong:rtt];
      else [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildClientReject" withLong:rtt];
    }
  }
  else {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("J$@", [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(msg)) getUniqueId], @": Tunnel reply could not be decrypted for tunnel ", cfg)];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.corruptBuildReply" withLong:1];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(self->_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:[cfg getTunnelPool]];
  }
}

jlong NetI2pRouterTunnelPoolBuildHandler_handleRequestWithNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state) {
  jlong timeSinceReceived = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] - ((NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *) nil_chk(state))->recvTime_;
  NetI2pDataHash *from = state->fromHash_;
  if (from == nil && state->from_ != nil) from = [state->from_ calculateHash];
  if (timeSinceReceived > (NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT * 3)) {
    [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: Overloaded")];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$J", @"Not even trying to handle/decrypt the request ", [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(state->msg_)) getUniqueId], @", since we received it a long time ago: ", timeSinceReceived)];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropLoadDelay" withLong:timeSinceReceived];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return -1;
  }
  jlong beforeDecrypt = JavaLangSystem_currentTimeMillis();
  NetI2pDataI2npBuildRequestRecord *req = [((NetI2pRouterTunnelBuildMessageProcessor *) nil_chk(self->_processor_)) decryptWithNetI2pDataI2npTunnelBuildMessage:state->msg_ withNetI2pDataHash:[self->_context_ routerHash] withNetI2pDataPrivateKey:[((NetI2pRouterKeyManager *) nil_chk([self->_context_ keyManager])) getPrivateKey]];
  jlong decryptTime = JavaLangSystem_currentTimeMillis() - beforeDecrypt;
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.decryptRequestTime" withLong:decryptTime];
  if (decryptTime > 500 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$J$J$J$", @"Took too long to decrypt the request: ", decryptTime, @" for message ", [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(state->msg_)) getUniqueId], @" received ", (timeSinceReceived + decryptTime), @" ago")];
  if (req == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) {
      [self->_log_ warnWithNSString:JreStrcat("$J$@", @"The request ", [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(state->msg_)) getUniqueId], @" could not be decrypted from: ", from)];
    }
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropDecryptFail" withLong:1];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return -1;
  }
  jlong beforeLookup = JavaLangSystem_currentTimeMillis();
  NetI2pDataHash *nextPeer = [req readNextIdentity];
  jlong readPeerTime = JavaLangSystem_currentTimeMillis() - beforeLookup;
  NetI2pDataRouterRouterInfo *nextPeerInfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:nextPeer];
  jlong lookupTime = JavaLangSystem_currentTimeMillis() - beforeLookup;
  if (lookupTime > 500 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$JCJ$@", @"Took too long to lookup the request: ", lookupTime, '/', readPeerTime, @" for ", req)];
  if (nextPeerInfo == nil) {
    jint numTunnels = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([self->_context_ tunnelManager])) getParticipatingCount];
    jint limit = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTunnelPoolBuildHandler_MIN_LOOKUP_LIMIT, JavaLangMath_minWithInt_withInt_(NetI2pRouterTunnelPoolBuildHandler_MAX_LOOKUP_LIMIT, numTunnels * NetI2pRouterTunnelPoolBuildHandler_PERCENT_LOOKUP_LIMIT / 100));
    jint current;
    if ([((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:16] > 0) current = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_currentLookups_)) incrementAndGet];
    else current = 1;
    if (current <= limit) {
      if (current <= 0) [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_currentLookups_)) setWithInt:1];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@$ICI", @"Request ", req, @" handled, lookup next peer ", nextPeer, @" lookups: ", current, '/', limit)];
      [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoWithNetI2pDataHash:nextPeer withNetI2pRouterJob:create_NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, self->_context_, state, req, nextPeer) withNetI2pRouterJob:create_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, self->_context_, state, req, nextPeer) withLong:NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_LOOKUP_TIMEOUT];
    }
    else {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->_currentLookups_)) decrementAndGet];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$I$@", @"Drop next hop lookup, limit ", limit, @": ", req)];
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropLookupThrottle" withLong:1];
      if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    }
    return -1;
  }
  else {
    jlong beforeHandle = JavaLangSystem_currentTimeMillis();
    NetI2pRouterTunnelPoolBuildHandler_handleReqWithNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, nextPeerInfo, state, req, nextPeer);
    jlong handleTime = JavaLangSystem_currentTimeMillis() - beforeHandle;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@$JCJCJCJ", @"Request ", req, @" handled and we know the next peer ", nextPeer, @" after ", handleTime, '/', decryptTime, '/', lookupTime, '/', timeSinceReceived)];
    return handleTime;
  }
}

void NetI2pRouterTunnelPoolBuildHandler_handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *state) {
  jint records = [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(((NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *) nil_chk(state))->msg_)) getRecordCount];
  NetI2pDataI2npTunnelBuildReplyMessage *msg;
  if (records == NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT) msg = create_NetI2pDataI2npTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_(self->_context_);
  else msg = create_NetI2pDataI2npVariableTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_withInt_(self->_context_, records);
  for (jint i = 0; i < records; i++) [msg setRecordWithInt:i withNetI2pDataI2npEncryptedBuildRecord:[state->msg_ getRecordWithInt:i]];
  [msg setUniqueIdWithLong:[state->msg_ getUniqueId]];
  NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withLong_(self, msg, state->cfg_, JavaLangSystem_currentTimeMillis() - state->recvTime_);
}

void NetI2pRouterTunnelPoolBuildHandler_handleReqWithNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *self, NetI2pDataRouterRouterInfo *nextPeerInfo, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  jlong ourId = [((NetI2pDataI2npBuildRequestRecord *) nil_chk(req)) readReceiveTunnelId];
  jlong nextId = [req readNextTunnelId];
  jboolean isInGW = [req readIsInboundGateway];
  jboolean isOutEnd = [req readIsOutboundEndpoint];
  NetI2pDataHash *from = ((NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *) nil_chk(state))->fromHash_;
  if (from == nil && state->from_ != nil) from = [state->from_ calculateHash];
  if (isInGW && isOutEnd) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.rejectHostile" withLong:1];
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@", @"Dropping build request, IBGW+OBEP: ", req)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return;
  }
  if (ourId <= 0 || ourId > NetI2pDataTunnelId_MAX_ID_VALUE || nextId <= 0 || nextId > NetI2pDataTunnelId_MAX_ID_VALUE) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.rejectHostile" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping build request, bad tunnel ID: ", req)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return;
  }
  if ((!isOutEnd) && [((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) routerHash])) isEqual:nextPeer]) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.rejectHostile" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping build request, we are the next hop: ", req)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return;
  }
  if (!isInGW) {
    if (from == nil || [((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) routerHash])) isEqual:from]) {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.rejectHostile" withLong:1];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping build request, we are the previous hop: ", req)];
      return;
    }
  }
  if ((!isOutEnd) && (!isInGW)) {
    if ([((NetI2pDataHash *) nil_chk(nextPeer)) isEqual:from]) {
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) addRateDataWithNSString:@"tunnel.rejectHostile" withLong:1];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping build request with the same previous and next hop: ", req)];
      [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
      return;
    }
  }
  jlong time = [req readRequestTime];
  jlong now = ([((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] / (60l * 60l * 1000l)) * (60 * 60 * 1000);
  jlong timeDiff = now - time;
  if (timeDiff > NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_AGE) {
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectTooOld" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$@", @"Dropping build request too old... replay attack? ", NetI2pDataDataHelper_formatDurationWithLong_(timeDiff), @": ", req)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return;
  }
  if (timeDiff < 0 - NetI2pRouterTunnelPoolBuildHandler_MAX_REQUEST_FUTURE) {
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectFuture" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$@", @"Dropping build request too far in future ", NetI2pDataDataHelper_formatDurationWithLong_(0 - timeDiff), @": ", req)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    return;
  }
  jint response;
  if ([((NetI2pRouterRouter *) nil_chk([self->_context_ router])) isHidden]) {
    [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Rejecting tunnels: Hidden mode")];
    response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
  }
  else {
    response = [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) acceptTunnelRequest];
  }
  jlong recvDelay = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - state->recvTime_;
  if (response == 0) {
    jfloat pDrop = ((jfloat) recvDelay) / (jfloat) (NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT * 3);
    pDrop = (jfloat) JavaLangMath_powWithDouble_withDouble_(pDrop, 16);
    if ([((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextFloat] < pDrop) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectOverloaded" withLong:recvDelay];
      [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Rejecting tunnels: Request overload")];
      response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD;
    }
    else {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.acceptLoad" withLong:recvDelay];
    }
  }
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getRouterInfo];
  if (response == 0) {
    if (ri == nil) {
      response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
    }
    else {
      jchar bw = [((NSString *) nil_chk([ri getBandwidthTier])) charAtWithInt:0];
      if (bw != 'O' && bw != 'N' && bw != 'P' && bw != 'X' && ((isInGW && ![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) haveInboundCapacityWithInt:87]) || (isOutEnd && ![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) haveOutboundCapacityWithInt:87]))) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectConnLimits" withLong:1];
        [((id<NetI2pRouterRouterThrottle>) nil_chk([self->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Rejecting tunnels: Connection limit")];
        response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
      }
    }
  }
  if (response == 0 && !isInGW) {
    if (from != nil && [((NetI2pRouterTunnelPoolParticipatingThrottler *) nil_chk(self->_throttler_)) shouldThrottleWithNetI2pDataHash:from]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Rejecting tunnel (hop throttle), previous hop: ", from, @": ", req)];
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectHopThrottle" withLong:1];
      response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
    }
  }
  if (response == 0 && (!isOutEnd) && [((NetI2pRouterTunnelPoolParticipatingThrottler *) nil_chk(self->_throttler_)) shouldThrottleWithNetI2pDataHash:nextPeer]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Rejecting tunnel (hop throttle), next hop: ", req)];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectHopThrottle" withLong:1];
    response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
  }
  NetI2pRouterTunnelHopConfig *cfg = nil;
  if (response == 0) {
    cfg = create_NetI2pRouterTunnelHopConfig_init();
    [cfg setCreationWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now]];
    [cfg setExpirationWithLong:[((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 10 * 60 * 1000];
    [cfg setIVKeyWithNetI2pDataSessionKey:[req readIVKey]];
    [cfg setLayerKeyWithNetI2pDataSessionKey:[req readLayerKey]];
    if (isInGW) {
    }
    else {
      if (from != nil) {
        [cfg setReceiveFromWithNetI2pDataHash:from];
      }
      else {
        return;
      }
    }
    [cfg setReceiveTunnelIdWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, ourId)];
    if (isOutEnd) {
    }
    else {
      [cfg setSendToWithNetI2pDataHash:nextPeer];
      [cfg setSendTunnelIdWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, nextId)];
    }
    jboolean success;
    if (isOutEnd) success = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) joinOutboundEndpointWithNetI2pRouterTunnelHopConfig:cfg];
    else if (isInGW) success = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) joinInboundGatewayWithNetI2pRouterTunnelHopConfig:cfg];
    else success = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) joinParticipantWithNetI2pRouterTunnelHopConfig:cfg];
    if (success) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Joining: ", req)];
    }
    else {
      response = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.rejectDupID" withLong:1];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"DUP ID failure: ", req)];
    }
  }
  if (response != 0) {
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:JreStrcat("$I", @"tunnel.reject.", response) withLong:1];
    [((NetI2pRouterMessageHistory *) nil_chk([self->_context_ messageHistory])) tunnelRejectedWithNetI2pDataHash:from withNetI2pDataTunnelId:create_NetI2pDataTunnelId_initWithLong_(ourId) withNetI2pDataHash:nextPeer withNSString:JavaLangInteger_toStringWithInt_(response)];
    if (from != nil) [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
    if ((![((NetI2pDataHash *) nil_chk([self->_context_ routerHash])) isEqual:nextPeer]) && (![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) haveOutboundCapacityWithInt:81]) && (![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) isEstablishedWithNetI2pDataHash:nextPeer])) {
      [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropConnLimits" withLong:1];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Not sending rejection due to conn limits: ", req)];
      return;
    }
  }
  else if (isInGW && from != nil) {
    [((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) mayDisconnectWithNetI2pDataHash:from];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$J$I$@$@", @"Responding to ", [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(state->msg_)) getUniqueId], @" after ", recvDelay, @" with ", response, @" from ", (from != nil ? from : (id) @"tunnel"), @": ", req)];
  NetI2pDataI2npEncryptedBuildRecord *reply = NetI2pDataI2npBuildResponseRecord_createWithNetI2pI2PAppContext_withInt_withNetI2pDataSessionKey_withByteArray_withLong_(self->_context_, response, [req readReplyKey], [req readReplyIV], [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(state->msg_)) getUniqueId]);
  jint records = [state->msg_ getRecordCount];
  jint ourSlot = -1;
  for (jint j = 0; j < records; j++) {
    if ([state->msg_ getRecordWithInt:j] == nil) {
      ourSlot = j;
      [state->msg_ setRecordWithInt:j withNetI2pDataI2npEncryptedBuildRecord:reply];
      break;
    }
  }
  if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$I$J$J", @"Read slot ", ourSlot, @" containing: ", req, @" accepted? ", response, @" recvDelay ", recvDelay, @" replyMessage ", [req readReplyMessageId])];
  jlong expires = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + NetI2pRouterTunnelPoolBuildHandler_NEXT_HOP_SEND_TIMEOUT;
  if (!isOutEnd) {
    [state->msg_ setUniqueIdWithLong:[req readReplyMessageId]];
    [state->msg_ setMessageExpirationWithLong:expires];
    NetI2pRouterOutNetMessage *msg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self->_context_, state->msg_, expires, NetI2pRouterTunnelPoolBuildHandler_PRIORITY, nextPeerInfo);
    if (response == 0) [msg setOnFailedSendJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(self->_context_, cfg)];
    [((NetI2pRouterOutNetMessagePool *) nil_chk([self->_context_ outNetMessagePool])) addWithNetI2pRouterOutNetMessage:msg];
  }
  else {
    NetI2pDataI2npTunnelBuildReplyMessage *replyMsg;
    if (records == NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT) replyMsg = create_NetI2pDataI2npTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_(self->_context_);
    else replyMsg = create_NetI2pDataI2npVariableTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_withInt_(self->_context_, records);
    for (jint i = 0; i < records; i++) [replyMsg setRecordWithInt:i withNetI2pDataI2npEncryptedBuildRecord:[state->msg_ getRecordWithInt:i]];
    [replyMsg setUniqueIdWithLong:[req readReplyMessageId]];
    [replyMsg setMessageExpirationWithLong:expires];
    NetI2pDataI2npTunnelGatewayMessage *m = create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_(self->_context_);
    [m setMessageWithNetI2pDataI2npI2NPMessage:replyMsg];
    [m setMessageExpirationWithLong:expires];
    [m setTunnelIdWithNetI2pDataTunnelId:create_NetI2pDataTunnelId_initWithLong_(nextId)];
    if ([((NetI2pDataHash *) nil_chk([self->_context_ routerHash])) isEqual:nextPeer]) {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$J$@", @"We are the reply gateway for ", nextId, @" when replying to replyMessage ", req)];
      [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([self->_context_ tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelGatewayMessage:m];
    }
    else {
      NetI2pRouterOutNetMessage *outMsg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self->_context_, m, expires, NetI2pRouterTunnelPoolBuildHandler_PRIORITY, nextPeerInfo);
      if (response == 0) [outMsg setOnFailedSendJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(self->_context_, cfg)];
      [((NetI2pRouterOutNetMessagePool *) nil_chk([self->_context_ outNetMessagePool])) addWithNetI2pRouterOutNetMessage:outMsg];
    }
  }
}

NSString *NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(NSString *s) {
  NetI2pRouterTunnelPoolBuildHandler_initialize();
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelPoolBuildHandler_ExplState)

NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_values_[4];

@implementation NetI2pRouterTunnelPoolBuildHandler_ExplState

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)NONE {
  return JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, NONE);
}

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)IB {
  return JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, IB);
}

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)OB {
  return JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, OB);
}

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)BOTH {
  return JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterTunnelPoolBuildHandler_ExplState_values();
}

+ (NetI2pRouterTunnelPoolBuildHandler_ExplState *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterTunnelPoolBuildHandler_ExplState_valueOfWithNSString_(name);
}

- (NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum)toNSEnum {
  return (NetI2pRouterTunnelPoolBuildHandler_ExplState_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterTunnelPoolBuildHandler_ExplState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "IB", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "OB", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "BOTH", "LNetI2pRouterTunnelPoolBuildHandler_ExplState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, NONE), &JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, IB), &JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, OB), &JreEnum(NetI2pRouterTunnelPoolBuildHandler_ExplState, BOTH), "LNetI2pRouterTunnelPoolBuildHandler;", "Ljava/lang/Enum<Lnet/i2p/router/tunnel/pool/BuildHandler$ExplState;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_ExplState = { "ExplState", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_ExplState;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelPoolBuildHandler_ExplState class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pRouterTunnelPoolBuildHandler_ExplState_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pRouterTunnelPoolBuildHandler_ExplState_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pRouterTunnelPoolBuildHandler_ExplState_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelPoolBuildHandler_ExplState)
  }
}

@end

void NetI2pRouterTunnelPoolBuildHandler_ExplState_initWithNSString_withInt_(NetI2pRouterTunnelPoolBuildHandler_ExplState *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pRouterTunnelPoolBuildHandler_ExplState_values() {
  NetI2pRouterTunnelPoolBuildHandler_ExplState_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterTunnelPoolBuildHandler_ExplState_values_ count:4 type:NetI2pRouterTunnelPoolBuildHandler_ExplState_class_()];
}

NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_valueOfWithNSString_(NSString *name) {
  NetI2pRouterTunnelPoolBuildHandler_ExplState_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pRouterTunnelPoolBuildHandler_ExplState *e = NetI2pRouterTunnelPoolBuildHandler_ExplState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterTunnelPoolBuildHandler_ExplState *NetI2pRouterTunnelPoolBuildHandler_ExplState_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterTunnelPoolBuildHandler_ExplState_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pRouterTunnelPoolBuildHandler_ExplState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_ExplState)

@implementation NetI2pRouterTunnelPoolBuildHandler_HandleReq

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
  withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
                      withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                                        withNetI2pDataHash:(NetI2pDataHash *)nextPeer {
  NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, outer$, ctx, state, req, nextPeer);
  return self;
}

- (NSString *)getName {
  return @"Deferred tunnel join processing";
}

- (void)runJob {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->_currentLookups_)) decrementAndGet];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$J$@", @"Request ", [((NetI2pDataI2npTunnelBuildMessage *) nil_chk(((NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *) nil_chk(_state_))->msg_)) getUniqueId], @" handled with a successful deferred lookup: ", _req_)];
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:_nextPeer_];
  if (ri != nil) {
    NetI2pRouterTunnelPoolBuildHandler_handleReqWithNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(this$0_, ri, _state_, _req_, _nextPeer_);
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.buildLookupSuccess" withLong:1];
  }
  else {
    if ([this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$@", @"Deferred successfully, but we couldnt find ", _nextPeer_, @"? ", _req_)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.buildLookupSuccess" withLong:0];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_state_);
  RELEASE_(_req_);
  RELEASE_(_nextPeer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolBuildHandler:withNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:withNetI2pDataI2npBuildRequestRecord:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolBuildHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_req_", "LNetI2pDataI2npBuildRequestRecord;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextPeer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;LNetI2pDataI2npBuildRequestRecord;LNetI2pDataHash;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_HandleReq = { "HandleReq", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 3, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_HandleReq;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_HandleReq *self, NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_state_, state);
  JreStrongAssign(&self->_req_, req);
  JreStrongAssign(&self->_nextPeer_, nextPeer);
}

NetI2pRouterTunnelPoolBuildHandler_HandleReq *new_NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_HandleReq, initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_, outer$, ctx, state, req, nextPeer)
}

NetI2pRouterTunnelPoolBuildHandler_HandleReq *create_NetI2pRouterTunnelPoolBuildHandler_HandleReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_HandleReq, initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_, outer$, ctx, state, req, nextPeer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_HandleReq)

@implementation NetI2pRouterTunnelPoolBuildHandler_TimeoutReq

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
  withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *)state
                      withNetI2pDataI2npBuildRequestRecord:(NetI2pDataI2npBuildRequestRecord *)req
                                        withNetI2pDataHash:(NetI2pDataHash *)nextPeer {
  NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(self, outer$, ctx, state, req, nextPeer);
  return self;
}

- (NSString *)getName {
  return @"Timeout looking for next peer for tunnel join";
}

- (void)runJob {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->_currentLookups_)) decrementAndGet];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.rejectTimeout" withLong:1];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.buildLookupSuccess" withLong:0];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Next hop lookup failure: ", _req_)];
  [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageHistory])) tunnelRejectedWithNetI2pDataHash:((NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *) nil_chk(_state_))->fromHash_ withNetI2pDataTunnelId:create_NetI2pDataTunnelId_initWithLong_([((NetI2pDataI2npBuildRequestRecord *) nil_chk(_req_)) readReceiveTunnelId]) withNetI2pDataHash:_nextPeer_ withNSString:@"lookup fail"];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_state_);
  RELEASE_(_req_);
  RELEASE_(_nextPeer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolBuildHandler:withNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState:withNetI2pDataI2npBuildRequestRecord:withNetI2pDataHash:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolBuildHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_state_", "LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_req_", "LNetI2pDataI2npBuildRequestRecord;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextPeer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolBuildHandler_BuildMessageState;LNetI2pDataI2npBuildRequestRecord;LNetI2pDataHash;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TimeoutReq = { "TimeoutReq", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 3, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *self, NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_state_, state);
  JreStrongAssign(&self->_req_, req);
  JreStrongAssign(&self->_nextPeer_, nextPeer);
}

NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *new_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq, initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_, outer$, ctx, state, req, nextPeer)
}

NetI2pRouterTunnelPoolBuildHandler_TimeoutReq *create_NetI2pRouterTunnelPoolBuildHandler_TimeoutReq_initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler *outer$, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *state, NetI2pDataI2npBuildRequestRecord *req, NetI2pDataHash *nextPeer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq, initWithNetI2pRouterTunnelPoolBuildHandler_withNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolBuildHandler_BuildMessageState_withNetI2pDataI2npBuildRequestRecord_withNetI2pDataHash_, outer$, ctx, state, req, nextPeer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TimeoutReq)

@implementation NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$ {
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(self, outer$);
  return self;
}

- (id<NetI2pRouterJob>)createJobWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)receivedMessage
                           withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                                           withNetI2pDataHash:(NetI2pDataHash *)fromHash {
  jlong reqId = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(receivedMessage)) getUniqueId];
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(this$0_->_exec_)) removeFromBuildingWithLong:reqId];
  if (cfg != nil) {
    if (![cfg isInbound]) {
      [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:JreStrcat("$@", @"received it, but its not inbound? ", cfg)];
    }
    NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *state = create_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(cfg, receivedMessage);
    NetI2pRouterTunnelPoolBuildHandler_handleRequestAsInboundEndpointWithNetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_(this$0_, state);
  }
  else {
    if ([this$0_->_exec_ wasRecentlyBuildingWithLong:reqId]) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$J$", @"Dropping the reply ", reqId, @", as we used to be building that")];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"tunnel.buildReplyTooSlow" withLong:1];
    }
    else {
      jint sz = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(this$0_->_inboundBuildMessages_)) size];
      NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *cur = [this$0_->_inboundBuildMessages_ peek];
      jboolean accept = true;
      if (cur != nil) {
        jlong age = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now] - cur->recvTime_;
        if (age >= NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT / 4) {
          [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropLoad" withLong:age withLong:sz];
          [((id<NetI2pRouterRouterThrottle>) nil_chk([this$0_->_context_ throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: High load")];
          accept = false;
        }
      }
      if (accept) {
        NetI2pDataHash *fh = fromHash;
        if (fh == nil && from != nil) fh = [from calculateHash];
        if (fh != nil && [((NetI2pRouterTunnelPoolRequestThrottler *) nil_chk(this$0_->_requestThrottler_)) shouldThrottleWithNetI2pDataHash:fh]) {
          if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@", @"Dropping tunnel request (from throttle), previous hop: ", fh)];
          [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"tunnel.dropReqThrottle" withLong:1];
          accept = false;
        }
      }
      if (accept) {
        accept = [this$0_->_inboundBuildMessages_ offerWithId:create_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(this$0_->_context_, receivedMessage, from, fromHash)];
        if (accept) {
          [this$0_->_exec_ repoll];
        }
        else {
          [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: High load")];
          [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.dropLoadBacklog" withLong:sz];
        }
      }
    }
  }
  return this$0_->_buildMessageHandlerJob_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolBuildHandler:);
  methods[1].selector = @selector(createJobWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolBuildHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createJob", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder = { "TunnelBuildMessageHandlerJobBuilder", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *self, NetI2pRouterTunnelPoolBuildHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder, initWithNetI2pRouterTunnelPoolBuildHandler_, outer$)
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder, initWithNetI2pRouterTunnelPoolBuildHandler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJobBuilder)

@implementation NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder

- (instancetype)initWithNetI2pRouterTunnelPoolBuildHandler:(NetI2pRouterTunnelPoolBuildHandler *)outer$ {
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(self, outer$);
  return self;
}

- (id<NetI2pRouterJob>)createJobWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)receivedMessage
                           withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)from
                                           withNetI2pDataHash:(NetI2pDataHash *)fromHash {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$J$@", @"Receive tunnel build reply message ", [((id<NetI2pDataI2npI2NPMessage>) nil_chk(receivedMessage)) getUniqueId], @" from ", (fromHash != nil ? fromHash : from != nil ? [from calculateHash] : (id) @"a tunnel"))];
  NetI2pRouterTunnelPoolBuildHandler_handleReplyWithNetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_(this$0_, create_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(receivedMessage));
  return this$0_->_buildReplyMessageHandlerJob_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolBuildHandler:);
  methods[1].selector = @selector(createJobWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolBuildHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createJob", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder = { "TunnelBuildReplyMessageHandlerJobBuilder", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *self, NetI2pRouterTunnelPoolBuildHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder, initWithNetI2pRouterTunnelPoolBuildHandler_, outer$)
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder_initWithNetI2pRouterTunnelPoolBuildHandler_(NetI2pRouterTunnelPoolBuildHandler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder, initWithNetI2pRouterTunnelPoolBuildHandler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJobBuilder)

@implementation NetI2pRouterTunnelPoolBuildHandler_BuildMessageState

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                    withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m
               withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)f
                               withNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(self, ctx, m, f, h);
  return self;
}

- (void)setEnqueueTimeWithLong:(jlong)time {
}

- (jlong)getEnqueueTime {
  return recvTime_;
}

- (void)drop {
  [((id<NetI2pRouterRouterThrottle>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) throttle])) setTunnelStatusWithNSString:NetI2pRouterTunnelPoolBuildHandler__xWithNSString_(@"Dropping tunnel requests: Queue time")];
  [((NetI2pStatStatManager *) nil_chk([_ctx_ statManager])) addRateDataWithNSString:@"tunnel.dropLoadProactive" withLong:[((NetI2pUtilClock *) nil_chk([_ctx_ clock])) now] - recvTime_];
}

- (void)dealloc {
  RELEASE_(_ctx_);
  RELEASE_(msg_);
  RELEASE_(from_);
  RELEASE_(fromHash_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  methods[1].selector = @selector(setEnqueueTimeWithLong:);
  methods[2].selector = @selector(getEnqueueTime);
  methods[3].selector = @selector(drop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "msg_", "LNetI2pDataI2npTunnelBuildMessage;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "from_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fromHash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "recvTime_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "setEnqueueTime", "J", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_BuildMessageState = { "BuildMessageState", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 4, 5, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *self, NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h) {
  NSObject_init(self);
  JreStrongAssign(&self->_ctx_, ctx);
  JreStrongAssign(&self->msg_, (NetI2pDataI2npTunnelBuildMessage *) cast_chk(m, [NetI2pDataI2npTunnelBuildMessage class]));
  JreStrongAssign(&self->from_, f);
  JreStrongAssign(&self->fromHash_, h);
  self->recvTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now];
}

NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, ctx, m, f, h)
}

NetI2pRouterTunnelPoolBuildHandler_BuildMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildMessageState_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_(NetI2pRouterRouterContext *ctx, id<NetI2pDataI2npI2NPMessage> m, NetI2pDataRouterRouterIdentity *f, NetI2pDataHash *h) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState, initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withNetI2pDataRouterRouterIdentity_withNetI2pDataHash_, ctx, m, f, h)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_BuildMessageState)

@implementation NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState

- (instancetype)initWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m {
  NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(self, m);
  return self;
}

- (void)dealloc {
  RELEASE_(msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "msg_", "LNetI2pDataI2npTunnelBuildReplyMessage;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "recvTime_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState = { "BuildReplyMessageState", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *self, id<NetI2pDataI2npI2NPMessage> m) {
  NSObject_init(self);
  JreStrongAssign(&self->msg_, (NetI2pDataI2npTunnelBuildReplyMessage *) cast_chk(m, [NetI2pDataI2npTunnelBuildReplyMessage class]));
  self->recvTime_ = JavaLangSystem_currentTimeMillis();
}

NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> m) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState, initWithNetI2pDataI2npI2NPMessage_, m)
}

NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState_initWithNetI2pDataI2npI2NPMessage_(id<NetI2pDataI2npI2NPMessage> m) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState, initWithNetI2pDataI2npI2NPMessage_, m)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_BuildReplyMessageState)

@implementation NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState

- (instancetype)initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)c
                                          withNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m {
  NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(self, c, m);
  return self;
}

- (void)dealloc {
  RELEASE_(msg_);
  RELEASE_(cfg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "msg_", "LNetI2pDataI2npTunnelBuildMessage;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cfg_", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "recvTime_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState = { "BuildEndMessageState", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *self, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m) {
  NSObject_init(self);
  JreStrongAssign(&self->cfg_, c);
  JreStrongAssign(&self->msg_, (NetI2pDataI2npTunnelBuildMessage *) cast_chk(m, [NetI2pDataI2npTunnelBuildMessage class]));
  self->recvTime_ = JavaLangSystem_currentTimeMillis();
}

NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *new_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState, initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_, c, m)
}

NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState *create_NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState_initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *c, id<NetI2pDataI2npI2NPMessage> m) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState, initWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pDataI2npI2NPMessage_, c, m)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_BuildEndMessageState)

@implementation NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)runJob {
}

- (NSString *)getName {
  return @"Receive tunnel build message";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob = { "TunnelBuildMessageHandlerJob", "net.i2p.router.tunnel.pool", ptrTable, methods, NULL, 7, 0xa, 3, 0, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildMessageHandlerJob)

@implementation NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)runJob {
}

- (NSString *)getName {
  return @"Receive tunnel build reply message";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob = { "TunnelBuildReplyMessageHandlerJob", "net.i2p.router.tunnel.pool", ptrTable, methods, NULL, 7, 0xa, 3, 0, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildReplyMessageHandlerJob)

@implementation NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)cfg {
  NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(self, ctx, cfg);
  return self;
}

- (NSString *)getName {
  return @"Timeout contacting next peer for tunnel join";
}

- (void)runJob {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.rejectTimeout2" withLong:1];
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolBuildHandler_class_()];
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$@", @"Timeout contacting next hop for ", _cfg_)];
}

- (void)dealloc {
  RELEASE_(_cfg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelHopConfig:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_cfg_", "LNetI2pRouterTunnelHopConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelHopConfig;", "LNetI2pRouterTunnelPoolBuildHandler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob = { "TunnelBuildNextHopFailJob", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob;
}

@end

void NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_cfg_, cfg);
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *new_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_, ctx, cfg)
}

NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob *create_NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelHopConfig *cfg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelHopConfig_, ctx, cfg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildHandler_TunnelBuildNextHopFailJob)
