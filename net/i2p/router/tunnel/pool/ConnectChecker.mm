//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/ConnectChecker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/TransportManager.h"
#include "net/i2p/router/tunnel/pool/ConnectChecker.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTunnelPoolConnectChecker ()

+ (jint)getConnectMaskWithJavaUtilCollection:(id<JavaUtilCollection>)addrs;

@end

inline jint NetI2pRouterTunnelPoolConnectChecker_get_NTCP_V4(void);
#define NetI2pRouterTunnelPoolConnectChecker_NTCP_V4 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolConnectChecker, NTCP_V4, jint)

inline jint NetI2pRouterTunnelPoolConnectChecker_get_SSU_V4(void);
#define NetI2pRouterTunnelPoolConnectChecker_SSU_V4 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolConnectChecker, SSU_V4, jint)

inline jint NetI2pRouterTunnelPoolConnectChecker_get_NTCP_V6(void);
#define NetI2pRouterTunnelPoolConnectChecker_NTCP_V6 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolConnectChecker, NTCP_V6, jint)

inline jint NetI2pRouterTunnelPoolConnectChecker_get_SSU_V6(void);
#define NetI2pRouterTunnelPoolConnectChecker_SSU_V6 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolConnectChecker, SSU_V6, jint)

inline jint NetI2pRouterTunnelPoolConnectChecker_get_ANY_V6(void);
#define NetI2pRouterTunnelPoolConnectChecker_ANY_V6 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolConnectChecker, ANY_V6, jint)

inline IOSObjectArray *NetI2pRouterTunnelPoolConnectChecker_get_IHOST(void);
static IOSObjectArray *NetI2pRouterTunnelPoolConnectChecker_IHOST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolConnectChecker, IHOST, IOSObjectArray *)

__attribute__((unused)) static jint NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(id<JavaUtilCollection> addrs);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelPoolConnectChecker)

@implementation NetI2pRouterTunnelPoolConnectChecker

+ (jint)ANY_V4 {
  return NetI2pRouterTunnelPoolConnectChecker_ANY_V4;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jboolean)isNTCPDisabled {
  return !NetI2pRouterTransportTransportManager_isNTCPEnabledWithNetI2pRouterRouterContext_(ctx_);
}

- (jboolean)isSSUDisabled {
  return ![((NetI2pRouterRouterContext *) nil_chk(ctx_)) getBooleanPropertyDefaultTrueWithNSString:NetI2pRouterTransportTransportManager_PROP_ENABLE_UDP];
}

- (jboolean)canConnectWithNetI2pDataHash:(NetI2pDataHash *)from
                      withNetI2pDataHash:(NetI2pDataHash *)to {
  NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk(ctx_)) routerHash];
  if (us == nil) return true;
  jboolean usf = [((NetI2pDataHash *) nil_chk(from)) isEqual:us];
  if (usf && [((NetI2pRouterCommSystemFacade *) nil_chk([ctx_ commSystem])) isEstablishedWithNetI2pDataHash:to]) return true;
  jboolean ust = [((NetI2pDataHash *) nil_chk(to)) isEqual:us];
  if (ust && [((NetI2pRouterCommSystemFacade *) nil_chk([ctx_ commSystem])) isEstablishedWithNetI2pDataHash:from]) return true;
  NetI2pDataRouterRouterInfo *rt = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([ctx_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:to];
  if (rt == nil) return true;
  NetI2pDataRouterRouterInfo *rf = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([ctx_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:from];
  if (rf == nil) return true;
  jint ct;
  if (ust) {
    ct = [self getInboundMaskWithNetI2pDataRouterRouterInfo:rt];
  }
  else {
    id<JavaUtilCollection> at = [rt getAddresses];
    if ([((id<JavaUtilCollection>) nil_chk(at)) isEmpty]) return false;
    ct = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(at);
  }
  jint cf;
  if (usf) {
    cf = [self getOutboundMaskWithNetI2pDataRouterRouterInfo:rf];
  }
  else {
    id<JavaUtilCollection> a = [rf getAddresses];
    if ([((id<JavaUtilCollection>) nil_chk(a)) isEmpty]) {
      cf = NetI2pRouterTunnelPoolConnectChecker_NTCP_V4 | NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
    }
    else {
      cf = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(a);
    }
  }
  jboolean rv = (ct & cf) != 0;
  if (!rv && [((NetI2pUtilLog *) nil_chk(log_)) shouldWarn]) {
    [((NetI2pUtilLog *) nil_chk(log_)) warnWithNSString:JreStrcat("$$$I$$$I", @"Cannot connect: ", (usf ? @"us" : [from description]), @" with mask ", cf, @"\nto ", (ust ? @"us" : [to description]), @" with mask ", ct)];
  }
  return rv;
}

- (jboolean)canConnectWithInt:(jint)ourMask
withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)to {
  id<JavaUtilCollection> ra = [((NetI2pDataRouterRouterInfo *) nil_chk(to)) getAddresses];
  if ([((id<JavaUtilCollection>) nil_chk(ra)) isEmpty]) return false;
  jint ct = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(ra);
  jboolean rv = (ourMask & ct) != 0;
  return rv;
}

- (jboolean)canConnectWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)from
                                             withInt:(jint)ourMask {
  if (ourMask == 0) return false;
  id<JavaUtilCollection> ra = [((NetI2pDataRouterRouterInfo *) nil_chk(from)) getAddresses];
  jint cf;
  if ([((id<JavaUtilCollection>) nil_chk(ra)) isEmpty]) cf = NetI2pRouterTunnelPoolConnectChecker_NTCP_V4 | NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
  else cf = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(ra);
  jboolean rv = (cf & ourMask) != 0;
  return rv;
}

- (jint)getInboundMaskWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)us {
  jint ct = 0;
  NetI2pRouterCommSystemFacade_Status *status = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) commSystem])) getStatus];
  {
    id<JavaUtilCollection> at;
    switch ([status ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      at = [((NetI2pDataRouterRouterInfo *) nil_chk(us)) getAddresses];
      if ([((id<JavaUtilCollection>) nil_chk(at)) isEmpty]) return 0;
      ct = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(at);
      break;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      if (![self isNTCPDisabled]) ct |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V6;
      if (![self isSSUDisabled]) ct |= NetI2pRouterTunnelPoolConnectChecker_SSU_V6;
      break;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_DISCONNECTED:
      case NetI2pRouterCommSystemFacade_Status_Enum_HOSED:
      case NetI2pRouterCommSystemFacade_Status_Enum_UNKNOWN:
      default:
      if (![self isNTCPDisabled]) ct |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V4;
      if (![self isSSUDisabled]) ct |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
      break;
    }
  }
  return ct;
}

- (jint)getOutboundMaskWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)us {
  jint cf = 0;
  NetI2pRouterCommSystemFacade_Status *status = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) commSystem])) getStatus];
  {
    id<JavaUtilCollection> a;
    switch ([status ordinal]) {
      case NetI2pRouterCommSystemFacade_Status_Enum_OK:
      a = [((NetI2pDataRouterRouterInfo *) nil_chk(us)) getAddresses];
      if ([((id<JavaUtilCollection>) nil_chk(a)) isEmpty]) {
        if (![self isNTCPDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V4;
        if (![self isSSUDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
      }
      else {
        cf = NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(a);
      }
      break;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_FIREWALLED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_UNKNOWN_IPV6_FIREWALLED:
      if (![self isNTCPDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V4 | NetI2pRouterTunnelPoolConnectChecker_NTCP_V6;
      if (![self isSSUDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4 | NetI2pRouterTunnelPoolConnectChecker_SSU_V6;
      break;
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_OK:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_DISABLED_IPV6_FIREWALLED:
      if (![self isNTCPDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V6;
      if (![self isSSUDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_SSU_V6;
      break;
      case NetI2pRouterCommSystemFacade_Status_Enum_DIFFERENT:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_SNAT_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_FIREWALLED_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_REJECT_UNSOLICITED:
      case NetI2pRouterCommSystemFacade_Status_Enum_IPV4_OK_IPV6_UNKNOWN:
      case NetI2pRouterCommSystemFacade_Status_Enum_DISCONNECTED:
      case NetI2pRouterCommSystemFacade_Status_Enum_HOSED:
      case NetI2pRouterCommSystemFacade_Status_Enum_UNKNOWN:
      default:
      if (![self isNTCPDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V4;
      if (![self isSSUDisabled]) cf |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
      break;
    }
  }
  return cf;
}

+ (jint)getConnectMaskWithJavaUtilCollection:(id<JavaUtilCollection>)addrs {
  return NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(addrs);
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(isNTCPDisabled);
  methods[2].selector = @selector(isSSUDisabled);
  methods[3].selector = @selector(canConnectWithNetI2pDataHash:withNetI2pDataHash:);
  methods[4].selector = @selector(canConnectWithInt:withNetI2pDataRouterRouterInfo:);
  methods[5].selector = @selector(canConnectWithNetI2pDataRouterRouterInfo:withInt:);
  methods[6].selector = @selector(getInboundMaskWithNetI2pDataRouterRouterInfo:);
  methods[7].selector = @selector(getOutboundMaskWithNetI2pDataRouterRouterInfo:);
  methods[8].selector = @selector(getConnectMaskWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "NTCP_V4", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_NTCP_V4, 0x1a, -1, -1, -1, -1 },
    { "SSU_V4", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_SSU_V4, 0x1a, -1, -1, -1, -1 },
    { "ANY_V4", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_ANY_V4, 0x19, -1, -1, -1, -1 },
    { "NTCP_V6", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_NTCP_V6, 0x1a, -1, -1, -1, -1 },
    { "SSU_V6", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_SSU_V6, 0x1a, -1, -1, -1, -1 },
    { "ANY_V6", "I", .constantValue.asInt = NetI2pRouterTunnelPoolConnectChecker_ANY_V6, 0x1a, -1, -1, -1, -1 },
    { "IHOST", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "canConnect", "LNetI2pDataHash;LNetI2pDataHash;", "ILNetI2pDataRouterRouterInfo;", "LNetI2pDataRouterRouterInfo;I", "getInboundMask", "LNetI2pDataRouterRouterInfo;", "getOutboundMask", "getConnectMask", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/router/RouterAddress;>;)I", &NetI2pRouterTunnelPoolConnectChecker_IHOST };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolConnectChecker = { "ConnectChecker", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolConnectChecker;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelPoolConnectChecker class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTunnelPoolConnectChecker_IHOST, [IOSObjectArray newArrayWithObjects:(id[]){ @"ihost0", @"ihost1", @"ihost2" } count:3 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelPoolConnectChecker)
  }
}

@end

void NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolConnectChecker *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, context);
  JreStrongAssign(&self->log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) logManager])) getLogWithIOSClass:[self java_getClass]]);
}

NetI2pRouterTunnelPoolConnectChecker *new_NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolConnectChecker, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTunnelPoolConnectChecker *create_NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolConnectChecker, initWithNetI2pRouterRouterContext_, context)
}

jint NetI2pRouterTunnelPoolConnectChecker_getConnectMaskWithJavaUtilCollection_(id<JavaUtilCollection> addrs) {
  NetI2pRouterTunnelPoolConnectChecker_initialize();
  jint rv = 0;
  for (NetI2pDataRouterRouterAddress * __strong ra in nil_chk(addrs)) {
    NSString *style = [((NetI2pDataRouterRouterAddress *) nil_chk(ra)) getTransportStyle];
    NSString *host = [ra getHost];
    if ([@"NTCP" isEqual:style]) {
      if (host != nil) {
        if ([host java_contains:@":"]) rv |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V6;
        else rv |= NetI2pRouterTunnelPoolConnectChecker_NTCP_V4;
      }
    }
    else if ([@"SSU" isEqual:style]) {
      if (host == nil) {
        for (jint i = 0; i < 2; i++) {
          NSString *ihost = [ra getOptionWithNSString:IOSObjectArray_Get(nil_chk(NetI2pRouterTunnelPoolConnectChecker_IHOST), i)];
          if (ihost == nil) break;
          if ([ihost java_contains:@":"]) rv |= NetI2pRouterTunnelPoolConnectChecker_SSU_V6;
          else rv |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
        }
      }
      else if ([host java_contains:@":"]) {
        rv |= NetI2pRouterTunnelPoolConnectChecker_SSU_V6;
      }
      else {
        rv |= NetI2pRouterTunnelPoolConnectChecker_SSU_V4;
      }
    }
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolConnectChecker)
