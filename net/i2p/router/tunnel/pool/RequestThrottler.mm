//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/RequestThrottler.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/tunnel/pool/RequestThrottler.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTunnelPoolRequestThrottler () {
 @public
  NetI2pRouterRouterContext *context_;
  NetI2pUtilObjectCounter *counter_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolRequestThrottler, context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolRequestThrottler, counter_, NetI2pUtilObjectCounter *)

inline jint NetI2pRouterTunnelPoolRequestThrottler_get_LIFETIME_PORTION(void);
#define NetI2pRouterTunnelPoolRequestThrottler_LIFETIME_PORTION 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolRequestThrottler, LIFETIME_PORTION, jint)

inline jint NetI2pRouterTunnelPoolRequestThrottler_get_MIN_LIMIT(void);
#define NetI2pRouterTunnelPoolRequestThrottler_MIN_LIMIT 7
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolRequestThrottler, MIN_LIMIT, jint)

inline jint NetI2pRouterTunnelPoolRequestThrottler_get_MAX_LIMIT(void);
#define NetI2pRouterTunnelPoolRequestThrottler_MAX_LIMIT 27
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolRequestThrottler, MAX_LIMIT, jint)

inline jint NetI2pRouterTunnelPoolRequestThrottler_get_PERCENT_LIMIT(void);
#define NetI2pRouterTunnelPoolRequestThrottler_PERCENT_LIMIT 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolRequestThrottler, PERCENT_LIMIT, jint)

inline jlong NetI2pRouterTunnelPoolRequestThrottler_get_CLEAN_TIME(void);
#define NetI2pRouterTunnelPoolRequestThrottler_CLEAN_TIME 110000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolRequestThrottler, CLEAN_TIME, jlong)

@interface NetI2pRouterTunnelPoolRequestThrottler_Cleaner : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTunnelPoolRequestThrottler *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolRequestThrottler:(NetI2pRouterTunnelPoolRequestThrottler *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolRequestThrottler_Cleaner)

__attribute__((unused)) static void NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler_Cleaner *self, NetI2pRouterTunnelPoolRequestThrottler *outer$);

__attribute__((unused)) static NetI2pRouterTunnelPoolRequestThrottler_Cleaner *new_NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolRequestThrottler_Cleaner *create_NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolRequestThrottler_Cleaner)

@implementation NetI2pRouterTunnelPoolRequestThrottler

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolRequestThrottler_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (jboolean)shouldThrottleWithNetI2pDataHash:(NetI2pDataHash *)h {
  jint numTunnels = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->context_)) tunnelManager])) getParticipatingCount];
  jint limit = JavaLangMath_maxWithInt_withInt_(NetI2pRouterTunnelPoolRequestThrottler_MIN_LIMIT, JavaLangMath_minWithInt_withInt_(NetI2pRouterTunnelPoolRequestThrottler_MAX_LIMIT, numTunnels * NetI2pRouterTunnelPoolRequestThrottler_PERCENT_LIMIT / 100));
  return [((NetI2pUtilObjectCounter *) nil_chk(self->counter_)) incrementWithId:h] > limit;
}

- (void)dealloc {
  RELEASE_(context_);
  RELEASE_(counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(shouldThrottleWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "counter_", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "LIFETIME_PORTION", "I", .constantValue.asInt = NetI2pRouterTunnelPoolRequestThrottler_LIFETIME_PORTION, 0x1a, -1, -1, -1, -1 },
    { "MIN_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolRequestThrottler_MIN_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "MAX_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolRequestThrottler_MAX_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "PERCENT_LIMIT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolRequestThrottler_PERCENT_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "CLEAN_TIME", "J", .constantValue.asLong = NetI2pRouterTunnelPoolRequestThrottler_CLEAN_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "shouldThrottle", "LNetI2pDataHash;", "Lnet/i2p/util/ObjectCounter<Lnet/i2p/data/Hash;>;", "LNetI2pRouterTunnelPoolRequestThrottler_Cleaner;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolRequestThrottler = { "RequestThrottler", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 2, 7, -1, 4, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolRequestThrottler;
}

@end

void NetI2pRouterTunnelPoolRequestThrottler_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolRequestThrottler *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->context_, ctx);
  JreStrongAssignAndConsume(&self->counter_, new_NetI2pUtilObjectCounter_init());
  [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) simpleTimer2])) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(self) withLong:NetI2pRouterTunnelPoolRequestThrottler_CLEAN_TIME];
}

NetI2pRouterTunnelPoolRequestThrottler *new_NetI2pRouterTunnelPoolRequestThrottler_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolRequestThrottler, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTunnelPoolRequestThrottler *create_NetI2pRouterTunnelPoolRequestThrottler_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolRequestThrottler, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolRequestThrottler)

@implementation NetI2pRouterTunnelPoolRequestThrottler_Cleaner

- (instancetype)initWithNetI2pRouterTunnelPoolRequestThrottler:(NetI2pRouterTunnelPoolRequestThrottler *)outer$ {
  NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(self, outer$);
  return self;
}

- (void)timeReached {
  [((NetI2pUtilObjectCounter *) nil_chk(this$0_->counter_)) clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolRequestThrottler:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolRequestThrottler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTunnelPoolRequestThrottler;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolRequestThrottler_Cleaner = { "Cleaner", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolRequestThrottler_Cleaner;
}

@end

void NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler_Cleaner *self, NetI2pRouterTunnelPoolRequestThrottler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterTunnelPoolRequestThrottler_Cleaner *new_NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolRequestThrottler_Cleaner, initWithNetI2pRouterTunnelPoolRequestThrottler_, outer$)
}

NetI2pRouterTunnelPoolRequestThrottler_Cleaner *create_NetI2pRouterTunnelPoolRequestThrottler_Cleaner_initWithNetI2pRouterTunnelPoolRequestThrottler_(NetI2pRouterTunnelPoolRequestThrottler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolRequestThrottler_Cleaner, initWithNetI2pRouterTunnelPoolRequestThrottler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolRequestThrottler_Cleaner)
