//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TunnelPool.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPool")
#ifdef RESTRICT_NetI2pRouterTunnelPoolTunnelPool
#define INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPool 0
#else
#define INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPool 1
#endif
#undef RESTRICT_NetI2pRouterTunnelPoolTunnelPool

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTunnelPoolTunnelPool_) && (INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPool || defined(INCLUDE_NetI2pRouterTunnelPoolTunnelPool))
#define NetI2pRouterTunnelPoolTunnelPool_

@class NetI2pDataHash;
@class NetI2pDataLeaseSet;
@class NetI2pDataTunnelId;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTunnelPoolPooledTunnelCreatorConfig;
@class NetI2pRouterTunnelPoolSettings;
@class NetI2pRouterTunnelPoolTunnelPeerSelector;
@class NetI2pRouterTunnelPoolTunnelPoolManager;
@class NetI2pUtilLog;
@protocol JavaUtilList;
@protocol NetI2pRouterTunnelInfo;

@interface NetI2pRouterTunnelPoolTunnelPool : NSObject {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  volatile_jboolean _alive_;
}

#pragma mark Public

- (jlong)getLifetimeProcessed;

- (NSString *)getRateName;

- (NetI2pRouterTunnelPoolSettings *)getSettings;

- (id<NetI2pRouterTunnelInfo>)getTunnelWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)gatewayId;

- (jboolean)isAlive;

- (id<JavaUtilList>)listPending;

- (id<JavaUtilList>)listTunnels;

- (jint)size;

- (NSString *)description;

#pragma mark Protected

- (NetI2pDataLeaseSet *)locked_buildNewLeaseSet;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                withNetI2pRouterTunnelPoolTunnelPoolManager:(NetI2pRouterTunnelPoolTunnelPoolManager *)mgr
                         withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings
               withNetI2pRouterTunnelPoolTunnelPeerSelector:(NetI2pRouterTunnelPoolTunnelPeerSelector *)sel;

- (void)addTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info;

- (void)buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg;

- (jboolean)buildFallback;

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)configureNewTunnel;

- (jint)countHowManyToBuild;

- (jint)getTunnelCount;

- (jboolean)needFallback;

- (void)refreshLeaseSet;

- (void)removeTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info;

- (id<NetI2pRouterTunnelInfo>)selectTunnel;

- (id<NetI2pRouterTunnelInfo>)selectTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo;

- (void)setSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings;

- (void)shutdown;

- (void)startup;

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg;

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg
                            withNetI2pDataHash:(NetI2pDataHash *)blamePeer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPool)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _log_, NetI2pUtilLog *)

FOUNDATION_EXPORT void NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterTunnelPoolTunnelPool *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel);

FOUNDATION_EXPORT NetI2pRouterTunnelPoolTunnelPool *new_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterTunnelPoolTunnelPool *create_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPool)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPool")
