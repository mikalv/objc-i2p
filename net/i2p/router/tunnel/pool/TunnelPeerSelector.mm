//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TunnelPeerSelector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/transport/TransportUtil.h"
#include "net/i2p/router/tunnel/pool/ConnectChecker.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/util/HashDistance.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterTunnelPoolTunnelPeerSelector ()

- (jboolean)allowAsOBEPWithNetI2pDataHash:(NetI2pDataHash *)h;

- (jboolean)allowAsIBGWWithNetI2pDataHash:(NetI2pDataHash *)h;

+ (IOSCharArray *)getExcludeCapsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

+ (jboolean)shouldExcludeWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                          withCharArray:(IOSCharArray *)excl;

- (jboolean)checkTunnelWithJavaUtilList:(id<JavaUtilList>)tunnel;

@end

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE = @"router.outboundExploratoryExcludeUnreachable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE = @"router.outboundClientExcludeUnreachable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE = @"router.inboundExploratoryExcludeUnreachable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE = @"router.inboundClientExcludeUnreachable";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE, NSString *)

inline jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_get_DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE(void);
#define NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPeerSelector, DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, jboolean)

inline jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_get_DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE(void);
#define NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPeerSelector, DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE, jboolean)

inline jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_get_DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE(void);
#define NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPeerSelector, DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, jboolean)

inline jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_get_DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE(void);
#define NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPeerSelector, DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE, jboolean)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW = @"router.outboundExploratoryExcludeSlow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW = @"router.outboundClientExcludeSlow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW = @"router.inboundExploratoryExcludeSlow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW, NSString *)

inline NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_get_PROP_INBOUND_CLIENT_EXCLUDE_SLOW(void);
static NSString *NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_SLOW = @"router.inboundClientExcludeSlow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolTunnelPeerSelector, PROP_INBOUND_CLIENT_EXCLUDE_SLOW, NSString *)

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsOBEPWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pDataHash *h);

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsIBGWWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pDataHash *h);

__attribute__((unused)) static IOSCharArray *NetI2pRouterTunnelPoolTunnelPeerSelector_getExcludeCapsWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pDataRouterRouterInfo_withCharArray_(NetI2pDataRouterRouterInfo *peer, IOSCharArray *excl);

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_checkTunnelWithJavaUtilList_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, id<JavaUtilList> tunnel);

@interface NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator : NSObject < JavaUtilComparator, JavaIoSerializable > {
 @public
  NetI2pDataHash *_hash_;
  NetI2pDataHash *tmp_;
  IOSByteArray *data_;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)h;

- (jint)compareWithId:(NetI2pDataHash *)l
               withId:(NetI2pDataHash *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator, _hash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator, tmp_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator, data_, IOSByteArray *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *self, NetI2pDataHash *h);

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *new_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pDataHash *h) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *create_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pDataHash *h);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator)

@implementation NetI2pRouterTunnelPoolTunnelPeerSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (id<JavaUtilList>)selectPeersWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getLengthWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  jint length = [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) getLength];
  jint override = [settings getLengthOverride];
  if (override >= 0) {
    length = override;
  }
  else if ([settings getLengthVariance] != 0) {
    jint skew = [settings getLengthVariance];
    if (skew > 0) length += [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) random])) nextIntWithInt:skew + 1];
    else {
      skew = 1 - skew;
      jint off = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) random])) nextIntWithInt:skew];
      if ([((NetI2pUtilRandomSource *) nil_chk([ctx_ random])) nextBoolean]) length += off;
      else length -= off;
    }
  }
  if (length < 0) length = 0;
  else if (length > 7) length = 7;
  return length;
}

- (jboolean)shouldSelectExplicitWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) isExploratory]) return false;
  JavaUtilProperties *opts = [settings getUnknownOptions];
  if (opts != nil) {
    NSString *peers = [opts getPropertyWithNSString:@"explicitPeers"];
    if (peers == nil) peers = [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:@"explicitPeers"];
    if (peers != nil && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) random])) nextIntWithInt:4] == 0) return true;
  }
  return false;
}

- (id<JavaUtilList>)selectExplicitWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings
                                                             withInt:(jint)length {
  NSString *peers = nil;
  JavaUtilProperties *opts = [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) getUnknownOptions];
  if (opts != nil) peers = [opts getPropertyWithNSString:@"explicitPeers"];
  if (peers == nil) peers = [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:@"explicitPeers"];
  id<JavaUtilList> rv = create_JavaUtilArrayList_init();
  JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(peers, @",");
  while ([tok hasMoreTokens]) {
    NSString *peerStr = [tok nextToken];
    NetI2pDataHash *peer = create_NetI2pDataHash_init();
    @try {
      [peer fromBase64WithNSString:peerStr];
      if ([((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) profileOrganizer])) isSelectableWithNetI2pDataHash:peer]) {
        [rv addWithId:peer];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log_ debugWithNSString:JreStrcat("$$", @"Explicit peer is not selectable: ", peerStr)];
      }
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [log_ errorWithNSString:JreStrcat("$$C", @"Explicit peer is improperly formatted (", peerStr, ')') withJavaLangThrowable:dfe];
    }
  }
  jint sz = [rv size];
  JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(rv, [((NetI2pRouterRouterContext *) nil_chk(ctx_)) random]);
  while ([rv size] > length) [rv removeWithInt:0];
  if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
    if ([settings getDestinationNickname] != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"peers for "])) appendWithNSString:[settings getDestinationNickname]];
    else if ([settings getDestination] != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"peers for "])) appendWithNSString:[((NetI2pDataHash *) nil_chk([settings getDestination])) toBase64]];
    else [buf appendWithNSString:@"peers for exploratory "];
    if ([settings isInbound]) [buf appendWithNSString:@" inbound"];
    else [buf appendWithNSString:@" outbound"];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" peers: "])) appendWithId:rv];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@", out of "])) appendWithInt:sz])) appendWithNSString:@" (not including self)"];
    [log_ infoWithNSString:[buf description]];
  }
  if ([settings isInbound]) [rv addWithInt:0 withId:[ctx_ routerHash]];
  else [rv addWithId:[ctx_ routerHash]];
  return rv;
}

- (id<JavaUtilSet>)getExcludeWithBoolean:(jboolean)isInbound
                             withBoolean:(jboolean)isExploratory {
  id<JavaUtilSet> peers = create_JavaUtilHashSet_initWithInt_(8);
  [peers addAllWithJavaUtilCollection:[((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) profileOrganizer])) selectPeersRecentlyRejecting]];
  [peers addAllWithJavaUtilCollection:[((id<NetI2pRouterTunnelManagerFacade>) nil_chk([ctx_ tunnelManager])) selectPeersInTooManyTunnels]];
  if ([self filterUnreachableWithBoolean:isInbound withBoolean:isExploratory]) {
    id<JavaUtilCollection> caps = [((id<NetI2pRouterPeerManagerFacade>) nil_chk([ctx_ peerManager])) getPeersByCapabilityWithChar:NetI2pRouterRouter_CAPABILITY_UNREACHABLE];
    if (caps != nil) [peers addAllWithJavaUtilCollection:caps];
    caps = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectPeersLocallyUnreachable];
    if (caps != nil) [peers addAllWithJavaUtilCollection:caps];
  }
  if ([self filterSlowWithBoolean:isInbound withBoolean:isExploratory]) {
    IOSCharArray *excl = NetI2pRouterTunnelPoolTunnelPeerSelector_getExcludeCapsWithNetI2pRouterRouterContext_(ctx_);
    if (excl != nil) {
      NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *fac = (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) cast_chk([ctx_ netDb], [NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade class]);
      id<JavaUtilList> known = [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(fac)) getKnownRouterData];
      if (known != nil) {
        for (jint i = 0; i < [known size]; i++) {
          NetI2pDataRouterRouterInfo *peer = [known getWithInt:i];
          jboolean shouldExclude = NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pDataRouterRouterInfo_withCharArray_(peer, excl);
          if (shouldExclude) {
            [peers addWithId:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) calculateHash]];
            continue;
          }
        }
      }
    }
  }
  return peers;
}

- (jboolean)isIPv6Only {
  return NetI2pRouterTransportTransportUtil_getIPv6ConfigWithNetI2pRouterRouterContext_withNSString_(ctx_, @"SSU") == JreLoadEnum(NetI2pRouterTransportTransportUtil_IPv6Config, IPV6_ONLY);
}

- (jboolean)allowAsOBEPWithNetI2pDataHash:(NetI2pDataHash *)h {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsOBEPWithNetI2pDataHash_(self, h);
}

- (jboolean)allowAsIBGWWithNetI2pDataHash:(NetI2pDataHash *)h {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsIBGWWithNetI2pDataHash_(self, h);
}

- (id<JavaUtilSet>)getClosestHopExcludeWithBoolean:(jboolean)isInbound {
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) router])) getRouterInfo];
  if (ri == nil) return nil;
  jint ourMask = isInbound ? [self getInboundMaskWithNetI2pDataRouterRouterInfo:ri] : [self getOutboundMaskWithNetI2pDataRouterRouterInfo:ri];
  id<JavaUtilSet> connected = [((NetI2pRouterCommSystemFacade *) nil_chk([ctx_ commSystem])) getEstablished];
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_(256);
  NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *fac = (NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) cast_chk([ctx_ netDb], [NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade class]);
  id<JavaUtilList> known = [((NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade *) nil_chk(fac)) getKnownRouterData];
  if (known != nil) {
    for (jint i = 0; i < [known size]; i++) {
      NetI2pDataRouterRouterInfo *peer = [known getWithInt:i];
      NetI2pDataHash *h = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) calculateHash];
      if ([((id<JavaUtilSet>) nil_chk(connected)) containsWithId:h]) continue;
      jboolean canConnect = isInbound ? [self canConnectWithNetI2pDataRouterRouterInfo:peer withInt:ourMask] : [self canConnectWithInt:ourMask withNetI2pDataRouterRouterInfo:peer];
      if (!canConnect) [rv addWithId:h];
    }
  }
  return rv;
}

+ (jboolean)shouldExcludeWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(ctx, peer);
}

+ (IOSCharArray *)getExcludeCapsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_getExcludeCapsWithNetI2pRouterRouterContext_(ctx);
}

+ (jboolean)shouldExcludeWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                          withCharArray:(IOSCharArray *)excl {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pDataRouterRouterInfo_withCharArray_(peer, excl);
}

- (jboolean)filterUnreachableWithBoolean:(jboolean)isInbound
                             withBoolean:(jboolean)isExploratory {
  if (isExploratory) {
    if (isInbound) return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE withBoolean:NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE];
    else return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE withBoolean:NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE];
  }
  else {
    if (isInbound) return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE withBoolean:NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE];
    else return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE withBoolean:NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE];
  }
}

- (jboolean)filterSlowWithBoolean:(jboolean)isInbound
                      withBoolean:(jboolean)isExploratory {
  if (isExploratory) {
    if (isInbound) return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW withBoolean:true];
    else return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW withBoolean:true];
  }
  else {
    if (isInbound) return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_SLOW withBoolean:true];
    else return [((NetI2pRouterRouterContext *) nil_chk(ctx_)) getPropertyWithNSString:NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW withBoolean:true];
  }
}

- (void)orderPeersWithJavaUtilList:(id<JavaUtilList>)rv
                withNetI2pDataHash:(NetI2pDataHash *)hash_ {
  if ([((id<JavaUtilList>) nil_chk(rv)) size] > 1) JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(rv, create_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(hash_));
}

- (jboolean)checkTunnelWithBoolean:(jboolean)isInbound
                  withJavaUtilList:(id<JavaUtilList>)tunnel {
  if (!NetI2pRouterTunnelPoolTunnelPeerSelector_checkTunnelWithJavaUtilList_(self, tunnel)) return false;
  if (isInbound) {
    NetI2pDataHash *h = [((id<JavaUtilList>) nil_chk(tunnel)) getWithInt:[tunnel size] - 1];
    if (!NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsIBGWWithNetI2pDataHash_(self, h)) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldWarn]) [log_ warnWithNSString:JreStrcat("$@", @"Picked IPv6-only or hidden peer for IBGW: ", h)];
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) profileManager])) tunnelTimedOutWithNetI2pDataHash:h];
      return false;
    }
  }
  else {
    NetI2pDataHash *h = [((id<JavaUtilList>) nil_chk(tunnel)) getWithInt:0];
    if (!NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsOBEPWithNetI2pDataHash_(self, h)) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldWarn]) [log_ warnWithNSString:JreStrcat("$@", @"Picked IPv6-only peer for OBEP: ", h)];
      [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) profileManager])) tunnelTimedOutWithNetI2pDataHash:h];
      return false;
    }
  }
  return true;
}

- (jboolean)checkTunnelWithJavaUtilList:(id<JavaUtilList>)tunnel {
  return NetI2pRouterTunnelPoolTunnelPeerSelector_checkTunnelWithJavaUtilList_(self, tunnel);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x4, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, 15, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 20, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 18, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 22, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 25, -1, 26, -1, -1 },
    { NULL, "Z", 0x4, 27, 28, -1, 29, -1, -1 },
    { NULL, "Z", 0x2, 27, 30, -1, 31, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectPeersWithNetI2pRouterTunnelPoolSettings:);
  methods[2].selector = @selector(getLengthWithNetI2pRouterTunnelPoolSettings:);
  methods[3].selector = @selector(shouldSelectExplicitWithNetI2pRouterTunnelPoolSettings:);
  methods[4].selector = @selector(selectExplicitWithNetI2pRouterTunnelPoolSettings:withInt:);
  methods[5].selector = @selector(getExcludeWithBoolean:withBoolean:);
  methods[6].selector = @selector(isIPv6Only);
  methods[7].selector = @selector(allowAsOBEPWithNetI2pDataHash:);
  methods[8].selector = @selector(allowAsIBGWWithNetI2pDataHash:);
  methods[9].selector = @selector(getClosestHopExcludeWithBoolean:);
  methods[10].selector = @selector(shouldExcludeWithNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:);
  methods[11].selector = @selector(getExcludeCapsWithNetI2pRouterRouterContext:);
  methods[12].selector = @selector(shouldExcludeWithNetI2pDataRouterRouterInfo:withCharArray:);
  methods[13].selector = @selector(filterUnreachableWithBoolean:withBoolean:);
  methods[14].selector = @selector(filterSlowWithBoolean:withBoolean:);
  methods[15].selector = @selector(orderPeersWithJavaUtilList:withNetI2pDataHash:);
  methods[16].selector = @selector(checkTunnelWithBoolean:withJavaUtilList:);
  methods[17].selector = @selector(checkTunnelWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolTunnelPeerSelector_DEFAULT_INBOUND_CLIENT_EXCLUDE_UNREACHABLE, 0x1a, -1, -1, -1, -1 },
    { "PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "PROP_INBOUND_CLIENT_EXCLUDE_SLOW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectPeers", "LNetI2pRouterTunnelPoolSettings;", "(Lnet/i2p/router/TunnelPoolSettings;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "getLength", "shouldSelectExplicit", "selectExplicit", "LNetI2pRouterTunnelPoolSettings;I", "(Lnet/i2p/router/TunnelPoolSettings;I)Ljava/util/List<Lnet/i2p/data/Hash;>;", "getExclude", "ZZ", "(ZZ)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "allowAsOBEP", "LNetI2pDataHash;", "allowAsIBGW", "getClosestHopExclude", "Z", "(Z)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "shouldExclude", "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;", "getExcludeCaps", "LNetI2pDataRouterRouterInfo;[C", "filterUnreachable", "filterSlow", "orderPeers", "LJavaUtilList;LNetI2pDataHash;", "(Ljava/util/List<Lnet/i2p/data/Hash;>;Lnet/i2p/data/Hash;)V", "checkTunnel", "ZLJavaUtilList;", "(ZLjava/util/List<Lnet/i2p/data/Hash;>;)Z", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/data/Hash;>;)Z", &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_UNREACHABLE, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_UNREACHABLE, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_UNREACHABLE, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_EXPLORATORY_EXCLUDE_SLOW, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_OUTBOUND_CLIENT_EXCLUDE_SLOW, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_EXPLORATORY_EXCLUDE_SLOW, &NetI2pRouterTunnelPoolTunnelPeerSelector_PROP_INBOUND_CLIENT_EXCLUDE_SLOW, "LNetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPeerSelector = { "TunnelPeerSelector", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x401, 18, 12, -1, 40, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPeerSelector;
}

@end

void NetI2pRouterTunnelPoolTunnelPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterTunnelPoolConnectChecker_initWithNetI2pRouterRouterContext_(self, context);
}

jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsOBEPWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pDataHash *h) {
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:h];
  if (ri == nil) return true;
  return [self canConnectWithNetI2pDataRouterRouterInfo:ri withInt:NetI2pRouterTunnelPoolConnectChecker_ANY_V4];
}

jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_allowAsIBGWWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pDataHash *h) {
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:h];
  if (ri == nil) return true;
  return [self canConnectWithInt:NetI2pRouterTunnelPoolConnectChecker_ANY_V4 withNetI2pDataRouterRouterInfo:ri];
}

jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *ctx, NetI2pDataRouterRouterInfo *peer) {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initialize();
  return NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pDataRouterRouterInfo_withCharArray_(peer, NetI2pRouterTunnelPoolTunnelPeerSelector_getExcludeCapsWithNetI2pRouterRouterContext_(ctx));
}

IOSCharArray *NetI2pRouterTunnelPoolTunnelPeerSelector_getExcludeCapsWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initialize();
  NSString *excludeCaps = [((NetI2pRouterRouterContext *) nil_chk(ctx)) getPropertyWithNSString:@"router.excludePeerCaps" withNSString:NSString_java_valueOfChar_(NetI2pRouterRouter_CAPABILITY_BW12)];
  if (excludeCaps != nil) {
    IOSCharArray *excl = [excludeCaps java_toCharArray];
    return excl;
  }
  else {
    return nil;
  }
}

jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pDataRouterRouterInfo_withCharArray_(NetI2pDataRouterRouterInfo *peer, IOSCharArray *excl) {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initialize();
  NSString *cap = [((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getCapabilities];
  for (jint j = 0; j < ((IOSCharArray *) nil_chk(excl))->size_; j++) {
    if ([((NSString *) nil_chk(cap)) java_indexOf:IOSCharArray_Get(excl, j)] >= 0) {
      return true;
    }
  }
  jint maxLen = 0;
  if ([((NSString *) nil_chk(cap)) java_indexOf:NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_CAPABILITY_FLOODFILL] >= 0) maxLen++;
  if ([cap java_indexOf:NetI2pRouterRouter_CAPABILITY_REACHABLE] >= 0) maxLen++;
  if ([cap java_indexOf:NetI2pRouterRouter_CAPABILITY_UNREACHABLE] >= 0) maxLen++;
  if ([cap java_length] <= maxLen) return true;
  return false;
}

jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_checkTunnelWithJavaUtilList_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, id<JavaUtilList> tunnel) {
  jboolean rv = true;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(tunnel)) size] - 1; i++) {
    NetI2pDataHash *hf = [tunnel getWithInt:i + 1];
    NetI2pDataHash *ht = [tunnel getWithInt:i];
    if (![self canConnectWithNetI2pDataHash:hf withNetI2pDataHash:ht]) {
      if ([((NetI2pUtilLog *) nil_chk(self->log_)) shouldWarn]) [self->log_ warnWithNSString:JreStrcat("$I$I$$", @"Connect check fail hop ", (i + 1), @" to ", i, @" in tunnel (EP<-GW): ", NetI2pDataDataHelper_toStringWithJavaUtilCollection_(tunnel))];
      NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) routerHash];
      if (![((NetI2pDataHash *) nil_chk(hf)) isEqual:us]) [((id<NetI2pRouterProfileManager>) nil_chk([self->ctx_ profileManager])) tunnelTimedOutWithNetI2pDataHash:hf];
      if (![((NetI2pDataHash *) nil_chk(ht)) isEqual:us]) [((id<NetI2pRouterProfileManager>) nil_chk([self->ctx_ profileManager])) tunnelTimedOutWithNetI2pDataHash:ht];
      rv = false;
      break;
    }
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPeerSelector)

@implementation NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)h {
  NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(self, h);
  return self;
}

- (jint)compareWithId:(NetI2pDataHash *)l
               withId:(NetI2pDataHash *)r {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(l)) getData], 0, data_, 0, NetI2pDataHash_HASH_LENGTH);
  IOSByteArray *tb = [((NetI2pDataHash *) nil_chk(tmp_)) getData];
  [((NetI2pCryptoSHA256Generator *) nil_chk(NetI2pCryptoSHA256Generator_getInstance())) calculateHashWithByteArray:data_ withInt:0 withInt:2 * NetI2pDataHash_HASH_LENGTH withByteArray:tb withInt:0];
  JavaMathBigInteger *ll = NetI2pRouterUtilHashDistance_getDistanceWithNetI2pDataHash_withNetI2pDataHash_(_hash_, tmp_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(r)) getData], 0, data_, 0, NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoSHA256Generator *) nil_chk(NetI2pCryptoSHA256Generator_getInstance())) calculateHashWithByteArray:data_ withInt:0 withInt:2 * NetI2pDataHash_HASH_LENGTH withByteArray:tb withInt:0];
  JavaMathBigInteger *rr = NetI2pRouterUtilHashDistance_getDistanceWithNetI2pDataHash_withNetI2pDataHash_(_hash_, tmp_);
  return [((JavaMathBigInteger *) nil_chk(ll)) compareToWithId:rr];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(_hash_);
  RELEASE_(tmp_);
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_hash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tmp_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;", "compare", "LNetI2pDataHash;LNetI2pDataHash;", "LNetI2pRouterTunnelPoolTunnelPeerSelector;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/data/Hash;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator = { "HashComparator", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 2, 3, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator;
}

@end

void NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *self, NetI2pDataHash *h) {
  NSObject_init(self);
  JreStrongAssign(&self->_hash_, h);
  JreStrongAssignAndConsume(&self->tmp_, new_NetI2pDataHash_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataHash_HASH_LENGTH]));
  JreStrongAssignAndConsume(&self->data_, [IOSByteArray newArrayWithLength:2 * NetI2pDataHash_HASH_LENGTH]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(self->_hash_)) getData], 0, self->data_, NetI2pDataHash_HASH_LENGTH, NetI2pDataHash_HASH_LENGTH);
}

NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *new_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pDataHash *h) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator, initWithNetI2pDataHash_, h)
}

NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator *create_NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator_initWithNetI2pDataHash_(NetI2pDataHash *h) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator, initWithNetI2pDataHash_, h)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPeerSelector_HashComparator)
