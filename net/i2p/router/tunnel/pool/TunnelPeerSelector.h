//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TunnelPeerSelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPeerSelector")
#ifdef RESTRICT_NetI2pRouterTunnelPoolTunnelPeerSelector
#define INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPeerSelector 0
#else
#define INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPeerSelector 1
#endif
#undef RESTRICT_NetI2pRouterTunnelPoolTunnelPeerSelector

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterTunnelPoolTunnelPeerSelector_) && (INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPeerSelector || defined(INCLUDE_NetI2pRouterTunnelPoolTunnelPeerSelector))
#define NetI2pRouterTunnelPoolTunnelPeerSelector_

#define RESTRICT_NetI2pRouterTunnelPoolConnectChecker 1
#define INCLUDE_NetI2pRouterTunnelPoolConnectChecker 1
#include "net/i2p/router/tunnel/pool/ConnectChecker.h"

@class NetI2pDataHash;
@class NetI2pDataRouterRouterInfo;
@class NetI2pRouterRouterContext;
@class NetI2pRouterTunnelPoolSettings;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface NetI2pRouterTunnelPoolTunnelPeerSelector : NetI2pRouterTunnelPoolConnectChecker

#pragma mark Public

- (id<JavaUtilSet>)getExcludeWithBoolean:(jboolean)isInbound
                             withBoolean:(jboolean)isExploratory;

- (id<JavaUtilList>)selectPeersWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings;

+ (jboolean)shouldExcludeWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                        withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer;

#pragma mark Protected

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

- (jboolean)checkTunnelWithBoolean:(jboolean)isInbound
                  withJavaUtilList:(id<JavaUtilList>)tunnel;

- (jboolean)filterSlowWithBoolean:(jboolean)isInbound
                      withBoolean:(jboolean)isExploratory;

- (jboolean)filterUnreachableWithBoolean:(jboolean)isInbound
                             withBoolean:(jboolean)isExploratory;

- (id<JavaUtilSet>)getClosestHopExcludeWithBoolean:(jboolean)isInbound;

- (jint)getLengthWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings;

- (jboolean)isIPv6Only;

- (void)orderPeersWithJavaUtilList:(id<JavaUtilList>)rv
                withNetI2pDataHash:(NetI2pDataHash *)hash_;

- (id<JavaUtilList>)selectExplicitWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings
                                                             withInt:(jint)length;

- (jboolean)shouldSelectExplicitWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPeerSelector)

FOUNDATION_EXPORT void NetI2pRouterTunnelPoolTunnelPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTunnelPeerSelector *self, NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT jboolean NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(NetI2pRouterRouterContext *ctx, NetI2pDataRouterRouterInfo *peer);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPeerSelector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterTunnelPoolTunnelPeerSelector")
