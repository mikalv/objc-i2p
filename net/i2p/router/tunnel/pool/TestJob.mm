//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TestJob.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Set.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/message/GarlicMessageBuilder.h"
#include "net/i2p/router/message/PayloadGarlicConfig.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TestJob.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/util/RemovableSingletonSet.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTunnelPoolTestJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelPoolTunnelPool *_pool_;
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *_cfg_;
  jboolean _found_;
  id<NetI2pRouterTunnelInfo> _outTunnel_;
  id<NetI2pRouterTunnelInfo> _replyTunnel_;
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *_otherTunnel_;
  NetI2pDataSessionTag *_encryptTag_;
}

- (void)sendTestWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m;

- (void)noteSuccessWithLong:(jlong)ms
 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel;

- (void)testFailedWithLong:(jlong)timeToFail;

- (jint)getDelay;

- (jint)getTestPeriod;

- (void)scheduleRetest;

- (void)scheduleRetestWithBoolean:(jboolean)asap;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _pool_, NetI2pRouterTunnelPoolTunnelPool *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _cfg_, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _outTunnel_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _replyTunnel_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _otherTunnel_, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob, _encryptTag_, NetI2pDataSessionTag *)

inline jint NetI2pRouterTunnelPoolTestJob_get_TEST_DELAY(void);
#define NetI2pRouterTunnelPoolTestJob_TEST_DELAY 40000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTestJob, TEST_DELAY, jint)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_sendTestWithNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolTestJob *self, id<NetI2pDataI2npI2NPMessage> m);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTestJob *self, jlong ms, id<NetI2pRouterTunnelInfo> tunnel);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_testFailedWithLong_(NetI2pRouterTunnelPoolTestJob *self, jlong timeToFail);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolTestJob_getDelay(NetI2pRouterTunnelPoolTestJob *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolTestJob_getTestPeriod(NetI2pRouterTunnelPoolTestJob *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_scheduleRetest(NetI2pRouterTunnelPoolTestJob *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_scheduleRetestWithBoolean_(NetI2pRouterTunnelPoolTestJob *self, jboolean asap);

@interface NetI2pRouterTunnelPoolTestJob_ReplySelector : NSObject < NetI2pRouterMessageSelector > {
 @public
  NetI2pRouterTunnelPoolTestJob *this$0_;
  NetI2pRouterRouterContext *_context_;
  jlong _id_;
  jlong _expiration_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                             withLong:(jlong)id_
                                             withLong:(jlong)expiration;

- (jboolean)continueMatching;

- (jlong)getExpiration;

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTestJob_ReplySelector)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob_ReplySelector, _context_, NetI2pRouterRouterContext *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob_ReplySelector *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration);

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_ReplySelector *new_NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_ReplySelector *create_NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTestJob_ReplySelector)

@interface NetI2pRouterTunnelPoolTestJob_OnTestReply : NetI2pRouterJobImpl < NetI2pRouterReplyJob > {
 @public
  NetI2pRouterTunnelPoolTestJob *this$0_;
  jlong _successTime_;
  NetI2pRouterOutNetMessage *_sentMessage_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)setSentMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)m;

- (void)runJob;

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTestJob_OnTestReply)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTestJob_OnTestReply, _sentMessage_, NetI2pRouterOutNetMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob_OnTestReply *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_OnTestReply *new_NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_OnTestReply *create_NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTestJob_OnTestReply)

@interface NetI2pRouterTunnelPoolTestJob_OnTestTimeout : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelPoolTestJob *this$0_;
  jlong _started_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTestJob_OnTestTimeout)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob_OnTestTimeout *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_OnTestTimeout *new_NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTestJob_OnTestTimeout *create_NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTestJob_OnTestTimeout)

@implementation NetI2pRouterTunnelPoolTestJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool {
  NetI2pRouterTunnelPoolTestJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(self, ctx, cfg, pool);
  return self;
}

- (NSString *)getName {
  return @"Test tunnel";
}

- (void)runJob {
  if (_pool_ == nil || ![_pool_ isAlive]) return;
  jlong lag = [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) getMaxLag];
  if (lag > 3000) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$J", @"Deferring test of ", _cfg_, @" due to job lag = ", lag)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testAborted" withLong:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_cfg_)) getLength] withLong:0];
    NetI2pRouterTunnelPoolTestJob_scheduleRetest(self);
    return;
  }
  if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) gracefulShutdownInProgress]) return;
  _found_ = false;
  JreStrongAssign(&_replyTunnel_, nil);
  JreStrongAssign(&_outTunnel_, nil);
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_cfg_)) isInbound]) {
    JreStrongAssign(&_replyTunnel_, _cfg_);
    JreStrongAssign(&_outTunnel_, [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundTunnel]);
    JreStrongAssign(&_otherTunnel_, (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) cast_chk(_outTunnel_, [NetI2pRouterTunnelPoolPooledTunnelCreatorConfig class]));
  }
  else {
    JreStrongAssign(&_replyTunnel_, [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundTunnel]);
    JreStrongAssign(&_outTunnel_, _cfg_);
    JreStrongAssign(&_otherTunnel_, (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) cast_chk(_replyTunnel_, [NetI2pRouterTunnelPoolPooledTunnelCreatorConfig class]));
  }
  if ((_replyTunnel_ == nil) || (_outTunnel_ == nil)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@$@", @"Insufficient tunnels to test ", _cfg_, @" with: ", _replyTunnel_, @" / ", _outTunnel_)];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testAborted" withLong:[_cfg_ getLength] withLong:0];
    NetI2pRouterTunnelPoolTestJob_scheduleRetest(self);
  }
  else {
    jint testPeriod = NetI2pRouterTunnelPoolTestJob_getTestPeriod(self);
    jlong testExpiration = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + testPeriod;
    NetI2pDataI2npDeliveryStatusMessage *m = create_NetI2pDataI2npDeliveryStatusMessage_initWithNetI2pI2PAppContext_([self getContext]);
    [m setArrivalWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now]];
    [m setMessageExpirationWithLong:testExpiration];
    [m setMessageIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
    NetI2pRouterTunnelPoolTestJob_ReplySelector *sel = create_NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(self, [self getContext], [m getMessageId], testExpiration);
    NetI2pRouterTunnelPoolTestJob_OnTestReply *onReply = create_NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(self, [self getContext]);
    NetI2pRouterTunnelPoolTestJob_OnTestTimeout *onTimeout = create_NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(self, [self getContext]);
    NetI2pRouterOutNetMessage *msg = [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:sel withNetI2pRouterReplyJob:onReply withNetI2pRouterJob:onTimeout];
    [onReply setSentMessageWithNetI2pRouterOutNetMessage:msg];
    NetI2pRouterTunnelPoolTestJob_sendTestWithNetI2pDataI2npI2NPMessage_(self, m);
  }
}

- (void)sendTestWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)m {
  NetI2pRouterTunnelPoolTestJob_sendTestWithNetI2pDataI2npI2NPMessage_(self, m);
}

- (void)testSuccessfulWithInt:(jint)ms {
  if (_pool_ == nil || ![_pool_ isAlive]) return;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testSuccessLength" withLong:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_cfg_)) getLength] withLong:0];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testSuccessTime" withLong:ms withLong:0];
  [((id<NetI2pRouterTunnelInfo>) nil_chk(_outTunnel_)) incrementVerifiedBytesTransferredWithInt:1024];
  NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(self, ms, _outTunnel_);
  NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(self, ms, _replyTunnel_);
  [_cfg_ testJobSuccessfulWithInt:ms];
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_otherTunnel_)) getLength] > 1) [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_otherTunnel_)) testJobSuccessfulWithInt:ms];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@", @"Tunnel test successful in ", ms, @"ms: ", _cfg_)];
  NetI2pRouterTunnelPoolTestJob_scheduleRetest(self);
}

- (void)noteSuccessWithLong:(jlong)ms
 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel {
  NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(self, ms, tunnel);
}

- (void)testFailedWithLong:(jlong)timeToFail {
  NetI2pRouterTunnelPoolTestJob_testFailedWithLong_(self, timeToFail);
}

- (jint)getDelay {
  return NetI2pRouterTunnelPoolTestJob_getDelay(self);
}

- (jint)getTestPeriod {
  return NetI2pRouterTunnelPoolTestJob_getTestPeriod(self);
}

- (void)scheduleRetest {
  NetI2pRouterTunnelPoolTestJob_scheduleRetest(self);
}

- (void)scheduleRetestWithBoolean:(jboolean)asap {
  NetI2pRouterTunnelPoolTestJob_scheduleRetestWithBoolean_(self, asap);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_pool_);
  RELEASE_(_cfg_);
  RELEASE_(_outTunnel_);
  RELEASE_(_replyTunnel_);
  RELEASE_(_otherTunnel_);
  RELEASE_(_encryptTag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelPoolTunnelPool:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(sendTestWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(testSuccessfulWithInt:);
  methods[5].selector = @selector(noteSuccessWithLong:withNetI2pRouterTunnelInfo:);
  methods[6].selector = @selector(testFailedWithLong:);
  methods[7].selector = @selector(getDelay);
  methods[8].selector = @selector(getTestPeriod);
  methods[9].selector = @selector(scheduleRetest);
  methods[10].selector = @selector(scheduleRetestWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pool_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cfg_", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_found_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_otherTunnel_", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_encryptTag_", "LNetI2pDataSessionTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TEST_DELAY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTestJob_TEST_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pRouterTunnelPoolTunnelPool;", "sendTest", "LNetI2pDataI2npI2NPMessage;", "testSuccessful", "I", "noteSuccess", "JLNetI2pRouterTunnelInfo;", "testFailed", "J", "scheduleRetest", "Z", "LNetI2pRouterTunnelPoolTestJob_ReplySelector;LNetI2pRouterTunnelPoolTestJob_OnTestReply;LNetI2pRouterTunnelPoolTestJob_OnTestTimeout;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTestJob = { "TestJob", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 11, 9, -1, 11, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTestJob;
}

@end

void NetI2pRouterTunnelPoolTestJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTestJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolTestJob_class_()]);
  JreStrongAssign(&self->_cfg_, cfg);
  if (pool != nil) JreStrongAssign(&self->_pool_, pool);
  else JreStrongAssign(&self->_pool_, [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getTunnelPool]);
  if ((self->_pool_ == nil) && ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR])) [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@", @"Invalid tunnel test configuration: no pool for ", cfg) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"origin")];
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:NetI2pRouterTunnelPoolTestJob_getDelay(self) + [((NetI2pUtilClock *) nil_chk([ctx clock])) now]];
}

NetI2pRouterTunnelPoolTestJob *new_NetI2pRouterTunnelPoolTestJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTestJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_, ctx, cfg, pool)
}

NetI2pRouterTunnelPoolTestJob *create_NetI2pRouterTunnelPoolTestJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTestJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_, ctx, cfg, pool)
}

void NetI2pRouterTunnelPoolTestJob_sendTestWithNetI2pDataI2npI2NPMessage_(NetI2pRouterTunnelPoolTestJob *self, id<NetI2pDataI2npI2NPMessage> m) {
  NetI2pRouterMessagePayloadGarlicConfig *payload = create_NetI2pRouterMessagePayloadGarlicConfig_init();
  [payload setCertificateWithNetI2pDataCertificate:JreLoadStatic(NetI2pDataCertificate, NULL_CERT)];
  [payload setIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
  [payload setPayloadWithNetI2pDataI2npI2NPMessage:m];
  [payload setRecipientWithNetI2pDataRouterRouterInfo:[((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) getRouterInfo]];
  [payload setDeliveryInstructionsWithNetI2pDataI2npDeliveryInstructions:JreLoadStatic(NetI2pDataI2npDeliveryInstructions, LOCAL)];
  [payload setExpirationWithLong:[((id<NetI2pDataI2npI2NPMessage>) nil_chk(m)) getMessageExpiration]];
  NetI2pDataSessionKey *encryptKey = [((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyGenerator])) generateSessionKey];
  NetI2pDataSessionTag *encryptTag = create_NetI2pDataSessionTag_initWithBoolean_(true);
  JreStrongAssign(&self->_encryptTag_, encryptTag);
  NetI2pDataSessionKey *sentKey = create_NetI2pDataSessionKey_init();
  id<JavaUtilSet> sentTags = nil;
  NetI2pDataI2npGarlicMessage *msg = NetI2pRouterMessageGarlicMessageBuilder_buildMessageWithNetI2pRouterRouterContext_withNetI2pRouterMessageGarlicConfig_withNetI2pDataSessionKey_withJavaUtilSet_withNetI2pDataPublicKey_withNetI2pDataSessionKey_withNetI2pDataSessionTag_([self getContext], payload, sentKey, sentTags, [((NetI2pRouterKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyManager])) getPublicKey], encryptKey, encryptTag);
  if (msg == nil) {
    NetI2pRouterTunnelPoolTestJob_scheduleRetest(self);
    return;
  }
  id<JavaUtilSet> encryptTags = create_NetI2pRouterUtilRemovableSingletonSet_initWithId_(encryptTag);
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_cfg_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->_pool_)) getSettings])) isExploratory]) {
    NetI2pCryptoSessionKeyManager *skm = [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->_pool_)) getSettings])) getDestination]];
    if (skm != nil) [skm tagsReceivedWithNetI2pDataSessionKey:encryptKey withJavaUtilSet:encryptTags];
  }
  else {
    [((NetI2pCryptoSessionKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) sessionKeyManager])) tagsReceivedWithNetI2pDataSessionKey:encryptKey withJavaUtilSet:encryptTags];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Sending garlic test of ", self->_outTunnel_, @" / ", self->_replyTunnel_)];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:[((id<NetI2pRouterTunnelInfo>) nil_chk(self->_outTunnel_)) getSendTunnelIdWithInt:0] withNetI2pDataTunnelId:[((id<NetI2pRouterTunnelInfo>) nil_chk(self->_replyTunnel_)) getReceiveTunnelIdWithInt:0] withNetI2pDataHash:[((id<NetI2pRouterTunnelInfo>) nil_chk(self->_replyTunnel_)) getPeerWithInt:0]];
}

void NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTestJob *self, jlong ms, id<NetI2pRouterTunnelInfo> tunnel) {
  if (tunnel != nil) for (jint i = 0; i < [tunnel getLength]; i++) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) tunnelTestSucceededWithNetI2pDataHash:[tunnel getPeerWithInt:i] withLong:ms];
}

void NetI2pRouterTunnelPoolTestJob_testFailedWithLong_(NetI2pRouterTunnelPoolTestJob *self, jlong timeToFail) {
  if (self->_pool_ == nil || ![self->_pool_ isAlive]) return;
  if (self->_found_) {
    NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(self, timeToFail, self->_outTunnel_);
    NetI2pRouterTunnelPoolTestJob_noteSuccessWithLong_withNetI2pRouterTunnelInfo_(self, timeToFail, self->_replyTunnel_);
  }
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([self->_pool_ getSettings])) isExploratory]) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testExploratoryFailedTime" withLong:timeToFail withLong:timeToFail];
  else [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testFailedTime" withLong:timeToFail withLong:timeToFail];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$@", @"Tunnel test failed in ", timeToFail, @"ms: ", self->_cfg_)];
  jboolean keepGoing = [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_cfg_)) tunnelFailed];
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_otherTunnel_)) getLength] > 1) [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_otherTunnel_)) tunnelFailed];
  if (keepGoing) {
    NetI2pRouterTunnelPoolTestJob_scheduleRetestWithBoolean_(self, true);
  }
  else {
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([self->_pool_ getSettings])) isExploratory]) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testExploratoryFailedCompletelyTime" withLong:timeToFail withLong:timeToFail];
    else [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.testFailedCompletelyTime" withLong:timeToFail withLong:timeToFail];
  }
}

jint NetI2pRouterTunnelPoolTestJob_getDelay(NetI2pRouterTunnelPoolTestJob *self) {
  return NetI2pRouterTunnelPoolTestJob_TEST_DELAY + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextIntWithInt:NetI2pRouterTunnelPoolTestJob_TEST_DELAY / 3];
}

jint NetI2pRouterTunnelPoolTestJob_getTestPeriod(NetI2pRouterTunnelPoolTestJob *self) {
  if (self->_outTunnel_ == nil || self->_replyTunnel_ == nil) return 15 * 1000;
  NetI2pStatRateStat *tspt = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) getRateWithNSString:@"transport.sendProcessingTime"];
  if (tspt != nil) {
    NetI2pStatRate *r = [tspt getRateWithLong:60 * 1000];
    if (r != nil) {
      jint delay = 3 * JreFpToInt([r getAverageValue]);
      return delay + (2500 * ([((id<NetI2pRouterTunnelInfo>) nil_chk(self->_outTunnel_)) getLength] + [((id<NetI2pRouterTunnelInfo>) nil_chk(self->_replyTunnel_)) getLength]));
    }
  }
  return 15 * 1000;
}

void NetI2pRouterTunnelPoolTestJob_scheduleRetest(NetI2pRouterTunnelPoolTestJob *self) {
  NetI2pRouterTunnelPoolTestJob_scheduleRetestWithBoolean_(self, false);
}

void NetI2pRouterTunnelPoolTestJob_scheduleRetestWithBoolean_(NetI2pRouterTunnelPoolTestJob *self, jboolean asap) {
  if (self->_pool_ == nil || ![self->_pool_ isAlive]) return;
  if (asap) {
    if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_cfg_)) getExpiration] > [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + (60 * 1000)) [self requeueWithLong:(NetI2pRouterTunnelPoolTestJob_TEST_DELAY / 4) + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextIntWithInt:NetI2pRouterTunnelPoolTestJob_TEST_DELAY / 4]];
  }
  else {
    jint delay = NetI2pRouterTunnelPoolTestJob_getDelay(self);
    if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(self->_cfg_)) getExpiration] > [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + delay + (3 * NetI2pRouterTunnelPoolTestJob_getTestPeriod(self))) [self requeueWithLong:delay];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTestJob)

@implementation NetI2pRouterTunnelPoolTestJob_ReplySelector

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                             withLong:(jlong)id_
                                             withLong:(jlong)expiration {
  NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(self, outer$, ctx, id_, expiration);
  return self;
}

- (jboolean)continueMatching {
  return !this$0_->_found_ && [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] < _expiration_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  if ([message isKindOfClass:[NetI2pDataI2npDeliveryStatusMessage class]]) {
    return [((NetI2pDataI2npDeliveryStatusMessage *) nil_chk(((NetI2pDataI2npDeliveryStatusMessage *) cast_chk(message, [NetI2pDataI2npDeliveryStatusMessage class])))) getMessageId] == _id_;
  }
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Testing tunnel "])) appendWithNSString:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(this$0_->_cfg_)) description]])) appendWithNSString:@" waiting for "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([rv appendWithLong:_id_])) appendWithNSString:@" found? "])) appendWithBoolean:this$0_->_found_];
  return [rv description];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolTestJob:withNetI2pRouterRouterContext:withLong:withLong:);
  methods[1].selector = @selector(continueMatching);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(isMatchWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_id_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;JJ", "isMatch", "LNetI2pDataI2npI2NPMessage;", "toString", "LNetI2pRouterTunnelPoolTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTestJob_ReplySelector = { "ReplySelector", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 5, 4, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTestJob_ReplySelector;
}

@end

void NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob_ReplySelector *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  self->_id_ = id_;
  self->_expiration_ = expiration;
  outer$->_found_ = false;
}

NetI2pRouterTunnelPoolTestJob_ReplySelector *new_NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTestJob_ReplySelector, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_, outer$, ctx, id_, expiration)
}

NetI2pRouterTunnelPoolTestJob_ReplySelector *create_NetI2pRouterTunnelPoolTestJob_ReplySelector_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx, jlong id_, jlong expiration) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTestJob_ReplySelector, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_withLong_withLong_, outer$, ctx, id_, expiration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTestJob_ReplySelector)

@implementation NetI2pRouterTunnelPoolTestJob_OnTestReply

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Tunnel test success";
}

- (void)setSentMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)m {
  JreStrongAssign(&_sentMessage_, m);
}

- (void)runJob {
  if (_sentMessage_ != nil) [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:_sentMessage_];
  if (_successTime_ < NetI2pRouterTunnelPoolTestJob_getTestPeriod(this$0_)) [this$0_ testSuccessfulWithInt:(jint) _successTime_];
  else NetI2pRouterTunnelPoolTestJob_testFailedWithLong_(this$0_, _successTime_);
  this$0_->_found_ = true;
}

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  _successTime_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - [((NetI2pDataI2npDeliveryStatusMessage *) nil_chk(((NetI2pDataI2npDeliveryStatusMessage *) cast_chk(message, [NetI2pDataI2npDeliveryStatusMessage class])))) getArrival];
}

- (NSString *)description {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Testing tunnel "])) appendWithNSString:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(this$0_->_cfg_)) description]];
  [((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@" successful after "])) appendWithLong:_successTime_];
  return [rv description];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_sentMessage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolTestJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(setSentMessageWithNetI2pRouterOutNetMessage:);
  methods[3].selector = @selector(runJob);
  methods[4].selector = @selector(setMessageWithNetI2pDataI2npI2NPMessage:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_successTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sentMessage_", "LNetI2pRouterOutNetMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setSentMessage", "LNetI2pRouterOutNetMessage;", "setMessage", "LNetI2pDataI2npI2NPMessage;", "toString", "LNetI2pRouterTunnelPoolTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTestJob_OnTestReply = { "OnTestReply", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 6, 3, 6, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTestJob_OnTestReply;
}

@end

void NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob_OnTestReply *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterTunnelPoolTestJob_OnTestReply *new_NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTestJob_OnTestReply, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterTunnelPoolTestJob_OnTestReply *create_NetI2pRouterTunnelPoolTestJob_OnTestReply_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTestJob_OnTestReply, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTestJob_OnTestReply)

@implementation NetI2pRouterTunnelPoolTestJob_OnTestTimeout

- (instancetype)initWithNetI2pRouterTunnelPoolTestJob:(NetI2pRouterTunnelPoolTestJob *)outer$
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Tunnel test timeout";
}

- (void)runJob {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$Z", @"Timeout: found? ", this$0_->_found_)];
  if (!this$0_->_found_) {
    if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(this$0_->_cfg_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(this$0_->_pool_)) getSettings])) isExploratory]) {
      NetI2pCryptoSessionKeyManager *skm = [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clientManager])) getClientSessionKeyManagerWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(this$0_->_pool_)) getSettings])) getDestination]];
      if (skm != nil) [skm consumeTagWithNetI2pDataSessionTag:this$0_->_encryptTag_];
    }
    else {
      [((NetI2pCryptoSessionKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) sessionKeyManager])) consumeTagWithNetI2pDataSessionTag:this$0_->_encryptTag_];
    }
    NetI2pRouterTunnelPoolTestJob_testFailedWithLong_(this$0_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _started_);
  }
}

- (NSString *)description {
  JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([rv appendWithNSString:@"Testing tunnel "])) appendWithNSString:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(this$0_->_cfg_)) description]];
  [rv appendWithNSString:@" timed out"];
  return [rv description];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolTestJob:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelPoolTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "toString", "LNetI2pRouterTunnelPoolTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTestJob_OnTestTimeout = { "OnTestTimeout", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x2, 4, 2, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTestJob_OnTestTimeout;
}

@end

void NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob_OnTestTimeout *self, NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  self->_started_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now];
}

NetI2pRouterTunnelPoolTestJob_OnTestTimeout *new_NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTestJob_OnTestTimeout, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterTunnelPoolTestJob_OnTestTimeout *create_NetI2pRouterTunnelPoolTestJob_OnTestTimeout_initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTestJob *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTestJob_OnTestTimeout, initWithNetI2pRouterTunnelPoolTestJob_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTestJob_OnTestTimeout)
