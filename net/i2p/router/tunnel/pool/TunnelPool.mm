//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TunnelPool.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/BuildExecutor.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateAverages.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterTunnelPoolTunnelPool () {
 @public
  id<JavaUtilList> _inProgress_;
  NetI2pRouterTunnelPoolSettings *_settings_;
  id<JavaUtilList> _tunnels_;
  NetI2pRouterTunnelPoolTunnelPeerSelector *_peerSelector_;
  NetI2pRouterTunnelPoolTunnelPoolManager *_manager_;
  jlong _lifetimeProcessed_;
  id<NetI2pRouterTunnelInfo> _lastSelected_;
  jlong _lastSelectionPeriod_;
  jint _expireSkew_;
  jlong _started_;
  jlong _lastRateUpdate_;
  jlong _lastLifetimeProcessed_;
  NSString *_rateName_;
}

- (void)refreshSettings;

- (jlong)curPeriod;

- (jlong)getLifetime;

- (id<NetI2pRouterTunnelInfo>)selectTunnelWithBoolean:(jboolean)allowRecurseOnFail;

- (jint)getAdjustedTotalQuantity;

- (void)setLengthOverride;

- (void)failWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg;

- (void)tellProfileFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg;

- (void)updateRate;

- (NSString *)buildRateName;

- (jint)countHowManyToBuildWithBoolean:(jboolean)allowZeroHop
                               withInt:(jint)expire30s
                               withInt:(jint)expire90s
                               withInt:(jint)expire150s
                               withInt:(jint)expire210s
                               withInt:(jint)expire270s
                               withInt:(jint)expireLater
                               withInt:(jint)standardAmount
                               withInt:(jint)inProgress
                               withInt:(jint)fallback;

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)configureNewTunnelWithBoolean:(jboolean)forceZeroHop;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _inProgress_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _settings_, NetI2pRouterTunnelPoolSettings *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _tunnels_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _peerSelector_, NetI2pRouterTunnelPoolTunnelPeerSelector *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _manager_, NetI2pRouterTunnelPoolTunnelPoolManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _lastSelected_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool, _rateName_, NSString *)

inline jint NetI2pRouterTunnelPoolTunnelPool_get_TUNNEL_LIFETIME(void);
#define NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME 600000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPool, TUNNEL_LIFETIME, jint)

inline jint NetI2pRouterTunnelPoolTunnelPool_get_BUILD_TRIES_QUANTITY_OVERRIDE(void);
#define NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_QUANTITY_OVERRIDE 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPool, BUILD_TRIES_QUANTITY_OVERRIDE, jint)

inline jint NetI2pRouterTunnelPoolTunnelPool_get_BUILD_TRIES_LENGTH_OVERRIDE_1(void);
#define NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_1 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPool, BUILD_TRIES_LENGTH_OVERRIDE_1, jint)

inline jint NetI2pRouterTunnelPoolTunnelPool_get_BUILD_TRIES_LENGTH_OVERRIDE_2(void);
#define NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_2 18
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPool, BUILD_TRIES_LENGTH_OVERRIDE_2, jint)

inline jlong NetI2pRouterTunnelPoolTunnelPool_get_STARTUP_TIME(void);
#define NetI2pRouterTunnelPoolTunnelPool_STARTUP_TIME 1800000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPool, STARTUP_TIME, jlong)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_refreshSettings(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static jlong NetI2pRouterTunnelPoolTunnelPool_curPeriod(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static jlong NetI2pRouterTunnelPoolTunnelPool_getLifetime(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static id<NetI2pRouterTunnelInfo> NetI2pRouterTunnelPoolTunnelPool_selectTunnelWithBoolean_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean allowRecurseOnFail);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_setLengthOverride(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_failWithNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTunnelPool *self, id<NetI2pRouterTunnelInfo> cfg);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_tellProfileFailedWithNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTunnelPool *self, id<NetI2pRouterTunnelInfo> cfg);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_updateRate(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static NSString *NetI2pRouterTunnelPoolTunnelPool_buildRateName(NetI2pRouterTunnelPoolTunnelPool *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolTunnelPool_countHowManyToBuildWithBoolean_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean allowZeroHop, jint expire30s, jint expire90s, jint expire150s, jint expire210s, jint expire270s, jint expireLater, jint standardAmount, jint inProgress, jint fallback);

__attribute__((unused)) static NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *NetI2pRouterTunnelPoolTunnelPool_configureNewTunnelWithBoolean_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean forceZeroHop);

@interface NetI2pRouterTunnelPoolTunnelPool_LeaseComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(NetI2pDataLease *)l
               withId:(NetI2pDataLease *)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *self);

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *new_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *create_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator)

@interface NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator : NSObject < JavaUtilComparator, JavaIoSerializable > {
 @public
  IOSByteArray *_base_;
  jboolean _avoidZero_;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)target
                           withBoolean:(jboolean)avoidZeroHop;

- (jint)compareWithId:(id<NetI2pRouterTunnelInfo>)lhs
               withId:(id<NetI2pRouterTunnelInfo>)rhs;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator, _base_, IOSByteArray *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *self, NetI2pDataHash *target, jboolean avoidZeroHop);

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *new_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *target, jboolean avoidZeroHop) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *create_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *target, jboolean avoidZeroHop);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator)

@implementation NetI2pRouterTunnelPoolTunnelPool

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
      withNetI2pRouterTunnelPoolTunnelPoolManager:(NetI2pRouterTunnelPoolTunnelPoolManager *)mgr
               withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings
     withNetI2pRouterTunnelPoolTunnelPeerSelector:(NetI2pRouterTunnelPoolTunnelPeerSelector *)sel {
  NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(self, ctx, mgr, settings, sel);
  return self;
}

- (void)startup {
  @synchronized(self) {
    @synchronized(_inProgress_) {
      [((id<JavaUtilList>) nil_chk(_inProgress_)) clear];
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$Z", [self description], @": Startup() called, was already alive? ", JreLoadVolatileBoolean(&_alive_)) withJavaLangThrowable:create_JavaLangException_init()];
    JreAssignVolatileBoolean(&_alive_, true);
    _started_ = JavaLangSystem_currentTimeMillis();
    _lastRateUpdate_ = _started_;
    _lastLifetimeProcessed_ = 0;
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk([((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) getExecutor])) repoll];
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) {
      NetI2pDataLeaseSet *ls = nil;
      @synchronized(_tunnels_) {
        ls = JreRetainedLocalValue([self locked_buildNewLeaseSet]);
      }
      if (ls != nil) [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) requestLeaseSetWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination] withNetI2pDataLeaseSet:ls];
    }
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) createRequiredRateStatWithNSString:_rateName_ withNSString:@"Tunnel Bandwidth (Bytes/sec)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 5 * 60 * 1000l } count:1]];
  }
}

- (void)shutdown {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", [self description], @": Shutdown called")];
    JreAssignVolatileBoolean(&_alive_, false);
    _lastSelectionPeriod_ = 0;
    JreStrongAssign(&_lastSelected_, nil);
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) removeRateStatWithNSString:_rateName_];
    @synchronized(_inProgress_) {
      [((id<JavaUtilList>) nil_chk(_inProgress_)) clear];
    }
  }
}

- (NSString *)getRateName {
  return _rateName_;
}

- (void)refreshSettings {
  NetI2pRouterTunnelPoolTunnelPool_refreshSettings(self);
}

- (jlong)curPeriod {
  return NetI2pRouterTunnelPoolTunnelPool_curPeriod(self);
}

- (jlong)getLifetime {
  return NetI2pRouterTunnelPoolTunnelPool_getLifetime(self);
}

- (id<NetI2pRouterTunnelInfo>)selectTunnel {
  return NetI2pRouterTunnelPoolTunnelPool_selectTunnelWithBoolean_(self, true);
}

- (id<NetI2pRouterTunnelInfo>)selectTunnelWithBoolean:(jboolean)allowRecurseOnFail {
  return NetI2pRouterTunnelPoolTunnelPool_selectTunnelWithBoolean_(self, allowRecurseOnFail);
}

- (id<NetI2pRouterTunnelInfo>)selectTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  jboolean avoidZeroHop = ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAllowZeroHop];
  id<NetI2pRouterTunnelInfo> rv = nil;
  @synchronized(_tunnels_) {
    if (![((id<JavaUtilList>) nil_chk(_tunnels_)) isEmpty]) {
      if ([_tunnels_ size] > 1) JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(_tunnels_, create_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(closestTo, avoidZeroHop));
      for (id<NetI2pRouterTunnelInfo> __strong info in _tunnels_) {
        if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] > [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]) {
          rv = JreRetainedLocalValue(info);
          break;
        }
      }
    }
  }
  if (rv != nil) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.matchLease" withLong:[((NetI2pDataHash *) nil_chk(closestTo)) isEqual:[rv getFarEnd]] ? 1 : 0];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", [self description], @": No tunnels to select from")];
  }
  return rv;
}

- (id<NetI2pRouterTunnelInfo>)getTunnelWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)gatewayId {
  @synchronized(_tunnels_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_tunnels_)) size]; i++) {
      id<NetI2pRouterTunnelInfo> info = [_tunnels_ getWithInt:i];
      if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound]) {
        if ([((NetI2pDataTunnelId *) nil_chk([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getReceiveTunnelIdWithInt:0])) isEqual:gatewayId]) return JreRetainedLocalValue(info);
      }
      else {
        if ([((NetI2pDataTunnelId *) nil_chk([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getSendTunnelIdWithInt:0])) isEqual:gatewayId]) return JreRetainedLocalValue(info);
      }
    }
  }
  return nil;
}

- (id<JavaUtilList>)listTunnels {
  @synchronized(_tunnels_) {
    return JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_tunnels_));
  }
}

- (jboolean)needFallback {
  jint needed = NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(self);
  jint fallbacks = 0;
  @synchronized(_tunnels_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_tunnels_)) size]; i++) {
      id<NetI2pRouterTunnelInfo> info = [_tunnels_ getWithInt:i];
      if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getLength] <= 1 && ++fallbacks >= needed) return false;
    }
  }
  return true;
}

- (jint)getAdjustedTotalQuantity {
  return NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(self);
}

- (void)setLengthOverride {
  NetI2pRouterTunnelPoolTunnelPool_setLengthOverride(self);
}

- (id<JavaUtilList>)listPending {
  @synchronized(_inProgress_) {
    return JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_inProgress_));
  }
}

- (jint)getTunnelCount {
  return [self size];
}

- (NetI2pRouterTunnelPoolSettings *)getSettings {
  return _settings_;
}

- (void)setSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  if (settings != nil && _settings_ != nil) {
    if (!([settings isExploratory] || [((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory])) {
      [((id<JavaUtilSet>) nil_chk([settings getAliases])) addAllWithJavaUtilCollection:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAliases]];
      [settings setAliasOfWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAliasOf]];
    }
  }
  JreStrongAssign(&_settings_, settings);
  if (_settings_ != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$@", [self description], @": Settings updated on the pool: ", settings)];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk([((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) getExecutor])) repoll];
  }
}

- (jboolean)isAlive {
  return JreLoadVolatileBoolean(&_alive_) && ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory] || [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) isLocalWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination]]);
}

- (jint)size {
  @synchronized(_tunnels_) {
    return [((id<JavaUtilList>) nil_chk(_tunnels_)) size];
  }
}

- (void)addTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$@", [self description], @": Adding tunnel ", info)];
  NetI2pDataLeaseSet *ls = nil;
  @synchronized(_tunnels_) {
    [((id<JavaUtilList>) nil_chk(_tunnels_)) addWithId:info];
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) ls = JreRetainedLocalValue([self locked_buildNewLeaseSet]);
  }
  if (ls != nil) [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) requestLeaseSetWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination] withNetI2pDataLeaseSet:ls];
}

- (void)removeTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$@", [self description], @": Removing tunnel ", info)];
  jint remaining = 0;
  NetI2pDataLeaseSet *ls = nil;
  @synchronized(_tunnels_) {
    jboolean removed = [((id<JavaUtilList>) nil_chk(_tunnels_)) removeWithId:info];
    if (!removed) return;
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) ls = JreRetainedLocalValue([self locked_buildNewLeaseSet]);
    remaining = [_tunnels_ size];
    if (_lastSelected_ == info) {
      JreStrongAssign(&_lastSelected_, nil);
      _lastSelectionPeriod_ = 0;
    }
  }
  [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk([((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) getExecutor])) repoll];
  _lifetimeProcessed_ += [((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getProcessedMessagesCount];
  NetI2pRouterTunnelPoolTunnelPool_updateRate(self);
  jlong lifetimeConfirmed = [info getVerifiedBytesTransferred];
  jlong lifetime = 10 * 60 * 1000;
  for (jint i = 0; i < [info getLength]; i++) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileManager])) tunnelLifetimePushedWithNetI2pDataHash:[info getPeerWithInt:i] withLong:lifetime withLong:lifetimeConfirmed];
  if (JreLoadVolatileBoolean(&_alive_) && [((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) {
    if (ls != nil) {
      [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) requestLeaseSetWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination] withNetI2pDataLeaseSet:ls];
    }
    else {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$I$", [self description], @": unable to build a new leaseSet on removal (", remaining, @" remaining), request a new tunnel")];
      if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAllowZeroHop]) [self buildFallback];
    }
  }
  if ([self getTunnelCount] <= 0 && ![self isAlive]) {
    [_manager_ removeTunnelsWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination]];
  }
}

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg {
  NetI2pRouterTunnelPoolTunnelPool_failWithNetI2pRouterTunnelInfo_(self, cfg);
  NetI2pRouterTunnelPoolTunnelPool_tellProfileFailedWithNetI2pRouterTunnelInfo_(self, cfg);
}

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg
                            withNetI2pDataHash:(NetI2pDataHash *)blamePeer {
  NetI2pRouterTunnelPoolTunnelPool_failWithNetI2pRouterTunnelInfo_(self, cfg);
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileManager])) tunnelFailedWithNetI2pDataHash:blamePeer withInt:100];
}

- (void)failWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg {
  NetI2pRouterTunnelPoolTunnelPool_failWithNetI2pRouterTunnelInfo_(self, cfg);
}

- (void)tellProfileFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg {
  NetI2pRouterTunnelPoolTunnelPool_tellProfileFailedWithNetI2pRouterTunnelInfo_(self, cfg);
}

- (void)updateRate {
  NetI2pRouterTunnelPoolTunnelPool_updateRate(self);
}

- (void)refreshLeaseSet {
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", [self description], @": refreshing leaseSet on tunnel expiration (but prior to grace timeout)")];
    NetI2pDataLeaseSet *ls;
    @synchronized(_tunnels_) {
      ls = JreRetainedLocalValue([self locked_buildNewLeaseSet]);
    }
    if (ls != nil) {
      [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) requestLeaseSetWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination] withNetI2pDataLeaseSet:ls];
      id<JavaUtilSet> aliases = [((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAliases];
      if (aliases != nil && ![aliases isEmpty]) {
        for (NetI2pDataHash * __strong h in aliases) {
          [((NetI2pRouterClientManagerFacade *) nil_chk([_context_ clientManager])) requestLeaseSetWithNetI2pDataHash:h withNetI2pDataLeaseSet:ls];
        }
      }
    }
  }
}

- (jboolean)buildFallback {
  jint quantity = NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(self);
  jint usable = 0;
  @synchronized(_tunnels_) {
    usable = [((id<JavaUtilList>) nil_chk(_tunnels_)) size];
  }
  if (usable > 0) return false;
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAllowZeroHop]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$I$IC", [self description], @": building a fallback tunnel (usable: ", usable, @" needed: ", quantity, ')')];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk([((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) getExecutor])) buildTunnelWithNetI2pRouterTunnelPoolTunnelPool:self withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:NetI2pRouterTunnelPoolTunnelPool_configureNewTunnelWithBoolean_(self, true)];
    return true;
  }
  return false;
}

- (NetI2pDataLeaseSet *)locked_buildNewLeaseSet {
  if (!JreLoadVolatileBoolean(&_alive_)) return nil;
  jint wanted = JavaLangMath_minWithInt_withInt_([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getQuantity], NetI2pDataLeaseSet_MAX_LEASES);
  if ([((id<JavaUtilList>) nil_chk(_tunnels_)) size] < wanted) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$I$IC", [self description], @": Not enough tunnels (", [_tunnels_ size], @", wanted ", wanted, ')')];
    if ([_tunnels_ isEmpty]) return nil;
  }
  jlong expireAfter = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  id<NetI2pRouterTunnelInfo> zeroHopTunnel = nil;
  NetI2pDataLease *zeroHopLease = nil;
  JavaUtilTreeSet *leases = create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init());
  for (jint i = 0; i < [_tunnels_ size]; i++) {
    id<NetI2pRouterTunnelInfo> tunnel = [_tunnels_ getWithInt:i];
    if ([((id<NetI2pRouterTunnelInfo>) nil_chk(tunnel)) getExpiration] <= expireAfter) continue;
    if ([tunnel getLength] <= 1) {
      if (zeroHopTunnel != nil) {
        if ([zeroHopTunnel getExpiration] > [tunnel getExpiration]) continue;
        if (zeroHopLease != nil) [leases removeWithId:zeroHopLease];
      }
      zeroHopTunnel = tunnel;
    }
    NetI2pDataTunnelId *inId = [tunnel getReceiveTunnelIdWithInt:0];
    NetI2pDataHash *gw = [tunnel getPeerWithInt:0];
    if ((inId == nil) || (gw == nil)) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$@", [self description], @": broken? tunnel has no inbound gateway/tunnelId? ", tunnel)];
      continue;
    }
    NetI2pDataLease *lease = create_NetI2pDataLease_init();
    [lease setEndDateWithJavaUtilDate:create_JavaUtilDate_initWithLong_([((NetI2pRouterTunnelHopConfig *) nil_chk([((NetI2pRouterTunnelTunnelCreatorConfig *) cast_chk(tunnel, [NetI2pRouterTunnelTunnelCreatorConfig class])) getConfigWithInt:0])) getExpiration])];
    [lease setTunnelIdWithNetI2pDataTunnelId:inId];
    [lease setGatewayWithNetI2pDataHash:gw];
    [leases addWithId:lease];
    if ([tunnel getLength] <= 1) zeroHopLease = lease;
  }
  if ([leases size] < wanted) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$I$IC", [self description], @": Not enough leases (", [leases size], @", wanted ", wanted, ')')];
    if ([leases isEmpty]) return nil;
  }
  NetI2pDataLeaseSet *ls = create_NetI2pDataLeaseSet_init();
  id<JavaUtilIterator> iter = [leases iterator];
  jint count = JavaLangMath_minWithInt_withInt_([leases size], wanted);
  for (jint i = 0; i < count; i++) [ls addLeaseWithNetI2pDataLease:[((id<JavaUtilIterator>) nil_chk(iter)) next]];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$@", [self description], @": built new leaseSet: ", ls)];
  return ls;
}

- (jlong)getLifetimeProcessed {
  return _lifetimeProcessed_;
}

- (NSString *)buildRateName {
  return NetI2pRouterTunnelPoolTunnelPool_buildRateName(self);
}

- (jint)countHowManyToBuild {
  if (![self isAlive]) {
    return 0;
  }
  jint wanted = NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(self);
  jboolean allowZeroHop = [((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getAllowZeroHop];
  NSString *rateName = NetI2pRouterTunnelPoolTunnelPool_buildRateName(self);
  jint avg = 0;
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) getRateWithNSString:rateName];
  if (rs == nil) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) createRequiredRateStatWithNSString:rateName withNSString:@"Tunnel Build Frequency" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME } count:1]];
    rs = [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) getRateWithNSString:rateName];
  }
  if (rs != nil) {
    NetI2pStatRate *r = [rs getRateWithLong:NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME];
    if (r != nil) avg = JreFpToInt((NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME * [r getAverageValue] / wanted));
  }
  if (avg > 0 && avg < NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME / 3) {
    jint PANIC_FACTOR = 4;
    avg += 60 * 1000;
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) avg += 60 * 1000;
    jlong now = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
    jint expireSoon = 0;
    jint expireLater = 0;
    IOSIntArray *expireTime;
    jint fallback = 0;
    @synchronized(_tunnels_) {
      expireTime = JreRetainedLocalValue([IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(_tunnels_)) size]]);
      for (jint i = 0; i < [_tunnels_ size]; i++) {
        id<NetI2pRouterTunnelInfo> info = [_tunnels_ getWithInt:i];
        if (allowZeroHop || ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getLength] > 1)) {
          jint timeToExpire = (jint) ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] - now);
          if (timeToExpire > 0 && timeToExpire < avg) {
            *IOSIntArray_GetRef(expireTime, expireSoon++) = timeToExpire;
          }
          else {
            expireLater++;
          }
        }
        else if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] - now > avg) {
          fallback++;
        }
      }
    }
    jint inProgress;
    @synchronized(_inProgress_) {
      inProgress = [((id<JavaUtilList>) nil_chk(_inProgress_)) size];
    }
    jint remainingWanted = (wanted - expireLater) - inProgress;
    if (allowZeroHop) remainingWanted -= fallback;
    jint rv = 0;
    jint latesttime = 0;
    if (remainingWanted > 0) {
      if (remainingWanted > expireSoon) {
        rv = PANIC_FACTOR * (remainingWanted - expireSoon);
        remainingWanted = expireSoon;
      }
      for (jint i = 0; i < remainingWanted; i++) {
        jint latestidx = 0;
        for (jint j = 0; j < expireSoon; j++) {
          if (IOSIntArray_Get(expireTime, j) > latesttime) {
            latesttime = IOSIntArray_Get(expireTime, j);
            latestidx = j;
          }
        }
        *IOSIntArray_GetRef(expireTime, latestidx) = 0;
        if (latesttime > avg / 2) rv += 1;
        else rv += 2 + ((PANIC_FACTOR - 2) * (((avg / 2) - latesttime) / (avg / 2)));
      }
    }
    if (rv > 0 && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(_log_)) debugWithNSString:JreStrcat("$I$Z$I$I$I$I$I$I$I$$", @"New Count: rv: ", rv, @" allow? ", allowZeroHop, @" avg ", avg, @" latesttime ", latesttime, @" soon ", expireSoon, @" later ", expireLater, @" std ", wanted, @" inProgress ", inProgress, @" fallback ", fallback, @" for ", [self description])];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:rateName withLong:rv + inProgress withLong:0];
    return rv;
  }
  jlong expireAfter = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + _expireSkew_;
  jint expire30s = 0;
  jint expire90s = 0;
  jint expire150s = 0;
  jint expire210s = 0;
  jint expire270s = 0;
  jint expireLater = 0;
  jint fallback = 0;
  @synchronized(_tunnels_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_tunnels_)) size]; i++) {
      id<NetI2pRouterTunnelInfo> info = [_tunnels_ getWithInt:i];
      if (allowZeroHop || ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getLength] > 1)) {
        jlong timeToExpire = [((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] - expireAfter;
        if (timeToExpire <= 0) {
        }
        else if (timeToExpire <= 30 * 1000) {
          expire30s++;
        }
        else if (timeToExpire <= 90 * 1000) {
          expire90s++;
        }
        else if (timeToExpire <= 150 * 1000) {
          expire150s++;
        }
        else if (timeToExpire <= 210 * 1000) {
          expire210s++;
        }
        else if (timeToExpire <= 270 * 1000) {
          expire270s++;
        }
        else {
          expireLater++;
        }
      }
      else if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] > expireAfter) {
        fallback++;
      }
    }
  }
  jint inProgress = 0;
  @synchronized(_inProgress_) {
    inProgress = [((id<JavaUtilList>) nil_chk(_inProgress_)) size];
    for (jint i = 0; i < inProgress; i++) {
      NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [_inProgress_ getWithInt:i];
      if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] <= 1) fallback++;
    }
  }
  jint rv = NetI2pRouterTunnelPoolTunnelPool_countHowManyToBuildWithBoolean_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, allowZeroHop, expire30s, expire90s, expire150s, expire210s, expire270s, expireLater, wanted, inProgress, fallback);
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:rateName withLong:(rv > 0 || inProgress > 0) ? 1 : 0 withLong:0];
  return rv;
}

- (jint)countHowManyToBuildWithBoolean:(jboolean)allowZeroHop
                               withInt:(jint)expire30s
                               withInt:(jint)expire90s
                               withInt:(jint)expire150s
                               withInt:(jint)expire210s
                               withInt:(jint)expire270s
                               withInt:(jint)expireLater
                               withInt:(jint)standardAmount
                               withInt:(jint)inProgress
                               withInt:(jint)fallback {
  return NetI2pRouterTunnelPoolTunnelPool_countHowManyToBuildWithBoolean_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, allowZeroHop, expire30s, expire90s, expire150s, expire210s, expire270s, expireLater, standardAmount, inProgress, fallback);
}

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)configureNewTunnel {
  return NetI2pRouterTunnelPoolTunnelPool_configureNewTunnelWithBoolean_(self, false);
}

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)configureNewTunnelWithBoolean:(jboolean)forceZeroHop {
  return NetI2pRouterTunnelPoolTunnelPool_configureNewTunnelWithBoolean_(self, forceZeroHop);
}

- (void)buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  @synchronized(_inProgress_) {
    [((id<JavaUtilList>) nil_chk(_inProgress_)) removeWithId:cfg];
  }
  [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) setTunnelPoolWithNetI2pRouterTunnelPoolTunnelPool:self];
}

- (NSString *)description {
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isExploratory]) {
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound]) return @"Inbound exploratory pool";
    else return @"Outbound exploratory pool";
  }
  else {
    JavaLangStringBuilder *rv = create_JavaLangStringBuilder_initWithInt_(32);
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) isInbound]) [rv appendWithNSString:@"Inbound client pool for "];
    else [rv appendWithNSString:@"Outbound client pool for "];
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestinationNickname] != nil) [rv appendWithNSString:[((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestinationNickname]];
    else [rv appendWithNSString:[((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([((NetI2pRouterTunnelPoolSettings *) nil_chk(_settings_)) getDestination])) toBase64])) java_substring:0 endIndex:4]];
    return [rv description];
  }
}

- (void)dealloc {
  RELEASE_(_inProgress_);
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_settings_);
  RELEASE_(_tunnels_);
  RELEASE_(_peerSelector_);
  RELEASE_(_manager_);
  RELEASE_(_lastSelected_);
  RELEASE_(_rateName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x0, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", 0x2, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPoolManager:withNetI2pRouterTunnelPoolSettings:withNetI2pRouterTunnelPoolTunnelPeerSelector:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getRateName);
  methods[4].selector = @selector(refreshSettings);
  methods[5].selector = @selector(curPeriod);
  methods[6].selector = @selector(getLifetime);
  methods[7].selector = @selector(selectTunnel);
  methods[8].selector = @selector(selectTunnelWithBoolean:);
  methods[9].selector = @selector(selectTunnelWithNetI2pDataHash:);
  methods[10].selector = @selector(getTunnelWithNetI2pDataTunnelId:);
  methods[11].selector = @selector(listTunnels);
  methods[12].selector = @selector(needFallback);
  methods[13].selector = @selector(getAdjustedTotalQuantity);
  methods[14].selector = @selector(setLengthOverride);
  methods[15].selector = @selector(listPending);
  methods[16].selector = @selector(getTunnelCount);
  methods[17].selector = @selector(getSettings);
  methods[18].selector = @selector(setSettingsWithNetI2pRouterTunnelPoolSettings:);
  methods[19].selector = @selector(isAlive);
  methods[20].selector = @selector(size);
  methods[21].selector = @selector(addTunnelWithNetI2pRouterTunnelInfo:);
  methods[22].selector = @selector(removeTunnelWithNetI2pRouterTunnelInfo:);
  methods[23].selector = @selector(tunnelFailedWithNetI2pRouterTunnelInfo:);
  methods[24].selector = @selector(tunnelFailedWithNetI2pRouterTunnelInfo:withNetI2pDataHash:);
  methods[25].selector = @selector(failWithNetI2pRouterTunnelInfo:);
  methods[26].selector = @selector(tellProfileFailedWithNetI2pRouterTunnelInfo:);
  methods[27].selector = @selector(updateRate);
  methods[28].selector = @selector(refreshLeaseSet);
  methods[29].selector = @selector(buildFallback);
  methods[30].selector = @selector(locked_buildNewLeaseSet);
  methods[31].selector = @selector(getLifetimeProcessed);
  methods[32].selector = @selector(buildRateName);
  methods[33].selector = @selector(countHowManyToBuild);
  methods[34].selector = @selector(countHowManyToBuildWithBoolean:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[35].selector = @selector(configureNewTunnel);
  methods[36].selector = @selector(configureNewTunnelWithBoolean:);
  methods[37].selector = @selector(buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[38].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_inProgress_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_settings_", "LNetI2pRouterTunnelPoolSettings;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnels_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
    { "_peerSelector_", "LNetI2pRouterTunnelPoolTunnelPeerSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterTunnelPoolTunnelPoolManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_lifetimeProcessed_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSelected_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSelectionPeriod_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expireSkew_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_started_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastRateUpdate_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastLifetimeProcessed_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rateName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TUNNEL_LIFETIME", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPool_TUNNEL_LIFETIME, 0x1a, -1, -1, -1, -1 },
    { "BUILD_TRIES_QUANTITY_OVERRIDE", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_QUANTITY_OVERRIDE, 0x1a, -1, -1, -1, -1 },
    { "BUILD_TRIES_LENGTH_OVERRIDE_1", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_1, 0x1a, -1, -1, -1, -1 },
    { "BUILD_TRIES_LENGTH_OVERRIDE_2", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_2, 0x1a, -1, -1, -1, -1 },
    { "STARTUP_TIME", "J", .constantValue.asLong = NetI2pRouterTunnelPoolTunnelPool_STARTUP_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPoolManager;LNetI2pRouterTunnelPoolSettings;LNetI2pRouterTunnelPoolTunnelPeerSelector;", "selectTunnel", "Z", "LNetI2pDataHash;", "getTunnel", "LNetI2pDataTunnelId;", "()Ljava/util/List<Lnet/i2p/router/TunnelInfo;>;", "()Ljava/util/List<Lnet/i2p/router/tunnel/pool/PooledTunnelCreatorConfig;>;", "setSettings", "LNetI2pRouterTunnelPoolSettings;", "addTunnel", "LNetI2pRouterTunnelInfo;", "removeTunnel", "tunnelFailed", "LNetI2pRouterTunnelInfo;LNetI2pDataHash;", "fail", "tellProfileFailed", "countHowManyToBuild", "ZIIIIIIIII", "configureNewTunnel", "buildComplete", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "toString", "Ljava/util/List<Lnet/i2p/router/tunnel/pool/PooledTunnelCreatorConfig;>;", "Ljava/util/List<Lnet/i2p/router/TunnelInfo;>;", "LNetI2pRouterTunnelPoolTunnelPool_LeaseComparator;LNetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPool = { "TunnelPool", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x1, 39, 21, -1, 25, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPool;
}

@end

void NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterTunnelPoolTunnelPool *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_inProgress_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolTunnelPool_class_()]);
  JreStrongAssign(&self->_manager_, mgr);
  JreStrongAssign(&self->_settings_, settings);
  JreStrongAssignAndConsume(&self->_tunnels_, new_JavaUtilArrayList_initWithInt_([((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) getTotalQuantity]));
  JreStrongAssign(&self->_peerSelector_, sel);
  self->_expireSkew_ = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:90 * 1000];
  self->_started_ = JavaLangSystem_currentTimeMillis();
  self->_lastRateUpdate_ = self->_started_;
  NSString *name;
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) {
    name = @"exploratory";
  }
  else {
    name = [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getDestinationNickname];
    if (name != nil) name = NetI2pDataDataHelper_stripHTMLWithNSString_(name);
    else name = [((NetI2pDataHash *) nil_chk([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getDestination])) toBase32];
  }
  JreStrongAssign(&self->_rateName_, JreStrcat("$$$", @"tunnel.Bps.", name, ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] ? @".in" : @".out")));
  NetI2pRouterTunnelPoolTunnelPool_refreshSettings(self);
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.matchLease" withNSString:@"How often does our OBEP match their IBGW?" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
}

NetI2pRouterTunnelPoolTunnelPool *new_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_, ctx, mgr, settings, sel)
}

NetI2pRouterTunnelPoolTunnelPool *create_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPeerSelector *sel) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_, ctx, mgr, settings, sel)
}

void NetI2pRouterTunnelPoolTunnelPool_refreshSettings(NetI2pRouterTunnelPoolTunnelPool *self) {
  if (![((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) return;
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props putAllWithJavaUtilMap:[((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getConfigMap]];
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound]) [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) readFromPropertiesWithNSString:NetI2pRouterTunnelPoolSettings_PREFIX_INBOUND_EXPLORATORY withJavaUtilProperties:props];
  else [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) readFromPropertiesWithNSString:NetI2pRouterTunnelPoolSettings_PREFIX_OUTBOUND_EXPLORATORY withJavaUtilProperties:props];
}

jlong NetI2pRouterTunnelPoolTunnelPool_curPeriod(NetI2pRouterTunnelPoolTunnelPool *self) {
  jlong period = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong ms = period % 1000;
  if (ms > 500) period = period - ms + 500;
  else period = period - ms;
  return period;
}

jlong NetI2pRouterTunnelPoolTunnelPool_getLifetime(NetI2pRouterTunnelPoolTunnelPool *self) {
  return JavaLangSystem_currentTimeMillis() - self->_started_;
}

id<NetI2pRouterTunnelInfo> NetI2pRouterTunnelPoolTunnelPool_selectTunnelWithBoolean_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean allowRecurseOnFail) {
  jboolean avoidZeroHop = ![((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getAllowZeroHop];
  jlong period = NetI2pRouterTunnelPoolTunnelPool_curPeriod(self);
  @synchronized(self->_tunnels_) {
    if (self->_lastSelectionPeriod_ == period) {
      if ((self->_lastSelected_ != nil) && ([((id<NetI2pRouterTunnelInfo>) nil_chk(self->_lastSelected_)) getExpiration] > period) && ([((id<JavaUtilList>) nil_chk(self->_tunnels_)) containsWithId:self->_lastSelected_])) return JreRetainedLocalValue(self->_lastSelected_);
    }
    self->_lastSelectionPeriod_ = period;
    JreStrongAssign(&self->_lastSelected_, nil);
    if ([((id<JavaUtilList>) nil_chk(self->_tunnels_)) isEmpty]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", [self description], @": No tunnels to select from")];
    }
    else {
      JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(self->_tunnels_, [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random]);
      id<NetI2pRouterTunnelInfo> backloggedTunnel = nil;
      if (avoidZeroHop) {
        for (jint i = 0; i < [self->_tunnels_ size]; i++) {
          id<NetI2pRouterTunnelInfo> info = [self->_tunnels_ getWithInt:i];
          if (([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getLength] > 1) && ([info getExpiration] > [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now])) {
            if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] || ![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) isBackloggedWithNetI2pDataHash:[info getPeerWithInt:1]]) {
              JreStrongAssign(&self->_lastSelected_, info);
              return JreRetainedLocalValue(info);
            }
            else {
              backloggedTunnel = info;
            }
          }
        }
        if (backloggedTunnel != nil) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", [self description], @": All tunnels are backlogged")];
          return JreRetainedLocalValue(backloggedTunnel);
        }
      }
      for (jint i = 0; i < [self->_tunnels_ size]; i++) {
        id<NetI2pRouterTunnelInfo> info = [self->_tunnels_ getWithInt:i];
        if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getExpiration] > [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now]) {
          if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] || [info getLength] <= 1 || ![((NetI2pRouterCommSystemFacade *) nil_chk([self->_context_ commSystem])) isBackloggedWithNetI2pDataHash:[info getPeerWithInt:1]]) {
            JreStrongAssign(&self->_lastSelected_, info);
            return JreRetainedLocalValue(info);
          }
          else {
            backloggedTunnel = info;
          }
        }
      }
      if (backloggedTunnel != nil) return JreRetainedLocalValue(backloggedTunnel);
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$I$@", [self description], @": after ", [self->_tunnels_ size], @" tries, no unexpired ones were found: ", self->_tunnels_)];
    }
  }
  if (JreLoadVolatileBoolean(&self->_alive_) && !avoidZeroHop) [self buildFallback];
  if (allowRecurseOnFail) return NetI2pRouterTunnelPoolTunnelPool_selectTunnelWithBoolean_(self, false);
  else return nil;
}

jint NetI2pRouterTunnelPoolTunnelPool_getAdjustedTotalQuantity(NetI2pRouterTunnelPoolTunnelPool *self) {
  jint rv = [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getTotalQuantity];
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory] && [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) floodfillEnabled] && [((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getUptime] > 5 * 60 * 1000) {
    rv += 2;
  }
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory] && rv > 1) {
    NetI2pStatRateStat *e = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) getRateWithNSString:@"tunnel.buildExploratoryExpire"];
    NetI2pStatRateStat *r = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.buildExploratoryReject"];
    NetI2pStatRateStat *s = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.buildExploratorySuccess"];
    if (e != nil && r != nil && s != nil) {
      NetI2pStatRate *er = [e getRateWithLong:10 * 60 * 1000];
      NetI2pStatRate *rr = [r getRateWithLong:10 * 60 * 1000];
      NetI2pStatRate *sr = [s getRateWithLong:10 * 60 * 1000];
      if (er != nil && rr != nil && sr != nil) {
        NetI2pStatRateAverages *ra = NetI2pStatRateAverages_getTemp();
        jlong ec = [((NetI2pStatRateAverages *) nil_chk([er computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong rc = [((NetI2pStatRateAverages *) nil_chk([rr computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong sc = [((NetI2pStatRateAverages *) nil_chk([sr computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong tot = ec + rc + sc;
        if (tot >= NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_QUANTITY_OVERRIDE) {
          if (1000 * sc / tot <= 1000 / NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_QUANTITY_OVERRIDE) rv--;
        }
      }
    }
  }
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory] && [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) router])) getUptime] < NetI2pRouterTunnelPoolTunnelPool_STARTUP_TIME) {
    rv++;
  }
  return rv;
}

void NetI2pRouterTunnelPoolTunnelPool_setLengthOverride(NetI2pRouterTunnelPoolTunnelPool *self) {
  if (![((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) return;
  jint len = [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getLength];
  if (len > 1) {
    NetI2pStatRateStat *e = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) getRateWithNSString:@"tunnel.buildExploratoryExpire"];
    NetI2pStatRateStat *r = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.buildExploratoryReject"];
    NetI2pStatRateStat *s = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.buildExploratorySuccess"];
    if (e != nil && r != nil && s != nil) {
      NetI2pStatRate *er = [e getRateWithLong:10 * 60 * 1000];
      NetI2pStatRate *rr = [r getRateWithLong:10 * 60 * 1000];
      NetI2pStatRate *sr = [s getRateWithLong:10 * 60 * 1000];
      if (er != nil && rr != nil && sr != nil) {
        NetI2pStatRateAverages *ra = NetI2pStatRateAverages_getTemp();
        jlong ec = [((NetI2pStatRateAverages *) nil_chk([er computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong rc = [((NetI2pStatRateAverages *) nil_chk([rr computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong sc = [((NetI2pStatRateAverages *) nil_chk([sr computeAveragesWithNetI2pStatRateAverages:ra withBoolean:false])) getTotalEventCount];
        jlong tot = ec + rc + sc;
        if (tot >= NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_1) {
          jlong succ = 1000 * sc / tot;
          if (succ <= 1000 / NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_1) {
            if (len > 2 && succ <= 1000 / NetI2pRouterTunnelPoolTunnelPool_BUILD_TRIES_LENGTH_OVERRIDE_2) [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) setLengthOverrideWithInt:len - 2];
            else [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) setLengthOverrideWithInt:len - 1];
            return;
          }
        }
      }
    }
  }
  [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) setLengthOverrideWithInt:-1];
}

void NetI2pRouterTunnelPoolTunnelPool_failWithNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTunnelPool *self, id<NetI2pRouterTunnelInfo> cfg) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$@", [self description], @": Tunnel failed: ", cfg)];
  NetI2pDataLeaseSet *ls = nil;
  @synchronized(self->_tunnels_) {
    jboolean removed = [((id<JavaUtilList>) nil_chk(self->_tunnels_)) removeWithId:cfg];
    if (!removed) return;
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) ls = JreRetainedLocalValue([self locked_buildNewLeaseSet]);
    if (self->_lastSelected_ == cfg) {
      JreStrongAssign(&self->_lastSelected_, nil);
      self->_lastSelectionPeriod_ = 0;
    }
  }
  [((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(self->_manager_)) tunnelFailed];
  self->_lifetimeProcessed_ += [((id<NetI2pRouterTunnelInfo>) nil_chk(cfg)) getProcessedMessagesCount];
  NetI2pRouterTunnelPoolTunnelPool_updateRate(self);
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) {
    if (ls != nil) {
      [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clientManager])) requestLeaseSetWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getDestination] withNetI2pDataLeaseSet:ls];
    }
  }
}

void NetI2pRouterTunnelPoolTunnelPool_tellProfileFailedWithNetI2pRouterTunnelInfo_(NetI2pRouterTunnelPoolTunnelPool *self, id<NetI2pRouterTunnelInfo> cfg) {
  jint len = [((id<NetI2pRouterTunnelInfo>) nil_chk(cfg)) getLength];
  if (len < 2) return;
  jint start = 0;
  jint end = len;
  if ([cfg isInbound]) end--;
  else start++;
  for (jint i = start; i < end; i++) {
    jint pct = 100 / (len - 1);
    if ([cfg isInbound] && len > 2) {
      if (i == start) pct *= 2;
      else pct /= 2;
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$@CIC", [self description], @": Blaming ", [cfg getPeerWithInt:i], ' ', pct, '%')];
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) profileManager])) tunnelFailedWithNetI2pDataHash:[cfg getPeerWithInt:i] withInt:pct];
  }
}

void NetI2pRouterTunnelPoolTunnelPool_updateRate(NetI2pRouterTunnelPoolTunnelPool *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong et = now - self->_lastRateUpdate_;
  if (et > 2 * 60 * 1000) {
    jlong bw = 1024 * (self->_lifetimeProcessed_ - self->_lastLifetimeProcessed_) * 1000 / et;
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:self->_rateName_ withLong:bw withLong:0];
    self->_lastRateUpdate_ = now;
    self->_lastLifetimeProcessed_ = self->_lifetimeProcessed_;
  }
}

NSString *NetI2pRouterTunnelPoolTunnelPool_buildRateName(NetI2pRouterTunnelPoolTunnelPool *self) {
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isExploratory]) return JreStrcat("$$", @"tunnel.buildRatio.exploratory.", ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] ? @"in" : @"out"));
  else return JreStrcat("$ICI$", @"tunnel.buildRatio.l", [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getLength], 'v', [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) getLengthVariance], ([((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_settings_)) isInbound] ? @".in" : @".out"));
}

jint NetI2pRouterTunnelPoolTunnelPool_countHowManyToBuildWithBoolean_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean allowZeroHop, jint expire30s, jint expire90s, jint expire150s, jint expire210s, jint expire270s, jint expireLater, jint standardAmount, jint inProgress, jint fallback) {
  jint rv = 0;
  jint remainingWanted = standardAmount - expireLater;
  if (allowZeroHop) remainingWanted -= fallback;
  for (jint i = 0; i < expire270s && remainingWanted > 0; i++) remainingWanted--;
  if (remainingWanted > 0) {
    for (jint i = 0; i < expire210s && remainingWanted > 0; i++) {
      remainingWanted--;
    }
    if (remainingWanted > 0) {
      for (jint i = 0; i < expire150s && remainingWanted > 0; i++) {
        remainingWanted--;
      }
      if (remainingWanted > 0) {
        for (jint i = 0; i < expire90s && remainingWanted > 0; i++) {
          remainingWanted--;
        }
        if (remainingWanted > 0) {
          for (jint i = 0; i < expire30s && remainingWanted > 0; i++) {
            remainingWanted--;
          }
          if (remainingWanted > 0) {
            rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
            rv += expire210s;
            rv += 2 * expire150s;
            rv += 4 * expire90s;
            rv += 6 * expire30s;
            rv += 6 * remainingWanted;
            rv -= inProgress;
            rv -= expireLater;
          }
          else {
            rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
            rv += expire210s;
            rv += 2 * expire150s;
            rv += 4 * expire90s;
            rv += 6 * expire30s;
            rv -= inProgress;
            rv -= expireLater;
          }
        }
        else {
          rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
          rv += expire210s;
          rv += 2 * expire150s;
          rv += 4 * expire90s;
          rv -= inProgress;
          rv -= expireLater;
        }
      }
      else {
        rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
        rv += expire210s;
        rv += 2 * expire150s;
        rv -= inProgress;
        rv -= expireLater;
      }
    }
    else {
      rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
      rv += expire210s;
      rv -= inProgress;
      rv -= expireLater;
    }
  }
  else {
    rv = (((expire270s > 0) && [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextBoolean]) ? 1 : 0);
    rv -= inProgress;
    rv -= expireLater;
  }
  if (allowZeroHop && (rv > standardAmount)) rv = standardAmount;
  if (rv + inProgress + expireLater + fallback > 4 * standardAmount) rv = 4 * standardAmount - inProgress - expireLater - fallback;
  jlong lifetime = NetI2pRouterTunnelPoolTunnelPool_getLifetime(self);
  if ((lifetime < 60 * 1000) && (rv + inProgress + fallback >= standardAmount)) rv = standardAmount - inProgress - fallback;
  if (rv > 0 && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [((NetI2pUtilLog *) nil_chk(self->_log_)) debugWithNSString:JreStrcat("$I$Z$I$I$I$I$I$I$I$I$I$$$J", @"Count: rv: ", rv, @" allow? ", allowZeroHop, @" 30s ", expire30s, @" 90s ", expire90s, @" 150s ", expire150s, @" 210s ", expire210s, @" 270s ", expire270s, @" later ", expireLater, @" std ", standardAmount, @" inProgress ", inProgress, @" fallback ", fallback, @" for ", [self description], @" up for ", lifetime)];
  if (rv < 0) return 0;
  return rv;
}

NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *NetI2pRouterTunnelPoolTunnelPool_configureNewTunnelWithBoolean_(NetI2pRouterTunnelPoolTunnelPool *self, jboolean forceZeroHop) {
  NetI2pRouterTunnelPoolSettings *settings = [self getSettings];
  id<JavaUtilList> peers = nil;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  jlong expiration = now + NetI2pRouterTunnelPoolSettings_DEFAULT_DURATION;
  if (!forceZeroHop) {
    jint len = [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) getLengthOverride];
    if (len < 0) len = [settings getLength];
    if (len > 0 && (![settings isExploratory]) && [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextBoolean]) {
      len++;
      @synchronized(self->_tunnels_) {
        for (id<NetI2pRouterTunnelInfo> __strong ti in nil_chk(self->_tunnels_)) {
          if ([((id<NetI2pRouterTunnelInfo>) nil_chk(ti)) getLength] >= len && [ti getExpiration] < now + 3 * 60 * 1000 && ![ti wasReused]) {
            [ti setReused];
            len = [ti getLength];
            peers = JreRetainedLocalValue(create_JavaUtilArrayList_initWithInt_(len));
            for (jint i = len - 1; i >= 0; i--) {
              [peers addWithId:[ti getPeerWithInt:i]];
            }
            break;
          }
        }
      }
    }
    if (peers == nil) {
      NetI2pRouterTunnelPoolTunnelPool_setLengthOverride(self);
      peers = [((NetI2pRouterTunnelPoolTunnelPeerSelector *) nil_chk(self->_peerSelector_)) selectPeersWithNetI2pRouterTunnelPoolSettings:settings];
    }
    if ((peers == nil) || ([((id<JavaUtilList>) nil_chk(peers)) isEmpty])) {
      if (peers == nil) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No peers to put in the new tunnel! selectPeers returned null!  boo, hiss!"];
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"No peers to put in the new tunnel! selectPeers returned an empty list?!"];
      }
      return nil;
    }
  }
  else {
    peers = JavaUtilCollections_singletonListWithId_([self->_context_ routerHash]);
  }
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = create_NetI2pRouterTunnelPoolPooledTunnelCreatorConfig_initWithNetI2pRouterRouterContext_withInt_withBoolean_withNetI2pDataHash_(self->_context_, [((id<JavaUtilList>) nil_chk(peers)) size], [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) isInbound], [settings getDestination]);
  [cfg setTunnelPoolWithNetI2pRouterTunnelPoolTunnelPool:self];
  for (jint i = 0; i < [peers size]; i++) {
    jint j = [peers size] - 1 - i;
    [cfg setPeerWithInt:j withNetI2pDataHash:[peers getWithInt:i]];
    NetI2pRouterTunnelHopConfig *hop = [cfg getConfigWithInt:j];
    [((NetI2pRouterTunnelHopConfig *) nil_chk(hop)) setCreationWithLong:now];
    [hop setExpirationWithLong:expiration];
    [hop setIVKeyWithNetI2pDataSessionKey:[((NetI2pCryptoKeyGenerator *) nil_chk([self->_context_ keyGenerator])) generateSessionKey]];
    [hop setLayerKeyWithNetI2pDataSessionKey:[((NetI2pCryptoKeyGenerator *) nil_chk([self->_context_ keyGenerator])) generateSessionKey]];
  }
  [cfg setExpirationWithLong:expiration];
  if (![settings isInbound]) [cfg setPriorityWithInt:[settings getPriority]];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$@", @"Config contains ", peers, @": ", cfg)];
  @synchronized(self->_inProgress_) {
    [((id<JavaUtilList>) nil_chk(self->_inProgress_)) addWithId:cfg];
  }
  return cfg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPool)

@implementation NetI2pRouterTunnelPoolTunnelPool_LeaseComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(NetI2pDataLease *)l
               withId:(NetI2pDataLease *)r {
  return [((JavaUtilDate *) nil_chk([((NetI2pDataLease *) nil_chk(r)) getEndDate])) compareToWithId:[((NetI2pDataLease *) nil_chk(l)) getEndDate]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pDataLease;LNetI2pDataLease;", "LNetI2pRouterTunnelPoolTunnelPool;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/data/Lease;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPool_LeaseComparator = { "LeaseComparator", "net.i2p.router.tunnel.pool", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator;
}

@end

void NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *self) {
  NSObject_init(self);
}

NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *new_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator, init)
}

NetI2pRouterTunnelPoolTunnelPool_LeaseComparator *create_NetI2pRouterTunnelPoolTunnelPool_LeaseComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPool_LeaseComparator)

@implementation NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)target
                           withBoolean:(jboolean)avoidZeroHop {
  NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(self, target, avoidZeroHop);
  return self;
}

- (jint)compareWithId:(id<NetI2pRouterTunnelInfo>)lhs
               withId:(id<NetI2pRouterTunnelInfo>)rhs {
  if (_avoidZero_) {
    jint llen = [((id<NetI2pRouterTunnelInfo>) nil_chk(lhs)) getLength];
    jint rlen = [((id<NetI2pRouterTunnelInfo>) nil_chk(rhs)) getLength];
    if (llen > 1 && rlen <= 1) return -1;
    if (rlen > 1 && llen <= 1) return 1;
  }
  IOSByteArray *lhsb = [((NetI2pDataHash *) nil_chk([((id<NetI2pRouterTunnelInfo>) nil_chk(lhs)) getFarEnd])) getData];
  IOSByteArray *rhsb = [((NetI2pDataHash *) nil_chk([((id<NetI2pRouterTunnelInfo>) nil_chk(rhs)) getFarEnd])) getData];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(_base_))->size_; i++) {
    jint ld = (IOSByteArray_Get(nil_chk(lhsb), i) ^ IOSByteArray_Get(_base_, i)) & (jint) 0xff;
    jint rd = (IOSByteArray_Get(nil_chk(rhsb), i) ^ IOSByteArray_Get(_base_, i)) & (jint) 0xff;
    if (ld < rd) return -1;
    if (ld > rd) return 1;
  }
  return (jint) ([rhs getExpiration] - [lhs getExpiration]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(_base_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:withBoolean:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_base_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_avoidZero_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;Z", "compare", "LNetI2pRouterTunnelInfo;LNetI2pRouterTunnelInfo;", "LNetI2pRouterTunnelPoolTunnelPool;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/router/TunnelInfo;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator = { "TunnelInfoComparator", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 2, 2, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator;
}

@end

void NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *self, NetI2pDataHash *target, jboolean avoidZeroHop) {
  NSObject_init(self);
  JreStrongAssign(&self->_base_, [((NetI2pDataHash *) nil_chk(target)) getData]);
  self->_avoidZero_ = avoidZeroHop;
}

NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *new_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *target, jboolean avoidZeroHop) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator, initWithNetI2pDataHash_withBoolean_, target, avoidZeroHop)
}

NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator *create_NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator_initWithNetI2pDataHash_withBoolean_(NetI2pDataHash *target, jboolean avoidZeroHop) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator, initWithNetI2pDataHash_withBoolean_, target, avoidZeroHop)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPool_TunnelInfoComparator)
