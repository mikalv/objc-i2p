//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/BuildRequestor.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/TunnelBuildMessage.h"
#include "net/i2p/data/i2np/TunnelBuildMessageBase.h"
#include "net/i2p/data/i2np/VariableTunnelBuildMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/tunnel/BuildMessageGenerator.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/BuildExecutor.h"
#include "net/i2p/router/tunnel/pool/BuildRequestor.h"
#include "net/i2p/router/tunnel/pool/ExpireJob.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTunnelPoolBuildRequestor ()

+ (jboolean)usePairedTunnelsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

+ (void)prepareWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg;

+ (NetI2pDataI2npTunnelBuildMessage *)createTunnelBuildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                       withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                        withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
                                                                 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)pairedTunnel
                                                    withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec;

+ (void)buildZeroHopWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
          withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec;

@end

inline id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_get_ORDER(void);
static id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolBuildRequestor, ORDER, id<JavaUtilList>)

inline jboolean NetI2pRouterTunnelPoolBuildRequestor_get_SEND_VARIABLE(void);
#define NetI2pRouterTunnelPoolBuildRequestor_SEND_VARIABLE true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, SEND_VARIABLE, jboolean)

inline jint NetI2pRouterTunnelPoolBuildRequestor_get_SHORT_RECORDS(void);
#define NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, SHORT_RECORDS, jint)

inline id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_get_SHORT_ORDER(void);
static id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_SHORT_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolBuildRequestor, SHORT_ORDER, id<JavaUtilList>)

inline jint NetI2pRouterTunnelPoolBuildRequestor_get_MEDIUM_RECORDS(void);
#define NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, MEDIUM_RECORDS, jint)

inline id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_get_MEDIUM_ORDER(void);
static id<JavaUtilList> NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelPoolBuildRequestor, MEDIUM_ORDER, id<JavaUtilList>)

inline jint NetI2pRouterTunnelPoolBuildRequestor_get_PRIORITY(void);
#define NetI2pRouterTunnelPoolBuildRequestor_PRIORITY 500
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, PRIORITY, jint)

inline jint NetI2pRouterTunnelPoolBuildRequestor_get_FIRST_HOP_TIMEOUT(void);
#define NetI2pRouterTunnelPoolBuildRequestor_FIRST_HOP_TIMEOUT 10000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, FIRST_HOP_TIMEOUT, jint)

inline jint NetI2pRouterTunnelPoolBuildRequestor_get_BUILD_MSG_TIMEOUT(void);
#define NetI2pRouterTunnelPoolBuildRequestor_BUILD_MSG_TIMEOUT 60000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildRequestor, BUILD_MSG_TIMEOUT, jint)

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolBuildRequestor_usePairedTunnelsWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildRequestor_prepareWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg);

__attribute__((unused)) static NetI2pDataI2npTunnelBuildMessage *NetI2pRouterTunnelPoolBuildRequestor_createTunnelBuildMessageWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, id<NetI2pRouterTunnelInfo> pairedTunnel, NetI2pRouterTunnelPoolBuildExecutor *exec);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildRequestor_buildZeroHopWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec);

@interface NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelPoolTunnelPool *_pool_;
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *_cfg_;
  NetI2pRouterTunnelPoolBuildExecutor *_exec_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
          withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob, _pool_, NetI2pRouterTunnelPoolTunnelPool *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob, _cfg_, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob, _exec_, NetI2pRouterTunnelPoolBuildExecutor *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *new_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *create_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelPoolBuildRequestor)

@implementation NetI2pRouterTunnelPoolBuildRequestor

+ (jint)REQUEST_TIMEOUT {
  return NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTunnelPoolBuildRequestor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)usePairedTunnelsWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTunnelPoolBuildRequestor_usePairedTunnelsWithNetI2pRouterRouterContext_(ctx);
}

+ (void)prepareWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  NetI2pRouterTunnelPoolBuildRequestor_prepareWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(ctx, cfg);
}

+ (jboolean)requestWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
            withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
         withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec {
  return NetI2pRouterTunnelPoolBuildRequestor_requestWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, exec);
}

+ (NetI2pDataI2npTunnelBuildMessage *)createTunnelBuildMessageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                                                       withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                        withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
                                                                 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)pairedTunnel
                                                    withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec {
  return NetI2pRouterTunnelPoolBuildRequestor_createTunnelBuildMessageWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, pairedTunnel, exec);
}

+ (void)buildZeroHopWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
          withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec {
  NetI2pRouterTunnelPoolBuildRequestor_buildZeroHopWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, exec);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npTunnelBuildMessage;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(usePairedTunnelsWithNetI2pRouterRouterContext:);
  methods[2].selector = @selector(prepareWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[3].selector = @selector(requestWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPool:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelPoolBuildExecutor:);
  methods[4].selector = @selector(createTunnelBuildMessageWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPool:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelInfo:withNetI2pRouterTunnelPoolBuildExecutor:);
  methods[5].selector = @selector(buildZeroHopWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPool:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelPoolBuildExecutor:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ORDER", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
    { "SEND_VARIABLE", "Z", .constantValue.asBOOL = NetI2pRouterTunnelPoolBuildRequestor_SEND_VARIABLE, 0x1a, -1, -1, -1, -1 },
    { "SHORT_RECORDS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS, 0x1a, -1, -1, -1, -1 },
    { "SHORT_ORDER", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 11, 10, -1 },
    { "MEDIUM_RECORDS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS, 0x1a, -1, -1, -1, -1 },
    { "MEDIUM_ORDER", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 12, 10, -1 },
    { "PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_PRIORITY, 0x1a, -1, -1, -1, -1 },
    { "REQUEST_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "FIRST_HOP_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_FIRST_HOP_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "BUILD_MSG_TIMEOUT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildRequestor_BUILD_MSG_TIMEOUT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "usePairedTunnels", "LNetI2pRouterRouterContext;", "prepare", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "request", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPool;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pRouterTunnelPoolBuildExecutor;", "createTunnelBuildMessage", "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPool;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pRouterTunnelInfo;LNetI2pRouterTunnelPoolBuildExecutor;", "buildZeroHop", &NetI2pRouterTunnelPoolBuildRequestor_ORDER, "Ljava/util/List<Ljava/lang/Integer;>;", &NetI2pRouterTunnelPoolBuildRequestor_SHORT_ORDER, &NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_ORDER, "LNetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildRequestor = { "BuildRequestor", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x400, 6, 10, -1, 13, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildRequestor;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelPoolBuildRequestor class]) {
    JreStrongAssignAndConsume(&NetI2pRouterTunnelPoolBuildRequestor_ORDER, new_JavaUtilArrayList_initWithInt_(NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT));
    JreStrongAssignAndConsume(&NetI2pRouterTunnelPoolBuildRequestor_SHORT_ORDER, new_JavaUtilArrayList_initWithInt_(NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS));
    JreStrongAssignAndConsume(&NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_ORDER, new_JavaUtilArrayList_initWithInt_(NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS));
    {
      for (jint i = 0; i < NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT; i++) {
        [NetI2pRouterTunnelPoolBuildRequestor_ORDER addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
      for (jint i = 0; i < NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS; i++) {
        [NetI2pRouterTunnelPoolBuildRequestor_SHORT_ORDER addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
      for (jint i = 0; i < NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS; i++) {
        [NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_ORDER addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelPoolBuildRequestor)
  }
}

@end

void NetI2pRouterTunnelPoolBuildRequestor_init(NetI2pRouterTunnelPoolBuildRequestor *self) {
  NSObject_init(self);
}

jboolean NetI2pRouterTunnelPoolBuildRequestor_usePairedTunnelsWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTunnelPoolBuildRequestor_initialize();
  return true;
}

void NetI2pRouterTunnelPoolBuildRequestor_prepareWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg) {
  NetI2pRouterTunnelPoolBuildRequestor_initialize();
  jint len = [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength];
  jboolean isIB = [cfg isInbound];
  for (jint i = 0; i < len; i++) {
    if ((!isIB) && (i == 0)) {
      if (len <= 1) {
        jlong id_ = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) tunnelDispatcher])) getNewOBGWID];
        [((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i])) setSendTunnelIdWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, id_)];
      }
    }
    else {
      jlong id_;
      if (isIB && len == 1) id_ = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) tunnelDispatcher])) getNewIBZeroHopID];
      else if (isIB && i == len - 1) id_ = [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) tunnelDispatcher])) getNewIBEPID];
      else id_ = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pDataTunnelId_MAX_ID_VALUE];
      [((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i])) setReceiveTunnelIdWithByteArray:NetI2pDataDataHelper_toLongWithInt_withLong_(4, id_)];
    }
    if (i > 0) [((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i - 1])) setSendTunnelIdWithByteArray:[((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i])) getReceiveTunnelId]];
    IOSByteArray *iv = [IOSByteArray arrayWithLength:16];
    [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextBytesWithByteArray:iv];
    [((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i])) setReplyIVWithByteArray:iv];
    [((NetI2pRouterTunnelHopConfig *) nil_chk([cfg getConfigWithInt:i])) setReplyKeyWithNetI2pDataSessionKey:[((NetI2pCryptoKeyGenerator *) nil_chk([ctx keyGenerator])) generateSessionKey]];
  }
}

jboolean NetI2pRouterTunnelPoolBuildRequestor_requestWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  NetI2pRouterTunnelPoolBuildRequestor_initialize();
  NetI2pRouterTunnelPoolBuildRequestor_prepareWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(ctx, cfg);
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] <= 1) {
    NetI2pRouterTunnelPoolBuildRequestor_buildZeroHopWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, exec);
    return true;
  }
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolBuildRequestor_class_()];
  [cfg setTunnelPoolWithNetI2pRouterTunnelPoolTunnelPool:pool];
  id<NetI2pRouterTunnelInfo> pairedTunnel = nil;
  NetI2pDataHash *farEnd = [cfg getFarEnd];
  id<NetI2pRouterTunnelManagerFacade> mgr = [ctx tunnelManager];
  jboolean isInbound = [((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) getSettings])) isInbound];
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([pool getSettings])) isExploratory] || !NetI2pRouterTunnelPoolBuildRequestor_usePairedTunnelsWithNetI2pRouterRouterContext_(ctx)) {
    if (isInbound) pairedTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(mgr)) selectOutboundExploratoryTunnelWithNetI2pDataHash:farEnd];
    else pairedTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(mgr)) selectInboundExploratoryTunnelWithNetI2pDataHash:farEnd];
  }
  else {
    if (isInbound) pairedTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(mgr)) selectOutboundTunnelWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk([pool getSettings])) getDestination] withNetI2pDataHash:farEnd];
    else pairedTunnel = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(mgr)) selectInboundTunnelWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk([pool getSettings])) getDestination] withNetI2pDataHash:farEnd];
    if (pairedTunnel == nil) {
      if (isInbound) {
        pairedTunnel = [mgr selectOutboundTunnel];
        if (pairedTunnel != nil && [pairedTunnel getLength] <= 1 && [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getOutboundSettings])) getLength] > 0 && [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getOutboundSettings])) getLength] + [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getOutboundSettings])) getLengthVariance] > 0) {
          pairedTunnel = nil;
        }
      }
      else {
        pairedTunnel = [mgr selectInboundTunnel];
        if (pairedTunnel != nil && [pairedTunnel getLength] <= 1 && [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getInboundSettings])) getLength] > 0 && [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getInboundSettings])) getLength] + [((NetI2pRouterTunnelPoolSettings *) nil_chk([mgr getInboundSettings])) getLengthVariance] > 0) {
          pairedTunnel = nil;
        }
      }
      if (pairedTunnel != nil && [((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(log)) infoWithNSString:JreStrcat("$@$", @"Couldn't find a paired tunnel for ", cfg, @", using exploratory tunnel")];
    }
  }
  if (pairedTunnel == nil) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$@", @"Tunnel build failed, as we couldn't find a paired tunnel for ", cfg)];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(exec)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:pool];
    jint ms = [((NetI2pRouterTunnelPoolSettings *) nil_chk([pool getSettings])) isExploratory] ? 250 : 25;
    @try {
      JavaLangThread_sleepWithLong_(ms);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    return false;
  }
  NetI2pDataI2npTunnelBuildMessage *msg = NetI2pRouterTunnelPoolBuildRequestor_createTunnelBuildMessageWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, pairedTunnel, exec);
  if (msg == nil) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$@", @"Tunnel build failed, as we couldn't create the tunnel build message for ", cfg)];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(exec)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:pool];
    return false;
  }
  if ([cfg isInbound]) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$J$@$@$@$J", @"Sending the tunnel build request ", [msg getUniqueId], @" out the tunnel ", pairedTunnel, @" to ", [cfg getPeerWithInt:0], @" for ", cfg, @" waiting for the reply of ", [cfg getReplyMessageId])];
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([ctx tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:[pairedTunnel getSendTunnelIdWithInt:0] withNetI2pDataHash:[cfg getPeerWithInt:0]];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$@$@$J$J", @"Sending the tunnel build request directly to ", [cfg getPeerWithInt:1], @" for ", cfg, @" waiting for the reply of ", [cfg getReplyMessageId], @" with msgId=", [msg getUniqueId])];
    [msg setMessageExpirationWithLong:[((NetI2pUtilClock *) nil_chk([ctx clock])) now] + NetI2pRouterTunnelPoolBuildRequestor_BUILD_MSG_TIMEOUT + [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextLongWithLong:20 * 1000]];
    NetI2pDataRouterRouterInfo *peer = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([ctx netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[cfg getPeerWithInt:1]];
    if (peer == nil) {
      if ([log shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$@", @"Could not find the next hop to send the outbound request to: ", cfg)];
      [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(exec)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:pool];
      return false;
    }
    NetI2pRouterOutNetMessage *outMsg = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(ctx, msg, [((NetI2pUtilClock *) nil_chk([ctx clock])) now] + NetI2pRouterTunnelPoolBuildRequestor_FIRST_HOP_TIMEOUT, NetI2pRouterTunnelPoolBuildRequestor_PRIORITY, peer);
    [outMsg setOnFailedSendJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, pool, cfg, exec)];
    @try {
      [((NetI2pRouterOutNetMessagePool *) nil_chk([ctx outNetMessagePool])) addWithNetI2pRouterOutNetMessage:outMsg];
    }
    @catch (JavaLangRuntimeException *re) {
      [log errorWithNSString:@"failed sending build message" withJavaLangThrowable:re];
      return false;
    }
  }
  return true;
}

NetI2pDataI2npTunnelBuildMessage *NetI2pRouterTunnelPoolBuildRequestor_createTunnelBuildMessageWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, id<NetI2pRouterTunnelInfo> pairedTunnel, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  NetI2pRouterTunnelPoolBuildRequestor_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolBuildRequestor_class_()];
  jlong replyTunnel = 0;
  NetI2pDataHash *replyRouter;
  jboolean useVariable = [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] <= NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS;
  if ([cfg isInbound]) {
    replyRouter = [ctx routerHash];
  }
  else {
    replyTunnel = [((NetI2pDataTunnelId *) nil_chk([((id<NetI2pRouterTunnelInfo>) nil_chk(pairedTunnel)) getReceiveTunnelIdWithInt:0])) getTunnelId];
    replyRouter = [pairedTunnel getPeerWithInt:0];
  }
  NetI2pDataI2npTunnelBuildMessage *msg;
  id<JavaUtilList> order;
  if (useVariable) {
    if ([cfg getLength] <= NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS) {
      msg = create_NetI2pDataI2npVariableTunnelBuildMessage_initWithNetI2pI2PAppContext_withInt_(ctx, NetI2pRouterTunnelPoolBuildRequestor_SHORT_RECORDS);
      order = create_JavaUtilArrayList_initWithJavaUtilCollection_(NetI2pRouterTunnelPoolBuildRequestor_SHORT_ORDER);
    }
    else {
      msg = create_NetI2pDataI2npVariableTunnelBuildMessage_initWithNetI2pI2PAppContext_withInt_(ctx, NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_RECORDS);
      order = create_JavaUtilArrayList_initWithJavaUtilCollection_(NetI2pRouterTunnelPoolBuildRequestor_MEDIUM_ORDER);
    }
  }
  else {
    msg = create_NetI2pDataI2npTunnelBuildMessage_initWithNetI2pI2PAppContext_(ctx);
    order = create_JavaUtilArrayList_initWithJavaUtilCollection_(NetI2pRouterTunnelPoolBuildRequestor_ORDER);
  }
  JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(order, [ctx random]);
  [cfg setReplyOrderWithJavaUtilList:order];
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$@$@", @"Build order: ", order, @" for ", cfg)];
  for (jint i = 0; i < [msg getRecordCount]; i++) {
    jint hop = [((JavaLangInteger *) nil_chk([order getWithInt:i])) intValue];
    NetI2pDataPublicKey *key = nil;
    if (NetI2pRouterTunnelBuildMessageGenerator_isBlankWithNetI2pRouterTunnelTunnelCreatorConfig_withInt_(cfg, hop)) {
    }
    else {
      NetI2pDataHash *peer = [cfg getPeerWithInt:hop];
      NetI2pDataRouterRouterInfo *peerInfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([ctx netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
      if (peerInfo == nil) {
        if ([log shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$ICI$@$@", @"Peer selected for hop ", i, '/', hop, @" was not found locally: ", peer, @" for ", cfg)];
        return nil;
      }
      else {
        key = [((NetI2pDataRouterRouterIdentity *) nil_chk([peerInfo getIdentity])) getPublicKey];
      }
    }
    if ([log shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("J$ICI$@", [cfg getReplyMessageId], @": record ", i, '/', hop, @" has key ", key)];
    NetI2pRouterTunnelBuildMessageGenerator_createRecordWithInt_withInt_withNetI2pDataI2npTunnelBuildMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pDataHash_withLong_withNetI2pI2PAppContext_withNetI2pDataPublicKey_(i, hop, msg, cfg, replyRouter, replyTunnel, ctx, key);
  }
  NetI2pRouterTunnelBuildMessageGenerator_layeredEncryptWithNetI2pI2PAppContext_withNetI2pDataI2npTunnelBuildMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withJavaUtilList_(ctx, msg, cfg, order);
  return msg;
}

void NetI2pRouterTunnelPoolBuildRequestor_buildZeroHopWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  NetI2pRouterTunnelPoolBuildRequestor_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolBuildRequestor_class_()];
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$@", @"Build zero hop tunnel ", cfg)];
  [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(exec)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg withNetI2pRouterTunnelPoolTunnelPool:pool];
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) isInbound]) [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([ctx tunnelDispatcher])) joinInboundWithNetI2pRouterTunnelTunnelCreatorConfig:cfg];
  else [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([ctx tunnelDispatcher])) joinOutboundWithNetI2pRouterTunnelTunnelCreatorConfig:cfg];
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) addTunnelWithNetI2pRouterTunnelInfo:cfg];
  [exec buildSuccessfulWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
  NetI2pRouterTunnelPoolExpireJob *expireJob = create_NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(ctx, cfg, pool);
  [cfg setExpireJobWithNetI2pRouterJob:expireJob];
  [((NetI2pRouterJobQueue *) nil_chk([ctx jobQueue])) addJobWithNetI2pRouterJob:expireJob];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildRequestor)

@implementation NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
          withNetI2pRouterTunnelPoolBuildExecutor:(NetI2pRouterTunnelPoolBuildExecutor *)exec {
  NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(self, ctx, pool, cfg, exec);
  return self;
}

- (NSString *)getName {
  return @"Timeout contacting first peer for OB tunnel";
}

- (void)runJob {
  [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(_exec_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:_cfg_ withNetI2pRouterTunnelPoolTunnelPool:_pool_];
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) tunnelTimedOutWithNetI2pDataHash:[((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(_cfg_)) getPeerWithInt:1]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"tunnel.buildFailFirstHop" withLong:1 withLong:0];
}

- (void)dealloc {
  RELEASE_(_pool_);
  RELEASE_(_cfg_);
  RELEASE_(_exec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPool:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelPoolBuildExecutor:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pool_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cfg_", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_exec_", "LNetI2pRouterTunnelPoolBuildExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPool;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pRouterTunnelPoolBuildExecutor;", "LNetI2pRouterTunnelPoolBuildRequestor;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob = { "TunnelBuildFirstHopFailJob", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob;
}

@end

void NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_cfg_, cfg);
  JreStrongAssign(&self->_exec_, exec);
  JreStrongAssign(&self->_pool_, pool);
}

NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *new_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_, ctx, pool, cfg, exec)
}

NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob *create_NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolBuildExecutor *exec) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_, ctx, pool, cfg, exec)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildRequestor_TunnelBuildFirstHopFailJob)
