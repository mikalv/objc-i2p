//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/ExpireJob.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/ExpireJob.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterTunnelPoolExpireJob () {
 @public
  NetI2pRouterTunnelPoolTunnelPool *_pool_;
  NetI2pRouterTunnelTunnelCreatorConfig *_cfg_;
  JavaUtilConcurrentAtomicAtomicBoolean *_leaseUpdated_;
  jlong _dropAfter_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolExpireJob, _pool_, NetI2pRouterTunnelPoolTunnelPool *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolExpireJob, _cfg_, NetI2pRouterTunnelTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolExpireJob, _leaseUpdated_, JavaUtilConcurrentAtomicAtomicBoolean *)

inline jlong NetI2pRouterTunnelPoolExpireJob_get_OB_EARLY_EXPIRE(void);
#define NetI2pRouterTunnelPoolExpireJob_OB_EARLY_EXPIRE 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolExpireJob, OB_EARLY_EXPIRE, jlong)

inline jlong NetI2pRouterTunnelPoolExpireJob_get_IB_EARLY_EXPIRE(void);
#define NetI2pRouterTunnelPoolExpireJob_IB_EARLY_EXPIRE 37500LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolExpireJob, IB_EARLY_EXPIRE, jlong)

@implementation NetI2pRouterTunnelPoolExpireJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool {
  NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(self, ctx, cfg, pool);
  return self;
}

- (NSString *)getName {
  return @"Expire our tunnel";
}

- (void)runJob {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_leaseUpdated_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_pool_)) removeTunnelWithNetI2pRouterTunnelInfo:_cfg_];
    [_pool_ refreshLeaseSet];
    jlong timeToDrop = _dropAfter_ - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now];
    [self requeueWithLong:timeToDrop];
  }
  else {
    [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) removeWithNetI2pRouterTunnelTunnelCreatorConfig:_cfg_];
  }
}

- (void)dealloc {
  RELEASE_(_pool_);
  RELEASE_(_cfg_);
  RELEASE_(_leaseUpdated_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:withNetI2pRouterTunnelPoolTunnelPool:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pool_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cfg_", "LNetI2pRouterTunnelTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_leaseUpdated_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dropAfter_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "OB_EARLY_EXPIRE", "J", .constantValue.asLong = NetI2pRouterTunnelPoolExpireJob_OB_EARLY_EXPIRE, 0x1a, -1, -1, -1, -1 },
    { "IB_EARLY_EXPIRE", "J", .constantValue.asLong = NetI2pRouterTunnelPoolExpireJob_IB_EARLY_EXPIRE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;LNetI2pRouterTunnelPoolTunnelPool;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolExpireJob = { "ExpireJob", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 3, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolExpireJob;
}

@end

void NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolExpireJob *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssignAndConsume(&self->_leaseUpdated_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  JreStrongAssign(&self->_pool_, pool);
  JreStrongAssign(&self->_cfg_, cfg);
  jlong expire = [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(cfg)) getExpiration];
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->_pool_)) getSettings])) isInbound]) {
    self->_dropAfter_ = expire + (2 * NetI2pRouterRouter_CLOCK_FUDGE_FACTOR);
    expire -= NetI2pRouterTunnelPoolExpireJob_IB_EARLY_EXPIRE + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pRouterTunnelPoolExpireJob_IB_EARLY_EXPIRE];
  }
  else {
    self->_dropAfter_ = expire + NetI2pRouterRouter_CLOCK_FUDGE_FACTOR;
    expire -= NetI2pRouterTunnelPoolExpireJob_OB_EARLY_EXPIRE + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) random])) nextLongWithLong:NetI2pRouterTunnelPoolExpireJob_OB_EARLY_EXPIRE];
  }
  [cfg setExpirationWithLong:expire];
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:expire];
}

NetI2pRouterTunnelPoolExpireJob *new_NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolExpireJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_, ctx, cfg, pool)
}

NetI2pRouterTunnelPoolExpireJob *create_NetI2pRouterTunnelPoolExpireJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolExpireJob, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_, ctx, cfg, pool)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolExpireJob)
