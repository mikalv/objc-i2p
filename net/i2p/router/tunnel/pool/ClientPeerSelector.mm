//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/ClientPeerSelector.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/tunnel/pool/ClientPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/util/Log.h"

@implementation NetI2pRouterTunnelPoolClientPeerSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTunnelPoolClientPeerSelector_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (id<JavaUtilList>)selectPeersWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  jint length = [self getLengthWithNetI2pRouterTunnelPoolSettings:settings];
  if (length < 0) return nil;
  if ((length == 0) && ([((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) getLength] + [settings getLengthVariance] > 0)) return nil;
  id<JavaUtilList> rv;
  jboolean isInbound = [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) isInbound];
  if (length > 0) {
    jboolean v6Only = [self isIPv6Only];
    jboolean ntcpDisabled = [self isNTCPDisabled];
    jboolean ssuDisabled = [self isSSUDisabled];
    jboolean checkClosestHop = v6Only || ntcpDisabled || ssuDisabled;
    jboolean hidden = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx_)) router])) isHidden] || [((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([ctx_ router])) getRouterInfo])) getAddressCount] <= 0;
    jboolean hiddenInbound = hidden && isInbound;
    jboolean hiddenOutbound = hidden && !isInbound;
    if ([self shouldSelectExplicitWithNetI2pRouterTunnelPoolSettings:settings]) return [self selectExplicitWithNetI2pRouterTunnelPoolSettings:settings withInt:length];
    id<JavaUtilSet> exclude = [self getExcludeWithBoolean:isInbound withBoolean:false];
    id<JavaUtilSet> matches = create_JavaUtilHashSet_initWithInt_(length);
    if (length == 1) {
      if (checkClosestHop) {
        id<JavaUtilSet> moreExclude = [self getClosestHopExcludeWithBoolean:isInbound];
        if (moreExclude != nil) [((id<JavaUtilSet>) nil_chk(exclude)) addAllWithJavaUtilCollection:moreExclude];
      }
      if (hiddenInbound) {
        id<JavaUtilSet> SANFPExclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(exclude);
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectActiveNotFailingPeersWithInt:1 withJavaUtilSet:SANFPExclude withJavaUtilSet:matches];
      }
      if ([matches isEmpty]) {
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:length withJavaUtilSet:exclude withJavaUtilSet:matches withInt:0];
      }
      [matches removeWithId:[ctx_ routerHash]];
      rv = create_JavaUtilArrayList_initWithJavaUtilCollection_(matches);
    }
    else {
      rv = create_JavaUtilArrayList_initWithInt_(length + 1);
      NetI2pDataHash *randomKey = [settings getRandomKey];
      id<JavaUtilSet> lastHopExclude;
      if (isInbound) {
        if (checkClosestHop) {
          id<JavaUtilSet> moreExclude = [self getClosestHopExcludeWithBoolean:false];
          if (moreExclude != nil) {
            [moreExclude addAllWithJavaUtilCollection:exclude];
            lastHopExclude = moreExclude;
          }
          else {
            lastHopExclude = exclude;
          }
        }
        else {
          lastHopExclude = exclude;
        }
      }
      else {
        lastHopExclude = exclude;
      }
      if (hiddenInbound) {
        if ([((NetI2pUtilLog *) nil_chk(log_)) shouldInfo]) [log_ infoWithNSString:JreStrcat("$I", @"CPS SANFP closest IB exclude ", [((id<JavaUtilSet>) nil_chk(lastHopExclude)) size])];
        id<JavaUtilSet> SANFPExclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(lastHopExclude);
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectActiveNotFailingPeersWithInt:1 withJavaUtilSet:SANFPExclude withJavaUtilSet:matches];
        if ([matches isEmpty]) {
          if ([log_ shouldInfo]) [log_ infoWithNSString:JreStrcat("$I", @"CPS SFP closest IB exclude ", [((id<JavaUtilSet>) nil_chk(lastHopExclude)) size])];
          [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:lastHopExclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:length == 2 ? JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1) : JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0)];
        }
      }
      else if (hiddenOutbound) {
        id<NetI2pRouterTunnelManagerFacade> tmf = [ctx_ tunnelManager];
        NetI2pRouterTunnelPoolTunnelPool *tp = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(tmf)) getInboundPoolWithNetI2pDataHash:[settings getDestination]];
        jboolean pickFurthest;
        if (tp != nil) {
          pickFurthest = true;
          NetI2pRouterTunnelPoolSettings *tps = [tp getSettings];
          jint len = [((NetI2pRouterTunnelPoolSettings *) nil_chk(tps)) getLength];
          if (len <= 0 || [tps getLengthOverride] == 0 || len + [tps getLengthVariance] <= 0) {
          }
          else {
            id<JavaUtilList> tunnels = [tp listTunnels];
            if (![((id<JavaUtilList>) nil_chk(tunnels)) isEmpty]) {
              for (id<NetI2pRouterTunnelInfo> __strong ti in nil_chk([tp listTunnels])) {
                if ([((id<NetI2pRouterTunnelInfo>) nil_chk(ti)) getLength] > 1) {
                  pickFurthest = false;
                  break;
                }
              }
            }
            else {
              tp = [tmf getInboundExploratoryPool];
              tps = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tp)) getSettings];
              len = [((NetI2pRouterTunnelPoolSettings *) nil_chk(tps)) getLength];
              if (len <= 0 || [tps getLengthOverride] == 0 || len + [tps getLengthVariance] <= 0) {
              }
              else {
                tunnels = [tp listTunnels];
                if (![((id<JavaUtilList>) nil_chk(tunnels)) isEmpty]) {
                  for (id<NetI2pRouterTunnelInfo> __strong ti in nil_chk([tp listTunnels])) {
                    if ([((id<NetI2pRouterTunnelInfo>) nil_chk(ti)) getLength] > 1) {
                      pickFurthest = false;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        else {
          pickFurthest = false;
        }
        if (pickFurthest) {
          if ([((NetI2pUtilLog *) nil_chk(log_)) shouldInfo]) [log_ infoWithNSString:JreStrcat("$I", @"CPS SANFP OBEP exclude ", [((id<JavaUtilSet>) nil_chk(lastHopExclude)) size])];
          id<JavaUtilSet> SANFPExclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(lastHopExclude);
          [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectActiveNotFailingPeersWithInt:1 withJavaUtilSet:SANFPExclude withJavaUtilSet:matches];
          if ([matches isEmpty]) {
            if ([log_ shouldInfo]) [log_ infoWithNSString:JreStrcat("$I", @"CPS SFP OBEP exclude ", [((id<JavaUtilSet>) nil_chk(lastHopExclude)) size])];
            [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:lastHopExclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:length == 2 ? JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1) : JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0)];
          }
        }
        else {
          [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:lastHopExclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:length == 2 ? JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1) : JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0)];
        }
      }
      else {
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:lastHopExclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:length == 2 ? JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1) : JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0)];
      }
      [matches removeWithId:[ctx_ routerHash]];
      [((id<JavaUtilSet>) nil_chk(exclude)) addAllWithJavaUtilCollection:matches];
      [rv addAllWithJavaUtilCollection:matches];
      [matches clear];
      if (length > 2) {
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:length - 2 withJavaUtilSet:exclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3)];
        [matches removeWithId:[ctx_ routerHash]];
        if ([matches size] > 1) {
          id<JavaUtilList> ordered = create_JavaUtilArrayList_initWithJavaUtilCollection_(matches);
          [self orderPeersWithJavaUtilList:ordered withNetI2pDataHash:randomKey];
          [rv addAllWithJavaUtilCollection:ordered];
        }
        else {
          [rv addAllWithJavaUtilCollection:matches];
        }
        [exclude addAllWithJavaUtilCollection:matches];
        [matches clear];
      }
      if (!isInbound) {
        if (checkClosestHop) {
          id<JavaUtilSet> moreExclude = [self getClosestHopExcludeWithBoolean:true];
          if (moreExclude != nil) [exclude addAllWithJavaUtilCollection:moreExclude];
        }
      }
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:exclude withJavaUtilSet:matches withNetI2pDataHash:randomKey withNetI2pRouterPeermanagerProfileOrganizer_Slice:length == 2 ? JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3) : JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_1)];
      [matches removeWithId:[ctx_ routerHash]];
      [rv addAllWithJavaUtilCollection:matches];
    }
  }
  else {
    rv = create_JavaUtilArrayList_initWithInt_(1);
  }
  if (isInbound) [rv addWithInt:0 withId:[((NetI2pRouterRouterContext *) nil_chk(ctx_)) routerHash]];
  else [rv addWithId:[((NetI2pRouterRouterContext *) nil_chk(ctx_)) routerHash]];
  if ([rv size] > 1) {
    if (![self checkTunnelWithBoolean:isInbound withJavaUtilList:rv]) rv = nil;
  }
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectPeersWithNetI2pRouterTunnelPoolSettings:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectPeers", "LNetI2pRouterTunnelPoolSettings;", "(Lnet/i2p/router/TunnelPoolSettings;)Ljava/util/List<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolClientPeerSelector = { "ClientPeerSelector", "net.i2p.router.tunnel.pool", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolClientPeerSelector;
}

@end

void NetI2pRouterTunnelPoolClientPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolClientPeerSelector *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initWithNetI2pRouterRouterContext_(self, context);
}

NetI2pRouterTunnelPoolClientPeerSelector *new_NetI2pRouterTunnelPoolClientPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolClientPeerSelector, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTunnelPoolClientPeerSelector *create_NetI2pRouterTunnelPoolClientPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolClientPeerSelector, initWithNetI2pRouterRouterContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolClientPeerSelector)
