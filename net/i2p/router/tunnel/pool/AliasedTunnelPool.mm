//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/AliasedTunnelPool.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/tunnel/pool/AliasedTunnelPool.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterTunnelPoolAliasedTunnelPool () {
 @public
  NetI2pRouterTunnelPoolTunnelPool *_aliasOf_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolAliasedTunnelPool, _aliasOf_, NetI2pRouterTunnelPoolTunnelPool *)

@implementation NetI2pRouterTunnelPoolAliasedTunnelPool

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
      withNetI2pRouterTunnelPoolTunnelPoolManager:(NetI2pRouterTunnelPoolTunnelPoolManager *)mgr
               withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)aliasOf {
  NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(self, ctx, mgr, settings, aliasOf);
  return self;
}

- (void)startup {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$Z", [self description], @": Startup() called, was already alive? ", JreLoadVolatileBoolean(&_alive_)) withJavaLangThrowable:create_JavaLangException_init()];
    JreAssignVolatileBoolean(&_alive_, true);
    [super refreshLeaseSet];
  }
}

- (void)shutdown {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", [self description], @": Shutdown called")];
    JreAssignVolatileBoolean(&_alive_, false);
  }
}

- (id<NetI2pRouterTunnelInfo>)selectTunnel {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) selectTunnel];
}

- (id<NetI2pRouterTunnelInfo>)selectTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) selectTunnelWithNetI2pDataHash:closestTo];
}

- (id<NetI2pRouterTunnelInfo>)getTunnelWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)gatewayId {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) getTunnelWithNetI2pDataTunnelId:gatewayId];
}

- (id<JavaUtilList>)listTunnels {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) listTunnels];
}

- (jboolean)needFallback {
  return false;
}

- (id<JavaUtilList>)listPending {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) listPending];
}

- (jboolean)isAlive {
  return JreLoadVolatileBoolean(&_alive_) && [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) isAlive];
}

- (jint)size {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) size];
}

- (void)addTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) addTunnelWithNetI2pRouterTunnelInfo:info];
}

- (void)removeTunnelWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)info {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) removeTunnelWithNetI2pRouterTunnelInfo:info];
}

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) tunnelFailedWithNetI2pRouterTunnelInfo:cfg];
}

- (void)tunnelFailedWithNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)cfg
                            withNetI2pDataHash:(NetI2pDataHash *)blamePeer {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) tunnelFailedWithNetI2pRouterTunnelInfo:cfg withNetI2pDataHash:blamePeer];
}

- (void)refreshLeaseSet {
}

- (jboolean)buildFallback {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) buildFallback];
}

- (NetI2pDataLeaseSet *)locked_buildNewLeaseSet {
  NetI2pDataLeaseSet *ls = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupLeaseSetLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) getSettings])) getDestination]];
  if (ls == nil) return nil;
  NetI2pDataLeaseSet *rv = create_NetI2pDataLeaseSet_init();
  for (jint i = 0; i < [ls getLeaseCount]; i++) {
    NetI2pDataLease *old = [ls getLeaseWithInt:i];
    NetI2pDataLease *lease = create_NetI2pDataLease_init();
    [lease setEndDateWithJavaUtilDate:[((NetI2pDataLease *) nil_chk(old)) getEndDate]];
    [lease setTunnelIdWithNetI2pDataTunnelId:[old getTunnelId]];
    [lease setGatewayWithNetI2pDataHash:[old getGateway]];
    [rv addLeaseWithNetI2pDataLease:lease];
  }
  return rv;
}

- (jlong)getLifetimeProcessed {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_aliasOf_)) getLifetimeProcessed];
}

- (jint)countHowManyToBuild {
  return 0;
}

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)configureNewTunnel {
  return nil;
}

- (void)buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
}

- (NSString *)description {
  return JreStrcat("$$", @"Aliased ", [super description]);
}

- (void)dealloc {
  RELEASE_(_aliasOf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPoolManager:withNetI2pRouterTunnelPoolSettings:withNetI2pRouterTunnelPoolTunnelPool:);
  methods[1].selector = @selector(startup);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(selectTunnel);
  methods[4].selector = @selector(selectTunnelWithNetI2pDataHash:);
  methods[5].selector = @selector(getTunnelWithNetI2pDataTunnelId:);
  methods[6].selector = @selector(listTunnels);
  methods[7].selector = @selector(needFallback);
  methods[8].selector = @selector(listPending);
  methods[9].selector = @selector(isAlive);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(addTunnelWithNetI2pRouterTunnelInfo:);
  methods[12].selector = @selector(removeTunnelWithNetI2pRouterTunnelInfo:);
  methods[13].selector = @selector(tunnelFailedWithNetI2pRouterTunnelInfo:);
  methods[14].selector = @selector(tunnelFailedWithNetI2pRouterTunnelInfo:withNetI2pDataHash:);
  methods[15].selector = @selector(refreshLeaseSet);
  methods[16].selector = @selector(buildFallback);
  methods[17].selector = @selector(locked_buildNewLeaseSet);
  methods[18].selector = @selector(getLifetimeProcessed);
  methods[19].selector = @selector(countHowManyToBuild);
  methods[20].selector = @selector(configureNewTunnel);
  methods[21].selector = @selector(buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[22].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_aliasOf_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPoolManager;LNetI2pRouterTunnelPoolSettings;LNetI2pRouterTunnelPoolTunnelPool;", "selectTunnel", "LNetI2pDataHash;", "getTunnel", "LNetI2pDataTunnelId;", "()Ljava/util/List<Lnet/i2p/router/TunnelInfo;>;", "()Ljava/util/List<Lnet/i2p/router/tunnel/pool/PooledTunnelCreatorConfig;>;", "addTunnel", "LNetI2pRouterTunnelInfo;", "removeTunnel", "tunnelFailed", "LNetI2pRouterTunnelInfo;LNetI2pDataHash;", "buildComplete", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolAliasedTunnelPool = { "AliasedTunnelPool", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolAliasedTunnelPool;
}

@end

void NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolAliasedTunnelPool *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPool *aliasOf) {
  NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(self, ctx, mgr, settings, nil);
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) isExploratory]) @throw create_JavaLangIllegalArgumentException_init();
  if ([settings getAliasOf] == nil) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_aliasOf_, aliasOf);
}

NetI2pRouterTunnelPoolAliasedTunnelPool *new_NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPool *aliasOf) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolAliasedTunnelPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_, ctx, mgr, settings, aliasOf)
}

NetI2pRouterTunnelPoolAliasedTunnelPool *create_NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr, NetI2pRouterTunnelPoolSettings *settings, NetI2pRouterTunnelPoolTunnelPool *aliasOf) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolAliasedTunnelPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_, ctx, mgr, settings, aliasOf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolAliasedTunnelPool)
