//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/BuildExecutor.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/Serializable.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/tunnel/pool/BuildExecutor.h"
#include "net/i2p/router/tunnel/pool/BuildRequestor.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterTunnelPoolBuildExecutor () {
 @public
  JavaUtilArrayList *_recentBuildIds_;
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelPoolTunnelPoolManager *_manager_;
  id _currentlyBuilding_;
  JavaUtilConcurrentConcurrentHashMap *_currentlyBuildingMap_;
  JavaUtilConcurrentConcurrentHashMap *_recentlyBuildingMap_;
  volatile_jboolean _isRunning_;
  jboolean _repoll_;
}

- (jint)allowed;

- (void)run2;

- (jint)buildZeroHopTunnelsWithJavaUtilList:(id<JavaUtilList>)wanted
                                    withInt:(jint)allowed;

- (void)didNotReplyWithLong:(jlong)tunnel
         withNetI2pDataHash:(NetI2pDataHash *)peer;

- (jboolean)addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _recentBuildIds_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _manager_, NetI2pRouterTunnelPoolTunnelPoolManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _currentlyBuilding_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _currentlyBuildingMap_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolBuildExecutor, _recentlyBuildingMap_, JavaUtilConcurrentConcurrentHashMap *)

inline jint NetI2pRouterTunnelPoolBuildExecutor_get_MAX_CONCURRENT_BUILDS(void);
#define NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS 13
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildExecutor, MAX_CONCURRENT_BUILDS, jint)

inline jlong NetI2pRouterTunnelPoolBuildExecutor_get_GRACE_PERIOD(void);
#define NetI2pRouterTunnelPoolBuildExecutor_GRACE_PERIOD 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildExecutor, GRACE_PERIOD, jlong)

inline jint NetI2pRouterTunnelPoolBuildExecutor_get_LOOP_TIME(void);
#define NetI2pRouterTunnelPoolBuildExecutor_LOOP_TIME 1000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolBuildExecutor, LOOP_TIME, jint)

__attribute__((unused)) static jint NetI2pRouterTunnelPoolBuildExecutor_allowed(NetI2pRouterTunnelPoolBuildExecutor *self);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildExecutor_run2(NetI2pRouterTunnelPoolBuildExecutor *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolBuildExecutor_buildZeroHopTunnelsWithJavaUtilList_withInt_(NetI2pRouterTunnelPoolBuildExecutor *self, id<JavaUtilList> wanted, jint allowed);

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildExecutor_didNotReplyWithLong_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildExecutor *self, jlong tunnel, NetI2pDataHash *peer);

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolBuildExecutor_addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(NetI2pRouterTunnelPoolBuildExecutor *self, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg);

@interface NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator : NSObject < JavaUtilComparator, JavaIoSerializable > {
 @public
  jboolean _preferEmpty_;
}

- (instancetype)initWithBoolean:(jboolean)preferEmptyPools;

- (jint)compareWithId:(NetI2pRouterTunnelPoolTunnelPool *)tpl
               withId:(NetI2pRouterTunnelPoolTunnelPool *)tpr;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator)

__attribute__((unused)) static void NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *self, jboolean preferEmptyPools);

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *new_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(jboolean preferEmptyPools) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *create_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(jboolean preferEmptyPools);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator)

@implementation NetI2pRouterTunnelPoolBuildExecutor

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
      withNetI2pRouterTunnelPoolTunnelPoolManager:(NetI2pRouterTunnelPoolTunnelPoolManager *)mgr {
  NetI2pRouterTunnelPoolBuildExecutor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_(self, ctx, mgr);
  return self;
}

- (void)restart {
  @synchronized(self) {
    @synchronized(_recentBuildIds_) {
      [((JavaUtilArrayList *) nil_chk(_recentBuildIds_)) clear];
    }
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_currentlyBuildingMap_)) clear];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_recentlyBuildingMap_)) clear];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isRunning_, false);
    [self restart];
  }
}

- (jint)allowed {
  return NetI2pRouterTunnelPoolBuildExecutor_allowed(self);
}

- (void)run {
  JreAssignVolatileBoolean(&_isRunning_, true);
  @try {
    NetI2pRouterTunnelPoolBuildExecutor_run2(self);
  }
  @catch (JavaLangNoSuchMethodError *nsme) {
    NSString *s = JreStrcat("$$$", @"Fatal error:\nJava 8 compiler used with JRE version ", JavaLangSystem_getPropertyWithNSString_(@"java.version"), @" and no bootclasspath specified.\nUpdate to Java 8 or contact packager.\nStop I2P now, it will not build tunnels.");
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:s withJavaLangThrowable:nsme];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
    @throw nsme;
  }
  @finally {
    JreAssignVolatileBoolean(&_isRunning_, false);
  }
}

- (void)run2 {
  NetI2pRouterTunnelPoolBuildExecutor_run2(self);
}

- (jint)buildZeroHopTunnelsWithJavaUtilList:(id<JavaUtilList>)wanted
                                    withInt:(jint)allowed {
  return NetI2pRouterTunnelPoolBuildExecutor_buildZeroHopTunnelsWithJavaUtilList_withInt_(self, wanted, allowed);
}

- (jboolean)isRunning {
  return JreLoadVolatileBoolean(&_isRunning_);
}

- (void)buildTunnelWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
    withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  jlong beforeBuild = JavaLangSystem_currentTimeMillis();
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] > 1) {
    do {
      [cfg setReplyMessageIdWithLong:[((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE]];
    }
    while (NetI2pRouterTunnelPoolBuildExecutor_addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(self, cfg));
  }
  jboolean ok = NetI2pRouterTunnelPoolBuildRequestor_requestWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolBuildExecutor_(_context_, pool, cfg, self);
  if (!ok) return;
  if ([cfg getLength] > 1) {
    jlong buildTime = JavaLangSystem_currentTimeMillis() - beforeBuild;
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.buildRequestTime" withLong:buildTime withLong:0];
  }
  jlong id_ = [cfg getReplyMessageId];
  if (id_ > 0) {
    @synchronized(_recentBuildIds_) {
      if ([((JavaUtilArrayList *) nil_chk(_recentBuildIds_)) size] > 98) {
        for (jint i = 0; i < 32; i++) [_recentBuildIds_ removeWithInt:0];
      }
      [_recentBuildIds_ addWithId:JavaLangLong_valueOfWithLong_(id_)];
    }
  }
}

- (void)buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg
                                    withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Build complete for ", cfg) withJavaLangThrowable:create_JavaLangException_init()];
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] > 1) [self removeFromBuildingWithLong:[cfg getReplyMessageId]];
  jlong buildTime = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] + 10 * 60 * 1000 - [cfg getExpiration];
  if (buildTime > 250) {
    @synchronized(_currentlyBuilding_) {
      [nil_chk(_currentlyBuilding_) java_notifyAll];
    }
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J$@", @"Build complete really fast (", buildTime, @" ms) for tunnel: ", cfg)];
  }
  jlong expireBefore = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] + 10 * 60 * 1000 - NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT;
  if ([cfg getExpiration] <= expireBefore) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Build complete for expired tunnel: ", cfg)];
  }
}

- (jboolean)wasRecentlyBuildingWithLong:(jlong)replyId {
  @synchronized(_recentBuildIds_) {
    return [((JavaUtilArrayList *) nil_chk(_recentBuildIds_)) containsWithId:JavaLangLong_valueOfWithLong_(replyId)];
  }
}

- (void)buildSuccessfulWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  [((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(_manager_)) buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
}

- (void)repoll {
  @synchronized(_currentlyBuilding_) {
    _repoll_ = true;
    [nil_chk(_currentlyBuilding_) java_notifyAll];
  }
}

- (void)didNotReplyWithLong:(jlong)tunnel
         withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTunnelPoolBuildExecutor_didNotReplyWithLong_withNetI2pDataHash_(self, tunnel, peer);
}

- (jboolean)addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  return NetI2pRouterTunnelPoolBuildExecutor_addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(self, cfg);
}

- (NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)removeFromBuildingWithLong:(jlong)id_ {
  JavaLangLong *key = JavaLangLong_valueOfWithLong_(id_);
  NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *rv = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_currentlyBuildingMap_)) removeWithId:key];
  if (rv != nil) return rv;
  rv = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_recentlyBuildingMap_)) removeWithId:key];
  if (rv != nil) {
    jlong requestedOn = [rv getExpiration] - 10 * 60 * 1000;
    jlong rtt = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - requestedOn;
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"tunnel.buildReplySlow" withLong:rtt withLong:0];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$J$@", @"Got reply late (rtt = ", rtt, @") for: ", rv)];
  }
  return rv;
}

- (void)dealloc {
  RELEASE_(_recentBuildIds_);
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_manager_);
  RELEASE_(_currentlyBuilding_);
  RELEASE_(_currentlyBuildingMap_);
  RELEASE_(_recentlyBuildingMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", 0x0, 15, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPoolManager:);
  methods[1].selector = @selector(restart);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(allowed);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(run2);
  methods[6].selector = @selector(buildZeroHopTunnelsWithJavaUtilList:withInt:);
  methods[7].selector = @selector(isRunning);
  methods[8].selector = @selector(buildTunnelWithNetI2pRouterTunnelPoolTunnelPool:withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[9].selector = @selector(buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:withNetI2pRouterTunnelPoolTunnelPool:);
  methods[10].selector = @selector(wasRecentlyBuildingWithLong:);
  methods[11].selector = @selector(buildSuccessfulWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[12].selector = @selector(repoll);
  methods[13].selector = @selector(didNotReplyWithLong:withNetI2pDataHash:);
  methods[14].selector = @selector(addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[15].selector = @selector(removeFromBuildingWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_recentBuildIds_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterTunnelPoolTunnelPoolManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentlyBuilding_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentlyBuildingMap_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_recentlyBuildingMap_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_repoll_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_CONCURRENT_BUILDS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS, 0x1a, -1, -1, -1, -1 },
    { "GRACE_PERIOD", "J", .constantValue.asLong = NetI2pRouterTunnelPoolBuildExecutor_GRACE_PERIOD, 0x1a, -1, -1, -1, -1 },
    { "LOOP_TIME", "I", .constantValue.asInt = NetI2pRouterTunnelPoolBuildExecutor_LOOP_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPoolManager;", "buildZeroHopTunnels", "LJavaUtilList;I", "(Ljava/util/List<Lnet/i2p/router/tunnel/pool/TunnelPool;>;I)I", "buildTunnel", "LNetI2pRouterTunnelPoolTunnelPool;LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "buildComplete", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;LNetI2pRouterTunnelPoolTunnelPool;", "wasRecentlyBuilding", "J", "buildSuccessful", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "didNotReply", "JLNetI2pDataHash;", "addToBuilding", "removeFromBuilding", "Ljava/util/ArrayList<Ljava/lang/Long;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lnet/i2p/router/tunnel/pool/PooledTunnelCreatorConfig;>;", "LNetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildExecutor = { "BuildExecutor", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 16, 12, -1, 18, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolBuildExecutor;
}

@end

void NetI2pRouterTunnelPoolBuildExecutor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_(NetI2pRouterTunnelPoolBuildExecutor *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_recentBuildIds_, new_JavaUtilArrayList_initWithInt_(100));
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssign(&self->_manager_, mgr);
  JreStrongAssignAndConsume(&self->_currentlyBuilding_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_currentlyBuildingMap_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS));
  JreStrongAssignAndConsume(&self->_recentlyBuildingMap_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4 * NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"tunnel.concurrentBuilds" withNSString:@"How many builds are going at once" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 5 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.concurrentBuildsLagged" withNSString:@"How many builds are going at once when we reject further builds, due to job lag (period is lag)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 5 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildExploratoryExpire" withNSString:@"No response to our build request" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildClientExpire" withNSString:@"No response to our build request" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildExploratorySuccess" withNSString:@"Response time for success (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildClientSuccess" withNSString:@"Response time for success (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildExploratoryReject" withNSString:@"Response time for rejection (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildClientReject" withNSString:@"Response time for rejection (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 60 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"tunnel.buildRequestTime" withNSString:@"Time to build a tunnel request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.buildConfigTime" withNSString:@"Time to build a tunnel request (ms)" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.buildFailFirstHop" withNSString:@"How often we fail to build a OB tunnel because we can't contact the first hop" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"tunnel.buildReplySlow" withNSString:@"Build reply late, but not too late" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  NetI2pStatStatManager *statMgr = [self->_context_ statManager];
  NSString *bwTiers = NetI2pDataRouterRouterInfo_BW_CAPABILITY_CHARS;
  for (jint i = 0; i < [((NSString *) nil_chk(bwTiers)) java_length]; i++) {
    NSString *bwTier = NSString_java_valueOfChar_([bwTiers charAtWithInt:i]);
    [((NetI2pStatStatManager *) nil_chk(statMgr)) createRateStatWithNSString:JreStrcat("$$", @"tunnel.tierAgree", bwTier) withNSString:JreStrcat("$$", @"Agreed joins from ", bwTier) withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
    [statMgr createRateStatWithNSString:JreStrcat("$$", @"tunnel.tierReject", bwTier) withNSString:JreStrcat("$$", @"Rejected joins from ", bwTier) withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
    [statMgr createRateStatWithNSString:JreStrcat("$$", @"tunnel.tierExpire", bwTier) withNSString:JreStrcat("$$", @"Expired joins from ", bwTier) withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  }
  [((NetI2pStatStatManager *) nil_chk(statMgr)) createRateStatWithNSString:@"tunnel.tierAgreeUnknown" withNSString:@"Agreed joins from unknown" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [statMgr createRateStatWithNSString:@"tunnel.tierRejectUnknown" withNSString:@"Rejected joins from unknown" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [statMgr createRateStatWithNSString:@"tunnel.tierExpireUnknown" withNSString:@"Expired joins from unknown" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
}

NetI2pRouterTunnelPoolBuildExecutor *new_NetI2pRouterTunnelPoolBuildExecutor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildExecutor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_, ctx, mgr)
}

NetI2pRouterTunnelPoolBuildExecutor *create_NetI2pRouterTunnelPoolBuildExecutor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPoolManager *mgr) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildExecutor, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_, ctx, mgr)
}

jint NetI2pRouterTunnelPoolBuildExecutor_allowed(NetI2pRouterTunnelPoolBuildExecutor *self) {
  NetI2pRouterCommSystemFacade *csf = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) commSystem];
  if ([((NetI2pRouterCommSystemFacade *) nil_chk(csf)) getStatus] == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED)) return 0;
  if ([csf isDummy] && [((id<JavaUtilSet>) nil_chk([csf getEstablished])) size] <= 0) return 0;
  jint maxKBps = [((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([self->_context_ bandwidthLimiter])) getOutboundKBytesPerSecond];
  jint allowed = maxKBps / 6;
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"tunnel.buildRequestTime"];
  if (rs != nil) {
    NetI2pStatRate *r = [rs getRateWithLong:60 * 1000];
    jdouble avg = 0;
    if (r != nil) avg = [r getAverageValue];
    if (avg <= 0) avg = [rs getLifetimeAverageValue];
    if (avg > 1) {
      jint throttle = JreFpToInt((75 * NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS / avg));
      if (throttle < allowed) {
        allowed = throttle;
        if (allowed < NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(self->_log_)) infoWithNSString:JreStrcat("$I$I$", @"Throttling max builds to ", allowed, @" due to avg build time of ", (JreFpToInt(avg)), @" ms")];
      }
    }
  }
  if (allowed < 2) allowed = 2;
  else if (allowed > NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS) allowed = NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS;
  allowed = [self->_context_ getPropertyWithNSString:@"router.tunnelConcurrentBuilds" withInt:allowed];
  jlong expireBefore = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 10 * 60 * 1000 - NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT - NetI2pRouterTunnelPoolBuildExecutor_GRACE_PERIOD;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_recentlyBuildingMap_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [iter next];
    if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getExpiration] <= expireBefore) {
      [iter remove];
    }
  }
  id<JavaUtilList> expired = nil;
  jint concurrent = 0;
  expireBefore = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] + 10 * 60 * 1000 - NetI2pRouterTunnelPoolBuildRequestor_REQUEST_TIMEOUT;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_currentlyBuildingMap_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [iter next];
    if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getExpiration] <= expireBefore) {
      [self->_recentlyBuildingMap_ putIfAbsentWithId:JavaLangLong_valueOfWithLong_([cfg getReplyMessageId]) withId:cfg];
      [iter remove];
      if (expired == nil) expired = create_JavaUtilArrayList_init();
      [expired addWithId:cfg];
    }
  }
  concurrent = [self->_currentlyBuildingMap_ size];
  allowed -= concurrent;
  if (expired != nil) {
    for (jint i = 0; i < [expired size]; i++) {
      NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [expired getWithInt:i];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Timed out waiting for reply asking for ", cfg)];
      for (jint iPeer = 0; iPeer < [((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength]; iPeer++) {
        NetI2pDataHash *peer = [cfg getPeerWithInt:iPeer];
        if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:[self->_context_ routerHash]]) continue;
        NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([self->_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
        NSString *bwTier = @"Unknown";
        if (ri != nil) bwTier = [ri getBandwidthTier];
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:JreStrcat("$$", @"tunnel.tierExpire", bwTier) withLong:1];
        NetI2pRouterTunnelPoolBuildExecutor_didNotReplyWithLong_withNetI2pDataHash_(self, [cfg getReplyMessageId], peer);
        [((id<NetI2pRouterProfileManager>) nil_chk([self->_context_ profileManager])) tunnelTimedOutWithNetI2pDataHash:peer];
      }
      NetI2pRouterTunnelPoolTunnelPool *pool = [cfg getTunnelPool];
      if (pool != nil) [pool buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
      if ([cfg getDestination] == nil) {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildExploratoryExpire" withLong:1];
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildClientExpire" withLong:1];
      }
    }
  }
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.concurrentBuilds" withLong:concurrent withLong:0];
  jlong lag = [((NetI2pRouterJobQueue *) nil_chk([self->_context_ jobQueue])) getMaxLag];
  if ((lag > 2000) && ([((NetI2pRouterRouter *) nil_chk([self->_context_ router])) getUptime] > 5 * 60 * 1000)) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$J$", @"Too lagged [", lag, @"], don't allow building")];
    [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.concurrentBuildsLagged" withLong:concurrent withLong:lag];
    return 0;
  }
  return allowed;
}

void NetI2pRouterTunnelPoolBuildExecutor_run2(NetI2pRouterTunnelPoolBuildExecutor *self) {
  id<JavaUtilList> wanted = create_JavaUtilArrayList_initWithInt_(NetI2pRouterTunnelPoolBuildExecutor_MAX_CONCURRENT_BUILDS);
  id<JavaUtilList> pools = create_JavaUtilArrayList_initWithInt_(8);
  while (JreLoadVolatileBoolean(&self->_isRunning_) && ![((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(self->_manager_)) isShutdown]) {
    @try {
      self->_repoll_ = false;
      [((NetI2pRouterTunnelPoolTunnelPoolManager *) nil_chk(self->_manager_)) listPoolsWithJavaUtilList:pools];
      for (jint i = 0; i < [pools size]; i++) {
        NetI2pRouterTunnelPoolTunnelPool *pool = [pools getWithInt:i];
        if (![((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) isAlive]) continue;
        jint howMany = [pool countHowManyToBuild];
        for (jint j = 0; j < howMany; j++) [wanted addWithId:pool];
      }
      jint allowed = NetI2pRouterTunnelPoolBuildExecutor_allowed(self);
      allowed = NetI2pRouterTunnelPoolBuildExecutor_buildZeroHopTunnelsWithJavaUtilList_withInt_(self, wanted, allowed);
      id<NetI2pRouterTunnelManagerFacade> mgr = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) tunnelManager];
      if ((mgr == nil) || ([((id<NetI2pRouterTunnelManagerFacade>) nil_chk(mgr)) getFreeTunnelCount] <= 0) || ([mgr getOutboundTunnelCount] <= 0)) {
        if (mgr != nil) {
          if ([mgr getFreeTunnelCount] <= 0) [mgr selectInboundTunnel];
          if ([mgr getOutboundTunnelCount] <= 0) [mgr selectOutboundTunnel];
        }
        @synchronized(self->_currentlyBuilding_) {
          if (!self->_repoll_) {
            if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$I$", @"No tunnel to build with (allowed=", allowed, @", wanted=", [wanted size], @"), wait for a while")];
            @try {
              [nil_chk(self->_currentlyBuilding_) java_waitWithLong:1 * 1000 + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:1 * 1000]];
            }
            @catch (JavaLangInterruptedException *ie) {
            }
          }
        }
      }
      else {
        if ((allowed > 0) && (![wanted isEmpty])) {
          if ([wanted size] > 1) {
            JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(wanted, [self->_context_ random]);
            jboolean preferEmpty = [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:4] != 0;
            NetI2pDataDataHelper_sortWithJavaUtilList_withJavaUtilComparator_(wanted, create_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(preferEmpty));
          }
          if (allowed > 2) allowed = 2;
          for (jint i = 0; (i < allowed) && (![wanted isEmpty]); i++) {
            NetI2pRouterTunnelPoolTunnelPool *pool = [wanted removeWithInt:0];
            jlong bef = JavaLangSystem_currentTimeMillis();
            NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) configureNewTunnel];
            if (cfg != nil) {
              if ([cfg getLength] <= 1 && ![pool needFallback]) {
                if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"We don't need more fallbacks for ", pool)];
                i--;
                [pool buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
                continue;
              }
              jlong pTime = JavaLangSystem_currentTimeMillis() - bef;
              [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:@"tunnel.buildConfigTime" withLong:pTime withLong:0];
              if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$@", @"Configuring new tunnel ", i, @" for ", pool, @": ", cfg)];
              [self buildTunnelWithNetI2pRouterTunnelPoolTunnelPool:pool withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
            }
            else {
              i--;
            }
          }
        }
        @try {
          @synchronized(self->_currentlyBuilding_) {
            if (!self->_repoll_) {
              [nil_chk(self->_currentlyBuilding_) java_waitWithLong:(NetI2pRouterTunnelPoolBuildExecutor_LOOP_TIME / 2) + [((NetI2pUtilRandomSource *) nil_chk([self->_context_ random])) nextIntWithInt:NetI2pRouterTunnelPoolBuildExecutor_LOOP_TIME]];
            }
          }
        }
        @catch (JavaLangInterruptedException *ie) {
        }
      }
    }
    @catch (JavaLangRuntimeException *e) {
      [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"B0rked in the tunnel builder" withJavaLangThrowable:e];
      @try {
        JavaLangThread_sleepWithLong_(NetI2pRouterTunnelPoolBuildExecutor_LOOP_TIME);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    [wanted clear];
    [pools clear];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Done building"];
}

jint NetI2pRouterTunnelPoolBuildExecutor_buildZeroHopTunnelsWithJavaUtilList_withInt_(NetI2pRouterTunnelPoolBuildExecutor *self, id<JavaUtilList> wanted, jint allowed) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(wanted)) size]; i++) {
    NetI2pRouterTunnelPoolTunnelPool *pool = [wanted getWithInt:0];
    if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) getSettings])) getLength] == 0) {
      NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg = [pool configureNewTunnel];
      if (cfg != nil) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$@", @"Configuring short tunnel ", i, @" for ", pool, @": ", cfg)];
        [self buildTunnelWithNetI2pRouterTunnelPoolTunnelPool:pool withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:cfg];
        if ([cfg getLength] > 1) {
          allowed--;
        }
        [wanted removeWithInt:i];
        i--;
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:@"Configured a null tunnel"];
      }
    }
  }
  return allowed;
}

void NetI2pRouterTunnelPoolBuildExecutor_didNotReplyWithLong_withNetI2pDataHash_(NetI2pRouterTunnelPoolBuildExecutor *self, jlong tunnel, NetI2pDataHash *peer) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("J$$$", tunnel, @": Peer ", [((NetI2pDataHash *) nil_chk(peer)) toBase64], @" did not reply to the tunnel join request")];
}

jboolean NetI2pRouterTunnelPoolBuildExecutor_addToBuildingWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_(NetI2pRouterTunnelPoolBuildExecutor *self, NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *cfg) {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_currentlyBuildingMap_)) putIfAbsentWithId:JavaLangLong_valueOfWithLong_([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getReplyMessageId]) withId:cfg] != nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildExecutor)

@implementation NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator

- (instancetype)initWithBoolean:(jboolean)preferEmptyPools {
  NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(self, preferEmptyPools);
  return self;
}

- (jint)compareWithId:(NetI2pRouterTunnelPoolTunnelPool *)tpl
               withId:(NetI2pRouterTunnelPoolTunnelPool *)tpr {
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tpl)) getSettings])) isExploratory] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tpr)) getSettings])) isExploratory]) return -1;
  if ([((NetI2pRouterTunnelPoolSettings *) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tpr)) getSettings])) isExploratory] && ![((NetI2pRouterTunnelPoolSettings *) nil_chk([tpl getSettings])) isExploratory]) return 1;
  if (_preferEmpty_) {
    if ([tpl getTunnelCount] <= 0 && [tpr getTunnelCount] > 0) return -1;
    if ([tpr getTunnelCount] <= 0 && [tpl getTunnelCount] > 0) return 1;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_preferEmpty_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "compare", "LNetI2pRouterTunnelPoolTunnelPool;LNetI2pRouterTunnelPoolTunnelPool;", "LNetI2pRouterTunnelPoolBuildExecutor;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/router/tunnel/pool/TunnelPool;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator = { "TunnelPoolComparator", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator;
}

@end

void NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *self, jboolean preferEmptyPools) {
  NSObject_init(self);
  self->_preferEmpty_ = preferEmptyPools;
}

NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *new_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(jboolean preferEmptyPools) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator, initWithBoolean_, preferEmptyPools)
}

NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator *create_NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator_initWithBoolean_(jboolean preferEmptyPools) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator, initWithBoolean_, preferEmptyPools)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolBuildExecutor_TunnelPoolComparator)
