//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/TunnelPoolManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientTunnelSettings.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/AliasedTunnelPool.h"
#include "net/i2p/router/tunnel/pool/BuildExecutor.h"
#include "net/i2p/router/tunnel/pool/BuildHandler.h"
#include "net/i2p/router/tunnel/pool/ClientPeerSelector.h"
#include "net/i2p/router/tunnel/pool/ExploratoryPeerSelector.h"
#include "net/i2p/router/tunnel/pool/PooledTunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/pool/TestJob.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTunnelPoolTunnelPoolManager () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  id<JavaUtilMap> _clientInboundPools_;
  id<JavaUtilMap> _clientOutboundPools_;
  NetI2pRouterTunnelPoolTunnelPool *_inboundExploratory_;
  NetI2pRouterTunnelPoolTunnelPool *_outboundExploratory_;
  NetI2pRouterTunnelPoolBuildExecutor *_executor_;
  NetI2pRouterTunnelPoolBuildHandler *_handler_;
  NetI2pRouterTunnelPoolTunnelPeerSelector *_clientPeerSelector_;
  volatile_jboolean _isShutdown_;
  jint _numHandlerThreads_;
}

+ (void)setSettingsWithJavaUtilMap:(id<JavaUtilMap>)pools
                withNetI2pDataHash:(NetI2pDataHash *)client
withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings;

- (void)shutdownExploratory;

- (jint)countTunnelsPerPeerWithNetI2pUtilObjectCounter:(NetI2pUtilObjectCounter *)lc;

- (void)failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                                 withNetI2pDataHash:(NetI2pDataHash *)peer;

- (void)failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                                withNetI2pDataHash:(NetI2pDataHash *)peer;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _clientInboundPools_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _clientOutboundPools_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _inboundExploratory_, NetI2pRouterTunnelPoolTunnelPool *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _outboundExploratory_, NetI2pRouterTunnelPoolTunnelPool *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _executor_, NetI2pRouterTunnelPoolBuildExecutor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _handler_, NetI2pRouterTunnelPoolBuildHandler *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager, _clientPeerSelector_, NetI2pRouterTunnelPoolTunnelPeerSelector *)

inline jint NetI2pRouterTunnelPoolTunnelPoolManager_get_MIN_KBPS_TWO_HANDLERS(void);
#define NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_TWO_HANDLERS 512
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPoolManager, MIN_KBPS_TWO_HANDLERS, jint)

inline jint NetI2pRouterTunnelPoolTunnelPoolManager_get_MIN_KBPS_THREE_HANDLERS(void);
#define NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_THREE_HANDLERS 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPoolManager, MIN_KBPS_THREE_HANDLERS, jint)

inline jint NetI2pRouterTunnelPoolTunnelPoolManager_get_DEFAULT_MAX_PCT_TUNNELS(void);
#define NetI2pRouterTunnelPoolTunnelPoolManager_DEFAULT_MAX_PCT_TUNNELS 33
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolTunnelPoolManager, DEFAULT_MAX_PCT_TUNNELS, jint)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_setSettingsWithJavaUtilMap_withNetI2pDataHash_withNetI2pRouterTunnelPoolSettings_(id<JavaUtilMap> pools, NetI2pDataHash *client, NetI2pRouterTunnelPoolSettings *settings);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_shutdownExploratory(NetI2pRouterTunnelPoolTunnelPoolManager *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolTunnelPoolManager_countTunnelsPerPeerWithNetI2pUtilObjectCounter_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pUtilObjectCounter *lc);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pDataHash *peer);

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pDataHash *peer);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$1(void);

@interface NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pRouterTunnelPoolTunnelPool *pool_;
}

- (instancetype)initWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)p;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup, pool_, NetI2pRouterTunnelPoolTunnelPool *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *self, NetI2pRouterTunnelPoolTunnelPool *p);

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *new_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPool *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *create_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPool *p);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup)

@interface NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelPoolTunnelPool *_pool_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool, _pool_, NetI2pRouterTunnelPoolTunnelPool *)

__attribute__((unused)) static void NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool);

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *new_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *create_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool)

@implementation NetI2pRouterTunnelPoolTunnelPoolManager

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelPoolTunnelPoolManager_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnel {
  id<NetI2pRouterTunnelInfo> info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) selectTunnel];
  if (info == nil) {
    [_inboundExploratory_ buildFallback];
    info = [_inboundExploratory_ selectTunnel];
  }
  return info;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination {
  if (destination == nil) return [self selectInboundTunnel];
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:destination];
  if (pool != nil) {
    return [pool selectTunnel];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$$", @"Want the inbound tunnel for ", [destination toBase32], @" but there isn't a pool?")];
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnel {
  id<NetI2pRouterTunnelInfo> info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) selectTunnel];
  if (info == nil) {
    [_outboundExploratory_ buildFallback];
    info = [_outboundExploratory_ selectTunnel];
  }
  return info;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination {
  if (destination == nil) return [self selectOutboundTunnel];
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:destination];
  if (pool != nil) {
    return [pool selectTunnel];
  }
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundExploratoryTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  id<NetI2pRouterTunnelInfo> info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) selectTunnelWithNetI2pDataHash:closestTo];
  if (info == nil) {
    [_inboundExploratory_ buildFallback];
    info = [_inboundExploratory_ selectTunnel];
  }
  return info;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination
                                                 withNetI2pDataHash:(NetI2pDataHash *)closestTo {
  if (destination == nil) return [self selectInboundExploratoryTunnelWithNetI2pDataHash:closestTo];
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:destination];
  if (pool != nil) {
    return [pool selectTunnelWithNetI2pDataHash:closestTo];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$$", @"Want the inbound tunnel for ", [destination toBase32], @" but there isn't a pool?")];
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundExploratoryTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  id<NetI2pRouterTunnelInfo> info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) selectTunnelWithNetI2pDataHash:closestTo];
  if (info == nil) {
    [_outboundExploratory_ buildFallback];
    info = [_outboundExploratory_ selectTunnel];
  }
  return info;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination
                                                  withNetI2pDataHash:(NetI2pDataHash *)closestTo {
  if (destination == nil) return [self selectOutboundExploratoryTunnelWithNetI2pDataHash:closestTo];
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:destination];
  if (pool != nil) {
    return [pool selectTunnelWithNetI2pDataHash:closestTo];
  }
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)getTunnelInfoWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  id<NetI2pRouterTunnelInfo> info = nil;
  for (NetI2pRouterTunnelPoolTunnelPool * __strong pool in nil_chk([((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) values])) {
    info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) getTunnelWithNetI2pDataTunnelId:id_];
    if (info != nil) return info;
  }
  info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) getTunnelWithNetI2pDataTunnelId:id_];
  if (info != nil) return info;
  info = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) getTunnelWithNetI2pDataTunnelId:id_];
  if (info != nil) return info;
  return nil;
}

- (jint)getFreeTunnelCount {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) size];
}

- (jint)getOutboundTunnelCount {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) size];
}

- (jint)getInboundClientTunnelCount {
  jint count = 0;
  for (NetI2pRouterTunnelPoolTunnelPool * __strong pool in nil_chk([((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) values])) {
    count += [((id<JavaUtilList>) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) listTunnels])) size];
  }
  return count;
}

- (jint)getOutboundClientTunnelCount {
  jint count = 0;
  for (NetI2pRouterTunnelPoolTunnelPool * __strong pool in nil_chk([((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) values])) {
    count += [((id<JavaUtilList>) nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) listTunnels])) size];
  }
  return count;
}

- (jint)getOutboundClientTunnelCountWithNetI2pDataHash:(NetI2pDataHash *)destination {
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:destination];
  if (pool != nil) return [pool getTunnelCount];
  return 0;
}

- (jint)getParticipatingCount {
  return [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelDispatcher])) getParticipatingCount];
}

- (jlong)getLastParticipatingExpiration {
  return [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelDispatcher])) getLastParticipatingExpiration];
}

- (jdouble)getShareRatio {
  jint part = [self getParticipatingCount];
  if (part <= 0) return 0.0;
  id<JavaUtilList> pools = create_JavaUtilArrayList_init();
  [self listPoolsWithJavaUtilList:pools];
  jint count = 0;
  for (jint i = 0; i < [pools size]; i++) {
    NetI2pRouterTunnelPoolTunnelPool *pool = [pools getWithInt:i];
    count += [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) size] * [((NetI2pRouterTunnelPoolSettings *) nil_chk([pool getSettings])) getLength];
  }
  if (count <= 0) return 100.0;
  return JavaLangMath_minWithDouble_withDouble_(part / (jdouble) count, 100.0);
}

- (jboolean)isValidTunnelWithNetI2pDataHash:(NetI2pDataHash *)client
                 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel {
  if ([((id<NetI2pRouterTunnelInfo>) nil_chk(tunnel)) getExpiration] < [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]) return false;
  NetI2pRouterTunnelPoolTunnelPool *pool;
  if ([tunnel isInbound]) pool = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:client];
  else pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:client];
  if (pool == nil) return false;
  return [((id<JavaUtilList>) nil_chk([pool listTunnels])) containsWithId:tunnel];
}

- (NetI2pRouterTunnelPoolSettings *)getInboundSettings {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) getSettings];
}

- (NetI2pRouterTunnelPoolSettings *)getOutboundSettings {
  return [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) getSettings];
}

- (void)setInboundSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) setSettingsWithNetI2pRouterTunnelPoolSettings:settings];
}

- (void)setOutboundSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_outboundExploratory_)) setSettingsWithNetI2pRouterTunnelPoolSettings:settings];
}

- (NetI2pRouterTunnelPoolSettings *)getInboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client {
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:client];
  if (pool != nil) return [pool getSettings];
  else return nil;
}

- (NetI2pRouterTunnelPoolSettings *)getOutboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client {
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:client];
  if (pool != nil) return [pool getSettings];
  else return nil;
}

- (void)setInboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client
          withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  NetI2pRouterTunnelPoolTunnelPoolManager_setSettingsWithJavaUtilMap_withNetI2pDataHash_withNetI2pRouterTunnelPoolSettings_(_clientInboundPools_, client, settings);
}

- (void)setOutboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client
           withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  NetI2pRouterTunnelPoolTunnelPoolManager_setSettingsWithJavaUtilMap_withNetI2pDataHash_withNetI2pRouterTunnelPoolSettings_(_clientOutboundPools_, client, settings);
}

+ (void)setSettingsWithJavaUtilMap:(id<JavaUtilMap>)pools
                withNetI2pDataHash:(NetI2pDataHash *)client
withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  NetI2pRouterTunnelPoolTunnelPoolManager_setSettingsWithJavaUtilMap_withNetI2pDataHash_withNetI2pRouterTunnelPoolSettings_(pools, client, settings);
}

- (void)restart {
  @synchronized(self) {
    [((NetI2pRouterTunnelPoolBuildHandler *) nil_chk(_handler_)) restart];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(_executor_)) restart];
    NetI2pRouterTunnelPoolTunnelPoolManager_shutdownExploratory(self);
    [self startup];
  }
}

- (void)buildTunnelsWithNetI2pDataDestination:(NetI2pDataDestination *)client
         withNetI2pRouterClientTunnelSettings:(NetI2pRouterClientTunnelSettings *)settings {
  NetI2pDataHash *dest = [((NetI2pDataDestination *) nil_chk(client)) calculateHash];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@", @"Building tunnels for the client ", [client toBase32], @": ", settings)];
  NetI2pRouterTunnelPoolTunnelPool *inbound = nil;
  NetI2pRouterTunnelPoolTunnelPool *outbound = nil;
  jboolean delayOutbound = false;
  @synchronized(self) {
    inbound = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:dest]);
    if (inbound == nil) {
      inbound = JreRetainedLocalValue(create_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(_context_, self, [((NetI2pRouterClientTunnelSettings *) nil_chk(settings)) getInboundSettings], _clientPeerSelector_));
      [_clientInboundPools_ putWithId:dest withId:inbound];
    }
    else {
      [inbound setSettingsWithNetI2pRouterTunnelPoolSettings:[((NetI2pRouterClientTunnelSettings *) nil_chk(settings)) getInboundSettings]];
    }
    outbound = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:dest]);
    if (outbound == nil) {
      outbound = JreRetainedLocalValue(create_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(_context_, self, [settings getOutboundSettings], _clientPeerSelector_));
      [_clientOutboundPools_ putWithId:dest withId:outbound];
      delayOutbound = true;
    }
    else {
      [outbound setSettingsWithNetI2pRouterTunnelPoolSettings:[settings getOutboundSettings]];
    }
  }
  [inbound startup];
  if (delayOutbound) [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(outbound) withLong:1000];
  else [outbound startup];
}

- (jboolean)addAliasWithNetI2pDataDestination:(NetI2pDataDestination *)dest
         withNetI2pRouterClientTunnelSettings:(NetI2pRouterClientTunnelSettings *)settings
                    withNetI2pDataDestination:(NetI2pDataDestination *)existingClient {
  if ([((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataDestination *) nil_chk(dest)) getSigningPublicKey])) isEqual:[((NetI2pDataDestination *) nil_chk(existingClient)) getSigningPublicKey]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"signing key must differ");
  if (![((NetI2pDataPublicKey *) nil_chk([dest getPublicKey])) isEqual:[existingClient getPublicKey]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"encryption key mismatch");
  NetI2pDataHash *h = [dest calculateHash];
  NetI2pDataHash *e = [existingClient calculateHash];
  @synchronized(self) {
    NetI2pRouterTunnelPoolTunnelPool *inbound = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:h];
    NetI2pRouterTunnelPoolTunnelPool *outbound = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:h];
    if (inbound != nil || outbound != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"already have alias ", [dest toBase32])];
      return false;
    }
    NetI2pRouterTunnelPoolTunnelPool *eInbound = [_clientInboundPools_ getWithId:e];
    NetI2pRouterTunnelPoolTunnelPool *eOutbound = [_clientOutboundPools_ getWithId:e];
    if (eInbound == nil || eOutbound == nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"primary not found ", existingClient)];
      return false;
    }
    [((id<JavaUtilSet>) nil_chk([((NetI2pRouterTunnelPoolSettings *) nil_chk([eInbound getSettings])) getAliases])) addWithId:h];
    [((id<JavaUtilSet>) nil_chk([((NetI2pRouterTunnelPoolSettings *) nil_chk([eOutbound getSettings])) getAliases])) addWithId:h];
    NetI2pRouterTunnelPoolSettings *newIn = [((NetI2pRouterClientTunnelSettings *) nil_chk(settings)) getInboundSettings];
    NetI2pRouterTunnelPoolSettings *newOut = [settings getOutboundSettings];
    [((NetI2pRouterTunnelPoolSettings *) nil_chk(newIn)) setAliasOfWithNetI2pDataHash:e];
    [((NetI2pRouterTunnelPoolSettings *) nil_chk(newOut)) setAliasOfWithNetI2pDataHash:e];
    inbound = create_NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(_context_, self, newIn, eInbound);
    outbound = create_NetI2pRouterTunnelPoolAliasedTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPool_(_context_, self, newOut, eOutbound);
    [_clientInboundPools_ putWithId:h withId:inbound];
    [_clientOutboundPools_ putWithId:h withId:outbound];
    [inbound startup];
    [outbound startup];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$$$@", @"Added ", [dest toBase32], @" as alias for ", [existingClient toBase32], @" with settings ", settings)];
  return true;
}

- (void)removeAliasWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  NetI2pDataHash *h = [((NetI2pDataDestination *) nil_chk(dest)) calculateHash];
  @synchronized(self) {
    NetI2pRouterTunnelPoolTunnelPool *inbound = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) removeWithId:h];
    if (inbound != nil) {
      NetI2pDataHash *p = [((NetI2pRouterTunnelPoolSettings *) nil_chk([inbound getSettings])) getAliasOf];
      if (p != nil) {
        NetI2pRouterTunnelPoolTunnelPool *pri = [_clientInboundPools_ getWithId:p];
        if (pri != nil) {
          id<JavaUtilSet> aliases = [((NetI2pRouterTunnelPoolSettings *) nil_chk([pri getSettings])) getAliases];
          if (aliases != nil) [aliases removeWithId:h];
        }
      }
    }
    NetI2pRouterTunnelPoolTunnelPool *outbound = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) removeWithId:h];
    if (outbound != nil) {
      NetI2pDataHash *p = [((NetI2pRouterTunnelPoolSettings *) nil_chk([outbound getSettings])) getAliasOf];
      if (p != nil) {
        NetI2pRouterTunnelPoolTunnelPool *pri = [_clientOutboundPools_ getWithId:p];
        if (pri != nil) {
          id<JavaUtilSet> aliases = [((NetI2pRouterTunnelPoolSettings *) nil_chk([pri getSettings])) getAliases];
          if (aliases != nil) [aliases removeWithId:h];
        }
      }
    }
  }
}

- (void)removeTunnelsWithNetI2pDataHash:(NetI2pDataHash *)destination {
  @synchronized(self) {
    if (destination == nil) return;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Removing tunnels for the client ", [destination toBase32])];
    if ([((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) isLocalWithNetI2pDataHash:destination]) {
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Not removing pool still registered with client manager: ", [destination toBase32]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"i did it")];
      return;
    }
    NetI2pRouterTunnelPoolTunnelPool *inbound = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) removeWithId:destination];
    NetI2pRouterTunnelPoolTunnelPool *outbound = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) removeWithId:destination];
    if (inbound != nil) [inbound shutdown];
    if (outbound != nil) [outbound shutdown];
  }
}

- (void)buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:(NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *)cfg {
  if ([((NetI2pRouterTunnelPoolPooledTunnelCreatorConfig *) nil_chk(cfg)) getLength] > 1 && ![((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) gracefulShutdownInProgress] && (![_context_ getBooleanPropertyDefaultTrueWithNSString:@"router.disableTunnelTesting"] || [((NetI2pRouterRouter *) nil_chk([_context_ router])) isHidden] || [((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([_context_ router])) getRouterInfo])) getAddressCount] <= 0)) {
    NetI2pRouterTunnelPoolTunnelPool *pool = [cfg getTunnelPool];
    if (pool == nil) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@", @"How does this not have a pool?  ", cfg) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"baf")];
      if ([cfg getDestination] != nil) {
        if ([cfg isInbound]) {
          pool = [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:[cfg getDestination]];
        }
        else {
          pool = [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:[cfg getDestination]];
        }
      }
      else {
        if ([cfg isInbound]) {
          pool = _inboundExploratory_;
        }
        else {
          pool = _outboundExploratory_;
        }
      }
      [cfg setTunnelPoolWithNetI2pRouterTunnelPoolTunnelPool:pool];
    }
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolTestJob_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolPooledTunnelCreatorConfig_withNetI2pRouterTunnelPoolTunnelPool_(_context_, cfg, pool)];
  }
}

- (void)startup {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isShutdown_, false);
    if (![((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(_executor_)) isRunning]) {
      NetI2pUtilI2PThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(_executor_, @"BuildExecutor", true);
      [t start];
      [((NetI2pRouterTunnelPoolBuildHandler *) nil_chk(_handler_)) init__];
      for (jint i = 1; i <= _numHandlerThreads_; i++) {
        NetI2pUtilI2PThread *hThread = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(_handler_, JreStrcat("$ICI", @"BuildHandler ", i, '/', _numHandlerThreads_), true);
        [hThread start];
      }
    }
    [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_inboundExploratory_)) startup];
    [((NetI2pUtilSimpleTimer2 *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) simpleTimer2])) addEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(_outboundExploratory_) withLong:3 * 1000];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(_context_, _inboundExploratory_)];
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(_context_, _outboundExploratory_)];
  }
}

- (void)shutdown {
  @synchronized(self) {
    [((NetI2pRouterTunnelPoolBuildHandler *) nil_chk(_handler_)) shutdownWithInt:_numHandlerThreads_];
    [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(_executor_)) shutdown];
    NetI2pRouterTunnelPoolTunnelPoolManager_shutdownExploratory(self);
    JreAssignVolatileBoolean(&_isShutdown_, true);
  }
}

- (void)shutdownExploratory {
  NetI2pRouterTunnelPoolTunnelPoolManager_shutdownExploratory(self);
}

- (void)listPoolsWithJavaUtilList:(id<JavaUtilList>)outArg {
  [((id<JavaUtilList>) nil_chk(outArg)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) values]];
  [outArg addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) values]];
  [outArg addWithId:_inboundExploratory_];
  [outArg addWithId:_outboundExploratory_];
}

- (void)tunnelFailed {
  [((NetI2pRouterTunnelPoolBuildExecutor *) nil_chk(_executor_)) repoll];
}

- (NetI2pRouterTunnelPoolBuildExecutor *)getExecutor {
  return _executor_;
}

- (jboolean)isShutdown {
  return JreLoadVolatileBoolean(&_isShutdown_);
}

- (jint)getInboundBuildQueueSize {
  return [((NetI2pRouterTunnelPoolBuildHandler *) nil_chk(_handler_)) getInboundBuildQueueSize];
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (jint)countTunnelsPerPeerWithNetI2pUtilObjectCounter:(NetI2pUtilObjectCounter *)lc {
  return NetI2pRouterTunnelPoolTunnelPoolManager_countTunnelsPerPeerWithNetI2pUtilObjectCounter_(self, lc);
}

- (id<JavaUtilSet>)selectPeersInTooManyTunnels {
  NetI2pUtilObjectCounter *lc = create_NetI2pUtilObjectCounter_init();
  jint tunnelCount = NetI2pRouterTunnelPoolTunnelPoolManager_countTunnelsPerPeerWithNetI2pUtilObjectCounter_(self, lc);
  id<JavaUtilSet> rv = create_JavaUtilHashSet_init();
  if (tunnelCount >= 4 && [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getUptime] > 10 * 60 * 1000) {
    jint max = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:@"router.maxTunnelPercentage" withInt:NetI2pRouterTunnelPoolTunnelPoolManager_DEFAULT_MAX_PCT_TUNNELS];
    for (NetI2pDataHash * __strong h in nil_chk([lc objects])) {
      if ([lc countWithId:h] > 0 && ([lc countWithId:h] + 1) * 100 / (tunnelCount + 1) > max) [rv addWithId:h];
    }
  }
  return rv;
}

- (id<JavaUtilMap>)getInboundClientPools {
  return create_JavaUtilHashMap_initWithJavaUtilMap_(_clientInboundPools_);
}

- (id<JavaUtilMap>)getOutboundClientPools {
  return create_JavaUtilHashMap_initWithJavaUtilMap_(_clientOutboundPools_);
}

- (NetI2pRouterTunnelPoolTunnelPool *)getInboundExploratoryPool {
  return _inboundExploratory_;
}

- (NetI2pRouterTunnelPoolTunnelPool *)getOutboundExploratoryPool {
  return _outboundExploratory_;
}

- (NetI2pRouterTunnelPoolTunnelPool *)getInboundPoolWithNetI2pDataHash:(NetI2pDataHash *)client {
  return [((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) getWithId:client];
}

- (NetI2pRouterTunnelPoolTunnelPool *)getOutboundPoolWithNetI2pDataHash:(NetI2pDataHash *)client {
  return [((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) getWithId:client];
}

- (void)failWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, _outboundExploratory_, peer);
  for (NetI2pRouterTunnelPoolTunnelPool * __strong pool in nil_chk([((id<JavaUtilMap>) nil_chk(_clientOutboundPools_)) values])) {
    NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, pool, peer);
  }
  NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, _inboundExploratory_, peer);
  for (NetI2pRouterTunnelPoolTunnelPool * __strong pool in nil_chk([((id<JavaUtilMap>) nil_chk(_clientInboundPools_)) values])) {
    NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, pool, peer);
  }
}

- (void)failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                                 withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, pool, peer);
}

- (void)failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool
                                                withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(self, pool, peer);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_clientInboundPools_);
  RELEASE_(_clientOutboundPools_);
  RELEASE_(_inboundExploratory_);
  RELEASE_(_outboundExploratory_);
  RELEASE_(_executor_);
  RELEASE_(_handler_);
  RELEASE_(_clientPeerSelector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 1, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 7, 8, -1, -1, 9, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 28, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolBuildExecutor;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, 36, -1, 37, -1 },
    { NULL, "I", 0x2, 38, 39, -1, 40, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 41, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 47, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectInboundTunnel);
  methods[2].selector = @selector(selectInboundTunnelWithNetI2pDataHash:);
  methods[3].selector = @selector(selectOutboundTunnel);
  methods[4].selector = @selector(selectOutboundTunnelWithNetI2pDataHash:);
  methods[5].selector = @selector(selectInboundExploratoryTunnelWithNetI2pDataHash:);
  methods[6].selector = @selector(selectInboundTunnelWithNetI2pDataHash:withNetI2pDataHash:);
  methods[7].selector = @selector(selectOutboundExploratoryTunnelWithNetI2pDataHash:);
  methods[8].selector = @selector(selectOutboundTunnelWithNetI2pDataHash:withNetI2pDataHash:);
  methods[9].selector = @selector(getTunnelInfoWithNetI2pDataTunnelId:);
  methods[10].selector = @selector(getFreeTunnelCount);
  methods[11].selector = @selector(getOutboundTunnelCount);
  methods[12].selector = @selector(getInboundClientTunnelCount);
  methods[13].selector = @selector(getOutboundClientTunnelCount);
  methods[14].selector = @selector(getOutboundClientTunnelCountWithNetI2pDataHash:);
  methods[15].selector = @selector(getParticipatingCount);
  methods[16].selector = @selector(getLastParticipatingExpiration);
  methods[17].selector = @selector(getShareRatio);
  methods[18].selector = @selector(isValidTunnelWithNetI2pDataHash:withNetI2pRouterTunnelInfo:);
  methods[19].selector = @selector(getInboundSettings);
  methods[20].selector = @selector(getOutboundSettings);
  methods[21].selector = @selector(setInboundSettingsWithNetI2pRouterTunnelPoolSettings:);
  methods[22].selector = @selector(setOutboundSettingsWithNetI2pRouterTunnelPoolSettings:);
  methods[23].selector = @selector(getInboundSettingsWithNetI2pDataHash:);
  methods[24].selector = @selector(getOutboundSettingsWithNetI2pDataHash:);
  methods[25].selector = @selector(setInboundSettingsWithNetI2pDataHash:withNetI2pRouterTunnelPoolSettings:);
  methods[26].selector = @selector(setOutboundSettingsWithNetI2pDataHash:withNetI2pRouterTunnelPoolSettings:);
  methods[27].selector = @selector(setSettingsWithJavaUtilMap:withNetI2pDataHash:withNetI2pRouterTunnelPoolSettings:);
  methods[28].selector = @selector(restart);
  methods[29].selector = @selector(buildTunnelsWithNetI2pDataDestination:withNetI2pRouterClientTunnelSettings:);
  methods[30].selector = @selector(addAliasWithNetI2pDataDestination:withNetI2pRouterClientTunnelSettings:withNetI2pDataDestination:);
  methods[31].selector = @selector(removeAliasWithNetI2pDataDestination:);
  methods[32].selector = @selector(removeTunnelsWithNetI2pDataHash:);
  methods[33].selector = @selector(buildCompleteWithNetI2pRouterTunnelPoolPooledTunnelCreatorConfig:);
  methods[34].selector = @selector(startup);
  methods[35].selector = @selector(shutdown);
  methods[36].selector = @selector(shutdownExploratory);
  methods[37].selector = @selector(listPoolsWithJavaUtilList:);
  methods[38].selector = @selector(tunnelFailed);
  methods[39].selector = @selector(getExecutor);
  methods[40].selector = @selector(isShutdown);
  methods[41].selector = @selector(getInboundBuildQueueSize);
  methods[42].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[43].selector = @selector(countTunnelsPerPeerWithNetI2pUtilObjectCounter:);
  methods[44].selector = @selector(selectPeersInTooManyTunnels);
  methods[45].selector = @selector(getInboundClientPools);
  methods[46].selector = @selector(getOutboundClientPools);
  methods[47].selector = @selector(getInboundExploratoryPool);
  methods[48].selector = @selector(getOutboundExploratoryPool);
  methods[49].selector = @selector(getInboundPoolWithNetI2pDataHash:);
  methods[50].selector = @selector(getOutboundPoolWithNetI2pDataHash:);
  methods[51].selector = @selector(failWithNetI2pDataHash:);
  methods[52].selector = @selector(failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool:withNetI2pDataHash:);
  methods[53].selector = @selector(failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool:withNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_clientInboundPools_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "_clientOutboundPools_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "_inboundExploratory_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outboundExploratory_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_executor_", "LNetI2pRouterTunnelPoolBuildExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_handler_", "LNetI2pRouterTunnelPoolBuildHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_clientPeerSelector_", "LNetI2pRouterTunnelPoolTunnelPeerSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isShutdown_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_numHandlerThreads_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MIN_KBPS_TWO_HANDLERS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_TWO_HANDLERS, 0x1a, -1, -1, -1, -1 },
    { "MIN_KBPS_THREE_HANDLERS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_THREE_HANDLERS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MAX_PCT_TUNNELS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolTunnelPoolManager_DEFAULT_MAX_PCT_TUNNELS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectInboundTunnel", "LNetI2pDataHash;", "selectOutboundTunnel", "selectInboundExploratoryTunnel", "LNetI2pDataHash;LNetI2pDataHash;", "selectOutboundExploratoryTunnel", "getTunnelInfo", "LNetI2pDataTunnelId;", (void *)&NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$0, "getOutboundClientTunnelCount", "isValidTunnel", "LNetI2pDataHash;LNetI2pRouterTunnelInfo;", "setInboundSettings", "LNetI2pRouterTunnelPoolSettings;", "setOutboundSettings", "getInboundSettings", "getOutboundSettings", "LNetI2pDataHash;LNetI2pRouterTunnelPoolSettings;", "setSettings", "LJavaUtilMap;LNetI2pDataHash;LNetI2pRouterTunnelPoolSettings;", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/tunnel/pool/TunnelPool;>;Lnet/i2p/data/Hash;Lnet/i2p/router/TunnelPoolSettings;)V", "buildTunnels", "LNetI2pDataDestination;LNetI2pRouterClientTunnelSettings;", "addAlias", "LNetI2pDataDestination;LNetI2pRouterClientTunnelSettings;LNetI2pDataDestination;", "removeAlias", "LNetI2pDataDestination;", "removeTunnels", "buildComplete", "LNetI2pRouterTunnelPoolPooledTunnelCreatorConfig;", "listPools", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/tunnel/pool/TunnelPool;>;)V", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$1, "countTunnelsPerPeer", "LNetI2pUtilObjectCounter;", "(Lnet/i2p/util/ObjectCounter<Lnet/i2p/data/Hash;>;)I", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "()Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/tunnel/pool/TunnelPool;>;", "getInboundPool", "getOutboundPool", "fail", "failTunnelsWithFirstHop", "LNetI2pRouterTunnelPoolTunnelPool;LNetI2pDataHash;", "failTunnelsWithLastHop", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/tunnel/pool/TunnelPool;>;", "LNetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup;LNetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPoolManager = { "TunnelPoolManager", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x1, 54, 14, -1, 50, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPoolManager;
}

@end

void NetI2pRouterTunnelPoolTunnelPoolManager_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelPoolTunnelPoolManager_class_()]);
  JreStrongAssignAndConsume(&self->_clientInboundPools_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_clientOutboundPools_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_clientPeerSelector_, new_NetI2pRouterTunnelPoolClientPeerSelector_initWithNetI2pRouterRouterContext_(ctx));
  NetI2pRouterTunnelPoolExploratoryPeerSelector *selector = create_NetI2pRouterTunnelPoolExploratoryPeerSelector_initWithNetI2pRouterRouterContext_(self->_context_);
  NetI2pRouterTunnelPoolSettings *inboundSettings = create_NetI2pRouterTunnelPoolSettings_initWithBoolean_(true);
  JreStrongAssignAndConsume(&self->_inboundExploratory_, new_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(self->_context_, self, inboundSettings, selector));
  NetI2pRouterTunnelPoolSettings *outboundSettings = create_NetI2pRouterTunnelPoolSettings_initWithBoolean_(false);
  JreStrongAssignAndConsume(&self->_outboundExploratory_, new_NetI2pRouterTunnelPoolTunnelPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolSettings_withNetI2pRouterTunnelPoolTunnelPeerSelector_(self->_context_, self, outboundSettings, selector));
  JreStrongAssignAndConsume(&self->_executor_, new_NetI2pRouterTunnelPoolBuildExecutor_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_(ctx, self));
  JreStrongAssignAndConsume(&self->_handler_, new_NetI2pRouterTunnelPoolBuildHandler_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPoolManager_withNetI2pRouterTunnelPoolBuildExecutor_(ctx, self, self->_executor_));
  jint numHandlerThreads;
  jint share = NetI2pRouterTunnelTunnelDispatcher_getShareBandwidthWithNetI2pRouterRouterContext_(ctx);
  if (share >= NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_THREE_HANDLERS) numHandlerThreads = 3;
  else if (share >= NetI2pRouterTunnelPoolTunnelPoolManager_MIN_KBPS_TWO_HANDLERS) numHandlerThreads = 2;
  else numHandlerThreads = 1;
  self->_numHandlerThreads_ = [ctx getPropertyWithNSString:@"router.buildHandlerThreads" withInt:numHandlerThreads];
  IOSLongArray *RATES = [IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000l, 60 * 60 * 1000l } count:3];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"tunnel.testFailedTime" withNSString:@"Time for tunnel test failure (ms)" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.testExploratoryFailedTime" withNSString:@"How long did the failure of an exploratory tunnel take (max of 60s for full timeout)?" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.testFailedCompletelyTime" withNSString:@"How long did the complete failure take (max of 60s for full timeout)?" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.testExploratoryFailedCompletelyTime" withNSString:@"How long did the complete failure of an exploratory tunnel take (max of 60s for full timeout)?" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.testSuccessLength" withNSString:@"How long were the tunnels that passed the test?" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"tunnel.testSuccessTime" withNSString:@"Time for tunnel test success (ms)" withNSString:@"Tunnels" withLongArray:RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"tunnel.testAborted" withNSString:@"Tunnel test could not occur, since there weren't any tunnels to test with" withNSString:@"Tunnels" withLongArray:RATES];
}

NetI2pRouterTunnelPoolTunnelPoolManager *new_NetI2pRouterTunnelPoolTunnelPoolManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTunnelPoolTunnelPoolManager *create_NetI2pRouterTunnelPoolTunnelPoolManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager, initWithNetI2pRouterRouterContext_, ctx)
}

void NetI2pRouterTunnelPoolTunnelPoolManager_setSettingsWithJavaUtilMap_withNetI2pDataHash_withNetI2pRouterTunnelPoolSettings_(id<JavaUtilMap> pools, NetI2pDataHash *client, NetI2pRouterTunnelPoolSettings *settings) {
  NetI2pRouterTunnelPoolTunnelPoolManager_initialize();
  NetI2pRouterTunnelPoolTunnelPool *pool = [((id<JavaUtilMap>) nil_chk(pools)) getWithId:client];
  if (pool != nil) {
    [pool setSettingsWithNetI2pRouterTunnelPoolSettings:settings];
  }
}

void NetI2pRouterTunnelPoolTunnelPoolManager_shutdownExploratory(NetI2pRouterTunnelPoolTunnelPoolManager *self) {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->_inboundExploratory_)) shutdown];
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->_outboundExploratory_)) shutdown];
}

jint NetI2pRouterTunnelPoolTunnelPoolManager_countTunnelsPerPeerWithNetI2pUtilObjectCounter_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pUtilObjectCounter *lc) {
  id<JavaUtilList> pools = create_JavaUtilArrayList_init();
  [self listPoolsWithJavaUtilList:pools];
  jint tunnelCount = 0;
  for (NetI2pRouterTunnelPoolTunnelPool * __strong tp in pools) {
    for (id<NetI2pRouterTunnelInfo> __strong info in nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tp)) listTunnels])) {
      if ([((id<NetI2pRouterTunnelInfo>) nil_chk(info)) getLength] > 1) {
        tunnelCount++;
        for (jint j = 0; j < [info getLength]; j++) {
          NetI2pDataHash *peer = [info getPeerWithInt:j];
          if (![((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) routerHash])) isEqual:peer]) [((NetI2pUtilObjectCounter *) nil_chk(lc)) incrementWithId:peer];
        }
      }
    }
  }
  return tunnelCount;
}

void NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithFirstHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pDataHash *peer) {
  for (id<NetI2pRouterTunnelInfo> __strong tun in nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) listTunnels])) {
    jint len = [((id<NetI2pRouterTunnelInfo>) nil_chk(tun)) getLength];
    if (len > 1 && [((NetI2pDataHash *) nil_chk([tun getPeerWithInt:1])) isEqual:peer]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Removing OB tunnel, first hop banlisted: ", tun)];
      [pool tunnelFailedWithNetI2pRouterTunnelInfo:tun withNetI2pDataHash:peer];
    }
  }
}

void NetI2pRouterTunnelPoolTunnelPoolManager_failTunnelsWithLastHopWithNetI2pRouterTunnelPoolTunnelPool_withNetI2pDataHash_(NetI2pRouterTunnelPoolTunnelPoolManager *self, NetI2pRouterTunnelPoolTunnelPool *pool, NetI2pDataHash *peer) {
  for (id<NetI2pRouterTunnelInfo> __strong tun in nil_chk([((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(pool)) listTunnels])) {
    jint len = [((id<NetI2pRouterTunnelInfo>) nil_chk(tun)) getLength];
    if (len > 1 && [((NetI2pDataHash *) nil_chk([tun getPeerWithInt:len - 2])) isEqual:peer]) {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Removing IB tunnel, prev. hop banlisted: ", tun)];
      [pool tunnelFailedWithNetI2pRouterTunnelInfo:tun withNetI2pDataHash:peer];
    }
  }
}

IOSObjectArray *NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterTunnelPoolTunnelPoolManager__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPoolManager)

@implementation NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup

- (instancetype)initWithNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)p {
  NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(self, p);
  return self;
}

- (void)timeReached {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(self->pool_)) startup];
}

- (void)dealloc {
  RELEASE_(pool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelPoolTunnelPool:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pool_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterTunnelPoolTunnelPool;", "LNetI2pRouterTunnelPoolTunnelPoolManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup = { "DelayedStartup", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup;
}

@end

void NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *self, NetI2pRouterTunnelPoolTunnelPool *p) {
  NSObject_init(self);
  JreStrongAssign(&self->pool_, p);
}

NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *new_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPool *p) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup, initWithNetI2pRouterTunnelPoolTunnelPool_, p)
}

NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup *create_NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup_initWithNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPool *p) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup, initWithNetI2pRouterTunnelPoolTunnelPool_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPoolManager_DelayedStartup)

@implementation NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
             withNetI2pRouterTunnelPoolTunnelPool:(NetI2pRouterTunnelPoolTunnelPool *)pool {
  NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(self, ctx, pool);
  return self;
}

- (NSString *)getName {
  return @"Bootstrap tunnel pool";
}

- (void)runJob {
  [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(_pool_)) buildFallback];
}

- (void)dealloc {
  RELEASE_(_pool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelPoolTunnelPool:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_pool_", "LNetI2pRouterTunnelPoolTunnelPool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelPoolTunnelPool;", "LNetI2pRouterTunnelPoolTunnelPoolManager;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool = { "BootstrapPool", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0xa, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool;
}

@end

void NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_pool_, pool);
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) clock])) now] + 30 * 1000];
}

NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *new_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_, ctx, pool)
}

NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool *create_NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelPoolTunnelPool *pool) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelPoolTunnelPool_, ctx, pool)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolTunnelPoolManager_BootstrapPool)
