//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/pool/ExploratoryPeerSelector.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/tunnel/pool/ExploratoryPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateAverages.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTunnelPoolExploratoryPeerSelector ()

- (jboolean)shouldPickHighCap;

- (jint)getExploratoryFailPercentage;

- (jint)getFailPercentageWithNSString:(NSString *)t;

- (jint)getEventsWithNSString:(NSString *)stat
                     withLong:(jlong)period;

@end

inline jint NetI2pRouterTunnelPoolExploratoryPeerSelector_get_MIN_NONFAILING_PCT(void);
#define NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT 15
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolExploratoryPeerSelector, MIN_NONFAILING_PCT, jint)

inline jint NetI2pRouterTunnelPoolExploratoryPeerSelector_get_MIN_ACTIVE_PEERS_STARTUP(void);
#define NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS_STARTUP 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolExploratoryPeerSelector, MIN_ACTIVE_PEERS_STARTUP, jint)

inline jint NetI2pRouterTunnelPoolExploratoryPeerSelector_get_MIN_ACTIVE_PEERS(void);
#define NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPoolExploratoryPeerSelector, MIN_ACTIVE_PEERS, jint)

__attribute__((unused)) static jboolean NetI2pRouterTunnelPoolExploratoryPeerSelector_shouldPickHighCap(NetI2pRouterTunnelPoolExploratoryPeerSelector *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getExploratoryFailPercentage(NetI2pRouterTunnelPoolExploratoryPeerSelector *self);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getFailPercentageWithNSString_(NetI2pRouterTunnelPoolExploratoryPeerSelector *self, NSString *t);

__attribute__((unused)) static jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(NetI2pRouterTunnelPoolExploratoryPeerSelector *self, NSString *stat, jlong period);

@implementation NetI2pRouterTunnelPoolExploratoryPeerSelector

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTunnelPoolExploratoryPeerSelector_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (id<JavaUtilList>)selectPeersWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
  jint length = [self getLengthWithNetI2pRouterTunnelPoolSettings:settings];
  if (length < 0) {
    if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log_ debugWithNSString:JreStrcat("$@", @"Length requested is zero: ", settings)];
    return nil;
  }
  jboolean isInbound = [((NetI2pRouterTunnelPoolSettings *) nil_chk(settings)) isInbound];
  id<JavaUtilSet> exclude = [self getExcludeWithBoolean:isInbound withBoolean:true];
  [((id<JavaUtilSet>) nil_chk(exclude)) addWithId:[((NetI2pRouterRouterContext *) nil_chk(ctx_)) routerHash]];
  jboolean nonzero = length > 0;
  jboolean exploreHighCap = nonzero && NetI2pRouterTunnelPoolExploratoryPeerSelector_shouldPickHighCap(self);
  jboolean v6Only = nonzero && [self isIPv6Only];
  jboolean ntcpDisabled = nonzero && [self isNTCPDisabled];
  jboolean ssuDisabled = nonzero && [self isSSUDisabled];
  jboolean checkClosestHop = v6Only || ntcpDisabled || ssuDisabled;
  jboolean hidden = nonzero && ([((NetI2pRouterRouter *) nil_chk([ctx_ router])) isHidden] || [((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterRouter *) nil_chk([ctx_ router])) getRouterInfo])) getAddressCount] <= 0);
  jboolean hiddenInbound = hidden && isInbound;
  jboolean hiddenOutbound = hidden && !isInbound;
  jboolean lowOutbound = nonzero && !isInbound && ![((NetI2pRouterCommSystemFacade *) nil_chk([ctx_ commSystem])) haveHighOutboundCapacity];
  NetI2pDataHash *closestHop = nil;
  if (v6Only || hiddenInbound || lowOutbound) {
    id<JavaUtilSet> closestExclude;
    if (checkClosestHop) {
      closestExclude = [self getClosestHopExcludeWithBoolean:isInbound];
      if (closestExclude != nil) [closestExclude addAllWithJavaUtilCollection:exclude];
      else closestExclude = exclude;
    }
    else {
      closestExclude = exclude;
    }
    id<JavaUtilSet> closest = create_JavaUtilHashSet_initWithInt_(1);
    if (hiddenInbound || lowOutbound) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$$$I", @"EPS SANFP closest ", (isInbound ? @"IB" : @"OB"), @" exclude ", [closestExclude size])];
      id<JavaUtilSet> SANFPExclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(closestExclude);
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectActiveNotFailingPeersWithInt:1 withJavaUtilSet:SANFPExclude withJavaUtilSet:closest];
      if ([closest isEmpty]) {
        if ([log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$$$I", @"EPS SFP closest ", (isInbound ? @"IB" : @"OB"), @" exclude ", [closestExclude size])];
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:closestExclude withJavaUtilSet:closest];
      }
    }
    else if (exploreHighCap) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$$$I", @"EPS SHCP closest ", (isInbound ? @"IB" : @"OB"), @" exclude ", [closestExclude size])];
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectHighCapacityPeersWithInt:1 withJavaUtilSet:closestExclude withJavaUtilSet:closest];
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$$$I", @"EPS SNFP closest ", (isInbound ? @"IB" : @"OB"), @" exclude ", [closestExclude size])];
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectNotFailingPeersWithInt:1 withJavaUtilSet:closestExclude withJavaUtilSet:closest withBoolean:false];
    }
    if (![closest isEmpty]) {
      closestHop = [((id<JavaUtilIterator>) nil_chk([closest iterator])) next];
      [exclude addWithId:closestHop];
      length--;
    }
  }
  NetI2pDataHash *furthestHop = nil;
  if (hiddenOutbound && length > 0) {
    id<NetI2pRouterTunnelManagerFacade> tmf = [ctx_ tunnelManager];
    NetI2pRouterTunnelPoolTunnelPool *tp = [((id<NetI2pRouterTunnelManagerFacade>) nil_chk(tmf)) getInboundExploratoryPool];
    NetI2pRouterTunnelPoolSettings *tps = [((NetI2pRouterTunnelPoolTunnelPool *) nil_chk(tp)) getSettings];
    jint len = [((NetI2pRouterTunnelPoolSettings *) nil_chk(tps)) getLength];
    jboolean pickFurthest = true;
    if (len <= 0 || [tps getLengthOverride] == 0 || len + [tps getLengthVariance] <= 0) {
    }
    else {
      for (id<NetI2pRouterTunnelInfo> __strong ti in nil_chk([tp listTunnels])) {
        if ([((id<NetI2pRouterTunnelInfo>) nil_chk(ti)) getLength] > 1) {
          pickFurthest = false;
          break;
        }
      }
    }
    if (pickFurthest) {
      id<JavaUtilSet> furthest = create_JavaUtilHashSet_initWithInt_(1);
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$I", @"EPS SANFP furthest OB exclude ", [exclude size])];
      id<JavaUtilSet> SANFPExclude = create_JavaUtilHashSet_initWithJavaUtilCollection_(exclude);
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectActiveNotFailingPeersWithInt:1 withJavaUtilSet:SANFPExclude withJavaUtilSet:furthest];
      if ([furthest isEmpty]) {
        if ([log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$I", @"EPS SFP furthest OB exclude ", [exclude size])];
        [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectFastPeersWithInt:1 withJavaUtilSet:exclude withJavaUtilSet:furthest];
      }
      if (![furthest isEmpty]) {
        furthestHop = [((id<JavaUtilIterator>) nil_chk([furthest iterator])) next];
        [exclude addWithId:furthestHop];
        length--;
      }
    }
  }
  JavaUtilHashSet *matches = create_JavaUtilHashSet_initWithInt_(length);
  if (length > 0) {
    if (exploreHighCap) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$I$$I", @"EPS SHCP ", length, (isInbound ? @" IB" : @" OB"), @" exclude ", [exclude size])];
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectHighCapacityPeersWithInt:length withJavaUtilSet:exclude withJavaUtilSet:matches];
    }
    else {
      if (length > 2) [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectHighCapacityPeersWithInt:length - 2 withJavaUtilSet:exclude withJavaUtilSet:matches];
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log_ infoWithNSString:JreStrcat("$I$$I", @"EPS SNFP ", length, (isInbound ? @" IB" : @" OB"), @" exclude ", [exclude size])];
      [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([ctx_ profileOrganizer])) selectNotFailingPeersWithInt:length withJavaUtilSet:exclude withJavaUtilSet:matches withBoolean:false];
    }
    [matches removeWithId:[ctx_ routerHash]];
  }
  JavaUtilArrayList *rv = create_JavaUtilArrayList_initWithJavaUtilCollection_(matches);
  if ([rv size] > 1) [self orderPeersWithJavaUtilList:rv withNetI2pDataHash:[settings getRandomKey]];
  if (closestHop != nil) {
    if (isInbound) [rv addWithInt:0 withId:closestHop];
    else [rv addWithId:closestHop];
    length++;
  }
  if (furthestHop != nil) {
    if (isInbound) [rv addWithId:furthestHop];
    else [rv addWithInt:0 withId:furthestHop];
    length++;
  }
  if (isInbound) [rv addWithInt:0 withId:[ctx_ routerHash]];
  else [rv addWithId:[ctx_ routerHash]];
  if ([rv size] > 1) {
    if (![self checkTunnelWithBoolean:isInbound withJavaUtilList:rv]) rv = nil;
  }
  return rv;
}

- (jboolean)shouldPickHighCap {
  return NetI2pRouterTunnelPoolExploratoryPeerSelector_shouldPickHighCap(self);
}

- (jint)getExploratoryFailPercentage {
  return NetI2pRouterTunnelPoolExploratoryPeerSelector_getExploratoryFailPercentage(self);
}

- (jint)getFailPercentageWithNSString:(NSString *)t {
  return NetI2pRouterTunnelPoolExploratoryPeerSelector_getFailPercentageWithNSString_(self, t);
}

- (jint)getEventsWithNSString:(NSString *)stat
                     withLong:(jlong)period {
  return NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(self, stat, period);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(selectPeersWithNetI2pRouterTunnelPoolSettings:);
  methods[2].selector = @selector(shouldPickHighCap);
  methods[3].selector = @selector(getExploratoryFailPercentage);
  methods[4].selector = @selector(getFailPercentageWithNSString:);
  methods[5].selector = @selector(getEventsWithNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_NONFAILING_PCT", "I", .constantValue.asInt = NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT, 0x1a, -1, -1, -1, -1 },
    { "MIN_ACTIVE_PEERS_STARTUP", "I", .constantValue.asInt = NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS_STARTUP, 0x1a, -1, -1, -1, -1 },
    { "MIN_ACTIVE_PEERS", "I", .constantValue.asInt = NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "selectPeers", "LNetI2pRouterTunnelPoolSettings;", "(Lnet/i2p/router/TunnelPoolSettings;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "getFailPercentage", "LNSString;", "getEvents", "LNSString;J" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPoolExploratoryPeerSelector = { "ExploratoryPeerSelector", "net.i2p.router.tunnel.pool", ptrTable, methods, fields, 7, 0x0, 6, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPoolExploratoryPeerSelector;
}

@end

void NetI2pRouterTunnelPoolExploratoryPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterTunnelPoolExploratoryPeerSelector *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterTunnelPoolTunnelPeerSelector_initWithNetI2pRouterRouterContext_(self, context);
}

NetI2pRouterTunnelPoolExploratoryPeerSelector *new_NetI2pRouterTunnelPoolExploratoryPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPoolExploratoryPeerSelector, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterTunnelPoolExploratoryPeerSelector *create_NetI2pRouterTunnelPoolExploratoryPeerSelector_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPoolExploratoryPeerSelector, initWithNetI2pRouterRouterContext_, context)
}

jboolean NetI2pRouterTunnelPoolExploratoryPeerSelector_shouldPickHighCap(NetI2pRouterTunnelPoolExploratoryPeerSelector *self) {
  if ([((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) getBooleanPropertyWithNSString:@"router.exploreHighCapacity"]) return true;
  jint active = [((NetI2pRouterCommSystemFacade *) nil_chk([self->ctx_ commSystem])) countActivePeers];
  if (active < NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS_STARTUP) return false;
  if ([((NetI2pRouterRouter *) nil_chk([self->ctx_ router])) getUptime] <= (NetI2pUtilSystemVersion_isAndroid() ? 15 * 60 * 1000 : 5 * 60 * 1000)) return true;
  if ([((NetI2pRouterRouter *) nil_chk([self->ctx_ router])) gracefulShutdownInProgress]) return true;
  if (active < NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_ACTIVE_PEERS) return false;
  jint failPct;
  if ([((NetI2pRouterRouter *) nil_chk([self->ctx_ router])) getUptime] <= 11 * 60 * 1000) {
    failPct = 100 - NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT;
  }
  else {
    failPct = NetI2pRouterTunnelPoolExploratoryPeerSelector_getExploratoryFailPercentage(self);
    if (failPct > 100 - NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT) failPct = 100 - NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT;
  }
  return (failPct >= [((NetI2pUtilRandomSource *) nil_chk([self->ctx_ random])) nextIntWithInt:100]);
}

jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getExploratoryFailPercentage(NetI2pRouterTunnelPoolExploratoryPeerSelector *self) {
  jint c = NetI2pRouterTunnelPoolExploratoryPeerSelector_getFailPercentageWithNSString_(self, @"Client");
  jint e = NetI2pRouterTunnelPoolExploratoryPeerSelector_getFailPercentageWithNSString_(self, @"Exploratory");
  if (e <= c || e <= 25) return 0;
  if (c >= 70 || e >= 75) return 100 - NetI2pRouterTunnelPoolExploratoryPeerSelector_MIN_NONFAILING_PCT;
  return (100 * (e - c)) / (100 - c);
}

jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getFailPercentageWithNSString_(NetI2pRouterTunnelPoolExploratoryPeerSelector *self, NSString *t) {
  NSString *pfx = JreStrcat("$$", @"tunnel.build", t);
  jint timeout = NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(self, JreStrcat("$$", pfx, @"Expire"), 10 * 60 * 1000);
  jint reject = NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(self, JreStrcat("$$", pfx, @"Reject"), 10 * 60 * 1000);
  jint accept = NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(self, JreStrcat("$$", pfx, @"Success"), 10 * 60 * 1000);
  if (accept + reject + timeout <= 0) return 0;
  jdouble pct = (jdouble) (reject + timeout) / (accept + reject + timeout);
  return JreFpToInt((100 * pct));
}

jint NetI2pRouterTunnelPoolExploratoryPeerSelector_getEventsWithNSString_withLong_(NetI2pRouterTunnelPoolExploratoryPeerSelector *self, NSString *stat, jlong period) {
  NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->ctx_)) statManager])) getRateWithNSString:stat];
  if (rs == nil) return 0;
  NetI2pStatRate *r = [rs getRateWithLong:period];
  if (r == nil) return 0;
  return (jint) ([((NetI2pStatRateAverages *) nil_chk([r computeAverages])) getTotalEventCount]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPoolExploratoryPeerSelector)
