//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/PumpedTunnelGateway.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/OutboundGatewayMessage.h"
#include "net/i2p/router/tunnel/PendingGatewayMessage.h"
#include "net/i2p/router/tunnel/PumpedTunnelGateway.h"
#include "net/i2p/router/tunnel/TunnelGateway.h"
#include "net/i2p/router/tunnel/TunnelGatewayPumper.h"
#include "net/i2p/router/util/CoDelBlockingQueue.h"
#include "net/i2p/router/util/CoDelPriorityBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterTunnelPumpedTunnelGateway () {
 @public
  id<JavaUtilConcurrentBlockingQueue> _prequeue_;
  NetI2pRouterTunnelTunnelGatewayPumper *_pumper_;
  jboolean _isInbound_;
  NetI2pDataHash *_nextHop_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPumpedTunnelGateway, _prequeue_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPumpedTunnelGateway, _pumper_, NetI2pRouterTunnelTunnelGatewayPumper *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelPumpedTunnelGateway, _nextHop_, NetI2pDataHash *)

inline jint NetI2pRouterTunnelPumpedTunnelGateway_get_MAX_OB_MSGS_PER_PUMP(void);
#define NetI2pRouterTunnelPumpedTunnelGateway_MAX_OB_MSGS_PER_PUMP 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPumpedTunnelGateway, MAX_OB_MSGS_PER_PUMP, jint)

inline jint NetI2pRouterTunnelPumpedTunnelGateway_get_MAX_IB_MSGS_PER_PUMP(void);
#define NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_MSGS_PER_PUMP 24
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPumpedTunnelGateway, MAX_IB_MSGS_PER_PUMP, jint)

inline jint NetI2pRouterTunnelPumpedTunnelGateway_get_INITIAL_OB_QUEUE(void);
#define NetI2pRouterTunnelPumpedTunnelGateway_INITIAL_OB_QUEUE 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPumpedTunnelGateway, INITIAL_OB_QUEUE, jint)

inline jint NetI2pRouterTunnelPumpedTunnelGateway_get_MAX_IB_QUEUE(void);
#define NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_QUEUE 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelPumpedTunnelGateway, MAX_IB_QUEUE, jint)

@implementation NetI2pRouterTunnelPumpedTunnelGateway

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor:(id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor>)preprocessor
       withNetI2pRouterTunnelTunnelGateway_Sender:(id<NetI2pRouterTunnelTunnelGateway_Sender>)sender
     withNetI2pRouterTunnelTunnelGateway_Receiver:(id<NetI2pRouterTunnelTunnelGateway_Receiver>)receiver
        withNetI2pRouterTunnelTunnelGatewayPumper:(NetI2pRouterTunnelTunnelGatewayPumper *)pumper {
  NetI2pRouterTunnelPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_(self, context, preprocessor, sender, receiver, pumper);
  return self;
}

- (void)addWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                      withNetI2pDataHash:(NetI2pDataHash *)toRouter
                  withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  NetI2pRouterTunnelOutboundGatewayMessage *cur = create_NetI2pRouterTunnelOutboundGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(msg, toRouter, toTunnel);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$I", @"OB PTG add type ", [((id<NetI2pDataI2npI2NPMessage>) nil_chk(msg)) getType], @" pri ", [cur getPriority])];
  [self addWithNetI2pRouterTunnelPendingGatewayMessage:cur];
}

- (void)addWithNetI2pRouterTunnelPendingGatewayMessage:(NetI2pRouterTunnelPendingGatewayMessage *)cur {
  _messagesSent_++;
  if ([((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_prequeue_)) offerWithId:cur]) [((NetI2pRouterTunnelTunnelGatewayPumper *) nil_chk(_pumper_)) wantsPumpingWithNetI2pRouterTunnelPumpedTunnelGateway:self];
  else [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"tunnel.dropGatewayOverflow" withLong:1];
}

- (jboolean)pumpWithJavaUtilList:(id<JavaUtilList>)queueBuf {
  jint max;
  jboolean backlogged = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) isBackloggedWithNetI2pDataHash:_nextHop_];
  if (backlogged && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@$I$Z", @"PTG backlogged, queued to ", _nextHop_, @" : ", [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_prequeue_)) size], @" IB? ", _isInbound_)];
  if (backlogged) max = _isInbound_ ? 1 : 2;
  else max = _isInbound_ ? NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_MSGS_PER_PUMP : NetI2pRouterTunnelPumpedTunnelGateway_MAX_OB_MSGS_PER_PUMP;
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_prequeue_)) drainToWithJavaUtilCollection:queueBuf withInt:max];
  if ([((id<JavaUtilList>) nil_chk(queueBuf)) isEmpty]) return false;
  jboolean rv = ![_prequeue_ isEmpty];
  jlong startAdd = JavaLangSystem_currentTimeMillis();
  jlong beforeLock = startAdd;
  jlong afterAdded = -1;
  jboolean delayedFlush = false;
  jlong delayAmount = -1;
  jint remaining = 0;
  jlong afterPreprocess = 0;
  jlong afterExpire = 0;
  @synchronized(_queue_) {
    [((id<JavaUtilList>) nil_chk(_queue_)) addAllWithJavaUtilCollection:queueBuf];
    afterAdded = JavaLangSystem_currentTimeMillis();
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$@", @"Added before direct flush preprocessing for ", [self description], @": ", _queue_)];
    delayedFlush = [((id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor>) nil_chk(_preprocessor_)) preprocessQueueWithJavaUtilList:_queue_ withNetI2pRouterTunnelTunnelGateway_Sender:_sender_ withNetI2pRouterTunnelTunnelGateway_Receiver:_receiver_];
    afterPreprocess = JavaLangSystem_currentTimeMillis();
    if (delayedFlush) delayAmount = [_preprocessor_ getDelayAmount];
    _lastFlush_ = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now];
    for (jint i = 0; i < [_queue_ size]; i++) {
      NetI2pRouterTunnelPendingGatewayMessage *m = [_queue_ getWithInt:i];
      if ([((NetI2pRouterTunnelPendingGatewayMessage *) nil_chk(m)) getExpiration] + NetI2pRouterRouter_CLOCK_FUDGE_FACTOR < _lastFlush_) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@", @"Expire on the queue (size=", [_queue_ size], @"): ", m)];
        [_queue_ removeWithInt:i];
        i--;
      }
    }
    afterExpire = JavaLangSystem_currentTimeMillis();
    remaining = [_queue_ size];
    if ((remaining > 0) && ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG])) [_log_ debugWithNSString:JreStrcat("$@", @"Remaining after preprocessing: ", _queue_)];
  }
  if (delayedFlush) {
    [((NetI2pRouterTunnelTunnelGateway_DelayedFlush *) nil_chk(_delayedFlush_)) rescheduleWithLong:delayAmount];
  }
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    jlong complete = JavaLangSystem_currentTimeMillis();
    [_log_ debugWithNSString:JreStrcat("$I$$$J$Z$I$J$J$J$J", @"Time to add ", [queueBuf size], @" messages to ", [self description], @": ", (complete - startAdd), @" delayed? ", delayedFlush, @" remaining: ", remaining, @" add: ", (afterAdded - beforeLock), @" preprocess: ", (afterPreprocess - afterAdded), @" expire: ", (afterExpire - afterPreprocess), @" queue flush: ", (complete - afterExpire))];
  }
  [queueBuf clear];
  if (rv && [_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$I$Z$Z", @"PTG remaining to ", _nextHop_, @" : ", [_prequeue_ size], @" IB? ", _isInbound_, @" backlogged? ", backlogged)];
  return rv;
}

- (void)dealloc {
  RELEASE_(_prequeue_);
  RELEASE_(_pumper_);
  RELEASE_(_nextHop_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor:withNetI2pRouterTunnelTunnelGateway_Sender:withNetI2pRouterTunnelTunnelGateway_Receiver:withNetI2pRouterTunnelTunnelGatewayPumper:);
  methods[1].selector = @selector(addWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[2].selector = @selector(addWithNetI2pRouterTunnelPendingGatewayMessage:);
  methods[3].selector = @selector(pumpWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_prequeue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_pumper_", "LNetI2pRouterTunnelTunnelGatewayPumper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isInbound_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextHop_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_OB_MSGS_PER_PUMP", "I", .constantValue.asInt = NetI2pRouterTunnelPumpedTunnelGateway_MAX_OB_MSGS_PER_PUMP, 0x1a, -1, -1, -1, -1 },
    { "MAX_IB_MSGS_PER_PUMP", "I", .constantValue.asInt = NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_MSGS_PER_PUMP, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_OB_QUEUE", "I", .constantValue.asInt = NetI2pRouterTunnelPumpedTunnelGateway_INITIAL_OB_QUEUE, 0x1a, -1, -1, -1, -1 },
    { "MAX_IB_QUEUE", "I", .constantValue.asInt = NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_QUEUE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelGateway_QueuePreprocessor;LNetI2pRouterTunnelTunnelGateway_Sender;LNetI2pRouterTunnelTunnelGateway_Receiver;LNetI2pRouterTunnelTunnelGatewayPumper;", "add", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "LNetI2pRouterTunnelPendingGatewayMessage;", "pump", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;)Z", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/tunnel/PendingGatewayMessage;>;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelPumpedTunnelGateway = { "PumpedTunnelGateway", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 4, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelPumpedTunnelGateway;
}

@end

void NetI2pRouterTunnelPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_(NetI2pRouterTunnelPumpedTunnelGateway *self, NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper) {
  NetI2pRouterTunnelTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_(self, context, preprocessor, sender, receiver);
  if ([self java_getClass] == NetI2pRouterTunnelPumpedTunnelGateway_class_()) {
    JreStrongAssignAndConsume(&self->_prequeue_, new_NetI2pRouterUtilCoDelPriorityBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(context, @"OBGW", NetI2pRouterTunnelPumpedTunnelGateway_INITIAL_OB_QUEUE));
    JreStrongAssign(&self->_nextHop_, [((id<NetI2pRouterTunnelTunnelGateway_Receiver>) nil_chk(receiver)) getSendTo]);
    self->_isInbound_ = false;
  }
  else if (receiver != nil) {
    JreStrongAssignAndConsume(&self->_prequeue_, new_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(context, @"IBGW", NetI2pRouterTunnelPumpedTunnelGateway_MAX_IB_QUEUE));
    JreStrongAssign(&self->_nextHop_, [receiver getSendTo]);
    self->_isInbound_ = true;
  }
  else {
    JreStrongAssign(&self->_prequeue_, nil);
    JreStrongAssign(&self->_nextHop_, nil);
    self->_isInbound_ = true;
  }
  JreStrongAssign(&self->_pumper_, pumper);
}

NetI2pRouterTunnelPumpedTunnelGateway *new_NetI2pRouterTunnelPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelPumpedTunnelGateway, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_, context, preprocessor, sender, receiver, pumper)
}

NetI2pRouterTunnelPumpedTunnelGateway *create_NetI2pRouterTunnelPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelPumpedTunnelGateway, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_, context, preprocessor, sender, receiver, pumper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelPumpedTunnelGateway)
