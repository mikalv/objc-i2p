//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/ThrottledPumpedTunnelGateway.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/PendingGatewayMessage.h"
#include "net/i2p/router/tunnel/PumpedTunnelGateway.h"
#include "net/i2p/router/tunnel/ThrottledPumpedTunnelGateway.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/TunnelGateway.h"
#include "net/i2p/router/tunnel/TunnelGatewayPumper.h"

@interface NetI2pRouterTunnelThrottledPumpedTunnelGateway () {
 @public
  NetI2pRouterTunnelHopConfig *_config_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelThrottledPumpedTunnelGateway, _config_, NetI2pRouterTunnelHopConfig *)

@implementation NetI2pRouterTunnelThrottledPumpedTunnelGateway

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor:(id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor>)preprocessor
       withNetI2pRouterTunnelTunnelGateway_Sender:(id<NetI2pRouterTunnelTunnelGateway_Sender>)sender
     withNetI2pRouterTunnelTunnelGateway_Receiver:(id<NetI2pRouterTunnelTunnelGateway_Receiver>)receiver
        withNetI2pRouterTunnelTunnelGatewayPumper:(NetI2pRouterTunnelTunnelGatewayPumper *)pumper
                  withNetI2pRouterTunnelHopConfig:(NetI2pRouterTunnelHopConfig *)config {
  NetI2pRouterTunnelThrottledPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_(self, context, preprocessor, sender, receiver, pumper, config);
  return self;
}

- (void)addWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                      withNetI2pDataHash:(NetI2pDataHash *)toRouter
                  withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  jint size = JavaLangMath_maxWithInt_withInt_([((id<NetI2pDataI2npI2NPMessage>) nil_chk(msg)) getMessageSize], 1024 / 2);
  if ([((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) tunnelDispatcher])) shouldDropParticipatingMessageWithNetI2pRouterTunnelTunnelDispatcher_Location:JreLoadEnum(NetI2pRouterTunnelTunnelDispatcher_Location, IBGW) withInt:[msg getType] withInt:size]) {
    jint kb = (size + 1023) / 1024;
    for (jint i = 0; i < kb; i++) [((NetI2pRouterTunnelHopConfig *) nil_chk(_config_)) incrementProcessedMessages];
    return;
  }
  [self addWithNetI2pRouterTunnelPendingGatewayMessage:create_NetI2pRouterTunnelPendingGatewayMessage_initWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_withNetI2pDataTunnelId_(msg, toRouter, toTunnel)];
}

- (NSString *)description {
  return JreStrcat("$@", @"IBGW ", [((NetI2pRouterTunnelHopConfig *) nil_chk(_config_)) getReceiveTunnel]);
}

- (void)dealloc {
  RELEASE_(_config_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor:withNetI2pRouterTunnelTunnelGateway_Sender:withNetI2pRouterTunnelTunnelGateway_Receiver:withNetI2pRouterTunnelTunnelGatewayPumper:withNetI2pRouterTunnelHopConfig:);
  methods[1].selector = @selector(addWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_config_", "LNetI2pRouterTunnelHopConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelGateway_QueuePreprocessor;LNetI2pRouterTunnelTunnelGateway_Sender;LNetI2pRouterTunnelTunnelGateway_Receiver;LNetI2pRouterTunnelTunnelGatewayPumper;LNetI2pRouterTunnelHopConfig;", "add", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelThrottledPumpedTunnelGateway = { "ThrottledPumpedTunnelGateway", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelThrottledPumpedTunnelGateway;
}

@end

void NetI2pRouterTunnelThrottledPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_(NetI2pRouterTunnelThrottledPumpedTunnelGateway *self, NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper, NetI2pRouterTunnelHopConfig *config) {
  NetI2pRouterTunnelPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_(self, context, preprocessor, sender, receiver, pumper);
  JreStrongAssign(&self->_config_, config);
}

NetI2pRouterTunnelThrottledPumpedTunnelGateway *new_NetI2pRouterTunnelThrottledPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelThrottledPumpedTunnelGateway, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_, context, preprocessor, sender, receiver, pumper, config)
}

NetI2pRouterTunnelThrottledPumpedTunnelGateway *create_NetI2pRouterTunnelThrottledPumpedTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_(NetI2pRouterRouterContext *context, id<NetI2pRouterTunnelTunnelGateway_QueuePreprocessor> preprocessor, id<NetI2pRouterTunnelTunnelGateway_Sender> sender, id<NetI2pRouterTunnelTunnelGateway_Receiver> receiver, NetI2pRouterTunnelTunnelGatewayPumper *pumper, NetI2pRouterTunnelHopConfig *config) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelThrottledPumpedTunnelGateway, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_withNetI2pRouterTunnelTunnelGatewayPumper_withNetI2pRouterTunnelHopConfig_, context, preprocessor, sender, receiver, pumper, config)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelThrottledPumpedTunnelGateway)
