//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/BuildReplyHandler.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/EncryptedBuildRecord.h"
#include "net/i2p/data/i2np/TunnelBuildMessageBase.h"
#include "net/i2p/data/i2np/TunnelBuildReplyMessage.h"
#include "net/i2p/router/tunnel/BuildMessageGenerator.h"
#include "net/i2p/router/tunnel/BuildReplyHandler.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pRouterTunnelBuildReplyHandler () {
 @public
  NetI2pI2PAppContext *ctx_;
  NetI2pUtilLog *log_;
}

- (jint)decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage:(NetI2pDataI2npTunnelBuildReplyMessage *)reply
                     withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                                                       withInt:(jint)recordNum
                                                       withInt:(jint)hop;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelBuildReplyHandler, ctx_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelBuildReplyHandler, log_, NetI2pUtilLog *)

__attribute__((unused)) static jint NetI2pRouterTunnelBuildReplyHandler_decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withInt_withInt_(NetI2pRouterTunnelBuildReplyHandler *self, NetI2pDataI2npTunnelBuildReplyMessage *reply, NetI2pRouterTunnelTunnelCreatorConfig *cfg, jint recordNum, jint hop);

@implementation NetI2pRouterTunnelBuildReplyHandler

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterTunnelBuildReplyHandler_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (IOSIntArray *)decryptWithNetI2pDataI2npTunnelBuildReplyMessage:(NetI2pDataI2npTunnelBuildReplyMessage *)reply
                        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                                                 withJavaUtilList:(id<JavaUtilList>)recordOrder {
  if ([((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(reply)) getRecordCount] != [((id<JavaUtilList>) nil_chk(recordOrder)) size]) {
    [((NetI2pUtilLog *) nil_chk(log_)) errorWithNSString:JreStrcat("$I$I", @"Corrupted build reply, expected ", [recordOrder size], @" records, got ", [reply getRecordCount])];
    return nil;
  }
  IOSIntArray *rv = [IOSIntArray arrayWithLength:[reply getRecordCount]];
  for (jint i = 0; i < rv->size_; i++) {
    jint hop = [((JavaLangInteger *) nil_chk([recordOrder getWithInt:i])) intValue];
    if (NetI2pRouterTunnelBuildMessageGenerator_isBlankWithNetI2pRouterTunnelTunnelCreatorConfig_withInt_(cfg, hop)) {
      if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log_ debugWithNSString:JreStrcat("J$ICI$@", [reply getUniqueId], @": no need to decrypt record ", i, '/', hop, @", as its out of range: ", cfg)];
      *IOSIntArray_GetRef(rv, i) = 0;
    }
    else {
      jint ok = NetI2pRouterTunnelBuildReplyHandler_decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withInt_withInt_(self, reply, cfg, i, hop);
      if (ok == -1) {
        if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log_ warnWithNSString:JreStrcat("J$ICI$@", [reply getUniqueId], @": decrypt record ", i, '/', hop, @" was not ok: ", cfg)];
        return nil;
      }
      else {
        if ([((NetI2pUtilLog *) nil_chk(log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log_ debugWithNSString:JreStrcat("J$ICI$I$@", [reply getUniqueId], @": decrypt record ", i, '/', hop, @" was ok: ", ok, @" for ", cfg)];
      }
      *IOSIntArray_GetRef(rv, i) = ok;
    }
  }
  return rv;
}

- (jint)decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage:(NetI2pDataI2npTunnelBuildReplyMessage *)reply
                     withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg
                                                       withInt:(jint)recordNum
                                                       withInt:(jint)hop {
  return NetI2pRouterTunnelBuildReplyHandler_decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withInt_withInt_(self, reply, cfg, recordNum, hop);
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(decryptWithNetI2pDataI2npTunnelBuildReplyMessage:withNetI2pRouterTunnelTunnelCreatorConfig:withJavaUtilList:);
  methods[2].selector = @selector(decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage:withNetI2pRouterTunnelTunnelCreatorConfig:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "decrypt", "LNetI2pDataI2npTunnelBuildReplyMessage;LNetI2pRouterTunnelTunnelCreatorConfig;LJavaUtilList;", "(Lnet/i2p/data/i2np/TunnelBuildReplyMessage;Lnet/i2p/router/tunnel/TunnelCreatorConfig;Ljava/util/List<Ljava/lang/Integer;>;)[I", "decryptRecord", "LNetI2pDataI2npTunnelBuildReplyMessage;LNetI2pRouterTunnelTunnelCreatorConfig;II" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelBuildReplyHandler = { "BuildReplyHandler", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelBuildReplyHandler;
}

@end

void NetI2pRouterTunnelBuildReplyHandler_initWithNetI2pI2PAppContext_(NetI2pRouterTunnelBuildReplyHandler *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, context);
  JreStrongAssign(&self->log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelBuildReplyHandler_class_()]);
}

NetI2pRouterTunnelBuildReplyHandler *new_NetI2pRouterTunnelBuildReplyHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelBuildReplyHandler, initWithNetI2pI2PAppContext_, context)
}

NetI2pRouterTunnelBuildReplyHandler *create_NetI2pRouterTunnelBuildReplyHandler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelBuildReplyHandler, initWithNetI2pI2PAppContext_, context)
}

jint NetI2pRouterTunnelBuildReplyHandler_decryptRecordWithNetI2pDataI2npTunnelBuildReplyMessage_withNetI2pRouterTunnelTunnelCreatorConfig_withInt_withInt_(NetI2pRouterTunnelBuildReplyHandler *self, NetI2pDataI2npTunnelBuildReplyMessage *reply, NetI2pRouterTunnelTunnelCreatorConfig *cfg, jint recordNum, jint hop) {
  if (NetI2pRouterTunnelBuildMessageGenerator_isBlankWithNetI2pRouterTunnelTunnelCreatorConfig_withInt_(cfg, hop)) {
    if ([((NetI2pUtilLog *) nil_chk(self->log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->log_ debugWithNSString:JreStrcat("J$ICI$", [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(reply)) getUniqueId], @": Record ", recordNum, '/', hop, @" is fake, so consider it valid...")];
    return 0;
  }
  NetI2pDataI2npEncryptedBuildRecord *rec = [((NetI2pDataI2npTunnelBuildReplyMessage *) nil_chk(reply)) getRecordWithInt:recordNum];
  IOSByteArray *data = [((NetI2pDataI2npEncryptedBuildRecord *) nil_chk(rec)) getData];
  jint start = [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(cfg)) getLength] - 1;
  if ([cfg isInbound]) start--;
  for (jint j = start; j >= hop; j--) {
    NetI2pRouterTunnelHopConfig *hopConfig = [cfg getConfigWithInt:j];
    NetI2pDataSessionKey *replyKey = [((NetI2pRouterTunnelHopConfig *) nil_chk(hopConfig)) getReplyKey];
    IOSByteArray *replyIV = [hopConfig getReplyIV];
    if ([((NetI2pUtilLog *) nil_chk(self->log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
      [self->log_ debugWithNSString:JreStrcat("J$ICICI$$C$$@", [reply getUniqueId], @": Decrypting record ", recordNum, '/', hop, '/', j, @" with replyKey ", [((NetI2pDataSessionKey *) nil_chk(replyKey)) toBase64], '/', NetI2pDataBase64_encodeWithByteArray_(replyIV), @": ", cfg)];
      [self->log_ debugWithNSString:JreStrcat("J$$", [reply getUniqueId], @": before decrypt: ", NetI2pDataBase64_encodeWithByteArray_(data))];
      [self->log_ debugWithNSString:JreStrcat("J$I$$", [reply getUniqueId], @": Full reply rec: sz=", ((IOSByteArray *) nil_chk(data))->size_, @" data=", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, 0, NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE))];
    }
    [((NetI2pCryptoAESEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) aes])) decryptWithByteArray:data withInt:0 withByteArray:data withInt:0 withNetI2pDataSessionKey:replyKey withByteArray:replyIV withInt:0 withInt:NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE];
    if ([self->log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->log_ debugWithNSString:JreStrcat("J$$", [reply getUniqueId], @": after decrypt: ", NetI2pDataBase64_encodeWithByteArray_(data))];
  }
  IOSByteArray *h = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) sha])) calculateHashWithByteArray:data withInt:NetI2pDataHash_HASH_LENGTH withInt:NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE - NetI2pDataHash_HASH_LENGTH withByteArray:h withInt:0];
  jboolean ok = NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(h, 0, data, 0, NetI2pDataHash_HASH_LENGTH);
  if (!ok) {
    if ([((NetI2pUtilLog *) nil_chk(self->log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->log_ debugWithNSString:JreStrcat("J$ICI$$$$$$", [reply getUniqueId], @": Failed verification on ", recordNum, '/', hop, @": ", NetI2pDataBase64_encodeWithByteArray_(h), @" calculated, ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, 0, NetI2pDataHash_HASH_LENGTH), @" expected\nRecord: ", NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(data, NetI2pDataHash_HASH_LENGTH, NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE - NetI2pDataHash_HASH_LENGTH))];
    NetI2pUtilSimpleByteCache_release__WithByteArray_(h);
    return -1;
  }
  else {
    NetI2pUtilSimpleByteCache_release__WithByteArray_(h);
    jint rv = IOSByteArray_Get(nil_chk(data), NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE - 1) & (jint) 0xff;
    if ([((NetI2pUtilLog *) nil_chk(self->log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->log_ debugWithNSString:JreStrcat("J$I$ICI", [reply getUniqueId], @": Verified: ", rv, @" for record ", recordNum, '/', hop)];
    return rv;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelBuildReplyHandler)
