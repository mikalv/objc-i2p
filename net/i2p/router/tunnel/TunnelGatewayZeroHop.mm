//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/TunnelGatewayZeroHop.java
//

#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/i2np/UnknownI2NPMessage.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/InboundMessageDistributor.h"
#include "net/i2p/router/tunnel/OutboundMessageDistributor.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/router/tunnel/TunnelGateway.h"
#include "net/i2p/router/tunnel/TunnelGatewayZeroHop.h"
#include "net/i2p/util/Log.h"

@interface NetI2pRouterTunnelTunnelGatewayZeroHop () {
 @public
  NetI2pRouterTunnelTunnelCreatorConfig *_config_;
  NetI2pRouterTunnelOutboundMessageDistributor *_outDistributor_;
  NetI2pRouterTunnelInboundMessageDistributor *_inDistributor_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelGatewayZeroHop, _config_, NetI2pRouterTunnelTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelGatewayZeroHop, _outDistributor_, NetI2pRouterTunnelOutboundMessageDistributor *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelTunnelGatewayZeroHop, _inDistributor_, NetI2pRouterTunnelInboundMessageDistributor *)

@implementation NetI2pRouterTunnelTunnelGatewayZeroHop

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)config {
  NetI2pRouterTunnelTunnelGatewayZeroHop_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(self, context, config);
  return self;
}

- (void)addWithNetI2pDataI2npTunnelGatewayMessage:(NetI2pDataI2npTunnelGatewayMessage *)msg {
  id<NetI2pDataI2npI2NPMessage> imsg = [((NetI2pDataI2npTunnelGatewayMessage *) nil_chk(msg)) getMessage];
  if ([((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) isInbound]) {
    if ([imsg isKindOfClass:[NetI2pDataI2npUnknownI2NPMessage class]]) {
      @try {
        NetI2pDataI2npUnknownI2NPMessage *umsg = (NetI2pDataI2npUnknownI2NPMessage *) cast_chk(imsg, [NetI2pDataI2npUnknownI2NPMessage class]);
        imsg = [((NetI2pDataI2npUnknownI2NPMessage *) nil_chk(umsg)) convert];
      }
      @catch (NetI2pDataI2npI2NPMessageException *ime) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"Unable to convert to std. msg. class at zero-hop IBGW" withJavaLangThrowable:ime];
        return;
      }
    }
  }
  [self addWithNetI2pDataI2npI2NPMessage:imsg withNetI2pDataHash:nil withNetI2pDataTunnelId:nil];
}

- (void)addWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg
                      withNetI2pDataHash:(NetI2pDataHash *)toRouter
                  withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$C$$@", @"zero hop gateway: distribute ", ([((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) isInbound] ? @"inbound" : @" outbound"), @" to ", (toRouter != nil ? [((NSString *) nil_chk([toRouter toBase64])) java_substring:0 endIndex:4] : @""), '.', (toTunnel != nil ? JreStrcat("J", [toTunnel getTunnelId]) : @""), @": ", msg)];
  if ([((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) isInbound]) {
    [((NetI2pRouterTunnelInboundMessageDistributor *) nil_chk(_inDistributor_)) distributeWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataHash:toRouter withNetI2pDataTunnelId:toTunnel];
  }
  else {
    [((NetI2pRouterTunnelOutboundMessageDistributor *) nil_chk(_outDistributor_)) distributeWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataHash:toRouter withNetI2pDataTunnelId:toTunnel];
  }
  [_config_ incrementProcessedMessages];
}

- (void)dealloc {
  RELEASE_(_config_);
  RELEASE_(_outDistributor_);
  RELEASE_(_inDistributor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:);
  methods[1].selector = @selector(addWithNetI2pDataI2npTunnelGatewayMessage:);
  methods[2].selector = @selector(addWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:withNetI2pDataTunnelId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_config_", "LNetI2pRouterTunnelTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outDistributor_", "LNetI2pRouterTunnelOutboundMessageDistributor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inDistributor_", "LNetI2pRouterTunnelInboundMessageDistributor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;", "add", "LNetI2pDataI2npTunnelGatewayMessage;", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;LNetI2pDataTunnelId;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelTunnelGatewayZeroHop = { "TunnelGatewayZeroHop", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 3, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelTunnelGatewayZeroHop;
}

@end

void NetI2pRouterTunnelTunnelGatewayZeroHop_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterTunnelTunnelGatewayZeroHop *self, NetI2pRouterRouterContext *context, NetI2pRouterTunnelTunnelCreatorConfig *config) {
  NetI2pRouterTunnelTunnelGateway_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelGateway_QueuePreprocessor_withNetI2pRouterTunnelTunnelGateway_Sender_withNetI2pRouterTunnelTunnelGateway_Receiver_(self, context, nil, nil, nil);
  JreStrongAssign(&self->_config_, config);
  if ([((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(config)) isInbound]) JreStrongAssignAndConsume(&self->_inDistributor_, new_NetI2pRouterTunnelInboundMessageDistributor_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(context, [config getDestination]));
  else JreStrongAssignAndConsume(&self->_outDistributor_, new_NetI2pRouterTunnelOutboundMessageDistributor_initWithNetI2pRouterRouterContext_withInt_(context, NetI2pRouterOutNetMessage_PRIORITY_MY_DATA));
}

NetI2pRouterTunnelTunnelGatewayZeroHop *new_NetI2pRouterTunnelTunnelGatewayZeroHop_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *context, NetI2pRouterTunnelTunnelCreatorConfig *config) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelTunnelGatewayZeroHop, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, context, config)
}

NetI2pRouterTunnelTunnelGatewayZeroHop *create_NetI2pRouterTunnelTunnelGatewayZeroHop_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *context, NetI2pRouterTunnelTunnelCreatorConfig *config) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelTunnelGatewayZeroHop, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, context, config)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelTunnelGatewayZeroHop)
