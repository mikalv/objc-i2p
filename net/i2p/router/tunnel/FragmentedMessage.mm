//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/FragmentedMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/router/tunnel/FragmentedMessage.h"
#include "net/i2p/router/tunnel/TrivialPreprocessor.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterTunnelFragmentedMessage () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  jlong _messageId_;
  NetI2pDataHash *_toRouter_;
  NetI2pDataTunnelId *_toTunnel_;
  IOSObjectArray *_fragments_;
  jboolean _lastReceived_;
  jint _highFragmentNum_;
  jlong _createdOn_;
  jboolean _completed_;
  jlong _releasedAfter_;
  NetI2pUtilSimpleTimer2_TimedEvent *_expireEvent_;
}

- (void)writeCompleteWithByteArray:(IOSByteArray *)target
                           withInt:(jint)offset;

- (void)releaseFragments;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _toRouter_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _toTunnel_, NetI2pDataTunnelId *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _fragments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelFragmentedMessage, _expireEvent_, NetI2pUtilSimpleTimer2_TimedEvent *)

inline NetI2pUtilByteCache *NetI2pRouterTunnelFragmentedMessage_get__cache(void);
static NetI2pUtilByteCache *NetI2pRouterTunnelFragmentedMessage__cache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTunnelFragmentedMessage, _cache, NetI2pUtilByteCache *)

inline jint NetI2pRouterTunnelFragmentedMessage_get_MAX_FRAGMENTS(void);
#define NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENTS 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentedMessage, MAX_FRAGMENTS, jint)

inline jint NetI2pRouterTunnelFragmentedMessage_get_MAX_FRAGMENT_SIZE(void);
#define NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENT_SIZE 996
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelFragmentedMessage, MAX_FRAGMENT_SIZE, jint)

__attribute__((unused)) static void NetI2pRouterTunnelFragmentedMessage_writeCompleteWithByteArray_withInt_(NetI2pRouterTunnelFragmentedMessage *self, IOSByteArray *target, jint offset);

__attribute__((unused)) static void NetI2pRouterTunnelFragmentedMessage_releaseFragments(NetI2pRouterTunnelFragmentedMessage *self);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterTunnelFragmentedMessage)

@implementation NetI2pRouterTunnelFragmentedMessage

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                   withLong:(jlong)messageId {
  NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(self, ctx, messageId);
  return self;
}

- (jboolean)receiveWithInt:(jint)fragmentNum
             withByteArray:(IOSByteArray *)payload
                   withInt:(jint)offset
                   withInt:(jint)length
               withBoolean:(jboolean)isLast {
  if (fragmentNum <= 0 || fragmentNum >= NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENTS) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$J", @"Bad followon fragment # == ", fragmentNum, @" for messageId ", _messageId_)];
    return false;
  }
  if (length <= 0 || length > NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENT_SIZE) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$J", @"Length is impossible (", length, @") for messageId ", _messageId_)];
    return false;
  }
  if (offset + length > ((IOSByteArray *) nil_chk(payload))->size_) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$ICI$I$J", @"Length is impossible (", length, '/', offset, @" out of ", payload->size_, @") for messageId ", _messageId_)];
    return false;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$I$I$Z$I", @"Receive message ", _messageId_, @" fragment ", fragmentNum, @" with ", length, @" bytes (last? ", isLast, @") offset = ", offset)];
  NetI2pDataByteArray *ba = [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentedMessage__cache)) acquire];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(payload, offset, [((NetI2pDataByteArray *) nil_chk(ba)) getData], 0, length);
  [ba setValidWithInt:length];
  [ba setOffsetWithInt:0];
  IOSObjectArray_Set(nil_chk(_fragments_), fragmentNum, ba);
  _lastReceived_ = (_lastReceived_ || isLast);
  if (fragmentNum > _highFragmentNum_) _highFragmentNum_ = fragmentNum;
  return true;
}

- (jboolean)receiveWithByteArray:(IOSByteArray *)payload
                         withInt:(jint)offset
                         withInt:(jint)length
                     withBoolean:(jboolean)isLast
              withNetI2pDataHash:(NetI2pDataHash *)toRouter
          withNetI2pDataTunnelId:(NetI2pDataTunnelId *)toTunnel {
  if (length <= 0 || length > NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENT_SIZE) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$I$J", @"Length is impossible (", length, @") for messageId ", _messageId_)];
    return false;
  }
  if (offset + length > ((IOSByteArray *) nil_chk(payload))->size_) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$ICI$I$J", @"Length is impossible (", length, '/', offset, @" out of ", payload->size_, @") for messageId ", _messageId_)];
    return false;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$I$Z$@$@$I", @"Receive message ", _messageId_, @" with ", length, @" bytes (last? ", isLast, @") targetting ", toRouter, @" / ", toTunnel, @" offset=", offset)];
  NetI2pDataByteArray *ba = [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentedMessage__cache)) acquire];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(payload, offset, [((NetI2pDataByteArray *) nil_chk(ba)) getData], 0, length);
  [ba setValidWithInt:length];
  [ba setOffsetWithInt:0];
  IOSObjectArray_Set(nil_chk(_fragments_), 0, ba);
  _lastReceived_ = (_lastReceived_ || isLast);
  JreStrongAssign(&_toRouter_, toRouter);
  JreStrongAssign(&_toTunnel_, toTunnel);
  if (_highFragmentNum_ < 0) _highFragmentNum_ = 0;
  return true;
}

- (jlong)getMessageId {
  return _messageId_;
}

- (NetI2pDataHash *)getTargetRouter {
  return _toRouter_;
}

- (NetI2pDataTunnelId *)getTargetTunnel {
  return _toTunnel_;
}

- (jint)getFragmentCount {
  jint found = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(_fragments_))->size_; i++) if (IOSObjectArray_Get(_fragments_, i) != nil) found++;
  return found;
}

- (NetI2pUtilSimpleTimer2_TimedEvent *)getExpireEvent {
  return _expireEvent_;
}

- (void)setExpireEventWithNetI2pUtilSimpleTimer2_TimedEvent:(NetI2pUtilSimpleTimer2_TimedEvent *)evt {
  JreStrongAssign(&_expireEvent_, evt);
}

- (jboolean)isComplete {
  if (!_lastReceived_) return false;
  for (jint i = 0; i <= _highFragmentNum_; i++) if (IOSObjectArray_Get(nil_chk(_fragments_), i) == nil) return false;
  return true;
}

- (jint)getCompleteSize {
  if (!_lastReceived_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"don't get the completed size when we're not complete!");
  if (_releasedAfter_ > 0) {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(@"use after free in FragmentedMessage");
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"FM completeSize()" withJavaLangThrowable:e];
    @throw e;
  }
  jint size = 0;
  for (jint i = 0; i <= _highFragmentNum_; i++) {
    NetI2pDataByteArray *ba = IOSObjectArray_Get(nil_chk(_fragments_), i);
    if (ba == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"don't get the completed size when we're not complete! - null fragment i=", i, @" of ", _highFragmentNum_));
    size += [ba getValid];
  }
  return size;
}

- (jlong)getLifetime {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - _createdOn_;
}

- (jboolean)getReleased {
  return _completed_;
}

- (void)writeCompleteWithByteArray:(IOSByteArray *)target
                           withInt:(jint)offset {
  NetI2pRouterTunnelFragmentedMessage_writeCompleteWithByteArray_withInt_(self, target, offset);
}

- (IOSByteArray *)toByteArray {
  @synchronized(self) {
    if (_releasedAfter_ > 0) return JreRetainedLocalValue(nil);
    IOSByteArray *rv = [IOSByteArray arrayWithLength:[self getCompleteSize]];
    NetI2pRouterTunnelFragmentedMessage_writeCompleteWithByteArray_withInt_(self, rv, 0);
    NetI2pRouterTunnelFragmentedMessage_releaseFragments(self);
    return JreRetainedLocalValue(rv);
  }
}

- (jlong)getReleasedAfter {
  return _releasedAfter_;
}

- (void)failed {
  @synchronized(self) {
    NetI2pRouterTunnelFragmentedMessage_releaseFragments(self);
  }
}

- (void)releaseFragments {
  NetI2pRouterTunnelFragmentedMessage_releaseFragments(self);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Fragments for "])) appendWithLong:_messageId_])) appendWithNSString:@": "];
  for (jint i = 0; i <= _highFragmentNum_; i++) {
    NetI2pDataByteArray *ba = IOSObjectArray_Get(nil_chk(_fragments_), i);
    if (ba != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithInt:i])) appendWithNSString:@":"])) appendWithInt:[ba getValid]])) appendWithNSString:@" bytes "];
    else [((JavaLangStringBuilder *) nil_chk([buf appendWithInt:i])) appendWithNSString:@":missing "];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" highest received: "])) appendWithInt:_highFragmentNum_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" last received? "])) appendWithBoolean:_lastReceived_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" lifetime: "])) appendWithNSString:NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - _createdOn_)];
  if (_toRouter_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" targetting "])) appendWithNSString:[((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(_toRouter_)) toBase64])) java_substring:0 endIndex:4]];
    if (_toTunnel_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@":"])) appendWithLong:[((NetI2pDataTunnelId *) nil_chk(_toTunnel_)) getTunnelId]];
  }
  if (_completed_) [buf appendWithNSString:@" completed"];
  if (_releasedAfter_ > 0) [buf appendWithNSString:JreStrcat("$$", @" released after ", NetI2pDataDataHelper_formatDurationWithLong_(_releasedAfter_))];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_toRouter_);
  RELEASE_(_toTunnel_);
  RELEASE_(_fragments_);
  RELEASE_(_expireEvent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSimpleTimer2_TimedEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withLong:);
  methods[1].selector = @selector(receiveWithInt:withByteArray:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(receiveWithByteArray:withInt:withInt:withBoolean:withNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[3].selector = @selector(getMessageId);
  methods[4].selector = @selector(getTargetRouter);
  methods[5].selector = @selector(getTargetTunnel);
  methods[6].selector = @selector(getFragmentCount);
  methods[7].selector = @selector(getExpireEvent);
  methods[8].selector = @selector(setExpireEventWithNetI2pUtilSimpleTimer2_TimedEvent:);
  methods[9].selector = @selector(isComplete);
  methods[10].selector = @selector(getCompleteSize);
  methods[11].selector = @selector(getLifetime);
  methods[12].selector = @selector(getReleased);
  methods[13].selector = @selector(writeCompleteWithByteArray:withInt:);
  methods[14].selector = @selector(toByteArray);
  methods[15].selector = @selector(getReleasedAfter);
  methods[16].selector = @selector(failed);
  methods[17].selector = @selector(releaseFragments);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_toRouter_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_toTunnel_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fragments_", "[LNetI2pDataByteArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastReceived_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_highFragmentNum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_createdOn_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_completed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_releasedAfter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expireEvent_", "LNetI2pUtilSimpleTimer2_TimedEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_cache", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "MAX_FRAGMENTS", "I", .constantValue.asInt = NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENTS, 0x1a, -1, -1, -1, -1 },
    { "MAX_FRAGMENT_SIZE", "I", .constantValue.asInt = NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENT_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;J", "receive", "I[BIIZ", "[BIIZLNetI2pDataHash;LNetI2pDataTunnelId;", "setExpireEvent", "LNetI2pUtilSimpleTimer2_TimedEvent;", "writeComplete", "[BI", "toString", &NetI2pRouterTunnelFragmentedMessage__cache };
  static const J2ObjcClassInfo _NetI2pRouterTunnelFragmentedMessage = { "FragmentedMessage", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 19, 15, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelFragmentedMessage;
}

+ (void)initialize {
  if (self == [NetI2pRouterTunnelFragmentedMessage class]) {
    JreStrongAssign(&NetI2pRouterTunnelFragmentedMessage__cache, NetI2pUtilByteCache_getInstanceWithInt_withInt_(512, NetI2pRouterTunnelTrivialPreprocessor_PREPROCESSED_SIZE));
    J2OBJC_SET_INITIALIZED(NetI2pRouterTunnelFragmentedMessage)
  }
}

@end

void NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(NetI2pRouterTunnelFragmentedMessage *self, NetI2pI2PAppContext *ctx, jlong messageId) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelFragmentedMessage_class_()]);
  self->_messageId_ = messageId;
  JreStrongAssignAndConsume(&self->_fragments_, [IOSObjectArray newArrayWithLength:NetI2pRouterTunnelFragmentedMessage_MAX_FRAGMENTS type:NetI2pDataByteArray_class_()]);
  self->_highFragmentNum_ = -1;
  self->_releasedAfter_ = -1;
  self->_createdOn_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
}

NetI2pRouterTunnelFragmentedMessage *new_NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(NetI2pI2PAppContext *ctx, jlong messageId) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelFragmentedMessage, initWithNetI2pI2PAppContext_withLong_, ctx, messageId)
}

NetI2pRouterTunnelFragmentedMessage *create_NetI2pRouterTunnelFragmentedMessage_initWithNetI2pI2PAppContext_withLong_(NetI2pI2PAppContext *ctx, jlong messageId) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelFragmentedMessage, initWithNetI2pI2PAppContext_withLong_, ctx, messageId)
}

void NetI2pRouterTunnelFragmentedMessage_writeCompleteWithByteArray_withInt_(NetI2pRouterTunnelFragmentedMessage *self, IOSByteArray *target, jint offset) {
  if (self->_releasedAfter_ > 0) {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(@"use after free in FragmentedMessage");
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"FM writeComplete() 2" withJavaLangThrowable:e];
    @throw e;
  }
  for (jint i = 0; i <= self->_highFragmentNum_; i++) {
    NetI2pDataByteArray *ba = IOSObjectArray_Get(nil_chk(self->_fragments_), i);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(ba)) getData], [ba getOffset], target, offset, [ba getValid]);
    offset += [ba getValid];
  }
  self->_completed_ = true;
}

void NetI2pRouterTunnelFragmentedMessage_releaseFragments(NetI2pRouterTunnelFragmentedMessage *self) {
  if (self->_releasedAfter_ > 0) {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(@"double free in FragmentedMessage");
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"FM releaseFragments()" withJavaLangThrowable:e];
    @throw e;
  }
  self->_releasedAfter_ = [self getLifetime];
  for (jint i = 0; i <= self->_highFragmentNum_; i++) {
    NetI2pDataByteArray *ba = IOSObjectArray_Get(nil_chk(self->_fragments_), i);
    if ((ba != nil) && (((IOSByteArray *) nil_chk([((NetI2pDataByteArray *) nil_chk(ba)) getData]))->size_ == NetI2pRouterTunnelTrivialPreprocessor_PREPROCESSED_SIZE)) {
      [((NetI2pUtilByteCache *) nil_chk(NetI2pRouterTunnelFragmentedMessage__cache)) release__WithId:ba];
      IOSObjectArray_Set(self->_fragments_, i, nil);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelFragmentedMessage)
