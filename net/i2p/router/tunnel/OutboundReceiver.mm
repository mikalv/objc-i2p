//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tunnel/OutboundReceiver.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/TunnelDataMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tunnel/HopConfig.h"
#include "net/i2p/router/tunnel/OutboundReceiver.h"
#include "net/i2p/router/tunnel/TunnelCreatorConfig.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTunnelOutboundReceiver () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  NetI2pRouterTunnelTunnelCreatorConfig *_config_;
  NetI2pDataRouterRouterInfo *_nextHopCache_;
  jint _priority_;
}

- (void)sendWithNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg
                 withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundReceiver, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundReceiver, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundReceiver, _config_, NetI2pRouterTunnelTunnelCreatorConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundReceiver, _nextHopCache_, NetI2pDataRouterRouterInfo *)

inline jlong NetI2pRouterTunnelOutboundReceiver_get_MAX_LOOKUP_TIME(void);
#define NetI2pRouterTunnelOutboundReceiver_MAX_LOOKUP_TIME 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelOutboundReceiver, MAX_LOOKUP_TIME, jlong)

inline jint NetI2pRouterTunnelOutboundReceiver_get_PRIORITY(void);
#define NetI2pRouterTunnelOutboundReceiver_PRIORITY 425
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTunnelOutboundReceiver, PRIORITY, jint)

__attribute__((unused)) static void NetI2pRouterTunnelOutboundReceiver_sendWithNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(NetI2pRouterTunnelOutboundReceiver *self, NetI2pDataI2npTunnelDataMessage *msg, NetI2pDataRouterRouterInfo *ri);

@interface NetI2pRouterTunnelOutboundReceiver_SendJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelOutboundReceiver *this$0_;
  NetI2pDataI2npTunnelDataMessage *_msg_;
}

- (instancetype)initWithNetI2pRouterTunnelOutboundReceiver:(NetI2pRouterTunnelOutboundReceiver *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                       withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelOutboundReceiver_SendJob)

J2OBJC_FIELD_SETTER(NetI2pRouterTunnelOutboundReceiver_SendJob, _msg_, NetI2pDataI2npTunnelDataMessage *)

__attribute__((unused)) static void NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver_SendJob *self, NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

__attribute__((unused)) static NetI2pRouterTunnelOutboundReceiver_SendJob *new_NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelOutboundReceiver_SendJob *create_NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelOutboundReceiver_SendJob)

@interface NetI2pRouterTunnelOutboundReceiver_FailedJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterTunnelOutboundReceiver *this$0_;
}

- (instancetype)initWithNetI2pRouterTunnelOutboundReceiver:(NetI2pRouterTunnelOutboundReceiver *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterTunnelOutboundReceiver_FailedJob)

__attribute__((unused)) static void NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver_FailedJob *self, NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterTunnelOutboundReceiver_FailedJob *new_NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterTunnelOutboundReceiver_FailedJob *create_NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterTunnelOutboundReceiver_FailedJob)

@implementation NetI2pRouterTunnelOutboundReceiver

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
        withNetI2pRouterTunnelTunnelCreatorConfig:(NetI2pRouterTunnelTunnelCreatorConfig *)cfg {
  NetI2pRouterTunnelOutboundReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(self, ctx, cfg);
  return self;
}

- (jlong)receiveEncryptedWithByteArray:(IOSByteArray *)encrypted {
  NetI2pDataI2npTunnelDataMessage *msg = create_NetI2pDataI2npTunnelDataMessage_initWithNetI2pI2PAppContext_(_context_);
  [msg setDataWithByteArray:encrypted];
  [msg setTunnelIdWithNetI2pDataTunnelId:[((NetI2pRouterTunnelHopConfig *) nil_chk([((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) getConfigWithInt:0])) getSendTunnel]];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"received encrypted, sending out ", _config_, @": ", msg)];
  NetI2pDataRouterRouterInfo *ri = _nextHopCache_;
  if (ri == nil) ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[_config_ getPeerWithInt:1]];
  if (ri != nil) {
    JreStrongAssign(&_nextHopCache_, ri);
    NetI2pRouterTunnelOutboundReceiver_sendWithNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(self, msg, ri);
    return [msg getUniqueId];
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$@", @"lookup of ", [_config_ getPeerWithInt:1], @" required for ", msg)];
    [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) lookupRouterInfoWithNetI2pDataHash:[_config_ getPeerWithInt:1] withNetI2pRouterJob:create_NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, _context_, msg) withNetI2pRouterJob:create_NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(self, _context_) withLong:NetI2pRouterTunnelOutboundReceiver_MAX_LOOKUP_TIME];
    return -1;
  }
}

- (NetI2pDataHash *)getSendTo {
  return [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(_config_)) getPeerWithInt:1];
}

- (void)sendWithNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg
                 withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)ri {
  NetI2pRouterTunnelOutboundReceiver_sendWithNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(self, msg, ri);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_config_);
  RELEASE_(_nextHopCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pRouterTunnelTunnelCreatorConfig:);
  methods[1].selector = @selector(receiveEncryptedWithByteArray:);
  methods[2].selector = @selector(getSendTo);
  methods[3].selector = @selector(sendWithNetI2pDataI2npTunnelDataMessage:withNetI2pDataRouterRouterInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_config_", "LNetI2pRouterTunnelTunnelCreatorConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextHopCache_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_LOOKUP_TIME", "J", .constantValue.asLong = NetI2pRouterTunnelOutboundReceiver_MAX_LOOKUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "PRIORITY", "I", .constantValue.asInt = NetI2pRouterTunnelOutboundReceiver_PRIORITY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pRouterTunnelTunnelCreatorConfig;", "receiveEncrypted", "[B", "send", "LNetI2pDataI2npTunnelDataMessage;LNetI2pDataRouterRouterInfo;", "LNetI2pRouterTunnelOutboundReceiver_SendJob;LNetI2pRouterTunnelOutboundReceiver_FailedJob;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelOutboundReceiver = { "OutboundReceiver", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x0, 4, 7, -1, 5, -1, -1, -1 };
  return &_NetI2pRouterTunnelOutboundReceiver;
}

@end

void NetI2pRouterTunnelOutboundReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterTunnelOutboundReceiver *self, NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTunnelOutboundReceiver_class_()]);
  JreStrongAssign(&self->_config_, cfg);
  JreStrongAssign(&self->_nextHopCache_, [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(self->_config_)) getPeerWithInt:1]]);
  self->_priority_ = NetI2pRouterTunnelOutboundReceiver_PRIORITY + [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(cfg)) getPriority];
}

NetI2pRouterTunnelOutboundReceiver *new_NetI2pRouterTunnelOutboundReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelOutboundReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

NetI2pRouterTunnelOutboundReceiver *create_NetI2pRouterTunnelOutboundReceiver_initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_(NetI2pRouterRouterContext *ctx, NetI2pRouterTunnelTunnelCreatorConfig *cfg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelOutboundReceiver, initWithNetI2pRouterRouterContext_withNetI2pRouterTunnelTunnelCreatorConfig_, ctx, cfg)
}

void NetI2pRouterTunnelOutboundReceiver_sendWithNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(NetI2pRouterTunnelOutboundReceiver *self, NetI2pDataI2npTunnelDataMessage *msg, NetI2pDataRouterRouterInfo *ri) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@$J", @"forwarding encrypted data out ", self->_config_, @": ", [((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getUniqueId])];
  NetI2pRouterOutNetMessage *m = create_NetI2pRouterOutNetMessage_initWithNetI2pRouterRouterContext_withNetI2pDataI2npI2NPMessage_withLong_withInt_withNetI2pDataRouterRouterInfo_(self->_context_, msg, [((NetI2pDataI2npTunnelDataMessage *) nil_chk(msg)) getMessageExpiration], self->_priority_, ri);
  [((NetI2pRouterOutNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) outNetMessagePool])) addWithNetI2pRouterOutNetMessage:m];
  [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(self->_config_)) incrementProcessedMessages];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelOutboundReceiver)

@implementation NetI2pRouterTunnelOutboundReceiver_SendJob

- (instancetype)initWithNetI2pRouterTunnelOutboundReceiver:(NetI2pRouterTunnelOutboundReceiver *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                       withNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *)msg {
  NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(self, outer$, ctx, msg);
  return self;
}

- (NSString *)getName {
  return @"OBGW send after lookup";
}

- (void)runJob {
  NetI2pDataRouterRouterInfo *ri = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(this$0_->_config_)) getPeerWithInt:1]];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$@$Z", @"lookup of ", [this$0_->_config_ getPeerWithInt:1], @" successful? ", (ri != nil))];
  jint stat;
  if (ri != nil) {
    JreStrongAssign(&this$0_->_nextHopCache_, ri);
    NetI2pRouterTunnelOutboundReceiver_sendWithNetI2pDataI2npTunnelDataMessage_withNetI2pDataRouterRouterInfo_(this$0_, _msg_, ri);
    stat = 1;
  }
  else {
    stat = 0;
  }
  [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"tunnel.outboundLookupSuccess" withLong:stat];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelOutboundReceiver:withNetI2pRouterRouterContext:withNetI2pDataI2npTunnelDataMessage:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelOutboundReceiver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pDataI2npTunnelDataMessage;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataI2npTunnelDataMessage;", "LNetI2pRouterTunnelOutboundReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelOutboundReceiver_SendJob = { "SendJob", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelOutboundReceiver_SendJob;
}

@end

void NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver_SendJob *self, NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_msg_, msg);
}

NetI2pRouterTunnelOutboundReceiver_SendJob *new_NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelOutboundReceiver_SendJob, initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

NetI2pRouterTunnelOutboundReceiver_SendJob *create_NetI2pRouterTunnelOutboundReceiver_SendJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx, NetI2pDataI2npTunnelDataMessage *msg) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelOutboundReceiver_SendJob, initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_withNetI2pDataI2npTunnelDataMessage_, outer$, ctx, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelOutboundReceiver_SendJob)

@implementation NetI2pRouterTunnelOutboundReceiver_FailedJob

- (instancetype)initWithNetI2pRouterTunnelOutboundReceiver:(NetI2pRouterTunnelOutboundReceiver *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"OBGW lookup fail";
}

- (void)runJob {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$@$@", @"lookup of ", [((NetI2pRouterTunnelTunnelCreatorConfig *) nil_chk(this$0_->_config_)) getPeerWithInt:1], @" failed for ", this$0_->_config_)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) statManager])) addRateDataWithNSString:@"tunnel.outboundLookupSuccess" withLong:0];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterTunnelOutboundReceiver:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterTunnelOutboundReceiver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterTunnelOutboundReceiver;" };
  static const J2ObjcClassInfo _NetI2pRouterTunnelOutboundReceiver_FailedJob = { "FailedJob", "net.i2p.router.tunnel", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterTunnelOutboundReceiver_FailedJob;
}

@end

void NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver_FailedJob *self, NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterTunnelOutboundReceiver_FailedJob *new_NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTunnelOutboundReceiver_FailedJob, initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterTunnelOutboundReceiver_FailedJob *create_NetI2pRouterTunnelOutboundReceiver_FailedJob_initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_(NetI2pRouterTunnelOutboundReceiver *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTunnelOutboundReceiver_FailedJob, initWithNetI2pRouterTunnelOutboundReceiver_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTunnelOutboundReceiver_FailedJob)
