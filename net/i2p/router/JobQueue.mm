//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/JobQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobQueueRunner.h"
#include "net/i2p/router/JobStats.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterClock.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/message/HandleGarlicMessageJob.h"
#include "net/i2p/router/networkdb/kademlia/HandleFloodfillDatabaseLookupMessageJob.h"
#include "net/i2p/router/networkdb/kademlia/IterativeSearchJob.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@class NetI2pRouterJobQueue_QueuePumper;

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pRouterJobQueue () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  id<JavaUtilMap> _queueRunners_;
  id<JavaUtilConcurrentBlockingQueue> _readyJobs_;
  id<JavaUtilSet> _timedJobs_;
  JavaUtilConcurrentConcurrentHashMap *_jobStats_;
  NetI2pRouterJobQueue_QueuePumper *_pumper_;
  volatile_jboolean _allowParallelOperation_;
  volatile_jboolean _alive_;
  id _jobLock_;
  volatile_jlong _nextPumperRun_;
  jlong _lagWarning_;
  jlong _lagFatal_;
  jlong _runWarning_;
  jlong _runFatal_;
  jlong _warmupTime_;
  jint _maxWaitingJobs_;
  id _runnerLock_;
}

- (jboolean)shouldDropWithNetI2pRouterJob:(id<NetI2pRouterJob>)job
                                 withLong:(jlong)numReady;

- (void)updateJobTimingsWithLong:(jlong)delta;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _queueRunners_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _readyJobs_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _timedJobs_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _jobStats_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _pumper_, NetI2pRouterJobQueue_QueuePumper *)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _jobLock_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterJobQueue, _runnerLock_, id)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterJobQueue_get__runnerId(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pRouterJobQueue__runnerId;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, _runnerId, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint NetI2pRouterJobQueue_get_RUNNERS(void);
static jint NetI2pRouterJobQueue_RUNNERS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterJobQueue, RUNNERS, jint)

inline jint NetI2pRouterJobQueue_get_DEFAULT_MAX_RUNNERS(void);
#define NetI2pRouterJobQueue_DEFAULT_MAX_RUNNERS 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_MAX_RUNNERS, jint)

inline NSString *NetI2pRouterJobQueue_get_PROP_MAX_RUNNERS(void);
static NSString *NetI2pRouterJobQueue_PROP_MAX_RUNNERS = @"router.maxJobRunners";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_MAX_RUNNERS, NSString *)

inline jlong NetI2pRouterJobQueue_get_MAX_LIMIT_UPDATE_DELAY(void);
#define NetI2pRouterJobQueue_MAX_LIMIT_UPDATE_DELAY 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, MAX_LIMIT_UPDATE_DELAY, jlong)

inline jlong NetI2pRouterJobQueue_get_DEFAULT_LAG_WARNING(void);
#define NetI2pRouterJobQueue_DEFAULT_LAG_WARNING 5000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_LAG_WARNING, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_LAG_WARNING(void);
static NSString *NetI2pRouterJobQueue_PROP_LAG_WARNING = @"router.jobLagWarning";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_LAG_WARNING, NSString *)

inline jlong NetI2pRouterJobQueue_get_DEFAULT_LAG_FATAL(void);
#define NetI2pRouterJobQueue_DEFAULT_LAG_FATAL 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_LAG_FATAL, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_LAG_FATAL(void);
static NSString *NetI2pRouterJobQueue_PROP_LAG_FATAL = @"router.jobLagFatal";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_LAG_FATAL, NSString *)

inline jlong NetI2pRouterJobQueue_get_DEFAULT_RUN_WARNING(void);
#define NetI2pRouterJobQueue_DEFAULT_RUN_WARNING 5000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_RUN_WARNING, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_RUN_WARNING(void);
static NSString *NetI2pRouterJobQueue_PROP_RUN_WARNING = @"router.jobRunWarning";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_RUN_WARNING, NSString *)

inline jlong NetI2pRouterJobQueue_get_DEFAULT_RUN_FATAL(void);
#define NetI2pRouterJobQueue_DEFAULT_RUN_FATAL 30000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_RUN_FATAL, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_RUN_FATAL(void);
static NSString *NetI2pRouterJobQueue_PROP_RUN_FATAL = @"router.jobRunFatal";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_RUN_FATAL, NSString *)

inline jlong NetI2pRouterJobQueue_get_DEFAULT_WARMUP_TIME(void);
#define NetI2pRouterJobQueue_DEFAULT_WARMUP_TIME 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_WARMUP_TIME, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_WARMUP_TIME(void);
static NSString *NetI2pRouterJobQueue_PROP_WARMUP_TIME = @"router.jobWarmupTime";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_WARMUP_TIME, NSString *)

inline jint NetI2pRouterJobQueue_get_DEFAULT_MAX_WAITING_JOBS(void);
#define NetI2pRouterJobQueue_DEFAULT_MAX_WAITING_JOBS 25
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, DEFAULT_MAX_WAITING_JOBS, jint)

inline jlong NetI2pRouterJobQueue_get_MIN_LAG_TO_DROP(void);
#define NetI2pRouterJobQueue_MIN_LAG_TO_DROP 500LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, MIN_LAG_TO_DROP, jlong)

inline NSString *NetI2pRouterJobQueue_get_PROP_MAX_WAITING_JOBS(void);
static NSString *NetI2pRouterJobQueue_PROP_MAX_WAITING_JOBS = @"router.maxWaitingJobs";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterJobQueue, PROP_MAX_WAITING_JOBS, NSString *)

inline jint NetI2pRouterJobQueue_get_POISON_ID(void);
#define NetI2pRouterJobQueue_POISON_ID -99999
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterJobQueue, POISON_ID, jint)

__attribute__((unused)) static jboolean NetI2pRouterJobQueue_shouldDropWithNetI2pRouterJob_withLong_(NetI2pRouterJobQueue *self, id<NetI2pRouterJob> job, jlong numReady);

__attribute__((unused)) static void NetI2pRouterJobQueue_updateJobTimingsWithLong_(NetI2pRouterJobQueue *self, jlong delta);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$7(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$8(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterJobQueue__Annotations$9(void);

@interface NetI2pRouterJobQueue_QueuePumper : NSObject < JavaLangRunnable, NetI2pUtilClock_ClockUpdateListener, NetI2pRouterRouterClock_ClockShiftListener > {
 @public
  NetI2pRouterJobQueue *this$0_;
}

- (instancetype)initWithNetI2pRouterJobQueue:(NetI2pRouterJobQueue *)outer$;

- (void)run;

- (void)offsetChangedWithLong:(jlong)delta;

- (void)clockShiftWithLong:(jlong)delta;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterJobQueue_QueuePumper)

__attribute__((unused)) static void NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue_QueuePumper *self, NetI2pRouterJobQueue *outer$);

__attribute__((unused)) static NetI2pRouterJobQueue_QueuePumper *new_NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterJobQueue_QueuePumper *create_NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterJobQueue_QueuePumper)

@interface NetI2pRouterJobQueue_PoisonJob : NSObject < NetI2pRouterJob >

- (instancetype)init;

- (NSString *)getName;

- (jlong)getJobId;

- (NetI2pRouterJobTiming *)getTiming;

- (void)runJob;

- (JavaLangException *)getAddedBy;

- (void)dropped;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterJobQueue_PoisonJob)

__attribute__((unused)) static void NetI2pRouterJobQueue_PoisonJob_init(NetI2pRouterJobQueue_PoisonJob *self);

__attribute__((unused)) static NetI2pRouterJobQueue_PoisonJob *new_NetI2pRouterJobQueue_PoisonJob_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterJobQueue_PoisonJob *create_NetI2pRouterJobQueue_PoisonJob_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterJobQueue_PoisonJob)

@interface NetI2pRouterJobQueue_JobComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(id<NetI2pRouterJob>)l
               withId:(id<NetI2pRouterJob>)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterJobQueue_JobComparator)

__attribute__((unused)) static void NetI2pRouterJobQueue_JobComparator_init(NetI2pRouterJobQueue_JobComparator *self);

__attribute__((unused)) static NetI2pRouterJobQueue_JobComparator *new_NetI2pRouterJobQueue_JobComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterJobQueue_JobComparator *create_NetI2pRouterJobQueue_JobComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterJobQueue_JobComparator)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterJobQueue)

@implementation NetI2pRouterJobQueue

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterJobQueue_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)addJobWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  if (job == nil || !JreLoadVolatileBoolean(&_alive_)) return;
  jlong numReady;
  jboolean alreadyExists = false;
  jboolean dropped = false;
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jlong start = [((NetI2pRouterJobTiming *) nil_chk([job getTiming])) getStartAfter];
  if (start > now + 3 * 24 * 60 * 60 * 1000LL) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@C@", @"Scheduling job far in the future: ", (create_JavaUtilDate_initWithLong_(start)), ' ', job)];
  }
  @synchronized(_jobLock_) {
    if ([((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) containsWithId:job]) alreadyExists = true;
    numReady = [_readyJobs_ size];
    if (!alreadyExists) {
      jboolean removed = [((id<JavaUtilSet>) nil_chk(_timedJobs_)) removeWithId:job];
      if (removed && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$@", @"Rescheduling job: ", job)];
    }
    if ((!alreadyExists) && NetI2pRouterJobQueue_shouldDropWithNetI2pRouterJob_withLong_(self, job, numReady)) {
      [job dropped];
      dropped = true;
    }
    else {
      if (!alreadyExists) {
        if (start <= now) {
          [((NetI2pRouterJobTiming *) nil_chk([job getTiming])) setStartAfterWithLong:now];
          if ([job isKindOfClass:[NetI2pRouterJobImpl class]]) [((NetI2pRouterJobImpl *) cast_chk(job, [NetI2pRouterJobImpl class])) madeReady];
          [_readyJobs_ offerWithId:job];
        }
        else {
          [((id<JavaUtilSet>) nil_chk(_timedJobs_)) addWithId:job];
          if (start < JreLoadVolatileLong(&_nextPumperRun_)) [nil_chk(_jobLock_) java_notifyAll];
        }
      }
    }
  }
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"jobQueue.readyJobs" withLong:numReady];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"jobQueue.queuedJobs" withLong:[((id<JavaUtilSet>) nil_chk(_timedJobs_)) size]];
  if (dropped) {
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"jobQueue.droppedJobs" withLong:1];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$J$@", @"Dropping job due to overload!  # ready jobs: ", numReady, @": job = ", job)];
    NSString *key = [job getName];
    NetI2pRouterJobStats *stats = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_jobStats_)) getWithId:key];
    if (stats == nil) {
      stats = create_NetI2pRouterJobStats_initWithNSString_(key);
      NetI2pRouterJobStats *old = [_jobStats_ putIfAbsentWithId:key withId:stats];
      if (old != nil) stats = old;
    }
    [stats jobDropped];
  }
}

- (void)removeJobWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  @synchronized(_jobLock_) {
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) removeWithId:job];
    [((id<JavaUtilSet>) nil_chk(_timedJobs_)) removeWithId:job];
  }
}

- (jboolean)isJobActiveWithNetI2pRouterJob:(id<NetI2pRouterJob>)job {
  @synchronized(_jobLock_) {
    if ([((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) containsWithId:job] || [((id<JavaUtilSet>) nil_chk(_timedJobs_)) containsWithId:job]) return true;
  }
  for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) if ([((NetI2pRouterJobQueueRunner *) nil_chk(runner)) getCurrentJob] == job) return true;
  return false;
}

- (void)timingUpdated {
  @synchronized(_jobLock_) {
    [nil_chk(_jobLock_) java_notifyAll];
  }
}

- (jint)getReadyCount {
  return [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) size];
}

- (jlong)getMaxLag {
  id<NetI2pRouterJob> j = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) peek];
  if (j == nil) return 0;
  NetI2pRouterJobTiming *jt = [j getTiming];
  if (jt == nil) return 0;
  jlong startAfter = [jt getStartAfter];
  return [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - startAfter;
}

- (jboolean)shouldDropWithNetI2pRouterJob:(id<NetI2pRouterJob>)job
                                 withLong:(jlong)numReady {
  return NetI2pRouterJobQueue_shouldDropWithNetI2pRouterJob_withLong_(self, job, numReady);
}

- (void)allowParallelOperation {
  JreAssignVolatileBoolean(&_allowParallelOperation_, true);
  [self runQueueWithInt:[((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterJobQueue_PROP_MAX_RUNNERS withInt:NetI2pRouterJobQueue_RUNNERS]];
}

- (void)startup {
  JreAssignVolatileBoolean(&_alive_, true);
  NetI2pUtilI2PThread *pumperThread = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(_pumper_, @"Job Queue Pumper", true);
  [pumperThread setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
  [pumperThread start];
}

- (void)restart {
  @synchronized(_jobLock_) {
    [((id<JavaUtilSet>) nil_chk(_timedJobs_)) clear];
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) clear];
    [nil_chk(_jobLock_) java_notifyAll];
  }
}

- (void)shutdown {
  JreAssignVolatileBoolean(&_alive_, false);
  @synchronized(_jobLock_) {
    [((id<JavaUtilSet>) nil_chk(_timedJobs_)) clear];
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) clear];
    [nil_chk(_jobLock_) java_notifyAll];
  }
  id<NetI2pRouterJob> poison = create_NetI2pRouterJobQueue_PoisonJob_init();
  for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) {
    [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) stopRunning];
    [_readyJobs_ offerWithId:poison];
  }
  [_queueRunners_ clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_jobStats_)) clear];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterJobQueue__runnerId)) setWithInt:0];
}

- (jboolean)isAlive {
  return JreLoadVolatileBoolean(&_alive_);
}

- (jlong)getLastJobBegin {
  jlong when = -1;
  for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) {
    jlong cur = [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) getLastBegin];
    if (cur > when) cur = when;
  }
  return when;
}

- (jlong)getLastJobEnd {
  jlong when = -1;
  for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) {
    jlong cur = [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) getLastEnd];
    if (cur > when) cur = when;
  }
  return when;
}

- (id<NetI2pRouterJob>)getLastJob {
  id<NetI2pRouterJob> j = nil;
  jlong when = -1;
  for (NetI2pRouterJobQueueRunner * __strong cur in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) {
    if ([((NetI2pRouterJobQueueRunner *) nil_chk(cur)) getLastBegin] > when) {
      j = [cur getCurrentJob];
      when = [cur getLastBegin];
    }
  }
  return j;
}

- (id<NetI2pRouterJob>)getNext {
  while (JreLoadVolatileBoolean(&_alive_)) {
    @try {
      id<NetI2pRouterJob> j = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_readyJobs_)) take];
      if ([((id<NetI2pRouterJob>) nil_chk(j)) getJobId] == NetI2pRouterJobQueue_POISON_ID) break;
      return j;
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"No longer alive, returning null"];
  return nil;
}

- (void)runQueueWithInt:(jint)numThreads {
  @synchronized(self) {
    if ((![((id<JavaUtilMap>) nil_chk(_queueRunners_)) isEmpty]) && (!JreLoadVolatileBoolean(&_allowParallelOperation_))) return;
    if ([_queueRunners_ size] < numThreads) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I", @"Increasing the number of queue runners from ", [_queueRunners_ size], @" to ", numThreads)];
      for (jint i = [_queueRunners_ size]; i < numThreads; i++) {
        NetI2pRouterJobQueueRunner *runner = create_NetI2pRouterJobQueueRunner_initWithNetI2pRouterRouterContext_withInt_(_context_, i);
        [_queueRunners_ putWithId:JavaLangInteger_valueOfWithInt_(i) withId:runner];
        [runner setNameWithNSString:JreStrcat("$ICI", @"JobQueue ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(NetI2pRouterJobQueue__runnerId)) incrementAndGet], '/', numThreads)];
        [runner start];
      }
    }
    else if ([_queueRunners_ size] == numThreads) {
      for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([_queueRunners_ values])) {
        [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) startRunning];
      }
    }
    else {
    }
  }
}

- (void)removeRunnerWithInt:(jint)id_ {
  [((id<JavaUtilMap>) nil_chk(_queueRunners_)) removeWithId:JavaLangInteger_valueOfWithInt_(id_)];
}

- (void)updateJobTimingsWithLong:(jlong)delta {
  NetI2pRouterJobQueue_updateJobTimingsWithLong_(self, delta);
}

- (void)updateStatsWithNetI2pRouterJob:(id<NetI2pRouterJob>)job
                              withLong:(jlong)doStart
                              withLong:(jlong)origStartAfter
                              withLong:(jlong)duration {
  if ([((NetI2pRouterRouterContext *) nil_chk(_context_)) router] == nil) return;
  NSString *key = [((id<NetI2pRouterJob>) nil_chk(job)) getName];
  jlong lag = doStart - origStartAfter;
  NetI2pRouterMessageHistory *hist = [_context_ messageHistory];
  jlong uptime = [((NetI2pRouterRouter *) nil_chk([_context_ router])) getUptime];
  if (lag < 0) lag = 0;
  if (duration < 0) duration = 0;
  NetI2pRouterJobStats *stats = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_jobStats_)) getWithId:key];
  if (stats == nil) {
    stats = create_NetI2pRouterJobStats_initWithNSString_(key);
    NetI2pRouterJobStats *old = [_jobStats_ putIfAbsentWithId:key withId:stats];
    if (old != nil) stats = old;
  }
  [stats jobRanWithLong:duration withLong:lag];
  NSString *dieMsg = nil;
  if (lag > _lagWarning_) {
    dieMsg = JreStrcat("$$$J$J$", @"Lag too long for job ", [job getName], @" [", lag, @"ms and a run time of ", duration, @"ms]");
  }
  else if (duration > _runWarning_) {
    dieMsg = JreStrcat("$$$J$J$", @"Job run too long for job ", [job getName], @" [", lag, @"ms lag and run time of ", duration, @"ms]");
  }
  if (dieMsg != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:dieMsg];
    if (hist != nil) [hist messageProcessingErrorWithLong:-1 withNSString:[NetI2pRouterJobQueue_class_() getName] withNSString:dieMsg];
  }
  if ((lag > _lagFatal_) && (uptime > _warmupTime_)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ logWithInt:NetI2pUtilLog_WARN withNSString:@"The router is either incredibly overloaded or (more likely) there's an error." withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"ttttooooo mmmuuuccccchhhh llllaaagggg")];
    return;
  }
  if ((uptime > _warmupTime_) && (duration > _runFatal_)) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ logWithInt:NetI2pUtilLog_WARN withNSString:@"The router is incredibly overloaded - either you have a 386, or (more likely) there's an error. " withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"ttttooooo sssllloooowww")];
    return;
  }
}

- (jint)getJobsWithJavaUtilCollection:(id<JavaUtilCollection>)readyJobs
               withJavaUtilCollection:(id<JavaUtilCollection>)timedJobs
               withJavaUtilCollection:(id<JavaUtilCollection>)activeJobs
               withJavaUtilCollection:(id<JavaUtilCollection>)justFinishedJobs {
  for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(_queueRunners_)) values])) {
    id<NetI2pRouterJob> job = [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) getCurrentJob];
    if (job != nil) {
      [((id<JavaUtilCollection>) nil_chk(activeJobs)) addWithId:job];
    }
    else {
      job = [runner getLastJob];
      if (job != nil) [((id<JavaUtilCollection>) nil_chk(justFinishedJobs)) addWithId:job];
    }
  }
  @synchronized(_jobLock_) {
    [((id<JavaUtilCollection>) nil_chk(readyJobs)) addAllWithJavaUtilCollection:_readyJobs_];
    [((id<JavaUtilCollection>) nil_chk(timedJobs)) addAllWithJavaUtilCollection:_timedJobs_];
  }
  return [_queueRunners_ size];
}

- (id<JavaUtilCollection>)getJobStats {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_jobStats_)) values]);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_queueRunners_);
  RELEASE_(_readyJobs_);
  RELEASE_(_timedJobs_);
  RELEASE_(_jobStats_);
  RELEASE_(_pumper_);
  RELEASE_(_jobLock_);
  RELEASE_(_runnerLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJob;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 23, -1, 24, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(addJobWithNetI2pRouterJob:);
  methods[2].selector = @selector(removeJobWithNetI2pRouterJob:);
  methods[3].selector = @selector(isJobActiveWithNetI2pRouterJob:);
  methods[4].selector = @selector(timingUpdated);
  methods[5].selector = @selector(getReadyCount);
  methods[6].selector = @selector(getMaxLag);
  methods[7].selector = @selector(shouldDropWithNetI2pRouterJob:withLong:);
  methods[8].selector = @selector(allowParallelOperation);
  methods[9].selector = @selector(startup);
  methods[10].selector = @selector(restart);
  methods[11].selector = @selector(shutdown);
  methods[12].selector = @selector(isAlive);
  methods[13].selector = @selector(getLastJobBegin);
  methods[14].selector = @selector(getLastJobEnd);
  methods[15].selector = @selector(getLastJob);
  methods[16].selector = @selector(getNext);
  methods[17].selector = @selector(runQueueWithInt:);
  methods[18].selector = @selector(removeRunnerWithInt:);
  methods[19].selector = @selector(updateJobTimingsWithLong:);
  methods[20].selector = @selector(updateStatsWithNetI2pRouterJob:withLong:withLong:withLong:);
  methods[21].selector = @selector(getJobsWithJavaUtilCollection:withJavaUtilCollection:withJavaUtilCollection:withJavaUtilCollection:);
  methods[22].selector = @selector(getJobStats);
  methods[23].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_queueRunners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "_runnerId", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "_readyJobs_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "_timedJobs_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "_jobStats_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "_pumper_", "LNetI2pRouterJobQueue_QueuePumper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_allowParallelOperation_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_jobLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nextPumperRun_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "RUNNERS", "I", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "DEFAULT_MAX_RUNNERS", "I", .constantValue.asInt = NetI2pRouterJobQueue_DEFAULT_MAX_RUNNERS, 0x1a, -1, -1, -1, -1 },
    { "PROP_MAX_RUNNERS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "MAX_LIMIT_UPDATE_DELAY", "J", .constantValue.asLong = NetI2pRouterJobQueue_MAX_LIMIT_UPDATE_DELAY, 0x1a, -1, -1, -1, -1 },
    { "_lagWarning_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_LAG_WARNING", "J", .constantValue.asLong = NetI2pRouterJobQueue_DEFAULT_LAG_WARNING, 0x1a, -1, -1, -1, -1 },
    { "PROP_LAG_WARNING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, 33 },
    { "_lagFatal_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_LAG_FATAL", "J", .constantValue.asLong = NetI2pRouterJobQueue_DEFAULT_LAG_FATAL, 0x1a, -1, -1, -1, -1 },
    { "PROP_LAG_FATAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, 35 },
    { "_runWarning_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_RUN_WARNING", "J", .constantValue.asLong = NetI2pRouterJobQueue_DEFAULT_RUN_WARNING, 0x1a, -1, -1, -1, -1 },
    { "PROP_RUN_WARNING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, 37 },
    { "_runFatal_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_RUN_FATAL", "J", .constantValue.asLong = NetI2pRouterJobQueue_DEFAULT_RUN_FATAL, 0x1a, -1, -1, -1, -1 },
    { "PROP_RUN_FATAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, 39 },
    { "_warmupTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_WARMUP_TIME", "J", .constantValue.asLong = NetI2pRouterJobQueue_DEFAULT_WARMUP_TIME, 0x1a, -1, -1, -1, -1 },
    { "PROP_WARMUP_TIME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, 41 },
    { "_maxWaitingJobs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_MAX_WAITING_JOBS", "I", .constantValue.asInt = NetI2pRouterJobQueue_DEFAULT_MAX_WAITING_JOBS, 0x1a, -1, -1, -1, -1 },
    { "MIN_LAG_TO_DROP", "J", .constantValue.asLong = NetI2pRouterJobQueue_MIN_LAG_TO_DROP, 0x1a, -1, -1, -1, -1 },
    { "PROP_MAX_WAITING_JOBS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, 43 },
    { "_runnerLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "POISON_ID", "I", .constantValue.asInt = NetI2pRouterJobQueue_POISON_ID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "addJob", "LNetI2pRouterJob;", "removeJob", "isJobActive", (void *)&NetI2pRouterJobQueue__Annotations$0, (void *)&NetI2pRouterJobQueue__Annotations$1, "shouldDrop", "LNetI2pRouterJob;J", (void *)&NetI2pRouterJobQueue__Annotations$2, "runQueue", "I", "removeRunner", "updateJobTimings", "J", "updateStats", "LNetI2pRouterJob;JJJ", "getJobs", "LJavaUtilCollection;LJavaUtilCollection;LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/router/Job;>;Ljava/util/Collection<Lnet/i2p/router/Job;>;Ljava/util/Collection<Lnet/i2p/router/Job;>;Ljava/util/Collection<Lnet/i2p/router/Job;>;)I", "()Ljava/util/Collection<Lnet/i2p/router/JobStats;>;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", (void *)&NetI2pRouterJobQueue__Annotations$3, "Ljava/util/Map<Ljava/lang/Integer;Lnet/i2p/router/JobQueueRunner;>;", &NetI2pRouterJobQueue__runnerId, "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/router/Job;>;", "Ljava/util/Set<Lnet/i2p/router/Job;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lnet/i2p/router/JobStats;>;", &NetI2pRouterJobQueue_RUNNERS, &NetI2pRouterJobQueue_PROP_MAX_RUNNERS, &NetI2pRouterJobQueue_PROP_LAG_WARNING, (void *)&NetI2pRouterJobQueue__Annotations$4, &NetI2pRouterJobQueue_PROP_LAG_FATAL, (void *)&NetI2pRouterJobQueue__Annotations$5, &NetI2pRouterJobQueue_PROP_RUN_WARNING, (void *)&NetI2pRouterJobQueue__Annotations$6, &NetI2pRouterJobQueue_PROP_RUN_FATAL, (void *)&NetI2pRouterJobQueue__Annotations$7, &NetI2pRouterJobQueue_PROP_WARMUP_TIME, (void *)&NetI2pRouterJobQueue__Annotations$8, &NetI2pRouterJobQueue_PROP_MAX_WAITING_JOBS, (void *)&NetI2pRouterJobQueue__Annotations$9, "LNetI2pRouterJobQueue_QueuePumper;LNetI2pRouterJobQueue_PoisonJob;LNetI2pRouterJobQueue_JobComparator;" };
  static const J2ObjcClassInfo _NetI2pRouterJobQueue = { "JobQueue", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 24, 37, -1, 44, -1, -1, -1 };
  return &_NetI2pRouterJobQueue;
}

+ (void)initialize {
  if (self == [NetI2pRouterJobQueue class]) {
    JreStrongAssignAndConsume(&NetI2pRouterJobQueue__runnerId, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      if (maxMemory < 64 * 1024 * 1024) NetI2pRouterJobQueue_RUNNERS = 3;
      else if (maxMemory < 256 * 1024 * 1024) NetI2pRouterJobQueue_RUNNERS = 4;
      else NetI2pRouterJobQueue_RUNNERS = 5;
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterJobQueue)
  }
}

@end

void NetI2pRouterJobQueue_initWithNetI2pRouterRouterContext_(NetI2pRouterJobQueue *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  self->_lagWarning_ = NetI2pRouterJobQueue_DEFAULT_LAG_WARNING;
  self->_lagFatal_ = NetI2pRouterJobQueue_DEFAULT_LAG_FATAL;
  self->_runWarning_ = NetI2pRouterJobQueue_DEFAULT_RUN_WARNING;
  self->_runFatal_ = NetI2pRouterJobQueue_DEFAULT_RUN_FATAL;
  self->_warmupTime_ = NetI2pRouterJobQueue_DEFAULT_WARMUP_TIME;
  self->_maxWaitingJobs_ = NetI2pRouterJobQueue_DEFAULT_MAX_WAITING_JOBS;
  JreStrongAssignAndConsume(&self->_runnerLock_, new_NSObject_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterJobQueue_class_()]);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"jobQueue.readyJobs" withNSString:@"How many ready and waiting jobs there are?" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"jobQueue.droppedJobs" withNSString:@"How many jobs do we drop due to insane overload?" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"jobQueue.queuedJobs" withNSString:@"How many scheduled jobs are there?" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"jobQueue.jobRun" withNSString:@"How long jobs take" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"jobQueue.jobRunSlow" withNSString:@"How long jobs that take over a second take" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"jobQueue.jobLag" withNSString:@"Job run delay (ms)" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"jobQueue.jobWait" withNSString:@"How long does a job sit on the job queue?" withNSString:@"JobQueue" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:2]];
  JreStrongAssignAndConsume(&self->_readyJobs_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  JreStrongAssignAndConsume(&self->_timedJobs_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pRouterJobQueue_JobComparator_init()));
  JreStrongAssignAndConsume(&self->_jobLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_queueRunners_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(NetI2pRouterJobQueue_RUNNERS));
  JreStrongAssignAndConsume(&self->_jobStats_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->_pumper_, new_NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(self));
}

NetI2pRouterJobQueue *new_NetI2pRouterJobQueue_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterJobQueue, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterJobQueue *create_NetI2pRouterJobQueue_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterJobQueue, initWithNetI2pRouterRouterContext_, context)
}

jboolean NetI2pRouterJobQueue_shouldDropWithNetI2pRouterJob_withLong_(NetI2pRouterJobQueue *self, id<NetI2pRouterJob> job, jlong numReady) {
  if (self->_maxWaitingJobs_ <= 0) return false;
  if (!JreLoadVolatileBoolean(&self->_allowParallelOperation_)) return false;
  if (numReady > self->_maxWaitingJobs_) {
    IOSClass *cls = [((id<NetI2pRouterJob>) nil_chk(job)) java_getClass];
    if (cls == NetI2pRouterNetworkdbKademliaHandleFloodfillDatabaseLookupMessageJob_class_() || cls == NetI2pRouterMessageHandleGarlicMessageJob_class_() || cls == NetI2pRouterNetworkdbKademliaIterativeSearchJob_class_()) {
      if ([self getMaxLag] >= NetI2pRouterJobQueue_MIN_LAG_TO_DROP) return true;
    }
  }
  return false;
}

void NetI2pRouterJobQueue_updateJobTimingsWithLong_(NetI2pRouterJobQueue *self, jlong delta) {
  @synchronized(self->_jobLock_) {
    for (id<NetI2pRouterJob> __strong j in nil_chk(self->_timedJobs_)) {
      [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(j)) getTiming])) offsetChangedWithLong:delta];
    }
    for (id<NetI2pRouterJob> __strong j in nil_chk(self->_readyJobs_)) {
      [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(j)) getTiming])) offsetChangedWithLong:delta];
    }
  }
  @synchronized(self->_runnerLock_) {
    for (NetI2pRouterJobQueueRunner * __strong runner in nil_chk([((id<JavaUtilMap>) nil_chk(self->_queueRunners_)) values])) {
      id<NetI2pRouterJob> job = [((NetI2pRouterJobQueueRunner *) nil_chk(runner)) getCurrentJob];
      if (job != nil) [((NetI2pRouterJobTiming *) nil_chk([job getTiming])) offsetChangedWithLong:delta];
    }
  }
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterJobQueue__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterJobQueue)

@implementation NetI2pRouterJobQueue_QueuePumper

- (instancetype)initWithNetI2pRouterJobQueue:(NetI2pRouterJobQueue *)outer$ {
  NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(self, outer$);
  return self;
}

- (void)run {
  @try {
    while (JreLoadVolatileBoolean(&this$0_->_alive_)) {
      jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
      jlong timeToWait = -1;
      @try {
        @synchronized(this$0_->_jobLock_) {
          id<NetI2pRouterJob> lastJob = nil;
          jlong lastTime = JavaLangLong_MIN_VALUE;
          for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(this$0_->_timedJobs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
            id<NetI2pRouterJob> j = [iter next];
            jlong timeLeft = [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(j)) getTiming])) getStartAfter] - now;
            if (lastJob != nil && lastTime > [((NetI2pRouterJobTiming *) nil_chk([j getTiming])) getStartAfter]) {
              [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:JreStrcat("$@$@$$", @"Job ", lastJob, @" out of order with job ", j, @" difference of ", NetI2pDataDataHelper_formatDurationWithLong_(lastTime - [((NetI2pRouterJobTiming *) nil_chk([j getTiming])) getStartAfter]))];
            }
            lastJob = j;
            lastTime = [((NetI2pRouterJobTiming *) nil_chk([lastJob getTiming])) getStartAfter];
            if (timeLeft <= 0) {
              if ([j isKindOfClass:[NetI2pRouterJobImpl class]]) [((NetI2pRouterJobImpl *) cast_chk(j, [NetI2pRouterJobImpl class])) madeReady];
              [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(this$0_->_readyJobs_)) offerWithId:j];
              [iter remove];
            }
            else {
              timeToWait = timeLeft;
              if (timeToWait > 10 * 1000 && [iter hasNext]) {
                if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$@$$", @"Failsafe re-sort job ", j, @" with delay ", NetI2pDataDataHelper_formatDurationWithLong_(timeToWait))];
                [iter remove];
                id<NetI2pRouterJob> nextJob = [iter next];
                [this$0_->_timedJobs_ addWithId:j];
                jlong nextTimeLeft = [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(nextJob)) getTiming])) getStartAfter] - now;
                if (timeToWait > nextTimeLeft) {
                  [this$0_->_log_ errorWithNSString:JreStrcat("$@$@$$", @"Job ", j, @" out of order with job ", nextJob, @" difference of ", NetI2pDataDataHelper_formatDurationWithLong_(timeToWait - nextTimeLeft))];
                  timeToWait = JavaLangMath_maxWithLong_withLong_(10, nextTimeLeft);
                }
              }
              break;
            }
          }
          if (timeToWait < 0) timeToWait = 1000;
          else if (timeToWait < 10) timeToWait = 10;
          else if (timeToWait > 10 * 1000) timeToWait = 10 * 1000;
          JreAssignVolatileLong(&this$0_->_nextPumperRun_, [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] + timeToWait);
          [nil_chk(this$0_->_jobLock_) java_waitWithLong:timeToWait];
        }
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [this$0_->_log_ errorWithNSString:@"pumper killed?!" withJavaLangThrowable:t];
  }
  @finally {
    [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) removeUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:self];
    [((NetI2pRouterRouterClock *) nil_chk(((NetI2pRouterRouterClock *) cast_chk([this$0_->_context_ clock], [NetI2pRouterRouterClock class])))) removeShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:self];
  }
}

- (void)offsetChangedWithLong:(jlong)delta {
  NetI2pRouterJobQueue_updateJobTimingsWithLong_(this$0_, delta);
  @synchronized(this$0_->_jobLock_) {
    [nil_chk(this$0_->_jobLock_) java_notifyAll];
  }
}

- (void)clockShiftWithLong:(jlong)delta {
  if (delta < 0) {
    [self offsetChangedWithLong:delta];
  }
  else {
    @synchronized(this$0_->_jobLock_) {
      [nil_chk(this$0_->_jobLock_) java_notifyAll];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterJobQueue:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(offsetChangedWithLong:);
  methods[3].selector = @selector(clockShiftWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterJobQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "offsetChanged", "J", "clockShift", "LNetI2pRouterJobQueue;" };
  static const J2ObjcClassInfo _NetI2pRouterJobQueue_QueuePumper = { "QueuePumper", "net.i2p.router", ptrTable, methods, fields, 7, 0x12, 4, 1, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterJobQueue_QueuePumper;
}

@end

void NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue_QueuePumper *self, NetI2pRouterJobQueue *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) clock])) addUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:self];
  [((NetI2pRouterRouterClock *) nil_chk(((NetI2pRouterRouterClock *) cast_chk([outer$->_context_ clock], [NetI2pRouterRouterClock class])))) addShiftListenerWithNetI2pRouterRouterClock_ClockShiftListener:self];
}

NetI2pRouterJobQueue_QueuePumper *new_NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterJobQueue_QueuePumper, initWithNetI2pRouterJobQueue_, outer$)
}

NetI2pRouterJobQueue_QueuePumper *create_NetI2pRouterJobQueue_QueuePumper_initWithNetI2pRouterJobQueue_(NetI2pRouterJobQueue *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterJobQueue_QueuePumper, initWithNetI2pRouterJobQueue_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterJobQueue_QueuePumper)

@implementation NetI2pRouterJobQueue_PoisonJob

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterJobQueue_PoisonJob_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getName {
  return nil;
}

- (jlong)getJobId {
  return NetI2pRouterJobQueue_POISON_ID;
}

- (NetI2pRouterJobTiming *)getTiming {
  return nil;
}

- (void)runJob {
}

- (JavaLangException *)getAddedBy {
  return nil;
}

- (void)dropped {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJobTiming;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getJobId);
  methods[3].selector = @selector(getTiming);
  methods[4].selector = @selector(runJob);
  methods[5].selector = @selector(getAddedBy);
  methods[6].selector = @selector(dropped);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pRouterJobQueue;" };
  static const J2ObjcClassInfo _NetI2pRouterJobQueue_PoisonJob = { "PoisonJob", "net.i2p.router", ptrTable, methods, NULL, 7, 0xa, 7, 0, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterJobQueue_PoisonJob;
}

@end

void NetI2pRouterJobQueue_PoisonJob_init(NetI2pRouterJobQueue_PoisonJob *self) {
  NSObject_init(self);
}

NetI2pRouterJobQueue_PoisonJob *new_NetI2pRouterJobQueue_PoisonJob_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterJobQueue_PoisonJob, init)
}

NetI2pRouterJobQueue_PoisonJob *create_NetI2pRouterJobQueue_PoisonJob_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterJobQueue_PoisonJob, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterJobQueue_PoisonJob)

@implementation NetI2pRouterJobQueue_JobComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterJobQueue_JobComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id<NetI2pRouterJob>)l
               withId:(id<NetI2pRouterJob>)r {
  if ([((id<NetI2pRouterJob>) nil_chk(l)) isEqual:r]) return 0;
  jlong ld = [((NetI2pRouterJobTiming *) nil_chk([l getTiming])) getStartAfter] - [((NetI2pRouterJobTiming *) nil_chk([((id<NetI2pRouterJob>) nil_chk(r)) getTiming])) getStartAfter];
  if (ld < 0) return -1;
  if (ld > 0) return 1;
  ld = [l getJobId] - [r getJobId];
  if (ld < 0) return -1;
  if (ld > 0) return 1;
  return ((jint) [l hash]) - ((jint) [r hash]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pRouterJob;LNetI2pRouterJob;", "LNetI2pRouterJobQueue;", "Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/router/Job;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterJobQueue_JobComparator = { "JobComparator", "net.i2p.router", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_NetI2pRouterJobQueue_JobComparator;
}

@end

void NetI2pRouterJobQueue_JobComparator_init(NetI2pRouterJobQueue_JobComparator *self) {
  NSObject_init(self);
}

NetI2pRouterJobQueue_JobComparator *new_NetI2pRouterJobQueue_JobComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterJobQueue_JobComparator, init)
}

NetI2pRouterJobQueue_JobComparator *create_NetI2pRouterJobQueue_JobComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterJobQueue_JobComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterJobQueue_JobComparator)
