//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/dummy/VMCommSystem.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/dummy/VMCommSystem.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterDummyVMCommSystem () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterDummyVMCommSystem, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterDummyVMCommSystem, _context_, NetI2pRouterRouterContext *)

inline id<JavaUtilMap> NetI2pRouterDummyVMCommSystem_get__commSystemFacades(void);
inline id<JavaUtilMap> NetI2pRouterDummyVMCommSystem_set__commSystemFacades(id<JavaUtilMap> value);
static id<JavaUtilMap> NetI2pRouterDummyVMCommSystem__commSystemFacades;
J2OBJC_STATIC_FIELD_OBJ(NetI2pRouterDummyVMCommSystem, _commSystemFacades, id<JavaUtilMap>)

@interface NetI2pRouterDummyVMCommSystem_ReceiveJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterDummyVMCommSystem *this$0_;
  NetI2pDataHash *_from_;
  IOSByteArray *_msg_;
  NetI2pRouterRouterContext *_ctx_;
}

- (instancetype)initWithNetI2pRouterDummyVMCommSystem:(NetI2pRouterDummyVMCommSystem *)outer$
                                   withNetI2pDataHash:(NetI2pDataHash *)from
                                        withByteArray:(IOSByteArray *)msg
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)us;

- (void)runJob;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterDummyVMCommSystem_ReceiveJob)

J2OBJC_FIELD_SETTER(NetI2pRouterDummyVMCommSystem_ReceiveJob, _from_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterDummyVMCommSystem_ReceiveJob, _msg_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterDummyVMCommSystem_ReceiveJob, _ctx_, NetI2pRouterRouterContext *)

__attribute__((unused)) static void NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem_ReceiveJob *self, NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us);

__attribute__((unused)) static NetI2pRouterDummyVMCommSystem_ReceiveJob *new_NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterDummyVMCommSystem_ReceiveJob *create_NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterDummyVMCommSystem_ReceiveJob)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterDummyVMCommSystem)

@implementation NetI2pRouterDummyVMCommSystem

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterDummyVMCommSystem_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jint)countActivePeers {
  return [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) size] - 1;
}

- (jint)countActiveSendPeers {
  return [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) size] - 1;
}

- (jboolean)isEstablishedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) containsKeyWithId:peer];
}

- (id<JavaUtilSet>)getEstablished {
  id<JavaUtilSet> rv;
  @synchronized(NetI2pRouterDummyVMCommSystem__commSystemFacades) {
    rv = JreRetainedLocalValue(create_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) keySet]));
  }
  NetI2pDataHash *us = [((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash];
  if (us != nil) [rv removeWithId:us];
  return rv;
}

- (void)processMessageWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  NetI2pDataHash *peer = [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([((NetI2pRouterOutNetMessage *) nil_chk(msg)) getTarget])) getIdentity])) getHash];
  NetI2pRouterDummyVMCommSystem *peerSys = [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) getWithId:peer];
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  jlong sendTime = now - [msg getSendBegin];
  jboolean sendSuccessful = false;
  if (peerSys == nil) {
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:[msg getOnFailedSendJob]];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) updateFrequencyWithNSString:@"transport.sendMessageFailureFrequency"];
    [((id<NetI2pRouterProfileManager>) nil_chk([_context_ profileManager])) messageFailedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash] withNSString:@"vm"];
  }
  else {
    [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:[msg getOnSendJob]];
    [((id<NetI2pRouterProfileManager>) nil_chk([_context_ profileManager])) messageSentWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash] withNSString:@"vm" withLong:sendTime withLong:[msg getMessageSize]];
    IOSByteArray *data = [IOSByteArray arrayWithLength:[msg getMessageSize]];
    [msg getMessageDataWithByteArray:data];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageSize" withLong:data->size_ withLong:sendTime];
    if (data->size_ < 1024) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageSmall" withLong:1 withLong:sendTime];
    else if (data->size_ <= 4096) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageMedium" withLong:1 withLong:sendTime];
    else [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendMessageLarge" withLong:1 withLong:sendTime];
    [peerSys receiveWithByteArray:data withNetI2pDataHash:[_context_ routerHash]];
    sendSuccessful = true;
  }
  {
    id<NetI2pDataI2npI2NPMessage> dmsg = [msg getMessage];
    NSString *type = [[((id<NetI2pDataI2npI2NPMessage>) nil_chk(dmsg)) java_getClass] getName];
    [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) sendMessageWithNSString:type withLong:[dmsg getUniqueId] withLong:[dmsg getMessageExpiration] withNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk([msg getTarget])) getIdentity])) getHash] withBoolean:sendSuccessful withNSString:nil];
  }
  [msg discardData];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"transport.sendProcessingTime" withLong:[msg getLifetime] withLong:[msg getLifetime]];
}

- (void)receiveWithByteArray:(IOSByteArray *)message
          withNetI2pDataHash:(NetI2pDataHash *)fromPeer {
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(self, fromPeer, message, _context_)];
}

- (void)shutdown {
  [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) removeWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]];
}

- (void)startup {
  [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) putWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash] withId:self];
}

- (void)restart {
  [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) removeWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]];
  [((id<JavaUtilMap>) nil_chk(NetI2pRouterDummyVMCommSystem__commSystemFacades)) putWithId:[_context_ routerHash] withId:self];
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)urlBase
                                 withInt:(jint)sortFlags {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"Dummy! i2p.vmCommSystem=true!"];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(countActivePeers);
  methods[2].selector = @selector(countActiveSendPeers);
  methods[3].selector = @selector(isEstablishedWithNetI2pDataHash:);
  methods[4].selector = @selector(getEstablished);
  methods[5].selector = @selector(processMessageWithNetI2pRouterOutNetMessage:);
  methods[6].selector = @selector(receiveWithByteArray:withNetI2pDataHash:);
  methods[7].selector = @selector(shutdown);
  methods[8].selector = @selector(startup);
  methods[9].selector = @selector(restart);
  methods[10].selector = @selector(renderStatusHTMLWithJavaIoWriter:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_commSystemFacades", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 11, 12, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "isEstablished", "LNetI2pDataHash;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "processMessage", "LNetI2pRouterOutNetMessage;", "receive", "[BLNetI2pDataHash;", "renderStatusHTML", "LJavaIoWriter;LNSString;I", "LJavaIoIOException;", &NetI2pRouterDummyVMCommSystem__commSystemFacades, "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/dummy/VMCommSystem;>;", "LNetI2pRouterDummyVMCommSystem_ReceiveJob;" };
  static const J2ObjcClassInfo _NetI2pRouterDummyVMCommSystem = { "VMCommSystem", "net.i2p.router.dummy", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, 13, -1, -1, -1 };
  return &_NetI2pRouterDummyVMCommSystem;
}

+ (void)initialize {
  if (self == [NetI2pRouterDummyVMCommSystem class]) {
    JreStrongAssign(&NetI2pRouterDummyVMCommSystem__commSystemFacades, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilHashMap_initWithInt_(16)));
    J2OBJC_SET_INITIALIZED(NetI2pRouterDummyVMCommSystem)
  }
}

@end

void NetI2pRouterDummyVMCommSystem_initWithNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterCommSystemFacade_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterDummyVMCommSystem_class_()]);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createFrequencyStatWithNSString:@"transport.sendMessageFailureFrequency" withNSString:@"How often do we fail to send messages?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.sendMessageSize" withNSString:@"Size of sent messages (bytes)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.receiveMessageSize" withNSString:@"Size of received messages (bytes)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.sendMessageSmall" withNSString:@"How many messages under 1KB are sent?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.receiveMessageSmall" withNSString:@"How many messages under 1KB are received?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.sendMessageMedium" withNSString:@"How many messages between 1KB and 4KB are sent?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.receiveMessageMedium" withNSString:@"How many messages between 1KB and 4KB are received?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.sendMessageLarge" withNSString:@"How many messages over 4KB are sent?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"transport.receiveMessageLarge" withNSString:@"How many messages over 4KB are received?" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"transport.sendProcessingTime" withNSString:@"Time to process and send a message (ms)" withNSString:@"Transport" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]];
}

NetI2pRouterDummyVMCommSystem *new_NetI2pRouterDummyVMCommSystem_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterDummyVMCommSystem, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterDummyVMCommSystem *create_NetI2pRouterDummyVMCommSystem_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterDummyVMCommSystem, initWithNetI2pRouterRouterContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterDummyVMCommSystem)

@implementation NetI2pRouterDummyVMCommSystem_ReceiveJob

- (instancetype)initWithNetI2pRouterDummyVMCommSystem:(NetI2pRouterDummyVMCommSystem *)outer$
                                   withNetI2pDataHash:(NetI2pDataHash *)from
                                        withByteArray:(IOSByteArray *)msg
                        withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)us {
  NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(self, outer$, from, msg, us);
  return self;
}

- (void)runJob {
  NetI2pDataI2npI2NPMessageHandler *handler = create_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(_ctx_);
  @try {
    id<NetI2pDataI2npI2NPMessage> msg = [handler readMessageWithByteArray:_msg_];
    jint size = ((IOSByteArray *) nil_chk(_msg_))->size_;
    [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) profileManager])) messageReceivedWithNetI2pDataHash:_from_ withNSString:@"vm" withLong:1 withInt:size];
    [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) statManager])) addRateDataWithNSString:@"transport.receiveMessageSize" withLong:size withLong:1];
    if (size < 1024) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"transport.receiveMessageSmall" withLong:1 withLong:1];
    else if (size <= 4096) [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"transport.receiveMessageMedium" withLong:1 withLong:1];
    else [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"transport.receiveMessageLarge" withLong:1 withLong:1];
    [((NetI2pRouterInNetMessagePool *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) inNetMessagePool])) addWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataRouterRouterIdentity:nil withNetI2pDataHash:_from_];
  }
  @catch (NetI2pDataI2npI2NPMessageException *e) {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"Error reading/formatting a VM message? Something is not right..." withJavaLangThrowable:e];
  }
}

- (NSString *)getName {
  return @"Receive Message";
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_from_);
  RELEASE_(_msg_);
  RELEASE_(_ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterDummyVMCommSystem:withNetI2pDataHash:withByteArray:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterDummyVMCommSystem;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_from_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_msg_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;[BLNetI2pRouterRouterContext;", "LNetI2pRouterDummyVMCommSystem;" };
  static const J2ObjcClassInfo _NetI2pRouterDummyVMCommSystem_ReceiveJob = { "ReceiveJob", "net.i2p.router.dummy", ptrTable, methods, fields, 7, 0x2, 3, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterDummyVMCommSystem_ReceiveJob;
}

@end

void NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem_ReceiveJob *self, NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, us);
  JreStrongAssign(&self->_ctx_, us);
  JreStrongAssign(&self->_from_, from);
  JreStrongAssign(&self->_msg_, msg);
  [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(us)) clock])) now]];
}

NetI2pRouterDummyVMCommSystem_ReceiveJob *new_NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us) {
  J2OBJC_NEW_IMPL(NetI2pRouterDummyVMCommSystem_ReceiveJob, initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_, outer$, from, msg, us)
}

NetI2pRouterDummyVMCommSystem_ReceiveJob *create_NetI2pRouterDummyVMCommSystem_ReceiveJob_initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_(NetI2pRouterDummyVMCommSystem *outer$, NetI2pDataHash *from, IOSByteArray *msg, NetI2pRouterRouterContext *us) {
  J2OBJC_CREATE_IMPL(NetI2pRouterDummyVMCommSystem_ReceiveJob, initWithNetI2pRouterDummyVMCommSystem_withNetI2pDataHash_withByteArray_withNetI2pRouterRouterContext_, outer$, from, msg, us)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterDummyVMCommSystem_ReceiveJob)
