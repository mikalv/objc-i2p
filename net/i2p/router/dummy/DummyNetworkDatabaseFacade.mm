//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/dummy/DummyNetworkDatabaseFacade.java
//

#include "J2ObjC_source.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/dummy/DummyNetworkDatabaseFacade.h"

@interface NetI2pRouterDummyDummyNetworkDatabaseFacade () {
 @public
  id<JavaUtilMap> _routers_;
  NetI2pRouterRouterContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterDummyDummyNetworkDatabaseFacade, _routers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterDummyDummyNetworkDatabaseFacade, _context_, NetI2pRouterRouterContext *)

@implementation NetI2pRouterDummyDummyNetworkDatabaseFacade

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterDummyDummyNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)restart {
}

- (void)shutdown {
}

- (void)startup {
  NetI2pDataRouterRouterInfo *info = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getRouterInfo];
  [((id<JavaUtilMap>) nil_chk(_routers_)) putWithId:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(info)) getIdentity])) getHash] withId:info];
}

- (NetI2pDataDatabaseEntry *)lookupLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  return nil;
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs {
}

- (void)lookupLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)key
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                     withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                withLong:(jlong)timeoutMs
                      withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
}

- (NetI2pDataLeaseSet *)lookupLeaseSetLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  return nil;
}

- (void)lookupLeaseSetRemotelyWithNetI2pDataHash:(NetI2pDataHash *)key
                              withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
}

- (void)lookupDestinationWithNetI2pDataHash:(NetI2pDataHash *)key
                        withNetI2pRouterJob:(id<NetI2pRouterJob>)onFinishedJob
                                   withLong:(jlong)timeoutMs
                         withNetI2pDataHash:(NetI2pDataHash *)fromLocalDest {
}

- (NetI2pDataDestination *)lookupDestinationLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  return nil;
}

- (void)lookupRouterInfoWithNetI2pDataHash:(NetI2pDataHash *)key
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFindJob
                       withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedLookupJob
                                  withLong:(jlong)timeoutMs {
  NetI2pDataRouterRouterInfo *info = [self lookupRouterInfoLocallyWithNetI2pDataHash:key];
  if (info == nil) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFailedLookupJob];
  else [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFindJob];
}

- (NetI2pDataRouterRouterInfo *)lookupRouterInfoLocallyWithNetI2pDataHash:(NetI2pDataHash *)key {
  return [((id<JavaUtilMap>) nil_chk(_routers_)) getWithId:key];
}

- (void)publishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
}

- (void)publishWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)localRouterInfo {
}

- (NetI2pDataLeaseSet *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)leaseSet {
  return leaseSet;
}

- (NetI2pDataRouterRouterInfo *)storeWithNetI2pDataHash:(NetI2pDataHash *)key
                         withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)routerInfo {
  NetI2pDataRouterRouterInfo *rv = [((id<JavaUtilMap>) nil_chk(_routers_)) putWithId:key withId:routerInfo];
  return rv;
}

- (void)unpublishWithNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)localLeaseSet {
}

- (void)failWithNetI2pDataHash:(NetI2pDataHash *)dbEntry {
  [((id<JavaUtilMap>) nil_chk(_routers_)) removeWithId:dbEntry];
}

- (id<JavaUtilSet>)getAllRouters {
  return create_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(_routers_)) keySet]);
}

- (id<JavaUtilSet>)findNearestRoutersWithNetI2pDataHash:(NetI2pDataHash *)key
                                                withInt:(jint)maxNumRouters
                                        withJavaUtilSet:(id<JavaUtilSet>)peersToIgnore {
  return [self getAllRouters];
}

- (void)dealloc {
  RELEASE_(_routers_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLeaseSet;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterInfo;", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 23, 24, -1, 25, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(restart);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(startup);
  methods[4].selector = @selector(lookupLocallyWithNetI2pDataHash:);
  methods[5].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[6].selector = @selector(lookupLeaseSetWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[7].selector = @selector(lookupLeaseSetLocallyWithNetI2pDataHash:);
  methods[8].selector = @selector(lookupLeaseSetRemotelyWithNetI2pDataHash:withNetI2pDataHash:);
  methods[9].selector = @selector(lookupDestinationWithNetI2pDataHash:withNetI2pRouterJob:withLong:withNetI2pDataHash:);
  methods[10].selector = @selector(lookupDestinationLocallyWithNetI2pDataHash:);
  methods[11].selector = @selector(lookupRouterInfoWithNetI2pDataHash:withNetI2pRouterJob:withNetI2pRouterJob:withLong:);
  methods[12].selector = @selector(lookupRouterInfoLocallyWithNetI2pDataHash:);
  methods[13].selector = @selector(publishWithNetI2pDataLeaseSet:);
  methods[14].selector = @selector(publishWithNetI2pDataRouterRouterInfo:);
  methods[15].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  methods[16].selector = @selector(storeWithNetI2pDataHash:withNetI2pDataRouterRouterInfo:);
  methods[17].selector = @selector(unpublishWithNetI2pDataLeaseSet:);
  methods[18].selector = @selector(failWithNetI2pDataHash:);
  methods[19].selector = @selector(getAllRouters);
  methods[20].selector = @selector(findNearestRoutersWithNetI2pDataHash:withInt:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_routers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "lookupLocally", "LNetI2pDataHash;", "lookupLeaseSet", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;J", "LNetI2pDataHash;LNetI2pRouterJob;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupLeaseSetLocally", "lookupLeaseSetRemotely", "LNetI2pDataHash;LNetI2pDataHash;", "lookupDestination", "LNetI2pDataHash;LNetI2pRouterJob;JLNetI2pDataHash;", "lookupDestinationLocally", "lookupRouterInfo", "lookupRouterInfoLocally", "publish", "LNetI2pDataLeaseSet;", "LNetI2pDataRouterRouterInfo;", "store", "LNetI2pDataHash;LNetI2pDataLeaseSet;", "LNetI2pDataHash;LNetI2pDataRouterRouterInfo;", "unpublish", "fail", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "findNearestRouters", "LNetI2pDataHash;ILJavaUtilSet;", "(Lnet/i2p/data/Hash;ILjava/util/Set<Lnet/i2p/data/Hash;>;)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/data/router/RouterInfo;>;" };
  static const J2ObjcClassInfo _NetI2pRouterDummyDummyNetworkDatabaseFacade = { "DummyNetworkDatabaseFacade", "net.i2p.router.dummy", ptrTable, methods, fields, 7, 0x1, 21, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterDummyDummyNetworkDatabaseFacade;
}

@end

void NetI2pRouterDummyDummyNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterDummyDummyNetworkDatabaseFacade *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterNetworkDatabaseFacade_init(self);
  JreStrongAssign(&self->_routers_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilHashMap_init()));
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pRouterDummyDummyNetworkDatabaseFacade *new_NetI2pRouterDummyDummyNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterDummyDummyNetworkDatabaseFacade, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterDummyDummyNetworkDatabaseFacade *create_NetI2pRouterDummyDummyNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterDummyDummyNetworkDatabaseFacade, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterDummyDummyNetworkDatabaseFacade)
