//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/dummy/DummyClientManagerFacade.java
//

#include "J2ObjC_source.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientMessage.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/dummy/DummyClientManagerFacade.h"

@interface NetI2pRouterDummyDummyClientManagerFacade () {
 @public
  NetI2pRouterRouterContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterDummyDummyClientManagerFacade, _context_, NetI2pRouterRouterContext *)

@implementation NetI2pRouterDummyDummyClientManagerFacade

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterDummyDummyClientManagerFacade_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (jboolean)isLocalWithNetI2pDataHash:(NetI2pDataHash *)destHash {
  return true;
}

- (jboolean)isLocalWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return true;
}

- (void)reportAbuseWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                                withNSString:(NSString *)reason
                                     withInt:(jint)severity {
}

- (void)messageReceivedWithNetI2pRouterClientMessage:(NetI2pRouterClientMessage *)msg {
}

- (void)requestLeaseSetWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                          withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set
                                        withLong:(jlong)timeout
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onCreateJob
                             withNetI2pRouterJob:(id<NetI2pRouterJob>)onFailedJob {
  [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) addJobWithNetI2pRouterJob:onFailedJob];
}

- (void)startup {
}

- (void)stopAcceptingClients {
}

- (void)shutdown {
}

- (void)shutdownWithNSString:(NSString *)msg {
}

- (void)restart {
}

- (void)messageDeliveryStatusUpdateWithNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                                 withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_
                                                    withLong:(jlong)msgNonce
                                                     withInt:(jint)status {
}

- (NetI2pDataI2cpSessionConfig *)getClientSessionConfigWithNetI2pDataDestination:(NetI2pDataDestination *)_dest {
  return nil;
}

- (NetI2pCryptoSessionKeyManager *)getClientSessionKeyManagerWithNetI2pDataHash:(NetI2pDataHash *)_dest {
  return nil;
}

- (void)requestLeaseSetWithNetI2pDataHash:(NetI2pDataHash *)dest
                   withNetI2pDataLeaseSet:(NetI2pDataLeaseSet *)set {
}

- (void)dealloc {
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSessionKeyManager;", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(isLocalWithNetI2pDataHash:);
  methods[2].selector = @selector(isLocalWithNetI2pDataDestination:);
  methods[3].selector = @selector(reportAbuseWithNetI2pDataDestination:withNSString:withInt:);
  methods[4].selector = @selector(messageReceivedWithNetI2pRouterClientMessage:);
  methods[5].selector = @selector(requestLeaseSetWithNetI2pDataDestination:withNetI2pDataLeaseSet:withLong:withNetI2pRouterJob:withNetI2pRouterJob:);
  methods[6].selector = @selector(startup);
  methods[7].selector = @selector(stopAcceptingClients);
  methods[8].selector = @selector(shutdown);
  methods[9].selector = @selector(shutdownWithNSString:);
  methods[10].selector = @selector(restart);
  methods[11].selector = @selector(messageDeliveryStatusUpdateWithNetI2pDataDestination:withNetI2pDataI2cpMessageId:withLong:withInt:);
  methods[12].selector = @selector(getClientSessionConfigWithNetI2pDataDestination:);
  methods[13].selector = @selector(getClientSessionKeyManagerWithNetI2pDataHash:);
  methods[14].selector = @selector(requestLeaseSetWithNetI2pDataHash:withNetI2pDataLeaseSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "isLocal", "LNetI2pDataHash;", "LNetI2pDataDestination;", "reportAbuse", "LNetI2pDataDestination;LNSString;I", "messageReceived", "LNetI2pRouterClientMessage;", "requestLeaseSet", "LNetI2pDataDestination;LNetI2pDataLeaseSet;JLNetI2pRouterJob;LNetI2pRouterJob;", "shutdown", "LNSString;", "messageDeliveryStatusUpdate", "LNetI2pDataDestination;LNetI2pDataI2cpMessageId;JI", "getClientSessionConfig", "getClientSessionKeyManager", "LNetI2pDataHash;LNetI2pDataLeaseSet;" };
  static const J2ObjcClassInfo _NetI2pRouterDummyDummyClientManagerFacade = { "DummyClientManagerFacade", "net.i2p.router.dummy", ptrTable, methods, fields, 7, 0x1, 15, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterDummyDummyClientManagerFacade;
}

@end

void NetI2pRouterDummyDummyClientManagerFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterDummyDummyClientManagerFacade *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterClientManagerFacade_init(self);
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pRouterDummyDummyClientManagerFacade *new_NetI2pRouterDummyDummyClientManagerFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterDummyDummyClientManagerFacade, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterDummyDummyClientManagerFacade *create_NetI2pRouterDummyDummyClientManagerFacade_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterDummyDummyClientManagerFacade, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterDummyDummyClientManagerFacade)
