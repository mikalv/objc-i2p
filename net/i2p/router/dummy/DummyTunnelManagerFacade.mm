//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/dummy/DummyTunnelManagerFacade.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/router/ClientTunnelSettings.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelPoolSettings.h"
#include "net/i2p/router/dummy/DummyTunnelManagerFacade.h"
#include "net/i2p/router/tunnel/pool/TunnelPool.h"

__attribute__((unused)) static IOSObjectArray *NetI2pRouterDummyDummyTunnelManagerFacade__Annotations$0(void);

@implementation NetI2pRouterDummyDummyTunnelManagerFacade

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterDummyDummyTunnelManagerFacade_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<NetI2pRouterTunnelInfo>)getTunnelInfoWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnel {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnel {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundExploratoryTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectInboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination
                                                 withNetI2pDataHash:(NetI2pDataHash *)closestTo {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundExploratoryTunnelWithNetI2pDataHash:(NetI2pDataHash *)closestTo {
  return nil;
}

- (id<NetI2pRouterTunnelInfo>)selectOutboundTunnelWithNetI2pDataHash:(NetI2pDataHash *)destination
                                                  withNetI2pDataHash:(NetI2pDataHash *)closestTo {
  return nil;
}

- (jboolean)isValidTunnelWithNetI2pDataHash:(NetI2pDataHash *)client
                 withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)tunnel {
  return false;
}

- (jint)getParticipatingCount {
  return 0;
}

- (jint)getFreeTunnelCount {
  return 0;
}

- (jint)getOutboundTunnelCount {
  return 0;
}

- (jint)getInboundClientTunnelCount {
  return 0;
}

- (jdouble)getShareRatio {
  return 0.0;
}

- (jint)getOutboundClientTunnelCount {
  return 0;
}

- (jint)getOutboundClientTunnelCountWithNetI2pDataHash:(NetI2pDataHash *)destination {
  return 0;
}

- (jlong)getLastParticipatingExpiration {
  return -1;
}

- (void)buildTunnelsWithNetI2pDataDestination:(NetI2pDataDestination *)client
         withNetI2pRouterClientTunnelSettings:(NetI2pRouterClientTunnelSettings *)settings {
}

- (jboolean)addAliasWithNetI2pDataDestination:(NetI2pDataDestination *)dest
         withNetI2pRouterClientTunnelSettings:(NetI2pRouterClientTunnelSettings *)settings
                    withNetI2pDataDestination:(NetI2pDataDestination *)existingClient {
  return false;
}

- (void)removeAliasWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
}

- (NetI2pRouterTunnelPoolSettings *)getInboundSettings {
  return nil;
}

- (NetI2pRouterTunnelPoolSettings *)getOutboundSettings {
  return nil;
}

- (NetI2pRouterTunnelPoolSettings *)getInboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client {
  return nil;
}

- (NetI2pRouterTunnelPoolSettings *)getOutboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client {
  return nil;
}

- (void)setInboundSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
}

- (void)setOutboundSettingsWithNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
}

- (void)setInboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client
          withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
}

- (void)setOutboundSettingsWithNetI2pDataHash:(NetI2pDataHash *)client
           withNetI2pRouterTunnelPoolSettings:(NetI2pRouterTunnelPoolSettings *)settings {
}

- (jint)getInboundBuildQueueSize {
  return 0;
}

- (id<JavaUtilSet>)selectPeersInTooManyTunnels {
  return nil;
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)restart {
}

- (void)shutdown {
}

- (void)startup {
}

- (void)listPoolsWithJavaUtilList:(id<JavaUtilList>)outArg {
}

- (id<JavaUtilMap>)getInboundClientPools {
  return nil;
}

- (id<JavaUtilMap>)getOutboundClientPools {
  return nil;
}

- (NetI2pRouterTunnelPoolTunnelPool *)getInboundExploratoryPool {
  return nil;
}

- (NetI2pRouterTunnelPoolTunnelPool *)getOutboundExploratoryPool {
  return nil;
}

- (void)failWithNetI2pDataHash:(NetI2pDataHash *)peer {
}

- (NetI2pRouterTunnelPoolTunnelPool *)getInboundPoolWithNetI2pDataHash:(NetI2pDataHash *)client {
  return nil;
}

- (NetI2pRouterTunnelPoolTunnelPool *)getOutboundPoolWithNetI2pDataHash:(NetI2pDataHash *)client {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 0, 1, -1, -1, 2, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 3, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, 30, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolTunnelPool;", 0x1, 34, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTunnelInfoWithNetI2pDataTunnelId:);
  methods[2].selector = @selector(selectInboundTunnel);
  methods[3].selector = @selector(selectInboundTunnelWithNetI2pDataHash:);
  methods[4].selector = @selector(selectOutboundTunnel);
  methods[5].selector = @selector(selectOutboundTunnelWithNetI2pDataHash:);
  methods[6].selector = @selector(selectInboundExploratoryTunnelWithNetI2pDataHash:);
  methods[7].selector = @selector(selectInboundTunnelWithNetI2pDataHash:withNetI2pDataHash:);
  methods[8].selector = @selector(selectOutboundExploratoryTunnelWithNetI2pDataHash:);
  methods[9].selector = @selector(selectOutboundTunnelWithNetI2pDataHash:withNetI2pDataHash:);
  methods[10].selector = @selector(isValidTunnelWithNetI2pDataHash:withNetI2pRouterTunnelInfo:);
  methods[11].selector = @selector(getParticipatingCount);
  methods[12].selector = @selector(getFreeTunnelCount);
  methods[13].selector = @selector(getOutboundTunnelCount);
  methods[14].selector = @selector(getInboundClientTunnelCount);
  methods[15].selector = @selector(getShareRatio);
  methods[16].selector = @selector(getOutboundClientTunnelCount);
  methods[17].selector = @selector(getOutboundClientTunnelCountWithNetI2pDataHash:);
  methods[18].selector = @selector(getLastParticipatingExpiration);
  methods[19].selector = @selector(buildTunnelsWithNetI2pDataDestination:withNetI2pRouterClientTunnelSettings:);
  methods[20].selector = @selector(addAliasWithNetI2pDataDestination:withNetI2pRouterClientTunnelSettings:withNetI2pDataDestination:);
  methods[21].selector = @selector(removeAliasWithNetI2pDataDestination:);
  methods[22].selector = @selector(getInboundSettings);
  methods[23].selector = @selector(getOutboundSettings);
  methods[24].selector = @selector(getInboundSettingsWithNetI2pDataHash:);
  methods[25].selector = @selector(getOutboundSettingsWithNetI2pDataHash:);
  methods[26].selector = @selector(setInboundSettingsWithNetI2pRouterTunnelPoolSettings:);
  methods[27].selector = @selector(setOutboundSettingsWithNetI2pRouterTunnelPoolSettings:);
  methods[28].selector = @selector(setInboundSettingsWithNetI2pDataHash:withNetI2pRouterTunnelPoolSettings:);
  methods[29].selector = @selector(setOutboundSettingsWithNetI2pDataHash:withNetI2pRouterTunnelPoolSettings:);
  methods[30].selector = @selector(getInboundBuildQueueSize);
  methods[31].selector = @selector(selectPeersInTooManyTunnels);
  methods[32].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[33].selector = @selector(restart);
  methods[34].selector = @selector(shutdown);
  methods[35].selector = @selector(startup);
  methods[36].selector = @selector(listPoolsWithJavaUtilList:);
  methods[37].selector = @selector(getInboundClientPools);
  methods[38].selector = @selector(getOutboundClientPools);
  methods[39].selector = @selector(getInboundExploratoryPool);
  methods[40].selector = @selector(getOutboundExploratoryPool);
  methods[41].selector = @selector(failWithNetI2pDataHash:);
  methods[42].selector = @selector(getInboundPoolWithNetI2pDataHash:);
  methods[43].selector = @selector(getOutboundPoolWithNetI2pDataHash:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getTunnelInfo", "LNetI2pDataTunnelId;", (void *)&NetI2pRouterDummyDummyTunnelManagerFacade__Annotations$0, "selectInboundTunnel", "LNetI2pDataHash;", "selectOutboundTunnel", "selectInboundExploratoryTunnel", "LNetI2pDataHash;LNetI2pDataHash;", "selectOutboundExploratoryTunnel", "isValidTunnel", "LNetI2pDataHash;LNetI2pRouterTunnelInfo;", "getOutboundClientTunnelCount", "buildTunnels", "LNetI2pDataDestination;LNetI2pRouterClientTunnelSettings;", "addAlias", "LNetI2pDataDestination;LNetI2pRouterClientTunnelSettings;LNetI2pDataDestination;", "removeAlias", "LNetI2pDataDestination;", "getInboundSettings", "getOutboundSettings", "setInboundSettings", "LNetI2pRouterTunnelPoolSettings;", "setOutboundSettings", "LNetI2pDataHash;LNetI2pRouterTunnelPoolSettings;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "listPools", "LJavaUtilList;", "(Ljava/util/List<Lnet/i2p/router/tunnel/pool/TunnelPool;>;)V", "()Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/tunnel/pool/TunnelPool;>;", "fail", "getInboundPool", "getOutboundPool" };
  static const J2ObjcClassInfo _NetI2pRouterDummyDummyTunnelManagerFacade = { "DummyTunnelManagerFacade", "net.i2p.router.dummy", ptrTable, methods, NULL, 7, 0x1, 44, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterDummyDummyTunnelManagerFacade;
}

@end

void NetI2pRouterDummyDummyTunnelManagerFacade_init(NetI2pRouterDummyDummyTunnelManagerFacade *self) {
  NSObject_init(self);
}

NetI2pRouterDummyDummyTunnelManagerFacade *new_NetI2pRouterDummyDummyTunnelManagerFacade_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterDummyDummyTunnelManagerFacade, init)
}

NetI2pRouterDummyDummyTunnelManagerFacade *create_NetI2pRouterDummyDummyTunnelManagerFacade_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterDummyDummyTunnelManagerFacade, init)
}

IOSObjectArray *NetI2pRouterDummyDummyTunnelManagerFacade__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterDummyDummyTunnelManagerFacade)
