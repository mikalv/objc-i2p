//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/InNetMessagePool.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/TunnelDataMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/router/HandlerJobBuilder.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/MessageValidator.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@class NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob;
@class NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob;

@interface NetI2pRouterInNetMessagePool () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  IOSObjectArray *_handlerJobBuilders_;
  id<JavaUtilList> _pendingDataMessages_;
  id<JavaUtilList> _pendingDataMessagesFrom_;
  id<JavaUtilList> _pendingGatewayMessages_;
  NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *_shortCircuitDataJob_;
  NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *_shortCircuitGatewayJob_;
  jboolean _alive_;
  jboolean _dispatchThreaded_;
}

- (void)shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody;

- (void)doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody;

- (void)shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody
                                         withNetI2pDataHash:(NetI2pDataHash *)from;

- (void)doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody
                                           withNetI2pDataHash:(NetI2pDataHash *)from;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _handlerJobBuilders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _pendingDataMessages_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _pendingDataMessagesFrom_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _pendingGatewayMessages_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _shortCircuitDataJob_, NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *)
J2OBJC_FIELD_SETTER(NetI2pRouterInNetMessagePool, _shortCircuitGatewayJob_, NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *)

inline jint NetI2pRouterInNetMessagePool_get_MAX_I2NP_MESSAGE_TYPE(void);
#define NetI2pRouterInNetMessagePool_MAX_I2NP_MESSAGE_TYPE 31
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterInNetMessagePool, MAX_I2NP_MESSAGE_TYPE, jint)

inline jboolean NetI2pRouterInNetMessagePool_get_DISPATCH_DIRECT(void);
#define NetI2pRouterInNetMessagePool_DISPATCH_DIRECT true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterInNetMessagePool, DISPATCH_DIRECT, jboolean)

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody);

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody);

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody, NetI2pDataHash *from);

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody, NetI2pDataHash *from);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterInNetMessagePool__Annotations$0(void);

@interface NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterInNetMessagePool *this$0_;
}

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$
                       withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob)

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *self, NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *new_NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *create_NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob)

@interface NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterInNetMessagePool *this$0_;
}

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$
                       withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

- (NSString *)getName;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob)

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *self, NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx);

__attribute__((unused)) static NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *new_NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *create_NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob)

@interface NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterInNetMessagePool *this$0_;
}

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher)

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *self, NetI2pRouterInNetMessagePool *outer$);

__attribute__((unused)) static NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *new_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *create_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher)

@interface NetI2pRouterInNetMessagePool_TunnelDataDispatcher : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterInNetMessagePool *this$0_;
}

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterInNetMessagePool_TunnelDataDispatcher)

__attribute__((unused)) static void NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool_TunnelDataDispatcher *self, NetI2pRouterInNetMessagePool *outer$);

__attribute__((unused)) static NetI2pRouterInNetMessagePool_TunnelDataDispatcher *new_NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterInNetMessagePool_TunnelDataDispatcher *create_NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterInNetMessagePool_TunnelDataDispatcher)

NSString *NetI2pRouterInNetMessagePool_PROP_DISPATCH_THREADED = @"router.dispatchThreaded";

@implementation NetI2pRouterInNetMessagePool

+ (NSString *)PROP_DISPATCH_THREADED {
  return NetI2pRouterInNetMessagePool_PROP_DISPATCH_THREADED;
}

+ (jboolean)DEFAULT_DISPATCH_THREADED {
  return NetI2pRouterInNetMessagePool_DEFAULT_DISPATCH_THREADED;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterInNetMessagePool_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (id<NetI2pRouterHandlerJobBuilder>)registerHandlerJobBuilderWithInt:(jint)i2npMessageType
                                    withNetI2pRouterHandlerJobBuilder:(id<NetI2pRouterHandlerJobBuilder>)builder {
  @synchronized(self) {
    id<NetI2pRouterHandlerJobBuilder> old = IOSObjectArray_Get(nil_chk(_handlerJobBuilders_), i2npMessageType);
    IOSObjectArray_Set(_handlerJobBuilders_, i2npMessageType, builder);
    return JreRetainedLocalValue(old);
  }
}

- (id<NetI2pRouterHandlerJobBuilder>)unregisterHandlerJobBuilderWithInt:(jint)i2npMessageType {
  @synchronized(self) {
    id<NetI2pRouterHandlerJobBuilder> old = IOSObjectArray_Get(nil_chk(_handlerJobBuilders_), i2npMessageType);
    IOSObjectArray_Set(_handlerJobBuilders_, i2npMessageType, nil);
    return JreRetainedLocalValue(old);
  }
}

- (jint)addWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody
      withNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)fromRouter
                      withNetI2pDataHash:(NetI2pDataHash *)fromRouterHash {
  jlong exp = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(messageBody)) getMessageExpiration];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$J$@$$", @"Rcvd ID ", [messageBody getUniqueId], @" exp. ", create_JavaUtilDate_initWithLong_(exp), @" type ", [[messageBody java_getClass] getSimpleName])];
  jint type = [messageBody getType];
  NSString *invalidReason = nil;
  if (type == NetI2pDataI2npTunnelDataMessage_MESSAGE_TYPE) {
    invalidReason = [((NetI2pRouterMessageValidator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageValidator])) validateMessageWithLong:exp];
  }
  else {
    invalidReason = [((NetI2pRouterMessageValidator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageValidator])) validateMessageWithLong:[messageBody getUniqueId] withLong:exp];
  }
  if (invalidReason != nil) {
    jint level = NetI2pUtilLog_WARN;
    if ([_log_ shouldLogWithInt:level]) [_log_ logWithInt:level withNSString:JreStrcat("$J$J$$$$$@", @"Dropping message [", [messageBody getUniqueId], @" expiring on ", exp, @"]: ", [[messageBody java_getClass] getSimpleName], @": ", invalidReason, @": ", messageBody)];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"inNetPool.dropped" withLong:1];
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"inNetPool.duplicate" withLong:1];
    [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) droppedOtherMessageWithNetI2pDataI2npI2NPMessage:messageBody withNetI2pDataHash:(fromRouter != nil ? [fromRouter calculateHash] : fromRouterHash)];
    [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) messageProcessingErrorWithLong:[messageBody getUniqueId] withNSString:[[messageBody java_getClass] getSimpleName] withNSString:@"Duplicate/expired"];
    return -1;
  }
  else {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$J$", @"Message received [", [messageBody getUniqueId], @" expiring on ", exp, @"] is NOT a duplicate or exipired")];
  }
  jboolean jobFound = false;
  jboolean allowMatches = true;
  if (type == NetI2pDataI2npTunnelGatewayMessage_MESSAGE_TYPE) {
    NetI2pRouterInNetMessagePool_shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(self, messageBody);
    allowMatches = false;
  }
  else if (type == NetI2pDataI2npTunnelDataMessage_MESSAGE_TYPE) {
    NetI2pRouterInNetMessagePool_shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(self, messageBody, fromRouterHash);
    allowMatches = false;
  }
  else {
    if ((type > 0) && (type < ((IOSObjectArray *) nil_chk(_handlerJobBuilders_))->size_)) {
      id<NetI2pRouterHandlerJobBuilder> builder = IOSObjectArray_Get(nil_chk(_handlerJobBuilders_), type);
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$$", @"Add msg to the pool - builder: ", builder, @" type: ", [[messageBody java_getClass] getSimpleName])];
      if (builder != nil) {
        id<NetI2pRouterJob> job = [builder createJobWithNetI2pDataI2npI2NPMessage:messageBody withNetI2pDataRouterRouterIdentity:fromRouter withNetI2pDataHash:fromRouterHash];
        if (job != nil) {
          [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:job];
          jobFound = true;
        }
        else {
          jobFound = true;
        }
      }
    }
  }
  if (allowMatches) {
    jint replies = [self handleRepliesWithNetI2pDataI2npI2NPMessage:messageBody];
    if (replies <= 0) {
      if (!jobFound) {
        [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) droppedOtherMessageWithNetI2pDataI2npI2NPMessage:messageBody withNetI2pDataHash:(fromRouter != nil ? [fromRouter calculateHash] : fromRouterHash)];
        if (type == NetI2pDataI2npDeliveryStatusMessage_MESSAGE_TYPE) {
          jlong arr = [((NetI2pDataI2npDeliveryStatusMessage *) cast_chk(messageBody, [NetI2pDataI2npDeliveryStatusMessage class])) getArrival];
          if (arr > 10) {
            jlong timeSinceSent = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - arr;
            if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$J$@", @"Dropping unhandled delivery status message created ", timeSinceSent, @"ms ago: ", messageBody)];
            [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"inNetPool.droppedDeliveryStatusDelay" withLong:timeSinceSent];
          }
        }
        else if (type == NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE) {
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Dropping slow db lookup response: ", messageBody)];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"inNetPool.droppedDbLookupResponseMessage" withLong:1];
        }
        else if (type == NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE) {
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Dropping netDb lookup due to throttling"];
        }
        else {
          if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$J$@", @"Message expiring on ", [messageBody getMessageExpiration], @" was not handled by a HandlerJobBuilder - DROPPING: ", messageBody) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"f00!")];
          [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"inNetPool.dropped" withLong:1];
        }
      }
      else {
        NSString *mtype = [[messageBody java_getClass] getName];
        [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) receiveMessageWithNSString:mtype withLong:[messageBody getUniqueId] withLong:[messageBody getMessageExpiration] withNetI2pDataHash:fromRouterHash withBoolean:true];
        return 0;
      }
    }
  }
  NSString *mtype = [[messageBody java_getClass] getName];
  [((NetI2pRouterMessageHistory *) nil_chk([_context_ messageHistory])) receiveMessageWithNSString:mtype withLong:[messageBody getUniqueId] withLong:[messageBody getMessageExpiration] withNetI2pDataHash:fromRouterHash withBoolean:true];
  return 0;
}

- (jint)handleRepliesWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody {
  id<JavaUtilList> origMessages = [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageRegistry])) getOriginalMessagesWithNetI2pDataI2npI2NPMessage:messageBody];
  jint sz = [((id<JavaUtilList>) nil_chk(origMessages)) size];
  if (sz <= 0) return 0;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    [_log_ debugWithNSString:JreStrcat("$I", @"Original messages for inbound message: ", sz)];
    if (sz > 1) [_log_ debugWithNSString:JreStrcat("$@$@", @"Orig: ", origMessages, @" \nthe above are replies for: ", messageBody)];
  }
  for (jint i = 0; i < sz; i++) {
    NetI2pRouterOutNetMessage *omsg = [origMessages getWithInt:i];
    id<NetI2pRouterReplyJob> job = [((NetI2pRouterOutNetMessage *) nil_chk(omsg)) getOnReplyJob];
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$@$@$@", @"Original message [", i, @"] ", [omsg getReplySelector], @" : ", omsg, @": reply job: ", job)];
    if (job != nil) {
      [job setMessageWithNetI2pDataI2npI2NPMessage:messageBody];
      [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) addJobWithNetI2pRouterJob:job];
    }
  }
  return sz;
}

- (void)shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody {
  NetI2pRouterInNetMessagePool_shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(self, messageBody);
}

- (void)doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody {
  NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(self, messageBody);
}

- (void)shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody
                                         withNetI2pDataHash:(NetI2pDataHash *)from {
  NetI2pRouterInNetMessagePool_shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(self, messageBody, from);
}

- (void)doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)messageBody
                                           withNetI2pDataHash:(NetI2pDataHash *)from {
  NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(self, messageBody, from);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)restart {
  @synchronized(self) {
    [self shutdown];
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    [self startup];
  }
}

- (void)shutdown {
  @synchronized(self) {
    _alive_ = false;
  }
}

- (void)startup {
  @synchronized(self) {
    _alive_ = true;
    _dispatchThreaded_ = NetI2pRouterInNetMessagePool_DEFAULT_DISPATCH_THREADED;
    NSString *threadedStr = [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterInNetMessagePool_PROP_DISPATCH_THREADED];
    if (threadedStr != nil) {
      _dispatchThreaded_ = JavaLangBoolean_parseBooleanWithNSString_(threadedStr);
    }
    if (_dispatchThreaded_) {
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) createRateStatWithNSString:@"pool.dispatchDataTime" withNSString:@"How long a tunnel dispatch takes" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
      [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) createRateStatWithNSString:@"pool.dispatchGatewayTime" withNSString:@"How long a tunnel gateway dispatch takes" withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
      NetI2pUtilI2PThread *data = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(create_NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(self), @"Tunnel data dispatcher");
      [data setDaemonWithBoolean:true];
      [data start];
      NetI2pUtilI2PThread *gw = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(create_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(self), @"Tunnel gateway dispatcher");
      [gw setDaemonWithBoolean:true];
      [gw start];
    }
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_handlerJobBuilders_);
  RELEASE_(_pendingDataMessages_);
  RELEASE_(_pendingDataMessagesFrom_);
  RELEASE_(_pendingGatewayMessages_);
  RELEASE_(_shortCircuitDataJob_);
  RELEASE_(_shortCircuitGatewayJob_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterHandlerJobBuilder;", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterHandlerJobBuilder;", 0x21, 3, 4, -1, -1, 5, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(registerHandlerJobBuilderWithInt:withNetI2pRouterHandlerJobBuilder:);
  methods[2].selector = @selector(unregisterHandlerJobBuilderWithInt:);
  methods[3].selector = @selector(addWithNetI2pDataI2npI2NPMessage:withNetI2pDataRouterRouterIdentity:withNetI2pDataHash:);
  methods[4].selector = @selector(handleRepliesWithNetI2pDataI2npI2NPMessage:);
  methods[5].selector = @selector(shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:);
  methods[6].selector = @selector(doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage:);
  methods[7].selector = @selector(shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:);
  methods[8].selector = @selector(doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage:withNetI2pDataHash:);
  methods[9].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[10].selector = @selector(restart);
  methods[11].selector = @selector(shutdown);
  methods[12].selector = @selector(startup);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_handlerJobBuilders_", "[LNetI2pRouterHandlerJobBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pendingDataMessages_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_pendingDataMessagesFrom_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "_pendingGatewayMessages_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "_shortCircuitDataJob_", "LNetI2pRouterInNetMessagePool_SharedShortCircuitDataJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_shortCircuitGatewayJob_", "LNetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dispatchThreaded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_I2NP_MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pRouterInNetMessagePool_MAX_I2NP_MESSAGE_TYPE, 0x1a, -1, -1, -1, -1 },
    { "PROP_DISPATCH_THREADED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "DEFAULT_DISPATCH_THREADED", "Z", .constantValue.asBOOL = NetI2pRouterInNetMessagePool_DEFAULT_DISPATCH_THREADED, 0x19, -1, -1, -1, -1 },
    { "DISPATCH_DIRECT", "Z", .constantValue.asBOOL = NetI2pRouterInNetMessagePool_DISPATCH_DIRECT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "registerHandlerJobBuilder", "ILNetI2pRouterHandlerJobBuilder;", "unregisterHandlerJobBuilder", "I", (void *)&NetI2pRouterInNetMessagePool__Annotations$0, "add", "LNetI2pDataI2npI2NPMessage;LNetI2pDataRouterRouterIdentity;LNetI2pDataHash;", "handleReplies", "LNetI2pDataI2npI2NPMessage;", "shortCircuitTunnelGateway", "doShortCircuitTunnelGateway", "shortCircuitTunnelData", "LNetI2pDataI2npI2NPMessage;LNetI2pDataHash;", "doShortCircuitTunnelData", "renderStatusHTML", "LJavaIoWriter;", "Ljava/util/List<Lnet/i2p/data/i2np/I2NPMessage;>;", "Ljava/util/List<Lnet/i2p/data/Hash;>;", &NetI2pRouterInNetMessagePool_PROP_DISPATCH_THREADED, "LNetI2pRouterInNetMessagePool_SharedShortCircuitDataJob;LNetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob;LNetI2pRouterInNetMessagePool_TunnelGatewayDispatcher;LNetI2pRouterInNetMessagePool_TunnelDataDispatcher;" };
  static const J2ObjcClassInfo _NetI2pRouterInNetMessagePool = { "InNetMessagePool", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 13, 14, -1, 20, -1, -1, -1 };
  return &_NetI2pRouterInNetMessagePool;
}

@end

void NetI2pRouterInNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssignAndConsume(&self->_handlerJobBuilders_, [IOSObjectArray newArrayWithLength:NetI2pRouterInNetMessagePool_MAX_I2NP_MESSAGE_TYPE + 1 type:NetI2pRouterHandlerJobBuilder_class_()]);
  {
    JreStrongAssign(&self->_pendingDataMessages_, nil);
    JreStrongAssign(&self->_pendingDataMessagesFrom_, nil);
    JreStrongAssign(&self->_pendingGatewayMessages_, nil);
  }
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterInNetMessagePool_class_()]);
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"inNetPool.dropped" withNSString:@"How often do we drop a message" withNSString:@"InNetPool" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"inNetPool.droppedDeliveryStatusDelay" withNSString:@"How long after a delivery status message is created do we receive it back again (for messages that are too slow to be handled)" withNSString:@"InNetPool" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"inNetPool.duplicate" withNSString:@"How often do we receive a duplicate message" withNSString:@"InNetPool" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"inNetPool.droppedDbLookupResponseMessage" withNSString:@"How often we drop a slow-to-arrive db search response" withNSString:@"InNetPool" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l } count:1]];
}

NetI2pRouterInNetMessagePool *new_NetI2pRouterInNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterInNetMessagePool, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterInNetMessagePool *create_NetI2pRouterInNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterInNetMessagePool, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterInNetMessagePool_shortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody) {
  {
    NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(self, messageBody);
  }
}

void NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Shortcut dispatch tunnelGateway message ", messageBody)];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelGatewayMessage:(NetI2pDataI2npTunnelGatewayMessage *) cast_chk(messageBody, [NetI2pDataI2npTunnelGatewayMessage class])];
}

void NetI2pRouterInNetMessagePool_shortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody, NetI2pDataHash *from) {
  {
    NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(self, messageBody, from);
  }
}

void NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(NetI2pRouterInNetMessagePool *self, id<NetI2pDataI2npI2NPMessage> messageBody, NetI2pDataHash *from) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Shortcut dispatch tunnelData message ", messageBody)];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) tunnelDispatcher])) dispatchWithNetI2pDataI2npTunnelDataMessage:(NetI2pDataI2npTunnelDataMessage *) cast_chk(messageBody, [NetI2pDataI2npTunnelDataMessage class]) withNetI2pDataHash:from];
}

IOSObjectArray *NetI2pRouterInNetMessagePool__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterInNetMessagePool)

@implementation NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$
                       withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Dispatch tunnel participant message";
}

- (void)runJob {
  jint remaining = 0;
  id<NetI2pDataI2npI2NPMessage> msg = nil;
  NetI2pDataHash *from = nil;
  @synchronized(this$0_->_pendingDataMessages_) {
    if (![((id<JavaUtilList>) nil_chk(this$0_->_pendingDataMessages_)) isEmpty]) {
      msg = JreRetainedLocalValue([this$0_->_pendingDataMessages_ removeWithInt:0]);
      from = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(this$0_->_pendingDataMessagesFrom_)) removeWithInt:0]);
    }
    remaining = [this$0_->_pendingDataMessages_ size];
  }
  if (msg != nil) NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(this$0_, msg, from);
  if (remaining > 0) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterInNetMessagePool:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterInNetMessagePool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterInNetMessagePool;" };
  static const J2ObjcClassInfo _NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob = { "SharedShortCircuitDataJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob;
}

@end

void NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *self, NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *new_NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob, initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob *create_NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob, initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterInNetMessagePool_SharedShortCircuitDataJob)

@implementation NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$
                       withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(self, outer$, ctx);
  return self;
}

- (NSString *)getName {
  return @"Dispatch tunnel gateway message";
}

- (void)runJob {
  id<NetI2pDataI2npI2NPMessage> msg = nil;
  jint remaining = 0;
  @synchronized(this$0_->_pendingGatewayMessages_) {
    if (![((id<JavaUtilList>) nil_chk(this$0_->_pendingGatewayMessages_)) isEmpty]) msg = JreRetainedLocalValue([this$0_->_pendingGatewayMessages_ removeWithInt:0]);
    remaining = [this$0_->_pendingGatewayMessages_ size];
  }
  if (msg != nil) NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(this$0_, msg);
  if (remaining > 0) [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterInNetMessagePool:withNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterInNetMessagePool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "LNetI2pRouterInNetMessagePool;" };
  static const J2ObjcClassInfo _NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob = { "SharedShortCircuitGatewayJob", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob;
}

@end

void NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *self, NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
}

NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *new_NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob, initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_, outer$, ctx)
}

NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob *create_NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob_initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_(NetI2pRouterInNetMessagePool *outer$, NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob, initWithNetI2pRouterInNetMessagePool_withNetI2pRouterRouterContext_, outer$, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterInNetMessagePool_SharedShortCircuitGatewayJob)

@implementation NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$ {
  NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(self, outer$);
  return self;
}

- (void)run {
  while (this$0_->_alive_) {
    id<NetI2pDataI2npI2NPMessage> msg = nil;
    @try {
      @synchronized(this$0_->_pendingGatewayMessages_) {
        if ([((id<JavaUtilList>) nil_chk(this$0_->_pendingGatewayMessages_)) isEmpty]) [this$0_->_pendingGatewayMessages_ java_wait];
        else msg = JreRetainedLocalValue([this$0_->_pendingGatewayMessages_ removeWithInt:0]);
      }
      if (msg != nil) {
        jlong before = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
        NetI2pRouterInNetMessagePool_doShortCircuitTunnelGatewayWithNetI2pDataI2npI2NPMessage_(this$0_, msg);
        jlong elapsed = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - before;
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"pool.dispatchGatewayTime" withLong:elapsed];
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @catch (JavaLangOutOfMemoryError *oome) {
      @throw oome;
    }
    @catch (JavaLangRuntimeException *e) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_CRIT]) [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error in the tunnel gateway dispatcher" withJavaLangThrowable:e];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterInNetMessagePool:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterInNetMessagePool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterInNetMessagePool;" };
  static const J2ObjcClassInfo _NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher = { "TunnelGatewayDispatcher", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher;
}

@end

void NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *self, NetI2pRouterInNetMessagePool *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *new_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher, initWithNetI2pRouterInNetMessagePool_, outer$)
}

NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher *create_NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher, initWithNetI2pRouterInNetMessagePool_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterInNetMessagePool_TunnelGatewayDispatcher)

@implementation NetI2pRouterInNetMessagePool_TunnelDataDispatcher

- (instancetype)initWithNetI2pRouterInNetMessagePool:(NetI2pRouterInNetMessagePool *)outer$ {
  NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(self, outer$);
  return self;
}

- (void)run {
  while (this$0_->_alive_) {
    id<NetI2pDataI2npI2NPMessage> msg = nil;
    NetI2pDataHash *from = nil;
    @try {
      @synchronized(this$0_->_pendingDataMessages_) {
        if ([((id<JavaUtilList>) nil_chk(this$0_->_pendingDataMessages_)) isEmpty]) {
          [this$0_->_pendingDataMessages_ java_wait];
        }
        else {
          msg = JreRetainedLocalValue([this$0_->_pendingDataMessages_ removeWithInt:0]);
          from = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(this$0_->_pendingDataMessagesFrom_)) removeWithInt:0]);
        }
      }
      if (msg != nil) {
        jlong before = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) clock])) now];
        NetI2pRouterInNetMessagePool_doShortCircuitTunnelDataWithNetI2pDataI2npI2NPMessage_withNetI2pDataHash_(this$0_, msg, from);
        jlong elapsed = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - before;
        [((NetI2pStatStatManager *) nil_chk([this$0_->_context_ statManager])) addRateDataWithNSString:@"pool.dispatchDataTime" withLong:elapsed];
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @catch (JavaLangOutOfMemoryError *oome) {
      @throw oome;
    }
    @catch (JavaLangRuntimeException *e) {
      if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_CRIT]) [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error in the tunnel data dispatcher" withJavaLangThrowable:e];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterInNetMessagePool:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterInNetMessagePool;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterInNetMessagePool;" };
  static const J2ObjcClassInfo _NetI2pRouterInNetMessagePool_TunnelDataDispatcher = { "TunnelDataDispatcher", "net.i2p.router", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterInNetMessagePool_TunnelDataDispatcher;
}

@end

void NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool_TunnelDataDispatcher *self, NetI2pRouterInNetMessagePool *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterInNetMessagePool_TunnelDataDispatcher *new_NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterInNetMessagePool_TunnelDataDispatcher, initWithNetI2pRouterInNetMessagePool_, outer$)
}

NetI2pRouterInNetMessagePool_TunnelDataDispatcher *create_NetI2pRouterInNetMessagePool_TunnelDataDispatcher_initWithNetI2pRouterInNetMessagePool_(NetI2pRouterInNetMessagePool *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterInNetMessagePool_TunnelDataDispatcher, initWithNetI2pRouterInNetMessagePool_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterInNetMessagePool_TunnelDataDispatcher)
