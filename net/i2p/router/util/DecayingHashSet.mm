//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/DecayingHashSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/router/util/DecayingHashSet.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/Log.h"

@class NetI2pRouterUtilDecayingHashSet_ArrayWrapper;

@interface NetI2pRouterUtilDecayingHashSet () {
 @public
  NetI2pUtilConcurrentHashSet *_current_DecayingHashSet_;
  NetI2pUtilConcurrentHashSet *_previous_DecayingHashSet_;
}

- (jboolean)addWithLong:(jlong)entry_
            withBoolean:(jboolean)addIfNew;

- (jboolean)locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper:(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *)w
                                                           withBoolean:(jboolean)addIfNew;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingHashSet, _current_DecayingHashSet_, NetI2pUtilConcurrentHashSet *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingHashSet, _previous_DecayingHashSet_, NetI2pUtilConcurrentHashSet *)

__attribute__((unused)) static jboolean NetI2pRouterUtilDecayingHashSet_addWithLong_withBoolean_(NetI2pRouterUtilDecayingHashSet *self, jlong entry_, jboolean addIfNew);

__attribute__((unused)) static jboolean NetI2pRouterUtilDecayingHashSet_locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper_withBoolean_(NetI2pRouterUtilDecayingHashSet *self, NetI2pRouterUtilDecayingHashSet_ArrayWrapper *w, jboolean addIfNew);

@interface NetI2pRouterUtilDecayingHashSet_ArrayWrapper : NSObject {
 @public
  jlong _longhashcode_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)b
                          withInt:(jint)offset
                          withInt:(jint)len;

- (instancetype)initWithLong:(jlong)b;

- (NSUInteger)hash;

- (jlong)longHashCode;

- (jboolean)isEqual:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilDecayingHashSet_ArrayWrapper)

__attribute__((unused)) static void NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *self, IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static NetI2pRouterUtilDecayingHashSet_ArrayWrapper *new_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint len) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilDecayingHashSet_ArrayWrapper *create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint len);

__attribute__((unused)) static void NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *self, jlong b);

__attribute__((unused)) static NetI2pRouterUtilDecayingHashSet_ArrayWrapper *new_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(jlong b) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilDecayingHashSet_ArrayWrapper *create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(jlong b);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilDecayingHashSet_ArrayWrapper)

@implementation NetI2pRouterUtilDecayingHashSet

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)durationMs
                                    withInt:(jint)entryBytes {
  NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_(self, context, durationMs, entryBytes);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)durationMs
                                    withInt:(jint)entryBytes
                               withNSString:(NSString *)name {
  NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(self, context, durationMs, entryBytes, name);
  return self;
}

- (jint)getInsertedCount {
  return [((NetI2pUtilConcurrentHashSet *) nil_chk(_current_DecayingHashSet_)) size] + [((NetI2pUtilConcurrentHashSet *) nil_chk(_previous_DecayingHashSet_)) size];
}

- (jdouble)getFalsePositiveRate {
  if (_entryBytes_ <= 8) return 0.0;
  return 1.0 / JavaLangMath_powWithDouble_withDouble_(2.0, 64.0);
}

- (jboolean)addWithByteArray:(IOSByteArray *)entry_
                     withInt:(jint)off
                     withInt:(jint)len {
  if (entry_ == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null entry");
  if (len != _entryBytes_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Bad entry [", len, @", expected ", _entryBytes_, ']'));
  NetI2pRouterUtilDecayingHashSet_ArrayWrapper *w = create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(entry_, off, len);
  [self getReadLock];
  @try {
    return NetI2pRouterUtilDecayingHashSet_locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper_withBoolean_(self, w, true);
  }
  @finally {
    [self releaseReadLock];
  }
}

- (jboolean)addWithLong:(jlong)entry_ {
  return NetI2pRouterUtilDecayingHashSet_addWithLong_withBoolean_(self, entry_, true);
}

- (jboolean)isKnownWithLong:(jlong)entry_ {
  return NetI2pRouterUtilDecayingHashSet_addWithLong_withBoolean_(self, entry_, false);
}

- (jboolean)addWithLong:(jlong)entry_
            withBoolean:(jboolean)addIfNew {
  return NetI2pRouterUtilDecayingHashSet_addWithLong_withBoolean_(self, entry_, addIfNew);
}

- (jboolean)locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper:(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *)w
                                                           withBoolean:(jboolean)addIfNew {
  return NetI2pRouterUtilDecayingHashSet_locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper_withBoolean_(self, w, addIfNew);
}

- (void)clear {
  [((NetI2pUtilConcurrentHashSet *) nil_chk(_current_DecayingHashSet_)) clear];
  [((NetI2pUtilConcurrentHashSet *) nil_chk(_previous_DecayingHashSet_)) clear];
  _currentDuplicates_ = 0;
}

- (void)stopDecaying {
  JreAssignVolatileBoolean(&_keepDecaying_, false);
  [self clear];
}

- (void)decay {
  jint currentCount;
  jlong dups;
  if (![self getWriteLock]) return;
  @try {
    NetI2pUtilConcurrentHashSet *tmp = _previous_DecayingHashSet_;
    currentCount = [((NetI2pUtilConcurrentHashSet *) nil_chk(_current_DecayingHashSet_)) size];
    JreStrongAssign(&_previous_DecayingHashSet_, _current_DecayingHashSet_);
    JreStrongAssign(&_current_DecayingHashSet_, tmp);
    [((NetI2pUtilConcurrentHashSet *) nil_chk(_current_DecayingHashSet_)) clear];
    dups = _currentDuplicates_;
    _currentDuplicates_ = 0;
  }
  @finally {
    [self releaseWriteLock];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$I$J$", @"Decaying the filter ", _name_, @" after inserting ", currentCount, @" elements and ", dups, @" false positives")];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:JreStrcat("$$$", @"router.decayingHashSet.", _name_, @".size") withLong:currentCount];
  if (currentCount > 0) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:JreStrcat("$$$", @"router.decayingHashSet.", _name_, @".dups") withLong:1000l * 1000 * dups / currentCount];
}

- (void)dealloc {
  RELEASE_(_current_DecayingHashSet_);
  RELEASE_(_previous_DecayingHashSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:withNSString:);
  methods[2].selector = @selector(getInsertedCount);
  methods[3].selector = @selector(getFalsePositiveRate);
  methods[4].selector = @selector(addWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(addWithLong:);
  methods[6].selector = @selector(isKnownWithLong:);
  methods[7].selector = @selector(addWithLong:withBoolean:);
  methods[8].selector = @selector(locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper:withBoolean:);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(stopDecaying);
  methods[11].selector = @selector(decay);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_current_DecayingHashSet_", "LNetI2pUtilConcurrentHashSet;", .constantValue.asLong = 0, 0x2, 9, -1, 10, -1 },
    { "_previous_DecayingHashSet_", "LNetI2pUtilConcurrentHashSet;", .constantValue.asLong = 0, 0x2, 11, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;II", "LNetI2pI2PAppContext;IILNSString;", "add", "[BII", "J", "isKnown", "JZ", "locked_add", "LNetI2pRouterUtilDecayingHashSet_ArrayWrapper;Z", "_current", "Lnet/i2p/util/ConcurrentHashSet<Lnet/i2p/router/util/DecayingHashSet$ArrayWrapper;>;", "_previous", "LNetI2pRouterUtilDecayingHashSet_ArrayWrapper;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingHashSet = { "DecayingHashSet", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, 12, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingHashSet;
}

@end

void NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pRouterUtilDecayingHashSet *self, NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(self, context, durationMs, entryBytes, @"DHS");
}

NetI2pRouterUtilDecayingHashSet *new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingHashSet, initWithNetI2pI2PAppContext_withInt_withInt_, context, durationMs, entryBytes)
}

NetI2pRouterUtilDecayingHashSet *create_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingHashSet, initWithNetI2pI2PAppContext_withInt_withInt_, context, durationMs, entryBytes)
}

void NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pRouterUtilDecayingHashSet *self, NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  NetI2pRouterUtilDecayingBloomFilter_initWithInt_withInt_withNSString_withNetI2pI2PAppContext_(self, durationMs, entryBytes, name, context);
  if (entryBytes <= 0 || entryBytes > 32) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad size");
  JreStrongAssignAndConsume(&self->_current_DecayingHashSet_, new_NetI2pUtilConcurrentHashSet_initWithInt_(128));
  JreStrongAssignAndConsume(&self->_previous_DecayingHashSet_, new_NetI2pUtilConcurrentHashSet_initWithInt_(128));
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$I$I", @"New DHS ", name, @" entryBytes = ", entryBytes, @" cycle (s) = ", (durationMs / 1000))];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) statManager])) createRateStatWithNSString:JreStrcat("$$$", @"router.decayingHashSet.", name, @".size") withNSString:@"Size" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * JavaLangMath_maxWithInt_withInt_(60 * 1000, durationMs) } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:JreStrcat("$$$", @"router.decayingHashSet.", name, @".dups") withNSString:@"1000000 * Duplicates/Size" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * JavaLangMath_maxWithInt_withInt_(60 * 1000, durationMs) } count:1]];
}

NetI2pRouterUtilDecayingHashSet *new_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingHashSet, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_, context, durationMs, entryBytes, name)
}

NetI2pRouterUtilDecayingHashSet *create_NetI2pRouterUtilDecayingHashSet_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingHashSet, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_, context, durationMs, entryBytes, name)
}

jboolean NetI2pRouterUtilDecayingHashSet_addWithLong_withBoolean_(NetI2pRouterUtilDecayingHashSet *self, jlong entry_, jboolean addIfNew) {
  NetI2pRouterUtilDecayingHashSet_ArrayWrapper *w = create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(entry_);
  [self getReadLock];
  @try {
    return NetI2pRouterUtilDecayingHashSet_locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper_withBoolean_(self, w, addIfNew);
  }
  @finally {
    [self releaseReadLock];
  }
}

jboolean NetI2pRouterUtilDecayingHashSet_locked_addWithNetI2pRouterUtilDecayingHashSet_ArrayWrapper_withBoolean_(NetI2pRouterUtilDecayingHashSet *self, NetI2pRouterUtilDecayingHashSet_ArrayWrapper *w, jboolean addIfNew) {
  jboolean seen = [((NetI2pUtilConcurrentHashSet *) nil_chk(self->_previous_DecayingHashSet_)) containsWithId:w];
  if (!seen) {
    if (addIfNew) seen = ![((NetI2pUtilConcurrentHashSet *) nil_chk(self->_current_DecayingHashSet_)) addWithId:w];
    else seen = [((NetI2pUtilConcurrentHashSet *) nil_chk(self->_current_DecayingHashSet_)) containsWithId:w];
  }
  if (seen) {
    self->_currentDuplicates_++;
  }
  return seen;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingHashSet)

@implementation NetI2pRouterUtilDecayingHashSet_ArrayWrapper

- (instancetype)initWithByteArray:(IOSByteArray *)b
                          withInt:(jint)offset
                          withInt:(jint)len {
  NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(self, b, offset, len);
  return self;
}

- (instancetype)initWithLong:(jlong)b {
  NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(self, b);
  return self;
}

- (NSUInteger)hash {
  return (jint) _longhashcode_;
}

- (jlong)longHashCode {
  return _longhashcode_;
}

- (jboolean)isEqual:(id)o {
  if (o == nil || !([o isKindOfClass:[NetI2pRouterUtilDecayingHashSet_ArrayWrapper class]])) return false;
  return [((NetI2pRouterUtilDecayingHashSet_ArrayWrapper *) cast_chk(o, [NetI2pRouterUtilDecayingHashSet_ArrayWrapper class])) longHashCode] == _longhashcode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[1].selector = @selector(initWithLong:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(longHashCode);
  methods[4].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_longhashcode_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BII", "J", "hashCode", "equals", "LNSObject;", "LNetI2pRouterUtilDecayingHashSet;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingHashSet_ArrayWrapper = { "ArrayWrapper", "net.i2p.router.util", ptrTable, methods, fields, 7, 0xa, 5, 1, 5, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingHashSet_ArrayWrapper;
}

@end

void NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *self, IOSByteArray *b, jint offset, jint len) {
  NSObject_init(self);
  jint idx = offset;
  jint shift = JavaLangMath_minWithInt_withInt_(8, 64 / len);
  jlong lhc = 0;
  for (jint i = 0; i < len; i++) {
    lhc ^= (JreLShift64(((jlong) IOSByteArray_Get(nil_chk(b), idx++)), (i * shift)));
  }
  self->_longhashcode_ = lhc;
}

NetI2pRouterUtilDecayingHashSet_ArrayWrapper *new_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint len) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingHashSet_ArrayWrapper, initWithByteArray_withInt_withInt_, b, offset, len)
}

NetI2pRouterUtilDecayingHashSet_ArrayWrapper *create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithByteArray_withInt_withInt_(IOSByteArray *b, jint offset, jint len) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingHashSet_ArrayWrapper, initWithByteArray_withInt_withInt_, b, offset, len)
}

void NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(NetI2pRouterUtilDecayingHashSet_ArrayWrapper *self, jlong b) {
  NSObject_init(self);
  self->_longhashcode_ = b;
}

NetI2pRouterUtilDecayingHashSet_ArrayWrapper *new_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(jlong b) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingHashSet_ArrayWrapper, initWithLong_, b)
}

NetI2pRouterUtilDecayingHashSet_ArrayWrapper *create_NetI2pRouterUtilDecayingHashSet_ArrayWrapper_initWithLong_(jlong b) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingHashSet_ArrayWrapper, initWithLong_, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingHashSet_ArrayWrapper)
