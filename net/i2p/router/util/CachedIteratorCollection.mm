//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/CachedIteratorCollection.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "net/i2p/router/util/CachedIteratorCollection.h"

@class NetI2pRouterUtilCachedIteratorCollection_CachedIterator;
@class NetI2pRouterUtilCachedIteratorCollection_Node;

@interface NetI2pRouterUtilCachedIteratorCollection () {
 @public
  NetI2pRouterUtilCachedIteratorCollection_CachedIterator *iterator_;
  jint size_;
  NetI2pRouterUtilCachedIteratorCollection_Node *first_;
  NetI2pRouterUtilCachedIteratorCollection_Node *last_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection, iterator_, NetI2pRouterUtilCachedIteratorCollection_CachedIterator *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection, first_, NetI2pRouterUtilCachedIteratorCollection_Node *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection, last_, NetI2pRouterUtilCachedIteratorCollection_Node *)

@interface NetI2pRouterUtilCachedIteratorCollection_Node : NSObject {
 @public
  id item_;
  NetI2pRouterUtilCachedIteratorCollection_Node *next_;
  NetI2pRouterUtilCachedIteratorCollection_Node *prev_;
}

- (instancetype)initWithNetI2pRouterUtilCachedIteratorCollection_Node:(NetI2pRouterUtilCachedIteratorCollection_Node *)prev
                                                               withId:(id)element;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilCachedIteratorCollection_Node)

J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection_Node, item_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection_Node, next_, NetI2pRouterUtilCachedIteratorCollection_Node *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection_Node, prev_, NetI2pRouterUtilCachedIteratorCollection_Node *)

__attribute__((unused)) static void NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *self, NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element);

__attribute__((unused)) static NetI2pRouterUtilCachedIteratorCollection_Node *new_NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilCachedIteratorCollection_Node *create_NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilCachedIteratorCollection_Node)

@interface NetI2pRouterUtilCachedIteratorCollection_CachedIterator : NSObject < JavaUtilIterator > {
 @public
  NetI2pRouterUtilCachedIteratorCollection *this$0_;
  jboolean nextCalled_;
  NetI2pRouterUtilCachedIteratorCollection_Node *itrIndexNode_;
}

- (instancetype)initWithNetI2pRouterUtilCachedIteratorCollection:(NetI2pRouterUtilCachedIteratorCollection *)outer$;

- (void)reset;

- (void)remove;

- (jboolean)hasNext;

- (id)next;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilCachedIteratorCollection_CachedIterator)

J2OBJC_FIELD_SETTER(NetI2pRouterUtilCachedIteratorCollection_CachedIterator, itrIndexNode_, NetI2pRouterUtilCachedIteratorCollection_Node *)

__attribute__((unused)) static void NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection_CachedIterator *self, NetI2pRouterUtilCachedIteratorCollection *outer$);

__attribute__((unused)) static NetI2pRouterUtilCachedIteratorCollection_CachedIterator *new_NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilCachedIteratorCollection_CachedIterator *create_NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection *outer$);

__attribute__((unused)) static void NetI2pRouterUtilCachedIteratorCollection_CachedIterator_reset(NetI2pRouterUtilCachedIteratorCollection_CachedIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilCachedIteratorCollection_CachedIterator)

@implementation NetI2pRouterUtilCachedIteratorCollection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterUtilCachedIteratorCollection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)addWithId:(id)element {
  NetI2pRouterUtilCachedIteratorCollection_Node *newNode = create_NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(last_, element);
  if (self->size_ == 0) {
    JreStrongAssign(&self->first_, newNode);
  }
  else {
    JreStrongAssign(&((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(self->last_))->next_, newNode);
  }
  JreStrongAssign(&self->last_, newNode);
  self->size_++;
  return true;
}

- (void)clear {
  JreStrongAssign(&self->first_, nil);
  JreStrongAssign(&self->last_, nil);
  self->size_ = 0;
  NetI2pRouterUtilCachedIteratorCollection_CachedIterator_reset(nil_chk(iterator_));
}

- (id<JavaUtilIterator>)iterator {
  NetI2pRouterUtilCachedIteratorCollection_CachedIterator_reset(nil_chk(iterator_));
  return iterator_;
}

- (jint)size {
  return self->size_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(iterator_);
  RELEASE_(first_);
  RELEASE_(last_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(iterator);
  methods[4].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LNetI2pRouterUtilCachedIteratorCollection_CachedIterator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "first_", "LNetI2pRouterUtilCachedIteratorCollection_Node;", .constantValue.asLong = 0, 0x82, -1, -1, 4, -1 },
    { "last_", "LNetI2pRouterUtilCachedIteratorCollection_Node;", .constantValue.asLong = 0, 0x82, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSObject;", "(TE;)Z", "()Ljava/util/Iterator<TE;>;", "Lnet/i2p/router/util/CachedIteratorCollection$Node<TE;>;", "LNetI2pRouterUtilCachedIteratorCollection_Node;LNetI2pRouterUtilCachedIteratorCollection_CachedIterator;", "<E:Ljava/lang/Object;>Ljava/util/AbstractCollection<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilCachedIteratorCollection = { "CachedIteratorCollection", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, 5, -1, 6, -1 };
  return &_NetI2pRouterUtilCachedIteratorCollection;
}

@end

void NetI2pRouterUtilCachedIteratorCollection_init(NetI2pRouterUtilCachedIteratorCollection *self) {
  JavaUtilAbstractCollection_init(self);
  JreStrongAssignAndConsume(&self->iterator_, new_NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(self));
  self->size_ = 0;
  JreStrongAssign(&self->first_, nil);
  JreStrongAssign(&self->last_, nil);
}

NetI2pRouterUtilCachedIteratorCollection *new_NetI2pRouterUtilCachedIteratorCollection_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilCachedIteratorCollection, init)
}

NetI2pRouterUtilCachedIteratorCollection *create_NetI2pRouterUtilCachedIteratorCollection_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilCachedIteratorCollection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilCachedIteratorCollection)

@implementation NetI2pRouterUtilCachedIteratorCollection_Node

- (instancetype)initWithNetI2pRouterUtilCachedIteratorCollection_Node:(NetI2pRouterUtilCachedIteratorCollection_Node *)prev
                                                               withId:(id)element {
  NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(self, prev, element);
  return self;
}

- (void)dealloc {
  RELEASE_(item_);
  RELEASE_(next_);
  RELEASE_(prev_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilCachedIteratorCollection_Node:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "item_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "next_", "LNetI2pRouterUtilCachedIteratorCollection_Node;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "prev_", "LNetI2pRouterUtilCachedIteratorCollection_Node;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterUtilCachedIteratorCollection_Node;LNSObject;", "(Lnet/i2p/router/util/CachedIteratorCollection$Node<TE;>;TE;)V", "TE;", "Lnet/i2p/router/util/CachedIteratorCollection$Node<TE;>;", "LNetI2pRouterUtilCachedIteratorCollection;", "<E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilCachedIteratorCollection_Node = { "Node", "net.i2p.router.util", ptrTable, methods, fields, 7, 0xa, 1, 3, 4, -1, -1, 5, -1 };
  return &_NetI2pRouterUtilCachedIteratorCollection_Node;
}

@end

void NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *self, NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element) {
  NSObject_init(self);
  JreStrongAssign(&self->item_, element);
  JreStrongAssign(&self->prev_, prev);
  JreStrongAssign(&self->next_, nil);
}

NetI2pRouterUtilCachedIteratorCollection_Node *new_NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilCachedIteratorCollection_Node, initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_, prev, element)
}

NetI2pRouterUtilCachedIteratorCollection_Node *create_NetI2pRouterUtilCachedIteratorCollection_Node_initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_(NetI2pRouterUtilCachedIteratorCollection_Node *prev, id element) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilCachedIteratorCollection_Node, initWithNetI2pRouterUtilCachedIteratorCollection_Node_withId_, prev, element)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilCachedIteratorCollection_Node)

@implementation NetI2pRouterUtilCachedIteratorCollection_CachedIterator

- (instancetype)initWithNetI2pRouterUtilCachedIteratorCollection:(NetI2pRouterUtilCachedIteratorCollection *)outer$ {
  NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(self, outer$);
  return self;
}

- (void)reset {
  NetI2pRouterUtilCachedIteratorCollection_CachedIterator_reset(self);
}

- (void)remove {
  if (nextCalled_) {
    if (itrIndexNode_ != nil) {
      if (itrIndexNode_ != ((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(this$0_->first_))->next_) {
        JreStrongAssign(&itrIndexNode_->prev_, ((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(itrIndexNode_->prev_))->prev_);
        JreStrongAssign(&itrIndexNode_->prev_->next_, itrIndexNode_);
      }
      else {
        JreStrongAssign(&itrIndexNode_->prev_, nil);
        JreStrongAssign(&this$0_->first_, itrIndexNode_);
      }
    }
    else {
      if (((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(this$0_->last_))->prev_ != nil) {
        JreStrongAssign(&this$0_->last_->prev_->next_, nil);
        JreStrongAssign(&this$0_->last_, this$0_->last_->prev_);
      }
      else {
        nextCalled_ = false;
        [this$0_ clear];
        return;
      }
    }
    this$0_->size_--;
    nextCalled_ = false;
  }
  else {
    @throw create_JavaLangIllegalStateException_init();
  }
}

- (jboolean)hasNext {
  return itrIndexNode_ != nil;
}

- (id)next {
  if ([self hasNext]) {
    NetI2pRouterUtilCachedIteratorCollection_Node *node = itrIndexNode_;
    JreStrongAssign(&itrIndexNode_, ((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(itrIndexNode_))->next_);
    nextCalled_ = true;
    return ((NetI2pRouterUtilCachedIteratorCollection_Node *) nil_chk(node))->item_;
  }
  else {
    @throw create_JavaUtilNoSuchElementException_init();
  }
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(itrIndexNode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilCachedIteratorCollection:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterUtilCachedIteratorCollection;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "nextCalled_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "itrIndexNode_", "LNetI2pRouterUtilCachedIteratorCollection_Node;", .constantValue.asLong = 0, 0x82, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "Lnet/i2p/router/util/CachedIteratorCollection<TE;>;", "Lnet/i2p/router/util/CachedIteratorCollection$Node<TE;>;", "LNetI2pRouterUtilCachedIteratorCollection;", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilCachedIteratorCollection_CachedIterator = { "CachedIterator", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x2, 5, 3, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterUtilCachedIteratorCollection_CachedIterator;
}

@end

void NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection_CachedIterator *self, NetI2pRouterUtilCachedIteratorCollection *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->itrIndexNode_, outer$->first_);
}

NetI2pRouterUtilCachedIteratorCollection_CachedIterator *new_NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilCachedIteratorCollection_CachedIterator, initWithNetI2pRouterUtilCachedIteratorCollection_, outer$)
}

NetI2pRouterUtilCachedIteratorCollection_CachedIterator *create_NetI2pRouterUtilCachedIteratorCollection_CachedIterator_initWithNetI2pRouterUtilCachedIteratorCollection_(NetI2pRouterUtilCachedIteratorCollection *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilCachedIteratorCollection_CachedIterator, initWithNetI2pRouterUtilCachedIteratorCollection_, outer$)
}

void NetI2pRouterUtilCachedIteratorCollection_CachedIterator_reset(NetI2pRouterUtilCachedIteratorCollection_CachedIterator *self) {
  JreStrongAssign(&self->itrIndexNode_, self->this$0_->first_);
  self->nextCalled_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilCachedIteratorCollection_CachedIterator)
