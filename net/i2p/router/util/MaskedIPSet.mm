//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/MaskedIPSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/util/MaskedIPSet.h"

@interface NetI2pRouterUtilMaskedIPSet ()

+ (NSString *)maskedIPWithByteArray:(IOSByteArray *)ip
                            withInt:(jint)mask;

@end

__attribute__((unused)) static NSString *NetI2pRouterUtilMaskedIPSet_maskedIPWithByteArray_withInt_(IOSByteArray *ip, jint mask);

@implementation NetI2pRouterUtilMaskedIPSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterUtilMaskedIPSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  NetI2pRouterUtilMaskedIPSet_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer
                                          withInt:(jint)mask {
  NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(self, ctx, peer, mask);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                   withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)pinfo
                                          withInt:(jint)mask {
  NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_(self, ctx, pinfo, mask);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
                               withNetI2pDataHash:(NetI2pDataHash *)peer
                   withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)pinfo
                                          withInt:(jint)mask {
  NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(self, ctx, peer, pinfo, mask);
  return self;
}

+ (NSString *)maskedIPWithByteArray:(IOSByteArray *)ip
                            withInt:(jint)mask {
  return NetI2pRouterUtilMaskedIPSet_maskedIPWithByteArray_withInt_(ip, mask);
}

- (jboolean)containsAnyWithJavaUtilSet:(id<JavaUtilSet>)b {
  if ([self isEmpty] || [((id<JavaUtilSet>) nil_chk(b)) isEmpty]) return false;
  for (NSString * __strong s in nil_chk(b)) {
    if ([self containsWithId:s]) return true;
  }
  return false;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withInt:);
  methods[3].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withInt:);
  methods[4].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withNetI2pDataRouterRouterInfo:withInt:);
  methods[5].selector = @selector(maskedIPWithByteArray:withInt:);
  methods[6].selector = @selector(containsAnyWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "LNetI2pRouterRouterContext;LNetI2pDataHash;I", "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;I", "LNetI2pRouterRouterContext;LNetI2pDataHash;LNetI2pDataRouterRouterInfo;I", "maskedIP", "[BI", "containsAny", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Z", "Ljava/util/HashSet<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilMaskedIPSet = { "MaskedIPSet", "net.i2p.router.util", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, 9, -1 };
  return &_NetI2pRouterUtilMaskedIPSet;
}

@end

void NetI2pRouterUtilMaskedIPSet_init(NetI2pRouterUtilMaskedIPSet *self) {
  JavaUtilHashSet_init(self);
}

NetI2pRouterUtilMaskedIPSet *new_NetI2pRouterUtilMaskedIPSet_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilMaskedIPSet, init)
}

NetI2pRouterUtilMaskedIPSet *create_NetI2pRouterUtilMaskedIPSet_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilMaskedIPSet, init)
}

void NetI2pRouterUtilMaskedIPSet_initWithInt_(NetI2pRouterUtilMaskedIPSet *self, jint initialCapacity) {
  JavaUtilHashSet_initWithInt_(self, initialCapacity);
}

NetI2pRouterUtilMaskedIPSet *new_NetI2pRouterUtilMaskedIPSet_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilMaskedIPSet, initWithInt_, initialCapacity)
}

NetI2pRouterUtilMaskedIPSet *create_NetI2pRouterUtilMaskedIPSet_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilMaskedIPSet, initWithInt_, initialCapacity)
}

void NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(NetI2pRouterUtilMaskedIPSet *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, jint mask) {
  NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(self, ctx, peer, [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer], mask);
}

NetI2pRouterUtilMaskedIPSet *new_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, jint mask) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_, ctx, peer, mask)
}

NetI2pRouterUtilMaskedIPSet *create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, jint mask) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_, ctx, peer, mask)
}

void NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterUtilMaskedIPSet *self, NetI2pRouterRouterContext *ctx, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(self, ctx, pinfo != nil ? [pinfo getHash] : nil, pinfo, mask);
}

NetI2pRouterUtilMaskedIPSet *new_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_, ctx, pinfo, mask)
}

NetI2pRouterUtilMaskedIPSet *create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withInt_, ctx, pinfo, mask)
}

void NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterUtilMaskedIPSet *self, NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  JavaUtilHashSet_initWithInt_(self, 4);
  if (pinfo == nil) return;
  IOSByteArray *commIP = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) commSystem])) getIPWithNetI2pDataHash:peer];
  if (commIP != nil) [self addWithId:NetI2pRouterUtilMaskedIPSet_maskedIPWithByteArray_withInt_(commIP, mask)];
  id<JavaUtilCollection> paddr = [pinfo getAddresses];
  for (NetI2pDataRouterRouterAddress * __strong pa in nil_chk(paddr)) {
    IOSByteArray *pib = [((NetI2pDataRouterRouterAddress *) nil_chk(pa)) getIP];
    if (pib == nil) continue;
    [self addWithId:NetI2pRouterUtilMaskedIPSet_maskedIPWithByteArray_withInt_(pib, mask)];
    jint port = [pa getPort];
    if (port > 0) [self addWithId:JreStrcat("CI", 'p', port)];
    if ([pa getCost] == 2 && [@"NTCP" isEqual:[pa getTransportStyle]]) [self addWithId:@"=cost2"];
  }
  NSString *family = [pinfo getOptionWithNSString:@"family"];
  if (family != nil) {
    [self addWithId:JreStrcat("C$", 'x', family)];
  }
}

NetI2pRouterUtilMaskedIPSet *new_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_, ctx, peer, pinfo, mask)
}

NetI2pRouterUtilMaskedIPSet *create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_(NetI2pRouterRouterContext *ctx, NetI2pDataHash *peer, NetI2pDataRouterRouterInfo *pinfo, jint mask) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilMaskedIPSet, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withNetI2pDataRouterRouterInfo_withInt_, ctx, peer, pinfo, mask)
}

NSString *NetI2pRouterUtilMaskedIPSet_maskedIPWithByteArray_withInt_(IOSByteArray *ip, jint mask) {
  NetI2pRouterUtilMaskedIPSet_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(1 + (mask * 2));
  jchar delim;
  if (((IOSByteArray *) nil_chk(ip))->size_ == 16) {
    mask = 6;
    delim = ':';
  }
  else {
    delim = '.';
  }
  [buf appendWithChar:delim];
  [buf appendWithNSString:JavaLangLong_toHexStringWithLong_(NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(ip, 0, mask))];
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilMaskedIPSet)
