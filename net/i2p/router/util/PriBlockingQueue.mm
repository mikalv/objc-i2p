//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/PriBlockingQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Comparator.h"
#include "java/util/concurrent/PriorityBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/router/util/PQEntry.h"
#include "net/i2p/router/util/PriBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pRouterUtilPriBlockingQueue () {
 @public
  JavaUtilConcurrentAtomicAtomicLong *_seqNum_;
  NSString *STAT_FULL_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilPriBlockingQueue, _seqNum_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilPriBlockingQueue, STAT_FULL_, NSString *)

inline jlong NetI2pRouterUtilPriBlockingQueue_get_serialVersionUID(void);
#define NetI2pRouterUtilPriBlockingQueue_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilPriBlockingQueue, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$2(void);

@interface NetI2pRouterUtilPriBlockingQueue_PriorityComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(id<NetI2pRouterUtilPQEntry>)l
               withId:(id<NetI2pRouterUtilPQEntry>)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilPriBlockingQueue_PriorityComparator)

__attribute__((unused)) static void NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init(NetI2pRouterUtilPriBlockingQueue_PriorityComparator *self);

__attribute__((unused)) static NetI2pRouterUtilPriBlockingQueue_PriorityComparator *new_NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilPriBlockingQueue_PriorityComparator *create_NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilPriBlockingQueue_PriorityComparator)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterUtilPriBlockingQueue)

IOSLongArray *NetI2pRouterUtilPriBlockingQueue_RATES;

@implementation NetI2pRouterUtilPriBlockingQueue

+ (IOSLongArray *)RATES {
  return NetI2pRouterUtilPriBlockingQueue_RATES;
}

+ (jint)BACKLOG_SIZE {
  return NetI2pRouterUtilPriBlockingQueue_BACKLOG_SIZE;
}

+ (jint)MAX_SIZE {
  return NetI2pRouterUtilPriBlockingQueue_MAX_SIZE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)name
                                    withInt:(jint)initialCapacity {
  NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(self, ctx, name, initialCapacity);
  return self;
}

- (jboolean)addWithId:(id<NetI2pRouterUtilPQEntry>)o {
  [self timestampWithNetI2pRouterUtilPQEntry:o];
  if ([self size] >= NetI2pRouterUtilPriBlockingQueue_MAX_SIZE) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:STAT_FULL_ withLong:1];
    return false;
  }
  return [super addWithId:o];
}

- (jboolean)offerWithId:(id<NetI2pRouterUtilPQEntry>)o {
  [self timestampWithNetI2pRouterUtilPQEntry:o];
  if ([self size] >= NetI2pRouterUtilPriBlockingQueue_MAX_SIZE) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:STAT_FULL_ withLong:1];
    return false;
  }
  return [super offerWithId:o];
}

- (jboolean)offerWithId:(id<NetI2pRouterUtilPQEntry>)o
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [self timestampWithNetI2pRouterUtilPQEntry:o];
  if ([self size] >= NetI2pRouterUtilPriBlockingQueue_MAX_SIZE) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:STAT_FULL_ withLong:1];
    return false;
  }
  return [super offerWithId:o withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (void)putWithId:(id<NetI2pRouterUtilPQEntry>)o {
  [self timestampWithNetI2pRouterUtilPQEntry:o];
  [super putWithId:o];
}

- (jboolean)isBacklogged {
  return [self size] >= NetI2pRouterUtilPriBlockingQueue_BACKLOG_SIZE;
}

- (void)timestampWithNetI2pRouterUtilPQEntry:(id<NetI2pRouterUtilPQEntry>)o {
  [((id<NetI2pRouterUtilPQEntry>) nil_chk(o)) setSeqNumWithLong:[((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_seqNum_)) incrementAndGet]];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_name_);
  RELEASE_(_seqNum_);
  RELEASE_(STAT_FULL_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, 4, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, 7, 8, -1 },
    { NULL, "V", 0x1, 9, 2, -1, 10, 11, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 2, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(offerWithId:);
  methods[3].selector = @selector(offerWithId:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(putWithId:);
  methods[5].selector = @selector(isBacklogged);
  methods[6].selector = @selector(timestampWithNetI2pRouterUtilPQEntry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pRouterUtilPriBlockingQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x94, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x94, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_seqNum_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "STAT_FULL_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "RATES", "[J", .constantValue.asLong = 0, 0x1c, -1, 13, -1, -1 },
    { "BACKLOG_SIZE", "I", .constantValue.asInt = NetI2pRouterUtilPriBlockingQueue_BACKLOG_SIZE, 0x1c, -1, -1, -1, -1 },
    { "MAX_SIZE", "I", .constantValue.asInt = NetI2pRouterUtilPriBlockingQueue_MAX_SIZE, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;I", "add", "LNetI2pRouterUtilPQEntry;", "(TE;)Z", (void *)&NetI2pRouterUtilPriBlockingQueue__Annotations$0, "offer", "LNetI2pRouterUtilPQEntry;JLJavaUtilConcurrentTimeUnit;", "(TE;JLjava/util/concurrent/TimeUnit;)Z", (void *)&NetI2pRouterUtilPriBlockingQueue__Annotations$1, "put", "(TE;)V", (void *)&NetI2pRouterUtilPriBlockingQueue__Annotations$2, "timestamp", &NetI2pRouterUtilPriBlockingQueue_RATES, "LNetI2pRouterUtilPriBlockingQueue_PriorityComparator;", "<E::Lnet/i2p/router/util/PQEntry;>Ljava/util/concurrent/PriorityBlockingQueue<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilPriBlockingQueue = { "PriBlockingQueue", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 7, 9, -1, 14, -1, 15, -1 };
  return &_NetI2pRouterUtilPriBlockingQueue;
}

+ (void)initialize {
  if (self == [NetI2pRouterUtilPriBlockingQueue class]) {
    JreStrongAssignAndConsume(&NetI2pRouterUtilPriBlockingQueue_RATES, [IOSLongArray newArrayWithLongs:(jlong[]){ 5 * 60 * 1000, 60 * 60 * 1000 } count:2]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterUtilPriBlockingQueue)
  }
}

@end

void NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pRouterUtilPriBlockingQueue *self, NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  JavaUtilConcurrentPriorityBlockingQueue_initWithInt_withJavaUtilComparator_(self, initialCapacity, create_NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init());
  JreStrongAssignAndConsume(&self->_seqNum_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:JavaUtilConcurrentPriorityBlockingQueue_class_()]);
  JreStrongAssign(&self->_name_, name);
  JreStrongAssign(&self->STAT_FULL_, [(JreStrcat("$$$", @"pbq.", name, @".full")) java_intern]);
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:self->STAT_FULL_ withNSString:@"queue full" withNSString:@"Router" withLongArray:NetI2pRouterUtilPriBlockingQueue_RATES];
}

NetI2pRouterUtilPriBlockingQueue *new_NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilPriBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, initialCapacity)
}

NetI2pRouterUtilPriBlockingQueue *create_NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilPriBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, initialCapacity)
}

IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterUtilPriBlockingQueue__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilPriBlockingQueue)

@implementation NetI2pRouterUtilPriBlockingQueue_PriorityComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id<NetI2pRouterUtilPQEntry>)l
               withId:(id<NetI2pRouterUtilPQEntry>)r {
  jint d = [((id<NetI2pRouterUtilPQEntry>) nil_chk(r)) getPriority] - [((id<NetI2pRouterUtilPQEntry>) nil_chk(l)) getPriority];
  if (d != 0) return d;
  jlong ld = [l getSeqNum] - [r getSeqNum];
  return ld > 0 ? 1 : -1;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pRouterUtilPQEntry;LNetI2pRouterUtilPQEntry;", "(TE;TE;)I", "LNetI2pRouterUtilPriBlockingQueue;", "<E::Lnet/i2p/router/util/PQEntry;>Ljava/lang/Object;Ljava/util/Comparator<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilPriBlockingQueue_PriorityComparator = { "PriorityComparator", "net.i2p.router.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_NetI2pRouterUtilPriBlockingQueue_PriorityComparator;
}

@end

void NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init(NetI2pRouterUtilPriBlockingQueue_PriorityComparator *self) {
  NSObject_init(self);
}

NetI2pRouterUtilPriBlockingQueue_PriorityComparator *new_NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilPriBlockingQueue_PriorityComparator, init)
}

NetI2pRouterUtilPriBlockingQueue_PriorityComparator *create_NetI2pRouterUtilPriBlockingQueue_PriorityComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilPriBlockingQueue_PriorityComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilPriBlockingQueue_PriorityComparator)
