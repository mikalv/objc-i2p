//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/CoDelBlockingQueue.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/util/CDQEntry.h"
#include "net/i2p/router/util/CoDelBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

static id (*NetI2pRouterUtilCoDelBlockingQueue_super$_take)(id, SEL);

static id (*NetI2pRouterUtilCoDelBlockingQueue_super$_poll)(id, SEL);

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pRouterUtilCoDelBlockingQueue () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  NSString *_name_;
  jint _capacity_;
  jlong _first_above_time_;
  jlong _drop_next_;
  jint _count_;
  jboolean _dropping_;
  jlong _now_;
  jlong _id_;
  NSString *STAT_DROP_;
  NSString *STAT_DELAY_;
}

- (jboolean)updateVarsWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)entry_;

- (id<NetI2pRouterUtilCDQEntry>)deque;

- (id<NetI2pRouterUtilCDQEntry>)codelWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)rv;

- (void)dropWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)entry_;

- (void)control_lawWithLong:(jlong)t;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelBlockingQueue, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelBlockingQueue, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelBlockingQueue, _name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelBlockingQueue, STAT_DROP_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelBlockingQueue, STAT_DELAY_, NSString *)

inline jlong NetI2pRouterUtilCoDelBlockingQueue_get_serialVersionUID(void);
#define NetI2pRouterUtilCoDelBlockingQueue_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelBlockingQueue, serialVersionUID, jlong)

inline JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterUtilCoDelBlockingQueue_get___id(void);
static JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterUtilCoDelBlockingQueue___id;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterUtilCoDelBlockingQueue, __id, JavaUtilConcurrentAtomicAtomicLong *)

inline jlong NetI2pRouterUtilCoDelBlockingQueue_get_TARGET(void);
#define NetI2pRouterUtilCoDelBlockingQueue_TARGET 15LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelBlockingQueue, TARGET, jlong)

inline jlong NetI2pRouterUtilCoDelBlockingQueue_get_INTERVAL(void);
#define NetI2pRouterUtilCoDelBlockingQueue_INTERVAL 100LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelBlockingQueue, INTERVAL, jlong)

inline IOSLongArray *NetI2pRouterUtilCoDelBlockingQueue_get_RATES(void);
static IOSLongArray *NetI2pRouterUtilCoDelBlockingQueue_RATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterUtilCoDelBlockingQueue, RATES, IOSLongArray *)

inline jlong NetI2pRouterUtilCoDelBlockingQueue_get_BACKLOG_TIME(void);
#define NetI2pRouterUtilCoDelBlockingQueue_BACKLOG_TIME 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelBlockingQueue, BACKLOG_TIME, jlong)

__attribute__((unused)) static jboolean NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> entry_);

__attribute__((unused)) static id<NetI2pRouterUtilCDQEntry> NetI2pRouterUtilCoDelBlockingQueue_deque(NetI2pRouterUtilCoDelBlockingQueue *self);

__attribute__((unused)) static id<NetI2pRouterUtilCDQEntry> NetI2pRouterUtilCoDelBlockingQueue_codelWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> rv);

__attribute__((unused)) static void NetI2pRouterUtilCoDelBlockingQueue_dropWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> entry_);

__attribute__((unused)) static void NetI2pRouterUtilCoDelBlockingQueue_control_lawWithLong_(NetI2pRouterUtilCoDelBlockingQueue *self, jlong t);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterUtilCoDelBlockingQueue)

@implementation NetI2pRouterUtilCoDelBlockingQueue

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)name
                                    withInt:(jint)capacity {
  NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(self, ctx, name, capacity);
  return self;
}

- (jboolean)addWithId:(id<NetI2pRouterUtilCDQEntry>)o {
  [((id<NetI2pRouterUtilCDQEntry>) nil_chk(o)) setEnqueueTimeWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]];
  return [super addWithId:o];
}

- (jboolean)offerWithId:(id<NetI2pRouterUtilCDQEntry>)o {
  [((id<NetI2pRouterUtilCDQEntry>) nil_chk(o)) setEnqueueTimeWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]];
  return [super offerWithId:o];
}

- (jboolean)offerWithId:(id<NetI2pRouterUtilCDQEntry>)o
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((id<NetI2pRouterUtilCDQEntry>) nil_chk(o)) setEnqueueTimeWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]];
  return [super offerWithId:o withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (void)putWithId:(id<NetI2pRouterUtilCDQEntry>)o {
  [((id<NetI2pRouterUtilCDQEntry>) nil_chk(o)) setEnqueueTimeWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]];
  [super putWithId:o];
}

- (void)clear {
  [super clear];
  @synchronized(self) {
    _first_above_time_ = 0;
    _drop_next_ = 0;
    _count_ = 0;
    _dropping_ = false;
  }
}

- (id<NetI2pRouterUtilCDQEntry>)take {
  id<NetI2pRouterUtilCDQEntry> rv;
  do {
    rv = NetI2pRouterUtilCoDelBlockingQueue_deque(self);
  }
  while (rv == nil);
  return rv;
}

- (id<NetI2pRouterUtilCDQEntry>)poll {
  id<NetI2pRouterUtilCDQEntry> rv = [super poll];
  return NetI2pRouterUtilCoDelBlockingQueue_codelWithNetI2pRouterUtilCDQEntry_(self, rv);
}

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jint rv = 0;
  id<NetI2pRouterUtilCDQEntry> e;
  while ((e = [self poll]) != nil) {
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:e];
    rv++;
  }
  return rv;
}

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements {
  jint rv = 0;
  id<NetI2pRouterUtilCDQEntry> e;
  while ((e = [self poll]) != nil && rv++ < maxElements) {
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:e];
  }
  return rv;
}

- (jint)drainAllToWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super drainToWithJavaUtilCollection:c];
}

- (jboolean)isBacklogged {
  id<NetI2pRouterUtilCDQEntry> e = [self peek];
  if (e == nil) return false;
  return _dropping_ || [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - [e getEnqueueTime] >= NetI2pRouterUtilCoDelBlockingQueue_BACKLOG_TIME || [self remainingCapacity] < _capacity_ / 4;
}

- (jboolean)updateVarsWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)entry_ {
  return NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(self, entry_);
}

- (id<NetI2pRouterUtilCDQEntry>)deque {
  return NetI2pRouterUtilCoDelBlockingQueue_deque(self);
}

- (id<NetI2pRouterUtilCDQEntry>)codelWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)rv {
  return NetI2pRouterUtilCoDelBlockingQueue_codelWithNetI2pRouterUtilCDQEntry_(self, rv);
}

- (void)dropWithNetI2pRouterUtilCDQEntry:(id<NetI2pRouterUtilCDQEntry>)entry_ {
  NetI2pRouterUtilCoDelBlockingQueue_dropWithNetI2pRouterUtilCDQEntry_(self, entry_);
}

- (void)control_lawWithLong:(jlong)t {
  NetI2pRouterUtilCoDelBlockingQueue_control_lawWithLong_(self, t);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  JreCheckFinalize(self, [NetI2pRouterUtilCoDelBlockingQueue class]);
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_name_);
  RELEASE_(STAT_DROP_);
  RELEASE_(STAT_DELAY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 2, 6, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDQEntry;", 0x1, -1, -1, 6, 10, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDQEntry;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 11, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x1, 16, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 2, -1, 3, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDQEntry;", 0x2, -1, -1, 6, 10, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDQEntry;", 0x2, 18, 2, -1, 19, -1, -1 },
    { NULL, "V", 0x2, 20, 2, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(offerWithId:);
  methods[3].selector = @selector(offerWithId:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(putWithId:);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(take);
  methods[7].selector = @selector(poll);
  methods[8].selector = @selector(drainToWithJavaUtilCollection:);
  methods[9].selector = @selector(drainToWithJavaUtilCollection:withInt:);
  methods[10].selector = @selector(drainAllToWithJavaUtilCollection:);
  methods[11].selector = @selector(isBacklogged);
  methods[12].selector = @selector(updateVarsWithNetI2pRouterUtilCDQEntry:);
  methods[13].selector = @selector(deque);
  methods[14].selector = @selector(codelWithNetI2pRouterUtilCDQEntry:);
  methods[15].selector = @selector(dropWithNetI2pRouterUtilCDQEntry:);
  methods[16].selector = @selector(control_lawWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pRouterUtilCoDelBlockingQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_capacity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_first_above_time_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_drop_next_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dropping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_now_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "__id", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "_id_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TARGET", "J", .constantValue.asLong = NetI2pRouterUtilCoDelBlockingQueue_TARGET, 0x1a, -1, -1, -1, -1 },
    { "INTERVAL", "J", .constantValue.asLong = NetI2pRouterUtilCoDelBlockingQueue_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "STAT_DROP_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "STAT_DELAY_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "RATES", "[J", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "BACKLOG_TIME", "J", .constantValue.asLong = NetI2pRouterUtilCoDelBlockingQueue_BACKLOG_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;I", "add", "LNetI2pRouterUtilCDQEntry;", "(TE;)Z", "offer", "LNetI2pRouterUtilCDQEntry;JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "(TE;JLjava/util/concurrent/TimeUnit;)Z", "put", "(TE;)V", "()TE;", "drainTo", "LJavaUtilCollection;", "(Ljava/util/Collection<-TE;>;)I", "LJavaUtilCollection;I", "(Ljava/util/Collection<-TE;>;I)I", "drainAllTo", "updateVars", "codel", "(TE;)TE;", "drop", "control_law", "J", &NetI2pRouterUtilCoDelBlockingQueue___id, &NetI2pRouterUtilCoDelBlockingQueue_RATES, "<E::Lnet/i2p/router/util/CDQEntry;>Ljava/util/concurrent/LinkedBlockingQueue<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilCoDelBlockingQueue = { "CoDelBlockingQueue", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 17, 18, -1, -1, -1, 25, -1 };
  return &_NetI2pRouterUtilCoDelBlockingQueue;
}

+ (void)initialize {
  if (self == [NetI2pRouterUtilCoDelBlockingQueue class]) {
    NetI2pRouterUtilCoDelBlockingQueue_super$_poll = (id (*)(id, SEL))[JavaUtilConcurrentLinkedBlockingQueue instanceMethodForSelector:@selector(poll)];
    NetI2pRouterUtilCoDelBlockingQueue_super$_take = (id (*)(id, SEL))[JavaUtilConcurrentLinkedBlockingQueue instanceMethodForSelector:@selector(take)];
    JreStrongAssignAndConsume(&NetI2pRouterUtilCoDelBlockingQueue___id, new_JavaUtilConcurrentAtomicAtomicLong_init());
    JreStrongAssignAndConsume(&NetI2pRouterUtilCoDelBlockingQueue_RATES, [IOSLongArray newArrayWithLongs:(jlong[]){ 5 * 60 * 1000, 60 * 60 * 1000 } count:2]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterUtilCoDelBlockingQueue)
  }
}

@end

void NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pRouterUtilCoDelBlockingQueue *self, NetI2pI2PAppContext *ctx, NSString *name, jint capacity) {
  JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self, capacity);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterUtilCoDelBlockingQueue_class_()]);
  JreStrongAssign(&self->_name_, name);
  self->_capacity_ = capacity;
  JreStrongAssign(&self->STAT_DROP_, [(JreStrcat("$$$", @"codel.", name, @".drop")) java_intern]);
  JreStrongAssign(&self->STAT_DELAY_, [(JreStrcat("$$$", @"codel.", name, @".delay")) java_intern]);
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:self->STAT_DROP_ withNSString:@"queue delay of dropped items" withNSString:@"Router" withLongArray:NetI2pRouterUtilCoDelBlockingQueue_RATES];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:self->STAT_DELAY_ withNSString:@"average queue delay" withNSString:@"Router" withLongArray:NetI2pRouterUtilCoDelBlockingQueue_RATES];
  self->_id_ = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(NetI2pRouterUtilCoDelBlockingQueue___id)) incrementAndGet];
}

NetI2pRouterUtilCoDelBlockingQueue *new_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint capacity) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilCoDelBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, capacity)
}

NetI2pRouterUtilCoDelBlockingQueue *create_NetI2pRouterUtilCoDelBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint capacity) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilCoDelBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, capacity)
}

jboolean NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> entry_) {
  if (entry_ == nil) {
    self->_first_above_time_ = 0;
    return false;
  }
  self->_now_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
  jboolean ok_to_drop = false;
  jlong sojurn = self->_now_ - [entry_ getEnqueueTime];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:self->STAT_DELAY_ withLong:sojurn];
  if (sojurn < NetI2pRouterUtilCoDelBlockingQueue_TARGET || [self isEmpty]) {
    self->_first_above_time_ = 0;
  }
  else {
    if (self->_first_above_time_ == 0) {
      self->_first_above_time_ = self->_now_ + NetI2pRouterUtilCoDelBlockingQueue_INTERVAL;
    }
    else if (self->_now_ >= self->_first_above_time_) {
      ok_to_drop = true;
    }
  }
  return ok_to_drop;
}

id<NetI2pRouterUtilCDQEntry> NetI2pRouterUtilCoDelBlockingQueue_deque(NetI2pRouterUtilCoDelBlockingQueue *self) {
  id<NetI2pRouterUtilCDQEntry> rv = NetI2pRouterUtilCoDelBlockingQueue_super$_take(self, @selector(take));
  return NetI2pRouterUtilCoDelBlockingQueue_codelWithNetI2pRouterUtilCDQEntry_(self, rv);
}

id<NetI2pRouterUtilCDQEntry> NetI2pRouterUtilCoDelBlockingQueue_codelWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> rv) {
  @synchronized(self) {
    jboolean ok_to_drop = NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(self, rv);
    if (self->_dropping_) {
      if (!ok_to_drop) {
        self->_dropping_ = false;
      }
      else if (self->_now_ >= self->_drop_next_) {
        while (self->_now_ >= self->_drop_next_ && self->_dropping_) {
          NetI2pRouterUtilCoDelBlockingQueue_dropWithNetI2pRouterUtilCDQEntry_(self, rv);
          self->_count_++;
          rv = NetI2pRouterUtilCoDelBlockingQueue_super$_poll(self, @selector(poll));
          ok_to_drop = NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(self, rv);
          if (!ok_to_drop) {
            self->_dropping_ = false;
          }
          else {
            NetI2pRouterUtilCoDelBlockingQueue_control_lawWithLong_(self, self->_drop_next_);
          }
        }
      }
    }
    else if (ok_to_drop && (self->_now_ - self->_drop_next_ < NetI2pRouterUtilCoDelBlockingQueue_INTERVAL || self->_now_ - self->_first_above_time_ >= NetI2pRouterUtilCoDelBlockingQueue_INTERVAL)) {
      NetI2pRouterUtilCoDelBlockingQueue_dropWithNetI2pRouterUtilCDQEntry_(self, rv);
      rv = NetI2pRouterUtilCoDelBlockingQueue_super$_poll(self, @selector(poll));
      NetI2pRouterUtilCoDelBlockingQueue_updateVarsWithNetI2pRouterUtilCDQEntry_(self, rv);
      self->_dropping_ = true;
      if (self->_now_ - self->_drop_next_ < NetI2pRouterUtilCoDelBlockingQueue_INTERVAL) self->_count_ = self->_count_ > 2 ? self->_count_ - 2 : 1;
      else self->_count_ = 1;
      NetI2pRouterUtilCoDelBlockingQueue_control_lawWithLong_(self, self->_now_);
    }
  }
  return rv;
}

void NetI2pRouterUtilCoDelBlockingQueue_dropWithNetI2pRouterUtilCDQEntry_(NetI2pRouterUtilCoDelBlockingQueue *self, id<NetI2pRouterUtilCDQEntry> entry_) {
  jlong delay = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now] - [((id<NetI2pRouterUtilCDQEntry>) nil_chk(entry_)) getEnqueueTime];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:self->STAT_DROP_ withLong:delay];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$JC$$J$$$$$I$I$@", @"CDQ #", self->_id_, ' ', self->_name_, @" dropped item with delay ", delay, @", ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - self->_first_above_time_), @" since first above, ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - self->_drop_next_), @" since drop next, ", (self->_count_ + 1), @" dropped in this phase, ", [self size], @" remaining in queue: ", entry_)];
  [entry_ drop];
}

void NetI2pRouterUtilCoDelBlockingQueue_control_lawWithLong_(NetI2pRouterUtilCoDelBlockingQueue *self, jlong t) {
  self->_drop_next_ = t + JreFpToLong((NetI2pRouterUtilCoDelBlockingQueue_INTERVAL / JavaLangMath_sqrtWithDouble_(self->_count_)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilCoDelBlockingQueue)
