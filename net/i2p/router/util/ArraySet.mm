//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/ArraySet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "net/i2p/router/util/ArraySet.h"

@interface NetI2pRouterUtilArraySet () {
 @public
  IOSObjectArray *_entries_;
  jboolean _throwOnFull_;
  jint _size_;
  jint _overflowIndex_;
  jint modCount_;
}

- (jint)indexOfWithId:(id)o;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilArraySet, _entries_, IOSObjectArray *)

__attribute__((unused)) static jint NetI2pRouterUtilArraySet_indexOfWithId_(NetI2pRouterUtilArraySet *self, id o);

inline jlong NetI2pRouterUtilArraySet_SetFullException_get_serialVersionUID(void);
#define NetI2pRouterUtilArraySet_SetFullException_serialVersionUID 9087390587254111LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilArraySet_SetFullException, serialVersionUID, jlong)

@interface NetI2pRouterUtilArraySet_ASIterator : NSObject < JavaUtilIterator, JavaIoSerializable > {
 @public
  NetI2pRouterUtilArraySet *this$0_;
  jint cursor_;
  jint lastRet_;
  jint expectedModCount_;
}

- (instancetype)initWithNetI2pRouterUtilArraySet:(NetI2pRouterUtilArraySet *)outer$;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (void)checkForComodification;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilArraySet_ASIterator)

__attribute__((unused)) static void NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet_ASIterator *self, NetI2pRouterUtilArraySet *outer$);

__attribute__((unused)) static NetI2pRouterUtilArraySet_ASIterator *new_NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilArraySet_ASIterator *create_NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet *outer$);

__attribute__((unused)) static void NetI2pRouterUtilArraySet_ASIterator_checkForComodification(NetI2pRouterUtilArraySet_ASIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilArraySet_ASIterator)

@implementation NetI2pRouterUtilArraySet

+ (jint)MAX_CAPACITY {
  return NetI2pRouterUtilArraySet_MAX_CAPACITY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterUtilArraySet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  NetI2pRouterUtilArraySet_initWithJavaUtilCollection_(self, c);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  NetI2pRouterUtilArraySet_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
                withBoolean:(jboolean)throwOnFull {
  NetI2pRouterUtilArraySet_initWithInt_withBoolean_(self, capacity, throwOnFull);
  return self;
}

- (jint)indexOfWithId:(id)o {
  return NetI2pRouterUtilArraySet_indexOfWithId_(self, o);
}

- (jboolean)addWithId:(id)o {
  if (o == nil) @throw create_JavaLangNullPointerException_init();
  jint i = NetI2pRouterUtilArraySet_indexOfWithId_(self, o);
  if (i >= 0) {
    IOSObjectArray_Set(nil_chk(_entries_), i, o);
    return false;
  }
  if (_size_ >= ((IOSObjectArray *) nil_chk(_entries_))->size_) {
    if (_throwOnFull_) @throw create_NetI2pRouterUtilArraySet_SetFullException_init();
    i = _overflowIndex_++;
    if (i >= _entries_->size_) {
      i = 0;
      _overflowIndex_ = 0;
    }
  }
  else {
    modCount_++;
    i = _size_++;
  }
  IOSObjectArray_Set(_entries_, i, o);
  return true;
}

- (void)clear {
  if (_size_ != 0) {
    modCount_++;
    for (jint i = 0; i < _size_; i++) {
      IOSObjectArray_Set(nil_chk(_entries_), i, nil);
    }
    _size_ = 0;
  }
}

- (jboolean)containsWithId:(id)o {
  return NetI2pRouterUtilArraySet_indexOfWithId_(self, o) >= 0;
}

- (jboolean)isEmpty {
  return _size_ <= 0;
}

- (jboolean)removeWithId:(id)o {
  jint i = NetI2pRouterUtilArraySet_indexOfWithId_(self, o);
  if (i < 0) return false;
  modCount_++;
  _size_--;
  for (jint j = i; j < _size_; j++) {
    IOSObjectArray_Set(nil_chk(_entries_), j, IOSObjectArray_Get(_entries_, j + 1));
  }
  IOSObjectArray_Set(nil_chk(_entries_), _size_, nil);
  return true;
}

- (jint)size {
  return _size_;
}

- (id<JavaUtilIterator>)iterator {
  return create_NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(_entries_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilCollection:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithInt:withBoolean:);
  methods[4].selector = @selector(indexOfWithId:);
  methods[5].selector = @selector(addWithId:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(containsWithId:);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(removeWithId:);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_CAPACITY", "I", .constantValue.asInt = NetI2pRouterUtilArraySet_MAX_CAPACITY, 0x19, -1, -1, -1, -1 },
    { "_entries_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_throwOnFull_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_overflowIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modCount_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<+TE;>;)V", "I", "IZ", "indexOf", "LNSObject;", "add", "(TE;)Z", "contains", "remove", "()Ljava/util/Iterator<TE;>;", "LNetI2pRouterUtilArraySet_SetFullException;LNetI2pRouterUtilArraySet_ASIterator;", "<E:Ljava/lang/Object;>Ljava/util/AbstractSet<TE;>;Ljava/util/Set<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilArraySet = { "ArraySet", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, 11, -1, 12, -1 };
  return &_NetI2pRouterUtilArraySet;
}

@end

void NetI2pRouterUtilArraySet_init(NetI2pRouterUtilArraySet *self) {
  NetI2pRouterUtilArraySet_initWithInt_(self, NetI2pRouterUtilArraySet_MAX_CAPACITY);
}

NetI2pRouterUtilArraySet *new_NetI2pRouterUtilArraySet_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet, init)
}

NetI2pRouterUtilArraySet *create_NetI2pRouterUtilArraySet_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet, init)
}

void NetI2pRouterUtilArraySet_initWithJavaUtilCollection_(NetI2pRouterUtilArraySet *self, id<JavaUtilCollection> c) {
  NetI2pRouterUtilArraySet_init(self);
  [self addAllWithJavaUtilCollection:c];
}

NetI2pRouterUtilArraySet *new_NetI2pRouterUtilArraySet_initWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet, initWithJavaUtilCollection_, c)
}

NetI2pRouterUtilArraySet *create_NetI2pRouterUtilArraySet_initWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet, initWithJavaUtilCollection_, c)
}

void NetI2pRouterUtilArraySet_initWithInt_(NetI2pRouterUtilArraySet *self, jint capacity) {
  NetI2pRouterUtilArraySet_initWithInt_withBoolean_(self, capacity, true);
}

NetI2pRouterUtilArraySet *new_NetI2pRouterUtilArraySet_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet, initWithInt_, capacity)
}

NetI2pRouterUtilArraySet *create_NetI2pRouterUtilArraySet_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet, initWithInt_, capacity)
}

void NetI2pRouterUtilArraySet_initWithInt_withBoolean_(NetI2pRouterUtilArraySet *self, jint capacity, jboolean throwOnFull) {
  JavaUtilAbstractSet_init(self);
  if (capacity <= 0 || capacity > NetI2pRouterUtilArraySet_MAX_CAPACITY) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bad capacity");
  JreStrongAssignAndConsume(&self->_entries_, [IOSObjectArray newArrayWithLength:capacity type:NSObject_class_()]);
  self->_throwOnFull_ = throwOnFull;
}

NetI2pRouterUtilArraySet *new_NetI2pRouterUtilArraySet_initWithInt_withBoolean_(jint capacity, jboolean throwOnFull) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet, initWithInt_withBoolean_, capacity, throwOnFull)
}

NetI2pRouterUtilArraySet *create_NetI2pRouterUtilArraySet_initWithInt_withBoolean_(jint capacity, jboolean throwOnFull) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet, initWithInt_withBoolean_, capacity, throwOnFull)
}

jint NetI2pRouterUtilArraySet_indexOfWithId_(NetI2pRouterUtilArraySet *self, id o) {
  if (o != nil) {
    for (jint i = 0; i < self->_size_; i++) {
      if ([o isEqual:IOSObjectArray_Get(nil_chk(self->_entries_), i)]) return i;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilArraySet)

@implementation NetI2pRouterUtilArraySet_SetFullException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterUtilArraySet_SetFullException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pRouterUtilArraySet_SetFullException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterUtilArraySet;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilArraySet_SetFullException = { "SetFullException", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x9, 1, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilArraySet_SetFullException;
}

@end

void NetI2pRouterUtilArraySet_SetFullException_init(NetI2pRouterUtilArraySet_SetFullException *self) {
  JavaLangIllegalStateException_init(self);
}

NetI2pRouterUtilArraySet_SetFullException *new_NetI2pRouterUtilArraySet_SetFullException_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet_SetFullException, init)
}

NetI2pRouterUtilArraySet_SetFullException *create_NetI2pRouterUtilArraySet_SetFullException_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet_SetFullException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilArraySet_SetFullException)

@implementation NetI2pRouterUtilArraySet_ASIterator

- (instancetype)initWithNetI2pRouterUtilArraySet:(NetI2pRouterUtilArraySet *)outer$ {
  NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  return cursor_ != this$0_->_size_;
}

- (id)next {
  NetI2pRouterUtilArraySet_ASIterator_checkForComodification(self);
  @try {
    jint i = cursor_;
    id next = IOSObjectArray_Get(nil_chk(this$0_->_entries_), i);
    lastRet_ = i;
    cursor_ = i + 1;
    return next;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    NetI2pRouterUtilArraySet_ASIterator_checkForComodification(self);
    @throw create_JavaUtilNoSuchElementException_init();
  }
}

- (void)remove {
  if (lastRet_ < 0) @throw create_JavaLangIllegalStateException_init();
  NetI2pRouterUtilArraySet_ASIterator_checkForComodification(self);
  @try {
    [this$0_ removeWithId:JavaLangInteger_valueOfWithInt_(lastRet_)];
    if (lastRet_ < cursor_) cursor_--;
    lastRet_ = -1;
    expectedModCount_ = this$0_->modCount_;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    @throw create_JavaUtilConcurrentModificationException_init();
  }
}

- (void)checkForComodification {
  NetI2pRouterUtilArraySet_ASIterator_checkForComodification(self);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilArraySet:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(checkForComodification);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterUtilArraySet;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "cursor_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastRet_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expectedModCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "Lnet/i2p/router/util/ArraySet<TE;>;", "LNetI2pRouterUtilArraySet;", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilArraySet_ASIterator = { "ASIterator", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x2, 5, 4, 2, -1, -1, 3, -1 };
  return &_NetI2pRouterUtilArraySet_ASIterator;
}

@end

void NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet_ASIterator *self, NetI2pRouterUtilArraySet *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->cursor_ = 0;
  self->lastRet_ = -1;
  self->expectedModCount_ = outer$->modCount_;
}

NetI2pRouterUtilArraySet_ASIterator *new_NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilArraySet_ASIterator, initWithNetI2pRouterUtilArraySet_, outer$)
}

NetI2pRouterUtilArraySet_ASIterator *create_NetI2pRouterUtilArraySet_ASIterator_initWithNetI2pRouterUtilArraySet_(NetI2pRouterUtilArraySet *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilArraySet_ASIterator, initWithNetI2pRouterUtilArraySet_, outer$)
}

void NetI2pRouterUtilArraySet_ASIterator_checkForComodification(NetI2pRouterUtilArraySet_ASIterator *self) {
  if (self->this$0_->modCount_ != self->expectedModCount_) @throw create_JavaUtilConcurrentModificationException_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilArraySet_ASIterator)
