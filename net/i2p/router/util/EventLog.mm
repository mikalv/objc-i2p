//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/EventLog.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterUtilEventLog () {
 @public
  NetI2pI2PAppContext *_context_;
  JavaIoFile *_file_;
  id<JavaUtilMap> _cache_;
  id<JavaUtilMap> _cacheTime_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilEventLog, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilEventLog, _file_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilEventLog, _cache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilEventLog, _cacheTime_, id<JavaUtilMap>)

NSString *NetI2pRouterUtilEventLog_ABORTED = @"aborted";
NSString *NetI2pRouterUtilEventLog_BECAME_FLOODFILL = @"becameFloodfill";
NSString *NetI2pRouterUtilEventLog_CHANGE_IP = @"changeIP";
NSString *NetI2pRouterUtilEventLog_CHANGE_PORT = @"changePort";
NSString *NetI2pRouterUtilEventLog_CLOCK_SHIFT = @"clockShift";
NSString *NetI2pRouterUtilEventLog_CRASHED = @"crashed";
NSString *NetI2pRouterUtilEventLog_CRITICAL = @"critical";
NSString *NetI2pRouterUtilEventLog_INSTALLED = @"installed";
NSString *NetI2pRouterUtilEventLog_INSTALL_FAILED = @"installFailed";
NSString *NetI2pRouterUtilEventLog_NETWORK = @"network";
NSString *NetI2pRouterUtilEventLog_NEW_IDENT = @"newIdent";
NSString *NetI2pRouterUtilEventLog_NOT_FLOODFILL = @"disabledFloodfill";
NSString *NetI2pRouterUtilEventLog_OOM = @"oom";
NSString *NetI2pRouterUtilEventLog_REACHABILITY = @"reachability";
NSString *NetI2pRouterUtilEventLog_REKEYED = @"rekeyed";
NSString *NetI2pRouterUtilEventLog_RESEED = @"reseed";
NSString *NetI2pRouterUtilEventLog_SOFT_RESTART = @"softRestart";
NSString *NetI2pRouterUtilEventLog_STARTED = @"started";
NSString *NetI2pRouterUtilEventLog_STOPPED = @"stopped";
NSString *NetI2pRouterUtilEventLog_UPDATED = @"updated";
NSString *NetI2pRouterUtilEventLog_WATCHDOG = @"watchdog";

@implementation NetI2pRouterUtilEventLog

+ (NSString *)ABORTED {
  return NetI2pRouterUtilEventLog_ABORTED;
}

+ (NSString *)BECAME_FLOODFILL {
  return NetI2pRouterUtilEventLog_BECAME_FLOODFILL;
}

+ (NSString *)CHANGE_IP {
  return NetI2pRouterUtilEventLog_CHANGE_IP;
}

+ (NSString *)CHANGE_PORT {
  return NetI2pRouterUtilEventLog_CHANGE_PORT;
}

+ (NSString *)CLOCK_SHIFT {
  return NetI2pRouterUtilEventLog_CLOCK_SHIFT;
}

+ (NSString *)CRASHED {
  return NetI2pRouterUtilEventLog_CRASHED;
}

+ (NSString *)CRITICAL {
  return NetI2pRouterUtilEventLog_CRITICAL;
}

+ (NSString *)INSTALLED {
  return NetI2pRouterUtilEventLog_INSTALLED;
}

+ (NSString *)INSTALL_FAILED {
  return NetI2pRouterUtilEventLog_INSTALL_FAILED;
}

+ (NSString *)NETWORK {
  return NetI2pRouterUtilEventLog_NETWORK;
}

+ (NSString *)NEW_IDENT {
  return NetI2pRouterUtilEventLog_NEW_IDENT;
}

+ (NSString *)NOT_FLOODFILL {
  return NetI2pRouterUtilEventLog_NOT_FLOODFILL;
}

+ (NSString *)OOM {
  return NetI2pRouterUtilEventLog_OOM;
}

+ (NSString *)REACHABILITY {
  return NetI2pRouterUtilEventLog_REACHABILITY;
}

+ (NSString *)REKEYED {
  return NetI2pRouterUtilEventLog_REKEYED;
}

+ (NSString *)RESEED {
  return NetI2pRouterUtilEventLog_RESEED;
}

+ (NSString *)SOFT_RESTART {
  return NetI2pRouterUtilEventLog_SOFT_RESTART;
}

+ (NSString *)STARTED {
  return NetI2pRouterUtilEventLog_STARTED;
}

+ (NSString *)STOPPED {
  return NetI2pRouterUtilEventLog_STOPPED;
}

+ (NSString *)UPDATED {
  return NetI2pRouterUtilEventLog_UPDATED;
}

+ (NSString *)WATCHDOG {
  return NetI2pRouterUtilEventLog_WATCHDOG;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                             withJavaIoFile:(JavaIoFile *)file {
  NetI2pRouterUtilEventLog_initWithNetI2pI2PAppContext_withJavaIoFile_(self, ctx, file);
  return self;
}

- (void)addEventWithNSString:(NSString *)event {
  [self addEventWithNSString:event withNSString:nil];
}

- (void)addEventWithNSString:(NSString *)event
                withNSString:(NSString *)info {
  @synchronized(self) {
    if ([((NSString *) nil_chk(event)) java_contains:@" "] || [event java_contains:@"\n"] || (info != nil && [info java_contains:@"\n"])) @throw create_JavaLangIllegalArgumentException_init();
    [((id<JavaUtilMap>) nil_chk(_cache_)) removeWithId:event];
    [((id<JavaUtilMap>) nil_chk(_cacheTime_)) removeWithId:event];
    JavaIoOutputStream *out = nil;
    @try {
      out = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_withBoolean_(_file_, true);
      JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]])) appendWithChar:' '])) appendWithNSString:event];
      if (info != nil && [info java_length] > 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithNSString:info];
      if (NetI2pUtilSystemVersion_isWindows()) [buf appendWithChar:0x000d];
      [buf appendWithChar:0x000a];
      [out writeWithByteArray:[((NSString *) nil_chk([buf description])) java_getBytesWithCharsetName:@"UTF-8"]];
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      if (out != nil) @try {
        [out close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
}

- (id<JavaUtilSortedMap>)getEventsWithNSString:(NSString *)event
                                      withLong:(jlong)since {
  @synchronized(self) {
    id<JavaUtilSortedMap> rv = [((id<JavaUtilMap>) nil_chk(_cache_)) getWithId:event];
    if (rv != nil) {
      JavaLangLong *cacheTime = [((id<JavaUtilMap>) nil_chk(_cacheTime_)) getWithId:event];
      if (cacheTime != nil) {
        if (since >= [cacheTime longLongValue]) return JreRetainedLocalValue([rv tailMapWithId:JavaLangLong_valueOfWithLong_(since)]);
      }
    }
    rv = create_JavaUtilTreeMap_init();
    JavaIoBufferedReader *br = nil;
    @try {
      br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(_file_), @"UTF-8"));
      NSString *line = nil;
      while ((line = [br readLine]) != nil) {
        @try {
          IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_([((NSString *) nil_chk(line)) java_trim], @" ", 3);
          if (![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(s), 1))) isEqual:event]) continue;
          jlong time = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(s, 0));
          if (time <= since) continue;
          JavaLangLong *ltime = JavaLangLong_valueOfWithLong_(time);
          NSString *info = s->size_ > 2 ? IOSObjectArray_Get(s, 2) : @"";
          [rv putWithId:ltime withId:info];
        }
        @catch (JavaLangIndexOutOfBoundsException *ioobe) {
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
      rv = JavaUtilCollections_unmodifiableSortedMapWithJavaUtilSortedMap_(rv);
      [_cache_ putWithId:event withId:rv];
      [((id<JavaUtilMap>) nil_chk(_cacheTime_)) putWithId:event withId:JavaLangLong_valueOfWithLong_(since)];
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      if (br != nil) @try {
        [br close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
    return JreRetainedLocalValue(rv);
  }
}

- (id<JavaUtilSortedMap>)getEventsWithLong:(jlong)since {
  @synchronized(self) {
    id<JavaUtilSortedMap> rv = create_JavaUtilTreeMap_init();
    JavaIoBufferedReader *br = nil;
    @try {
      br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(_file_), @"UTF-8"));
      NSString *line = nil;
      while ((line = [br readLine]) != nil) {
        @try {
          IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_([((NSString *) nil_chk(line)) java_trim], @" ", 2);
          if (((IOSObjectArray *) nil_chk(s))->size_ < 2) continue;
          jlong time = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(s, 0));
          if (time <= since) continue;
          JavaLangLong *ltime = JavaLangLong_valueOfWithLong_(time);
          [rv putWithId:ltime withId:IOSObjectArray_Get(s, 1)];
        }
        @catch (JavaLangIndexOutOfBoundsException *ioobe) {
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
      rv = JavaUtilCollections_unmodifiableSortedMapWithJavaUtilSortedMap_(rv);
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      if (br != nil) @try {
        [br close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
    return JreRetainedLocalValue(rv);
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_file_);
  RELEASE_(_cache_);
  RELEASE_(_cacheTime_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x21, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilSortedMap;", 0x21, 4, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withJavaIoFile:);
  methods[1].selector = @selector(addEventWithNSString:);
  methods[2].selector = @selector(addEventWithNSString:withNSString:);
  methods[3].selector = @selector(getEventsWithNSString:withLong:);
  methods[4].selector = @selector(getEventsWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_file_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_cacheTime_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "ABORTED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "BECAME_FLOODFILL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "CHANGE_IP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "CHANGE_PORT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "CLOCK_SHIFT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CRASHED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "CRITICAL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "INSTALLED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "INSTALL_FAILED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "NETWORK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "NEW_IDENT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "NOT_FLOODFILL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "OOM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "REACHABILITY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "REKEYED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "RESEED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "SOFT_RESTART", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "STARTED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "STOPPED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "UPDATED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "WATCHDOG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LJavaIoFile;", "addEvent", "LNSString;", "LNSString;LNSString;", "getEvents", "LNSString;J", "(Ljava/lang/String;J)Ljava/util/SortedMap<Ljava/lang/Long;Ljava/lang/String;>;", "J", "(J)Ljava/util/SortedMap<Ljava/lang/Long;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/SortedMap<Ljava/lang/Long;Ljava/lang/String;>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Long;>;", &NetI2pRouterUtilEventLog_ABORTED, &NetI2pRouterUtilEventLog_BECAME_FLOODFILL, &NetI2pRouterUtilEventLog_CHANGE_IP, &NetI2pRouterUtilEventLog_CHANGE_PORT, &NetI2pRouterUtilEventLog_CLOCK_SHIFT, &NetI2pRouterUtilEventLog_CRASHED, &NetI2pRouterUtilEventLog_CRITICAL, &NetI2pRouterUtilEventLog_INSTALLED, &NetI2pRouterUtilEventLog_INSTALL_FAILED, &NetI2pRouterUtilEventLog_NETWORK, &NetI2pRouterUtilEventLog_NEW_IDENT, &NetI2pRouterUtilEventLog_NOT_FLOODFILL, &NetI2pRouterUtilEventLog_OOM, &NetI2pRouterUtilEventLog_REACHABILITY, &NetI2pRouterUtilEventLog_REKEYED, &NetI2pRouterUtilEventLog_RESEED, &NetI2pRouterUtilEventLog_SOFT_RESTART, &NetI2pRouterUtilEventLog_STARTED, &NetI2pRouterUtilEventLog_STOPPED, &NetI2pRouterUtilEventLog_UPDATED, &NetI2pRouterUtilEventLog_WATCHDOG };
  static const J2ObjcClassInfo _NetI2pRouterUtilEventLog = { "EventLog", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 5, 25, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilEventLog;
}

@end

void NetI2pRouterUtilEventLog_initWithNetI2pI2PAppContext_withJavaIoFile_(NetI2pRouterUtilEventLog *self, NetI2pI2PAppContext *ctx, JavaIoFile *file) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_file_, file);
  JreStrongAssignAndConsume(&self->_cache_, new_JavaUtilHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_cacheTime_, new_JavaUtilHashMap_initWithInt_(4));
}

NetI2pRouterUtilEventLog *new_NetI2pRouterUtilEventLog_initWithNetI2pI2PAppContext_withJavaIoFile_(NetI2pI2PAppContext *ctx, JavaIoFile *file) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilEventLog, initWithNetI2pI2PAppContext_withJavaIoFile_, ctx, file)
}

NetI2pRouterUtilEventLog *create_NetI2pRouterUtilEventLog_initWithNetI2pI2PAppContext_withJavaIoFile_(NetI2pI2PAppContext *ctx, JavaIoFile *file) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilEventLog, initWithNetI2pI2PAppContext_withJavaIoFile_, ctx, file)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilEventLog)
