//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/DecayingBloomFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/util/DecayingBloomFilter.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "org/xlattice/crypto/filters/BloomSHA1.h"

@interface NetI2pRouterUtilDecayingBloomFilter () {
 @public
  OrgXlatticeCryptoFiltersBloomSHA1 *_current_;
  OrgXlatticeCryptoFiltersBloomSHA1 *_previous_;
  IOSObjectArray *_extenders_;
  IOSByteArray *_extended_;
  IOSByteArray *_longToEntry_;
  jlong _longToEntryMask_;
}

- (jboolean)locked_addWithByteArray:(IOSByteArray *)entry_
                            withInt:(jint)offset
                            withInt:(jint)len
                        withBoolean:(jboolean)addIfNew;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingBloomFilter, _current_, OrgXlatticeCryptoFiltersBloomSHA1 *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingBloomFilter, _previous_, OrgXlatticeCryptoFiltersBloomSHA1 *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingBloomFilter, _extenders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingBloomFilter, _extended_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilDecayingBloomFilter, _longToEntry_, IOSByteArray *)

inline jint NetI2pRouterUtilDecayingBloomFilter_get_DEFAULT_M(void);
#define NetI2pRouterUtilDecayingBloomFilter_DEFAULT_M 23
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilDecayingBloomFilter, DEFAULT_M, jint)

inline jint NetI2pRouterUtilDecayingBloomFilter_get_DEFAULT_K(void);
#define NetI2pRouterUtilDecayingBloomFilter_DEFAULT_K 11
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilDecayingBloomFilter, DEFAULT_K, jint)

inline jboolean NetI2pRouterUtilDecayingBloomFilter_get_ALWAYS_MISS(void);
#define NetI2pRouterUtilDecayingBloomFilter_ALWAYS_MISS false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilDecayingBloomFilter, ALWAYS_MISS, jboolean)

__attribute__((unused)) static jboolean NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(NetI2pRouterUtilDecayingBloomFilter *self, IOSByteArray *entry_, jint offset, jint len, jboolean addIfNew);

@interface NetI2pRouterUtilDecayingBloomFilter_Shutdown : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterUtilDecayingBloomFilter *this$0_;
}

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilDecayingBloomFilter_Shutdown)

__attribute__((unused)) static void NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_Shutdown *self, NetI2pRouterUtilDecayingBloomFilter *outer$);

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_Shutdown *new_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_Shutdown *create_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilDecayingBloomFilter_Shutdown)

@interface NetI2pRouterUtilDecayingBloomFilter_DecayEvent : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterUtilDecayingBloomFilter *this$0_;
}

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilDecayingBloomFilter_DecayEvent)

__attribute__((unused)) static void NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_DecayEvent *self, NetI2pRouterUtilDecayingBloomFilter *outer$);

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_DecayEvent *new_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_DecayEvent *create_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilDecayingBloomFilter_DecayEvent)

@interface NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterUtilDecayingBloomFilter *this$0_;
  volatile_jlong _currentHour_;
}

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$;

- (void)timeReached;

- (jlong)getTimeTillNextHour;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent)

inline jlong NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_get_HOUR(void);
#define NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR 3600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent, HOUR, jlong)

inline jlong NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_get_LAG(void);
#define NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_LAG 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent, LAG, jlong)

__attribute__((unused)) static void NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *self, NetI2pRouterUtilDecayingBloomFilter *outer$);

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *new_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *create_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$);

__attribute__((unused)) static jlong NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_getTimeTillNextHour(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent)

@implementation NetI2pRouterUtilDecayingBloomFilter

- (instancetype)initWithInt:(jint)durationMs
                    withInt:(jint)entryBytes
               withNSString:(NSString *)name
    withNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pRouterUtilDecayingBloomFilter_initWithInt_withInt_withNSString_withNetI2pI2PAppContext_(self, durationMs, entryBytes, name, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)durationMs
                                    withInt:(jint)entryBytes {
  NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_(self, context, durationMs, entryBytes);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)durationMs
                                    withInt:(jint)entryBytes
                               withNSString:(NSString *)name {
  NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(self, context, durationMs, entryBytes, name);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)durationMs
                                    withInt:(jint)entryBytes
                               withNSString:(NSString *)name
                                    withInt:(jint)m {
  NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(self, context, durationMs, entryBytes, name, m);
  return self;
}

- (jlong)getCurrentDuplicateCount {
  return _currentDuplicates_;
}

- (jint)getInsertedCount {
  return [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) size] + [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_previous_)) size];
}

- (jdouble)getFalsePositiveRate {
  return [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) falsePositives];
}

- (jboolean)addWithByteArray:(IOSByteArray *)entry_ {
  return [self addWithByteArray:entry_ withInt:0 withInt:((IOSByteArray *) nil_chk(entry_))->size_];
}

- (jboolean)addWithByteArray:(IOSByteArray *)entry_
                     withInt:(jint)off
                     withInt:(jint)len {
  if (entry_ == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Null entry");
  if (len != _entryBytes_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Bad entry [", len, @", expected ", _entryBytes_, ']'));
  [self getReadLock];
  @try {
    return NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(self, entry_, off, len, true);
  }
  @finally {
    [self releaseReadLock];
  }
}

- (jboolean)addWithLong:(jlong)entry_ {
  if (_entryBytes_ <= 7) entry_ = ((entry_ ^ _longToEntryMask_) & ((JreLShift32(1, 31)) - 1)) | (entry_ ^ _longToEntryMask_);
  if (entry_ < 0) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(_longToEntry_, 0, _entryBytes_, 0 - entry_);
    *IOSByteArray_GetRef(nil_chk(_longToEntry_), 0) |= (JreLShift32(1, 7));
  }
  else {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(_longToEntry_, 0, _entryBytes_, entry_);
  }
  [self getReadLock];
  @try {
    return NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(self, _longToEntry_, 0, ((IOSByteArray *) nil_chk(_longToEntry_))->size_, true);
  }
  @finally {
    [self releaseReadLock];
  }
}

- (jboolean)isKnownWithLong:(jlong)entry_ {
  if (_entryBytes_ <= 7) entry_ = ((entry_ ^ _longToEntryMask_) & ((JreLShift32(1, 31)) - 1)) | (entry_ ^ _longToEntryMask_);
  if (entry_ < 0) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(_longToEntry_, 0, _entryBytes_, 0 - entry_);
    *IOSByteArray_GetRef(nil_chk(_longToEntry_), 0) |= (JreLShift32(1, 7));
  }
  else {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(_longToEntry_, 0, _entryBytes_, entry_);
  }
  [self getReadLock];
  @try {
    return NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(self, _longToEntry_, 0, ((IOSByteArray *) nil_chk(_longToEntry_))->size_, false);
  }
  @finally {
    [self releaseReadLock];
  }
}

- (jboolean)locked_addWithByteArray:(IOSByteArray *)entry_
                            withInt:(jint)offset
                            withInt:(jint)len
                        withBoolean:(jboolean)addIfNew {
  return NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(self, entry_, offset, len, addIfNew);
}

- (void)clear {
  if (![self getWriteLock]) return;
  @try {
    [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) clear];
    [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_previous_)) clear];
    _currentDuplicates_ = 0;
  }
  @finally {
    [self releaseWriteLock];
  }
}

- (void)stopDecaying {
  JreAssignVolatileBoolean(&_keepDecaying_, false);
  [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_decayEvent_)) cancel];
}

- (void)decay {
  jint currentCount = 0;
  jlong dups = 0;
  jdouble fpr = 0.0;
  if (![self getWriteLock]) return;
  @try {
    OrgXlatticeCryptoFiltersBloomSHA1 *tmp = _previous_;
    currentCount = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) size];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG] && currentCount > 0) fpr = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) falsePositives];
    JreStrongAssign(&_previous_, _current_);
    JreStrongAssign(&_current_, tmp);
    [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(_current_)) clear];
    dups = _currentDuplicates_;
    _currentDuplicates_ = 0;
  }
  @finally {
    [self releaseWriteLock];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$I$J$D", @"Decaying the filter ", _name_, @" after inserting ", currentCount, @" elements and ", dups, @" false positives with FPR = ", fpr)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", _name_, @".size") withLong:currentCount];
  if (currentCount > 0) [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", _name_, @".dups") withLong:1000l * 1000 * dups / currentCount];
  if (fpr > 0.0) {
    jlong exponent = JreFpToLong(JavaLangMath_log10WithDouble_(fpr));
    [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", _name_, @".log10(falsePos)") withLong:exponent];
  }
}

- (void)getReadLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_reorganizeLock_)) readLock])) lock];
}

- (void)releaseReadLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_reorganizeLock_)) readLock])) unlock];
}

- (jboolean)getWriteLock {
  @try {
    jboolean rv = [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_reorganizeLock_)) writeLock])) tryLockWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    if (!rv) [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I", @"no lock, size is: ", [_reorganizeLock_ getQueueLength]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"rats")];
    return rv;
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  return false;
}

- (void)releaseWriteLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(_reorganizeLock_)) writeLock])) unlock];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_current_);
  RELEASE_(_previous_);
  RELEASE_(_extenders_);
  RELEASE_(_extended_);
  RELEASE_(_longToEntry_);
  RELEASE_(_decayEvent_);
  RELEASE_(_name_);
  RELEASE_(_reorganizeLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:withNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:withNSString:);
  methods[3].selector = @selector(initWithNetI2pI2PAppContext:withInt:withInt:withNSString:withInt:);
  methods[4].selector = @selector(getCurrentDuplicateCount);
  methods[5].selector = @selector(getInsertedCount);
  methods[6].selector = @selector(getFalsePositiveRate);
  methods[7].selector = @selector(addWithByteArray:);
  methods[8].selector = @selector(addWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(addWithLong:);
  methods[10].selector = @selector(isKnownWithLong:);
  methods[11].selector = @selector(locked_addWithByteArray:withInt:withInt:withBoolean:);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(stopDecaying);
  methods[14].selector = @selector(decay);
  methods[15].selector = @selector(getReadLock);
  methods[16].selector = @selector(releaseReadLock);
  methods[17].selector = @selector(getWriteLock);
  methods[18].selector = @selector(releaseWriteLock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_current_", "LOrgXlatticeCryptoFiltersBloomSHA1;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_previous_", "LOrgXlatticeCryptoFiltersBloomSHA1;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_durationMs_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_entryBytes_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_extenders_", "[[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_extended_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_longToEntry_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_longToEntryMask_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentDuplicates_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_keepDecaying_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_decayEvent_", "LNetI2pUtilSimpleTimer2_TimedEvent;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_reorganizeLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "DEFAULT_M", "I", .constantValue.asInt = NetI2pRouterUtilDecayingBloomFilter_DEFAULT_M, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_K", "I", .constantValue.asInt = NetI2pRouterUtilDecayingBloomFilter_DEFAULT_K, 0x1a, -1, -1, -1, -1 },
    { "ALWAYS_MISS", "Z", .constantValue.asBOOL = NetI2pRouterUtilDecayingBloomFilter_ALWAYS_MISS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILNSString;LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;II", "LNetI2pI2PAppContext;IILNSString;", "LNetI2pI2PAppContext;IILNSString;I", "add", "[B", "[BII", "J", "isKnown", "locked_add", "[BIIZ", "LNetI2pRouterUtilDecayingBloomFilter_Shutdown;LNetI2pRouterUtilDecayingBloomFilter_DecayEvent;LNetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingBloomFilter = { "DecayingBloomFilter", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 19, 18, -1, 11, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingBloomFilter;
}

@end

void NetI2pRouterUtilDecayingBloomFilter_initWithInt_withInt_withNSString_withNetI2pI2PAppContext_(NetI2pRouterUtilDecayingBloomFilter *self, jint durationMs, jint entryBytes, NSString *name, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_reorganizeLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  self->_entryBytes_ = entryBytes;
  JreStrongAssign(&self->_name_, name);
  self->_durationMs_ = durationMs;
  JreStrongAssign(&self->_extenders_, nil);
  JreStrongAssign(&self->_extended_, nil);
  JreStrongAssign(&self->_longToEntry_, nil);
  self->_longToEntryMask_ = 0;
  [context addShutdownTaskWithJavaLangRunnable:create_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(self)];
  JreAssignVolatileBoolean(&self->_keepDecaying_, true);
  if (self->_durationMs_ == 60 * 60 * 1000) {
    JreStrongAssignAndConsume(&self->_decayEvent_, new_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self));
  }
  else {
    JreStrongAssignAndConsume(&self->_decayEvent_, new_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self));
    [self->_decayEvent_ scheduleWithLong:self->_durationMs_];
  }
}

NetI2pRouterUtilDecayingBloomFilter *new_NetI2pRouterUtilDecayingBloomFilter_initWithInt_withInt_withNSString_withNetI2pI2PAppContext_(jint durationMs, jint entryBytes, NSString *name, NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithInt_withInt_withNSString_withNetI2pI2PAppContext_, durationMs, entryBytes, name, context)
}

NetI2pRouterUtilDecayingBloomFilter *create_NetI2pRouterUtilDecayingBloomFilter_initWithInt_withInt_withNSString_withNetI2pI2PAppContext_(jint durationMs, jint entryBytes, NSString *name, NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithInt_withInt_withNSString_withNetI2pI2PAppContext_, durationMs, entryBytes, name, context)
}

void NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pRouterUtilDecayingBloomFilter *self, NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(self, context, durationMs, entryBytes, @"DBF");
}

NetI2pRouterUtilDecayingBloomFilter *new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_, context, durationMs, entryBytes)
}

NetI2pRouterUtilDecayingBloomFilter *create_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_, context, durationMs, entryBytes)
}

void NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pRouterUtilDecayingBloomFilter *self, NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(self, context, durationMs, entryBytes, name, [((NetI2pI2PAppContext *) nil_chk(context)) getPropertyWithNSString:@"router.decayingBloomFilterM" withInt:NetI2pRouterUtilDecayingBloomFilter_DEFAULT_M]);
}

NetI2pRouterUtilDecayingBloomFilter *new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_, context, durationMs, entryBytes, name)
}

NetI2pRouterUtilDecayingBloomFilter *create_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_, context, durationMs, entryBytes, name)
}

void NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(NetI2pRouterUtilDecayingBloomFilter *self, NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name, jint m) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_reorganizeLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterUtilDecayingBloomFilter_class_()]);
  self->_entryBytes_ = entryBytes;
  JreStrongAssign(&self->_name_, name);
  jint k = NetI2pRouterUtilDecayingBloomFilter_DEFAULT_K;
  if (m > NetI2pRouterUtilDecayingBloomFilter_DEFAULT_M) {
    k--;
    if (m > 26) {
      k--;
      if (m > 29) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Max m is 29");
    }
  }
  JreStrongAssignAndConsume(&self->_current_, new_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(m, k));
  JreStrongAssignAndConsume(&self->_previous_, new_OrgXlatticeCryptoFiltersBloomSHA1_initWithInt_withInt_(m, k));
  self->_durationMs_ = durationMs;
  jint numExtenders = (32 + (entryBytes - 1)) / entryBytes - 1;
  if (numExtenders < 0) numExtenders = 0;
  JreStrongAssignAndConsume(&self->_extenders_, [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ numExtenders, entryBytes }]);
  for (jint i = 0; i < numExtenders; i++) [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) random])) nextBytesWithByteArray:IOSObjectArray_Get(self->_extenders_, i)];
  if (numExtenders > 0) {
    JreStrongAssignAndConsume(&self->_extended_, [IOSByteArray newArrayWithLength:32]);
    JreStrongAssignAndConsume(&self->_longToEntry_, [IOSByteArray newArrayWithLength:self->_entryBytes_]);
    self->_longToEntryMask_ = (JreLShift64(1l, (self->_entryBytes_ * 8l))) - 1;
  }
  else {
    JreStrongAssign(&self->_extended_, nil);
    JreStrongAssign(&self->_longToEntry_, nil);
    self->_longToEntryMask_ = 0;
  }
  JreAssignVolatileBoolean(&self->_keepDecaying_, true);
  if (self->_durationMs_ == 60 * 60 * 1000) {
    JreStrongAssignAndConsume(&self->_decayEvent_, new_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self));
  }
  else {
    JreStrongAssignAndConsume(&self->_decayEvent_, new_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self));
    [self->_decayEvent_ scheduleWithLong:self->_durationMs_];
  }
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$I$I$I$I$I", @"New DBF ", name, @" m = ", m, @" k = ", k, @" entryBytes = ", entryBytes, @" numExtenders = ", numExtenders, @" cycle (s) = ", (durationMs / 1000))];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", name, @".size") withNSString:@"Size" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * JavaLangMath_maxWithInt_withInt_(60 * 1000, durationMs) } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", name, @".dups") withNSString:@"1000000 * Duplicates/Size" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * JavaLangMath_maxWithInt_withInt_(60 * 1000, durationMs) } count:1]];
  [((NetI2pStatStatManager *) nil_chk([context statManager])) createRateStatWithNSString:JreStrcat("$$$", @"router.decayingBloomFilter.", name, @".log10(falsePos)") withNSString:@"log10 of the false positive rate (must have net.i2p.util.DecayingBloomFilter=DEBUG)" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * JavaLangMath_maxWithInt_withInt_(60 * 1000, durationMs) } count:1]];
  [context addShutdownTaskWithJavaLangRunnable:create_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(self)];
}

NetI2pRouterUtilDecayingBloomFilter *new_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name, jint m) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_, context, durationMs, entryBytes, name, m)
}

NetI2pRouterUtilDecayingBloomFilter *create_NetI2pRouterUtilDecayingBloomFilter_initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_(NetI2pI2PAppContext *context, jint durationMs, jint entryBytes, NSString *name, jint m) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter, initWithNetI2pI2PAppContext_withInt_withInt_withNSString_withInt_, context, durationMs, entryBytes, name, m)
}

jboolean NetI2pRouterUtilDecayingBloomFilter_locked_addWithByteArray_withInt_withInt_withBoolean_(NetI2pRouterUtilDecayingBloomFilter *self, IOSByteArray *entry_, jint offset, jint len, jboolean addIfNew) {
  if (self->_extended_ != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(entry_, offset, self->_extended_, 0, len);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->_extenders_))->size_; i++) NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(entry_, offset, IOSObjectArray_Get(self->_extenders_, i), 0, self->_extended_, self->_entryBytes_ * (i + 1), self->_entryBytes_);
    OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *key = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) getFilterKeyWithByteArray:self->_extended_ withInt:0 withInt:32];
    jboolean seen = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
    if (!seen) seen = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_previous_)) locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
    if (seen) {
      self->_currentDuplicates_++;
      [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      return true;
    }
    else {
      if (addIfNew) {
        [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) locked_insertWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      }
      [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      return false;
    }
  }
  else {
    OrgXlatticeCryptoFiltersBloomSHA1_FilterKey *key = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) getFilterKeyWithByteArray:entry_ withInt:offset withInt:len];
    jboolean seen = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
    if (!seen) seen = [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_previous_)) locked_memberWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
    if (seen) {
      self->_currentDuplicates_++;
      [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      return true;
    }
    else {
      if (addIfNew) {
        [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) locked_insertWithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      }
      [((OrgXlatticeCryptoFiltersBloomSHA1 *) nil_chk(self->_current_)) release__WithOrgXlatticeCryptoFiltersBloomSHA1_FilterKey:key];
      return false;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingBloomFilter)

@implementation NetI2pRouterUtilDecayingBloomFilter_Shutdown

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$ {
  NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilDecayingBloomFilter:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterUtilDecayingBloomFilter;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingBloomFilter_Shutdown = { "Shutdown", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingBloomFilter_Shutdown;
}

@end

void NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_Shutdown *self, NetI2pRouterUtilDecayingBloomFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterUtilDecayingBloomFilter_Shutdown *new_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter_Shutdown, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

NetI2pRouterUtilDecayingBloomFilter_Shutdown *create_NetI2pRouterUtilDecayingBloomFilter_Shutdown_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter_Shutdown, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingBloomFilter_Shutdown)

@implementation NetI2pRouterUtilDecayingBloomFilter_DecayEvent

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$ {
  NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self, outer$);
  return self;
}

- (void)timeReached {
  if (JreLoadVolatileBoolean(&this$0_->_keepDecaying_)) {
    [this$0_ decay];
    [self scheduleWithLong:this$0_->_durationMs_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilDecayingBloomFilter:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterUtilDecayingBloomFilter;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingBloomFilter_DecayEvent = { "DecayEvent", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingBloomFilter_DecayEvent;
}

@end

void NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_DecayEvent *self, NetI2pRouterUtilDecayingBloomFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pI2PAppContext *) nil_chk(outer$->_context_)) simpleTimer2]);
}

NetI2pRouterUtilDecayingBloomFilter_DecayEvent *new_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter_DecayEvent, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

NetI2pRouterUtilDecayingBloomFilter_DecayEvent *create_NetI2pRouterUtilDecayingBloomFilter_DecayEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter_DecayEvent, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingBloomFilter_DecayEvent)

@implementation NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent

- (instancetype)initWithNetI2pRouterUtilDecayingBloomFilter:(NetI2pRouterUtilDecayingBloomFilter *)outer$ {
  NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(self, outer$);
  return self;
}

- (void)timeReached {
  if (JreLoadVolatileBoolean(&this$0_->_keepDecaying_)) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now];
    jlong currentHour = now / NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR;
    if (JreLoadVolatileLong(&_currentHour_) != currentHour) {
      [this$0_ decay];
      JreAssignVolatileLong(&_currentHour_, currentHour);
    }
    jlong next = ((1 + currentHour) * NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR) + NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_LAG;
    [self scheduleWithLong:JavaLangMath_maxWithLong_withLong_(5000, next - now)];
  }
}

- (jlong)getTimeTillNextHour {
  return NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_getTimeTillNextHour(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterUtilDecayingBloomFilter:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(getTimeTillNextHour);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterUtilDecayingBloomFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "HOUR", "J", .constantValue.asLong = NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR, 0x1a, -1, -1, -1, -1 },
    { "LAG", "J", .constantValue.asLong = NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_LAG, 0x1a, -1, -1, -1, -1 },
    { "_currentHour_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterUtilDecayingBloomFilter;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent = { "DecayHourlyEvent", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x2, 3, 4, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent;
}

@end

void NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *self, NetI2pRouterUtilDecayingBloomFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, [((NetI2pI2PAppContext *) nil_chk(outer$->_context_)) simpleTimer2]);
  [self scheduleWithLong:NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_getTimeTillNextHour(self)];
}

NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *new_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *create_NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_initWithNetI2pRouterUtilDecayingBloomFilter_(NetI2pRouterUtilDecayingBloomFilter *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent, initWithNetI2pRouterUtilDecayingBloomFilter_, outer$)
}

jlong NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_getTimeTillNextHour(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->this$0_->_context_)) clock])) now];
  jlong currentHour = now / NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR;
  JreAssignVolatileLong(&self->_currentHour_, currentHour);
  jlong next = ((1 + currentHour) * NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_HOUR) + NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent_LAG;
  return JavaLangMath_maxWithLong_withLong_(5000, next - now);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilDecayingBloomFilter_DecayHourlyEvent)
