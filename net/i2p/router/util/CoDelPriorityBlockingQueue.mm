//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/util/CoDelPriorityBlockingQueue.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/util/CDPQEntry.h"
#include "net/i2p/router/util/CoDelPriorityBlockingQueue.h"
#include "net/i2p/router/util/PriBlockingQueue.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"

static id (*NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_take)(id, SEL);

static id (*NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_poll)(id, SEL);

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pRouterUtilCoDelPriorityBlockingQueue () {
 @public
  jlong _first_above_time_;
  jlong _drop_next_;
  jint _count_;
  jboolean _dropping_;
  jlong _now_;
  jint _lastDroppedPriority_;
  jlong _id_;
  NSString *STAT_DROP_;
  NSString *STAT_DELAY_;
}

- (jboolean)updateVarsWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)entry_;

- (id<NetI2pRouterUtilCDPQEntry>)deque;

- (id<NetI2pRouterUtilCDPQEntry>)codelWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)rv;

- (void)dropWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)entry_;

- (void)control_lawWithLong:(jlong)t;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelPriorityBlockingQueue, STAT_DROP_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterUtilCoDelPriorityBlockingQueue, STAT_DELAY_, NSString *)

inline jlong NetI2pRouterUtilCoDelPriorityBlockingQueue_get_TARGET(void);
#define NetI2pRouterUtilCoDelPriorityBlockingQueue_TARGET 15LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelPriorityBlockingQueue, TARGET, jlong)

inline jlong NetI2pRouterUtilCoDelPriorityBlockingQueue_get_INTERVAL(void);
#define NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL 300LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelPriorityBlockingQueue, INTERVAL, jlong)

inline IOSIntArray *NetI2pRouterUtilCoDelPriorityBlockingQueue_get_PRIORITIES(void);
static IOSIntArray *NetI2pRouterUtilCoDelPriorityBlockingQueue_PRIORITIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterUtilCoDelPriorityBlockingQueue, PRIORITIES, IOSIntArray *)

inline jlong NetI2pRouterUtilCoDelPriorityBlockingQueue_get_BACKLOG_TIME(void);
#define NetI2pRouterUtilCoDelPriorityBlockingQueue_BACKLOG_TIME 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterUtilCoDelPriorityBlockingQueue, BACKLOG_TIME, jlong)

__attribute__((unused)) static jboolean NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> entry_);

__attribute__((unused)) static id<NetI2pRouterUtilCDPQEntry> NetI2pRouterUtilCoDelPriorityBlockingQueue_deque(NetI2pRouterUtilCoDelPriorityBlockingQueue *self);

__attribute__((unused)) static id<NetI2pRouterUtilCDPQEntry> NetI2pRouterUtilCoDelPriorityBlockingQueue_codelWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> rv);

__attribute__((unused)) static void NetI2pRouterUtilCoDelPriorityBlockingQueue_dropWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> entry_);

__attribute__((unused)) static void NetI2pRouterUtilCoDelPriorityBlockingQueue_control_lawWithLong_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, jlong t);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterUtilCoDelPriorityBlockingQueue)

JavaUtilConcurrentAtomicAtomicLong *NetI2pRouterUtilCoDelPriorityBlockingQueue___id;

@implementation NetI2pRouterUtilCoDelPriorityBlockingQueue

+ (JavaUtilConcurrentAtomicAtomicLong *)__id {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue___id;
}

+ (jint)MIN_PRIORITY {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_MIN_PRIORITY;
}

+ (jint)DONT_DROP_PRIORITY {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_DONT_DROP_PRIORITY;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)name
                                    withInt:(jint)initialCapacity {
  NetI2pRouterUtilCoDelPriorityBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(self, ctx, name, initialCapacity);
  return self;
}

- (void)clear {
  [super clear];
  @synchronized(self) {
    _first_above_time_ = 0;
    _drop_next_ = 0;
    _count_ = 0;
    _dropping_ = false;
  }
}

- (id<NetI2pRouterUtilCDPQEntry>)take {
  id<NetI2pRouterUtilCDPQEntry> rv;
  do {
    rv = NetI2pRouterUtilCoDelPriorityBlockingQueue_deque(self);
  }
  while (rv == nil);
  return rv;
}

- (id<NetI2pRouterUtilCDPQEntry>)poll {
  id<NetI2pRouterUtilCDPQEntry> rv = ((id<NetI2pRouterUtilCDPQEntry>) [super poll]);
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_codelWithNetI2pRouterUtilCDPQEntry_(self, rv);
}

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jint rv = 0;
  id<NetI2pRouterUtilCDPQEntry> e;
  while ((e = [self poll]) != nil) {
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:e];
    rv++;
  }
  return rv;
}

- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements {
  jint rv = 0;
  id<NetI2pRouterUtilCDPQEntry> e;
  while ((e = [self poll]) != nil && rv++ < maxElements) {
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:e];
  }
  return rv;
}

- (jint)drainAllToWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super drainToWithJavaUtilCollection:c];
}

- (jboolean)isBacklogged {
  id<NetI2pRouterUtilCDPQEntry> e = [self peek];
  if (e == nil) return false;
  return _dropping_ || [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - [e getEnqueueTime] >= NetI2pRouterUtilCoDelPriorityBlockingQueue_BACKLOG_TIME || [self size] >= NetI2pRouterUtilPriBlockingQueue_BACKLOG_SIZE;
}

- (void)timestampWithNetI2pRouterUtilPQEntry:(id<NetI2pRouterUtilCDPQEntry>)o {
  [super timestampWithNetI2pRouterUtilPQEntry:o];
  [((id<NetI2pRouterUtilCDPQEntry>) nil_chk(o)) setEnqueueTimeWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]];
  if ([o getPriority] < NetI2pRouterUtilCoDelPriorityBlockingQueue_MIN_PRIORITY && [((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$$I$@", _name_, @" added item with low priority ", [o getPriority], @": ", o)];
}

- (jboolean)updateVarsWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)entry_ {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(self, entry_);
}

- (id<NetI2pRouterUtilCDPQEntry>)deque {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_deque(self);
}

- (id<NetI2pRouterUtilCDPQEntry>)codelWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)rv {
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_codelWithNetI2pRouterUtilCDPQEntry_(self, rv);
}

- (void)dropWithNetI2pRouterUtilCDPQEntry:(id<NetI2pRouterUtilCDPQEntry>)entry_ {
  NetI2pRouterUtilCoDelPriorityBlockingQueue_dropWithNetI2pRouterUtilCDPQEntry_(self, entry_);
}

- (void)control_lawWithLong:(jlong)t {
  NetI2pRouterUtilCoDelPriorityBlockingQueue_control_lawWithLong_(self, t);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(STAT_DROP_);
  RELEASE_(STAT_DELAY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDPQEntry;", 0x1, -1, -1, 1, 2, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDPQEntry;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "I", 0x1, 8, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x2, 12, 10, -1, 13, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDPQEntry;", 0x2, -1, -1, 1, 2, -1, -1 },
    { NULL, "LNetI2pRouterUtilCDPQEntry;", 0x2, 14, 10, -1, 15, -1, -1 },
    { NULL, "V", 0x2, 16, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(take);
  methods[3].selector = @selector(poll);
  methods[4].selector = @selector(drainToWithJavaUtilCollection:);
  methods[5].selector = @selector(drainToWithJavaUtilCollection:withInt:);
  methods[6].selector = @selector(drainAllToWithJavaUtilCollection:);
  methods[7].selector = @selector(isBacklogged);
  methods[8].selector = @selector(timestampWithNetI2pRouterUtilPQEntry:);
  methods[9].selector = @selector(updateVarsWithNetI2pRouterUtilCDPQEntry:);
  methods[10].selector = @selector(deque);
  methods[11].selector = @selector(codelWithNetI2pRouterUtilCDPQEntry:);
  methods[12].selector = @selector(dropWithNetI2pRouterUtilCDPQEntry:);
  methods[13].selector = @selector(control_lawWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_first_above_time_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_drop_next_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dropping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_now_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastDroppedPriority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "__id", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x18, -1, 19, -1, -1 },
    { "_id_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TARGET", "J", .constantValue.asLong = NetI2pRouterUtilCoDelPriorityBlockingQueue_TARGET, 0x1a, -1, -1, -1, -1 },
    { "INTERVAL", "J", .constantValue.asLong = NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "STAT_DROP_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "STAT_DELAY_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MIN_PRIORITY", "I", .constantValue.asInt = NetI2pRouterUtilCoDelPriorityBlockingQueue_MIN_PRIORITY, 0x19, -1, -1, -1, -1 },
    { "PRIORITIES", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "DONT_DROP_PRIORITY", "I", .constantValue.asInt = NetI2pRouterUtilCoDelPriorityBlockingQueue_DONT_DROP_PRIORITY, 0x19, -1, -1, -1, -1 },
    { "BACKLOG_TIME", "J", .constantValue.asLong = NetI2pRouterUtilCoDelPriorityBlockingQueue_BACKLOG_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;I", "LJavaLangInterruptedException;", "()TE;", "drainTo", "LJavaUtilCollection;", "(Ljava/util/Collection<-TE;>;)I", "LJavaUtilCollection;I", "(Ljava/util/Collection<-TE;>;I)I", "drainAllTo", "timestamp", "LNetI2pRouterUtilCDPQEntry;", "(TE;)V", "updateVars", "(TE;)Z", "codel", "(TE;)TE;", "drop", "control_law", "J", &NetI2pRouterUtilCoDelPriorityBlockingQueue___id, &NetI2pRouterUtilCoDelPriorityBlockingQueue_PRIORITIES, "<E::Lnet/i2p/router/util/CDPQEntry;>Lnet/i2p/router/util/PriBlockingQueue<TE;>;" };
  static const J2ObjcClassInfo _NetI2pRouterUtilCoDelPriorityBlockingQueue = { "CoDelPriorityBlockingQueue", "net.i2p.router.util", ptrTable, methods, fields, 7, 0x1, 14, 16, -1, -1, -1, 21, -1 };
  return &_NetI2pRouterUtilCoDelPriorityBlockingQueue;
}

+ (void)initialize {
  if (self == [NetI2pRouterUtilCoDelPriorityBlockingQueue class]) {
    NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_poll = (id (*)(id, SEL))[NetI2pRouterUtilPriBlockingQueue instanceMethodForSelector:@selector(poll)];
    NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_take = (id (*)(id, SEL))[NetI2pRouterUtilPriBlockingQueue instanceMethodForSelector:@selector(take)];
    JreStrongAssignAndConsume(&NetI2pRouterUtilCoDelPriorityBlockingQueue___id, new_JavaUtilConcurrentAtomicAtomicLong_init());
    JreStrongAssignAndConsume(&NetI2pRouterUtilCoDelPriorityBlockingQueue_PRIORITIES, [IOSIntArray newArrayWithInts:(jint[]){ NetI2pRouterUtilCoDelPriorityBlockingQueue_MIN_PRIORITY, 200, 300, 400, 500 } count:5]);
    J2OBJC_SET_INITIALIZED(NetI2pRouterUtilCoDelPriorityBlockingQueue)
  }
}

@end

void NetI2pRouterUtilCoDelPriorityBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  NetI2pRouterUtilPriBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(self, ctx, name, initialCapacity);
  JreStrongAssign(&self->STAT_DROP_, [(JreStrcat("$$$", @"codel.", name, @".drop.")) java_intern]);
  JreStrongAssign(&self->STAT_DELAY_, [(JreStrcat("$$$", @"codel.", name, @".delay")) java_intern]);
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(NetI2pRouterUtilCoDelPriorityBlockingQueue_PRIORITIES))->size_; i++) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) statManager])) createRateStatWithNSString:JreStrcat("$I", self->STAT_DROP_, IOSIntArray_Get(NetI2pRouterUtilCoDelPriorityBlockingQueue_PRIORITIES, i)) withNSString:@"queue delay of dropped items by priority" withNSString:@"Router" withLongArray:JreLoadStatic(NetI2pRouterUtilPriBlockingQueue, RATES)];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) statManager])) createRateStatWithNSString:self->STAT_DELAY_ withNSString:@"average queue delay" withNSString:@"Router" withLongArray:JreLoadStatic(NetI2pRouterUtilPriBlockingQueue, RATES)];
  self->_id_ = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(NetI2pRouterUtilCoDelPriorityBlockingQueue___id)) incrementAndGet];
}

NetI2pRouterUtilCoDelPriorityBlockingQueue *new_NetI2pRouterUtilCoDelPriorityBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  J2OBJC_NEW_IMPL(NetI2pRouterUtilCoDelPriorityBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, initialCapacity)
}

NetI2pRouterUtilCoDelPriorityBlockingQueue *create_NetI2pRouterUtilCoDelPriorityBlockingQueue_initWithNetI2pI2PAppContext_withNSString_withInt_(NetI2pI2PAppContext *ctx, NSString *name, jint initialCapacity) {
  J2OBJC_CREATE_IMPL(NetI2pRouterUtilCoDelPriorityBlockingQueue, initWithNetI2pI2PAppContext_withNSString_withInt_, ctx, name, initialCapacity)
}

jboolean NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> entry_) {
  if (entry_ == nil) {
    self->_first_above_time_ = 0;
    return false;
  }
  self->_now_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
  jboolean ok_to_drop = false;
  jlong sojurn = self->_now_ - [entry_ getEnqueueTime];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:self->STAT_DELAY_ withLong:sojurn];
  if (sojurn < NetI2pRouterUtilCoDelPriorityBlockingQueue_TARGET || [self isEmpty]) {
    self->_first_above_time_ = 0;
  }
  else {
    if (self->_first_above_time_ == 0) {
      self->_first_above_time_ = self->_now_ + NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL;
    }
    else if (self->_now_ >= self->_first_above_time_) {
      ok_to_drop = true;
    }
  }
  return ok_to_drop;
}

id<NetI2pRouterUtilCDPQEntry> NetI2pRouterUtilCoDelPriorityBlockingQueue_deque(NetI2pRouterUtilCoDelPriorityBlockingQueue *self) {
  id<NetI2pRouterUtilCDPQEntry> rv = NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_take(self, @selector(take));
  return NetI2pRouterUtilCoDelPriorityBlockingQueue_codelWithNetI2pRouterUtilCDPQEntry_(self, rv);
}

id<NetI2pRouterUtilCDPQEntry> NetI2pRouterUtilCoDelPriorityBlockingQueue_codelWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> rv) {
  @synchronized(self) {
    jboolean ok_to_drop = NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(self, rv);
    if (self->_dropping_) {
      if (!ok_to_drop) {
        self->_dropping_ = false;
      }
      else if (self->_now_ >= self->_drop_next_) {
        while (self->_now_ >= self->_drop_next_ && self->_dropping_ && [((id<NetI2pRouterUtilCDPQEntry>) nil_chk(rv)) getPriority] <= self->_lastDroppedPriority_) {
          NetI2pRouterUtilCoDelPriorityBlockingQueue_dropWithNetI2pRouterUtilCDPQEntry_(self, rv);
          self->_count_++;
          rv = NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_poll(self, @selector(poll));
          ok_to_drop = NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(self, rv);
          if (!ok_to_drop) {
            self->_dropping_ = false;
          }
          else {
            NetI2pRouterUtilCoDelPriorityBlockingQueue_control_lawWithLong_(self, self->_drop_next_);
          }
        }
      }
    }
    else if (ok_to_drop && [((id<NetI2pRouterUtilCDPQEntry>) nil_chk(rv)) getPriority] < NetI2pRouterUtilCoDelPriorityBlockingQueue_DONT_DROP_PRIORITY && (self->_now_ - self->_drop_next_ < NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL || self->_now_ - self->_first_above_time_ >= NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL)) {
      NetI2pRouterUtilCoDelPriorityBlockingQueue_dropWithNetI2pRouterUtilCDPQEntry_(self, rv);
      self->_lastDroppedPriority_ = [((id<NetI2pRouterUtilCDPQEntry>) nil_chk(rv)) getPriority];
      rv = NetI2pRouterUtilCoDelPriorityBlockingQueue_super$_poll(self, @selector(poll));
      NetI2pRouterUtilCoDelPriorityBlockingQueue_updateVarsWithNetI2pRouterUtilCDPQEntry_(self, rv);
      self->_dropping_ = true;
      if (self->_now_ - self->_drop_next_ < NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL) self->_count_ = self->_count_ > 2 ? self->_count_ - 2 : 1;
      else self->_count_ = 1;
      NetI2pRouterUtilCoDelPriorityBlockingQueue_control_lawWithLong_(self, self->_now_);
    }
  }
  return rv;
}

void NetI2pRouterUtilCoDelPriorityBlockingQueue_dropWithNetI2pRouterUtilCDPQEntry_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, id<NetI2pRouterUtilCDPQEntry> entry_) {
  jlong delay = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now] - [((id<NetI2pRouterUtilCDPQEntry>) nil_chk(entry_)) getEnqueueTime];
  jint priority = [entry_ getPriority] / 100 * 100;
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) addRateDataWithNSString:JreStrcat("$I", self->STAT_DROP_, priority) withLong:delay];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$JC$$J$I$J$$$$$I$I$@", @"CDPQ #", self->_id_, ' ', self->_name_, @" dropped item with delay ", delay, @", priority ", [entry_ getPriority], @", seq ", [entry_ getSeqNum], @", ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - self->_first_above_time_), @" since first above, ", NetI2pDataDataHelper_formatDurationWithLong_([((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now] - self->_drop_next_), @" since drop next, ", (self->_count_ + 1), @" dropped in this phase, ", [self size], @" remaining in queue: ", entry_)];
  [entry_ drop];
}

void NetI2pRouterUtilCoDelPriorityBlockingQueue_control_lawWithLong_(NetI2pRouterUtilCoDelPriorityBlockingQueue *self, jlong t) {
  self->_drop_next_ = t + JreFpToLong((NetI2pRouterUtilCoDelPriorityBlockingQueue_INTERVAL / JavaLangMath_sqrtWithDouble_(self->_count_)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterUtilCoDelPriorityBlockingQueue)
