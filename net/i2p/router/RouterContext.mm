//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/RouterContext.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/app/ClientAppManager.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/data/router/RouterKeyGenerator.h"
#include "net/i2p/internal/InternalClientManager.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/Blocklist.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/ClientMessagePool.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/InNetMessagePool.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/MessageValidator.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/PersistentKeyRing.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterClock.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterThrottle.h"
#include "net/i2p/router/RouterThrottleImpl.h"
#include "net/i2p/router/StatisticsManager.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/client/ClientManagerFacadeImpl.h"
#include "net/i2p/router/crypto/TransientSessionKeyManager.h"
#include "net/i2p/router/dummy/DummyClientManagerFacade.h"
#include "net/i2p/router/dummy/DummyNetworkDatabaseFacade.h"
#include "net/i2p/router/dummy/DummyPeerManagerFacade.h"
#include "net/i2p/router/dummy/DummyTunnelManagerFacade.h"
#include "net/i2p/router/dummy/VMCommSystem.h"
#include "net/i2p/router/message/GarlicMessageParser.h"
#include "net/i2p/router/networkdb/kademlia/FloodfillNetworkDatabaseFacade.h"
#include "net/i2p/router/peermanager/PeerManagerFacadeImpl.h"
#include "net/i2p/router/peermanager/ProfileManagerImpl.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/startup/RouterAppManager.h"
#include "net/i2p/router/transport/CommSystemFacadeImpl.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/router/tunnel/pool/TunnelPoolManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PProperties.h"
#include "net/i2p/util/KeyRing.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterRouterContext () {
 @public
  NetI2pRouterRouter *_router_;
  NetI2pRouterClientManagerFacade *_clientManagerFacade_;
  id<NetI2pInternalInternalClientManager> _internalClientManager_;
  NetI2pRouterClientMessagePool *_clientMessagePool_;
  NetI2pRouterJobQueue *_jobQueue_;
  NetI2pRouterInNetMessagePool *_inNetMessagePool_;
  NetI2pRouterOutNetMessagePool *_outNetMessagePool_;
  NetI2pRouterMessageHistory *_messageHistory_;
  NetI2pRouterTransportOutboundMessageRegistry *_messageRegistry_;
  NetI2pRouterNetworkDatabaseFacade *_netDb_;
  NetI2pRouterKeyManager *_keyManager_;
  NetI2pRouterCommSystemFacade *_commSystem_;
  NetI2pRouterPeermanagerProfileOrganizer *_profileOrganizer_;
  id<NetI2pRouterPeerManagerFacade> _peerManagerFacade_;
  id<NetI2pRouterProfileManager> _profileManager_;
  NetI2pRouterTransportFIFOBandwidthLimiter *_bandwidthLimiter_;
  id<NetI2pRouterTunnelManagerFacade> _tunnelManager_;
  NetI2pRouterTunnelTunnelDispatcher *_tunnelDispatcher_;
  NetI2pRouterStatisticsManager *_statPublisher_;
  NetI2pRouterBanlist *_banlist_;
  NetI2pRouterBlocklist *_blocklist_;
  NetI2pRouterMessageValidator *_messageValidator_;
  id<NetI2pRouterRouterThrottle> _throttle_;
  NetI2pRouterStartupRouterAppManager *_appManager_RouterContext_;
  NetI2pDataRouterRouterKeyGenerator *_routingKeyGenerator_;
  NetI2pRouterMessageGarlicMessageParser *_garlicMessageParser_;
  id<JavaUtilSet> _finalShutdownTasks_;
  volatile_jboolean _initialized_;
  id _lock1_RouterContext_;
  id _lock2_RouterContext_;
  id _lock3_RouterContext_;
}

+ (JavaUtilProperties *)filterPropsWithJavaUtilProperties:(JavaUtilProperties *)envProps;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _router_, NetI2pRouterRouter *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _clientManagerFacade_, NetI2pRouterClientManagerFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _internalClientManager_, id<NetI2pInternalInternalClientManager>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _clientMessagePool_, NetI2pRouterClientMessagePool *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _jobQueue_, NetI2pRouterJobQueue *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _inNetMessagePool_, NetI2pRouterInNetMessagePool *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _outNetMessagePool_, NetI2pRouterOutNetMessagePool *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _messageHistory_, NetI2pRouterMessageHistory *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _messageRegistry_, NetI2pRouterTransportOutboundMessageRegistry *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _netDb_, NetI2pRouterNetworkDatabaseFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _keyManager_, NetI2pRouterKeyManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _commSystem_, NetI2pRouterCommSystemFacade *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _profileOrganizer_, NetI2pRouterPeermanagerProfileOrganizer *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _peerManagerFacade_, id<NetI2pRouterPeerManagerFacade>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _profileManager_, id<NetI2pRouterProfileManager>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _bandwidthLimiter_, NetI2pRouterTransportFIFOBandwidthLimiter *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _tunnelManager_, id<NetI2pRouterTunnelManagerFacade>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _tunnelDispatcher_, NetI2pRouterTunnelTunnelDispatcher *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _statPublisher_, NetI2pRouterStatisticsManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _banlist_, NetI2pRouterBanlist *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _blocklist_, NetI2pRouterBlocklist *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _messageValidator_, NetI2pRouterMessageValidator *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _throttle_, id<NetI2pRouterRouterThrottle>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _appManager_RouterContext_, NetI2pRouterStartupRouterAppManager *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _routingKeyGenerator_, NetI2pDataRouterRouterKeyGenerator *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _garlicMessageParser_, NetI2pRouterMessageGarlicMessageParser *)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _finalShutdownTasks_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _lock1_RouterContext_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _lock2_RouterContext_, id)
J2OBJC_FIELD_SETTER(NetI2pRouterRouterContext, _lock3_RouterContext_, id)

inline id<JavaUtilList> NetI2pRouterRouterContext_get__contexts(void);
static id<JavaUtilList> NetI2pRouterRouterContext__contexts;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterRouterContext, _contexts, id<JavaUtilList>)

__attribute__((unused)) static JavaUtilProperties *NetI2pRouterRouterContext_filterPropsWithJavaUtilProperties_(JavaUtilProperties *envProps);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterRouterContext__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterRouterContext)

@implementation NetI2pRouterRouterContext

- (instancetype)initWithNetI2pRouterRouter:(NetI2pRouterRouter *)router {
  NetI2pRouterRouterContext_initWithNetI2pRouterRouter_(self, router);
  return self;
}

- (instancetype)initWithNetI2pRouterRouter:(NetI2pRouterRouter *)router
                    withJavaUtilProperties:(JavaUtilProperties *)envProps {
  NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_(self, router, envProps);
  return self;
}

- (instancetype)initWithNetI2pRouterRouter:(NetI2pRouterRouter *)router
                    withJavaUtilProperties:(JavaUtilProperties *)envProps
                               withBoolean:(jboolean)doInit {
  NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(self, router, envProps, doInit);
  return self;
}

+ (jboolean)setGlobalContextWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterRouterContext_setGlobalContextWithNetI2pRouterRouterContext_(ctx);
}

+ (JavaUtilProperties *)filterPropsWithJavaUtilProperties:(JavaUtilProperties *)envProps {
  return NetI2pRouterRouterContext_filterPropsWithJavaUtilProperties_(envProps);
}

- (void)setPropertyWithNSString:(NSString *)propName
                   withNSString:(NSString *)value {
  [((NetI2pUtilI2PProperties *) nil_chk(_overrideProps_)) setPropertyWithNSString:propName withNSString:value];
}

- (void)removePropertyWithNSString:(NSString *)propName {
  [((NetI2pUtilI2PProperties *) nil_chk(_overrideProps_)) removeWithId:propName];
}

- (void)addPropertyCallbackWithNetI2pUtilI2PProperties_I2PPropertyCallback:(id<NetI2pUtilI2PProperties_I2PPropertyCallback>)callback {
  [((NetI2pUtilI2PProperties *) nil_chk(_overrideProps_)) addCallBackWithNetI2pUtilI2PProperties_I2PPropertyCallback:callback];
}

- (void)initAll {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_initialized_)) @throw create_JavaLangIllegalStateException_init();
    if (![self getBooleanPropertyWithNSString:@"i2p.dummyClientFacade"]) {
      NetI2pRouterClientClientManagerFacadeImpl *cmfi = create_NetI2pRouterClientClientManagerFacadeImpl_initWithNetI2pRouterRouterContext_(self);
      JreStrongAssign(&_clientManagerFacade_, cmfi);
      JreStrongAssign(&_internalClientManager_, cmfi);
    }
    else {
      JreStrongAssignAndConsume(&_clientManagerFacade_, new_NetI2pRouterDummyDummyClientManagerFacade_initWithNetI2pRouterRouterContext_(self));
    }
    JreStrongAssignAndConsume(&_garlicMessageParser_, new_NetI2pRouterMessageGarlicMessageParser_initWithNetI2pI2PAppContext_(self));
    JreStrongAssignAndConsume(&_clientMessagePool_, new_NetI2pRouterClientMessagePool_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_jobQueue_, new_NetI2pRouterJobQueue_initWithNetI2pRouterRouterContext_(self));
    [_jobQueue_ startup];
    JreStrongAssignAndConsume(&_inNetMessagePool_, new_NetI2pRouterInNetMessagePool_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_outNetMessagePool_, new_NetI2pRouterOutNetMessagePool_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_messageHistory_, new_NetI2pRouterMessageHistory_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_messageRegistry_, new_NetI2pRouterTransportOutboundMessageRegistry_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_routingKeyGenerator_, new_NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(self));
    if (![self getBooleanPropertyWithNSString:@"i2p.dummyNetDb"]) JreStrongAssignAndConsume(&_netDb_, new_NetI2pRouterNetworkdbKademliaFloodfillNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self));
    else JreStrongAssignAndConsume(&_netDb_, new_NetI2pRouterDummyDummyNetworkDatabaseFacade_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_keyManager_, new_NetI2pRouterKeyManager_initWithNetI2pRouterRouterContext_(self));
    if (![self getBooleanPropertyWithNSString:@"i2p.vmCommSystem"]) JreStrongAssignAndConsume(&_commSystem_, new_NetI2pRouterTransportCommSystemFacadeImpl_initWithNetI2pRouterRouterContext_(self));
    else JreStrongAssignAndConsume(&_commSystem_, new_NetI2pRouterDummyVMCommSystem_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_profileOrganizer_, new_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(self));
    if (![self getBooleanPropertyWithNSString:@"i2p.dummyPeerManager"]) JreStrongAssignAndConsume(&_peerManagerFacade_, new_NetI2pRouterPeermanagerPeerManagerFacadeImpl_initWithNetI2pRouterRouterContext_(self));
    else JreStrongAssignAndConsume(&_peerManagerFacade_, new_NetI2pRouterDummyDummyPeerManagerFacade_init());
    JreStrongAssignAndConsume(&_profileManager_, new_NetI2pRouterPeermanagerProfileManagerImpl_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_bandwidthLimiter_, new_NetI2pRouterTransportFIFOBandwidthLimiter_initWithNetI2pI2PAppContext_(self));
    if (![self getBooleanPropertyWithNSString:@"i2p.dummyTunnelManager"]) JreStrongAssignAndConsume(&_tunnelManager_, new_NetI2pRouterTunnelPoolTunnelPoolManager_initWithNetI2pRouterRouterContext_(self));
    else JreStrongAssignAndConsume(&_tunnelManager_, new_NetI2pRouterDummyDummyTunnelManagerFacade_init());
    JreStrongAssignAndConsume(&_tunnelDispatcher_, new_NetI2pRouterTunnelTunnelDispatcher_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_statPublisher_, new_NetI2pRouterStatisticsManager_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_banlist_, new_NetI2pRouterBanlist_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_blocklist_, new_NetI2pRouterBlocklist_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_messageValidator_, new_NetI2pRouterMessageValidator_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_throttle_, new_NetI2pRouterRouterThrottleImpl_initWithNetI2pRouterRouterContext_(self));
    JreStrongAssignAndConsume(&_appManager_RouterContext_, new_NetI2pRouterStartupRouterAppManager_initWithNetI2pRouterRouterContext_(self));
    JreAssignVolatileBoolean(&_initialized_, true);
  }
}

+ (id<JavaUtilList>)listContexts {
  return NetI2pRouterRouterContext_listContexts();
}

+ (id<JavaUtilList>)getContexts {
  return NetI2pRouterRouterContext_getContexts();
}

+ (void)killGlobalContext {
  NetI2pRouterRouterContext_killGlobalContext();
}

- (NetI2pRouterRouter *)router {
  return _router_;
}

- (NetI2pDataHash *)routerHash {
  if (_router_ == nil) return nil;
  NetI2pDataRouterRouterInfo *ri = [_router_ getRouterInfo];
  if (ri == nil) return nil;
  return [((NetI2pDataRouterRouterIdentity *) nil_chk([ri getIdentity])) getHash];
}

- (NetI2pRouterClientManagerFacade *)clientManager {
  return _clientManagerFacade_;
}

- (NetI2pRouterClientMessagePool *)clientMessagePool {
  return _clientMessagePool_;
}

- (NetI2pRouterInNetMessagePool *)inNetMessagePool {
  return _inNetMessagePool_;
}

- (NetI2pRouterOutNetMessagePool *)outNetMessagePool {
  return _outNetMessagePool_;
}

- (NetI2pRouterMessageHistory *)messageHistory {
  return _messageHistory_;
}

- (NetI2pRouterTransportOutboundMessageRegistry *)messageRegistry {
  return _messageRegistry_;
}

- (NetI2pRouterNetworkDatabaseFacade *)netDb {
  return _netDb_;
}

- (NetI2pRouterJobQueue *)jobQueue {
  return _jobQueue_;
}

- (NetI2pRouterKeyManager *)keyManager {
  return _keyManager_;
}

- (NetI2pRouterCommSystemFacade *)commSystem {
  return _commSystem_;
}

- (NetI2pRouterPeermanagerProfileOrganizer *)profileOrganizer {
  return _profileOrganizer_;
}

- (id<NetI2pRouterPeerManagerFacade>)peerManager {
  return _peerManagerFacade_;
}

- (id<NetI2pRouterProfileManager>)profileManager {
  return _profileManager_;
}

- (NetI2pRouterTransportFIFOBandwidthLimiter *)bandwidthLimiter {
  return _bandwidthLimiter_;
}

- (id<NetI2pRouterTunnelManagerFacade>)tunnelManager {
  return _tunnelManager_;
}

- (NetI2pRouterTunnelTunnelDispatcher *)tunnelDispatcher {
  return _tunnelDispatcher_;
}

- (NetI2pRouterStatisticsManager *)statPublisher {
  return _statPublisher_;
}

- (NetI2pRouterBanlist *)banlist {
  return _banlist_;
}

- (NetI2pRouterBlocklist *)blocklist {
  return _blocklist_;
}

- (NetI2pRouterMessageValidator *)messageValidator {
  return _messageValidator_;
}

- (id<NetI2pRouterRouterThrottle>)throttle {
  return _throttle_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"RouterContext: "])) appendWithNSString:[super description]])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_router_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_clientManagerFacade_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_clientMessagePool_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_jobQueue_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_inNetMessagePool_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_outNetMessagePool_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_messageHistory_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_messageRegistry_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_netDb_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_keyManager_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_commSystem_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_profileOrganizer_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_peerManagerFacade_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_profileManager_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_bandwidthLimiter_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_tunnelManager_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_statPublisher_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_banlist_])) appendWithChar:0x000a];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithId:_messageValidator_])) appendWithChar:0x000a];
  return [buf description];
}

- (NSString *)getPropertyWithNSString:(NSString *)propName {
  if (_router_ != nil) {
    NSString *val = [_router_ getConfigSettingWithNSString:propName];
    if (val != nil) return val;
  }
  return [super getPropertyWithNSString:propName];
}

- (NSString *)getPropertyWithNSString:(NSString *)propName
                         withNSString:(NSString *)defaultVal {
  if (_router_ != nil) {
    NSString *val = [_router_ getConfigSettingWithNSString:propName];
    if (val != nil) return val;
  }
  return [super getPropertyWithNSString:propName withNSString:defaultVal];
}

- (jint)getPropertyWithNSString:(NSString *)propName
                        withInt:(jint)defaultVal {
  if (_router_ != nil) {
    NSString *val = [_router_ getConfigSettingWithNSString:propName];
    if (val != nil) {
      jint ival = defaultVal;
      @try {
        ival = JavaLangInteger_parseIntWithNSString_(val);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
      return ival;
    }
  }
  return [super getPropertyWithNSString:propName withInt:defaultVal];
}

- (jlong)getPropertyWithNSString:(NSString *)propName
                        withLong:(jlong)defaultVal {
  if (_router_ != nil) {
    NSString *val = [_router_ getConfigSettingWithNSString:propName];
    if (val != nil) {
      jlong rv = defaultVal;
      @try {
        rv = JavaLangLong_parseLongWithNSString_(val);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
      return rv;
    }
  }
  return [super getPropertyWithNSString:propName withLong:defaultVal];
}

- (JavaUtilProperties *)getProperties {
  JavaUtilProperties *rv = [super getProperties];
  if (_router_ != nil) [((JavaUtilProperties *) nil_chk(rv)) putAllWithJavaUtilMap:[_router_ getConfigMap]];
  return rv;
}

- (void)initializeClock {
  @synchronized(_lock1_RouterContext_) {
    if (_clock_ == nil) {
      NetI2pRouterRouterClock *rc = create_NetI2pRouterRouterClock_initWithNetI2pRouterRouterContext_(self);
      [rc start];
      JreStrongAssign(&_clock_, rc);
    }
    JreAssignVolatileBoolean(&_clockInitialized_, true);
  }
}

- (NetI2pUtilKeyRing *)keyRing {
  if (!JreLoadVolatileBoolean(&_keyRingInitialized_)) [self initializeKeyRing];
  return _keyRing_;
}

- (void)initializeKeyRing {
  @synchronized(_lock2_RouterContext_) {
    if (_keyRing_ == nil) JreStrongAssignAndConsume(&_keyRing_, new_NetI2pRouterPersistentKeyRing_initWithNetI2pRouterRouterContext_(self));
    JreAssignVolatileBoolean(&_keyRingInitialized_, true);
  }
}

- (void)removeShutdownTasks {
  [((id<JavaUtilSet>) nil_chk(_shutdownTasks_)) clear];
}

- (void)addFinalShutdownTaskWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  [((id<JavaUtilSet>) nil_chk(_finalShutdownTasks_)) addWithId:task];
}

- (id<JavaUtilSet>)getFinalShutdownTasks {
  return _finalShutdownTasks_;
}

- (jboolean)isRouterContext {
  return true;
}

- (id<NetI2pInternalInternalClientManager>)internalClientManager {
  return _internalClientManager_;
}

- (id<NetI2pAppClientAppManager>)clientAppManager {
  return _appManager_RouterContext_;
}

- (NetI2pRouterStartupRouterAppManager *)routerAppManager {
  return _appManager_RouterContext_;
}

- (void)initializeSessionKeyManager {
  @synchronized(_lock3_RouterContext_) {
    if (_sessionKeyManager_ == nil) JreStrongAssignAndConsume(&_sessionKeyManager_, new_NetI2pRouterCryptoTransientSessionKeyManager_initWithNetI2pI2PAppContext_(self));
    JreAssignVolatileBoolean(&_sessionKeyManagerInitialized_, true);
  }
}

- (NetI2pDataRoutingKeyGenerator *)routingKeyGenerator {
  return _routingKeyGenerator_;
}

- (NetI2pDataRouterRouterKeyGenerator *)routerKeyGenerator {
  return _routingKeyGenerator_;
}

- (NetI2pRouterMessageGarlicMessageParser *)garlicMessageParser {
  return _garlicMessageParser_;
}

- (void)dealloc {
  RELEASE_(_router_);
  RELEASE_(_clientManagerFacade_);
  RELEASE_(_internalClientManager_);
  RELEASE_(_clientMessagePool_);
  RELEASE_(_jobQueue_);
  RELEASE_(_inNetMessagePool_);
  RELEASE_(_outNetMessagePool_);
  RELEASE_(_messageHistory_);
  RELEASE_(_messageRegistry_);
  RELEASE_(_netDb_);
  RELEASE_(_keyManager_);
  RELEASE_(_commSystem_);
  RELEASE_(_profileOrganizer_);
  RELEASE_(_peerManagerFacade_);
  RELEASE_(_profileManager_);
  RELEASE_(_bandwidthLimiter_);
  RELEASE_(_tunnelManager_);
  RELEASE_(_tunnelDispatcher_);
  RELEASE_(_statPublisher_);
  RELEASE_(_banlist_);
  RELEASE_(_blocklist_);
  RELEASE_(_messageValidator_);
  RELEASE_(_throttle_);
  RELEASE_(_appManager_RouterContext_);
  RELEASE_(_routingKeyGenerator_);
  RELEASE_(_garlicMessageParser_);
  RELEASE_(_finalShutdownTasks_);
  RELEASE_(_lock1_RouterContext_);
  RELEASE_(_lock2_RouterContext_);
  RELEASE_(_lock3_RouterContext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1a, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, 9, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterClientManagerFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterClientMessagePool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterInNetMessagePool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterOutNetMessagePool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageHistory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportOutboundMessageRegistry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterNetworkDatabaseFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterJobQueue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterKeyManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterCommSystemFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerProfileOrganizer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeerManagerFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterProfileManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTransportFIFOBandwidthLimiter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelManagerFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelTunnelDispatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterStatisticsManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterBanlist;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterBlocklist;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageValidator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouterThrottle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilKeyRing;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 21, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pInternalInternalClientManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pAppClientAppManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterStartupRouterAppManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRoutingKeyGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterKeyGenerator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterMessageGarlicMessageParser;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouter:);
  methods[1].selector = @selector(initWithNetI2pRouterRouter:withJavaUtilProperties:);
  methods[2].selector = @selector(initWithNetI2pRouterRouter:withJavaUtilProperties:withBoolean:);
  methods[3].selector = @selector(setGlobalContextWithNetI2pRouterRouterContext:);
  methods[4].selector = @selector(filterPropsWithJavaUtilProperties:);
  methods[5].selector = @selector(setPropertyWithNSString:withNSString:);
  methods[6].selector = @selector(removePropertyWithNSString:);
  methods[7].selector = @selector(addPropertyCallbackWithNetI2pUtilI2PProperties_I2PPropertyCallback:);
  methods[8].selector = @selector(initAll);
  methods[9].selector = @selector(listContexts);
  methods[10].selector = @selector(getContexts);
  methods[11].selector = @selector(killGlobalContext);
  methods[12].selector = @selector(router);
  methods[13].selector = @selector(routerHash);
  methods[14].selector = @selector(clientManager);
  methods[15].selector = @selector(clientMessagePool);
  methods[16].selector = @selector(inNetMessagePool);
  methods[17].selector = @selector(outNetMessagePool);
  methods[18].selector = @selector(messageHistory);
  methods[19].selector = @selector(messageRegistry);
  methods[20].selector = @selector(netDb);
  methods[21].selector = @selector(jobQueue);
  methods[22].selector = @selector(keyManager);
  methods[23].selector = @selector(commSystem);
  methods[24].selector = @selector(profileOrganizer);
  methods[25].selector = @selector(peerManager);
  methods[26].selector = @selector(profileManager);
  methods[27].selector = @selector(bandwidthLimiter);
  methods[28].selector = @selector(tunnelManager);
  methods[29].selector = @selector(tunnelDispatcher);
  methods[30].selector = @selector(statPublisher);
  methods[31].selector = @selector(banlist);
  methods[32].selector = @selector(blocklist);
  methods[33].selector = @selector(messageValidator);
  methods[34].selector = @selector(throttle);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(getPropertyWithNSString:);
  methods[37].selector = @selector(getPropertyWithNSString:withNSString:);
  methods[38].selector = @selector(getPropertyWithNSString:withInt:);
  methods[39].selector = @selector(getPropertyWithNSString:withLong:);
  methods[40].selector = @selector(getProperties);
  methods[41].selector = @selector(initializeClock);
  methods[42].selector = @selector(keyRing);
  methods[43].selector = @selector(initializeKeyRing);
  methods[44].selector = @selector(removeShutdownTasks);
  methods[45].selector = @selector(addFinalShutdownTaskWithJavaLangRunnable:);
  methods[46].selector = @selector(getFinalShutdownTasks);
  methods[47].selector = @selector(isRouterContext);
  methods[48].selector = @selector(internalClientManager);
  methods[49].selector = @selector(clientAppManager);
  methods[50].selector = @selector(routerAppManager);
  methods[51].selector = @selector(initializeSessionKeyManager);
  methods[52].selector = @selector(routingKeyGenerator);
  methods[53].selector = @selector(routerKeyGenerator);
  methods[54].selector = @selector(garlicMessageParser);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_router_", "LNetI2pRouterRouter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_clientManagerFacade_", "LNetI2pRouterClientManagerFacade;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_internalClientManager_", "LNetI2pInternalInternalClientManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_clientMessagePool_", "LNetI2pRouterClientMessagePool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_jobQueue_", "LNetI2pRouterJobQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inNetMessagePool_", "LNetI2pRouterInNetMessagePool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outNetMessagePool_", "LNetI2pRouterOutNetMessagePool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messageHistory_", "LNetI2pRouterMessageHistory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messageRegistry_", "LNetI2pRouterTransportOutboundMessageRegistry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_netDb_", "LNetI2pRouterNetworkDatabaseFacade;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyManager_", "LNetI2pRouterKeyManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_commSystem_", "LNetI2pRouterCommSystemFacade;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_profileOrganizer_", "LNetI2pRouterPeermanagerProfileOrganizer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerManagerFacade_", "LNetI2pRouterPeerManagerFacade;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_profileManager_", "LNetI2pRouterProfileManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bandwidthLimiter_", "LNetI2pRouterTransportFIFOBandwidthLimiter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelManager_", "LNetI2pRouterTunnelManagerFacade;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelDispatcher_", "LNetI2pRouterTunnelTunnelDispatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_statPublisher_", "LNetI2pRouterStatisticsManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_banlist_", "LNetI2pRouterBanlist;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_blocklist_", "LNetI2pRouterBlocklist;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messageValidator_", "LNetI2pRouterMessageValidator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_throttle_", "LNetI2pRouterRouterThrottle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_appManager_RouterContext_", "LNetI2pRouterStartupRouterAppManager;", .constantValue.asLong = 0, 0x2, 22, -1, -1, -1 },
    { "_routingKeyGenerator_", "LNetI2pDataRouterRouterKeyGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_garlicMessageParser_", "LNetI2pRouterMessageGarlicMessageParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_finalShutdownTasks_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "_initialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lock1_RouterContext_", "LNSObject;", .constantValue.asLong = 0, 0x12, 24, -1, -1, -1 },
    { "_lock2_RouterContext_", "LNSObject;", .constantValue.asLong = 0, 0x12, 25, -1, -1, -1 },
    { "_lock3_RouterContext_", "LNSObject;", .constantValue.asLong = 0, 0x12, 26, -1, -1, -1 },
    { "_contexts", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouter;", "LNetI2pRouterRouter;LJavaUtilProperties;", "LNetI2pRouterRouter;LJavaUtilProperties;Z", "setGlobalContext", "LNetI2pRouterRouterContext;", "filterProps", "LJavaUtilProperties;", "setProperty", "LNSString;LNSString;", (void *)&NetI2pRouterRouterContext__Annotations$0, "removeProperty", "LNSString;", "addPropertyCallback", "LNetI2pUtilI2PProperties_I2PPropertyCallback;", "()Ljava/util/List<Lnet/i2p/router/RouterContext;>;", "toString", "getProperty", "LNSString;I", "LNSString;J", "addFinalShutdownTask", "LJavaLangRunnable;", "()Ljava/util/Set<Ljava/lang/Runnable;>;", "_appManager", "Ljava/util/Set<Ljava/lang/Runnable;>;", "_lock1", "_lock2", "_lock3", &NetI2pRouterRouterContext__contexts, "Ljava/util/List<Lnet/i2p/router/RouterContext;>;" };
  static const J2ObjcClassInfo _NetI2pRouterRouterContext = { "RouterContext", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 55, 32, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterRouterContext;
}

+ (void)initialize {
  if (self == [NetI2pRouterRouterContext class]) {
    JreStrongAssignAndConsume(&NetI2pRouterRouterContext__contexts, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterRouterContext)
  }
}

@end

void NetI2pRouterRouterContext_initWithNetI2pRouterRouter_(NetI2pRouterRouterContext *self, NetI2pRouterRouter *router) {
  NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_(self, router, nil);
}

NetI2pRouterRouterContext *new_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_(NetI2pRouterRouter *router) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_, router)
}

NetI2pRouterRouterContext *create_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_(NetI2pRouterRouter *router) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_, router)
}

void NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_(NetI2pRouterRouterContext *self, NetI2pRouterRouter *router, JavaUtilProperties *envProps) {
  NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(self, router, envProps, true);
}

NetI2pRouterRouterContext *new_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_(NetI2pRouterRouter *router, JavaUtilProperties *envProps) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_withJavaUtilProperties_, router, envProps)
}

NetI2pRouterRouterContext *create_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_(NetI2pRouterRouter *router, JavaUtilProperties *envProps) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_withJavaUtilProperties_, router, envProps)
}

void NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(NetI2pRouterRouterContext *self, NetI2pRouterRouter *router, JavaUtilProperties *envProps, jboolean doInit) {
  NetI2pI2PAppContext_initWithBoolean_withJavaUtilProperties_(self, doInit, NetI2pRouterRouterContext_filterPropsWithJavaUtilProperties_(envProps));
  JreStrongAssignAndConsume(&self->_lock1_RouterContext_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock2_RouterContext_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->_lock3_RouterContext_, new_NSObject_init());
  JreStrongAssign(&self->_router_, router);
  if (![((id<JavaUtilList>) nil_chk(NetI2pRouterRouterContext__contexts)) isEmpty]) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Warning - More than one router in this JVM"];
  JreStrongAssignAndConsume(&self->_finalShutdownTasks_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  if (doInit) {
    [NetI2pRouterRouterContext__contexts addWithId:self];
  }
}

NetI2pRouterRouterContext *new_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(NetI2pRouterRouter *router, JavaUtilProperties *envProps, jboolean doInit) {
  J2OBJC_NEW_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_, router, envProps, doInit)
}

NetI2pRouterRouterContext *create_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_(NetI2pRouterRouter *router, JavaUtilProperties *envProps, jboolean doInit) {
  J2OBJC_CREATE_IMPL(NetI2pRouterRouterContext, initWithNetI2pRouterRouter_withJavaUtilProperties_withBoolean_, router, envProps, doInit)
}

jboolean NetI2pRouterRouterContext_setGlobalContextWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterRouterContext_initialize();
  [((id<JavaUtilList>) nil_chk(NetI2pRouterRouterContext__contexts)) addWithId:ctx];
  return NetI2pI2PAppContext_setGlobalContextWithNetI2pI2PAppContext_(ctx);
}

JavaUtilProperties *NetI2pRouterRouterContext_filterPropsWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  NetI2pRouterRouterContext_initialize();
  if (envProps == nil) envProps = create_JavaUtilProperties_init();
  if ([envProps getPropertyWithNSString:@"time.disabled"] == nil) [envProps setPropertyWithNSString:@"time.disabled" withNSString:@"false"];
  if ([envProps getPropertyWithNSString:@"prng.buffers"] == nil) {
    jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
    jlong maxBuffs = (NetI2pUtilSystemVersion_isAndroid() || NetI2pUtilSystemVersion_isARM()) ? 4 : 8;
    jlong buffs = JavaLangMath_minWithLong_withLong_(maxBuffs, JavaLangMath_maxWithLong_withLong_(2, maxMemory / (21 * 1024 * 1024)));
    [envProps setPropertyWithNSString:@"prng.buffers" withNSString:JavaLangLong_toStringWithLong_(buffs)];
  }
  return envProps;
}

id<JavaUtilList> NetI2pRouterRouterContext_listContexts() {
  NetI2pRouterRouterContext_initialize();
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(NetI2pRouterRouterContext__contexts);
}

id<JavaUtilList> NetI2pRouterRouterContext_getContexts() {
  NetI2pRouterRouterContext_initialize();
  return NetI2pRouterRouterContext__contexts;
}

void NetI2pRouterRouterContext_killGlobalContext() {
  NetI2pRouterRouterContext_initialize();
  @synchronized(NetI2pI2PAppContext_class_()) {
    JreVolatileStrongAssign(JreLoadStaticRef(NetI2pI2PAppContext, _globalAppContext), nil);
  }
}

IOSObjectArray *NetI2pRouterRouterContext__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterRouterContext)
