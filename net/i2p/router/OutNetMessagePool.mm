//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/OutNetMessagePool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/OutNetMessagePool.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterOutNetMessagePool () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
}

- (jboolean)validateWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessagePool, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterOutNetMessagePool, _context_, NetI2pRouterRouterContext *)

__attribute__((unused)) static jboolean NetI2pRouterOutNetMessagePool_validateWithNetI2pRouterOutNetMessage_(NetI2pRouterOutNetMessagePool *self, NetI2pRouterOutNetMessage *msg);

@implementation NetI2pRouterOutNetMessagePool

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterOutNetMessagePool_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)addWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  jboolean valid = NetI2pRouterOutNetMessagePool_validateWithNetI2pRouterOutNetMessage_(self, msg);
  if (!valid) {
    [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageRegistry])) unregisterPendingWithNetI2pRouterOutNetMessage:msg];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Adding ", msg)];
  id<NetI2pRouterMessageSelector> selector = [((NetI2pRouterOutNetMessage *) nil_chk(msg)) getReplySelector];
  if (selector != nil) {
    [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) messageRegistry])) registerPendingWithNetI2pRouterOutNetMessage:msg];
  }
  [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) processMessageWithNetI2pRouterOutNetMessage:msg];
  return;
}

- (jboolean)validateWithNetI2pRouterOutNetMessage:(NetI2pRouterOutNetMessage *)msg {
  return NetI2pRouterOutNetMessagePool_validateWithNetI2pRouterOutNetMessage_(self, msg);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(addWithNetI2pRouterOutNetMessage:);
  methods[2].selector = @selector(validateWithNetI2pRouterOutNetMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "add", "LNetI2pRouterOutNetMessage;", "validate" };
  static const J2ObjcClassInfo _NetI2pRouterOutNetMessagePool = { "OutNetMessagePool", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterOutNetMessagePool;
}

@end

void NetI2pRouterOutNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterOutNetMessagePool *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterOutNetMessagePool_class_()]);
}

NetI2pRouterOutNetMessagePool *new_NetI2pRouterOutNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterOutNetMessagePool, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterOutNetMessagePool *create_NetI2pRouterOutNetMessagePool_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterOutNetMessagePool, initWithNetI2pRouterRouterContext_, context)
}

jboolean NetI2pRouterOutNetMessagePool_validateWithNetI2pRouterOutNetMessage_(NetI2pRouterOutNetMessagePool *self, NetI2pRouterOutNetMessage *msg) {
  if (msg == nil) return false;
  if ([msg getMessage] == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"Null message in the OutNetMessage - expired too soon"];
    return false;
  }
  if ([msg getTarget] == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@", @"No target in the OutNetMessage: ", msg) withJavaLangThrowable:create_JavaLangException_init()];
    return false;
  }
  if ([msg getPriority] < 0) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$@", @"Priority less than 0?  sounds like nonsense to me... ", msg) withJavaLangThrowable:create_JavaLangException_init()];
    return false;
  }
  if ([msg getExpiration] <= [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now]) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$@", @"Dropping expired outbound msg: ", msg) withJavaLangThrowable:create_JavaLangException_init()];
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterOutNetMessagePool)
