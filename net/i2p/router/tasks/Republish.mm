//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tasks/Republish.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tasks/Republish.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterTasksRepublish () {
 @public
  NetI2pRouterRouterContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTasksRepublish, _context_, NetI2pRouterRouterContext *)

@implementation NetI2pRouterTasksRepublish

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTasksRepublish_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)timeReached {
  @try {
    [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb])) publishWithNetI2pDataRouterRouterInfo:[((NetI2pRouterRouter *) nil_chk([_context_ router])) getRouterInfo]];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([_context_ logManager])) getLogWithIOSClass:NetI2pRouterRouter_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Local router info is invalid?  rebuilding a new identity" withJavaLangThrowable:iae];
    [((NetI2pRouterRouter *) nil_chk([_context_ router])) rebuildNewIdentity];
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;" };
  static const J2ObjcClassInfo _NetI2pRouterTasksRepublish = { "Republish", "net.i2p.router.tasks", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTasksRepublish;
}

@end

void NetI2pRouterTasksRepublish_initWithNetI2pRouterRouterContext_(NetI2pRouterTasksRepublish *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pRouterTasksRepublish *new_NetI2pRouterTasksRepublish_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTasksRepublish, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTasksRepublish *create_NetI2pRouterTasksRepublish_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTasksRepublish, initWithNetI2pRouterRouterContext_, ctx)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTasksRepublish)
