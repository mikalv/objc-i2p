//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tasks/CoalesceStatsEvent.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Runtime.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/PeerManagerFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/tasks/CoalesceStatsEvent.h"
#include "net/i2p/router/transport/FIFOBandwidthLimiter.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"

@interface NetI2pRouterTasksCoalesceStatsEvent () {
 @public
  NetI2pRouterRouterContext *_ctx_;
  jlong _maxMemory_;
}

- (NetI2pRouterRouterContext *)getContext;

+ (NSString *)_xWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTasksCoalesceStatsEvent, _ctx_, NetI2pRouterRouterContext *)

inline jlong NetI2pRouterTasksCoalesceStatsEvent_get_LOW_MEMORY_THRESHOLD(void);
#define NetI2pRouterTasksCoalesceStatsEvent_LOW_MEMORY_THRESHOLD 5242880LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTasksCoalesceStatsEvent, LOW_MEMORY_THRESHOLD, jlong)

__attribute__((unused)) static NetI2pRouterRouterContext *NetI2pRouterTasksCoalesceStatsEvent_getContext(NetI2pRouterTasksCoalesceStatsEvent *self);

__attribute__((unused)) static NSString *NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(NSString *s);

@implementation NetI2pRouterTasksCoalesceStatsEvent

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTasksCoalesceStatsEvent_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (NetI2pRouterRouterContext *)getContext {
  return NetI2pRouterTasksCoalesceStatsEvent_getContext(self);
}

- (void)timeReached {
  jint active = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) commSystem])) countActivePeers];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.activePeers" withLong:active withLong:60 * 1000];
  jint activeSend = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) commSystem])) countActiveSendPeers];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.activeSendPeers" withLong:activeSend withLong:60 * 1000];
  jint fast = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) profileOrganizer])) countFastPeers];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.fastPeers" withLong:fast withLong:60 * 1000];
  jint highCap = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) profileOrganizer])) countHighCapacityPeers];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.highCapacityPeers" withLong:highCap withLong:60 * 1000];
  jint integrated = [((id<JavaUtilSet>) nil_chk([((id<NetI2pRouterPeerManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) peerManager])) getPeersByCapabilityWithChar:'f'])) size];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.integratedPeers" withLong:integrated withLong:60 * 1000];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"bw.sendRate" withLong:JreFpToLong([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) bandwidthLimiter])) getSendBps])];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"bw.recvRate" withLong:JreFpToLong([((NetI2pRouterTransportFIFOBandwidthLimiter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) bandwidthLimiter])) getReceiveBps])];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.tunnelBacklog" withLong:[((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) tunnelManager])) getInboundBuildQueueSize] withLong:60 * 1000];
  jlong used = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) totalMemory] - [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"router.memoryUsed" withLong:used];
  if (_maxMemory_ - used < NetI2pRouterTasksCoalesceStatsEvent_LOW_MEMORY_THRESHOLD) NetI2pRouterRouter_clearCaches();
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) tunnelDispatcher])) updateParticipatingStatsWithInt:NetI2pRouterRouter_COALESCE_TIME];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) coalesceStats];
  NetI2pStatRateStat *receiveRate = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) getRateWithNSString:@"transport.receiveMessageSize"];
  if (receiveRate != nil) {
    NetI2pStatRate *rate = [receiveRate getRateWithLong:60 * 1000];
    if (rate != nil) {
      jdouble bytes = [rate getLastTotalValue];
      jdouble bps = (bytes * 1000.0) / [rate getPeriod];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"bw.receiveBps" withLong:JreFpToLong(bps) withLong:60 * 1000];
    }
  }
  NetI2pStatRateStat *sendRate = [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) getRateWithNSString:@"transport.sendMessageSize"];
  if (sendRate != nil) {
    NetI2pStatRate *rate = [sendRate getRateWithLong:60 * 1000];
    if (rate != nil) {
      jdouble bytes = [rate getLastTotalValue];
      jdouble bps = (bytes * 1000.0) / [rate getPeriod];
      [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(NetI2pRouterTasksCoalesceStatsEvent_getContext(self))) statManager])) addRateDataWithNSString:@"bw.sendBps" withLong:JreFpToLong(bps) withLong:60 * 1000];
    }
  }
}

+ (NSString *)_xWithNSString:(NSString *)s {
  return NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(_ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouterContext;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getContext);
  methods[2].selector = @selector(timeReached);
  methods[3].selector = @selector(_xWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxMemory_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "LOW_MEMORY_THRESHOLD", "J", .constantValue.asLong = NetI2pRouterTasksCoalesceStatsEvent_LOW_MEMORY_THRESHOLD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "_x", "LNSString;" };
  static const J2ObjcClassInfo _NetI2pRouterTasksCoalesceStatsEvent = { "CoalesceStatsEvent", "net.i2p.router.tasks", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTasksCoalesceStatsEvent;
}

@end

void NetI2pRouterTasksCoalesceStatsEvent_initWithNetI2pRouterRouterContext_(NetI2pRouterTasksCoalesceStatsEvent *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_ctx_, ctx);
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) statManager])) createRequiredRateStatWithNSString:@"bw.receiveBps" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Message receive rate (bytes/sec)") withNSString:@"Bandwidth" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 5 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"bw.sendBps" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Message send rate (bytes/sec)") withNSString:@"Bandwidth" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 5 * 60 * 1000, 60 * 60 * 1000 } count:3]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"bw.sendRate" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Low-level send rate (bytes/sec)") withNSString:@"Bandwidth" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"bw.recvRate" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Low-level receive rate (bytes/sec)") withNSString:@"Bandwidth" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000l, 5 * 60 * 1000l, 60 * 60 * 1000l } count:3]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"router.activePeers" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"How many peers we are actively talking with") withNSString:@"Throttle" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"router.highCapacityPeers" withNSString:@"How many high capacity peers we know" withNSString:@"Throttle" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"router.activeSendPeers" withNSString:@"How many peers we've sent to this minute" withNSString:@"Throttle" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"router.fastPeers" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Known fast peers") withNSString:@"Throttle" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRateStatWithNSString:@"router.integratedPeers" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Known integrated (floodfill) peers") withNSString:@"Throttle" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"router.tunnelBacklog" withNSString:NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(@"Size of tunnel acceptor backlog") withNSString:@"Tunnels" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  self->_maxMemory_ = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) maxMemory];
  NSString *legend = @"(Bytes)";
  if (self->_maxMemory_ < JavaLangLong_MAX_VALUE) JreStrAppend(&legend, "$$C", @" Max is ", NetI2pDataDataHelper_formatSizeWithLong_(self->_maxMemory_), 'B');
  [((NetI2pStatStatManager *) nil_chk([ctx statManager])) createRequiredRateStatWithNSString:@"router.memoryUsed" withNSString:legend withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000 } count:1]];
}

NetI2pRouterTasksCoalesceStatsEvent *new_NetI2pRouterTasksCoalesceStatsEvent_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTasksCoalesceStatsEvent, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTasksCoalesceStatsEvent *create_NetI2pRouterTasksCoalesceStatsEvent_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTasksCoalesceStatsEvent, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterRouterContext *NetI2pRouterTasksCoalesceStatsEvent_getContext(NetI2pRouterTasksCoalesceStatsEvent *self) {
  return self->_ctx_;
}

NSString *NetI2pRouterTasksCoalesceStatsEvent__xWithNSString_(NSString *s) {
  NetI2pRouterTasksCoalesceStatsEvent_initialize();
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTasksCoalesceStatsEvent)
