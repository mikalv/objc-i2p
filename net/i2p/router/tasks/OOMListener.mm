//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tasks/OOMListener.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/tasks/OOMListener.h"
#include "net/i2p/router/tasks/ThreadDump.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTasksOOMListener () {
 @public
  NetI2pRouterRouterContext *_context_;
  JavaUtilConcurrentAtomicAtomicBoolean *_wasCalled_;
}

+ (jboolean)isDebianPackageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTasksOOMListener, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterTasksOOMListener, _wasCalled_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static jboolean NetI2pRouterTasksOOMListener_isDebianPackageWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx);

@implementation NetI2pRouterTasksOOMListener

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTasksOOMListener_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)outOfMemoryWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom {
  @try {
    if ([((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) isFinalShutdownInProgress]) return;
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_wasCalled_)) getAndSetWithBoolean:true]) return;
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setPriorityWithInt:JavaLangThread_MAX_PRIORITY - 1];
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    NetI2pRouterRouter_clearCaches();
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  NetI2pUtilLog *log = nil;
  @try {
    log = [((NetI2pUtilLogManager *) nil_chk([_context_ logManager])) getLogWithIOSClass:NetI2pRouterRouter_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Thread ran out of memory, shutting down I2P" withJavaLangThrowable:oom];
    [log logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$J$J", @"free mem: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory], @" total mem: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) totalMemory])];
    NSString *path = NetI2pRouterTasksOOMListener_getWrapperConfigPathWithNetI2pRouterRouterContext_(_context_);
    if ([_context_ hasWrapper]) {
      [log logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"To prevent future shutdowns, increase wrapper.java.maxmemory in ", path)];
    }
    else if (!NetI2pUtilSystemVersion_isWindows()) {
      [log logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$@C$", @"To prevent future shutdowns, increase MAXMEMOPT in ", [_context_ getBaseDir], JreLoadStatic(JavaIoFile, separatorChar), @"runplain.sh or /usr/bin/i2prouter-nowrapper")];
    }
    else {
      [log logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"To prevent future shutdowns, run the restartable version of I2P, and increase wrapper.java.maxmemory in ", path)];
    }
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    NetI2pRouterTasksThreadDump_dumpWithNetI2pI2PAppContext_withInt_(_context_, 1);
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([_context_ router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_OOM];
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
  @try {
    [((NetI2pRouterRouter *) nil_chk([_context_ router])) shutdownWithInt:NetI2pRouterRouter_EXIT_OOM];
  }
  @catch (JavaLangOutOfMemoryError *oome) {
  }
}

+ (jboolean)isDebianPackageWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTasksOOMListener_isDebianPackageWithNetI2pRouterRouterContext_(ctx);
}

+ (NSString *)getWrapperConfigPathWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  return NetI2pRouterTasksOOMListener_getWrapperConfigPathWithNetI2pRouterRouterContext_(ctx);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_wasCalled_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(outOfMemoryWithJavaLangOutOfMemoryError:);
  methods[2].selector = @selector(isDebianPackageWithNetI2pRouterRouterContext:);
  methods[3].selector = @selector(getWrapperConfigPathWithNetI2pRouterRouterContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_wasCalled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "outOfMemory", "LJavaLangOutOfMemoryError;", "isDebianPackage", "getWrapperConfigPath" };
  static const J2ObjcClassInfo _NetI2pRouterTasksOOMListener = { "OOMListener", "net.i2p.router.tasks", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTasksOOMListener;
}

@end

void NetI2pRouterTasksOOMListener_initWithNetI2pRouterRouterContext_(NetI2pRouterTasksOOMListener *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_wasCalled_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pRouterTasksOOMListener *new_NetI2pRouterTasksOOMListener_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTasksOOMListener, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTasksOOMListener *create_NetI2pRouterTasksOOMListener_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTasksOOMListener, initWithNetI2pRouterRouterContext_, ctx)
}

jboolean NetI2pRouterTasksOOMListener_isDebianPackageWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTasksOOMListener_initialize();
  jboolean isDebian = !NetI2pUtilSystemVersion_isWindows() && !NetI2pUtilSystemVersion_isMac() && !NetI2pUtilSystemVersion_isGentoo() && !NetI2pUtilSystemVersion_isAndroid() && [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_hasPrefix:@"Linux"] && [(create_JavaIoFile_initWithNSString_(@"/etc/debian_version")) exists];
  return isDebian && [((NSString *) nil_chk([((JavaIoFile *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) getBaseDir])) getPath])) isEqual:@"/usr/share/i2p"] && [ctx getBooleanPropertyWithNSString:@"router.updateDisabled"];
}

NSString *NetI2pRouterTasksOOMListener_getWrapperConfigPathWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  NetI2pRouterTasksOOMListener_initialize();
  JavaIoFile *path;
  if (NetI2pUtilSystemVersion_isLinuxService()) {
    if (NetI2pUtilSystemVersion_isGentoo()) path = create_JavaIoFile_initWithNSString_(@"/usr/share/i2p");
    else path = create_JavaIoFile_initWithNSString_(@"/etc/i2p");
  }
  else if (NetI2pRouterTasksOOMListener_isDebianPackageWithNetI2pRouterRouterContext_(ctx)) {
    path = create_JavaIoFile_initWithNSString_(@"/etc/i2p");
  }
  else {
    path = [((NetI2pRouterRouterContext *) nil_chk(ctx)) getBaseDir];
  }
  path = create_JavaIoFile_initWithJavaIoFile_withNSString_(path, @"wrapper.config");
  return [path getPath];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTasksOOMListener)
