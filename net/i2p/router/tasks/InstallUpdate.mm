//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tasks/InstallUpdate.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/RouterVersion.h"
#include "net/i2p/router/tasks/InstallUpdate.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTasksInstallUpdate ()

+ (void)deleteJbigiFilesWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

+ (void)deleteListedFilesWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

@end

inline NSString *NetI2pRouterTasksInstallUpdate_get_DELETE_FILE(void);
static NSString *NetI2pRouterTasksInstallUpdate_DELETE_FILE = @"deletelist.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterTasksInstallUpdate, DELETE_FILE, NSString *)

__attribute__((unused)) static void NetI2pRouterTasksInstallUpdate_deleteJbigiFilesWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context);

__attribute__((unused)) static void NetI2pRouterTasksInstallUpdate_deleteListedFilesWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context);

@implementation NetI2pRouterTasksInstallUpdate

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterTasksInstallUpdate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)installUpdatesWithNetI2pRouterRouter:(NetI2pRouterRouter *)r {
  NetI2pRouterTasksInstallUpdate_installUpdatesWithNetI2pRouterRouter_(r);
}

+ (void)deleteJbigiFilesWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTasksInstallUpdate_deleteJbigiFilesWithNetI2pRouterRouterContext_(context);
}

+ (void)deleteListedFilesWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterTasksInstallUpdate_deleteListedFilesWithNetI2pRouterRouterContext_(context);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(installUpdatesWithNetI2pRouterRouter:);
  methods[2].selector = @selector(deleteJbigiFilesWithNetI2pRouterRouterContext:);
  methods[3].selector = @selector(deleteListedFilesWithNetI2pRouterRouterContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELETE_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "installUpdates", "LNetI2pRouterRouter;", "deleteJbigiFiles", "LNetI2pRouterRouterContext;", "deleteListedFiles", &NetI2pRouterTasksInstallUpdate_DELETE_FILE };
  static const J2ObjcClassInfo _NetI2pRouterTasksInstallUpdate = { "InstallUpdate", "net.i2p.router.tasks", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTasksInstallUpdate;
}

@end

void NetI2pRouterTasksInstallUpdate_init(NetI2pRouterTasksInstallUpdate *self) {
  NSObject_init(self);
}

NetI2pRouterTasksInstallUpdate *new_NetI2pRouterTasksInstallUpdate_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterTasksInstallUpdate, init)
}

NetI2pRouterTasksInstallUpdate *create_NetI2pRouterTasksInstallUpdate_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterTasksInstallUpdate, init)
}

void NetI2pRouterTasksInstallUpdate_installUpdatesWithNetI2pRouterRouter_(NetI2pRouterRouter *r) {
  NetI2pRouterTasksInstallUpdate_initialize();
  NetI2pRouterRouterContext *context = [((NetI2pRouterRouter *) nil_chk(r)) getContext];
  JavaIoFile *updateFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(context)) getRouterDir], NetI2pRouterRouter_UPDATE_FILE);
  jboolean exists = [updateFile exists];
  if (!exists) {
    updateFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], NetI2pRouterRouter_UPDATE_FILE);
    exists = [updateFile exists];
  }
  if (exists) {
    JavaIoFile *test = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], @"history.txt");
    if (([test exists] && ![test canWrite]) || (![((JavaIoFile *) nil_chk([context getBaseDir])) canWrite])) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$", @"ERROR: No write permissions on ", [context getBaseDir], @" to extract software update file")];
      return;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"INFO: Update file exists [", NetI2pRouterRouter_UPDATE_FILE, @"] - installing")];
    jboolean ok = NetI2pUtilFileUtil_verifyZipWithJavaIoFile_(updateFile);
    if (ok) {
      id<JavaUtilMap> config = create_JavaUtilHashMap_initWithInt_(4);
      [config putWithId:@"router.updateLastInstalled" withId:JreStrcat("J", JavaLangSystem_currentTimeMillis())];
      [config putWithId:@"router.previousVersion" withId:NetI2pRouterRouterVersion_VERSION];
      [config putWithId:@"router.previousFullVersion" withId:NetI2pRouterRouterVersion_FULL_VERSION];
      [r saveConfigWithJavaUtilMap:config withJavaUtilCollection:nil];
      ok = NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_(updateFile, [context getBaseDir]);
    }
    @try {
      if (ok) {
        NetI2pRouterTasksInstallUpdate_deleteListedFilesWithNetI2pRouterRouterContext_(context);
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"INFO: Update installed"];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: Update failed!"];
      }
      if (!ok) {
        JavaIoFile *bad = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getRouterDir], JreStrcat("$$", @"BAD-", NetI2pRouterRouter_UPDATE_FILE));
        jboolean renamed = [updateFile renameToWithJavaIoFile:bad];
        if (renamed) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Moved update file to ", [bad getAbsolutePath])];
        }
        else {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Deleting file ", [updateFile getAbsolutePath])];
          ok = true;
        }
      }
      if (ok) {
        jboolean deleted = [updateFile delete__];
        if (!deleted) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: Unable to delete the update file!"];
          [updateFile deleteOnExit];
        }
      }
      if ([context hasWrapper]) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"INFO: Restarting after update"];
      else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"WARNING: Exiting after update, restart I2P"];
    }
    @catch (JavaLangThrowable *t) {
    }
    JavaLangSystem_exitWithInt_(NetI2pRouterRouter_EXIT_HARD_RESTART);
  }
  else {
    NetI2pRouterTasksInstallUpdate_deleteJbigiFilesWithNetI2pRouterRouterContext_(context);
    NetI2pRouterTasksInstallUpdate_deleteListedFilesWithNetI2pRouterRouterContext_(context);
  }
}

void NetI2pRouterTasksInstallUpdate_deleteJbigiFilesWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  NetI2pRouterTasksInstallUpdate_initialize();
  jboolean isX86 = NetI2pUtilSystemVersion_isX86();
  NSString *osName = [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  jboolean isWin = NetI2pUtilSystemVersion_isWindows();
  jboolean isMac = NetI2pUtilSystemVersion_isMac();
  jboolean goodOS = isWin || isMac || [((NSString *) nil_chk(osName)) java_contains:@"linux"] || [osName java_contains:@"freebsd"];
  JavaIoFile *jbigiJar = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(context)) getBaseDir], @"lib/jbigi.jar");
  if (goodOS && [jbigiJar exists]) {
    NSString *libPrefix = (isWin ? @"" : @"lib");
    NSString *libSuffix = (isWin ? @".dll" : isMac ? @".jnilib" : @".so");
    if (isX86) {
      JavaIoFile *jcpuidLib = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], JreStrcat("$$$", libPrefix, @"jcpuid", libSuffix));
      if ([jcpuidLib canWrite] && [jbigiJar lastModified] > [jcpuidLib lastModified]) {
        NSString *path = [jcpuidLib getAbsolutePath];
        jboolean success = NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(path, JreStrcat("$$", path, @".bak"), true, true);
        if (success) {
          jboolean success2 = [jcpuidLib delete__];
          if (success2) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"New jbigi.jar detected, moved jcpuid library to ", path, @".bak")];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Check logs for successful installation of new library"];
          }
        }
      }
    }
    if (isX86 || NetI2pUtilSystemVersion_isARM()) {
      JavaIoFile *jbigiLib = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], JreStrcat("$$$", libPrefix, @"jbigi", libSuffix));
      if ([jbigiLib canWrite] && [jbigiJar lastModified] > [jbigiLib lastModified]) {
        NSString *path = [jbigiLib getAbsolutePath];
        jboolean success = NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(path, JreStrcat("$$", path, @".bak"), true, true);
        if (success) {
          jboolean success2 = [jbigiLib delete__];
          if (success2) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"New jbigi.jar detected, moved jbigi library to ", path, @".bak")];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Check logs for successful installation of new library"];
          }
        }
      }
    }
  }
}

void NetI2pRouterTasksInstallUpdate_deleteListedFilesWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  NetI2pRouterTasksInstallUpdate_initialize();
  JavaIoFile *deleteFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk(context)) getBaseDir], NetI2pRouterTasksInstallUpdate_DELETE_FILE);
  if (![deleteFile exists]) return;
  JavaIoFileInputStream *fis = nil;
  JavaIoBufferedReader *in = nil;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(deleteFile);
    in = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(fis, @"UTF-8"));
    NSString *line;
    while ((line = [in readLine]) != nil) {
      NSString *fl = [((NSString *) nil_chk(line)) java_trim];
      if ([((NSString *) nil_chk(fl)) java_contains:@".."] || [fl java_hasPrefix:@"#"] || [fl java_length] == 0) continue;
      JavaIoFile *df = create_JavaIoFile_initWithNSString_(fl);
      if ([df isAbsolute]) continue;
      df = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], fl);
      if ([df exists] && [df isFile]) {
        if ([df delete__]) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"INFO: File [", fl, @"] deleted")];
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if ([deleteFile delete__]) {
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTasksInstallUpdate)
