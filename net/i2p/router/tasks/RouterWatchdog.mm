//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/tasks/RouterWatchdog.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runtime.h"
#include "java/lang/Thread.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/Job.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/tasks/RouterWatchdog.h"
#include "net/i2p/router/tasks/ThreadDump.h"
#include "net/i2p/router/util/EventLog.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterTasksRouterWatchdog () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  jint _consecutiveErrors_;
  volatile_jboolean _isRunning_;
  jlong _lastDump_;
}

- (jboolean)shutdownOnHang;

- (void)dumpStatus;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterTasksRouterWatchdog, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterTasksRouterWatchdog, _context_, NetI2pRouterRouterContext *)

inline jlong NetI2pRouterTasksRouterWatchdog_get_MAX_JOB_RUN_LAG(void);
#define NetI2pRouterTasksRouterWatchdog_MAX_JOB_RUN_LAG 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTasksRouterWatchdog, MAX_JOB_RUN_LAG, jlong)

inline jlong NetI2pRouterTasksRouterWatchdog_get_MIN_DUMP_INTERVAL(void);
#define NetI2pRouterTasksRouterWatchdog_MIN_DUMP_INTERVAL 21600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterTasksRouterWatchdog, MIN_DUMP_INTERVAL, jlong)

__attribute__((unused)) static jboolean NetI2pRouterTasksRouterWatchdog_shutdownOnHang(NetI2pRouterTasksRouterWatchdog *self);

__attribute__((unused)) static void NetI2pRouterTasksRouterWatchdog_dumpStatus(NetI2pRouterTasksRouterWatchdog *self);

@implementation NetI2pRouterTasksRouterWatchdog

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterTasksRouterWatchdog_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)shutdown {
  JreAssignVolatileBoolean(&_isRunning_, false);
}

- (jboolean)verifyJobQueueLiveliness {
  jlong when = [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) jobQueue])) getLastJobBegin];
  if (when < 0) return true;
  jlong howLongAgo = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - when;
  if (howLongAgo > NetI2pRouterTasksRouterWatchdog_MAX_JOB_RUN_LAG) {
    id<NetI2pRouterJob> cur = [((NetI2pRouterJobQueue *) nil_chk([_context_ jobQueue])) getLastJob];
    if (cur != nil) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) [_log_ errorWithNSString:JreStrcat("$$$@", @"Last job was queued up ", NetI2pDataDataHelper_formatDurationWithLong_(howLongAgo), @" ago: ", cur)];
      return false;
    }
    else {
      return true;
    }
  }
  else {
    return true;
  }
}

- (jboolean)verifyClientLiveliness {
  return [((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) verifyClientLiveliness];
}

- (jboolean)shutdownOnHang {
  return NetI2pRouterTasksRouterWatchdog_shutdownOnHang(self);
}

- (void)dumpStatus {
  NetI2pRouterTasksRouterWatchdog_dumpStatus(self);
}

- (void)run {
  while (JreLoadVolatileBoolean(&_isRunning_)) {
    @try {
      JavaLangThread_sleepWithLong_(60 * 1000);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    [self monitorRouter];
  }
}

- (void)monitorRouter {
  jboolean ok = [self verifyJobQueueLiveliness];
  jlong netErrors = 0;
  if ([((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) getStatus] == JreLoadEnum(NetI2pRouterCommSystemFacade_Status, DISCONNECTED)) {
    netErrors = 10;
  }
  else {
    NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) getRateWithNSString:@"udp.sendException"];
    if (rs != nil) {
      NetI2pStatRate *r = [rs getRateWithLong:60 * 1000];
      if (r != nil) netErrors = [r getLastEventCount];
    }
  }
  ok = (ok && ([self verifyClientLiveliness] || netErrors >= 5));
  if (ok) {
    _consecutiveErrors_ = 0;
  }
  else {
    _consecutiveErrors_++;
    NetI2pRouterTasksRouterWatchdog_dumpStatus(self);
    if (NetI2pRouterTasksRouterWatchdog_shutdownOnHang(self)) {
      [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Router hung!  Restart forced by watchdog!"];
      @try {
        JavaLangThread_sleepWithLong_(30 * 1000);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) haltWithInt:NetI2pRouterRouter_EXIT_HARD_RESTART];
    }
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(shutdown);
  methods[2].selector = @selector(verifyJobQueueLiveliness);
  methods[3].selector = @selector(verifyClientLiveliness);
  methods[4].selector = @selector(shutdownOnHang);
  methods[5].selector = @selector(dumpStatus);
  methods[6].selector = @selector(run);
  methods[7].selector = @selector(monitorRouter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_consecutiveErrors_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastDump_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_JOB_RUN_LAG", "J", .constantValue.asLong = NetI2pRouterTasksRouterWatchdog_MAX_JOB_RUN_LAG, 0x1a, -1, -1, -1, -1 },
    { "MIN_DUMP_INTERVAL", "J", .constantValue.asLong = NetI2pRouterTasksRouterWatchdog_MIN_DUMP_INTERVAL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;" };
  static const J2ObjcClassInfo _NetI2pRouterTasksRouterWatchdog = { "RouterWatchdog", "net.i2p.router.tasks", ptrTable, methods, fields, 7, 0x1, 8, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterTasksRouterWatchdog;
}

@end

void NetI2pRouterTasksRouterWatchdog_initWithNetI2pRouterRouterContext_(NetI2pRouterTasksRouterWatchdog *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterTasksRouterWatchdog_class_()]);
  JreAssignVolatileBoolean(&self->_isRunning_, true);
}

NetI2pRouterTasksRouterWatchdog *new_NetI2pRouterTasksRouterWatchdog_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterTasksRouterWatchdog, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterTasksRouterWatchdog *create_NetI2pRouterTasksRouterWatchdog_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterTasksRouterWatchdog, initWithNetI2pRouterRouterContext_, ctx)
}

jboolean NetI2pRouterTasksRouterWatchdog_shutdownOnHang(NetI2pRouterTasksRouterWatchdog *self) {
  if (![((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getBooleanPropertyWithNSString:@"watchdog.haltOnHang"]) return false;
  if (self->_consecutiveErrors_ >= 20 && NetI2pUtilSystemVersion_hasWrapper()) return true;
  return false;
}

void NetI2pRouterTasksRouterWatchdog_dumpStatus(NetI2pRouterTasksRouterWatchdog *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_ERROR]) {
    [self->_log_ errorWithNSString:JreStrcat("$I", @"Ready and waiting jobs: ", [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) jobQueue])) getReadyCount])];
    [self->_log_ errorWithNSString:JreStrcat("$J", @"Job lag: ", [((NetI2pRouterJobQueue *) nil_chk([self->_context_ jobQueue])) getMaxLag])];
    [self->_log_ errorWithNSString:JreStrcat("$I", @"Participating tunnel count: ", [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([self->_context_ tunnelManager])) getParticipatingCount])];
    NetI2pStatRateStat *rs = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"transport.sendProcessingTime"];
    NetI2pStatRate *r = nil;
    if (rs != nil) r = [rs getRateWithLong:60 * 1000];
    jdouble processTime = (r != nil ? [r getAverageValue] : 0);
    [self->_log_ errorWithNSString:JreStrcat("$$", @"1 minute send processing time: ", NetI2pDataDataHelper_formatDurationWithLong_(JreFpToLong(processTime)))];
    rs = [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getRateWithNSString:@"bw.sendBps"];
    r = nil;
    if (rs != nil) r = [rs getRateWithLong:60 * 1000];
    jdouble bps = (r != nil ? [r getAverageValue] : 0);
    [self->_log_ errorWithNSString:JreStrcat("$$$", @"Outbound send rate: ", NetI2pDataDataHelper_formatSizeWithLong_(JreFpToLong(bps)), @"Bps")];
    jlong max = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) maxMemory];
    jlong used = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) totalMemory] - [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory];
    [self->_log_ errorWithNSString:JreStrcat("$$$$C", @"Memory: ", NetI2pDataDataHelper_formatSizeWithLong_(used), @"B / ", NetI2pDataDataHelper_formatSizeWithLong_(max), 'B')];
    if (self->_consecutiveErrors_ == 1) {
      [self->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Router appears hung, or there is severe network congestion.  Watchdog starts barking!"];
      [((NetI2pRouterUtilEventLog *) nil_chk([((NetI2pRouterRouter *) nil_chk([self->_context_ router])) eventLog])) addEventWithNSString:NetI2pRouterUtilEventLog_WATCHDOG];
      jlong now = [((NetI2pUtilClock *) nil_chk([self->_context_ clock])) now];
      if (now - self->_lastDump_ > NetI2pRouterTasksRouterWatchdog_MIN_DUMP_INTERVAL) {
        self->_lastDump_ = now;
        NetI2pRouterTasksThreadDump_dumpWithNetI2pI2PAppContext_withInt_(self->_context_, 10);
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterTasksRouterWatchdog)
