//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/PeerManager.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/PeerSelectionCriteria.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/PeerManager.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/peermanager/ProfilePersistenceHelper.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterPeermanagerPeerManager () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pRouterPeermanagerProfileOrganizer *_organizer_;
  NetI2pRouterPeermanagerProfilePersistenceHelper *_persistenceHelper_;
  id<JavaUtilMap> _peersByCapability_;
  id<JavaUtilMap> _capabilitiesByPeer_;
  JavaUtilConcurrentAtomicAtomicBoolean *_storeLock_;
  volatile_jlong _lastStore_;
}

- (void)loadProfilesInBackground;

- (id<JavaUtilSet>)locked_getPeersWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _organizer_, NetI2pRouterPeermanagerProfileOrganizer *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _persistenceHelper_, NetI2pRouterPeermanagerProfilePersistenceHelper *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _peersByCapability_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _capabilitiesByPeer_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager, _storeLock_, JavaUtilConcurrentAtomicAtomicBoolean *)

inline jlong NetI2pRouterPeermanagerPeerManager_get_REORGANIZE_TIME(void);
#define NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME 45000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerManager, REORGANIZE_TIME, jlong)

inline jlong NetI2pRouterPeermanagerPeerManager_get_REORGANIZE_TIME_MEDIUM(void);
#define NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_MEDIUM 123000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerManager, REORGANIZE_TIME_MEDIUM, jlong)

inline jlong NetI2pRouterPeermanagerPeerManager_get_REORGANIZE_TIME_LONG(void);
#define NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_LONG 351000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerManager, REORGANIZE_TIME_LONG, jlong)

inline jlong NetI2pRouterPeermanagerPeerManager_get_STORE_TIME(void);
#define NetI2pRouterPeermanagerPeerManager_STORE_TIME 68400000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerManager, STORE_TIME, jlong)

inline jlong NetI2pRouterPeermanagerPeerManager_get_EXPIRE_AGE(void);
#define NetI2pRouterPeermanagerPeerManager_EXPIRE_AGE 259200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerManager, EXPIRE_AGE, jlong)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerManager_loadProfilesInBackground(NetI2pRouterPeermanagerPeerManager *self);

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(NetI2pRouterPeermanagerPeerManager *self, jchar c);

@interface NetI2pRouterPeermanagerPeerManager_Reorg : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  NetI2pRouterPeermanagerPeerManager *this$0_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$;

- (void)timeReached;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerManager_Reorg)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager_Reorg *self, NetI2pRouterPeermanagerPeerManager *outer$);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_Reorg *new_NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_Reorg *create_NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerManager_Reorg)

@interface NetI2pRouterPeermanagerPeerManager_ReorgThread : NetI2pUtilI2PThread {
 @public
  NetI2pRouterPeermanagerPeerManager *this$0_;
  NetI2pUtilSimpleTimer2_TimedEvent *_event_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$
                     withNetI2pUtilSimpleTimer2_TimedEvent:(NetI2pUtilSimpleTimer2_TimedEvent *)event;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerManager_ReorgThread)

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerManager_ReorgThread, _event_, NetI2pUtilSimpleTimer2_TimedEvent *)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager_ReorgThread *self, NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_ReorgThread *new_NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_ReorgThread *create_NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerManager_ReorgThread)

@interface NetI2pRouterPeermanagerPeerManager_ProfileLoader : NSObject < JavaLangRunnable > {
 @public
  NetI2pRouterPeermanagerPeerManager *this$0_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerManager_ProfileLoader)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager_ProfileLoader *self, NetI2pRouterPeermanagerPeerManager *outer$);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_ProfileLoader *new_NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerManager_ProfileLoader *create_NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerManager_ProfileLoader)

NSString *NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS = @"fHKLMNOPXRU";

@implementation NetI2pRouterPeermanagerPeerManager

+ (NSString *)TRACKED_CAPS {
  return NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterPeermanagerPeerManager_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)storeProfiles {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(_storeLock_)) compareAndSetWithBoolean:false withBoolean:true]) return;
  @try {
    id<JavaUtilSet> peers = [self selectPeers];
    for (NetI2pDataHash * __strong peer in nil_chk(peers)) {
      [self storeProfileWithNetI2pDataHash:peer];
    }
  }
  @finally {
    [_storeLock_ setWithBoolean:false];
  }
}

- (void)clearProfiles {
  [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) clearProfiles];
  [((id<JavaUtilMap>) nil_chk(_capabilitiesByPeer_)) clear];
  for (id<JavaUtilSet> __strong p in nil_chk([((id<JavaUtilMap>) nil_chk(_peersByCapability_)) values])) [((id<JavaUtilSet>) nil_chk(p)) clear];
}

- (id<JavaUtilSet>)selectPeers {
  return [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) selectAllPeers];
}

- (void)storeProfileWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if (peer == nil) return;
  NetI2pRouterPeermanagerPeerProfile *prof = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) getProfileWithNetI2pDataHash:peer];
  if (prof == nil) return;
  [((NetI2pRouterPeermanagerProfilePersistenceHelper *) nil_chk(_persistenceHelper_)) writeProfileWithNetI2pRouterPeermanagerPeerProfile:prof];
}

- (void)loadProfilesInBackground {
  NetI2pRouterPeermanagerPeerManager_loadProfilesInBackground(self);
}

- (void)loadProfiles {
  id<JavaUtilSet> profiles = [((NetI2pRouterPeermanagerProfilePersistenceHelper *) nil_chk(_persistenceHelper_)) readProfiles];
  for (NetI2pRouterPeermanagerPeerProfile * __strong prof in nil_chk(profiles)) {
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) addProfileWithNetI2pRouterPeermanagerPeerProfile:prof];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$", @"Profile for ", [((NetI2pDataHash *) nil_chk([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) getPeer])) toBase64], @" loaded")];
  }
}

- (id<JavaUtilList>)selectPeersWithNetI2pRouterPeerSelectionCriteria:(NetI2pRouterPeerSelectionCriteria *)criteria {
  id<JavaUtilSet> peers = create_JavaUtilHashSet_initWithInt_([((NetI2pRouterPeerSelectionCriteria *) nil_chk(criteria)) getMinimumRequired]);
  id<JavaUtilSet> exclude = create_JavaUtilHashSet_initWithInt_(1);
  [exclude addWithId:[((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash]];
  switch ([criteria getPurpose]) {
    case NetI2pRouterPeerSelectionCriteria_PURPOSE_TEST:
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) selectActiveNotFailingPeersWithInt:[criteria getMinimumRequired] withJavaUtilSet:exclude withJavaUtilSet:peers];
    break;
    case NetI2pRouterPeerSelectionCriteria_PURPOSE_TUNNEL:
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) selectFastPeersWithInt:[criteria getMaximumRequired] withJavaUtilSet:exclude withJavaUtilSet:peers];
    break;
    case NetI2pRouterPeerSelectionCriteria_PURPOSE_SOURCE_ROUTE:
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) selectHighCapacityPeersWithInt:[criteria getMinimumRequired] withJavaUtilSet:exclude withJavaUtilSet:peers];
    break;
    case NetI2pRouterPeerSelectionCriteria_PURPOSE_GARLIC:
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) selectHighCapacityPeersWithInt:[criteria getMinimumRequired] withJavaUtilSet:exclude withJavaUtilSet:peers];
    break;
    default:
    break;
  }
  if ([peers isEmpty]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$ICI$", @"We ran out of peers when looking for reachable ones after finding 0 with ", [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(_organizer_)) countHighCapacityPeers], '/', [_organizer_ countFastPeers], @" high capacity/fast peers")];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@", @"Peers selected: ", peers)];
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(peers);
}

- (void)setCapabilitiesWithNetI2pDataHash:(NetI2pDataHash *)peer
                             withNSString:(NSString *)caps {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$", @"Setting capabilities for ", [((NetI2pDataHash *) nil_chk(peer)) toBase64], @" to ", caps)];
  caps = [((NSString *) nil_chk(caps)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *oldCaps = [((id<JavaUtilMap>) nil_chk(_capabilitiesByPeer_)) putWithId:peer withId:caps];
  if ([((NSString *) nil_chk(caps)) isEqual:oldCaps]) return;
  if (oldCaps != nil) {
    for (jint i = 0; i < [oldCaps java_length]; i++) {
      jchar c = [oldCaps charAtWithInt:i];
      if ([caps java_indexOf:c] < 0) {
        id<JavaUtilSet> peers = NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(self, c);
        if (peers != nil) [peers removeWithId:peer];
      }
    }
  }
  for (jint i = 0; i < [caps java_length]; i++) {
    jchar c = [caps charAtWithInt:i];
    if ((oldCaps != nil) && ([((NSString *) nil_chk(oldCaps)) java_indexOf:c] >= 0)) continue;
    id<JavaUtilSet> peers = NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(self, c);
    if (peers != nil) [peers addWithId:peer];
  }
}

- (id<JavaUtilSet>)locked_getPeersWithChar:(jchar)c {
  return NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(self, c);
}

- (void)removeCapabilitiesWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Removing capabilities from ", [((NetI2pDataHash *) nil_chk(peer)) toBase64])];
  NSString *oldCaps = [((id<JavaUtilMap>) nil_chk(_capabilitiesByPeer_)) removeWithId:peer];
  if (oldCaps != nil) {
    for (jint i = 0; i < [oldCaps java_length]; i++) {
      jchar c = [oldCaps charAtWithInt:i];
      id<JavaUtilSet> peers = NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(self, c);
      if (peers != nil) [peers removeWithId:peer];
    }
  }
}

- (id<JavaUtilSet>)getPeersByCapabilityWithChar:(jchar)capability {
  id<JavaUtilSet> peers = NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(self, capability);
  if (peers != nil) return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(peers);
  return JavaUtilCollections_emptySet();
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_organizer_);
  RELEASE_(_persistenceHelper_);
  RELEASE_(_peersByCapability_);
  RELEASE_(_capabilitiesByPeer_);
  RELEASE_(_storeLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 13, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(storeProfiles);
  methods[2].selector = @selector(clearProfiles);
  methods[3].selector = @selector(selectPeers);
  methods[4].selector = @selector(storeProfileWithNetI2pDataHash:);
  methods[5].selector = @selector(loadProfilesInBackground);
  methods[6].selector = @selector(loadProfiles);
  methods[7].selector = @selector(selectPeersWithNetI2pRouterPeerSelectionCriteria:);
  methods[8].selector = @selector(setCapabilitiesWithNetI2pDataHash:withNSString:);
  methods[9].selector = @selector(locked_getPeersWithChar:);
  methods[10].selector = @selector(removeCapabilitiesWithNetI2pDataHash:);
  methods[11].selector = @selector(getPeersByCapabilityWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_organizer_", "LNetI2pRouterPeermanagerProfileOrganizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_persistenceHelper_", "LNetI2pRouterPeermanagerProfilePersistenceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peersByCapability_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "_capabilitiesByPeer_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "_storeLock_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastStore_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "REORGANIZE_TIME", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME, 0x1a, -1, -1, -1, -1 },
    { "REORGANIZE_TIME_MEDIUM", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_MEDIUM, 0x1a, -1, -1, -1, -1 },
    { "REORGANIZE_TIME_LONG", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_LONG, 0x1a, -1, -1, -1, -1 },
    { "STORE_TIME", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerManager_STORE_TIME, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE_AGE", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerManager_EXPIRE_AGE, 0x1a, -1, -1, -1, -1 },
    { "TRACKED_CAPS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "storeProfile", "LNetI2pDataHash;", "selectPeers", "LNetI2pRouterPeerSelectionCriteria;", "(Lnet/i2p/router/PeerSelectionCriteria;)Ljava/util/List<Lnet/i2p/data/Hash;>;", "setCapabilities", "LNetI2pDataHash;LNSString;", "locked_getPeers", "C", "(C)Ljava/util/Set<Lnet/i2p/data/Hash;>;", "removeCapabilities", "getPeersByCapability", "Ljava/util/Map<Ljava/lang/Character;Ljava/util/Set<Lnet/i2p/data/Hash;>;>;", "Ljava/util/Map<Lnet/i2p/data/Hash;Ljava/lang/String;>;", &NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS, "LNetI2pRouterPeermanagerPeerManager_Reorg;LNetI2pRouterPeermanagerPeerManager_ReorgThread;LNetI2pRouterPeermanagerPeerManager_ProfileLoader;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerManager = { "PeerManager", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x0, 12, 14, -1, 17, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerManager;
}

@end

void NetI2pRouterPeermanagerPeerManager_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerPeerManager *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_storeLock_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerPeerManager_class_()]);
  JreStrongAssignAndConsume(&self->_persistenceHelper_, new_NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(context));
  JreStrongAssign(&self->_organizer_, [context profileOrganizer]);
  [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(self->_organizer_)) setUsWithNetI2pDataHash:[context routerHash]];
  JreStrongAssignAndConsume(&self->_capabilitiesByPeer_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_peersByCapability_, new_JavaUtilHashMap_initWithInt_([((NSString *) nil_chk(NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS)) java_length]));
  for (jint i = 0; i < [NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS java_length]; i++) [self->_peersByCapability_ putWithId:JavaLangCharacter_valueOfWithChar_(JavaLangCharacter_toLowerCaseWithChar_([NetI2pRouterPeermanagerPeerManager_TRACKED_CAPS charAtWithInt:i])) withId:create_NetI2pUtilConcurrentHashSet_init()];
  NetI2pRouterPeermanagerPeerManager_loadProfilesInBackground(self);
}

NetI2pRouterPeermanagerPeerManager *new_NetI2pRouterPeermanagerPeerManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerManager, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterPeermanagerPeerManager *create_NetI2pRouterPeermanagerPeerManager_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerManager, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterPeermanagerPeerManager_loadProfilesInBackground(NetI2pRouterPeermanagerPeerManager *self) {
  [(create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(self))) start];
}

id<JavaUtilSet> NetI2pRouterPeermanagerPeerManager_locked_getPeersWithChar_(NetI2pRouterPeermanagerPeerManager *self, jchar c) {
  c = JavaLangCharacter_toLowerCaseWithChar_(c);
  return [((id<JavaUtilMap>) nil_chk(self->_peersByCapability_)) getWithId:JavaLangCharacter_valueOfWithChar_(c)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerManager)

@implementation NetI2pRouterPeermanagerPeerManager_Reorg

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$ {
  NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(self, outer$);
  return self;
}

- (void)timeReached {
  [(create_NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(this$0_, self)) start];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerManager:);
  methods[1].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterPeermanagerPeerManager;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerManager_Reorg = { "Reorg", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerManager_Reorg;
}

@end

void NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager_Reorg *self, NetI2pRouterPeermanagerPeerManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, [((NetI2pRouterRouterContext *) nil_chk(outer$->_context_)) simpleTimer2], NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME);
}

NetI2pRouterPeermanagerPeerManager_Reorg *new_NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerManager_Reorg, initWithNetI2pRouterPeermanagerPeerManager_, outer$)
}

NetI2pRouterPeermanagerPeerManager_Reorg *create_NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerManager_Reorg, initWithNetI2pRouterPeermanagerPeerManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerManager_Reorg)

@implementation NetI2pRouterPeermanagerPeerManager_ReorgThread

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$
                     withNetI2pUtilSimpleTimer2_TimedEvent:(NetI2pUtilSimpleTimer2_TimedEvent *)event {
  NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(self, outer$, event);
  return self;
}

- (void)run {
  jlong start = JavaLangSystem_currentTimeMillis();
  @try {
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk(this$0_->_organizer_)) reorganizeWithBoolean:true];
  }
  @catch (JavaLangThrowable *t) {
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error evaluating profiles" withJavaLangThrowable:t];
  }
  jlong orgtime = JavaLangSystem_currentTimeMillis() - start;
  if (JreLoadVolatileLong(&this$0_->_lastStore_) == 0) {
    JreAssignVolatileLong(&this$0_->_lastStore_, start);
  }
  else if (start - JreLoadVolatileLong(&this$0_->_lastStore_) > NetI2pRouterPeermanagerPeerManager_STORE_TIME) {
    JreAssignVolatileLong(&this$0_->_lastStore_, start);
    @try {
      [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) debugWithNSString:@"Periodic profile store start"];
      [this$0_ storeProfiles];
      [((NetI2pRouterPeermanagerProfilePersistenceHelper *) nil_chk(this$0_->_persistenceHelper_)) deleteOldProfilesWithLong:NetI2pRouterPeermanagerPeerManager_EXPIRE_AGE];
      [this$0_->_log_ debugWithNSString:@"Periodic profile store end"];
    }
    @catch (JavaLangThrowable *t) {
      [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error storing profiles" withJavaLangThrowable:t];
    }
  }
  jlong uptime = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(this$0_->_context_)) router])) getUptime];
  jlong delay;
  if (orgtime > 1000 || uptime > 2 * 60 * 60 * 1000) delay = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_LONG;
  else if (uptime > 10 * 60 * 1000) delay = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME_MEDIUM;
  else delay = NetI2pRouterPeermanagerPeerManager_REORGANIZE_TIME;
  [((NetI2pUtilSimpleTimer2_TimedEvent *) nil_chk(_event_)) scheduleWithLong:delay];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_event_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerManager:withNetI2pUtilSimpleTimer2_TimedEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_event_", "LNetI2pUtilSimpleTimer2_TimedEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2_TimedEvent;", "LNetI2pRouterPeermanagerPeerManager;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerManager_ReorgThread = { "ReorgThread", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerManager_ReorgThread;
}

@end

void NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager_ReorgThread *self, NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilI2PThread_initWithNSString_(self, @"PeerManager Reorg");
  [self setDaemonWithBoolean:true];
  JreStrongAssign(&self->_event_, event);
}

NetI2pRouterPeermanagerPeerManager_ReorgThread *new_NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerManager_ReorgThread, initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_, outer$, event)
}

NetI2pRouterPeermanagerPeerManager_ReorgThread *create_NetI2pRouterPeermanagerPeerManager_ReorgThread_initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_(NetI2pRouterPeermanagerPeerManager *outer$, NetI2pUtilSimpleTimer2_TimedEvent *event) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerManager_ReorgThread, initWithNetI2pRouterPeermanagerPeerManager_withNetI2pUtilSimpleTimer2_TimedEvent_, outer$, event)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerManager_ReorgThread)

@implementation NetI2pRouterPeermanagerPeerManager_ProfileLoader

- (instancetype)initWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)outer$ {
  NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ loadProfiles];
  create_NetI2pRouterPeermanagerPeerManager_Reorg_initWithNetI2pRouterPeermanagerPeerManager_(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerManager:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterPeermanagerPeerManager;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerManager_ProfileLoader = { "ProfileLoader", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerManager_ProfileLoader;
}

@end

void NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager_ProfileLoader *self, NetI2pRouterPeermanagerPeerManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pRouterPeermanagerPeerManager_ProfileLoader *new_NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerManager_ProfileLoader, initWithNetI2pRouterPeermanagerPeerManager_, outer$)
}

NetI2pRouterPeermanagerPeerManager_ProfileLoader *create_NetI2pRouterPeermanagerPeerManager_ProfileLoader_initWithNetI2pRouterPeermanagerPeerManager_(NetI2pRouterPeermanagerPeerManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerManager_ProfileLoader, initWithNetI2pRouterPeermanagerPeerManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerManager_ProfileLoader)
