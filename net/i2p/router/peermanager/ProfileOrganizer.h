//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/ProfileOrganizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer")
#ifdef RESTRICT_NetI2pRouterPeermanagerProfileOrganizer
#define INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer 0
#else
#define INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer 1
#endif
#undef RESTRICT_NetI2pRouterPeermanagerProfileOrganizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterPeermanagerProfileOrganizer_) && (INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer || defined(INCLUDE_NetI2pRouterPeermanagerProfileOrganizer))
#define NetI2pRouterPeermanagerProfileOrganizer_

@class IOSObjectArray;
@class JavaIoOutputStream;
@class NetI2pDataHash;
@class NetI2pRouterPeermanagerPeerProfile;
@class NetI2pRouterPeermanagerProfileOrganizer_Slice;
@class NetI2pRouterRouterContext;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface NetI2pRouterPeermanagerProfileOrganizer : NSObject
@property (readonly, copy, class) NSString *PROP_MINIMUM_FAST_PEERS NS_SWIFT_NAME(PROP_MINIMUM_FAST_PEERS);
@property (readonly, class) jint DEFAULT_MINIMUM_FAST_PEERS NS_SWIFT_NAME(DEFAULT_MINIMUM_FAST_PEERS);
@property (readonly, copy, class) NSString *PROP_MINIMUM_HIGH_CAPACITY_PEERS NS_SWIFT_NAME(PROP_MINIMUM_HIGH_CAPACITY_PEERS);
@property (readonly, class) jint DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS NS_SWIFT_NAME(DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS);

+ (NSString *)PROP_MINIMUM_FAST_PEERS;

+ (jint)DEFAULT_MINIMUM_FAST_PEERS;

+ (NSString *)PROP_MINIMUM_HIGH_CAPACITY_PEERS;

+ (jint)DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context;

- (NetI2pRouterPeermanagerPeerProfile *)addProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile;

- (jint)countActivePeers;

- (jint)countFailingPeers;

- (jint)countFastPeers;

- (jint)countHighCapacityPeers;

- (jint)countNotFailingPeers;

- (jint)countWellIntegratedPeers;

- (jboolean)exportProfileWithNetI2pDataHash:(NetI2pDataHash *)profile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jdouble)getCapacityThreshold;

- (jdouble)getIntegrationThreshold;

- (NetI2pRouterPeermanagerPeerProfile *)getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (NetI2pRouterPeermanagerPeerProfile *)getProfileNonblockingWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (jdouble)getSpeedThreshold;

- (NetI2pDataHash *)getUs;

- (jboolean)isFailingWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (jboolean)isFastWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (jboolean)isHighCapacityWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (jboolean)isSelectableWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (jboolean)isWellIntegratedWithNetI2pDataHash:(NetI2pDataHash *)peer;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (jboolean)peerSendsBadRepliesWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (void)reorganize;

- (void)reorganizeWithBoolean:(jboolean)shouldCoalesce;

- (void)selectActiveNotFailingPeersWithInt:(jint)howMany
                           withJavaUtilSet:(id<JavaUtilSet>)exclude
                           withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectAllNotFailingPeersWithInt:(jint)howMany
                        withJavaUtilSet:(id<JavaUtilSet>)exclude
                        withJavaUtilSet:(id<JavaUtilSet>)matches
                            withBoolean:(jboolean)onlyNotFailing;

- (id<JavaUtilSet>)selectAllPeers;

- (void)selectFailingPeersWithInt:(jint)howMany
                  withJavaUtilSet:(id<JavaUtilSet>)exclude
                  withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches
            withNetI2pDataHash:(NetI2pDataHash *)randomKey
withNetI2pRouterPeermanagerProfileOrganizer_Slice:(NetI2pRouterPeermanagerProfileOrganizer_Slice *)subTierMode;

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches
                       withInt:(jint)mask;

- (void)selectHighCapacityPeersWithInt:(jint)howMany
                       withJavaUtilSet:(id<JavaUtilSet>)exclude
                       withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectHighCapacityPeersWithInt:(jint)howMany
                       withJavaUtilSet:(id<JavaUtilSet>)exclude
                       withJavaUtilSet:(id<JavaUtilSet>)matches
                               withInt:(jint)mask;

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                         withBoolean:(jboolean)onlyNotFailing;

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                         withBoolean:(jboolean)onlyNotFailing
                             withInt:(jint)mask;

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                             withInt:(jint)mask;

- (id<JavaUtilList>)selectPeersLocallyUnreachable;

- (id<JavaUtilList>)selectPeersRecentlyRejecting;

- (void)selectWellIntegratedPeersWithInt:(jint)howMany
                         withJavaUtilSet:(id<JavaUtilSet>)exclude
                         withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)selectWellIntegratedPeersWithInt:(jint)howMany
                         withJavaUtilSet:(id<JavaUtilSet>)exclude
                         withJavaUtilSet:(id<JavaUtilSet>)matches
                                 withInt:(jint)mask;

- (void)setUsWithNetI2pDataHash:(NetI2pDataHash *)us;

#pragma mark Protected

- (jint)getMaximumFastPeers;

- (jint)getMaximumHighCapPeers;

- (jint)getMinimumFastPeers;

- (jint)getMinimumHighCapacityPeers;

#pragma mark Package-Private

- (void)clearProfiles;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterPeermanagerProfileOrganizer)

inline NSString *NetI2pRouterPeermanagerProfileOrganizer_get_PROP_MINIMUM_FAST_PEERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_FAST_PEERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfileOrganizer, PROP_MINIMUM_FAST_PEERS, NSString *)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_DEFAULT_MINIMUM_FAST_PEERS(void);
#define NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_FAST_PEERS 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, DEFAULT_MINIMUM_FAST_PEERS, jint)

inline NSString *NetI2pRouterPeermanagerProfileOrganizer_get_PROP_MINIMUM_HIGH_CAPACITY_PEERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_HIGH_CAPACITY_PEERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfileOrganizer, PROP_MINIMUM_HIGH_CAPACITY_PEERS, NSString *)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS(void);
#define NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS, jint)

FOUNDATION_EXPORT void NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT NetI2pRouterPeermanagerProfileOrganizer *new_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterPeermanagerProfileOrganizer *create_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context);

FOUNDATION_EXPORT void NetI2pRouterPeermanagerProfileOrganizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerProfileOrganizer)

#endif

#if !defined (NetI2pRouterPeermanagerProfileOrganizer_Slice_) && (INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer || defined(INCLUDE_NetI2pRouterPeermanagerProfileOrganizer_Slice))
#define NetI2pRouterPeermanagerProfileOrganizer_Slice_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum) {
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_ALL = 0,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_0_1 = 1,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_2_3 = 2,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_0 = 3,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_1 = 4,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_2 = 5,
  NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum_SLICE_3 = 6,
};

@interface NetI2pRouterPeermanagerProfileOrganizer_Slice : JavaLangEnum {
 @public
  jint mask_;
  jint val_;
}

@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_ALL NS_SWIFT_NAME(SLICE_ALL);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_0_1 NS_SWIFT_NAME(SLICE_0_1);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_2_3 NS_SWIFT_NAME(SLICE_2_3);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_0 NS_SWIFT_NAME(SLICE_0);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_1 NS_SWIFT_NAME(SLICE_1);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_2 NS_SWIFT_NAME(SLICE_2);
@property (readonly, class, nonnull) NetI2pRouterPeermanagerProfileOrganizer_Slice *SLICE_3 NS_SWIFT_NAME(SLICE_3);
+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_ALL;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_0_1;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_2_3;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_0;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_1;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_2;

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice * __nonnull)SLICE_3;

#pragma mark Public

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pRouterPeermanagerProfileOrganizer_Slice)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_values_[];

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_ALL(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_0_1(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_2_3(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_0(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_1(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_1)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_2(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2)

inline NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_get_SLICE_3(void);
J2OBJC_ENUM_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_3)

FOUNDATION_EXPORT IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer_Slice_values(void);

FOUNDATION_EXPORT NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerProfileOrganizer_Slice)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterPeermanagerProfileOrganizer")
