//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/ProfilePersistenceHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FilenameFilter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/GZIPOutputStream.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/DBHistory.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/peermanager/ProfilePersistenceHelper.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"

@interface NetI2pRouterPeermanagerProfilePersistenceHelper () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  JavaIoFile *_profileDir_;
  NetI2pDataHash *_us_;
}

+ (void)addDateWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)name
                                withLong:(jlong)val
                            withNSString:(NSString *)description_;

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                            withLong:(jlong)val
                        withNSString:(NSString *)description_;

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                           withFloat:(jfloat)val
                        withNSString:(NSString *)description_;

- (id<JavaUtilList>)selectFiles;

- (void)migrateWithJavaIoFileArray:(IOSObjectArray *)files;

- (jboolean)isExpiredWithLong:(jlong)lastSentToSuccessfully;

- (void)fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)p;

+ (jfloat)getFloatWithJavaUtilProperties:(JavaUtilProperties *)props
                            withNSString:(NSString *)key;

- (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file;

- (NetI2pDataHash *)getHashWithNSString:(NSString *)name;

- (JavaIoFile *)pickFileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfilePersistenceHelper, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfilePersistenceHelper, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfilePersistenceHelper, _profileDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfilePersistenceHelper, _us_, NetI2pDataHash *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_NL(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_NL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, NL, NSString *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_PREFIX(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX = @"profile-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, PREFIX, NSString *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_SUFFIX(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_SUFFIX = @".txt.gz";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, SUFFIX, NSString *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_UNCOMPRESSED_SUFFIX(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_UNCOMPRESSED_SUFFIX = @".txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, UNCOMPRESSED_SUFFIX, NSString *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_OLD_SUFFIX(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX = @".dat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, OLD_SUFFIX, NSString *)

inline jint NetI2pRouterPeermanagerProfilePersistenceHelper_get_MIN_NAME_LENGTH(void);
static jint NetI2pRouterPeermanagerProfilePersistenceHelper_MIN_NAME_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, MIN_NAME_LENGTH, jint)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_DIR_PREFIX(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX = @"p";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, DIR_PREFIX, NSString *)

inline NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_get_B64(void);
static NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_B64 = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-~";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfilePersistenceHelper, B64, NSString *)

inline jlong NetI2pRouterPeermanagerProfilePersistenceHelper_get_EXPIRE_AGE(void);
#define NetI2pRouterPeermanagerProfilePersistenceHelper_EXPIRE_AGE 1296000000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfilePersistenceHelper, EXPIRE_AGE, jlong)

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(JavaLangStringBuilder *buf, NSString *name, jfloat val, NSString *description_);

__attribute__((unused)) static id<JavaUtilList> NetI2pRouterPeermanagerProfilePersistenceHelper_selectFiles(NetI2pRouterPeermanagerProfilePersistenceHelper *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_migrateWithJavaIoFileArray_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, IOSObjectArray *files);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfilePersistenceHelper_isExpiredWithLong_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, jlong lastSentToSuccessfully);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NetI2pRouterPeermanagerPeerProfile *p);

__attribute__((unused)) static jfloat NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(JavaUtilProperties *props, NSString *key);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, JavaUtilProperties *props, JavaIoFile *file);

__attribute__((unused)) static NetI2pDataHash *NetI2pRouterPeermanagerProfilePersistenceHelper_getHashWithNSString_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NSString *name);

__attribute__((unused)) static JavaIoFile *NetI2pRouterPeermanagerProfilePersistenceHelper_pickFileWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NetI2pRouterPeermanagerPeerProfile *profile);

@interface NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter : NSObject < JavaIoFilenameFilter >

- (instancetype)init;

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)filename;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter)

__attribute__((unused)) static void NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *self);

__attribute__((unused)) static NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *new_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *create_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPeermanagerProfilePersistenceHelper)

NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_PROP_PEER_PROFILE_DIR = @"router.profileDir";
NSString *NetI2pRouterPeermanagerProfilePersistenceHelper_DEFAULT_PEER_PROFILE_DIR = @"peerProfiles";

@implementation NetI2pRouterPeermanagerProfilePersistenceHelper

+ (NSString *)PROP_PEER_PROFILE_DIR {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_PROP_PEER_PROFILE_DIR;
}

+ (NSString *)DEFAULT_PEER_PROFILE_DIR {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_DEFAULT_PEER_PROFILE_DIR;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)setUsWithNetI2pDataHash:(NetI2pDataHash *)routerIdentHash {
  JreStrongAssign(&_us_, routerIdentHash);
}

- (void)writeProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile {
  if (NetI2pRouterPeermanagerProfilePersistenceHelper_isExpiredWithLong_(self, [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getLastSendSuccessful])) return;
  JavaIoFile *f = NetI2pRouterPeermanagerProfilePersistenceHelper_pickFileWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
  jlong before = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  JavaIoOutputStream *fos = nil;
  @try {
    fos = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(create_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(f)));
    [self writeProfileWithNetI2pRouterPeermanagerPeerProfile:profile withJavaIoOutputStream:fos];
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@", @"Error writing profile to ", f)];
  }
  @finally {
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  jlong delay = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - before;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$J$", @"Writing the profile to ", [((JavaIoFile *) nil_chk(f)) getName], @" took ", delay, @"ms")];
}

- (void)writeProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile
                                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NSString *groups = nil;
  if ([((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) profileOrganizer])) isFailingWithNetI2pDataHash:[((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getPeer]]) {
    groups = @"Failing";
  }
  else if (![((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([_context_ profileOrganizer])) isHighCapacityWithNetI2pDataHash:[profile getPeer]]) {
    groups = @"Standard";
  }
  else {
    if ([((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([_context_ profileOrganizer])) isFastWithNetI2pDataHash:[profile getPeer]]) groups = @"Fast, High Capacity";
    else groups = @"High Capacity";
    if ([((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([_context_ profileOrganizer])) isWellIntegratedWithNetI2pDataHash:[profile getPeer]]) groups = JreStrcat("$$", groups, @", Integrated");
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"########################################################################"])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Profile for peer "])) appendWithNSString:[((NetI2pDataHash *) nil_chk([profile getPeer])) toBase64]])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  if (_us_ != nil) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# as calculated by "])) appendWithNSString:[((NetI2pDataHash *) nil_chk(_us_)) toBase64]])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"#"])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Speed: "])) appendWithFloat:[profile getSpeedValue]])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Capacity: "])) appendWithFloat:[profile getCapacityValue]])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Integration: "])) appendWithFloat:[profile getIntegrationValue]])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Groups: "])) appendWithNSString:groups])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"#"])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"########################################################################"])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"##"])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"speedBonus", [profile getSpeedBonus], @"Manual adjustment to the speed score");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"capacityBonus", [profile getCapacityBonus], @"Manual adjustment to the capacity score");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"integrationBonus", [profile getIntegrationBonus], @"Manual adjustment to the integration score");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"firstHeardAbout", [profile getFirstHeardAbout], @"When did we first get a reference to this peer?");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastHeardAbout", [profile getLastHeardAbout], @"When did we last get a reference to this peer?");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastHeardFrom", [profile getLastHeardFrom], @"When did we last get a message from the peer?");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastSentToSuccessfully", [profile getLastSendSuccessful], @"When did we last send the peer a message successfully?");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastFailedSend", [profile getLastSendFailed], @"When did we last fail to send a message to the peer?");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(buf, @"tunnelTestTimeAverage", [profile getTunnelTestTimeAverage], @"Moving average as to how fast the peer replies");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(buf, @"tunnelPeakThroughput", [profile getPeakThroughputKBps], @"KBytes/sec");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(buf, @"tunnelPeakTunnelThroughput", [profile getPeakTunnelThroughputKBps], @"KBytes/sec");
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(buf, @"tunnelPeakTunnel1mThroughput", [profile getPeakTunnel1mThroughputKBps], @"KBytes/sec");
  [buf appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:[((NSString *) nil_chk([buf description])) java_getBytesWithCharsetName:@"UTF-8"]];
  if ([profile getIsExpanded]) {
    [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([profile getTunnelHistory])) storeWithJavaIoOutputStream:outArg];
    [((NetI2pStatRateStat *) nil_chk([profile getTunnelCreateResponseTime])) storeWithJavaIoOutputStream:outArg withNSString:@"tunnelCreateResponseTime"];
    [((NetI2pStatRateStat *) nil_chk([profile getTunnelTestResponseTime])) storeWithJavaIoOutputStream:outArg withNSString:@"tunnelTestResponseTime"];
  }
  if ([profile getIsExpandedDB]) {
    [((NetI2pRouterPeermanagerDBHistory *) nil_chk([profile getDBHistory])) storeWithJavaIoOutputStream:outArg];
    [((NetI2pStatRateStat *) nil_chk([profile getDbIntroduction])) storeWithJavaIoOutputStream:outArg withNSString:@"dbIntroduction"];
    [((NetI2pStatRateStat *) nil_chk([profile getDbResponseTime])) storeWithJavaIoOutputStream:outArg withNSString:@"dbResponseTime"];
  }
}

+ (void)addDateWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)name
                                withLong:(jlong)val
                            withNSString:(NSString *)description_ {
  NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, description_);
}

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                            withLong:(jlong)val
                        withNSString:(NSString *)description_ {
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, description_);
}

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                           withFloat:(jfloat)val
                        withNSString:(NSString *)description_ {
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(buf, name, val, description_);
}

- (id<JavaUtilSet>)readProfiles {
  jlong start = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  id<JavaUtilList> files = NetI2pRouterPeermanagerProfilePersistenceHelper_selectFiles(self);
  id<JavaUtilSet> profiles = create_JavaUtilHashSet_initWithInt_([((id<JavaUtilList>) nil_chk(files)) size]);
  for (JavaIoFile * __strong f in files) {
    NetI2pRouterPeermanagerPeerProfile *profile = [self readProfileWithJavaIoFile:f];
    if (profile != nil) [profiles addWithId:profile];
  }
  jlong duration = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - start;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$J$", @"Loading ", [profiles size], @" took ", duration, @"ms")];
  return profiles;
}

- (id<JavaUtilList>)selectFiles {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_selectFiles(self);
}

- (void)migrateWithJavaIoFileArray:(IOSObjectArray *)files {
  NetI2pRouterPeermanagerProfilePersistenceHelper_migrateWithJavaIoFileArray_(self, files);
}

- (void)deleteOldProfilesWithLong:(jlong)age {
  jlong cutoff = JavaLangSystem_currentTimeMillis() - age;
  id<JavaUtilList> files = NetI2pRouterPeermanagerProfilePersistenceHelper_selectFiles(self);
  jint i = 0;
  for (JavaIoFile * __strong f in nil_chk(files)) {
    if (![((JavaIoFile *) nil_chk(f)) isFile]) continue;
    if ([f lastModified] < cutoff) {
      i++;
      [f delete__];
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$I$", @"Deleted ", i, @" old profiles")];
}

- (jboolean)isExpiredWithLong:(jlong)lastSentToSuccessfully {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_isExpiredWithLong_(self, lastSentToSuccessfully);
}

- (NetI2pRouterPeermanagerPeerProfile *)readProfileWithJavaIoFile:(JavaIoFile *)file {
  NetI2pDataHash *peer = NetI2pRouterPeermanagerProfilePersistenceHelper_getHashWithNSString_(self, [((JavaIoFile *) nil_chk(file)) getName]);
  @try {
    if (peer == nil) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$$", @"The file ", [file getName], @" is not a valid hash")];
      return nil;
    }
    NetI2pRouterPeermanagerPeerProfile *profile = create_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(_context_, peer);
    JavaUtilProperties *props = create_JavaUtilProperties_init();
    NetI2pRouterPeermanagerProfilePersistenceHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(self, props, file);
    jlong lastSentToSuccessfully = NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"lastSentToSuccessfully");
    if (NetI2pRouterPeermanagerProfilePersistenceHelper_isExpiredWithLong_(self, lastSentToSuccessfully)) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$", @"Dropping old profile ", [file getName], @", since we haven't heard from them in a long time")];
      [file delete__];
      return nil;
    }
    else if ([((NSString *) nil_chk([file getName])) java_hasSuffix:NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX]) {
      NSString *newName = [file getAbsolutePath];
      newName = JreStrcat("$$", [((NSString *) nil_chk(newName)) java_substring:0 endIndex:[newName java_length] - [((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX)) java_length]], NetI2pRouterPeermanagerProfilePersistenceHelper_SUFFIX);
      jboolean success = [file renameToWithJavaIoFile:create_JavaIoFile_initWithNSString_(newName)];
      if (!success) [file delete__];
    }
    [profile setCapacityBonusWithInt:(jint) NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"capacityBonus")];
    [profile setIntegrationBonusWithInt:(jint) NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"integrationBonus")];
    [profile setSpeedBonusWithInt:(jint) NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"speedBonus")];
    [profile setLastHeardAboutWithLong:NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"lastHeardAbout")];
    [profile setFirstHeardAboutWithLong:NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"firstHeardAbout")];
    [profile setLastSendSuccessfulWithLong:NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"lastSentToSuccessfully")];
    [profile setLastSendFailedWithLong:NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"lastFailedSend")];
    [profile setLastHeardFromWithLong:NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"lastHeardFrom")];
    [profile setTunnelTestTimeAverageWithFloat:NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(props, @"tunnelTestTimeAverage")];
    [profile setPeakThroughputKBpsWithFloat:NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(props, @"tunnelPeakThroughput")];
    [profile setPeakTunnelThroughputKBpsWithFloat:NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(props, @"tunnelPeakTunnelThroughput")];
    [profile setPeakTunnel1mThroughputKBpsWithFloat:NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(props, @"tunnelPeakTunnel1mThroughput")];
    [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([profile getTunnelHistory])) load__WithJavaUtilProperties:props];
    if (NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"dbHistory.lastLookupSuccessful") > 0 || NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"dbHistory.lastLookupFailed") > 0 || NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"dbHistory.lastStoreSuccessful") > 0 || NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, @"dbHistory.lastStoreFailed") > 0) {
      [profile expandDBProfile];
      [((NetI2pRouterPeermanagerDBHistory *) nil_chk([profile getDBHistory])) load__WithJavaUtilProperties:props];
      [((NetI2pStatRateStat *) nil_chk([profile getDbIntroduction])) load__WithJavaUtilProperties:props withNSString:@"dbIntroduction" withBoolean:true];
      [((NetI2pStatRateStat *) nil_chk([profile getDbResponseTime])) load__WithJavaUtilProperties:props withNSString:@"dbResponseTime" withBoolean:true];
    }
    [((NetI2pStatRateStat *) nil_chk([profile getTunnelCreateResponseTime])) load__WithJavaUtilProperties:props withNSString:@"tunnelCreateResponseTime" withBoolean:true];
    [((NetI2pStatRateStat *) nil_chk([profile getTunnelTestResponseTime])) load__WithJavaUtilProperties:props withNSString:@"tunnelTestResponseTime" withBoolean:true];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$$$", @"Loaded the profile for ", [peer toBase64], @" from ", [file getName])];
    NetI2pRouterPeermanagerProfilePersistenceHelper_fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
    return profile;
  }
  @catch (JavaIoIOException *e) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"Error loading properties from ", [file getAbsolutePath]) withJavaLangThrowable:e];
    [file delete__];
    return nil;
  }
}

- (void)fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)p {
  NetI2pRouterPeermanagerProfilePersistenceHelper_fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile_(self, p);
}

+ (jlong)getLongWithJavaUtilProperties:(JavaUtilProperties *)props
                          withNSString:(NSString *)key {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, key);
}

+ (jfloat)getFloatWithJavaUtilProperties:(JavaUtilProperties *)props
                            withNSString:(NSString *)key {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(props, key);
}

- (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file {
  NetI2pRouterPeermanagerProfilePersistenceHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(self, props, file);
}

- (NetI2pDataHash *)getHashWithNSString:(NSString *)name {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_getHashWithNSString_(self, name);
}

- (JavaIoFile *)pickFileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile {
  return NetI2pRouterPeermanagerProfilePersistenceHelper_pickFileWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_profileDir_);
  RELEASE_(_us_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, 6, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 21, 22, -1, -1, -1, -1 },
    { NULL, "F", 0x1a, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, 6, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 28, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(setUsWithNetI2pDataHash:);
  methods[2].selector = @selector(writeProfileWithNetI2pRouterPeermanagerPeerProfile:);
  methods[3].selector = @selector(writeProfileWithNetI2pRouterPeermanagerPeerProfile:withJavaIoOutputStream:);
  methods[4].selector = @selector(addDateWithJavaLangStringBuilder:withNSString:withLong:withNSString:);
  methods[5].selector = @selector(addWithJavaLangStringBuilder:withNSString:withLong:withNSString:);
  methods[6].selector = @selector(addWithJavaLangStringBuilder:withNSString:withFloat:withNSString:);
  methods[7].selector = @selector(readProfiles);
  methods[8].selector = @selector(selectFiles);
  methods[9].selector = @selector(migrateWithJavaIoFileArray:);
  methods[10].selector = @selector(deleteOldProfilesWithLong:);
  methods[11].selector = @selector(isExpiredWithLong:);
  methods[12].selector = @selector(readProfileWithJavaIoFile:);
  methods[13].selector = @selector(fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile:);
  methods[14].selector = @selector(getLongWithJavaUtilProperties:withNSString:);
  methods[15].selector = @selector(getFloatWithJavaUtilProperties:withNSString:);
  methods[16].selector = @selector(loadPropsWithJavaUtilProperties:withJavaIoFile:);
  methods[17].selector = @selector(getHashWithNSString:);
  methods[18].selector = @selector(pickFileWithNetI2pRouterPeermanagerPeerProfile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_PEER_PROFILE_DIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "DEFAULT_PEER_PROFILE_DIR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "NL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "UNCOMPRESSED_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "OLD_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "MIN_NAME_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "DIR_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "B64", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "EXPIRE_AGE", "J", .constantValue.asLong = NetI2pRouterPeermanagerProfilePersistenceHelper_EXPIRE_AGE, 0x1a, -1, -1, -1, -1 },
    { "_profileDir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_us_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setUs", "LNetI2pDataHash;", "writeProfile", "LNetI2pRouterPeermanagerPeerProfile;", "LNetI2pRouterPeermanagerPeerProfile;LJavaIoOutputStream;", "LJavaIoIOException;", "addDate", "LJavaLangStringBuilder;LNSString;JLNSString;", "add", "LJavaLangStringBuilder;LNSString;FLNSString;", "()Ljava/util/Set<Lnet/i2p/router/peermanager/PeerProfile;>;", "()Ljava/util/List<Ljava/io/File;>;", "migrate", "[LJavaIoFile;", "deleteOldProfiles", "J", "isExpired", "readProfile", "LJavaIoFile;", "fixupFirstHeardAbout", "getLong", "LJavaUtilProperties;LNSString;", "getFloat", "loadProps", "LJavaUtilProperties;LJavaIoFile;", "getHash", "LNSString;", "pickFile", &NetI2pRouterPeermanagerProfilePersistenceHelper_PROP_PEER_PROFILE_DIR, &NetI2pRouterPeermanagerProfilePersistenceHelper_DEFAULT_PEER_PROFILE_DIR, &NetI2pRouterPeermanagerProfilePersistenceHelper_NL, &NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX, &NetI2pRouterPeermanagerProfilePersistenceHelper_SUFFIX, &NetI2pRouterPeermanagerProfilePersistenceHelper_UNCOMPRESSED_SUFFIX, &NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX, &NetI2pRouterPeermanagerProfilePersistenceHelper_MIN_NAME_LENGTH, &NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX, &NetI2pRouterPeermanagerProfilePersistenceHelper_B64, "LNetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerProfilePersistenceHelper = { "ProfilePersistenceHelper", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x0, 19, 15, -1, 39, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerProfilePersistenceHelper;
}

+ (void)initialize {
  if (self == [NetI2pRouterPeermanagerProfilePersistenceHelper class]) {
    JreStrongAssign(&NetI2pRouterPeermanagerProfilePersistenceHelper_NL, JavaLangSystem_getPropertyWithNSString_(@"line.separator"));
    NetI2pRouterPeermanagerProfilePersistenceHelper_MIN_NAME_LENGTH = [((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX)) java_length] + 44 + [((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX)) java_length];
    J2OBJC_SET_INITIALIZED(NetI2pRouterPeermanagerProfilePersistenceHelper)
  }
}

@end

void NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NetI2pRouterRouterContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerProfilePersistenceHelper_class_()]);
  NSString *dir = [((NetI2pRouterRouterContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_PROP_PEER_PROFILE_DIR withNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_DEFAULT_PEER_PROFILE_DIR];
  JreStrongAssignAndConsume(&self->_profileDir_, new_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_([self->_context_ getRouterDir], dir));
  if (![self->_profileDir_ exists]) [self->_profileDir_ mkdirs];
  for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_B64)) java_length]; j++) {
    JavaIoFile *subdir = create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(self->_profileDir_, JreStrcat("$C", NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX, [NetI2pRouterPeermanagerProfilePersistenceHelper_B64 charAtWithInt:j]));
    if (![subdir exists]) [subdir mkdir];
  }
}

NetI2pRouterPeermanagerProfilePersistenceHelper *new_NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerProfilePersistenceHelper, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterPeermanagerProfilePersistenceHelper *create_NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerProfilePersistenceHelper, initWithNetI2pRouterRouterContext_, ctx)
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_) {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initialize();
  NSString *when = val > 0 ? [(create_JavaUtilDate_initWithLong_(val)) description] : @"Never";
  NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, JreStrcat("$C$", description_, ' ', when));
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_) {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"# "])) appendWithNSString:name])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL])) appendWithNSString:@"# "])) appendWithNSString:description_])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:name])) appendWithChar:'='])) appendWithLong:val])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_addWithJavaLangStringBuilder_withNSString_withFloat_withNSString_(JavaLangStringBuilder *buf, NSString *name, jfloat val, NSString *description_) {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"# "])) appendWithNSString:name])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL])) appendWithNSString:@"# "])) appendWithNSString:description_])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:name])) appendWithChar:'='])) appendWithFloat:val])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL])) appendWithNSString:NetI2pRouterPeermanagerProfilePersistenceHelper_NL];
}

id<JavaUtilList> NetI2pRouterPeermanagerProfilePersistenceHelper_selectFiles(NetI2pRouterPeermanagerProfilePersistenceHelper *self) {
  id<JavaIoFilenameFilter> filter = create_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init();
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(self->_profileDir_)) listFilesWithJavaIoFilenameFilter:filter];
  if (files != nil && files->size_ > 0) NetI2pRouterPeermanagerProfilePersistenceHelper_migrateWithJavaIoFileArray_(self, files);
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(1024);
  for (jint j = 0; j < [((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_B64)) java_length]; j++) {
    JavaIoFile *subdir = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->_profileDir_, JreStrcat("$C", NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX, [NetI2pRouterPeermanagerProfilePersistenceHelper_B64 charAtWithInt:j]));
    files = [subdir listFilesWithJavaIoFilenameFilter:filter];
    if (files == nil) continue;
    for (jint i = 0; i < files->size_; i++) [rv addWithId:IOSObjectArray_Get(files, i)];
  }
  return rv;
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_migrateWithJavaIoFileArray_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, IOSObjectArray *files) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    JavaIoFile *from = IOSObjectArray_Get(files, i);
    if (![((JavaIoFile *) nil_chk(from)) isFile]) continue;
    JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->_profileDir_, JreStrcat("$C", NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX, [((NSString *) nil_chk([from getName])) charAtWithInt:[((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX)) java_length]]));
    JavaIoFile *to = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, [from getName]);
    NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(from, to);
  }
}

jboolean NetI2pRouterPeermanagerProfilePersistenceHelper_isExpiredWithLong_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, jlong lastSentToSuccessfully) {
  jlong timeSince = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now] - lastSentToSuccessfully;
  return (timeSince > NetI2pRouterPeermanagerProfilePersistenceHelper_EXPIRE_AGE);
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_fixupFirstHeardAboutWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NetI2pRouterPeermanagerPeerProfile *p) {
  jlong min = JavaLangLong_MAX_VALUE;
  jlong t = [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(p)) getLastHeardAbout];
  if (t > 0 && t < min) min = t;
  t = [p getLastSendSuccessful];
  if (t > 0 && t < min) min = t;
  t = [p getLastSendFailed];
  if (t > 0 && t < min) min = t;
  t = [p getLastHeardFrom];
  if (t > 0 && t < min) min = t;
  NetI2pRouterPeermanagerTunnelHistory *th = [p getTunnelHistory];
  if (th != nil) {
    t = [th getLastAgreedTo];
    if (t > 0 && t < min) min = t;
    t = [th getLastRejectedCritical];
    if (t > 0 && t < min) min = t;
    t = [th getLastRejectedBandwidth];
    if (t > 0 && t < min) min = t;
    t = [th getLastRejectedTransient];
    if (t > 0 && t < min) min = t;
    t = [th getLastRejectedProbabalistic];
    if (t > 0 && t < min) min = t;
    t = [th getLastFailed];
    if (t > 0 && t < min) min = t;
  }
  jlong fha = [p getFirstHeardAbout];
  if (min > 0 && min < JavaLangLong_MAX_VALUE && (fha <= 0 || min < fha)) {
    [p setFirstHeardAboutWithLong:min];
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$$$@", @"Fixed up the FHA time for ", [((NetI2pDataHash *) nil_chk([p getPeer])) toBase64], @" to ", (create_JavaUtilDate_initWithLong_(min)))];
  }
}

jlong NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(JavaUtilProperties *props, NSString *key) {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initialize();
  NSString *val = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:key];
  if (val != nil) {
    @try {
      return JavaLangLong_parseLongWithNSString_(val);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return 0;
}

jfloat NetI2pRouterPeermanagerProfilePersistenceHelper_getFloatWithJavaUtilProperties_withNSString_(JavaUtilProperties *props, NSString *key) {
  NetI2pRouterPeermanagerProfilePersistenceHelper_initialize();
  NSString *val = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:key];
  if (val != nil) {
    @try {
      return JavaLangFloat_parseFloatWithNSString_(val);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return 0.0f;
}

void NetI2pRouterPeermanagerProfilePersistenceHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, JavaUtilProperties *props, JavaIoFile *file) {
  JavaIoInputStream *fin = nil;
  @try {
    fin = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_withInt_(create_JavaIoFileInputStream_initWithJavaIoFile_(file), 1);
    [fin markWithInt:1];
    jint c = [fin read];
    [fin reset];
    if (c == '#') {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$", @"Loading uncompressed profile data from ", [((JavaIoFile *) nil_chk(file)) getName])];
      NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_(props, fin);
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$", @"Loading compressed profile data from ", [((JavaIoFile *) nil_chk(file)) getName])];
      NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_(props, create_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(fin));
    }
  }
  @finally {
    @try {
      if (fin != nil) [fin close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

NetI2pDataHash *NetI2pRouterPeermanagerProfilePersistenceHelper_getHashWithNSString_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NSString *name) {
  NSString *key = [((NSString *) nil_chk(name)) java_substring:[((NSString *) nil_chk(NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX)) java_length]];
  key = [((NSString *) nil_chk(key)) java_substring:0 endIndex:44];
  @try {
    IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_(key);
    if (b == nil) return nil;
    NetI2pDataHash *h = NetI2pDataHash_createWithByteArray_(b);
    return h;
  }
  @catch (JavaLangRuntimeException *dfe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$$C", @"Invalid base64 [", key, ']') withJavaLangThrowable:dfe];
    return nil;
  }
}

JavaIoFile *NetI2pRouterPeermanagerProfilePersistenceHelper_pickFileWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfilePersistenceHelper *self, NetI2pRouterPeermanagerPeerProfile *profile) {
  NSString *hash_ = [((NetI2pDataHash *) nil_chk([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getPeer])) toBase64];
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->_profileDir_, JreStrcat("$C", NetI2pRouterPeermanagerProfilePersistenceHelper_DIR_PREFIX, [((NSString *) nil_chk(hash_)) charAtWithInt:0]));
  return create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, JreStrcat("$$$", NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX, hash_, NetI2pRouterPeermanagerProfilePersistenceHelper_SUFFIX));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerProfilePersistenceHelper)

@implementation NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)filename {
  return ([((NSString *) nil_chk(filename)) java_hasPrefix:NetI2pRouterPeermanagerProfilePersistenceHelper_PREFIX] && [filename java_length] >= JreLoadStatic(NetI2pRouterPeermanagerProfilePersistenceHelper, MIN_NAME_LENGTH) && ([filename java_hasSuffix:NetI2pRouterPeermanagerProfilePersistenceHelper_SUFFIX] || [filename java_hasSuffix:NetI2pRouterPeermanagerProfilePersistenceHelper_OLD_SUFFIX] || [filename java_hasSuffix:NetI2pRouterPeermanagerProfilePersistenceHelper_UNCOMPRESSED_SUFFIX]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithJavaIoFile:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "LJavaIoFile;LNSString;", "LNetI2pRouterPeermanagerProfilePersistenceHelper;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter = { "ProfileFilter", "net.i2p.router.peermanager", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter;
}

@end

void NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *self) {
  NSObject_init(self);
}

NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *new_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter, init)
}

NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter *create_NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerProfilePersistenceHelper_ProfileFilter)
