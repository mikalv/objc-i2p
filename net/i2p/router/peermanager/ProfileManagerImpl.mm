//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/ProfileManagerImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Properties.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/DBHistory.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileManagerImpl.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterPeermanagerProfileManagerImpl () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
}

- (NetI2pRouterPeermanagerPeerProfile *)getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (NetI2pRouterPeermanagerPeerProfile *)getProfileNonblockingWithNetI2pDataHash:(NetI2pDataHash *)peer;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileManagerImpl, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileManagerImpl, _context_, NetI2pRouterRouterContext *)

__attribute__((unused)) static NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileManagerImpl *self, NetI2pDataHash *peer);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileManagerImpl *self, NetI2pDataHash *peer);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterPeermanagerProfileManagerImpl__Annotations$0(void);

@implementation NetI2pRouterPeermanagerProfileManagerImpl

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterPeermanagerProfileManagerImpl_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)messageSentWithNetI2pDataHash:(NetI2pDataHash *)peer
                         withNSString:(NSString *)transport
                             withLong:(jlong)msToSend
                             withLong:(jlong)bytesSent {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(self, peer);
  if (data == nil) return;
  [data setLastSendSuccessfulWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (void)messageFailedWithNetI2pDataHash:(NetI2pDataHash *)peer
                           withNSString:(NSString *)transport {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(self, peer);
  if (data == nil) return;
  [data setLastSendFailedWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (void)messageFailedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(self, peer);
  if (data == nil) return;
  [data setLastSendFailedWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (void)commErrorOccurredWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Comm error occurred for peer ", [((NetI2pDataHash *) nil_chk(peer)) toBase64]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"Comm error")];
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastSendFailedWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (void)tunnelJoinedWithNetI2pDataHash:(NetI2pDataHash *)peer
                              withLong:(jlong)responseTimeMs {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pStatRateStat *) nil_chk([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) getTunnelCreateResponseTime])) addDataWithLong:responseTimeMs withLong:responseTimeMs];
  [data setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([data getTunnelHistory])) incrementAgreedTo];
}

- (void)tunnelRejectedWithNetI2pDataHash:(NetI2pDataHash *)peer
                                withLong:(jlong)responseTimeMs
                                 withInt:(jint)severity {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([data getTunnelHistory])) incrementRejectedWithInt:severity];
}

- (void)tunnelTimedOutWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) getTunnelHistory])) incrementRejectedWithInt:NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH];
}

- (void)tunnelTestSucceededWithNetI2pDataHash:(NetI2pDataHash *)peer
                                     withLong:(jlong)responseTimeMs {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) updateTunnelTestTimeAverageWithLong:responseTimeMs];
  [((NetI2pStatRateStat *) nil_chk([data getTunnelTestResponseTime])) addDataWithLong:responseTimeMs withLong:responseTimeMs];
}

- (void)tunnelDataPushedWithNetI2pDataHash:(NetI2pDataHash *)peer
                                  withLong:(jlong)rtt
                                   withInt:(jint)size {
  if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash])) isEqual:peer]) return;
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) dataPushedWithInt:size];
}

- (void)tunnelDataPushed1mWithNetI2pDataHash:(NetI2pDataHash *)peer
                                     withInt:(jint)size {
  if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash])) isEqual:peer]) return;
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) dataPushed1mWithInt:size];
}

- (void)tunnelLifetimePushedWithNetI2pDataHash:(NetI2pDataHash *)peer
                                      withLong:(jlong)lifetime
                                      withLong:(jlong)size {
  if ([((NetI2pDataHash *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) routerHash])) isEqual:peer]) return;
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) tunnelDataTransferredWithLong:size];
}

- (void)tunnelFailedWithNetI2pDataHash:(NetI2pDataHash *)peer
                               withInt:(jint)pct {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([data getTunnelHistory])) incrementFailedWithInt:pct];
}

- (void)dbLookupSuccessfulWithNetI2pDataHash:(NetI2pDataHash *)peer
                                    withLong:(jlong)responseTimeMs {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  if (![data getIsExpandedDB]) [data expandDBProfile];
  [((NetI2pStatRateStat *) nil_chk([data getDbResponseTime])) addDataWithLong:responseTimeMs withLong:responseTimeMs];
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) lookupSuccessful];
}

- (void)dbLookupFailedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  if (![((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) getIsExpandedDB]) [data expandDBProfile];
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) lookupFailed];
}

- (void)dbLookupReplyWithNetI2pDataHash:(NetI2pDataHash *)peer
                                withInt:(jint)newPeers
                                withInt:(jint)oldPeers
                                withInt:(jint)invalid
                                withInt:(jint)duplicate
                               withLong:(jlong)responseTimeMs {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  if (![data getIsExpandedDB]) return;
  [((NetI2pStatRateStat *) nil_chk([data getDbResponseTime])) addDataWithLong:responseTimeMs withLong:responseTimeMs];
  [((NetI2pStatRateStat *) nil_chk([data getDbIntroduction])) addDataWithLong:newPeers withLong:responseTimeMs];
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) lookupReplyWithInt:newPeers withInt:oldPeers withInt:invalid withInt:duplicate];
}

- (void)dbLookupReceivedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  if (![data getIsExpandedDB]) return;
}

- (void)dbStoreReceivedWithNetI2pDataHash:(NetI2pDataHash *)peer
                              withBoolean:(jboolean)wasNewKey {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
  if (![data getIsExpandedDB]) return;
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) unpromptedStoreReceivedWithBoolean:wasNewKey];
}

- (void)dbStoreSentWithNetI2pDataHash:(NetI2pDataHash *)peer
                             withLong:(jlong)responseTimeMs {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:now];
  [data setLastSendSuccessfulWithLong:now];
}

- (void)dbStoreSuccessfulWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now];
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardFromWithLong:now];
  [data setLastSendSuccessfulWithLong:now];
  if (![data getIsExpandedDB]) [data expandDBProfile];
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) storeSuccessful];
}

- (void)dbStoreFailedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  if (![((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) getIsExpandedDB]) [data expandDBProfile];
  NetI2pRouterPeermanagerDBHistory *hist = [data getDBHistory];
  [((NetI2pRouterPeermanagerDBHistory *) nil_chk(hist)) storeFailed];
}

- (void)heardAboutWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardAboutWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (void)heardAboutWithNetI2pDataHash:(NetI2pDataHash *)peer
                            withLong:(jlong)when {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
  [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(data)) setLastHeardAboutWithLong:when];
}

- (void)messageReceivedWithNetI2pDataHash:(NetI2pDataHash *)peer
                             withNSString:(NSString *)style
                                 withLong:(jlong)msToReceive
                                  withInt:(jint)bytesRead {
  NetI2pRouterPeermanagerPeerProfile *data = NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(self, peer);
  if (data == nil) return;
  [data setLastHeardFromWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]];
}

- (NetI2pRouterPeermanagerPeerProfile *)getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(self, peer);
}

- (NetI2pRouterPeermanagerPeerProfile *)getProfileNonblockingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(self, peer);
}

- (JavaUtilProperties *)summarizePeersWithInt:(jint)numPeers {
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  return props;
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x2, 32, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x2, 33, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, 34, 35, -1, -1, 36, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(messageSentWithNetI2pDataHash:withNSString:withLong:withLong:);
  methods[2].selector = @selector(messageFailedWithNetI2pDataHash:withNSString:);
  methods[3].selector = @selector(messageFailedWithNetI2pDataHash:);
  methods[4].selector = @selector(commErrorOccurredWithNetI2pDataHash:);
  methods[5].selector = @selector(tunnelJoinedWithNetI2pDataHash:withLong:);
  methods[6].selector = @selector(tunnelRejectedWithNetI2pDataHash:withLong:withInt:);
  methods[7].selector = @selector(tunnelTimedOutWithNetI2pDataHash:);
  methods[8].selector = @selector(tunnelTestSucceededWithNetI2pDataHash:withLong:);
  methods[9].selector = @selector(tunnelDataPushedWithNetI2pDataHash:withLong:withInt:);
  methods[10].selector = @selector(tunnelDataPushed1mWithNetI2pDataHash:withInt:);
  methods[11].selector = @selector(tunnelLifetimePushedWithNetI2pDataHash:withLong:withLong:);
  methods[12].selector = @selector(tunnelFailedWithNetI2pDataHash:withInt:);
  methods[13].selector = @selector(dbLookupSuccessfulWithNetI2pDataHash:withLong:);
  methods[14].selector = @selector(dbLookupFailedWithNetI2pDataHash:);
  methods[15].selector = @selector(dbLookupReplyWithNetI2pDataHash:withInt:withInt:withInt:withInt:withLong:);
  methods[16].selector = @selector(dbLookupReceivedWithNetI2pDataHash:);
  methods[17].selector = @selector(dbStoreReceivedWithNetI2pDataHash:withBoolean:);
  methods[18].selector = @selector(dbStoreSentWithNetI2pDataHash:withLong:);
  methods[19].selector = @selector(dbStoreSuccessfulWithNetI2pDataHash:);
  methods[20].selector = @selector(dbStoreFailedWithNetI2pDataHash:);
  methods[21].selector = @selector(heardAboutWithNetI2pDataHash:);
  methods[22].selector = @selector(heardAboutWithNetI2pDataHash:withLong:);
  methods[23].selector = @selector(messageReceivedWithNetI2pDataHash:withNSString:withLong:withInt:);
  methods[24].selector = @selector(getProfileWithNetI2pDataHash:);
  methods[25].selector = @selector(getProfileNonblockingWithNetI2pDataHash:);
  methods[26].selector = @selector(summarizePeersWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "messageSent", "LNetI2pDataHash;LNSString;JJ", "messageFailed", "LNetI2pDataHash;LNSString;", "LNetI2pDataHash;", "commErrorOccurred", "tunnelJoined", "LNetI2pDataHash;J", "tunnelRejected", "LNetI2pDataHash;JI", "tunnelTimedOut", "tunnelTestSucceeded", "tunnelDataPushed", "tunnelDataPushed1m", "LNetI2pDataHash;I", "tunnelLifetimePushed", "LNetI2pDataHash;JJ", "tunnelFailed", "dbLookupSuccessful", "dbLookupFailed", "dbLookupReply", "LNetI2pDataHash;IIIIJ", "dbLookupReceived", "dbStoreReceived", "LNetI2pDataHash;Z", "dbStoreSent", "dbStoreSuccessful", "dbStoreFailed", "heardAbout", "messageReceived", "LNetI2pDataHash;LNSString;JI", "getProfile", "getProfileNonblocking", "summarizePeers", "I", (void *)&NetI2pRouterPeermanagerProfileManagerImpl__Annotations$0 };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerProfileManagerImpl = { "ProfileManagerImpl", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x1, 27, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerProfileManagerImpl;
}

@end

void NetI2pRouterPeermanagerProfileManagerImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerProfileManagerImpl *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerProfileManagerImpl_class_()]);
}

NetI2pRouterPeermanagerProfileManagerImpl *new_NetI2pRouterPeermanagerProfileManagerImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerProfileManagerImpl, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterPeermanagerProfileManagerImpl *create_NetI2pRouterPeermanagerProfileManagerImpl_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerProfileManagerImpl, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileManagerImpl_getProfileWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileManagerImpl *self, NetI2pDataHash *peer) {
  NetI2pRouterPeermanagerPeerProfile *prof = [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) profileOrganizer])) getProfileWithNetI2pDataHash:peer];
  if (prof == nil) {
    prof = create_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(self->_context_, peer);
    [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([self->_context_ profileOrganizer])) addProfileWithNetI2pRouterPeermanagerPeerProfile:prof];
  }
  return prof;
}

NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileManagerImpl_getProfileNonblockingWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileManagerImpl *self, NetI2pDataHash *peer) {
  return [((NetI2pRouterPeermanagerProfileOrganizer *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) profileOrganizer])) getProfileNonblockingWithNetI2pDataHash:peer];
}

IOSObjectArray *NetI2pRouterPeermanagerProfileManagerImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerProfileManagerImpl)
