//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/PeerTestJob.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/JobTiming.h"
#include "net/i2p/router/MessageSelector.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/OutNetMessage.h"
#include "net/i2p/router/PeerSelectionCriteria.h"
#include "net/i2p/router/ProfileManager.h"
#include "net/i2p/router/ReplyJob.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/TunnelInfo.h"
#include "net/i2p/router/TunnelManagerFacade.h"
#include "net/i2p/router/peermanager/PeerManager.h"
#include "net/i2p/router/peermanager/PeerTestJob.h"
#include "net/i2p/router/transport/OutboundMessageRegistry.h"
#include "net/i2p/router/tunnel/TunnelDispatcher.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterPeermanagerPeerTestJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterPeermanagerPeerManager *_manager_;
  jboolean _keepTesting_;
}

- (jlong)getPeerTestDelay;

- (jint)getTestTimeout;

- (jint)getTestConcurrency;

- (id<JavaUtilSet>)selectPeersToTest;

- (void)testPeerWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer;

- (id<NetI2pRouterTunnelInfo>)getOutboundTunnelId;

- (id<NetI2pRouterTunnelInfo>)getInboundTunnelId;

- (NetI2pDataI2npDatabaseStoreMessage *)buildMessageWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel
                                                                withNetI2pDataHash:(NetI2pDataHash *)replyGateway
                                                                          withLong:(jlong)nonce
                                                                          withLong:(jlong)expiration;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob, _manager_, NetI2pRouterPeermanagerPeerManager *)

inline jlong NetI2pRouterPeermanagerPeerTestJob_get_DEFAULT_PEER_TEST_DELAY(void);
#define NetI2pRouterPeermanagerPeerTestJob_DEFAULT_PEER_TEST_DELAY 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerTestJob, DEFAULT_PEER_TEST_DELAY, jlong)

__attribute__((unused)) static jlong NetI2pRouterPeermanagerPeerTestJob_getPeerTestDelay(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static jint NetI2pRouterPeermanagerPeerTestJob_getTestTimeout(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static jint NetI2pRouterPeermanagerPeerTestJob_getTestConcurrency(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static id<JavaUtilSet> NetI2pRouterPeermanagerPeerTestJob_selectPeersToTest(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerTestJob_testPeerWithNetI2pDataRouterRouterInfo_(NetI2pRouterPeermanagerPeerTestJob *self, NetI2pDataRouterRouterInfo *peer);

__attribute__((unused)) static id<NetI2pRouterTunnelInfo> NetI2pRouterPeermanagerPeerTestJob_getOutboundTunnelId(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static id<NetI2pRouterTunnelInfo> NetI2pRouterPeermanagerPeerTestJob_getInboundTunnelId(NetI2pRouterPeermanagerPeerTestJob *self);

__attribute__((unused)) static NetI2pDataI2npDatabaseStoreMessage *NetI2pRouterPeermanagerPeerTestJob_buildMessageWithNetI2pDataRouterRouterInfo_withNetI2pDataTunnelId_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *self, NetI2pDataRouterRouterInfo *peer, NetI2pDataTunnelId *replyTunnel, NetI2pDataHash *replyGateway, jlong nonce, jlong expiration);

@interface NetI2pRouterPeermanagerPeerTestJob_ReplySelector : NSObject < NetI2pRouterMessageSelector > {
 @public
  NetI2pRouterPeermanagerPeerTestJob *this$0_;
  jlong _expiration_;
  jlong _nonce_;
  NetI2pDataHash *_peer_;
  jboolean _matchFound_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                                        withNetI2pDataHash:(NetI2pDataHash *)peer
                                                  withLong:(jlong)nonce
                                                  withLong:(jlong)expiration;

- (jboolean)continueMatching;

- (jlong)getExpiration;

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

- (jboolean)matchFound;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerTestJob_ReplySelector)

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_ReplySelector, _peer_, NetI2pDataHash *)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob_ReplySelector *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_ReplySelector *new_NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_ReplySelector *create_NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerTestJob_ReplySelector)

@interface NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob : NetI2pRouterJobImpl < NetI2pRouterReplyJob > {
 @public
  NetI2pRouterPeermanagerPeerTestJob *this$0_;
  NetI2pDataRouterRouterInfo *_peer_;
  jlong _testBegin_;
  id<NetI2pRouterTunnelInfo> _replyTunnel_;
  id<NetI2pRouterTunnelInfo> _sendTunnel_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                            withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnel
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendTunnel;

- (NSString *)getName;

- (void)runJob;

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob)

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob, _peer_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob, _replyTunnel_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob, _sendTunnel_, id<NetI2pRouterTunnelInfo>)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *new_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob)

@interface NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob : NetI2pRouterJobImpl {
 @public
  NetI2pRouterPeermanagerPeerTestJob *this$0_;
  NetI2pDataRouterRouterInfo *_peer_;
  id<NetI2pRouterTunnelInfo> _replyTunnel_;
  id<NetI2pRouterTunnelInfo> _sendTunnel_;
  NetI2pRouterPeermanagerPeerTestJob_ReplySelector *_selector_;
}

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                            withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnel
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendTunnel
      withNetI2pRouterPeermanagerPeerTestJob_ReplySelector:(NetI2pRouterPeermanagerPeerTestJob_ReplySelector *)sel;

- (NSString *)getName;

- (jboolean)getShouldFailPeer;

- (void)runJob;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob)

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, _peer_, NetI2pDataRouterRouterInfo *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, _replyTunnel_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, _sendTunnel_, id<NetI2pRouterTunnelInfo>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, _selector_, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *new_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_getShouldFailPeer(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob)

@implementation NetI2pRouterPeermanagerPeerTestJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterPeermanagerPeerTestJob_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (jlong)getPeerTestDelay {
  return NetI2pRouterPeermanagerPeerTestJob_getPeerTestDelay(self);
}

- (jint)getTestTimeout {
  return NetI2pRouterPeermanagerPeerTestJob_getTestTimeout(self);
}

- (jint)getTestConcurrency {
  return NetI2pRouterPeermanagerPeerTestJob_getTestConcurrency(self);
}

- (void)startTestingWithNetI2pRouterPeermanagerPeerManager:(NetI2pRouterPeermanagerPeerManager *)manager {
  @synchronized(self) {
    JreStrongAssign(&_manager_, manager);
    _keepTesting_ = true;
    [((NetI2pRouterJobTiming *) nil_chk([self getTiming])) setStartAfterWithLong:[((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + NetI2pRouterPeermanagerPeerTestJob_DEFAULT_PEER_TEST_DELAY];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Start testing peers"];
  }
}

- (void)stopTesting {
  @synchronized(self) {
    _keepTesting_ = false;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Stop testing peers"];
  }
}

- (NSString *)getName {
  return @"Peer test start";
}

- (void)runJob {
  if (!_keepTesting_) return;
  id<JavaUtilSet> peers = NetI2pRouterPeermanagerPeerTestJob_selectPeersToTest(self);
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$", @"Testing ", [((id<JavaUtilSet>) nil_chk(peers)) size], @" peers")];
  for (NetI2pDataRouterRouterInfo * __strong peer in nil_chk(peers)) {
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Testing peer ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash])) toBase64])];
    NetI2pRouterPeermanagerPeerTestJob_testPeerWithNetI2pDataRouterRouterInfo_(self, peer);
  }
  [self requeueWithLong:NetI2pRouterPeermanagerPeerTestJob_getPeerTestDelay(self)];
}

- (id<JavaUtilSet>)selectPeersToTest {
  return NetI2pRouterPeermanagerPeerTestJob_selectPeersToTest(self);
}

- (void)testPeerWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer {
  NetI2pRouterPeermanagerPeerTestJob_testPeerWithNetI2pDataRouterRouterInfo_(self, peer);
}

- (id<NetI2pRouterTunnelInfo>)getOutboundTunnelId {
  return NetI2pRouterPeermanagerPeerTestJob_getOutboundTunnelId(self);
}

- (id<NetI2pRouterTunnelInfo>)getInboundTunnelId {
  return NetI2pRouterPeermanagerPeerTestJob_getInboundTunnelId(self);
}

- (NetI2pDataI2npDatabaseStoreMessage *)buildMessageWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                                            withNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel
                                                                withNetI2pDataHash:(NetI2pDataHash *)replyGateway
                                                                          withLong:(jlong)nonce
                                                                          withLong:(jlong)expiration {
  return NetI2pRouterPeermanagerPeerTestJob_buildMessageWithNetI2pDataRouterRouterInfo_withNetI2pDataTunnelId_withNetI2pDataHash_withLong_withLong_(self, peer, replyTunnel, replyGateway, nonce, expiration);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_manager_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelInfo;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDatabaseStoreMessage;", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getPeerTestDelay);
  methods[2].selector = @selector(getTestTimeout);
  methods[3].selector = @selector(getTestConcurrency);
  methods[4].selector = @selector(startTestingWithNetI2pRouterPeermanagerPeerManager:);
  methods[5].selector = @selector(stopTesting);
  methods[6].selector = @selector(getName);
  methods[7].selector = @selector(runJob);
  methods[8].selector = @selector(selectPeersToTest);
  methods[9].selector = @selector(testPeerWithNetI2pDataRouterRouterInfo:);
  methods[10].selector = @selector(getOutboundTunnelId);
  methods[11].selector = @selector(getInboundTunnelId);
  methods[12].selector = @selector(buildMessageWithNetI2pDataRouterRouterInfo:withNetI2pDataTunnelId:withNetI2pDataHash:withLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pRouterPeermanagerPeerManager;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keepTesting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_PEER_TEST_DELAY", "J", .constantValue.asLong = NetI2pRouterPeermanagerPeerTestJob_DEFAULT_PEER_TEST_DELAY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "startTesting", "LNetI2pRouterPeermanagerPeerManager;", "()Ljava/util/Set<Lnet/i2p/data/router/RouterInfo;>;", "testPeer", "LNetI2pDataRouterRouterInfo;", "buildMessage", "LNetI2pDataRouterRouterInfo;LNetI2pDataTunnelId;LNetI2pDataHash;JJ", "LNetI2pRouterPeermanagerPeerTestJob_ReplySelector;LNetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob;LNetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerTestJob = { "PeerTestJob", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, 8, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerTestJob;
}

@end

void NetI2pRouterPeermanagerPeerTestJob_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerPeerTestJob *self, NetI2pRouterRouterContext *context) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerPeerTestJob_class_()]);
  self->_keepTesting_ = false;
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"peer.testOK" withNSString:@"How long a successful test takes" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"peer.testTooSlow" withNSString:@"How long a too-slow (yet successful) test takes" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) createRateStatWithNSString:@"peer.testTimeout" withNSString:@"How often a test times out without a reply" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 1000, 10 * 60 * 1000 } count:2]];
}

NetI2pRouterPeermanagerPeerTestJob *new_NetI2pRouterPeermanagerPeerTestJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerTestJob, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterPeermanagerPeerTestJob *create_NetI2pRouterPeermanagerPeerTestJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerTestJob, initWithNetI2pRouterRouterContext_, context)
}

jlong NetI2pRouterPeermanagerPeerTestJob_getPeerTestDelay(NetI2pRouterPeermanagerPeerTestJob *self) {
  return NetI2pRouterPeermanagerPeerTestJob_DEFAULT_PEER_TEST_DELAY;
}

jint NetI2pRouterPeermanagerPeerTestJob_getTestTimeout(NetI2pRouterPeermanagerPeerTestJob *self) {
  return 30 * 1000;
}

jint NetI2pRouterPeermanagerPeerTestJob_getTestConcurrency(NetI2pRouterPeermanagerPeerTestJob *self) {
  return 1;
}

id<JavaUtilSet> NetI2pRouterPeermanagerPeerTestJob_selectPeersToTest(NetI2pRouterPeermanagerPeerTestJob *self) {
  NetI2pRouterPeerSelectionCriteria *criteria = create_NetI2pRouterPeerSelectionCriteria_init();
  [criteria setMinimumRequiredWithInt:NetI2pRouterPeermanagerPeerTestJob_getTestConcurrency(self)];
  [criteria setMaximumRequiredWithInt:NetI2pRouterPeermanagerPeerTestJob_getTestConcurrency(self)];
  [criteria setPurposeWithInt:NetI2pRouterPeerSelectionCriteria_PURPOSE_TEST];
  id<JavaUtilList> peerHashes = [((NetI2pRouterPeermanagerPeerManager *) nil_chk(self->_manager_)) selectPeersWithNetI2pRouterPeerSelectionCriteria:criteria];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$", @"Peer selection found ", [((id<JavaUtilList>) nil_chk(peerHashes)) size], @" peers")];
  id<JavaUtilSet> peers = create_JavaUtilHashSet_initWithInt_([((id<JavaUtilList>) nil_chk(peerHashes)) size]);
  for (NetI2pDataHash * __strong peer in peerHashes) {
    NetI2pDataRouterRouterInfo *peerInfo = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
    if (peerInfo != nil) {
      [peers addWithId:peerInfo];
    }
    else {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$$", @"Test peer ", [((NetI2pDataHash *) nil_chk(peer)) toBase64], @" had no local routerInfo?")];
    }
  }
  return peers;
}

void NetI2pRouterPeermanagerPeerTestJob_testPeerWithNetI2pDataRouterRouterInfo_(NetI2pRouterPeermanagerPeerTestJob *self, NetI2pDataRouterRouterInfo *peer) {
  id<NetI2pRouterTunnelInfo> inTunnel = NetI2pRouterPeermanagerPeerTestJob_getInboundTunnelId(self);
  if (inTunnel == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:@"No tunnels to get peer test replies through!"];
    return;
  }
  NetI2pDataTunnelId *inTunnelId = [inTunnel getReceiveTunnelIdWithInt:0];
  NetI2pDataRouterRouterInfo *inGateway = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:[inTunnel getPeerWithInt:0]];
  if (inGateway == nil) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:@"We can't find the gateway to our inbound tunnel?! Impossible?"];
    return;
  }
  jint timeoutMs = NetI2pRouterPeermanagerPeerTestJob_getTestTimeout(self);
  jlong expiration = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] + timeoutMs;
  jlong nonce = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE - 1];
  NetI2pDataI2npDatabaseStoreMessage *msg = NetI2pRouterPeermanagerPeerTestJob_buildMessageWithNetI2pDataRouterRouterInfo_withNetI2pDataTunnelId_withNetI2pDataHash_withLong_withLong_(self, peer, inTunnelId, [((NetI2pDataRouterRouterIdentity *) nil_chk([inGateway getIdentity])) getHash], nonce, expiration);
  id<NetI2pRouterTunnelInfo> outTunnel = NetI2pRouterPeermanagerPeerTestJob_getOutboundTunnelId(self);
  if (outTunnel == nil) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:@"No tunnels to send search out through! Something is wrong..."];
    return;
  }
  NetI2pDataTunnelId *outTunnelId = [outTunnel getSendTunnelIdWithInt:0];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("J$$$@$@", [self getJobId], @": Sending peer test to ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash])) toBase64], @" out ", outTunnel, @" w/ replies through ", inTunnel)];
  NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel = create_NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(self, [((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(peer)) getIdentity])) getHash], nonce, expiration);
  NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *reply = create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(self, [self getContext], peer, inTunnel, outTunnel);
  NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *timeoutJob = create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(self, [self getContext], peer, inTunnel, outTunnel, sel);
  [((NetI2pRouterTransportOutboundMessageRegistry *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageRegistry])) registerPendingWithNetI2pRouterMessageSelector:sel withNetI2pRouterReplyJob:reply withNetI2pRouterJob:timeoutJob];
  [((NetI2pRouterTunnelTunnelDispatcher *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelDispatcher])) dispatchOutboundWithNetI2pDataI2npI2NPMessage:msg withNetI2pDataTunnelId:outTunnelId withNetI2pDataTunnelId:nil withNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([peer getIdentity])) getHash]];
}

id<NetI2pRouterTunnelInfo> NetI2pRouterPeermanagerPeerTestJob_getOutboundTunnelId(NetI2pRouterPeermanagerPeerTestJob *self) {
  return [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectOutboundTunnel];
}

id<NetI2pRouterTunnelInfo> NetI2pRouterPeermanagerPeerTestJob_getInboundTunnelId(NetI2pRouterPeermanagerPeerTestJob *self) {
  return [((id<NetI2pRouterTunnelManagerFacade>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) tunnelManager])) selectInboundTunnel];
}

NetI2pDataI2npDatabaseStoreMessage *NetI2pRouterPeermanagerPeerTestJob_buildMessageWithNetI2pDataRouterRouterInfo_withNetI2pDataTunnelId_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *self, NetI2pDataRouterRouterInfo *peer, NetI2pDataTunnelId *replyTunnel, NetI2pDataHash *replyGateway, jlong nonce, jlong expiration) {
  NetI2pDataI2npDatabaseStoreMessage *msg = create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_([self getContext]);
  [msg setEntryWithNetI2pDataDatabaseEntry:peer];
  [msg setReplyGatewayWithNetI2pDataHash:replyGateway];
  [msg setReplyTunnelWithNetI2pDataTunnelId:replyTunnel];
  [msg setReplyTokenWithLong:nonce];
  [msg setMessageExpirationWithLong:expiration];
  return msg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerTestJob)

@implementation NetI2pRouterPeermanagerPeerTestJob_ReplySelector

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                                        withNetI2pDataHash:(NetI2pDataHash *)peer
                                                  withLong:(jlong)nonce
                                                  withLong:(jlong)expiration {
  NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(self, outer$, peer, nonce, expiration);
  return self;
}

- (jboolean)continueMatching {
  return false;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jboolean)isMatchWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
  if ([message isKindOfClass:[NetI2pDataI2npDeliveryStatusMessage class]]) {
    NetI2pDataI2npDeliveryStatusMessage *msg = (NetI2pDataI2npDeliveryStatusMessage *) cast_chk(message, [NetI2pDataI2npDeliveryStatusMessage class]);
    if (_nonce_ == [((NetI2pDataI2npDeliveryStatusMessage *) nil_chk(msg)) getMessageId]) {
      jlong timeLeft = _expiration_ - [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([this$0_ getContext])) clock])) now];
      if (timeLeft < 0) {
        if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$$$J$", @"Took too long to get a reply from peer ", [((NetI2pDataHash *) nil_chk(_peer_)) toBase64], @": ", (0 - timeLeft), @"ms too slow")];
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([this$0_ getContext])) statManager])) addRateDataWithNSString:@"peer.testTooSlow" withLong:0 - timeLeft];
      }
      else {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([this$0_ getContext])) statManager])) addRateDataWithNSString:@"peer.testOK" withLong:NetI2pRouterPeermanagerPeerTestJob_getTestTimeout(this$0_) - timeLeft];
      }
      _matchFound_ = true;
      return true;
    }
  }
  return false;
}

- (jboolean)matchFound {
  return _matchFound_;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Test peer "])) appendWithNSString:[((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(_peer_)) toBase64])) java_substring:0 endIndex:4]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" with nonce "])) appendWithLong:_nonce_];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerTestJob:withNetI2pDataHash:withLong:withLong:);
  methods[1].selector = @selector(continueMatching);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(isMatchWithNetI2pDataI2npI2NPMessage:);
  methods[4].selector = @selector(matchFound);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nonce_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_matchFound_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;JJ", "isMatch", "LNetI2pDataI2npI2NPMessage;", "toString", "LNetI2pRouterPeermanagerPeerTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerTestJob_ReplySelector = { "ReplySelector", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 6, 5, 4, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerTestJob_ReplySelector;
}

@end

void NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob_ReplySelector *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->_nonce_ = nonce;
  self->_expiration_ = expiration;
  JreStrongAssign(&self->_peer_, peer);
  self->_matchFound_ = false;
}

NetI2pRouterPeermanagerPeerTestJob_ReplySelector *new_NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerTestJob_ReplySelector, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_, outer$, peer, nonce, expiration)
}

NetI2pRouterPeermanagerPeerTestJob_ReplySelector *create_NetI2pRouterPeermanagerPeerTestJob_ReplySelector_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pDataHash *peer, jlong nonce, jlong expiration) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerTestJob_ReplySelector, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pDataHash_withLong_withLong_, outer$, peer, nonce, expiration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerTestJob_ReplySelector)

@implementation NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                            withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnel
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendTunnel {
  NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(self, outer$, context, peer, replyTunnel, sendTunnel);
  return self;
}

- (NSString *)getName {
  return @"Peer test successful";
}

- (void)runJob {
  jlong responseTime = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) clock])) now] - _testBegin_;
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$J$$$@$@", @"successful peer test after ", responseTime, @" for ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash])) toBase64], @" using outbound tunnel ", _sendTunnel_, @" and inbound tunnel ", _replyTunnel_)];
  [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupSuccessfulWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash] withLong:responseTime];
  [((id<NetI2pRouterTunnelInfo>) nil_chk(_sendTunnel_)) testSuccessfulWithInt:(jint) responseTime];
  [((id<NetI2pRouterTunnelInfo>) nil_chk(_replyTunnel_)) testSuccessfulWithInt:(jint) responseTime];
}

- (void)setMessageWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)message {
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_replyTunnel_);
  RELEASE_(_sendTunnel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerTestJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withNetI2pRouterTunnelInfo:withNetI2pRouterTunnelInfo:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(setMessageWithNetI2pDataI2npI2NPMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_testBegin_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;LNetI2pRouterTunnelInfo;LNetI2pRouterTunnelInfo;", "setMessage", "LNetI2pDataI2npI2NPMessage;", "LNetI2pRouterPeermanagerPeerTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob = { "PeerReplyFoundJob", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 4, 5, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob;
}

@end

void NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_peer_, peer);
  JreStrongAssign(&self->_replyTunnel_, replyTunnel);
  JreStrongAssign(&self->_sendTunnel_, sendTunnel);
  self->_testBegin_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) clock])) now];
}

NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *new_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_, outer$, context, peer, replyTunnel, sendTunnel)
}

NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob *create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_, outer$, context, peer, replyTunnel, sendTunnel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerTestJob_PeerReplyFoundJob)

@implementation NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob

- (instancetype)initWithNetI2pRouterPeermanagerPeerTestJob:(NetI2pRouterPeermanagerPeerTestJob *)outer$
                             withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                            withNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)peer
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)replyTunnel
                                withNetI2pRouterTunnelInfo:(id<NetI2pRouterTunnelInfo>)sendTunnel
      withNetI2pRouterPeermanagerPeerTestJob_ReplySelector:(NetI2pRouterPeermanagerPeerTestJob_ReplySelector *)sel {
  NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(self, outer$, context, peer, replyTunnel, sendTunnel, sel);
  return self;
}

- (NSString *)getName {
  return @"Peer test failed";
}

- (jboolean)getShouldFailPeer {
  return NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_getShouldFailPeer(self);
}

- (void)runJob {
  if ([((NetI2pRouterPeermanagerPeerTestJob_ReplySelector *) nil_chk(_selector_)) matchFound]) return;
  if (NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_getShouldFailPeer(self)) [((id<NetI2pRouterProfileManager>) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) profileManager])) dbLookupFailedWithNetI2pDataHash:[((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash]];
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$$$@$@", @"failed peer test for ", [((NetI2pDataHash *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk([((NetI2pDataRouterRouterInfo *) nil_chk(_peer_)) getIdentity])) getHash])) toBase64], @" using outbound tunnel ", _sendTunnel_, @" and inbound tunnel ", _replyTunnel_)];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) statManager])) addRateDataWithNSString:@"peer.testTimeout" withLong:1];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_peer_);
  RELEASE_(_replyTunnel_);
  RELEASE_(_sendTunnel_);
  RELEASE_(_selector_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterPeermanagerPeerTestJob:withNetI2pRouterRouterContext:withNetI2pDataRouterRouterInfo:withNetI2pRouterTunnelInfo:withNetI2pRouterTunnelInfo:withNetI2pRouterPeermanagerPeerTestJob_ReplySelector:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getShouldFailPeer);
  methods[3].selector = @selector(runJob);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pRouterPeermanagerPeerTestJob;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sendTunnel_", "LNetI2pRouterTunnelInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_selector_", "LNetI2pRouterPeermanagerPeerTestJob_ReplySelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataRouterRouterInfo;LNetI2pRouterTunnelInfo;LNetI2pRouterTunnelInfo;LNetI2pRouterPeermanagerPeerTestJob_ReplySelector;", "LNetI2pRouterPeermanagerPeerTestJob;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob = { "PeerReplyTimeoutJob", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x2, 4, 5, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob;
}

@end

void NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *self, NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, context);
  JreStrongAssign(&self->_peer_, peer);
  JreStrongAssign(&self->_replyTunnel_, replyTunnel);
  JreStrongAssign(&self->_sendTunnel_, sendTunnel);
  JreStrongAssign(&self->_selector_, sel);
}

NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *new_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_, outer$, context, peer, replyTunnel, sendTunnel, sel)
}

NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *create_NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_(NetI2pRouterPeermanagerPeerTestJob *outer$, NetI2pRouterRouterContext *context, NetI2pDataRouterRouterInfo *peer, id<NetI2pRouterTunnelInfo> replyTunnel, id<NetI2pRouterTunnelInfo> sendTunnel, NetI2pRouterPeermanagerPeerTestJob_ReplySelector *sel) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob, initWithNetI2pRouterPeermanagerPeerTestJob_withNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterTunnelInfo_withNetI2pRouterPeermanagerPeerTestJob_ReplySelector_, outer$, context, peer, replyTunnel, sendTunnel, sel)
}

jboolean NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob_getShouldFailPeer(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob *self) {
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerTestJob_PeerReplyTimeoutJob)
