//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/TunnelHistory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Date.h"
#include "java/util/Properties.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/ProfilePersistenceHelper.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatLog.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterPeermanagerTunnelHistory () {
 @public
  NetI2pRouterRouterContext *_context_;
  NetI2pUtilLog *_log_;
  JavaUtilConcurrentAtomicAtomicLong *_lifetimeAgreedTo_;
  JavaUtilConcurrentAtomicAtomicLong *_lifetimeRejected_;
  volatile_jlong _lastAgreedTo_;
  volatile_jlong _lastRejectedCritical_;
  volatile_jlong _lastRejectedBandwidth_;
  volatile_jlong _lastRejectedTransient_;
  volatile_jlong _lastRejectedProbabalistic_;
  JavaUtilConcurrentAtomicAtomicLong *_lifetimeFailed_;
  volatile_jlong _lastFailed_;
  NetI2pStatRateStat *_rejectRate_;
  NetI2pStatRateStat *_failRate_;
  NSString *_statGroup_;
}

- (void)createRatesWithNSString:(NSString *)statGroup;

+ (void)addDateWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)name
                                withLong:(jlong)val
                            withNSString:(NSString *)description_;

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                            withLong:(jlong)val
                        withNSString:(NSString *)description_;

+ (jlong)getLongWithJavaUtilProperties:(JavaUtilProperties *)props
                          withNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _lifetimeAgreedTo_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _lifetimeRejected_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _lifetimeFailed_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _rejectRate_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _failRate_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerTunnelHistory, _statGroup_, NSString *)

inline NSString *NetI2pRouterPeermanagerTunnelHistory_get_NL(void);
static NSString *NetI2pRouterPeermanagerTunnelHistory_NL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerTunnelHistory, NL, NSString *)

__attribute__((unused)) static void NetI2pRouterPeermanagerTunnelHistory_createRatesWithNSString_(NetI2pRouterPeermanagerTunnelHistory *self, NSString *statGroup);

__attribute__((unused)) static void NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_);

__attribute__((unused)) static void NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_);

__attribute__((unused)) static jlong NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(JavaUtilProperties *props, NSString *key);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPeermanagerTunnelHistory)

@implementation NetI2pRouterPeermanagerTunnelHistory

+ (jint)TUNNEL_REJECT_PROBABALISTIC_REJECT {
  return NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_PROBABALISTIC_REJECT;
}

+ (jint)TUNNEL_REJECT_TRANSIENT_OVERLOAD {
  return NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD;
}

+ (jint)TUNNEL_REJECT_BANDWIDTH {
  return NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH;
}

+ (jint)TUNNEL_REJECT_CRIT {
  return NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_CRIT;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                                     withNSString:(NSString *)statGroup {
  NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(self, context, statGroup);
  return self;
}

- (void)createRatesWithNSString:(NSString *)statGroup {
  NetI2pRouterPeermanagerTunnelHistory_createRatesWithNSString_(self, statGroup);
}

- (jlong)getLifetimeAgreedTo {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeAgreedTo_)) get];
}

- (jlong)getLifetimeRejected {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeRejected_)) get];
}

- (jlong)getLifetimeFailed {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeFailed_)) get];
}

- (jlong)getLastAgreedTo {
  return JreLoadVolatileLong(&_lastAgreedTo_);
}

- (jlong)getLastRejectedCritical {
  return JreLoadVolatileLong(&_lastRejectedCritical_);
}

- (jlong)getLastRejectedBandwidth {
  return JreLoadVolatileLong(&_lastRejectedBandwidth_);
}

- (jlong)getLastRejectedTransient {
  return JreLoadVolatileLong(&_lastRejectedTransient_);
}

- (jlong)getLastRejectedProbabalistic {
  return JreLoadVolatileLong(&_lastRejectedProbabalistic_);
}

- (jlong)getLastFailed {
  return JreLoadVolatileLong(&_lastFailed_);
}

- (void)incrementProcessedWithInt:(jint)processedSuccessfully
                          withInt:(jint)failedProcessing {
}

- (void)incrementAgreedTo {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeAgreedTo_)) incrementAndGet];
  JreAssignVolatileLong(&_lastAgreedTo_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (void)incrementRejectedWithInt:(jint)severity {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeRejected_)) incrementAndGet];
  if (severity >= NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_CRIT) {
    JreAssignVolatileLong(&_lastRejectedCritical_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
    [((NetI2pStatRateStat *) nil_chk(_rejectRate_)) addDataWithLong:1];
  }
  else if (severity >= NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH) {
    JreAssignVolatileLong(&_lastRejectedBandwidth_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
    [((NetI2pStatRateStat *) nil_chk(_rejectRate_)) addDataWithLong:1];
  }
  else if (severity >= NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD) {
    JreAssignVolatileLong(&_lastRejectedTransient_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
  }
  else if (severity >= NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_PROBABALISTIC_REJECT) {
    JreAssignVolatileLong(&_lastRejectedProbabalistic_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
  }
}

- (void)incrementFailedWithInt:(jint)pct {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeFailed_)) incrementAndGet];
  [((NetI2pStatRateStat *) nil_chk(_failRate_)) addDataWithLong:pct];
  JreAssignVolatileLong(&_lastFailed_, [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now]);
}

- (NetI2pStatRateStat *)getRejectionRate {
  return _rejectRate_;
}

- (NetI2pStatRateStat *)getFailedRate {
  return _failRate_;
}

- (void)coalesceStats {
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Coallescing stats"];
  [((NetI2pStatRateStat *) nil_chk(_rejectRate_)) coalesceStats];
  [((NetI2pStatRateStat *) nil_chk(_failRate_)) coalesceStats];
}

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  [buf appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"#################"])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"# Tunnel history"])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"###"])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastAgreedTo", JreLoadVolatileLong(&_lastAgreedTo_), @"When did the peer last agree to participate in a tunnel?");
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastFailed", JreLoadVolatileLong(&_lastFailed_), @"When was the last time a tunnel that the peer agreed to participate failed?");
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastRejectedCritical", JreLoadVolatileLong(&_lastRejectedCritical_), @"When was the last time the peer refused to participate in a tunnel (Critical response code)?");
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastRejectedBandwidth", JreLoadVolatileLong(&_lastRejectedBandwidth_), @"When was the last time the peer refused to participate in a tunnel (Bandwidth response code)?");
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastRejectedTransient", JreLoadVolatileLong(&_lastRejectedTransient_), @"When was the last time the peer refused to participate in a tunnel (Transient load response code)?");
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lastRejectedProbabalistic", JreLoadVolatileLong(&_lastRejectedProbabalistic_), @"When was the last time the peer refused to participate in a tunnel (Probabalistic response code)?");
  NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lifetimeAgreedTo", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeAgreedTo_)) get], @"How many tunnels has the peer ever agreed to participate in?");
  NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lifetimeFailed", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeFailed_)) get], @"How many tunnels has the peer ever agreed to participate in that failed prematurely?");
  NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, @"lifetimeRejected", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeRejected_)) get], @"How many tunnels has the peer ever refused to participate in?");
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:[((NSString *) nil_chk([buf description])) java_getBytesWithCharsetName:@"UTF-8"]];
  [((NetI2pStatRateStat *) nil_chk(_rejectRate_)) storeWithJavaIoOutputStream:outArg withNSString:@"tunnelHistory.rejectRate"];
  [((NetI2pStatRateStat *) nil_chk(_failRate_)) storeWithJavaIoOutputStream:outArg withNSString:@"tunnelHistory.failRate"];
}

+ (void)addDateWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)name
                                withLong:(jlong)val
                            withNSString:(NSString *)description_ {
  NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, description_);
}

+ (void)addWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                        withNSString:(NSString *)name
                            withLong:(jlong)val
                        withNSString:(NSString *)description_ {
  NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, description_);
}

- (void)load__WithJavaUtilProperties:(JavaUtilProperties *)props {
  JreAssignVolatileLong(&_lastAgreedTo_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastAgreedTo"));
  JreAssignVolatileLong(&_lastFailed_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastFailed"));
  JreAssignVolatileLong(&_lastRejectedCritical_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastRejectedCritical"));
  JreAssignVolatileLong(&_lastRejectedBandwidth_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastRejectedBandwidth"));
  JreAssignVolatileLong(&_lastRejectedTransient_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastRejectedTransient"));
  JreAssignVolatileLong(&_lastRejectedProbabalistic_, NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lastRejectedProbabalistic"));
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeAgreedTo_)) setWithLong:NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lifetimeAgreedTo")];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeFailed_)) setWithLong:NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lifetimeFailed")];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_lifetimeRejected_)) setWithLong:NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, @"tunnels.lifetimeRejected")];
  @try {
    [((NetI2pStatRateStat *) nil_chk(_rejectRate_)) load__WithJavaUtilProperties:props withNSString:@"tunnelHistory.rejectRate" withBoolean:true];
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Loading tunnelHistory.rejectRate"];
    [((NetI2pStatRateStat *) nil_chk(_failRate_)) load__WithJavaUtilProperties:props withNSString:@"tunnelHistory.failRate" withBoolean:true];
    if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Loading tunnelHistory.failRate"];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"TunnelHistory rates are corrupt, resetting" withJavaLangThrowable:iae];
    NetI2pRouterPeermanagerTunnelHistory_createRatesWithNSString_(self, _statGroup_);
  }
}

+ (jlong)getLongWithJavaUtilProperties:(JavaUtilProperties *)props
                          withNSString:(NSString *)key {
  return NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(props, key);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_lifetimeAgreedTo_);
  RELEASE_(_lifetimeRejected_);
  RELEASE_(_lifetimeFailed_);
  RELEASE_(_rejectRate_);
  RELEASE_(_failRate_);
  RELEASE_(_statGroup_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "J", 0x1a, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNSString:);
  methods[1].selector = @selector(createRatesWithNSString:);
  methods[2].selector = @selector(getLifetimeAgreedTo);
  methods[3].selector = @selector(getLifetimeRejected);
  methods[4].selector = @selector(getLifetimeFailed);
  methods[5].selector = @selector(getLastAgreedTo);
  methods[6].selector = @selector(getLastRejectedCritical);
  methods[7].selector = @selector(getLastRejectedBandwidth);
  methods[8].selector = @selector(getLastRejectedTransient);
  methods[9].selector = @selector(getLastRejectedProbabalistic);
  methods[10].selector = @selector(getLastFailed);
  methods[11].selector = @selector(incrementProcessedWithInt:withInt:);
  methods[12].selector = @selector(incrementAgreedTo);
  methods[13].selector = @selector(incrementRejectedWithInt:);
  methods[14].selector = @selector(incrementFailedWithInt:);
  methods[15].selector = @selector(getRejectionRate);
  methods[16].selector = @selector(getFailedRate);
  methods[17].selector = @selector(coalesceStats);
  methods[18].selector = @selector(storeWithJavaIoOutputStream:);
  methods[19].selector = @selector(addDateWithJavaLangStringBuilder:withNSString:withLong:withNSString:);
  methods[20].selector = @selector(addWithJavaLangStringBuilder:withNSString:withLong:withNSString:);
  methods[21].selector = @selector(load__WithJavaUtilProperties:);
  methods[22].selector = @selector(getLongWithJavaUtilProperties:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lifetimeAgreedTo_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lifetimeRejected_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastAgreedTo_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastRejectedCritical_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastRejectedBandwidth_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastRejectedTransient_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastRejectedProbabalistic_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lifetimeFailed_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastFailed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_rejectRate_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_failRate_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_statGroup_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TUNNEL_REJECT_PROBABALISTIC_REJECT", "I", .constantValue.asInt = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_PROBABALISTIC_REJECT, 0x19, -1, -1, -1, -1 },
    { "TUNNEL_REJECT_TRANSIENT_OVERLOAD", "I", .constantValue.asInt = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD, 0x19, -1, -1, -1, -1 },
    { "TUNNEL_REJECT_BANDWIDTH", "I", .constantValue.asInt = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH, 0x19, -1, -1, -1, -1 },
    { "TUNNEL_REJECT_CRIT", "I", .constantValue.asInt = NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_CRIT, 0x19, -1, -1, -1, -1 },
    { "NL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNSString;", "createRates", "LNSString;", "incrementProcessed", "II", "incrementRejected", "I", "incrementFailed", "store", "LJavaIoOutputStream;", "LJavaIoIOException;", "addDate", "LJavaLangStringBuilder;LNSString;JLNSString;", "add", "load", "LJavaUtilProperties;", "getLong", "LJavaUtilProperties;LNSString;", &NetI2pRouterPeermanagerTunnelHistory_NL };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerTunnelHistory = { "TunnelHistory", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x1, 23, 19, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerTunnelHistory;
}

+ (void)initialize {
  if (self == [NetI2pRouterPeermanagerTunnelHistory class]) {
    JreStrongAssign(&NetI2pRouterPeermanagerTunnelHistory_NL, JavaLangSystem_getPropertyWithNSString_(@"line.separator"));
    J2OBJC_SET_INITIALIZED(NetI2pRouterPeermanagerTunnelHistory)
  }
}

@end

void NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterPeermanagerTunnelHistory *self, NetI2pRouterRouterContext *context, NSString *statGroup) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_lifetimeAgreedTo_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_lifetimeRejected_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->_lifetimeFailed_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerTunnelHistory_class_()]);
  JreStrongAssign(&self->_statGroup_, statGroup);
  NetI2pRouterPeermanagerTunnelHistory_createRatesWithNSString_(self, statGroup);
}

NetI2pRouterPeermanagerTunnelHistory *new_NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *context, NSString *statGroup) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerTunnelHistory, initWithNetI2pRouterRouterContext_withNSString_, context, statGroup)
}

NetI2pRouterPeermanagerTunnelHistory *create_NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *context, NSString *statGroup) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerTunnelHistory, initWithNetI2pRouterRouterContext_withNSString_, context, statGroup)
}

void NetI2pRouterPeermanagerTunnelHistory_createRatesWithNSString_(NetI2pRouterPeermanagerTunnelHistory *self, NSString *statGroup) {
  JreStrongAssignAndConsume(&self->_rejectRate_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"tunnelHistory.rejectRate", @"How often does this peer reject a tunnel request?", statGroup, [IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 30 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]));
  JreStrongAssignAndConsume(&self->_failRate_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"tunnelHistory.failRate", @"How often do tunnels this peer accepts fail?", statGroup, [IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 30 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:4]));
  [((NetI2pStatRateStat *) nil_chk(self->_rejectRate_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) getStatLog]];
  [((NetI2pStatRateStat *) nil_chk(self->_failRate_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) getStatLog]];
}

void NetI2pRouterPeermanagerTunnelHistory_addDateWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_) {
  NetI2pRouterPeermanagerTunnelHistory_initialize();
  NSString *when = val > 0 ? [(create_JavaUtilDate_initWithLong_(val)) description] : @"Never";
  NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(buf, name, val, JreStrcat("$C$", description_, ' ', when));
}

void NetI2pRouterPeermanagerTunnelHistory_addWithJavaLangStringBuilder_withNSString_withLong_withNSString_(JavaLangStringBuilder *buf, NSString *name, jlong val, NSString *description_) {
  NetI2pRouterPeermanagerTunnelHistory_initialize();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"# "])) appendWithNSString:name])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL])) appendWithNSString:@"# "])) appendWithNSString:description_])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"tunnels."])) appendWithNSString:name])) appendWithChar:'='])) appendWithLong:val])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL])) appendWithNSString:NetI2pRouterPeermanagerTunnelHistory_NL];
}

jlong NetI2pRouterPeermanagerTunnelHistory_getLongWithJavaUtilProperties_withNSString_(JavaUtilProperties *props, NSString *key) {
  NetI2pRouterPeermanagerTunnelHistory_initialize();
  return NetI2pRouterPeermanagerProfilePersistenceHelper_getLongWithJavaUtilProperties_withNSString_(props, key);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerTunnelHistory)
