//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/ProfileOrganizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/ClientManagerFacade.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/NetworkDatabaseFacade.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/CapacityCalculator.h"
#include "net/i2p/router/peermanager/DBHistory.h"
#include "net/i2p/router/peermanager/InverseCapacityComparator.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/ProfileOrganizer.h"
#include "net/i2p/router/peermanager/ProfilePersistenceHelper.h"
#include "net/i2p/router/peermanager/SpeedComparator.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/router/tunnel/pool/TunnelPeerSelector.h"
#include "net/i2p/router/util/MaskedIPSet.h"
#include "net/i2p/router/util/RandomIterator.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pRouterPeermanagerProfileOrganizer () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  id<JavaUtilMap> _fastPeers_;
  id<JavaUtilMap> _highCapacityPeers_;
  id<JavaUtilMap> _wellIntegratedPeers_;
  id<JavaUtilMap> _notFailingPeers_;
  id<JavaUtilList> _notFailingPeersList_;
  id<JavaUtilMap> _failingPeers_;
  NetI2pDataHash *_us_;
  NetI2pRouterPeermanagerProfilePersistenceHelper *_persistenceHelper_;
  id<JavaUtilSet> _strictCapacityOrder_;
  jdouble _thresholdSpeedValue_;
  jdouble _thresholdCapacityValue_;
  jdouble _thresholdIntegrationValue_;
  NetI2pRouterPeermanagerInverseCapacityComparator *_comp_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *_reorganizeLock_;
  jlong _currentExpireTime_;
}

- (void)getReadLock;

- (jboolean)tryReadLock;

- (void)releaseReadLock;

- (jboolean)getWriteLock;

- (void)releaseWriteLock;

- (jint)countWithJavaUtilMap:(id<JavaUtilMap>)m;

- (jboolean)isXWithJavaUtilMap:(id<JavaUtilMap>)m
            withNetI2pDataHash:(NetI2pDataHash *)peer;

- (void)selectActiveNotFailingPeers2WithInt:(jint)howMany
                            withJavaUtilSet:(id<JavaUtilSet>)exclude
                            withJavaUtilSet:(id<JavaUtilSet>)matches
                                    withInt:(jint)mask;

- (void)selectAllNotFailingPeersWithInt:(jint)howMany
                        withJavaUtilSet:(id<JavaUtilSet>)exclude
                        withJavaUtilSet:(id<JavaUtilSet>)matches
                            withBoolean:(jboolean)onlyNotFailing
                                withInt:(jint)mask;

- (void)locked_promoteFastAsNecessary;

- (void)locked_demoteFastAsNecessary;

- (void)locked_demoteHighCapAsNecessary;

- (void)locked_unfailAsNecessary;

- (void)locked_calculateThresholdsWithJavaUtilSet:(id<JavaUtilSet>)allPeers;

- (void)locked_calculateCapacityThresholdWithDouble:(jdouble)totalCapacity
                                    withJavaUtilSet:(id<JavaUtilSet>)reordered;

- (void)locked_calculateSpeedThresholdWithJavaUtilSet:(id<JavaUtilSet>)reordered;

- (void)locked_calculateSpeedThresholdMeanWithJavaUtilSet:(id<JavaUtilSet>)reordered;

+ (jdouble)avgWithDouble:(jdouble)total
              withDouble:(jdouble)quantity;

- (NetI2pRouterPeermanagerPeerProfile *)locked_getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer;

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches;

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches
                                  withInt:(jint)mask;

- (jboolean)notRestrictedWithNetI2pDataHash:(NetI2pDataHash *)peer
            withNetI2pRouterUtilMaskedIPSet:(NetI2pRouterUtilMaskedIPSet *)IPSet
                                    withInt:(jint)mask;

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches
                       withNetI2pDataHash:(NetI2pDataHash *)randomKey
withNetI2pRouterPeermanagerProfileOrganizer_Slice:(NetI2pRouterPeermanagerProfileOrganizer_Slice *)subTierMode;

- (jint)getSubTierWithNetI2pDataHash:(NetI2pDataHash *)peer
                  withNetI2pDataHash:(NetI2pDataHash *)randomKey;

- (void)locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile;

- (jboolean)shouldDropWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile;

+ (NSString *)numWithDouble:(jdouble)num;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _fastPeers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _highCapacityPeers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _wellIntegratedPeers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _notFailingPeers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _notFailingPeersList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _failingPeers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _us_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _persistenceHelper_, NetI2pRouterPeermanagerProfilePersistenceHelper *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _strictCapacityOrder_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _comp_, NetI2pRouterPeermanagerInverseCapacityComparator *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerProfileOrganizer, _reorganizeLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_DEFAULT_MAXIMUM_FAST_PEERS(void);
#define NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MAXIMUM_FAST_PEERS 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, DEFAULT_MAXIMUM_FAST_PEERS, jint)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_ABSOLUTE_MAX_FAST_PEERS(void);
#define NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_FAST_PEERS 75
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, ABSOLUTE_MAX_FAST_PEERS, jint)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_ABSOLUTE_MAX_HIGHCAP_PEERS(void);
#define NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_HIGHCAP_PEERS 150
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, ABSOLUTE_MAX_HIGHCAP_PEERS, jint)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_MAX_BAD_REPLIES_PER_HOUR(void);
#define NetI2pRouterPeermanagerProfileOrganizer_MAX_BAD_REPLIES_PER_HOUR 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, MAX_BAD_REPLIES_PER_HOUR, jint)

inline jlong NetI2pRouterPeermanagerProfileOrganizer_get_MIN_EXPIRE_TIME(void);
#define NetI2pRouterPeermanagerProfileOrganizer_MIN_EXPIRE_TIME 7200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, MIN_EXPIRE_TIME, jlong)

inline jlong NetI2pRouterPeermanagerProfileOrganizer_get_MAX_EXPIRE_TIME(void);
#define NetI2pRouterPeermanagerProfileOrganizer_MAX_EXPIRE_TIME 21600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, MAX_EXPIRE_TIME, jlong)

inline jlong NetI2pRouterPeermanagerProfileOrganizer_get_ADJUST_EXPIRE_TIME(void);
#define NetI2pRouterPeermanagerProfileOrganizer_ADJUST_EXPIRE_TIME 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, ADJUST_EXPIRE_TIME, jlong)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_ENOUGH_PROFILES(void);
#define NetI2pRouterPeermanagerProfileOrganizer_ENOUGH_PROFILES 600
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, ENOUGH_PROFILES, jint)

inline jint NetI2pRouterPeermanagerProfileOrganizer_get_MIN_NOT_FAILING_ACTIVE(void);
#define NetI2pRouterPeermanagerProfileOrganizer_MIN_NOT_FAILING_ACTIVE 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerProfileOrganizer, MIN_NOT_FAILING_ACTIVE, jint)

inline JavaTextDecimalFormat *NetI2pRouterPeermanagerProfileOrganizer_get__fmt(void);
static JavaTextDecimalFormat *NetI2pRouterPeermanagerProfileOrganizer__fmt;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerProfileOrganizer, _fmt, JavaTextDecimalFormat *)

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_getReadLock(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfileOrganizer_tryReadLock(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static jint NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> m);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> m, NetI2pDataHash *peer);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_selectActiveNotFailingPeers2WithInt_withJavaUtilSet_withJavaUtilSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, jint howMany, id<JavaUtilSet> exclude, id<JavaUtilSet> matches, jint mask);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_selectAllNotFailingPeersWithInt_withJavaUtilSet_withJavaUtilSet_withBoolean_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, jint howMany, id<JavaUtilSet> exclude, id<JavaUtilSet> matches, jboolean onlyNotFailing, jint mask);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_promoteFastAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_demoteFastAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_demoteHighCapAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_unfailAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateThresholdsWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> allPeers);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateCapacityThresholdWithDouble_withJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, jdouble totalCapacity, id<JavaUtilSet> reordered);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> reordered);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdMeanWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> reordered);

__attribute__((unused)) static jdouble NetI2pRouterPeermanagerProfileOrganizer_avgWithDouble_withDouble_(jdouble total, jdouble quantity);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileOrganizer_locked_getProfileWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches, jint mask);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfileOrganizer_notRestrictedWithNetI2pDataHash_withNetI2pRouterUtilMaskedIPSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer, NetI2pRouterUtilMaskedIPSet *IPSet, jint mask);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withNetI2pDataHash_withNetI2pRouterPeermanagerProfileOrganizer_Slice_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches, NetI2pDataHash *randomKey, NetI2pRouterPeermanagerProfileOrganizer_Slice *subTierMode);

__attribute__((unused)) static jint NetI2pRouterPeermanagerProfileOrganizer_getSubTierWithNetI2pDataHash_withNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer, NetI2pDataHash *randomKey);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterPeermanagerPeerProfile *profile);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerProfileOrganizer_shouldDropWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterPeermanagerPeerProfile *profile);

__attribute__((unused)) static NSString *NetI2pRouterPeermanagerProfileOrganizer_numWithDouble_(jdouble num);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$2(void);

__attribute__((unused)) static void NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(NetI2pRouterPeermanagerProfileOrganizer_Slice *self, jint mask, jint val, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPeermanagerProfileOrganizer)

NSString *NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_FAST_PEERS = @"profileOrganizer.minFastPeers";
NSString *NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_HIGH_CAPACITY_PEERS = @"profileOrganizer.minHighCapacityPeers";

@implementation NetI2pRouterPeermanagerProfileOrganizer

+ (NSString *)PROP_MINIMUM_FAST_PEERS {
  return NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_FAST_PEERS;
}

+ (jint)DEFAULT_MINIMUM_FAST_PEERS {
  return NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_FAST_PEERS;
}

+ (NSString *)PROP_MINIMUM_HIGH_CAPACITY_PEERS {
  return NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_HIGH_CAPACITY_PEERS;
}

+ (jint)DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS {
  return NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context {
  NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(self, context);
  return self;
}

- (void)getReadLock {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
}

- (jboolean)tryReadLock {
  return NetI2pRouterPeermanagerProfileOrganizer_tryReadLock(self);
}

- (void)releaseReadLock {
  NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
}

- (jboolean)getWriteLock {
  return NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(self);
}

- (void)releaseWriteLock {
  NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(self);
}

- (void)setUsWithNetI2pDataHash:(NetI2pDataHash *)us {
  JreStrongAssign(&_us_, us);
}

- (NetI2pDataHash *)getUs {
  return _us_;
}

- (jdouble)getSpeedThreshold {
  return _thresholdSpeedValue_;
}

- (jdouble)getCapacityThreshold {
  return _thresholdCapacityValue_;
}

- (jdouble)getIntegrationThreshold {
  return _thresholdIntegrationValue_;
}

- (NetI2pRouterPeermanagerPeerProfile *)getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:_us_]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:@"Who wanted our own profile?" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did")];
    return nil;
  }
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    return NetI2pRouterPeermanagerProfileOrganizer_locked_getProfileWithNetI2pDataHash_(self, peer);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
}

- (NetI2pRouterPeermanagerPeerProfile *)getProfileNonblockingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:_us_]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:@"Who wanted our own profile?" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did")];
    return nil;
  }
  if (NetI2pRouterPeermanagerProfileOrganizer_tryReadLock(self)) {
    @try {
      return NetI2pRouterPeermanagerProfileOrganizer_locked_getProfileWithNetI2pDataHash_(self, peer);
    }
    @finally {
      NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
    }
  }
  return nil;
}

- (NetI2pRouterPeermanagerPeerProfile *)addProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile {
  if (profile == nil) return nil;
  NetI2pDataHash *peer = [profile getPeer];
  if ([((NetI2pDataHash *) nil_chk(peer)) isEqual:_us_]) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:@"Who added our own profile?" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did")];
    return nil;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"New profile created for ", peer)];
  NetI2pRouterPeermanagerPeerProfile *old = [self getProfileWithNetI2pDataHash:peer];
  [profile coalesceStats];
  if (!NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(self)) return old;
  @try {
    [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) putWithId:peer withId:profile];
    if (old == nil) [((id<JavaUtilList>) nil_chk(_notFailingPeersList_)) addWithId:peer];
    if (_thresholdCapacityValue_ <= [profile getCapacityValue] && [self isSelectableWithNetI2pDataHash:peer] && [((id<JavaUtilMap>) nil_chk(_highCapacityPeers_)) size] < [self getMaximumHighCapPeers]) {
      [((id<JavaUtilMap>) nil_chk(_highCapacityPeers_)) putWithId:peer withId:profile];
    }
    [((id<JavaUtilSet>) nil_chk(_strictCapacityOrder_)) addWithId:profile];
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(self);
  }
  return old;
}

- (jint)countWithJavaUtilMap:(id<JavaUtilMap>)m {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, m);
}

- (jint)countFastPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, _fastPeers_);
}

- (jint)countHighCapacityPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, _highCapacityPeers_);
}

- (jint)countWellIntegratedPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, _wellIntegratedPeers_);
}

- (jint)countNotFailingPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, _notFailingPeers_);
}

- (jint)countFailingPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(self, _failingPeers_);
}

- (jint)countActivePeers {
  jint activePeers = 0;
  jlong hideBefore = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - 6 * 60 * 60 * 1000;
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    for (NetI2pRouterPeermanagerPeerProfile * __strong profile in nil_chk([((id<JavaUtilMap>) nil_chk(_failingPeers_)) values])) {
      if ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getLastSendSuccessful] >= hideBefore) activePeers++;
      else if ([profile getLastHeardFrom] >= hideBefore) activePeers++;
    }
    for (NetI2pRouterPeermanagerPeerProfile * __strong profile in nil_chk([((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) values])) {
      if ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getLastSendSuccessful] >= hideBefore) activePeers++;
      else if ([profile getLastHeardFrom] >= hideBefore) activePeers++;
    }
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  return activePeers;
}

- (jboolean)isXWithJavaUtilMap:(id<JavaUtilMap>)m
            withNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(self, m, peer);
}

- (jboolean)isFastWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(self, _fastPeers_, peer);
}

- (jboolean)isHighCapacityWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(self, _highCapacityPeers_, peer);
}

- (jboolean)isWellIntegratedWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(self, _wellIntegratedPeers_, peer);
}

- (jboolean)isFailingWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return false;
}

- (void)clearProfiles {
  if (!NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(self)) return;
  @try {
    [((id<JavaUtilMap>) nil_chk(_failingPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_fastPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_highCapacityPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) clear];
    [((id<JavaUtilList>) nil_chk(_notFailingPeersList_)) clear];
    [((id<JavaUtilMap>) nil_chk(_wellIntegratedPeers_)) clear];
    [((id<JavaUtilSet>) nil_chk(_strictCapacityOrder_)) clear];
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(self);
  }
}

- (jboolean)peerSendsBadRepliesWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile *profile = [self getProfileWithNetI2pDataHash:peer];
  if (profile != nil && [profile getIsExpandedDB]) {
    NetI2pStatRateStat *invalidReplyRateStat = [((NetI2pRouterPeermanagerDBHistory *) nil_chk([profile getDBHistory])) getInvalidReplyRate];
    NetI2pStatRate *invalidReplyRate = [((NetI2pStatRateStat *) nil_chk(invalidReplyRateStat)) getRateWithLong:30 * 60 * 1000l];
    if (([((NetI2pStatRate *) nil_chk(invalidReplyRate)) getCurrentTotalValue] > NetI2pRouterPeermanagerProfileOrganizer_MAX_BAD_REPLIES_PER_HOUR) || ([invalidReplyRate getLastTotalValue] > NetI2pRouterPeermanagerProfileOrganizer_MAX_BAD_REPLIES_PER_HOUR)) {
      return true;
    }
  }
  return false;
}

- (jboolean)exportProfileWithNetI2pDataHash:(NetI2pDataHash *)profile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pRouterPeermanagerPeerProfile *prof = [self getProfileWithNetI2pDataHash:profile];
  jboolean rv = prof != nil;
  if (rv) [((NetI2pRouterPeermanagerProfilePersistenceHelper *) nil_chk(_persistenceHelper_)) writeProfileWithNetI2pRouterPeermanagerPeerProfile:prof withJavaIoOutputStream:outArg];
  return rv;
}

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches {
  [self selectFastPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:0];
}

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches
                       withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, _fastPeers_, howMany, exclude, matches, mask);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"selectFastPeers(", howMany, @"), not enough fast (", [matches size], @") going on to highCap")];
    [self selectHighCapacityPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:mask];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$IC", @"selectFastPeers(", howMany, @"), found enough fast (", [matches size], ')')];
  }
  return;
}

- (void)selectFastPeersWithInt:(jint)howMany
               withJavaUtilSet:(id<JavaUtilSet>)exclude
               withJavaUtilSet:(id<JavaUtilSet>)matches
            withNetI2pDataHash:(NetI2pDataHash *)randomKey
withNetI2pRouterPeermanagerProfileOrganizer_Slice:(NetI2pRouterPeermanagerProfileOrganizer_Slice *)subTierMode {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    if (subTierMode != JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL)) {
      jint sz = [((id<JavaUtilMap>) nil_chk(_fastPeers_)) size];
      if (sz < 6 || (((NetI2pRouterPeermanagerProfileOrganizer_Slice *) nil_chk(subTierMode))->mask_ >= 3 && sz < 12)) subTierMode = JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL);
    }
    if (subTierMode != JreLoadEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL)) NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withNetI2pDataHash_withNetI2pRouterPeermanagerProfileOrganizer_Slice_(self, _fastPeers_, howMany, exclude, matches, randomKey, subTierMode);
    else NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, _fastPeers_, howMany, exclude, matches, 2);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"selectFastPeers(", howMany, @"), not enough fast (", [matches size], @") going on to highCap")];
    [self selectHighCapacityPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:2];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$IC", @"selectFastPeers(", howMany, @"), found enough fast (", [matches size], ')')];
  }
  return;
}

- (void)selectHighCapacityPeersWithInt:(jint)howMany
                       withJavaUtilSet:(id<JavaUtilSet>)exclude
                       withJavaUtilSet:(id<JavaUtilSet>)matches {
  [self selectHighCapacityPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:0];
}

- (void)selectHighCapacityPeersWithInt:(jint)howMany
                       withJavaUtilSet:(id<JavaUtilSet>)exclude
                       withJavaUtilSet:(id<JavaUtilSet>)matches
                               withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, _highCapacityPeers_, howMany, exclude, matches, mask);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"selectHighCap(", howMany, @"), not enough highcap (", [matches size], @") going on to ANFP2")];
    NetI2pRouterPeermanagerProfileOrganizer_selectActiveNotFailingPeers2WithInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, howMany, exclude, matches, mask);
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$IC", @"selectHighCap(", howMany, @"), found enough highCap (", [matches size], ')')];
  }
  return;
}

- (void)selectWellIntegratedPeersWithInt:(jint)howMany
                         withJavaUtilSet:(id<JavaUtilSet>)exclude
                         withJavaUtilSet:(id<JavaUtilSet>)matches {
  [self selectWellIntegratedPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:0];
}

- (void)selectWellIntegratedPeersWithInt:(jint)howMany
                         withJavaUtilSet:(id<JavaUtilSet>)exclude
                         withJavaUtilSet:(id<JavaUtilSet>)matches
                                 withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, _wellIntegratedPeers_, howMany, exclude, matches, mask);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$I$", @"selectWellIntegrated(", howMany, @"), not enough integrated (", [matches size], @") going on to notFailing")];
    [self selectNotFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:mask];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$IC", @"selectWellIntegrated(", howMany, @"), found enough well integrated (", [matches size], ')')];
  }
  return;
}

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches {
  [self selectNotFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withBoolean:false withInt:0];
}

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                             withInt:(jint)mask {
  [self selectNotFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withBoolean:false withInt:mask];
}

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                         withBoolean:(jboolean)onlyNotFailing {
  [self selectNotFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withBoolean:onlyNotFailing withInt:0];
}

- (void)selectNotFailingPeersWithInt:(jint)howMany
                     withJavaUtilSet:(id<JavaUtilSet>)exclude
                     withJavaUtilSet:(id<JavaUtilSet>)matches
                         withBoolean:(jboolean)onlyNotFailing
                             withInt:(jint)mask {
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) NetI2pRouterPeermanagerProfileOrganizer_selectAllNotFailingPeersWithInt_withJavaUtilSet_withJavaUtilSet_withBoolean_withInt_(self, howMany, exclude, matches, onlyNotFailing, mask);
  return;
}

- (void)selectActiveNotFailingPeersWithInt:(jint)howMany
                           withJavaUtilSet:(id<JavaUtilSet>)exclude
                           withJavaUtilSet:(id<JavaUtilSet>)matches {
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    id<JavaUtilSet> connected = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) getEstablished];
    NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
    @try {
      for (NetI2pDataHash * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) keySet])) {
        if (![((id<JavaUtilSet>) nil_chk(connected)) containsWithId:peer]) [((id<JavaUtilSet>) nil_chk(exclude)) addWithId:peer];
      }
      NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, _notFailingPeers_, howMany, exclude, matches, 0);
    }
    @finally {
      NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
    }
  }
}

- (void)selectActiveNotFailingPeers2WithInt:(jint)howMany
                            withJavaUtilSet:(id<JavaUtilSet>)exclude
                            withJavaUtilSet:(id<JavaUtilSet>)matches
                                    withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_selectActiveNotFailingPeers2WithInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, howMany, exclude, matches, mask);
}

- (void)selectAllNotFailingPeersWithInt:(jint)howMany
                        withJavaUtilSet:(id<JavaUtilSet>)exclude
                        withJavaUtilSet:(id<JavaUtilSet>)matches
                            withBoolean:(jboolean)onlyNotFailing {
  NetI2pRouterPeermanagerProfileOrganizer_selectAllNotFailingPeersWithInt_withJavaUtilSet_withJavaUtilSet_withBoolean_withInt_(self, howMany, exclude, matches, onlyNotFailing, 0);
}

- (void)selectAllNotFailingPeersWithInt:(jint)howMany
                        withJavaUtilSet:(id<JavaUtilSet>)exclude
                        withJavaUtilSet:(id<JavaUtilSet>)matches
                            withBoolean:(jboolean)onlyNotFailing
                                withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_selectAllNotFailingPeersWithInt_withJavaUtilSet_withJavaUtilSet_withBoolean_withInt_(self, howMany, exclude, matches, onlyNotFailing, mask);
}

- (void)selectFailingPeersWithInt:(jint)howMany
                  withJavaUtilSet:(id<JavaUtilSet>)exclude
                  withJavaUtilSet:(id<JavaUtilSet>)matches {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_(self, _failingPeers_, howMany, exclude, matches);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  return;
}

- (id<JavaUtilList>)selectPeersLocallyUnreachable {
  id<JavaUtilList> n;
  jint count;
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    count = [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) size];
    n = create_JavaUtilArrayList_initWithJavaUtilCollection_([_notFailingPeers_ keySet]);
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
  id<JavaUtilList> l = create_JavaUtilArrayList_initWithInt_(count / 4);
  for (NetI2pDataHash * __strong peer in nil_chk(n)) {
    if ([((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) wasUnreachableWithNetI2pDataHash:peer]) [l addWithId:peer];
    else {
      NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
      if (info != nil) {
        NSString *v = [info getVersion];
        if ((![((NSString *) nil_chk(v)) isEqual:@"0.6.1.33"]) && [v java_hasPrefix:@"0.6.1."] && [info getTargetAddressWithNSString:@"NTCP"] == nil) [l addWithId:peer];
        else {
          NetI2pDataRouterRouterAddress *ra = [info getTargetAddressWithNSString:@"SSU"];
          if (ra == nil) {
            if ([info getTargetAddressWithNSString:@"NTCP"] == nil) [l addWithId:peer];
            continue;
          }
          if ([ra getOptionWithNSString:@"ihost0"] != nil) [l addWithId:peer];
        }
      }
    }
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Unreachable: ", l)];
  return l;
}

- (id<JavaUtilList>)selectPeersRecentlyRejecting {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    jlong cutoff = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - (20 * 1000);
    jint count = [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) size];
    id<JavaUtilList> l = create_JavaUtilArrayList_initWithInt_(count / 128);
    for (NetI2pRouterPeermanagerPeerProfile * __strong prof in nil_chk([_notFailingPeers_ values])) {
      if ([((NetI2pRouterPeermanagerTunnelHistory *) nil_chk([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) getTunnelHistory])) getLastRejectedBandwidth] > cutoff) [l addWithId:[prof getPeer]];
    }
    return l;
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
}

- (id<JavaUtilSet>)selectAllPeers {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    id<JavaUtilSet> allPeers = create_JavaUtilHashSet_initWithInt_([((id<JavaUtilMap>) nil_chk(_failingPeers_)) size] + [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) size] + [((id<JavaUtilMap>) nil_chk(_highCapacityPeers_)) size] + [((id<JavaUtilMap>) nil_chk(_fastPeers_)) size]);
    [allPeers addAllWithJavaUtilCollection:[_failingPeers_ keySet]];
    [allPeers addAllWithJavaUtilCollection:[_notFailingPeers_ keySet]];
    [allPeers addAllWithJavaUtilCollection:[_highCapacityPeers_ keySet]];
    [allPeers addAllWithJavaUtilCollection:[_fastPeers_ keySet]];
    return allPeers;
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
}

- (void)reorganize {
  [self reorganizeWithBoolean:false];
}

- (void)reorganizeWithBoolean:(jboolean)shouldCoalesce {
  jlong sortTime = 0;
  jint coalesceTime = 0;
  jlong thresholdTime = 0;
  jlong placeTime = 0;
  jint profileCount = 0;
  jint expiredCount = 0;
  jlong uptime = [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) router])) getUptime];
  jlong expireOlderThan = -1;
  if (uptime > 60 * 60 * 1000) {
    if ([self countNotFailingPeers] > NetI2pRouterPeermanagerProfileOrganizer_ENOUGH_PROFILES) _currentExpireTime_ = JavaLangMath_maxWithLong_withLong_(_currentExpireTime_ - NetI2pRouterPeermanagerProfileOrganizer_ADJUST_EXPIRE_TIME, NetI2pRouterPeermanagerProfileOrganizer_MIN_EXPIRE_TIME);
    else _currentExpireTime_ = JavaLangMath_minWithLong_withLong_(_currentExpireTime_ + NetI2pRouterPeermanagerProfileOrganizer_ADJUST_EXPIRE_TIME, NetI2pRouterPeermanagerProfileOrganizer_MAX_EXPIRE_TIME);
    expireOlderThan = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - _currentExpireTime_;
  }
  if (shouldCoalesce) {
    NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
    @try {
      for (NetI2pRouterPeermanagerPeerProfile * __strong prof in nil_chk(_strictCapacityOrder_)) {
        if ((expireOlderThan > 0) && ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) getLastSendSuccessful] <= expireOlderThan)) {
          continue;
        }
        jlong coalesceStart = JavaLangSystem_currentTimeMillis();
        [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) coalesceOnly];
        coalesceTime += (jint) (JavaLangSystem_currentTimeMillis() - coalesceStart);
      }
    }
    @finally {
      NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
    }
  }
  if (!NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(self)) return;
  jlong start = JavaLangSystem_currentTimeMillis();
  @try {
    id<JavaUtilSet> allPeers = _strictCapacityOrder_;
    id<JavaUtilSet> reordered = create_JavaUtilTreeSet_initWithJavaUtilComparator_(_comp_);
    jlong sortStart = JavaLangSystem_currentTimeMillis();
    for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(_strictCapacityOrder_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      NetI2pRouterPeermanagerPeerProfile *prof = [iter next];
      if ((expireOlderThan > 0) && ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) getLastSendSuccessful] <= expireOlderThan)) {
        expiredCount++;
        continue;
      }
      [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(prof)) updateValues];
      [reordered addWithId:prof];
      profileCount++;
    }
    sortTime = JavaLangSystem_currentTimeMillis() - sortStart;
    JreStrongAssign(&_strictCapacityOrder_, reordered);
    jlong thresholdStart = JavaLangSystem_currentTimeMillis();
    NetI2pRouterPeermanagerProfileOrganizer_locked_calculateThresholdsWithJavaUtilSet_(self, allPeers);
    thresholdTime = JavaLangSystem_currentTimeMillis() - thresholdStart;
    [((id<JavaUtilMap>) nil_chk(_failingPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_fastPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_highCapacityPeers_)) clear];
    [((id<JavaUtilMap>) nil_chk(_notFailingPeers_)) clear];
    [((id<JavaUtilList>) nil_chk(_notFailingPeersList_)) clear];
    [((id<JavaUtilMap>) nil_chk(_wellIntegratedPeers_)) clear];
    jlong placeStart = JavaLangSystem_currentTimeMillis();
    for (NetI2pRouterPeermanagerPeerProfile * __strong profile in nil_chk(_strictCapacityOrder_)) {
      NetI2pRouterPeermanagerProfileOrganizer_locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
    }
    NetI2pRouterPeermanagerProfileOrganizer_locked_unfailAsNecessary(self);
    NetI2pRouterPeermanagerProfileOrganizer_locked_demoteHighCapAsNecessary(self);
    NetI2pRouterPeermanagerProfileOrganizer_locked_promoteFastAsNecessary(self);
    NetI2pRouterPeermanagerProfileOrganizer_locked_demoteFastAsNecessary(self);
    placeTime = JavaLangSystem_currentTimeMillis() - placeStart;
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(self);
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$I$D$D$DC", @"Profiles reorganized. Expired: ", expiredCount, @" Averages: [integration: ", _thresholdIntegrationValue_, @", capacity: ", _thresholdCapacityValue_, @", speed: ", _thresholdSpeedValue_, ']')];
  jlong total = JavaLangSystem_currentTimeMillis() - start;
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"peer.profileSortTime" withLong:sortTime withLong:profileCount];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"peer.profileCoalesceTime" withLong:coalesceTime withLong:profileCount];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"peer.profileThresholdTime" withLong:thresholdTime withLong:profileCount];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"peer.profilePlaceTime" withLong:placeTime withLong:profileCount];
  [((NetI2pStatStatManager *) nil_chk([_context_ statManager])) addRateDataWithNSString:@"peer.profileReorgTime" withLong:total withLong:profileCount];
}

- (void)locked_promoteFastAsNecessary {
  NetI2pRouterPeermanagerProfileOrganizer_locked_promoteFastAsNecessary(self);
}

- (void)locked_demoteFastAsNecessary {
  NetI2pRouterPeermanagerProfileOrganizer_locked_demoteFastAsNecessary(self);
}

- (void)locked_demoteHighCapAsNecessary {
  NetI2pRouterPeermanagerProfileOrganizer_locked_demoteHighCapAsNecessary(self);
}

- (void)locked_unfailAsNecessary {
  NetI2pRouterPeermanagerProfileOrganizer_locked_unfailAsNecessary(self);
}

- (void)locked_calculateThresholdsWithJavaUtilSet:(id<JavaUtilSet>)allPeers {
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateThresholdsWithJavaUtilSet_(self, allPeers);
}

- (void)locked_calculateCapacityThresholdWithDouble:(jdouble)totalCapacity
                                    withJavaUtilSet:(id<JavaUtilSet>)reordered {
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateCapacityThresholdWithDouble_withJavaUtilSet_(self, totalCapacity, reordered);
}

- (void)locked_calculateSpeedThresholdWithJavaUtilSet:(id<JavaUtilSet>)reordered {
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdWithJavaUtilSet_(self, reordered);
}

- (void)locked_calculateSpeedThresholdMeanWithJavaUtilSet:(id<JavaUtilSet>)reordered {
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdMeanWithJavaUtilSet_(self, reordered);
}

+ (jdouble)avgWithDouble:(jdouble)total
              withDouble:(jdouble)quantity {
  return NetI2pRouterPeermanagerProfileOrganizer_avgWithDouble_withDouble_(total, quantity);
}

- (NetI2pRouterPeermanagerPeerProfile *)locked_getProfileWithNetI2pDataHash:(NetI2pDataHash *)peer {
  return NetI2pRouterPeermanagerProfileOrganizer_locked_getProfileWithNetI2pDataHash_(self, peer);
}

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches {
  NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_(self, peers, howMany, toExclude, matches);
}

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches
                                  withInt:(jint)mask {
  NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, peers, howMany, toExclude, matches, mask);
}

- (jboolean)notRestrictedWithNetI2pDataHash:(NetI2pDataHash *)peer
            withNetI2pRouterUtilMaskedIPSet:(NetI2pRouterUtilMaskedIPSet *)IPSet
                                    withInt:(jint)mask {
  return NetI2pRouterPeermanagerProfileOrganizer_notRestrictedWithNetI2pDataHash_withNetI2pRouterUtilMaskedIPSet_withInt_(self, peer, IPSet, mask);
}

- (void)locked_selectPeersWithJavaUtilMap:(id<JavaUtilMap>)peers
                                  withInt:(jint)howMany
                          withJavaUtilSet:(id<JavaUtilSet>)toExclude
                          withJavaUtilSet:(id<JavaUtilSet>)matches
                       withNetI2pDataHash:(NetI2pDataHash *)randomKey
withNetI2pRouterPeermanagerProfileOrganizer_Slice:(NetI2pRouterPeermanagerProfileOrganizer_Slice *)subTierMode {
  NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withNetI2pDataHash_withNetI2pRouterPeermanagerProfileOrganizer_Slice_(self, peers, howMany, toExclude, matches, randomKey, subTierMode);
}

- (jint)getSubTierWithNetI2pDataHash:(NetI2pDataHash *)peer
                  withNetI2pDataHash:(NetI2pDataHash *)randomKey {
  return NetI2pRouterPeermanagerProfileOrganizer_getSubTierWithNetI2pDataHash_withNetI2pDataHash_(self, peer, randomKey);
}

- (jboolean)isSelectableWithNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterNetworkDatabaseFacade *netDb = [((NetI2pRouterRouterContext *) nil_chk(_context_)) netDb];
  if (netDb == nil) return true;
  if ([_context_ router] == nil) return true;
  if (([_context_ banlist] != nil) && ([((NetI2pRouterBanlist *) nil_chk([_context_ banlist])) isBanlistedWithNetI2pDataHash:peer])) {
    return false;
  }
  NetI2pDataRouterRouterInfo *info = [((NetI2pRouterNetworkDatabaseFacade *) nil_chk([_context_ netDb])) lookupRouterInfoLocallyWithNetI2pDataHash:peer];
  if (nil != info) {
    if ([info isHidden]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$$", @"Peer ", [((NetI2pDataHash *) nil_chk(peer)) toBase64], @" is marked as hidden, disallowing its use")];
      return false;
    }
    else {
      jboolean exclude = NetI2pRouterTunnelPoolTunnelPeerSelector_shouldExcludeWithNetI2pRouterRouterContext_withNetI2pDataRouterRouterInfo_(_context_, info);
      if (exclude) {
        return false;
      }
      else {
        return true;
      }
    }
  }
  else {
    return false;
  }
}

- (void)locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile {
  NetI2pRouterPeermanagerProfileOrganizer_locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
}

- (jboolean)shouldDropWithNetI2pRouterPeermanagerPeerProfile:(NetI2pRouterPeermanagerPeerProfile *)profile {
  return NetI2pRouterPeermanagerProfileOrganizer_shouldDropWithNetI2pRouterPeermanagerPeerProfile_(self, profile);
}

- (jint)getMinimumFastPeers {
  jint def = JavaLangMath_minWithInt_withInt_(NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MAXIMUM_FAST_PEERS, (6 * [((id<JavaUtilSet>) nil_chk([((NetI2pRouterClientManagerFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clientManager])) listClients])) size]) + NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_FAST_PEERS - 2);
  return [_context_ getPropertyWithNSString:NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_FAST_PEERS withInt:def];
}

- (jint)getMaximumFastPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_FAST_PEERS;
}

- (jint)getMaximumHighCapPeers {
  return NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_HIGHCAP_PEERS;
}

- (jint)getMinimumHighCapacityPeers {
  return [((NetI2pRouterRouterContext *) nil_chk(_context_)) getPropertyWithNSString:NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_HIGH_CAPACITY_PEERS withInt:NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS];
}

+ (NSString *)numWithDouble:(jdouble)num {
  return NetI2pRouterPeermanagerProfileOrganizer_numWithDouble_(num);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterPeermanagerProfileOrganizer_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_fastPeers_);
  RELEASE_(_highCapacityPeers_);
  RELEASE_(_wellIntegratedPeers_);
  RELEASE_(_notFailingPeers_);
  RELEASE_(_notFailingPeersList_);
  RELEASE_(_failingPeers_);
  RELEASE_(_us_);
  RELEASE_(_persistenceHelper_);
  RELEASE_(_strictCapacityOrder_);
  RELEASE_(_comp_);
  RELEASE_(_reorganizeLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, 21, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 22, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 22, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, 29, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 29, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 30, 23, -1, 24, 31, -1 },
    { NULL, "V", 0x1, 30, 25, -1, 26, 32, -1 },
    { NULL, "V", 0x1, 33, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 33, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x1, 33, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x1, 38, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x2, 39, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 40, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 40, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x1, 41, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 43, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x2, 52, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x2, 53, 47, -1, 48, -1, -1 },
    { NULL, "D", 0x1a, 54, 55, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerPeerProfile;", 0x2, 56, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 58, -1, 59, -1, -1 },
    { NULL, "V", 0x2, 57, 60, -1, 61, -1, -1 },
    { NULL, "Z", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 64, -1, 65, -1, -1 },
    { NULL, "I", 0x2, 66, 67, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 68, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 70, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 73, 74, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getReadLock);
  methods[2].selector = @selector(tryReadLock);
  methods[3].selector = @selector(releaseReadLock);
  methods[4].selector = @selector(getWriteLock);
  methods[5].selector = @selector(releaseWriteLock);
  methods[6].selector = @selector(setUsWithNetI2pDataHash:);
  methods[7].selector = @selector(getUs);
  methods[8].selector = @selector(getSpeedThreshold);
  methods[9].selector = @selector(getCapacityThreshold);
  methods[10].selector = @selector(getIntegrationThreshold);
  methods[11].selector = @selector(getProfileWithNetI2pDataHash:);
  methods[12].selector = @selector(getProfileNonblockingWithNetI2pDataHash:);
  methods[13].selector = @selector(addProfileWithNetI2pRouterPeermanagerPeerProfile:);
  methods[14].selector = @selector(countWithJavaUtilMap:);
  methods[15].selector = @selector(countFastPeers);
  methods[16].selector = @selector(countHighCapacityPeers);
  methods[17].selector = @selector(countWellIntegratedPeers);
  methods[18].selector = @selector(countNotFailingPeers);
  methods[19].selector = @selector(countFailingPeers);
  methods[20].selector = @selector(countActivePeers);
  methods[21].selector = @selector(isXWithJavaUtilMap:withNetI2pDataHash:);
  methods[22].selector = @selector(isFastWithNetI2pDataHash:);
  methods[23].selector = @selector(isHighCapacityWithNetI2pDataHash:);
  methods[24].selector = @selector(isWellIntegratedWithNetI2pDataHash:);
  methods[25].selector = @selector(isFailingWithNetI2pDataHash:);
  methods[26].selector = @selector(clearProfiles);
  methods[27].selector = @selector(peerSendsBadRepliesWithNetI2pDataHash:);
  methods[28].selector = @selector(exportProfileWithNetI2pDataHash:withJavaIoOutputStream:);
  methods[29].selector = @selector(selectFastPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[30].selector = @selector(selectFastPeersWithInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[31].selector = @selector(selectFastPeersWithInt:withJavaUtilSet:withJavaUtilSet:withNetI2pDataHash:withNetI2pRouterPeermanagerProfileOrganizer_Slice:);
  methods[32].selector = @selector(selectHighCapacityPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[33].selector = @selector(selectHighCapacityPeersWithInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[34].selector = @selector(selectWellIntegratedPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[35].selector = @selector(selectWellIntegratedPeersWithInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[36].selector = @selector(selectNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[37].selector = @selector(selectNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[38].selector = @selector(selectNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:withBoolean:);
  methods[39].selector = @selector(selectNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:withBoolean:withInt:);
  methods[40].selector = @selector(selectActiveNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[41].selector = @selector(selectActiveNotFailingPeers2WithInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[42].selector = @selector(selectAllNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:withBoolean:);
  methods[43].selector = @selector(selectAllNotFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:withBoolean:withInt:);
  methods[44].selector = @selector(selectFailingPeersWithInt:withJavaUtilSet:withJavaUtilSet:);
  methods[45].selector = @selector(selectPeersLocallyUnreachable);
  methods[46].selector = @selector(selectPeersRecentlyRejecting);
  methods[47].selector = @selector(selectAllPeers);
  methods[48].selector = @selector(reorganize);
  methods[49].selector = @selector(reorganizeWithBoolean:);
  methods[50].selector = @selector(locked_promoteFastAsNecessary);
  methods[51].selector = @selector(locked_demoteFastAsNecessary);
  methods[52].selector = @selector(locked_demoteHighCapAsNecessary);
  methods[53].selector = @selector(locked_unfailAsNecessary);
  methods[54].selector = @selector(locked_calculateThresholdsWithJavaUtilSet:);
  methods[55].selector = @selector(locked_calculateCapacityThresholdWithDouble:withJavaUtilSet:);
  methods[56].selector = @selector(locked_calculateSpeedThresholdWithJavaUtilSet:);
  methods[57].selector = @selector(locked_calculateSpeedThresholdMeanWithJavaUtilSet:);
  methods[58].selector = @selector(avgWithDouble:withDouble:);
  methods[59].selector = @selector(locked_getProfileWithNetI2pDataHash:);
  methods[60].selector = @selector(locked_selectPeersWithJavaUtilMap:withInt:withJavaUtilSet:withJavaUtilSet:);
  methods[61].selector = @selector(locked_selectPeersWithJavaUtilMap:withInt:withJavaUtilSet:withJavaUtilSet:withInt:);
  methods[62].selector = @selector(notRestrictedWithNetI2pDataHash:withNetI2pRouterUtilMaskedIPSet:withInt:);
  methods[63].selector = @selector(locked_selectPeersWithJavaUtilMap:withInt:withJavaUtilSet:withJavaUtilSet:withNetI2pDataHash:withNetI2pRouterPeermanagerProfileOrganizer_Slice:);
  methods[64].selector = @selector(getSubTierWithNetI2pDataHash:withNetI2pDataHash:);
  methods[65].selector = @selector(isSelectableWithNetI2pDataHash:);
  methods[66].selector = @selector(locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile:);
  methods[67].selector = @selector(shouldDropWithNetI2pRouterPeermanagerPeerProfile:);
  methods[68].selector = @selector(getMinimumFastPeers);
  methods[69].selector = @selector(getMaximumFastPeers);
  methods[70].selector = @selector(getMaximumHighCapPeers);
  methods[71].selector = @selector(getMinimumHighCapacityPeers);
  methods[72].selector = @selector(numWithDouble:);
  methods[73].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fastPeers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_highCapacityPeers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_wellIntegratedPeers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_notFailingPeers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_notFailingPeersList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 76, -1 },
    { "_failingPeers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 75, -1 },
    { "_us_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_persistenceHelper_", "LNetI2pRouterPeermanagerProfilePersistenceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_strictCapacityOrder_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 77, -1 },
    { "_thresholdSpeedValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_thresholdCapacityValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_thresholdIntegrationValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_comp_", "LNetI2pRouterPeermanagerInverseCapacityComparator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PROP_MINIMUM_FAST_PEERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "DEFAULT_MINIMUM_FAST_PEERS", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_FAST_PEERS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAXIMUM_FAST_PEERS", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MAXIMUM_FAST_PEERS, 0x1a, -1, -1, -1, -1 },
    { "ABSOLUTE_MAX_FAST_PEERS", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_FAST_PEERS, 0x1a, -1, -1, -1, -1 },
    { "PROP_MINIMUM_HIGH_CAPACITY_PEERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_DEFAULT_MINIMUM_HIGH_CAPACITY_PEERS, 0x19, -1, -1, -1, -1 },
    { "ABSOLUTE_MAX_HIGHCAP_PEERS", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_ABSOLUTE_MAX_HIGHCAP_PEERS, 0x1a, -1, -1, -1, -1 },
    { "_reorganizeLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_BAD_REPLIES_PER_HOUR", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_MAX_BAD_REPLIES_PER_HOUR, 0x1a, -1, -1, -1, -1 },
    { "MIN_EXPIRE_TIME", "J", .constantValue.asLong = NetI2pRouterPeermanagerProfileOrganizer_MIN_EXPIRE_TIME, 0x1a, -1, -1, -1, -1 },
    { "MAX_EXPIRE_TIME", "J", .constantValue.asLong = NetI2pRouterPeermanagerProfileOrganizer_MAX_EXPIRE_TIME, 0x1a, -1, -1, -1, -1 },
    { "ADJUST_EXPIRE_TIME", "J", .constantValue.asLong = NetI2pRouterPeermanagerProfileOrganizer_ADJUST_EXPIRE_TIME, 0x1a, -1, -1, -1, -1 },
    { "ENOUGH_PROFILES", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_ENOUGH_PROFILES, 0x1a, -1, -1, -1, -1 },
    { "_currentExpireTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MIN_NOT_FAILING_ACTIVE", "I", .constantValue.asInt = NetI2pRouterPeermanagerProfileOrganizer_MIN_NOT_FAILING_ACTIVE, 0x1a, -1, -1, -1, -1 },
    { "_fmt", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "setUs", "LNetI2pDataHash;", "getProfile", "getProfileNonblocking", "addProfile", "LNetI2pRouterPeermanagerPeerProfile;", "count", "LJavaUtilMap;", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;)I", (void *)&NetI2pRouterPeermanagerProfileOrganizer__Annotations$0, "isX", "LJavaUtilMap;LNetI2pDataHash;", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;Lnet/i2p/data/Hash;)Z", "isFast", "isHighCapacity", "isWellIntegrated", "isFailing", "peerSendsBadReplies", "exportProfile", "LNetI2pDataHash;LJavaIoOutputStream;", "LJavaIoIOException;", "selectFastPeers", "ILJavaUtilSet;LJavaUtilSet;", "(ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;)V", "ILJavaUtilSet;LJavaUtilSet;I", "(ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;I)V", "ILJavaUtilSet;LJavaUtilSet;LNetI2pDataHash;LNetI2pRouterPeermanagerProfileOrganizer_Slice;", "(ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/ProfileOrganizer$Slice;)V", "selectHighCapacityPeers", "selectWellIntegratedPeers", (void *)&NetI2pRouterPeermanagerProfileOrganizer__Annotations$1, (void *)&NetI2pRouterPeermanagerProfileOrganizer__Annotations$2, "selectNotFailingPeers", "ILJavaUtilSet;LJavaUtilSet;Z", "(ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;Z)V", "ILJavaUtilSet;LJavaUtilSet;ZI", "(ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;ZI)V", "selectActiveNotFailingPeers", "selectActiveNotFailingPeers2", "selectAllNotFailingPeers", "selectFailingPeers", "()Ljava/util/List<Lnet/i2p/data/Hash;>;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "reorganize", "Z", "locked_calculateThresholds", "LJavaUtilSet;", "(Ljava/util/Set<Lnet/i2p/router/peermanager/PeerProfile;>;)V", "locked_calculateCapacityThreshold", "DLJavaUtilSet;", "(DLjava/util/Set<Lnet/i2p/router/peermanager/PeerProfile;>;)V", "locked_calculateSpeedThreshold", "locked_calculateSpeedThresholdMean", "avg", "DD", "locked_getProfile", "locked_selectPeers", "LJavaUtilMap;ILJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;)V", "LJavaUtilMap;ILJavaUtilSet;LJavaUtilSet;I", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;I)V", "notRestricted", "LNetI2pDataHash;LNetI2pRouterUtilMaskedIPSet;I", "LJavaUtilMap;ILJavaUtilSet;LJavaUtilSet;LNetI2pDataHash;LNetI2pRouterPeermanagerProfileOrganizer_Slice;", "(Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;ILjava/util/Set<Lnet/i2p/data/Hash;>;Ljava/util/Set<Lnet/i2p/data/Hash;>;Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/ProfileOrganizer$Slice;)V", "getSubTier", "LNetI2pDataHash;LNetI2pDataHash;", "isSelectable", "locked_placeProfile", "shouldDrop", "num", "D", "main", "[LNSString;", "Ljava/util/Map<Lnet/i2p/data/Hash;Lnet/i2p/router/peermanager/PeerProfile;>;", "Ljava/util/List<Lnet/i2p/data/Hash;>;", "Ljava/util/Set<Lnet/i2p/router/peermanager/PeerProfile;>;", &NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_FAST_PEERS, &NetI2pRouterPeermanagerProfileOrganizer_PROP_MINIMUM_HIGH_CAPACITY_PEERS, &NetI2pRouterPeermanagerProfileOrganizer__fmt, "LNetI2pRouterPeermanagerProfileOrganizer_Slice;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerProfileOrganizer = { "ProfileOrganizer", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x1, 74, 31, -1, 81, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerProfileOrganizer;
}

+ (void)initialize {
  if (self == [NetI2pRouterPeermanagerProfileOrganizer class]) {
    JreStrongAssignAndConsume(&NetI2pRouterPeermanagerProfileOrganizer__fmt, new_JavaTextDecimalFormat_initWithNSString_withJavaTextDecimalFormatSymbols_(@"###,##0.00", create_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, UK))));
    J2OBJC_SET_INITIALIZED(NetI2pRouterPeermanagerProfileOrganizer)
  }
}

@end

void NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterRouterContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_reorganizeLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(false));
  self->_currentExpireTime_ = NetI2pRouterPeermanagerProfileOrganizer_MAX_EXPIRE_TIME;
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerProfileOrganizer_class_()]);
  JreStrongAssignAndConsume(&self->_comp_, new_NetI2pRouterPeermanagerInverseCapacityComparator_init());
  JreStrongAssignAndConsume(&self->_fastPeers_, new_JavaUtilHashMap_initWithInt_(32));
  JreStrongAssignAndConsume(&self->_highCapacityPeers_, new_JavaUtilHashMap_initWithInt_(64));
  JreStrongAssignAndConsume(&self->_wellIntegratedPeers_, new_JavaUtilHashMap_initWithInt_(128));
  JreStrongAssignAndConsume(&self->_notFailingPeers_, new_JavaUtilHashMap_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_notFailingPeersList_, new_JavaUtilArrayList_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_failingPeers_, new_JavaUtilHashMap_initWithInt_(16));
  JreStrongAssignAndConsume(&self->_strictCapacityOrder_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(self->_comp_));
  JreStrongAssignAndConsume(&self->_persistenceHelper_, new_NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(self->_context_));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) statManager])) createRateStatWithNSString:@"peer.profileSortTime" withNSString:@"How long the reorg takes sorting peers" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"peer.profileCoalesceTime" withNSString:@"How long the reorg takes coalescing peer stats" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"peer.profileThresholdTime" withNSString:@"How long the reorg takes determining the tier thresholds" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"peer.profilePlaceTime" withNSString:@"How long the reorg takes placing peers in the tiers" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRateStatWithNSString:@"peer.profileReorgTime" withNSString:@"How long the reorg takes overall" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->_context_ statManager])) createRequiredRateStatWithNSString:@"peer.failedLookupRate" withNSString:@"Net DB Lookup fail rate" withNSString:@"Peers" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]];
}

NetI2pRouterPeermanagerProfileOrganizer *new_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerProfileOrganizer, initWithNetI2pRouterRouterContext_, context)
}

NetI2pRouterPeermanagerProfileOrganizer *create_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerProfileOrganizer, initWithNetI2pRouterRouterContext_, context)
}

void NetI2pRouterPeermanagerProfileOrganizer_getReadLock(NetI2pRouterPeermanagerProfileOrganizer *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_reorganizeLock_)) readLock])) lock];
}

jboolean NetI2pRouterPeermanagerProfileOrganizer_tryReadLock(NetI2pRouterPeermanagerProfileOrganizer *self) {
  return [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_reorganizeLock_)) readLock])) tryLock];
}

void NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(NetI2pRouterPeermanagerProfileOrganizer *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_reorganizeLock_)) readLock])) unlock];
}

jboolean NetI2pRouterPeermanagerProfileOrganizer_getWriteLock(NetI2pRouterPeermanagerProfileOrganizer *self) {
  @try {
    jboolean rv = [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_reorganizeLock_)) writeLock])) tryLockWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    if ((!rv) && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$I", @"no lock, size is: ", [self->_reorganizeLock_ getQueueLength]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"rats")];
    return rv;
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  return false;
}

void NetI2pRouterPeermanagerProfileOrganizer_releaseWriteLock(NetI2pRouterPeermanagerProfileOrganizer *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_reorganizeLock_)) writeLock])) unlock];
}

jint NetI2pRouterPeermanagerProfileOrganizer_countWithJavaUtilMap_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> m) {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    return [((id<JavaUtilMap>) nil_chk(m)) size];
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
}

jboolean NetI2pRouterPeermanagerProfileOrganizer_isXWithJavaUtilMap_withNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> m, NetI2pDataHash *peer) {
  NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
  @try {
    return [((id<JavaUtilMap>) nil_chk(m)) containsKeyWithId:peer];
  }
  @finally {
    NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_selectActiveNotFailingPeers2WithInt_withJavaUtilSet_withJavaUtilSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, jint howMany, id<JavaUtilSet> exclude, id<JavaUtilSet> matches, jint mask) {
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    id<JavaUtilSet> connected = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) commSystem])) getEstablished];
    id<JavaUtilMap> activePeers = create_JavaUtilHashMap_initWithInt_([((id<JavaUtilSet>) nil_chk(connected)) size]);
    NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
    @try {
      for (NetI2pDataHash * __strong peer in connected) {
        NetI2pRouterPeermanagerPeerProfile *prof = [((id<JavaUtilMap>) nil_chk(self->_notFailingPeers_)) getWithId:peer];
        if (prof != nil) [activePeers putWithId:peer withId:prof];
      }
      NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, activePeers, howMany, exclude, matches, mask);
    }
    @finally {
      NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
    }
  }
  if ([matches size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$", @"selectANFP2(", howMany, @"), not enough ANFP (", [matches size], @") going on to notFailing")];
    [self selectNotFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches withInt:mask];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$IC", @"selectANFP2(", howMany, @"), found enough ANFP (", [matches size], ')')];
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_selectAllNotFailingPeersWithInt_withJavaUtilSet_withJavaUtilSet_withBoolean_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, jint howMany, id<JavaUtilSet> exclude, id<JavaUtilSet> matches, jboolean onlyNotFailing, jint mask) {
  if ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) {
    jint orig = [matches size];
    jint needed = howMany - orig;
    id<JavaUtilList> selected = create_JavaUtilArrayList_initWithInt_(needed);
    NetI2pRouterPeermanagerProfileOrganizer_getReadLock(self);
    @try {
      for (id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(self->_notFailingPeersList_); ([selected size] < needed) && [iter hasNext]; ) {
        NetI2pDataHash *cur = [iter next];
        if ([matches containsWithId:cur] || (exclude != nil && [exclude containsWithId:cur])) {
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$Z$@$$", @"matched? ", [matches containsWithId:cur], @" exclude: ", exclude, @" cur=", [((NetI2pDataHash *) nil_chk(cur)) toBase64])];
          continue;
        }
        else if (onlyNotFailing && [((id<JavaUtilMap>) nil_chk(self->_highCapacityPeers_)) containsKeyWithId:cur]) {
          continue;
        }
        else {
          if ([self isSelectableWithNetI2pDataHash:cur]) [selected addWithId:cur];
          else if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$", @"Not selectable: ", [((NetI2pDataHash *) nil_chk(cur)) toBase64])];
        }
      }
    }
    @finally {
      NetI2pRouterPeermanagerProfileOrganizer_releaseReadLock(self);
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$Z$I$@$I$I", @"Selecting all not failing (strict? ", onlyNotFailing, @") found ", [selected size], @" new peers: ", selected, @" all=", [((id<JavaUtilList>) nil_chk(self->_notFailingPeersList_)) size], @" strict=", [((id<JavaUtilSet>) nil_chk(self->_strictCapacityOrder_)) size])];
    [matches addAllWithJavaUtilCollection:selected];
  }
  if ([matches size] < howMany) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I$", @"selectAllNotFailing(", howMany, @"), not enough (", [matches size], @") going on to failing")];
    [self selectFailingPeersWithInt:howMany withJavaUtilSet:exclude withJavaUtilSet:matches];
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$IC", @"selectAllNotFailing(", howMany, @"), enough (", [matches size], ')')];
  }
  return;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_promoteFastAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self) {
  jint minFastPeers = [self getMinimumFastPeers];
  jint numToPromote = minFastPeers - [((id<JavaUtilMap>) nil_chk(self->_fastPeers_)) size];
  if (numToPromote > 0) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$", @"Need to explicitly promote ", numToPromote, @" peers to the fast group")];
    for (NetI2pRouterPeermanagerPeerProfile * __strong cur in nil_chk(self->_strictCapacityOrder_)) {
      if ((![self->_fastPeers_ containsKeyWithId:[((NetI2pRouterPeermanagerPeerProfile *) nil_chk(cur)) getPeer]]) && (![cur getIsFailing])) {
        if (![self isSelectableWithNetI2pDataHash:[cur getPeer]]) {
          continue;
        }
        if (![cur getIsActive]) {
          continue;
        }
        if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$$", @"Fast promoting: ", [((NetI2pDataHash *) nil_chk([cur getPeer])) toBase64])];
        [self->_fastPeers_ putWithId:[cur getPeer] withId:cur];
        numToPromote--;
        if (numToPromote <= 0) break;
      }
    }
  }
  return;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_demoteFastAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self) {
  jint maxFastPeers = [self getMaximumFastPeers];
  jint numToDemote = [((id<JavaUtilMap>) nil_chk(self->_fastPeers_)) size] - maxFastPeers;
  if (numToDemote > 0) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$", @"Need to explicitly demote ", numToDemote, @" peers from the fast group")];
    id<JavaUtilSet> sorted = create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_NetI2pRouterPeermanagerSpeedComparator_init());
    [sorted addAllWithJavaUtilCollection:[self->_fastPeers_ values]];
    id<JavaUtilIterator> iter = [sorted iterator];
    for (jint i = 0; i < numToDemote && [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; i++) {
      [self->_fastPeers_ removeWithId:[((NetI2pRouterPeermanagerPeerProfile *) nil_chk([((id<JavaUtilIterator>) nil_chk(iter)) next])) getPeer]];
    }
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_demoteHighCapAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self) {
  jint maxHighCapPeers = [self getMaximumHighCapPeers];
  jint numToDemote = [((id<JavaUtilMap>) nil_chk(self->_highCapacityPeers_)) size] - maxHighCapPeers;
  if (numToDemote > 0) {
    id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(self->_strictCapacityOrder_)) iterator];
    for (jint i = 0; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && i < maxHighCapPeers; ) {
      if ([self->_highCapacityPeers_ containsKeyWithId:[((NetI2pRouterPeermanagerPeerProfile *) nil_chk([iter next])) getPeer]]) i++;
    }
    for (jint i = 0; [iter hasNext] && i < numToDemote; ) {
      NetI2pDataHash *h = [((NetI2pRouterPeermanagerPeerProfile *) nil_chk([iter next])) getPeer];
      if ([self->_highCapacityPeers_ removeWithId:h] != nil) {
        [((id<JavaUtilMap>) nil_chk(self->_fastPeers_)) removeWithId:h];
        i++;
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$I$I", @"Demoted ", numToDemote, @" peers from high cap, size now ", [self->_highCapacityPeers_ size])];
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_unfailAsNecessary(NetI2pRouterPeermanagerProfileOrganizer *self) {
  jint notFailingActive = 0;
  for (NetI2pRouterPeermanagerPeerProfile * __strong peer in nil_chk([((id<JavaUtilMap>) nil_chk(self->_notFailingPeers_)) values])) {
    if ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(peer)) getIsActive]) notFailingActive++;
    if (notFailingActive >= NetI2pRouterPeermanagerProfileOrganizer_MIN_NOT_FAILING_ACTIVE) {
      return;
    }
  }
  jint needToUnfail = NetI2pRouterPeermanagerProfileOrganizer_MIN_NOT_FAILING_ACTIVE - notFailingActive;
  if (needToUnfail > 0) {
    jint unfailed = 0;
    for (NetI2pRouterPeermanagerPeerProfile * __strong best in nil_chk(self->_strictCapacityOrder_)) {
      if (([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(best)) getIsActive]) && ([best getIsFailing])) {
        if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$C", @"All peers were failing, so we have overridden the failing flag for one of the most reliable active peers (", [((NetI2pDataHash *) nil_chk([best getPeer])) toBase64], ')')];
        [best setIsFailingWithBoolean:false];
        NetI2pRouterPeermanagerProfileOrganizer_locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile_(self, best);
        unfailed++;
      }
      if (unfailed >= needToUnfail) break;
    }
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateThresholdsWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> allPeers) {
  jdouble totalCapacity = 0;
  jdouble totalIntegration = 0;
  id<JavaUtilSet> reordered = create_JavaUtilTreeSet_initWithJavaUtilComparator_(self->_comp_);
  for (NetI2pRouterPeermanagerPeerProfile * __strong profile in nil_chk(allPeers)) {
    if ([((NetI2pDataHash *) nil_chk(self->_us_)) isEqual:[((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getPeer]]) continue;
    if ([profile getIsFailing] || (![profile getIsActive])) continue;
    JrePlusAssignDoubleD(&totalCapacity, [profile getCapacityValue]);
    JrePlusAssignDoubleD(&totalIntegration, [profile getIntegrationValue]);
    [reordered addWithId:profile];
  }
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateCapacityThresholdWithDouble_withJavaUtilSet_(self, totalCapacity, reordered);
  NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdWithJavaUtilSet_(self, reordered);
  if (totalIntegration > 0) self->_thresholdIntegrationValue_ = 1.0 * NetI2pRouterPeermanagerProfileOrganizer_avgWithDouble_withDouble_(totalIntegration, [reordered size]);
  else self->_thresholdIntegrationValue_ = 1.0;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateCapacityThresholdWithDouble_withJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, jdouble totalCapacity, id<JavaUtilSet> reordered) {
  jint numNotFailing = [((id<JavaUtilSet>) nil_chk(reordered)) size];
  jdouble meanCapacity = NetI2pRouterPeermanagerProfileOrganizer_avgWithDouble_withDouble_(totalCapacity, numNotFailing);
  jint minHighCapacityPeers = [self getMinimumHighCapacityPeers];
  jint numExceedingMean = 0;
  jdouble thresholdAtMedian = 0;
  jdouble thresholdAtMinHighCap = 0;
  jdouble thresholdAtLowest = NetI2pRouterPeermanagerCapacityCalculator_GROWTH_FACTOR;
  jint cur = 0;
  for (NetI2pRouterPeermanagerPeerProfile * __strong profile in reordered) {
    jdouble val = [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getCapacityValue];
    if (val > meanCapacity) numExceedingMean++;
    if (cur == [reordered size] / 2) thresholdAtMedian = val;
    if (cur == minHighCapacityPeers - 1) thresholdAtMinHighCap = val;
    if (cur == [reordered size] - 1) thresholdAtLowest = val;
    cur++;
  }
  if (numExceedingMean >= minHighCapacityPeers) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$D$I", @"Our average capacity is doing well [", meanCapacity, @"], and includes ", numExceedingMean)];
    self->_thresholdCapacityValue_ = meanCapacity;
  }
  else if (meanCapacity > thresholdAtMedian && [reordered size] / 2 > minHighCapacityPeers) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$D$D", @"Our average capacity [", meanCapacity, @"] is greater than the median, so threshold is that reqd to get the min high cap peers ", thresholdAtMinHighCap)];
    self->_thresholdCapacityValue_ = thresholdAtMinHighCap;
  }
  else if ([reordered size] / 2 >= minHighCapacityPeers) {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$D$D", @"Our average capacity [", meanCapacity, @"] is skewed under the median, so use the median threshold ", thresholdAtMedian)];
    self->_thresholdCapacityValue_ = thresholdAtMedian;
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$D$I", @"Our average capacity is doing well [", meanCapacity, @"], but there aren't enough of them ", numExceedingMean)];
    self->_thresholdCapacityValue_ = JavaLangMath_maxWithDouble_withDouble_(thresholdAtMinHighCap, thresholdAtLowest);
  }
  if (self->_thresholdCapacityValue_ <= NetI2pRouterPeermanagerCapacityCalculator_GROWTH_FACTOR) self->_thresholdCapacityValue_ = NetI2pRouterPeermanagerCapacityCalculator_GROWTH_FACTOR + 0.0001;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> reordered) {
  {
    NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdMeanWithJavaUtilSet_(self, reordered);
    return;
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_calculateSpeedThresholdMeanWithJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilSet> reordered) {
  jdouble total = 0;
  jint count = 0;
  for (NetI2pRouterPeermanagerPeerProfile * __strong profile in nil_chk(reordered)) {
    if ([((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getCapacityValue] >= self->_thresholdCapacityValue_) {
      JrePlusAssignDoubleD(&total, [profile getSpeedValue]);
      count++;
    }
    else {
      break;
    }
  }
  if (count > 0) self->_thresholdSpeedValue_ = total / count;
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$D$I", @"Threshold value for speed: ", self->_thresholdSpeedValue_, @" out of speeds: ", count)];
}

jdouble NetI2pRouterPeermanagerProfileOrganizer_avgWithDouble_withDouble_(jdouble total, jdouble quantity) {
  NetI2pRouterPeermanagerProfileOrganizer_initialize();
  if ((total > 0) && (quantity > 0)) return total / quantity;
  else return 0.0;
}

NetI2pRouterPeermanagerPeerProfile *NetI2pRouterPeermanagerProfileOrganizer_locked_getProfileWithNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer) {
  NetI2pRouterPeermanagerPeerProfile *cur = [((id<JavaUtilMap>) nil_chk(self->_notFailingPeers_)) getWithId:peer];
  if (cur != nil) return cur;
  cur = [((id<JavaUtilMap>) nil_chk(self->_failingPeers_)) getWithId:peer];
  return cur;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches) {
  NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(self, peers, howMany, toExclude, matches, 0);
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches, jint mask) {
  id<JavaUtilList> all = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(peers)) keySet]);
  NetI2pRouterUtilMaskedIPSet *IPSet = create_NetI2pRouterUtilMaskedIPSet_initWithInt_(16);
  for (id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(all); ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) && [iter hasNext]; ) {
    NetI2pDataHash *peer = [iter next];
    if (toExclude != nil && [toExclude containsWithId:peer]) continue;
    if ([matches containsWithId:peer]) continue;
    if ([((NetI2pDataHash *) nil_chk(self->_us_)) isEqual:peer]) continue;
    jboolean ok = [self isSelectableWithNetI2pDataHash:peer];
    if (ok) {
      ok = (mask <= 0 || NetI2pRouterPeermanagerProfileOrganizer_notRestrictedWithNetI2pDataHash_withNetI2pRouterUtilMaskedIPSet_withInt_(self, peer, IPSet, mask));
      if ((!ok) && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$@$@", @"IP restriction prevents ", peer, @" from joining ", matches)];
    }
    if (ok) [matches addWithId:peer];
    else [matches removeWithId:peer];
  }
}

jboolean NetI2pRouterPeermanagerProfileOrganizer_notRestrictedWithNetI2pDataHash_withNetI2pRouterUtilMaskedIPSet_withInt_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer, NetI2pRouterUtilMaskedIPSet *IPSet, jint mask) {
  id<JavaUtilSet> peerIPs = create_NetI2pRouterUtilMaskedIPSet_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withInt_(self->_context_, peer, mask);
  if ([((NetI2pRouterUtilMaskedIPSet *) nil_chk(IPSet)) containsAnyWithJavaUtilSet:peerIPs]) return false;
  [IPSet addAllWithJavaUtilCollection:peerIPs];
  return true;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_selectPeersWithJavaUtilMap_withInt_withJavaUtilSet_withJavaUtilSet_withNetI2pDataHash_withNetI2pRouterPeermanagerProfileOrganizer_Slice_(NetI2pRouterPeermanagerProfileOrganizer *self, id<JavaUtilMap> peers, jint howMany, id<JavaUtilSet> toExclude, id<JavaUtilSet> matches, NetI2pDataHash *randomKey, NetI2pRouterPeermanagerProfileOrganizer_Slice *subTierMode) {
  id<JavaUtilList> all = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(peers)) keySet]);
  for (id<JavaUtilIterator> iter = create_NetI2pRouterUtilRandomIterator_initWithJavaUtilList_(all); ([((id<JavaUtilSet>) nil_chk(matches)) size] < howMany) && [iter hasNext]; ) {
    NetI2pDataHash *peer = [iter next];
    if (toExclude != nil && [toExclude containsWithId:peer]) continue;
    if ([matches containsWithId:peer]) continue;
    if ([((NetI2pDataHash *) nil_chk(self->_us_)) isEqual:peer]) continue;
    jint subTier = NetI2pRouterPeermanagerProfileOrganizer_getSubTierWithNetI2pDataHash_withNetI2pDataHash_(self, peer, randomKey);
    if ((subTier & ((NetI2pRouterPeermanagerProfileOrganizer_Slice *) nil_chk(subTierMode))->mask_) != subTierMode->val_) continue;
    jboolean ok = [self isSelectableWithNetI2pDataHash:peer];
    if (ok) [matches addWithId:peer];
    else [matches removeWithId:peer];
  }
}

jint NetI2pRouterPeermanagerProfileOrganizer_getSubTierWithNetI2pDataHash_withNetI2pDataHash_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pDataHash *peer, NetI2pDataHash *randomKey) {
  IOSByteArray *data = [IOSByteArray arrayWithLength:96];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(peer)) getData], 0, data, 0, 32);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(randomKey)) getData], 0, data, 32, 32);
  [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) sha])) calculateHashWithByteArray:data withInt:0 withInt:64 withByteArray:data withInt:64];
  return IOSByteArray_Get(data, 64) & (jint) 0x03;
}

void NetI2pRouterPeermanagerProfileOrganizer_locked_placeProfileWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterPeermanagerPeerProfile *profile) {
  NetI2pDataHash *peer = [((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getPeer];
  if ([profile getIsFailing]) {
    if (!NetI2pRouterPeermanagerProfileOrganizer_shouldDropWithNetI2pRouterPeermanagerPeerProfile_(self, profile)) [((id<JavaUtilMap>) nil_chk(self->_failingPeers_)) putWithId:peer withId:profile];
    [((id<JavaUtilMap>) nil_chk(self->_fastPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_highCapacityPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_wellIntegratedPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_notFailingPeers_)) removeWithId:peer];
    [((id<JavaUtilList>) nil_chk(self->_notFailingPeersList_)) removeWithId:peer];
  }
  else {
    [((id<JavaUtilMap>) nil_chk(self->_failingPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_fastPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_highCapacityPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_wellIntegratedPeers_)) removeWithId:peer];
    [((id<JavaUtilMap>) nil_chk(self->_notFailingPeers_)) putWithId:peer withId:profile];
    [((id<JavaUtilList>) nil_chk(self->_notFailingPeersList_)) addWithId:peer];
    if (self->_thresholdCapacityValue_ <= [profile getCapacityValue] && [self isSelectableWithNetI2pDataHash:peer] && ![((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) commSystem])) isInBadCountryWithNetI2pDataHash:peer]) {
      [self->_highCapacityPeers_ putWithId:peer withId:profile];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"High capacity: \t", peer)];
      if (self->_thresholdSpeedValue_ <= [profile getSpeedValue]) {
        if (![profile getIsActive]) {
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Skipping fast mark [!active] for ", peer)];
        }
        else {
          [self->_fastPeers_ putWithId:peer withId:profile];
          if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Fast: \t", peer)];
        }
      }
    }
    else {
    }
    if (self->_thresholdIntegrationValue_ <= [profile getIntegrationValue]) {
      [self->_wellIntegratedPeers_ putWithId:peer withId:profile];
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Integrated: \t", peer)];
    }
  }
}

jboolean NetI2pRouterPeermanagerProfileOrganizer_shouldDropWithNetI2pRouterPeermanagerPeerProfile_(NetI2pRouterPeermanagerProfileOrganizer *self, NetI2pRouterPeermanagerPeerProfile *profile) {
  return false;
}

NSString *NetI2pRouterPeermanagerProfileOrganizer_numWithDouble_(jdouble num) {
  NetI2pRouterPeermanagerProfileOrganizer_initialize();
  @synchronized(NetI2pRouterPeermanagerProfileOrganizer__fmt) {
    return JreRetainedLocalValue([((JavaTextDecimalFormat *) nil_chk(NetI2pRouterPeermanagerProfileOrganizer__fmt)) formatWithDouble:num]);
  }
}

void NetI2pRouterPeermanagerProfileOrganizer_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pRouterPeermanagerProfileOrganizer_initialize();
  NetI2pRouterRouterContext *ctx = create_NetI2pRouterRouterContext_initWithNetI2pRouterRouter_(nil);
  NetI2pRouterPeermanagerProfileOrganizer *organizer = create_NetI2pRouterPeermanagerProfileOrganizer_initWithNetI2pRouterRouterContext_(ctx);
  [organizer setUsWithNetI2pDataHash:JreLoadStatic(NetI2pDataHash, FAKE_HASH)];
  NetI2pRouterPeermanagerProfilePersistenceHelper *helper = create_NetI2pRouterPeermanagerProfilePersistenceHelper_initWithNetI2pRouterRouterContext_(ctx);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
    NetI2pRouterPeermanagerPeerProfile *profile = [helper readProfileWithJavaIoFile:create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, i))];
    if (profile == nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Could not load profile ", IOSObjectArray_Get(args, i))];
      continue;
    }
    [organizer addProfileWithNetI2pRouterPeermanagerPeerProfile:profile];
  }
  [organizer reorganize];
  JavaTextDecimalFormat *fmt = create_JavaTextDecimalFormat_initWithNSString_(@"0,000.0");
  [fmt setPositivePrefixWithNSString:@"+"];
  for (NetI2pDataHash * __strong peer in nil_chk([organizer selectAllPeers])) {
    NetI2pRouterPeermanagerPeerProfile *profile = [organizer getProfileWithNetI2pDataHash:peer];
    if (![((NetI2pRouterPeermanagerPeerProfile *) nil_chk(profile)) getIsActive]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$$$$$$$Z$Z", @"Peer ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([profile getPeer])) toBase64])) java_substring:0 endIndex:4], @" [", ([organizer isFastWithNetI2pDataHash:peer] ? @"IF+R" : [organizer isHighCapacityWithNetI2pDataHash:peer] ? @"IR  " : [organizer isFailingWithNetI2pDataHash:peer] ? @"IX  " : @"I   "), @"]: \t Speed:\t", [fmt formatWithDouble:[profile getSpeedValue]], @" Capacity:\t", [fmt formatWithDouble:[profile getCapacityValue]], @" Integration:\t", [fmt formatWithDouble:[profile getIntegrationValue]], @" Active?\t", [profile getIsActive], @" Failing?\t", [profile getIsFailing])];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$$$$$$$Z$Z", @"Peer ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk([profile getPeer])) toBase64])) java_substring:0 endIndex:4], @" [", ([organizer isFastWithNetI2pDataHash:peer] ? @"F+R " : [organizer isHighCapacityWithNetI2pDataHash:peer] ? @"R   " : [organizer isFailingWithNetI2pDataHash:peer] ? @"X   " : @"    "), @"]: \t Speed:\t", [fmt formatWithDouble:[profile getSpeedValue]], @" Capacity:\t", [fmt formatWithDouble:[profile getCapacityValue]], @" Integration:\t", [fmt formatWithDouble:[profile getIntegrationValue]], @" Active?\t", [profile getIsActive], @" Failing?\t", [profile getIsFailing])];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Thresholds:"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I$", @"Speed:       ", NetI2pRouterPeermanagerProfileOrganizer_numWithDouble_([organizer getSpeedThreshold]), @" (", [organizer countFastPeers], @" fast peers)")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I$", @"Capacity:    ", NetI2pRouterPeermanagerProfileOrganizer_numWithDouble_([organizer getCapacityThreshold]), @" (", [organizer countHighCapacityPeers], @" reliable peers)")];
}

IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerProfileOrganizer)

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPeermanagerProfileOrganizer_Slice)

NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_values_[7];

@implementation NetI2pRouterPeermanagerProfileOrganizer_Slice

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_ALL {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_0_1 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_2_3 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_0 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_1 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_1);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_2 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2);
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)SLICE_3 {
  return JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_3);
}

+ (IOSObjectArray *)values {
  return NetI2pRouterPeermanagerProfileOrganizer_Slice_values();
}

+ (NetI2pRouterPeermanagerProfileOrganizer_Slice *)valueOfWithNSString:(NSString *)name {
  return NetI2pRouterPeermanagerProfileOrganizer_Slice_valueOfWithNSString_(name);
}

- (NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum)toNSEnum {
  return (NetI2pRouterPeermanagerProfileOrganizer_Slice_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pRouterPeermanagerProfileOrganizer_Slice;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SLICE_ALL", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SLICE_0_1", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SLICE_2_3", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "SLICE_0", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SLICE_1", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "SLICE_2", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "SLICE_3", "LNetI2pRouterPeermanagerProfileOrganizer_Slice;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "mask_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "val_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_1), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2), &JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_3), "LNetI2pRouterPeermanagerProfileOrganizer;", "Ljava/lang/Enum<Lnet/i2p/router/peermanager/ProfileOrganizer$Slice;>;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerProfileOrganizer_Slice = { "Slice", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x4019, 2, 9, 9, -1, -1, 10, -1 };
  return &_NetI2pRouterPeermanagerProfileOrganizer_Slice;
}

+ (void)initialize {
  if (self == [NetI2pRouterPeermanagerProfileOrganizer_Slice class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_ALL) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x00, 0, @"SLICE_ALL", 0);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0_1) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x02, 0, @"SLICE_0_1", 1);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2_3) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x02, 2, @"SLICE_2_3", 2);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_0) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x03, 0, @"SLICE_0", 3);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_1) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x03, 1, @"SLICE_1", 4);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_2) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x03, 2, @"SLICE_2", 5);
    ((void) (JreEnum(NetI2pRouterPeermanagerProfileOrganizer_Slice, SLICE_3) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(e, (jint) 0x03, 3, @"SLICE_3", 6);
    J2OBJC_SET_INITIALIZED(NetI2pRouterPeermanagerProfileOrganizer_Slice)
  }
}

@end

void NetI2pRouterPeermanagerProfileOrganizer_Slice_initWithInt_withInt_withNSString_withInt_(NetI2pRouterPeermanagerProfileOrganizer_Slice *self, jint mask, jint val, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->mask_ = mask;
  self->val_ = val;
}

IOSObjectArray *NetI2pRouterPeermanagerProfileOrganizer_Slice_values() {
  NetI2pRouterPeermanagerProfileOrganizer_Slice_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pRouterPeermanagerProfileOrganizer_Slice_values_ count:7 type:NetI2pRouterPeermanagerProfileOrganizer_Slice_class_()];
}

NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_valueOfWithNSString_(NSString *name) {
  NetI2pRouterPeermanagerProfileOrganizer_Slice_initialize();
  for (int i = 0; i < 7; i++) {
    NetI2pRouterPeermanagerProfileOrganizer_Slice *e = NetI2pRouterPeermanagerProfileOrganizer_Slice_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pRouterPeermanagerProfileOrganizer_Slice *NetI2pRouterPeermanagerProfileOrganizer_Slice_fromOrdinal(NSUInteger ordinal) {
  NetI2pRouterPeermanagerProfileOrganizer_Slice_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return NetI2pRouterPeermanagerProfileOrganizer_Slice_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerProfileOrganizer_Slice)
