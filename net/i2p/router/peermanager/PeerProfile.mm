//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/PeerProfile.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/CommSystemFacade.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/peermanager/CapacityCalculator.h"
#include "net/i2p/router/peermanager/DBHistory.h"
#include "net/i2p/router/peermanager/IntegrationCalculator.h"
#include "net/i2p/router/peermanager/PeerProfile.h"
#include "net/i2p/router/peermanager/SpeedCalculator.h"
#include "net/i2p/router/peermanager/TunnelHistory.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/StatLog.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterPeermanagerPeerProfile () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pRouterRouterContext *_context_;
  NetI2pDataHash *_peer_;
  jlong _firstHeardAbout_;
  jlong _lastHeardAbout_;
  jlong _lastSentToSuccessfully_;
  jlong _lastFailedSend_;
  jlong _lastHeardFrom_;
  jfloat _tunnelTestResponseTimeAvg_;
  NetI2pStatRateStat *_dbResponseTime_;
  NetI2pStatRateStat *_tunnelCreateResponseTime_;
  NetI2pStatRateStat *_tunnelTestResponseTime_;
  NetI2pStatRateStat *_dbIntroduction_;
  jint _speedBonus_;
  jint _capacityBonus_;
  jint _integrationBonus_;
  jfloat _speedValue_;
  jfloat _capacityValue_;
  jfloat _integrationValue_;
  jboolean _isFailing_;
  jfloat _speedValueNew_;
  jfloat _capacityValueNew_;
  jboolean _coalescing_;
  NetI2pRouterPeermanagerTunnelHistory *_tunnelHistory_;
  NetI2pRouterPeermanagerDBHistory *_dbHistory_;
  jboolean _expanded_;
  jboolean _expandedDB_;
  jint _distance_;
  IOSFloatArray *_peakThroughput_;
  volatile_jlong _peakThroughputCurrentTotal_;
  IOSFloatArray *_peakTunnelThroughput_;
  IOSFloatArray *_peakTunnel1mThroughput_;
  jlong _lastCoalesceDate_;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                               withNetI2pDataHash:(NetI2pDataHash *)peer
                                      withBoolean:(jboolean)expand;

- (void)coalesceThroughput;

- (jfloat)calculateSpeed;

- (jfloat)calculateCapacity;

- (jfloat)calculateIntegration;

- (jboolean)calculateIsFailing;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _context_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _peer_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _dbResponseTime_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _tunnelCreateResponseTime_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _tunnelTestResponseTime_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _dbIntroduction_, NetI2pStatRateStat *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _tunnelHistory_, NetI2pRouterPeermanagerTunnelHistory *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _dbHistory_, NetI2pRouterPeermanagerDBHistory *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _peakThroughput_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _peakTunnelThroughput_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterPeermanagerPeerProfile, _peakTunnel1mThroughput_, IOSFloatArray *)

inline jint NetI2pRouterPeermanagerPeerProfile_get_THROUGHPUT_COUNT(void);
#define NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerProfile, THROUGHPUT_COUNT, jint)

inline jint NetI2pRouterPeermanagerPeerProfile_get_DROP_PERIOD_MINUTES(void);
#define NetI2pRouterPeermanagerPeerProfile_DROP_PERIOD_MINUTES 60
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerProfile, DROP_PERIOD_MINUTES, jint)

inline jfloat NetI2pRouterPeermanagerPeerProfile_get_DEGRADE_FACTOR(void);
#define NetI2pRouterPeermanagerPeerProfile_DEGRADE_FACTOR 0.75f
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerPeerProfile, DEGRADE_FACTOR, jfloat)

inline id<JavaUtilSet> NetI2pRouterPeermanagerPeerProfile_get__bigCountries(void);
static id<JavaUtilSet> NetI2pRouterPeermanagerPeerProfile__bigCountries;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPeermanagerPeerProfile, _bigCountries, id<JavaUtilSet>)

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterPeermanagerPeerProfile *self, NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand);

__attribute__((unused)) static NetI2pRouterPeermanagerPeerProfile *new_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterPeermanagerPeerProfile *create_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand);

__attribute__((unused)) static void NetI2pRouterPeermanagerPeerProfile_coalesceThroughput(NetI2pRouterPeermanagerPeerProfile *self);

__attribute__((unused)) static jfloat NetI2pRouterPeermanagerPeerProfile_calculateSpeed(NetI2pRouterPeermanagerPeerProfile *self);

__attribute__((unused)) static jfloat NetI2pRouterPeermanagerPeerProfile_calculateCapacity(NetI2pRouterPeermanagerPeerProfile *self);

__attribute__((unused)) static jfloat NetI2pRouterPeermanagerPeerProfile_calculateIntegration(NetI2pRouterPeermanagerPeerProfile *self);

__attribute__((unused)) static jboolean NetI2pRouterPeermanagerPeerProfile_calculateIsFailing(NetI2pRouterPeermanagerPeerProfile *self);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPeermanagerPeerProfile)

@implementation NetI2pRouterPeermanagerPeerProfile

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                               withNetI2pDataHash:(NetI2pDataHash *)peer {
  NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(self, context, peer);
  return self;
}

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                               withNetI2pDataHash:(NetI2pDataHash *)peer
                                      withBoolean:(jboolean)expand {
  NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(self, context, peer, expand);
  return self;
}

- (NetI2pDataHash *)getPeer {
  return _peer_;
}

- (jboolean)getIsExpanded {
  return _expanded_;
}

- (jboolean)getIsExpandedDB {
  return _expandedDB_;
}

- (jboolean)getIsActive {
  return [self getIsActiveWithLong:5 * 60 * 1000];
}

- (jboolean)isEstablished {
  return [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) isEstablishedWithNetI2pDataHash:_peer_];
}

- (jboolean)wasUnreachable {
  return [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) wasUnreachableWithNetI2pDataHash:_peer_];
}

- (jboolean)isSameCountry {
  NSString *us = [((NetI2pRouterCommSystemFacade *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) commSystem])) getOurCountry];
  return us != nil && ([((id<JavaUtilSet>) nil_chk(NetI2pRouterPeermanagerPeerProfile__bigCountries)) containsWithId:us] || [_context_ getPropertyWithNSString:NetI2pRouterPeermanagerCapacityCalculator_PROP_COUNTRY_BONUS] != nil) && [us isEqual:[((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) getCountryWithNetI2pDataHash:_peer_]];
}

- (jint)getXORDistance {
  return _distance_;
}

- (jboolean)getIsActiveWithLong:(jlong)period {
  jlong before = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) clock])) now] - period;
  return [self getLastHeardFrom] < before || [self getLastSendSuccessful] < before || [((NetI2pRouterCommSystemFacade *) nil_chk([_context_ commSystem])) isEstablishedWithNetI2pDataHash:_peer_];
}

- (jlong)getFirstHeardAbout {
  @synchronized(self) {
    return _firstHeardAbout_;
  }
}

- (void)setFirstHeardAboutWithLong:(jlong)when {
  @synchronized(self) {
    if (when < _firstHeardAbout_) _firstHeardAbout_ = when;
  }
}

- (jlong)getLastHeardAbout {
  @synchronized(self) {
    return _lastHeardAbout_;
  }
}

- (void)setLastHeardAboutWithLong:(jlong)when {
  @synchronized(self) {
    if (_lastHeardAbout_ <= 0 || when > _lastHeardAbout_) _lastHeardAbout_ = when;
    if (when < _firstHeardAbout_) _firstHeardAbout_ = when;
  }
}

- (jlong)getLastSendSuccessful {
  return _lastSentToSuccessfully_;
}

- (void)setLastSendSuccessfulWithLong:(jlong)when {
  _lastSentToSuccessfully_ = when;
}

- (jlong)getLastSendFailed {
  return _lastFailedSend_;
}

- (void)setLastSendFailedWithLong:(jlong)when {
  _lastFailedSend_ = when;
}

- (jlong)getLastHeardFrom {
  return _lastHeardFrom_;
}

- (void)setLastHeardFromWithLong:(jlong)when {
  _lastHeardFrom_ = when;
}

- (NetI2pRouterPeermanagerTunnelHistory *)getTunnelHistory {
  return _tunnelHistory_;
}

- (void)setTunnelHistoryWithNetI2pRouterPeermanagerTunnelHistory:(NetI2pRouterPeermanagerTunnelHistory *)history {
  JreStrongAssign(&_tunnelHistory_, history);
}

- (NetI2pRouterPeermanagerDBHistory *)getDBHistory {
  return _dbHistory_;
}

- (void)setDBHistoryWithNetI2pRouterPeermanagerDBHistory:(NetI2pRouterPeermanagerDBHistory *)hist {
  JreStrongAssign(&_dbHistory_, hist);
}

- (NetI2pStatRateStat *)getDbResponseTime {
  return _dbResponseTime_;
}

- (NetI2pStatRateStat *)getTunnelCreateResponseTime {
  return _tunnelCreateResponseTime_;
}

- (NetI2pStatRateStat *)getTunnelTestResponseTime {
  return _tunnelTestResponseTime_;
}

- (NetI2pStatRateStat *)getDbIntroduction {
  return _dbIntroduction_;
}

- (jint)getSpeedBonus {
  return _speedBonus_;
}

- (void)setSpeedBonusWithInt:(jint)bonus {
  _speedBonus_ = bonus;
}

- (jint)getCapacityBonus {
  return _capacityBonus_;
}

- (void)setCapacityBonusWithInt:(jint)bonus {
  _capacityBonus_ = bonus;
}

- (jint)getIntegrationBonus {
  return _integrationBonus_;
}

- (void)setIntegrationBonusWithInt:(jint)bonus {
  _integrationBonus_ = bonus;
}

- (jfloat)getSpeedValue {
  return _speedValue_;
}

- (jfloat)getCapacityValue {
  return _capacityValue_;
}

- (jfloat)getIntegrationValue {
  return _integrationValue_;
}

- (jboolean)getIsFailing {
  return _isFailing_;
}

- (jfloat)getTunnelTestTimeAverage {
  return _tunnelTestResponseTimeAvg_;
}

- (void)setTunnelTestTimeAverageWithFloat:(jfloat)avg {
  _tunnelTestResponseTimeAvg_ = avg;
}

- (void)updateTunnelTestTimeAverageWithLong:(jlong)ms {
  if (_tunnelTestResponseTimeAvg_ <= 0) _tunnelTestResponseTimeAvg_ = 30 * 1000;
  if (ms < _tunnelTestResponseTimeAvg_) _tunnelTestResponseTimeAvg_ = 0.95f * _tunnelTestResponseTimeAvg_ + .05f * ms;
  else _tunnelTestResponseTimeAvg_ = 0.75f * _tunnelTestResponseTimeAvg_ + .25f * ms;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$$F$J", @"Updating tunnel test time for ", [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(_peer_)) toBase64])) java_substring:0 endIndex:6], @" to ", _tunnelTestResponseTimeAvg_, @" via ", ms)];
}

- (jfloat)getPeakThroughputKBps {
  jfloat rv = 0;
  for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) JrePlusAssignFloatF(&rv, IOSFloatArray_Get(nil_chk(_peakThroughput_), i));
  JreDivideAssignFloatF(&rv, (60 * 1024 * NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT));
  return rv;
}

- (void)setPeakThroughputKBpsWithFloat:(jfloat)kBps {
  *IOSFloatArray_GetRef(nil_chk(_peakThroughput_), 0) = kBps * 60 * 1024;
}

- (void)dataPushedWithInt:(jint)size {
  JrePlusAssignVolatileLongJ(&_peakThroughputCurrentTotal_, size);
}

- (void)tunnelDataTransferredWithLong:(jlong)tunnelByteLifetime {
  jfloat lowPeak = IOSFloatArray_Get(nil_chk(_peakTunnelThroughput_), NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1);
  if (tunnelByteLifetime > lowPeak) {
    @synchronized(_peakTunnelThroughput_) {
      for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) {
        if (tunnelByteLifetime > IOSFloatArray_Get(_peakTunnelThroughput_, i)) {
          for (jint j = NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1; j > i; j--) *IOSFloatArray_GetRef(_peakTunnelThroughput_, j) = IOSFloatArray_Get(_peakTunnelThroughput_, j - 1);
          *IOSFloatArray_GetRef(_peakTunnelThroughput_, i) = tunnelByteLifetime;
          break;
        }
      }
    }
  }
}

- (jfloat)getPeakTunnelThroughputKBps {
  jfloat rv = 0;
  for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) JrePlusAssignFloatF(&rv, IOSFloatArray_Get(nil_chk(_peakTunnelThroughput_), i));
  JreDivideAssignFloatF(&rv, (10 * 60 * 1024 * NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT));
  return rv;
}

- (void)setPeakTunnelThroughputKBpsWithFloat:(jfloat)kBps {
  *IOSFloatArray_GetRef(nil_chk(_peakTunnelThroughput_), 0) = kBps * (60 * 10 * 1024);
}

- (void)dataPushed1mWithInt:(jint)size {
  jfloat lowPeak = IOSFloatArray_Get(nil_chk(_peakTunnel1mThroughput_), NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1);
  if (size > lowPeak) {
    @synchronized(_peakTunnel1mThroughput_) {
      for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) {
        if (size > IOSFloatArray_Get(_peakTunnel1mThroughput_, i)) {
          for (jint j = NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1; j > i; j--) *IOSFloatArray_GetRef(_peakTunnel1mThroughput_, j) = IOSFloatArray_Get(_peakTunnel1mThroughput_, j - 1);
          *IOSFloatArray_GetRef(_peakTunnel1mThroughput_, i) = size;
          break;
        }
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
      JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Updating 1m throughput after "])) appendWithInt:size])) appendWithNSString:@" to "];
      for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) [((JavaLangStringBuilder *) nil_chk([buf appendWithFloat:IOSFloatArray_Get(_peakTunnel1mThroughput_, i)])) appendWithChar:','];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" for "])) appendWithNSString:[((NetI2pDataHash *) nil_chk(_peer_)) toBase64]];
      [_log_ debugWithNSString:[buf description]];
    }
  }
}

- (jfloat)getPeakTunnel1mThroughputKBps {
  jfloat rv = 0;
  for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) JrePlusAssignFloatF(&rv, IOSFloatArray_Get(nil_chk(_peakTunnel1mThroughput_), i));
  JreDivideAssignFloatF(&rv, (60 * 1024 * NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT));
  return rv;
}

- (void)setPeakTunnel1mThroughputKBpsWithFloat:(jfloat)kBps {
  *IOSFloatArray_GetRef(nil_chk(_peakTunnel1mThroughput_), 0) = kBps * 60 * 1024;
}

- (void)expandProfile {
  @synchronized(self) {
    NSString *group = (nil == _peer_ ? @"profileUnknown" : [((NSString *) nil_chk([_peer_ toBase64])) java_substring:0 endIndex:6]);
    if (_tunnelCreateResponseTime_ == nil) JreStrongAssignAndConsume(&_tunnelCreateResponseTime_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"tunnelCreateResponseTime", @"how long it takes to get a tunnel create response from the peer (in milliseconds)", group, [IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 30 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000 } count:4]));
    if (_tunnelTestResponseTime_ == nil) JreStrongAssignAndConsume(&_tunnelTestResponseTime_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"tunnelTestResponseTime", @"how long it takes to successfully test a tunnel this peer participates in (in milliseconds)", group, [IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 30 * 60 * 1000l, 60 * 60 * 1000l, 3 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000 } count:5]));
    if (_tunnelHistory_ == nil) JreStrongAssignAndConsume(&_tunnelHistory_, new_NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(_context_, group));
    [((NetI2pStatRateStat *) nil_chk(_tunnelCreateResponseTime_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) getStatLog]];
    [((NetI2pStatRateStat *) nil_chk(_tunnelTestResponseTime_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([_context_ statManager])) getStatLog]];
    _expanded_ = true;
  }
}

- (void)expandDBProfile {
  @synchronized(self) {
    NSString *group = (nil == _peer_ ? @"profileUnknown" : [((NSString *) nil_chk([_peer_ toBase64])) java_substring:0 endIndex:6]);
    if (_dbResponseTime_ == nil) JreStrongAssignAndConsume(&_dbResponseTime_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"dbResponseTime", @"how long it takes to get a db response from the peer (in milliseconds)", group, [IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000l, 60 * 60 * 1000l, 24 * 60 * 60 * 1000 } count:3]));
    if (_dbIntroduction_ == nil) JreStrongAssignAndConsume(&_dbIntroduction_, new_NetI2pStatRateStat_initWithNSString_withNSString_withNSString_withLongArray_(@"dbIntroduction", @"how many new peers we get from dbSearchReplyMessages or dbStore messages", group, [IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000l, 6 * 60 * 60 * 1000l, 24 * 60 * 60 * 1000l } count:3]));
    if (_dbHistory_ == nil) JreStrongAssignAndConsume(&_dbHistory_, new_NetI2pRouterPeermanagerDBHistory_initWithNetI2pRouterRouterContext_withNSString_(_context_, group));
    [((NetI2pStatRateStat *) nil_chk(_dbResponseTime_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_context_)) statManager])) getStatLog]];
    [((NetI2pStatRateStat *) nil_chk(_dbIntroduction_)) setStatLogWithNetI2pStatStatLog:[((NetI2pStatStatManager *) nil_chk([_context_ statManager])) getStatLog]];
    _expandedDB_ = true;
  }
}

- (void)coalesceThroughput {
  NetI2pRouterPeermanagerPeerProfile_coalesceThroughput(self);
}

- (void)coalesceStats {
  if (!_expanded_) return;
  [self coalesceOnly];
  [self updateValues];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$F$F$F$ZC", @"Coalesced: speed [", _speedValue_, @"] capacity [", _capacityValue_, @"] integration [", _integrationValue_, @"] failing? [", _isFailing_, ']')];
}

- (void)coalesceOnly {
  _coalescing_ = true;
  [((NetI2pStatRateStat *) nil_chk(_tunnelCreateResponseTime_)) coalesceStats];
  [((NetI2pStatRateStat *) nil_chk(_tunnelTestResponseTime_)) coalesceStats];
  [((NetI2pRouterPeermanagerTunnelHistory *) nil_chk(_tunnelHistory_)) coalesceStats];
  if (_expandedDB_) {
    [((NetI2pStatRateStat *) nil_chk(_dbIntroduction_)) coalesceStats];
    [((NetI2pStatRateStat *) nil_chk(_dbResponseTime_)) coalesceStats];
    [((NetI2pRouterPeermanagerDBHistory *) nil_chk(_dbHistory_)) coalesceStats];
  }
  NetI2pRouterPeermanagerPeerProfile_coalesceThroughput(self);
  _speedValueNew_ = NetI2pRouterPeermanagerPeerProfile_calculateSpeed(self);
  _capacityValueNew_ = NetI2pRouterPeermanagerPeerProfile_calculateCapacity(self);
  _integrationValue_ = NetI2pRouterPeermanagerPeerProfile_calculateIntegration(self);
  _isFailing_ = NetI2pRouterPeermanagerPeerProfile_calculateIsFailing(self);
}

- (void)updateValues {
  if (!_coalescing_) [self coalesceOnly];
  _coalescing_ = false;
  _speedValue_ = _speedValueNew_;
  _capacityValue_ = _capacityValueNew_;
}

- (jfloat)calculateSpeed {
  return NetI2pRouterPeermanagerPeerProfile_calculateSpeed(self);
}

- (jfloat)calculateCapacity {
  return NetI2pRouterPeermanagerPeerProfile_calculateCapacity(self);
}

- (jfloat)calculateIntegration {
  return NetI2pRouterPeermanagerPeerProfile_calculateIntegration(self);
}

- (jboolean)calculateIsFailing {
  return NetI2pRouterPeermanagerPeerProfile_calculateIsFailing(self);
}

- (void)setIsFailingWithBoolean:(jboolean)val {
  _isFailing_ = val;
}

- (NetI2pRouterRouterContext *)getContext {
  return _context_;
}

- (NSUInteger)hash {
  return ((jint) [((NetI2pDataHash *) nil_chk(_peer_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil || !([obj isKindOfClass:[NetI2pRouterPeermanagerPeerProfile class]])) return false;
  NetI2pRouterPeermanagerPeerProfile *prof = (NetI2pRouterPeermanagerPeerProfile *) cast_chk(obj, [NetI2pRouterPeermanagerPeerProfile class]);
  return [((NetI2pDataHash *) nil_chk(_peer_)) isEqual:prof->_peer_];
}

- (NSString *)description {
  return JreStrcat("$@", @"Profile: ", _peer_);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_peer_);
  RELEASE_(_dbResponseTime_);
  RELEASE_(_tunnelCreateResponseTime_);
  RELEASE_(_tunnelTestResponseTime_);
  RELEASE_(_dbIntroduction_);
  RELEASE_(_tunnelHistory_);
  RELEASE_(_dbHistory_);
  RELEASE_(_peakThroughput_);
  RELEASE_(_peakTunnelThroughput_);
  RELEASE_(_peakTunnel1mThroughput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 4, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerTunnelHistory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterPeermanagerDBHistory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterRouterContext;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:);
  methods[1].selector = @selector(initWithNetI2pRouterRouterContext:withNetI2pDataHash:withBoolean:);
  methods[2].selector = @selector(getPeer);
  methods[3].selector = @selector(getIsExpanded);
  methods[4].selector = @selector(getIsExpandedDB);
  methods[5].selector = @selector(getIsActive);
  methods[6].selector = @selector(isEstablished);
  methods[7].selector = @selector(wasUnreachable);
  methods[8].selector = @selector(isSameCountry);
  methods[9].selector = @selector(getXORDistance);
  methods[10].selector = @selector(getIsActiveWithLong:);
  methods[11].selector = @selector(getFirstHeardAbout);
  methods[12].selector = @selector(setFirstHeardAboutWithLong:);
  methods[13].selector = @selector(getLastHeardAbout);
  methods[14].selector = @selector(setLastHeardAboutWithLong:);
  methods[15].selector = @selector(getLastSendSuccessful);
  methods[16].selector = @selector(setLastSendSuccessfulWithLong:);
  methods[17].selector = @selector(getLastSendFailed);
  methods[18].selector = @selector(setLastSendFailedWithLong:);
  methods[19].selector = @selector(getLastHeardFrom);
  methods[20].selector = @selector(setLastHeardFromWithLong:);
  methods[21].selector = @selector(getTunnelHistory);
  methods[22].selector = @selector(setTunnelHistoryWithNetI2pRouterPeermanagerTunnelHistory:);
  methods[23].selector = @selector(getDBHistory);
  methods[24].selector = @selector(setDBHistoryWithNetI2pRouterPeermanagerDBHistory:);
  methods[25].selector = @selector(getDbResponseTime);
  methods[26].selector = @selector(getTunnelCreateResponseTime);
  methods[27].selector = @selector(getTunnelTestResponseTime);
  methods[28].selector = @selector(getDbIntroduction);
  methods[29].selector = @selector(getSpeedBonus);
  methods[30].selector = @selector(setSpeedBonusWithInt:);
  methods[31].selector = @selector(getCapacityBonus);
  methods[32].selector = @selector(setCapacityBonusWithInt:);
  methods[33].selector = @selector(getIntegrationBonus);
  methods[34].selector = @selector(setIntegrationBonusWithInt:);
  methods[35].selector = @selector(getSpeedValue);
  methods[36].selector = @selector(getCapacityValue);
  methods[37].selector = @selector(getIntegrationValue);
  methods[38].selector = @selector(getIsFailing);
  methods[39].selector = @selector(getTunnelTestTimeAverage);
  methods[40].selector = @selector(setTunnelTestTimeAverageWithFloat:);
  methods[41].selector = @selector(updateTunnelTestTimeAverageWithLong:);
  methods[42].selector = @selector(getPeakThroughputKBps);
  methods[43].selector = @selector(setPeakThroughputKBpsWithFloat:);
  methods[44].selector = @selector(dataPushedWithInt:);
  methods[45].selector = @selector(tunnelDataTransferredWithLong:);
  methods[46].selector = @selector(getPeakTunnelThroughputKBps);
  methods[47].selector = @selector(setPeakTunnelThroughputKBpsWithFloat:);
  methods[48].selector = @selector(dataPushed1mWithInt:);
  methods[49].selector = @selector(getPeakTunnel1mThroughputKBps);
  methods[50].selector = @selector(setPeakTunnel1mThroughputKBpsWithFloat:);
  methods[51].selector = @selector(expandProfile);
  methods[52].selector = @selector(expandDBProfile);
  methods[53].selector = @selector(coalesceThroughput);
  methods[54].selector = @selector(coalesceStats);
  methods[55].selector = @selector(coalesceOnly);
  methods[56].selector = @selector(updateValues);
  methods[57].selector = @selector(calculateSpeed);
  methods[58].selector = @selector(calculateCapacity);
  methods[59].selector = @selector(calculateIntegration);
  methods[60].selector = @selector(calculateIsFailing);
  methods[61].selector = @selector(setIsFailingWithBoolean:);
  methods[62].selector = @selector(getContext);
  methods[63].selector = @selector(hash);
  methods[64].selector = @selector(isEqual:);
  methods[65].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peer_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_firstHeardAbout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastHeardAbout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastSentToSuccessfully_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastFailedSend_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastHeardFrom_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelTestResponseTimeAvg_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dbResponseTime_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelCreateResponseTime_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelTestResponseTime_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dbIntroduction_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_speedBonus_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_capacityBonus_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_integrationBonus_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_speedValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_capacityValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_integrationValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isFailing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_speedValueNew_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_capacityValueNew_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_coalescing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelHistory_", "LNetI2pRouterPeermanagerTunnelHistory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dbHistory_", "LNetI2pRouterPeermanagerDBHistory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expanded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expandedDB_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_distance_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "THROUGHPUT_COUNT", "I", .constantValue.asInt = NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT, 0x1a, -1, -1, -1, -1 },
    { "_peakThroughput_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peakThroughputCurrentTotal_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_peakTunnelThroughput_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_peakTunnel1mThroughput_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DROP_PERIOD_MINUTES", "I", .constantValue.asInt = NetI2pRouterPeermanagerPeerProfile_DROP_PERIOD_MINUTES, 0x1a, -1, -1, -1, -1 },
    { "DEGRADE_FACTOR", "F", .constantValue.asFloat = NetI2pRouterPeermanagerPeerProfile_DEGRADE_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "_lastCoalesceDate_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_bigCountries", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 32, 33, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;LNetI2pDataHash;", "LNetI2pRouterRouterContext;LNetI2pDataHash;Z", "getIsActive", "J", "setFirstHeardAbout", "setLastHeardAbout", "setLastSendSuccessful", "setLastSendFailed", "setLastHeardFrom", "setTunnelHistory", "LNetI2pRouterPeermanagerTunnelHistory;", "setDBHistory", "LNetI2pRouterPeermanagerDBHistory;", "setSpeedBonus", "I", "setCapacityBonus", "setIntegrationBonus", "setTunnelTestTimeAverage", "F", "updateTunnelTestTimeAverage", "setPeakThroughputKBps", "dataPushed", "tunnelDataTransferred", "setPeakTunnelThroughputKBps", "dataPushed1m", "setPeakTunnel1mThroughputKBps", "setIsFailing", "Z", "hashCode", "equals", "LNSObject;", "toString", &NetI2pRouterPeermanagerPeerProfile__bigCountries, "Ljava/util/Set<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pRouterPeermanagerPeerProfile = { "PeerProfile", "net.i2p.router.peermanager", ptrTable, methods, fields, 7, 0x1, 66, 37, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterPeermanagerPeerProfile;
}

+ (void)initialize {
  if (self == [NetI2pRouterPeermanagerPeerProfile class]) {
    JreStrongAssignAndConsume(&NetI2pRouterPeermanagerPeerProfile__bigCountries, new_JavaUtilHashSet_init());
    {
      IOSObjectArray *big = [IOSObjectArray arrayWithObjects:(id[]){ @"fr", @"de", @"ru", @"ua", @"us" } count:5 type:NSString_class_()];
      [NetI2pRouterPeermanagerPeerProfile__bigCountries addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(big)];
    }
    J2OBJC_SET_INITIALIZED(NetI2pRouterPeermanagerPeerProfile)
  }
}

@end

void NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterPeermanagerPeerProfile *self, NetI2pRouterRouterContext *context, NetI2pDataHash *peer) {
  NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(self, context, peer, true);
}

NetI2pRouterPeermanagerPeerProfile *new_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerProfile, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, context, peer)
}

NetI2pRouterPeermanagerPeerProfile *create_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerProfile, initWithNetI2pRouterRouterContext_withNetI2pDataHash_, context, peer)
}

void NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterPeermanagerPeerProfile *self, NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_peakThroughput_, [IOSFloatArray newArrayWithLength:NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT]);
  JreStrongAssignAndConsume(&self->_peakTunnelThroughput_, [IOSFloatArray newArrayWithLength:NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT]);
  JreStrongAssignAndConsume(&self->_peakTunnel1mThroughput_, [IOSFloatArray newArrayWithLength:NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT]);
  self->_lastCoalesceDate_ = JavaLangSystem_currentTimeMillis();
  if (peer == nil) @throw create_JavaLangNullPointerException_init();
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pRouterPeermanagerPeerProfile_class_()]);
  JreStrongAssign(&self->_peer_, peer);
  self->_firstHeardAbout_ = [((NetI2pUtilClock *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) clock])) now];
  if (expand) [self expandProfile];
  NetI2pDataHash *us = [self->_context_ routerHash];
  if (us != nil) self->_distance_ = ((IOSByteArray_Get(nil_chk([self->_peer_ getData]), 0) & (jint) 0xff) ^ (IOSByteArray_Get(nil_chk([us getData]), 0) & (jint) 0xff)) - 127;
  else self->_distance_ = 0;
}

NetI2pRouterPeermanagerPeerProfile *new_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand) {
  J2OBJC_NEW_IMPL(NetI2pRouterPeermanagerPeerProfile, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_, context, peer, expand)
}

NetI2pRouterPeermanagerPeerProfile *create_NetI2pRouterPeermanagerPeerProfile_initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_(NetI2pRouterRouterContext *context, NetI2pDataHash *peer, jboolean expand) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPeermanagerPeerProfile, initWithNetI2pRouterRouterContext_withNetI2pDataHash_withBoolean_, context, peer, expand)
}

void NetI2pRouterPeermanagerPeerProfile_coalesceThroughput(NetI2pRouterPeermanagerPeerProfile *self) {
  jlong now = JavaLangSystem_currentTimeMillis();
  jlong measuredPeriod = now - self->_lastCoalesceDate_;
  if (measuredPeriod >= 60 * 1000) {
    jlong tot = JreLoadVolatileLong(&self->_peakThroughputCurrentTotal_);
    jfloat lowPeak = IOSFloatArray_Get(nil_chk(self->_peakThroughput_), NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1);
    if (tot > lowPeak) {
      for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) {
        if (tot > IOSFloatArray_Get(self->_peakThroughput_, i)) {
          for (jint j = NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT - 1; j > i; j--) *IOSFloatArray_GetRef(self->_peakThroughput_, j) = IOSFloatArray_Get(self->_peakThroughput_, j - 1);
          *IOSFloatArray_GetRef(self->_peakThroughput_, i) = tot;
          break;
        }
      }
    }
    else {
      if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:NetI2pRouterPeermanagerPeerProfile_DROP_PERIOD_MINUTES * 2] <= 0) {
        for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) JreTimesAssignFloatF(IOSFloatArray_GetRef(self->_peakThroughput_, i), NetI2pRouterPeermanagerPeerProfile_DEGRADE_FACTOR);
      }
    }
    if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_context_)) random])) nextIntWithInt:NetI2pRouterPeermanagerPeerProfile_DROP_PERIOD_MINUTES * 2] <= 0) {
      for (jint i = 0; i < NetI2pRouterPeermanagerPeerProfile_THROUGHPUT_COUNT; i++) {
        JreTimesAssignFloatF(IOSFloatArray_GetRef(nil_chk(self->_peakTunnelThroughput_), i), NetI2pRouterPeermanagerPeerProfile_DEGRADE_FACTOR);
        JreTimesAssignFloatF(IOSFloatArray_GetRef(nil_chk(self->_peakTunnel1mThroughput_), i), NetI2pRouterPeermanagerPeerProfile_DEGRADE_FACTOR);
      }
    }
    JreAssignVolatileLong(&self->_peakThroughputCurrentTotal_, 0);
    self->_lastCoalesceDate_ = now;
  }
}

jfloat NetI2pRouterPeermanagerPeerProfile_calculateSpeed(NetI2pRouterPeermanagerPeerProfile *self) {
  return (jfloat) NetI2pRouterPeermanagerSpeedCalculator_calcWithNetI2pRouterPeermanagerPeerProfile_(self);
}

jfloat NetI2pRouterPeermanagerPeerProfile_calculateCapacity(NetI2pRouterPeermanagerPeerProfile *self) {
  return (jfloat) NetI2pRouterPeermanagerCapacityCalculator_calcWithNetI2pRouterPeermanagerPeerProfile_(self);
}

jfloat NetI2pRouterPeermanagerPeerProfile_calculateIntegration(NetI2pRouterPeermanagerPeerProfile *self) {
  return (jfloat) NetI2pRouterPeermanagerIntegrationCalculator_calcWithNetI2pRouterPeermanagerPeerProfile_(self);
}

jboolean NetI2pRouterPeermanagerPeerProfile_calculateIsFailing(NetI2pRouterPeermanagerPeerProfile *self) {
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPeermanagerPeerProfile)
