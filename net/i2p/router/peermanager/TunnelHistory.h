//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/peermanager/TunnelHistory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pRouterPeermanagerTunnelHistory")
#ifdef RESTRICT_NetI2pRouterPeermanagerTunnelHistory
#define INCLUDE_ALL_NetI2pRouterPeermanagerTunnelHistory 0
#else
#define INCLUDE_ALL_NetI2pRouterPeermanagerTunnelHistory 1
#endif
#undef RESTRICT_NetI2pRouterPeermanagerTunnelHistory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pRouterPeermanagerTunnelHistory_) && (INCLUDE_ALL_NetI2pRouterPeermanagerTunnelHistory || defined(INCLUDE_NetI2pRouterPeermanagerTunnelHistory))
#define NetI2pRouterPeermanagerTunnelHistory_

@class JavaIoOutputStream;
@class JavaUtilProperties;
@class NetI2pRouterRouterContext;
@class NetI2pStatRateStat;

@interface NetI2pRouterPeermanagerTunnelHistory : NSObject
@property (readonly, class) jint TUNNEL_REJECT_PROBABALISTIC_REJECT NS_SWIFT_NAME(TUNNEL_REJECT_PROBABALISTIC_REJECT);
@property (readonly, class) jint TUNNEL_REJECT_TRANSIENT_OVERLOAD NS_SWIFT_NAME(TUNNEL_REJECT_TRANSIENT_OVERLOAD);
@property (readonly, class) jint TUNNEL_REJECT_BANDWIDTH NS_SWIFT_NAME(TUNNEL_REJECT_BANDWIDTH);
@property (readonly, class) jint TUNNEL_REJECT_CRIT NS_SWIFT_NAME(TUNNEL_REJECT_CRIT);

+ (jint)TUNNEL_REJECT_PROBABALISTIC_REJECT;

+ (jint)TUNNEL_REJECT_TRANSIENT_OVERLOAD;

+ (jint)TUNNEL_REJECT_BANDWIDTH;

+ (jint)TUNNEL_REJECT_CRIT;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)context
                                               withNSString:(NSString *)statGroup;

- (void)coalesceStats;

- (NetI2pStatRateStat *)getFailedRate;

- (jlong)getLastAgreedTo;

- (jlong)getLastFailed;

- (jlong)getLastRejectedBandwidth;

- (jlong)getLastRejectedCritical;

- (jlong)getLastRejectedProbabalistic;

- (jlong)getLastRejectedTransient;

- (jlong)getLifetimeAgreedTo;

- (jlong)getLifetimeFailed;

- (jlong)getLifetimeRejected;

- (NetI2pStatRateStat *)getRejectionRate;

- (void)incrementAgreedTo;

- (void)incrementFailedWithInt:(jint)pct;

- (void)incrementProcessedWithInt:(jint)processedSuccessfully
                          withInt:(jint)failedProcessing;

- (void)incrementRejectedWithInt:(jint)severity;

- (void)load__WithJavaUtilProperties:(JavaUtilProperties *)props;

- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pRouterPeermanagerTunnelHistory)

inline jint NetI2pRouterPeermanagerTunnelHistory_get_TUNNEL_REJECT_PROBABALISTIC_REJECT(void);
#define NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_PROBABALISTIC_REJECT 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerTunnelHistory, TUNNEL_REJECT_PROBABALISTIC_REJECT, jint)

inline jint NetI2pRouterPeermanagerTunnelHistory_get_TUNNEL_REJECT_TRANSIENT_OVERLOAD(void);
#define NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_TRANSIENT_OVERLOAD 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerTunnelHistory, TUNNEL_REJECT_TRANSIENT_OVERLOAD, jint)

inline jint NetI2pRouterPeermanagerTunnelHistory_get_TUNNEL_REJECT_BANDWIDTH(void);
#define NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_BANDWIDTH 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerTunnelHistory, TUNNEL_REJECT_BANDWIDTH, jint)

inline jint NetI2pRouterPeermanagerTunnelHistory_get_TUNNEL_REJECT_CRIT(void);
#define NetI2pRouterPeermanagerTunnelHistory_TUNNEL_REJECT_CRIT 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPeermanagerTunnelHistory, TUNNEL_REJECT_CRIT, jint)

FOUNDATION_EXPORT void NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterPeermanagerTunnelHistory *self, NetI2pRouterRouterContext *context, NSString *statGroup);

FOUNDATION_EXPORT NetI2pRouterPeermanagerTunnelHistory *new_NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *context, NSString *statGroup) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pRouterPeermanagerTunnelHistory *create_NetI2pRouterPeermanagerTunnelHistory_initWithNetI2pRouterRouterContext_withNSString_(NetI2pRouterRouterContext *context, NSString *statGroup);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterPeermanagerTunnelHistory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pRouterPeermanagerTunnelHistory")
