//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/ClientTunnelSettings.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/router/ClientTunnelSettings.h"
#include "net/i2p/router/TunnelPoolSettings.h"

@interface NetI2pRouterClientTunnelSettings () {
 @public
  NetI2pRouterTunnelPoolSettings *_inboundSettings_;
  NetI2pRouterTunnelPoolSettings *_outboundSettings_;
}

- (void)writeToPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientTunnelSettings, _inboundSettings_, NetI2pRouterTunnelPoolSettings *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientTunnelSettings, _outboundSettings_, NetI2pRouterTunnelPoolSettings *)

__attribute__((unused)) static void NetI2pRouterClientTunnelSettings_writeToPropertiesWithJavaUtilProperties_(NetI2pRouterClientTunnelSettings *self, JavaUtilProperties *props);

@implementation NetI2pRouterClientTunnelSettings

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)dest {
  NetI2pRouterClientTunnelSettings_initWithNetI2pDataHash_(self, dest);
  return self;
}

- (NetI2pRouterTunnelPoolSettings *)getInboundSettings {
  return _inboundSettings_;
}

- (NetI2pRouterTunnelPoolSettings *)getOutboundSettings {
  return _outboundSettings_;
}

- (void)readFromPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props {
  [((NetI2pRouterTunnelPoolSettings *) nil_chk(_inboundSettings_)) readFromPropertiesWithNSString:@"inbound." withJavaUtilProperties:props];
  [((NetI2pRouterTunnelPoolSettings *) nil_chk(_outboundSettings_)) readFromPropertiesWithNSString:@"outbound." withJavaUtilProperties:props];
}

- (void)writeToPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props {
  NetI2pRouterClientTunnelSettings_writeToPropertiesWithJavaUtilProperties_(self, props);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  JavaUtilProperties *p = create_JavaUtilProperties_init();
  NetI2pRouterClientTunnelSettings_writeToPropertiesWithJavaUtilProperties_(self, p);
  [buf appendWithNSString:@"Client tunnel settings:\n"];
  [buf appendWithNSString:@"====================================\n"];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([p entrySet])) {
    NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
    NSString *val = (NSString *) cast_chk([entry_ getValue], [NSString class]);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:name])) appendWithNSString:@" = ["])) appendWithNSString:val])) appendWithNSString:@"]\n"];
  }
  [buf appendWithNSString:@"====================================\n"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_inboundSettings_);
  RELEASE_(_outboundSettings_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterTunnelPoolSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:);
  methods[1].selector = @selector(getInboundSettings);
  methods[2].selector = @selector(getOutboundSettings);
  methods[3].selector = @selector(readFromPropertiesWithJavaUtilProperties:);
  methods[4].selector = @selector(writeToPropertiesWithJavaUtilProperties:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_inboundSettings_", "LNetI2pRouterTunnelPoolSettings;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outboundSettings_", "LNetI2pRouterTunnelPoolSettings;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;", "readFromProperties", "LJavaUtilProperties;", "writeToProperties", "toString" };
  static const J2ObjcClassInfo _NetI2pRouterClientTunnelSettings = { "ClientTunnelSettings", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientTunnelSettings;
}

@end

void NetI2pRouterClientTunnelSettings_initWithNetI2pDataHash_(NetI2pRouterClientTunnelSettings *self, NetI2pDataHash *dest) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_inboundSettings_, new_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(dest, true));
  JreStrongAssignAndConsume(&self->_outboundSettings_, new_NetI2pRouterTunnelPoolSettings_initWithNetI2pDataHash_withBoolean_(dest, false));
}

NetI2pRouterClientTunnelSettings *new_NetI2pRouterClientTunnelSettings_initWithNetI2pDataHash_(NetI2pDataHash *dest) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientTunnelSettings, initWithNetI2pDataHash_, dest)
}

NetI2pRouterClientTunnelSettings *create_NetI2pRouterClientTunnelSettings_initWithNetI2pDataHash_(NetI2pDataHash *dest) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientTunnelSettings, initWithNetI2pDataHash_, dest)
}

void NetI2pRouterClientTunnelSettings_writeToPropertiesWithJavaUtilProperties_(NetI2pRouterClientTunnelSettings *self, JavaUtilProperties *props) {
  if (props == nil) return;
  [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_inboundSettings_)) writeToPropertiesWithNSString:@"inbound." withJavaUtilProperties:props];
  [((NetI2pRouterTunnelPoolSettings *) nil_chk(self->_outboundSettings_)) writeToPropertiesWithNSString:@"outbound." withJavaUtilProperties:props];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientTunnelSettings)
