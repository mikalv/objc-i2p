//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/PersistentKeyRing.java
//

#include "J2ObjC_source.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/router/PersistentKeyRing.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/util/KeyRing.h"

static id (*NetI2pRouterPersistentKeyRing_super$_putWithId_withId_)(id, SEL, id, id);

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pRouterPersistentKeyRing () {
 @public
  NetI2pRouterRouterContext *_ctx_;
}

- (void)addFromProperties;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterPersistentKeyRing, _ctx_, NetI2pRouterRouterContext *)

inline jlong NetI2pRouterPersistentKeyRing_get_serialVersionUID(void);
#define NetI2pRouterPersistentKeyRing_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pRouterPersistentKeyRing, serialVersionUID, jlong)

inline NSString *NetI2pRouterPersistentKeyRing_get_PROP_PFX(void);
static NSString *NetI2pRouterPersistentKeyRing_PROP_PFX = @"router.keyring.key.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterPersistentKeyRing, PROP_PFX, NSString *)

__attribute__((unused)) static void NetI2pRouterPersistentKeyRing_addFromProperties(NetI2pRouterPersistentKeyRing *self);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterPersistentKeyRing)

@implementation NetI2pRouterPersistentKeyRing

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterPersistentKeyRing_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (NetI2pDataSessionKey *)putWithId:(NetI2pDataHash *)h
                             withId:(NetI2pDataSessionKey *)sk {
  NetI2pDataSessionKey *old = [super putWithId:h withId:sk];
  if (![((NetI2pDataSessionKey *) nil_chk(sk)) isEqual:old]) {
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) router])) saveConfigWithNSString:JreStrcat("$$", NetI2pRouterPersistentKeyRing_PROP_PFX, [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(h)) toBase64])) java_replace:@"=" withSequence:@"$"]) withNSString:[sk toBase64]];
  }
  return old;
}

- (NetI2pDataSessionKey *)removeWithId:(id)o {
  NetI2pDataSessionKey *rv = [super removeWithId:o];
  if (rv != nil && [o isKindOfClass:[NetI2pDataHash class]]) {
    NetI2pDataHash *h = (NetI2pDataHash *) cast_chk(o, [NetI2pDataHash class]);
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(_ctx_)) router])) saveConfigWithNSString:JreStrcat("$$", NetI2pRouterPersistentKeyRing_PROP_PFX, [((NSString *) nil_chk([((NetI2pDataHash *) nil_chk(h)) toBase64])) java_replace:@"=" withSequence:@"$"]) withNSString:nil];
  }
  return rv;
}

- (void)addFromProperties {
  NetI2pRouterPersistentKeyRing_addFromProperties(self);
}

- (void)dealloc {
  RELEASE_(_ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(putWithId:withId:);
  methods[2].selector = @selector(removeWithId:);
  methods[3].selector = @selector(addFromProperties);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pRouterPersistentKeyRing_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "PROP_PFX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "put", "LNetI2pDataHash;LNetI2pDataSessionKey;", "remove", "LNSObject;", &NetI2pRouterPersistentKeyRing_PROP_PFX };
  static const J2ObjcClassInfo _NetI2pRouterPersistentKeyRing = { "PersistentKeyRing", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterPersistentKeyRing;
}

+ (void)initialize {
  if (self == [NetI2pRouterPersistentKeyRing class]) {
    NetI2pRouterPersistentKeyRing_super$_putWithId_withId_ = (id (*)(id, SEL, id, id))[NetI2pUtilKeyRing instanceMethodForSelector:@selector(putWithId:withId:)];
    J2OBJC_SET_INITIALIZED(NetI2pRouterPersistentKeyRing)
  }
}

@end

void NetI2pRouterPersistentKeyRing_initWithNetI2pRouterRouterContext_(NetI2pRouterPersistentKeyRing *self, NetI2pRouterRouterContext *ctx) {
  NetI2pUtilKeyRing_init(self);
  JreStrongAssign(&self->_ctx_, ctx);
  NetI2pRouterPersistentKeyRing_addFromProperties(self);
}

NetI2pRouterPersistentKeyRing *new_NetI2pRouterPersistentKeyRing_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterPersistentKeyRing, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterPersistentKeyRing *create_NetI2pRouterPersistentKeyRing_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterPersistentKeyRing, initWithNetI2pRouterRouterContext_, ctx)
}

void NetI2pRouterPersistentKeyRing_addFromProperties(NetI2pRouterPersistentKeyRing *self) {
  for (NSString * __strong prop in nil_chk([((NetI2pRouterRouterContext *) nil_chk(self->_ctx_)) getPropertyNames])) {
    if (![((NSString *) nil_chk(prop)) java_hasPrefix:NetI2pRouterPersistentKeyRing_PROP_PFX]) continue;
    NSString *key = [self->_ctx_ getPropertyWithNSString:prop];
    if (key == nil || [key java_length] != 44) continue;
    NSString *hb = [prop java_substring:[((NSString *) nil_chk(NetI2pRouterPersistentKeyRing_PROP_PFX)) java_length]];
    hb = [((NSString *) nil_chk(hb)) java_replace:@"$" withSequence:@"="];
    NetI2pDataHash *dest = create_NetI2pDataHash_init();
    NetI2pDataSessionKey *sk = create_NetI2pDataSessionKey_init();
    @try {
      [dest fromBase64WithNSString:hb];
      [sk fromBase64WithNSString:key];
      NetI2pRouterPersistentKeyRing_super$_putWithId_withId_(self, @selector(putWithId:withId:), dest, sk);
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      continue;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterPersistentKeyRing)
