//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/ClientMessage.java
//

#include "J2ObjC_source.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/SessionConfig.h"
#include "net/i2p/router/ClientMessage.h"

@interface NetI2pRouterClientMessage () {
 @public
  NetI2pDataPayload *_payload_;
  NetI2pDataDestination *_destination_;
  NetI2pDataDestination *_fromDestination_;
  NetI2pDataI2cpSessionConfig *_senderConfig_;
  NetI2pDataHash *_destinationHash_;
  NetI2pDataI2cpMessageId *_messageId_;
  jlong _messageNonce_;
  jlong _expiration_;
  jint _flags_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _payload_, NetI2pDataPayload *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _destination_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _fromDestination_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _senderConfig_, NetI2pDataI2cpSessionConfig *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _destinationHash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pRouterClientMessage, _messageId_, NetI2pDataI2cpMessageId *)

@implementation NetI2pRouterClientMessage

- (instancetype)initWithNetI2pDataDestination:(NetI2pDataDestination *)toDest
                        withNetI2pDataPayload:(NetI2pDataPayload *)payload
              withNetI2pDataI2cpSessionConfig:(NetI2pDataI2cpSessionConfig *)config
                    withNetI2pDataDestination:(NetI2pDataDestination *)fromDest
                  withNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)msgID
                                     withLong:(jlong)messageNonce
                                     withLong:(jlong)expiration
                                      withInt:(jint)flags {
  NetI2pRouterClientMessage_initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_(self, toDest, payload, config, fromDest, msgID, messageNonce, expiration, flags);
  return self;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)toDestHash
                 withNetI2pDataPayload:(NetI2pDataPayload *)payload {
  NetI2pRouterClientMessage_initWithNetI2pDataHash_withNetI2pDataPayload_(self, toDestHash, payload);
  return self;
}

- (NetI2pDataPayload *)getPayload {
  return _payload_;
}

- (NetI2pDataDestination *)getDestination {
  return _destination_;
}

- (NetI2pDataDestination *)getFromDestination {
  return _fromDestination_;
}

- (NetI2pDataHash *)getDestinationHash {
  return _destinationHash_;
}

- (NetI2pDataI2cpMessageId *)getMessageId {
  return _messageId_;
}

- (jlong)getMessageNonce {
  return _messageNonce_;
}

- (NetI2pDataI2cpSessionConfig *)getSenderConfig {
  return _senderConfig_;
}

- (jlong)getExpiration {
  return _expiration_;
}

- (jint)getFlags {
  return _flags_;
}

- (void)dealloc {
  RELEASE_(_payload_);
  RELEASE_(_destination_);
  RELEASE_(_fromDestination_);
  RELEASE_(_senderConfig_);
  RELEASE_(_destinationHash_);
  RELEASE_(_messageId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPayload;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpMessageId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataDestination:withNetI2pDataPayload:withNetI2pDataI2cpSessionConfig:withNetI2pDataDestination:withNetI2pDataI2cpMessageId:withLong:withLong:withInt:);
  methods[1].selector = @selector(initWithNetI2pDataHash:withNetI2pDataPayload:);
  methods[2].selector = @selector(getPayload);
  methods[3].selector = @selector(getDestination);
  methods[4].selector = @selector(getFromDestination);
  methods[5].selector = @selector(getDestinationHash);
  methods[6].selector = @selector(getMessageId);
  methods[7].selector = @selector(getMessageNonce);
  methods[8].selector = @selector(getSenderConfig);
  methods[9].selector = @selector(getExpiration);
  methods[10].selector = @selector(getFlags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_payload_", "LNetI2pDataPayload;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_destination_", "LNetI2pDataDestination;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fromDestination_", "LNetI2pDataDestination;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_senderConfig_", "LNetI2pDataI2cpSessionConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_destinationHash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageId_", "LNetI2pDataI2cpMessageId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageNonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_flags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDestination;LNetI2pDataPayload;LNetI2pDataI2cpSessionConfig;LNetI2pDataDestination;LNetI2pDataI2cpMessageId;JJI", "LNetI2pDataHash;LNetI2pDataPayload;" };
  static const J2ObjcClassInfo _NetI2pRouterClientMessage = { "ClientMessage", "net.i2p.router", ptrTable, methods, fields, 7, 0x1, 11, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterClientMessage;
}

@end

void NetI2pRouterClientMessage_initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_(NetI2pRouterClientMessage *self, NetI2pDataDestination *toDest, NetI2pDataPayload *payload, NetI2pDataI2cpSessionConfig *config, NetI2pDataDestination *fromDest, NetI2pDataI2cpMessageId *msgID, jlong messageNonce, jlong expiration, jint flags) {
  NSObject_init(self);
  JreStrongAssign(&self->_destination_, toDest);
  JreStrongAssign(&self->_destinationHash_, nil);
  JreStrongAssign(&self->_payload_, payload);
  JreStrongAssign(&self->_senderConfig_, config);
  JreStrongAssign(&self->_fromDestination_, fromDest);
  JreStrongAssign(&self->_messageId_, msgID);
  self->_messageNonce_ = messageNonce;
  self->_expiration_ = expiration;
  self->_flags_ = flags;
}

NetI2pRouterClientMessage *new_NetI2pRouterClientMessage_initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_(NetI2pDataDestination *toDest, NetI2pDataPayload *payload, NetI2pDataI2cpSessionConfig *config, NetI2pDataDestination *fromDest, NetI2pDataI2cpMessageId *msgID, jlong messageNonce, jlong expiration, jint flags) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientMessage, initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_, toDest, payload, config, fromDest, msgID, messageNonce, expiration, flags)
}

NetI2pRouterClientMessage *create_NetI2pRouterClientMessage_initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_(NetI2pDataDestination *toDest, NetI2pDataPayload *payload, NetI2pDataI2cpSessionConfig *config, NetI2pDataDestination *fromDest, NetI2pDataI2cpMessageId *msgID, jlong messageNonce, jlong expiration, jint flags) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientMessage, initWithNetI2pDataDestination_withNetI2pDataPayload_withNetI2pDataI2cpSessionConfig_withNetI2pDataDestination_withNetI2pDataI2cpMessageId_withLong_withLong_withInt_, toDest, payload, config, fromDest, msgID, messageNonce, expiration, flags)
}

void NetI2pRouterClientMessage_initWithNetI2pDataHash_withNetI2pDataPayload_(NetI2pRouterClientMessage *self, NetI2pDataHash *toDestHash, NetI2pDataPayload *payload) {
  NSObject_init(self);
  JreStrongAssign(&self->_destination_, nil);
  JreStrongAssign(&self->_destinationHash_, toDestHash);
  JreStrongAssign(&self->_payload_, payload);
  JreStrongAssign(&self->_senderConfig_, nil);
  JreStrongAssign(&self->_fromDestination_, nil);
  JreStrongAssign(&self->_messageId_, nil);
  self->_messageNonce_ = 0;
  self->_expiration_ = 0;
  self->_flags_ = 0;
}

NetI2pRouterClientMessage *new_NetI2pRouterClientMessage_initWithNetI2pDataHash_withNetI2pDataPayload_(NetI2pDataHash *toDestHash, NetI2pDataPayload *payload) {
  J2OBJC_NEW_IMPL(NetI2pRouterClientMessage, initWithNetI2pDataHash_withNetI2pDataPayload_, toDestHash, payload)
}

NetI2pRouterClientMessage *create_NetI2pRouterClientMessage_initWithNetI2pDataHash_withNetI2pDataPayload_(NetI2pDataHash *toDestHash, NetI2pDataPayload *payload) {
  J2OBJC_CREATE_IMPL(NetI2pRouterClientMessage, initWithNetI2pDataHash_withNetI2pDataPayload_, toDestHash, payload)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterClientMessage)
