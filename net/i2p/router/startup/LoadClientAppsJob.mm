//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/startup/LoadClientAppsJob.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/app/ClientApp.h"
#include "net/i2p/app/ClientAppManager.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/app/RouterApp.h"
#include "net/i2p/router/startup/ClientAppConfig.h"
#include "net/i2p/router/startup/LoadClientAppsJob.h"
#include "net/i2p/router/startup/RouterAppManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer2.h"

@interface NetI2pRouterStartupLoadClientAppsJob () {
 @public
  NetI2pUtilLog *_log_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob, _log_, NetI2pUtilLog *)

inline jboolean NetI2pRouterStartupLoadClientAppsJob_get__loaded(void);
inline jboolean NetI2pRouterStartupLoadClientAppsJob_set__loaded(jboolean value);
inline jboolean *NetI2pRouterStartupLoadClientAppsJob_getRef__loaded(void);
static jboolean NetI2pRouterStartupLoadClientAppsJob__loaded = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pRouterStartupLoadClientAppsJob, _loaded, jboolean)

@interface NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient () {
 @public
  NetI2pRouterRouterContext *_ctx_;
  NSString *_className_;
  NSString *_clientName_;
  IOSObjectArray *_args_;
  NetI2pUtilLog *_log_DelayedRunClient_;
  JavaLangThreadGroup *_threadGroup_;
  JavaLangClassLoader *_cl_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _ctx_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _className_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _clientName_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _args_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _log_DelayedRunClient_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _threadGroup_, JavaLangThreadGroup *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, _cl_, JavaLangClassLoader *)

@interface NetI2pRouterStartupLoadClientAppsJob_RunApp : NSObject < JavaLangRunnable > {
 @public
  NSString *_className_;
  NSString *_appName_;
  IOSObjectArray *_args_;
  NetI2pRouterRouterContext *_ctx_;
  NetI2pUtilLog *_log_;
  JavaLangClassLoader *_cl_;
}

- (instancetype)initWithNSString:(NSString *)className_
                    withNSString:(NSString *)appName
               withNSStringArray:(IOSObjectArray *)args
   withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
               withNetI2pUtilLog:(NetI2pUtilLog *)log
         withJavaLangClassLoader:(JavaLangClassLoader *)cl;

- (void)run;

+ (jboolean)isRouterAppWithIOSClass:(IOSClass *)cls;

+ (jboolean)isClientAppWithIOSClass:(IOSClass *)cls;

+ (jboolean)isInterfaceWithIOSClass:(IOSClass *)cls
                       withIOSClass:(IOSClass *)intfc;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pRouterStartupLoadClientAppsJob_RunApp)

J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _className_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _appName_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _args_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _ctx_, NetI2pRouterRouterContext *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadClientAppsJob_RunApp, _cl_, JavaLangClassLoader *)

__attribute__((unused)) static void NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NetI2pRouterStartupLoadClientAppsJob_RunApp *self, NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl);

__attribute__((unused)) static NetI2pRouterStartupLoadClientAppsJob_RunApp *new_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pRouterStartupLoadClientAppsJob_RunApp *create_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl);

__attribute__((unused)) static jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isRouterAppWithIOSClass_(IOSClass *cls);

__attribute__((unused)) static jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isClientAppWithIOSClass_(IOSClass *cls);

__attribute__((unused)) static jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isInterfaceWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *intfc);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pRouterStartupLoadClientAppsJob_RunApp)

@implementation NetI2pRouterStartupLoadClientAppsJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterStartupLoadClientAppsJob_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (void)runJob {
  @synchronized(NetI2pRouterStartupLoadClientAppsJob_class_()) {
    if (NetI2pRouterStartupLoadClientAppsJob__loaded) return;
    NetI2pRouterStartupLoadClientAppsJob__loaded = true;
  }
  id<JavaUtilList> apps = NetI2pRouterStartupClientAppConfig_getClientAppsWithNetI2pRouterRouterContext_([self getContext]);
  if ([((id<JavaUtilList>) nil_chk(apps)) isEmpty]) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Warning - No client apps or router console configured - we are just a router"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Warning - No client apps or router console configured - we are just a router"];
    return;
  }
  for (jint i = 0; i < [apps size]; i++) {
    NetI2pRouterStartupClientAppConfig *app = [apps getWithInt:i];
    if (((NetI2pRouterStartupClientAppConfig *) nil_chk(app))->disabled_) {
      if ([@"net.i2p.router.web.RouterConsoleRunner" isEqual:app->className__]) {
        NSString *s = JreStrcat("$@$I$I$", @"Warning - Router console is disabled. To enable,\n edit the file ", NetI2pRouterStartupClientAppConfig_configFileWithNetI2pI2PAppContext_([self getContext]), @",\n change the line \"clientApp.", i, @".startOnLoad=false\" to \"clientApp.", i, @".startOnLoad=true\",\n and restart.");
        [((NetI2pUtilLog *) nil_chk(_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:s];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:s];
      }
      continue;
    }
    IOSObjectArray *argVal = NetI2pRouterStartupLoadClientAppsJob_parseArgsWithNSString_(app->args_);
    if (app->delay_ <= 0) {
      NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_(app->className__, app->clientName_, argVal, [self getContext], _log_);
    }
    else {
      NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *drc = create_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) simpleTimer2], [self getContext], app->className__, app->clientName_, argVal);
      [drc scheduleWithLong:app->delay_];
    }
  }
}

+ (IOSObjectArray *)parseArgsWithNSString:(NSString *)args {
  return NetI2pRouterStartupLoadClientAppsJob_parseArgsWithNSString_(args);
}

+ (void)testClientWithNSString:(NSString *)className_
       withJavaLangClassLoader:(JavaLangClassLoader *)cl {
  NetI2pRouterStartupLoadClientAppsJob_testClientWithNSString_withJavaLangClassLoader_(className_, cl);
}

+ (void)runClientInlineWithNSString:(NSString *)className_
                       withNSString:(NSString *)clientName
                  withNSStringArray:(IOSObjectArray *)args
                  withNetI2pUtilLog:(NetI2pUtilLog *)log {
  NetI2pRouterStartupLoadClientAppsJob_runClientInlineWithNSString_withNSString_withNSStringArray_withNetI2pUtilLog_(className_, clientName, args, log);
}

+ (void)runClientInlineWithNSString:(NSString *)className_
                       withNSString:(NSString *)clientName
                  withNSStringArray:(IOSObjectArray *)args
                  withNetI2pUtilLog:(NetI2pUtilLog *)log
            withJavaLangClassLoader:(JavaLangClassLoader *)cl {
  NetI2pRouterStartupLoadClientAppsJob_runClientInlineWithNSString_withNSString_withNSStringArray_withNetI2pUtilLog_withJavaLangClassLoader_(className_, clientName, args, log, cl);
}

+ (void)runClientWithNSString:(NSString *)className_
                 withNSString:(NSString *)clientName
            withNSStringArray:(IOSObjectArray *)args
withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
            withNetI2pUtilLog:(NetI2pUtilLog *)log {
  NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_(className_, clientName, args, ctx, log);
}

+ (void)runClientWithNSString:(NSString *)className_
                 withNSString:(NSString *)clientName
            withNSStringArray:(IOSObjectArray *)args
withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
            withNetI2pUtilLog:(NetI2pUtilLog *)log
      withJavaLangThreadGroup:(JavaLangThreadGroup *)threadGroup
      withJavaLangClassLoader:(JavaLangClassLoader *)cl {
  NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangThreadGroup_withJavaLangClassLoader_(className_, clientName, args, ctx, log, threadGroup, cl);
}

- (NSString *)getName {
  return @"Load up any client applications";
}

- (void)dealloc {
  RELEASE_(_log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 9, 8, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(runJob);
  methods[2].selector = @selector(parseArgsWithNSString:);
  methods[3].selector = @selector(testClientWithNSString:withJavaLangClassLoader:);
  methods[4].selector = @selector(runClientInlineWithNSString:withNSString:withNSStringArray:withNetI2pUtilLog:);
  methods[5].selector = @selector(runClientInlineWithNSString:withNSString:withNSStringArray:withNetI2pUtilLog:withJavaLangClassLoader:);
  methods[6].selector = @selector(runClientWithNSString:withNSString:withNSStringArray:withNetI2pRouterRouterContext:withNetI2pUtilLog:);
  methods[7].selector = @selector(runClientWithNSString:withNSString:withNSStringArray:withNetI2pRouterRouterContext:withNetI2pUtilLog:withJavaLangThreadGroup:withJavaLangClassLoader:);
  methods[8].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_loaded", "Z", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "parseArgs", "LNSString;", "testClient", "LNSString;LJavaLangClassLoader;", "LJavaLangClassNotFoundException;", "runClientInline", "LNSString;LNSString;[LNSString;LNetI2pUtilLog;", "LJavaLangException;", "LNSString;LNSString;[LNSString;LNetI2pUtilLog;LJavaLangClassLoader;", "runClient", "LNSString;LNSString;[LNSString;LNetI2pRouterRouterContext;LNetI2pUtilLog;", "LNSString;LNSString;[LNSString;LNetI2pRouterRouterContext;LNetI2pUtilLog;LJavaLangThreadGroup;LJavaLangClassLoader;", &NetI2pRouterStartupLoadClientAppsJob__loaded, "LNetI2pRouterStartupLoadClientAppsJob_DelayedRunClient;LNetI2pRouterStartupLoadClientAppsJob_RunApp;" };
  static const J2ObjcClassInfo _NetI2pRouterStartupLoadClientAppsJob = { "LoadClientAppsJob", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, 14, -1, -1, -1 };
  return &_NetI2pRouterStartupLoadClientAppsJob;
}

@end

void NetI2pRouterStartupLoadClientAppsJob_initWithNetI2pRouterRouterContext_(NetI2pRouterStartupLoadClientAppsJob *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterStartupLoadClientAppsJob_class_()]);
}

NetI2pRouterStartupLoadClientAppsJob *new_NetI2pRouterStartupLoadClientAppsJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadClientAppsJob, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterStartupLoadClientAppsJob *create_NetI2pRouterStartupLoadClientAppsJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadClientAppsJob, initWithNetI2pRouterRouterContext_, ctx)
}

IOSObjectArray *NetI2pRouterStartupLoadClientAppsJob_parseArgsWithNSString_(NSString *args) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  id<JavaUtilList> argList = create_JavaUtilArrayList_initWithInt_(4);
  if (args != nil) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(32);
    jboolean isQuoted = false;
    for (jint i = 0; i < [args java_length]; i++) {
      jchar c = [args charAtWithInt:i];
      switch (c) {
        case '\'':
        case '"':
        if (isQuoted) {
          NSString *str = [((NSString *) nil_chk([buf description])) java_trim];
          if ([((NSString *) nil_chk(str)) java_length] > 0) [argList addWithId:str];
          [buf setLengthWithInt:0];
        }
        isQuoted = !isQuoted;
        break;
        case ' ':
        case 0x0009:
        if (isQuoted) {
          [buf appendWithChar:c];
        }
        else {
          NSString *str = [((NSString *) nil_chk([buf description])) java_trim];
          if ([((NSString *) nil_chk(str)) java_length] > 0) [argList addWithId:str];
          [buf setLengthWithInt:0];
        }
        break;
        default:
        [buf appendWithChar:c];
        break;
      }
    }
    if ([buf java_length] > 0) {
      NSString *str = [((NSString *) nil_chk([buf description])) java_trim];
      if ([((NSString *) nil_chk(str)) java_length] > 0) [argList addWithId:str];
    }
  }
  IOSObjectArray *rv = [IOSObjectArray arrayWithLength:[argList size] type:NSString_class_()];
  for (jint i = 0; i < [argList size]; i++) {
    IOSObjectArray_Set(rv, i, [argList getWithInt:i]);
  }
  return rv;
}

void NetI2pRouterStartupLoadClientAppsJob_testClientWithNSString_withJavaLangClassLoader_(NSString *className_, JavaLangClassLoader *cl) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  if (cl == nil) cl = JavaLangClassLoader_getSystemClassLoader();
  IOSClass_forName_initialize_classLoader_(className_, false, cl);
}

void NetI2pRouterStartupLoadClientAppsJob_runClientInlineWithNSString_withNSString_withNSStringArray_withNetI2pUtilLog_(NSString *className_, NSString *clientName, IOSObjectArray *args, NetI2pUtilLog *log) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  NetI2pRouterStartupLoadClientAppsJob_runClientInlineWithNSString_withNSString_withNSStringArray_withNetI2pUtilLog_withJavaLangClassLoader_(className_, clientName, args, log, nil);
}

void NetI2pRouterStartupLoadClientAppsJob_runClientInlineWithNSString_withNSString_withNSStringArray_withNetI2pUtilLog_withJavaLangClassLoader_(NSString *className_, NSString *clientName, IOSObjectArray *args, NetI2pUtilLog *log, JavaLangClassLoader *cl) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$$$$C$", @"Loading up the client application ", clientName, @": ", className_, ' ', JavaUtilArrays_toStringWithNSObjectArray_(args))];
  if (args == nil) args = [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  IOSClass *cls = IOSClass_forName_initialize_classLoader_(className_, true, cl);
  JavaLangReflectMethod *method = [((IOSClass *) nil_chk(cls)) getMethod:@"main" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_arrayType(NSString_class_(), 1) } count:1 type:IOSClass_class_()]];
  [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:cls withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ args } count:1 type:NSObject_class_()]];
}

void NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_(NSString *className_, NSString *clientName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangThreadGroup_withJavaLangClassLoader_(className_, clientName, args, ctx, log, nil, nil);
}

void NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangThreadGroup_withJavaLangClassLoader_(NSString *className_, NSString *clientName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangThreadGroup *threadGroup, JavaLangClassLoader *cl) {
  NetI2pRouterStartupLoadClientAppsJob_initialize();
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$$$$C$", @"Loading up the client application ", clientName, @": ", className_, ' ', JavaUtilArrays_toStringWithNSObjectArray_(args))];
  NetI2pUtilI2PThread *t;
  if (threadGroup != nil) t = create_NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(threadGroup, create_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(className_, clientName, args, ctx, log, cl));
  else t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(className_, clientName, args, ctx, log, cl));
  if (clientName == nil) clientName = JreStrcat("$$", className_, @" client");
  [t setNameWithNSString:clientName];
  [t setDaemonWithBoolean:true];
  if (cl != nil) [t setContextClassLoaderWithJavaLangClassLoader:cl];
  [t start];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupLoadClientAppsJob)

@implementation NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                                  withNSString:(NSString *)className_
                                  withNSString:(NSString *)clientName
                             withNSStringArray:(IOSObjectArray *)args {
  NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_(self, pool, enclosingContext, className_, clientName, args);
  return self;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                 withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)enclosingContext
                                  withNSString:(NSString *)className_
                                  withNSString:(NSString *)clientName
                             withNSStringArray:(IOSObjectArray *)args
                       withJavaLangThreadGroup:(JavaLangThreadGroup *)threadGroup
                       withJavaLangClassLoader:(JavaLangClassLoader *)cl {
  NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_(self, pool, enclosingContext, className_, clientName, args, threadGroup, cl);
  return self;
}

- (void)timeReached {
  NetI2pRouterStartupLoadClientAppsJob_runClientWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangThreadGroup_withJavaLangClassLoader_(_className_, _clientName_, _args_, _ctx_, _log_DelayedRunClient_, _threadGroup_, _cl_);
}

- (void)dealloc {
  RELEASE_(_ctx_);
  RELEASE_(_className_);
  RELEASE_(_clientName_);
  RELEASE_(_args_);
  RELEASE_(_log_DelayedRunClient_);
  RELEASE_(_threadGroup_);
  RELEASE_(_cl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer2:withNetI2pRouterRouterContext:withNSString:withNSString:withNSStringArray:);
  methods[1].selector = @selector(initWithNetI2pUtilSimpleTimer2:withNetI2pRouterRouterContext:withNSString:withNSString:withNSStringArray:withJavaLangThreadGroup:withJavaLangClassLoader:);
  methods[2].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_className_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_clientName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_args_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_DelayedRunClient_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, 2, -1, -1, -1 },
    { "_threadGroup_", "LJavaLangThreadGroup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cl_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;LNetI2pRouterRouterContext;LNSString;LNSString;[LNSString;", "LNetI2pUtilSimpleTimer2;LNetI2pRouterRouterContext;LNSString;LNSString;[LNSString;LJavaLangThreadGroup;LJavaLangClassLoader;", "_log", "LNetI2pRouterStartupLoadClientAppsJob;" };
  static const J2ObjcClassInfo _NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient = { "DelayedRunClient", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x9, 3, 7, 3, -1, -1, -1, -1 };
  return &_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient;
}

@end

void NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *self, NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args) {
  NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_(self, pool, enclosingContext, className_, clientName, args, nil, nil);
}

NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *new_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_(NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_, pool, enclosingContext, className_, clientName, args)
}

NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *create_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_(NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_, pool, enclosingContext, className_, clientName, args)
}

void NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *self, NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args, JavaLangThreadGroup *threadGroup, JavaLangClassLoader *cl) {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, pool);
  JreStrongAssign(&self->_ctx_, enclosingContext);
  JreStrongAssign(&self->_className_, className_);
  JreStrongAssign(&self->_clientName_, clientName);
  JreStrongAssign(&self->_args_, args);
  JreStrongAssign(&self->_log_DelayedRunClient_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(enclosingContext)) logManager])) getLogWithIOSClass:NetI2pRouterStartupLoadClientAppsJob_class_()]);
  JreStrongAssign(&self->_threadGroup_, threadGroup);
  JreStrongAssign(&self->_cl_, cl);
}

NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *new_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_(NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args, JavaLangThreadGroup *threadGroup, JavaLangClassLoader *cl) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_, pool, enclosingContext, className_, clientName, args, threadGroup, cl)
}

NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient *create_NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient_initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_(NetI2pUtilSimpleTimer2 *pool, NetI2pRouterRouterContext *enclosingContext, NSString *className_, NSString *clientName, IOSObjectArray *args, JavaLangThreadGroup *threadGroup, JavaLangClassLoader *cl) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient, initWithNetI2pUtilSimpleTimer2_withNetI2pRouterRouterContext_withNSString_withNSString_withNSStringArray_withJavaLangThreadGroup_withJavaLangClassLoader_, pool, enclosingContext, className_, clientName, args, threadGroup, cl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupLoadClientAppsJob_DelayedRunClient)

@implementation NetI2pRouterStartupLoadClientAppsJob_RunApp

- (instancetype)initWithNSString:(NSString *)className_
                    withNSString:(NSString *)appName
               withNSStringArray:(IOSObjectArray *)args
   withNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx
               withNetI2pUtilLog:(NetI2pUtilLog *)log
         withJavaLangClassLoader:(JavaLangClassLoader *)cl {
  NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(self, className_, appName, args, ctx, log, cl);
  return self;
}

- (void)run {
  @try {
    IOSClass *cls = IOSClass_forName_initialize_classLoader_(_className_, true, _cl_);
    if (NetI2pRouterStartupLoadClientAppsJob_RunApp_isRouterAppWithIOSClass_(cls)) {
      JavaLangReflectConstructor *con = [((IOSClass *) nil_chk(cls)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pRouterRouterContext_class_(), NetI2pAppClientAppManager_class_(), IOSClass_arrayType(NSString_class_(), 1) } count:3 type:IOSClass_class_()]];
      NetI2pRouterStartupRouterAppManager *mgr = [((NetI2pRouterRouterContext *) nil_chk(_ctx_)) routerAppManager];
      IOSObjectArray *conArgs = [IOSObjectArray arrayWithObjects:(id[]){ _ctx_, [_ctx_ clientAppManager], _args_ } count:3 type:NSObject_class_()];
      id<NetI2pRouterAppRouterApp> app = (id<NetI2pRouterAppRouterApp>) cast_check([((JavaLangReflectConstructor *) nil_chk(con)) newInstanceWithNSObjectArray:conArgs], NetI2pRouterAppRouterApp_class_());
      [((NetI2pRouterStartupRouterAppManager *) nil_chk(mgr)) addAndStartWithNetI2pAppClientApp:app withNSStringArray:_args_];
    }
    else if (NetI2pRouterStartupLoadClientAppsJob_RunApp_isClientAppWithIOSClass_(cls)) {
      JavaLangReflectConstructor *con = [((IOSClass *) nil_chk(cls)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pI2PAppContext_class_(), NetI2pAppClientAppManager_class_(), IOSClass_arrayType(NSString_class_(), 1) } count:3 type:IOSClass_class_()]];
      NetI2pRouterStartupRouterAppManager *mgr = [((NetI2pRouterRouterContext *) nil_chk(_ctx_)) routerAppManager];
      IOSObjectArray *conArgs = [IOSObjectArray arrayWithObjects:(id[]){ _ctx_, [_ctx_ clientAppManager], _args_ } count:3 type:NSObject_class_()];
      id<NetI2pAppClientApp> app = (id<NetI2pAppClientApp>) cast_check([((JavaLangReflectConstructor *) nil_chk(con)) newInstanceWithNSObjectArray:conArgs], NetI2pAppClientApp_class_());
      [((NetI2pRouterStartupRouterAppManager *) nil_chk(mgr)) addAndStartWithNetI2pAppClientApp:app withNSStringArray:_args_];
    }
    else {
      JavaLangReflectMethod *method = [((IOSClass *) nil_chk(cls)) getMethod:@"main" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_arrayType(NSString_class_(), 1) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:cls withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ _args_ } count:1 type:NSObject_class_()]];
    }
  }
  @catch (JavaLangThrowable *t) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$", @"Error starting up the client class ", _className_) withJavaLangThrowable:t];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Done running client application ", _appName_)];
}

+ (jboolean)isRouterAppWithIOSClass:(IOSClass *)cls {
  return NetI2pRouterStartupLoadClientAppsJob_RunApp_isRouterAppWithIOSClass_(cls);
}

+ (jboolean)isClientAppWithIOSClass:(IOSClass *)cls {
  return NetI2pRouterStartupLoadClientAppsJob_RunApp_isClientAppWithIOSClass_(cls);
}

+ (jboolean)isInterfaceWithIOSClass:(IOSClass *)cls
                       withIOSClass:(IOSClass *)intfc {
  return NetI2pRouterStartupLoadClientAppsJob_RunApp_isInterfaceWithIOSClass_withIOSClass_(cls, intfc);
}

- (void)dealloc {
  RELEASE_(_className_);
  RELEASE_(_appName_);
  RELEASE_(_args_);
  RELEASE_(_ctx_);
  RELEASE_(_log_);
  RELEASE_(_cl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0xa, 4, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0xa, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSStringArray:withNetI2pRouterRouterContext:withNetI2pUtilLog:withJavaLangClassLoader:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(isRouterAppWithIOSClass:);
  methods[3].selector = @selector(isClientAppWithIOSClass:);
  methods[4].selector = @selector(isInterfaceWithIOSClass:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_className_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_appName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_args_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_ctx_", "LNetI2pRouterRouterContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_cl_", "LJavaLangClassLoader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;[LNSString;LNetI2pRouterRouterContext;LNetI2pUtilLog;LJavaLangClassLoader;", "isRouterApp", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "isClientApp", "isInterface", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Z", "LNetI2pRouterStartupLoadClientAppsJob;" };
  static const J2ObjcClassInfo _NetI2pRouterStartupLoadClientAppsJob_RunApp = { "RunApp", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x1a, 5, 6, 8, -1, -1, -1, -1 };
  return &_NetI2pRouterStartupLoadClientAppsJob_RunApp;
}

@end

void NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NetI2pRouterStartupLoadClientAppsJob_RunApp *self, NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl) {
  NSObject_init(self);
  JreStrongAssign(&self->_className_, className_);
  JreStrongAssign(&self->_appName_, appName);
  if (args == nil) JreStrongAssignAndConsume(&self->_args_, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  else JreStrongAssign(&self->_args_, args);
  JreStrongAssign(&self->_ctx_, ctx);
  JreStrongAssign(&self->_log_, log);
  if (cl == nil) JreStrongAssign(&self->_cl_, JavaLangClassLoader_getSystemClassLoader());
  else JreStrongAssign(&self->_cl_, cl);
}

NetI2pRouterStartupLoadClientAppsJob_RunApp *new_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadClientAppsJob_RunApp, initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_, className_, appName, args, ctx, log, cl)
}

NetI2pRouterStartupLoadClientAppsJob_RunApp *create_NetI2pRouterStartupLoadClientAppsJob_RunApp_initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_(NSString *className_, NSString *appName, IOSObjectArray *args, NetI2pRouterRouterContext *ctx, NetI2pUtilLog *log, JavaLangClassLoader *cl) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadClientAppsJob_RunApp, initWithNSString_withNSString_withNSStringArray_withNetI2pRouterRouterContext_withNetI2pUtilLog_withJavaLangClassLoader_, className_, appName, args, ctx, log, cl)
}

jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isRouterAppWithIOSClass_(IOSClass *cls) {
  NetI2pRouterStartupLoadClientAppsJob_RunApp_initialize();
  return NetI2pRouterStartupLoadClientAppsJob_RunApp_isInterfaceWithIOSClass_withIOSClass_(cls, NetI2pRouterAppRouterApp_class_());
}

jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isClientAppWithIOSClass_(IOSClass *cls) {
  NetI2pRouterStartupLoadClientAppsJob_RunApp_initialize();
  return NetI2pRouterStartupLoadClientAppsJob_RunApp_isInterfaceWithIOSClass_withIOSClass_(cls, NetI2pAppClientApp_class_());
}

jboolean NetI2pRouterStartupLoadClientAppsJob_RunApp_isInterfaceWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *intfc) {
  NetI2pRouterStartupLoadClientAppsJob_RunApp_initialize();
  @try {
    IOSObjectArray *intfcs = [((IOSClass *) nil_chk(cls)) getInterfaces];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(intfcs))->size_; i++) {
      if (IOSObjectArray_Get(intfcs, i) == intfc) return true;
    }
  }
  @catch (JavaLangThrowable *t) {
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupLoadClientAppsJob_RunApp)
