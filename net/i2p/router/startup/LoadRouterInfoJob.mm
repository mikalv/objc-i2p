//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/startup/LoadRouterInfoJob.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/data/router/RouterPrivateKeyFile.h"
#include "net/i2p/router/Banlist.h"
#include "net/i2p/router/JobImpl.h"
#include "net/i2p/router/JobQueue.h"
#include "net/i2p/router/KeyManager.h"
#include "net/i2p/router/MessageHistory.h"
#include "net/i2p/router/Router.h"
#include "net/i2p/router/RouterContext.h"
#include "net/i2p/router/crypto/FamilyKeyCrypto.h"
#include "net/i2p/router/networkdb/kademlia/PersistentDataStore.h"
#include "net/i2p/router/startup/BootCommSystemJob.h"
#include "net/i2p/router/startup/CreateRouterInfoJob.h"
#include "net/i2p/router/startup/LoadRouterInfoJob.h"
#include "net/i2p/router/startup/RebuildRouterInfoJob.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pRouterStartupLoadRouterInfoJob () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pDataRouterRouterInfo *_us_;
}

- (void)loadRouterInfo;

- (jboolean)shouldRebuildWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privkey;

@end

J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadRouterInfoJob, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pRouterStartupLoadRouterInfoJob, _us_, NetI2pDataRouterRouterInfo *)

inline JavaUtilConcurrentAtomicAtomicBoolean *NetI2pRouterStartupLoadRouterInfoJob_get__keyLengthChecked(void);
static JavaUtilConcurrentAtomicAtomicBoolean *NetI2pRouterStartupLoadRouterInfoJob__keyLengthChecked;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterStartupLoadRouterInfoJob, _keyLengthChecked, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void NetI2pRouterStartupLoadRouterInfoJob_loadRouterInfo(NetI2pRouterStartupLoadRouterInfoJob *self);

__attribute__((unused)) static jboolean NetI2pRouterStartupLoadRouterInfoJob_shouldRebuildWithNetI2pDataPrivateKey_(NetI2pRouterStartupLoadRouterInfoJob *self, NetI2pDataPrivateKey *privkey);

J2OBJC_INITIALIZED_DEFN(NetI2pRouterStartupLoadRouterInfoJob)

@implementation NetI2pRouterStartupLoadRouterInfoJob

- (instancetype)initWithNetI2pRouterRouterContext:(NetI2pRouterRouterContext *)ctx {
  NetI2pRouterStartupLoadRouterInfoJob_initWithNetI2pRouterRouterContext_(self, ctx);
  return self;
}

- (NSString *)getName {
  return @"Load Router Info";
}

- (void)runJob {
  @synchronized(((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router]))->routerInfoFileLock_) {
    NetI2pRouterStartupLoadRouterInfoJob_loadRouterInfo(self);
  }
  if (_us_ == nil) {
    NetI2pRouterStartupRebuildRouterInfoJob *r = create_NetI2pRouterStartupRebuildRouterInfoJob_initWithNetI2pRouterRouterContext_([self getContext]);
    [r rebuildRouterInfoWithBoolean:false];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:self];
    return;
  }
  else {
    [((NetI2pRouterRouter *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) router])) setRouterInfoWithNetI2pDataRouterRouterInfo:_us_];
    [((NetI2pRouterMessageHistory *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) messageHistory])) initialize__WithBoolean:true];
    [((NetI2pRouterJobQueue *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) jobQueue])) addJobWithNetI2pRouterJob:create_NetI2pRouterStartupBootCommSystemJob_initWithNetI2pRouterRouterContext_([self getContext])];
  }
}

- (void)loadRouterInfo {
  NetI2pRouterStartupLoadRouterInfoJob_loadRouterInfo(self);
}

- (jboolean)shouldRebuildWithNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)privkey {
  return NetI2pRouterStartupLoadRouterInfoJob_shouldRebuildWithNetI2pDataPrivateKey_(self, privkey);
}

+ (NetI2pRouterStartupLoadRouterInfoJob_KeyData *)readKeyDataWithJavaIoFile:(JavaIoFile *)rkf1
                                                             withJavaIoFile:(JavaIoFile *)rkf2 {
  return NetI2pRouterStartupLoadRouterInfoJob_readKeyDataWithJavaIoFile_withJavaIoFile_(rkf1, rkf2);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_us_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pRouterStartupLoadRouterInfoJob_KeyData;", 0x9, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pRouterRouterContext:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(runJob);
  methods[3].selector = @selector(loadRouterInfo);
  methods[4].selector = @selector(shouldRebuildWithNetI2pDataPrivateKey:);
  methods[5].selector = @selector(readKeyDataWithJavaIoFile:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_us_", "LNetI2pDataRouterRouterInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyLengthChecked", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pRouterRouterContext;", "shouldRebuild", "LNetI2pDataPrivateKey;", "readKeyData", "LJavaIoFile;LJavaIoFile;", "LNetI2pDataDataFormatException;LJavaIoIOException;", &NetI2pRouterStartupLoadRouterInfoJob__keyLengthChecked, "LNetI2pRouterStartupLoadRouterInfoJob_KeyData;" };
  static const J2ObjcClassInfo _NetI2pRouterStartupLoadRouterInfoJob = { "LoadRouterInfoJob", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x0, 6, 3, -1, 7, -1, -1, -1 };
  return &_NetI2pRouterStartupLoadRouterInfoJob;
}

+ (void)initialize {
  if (self == [NetI2pRouterStartupLoadRouterInfoJob class]) {
    JreStrongAssignAndConsume(&NetI2pRouterStartupLoadRouterInfoJob__keyLengthChecked, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
    J2OBJC_SET_INITIALIZED(NetI2pRouterStartupLoadRouterInfoJob)
  }
}

@end

void NetI2pRouterStartupLoadRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterStartupLoadRouterInfoJob *self, NetI2pRouterRouterContext *ctx) {
  NetI2pRouterJobImpl_initWithNetI2pRouterRouterContext_(self, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pRouterStartupLoadRouterInfoJob_class_()]);
}

NetI2pRouterStartupLoadRouterInfoJob *new_NetI2pRouterStartupLoadRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadRouterInfoJob, initWithNetI2pRouterRouterContext_, ctx)
}

NetI2pRouterStartupLoadRouterInfoJob *create_NetI2pRouterStartupLoadRouterInfoJob_initWithNetI2pRouterRouterContext_(NetI2pRouterRouterContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadRouterInfoJob, initWithNetI2pRouterRouterContext_, ctx)
}

void NetI2pRouterStartupLoadRouterInfoJob_loadRouterInfo(NetI2pRouterStartupLoadRouterInfoJob *self) {
  NetI2pDataRouterRouterInfo *info = nil;
  JavaIoFile *rif = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getRouterDir], NetI2pRouterStartupCreateRouterInfoJob_INFO_FILENAME);
  jboolean infoExists = [rif exists];
  JavaIoFile *rkf = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getRouterDir], NetI2pRouterStartupCreateRouterInfoJob_KEYS_FILENAME);
  jboolean keysExist = [rkf exists];
  JavaIoFile *rkf2 = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pRouterRouterContext *) nil_chk([self getContext])) getRouterDir], NetI2pRouterStartupCreateRouterInfoJob_KEYS2_FILENAME);
  jboolean keys2Exist = [rkf2 exists];
  JavaIoInputStream *fis1 = nil;
  @try {
    if (infoExists && (keys2Exist || keysExist)) {
      fis1 = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(rif));
      info = create_NetI2pDataRouterRouterInfo_init();
      [info readBytesWithJavaIoInputStream:fis1];
      if (![info isValid]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Our RouterInfo has a bad signature");
      if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$I$", @"Reading in routerInfo from ", [rif getAbsolutePath], @" and it has ", [((id<JavaUtilCollection>) nil_chk([info getAddresses])) size], @" addresses")];
      if (NetI2pDataDataHelper_eqWithId_withId_([info getOptionWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_OPT_NAME], [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterCryptoFamilyKeyCrypto_PROP_FAMILY_NAME])) {
        JreStrongAssign(&self->_us_, info);
      }
      else {
        [self->_log_ logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"NetDb family name changed"];
      }
    }
    if (keys2Exist || keysExist) {
      NetI2pRouterStartupLoadRouterInfoJob_KeyData *kd = NetI2pRouterStartupLoadRouterInfoJob_readKeyDataWithJavaIoFile_withJavaIoFile_(rkf, rkf2);
      NetI2pDataPublicKey *pubkey = [((NetI2pDataRouterRouterIdentity *) nil_chk(((NetI2pRouterStartupLoadRouterInfoJob_KeyData *) nil_chk(kd))->routerIdentity_)) getPublicKey];
      NetI2pDataSigningPublicKey *signingPubKey = [kd->routerIdentity_ getSigningPublicKey];
      NetI2pDataPrivateKey *privkey = kd->privateKey_;
      NetI2pDataSigningPrivateKey *signingPrivKey = kd->signingPrivateKey_;
      NetI2pCryptoSigType *stype = [((NetI2pDataSigningPublicKey *) nil_chk(signingPubKey)) getType];
      NetI2pCryptoSigType *cstype = NetI2pRouterStartupCreateRouterInfoJob_getSigTypeConfigWithNetI2pRouterRouterContext_([self getContext]);
      jboolean sigTypeChanged = stype != cstype;
      if (sigTypeChanged && [((NetI2pRouterRouterContext *) nil_chk([self getContext])) getPropertyWithNSString:NetI2pRouterStartupCreateRouterInfoJob_PROP_ROUTER_SIGTYPE] == nil) {
        if ([((NetI2pUtilRandomSource *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) random])) nextIntWithInt:4] > 0) {
          sigTypeChanged = false;
          if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"Deferring RI rekey from ", stype, @" to ", cstype)];
        }
      }
      if (sigTypeChanged || NetI2pRouterStartupLoadRouterInfoJob_shouldRebuildWithNetI2pDataPrivateKey_(self, privkey)) {
        if (self->_us_ != nil) {
          NetI2pDataHash *h = [((NetI2pDataRouterRouterIdentity *) nil_chk([self->_us_ getIdentity])) getHash];
          [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$", @"Deleting old router identity ", [((NetI2pDataHash *) nil_chk(h)) toBase64])];
          JavaIoFile *f = NetI2pRouterNetworkdbKademliaPersistentDataStore_getRouterInfoFileWithNetI2pRouterRouterContext_withNetI2pDataHash_([self getContext], h);
          [((JavaIoFile *) nil_chk(f)) delete__];
          [((NetI2pRouterBanlist *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) banlist])) banlistRouterForeverWithNetI2pDataHash:h withNSString:@"Our previous identity"];
          JreStrongAssign(&self->_us_, nil);
        }
        if (sigTypeChanged) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$@", @"Rebuilding RouterInfo with new signature type ", cstype)];
        if (fis1 != nil) {
          @try {
            [fis1 close];
          }
          @catch (JavaIoIOException *ioe) {
          }
          fis1 = nil;
        }
        [rif delete__];
        [rkf delete__];
        [rkf2 delete__];
        return;
      }
      [((NetI2pRouterKeyManager *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyManager])) setKeysWithNetI2pDataPublicKey:pubkey withNetI2pDataPrivateKey:privkey withNetI2pDataSigningPublicKey:signingPubKey withNetI2pDataSigningPrivateKey:signingPrivKey];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$$$", @"Error reading the router info from ", [rif getAbsolutePath], @" and the keys from ", [rkf getAbsolutePath]) withJavaLangThrowable:ioe];
    JreStrongAssign(&self->_us_, nil);
    if (fis1 != nil) {
      @try {
        [fis1 close];
      }
      @catch (JavaIoIOException *ioe2) {
      }
      fis1 = nil;
    }
    [rif delete__];
    [rkf delete__];
    [rkf2 delete__];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$$$", @"Corrupt router info or keys at ", [rif getAbsolutePath], @" / ", [rkf getAbsolutePath]) withJavaLangThrowable:dfe];
    JreStrongAssign(&self->_us_, nil);
    if (fis1 != nil) {
      @try {
        [fis1 close];
      }
      @catch (JavaIoIOException *ioe) {
      }
      fis1 = nil;
    }
    [rif delete__];
    [rkf delete__];
    [rkf2 delete__];
  }
  @finally {
    if (fis1 != nil) @try {
      [fis1 close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jboolean NetI2pRouterStartupLoadRouterInfoJob_shouldRebuildWithNetI2pDataPrivateKey_(NetI2pRouterStartupLoadRouterInfoJob *self, NetI2pDataPrivateKey *privkey) {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(NetI2pRouterStartupLoadRouterInfoJob__keyLengthChecked)) compareAndSetWithBoolean:false withBoolean:true]) return false;
  IOSByteArray *pkd = [((NetI2pDataPrivateKey *) nil_chk(privkey)) getData];
  jboolean haslong = false;
  for (jint i = 0; i < 8; i++) {
    if (IOSByteArray_Get(nil_chk(pkd), i) != 0) {
      haslong = true;
      break;
    }
  }
  jboolean uselong = [((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pRouterRouterContext *) nil_chk([self getContext])) keyGenerator])) useLongElGamalExponent];
  if (uselong && !haslong) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Rebuilding RouterInfo with longer key"];
  if (!uselong && haslong) [((NetI2pUtilLog *) nil_chk(self->_log_)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"Rebuilding RouterInfo with faster key"];
  return uselong != haslong;
}

NetI2pRouterStartupLoadRouterInfoJob_KeyData *NetI2pRouterStartupLoadRouterInfoJob_readKeyDataWithJavaIoFile_withJavaIoFile_(JavaIoFile *rkf1, JavaIoFile *rkf2) {
  NetI2pRouterStartupLoadRouterInfoJob_initialize();
  NetI2pDataRouterRouterIdentity *ri;
  NetI2pDataPrivateKey *privkey;
  NetI2pDataSigningPrivateKey *signingPrivKey;
  if ([((JavaIoFile *) nil_chk(rkf2)) exists]) {
    NetI2pDataRouterRouterPrivateKeyFile *pkf = create_NetI2pDataRouterRouterPrivateKeyFile_initWithJavaIoFile_(rkf2);
    ri = [pkf getRouterIdentity];
    if (![pkf validateKeyPairs]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Key pairs invalid");
    privkey = [pkf getPrivKey];
    signingPrivKey = [pkf getSigningPrivKey];
  }
  else {
    JavaIoInputStream *fis = nil;
    @try {
      fis = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(rkf1));
      privkey = create_NetI2pDataPrivateKey_init();
      [privkey readBytesWithJavaIoInputStream:fis];
      signingPrivKey = create_NetI2pDataSigningPrivateKey_init();
      [signingPrivKey readBytesWithJavaIoInputStream:fis];
      NetI2pDataPublicKey *pubkey = create_NetI2pDataPublicKey_init();
      [pubkey readBytesWithJavaIoInputStream:fis];
      NetI2pDataSigningPublicKey *signingPubKey = create_NetI2pDataSigningPublicKey_init();
      [signingPubKey readBytesWithJavaIoInputStream:fis];
      @try {
        if (![pubkey isEqual:NetI2pCryptoKeyGenerator_getPublicKeyWithNetI2pDataPrivateKey_(privkey)]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Key pairs invalid");
        if (![signingPubKey isEqual:NetI2pCryptoKeyGenerator_getSigningPublicKeyWithNetI2pDataSigningPrivateKey_(signingPrivKey)]) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Key pairs invalid");
      }
      @catch (JavaLangIllegalArgumentException *iae) {
        @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"Key pairs invalid", iae);
      }
      ri = create_NetI2pDataRouterRouterIdentity_init();
      [ri setPublicKeyWithNetI2pDataPublicKey:pubkey];
      [ri setSigningPublicKeyWithNetI2pDataSigningPublicKey:signingPubKey];
      [ri setCertificateWithNetI2pDataCertificate:JreLoadStatic(NetI2pDataCertificate, NULL_CERT)];
    }
    @finally {
      if (fis != nil) @try {
        [fis close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return create_NetI2pRouterStartupLoadRouterInfoJob_KeyData_initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(ri, privkey, signingPrivKey);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupLoadRouterInfoJob)

@implementation NetI2pRouterStartupLoadRouterInfoJob_KeyData

- (instancetype)initWithNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)ri
                              withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)pk
                       withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk {
  NetI2pRouterStartupLoadRouterInfoJob_KeyData_initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(self, ri, pk, spk);
  return self;
}

- (void)dealloc {
  RELEASE_(routerIdentity_);
  RELEASE_(privateKey_);
  RELEASE_(signingPrivateKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataRouterRouterIdentity:withNetI2pDataPrivateKey:withNetI2pDataSigningPrivateKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "routerIdentity_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "privateKey_", "LNetI2pDataPrivateKey;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "signingPrivateKey_", "LNetI2pDataSigningPrivateKey;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataRouterRouterIdentity;LNetI2pDataPrivateKey;LNetI2pDataSigningPrivateKey;", "LNetI2pRouterStartupLoadRouterInfoJob;" };
  static const J2ObjcClassInfo _NetI2pRouterStartupLoadRouterInfoJob_KeyData = { "KeyData", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x9, 1, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pRouterStartupLoadRouterInfoJob_KeyData;
}

@end

void NetI2pRouterStartupLoadRouterInfoJob_KeyData_initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pRouterStartupLoadRouterInfoJob_KeyData *self, NetI2pDataRouterRouterIdentity *ri, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk) {
  NSObject_init(self);
  JreStrongAssign(&self->routerIdentity_, ri);
  JreStrongAssign(&self->privateKey_, pk);
  JreStrongAssign(&self->signingPrivateKey_, spk);
}

NetI2pRouterStartupLoadRouterInfoJob_KeyData *new_NetI2pRouterStartupLoadRouterInfoJob_KeyData_initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataRouterRouterIdentity *ri, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk) {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupLoadRouterInfoJob_KeyData, initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_, ri, pk, spk)
}

NetI2pRouterStartupLoadRouterInfoJob_KeyData *create_NetI2pRouterStartupLoadRouterInfoJob_KeyData_initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataRouterRouterIdentity *ri, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk) {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupLoadRouterInfoJob_KeyData, initWithNetI2pDataRouterRouterIdentity_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_, ri, pk, spk)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupLoadRouterInfoJob_KeyData)
