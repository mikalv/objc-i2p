//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/router/startup/PortableWorkingDir.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "net/i2p/router/startup/PortableWorkingDir.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pRouterStartupPortableWorkingDir ()

+ (void)setupSystemOutWithNSString:(NSString *)dir;

@end

inline NSString *NetI2pRouterStartupPortableWorkingDir_get_PROP_BASE_DIR(void);
static NSString *NetI2pRouterStartupPortableWorkingDir_PROP_BASE_DIR = @"i2p.dir.base";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterStartupPortableWorkingDir, PROP_BASE_DIR, NSString *)

inline NSString *NetI2pRouterStartupPortableWorkingDir_get_PROP_WORKING_DIR(void);
static NSString *NetI2pRouterStartupPortableWorkingDir_PROP_WORKING_DIR = @"i2p.dir.config";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterStartupPortableWorkingDir, PROP_WORKING_DIR, NSString *)

inline NSString *NetI2pRouterStartupPortableWorkingDir_get_PROP_WRAPPER_LOG(void);
static NSString *NetI2pRouterStartupPortableWorkingDir_PROP_WRAPPER_LOG = @"wrapper.logfile";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterStartupPortableWorkingDir, PROP_WRAPPER_LOG, NSString *)

inline NSString *NetI2pRouterStartupPortableWorkingDir_get_DEFAULT_WRAPPER_LOG(void);
static NSString *NetI2pRouterStartupPortableWorkingDir_DEFAULT_WRAPPER_LOG = @"wrapper.log";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pRouterStartupPortableWorkingDir, DEFAULT_WRAPPER_LOG, NSString *)

__attribute__((unused)) static void NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_(NSString *dir);

@implementation NetI2pRouterStartupPortableWorkingDir

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pRouterStartupPortableWorkingDir_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getWorkingDirWithJavaUtilProperties:(JavaUtilProperties *)envProps {
  return NetI2pRouterStartupPortableWorkingDir_getWorkingDirWithJavaUtilProperties_(envProps);
}

+ (void)setupSystemOutWithNSString:(NSString *)dir {
  NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_(dir);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWorkingDirWithJavaUtilProperties:);
  methods[2].selector = @selector(setupSystemOutWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_BASE_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "PROP_WORKING_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PROP_WRAPPER_LOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "DEFAULT_WRAPPER_LOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "getWorkingDir", "LJavaUtilProperties;", "setupSystemOut", "LNSString;", &NetI2pRouterStartupPortableWorkingDir_PROP_BASE_DIR, &NetI2pRouterStartupPortableWorkingDir_PROP_WORKING_DIR, &NetI2pRouterStartupPortableWorkingDir_PROP_WRAPPER_LOG, &NetI2pRouterStartupPortableWorkingDir_DEFAULT_WRAPPER_LOG };
  static const J2ObjcClassInfo _NetI2pRouterStartupPortableWorkingDir = { "PortableWorkingDir", "net.i2p.router.startup", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pRouterStartupPortableWorkingDir;
}

@end

void NetI2pRouterStartupPortableWorkingDir_init(NetI2pRouterStartupPortableWorkingDir *self) {
  NSObject_init(self);
}

NetI2pRouterStartupPortableWorkingDir *new_NetI2pRouterStartupPortableWorkingDir_init() {
  J2OBJC_NEW_IMPL(NetI2pRouterStartupPortableWorkingDir, init)
}

NetI2pRouterStartupPortableWorkingDir *create_NetI2pRouterStartupPortableWorkingDir_init() {
  J2OBJC_CREATE_IMPL(NetI2pRouterStartupPortableWorkingDir, init)
}

NSString *NetI2pRouterStartupPortableWorkingDir_getWorkingDirWithJavaUtilProperties_(JavaUtilProperties *envProps) {
  NetI2pRouterStartupPortableWorkingDir_initialize();
  NSString *dir = nil;
  if (envProps != nil) dir = [envProps getPropertyWithNSString:NetI2pRouterStartupPortableWorkingDir_PROP_WORKING_DIR];
  if (dir == nil) dir = JavaLangSystem_getPropertyWithNSString_(NetI2pRouterStartupPortableWorkingDir_PROP_WORKING_DIR);
  NSString *cwd = nil;
  if (envProps != nil) cwd = [envProps getPropertyWithNSString:NetI2pRouterStartupPortableWorkingDir_PROP_BASE_DIR];
  if (cwd == nil) {
    cwd = JavaLangSystem_getPropertyWithNSString_(NetI2pRouterStartupPortableWorkingDir_PROP_BASE_DIR);
    if (cwd == nil) cwd = JavaLangSystem_getPropertyWithNSString_(@"user.dir");
  }
  JavaIoFile *dirf = create_NetI2pUtilSecureDirectory_initWithNSString_(dir);
  JavaIoFile *oldDirf = create_JavaIoFile_initWithNSString_(cwd);
  JavaIoFile *test = create_JavaIoFile_initWithJavaIoFile_withNSString_(oldDirf, @"hosts.txt");
  if (![test exists]) {
    NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_(cwd);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"ERROR - Cannot find I2P installation in ", cwd, @" - Will probably be just a router with no apps or console at all!")];
    return cwd;
  }
  if (![dirf exists] && ![dirf mkdir]) {
    NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_(nil);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Wanted to use ", [dirf description], @" for a working directory but could not create it")];
    return cwd;
  }
  NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_([dirf getAbsolutePath]);
  return [dirf getAbsolutePath];
}

void NetI2pRouterStartupPortableWorkingDir_setupSystemOutWithNSString_(NSString *dir) {
  NetI2pRouterStartupPortableWorkingDir_initialize();
  if (NetI2pUtilSystemVersion_hasWrapper()) return;
  if (JavaLangSystem_getPropertyWithNSString_(@"I2P_DISABLE_OUTPUT_OVERRIDE") != nil) return;
  NSString *path = JavaLangSystem_getPropertyWithNSString_(NetI2pRouterStartupPortableWorkingDir_PROP_WRAPPER_LOG);
  JavaIoFile *logfile;
  if (path != nil) {
    logfile = create_JavaIoFile_initWithNSString_(path);
  }
  else {
    logfile = create_JavaIoFile_initWithNSString_(NetI2pRouterStartupPortableWorkingDir_DEFAULT_WRAPPER_LOG);
    if (![logfile exists]) {
      if (dir == nil) dir = JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir");
      logfile = create_JavaIoFile_initWithNSString_withNSString_(dir, NetI2pRouterStartupPortableWorkingDir_DEFAULT_WRAPPER_LOG);
    }
  }
  JavaLangSystem_setPropertyWithNSString_withNSString_(NetI2pRouterStartupPortableWorkingDir_PROP_WRAPPER_LOG, [logfile getAbsolutePath]);
  @try {
    JavaIoPrintStream *ps = create_JavaIoPrintStream_initWithJavaIoOutputStream_withBoolean_withNSString_(create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_withBoolean_(logfile, true), true, @"UTF-8");
    JavaLangSystem_setOutWithJavaIoPrintStream_(ps);
    JavaLangSystem_setErrWithJavaIoPrintStream_(ps);
  }
  @catch (JavaIoIOException *ioe) {
    [ioe printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pRouterStartupPortableWorkingDir)
