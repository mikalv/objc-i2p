//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SigUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoSigUtil")
#ifdef RESTRICT_NetI2pCryptoSigUtil
#define INCLUDE_ALL_NetI2pCryptoSigUtil 0
#else
#define INCLUDE_ALL_NetI2pCryptoSigUtil 1
#endif
#undef RESTRICT_NetI2pCryptoSigUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoSigUtil_) && (INCLUDE_ALL_NetI2pCryptoSigUtil || defined(INCLUDE_NetI2pCryptoSigUtil))
#define NetI2pCryptoSigUtil_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaMathBigInteger;
@class NetI2pCryptoEddsaEdDSAPrivateKey;
@class NetI2pCryptoEddsaEdDSAPublicKey;
@class NetI2pCryptoSigType;
@class NetI2pDataSignature;
@class NetI2pDataSigningPrivateKey;
@class NetI2pDataSigningPublicKey;
@protocol JavaSecurityInterfacesDSAPrivateKey;
@protocol JavaSecurityInterfacesDSAPublicKey;
@protocol JavaSecurityInterfacesECPrivateKey;
@protocol JavaSecurityInterfacesECPublicKey;
@protocol JavaSecurityInterfacesRSAPrivateKey;
@protocol JavaSecurityInterfacesRSAPublicKey;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;

@interface NetI2pCryptoSigUtil : NSObject

#pragma mark Public

+ (IOSObjectArray *)aSN1ToBigIntegerWithByteArray:(IOSByteArray *)asn
                                          withInt:(jint)len;

+ (void)clearCaches;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey:(id<JavaSecurityInterfacesDSAPrivateKey>)pk;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey:(id<JavaSecurityInterfacesDSAPublicKey>)pk;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesECPrivateKey:(id<JavaSecurityInterfacesECPrivateKey>)pk
                                                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)pk
                                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey:(NetI2pCryptoEddsaEdDSAPrivateKey *)pk
                                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey:(NetI2pCryptoEddsaEdDSAPublicKey *)pk
                                                       withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                                               withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pk;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pk
                                             withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey:(id<JavaSecurityInterfacesRSAPrivateKey>)pk
                                                            withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey:(id<JavaSecurityInterfacesRSAPublicKey>)pk
                                                          withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NetI2pDataSignature *)fromJavaSigWithByteArray:(IOSByteArray *)asn
                          withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (id<JavaSecurityPrivateKey>)importJavaPrivateKeyWithJavaIoFile:(JavaIoFile *)file
                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (id<JavaSecurityPublicKey>)importJavaPublicKeyWithJavaIoFile:(JavaIoFile *)file
                                       withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (jint)intToASN1WithByteArray:(IOSByteArray *)d
                       withInt:(jint)idx
                       withInt:(jint)val;

+ (IOSByteArray *)rectifyWithJavaMathBigInteger:(JavaMathBigInteger *)bi
                                        withInt:(jint)len;

+ (IOSByteArray *)sigBytesToASN1WithJavaMathBigInteger:(JavaMathBigInteger *)r
                                withJavaMathBigInteger:(JavaMathBigInteger *)s;

+ (id<JavaSecurityInterfacesDSAPrivateKey>)toJavaDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (id<JavaSecurityInterfacesDSAPublicKey>)toJavaDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (id<JavaSecurityInterfacesECPrivateKey>)toJavaECKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (id<JavaSecurityInterfacesECPublicKey>)toJavaECKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (NetI2pCryptoEddsaEdDSAPrivateKey *)toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (NetI2pCryptoEddsaEdDSAPublicKey *)toJavaEdDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (id<JavaSecurityPrivateKey>)toJavaKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (id<JavaSecurityPublicKey>)toJavaKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (id<JavaSecurityInterfacesRSAPrivateKey>)toJavaRSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (id<JavaSecurityInterfacesRSAPublicKey>)toJavaRSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (IOSByteArray *)toJavaSigWithNetI2pDataSignature:(NetI2pDataSignature *)sig;

#pragma mark Package-Private

+ (IOSByteArray *)combineWithJavaMathBigInteger:(JavaMathBigInteger *)x
                         withJavaMathBigInteger:(JavaMathBigInteger *)y
                                        withInt:(jint)len;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoSigUtil)

FOUNDATION_EXPORT id<JavaSecurityPublicKey> NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityPublicKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> pk);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityPrivateKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT id<JavaSecurityInterfacesECPublicKey> NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

FOUNDATION_EXPORT id<JavaSecurityInterfacesECPrivateKey> NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesECPublicKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesECPrivateKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAPublicKey *NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAPrivateKey *NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey_withNetI2pCryptoSigType_(NetI2pCryptoEddsaEdDSAPublicKey *pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey_withNetI2pCryptoSigType_(NetI2pCryptoEddsaEdDSAPrivateKey *pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT id<JavaSecurityInterfacesDSAPublicKey> NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

FOUNDATION_EXPORT id<JavaSecurityInterfacesDSAPrivateKey> NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> pk);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey_(id<JavaSecurityInterfacesDSAPrivateKey> pk);

FOUNDATION_EXPORT id<JavaSecurityInterfacesRSAPublicKey> NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

FOUNDATION_EXPORT id<JavaSecurityInterfacesRSAPrivateKey> NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesRSAPublicKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesRSAPrivateKey> pk, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT IOSByteArray *NetI2pCryptoSigUtil_toJavaSigWithNetI2pDataSignature_(NetI2pDataSignature *sig);

FOUNDATION_EXPORT NetI2pDataSignature *NetI2pCryptoSigUtil_fromJavaSigWithByteArray_withNetI2pCryptoSigType_(IOSByteArray *asn, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> NetI2pCryptoSigUtil_importJavaPublicKeyWithJavaIoFile_withNetI2pCryptoSigType_(JavaIoFile *file, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> NetI2pCryptoSigUtil_importJavaPrivateKeyWithJavaIoFile_withNetI2pCryptoSigType_(JavaIoFile *file, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT IOSByteArray *NetI2pCryptoSigUtil_combineWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *x, JavaMathBigInteger *y, jint len);

FOUNDATION_EXPORT IOSByteArray *NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bi, jint len);

FOUNDATION_EXPORT IOSByteArray *NetI2pCryptoSigUtil_sigBytesToASN1WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *r, JavaMathBigInteger *s);

FOUNDATION_EXPORT jint NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(IOSByteArray *d, jint idx, jint val);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoSigUtil_aSN1ToBigIntegerWithByteArray_withInt_(IOSByteArray *asn, jint len);

FOUNDATION_EXPORT void NetI2pCryptoSigUtil_clearCaches(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoSigUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoSigUtil")
