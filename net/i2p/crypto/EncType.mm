//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/EncType.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/InvalidParameterSpecException.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "net/i2p/crypto/CryptoConstants.h"
#include "net/i2p/crypto/ECConstants.h"
#include "net/i2p/crypto/EncAlgo.h"
#include "net/i2p/crypto/EncType.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalParameterSpec.h"

@interface NetI2pCryptoEncType () {
 @public
  jint code_;
  jint pubkeyLen_;
  jint privkeyLen_;
  NetI2pCryptoEncAlgo *base_;
  NSString *algoName_;
  NSString *since_;
  id<JavaSecuritySpecAlgorithmParameterSpec> params_;
  jboolean isAvail_;
}

- (jboolean)x_isAvailable;

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoEncType, base_, NetI2pCryptoEncAlgo *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEncType, algoName_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEncType, since_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEncType, params_, id<JavaSecuritySpecAlgorithmParameterSpec>)

inline id<JavaUtilMap> NetI2pCryptoEncType_get_BY_CODE(void);
static id<JavaUtilMap> NetI2pCryptoEncType_BY_CODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoEncType, BY_CODE, id<JavaUtilMap>)

__attribute__((unused)) static void NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(NetI2pCryptoEncType *self, jint cod, jint pubLen, jint privLen, NetI2pCryptoEncAlgo *baseAlgo, NSString *transformation, id<JavaSecuritySpecAlgorithmParameterSpec> pSpec, NSString *supportedSince, NSString *__name, jint __ordinal);

__attribute__((unused)) static jboolean NetI2pCryptoEncType_x_isAvailable(NetI2pCryptoEncType *self);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoEncType)

NetI2pCryptoEncType *NetI2pCryptoEncType_values_[4];

@implementation NetI2pCryptoEncType

+ (NetI2pCryptoEncType *)ELGAMAL_2048 {
  return JreEnum(NetI2pCryptoEncType, ELGAMAL_2048);
}

+ (NetI2pCryptoEncType *)EC_P256 {
  return JreEnum(NetI2pCryptoEncType, EC_P256);
}

+ (NetI2pCryptoEncType *)EC_P384 {
  return JreEnum(NetI2pCryptoEncType, EC_P384);
}

+ (NetI2pCryptoEncType *)EC_P521 {
  return JreEnum(NetI2pCryptoEncType, EC_P521);
}

- (jint)getCode {
  return code_;
}

- (jint)getPubkeyLen {
  return pubkeyLen_;
}

- (jint)getPrivkeyLen {
  return privkeyLen_;
}

- (NetI2pCryptoEncAlgo *)getBaseAlgorithm {
  return base_;
}

- (NSString *)getAlgorithmName {
  return algoName_;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParams {
  if (params_ == nil) @throw create_JavaSecuritySpecInvalidParameterSpecException_initWithNSString_(JreStrcat("$$", [self description], @" is not available in this JVM"));
  return params_;
}

- (NSString *)getSupportedSince {
  return since_;
}

- (jboolean)isAvailable {
  return isAvail_;
}

- (jboolean)x_isAvailable {
  return NetI2pCryptoEncType_x_isAvailable(self);
}

+ (jboolean)isAvailableWithInt:(jint)code {
  return NetI2pCryptoEncType_isAvailableWithInt_(code);
}

+ (jboolean)isAvailableWithNSString:(NSString *)stype {
  return NetI2pCryptoEncType_isAvailableWithNSString_(stype);
}

+ (NetI2pCryptoEncType *)getByCodeWithInt:(jint)code {
  return NetI2pCryptoEncType_getByCodeWithInt_(code);
}

+ (NetI2pCryptoEncType *)parseEncTypeWithNSString:(NSString *)stype {
  return NetI2pCryptoEncType_parseEncTypeWithNSString_(stype);
}

+ (IOSObjectArray *)values {
  return NetI2pCryptoEncType_values();
}

+ (NetI2pCryptoEncType *)valueOfWithNSString:(NSString *)name {
  return NetI2pCryptoEncType_valueOfWithNSString_(name);
}

- (NetI2pCryptoEncType_Enum)toNSEnum {
  return (NetI2pCryptoEncType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEncAlgo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEncType;", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEncType;", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "[LNetI2pCryptoEncType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEncType;", 0x9, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCode);
  methods[1].selector = @selector(getPubkeyLen);
  methods[2].selector = @selector(getPrivkeyLen);
  methods[3].selector = @selector(getBaseAlgorithm);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getParams);
  methods[6].selector = @selector(getSupportedSince);
  methods[7].selector = @selector(isAvailable);
  methods[8].selector = @selector(x_isAvailable);
  methods[9].selector = @selector(isAvailableWithInt:);
  methods[10].selector = @selector(isAvailableWithNSString:);
  methods[11].selector = @selector(getByCodeWithInt:);
  methods[12].selector = @selector(parseEncTypeWithNSString:);
  methods[13].selector = @selector(values);
  methods[14].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ELGAMAL_2048", "LNetI2pCryptoEncType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "EC_P256", "LNetI2pCryptoEncType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "EC_P384", "LNetI2pCryptoEncType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "EC_P521", "LNetI2pCryptoEncType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "code_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pubkeyLen_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "privkeyLen_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "base_", "LNetI2pCryptoEncAlgo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "algoName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "since_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "params_", "LJavaSecuritySpecAlgorithmParameterSpec;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isAvail_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BY_CODE", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySpecInvalidParameterSpecException;", "isAvailable", "I", "LNSString;", "getByCode", "parseEncType", "valueOf", &JreEnum(NetI2pCryptoEncType, ELGAMAL_2048), &JreEnum(NetI2pCryptoEncType, EC_P256), &JreEnum(NetI2pCryptoEncType, EC_P384), &JreEnum(NetI2pCryptoEncType, EC_P521), &NetI2pCryptoEncType_BY_CODE, "Ljava/util/Map<Ljava/lang/Integer;Lnet/i2p/crypto/EncType;>;", "Ljava/lang/Enum<Lnet/i2p/crypto/EncType;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoEncType = { "EncType", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x4011, 15, 13, -1, -1, -1, 13, -1 };
  return &_NetI2pCryptoEncType;
}

+ (void)initialize {
  if (self == [NetI2pCryptoEncType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(NetI2pCryptoEncType, ELGAMAL_2048) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(e, 0, 256, 256, JreLoadEnum(NetI2pCryptoEncAlgo, ELGAMAL), @"ElGamal/None/NoPadding", JreLoadStatic(NetI2pCryptoCryptoConstants, I2P_ELGAMAL_2048_SPEC), @"0", @"ELGAMAL_2048", 0);
    ((void) (JreEnum(NetI2pCryptoEncType, EC_P256) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(e, 1, 64, 32, JreLoadEnum(NetI2pCryptoEncAlgo, EC), @"EC/None/NoPadding", JreLoadStatic(NetI2pCryptoECConstants, P256_SPEC), @"0.9.20", @"EC_P256", 1);
    ((void) (JreEnum(NetI2pCryptoEncType, EC_P384) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(e, 2, 96, 48, JreLoadEnum(NetI2pCryptoEncAlgo, EC), @"EC/None/NoPadding", JreLoadStatic(NetI2pCryptoECConstants, P384_SPEC), @"0.9.20", @"EC_P384", 2);
    ((void) (JreEnum(NetI2pCryptoEncType, EC_P521) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(e, 3, 132, 66, JreLoadEnum(NetI2pCryptoEncAlgo, EC), @"EC/None/NoPadding", JreLoadStatic(NetI2pCryptoECConstants, P521_SPEC), @"0.9.20", @"EC_P521", 3);
    JreStrongAssignAndConsume(&NetI2pCryptoEncType_BY_CODE, new_JavaUtilHashMap_init());
    {
      {
        IOSObjectArray *a__ = NetI2pCryptoEncType_values();
        NetI2pCryptoEncType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NetI2pCryptoEncType * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NetI2pCryptoEncType *type = *b__++;
          if ([NetI2pCryptoEncType_BY_CODE putWithId:JavaLangInteger_valueOfWithInt_([((NetI2pCryptoEncType *) nil_chk(type)) getCode]) withId:type] != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Duplicate EncType code");
        }
      }
    }
    J2OBJC_SET_INITIALIZED(NetI2pCryptoEncType)
  }
}

@end

void NetI2pCryptoEncType_initWithInt_withInt_withInt_withNetI2pCryptoEncAlgo_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_withNSString_withInt_(NetI2pCryptoEncType *self, jint cod, jint pubLen, jint privLen, NetI2pCryptoEncAlgo *baseAlgo, NSString *transformation, id<JavaSecuritySpecAlgorithmParameterSpec> pSpec, NSString *supportedSince, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->code_ = cod;
  self->pubkeyLen_ = pubLen;
  self->privkeyLen_ = privLen;
  JreStrongAssign(&self->base_, baseAlgo);
  JreStrongAssign(&self->algoName_, transformation);
  JreStrongAssign(&self->params_, pSpec);
  JreStrongAssign(&self->since_, supportedSince);
  self->isAvail_ = NetI2pCryptoEncType_x_isAvailable(self);
}

jboolean NetI2pCryptoEncType_x_isAvailable(NetI2pCryptoEncType *self) {
  if (JreEnum(NetI2pCryptoEncType, ELGAMAL_2048) == self) return true;
  @try {
    [self getParams];
  }
  @catch (JavaSecuritySpecInvalidParameterSpecException *e) {
    return false;
  }
  return true;
}

jboolean NetI2pCryptoEncType_isAvailableWithInt_(jint code) {
  NetI2pCryptoEncType_initialize();
  NetI2pCryptoEncType *type = NetI2pCryptoEncType_getByCodeWithInt_(code);
  if (type == nil) return false;
  return [type isAvailable];
}

jboolean NetI2pCryptoEncType_isAvailableWithNSString_(NSString *stype) {
  NetI2pCryptoEncType_initialize();
  NetI2pCryptoEncType *type = NetI2pCryptoEncType_parseEncTypeWithNSString_(stype);
  if (type == nil) return false;
  return [type isAvailable];
}

NetI2pCryptoEncType *NetI2pCryptoEncType_getByCodeWithInt_(jint code) {
  NetI2pCryptoEncType_initialize();
  return [((id<JavaUtilMap>) nil_chk(NetI2pCryptoEncType_BY_CODE)) getWithId:JavaLangInteger_valueOfWithInt_(code)];
}

NetI2pCryptoEncType *NetI2pCryptoEncType_parseEncTypeWithNSString_(NSString *stype) {
  NetI2pCryptoEncType_initialize();
  @try {
    NSString *uc = [((NSString *) nil_chk(stype)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    return NetI2pCryptoEncType_valueOfWithNSString_(uc);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @try {
      jint code = JavaLangInteger_parseIntWithNSString_(stype);
      return NetI2pCryptoEncType_getByCodeWithInt_(code);
    }
    @catch (JavaLangNumberFormatException *nfe) {
      return nil;
    }
  }
}

IOSObjectArray *NetI2pCryptoEncType_values() {
  NetI2pCryptoEncType_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pCryptoEncType_values_ count:4 type:NetI2pCryptoEncType_class_()];
}

NetI2pCryptoEncType *NetI2pCryptoEncType_valueOfWithNSString_(NSString *name) {
  NetI2pCryptoEncType_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pCryptoEncType *e = NetI2pCryptoEncType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pCryptoEncType *NetI2pCryptoEncType_fromOrdinal(NSUInteger ordinal) {
  NetI2pCryptoEncType_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pCryptoEncType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEncType)
