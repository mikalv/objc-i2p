//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SigAlgo.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/crypto/SigAlgo.h"

@interface NetI2pCryptoSigAlgo () {
 @public
  NSString *name_SigAlgo_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoSigAlgo, name_SigAlgo_, NSString *)

__attribute__((unused)) static void NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(NetI2pCryptoSigAlgo *self, NSString *name, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoSigAlgo)

NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_values_[5];

@implementation NetI2pCryptoSigAlgo

+ (NetI2pCryptoSigAlgo *)DSA {
  return JreEnum(NetI2pCryptoSigAlgo, DSA);
}

+ (NetI2pCryptoSigAlgo *)EC {
  return JreEnum(NetI2pCryptoSigAlgo, EC);
}

+ (NetI2pCryptoSigAlgo *)EdDSA {
  return JreEnum(NetI2pCryptoSigAlgo, EdDSA);
}

+ (NetI2pCryptoSigAlgo *)RSA {
  return JreEnum(NetI2pCryptoSigAlgo, RSA);
}

+ (NetI2pCryptoSigAlgo *)ElGamal {
  return JreEnum(NetI2pCryptoSigAlgo, ElGamal);
}

- (NSString *)getName {
  return name_SigAlgo_;
}

+ (IOSObjectArray *)values {
  return NetI2pCryptoSigAlgo_values();
}

+ (NetI2pCryptoSigAlgo *)valueOfWithNSString:(NSString *)name {
  return NetI2pCryptoSigAlgo_valueOfWithNSString_(name);
}

- (NetI2pCryptoSigAlgo_Enum)toNSEnum {
  return (NetI2pCryptoSigAlgo_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNetI2pCryptoSigAlgo;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSigAlgo;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getName);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DSA", "LNetI2pCryptoSigAlgo;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "EC", "LNetI2pCryptoSigAlgo;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "EdDSA", "LNetI2pCryptoSigAlgo;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RSA", "LNetI2pCryptoSigAlgo;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "ElGamal", "LNetI2pCryptoSigAlgo;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "name_SigAlgo_", "LNSString;", .constantValue.asLong = 0, 0x12, 7, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pCryptoSigAlgo, DSA), &JreEnum(NetI2pCryptoSigAlgo, EC), &JreEnum(NetI2pCryptoSigAlgo, EdDSA), &JreEnum(NetI2pCryptoSigAlgo, RSA), &JreEnum(NetI2pCryptoSigAlgo, ElGamal), "name", "Ljava/lang/Enum<Lnet/i2p/crypto/SigAlgo;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoSigAlgo = { "SigAlgo", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x4011, 3, 6, -1, -1, -1, 8, -1 };
  return &_NetI2pCryptoSigAlgo;
}

+ (void)initialize {
  if (self == [NetI2pCryptoSigAlgo class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(NetI2pCryptoSigAlgo, DSA) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(e, @"DSA", @"DSA", 0);
    ((void) (JreEnum(NetI2pCryptoSigAlgo, EC) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(e, @"EC", @"EC", 1);
    ((void) (JreEnum(NetI2pCryptoSigAlgo, EdDSA) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(e, @"EdDSA", @"EdDSA", 2);
    ((void) (JreEnum(NetI2pCryptoSigAlgo, RSA) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(e, @"RSA", @"RSA", 3);
    ((void) (JreEnum(NetI2pCryptoSigAlgo, ElGamal) = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
    NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(e, @"ElGamal", @"ElGamal", 4);
    J2OBJC_SET_INITIALIZED(NetI2pCryptoSigAlgo)
  }
}

@end

void NetI2pCryptoSigAlgo_initWithNSString_withNSString_withInt_(NetI2pCryptoSigAlgo *self, NSString *name, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->name_SigAlgo_, name);
}

IOSObjectArray *NetI2pCryptoSigAlgo_values() {
  NetI2pCryptoSigAlgo_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pCryptoSigAlgo_values_ count:5 type:NetI2pCryptoSigAlgo_class_()];
}

NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_valueOfWithNSString_(NSString *name) {
  NetI2pCryptoSigAlgo_initialize();
  for (int i = 0; i < 5; i++) {
    NetI2pCryptoSigAlgo *e = NetI2pCryptoSigAlgo_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_fromOrdinal(NSUInteger ordinal) {
  NetI2pCryptoSigAlgo_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return NetI2pCryptoSigAlgo_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoSigAlgo)
