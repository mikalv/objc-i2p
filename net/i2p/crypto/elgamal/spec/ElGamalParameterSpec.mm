//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/elgamal/spec/ElGamalParameterSpec.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalParameterSpec.h"

@interface NetI2pCryptoElgamalSpecElGamalParameterSpec () {
 @public
  JavaMathBigInteger *p_;
  JavaMathBigInteger *g_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalSpecElGamalParameterSpec, p_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalSpecElGamalParameterSpec, g_, JavaMathBigInteger *)

@implementation NetI2pCryptoElgamalSpecElGamalParameterSpec

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)g {
  NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, p, g);
  return self;
}

- (JavaMathBigInteger *)getP {
  return p_;
}

- (JavaMathBigInteger *)getG {
  return g_;
}

- (NSUInteger)hash {
  return ((jint) [((JavaMathBigInteger *) nil_chk(p_)) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk(g_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) return false;
  JavaMathBigInteger *op;
  JavaMathBigInteger *og;
  if ([obj isKindOfClass:[NetI2pCryptoElgamalSpecElGamalParameterSpec class]]) {
    NetI2pCryptoElgamalSpecElGamalParameterSpec *egps = (NetI2pCryptoElgamalSpecElGamalParameterSpec *) cast_chk(obj, [NetI2pCryptoElgamalSpecElGamalParameterSpec class]);
    op = [egps getP];
    og = [egps getG];
  }
  else {
    return false;
  }
  return [((JavaMathBigInteger *) nil_chk(p_)) isEqual:op] && [((JavaMathBigInteger *) nil_chk(g_)) isEqual:og];
}

- (void)dealloc {
  RELEASE_(p_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(getP);
  methods[2].selector = @selector(getG);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "g_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _NetI2pCryptoElgamalSpecElGamalParameterSpec = { "ElGamalParameterSpec", "net.i2p.crypto.elgamal.spec", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoElgamalSpecElGamalParameterSpec;
}

@end

void NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(NetI2pCryptoElgamalSpecElGamalParameterSpec *self, JavaMathBigInteger *p, JavaMathBigInteger *g) {
  NSObject_init(self);
  JreStrongAssign(&self->p_, p);
  JreStrongAssign(&self->g_, g);
}

NetI2pCryptoElgamalSpecElGamalParameterSpec *new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *g) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalSpecElGamalParameterSpec, initWithJavaMathBigInteger_withJavaMathBigInteger_, p, g)
}

NetI2pCryptoElgamalSpecElGamalParameterSpec *create_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *g) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalSpecElGamalParameterSpec, initWithJavaMathBigInteger_withJavaMathBigInteger_, p, g)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoElgamalSpecElGamalParameterSpec)
