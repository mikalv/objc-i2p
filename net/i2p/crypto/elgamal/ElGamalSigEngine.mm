//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/elgamal/ElGamalSigEngine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/MessageDigest.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/crypto/elgamal/ElGamalKey.h"
#include "net/i2p/crypto/elgamal/ElGamalPrivateKey.h"
#include "net/i2p/crypto/elgamal/ElGamalPublicKey.h"
#include "net/i2p/crypto/elgamal/ElGamalSigEngine.h"
#include "net/i2p/util/NativeBigInteger.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pCryptoElgamalElGamalSigEngine () {
 @public
  JavaSecurityMessageDigest *digest_;
  id<NetI2pCryptoElgamalElGamalKey> key_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalElGamalSigEngine, digest_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalElGamalSigEngine, key_, id<NetI2pCryptoElgamalElGamalKey>)

@implementation NetI2pCryptoElgamalElGamalSigEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoElgamalElGamalSigEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest {
  NetI2pCryptoElgamalElGamalSigEngine_initWithJavaSecurityMessageDigest_(self, digest);
  return self;
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) reset];
  if ([NetI2pCryptoElgamalElGamalPrivateKey_class_() isInstance:privateKey]) {
    id<NetI2pCryptoElgamalElGamalPrivateKey> privKey = (id<NetI2pCryptoElgamalElGamalPrivateKey>) cast_check(privateKey, NetI2pCryptoElgamalElGamalPrivateKey_class_());
    JreStrongAssign(&key_, privKey);
  }
  else {
    @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@", @"cannot identify ElGamal private key: ", [((id<JavaSecurityPrivateKey>) nil_chk(privateKey)) java_getClass]));
  }
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) reset];
  if ([NetI2pCryptoElgamalElGamalPublicKey_class_() isInstance:publicKey]) {
    JreStrongAssign(&key_, (id<NetI2pCryptoElgamalElGamalPublicKey>) cast_check(publicKey, NetI2pCryptoElgamalElGamalPublicKey_class_()));
  }
  else {
    @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@", @"cannot identify ElGamal public key: ", [((id<JavaSecurityPublicKey>) nil_chk(publicKey)) java_getClass]));
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((JavaSecurityMessageDigest *) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  JavaMathBigInteger *elgp = [((JavaxCryptoSpecDHParameterSpec *) nil_chk([((id<NetI2pCryptoElgamalElGamalKey>) nil_chk(key_)) getParams])) getP];
  JavaMathBigInteger *pm1 = [((JavaMathBigInteger *) nil_chk(elgp)) subtractWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, ONE)];
  JavaMathBigInteger *elgg = [((JavaxCryptoSpecDHParameterSpec *) nil_chk([((id<NetI2pCryptoElgamalElGamalKey>) nil_chk(key_)) getParams])) getG];
  JavaMathBigInteger *x = [((id<NetI2pCryptoElgamalElGamalPrivateKey>) nil_chk(((id<NetI2pCryptoElgamalElGamalPrivateKey>) cast_check(key_, NetI2pCryptoElgamalElGamalPrivateKey_class_())))) getX];
  if (!([x isKindOfClass:[NetI2pUtilNativeBigInteger class]])) x = create_NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(x);
  IOSByteArray *data = [((JavaSecurityMessageDigest *) nil_chk(digest_)) digest];
  JavaMathBigInteger *k;
  jboolean ok;
  do {
    k = create_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(2048, NetI2pUtilRandomSource_getInstance());
    ok = ([k compareToWithId:pm1] == -1);
    ok = (ok && [k compareToWithId:JreLoadStatic(JavaMathBigInteger, ONE)] == 1);
    ok = (ok && [((JavaMathBigInteger *) nil_chk([k gcdWithJavaMathBigInteger:pm1])) isEqual:JreLoadStatic(JavaMathBigInteger, ONE)]);
  }
  while (!ok);
  JavaMathBigInteger *r = [((JavaMathBigInteger *) nil_chk(elgg)) modPowWithJavaMathBigInteger:k withJavaMathBigInteger:elgp];
  JavaMathBigInteger *kinv = [k modInverseWithJavaMathBigInteger:pm1];
  JavaMathBigInteger *h = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, data);
  JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(kinv)) multiplyWithJavaMathBigInteger:[h subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x)) multiplyWithJavaMathBigInteger:r]]]))) modWithJavaMathBigInteger:pm1];
  IOSByteArray *rv;
  @try {
    rv = NetI2pCryptoSigUtil_sigBytesToASN1WithJavaMathBigInteger_withJavaMathBigInteger_(r, s);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecuritySignatureException_initWithNSString_withJavaLangThrowable_(@"ASN1", iae);
  }
  return rv;
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  JavaMathBigInteger *elgp = [((JavaxCryptoSpecDHParameterSpec *) nil_chk([((id<NetI2pCryptoElgamalElGamalKey>) nil_chk(key_)) getParams])) getP];
  JavaMathBigInteger *pm1 = [((JavaMathBigInteger *) nil_chk(elgp)) subtractWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, ONE)];
  JavaMathBigInteger *elgg = [((JavaxCryptoSpecDHParameterSpec *) nil_chk([((id<NetI2pCryptoElgamalElGamalKey>) nil_chk(key_)) getParams])) getG];
  JavaMathBigInteger *y = [((id<NetI2pCryptoElgamalElGamalPublicKey>) nil_chk(((id<NetI2pCryptoElgamalElGamalPublicKey>) cast_check(key_, NetI2pCryptoElgamalElGamalPublicKey_class_())))) getY];
  if (!([y isKindOfClass:[NetI2pUtilNativeBigInteger class]])) y = create_NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(y);
  IOSByteArray *data = [((JavaSecurityMessageDigest *) nil_chk(digest_)) digest];
  @try {
    IOSObjectArray *rs = NetI2pCryptoSigUtil_aSN1ToBigIntegerWithByteArray_withInt_(sigBytes, 256);
    JavaMathBigInteger *r = IOSObjectArray_Get(nil_chk(rs), 0);
    JavaMathBigInteger *s = IOSObjectArray_Get(rs, 1);
    if ([((JavaMathBigInteger *) nil_chk(r)) signum] != 1 || [((JavaMathBigInteger *) nil_chk(s)) signum] != 1 || [r compareToWithId:elgp] != -1 || [s compareToWithId:pm1] != -1) return false;
    NetI2pUtilNativeBigInteger *h = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, data);
    JavaMathBigInteger *modvalr = [r modPowWithJavaMathBigInteger:s withJavaMathBigInteger:elgp];
    JavaMathBigInteger *modvaly = [((JavaMathBigInteger *) nil_chk(y)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:elgp];
    JavaMathBigInteger *modmulval = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(modvalr)) multiplyWithJavaMathBigInteger:modvaly])) modWithJavaMathBigInteger:elgp];
    JavaMathBigInteger *v = [((JavaMathBigInteger *) nil_chk(elgg)) modPowWithJavaMathBigInteger:h withJavaMathBigInteger:elgp];
    jboolean ok = [((JavaMathBigInteger *) nil_chk(v)) compareToWithId:modmulval] == 0;
    return ok;
  }
  @catch (JavaLangRuntimeException *e) {
    @throw create_JavaSecuritySignatureException_initWithNSString_withJavaLangThrowable_(@"verify", e);
  }
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)dealloc {
  RELEASE_(digest_);
  RELEASE_(key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 9, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaSecurityMessageDigest:);
  methods[2].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[3].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[4].selector = @selector(engineUpdateWithByte:);
  methods[5].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(engineSign);
  methods[7].selector = @selector(engineVerifyWithByteArray:);
  methods[8].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[9].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LNetI2pCryptoElgamalElGamalKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityMessageDigest;", "engineInitSign", "LJavaSecurityPrivateKey;", "LJavaSecurityInvalidKeyException;", "engineInitVerify", "LJavaSecurityPublicKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "engineSetParameter", "LNSString;LNSObject;", "engineGetParameter", "LNSString;" };
  static const J2ObjcClassInfo _NetI2pCryptoElgamalElGamalSigEngine = { "ElGamalSigEngine", "net.i2p.crypto.elgamal", ptrTable, methods, fields, 7, 0x11, 10, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoElgamalElGamalSigEngine;
}

@end

void NetI2pCryptoElgamalElGamalSigEngine_init(NetI2pCryptoElgamalElGamalSigEngine *self) {
  NetI2pCryptoElgamalElGamalSigEngine_initWithJavaSecurityMessageDigest_(self, NetI2pCryptoSHA256Generator_getDigestInstance());
}

NetI2pCryptoElgamalElGamalSigEngine *new_NetI2pCryptoElgamalElGamalSigEngine_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalElGamalSigEngine, init)
}

NetI2pCryptoElgamalElGamalSigEngine *create_NetI2pCryptoElgamalElGamalSigEngine_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalElGamalSigEngine, init)
}

void NetI2pCryptoElgamalElGamalSigEngine_initWithJavaSecurityMessageDigest_(NetI2pCryptoElgamalElGamalSigEngine *self, JavaSecurityMessageDigest *digest) {
  JavaSecuritySignature_initWithNSString_(self, @"ElGamal");
  JreStrongAssign(&self->digest_, digest);
}

NetI2pCryptoElgamalElGamalSigEngine *new_NetI2pCryptoElgamalElGamalSigEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalElGamalSigEngine, initWithJavaSecurityMessageDigest_, digest)
}

NetI2pCryptoElgamalElGamalSigEngine *create_NetI2pCryptoElgamalElGamalSigEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalElGamalSigEngine, initWithJavaSecurityMessageDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoElgamalElGamalSigEngine)
