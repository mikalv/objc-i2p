//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/elgamal/impl/ElGamalPrivateKeyImpl.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPrivateKeySpec.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/crypto/elgamal/ElGamalPrivateKey.h"
#include "net/i2p/crypto/elgamal/impl/ElGamalPrivateKeyImpl.h"
#include "net/i2p/crypto/elgamal/impl/ElGamalPublicKeyImpl.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalParameterSpec.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalPrivateKeySpec.h"

@interface NetI2pCryptoElgamalImplElGamalPrivateKeyImpl () {
 @public
  JavaMathBigInteger *x_;
  NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, x_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, elSpec_, NetI2pCryptoElgamalSpecElGamalParameterSpec *)

inline jlong NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_get_serialVersionUID(void);
#define NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_serialVersionUID 4819350091141529678LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, serialVersionUID, jlong)

__attribute__((unused)) static void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_readObjectWithJavaIoObjectInputStream_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_writeObjectWithJavaIoObjectOutputStream_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaIoObjectOutputStream *outArg);

@implementation NetI2pCryptoElgamalImplElGamalPrivateKeyImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pCryptoElgamalElGamalPrivateKey:(id<NetI2pCryptoElgamalElGamalPrivateKey>)key {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalElGamalPrivateKey_(self, key);
  return self;
}

- (instancetype)initWithJavaxCryptoInterfacesDHPrivateKey:(id<JavaxCryptoInterfacesDHPrivateKey>)key {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoInterfacesDHPrivateKey_(self, key);
  return self;
}

- (instancetype)initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec:(NetI2pCryptoElgamalSpecElGamalPrivateKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaxCryptoSpecDHPrivateKeySpec:(JavaxCryptoSpecDHPrivateKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoSpecDHPrivateKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)x
withNetI2pCryptoElgamalSpecElGamalParameterSpec:(NetI2pCryptoElgamalSpecElGamalParameterSpec *)elSpec {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(self, x, elSpec);
  return self;
}

- (instancetype)initWithJavaSecuritySpecPKCS8EncodedKeySpec:(JavaSecuritySpecPKCS8EncodedKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaSecuritySpecPKCS8EncodedKeySpec_(self, spec);
  return self;
}

- (NSString *)getAlgorithm {
  return @"ElGamal";
}

- (NSString *)getFormat {
  return @"PKCS#8";
}

- (IOSByteArray *)getEncoded {
  IOSByteArray *pb = [((JavaMathBigInteger *) nil_chk([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP])) toByteArray];
  IOSByteArray *gb = [((JavaMathBigInteger *) nil_chk([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG])) toByteArray];
  IOSByteArray *xb = [((JavaMathBigInteger *) nil_chk(x_)) toByteArray];
  jint seq3len = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(pb))->size_) + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(gb))->size_);
  jint seq2len = 8 + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq3len);
  jint seq1len = 3 + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq2len) + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(xb))->size_);
  jint totlen = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq1len);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq1len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  *IOSByteArray_GetRef(rv, idx++) = 1;
  *IOSByteArray_GetRef(rv, idx++) = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq2len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x06;
  *IOSByteArray_GetRef(rv, idx++) = 6;
  *IOSByteArray_GetRef(rv, idx++) = (1 * 40) + 3;
  *IOSByteArray_GetRef(rv, idx++) = 14;
  *IOSByteArray_GetRef(rv, idx++) = 7;
  *IOSByteArray_GetRef(rv, idx++) = 2;
  *IOSByteArray_GetRef(rv, idx++) = 1;
  *IOSByteArray_GetRef(rv, idx++) = 1;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq3len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, pb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pb, 0, rv, idx, pb->size_);
  idx += pb->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, gb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(gb, 0, rv, idx, gb->size_);
  idx += gb->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, xb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xb, 0, rv, idx, xb->size_);
  return rv;
}

- (NetI2pCryptoElgamalSpecElGamalParameterSpec *)getParameters {
  return elSpec_;
}

- (JavaxCryptoSpecDHParameterSpec *)getParams {
  return create_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP], [((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG]);
}

- (JavaMathBigInteger *)getX {
  return x_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)dealloc {
  RELEASE_(x_);
  RELEASE_(elSpec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoElgamalSpecElGamalParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pCryptoElgamalElGamalPrivateKey:);
  methods[2].selector = @selector(initWithJavaxCryptoInterfacesDHPrivateKey:);
  methods[3].selector = @selector(initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec:);
  methods[4].selector = @selector(initWithJavaxCryptoSpecDHPrivateKeySpec:);
  methods[5].selector = @selector(initWithJavaMathBigInteger:withNetI2pCryptoElgamalSpecElGamalParameterSpec:);
  methods[6].selector = @selector(initWithJavaSecuritySpecPKCS8EncodedKeySpec:);
  methods[7].selector = @selector(getAlgorithm);
  methods[8].selector = @selector(getFormat);
  methods[9].selector = @selector(getEncoded);
  methods[10].selector = @selector(getParameters);
  methods[11].selector = @selector(getParams);
  methods[12].selector = @selector(getX);
  methods[13].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[14].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elSpec_", "LNetI2pCryptoElgamalSpecElGamalParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pCryptoElgamalElGamalPrivateKey;", "LJavaxCryptoInterfacesDHPrivateKey;", "LNetI2pCryptoElgamalSpecElGamalPrivateKeySpec;", "LJavaxCryptoSpecDHPrivateKeySpec;", "LJavaMathBigInteger;LNetI2pCryptoElgamalSpecElGamalParameterSpec;", "LJavaSecuritySpecPKCS8EncodedKeySpec;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _NetI2pCryptoElgamalImplElGamalPrivateKeyImpl = { "ElGamalPrivateKeyImpl", "net.i2p.crypto.elgamal.impl", ptrTable, methods, fields, 7, 0x1, 15, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl;
}

@end

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_init(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self) {
  NSObject_init(self);
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, init)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, init)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalElGamalPrivateKey_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, id<NetI2pCryptoElgamalElGamalPrivateKey> key) {
  NSObject_init(self);
  JreStrongAssign(&self->x_, [((id<NetI2pCryptoElgamalElGamalPrivateKey>) nil_chk(key)) getX]);
  JreStrongAssign(&self->elSpec_, [key getParameters]);
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalElGamalPrivateKey_(id<NetI2pCryptoElgamalElGamalPrivateKey> key) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithNetI2pCryptoElgamalElGamalPrivateKey_, key)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalElGamalPrivateKey_(id<NetI2pCryptoElgamalElGamalPrivateKey> key) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithNetI2pCryptoElgamalElGamalPrivateKey_, key)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoInterfacesDHPrivateKey_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, id<JavaxCryptoInterfacesDHPrivateKey> key) {
  NSObject_init(self);
  JreStrongAssign(&self->x_, [((id<JavaxCryptoInterfacesDHPrivateKey>) nil_chk(key)) getX]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getG]));
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaxCryptoInterfacesDHPrivateKey_, key)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoInterfacesDHPrivateKey_(id<JavaxCryptoInterfacesDHPrivateKey> key) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaxCryptoInterfacesDHPrivateKey_, key)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, NetI2pCryptoElgamalSpecElGamalPrivateKeySpec *spec) {
  NSObject_init(self);
  JreStrongAssign(&self->x_, [((NetI2pCryptoElgamalSpecElGamalPrivateKeySpec *) nil_chk(spec)) getX]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk([spec getParams])) getP], [((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk([spec getParams])) getG]));
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_(NetI2pCryptoElgamalSpecElGamalPrivateKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_(NetI2pCryptoElgamalSpecElGamalPrivateKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithNetI2pCryptoElgamalSpecElGamalPrivateKeySpec_, spec)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoSpecDHPrivateKeySpec_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaxCryptoSpecDHPrivateKeySpec *spec) {
  NSObject_init(self);
  JreStrongAssign(&self->x_, [((JavaxCryptoSpecDHPrivateKeySpec *) nil_chk(spec)) getX]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getG]));
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaxCryptoSpecDHPrivateKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaxCryptoSpecDHPrivateKeySpec_(JavaxCryptoSpecDHPrivateKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaxCryptoSpecDHPrivateKeySpec_, spec)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaMathBigInteger *x, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  NSObject_init(self);
  JreStrongAssign(&self->x_, x);
  JreStrongAssign(&self->elSpec_, elSpec);
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(JavaMathBigInteger *x, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_, x, elSpec)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(JavaMathBigInteger *x, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_, x, elSpec)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaSecuritySpecPKCS8EncodedKeySpec_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaSecuritySpecPKCS8EncodedKeySpec *spec) {
  NSObject_init(self);
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"todo");
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *new_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaSecuritySpecPKCS8EncodedKeySpec_(JavaSecuritySpecPKCS8EncodedKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaSecuritySpecPKCS8EncodedKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *create_NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_initWithJavaSecuritySpecPKCS8EncodedKeySpec_(JavaSecuritySpecPKCS8EncodedKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl, initWithJavaSecuritySpecPKCS8EncodedKeySpec_, spec)
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_readObjectWithJavaIoObjectInputStream_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaIoObjectInputStream *inArg) {
  JreStrongAssign(&self->x_, (JavaMathBigInteger *) cast_chk([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [JavaMathBigInteger class]));
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_((JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class])));
}

void NetI2pCryptoElgamalImplElGamalPrivateKeyImpl_writeObjectWithJavaIoObjectOutputStream_(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[self getX]];
  [outArg writeObjectWithId:[((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getP]];
  [outArg writeObjectWithId:[((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getG]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoElgamalImplElGamalPrivateKeyImpl)
