//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/elgamal/impl/ElGamalPublicKeyImpl.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPublicKeySpec.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/crypto/elgamal/ElGamalPublicKey.h"
#include "net/i2p/crypto/elgamal/impl/ElGamalPublicKeyImpl.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalParameterSpec.h"
#include "net/i2p/crypto/elgamal/spec/ElGamalPublicKeySpec.h"

@interface NetI2pCryptoElgamalImplElGamalPublicKeyImpl () {
 @public
  JavaMathBigInteger *y_;
  NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, y_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, elSpec_, NetI2pCryptoElgamalSpecElGamalParameterSpec *)

inline jlong NetI2pCryptoElgamalImplElGamalPublicKeyImpl_get_serialVersionUID(void);
#define NetI2pCryptoElgamalImplElGamalPublicKeyImpl_serialVersionUID 8712728417091216948LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, serialVersionUID, jlong)

__attribute__((unused)) static void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_readObjectWithJavaIoObjectInputStream_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_writeObjectWithJavaIoObjectOutputStream_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaIoObjectOutputStream *outArg);

@implementation NetI2pCryptoElgamalImplElGamalPublicKeyImpl

- (instancetype)initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec:(NetI2pCryptoElgamalSpecElGamalPublicKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithJavaxCryptoSpecDHPublicKeySpec:(JavaxCryptoSpecDHPublicKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoSpecDHPublicKeySpec_(self, spec);
  return self;
}

- (instancetype)initWithNetI2pCryptoElgamalElGamalPublicKey:(id<NetI2pCryptoElgamalElGamalPublicKey>)key {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalElGamalPublicKey_(self, key);
  return self;
}

- (instancetype)initWithJavaxCryptoInterfacesDHPublicKey:(id<JavaxCryptoInterfacesDHPublicKey>)key {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoInterfacesDHPublicKey_(self, key);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)y
withNetI2pCryptoElgamalSpecElGamalParameterSpec:(NetI2pCryptoElgamalSpecElGamalParameterSpec *)elSpec {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(self, y, elSpec);
  return self;
}

- (instancetype)initWithJavaSecuritySpecX509EncodedKeySpec:(JavaSecuritySpecX509EncodedKeySpec *)spec {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaSecuritySpecX509EncodedKeySpec_(self, spec);
  return self;
}

- (NSString *)getAlgorithm {
  return @"ElGamal";
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  IOSByteArray *pb = [((JavaMathBigInteger *) nil_chk([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP])) toByteArray];
  IOSByteArray *gb = [((JavaMathBigInteger *) nil_chk([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG])) toByteArray];
  IOSByteArray *yb = [((JavaMathBigInteger *) nil_chk(y_)) toByteArray];
  jint seq3len = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(pb))->size_) + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(gb))->size_);
  jint seq2len = 8 + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq3len);
  jint seq1len = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq2len) + NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(((IOSByteArray *) nil_chk(yb))->size_ + 1);
  jint totlen = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(seq1len);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq1len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq2len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x06;
  *IOSByteArray_GetRef(rv, idx++) = 6;
  *IOSByteArray_GetRef(rv, idx++) = (1 * 40) + 3;
  *IOSByteArray_GetRef(rv, idx++) = 14;
  *IOSByteArray_GetRef(rv, idx++) = 7;
  *IOSByteArray_GetRef(rv, idx++) = 2;
  *IOSByteArray_GetRef(rv, idx++) = 1;
  *IOSByteArray_GetRef(rv, idx++) = 1;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seq3len);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, pb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pb, 0, rv, idx, pb->size_);
  idx += pb->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, gb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(gb, 0, rv, idx, gb->size_);
  idx += gb->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x03;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, yb->size_ + 1);
  *IOSByteArray_GetRef(rv, idx++) = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yb, 0, rv, idx, yb->size_);
  return rv;
}

+ (jint)spaceForWithInt:(jint)val {
  return NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(val);
}

- (NetI2pCryptoElgamalSpecElGamalParameterSpec *)getParameters {
  return elSpec_;
}

- (JavaxCryptoSpecDHParameterSpec *)getParams {
  return create_JavaxCryptoSpecDHParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getP], [((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(elSpec_)) getG]);
}

- (JavaMathBigInteger *)getY {
  return y_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

- (void)dealloc {
  RELEASE_(y_);
  RELEASE_(elSpec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoElgamalSpecElGamalParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec:);
  methods[1].selector = @selector(initWithJavaxCryptoSpecDHPublicKeySpec:);
  methods[2].selector = @selector(initWithNetI2pCryptoElgamalElGamalPublicKey:);
  methods[3].selector = @selector(initWithJavaxCryptoInterfacesDHPublicKey:);
  methods[4].selector = @selector(initWithJavaMathBigInteger:withNetI2pCryptoElgamalSpecElGamalParameterSpec:);
  methods[5].selector = @selector(initWithJavaSecuritySpecX509EncodedKeySpec:);
  methods[6].selector = @selector(getAlgorithm);
  methods[7].selector = @selector(getFormat);
  methods[8].selector = @selector(getEncoded);
  methods[9].selector = @selector(spaceForWithInt:);
  methods[10].selector = @selector(getParameters);
  methods[11].selector = @selector(getParams);
  methods[12].selector = @selector(getY);
  methods[13].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[14].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pCryptoElgamalImplElGamalPublicKeyImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "y_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elSpec_", "LNetI2pCryptoElgamalSpecElGamalParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pCryptoElgamalSpecElGamalPublicKeySpec;", "LJavaxCryptoSpecDHPublicKeySpec;", "LNetI2pCryptoElgamalElGamalPublicKey;", "LJavaxCryptoInterfacesDHPublicKey;", "LJavaMathBigInteger;LNetI2pCryptoElgamalSpecElGamalParameterSpec;", "LJavaSecuritySpecX509EncodedKeySpec;", "spaceFor", "I", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _NetI2pCryptoElgamalImplElGamalPublicKeyImpl = { "ElGamalPublicKeyImpl", "net.i2p.crypto.elgamal.impl", ptrTable, methods, fields, 7, 0x1, 15, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoElgamalImplElGamalPublicKeyImpl;
}

@end

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, NetI2pCryptoElgamalSpecElGamalPublicKeySpec *spec) {
  NSObject_init(self);
  JreStrongAssign(&self->y_, [((NetI2pCryptoElgamalSpecElGamalPublicKeySpec *) nil_chk(spec)) getY]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk([spec getParams])) getP], [((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk([spec getParams])) getG]));
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_(NetI2pCryptoElgamalSpecElGamalPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_(NetI2pCryptoElgamalSpecElGamalPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithNetI2pCryptoElgamalSpecElGamalPublicKeySpec_, spec)
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoSpecDHPublicKeySpec_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaxCryptoSpecDHPublicKeySpec *spec) {
  NSObject_init(self);
  JreStrongAssign(&self->y_, [((JavaxCryptoSpecDHPublicKeySpec *) nil_chk(spec)) getY]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([spec getP], [spec getG]));
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoSpecDHPublicKeySpec_(JavaxCryptoSpecDHPublicKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaxCryptoSpecDHPublicKeySpec_, spec)
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalElGamalPublicKey_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, id<NetI2pCryptoElgamalElGamalPublicKey> key) {
  NSObject_init(self);
  JreStrongAssign(&self->y_, [((id<NetI2pCryptoElgamalElGamalPublicKey>) nil_chk(key)) getY]);
  JreStrongAssign(&self->elSpec_, [key getParameters]);
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalElGamalPublicKey_(id<NetI2pCryptoElgamalElGamalPublicKey> key) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithNetI2pCryptoElgamalElGamalPublicKey_, key)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithNetI2pCryptoElgamalElGamalPublicKey_(id<NetI2pCryptoElgamalElGamalPublicKey> key) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithNetI2pCryptoElgamalElGamalPublicKey_, key)
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoInterfacesDHPublicKey_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, id<JavaxCryptoInterfacesDHPublicKey> key) {
  NSObject_init(self);
  JreStrongAssign(&self->y_, [((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(key)) getY]);
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getP], [((JavaxCryptoSpecDHParameterSpec *) nil_chk([key getParams])) getG]));
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaxCryptoInterfacesDHPublicKey_(id<JavaxCryptoInterfacesDHPublicKey> key) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaxCryptoInterfacesDHPublicKey_, key)
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaMathBigInteger *y, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  NSObject_init(self);
  JreStrongAssign(&self->y_, y);
  JreStrongAssign(&self->elSpec_, elSpec);
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(JavaMathBigInteger *y, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_, y, elSpec)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_(JavaMathBigInteger *y, NetI2pCryptoElgamalSpecElGamalParameterSpec *elSpec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaMathBigInteger_withNetI2pCryptoElgamalSpecElGamalParameterSpec_, y, elSpec)
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaSecuritySpecX509EncodedKeySpec_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaSecuritySpecX509EncodedKeySpec *spec) {
  NSObject_init(self);
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"todo");
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *new_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaSecuritySpecX509EncodedKeySpec_(JavaSecuritySpecX509EncodedKeySpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaSecuritySpecX509EncodedKeySpec_, spec)
}

NetI2pCryptoElgamalImplElGamalPublicKeyImpl *create_NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initWithJavaSecuritySpecX509EncodedKeySpec_(JavaSecuritySpecX509EncodedKeySpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoElgamalImplElGamalPublicKeyImpl, initWithJavaSecuritySpecX509EncodedKeySpec_, spec)
}

jint NetI2pCryptoElgamalImplElGamalPublicKeyImpl_spaceForWithInt_(jint val) {
  NetI2pCryptoElgamalImplElGamalPublicKeyImpl_initialize();
  jint rv;
  if (val > 255) rv = 3;
  else if (val > 127) rv = 2;
  else rv = 1;
  return 1 + rv + val;
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_readObjectWithJavaIoObjectInputStream_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaIoObjectInputStream *inArg) {
  JreStrongAssign(&self->y_, (JavaMathBigInteger *) cast_chk([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], [JavaMathBigInteger class]));
  JreStrongAssignAndConsume(&self->elSpec_, new_NetI2pCryptoElgamalSpecElGamalParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_((JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class]), (JavaMathBigInteger *) cast_chk([inArg readObject], [JavaMathBigInteger class])));
}

void NetI2pCryptoElgamalImplElGamalPublicKeyImpl_writeObjectWithJavaIoObjectOutputStream_(NetI2pCryptoElgamalImplElGamalPublicKeyImpl *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[self getY]];
  [outArg writeObjectWithId:[((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getP]];
  [outArg writeObjectWithId:[((NetI2pCryptoElgamalSpecElGamalParameterSpec *) nil_chk(self->elSpec_)) getG]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoElgamalImplElGamalPublicKeyImpl)
