//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/ECConstants.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoECConstants")
#ifdef RESTRICT_NetI2pCryptoECConstants
#define INCLUDE_ALL_NetI2pCryptoECConstants 0
#else
#define INCLUDE_ALL_NetI2pCryptoECConstants 1
#endif
#undef RESTRICT_NetI2pCryptoECConstants

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoECConstants_) && (INCLUDE_ALL_NetI2pCryptoECConstants || defined(INCLUDE_NetI2pCryptoECConstants))
#define NetI2pCryptoECConstants_

@class JavaSecuritySpecECParameterSpec;

@interface NetI2pCryptoECConstants : NSObject
@property (readonly, class, strong) JavaSecuritySpecECParameterSpec *P256_SPEC NS_SWIFT_NAME(P256_SPEC);
@property (readonly, class, strong) JavaSecuritySpecECParameterSpec *P384_SPEC NS_SWIFT_NAME(P384_SPEC);
@property (readonly, class, strong) JavaSecuritySpecECParameterSpec *P521_SPEC NS_SWIFT_NAME(P521_SPEC);

+ (JavaSecuritySpecECParameterSpec *)P256_SPEC;

+ (JavaSecuritySpecECParameterSpec *)P384_SPEC;

+ (JavaSecuritySpecECParameterSpec *)P521_SPEC;

#pragma mark Public

+ (jboolean)isBCAvailable;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoECConstants)

inline JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_get_P256_SPEC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P256_SPEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, P256_SPEC, JavaSecuritySpecECParameterSpec *)

inline JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_get_P384_SPEC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P384_SPEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, P384_SPEC, JavaSecuritySpecECParameterSpec *)

inline JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_get_P521_SPEC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P521_SPEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, P521_SPEC, JavaSecuritySpecECParameterSpec *)

FOUNDATION_EXPORT void NetI2pCryptoECConstants_init(NetI2pCryptoECConstants *self);

FOUNDATION_EXPORT NetI2pCryptoECConstants *new_NetI2pCryptoECConstants_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoECConstants *create_NetI2pCryptoECConstants_init(void);

FOUNDATION_EXPORT jboolean NetI2pCryptoECConstants_isBCAvailable(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoECConstants)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoECConstants")
