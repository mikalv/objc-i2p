//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SessionKeyManager.java
//

#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/util/Set.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/SessionKeyManager.h"
#include "net/i2p/crypto/TagSetHandle.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"

@implementation NetI2pCryptoSessionKeyManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoSessionKeyManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pDataSessionKey *)getCurrentKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  return nil;
}

- (NetI2pDataSessionKey *)getCurrentOrNewKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  return nil;
}

- (void)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                    withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
}

- (NetI2pDataSessionKey *)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
  NetI2pDataSessionKey *key = [((NetI2pCryptoKeyGenerator *) nil_chk(NetI2pCryptoKeyGenerator_getInstance())) generateSessionKey];
  [self createSessionWithNetI2pDataPublicKey:target withNetI2pDataSessionKey:key];
  return key;
}

- (NetI2pDataSessionTag *)consumeNextAvailableTagWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  return nil;
}

- (jint)getTagsToSend {
  return 0;
}

- (jint)getLowThreshold {
  return 0;
}

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  return [self shouldSendTagsWithNetI2pDataPublicKey:target withNetI2pDataSessionKey:key withInt:[self getLowThreshold]];
}

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                          withInt:(jint)lowThreshold {
  return false;
}

- (jint)getAvailableTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  return 0;
}

- (jlong)getAvailableTimeLeftWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key {
  return 0;
}

- (id<NetI2pCryptoTagSetHandle>)tagsDeliveredWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                     withJavaUtilSet:(id<JavaUtilSet>)sessionTags {
  return nil;
}

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target {
}

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags {
}

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags
                                    withLong:(jlong)expire {
}

- (NetI2pDataSessionKey *)consumeTagWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag {
  return nil;
}

- (void)shutdown {
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
}

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
               withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
           withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts {
}

- (void)tagsAckedWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
            withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionTag;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoTagSetHandle;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 15, 18, -1, 19, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(getCurrentKeyWithNetI2pDataPublicKey:);
  methods[3].selector = @selector(getCurrentOrNewKeyWithNetI2pDataPublicKey:);
  methods[4].selector = @selector(createSessionWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[5].selector = @selector(createSessionWithNetI2pDataPublicKey:);
  methods[6].selector = @selector(consumeNextAvailableTagWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[7].selector = @selector(getTagsToSend);
  methods[8].selector = @selector(getLowThreshold);
  methods[9].selector = @selector(shouldSendTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[10].selector = @selector(shouldSendTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withInt:);
  methods[11].selector = @selector(getAvailableTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[12].selector = @selector(getAvailableTimeLeftWithNetI2pDataPublicKey:withNetI2pDataSessionKey:);
  methods[13].selector = @selector(tagsDeliveredWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withJavaUtilSet:);
  methods[14].selector = @selector(failTagsWithNetI2pDataPublicKey:);
  methods[15].selector = @selector(tagsReceivedWithNetI2pDataSessionKey:withJavaUtilSet:);
  methods[16].selector = @selector(tagsReceivedWithNetI2pDataSessionKey:withJavaUtilSet:withLong:);
  methods[17].selector = @selector(consumeTagWithNetI2pDataSessionTag:);
  methods[18].selector = @selector(shutdown);
  methods[19].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  methods[20].selector = @selector(failTagsWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pCryptoTagSetHandle:);
  methods[21].selector = @selector(tagsAckedWithNetI2pDataPublicKey:withNetI2pDataSessionKey:withNetI2pCryptoTagSetHandle:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "getCurrentKey", "LNetI2pDataPublicKey;", "getCurrentOrNewKey", "createSession", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;", "consumeNextAvailableTag", "shouldSendTags", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;I", "getAvailableTags", "getAvailableTimeLeft", "tagsDelivered", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/PublicKey;Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)Lnet/i2p/crypto/TagSetHandle;", "failTags", "tagsReceived", "LNetI2pDataSessionKey;LJavaUtilSet;", "(Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;)V", "LNetI2pDataSessionKey;LJavaUtilSet;J", "(Lnet/i2p/data/SessionKey;Ljava/util/Set<Lnet/i2p/data/SessionTag;>;J)V", "consumeTag", "LNetI2pDataSessionTag;", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "LNetI2pDataPublicKey;LNetI2pDataSessionKey;LNetI2pCryptoTagSetHandle;", "tagsAcked" };
  static const J2ObjcClassInfo _NetI2pCryptoSessionKeyManager = { "SessionKeyManager", "net.i2p.crypto", ptrTable, methods, NULL, 7, 0x1, 22, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoSessionKeyManager;
}

@end

void NetI2pCryptoSessionKeyManager_init(NetI2pCryptoSessionKeyManager *self) {
  NSObject_init(self);
}

NetI2pCryptoSessionKeyManager *new_NetI2pCryptoSessionKeyManager_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoSessionKeyManager, init)
}

NetI2pCryptoSessionKeyManager *create_NetI2pCryptoSessionKeyManager_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoSessionKeyManager, init)
}

void NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pCryptoSessionKeyManager *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
}

NetI2pCryptoSessionKeyManager *new_NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pCryptoSessionKeyManager, initWithNetI2pI2PAppContext_, context)
}

NetI2pCryptoSessionKeyManager *create_NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoSessionKeyManager, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoSessionKeyManager)
