//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/YKGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/math/BigInteger.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/CryptoConstants.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/YKGenerator.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/NativeBigInteger.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pCryptoYKGenerator () {
 @public
  jint MIN_NUM_BUILDERS_;
  jint MAX_NUM_BUILDERS_;
  jint CALC_DELAY_;
  JavaUtilConcurrentLinkedBlockingQueue *_values_;
  JavaLangThread *_precalcThread_;
  NetI2pI2PAppContext *ctx_;
  volatile_jboolean _isRunning_;
}

- (jint)getSize;

- (jboolean)addValuesWithJavaMathBigIntegerArray:(IOSObjectArray *)yk;

- (IOSObjectArray *)generateYK;

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoYKGenerator, _values_, JavaUtilConcurrentLinkedBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pCryptoYKGenerator, _precalcThread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(NetI2pCryptoYKGenerator, ctx_, NetI2pI2PAppContext *)

inline JavaMathBigInteger *NetI2pCryptoYKGenerator_get__two(void);
static JavaMathBigInteger *NetI2pCryptoYKGenerator__two;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoYKGenerator, _two, JavaMathBigInteger *)

__attribute__((unused)) static jint NetI2pCryptoYKGenerator_getSize(NetI2pCryptoYKGenerator *self);

__attribute__((unused)) static jboolean NetI2pCryptoYKGenerator_addValuesWithJavaMathBigIntegerArray_(NetI2pCryptoYKGenerator *self, IOSObjectArray *yk);

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoYKGenerator_generateYK(NetI2pCryptoYKGenerator *self);

@interface NetI2pCryptoYKGenerator_YKPrecalcRunner : NSObject < JavaLangRunnable > {
 @public
  NetI2pCryptoYKGenerator *this$0_;
  jint _minSize_;
  jint _maxSize_;
  jlong _checkDelay_;
}

- (instancetype)initWithNetI2pCryptoYKGenerator:(NetI2pCryptoYKGenerator *)outer$
                                        withInt:(jint)minSize
                                        withInt:(jint)maxSize;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pCryptoYKGenerator_YKPrecalcRunner)

__attribute__((unused)) static void NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator_YKPrecalcRunner *self, NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize);

__attribute__((unused)) static NetI2pCryptoYKGenerator_YKPrecalcRunner *new_NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pCryptoYKGenerator_YKPrecalcRunner *create_NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoYKGenerator_YKPrecalcRunner)

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoYKGenerator)

NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MIN = @"crypto.yk.precalc.min";
NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MAX = @"crypto.yk.precalc.max";
NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_DELAY = @"crypto.yk.precalc.delay";

@implementation NetI2pCryptoYKGenerator

+ (NSString *)PROP_YK_PRECALC_MIN {
  return NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MIN;
}

+ (NSString *)PROP_YK_PRECALC_MAX {
  return NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MAX;
}

+ (NSString *)PROP_YK_PRECALC_DELAY {
  return NetI2pCryptoYKGenerator_PROP_YK_PRECALC_DELAY;
}

+ (jint)DEFAULT_YK_PRECALC_MIN {
  return NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MIN;
}

+ (jint)DEFAULT_YK_PRECALC_MAX {
  return NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MAX;
}

+ (jint)DEFAULT_YK_PRECALC_DELAY {
  return NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_DELAY;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)start {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_isRunning_)) return;
    JreStrongAssignAndConsume(&_precalcThread_, new_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(create_NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(self, MIN_NUM_BUILDERS_, MAX_NUM_BUILDERS_), @"YK Precalc", true));
    [_precalcThread_ setPriorityWithInt:JavaLangThread_NORM_PRIORITY - 2];
    JreAssignVolatileBoolean(&_isRunning_, true);
    [((JavaLangThread *) nil_chk(_precalcThread_)) start];
  }
}

- (void)shutdown {
  @synchronized(self) {
    JreAssignVolatileBoolean(&_isRunning_, false);
    if (_precalcThread_ != nil) [_precalcThread_ interrupt];
    [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_values_)) clear];
  }
}

- (jint)getSize {
  return NetI2pCryptoYKGenerator_getSize(self);
}

- (jboolean)addValuesWithJavaMathBigIntegerArray:(IOSObjectArray *)yk {
  return NetI2pCryptoYKGenerator_addValuesWithJavaMathBigIntegerArray_(self, yk);
}

- (IOSObjectArray *)getNextYK {
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx_)) statManager])) addRateDataWithNSString:@"crypto.YKUsed" withLong:1];
  IOSObjectArray *rv = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_values_)) poll];
  if (rv != nil) return rv;
  [((NetI2pStatStatManager *) nil_chk([ctx_ statManager])) addRateDataWithNSString:@"crypto.YKEmpty" withLong:1];
  return NetI2pCryptoYKGenerator_generateYK(self);
}

- (IOSObjectArray *)generateYK {
  return NetI2pCryptoYKGenerator_generateYK(self);
}

- (void)dealloc {
  RELEASE_(_values_);
  RELEASE_(_precalcThread_);
  RELEASE_(ctx_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x12, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getSize);
  methods[4].selector = @selector(addValuesWithJavaMathBigIntegerArray:);
  methods[5].selector = @selector(getNextYK);
  methods[6].selector = @selector(generateYK);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_NUM_BUILDERS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "MAX_NUM_BUILDERS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CALC_DELAY_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_values_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "_precalcThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ctx_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_isRunning_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "PROP_YK_PRECALC_MIN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "PROP_YK_PRECALC_MAX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "PROP_YK_PRECALC_DELAY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "DEFAULT_YK_PRECALC_MIN", "I", .constantValue.asInt = NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MIN, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_YK_PRECALC_MAX", "I", .constantValue.asInt = NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MAX, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_YK_PRECALC_DELAY", "I", .constantValue.asInt = NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_DELAY, 0x19, -1, -1, -1, -1 },
    { "_two", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "addValues", "[LJavaMathBigInteger;", "Ljava/util/concurrent/LinkedBlockingQueue<[Ljava/math/BigInteger;>;", &NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MIN, &NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MAX, &NetI2pCryptoYKGenerator_PROP_YK_PRECALC_DELAY, &NetI2pCryptoYKGenerator__two, "LNetI2pCryptoYKGenerator_YKPrecalcRunner;" };
  static const J2ObjcClassInfo _NetI2pCryptoYKGenerator = { "YKGenerator", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x10, 7, 14, -1, 8, -1, -1, -1 };
  return &_NetI2pCryptoYKGenerator;
}

+ (void)initialize {
  if (self == [NetI2pCryptoYKGenerator class]) {
    JreStrongAssignAndConsume(&NetI2pCryptoYKGenerator__two, new_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, [IOSByteArray arrayWithBytes:(jbyte[]){ (jint) 0x02 } count:1]));
    J2OBJC_SET_INITIALIZED(NetI2pCryptoYKGenerator)
  }
}

@end

void NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pCryptoYKGenerator *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, context);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint factor = (jint) JavaLangMath_maxWithLong_withLong_(1l, JavaLangMath_minWithLong_withLong_(8l, 1 + (maxMemory / (128 * 1024 * 1024l))));
  jint defaultMin = NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MIN * factor;
  jint defaultMax = NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MAX * factor;
  self->MIN_NUM_BUILDERS_ = [((NetI2pI2PAppContext *) nil_chk(self->ctx_)) getPropertyWithNSString:NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MIN withInt:defaultMin];
  self->MAX_NUM_BUILDERS_ = [self->ctx_ getPropertyWithNSString:NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MAX withInt:defaultMax];
  self->CALC_DELAY_ = [self->ctx_ getPropertyWithNSString:NetI2pCryptoYKGenerator_PROP_YK_PRECALC_DELAY withInt:NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_DELAY];
  JreStrongAssignAndConsume(&self->_values_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self->MAX_NUM_BUILDERS_));
  [((NetI2pStatStatManager *) nil_chk([self->ctx_ statManager])) createRateStatWithNSString:@"crypto.YKUsed" withNSString:@"Need a YK from the queue" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
  [((NetI2pStatStatManager *) nil_chk([self->ctx_ statManager])) createRateStatWithNSString:@"crypto.YKEmpty" withNSString:@"YK queue empty" withNSString:@"Encryption" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 60 * 60 * 1000 } count:1]];
}

NetI2pCryptoYKGenerator *new_NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pCryptoYKGenerator, initWithNetI2pI2PAppContext_, context)
}

NetI2pCryptoYKGenerator *create_NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoYKGenerator, initWithNetI2pI2PAppContext_, context)
}

jint NetI2pCryptoYKGenerator_getSize(NetI2pCryptoYKGenerator *self) {
  return [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->_values_)) size];
}

jboolean NetI2pCryptoYKGenerator_addValuesWithJavaMathBigIntegerArray_(NetI2pCryptoYKGenerator *self, IOSObjectArray *yk) {
  return [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->_values_)) offerWithId:yk];
}

IOSObjectArray *NetI2pCryptoYKGenerator_generateYK(NetI2pCryptoYKGenerator *self) {
  NetI2pUtilNativeBigInteger *k = nil;
  JavaMathBigInteger *y = nil;
  while (k == nil) {
    k = create_NetI2pUtilNativeBigInteger_initWithInt_withJavaUtilRandom_([((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) keyGenerator])) getElGamalExponentSize], [self->ctx_ random]);
    if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(JavaMathBigInteger, ZERO))) compareToWithId:k] == 0) {
      k = nil;
      continue;
    }
    JavaMathBigInteger *kPlus2 = [k addWithJavaMathBigInteger:NetI2pCryptoYKGenerator__two];
    if ([((JavaMathBigInteger *) nil_chk(kPlus2)) compareToWithId:JreLoadStatic(NetI2pCryptoCryptoConstants, elgp)] > 0) k = nil;
  }
  y = [((NetI2pUtilNativeBigInteger *) nil_chk(JreLoadStatic(NetI2pCryptoCryptoConstants, elgg))) modPowWithJavaMathBigInteger:k withJavaMathBigInteger:JreLoadStatic(NetI2pCryptoCryptoConstants, elgp)];
  IOSObjectArray *yk = [IOSObjectArray arrayWithLength:2 type:JavaMathBigInteger_class_()];
  IOSObjectArray_Set(yk, 0, y);
  IOSObjectArray_Set(yk, 1, k);
  return yk;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoYKGenerator)

@implementation NetI2pCryptoYKGenerator_YKPrecalcRunner

- (instancetype)initWithNetI2pCryptoYKGenerator:(NetI2pCryptoYKGenerator *)outer$
                                        withInt:(jint)minSize
                                        withInt:(jint)maxSize {
  NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(self, outer$, minSize, maxSize);
  return self;
}

- (void)run {
  while (JreLoadVolatileBoolean(&this$0_->_isRunning_)) {
    jint startSize = NetI2pCryptoYKGenerator_getSize(this$0_);
    if (startSize <= (_minSize_ * 2 / 3) && _checkDelay_ > 1000) _checkDelay_ -= 1000;
    else if (startSize > (_minSize_ * 3 / 2) && _checkDelay_ < 60 * 1000) _checkDelay_ += 1000;
    if (startSize < _minSize_) {
      while (NetI2pCryptoYKGenerator_getSize(this$0_) < _maxSize_ && JreLoadVolatileBoolean(&this$0_->_isRunning_)) {
        if (!NetI2pCryptoYKGenerator_addValuesWithJavaMathBigIntegerArray_(this$0_, NetI2pCryptoYKGenerator_generateYK(this$0_))) break;
        @try {
          JavaLangThread_sleepWithLong_(this$0_->CALC_DELAY_);
        }
        @catch (JavaLangInterruptedException *ie) {
        }
      }
    }
    if (!JreLoadVolatileBoolean(&this$0_->_isRunning_)) break;
    @try {
      JavaLangThread_sleepWithLong_(_checkDelay_);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pCryptoYKGenerator:withInt:withInt:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pCryptoYKGenerator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_minSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_checkDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LNetI2pCryptoYKGenerator;" };
  static const J2ObjcClassInfo _NetI2pCryptoYKGenerator_YKPrecalcRunner = { "YKPrecalcRunner", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x2, 2, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pCryptoYKGenerator_YKPrecalcRunner;
}

@end

void NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator_YKPrecalcRunner *self, NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->_checkDelay_ = 30 * 1000;
  self->_minSize_ = minSize;
  self->_maxSize_ = maxSize;
}

NetI2pCryptoYKGenerator_YKPrecalcRunner *new_NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize) {
  J2OBJC_NEW_IMPL(NetI2pCryptoYKGenerator_YKPrecalcRunner, initWithNetI2pCryptoYKGenerator_withInt_withInt_, outer$, minSize, maxSize)
}

NetI2pCryptoYKGenerator_YKPrecalcRunner *create_NetI2pCryptoYKGenerator_YKPrecalcRunner_initWithNetI2pCryptoYKGenerator_withInt_withInt_(NetI2pCryptoYKGenerator *outer$, jint minSize, jint maxSize) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoYKGenerator_YKPrecalcRunner, initWithNetI2pCryptoYKGenerator_withInt_withInt_, outer$, minSize, maxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoYKGenerator_YKPrecalcRunner)
