//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/EncType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoEncType")
#ifdef RESTRICT_NetI2pCryptoEncType
#define INCLUDE_ALL_NetI2pCryptoEncType 0
#else
#define INCLUDE_ALL_NetI2pCryptoEncType 1
#endif
#undef RESTRICT_NetI2pCryptoEncType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoEncType_) && (INCLUDE_ALL_NetI2pCryptoEncType || defined(INCLUDE_NetI2pCryptoEncType))
#define NetI2pCryptoEncType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NetI2pCryptoEncAlgo;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

typedef NS_ENUM(NSUInteger, NetI2pCryptoEncType_Enum) {
  NetI2pCryptoEncType_Enum_ELGAMAL_2048 = 0,
  NetI2pCryptoEncType_Enum_EC_P256 = 1,
  NetI2pCryptoEncType_Enum_EC_P384 = 2,
  NetI2pCryptoEncType_Enum_EC_P521 = 3,
};

@interface NetI2pCryptoEncType : JavaLangEnum

@property (readonly, class, nonnull) NetI2pCryptoEncType *ELGAMAL_2048 NS_SWIFT_NAME(ELGAMAL_2048);
@property (readonly, class, nonnull) NetI2pCryptoEncType *EC_P256 NS_SWIFT_NAME(EC_P256);
@property (readonly, class, nonnull) NetI2pCryptoEncType *EC_P384 NS_SWIFT_NAME(EC_P384);
@property (readonly, class, nonnull) NetI2pCryptoEncType *EC_P521 NS_SWIFT_NAME(EC_P521);
+ (NetI2pCryptoEncType * __nonnull)ELGAMAL_2048;

+ (NetI2pCryptoEncType * __nonnull)EC_P256;

+ (NetI2pCryptoEncType * __nonnull)EC_P384;

+ (NetI2pCryptoEncType * __nonnull)EC_P521;

#pragma mark Public

- (NSString *)getAlgorithmName;

- (NetI2pCryptoEncAlgo *)getBaseAlgorithm;

+ (NetI2pCryptoEncType *)getByCodeWithInt:(jint)code;

- (jint)getCode;

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParams;

- (jint)getPrivkeyLen;

- (jint)getPubkeyLen;

- (NSString *)getSupportedSince;

- (jboolean)isAvailable;

+ (jboolean)isAvailableWithInt:(jint)code;

+ (jboolean)isAvailableWithNSString:(NSString *)stype;

+ (NetI2pCryptoEncType *)parseEncTypeWithNSString:(NSString *)stype;

+ (NetI2pCryptoEncType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (NetI2pCryptoEncType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoEncType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pCryptoEncType *NetI2pCryptoEncType_values_[];

inline NetI2pCryptoEncType *NetI2pCryptoEncType_get_ELGAMAL_2048(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoEncType, ELGAMAL_2048)

inline NetI2pCryptoEncType *NetI2pCryptoEncType_get_EC_P256(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoEncType, EC_P256)

inline NetI2pCryptoEncType *NetI2pCryptoEncType_get_EC_P384(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoEncType, EC_P384)

inline NetI2pCryptoEncType *NetI2pCryptoEncType_get_EC_P521(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoEncType, EC_P521)

FOUNDATION_EXPORT jboolean NetI2pCryptoEncType_isAvailableWithInt_(jint code);

FOUNDATION_EXPORT jboolean NetI2pCryptoEncType_isAvailableWithNSString_(NSString *stype);

FOUNDATION_EXPORT NetI2pCryptoEncType *NetI2pCryptoEncType_getByCodeWithInt_(jint code);

FOUNDATION_EXPORT NetI2pCryptoEncType *NetI2pCryptoEncType_parseEncTypeWithNSString_(NSString *stype);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoEncType_values(void);

FOUNDATION_EXPORT NetI2pCryptoEncType *NetI2pCryptoEncType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pCryptoEncType *NetI2pCryptoEncType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoEncType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoEncType")
