//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/Utils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/crypto/eddsa/Utils.h"

@implementation NetI2pCryptoEddsaUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoEddsaUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)equalWithInt:(jint)b
             withInt:(jint)c {
  return NetI2pCryptoEddsaUtils_equalWithInt_withInt_(b, c);
}

+ (jint)equalWithByteArray:(IOSByteArray *)b
             withByteArray:(IOSByteArray *)c {
  return NetI2pCryptoEddsaUtils_equalWithByteArray_withByteArray_(b, c);
}

+ (jint)negativeWithInt:(jint)b {
  return NetI2pCryptoEddsaUtils_negativeWithInt_(b);
}

+ (jint)bitWithByteArray:(IOSByteArray *)h
                 withInt:(jint)i {
  return NetI2pCryptoEddsaUtils_bitWithByteArray_withInt_(h, i);
}

+ (IOSByteArray *)hexToBytesWithNSString:(NSString *)s {
  return NetI2pCryptoEddsaUtils_hexToBytesWithNSString_(s);
}

+ (NSString *)bytesToHexWithByteArray:(IOSByteArray *)raw {
  return NetI2pCryptoEddsaUtils_bytesToHexWithByteArray_(raw);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(equalWithInt:withInt:);
  methods[2].selector = @selector(equalWithByteArray:withByteArray:);
  methods[3].selector = @selector(negativeWithInt:);
  methods[4].selector = @selector(bitWithByteArray:withInt:);
  methods[5].selector = @selector(hexToBytesWithNSString:);
  methods[6].selector = @selector(bytesToHexWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "equal", "II", "[B[B", "negative", "I", "bit", "[BI", "hexToBytes", "LNSString;", "bytesToHex", "[B" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaUtils = { "Utils", "net.i2p.crypto.eddsa", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaUtils;
}

@end

void NetI2pCryptoEddsaUtils_init(NetI2pCryptoEddsaUtils *self) {
  NSObject_init(self);
}

NetI2pCryptoEddsaUtils *new_NetI2pCryptoEddsaUtils_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaUtils, init)
}

NetI2pCryptoEddsaUtils *create_NetI2pCryptoEddsaUtils_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaUtils, init)
}

jint NetI2pCryptoEddsaUtils_equalWithInt_withInt_(jint b, jint c) {
  NetI2pCryptoEddsaUtils_initialize();
  jint result = 0;
  jint xor_ = b ^ c;
  for (jint i = 0; i < 8; i++) {
    result |= JreRShift32(xor_, i);
  }
  return (result ^ (jint) 0x01) & (jint) 0x01;
}

jint NetI2pCryptoEddsaUtils_equalWithByteArray_withByteArray_(IOSByteArray *b, IOSByteArray *c) {
  NetI2pCryptoEddsaUtils_initialize();
  jint result = 0;
  for (jint i = 0; i < 32; i++) {
    result |= IOSByteArray_Get(nil_chk(b), i) ^ IOSByteArray_Get(nil_chk(c), i);
  }
  return NetI2pCryptoEddsaUtils_equalWithInt_withInt_(result, 0);
}

jint NetI2pCryptoEddsaUtils_negativeWithInt_(jint b) {
  NetI2pCryptoEddsaUtils_initialize();
  return (JreRShift32(b, 8)) & 1;
}

jint NetI2pCryptoEddsaUtils_bitWithByteArray_withInt_(IOSByteArray *h, jint i) {
  NetI2pCryptoEddsaUtils_initialize();
  return (JreRShift32(IOSByteArray_Get(nil_chk(h), JreRShift32(i, 3)), (i & 7))) & 1;
}

IOSByteArray *NetI2pCryptoEddsaUtils_hexToBytesWithNSString_(NSString *s) {
  NetI2pCryptoEddsaUtils_initialize();
  jint len = [((NSString *) nil_chk(s)) java_length];
  IOSByteArray *data = [IOSByteArray arrayWithLength:len / 2];
  for (jint i = 0; i < len; i += 2) {
    *IOSByteArray_GetRef(data, i / 2) = (jbyte) ((JreLShift32(JavaLangCharacter_digitWithChar_withInt_([s charAtWithInt:i], 16), 4)) + JavaLangCharacter_digitWithChar_withInt_([s charAtWithInt:i + 1], 16));
  }
  return data;
}

NSString *NetI2pCryptoEddsaUtils_bytesToHexWithByteArray_(IOSByteArray *raw) {
  NetI2pCryptoEddsaUtils_initialize();
  if (raw == nil) {
    return nil;
  }
  JavaLangStringBuilder *hex = create_JavaLangStringBuilder_initWithInt_(2 * raw->size_);
  {
    IOSByteArray *a__ = raw;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      [((JavaLangStringBuilder *) nil_chk([hex appendWithChar:JavaLangCharacter_forDigitWithInt_withInt_(JreRShift32((b & (jint) 0xF0), 4), 16)])) appendWithChar:JavaLangCharacter_forDigitWithInt_withInt_((b & (jint) 0x0F), 16)];
    }
  }
  return [hex description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaUtils)
