//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/EdDSAEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoEddsaEdDSAEngine")
#ifdef RESTRICT_NetI2pCryptoEddsaEdDSAEngine
#define INCLUDE_ALL_NetI2pCryptoEddsaEdDSAEngine 0
#else
#define INCLUDE_ALL_NetI2pCryptoEddsaEdDSAEngine 1
#endif
#undef RESTRICT_NetI2pCryptoEddsaEdDSAEngine

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoEddsaEdDSAEngine_) && (INCLUDE_ALL_NetI2pCryptoEddsaEdDSAEngine || defined(INCLUDE_NetI2pCryptoEddsaEdDSAEngine))
#define NetI2pCryptoEddsaEdDSAEngine_

#define RESTRICT_JavaSecuritySignature 1
#define INCLUDE_JavaSecuritySignature 1
#include "java/security/Signature.h"

@class IOSByteArray;
@class JavaSecurityMessageDigest;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

@interface NetI2pCryptoEddsaEdDSAEngine : JavaSecuritySignature
@property (readonly, copy, class) NSString *SIGNATURE_ALGORITHM NS_SWIFT_NAME(SIGNATURE_ALGORITHM);
@property (readonly, class, strong) id<JavaSecuritySpecAlgorithmParameterSpec> ONE_SHOT_MODE NS_SWIFT_NAME(ONE_SHOT_MODE);

+ (NSString *)SIGNATURE_ALGORITHM;

+ (id<JavaSecuritySpecAlgorithmParameterSpec>)ONE_SHOT_MODE;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest;

- (IOSByteArray *)signOneShotWithByteArray:(IOSByteArray *)data;

- (IOSByteArray *)signOneShotWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)off
                                   withInt:(jint)len;

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                         withByteArray:(IOSByteArray *)signature;

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)sigoff
                               withInt:(jint)siglen;

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)len
                         withByteArray:(IOSByteArray *)signature;

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)len
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)sigoff
                               withInt:(jint)siglen;

#pragma mark Protected

- (id)engineGetParameterWithNSString:(NSString *)param;

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey;

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey;

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec;

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value;

- (IOSByteArray *)engineSign;

- (void)engineUpdateWithByte:(jbyte)b;

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len;

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoEddsaEdDSAEngine)

inline NSString *NetI2pCryptoEddsaEdDSAEngine_get_SIGNATURE_ALGORITHM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pCryptoEddsaEdDSAEngine_SIGNATURE_ALGORITHM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoEddsaEdDSAEngine, SIGNATURE_ALGORITHM, NSString *)

inline id<JavaSecuritySpecAlgorithmParameterSpec> NetI2pCryptoEddsaEdDSAEngine_get_ONE_SHOT_MODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaSecuritySpecAlgorithmParameterSpec> NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoEddsaEdDSAEngine, ONE_SHOT_MODE, id<JavaSecuritySpecAlgorithmParameterSpec>)

FOUNDATION_EXPORT void NetI2pCryptoEddsaEdDSAEngine_init(NetI2pCryptoEddsaEdDSAEngine *self);

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAEngine *new_NetI2pCryptoEddsaEdDSAEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAEngine *create_NetI2pCryptoEddsaEdDSAEngine_init(void);

FOUNDATION_EXPORT void NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(NetI2pCryptoEddsaEdDSAEngine *self, JavaSecurityMessageDigest *digest);

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAEngine *new_NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoEddsaEdDSAEngine *create_NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoEddsaEdDSAEngine)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoEddsaEdDSAEngine")
