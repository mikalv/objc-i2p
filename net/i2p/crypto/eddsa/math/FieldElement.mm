//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/math/FieldElement.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/crypto/eddsa/math/Encoding.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/FieldElement.h"

inline jlong NetI2pCryptoEddsaMathFieldElement_get_serialVersionUID(void);
#define NetI2pCryptoEddsaMathFieldElement_serialVersionUID 1239527465875676LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoEddsaMathFieldElement, serialVersionUID, jlong)

@implementation NetI2pCryptoEddsaMathFieldElement

- (instancetype)initWithNetI2pCryptoEddsaMathField:(NetI2pCryptoEddsaMathField *)f {
  NetI2pCryptoEddsaMathFieldElement_initWithNetI2pCryptoEddsaMathField_(self, f);
  return self;
}

- (IOSByteArray *)toByteArray {
  return [((NetI2pCryptoEddsaMathEncoding *) nil_chk([((NetI2pCryptoEddsaMathField *) nil_chk(f_)) getEncoding])) encodeWithNetI2pCryptoEddsaMathFieldElement:self];
}

- (jboolean)isNonZero {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isNegative {
  return [((NetI2pCryptoEddsaMathEncoding *) nil_chk([((NetI2pCryptoEddsaMathField *) nil_chk(f_)) getEncoding])) isNegativeWithNetI2pCryptoEddsaMathFieldElement:self];
}

- (NetI2pCryptoEddsaMathFieldElement *)addWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)addOne {
  return [self addWithNetI2pCryptoEddsaMathFieldElement:((NetI2pCryptoEddsaMathField *) nil_chk(f_))->ONE_];
}

- (NetI2pCryptoEddsaMathFieldElement *)subtractWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)subtractOne {
  return [self subtractWithNetI2pCryptoEddsaMathFieldElement:((NetI2pCryptoEddsaMathField *) nil_chk(f_))->ONE_];
}

- (NetI2pCryptoEddsaMathFieldElement *)negate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)divideWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)val {
  return [self multiplyWithNetI2pCryptoEddsaMathFieldElement:[((NetI2pCryptoEddsaMathFieldElement *) nil_chk(val)) invert]];
}

- (NetI2pCryptoEddsaMathFieldElement *)multiplyWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)square {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)squareAndDouble {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)invert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)pow22523 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pCryptoEddsaMathFieldElement *)cmovWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)val
                                                                         withInt:(jint)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(f_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x401, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pCryptoEddsaMathField:);
  methods[1].selector = @selector(toByteArray);
  methods[2].selector = @selector(isNonZero);
  methods[3].selector = @selector(isNegative);
  methods[4].selector = @selector(addWithNetI2pCryptoEddsaMathFieldElement:);
  methods[5].selector = @selector(addOne);
  methods[6].selector = @selector(subtractWithNetI2pCryptoEddsaMathFieldElement:);
  methods[7].selector = @selector(subtractOne);
  methods[8].selector = @selector(negate);
  methods[9].selector = @selector(divideWithNetI2pCryptoEddsaMathFieldElement:);
  methods[10].selector = @selector(multiplyWithNetI2pCryptoEddsaMathFieldElement:);
  methods[11].selector = @selector(square);
  methods[12].selector = @selector(squareAndDouble);
  methods[13].selector = @selector(invert);
  methods[14].selector = @selector(pow22523);
  methods[15].selector = @selector(cmovWithNetI2pCryptoEddsaMathFieldElement:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pCryptoEddsaMathFieldElement_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "f_", "LNetI2pCryptoEddsaMathField;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pCryptoEddsaMathField;", "add", "LNetI2pCryptoEddsaMathFieldElement;", "subtract", "divide", "multiply", "cmov", "LNetI2pCryptoEddsaMathFieldElement;I" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaMathFieldElement = { "FieldElement", "net.i2p.crypto.eddsa.math", ptrTable, methods, fields, 7, 0x401, 16, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaMathFieldElement;
}

@end

void NetI2pCryptoEddsaMathFieldElement_initWithNetI2pCryptoEddsaMathField_(NetI2pCryptoEddsaMathFieldElement *self, NetI2pCryptoEddsaMathField *f) {
  NSObject_init(self);
  if (nil == f) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"field cannot be null");
  }
  JreStrongAssign(&self->f_, f);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaMathFieldElement)
