//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/math/ed25519/Ed25519LittleEndianEncoding.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/crypto/eddsa/math/Encoding.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/FieldElement.h"
#include "net/i2p/crypto/eddsa/math/ed25519/Ed25519FieldElement.h"
#include "net/i2p/crypto/eddsa/math/ed25519/Ed25519LittleEndianEncoding.h"

@implementation NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)encodeWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)x {
  IOSIntArray *h = ((NetI2pCryptoEddsaMathEd25519Ed25519FieldElement *) nil_chk(((NetI2pCryptoEddsaMathEd25519Ed25519FieldElement *) cast_chk(x, [NetI2pCryptoEddsaMathEd25519Ed25519FieldElement class]))))->t_;
  jint h0 = IOSIntArray_Get(nil_chk(h), 0);
  jint h1 = IOSIntArray_Get(h, 1);
  jint h2 = IOSIntArray_Get(h, 2);
  jint h3 = IOSIntArray_Get(h, 3);
  jint h4 = IOSIntArray_Get(h, 4);
  jint h5 = IOSIntArray_Get(h, 5);
  jint h6 = IOSIntArray_Get(h, 6);
  jint h7 = IOSIntArray_Get(h, 7);
  jint h8 = IOSIntArray_Get(h, 8);
  jint h9 = IOSIntArray_Get(h, 9);
  jint q;
  jint carry0;
  jint carry1;
  jint carry2;
  jint carry3;
  jint carry4;
  jint carry5;
  jint carry6;
  jint carry7;
  jint carry8;
  jint carry9;
  q = JreRShift32((19 * h9 + (JreLShift32(1, 24))), 25);
  q = JreRShift32((h0 + q), 26);
  q = JreRShift32((h1 + q), 25);
  q = JreRShift32((h2 + q), 26);
  q = JreRShift32((h3 + q), 25);
  q = JreRShift32((h4 + q), 26);
  q = JreRShift32((h5 + q), 25);
  q = JreRShift32((h6 + q), 26);
  q = JreRShift32((h7 + q), 25);
  q = JreRShift32((h8 + q), 26);
  q = JreRShift32((h9 + q), 25);
  h0 += 19 * q;
  carry0 = JreRShift32(h0, 26);
  h1 += carry0;
  h0 -= JreLShift32(carry0, 26);
  carry1 = JreRShift32(h1, 25);
  h2 += carry1;
  h1 -= JreLShift32(carry1, 25);
  carry2 = JreRShift32(h2, 26);
  h3 += carry2;
  h2 -= JreLShift32(carry2, 26);
  carry3 = JreRShift32(h3, 25);
  h4 += carry3;
  h3 -= JreLShift32(carry3, 25);
  carry4 = JreRShift32(h4, 26);
  h5 += carry4;
  h4 -= JreLShift32(carry4, 26);
  carry5 = JreRShift32(h5, 25);
  h6 += carry5;
  h5 -= JreLShift32(carry5, 25);
  carry6 = JreRShift32(h6, 26);
  h7 += carry6;
  h6 -= JreLShift32(carry6, 26);
  carry7 = JreRShift32(h7, 25);
  h8 += carry7;
  h7 -= JreLShift32(carry7, 25);
  carry8 = JreRShift32(h8, 26);
  h9 += carry8;
  h8 -= JreLShift32(carry8, 26);
  carry9 = JreRShift32(h9, 25);
  h9 -= JreLShift32(carry9, 25);
  IOSByteArray *s = [IOSByteArray arrayWithLength:32];
  *IOSByteArray_GetRef(s, 0) = (jbyte) h0;
  *IOSByteArray_GetRef(s, 1) = (jbyte) (JreRShift32(h0, 8));
  *IOSByteArray_GetRef(s, 2) = (jbyte) (JreRShift32(h0, 16));
  *IOSByteArray_GetRef(s, 3) = (jbyte) ((JreRShift32(h0, 24)) | (JreLShift32(h1, 2)));
  *IOSByteArray_GetRef(s, 4) = (jbyte) (JreRShift32(h1, 6));
  *IOSByteArray_GetRef(s, 5) = (jbyte) (JreRShift32(h1, 14));
  *IOSByteArray_GetRef(s, 6) = (jbyte) ((JreRShift32(h1, 22)) | (JreLShift32(h2, 3)));
  *IOSByteArray_GetRef(s, 7) = (jbyte) (JreRShift32(h2, 5));
  *IOSByteArray_GetRef(s, 8) = (jbyte) (JreRShift32(h2, 13));
  *IOSByteArray_GetRef(s, 9) = (jbyte) ((JreRShift32(h2, 21)) | (JreLShift32(h3, 5)));
  *IOSByteArray_GetRef(s, 10) = (jbyte) (JreRShift32(h3, 3));
  *IOSByteArray_GetRef(s, 11) = (jbyte) (JreRShift32(h3, 11));
  *IOSByteArray_GetRef(s, 12) = (jbyte) ((JreRShift32(h3, 19)) | (JreLShift32(h4, 6)));
  *IOSByteArray_GetRef(s, 13) = (jbyte) (JreRShift32(h4, 2));
  *IOSByteArray_GetRef(s, 14) = (jbyte) (JreRShift32(h4, 10));
  *IOSByteArray_GetRef(s, 15) = (jbyte) (JreRShift32(h4, 18));
  *IOSByteArray_GetRef(s, 16) = (jbyte) h5;
  *IOSByteArray_GetRef(s, 17) = (jbyte) (JreRShift32(h5, 8));
  *IOSByteArray_GetRef(s, 18) = (jbyte) (JreRShift32(h5, 16));
  *IOSByteArray_GetRef(s, 19) = (jbyte) ((JreRShift32(h5, 24)) | (JreLShift32(h6, 1)));
  *IOSByteArray_GetRef(s, 20) = (jbyte) (JreRShift32(h6, 7));
  *IOSByteArray_GetRef(s, 21) = (jbyte) (JreRShift32(h6, 15));
  *IOSByteArray_GetRef(s, 22) = (jbyte) ((JreRShift32(h6, 23)) | (JreLShift32(h7, 3)));
  *IOSByteArray_GetRef(s, 23) = (jbyte) (JreRShift32(h7, 5));
  *IOSByteArray_GetRef(s, 24) = (jbyte) (JreRShift32(h7, 13));
  *IOSByteArray_GetRef(s, 25) = (jbyte) ((JreRShift32(h7, 21)) | (JreLShift32(h8, 4)));
  *IOSByteArray_GetRef(s, 26) = (jbyte) (JreRShift32(h8, 4));
  *IOSByteArray_GetRef(s, 27) = (jbyte) (JreRShift32(h8, 12));
  *IOSByteArray_GetRef(s, 28) = (jbyte) ((JreRShift32(h8, 20)) | (JreLShift32(h9, 6)));
  *IOSByteArray_GetRef(s, 29) = (jbyte) (JreRShift32(h9, 2));
  *IOSByteArray_GetRef(s, 30) = (jbyte) (JreRShift32(h9, 10));
  *IOSByteArray_GetRef(s, 31) = (jbyte) (JreRShift32(h9, 18));
  return s;
}

+ (jint)load_3WithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)offset {
  return NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, offset);
}

+ (jlong)load_4WithByteArray:(IOSByteArray *)inArg
                     withInt:(jint)offset {
  return NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_4WithByteArray_withInt_(inArg, offset);
}

- (NetI2pCryptoEddsaMathFieldElement *)decodeWithByteArray:(IOSByteArray *)inArg {
  jlong h0 = NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_4WithByteArray_withInt_(inArg, 0);
  jlong h1 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 4), 6);
  jlong h2 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 7), 5);
  jlong h3 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 10), 3);
  jlong h4 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 13), 2);
  jlong h5 = NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_4WithByteArray_withInt_(inArg, 16);
  jlong h6 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 20), 7);
  jlong h7 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 23), 5);
  jlong h8 = JreLShift32(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 26), 4);
  jlong h9 = JreLShift32((NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(inArg, 29) & (jint) 0x7FFFFF), 2);
  jlong carry0;
  jlong carry1;
  jlong carry2;
  jlong carry3;
  jlong carry4;
  jlong carry5;
  jlong carry6;
  jlong carry7;
  jlong carry8;
  jlong carry9;
  carry9 = JreRShift64((h9 + (jlong) (JreLShift32(1, 24))), 25);
  h0 += carry9 * 19;
  h9 -= JreLShift64(carry9, 25);
  carry1 = JreRShift64((h1 + (jlong) (JreLShift32(1, 24))), 25);
  h2 += carry1;
  h1 -= JreLShift64(carry1, 25);
  carry3 = JreRShift64((h3 + (jlong) (JreLShift32(1, 24))), 25);
  h4 += carry3;
  h3 -= JreLShift64(carry3, 25);
  carry5 = JreRShift64((h5 + (jlong) (JreLShift32(1, 24))), 25);
  h6 += carry5;
  h5 -= JreLShift64(carry5, 25);
  carry7 = JreRShift64((h7 + (jlong) (JreLShift32(1, 24))), 25);
  h8 += carry7;
  h7 -= JreLShift64(carry7, 25);
  carry0 = JreRShift64((h0 + (jlong) (JreLShift32(1, 25))), 26);
  h1 += carry0;
  h0 -= JreLShift64(carry0, 26);
  carry2 = JreRShift64((h2 + (jlong) (JreLShift32(1, 25))), 26);
  h3 += carry2;
  h2 -= JreLShift64(carry2, 26);
  carry4 = JreRShift64((h4 + (jlong) (JreLShift32(1, 25))), 26);
  h5 += carry4;
  h4 -= JreLShift64(carry4, 26);
  carry6 = JreRShift64((h6 + (jlong) (JreLShift32(1, 25))), 26);
  h7 += carry6;
  h6 -= JreLShift64(carry6, 26);
  carry8 = JreRShift64((h8 + (jlong) (JreLShift32(1, 25))), 26);
  h9 += carry8;
  h8 -= JreLShift64(carry8, 26);
  IOSIntArray *h = [IOSIntArray arrayWithLength:10];
  *IOSIntArray_GetRef(h, 0) = (jint) h0;
  *IOSIntArray_GetRef(h, 1) = (jint) h1;
  *IOSIntArray_GetRef(h, 2) = (jint) h2;
  *IOSIntArray_GetRef(h, 3) = (jint) h3;
  *IOSIntArray_GetRef(h, 4) = (jint) h4;
  *IOSIntArray_GetRef(h, 5) = (jint) h5;
  *IOSIntArray_GetRef(h, 6) = (jint) h6;
  *IOSIntArray_GetRef(h, 7) = (jint) h7;
  *IOSIntArray_GetRef(h, 8) = (jint) h8;
  *IOSIntArray_GetRef(h, 9) = (jint) h9;
  return create_NetI2pCryptoEddsaMathEd25519Ed25519FieldElement_initWithNetI2pCryptoEddsaMathField_withIntArray_(f_, h);
}

- (jboolean)isNegativeWithNetI2pCryptoEddsaMathFieldElement:(NetI2pCryptoEddsaMathFieldElement *)x {
  IOSByteArray *s = [self encodeWithNetI2pCryptoEddsaMathFieldElement:x];
  return (IOSByteArray_Get(nil_chk(s), 0) & 1) != 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathFieldElement;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeWithNetI2pCryptoEddsaMathFieldElement:);
  methods[2].selector = @selector(load_3WithByteArray:withInt:);
  methods[3].selector = @selector(load_4WithByteArray:withInt:);
  methods[4].selector = @selector(decodeWithByteArray:);
  methods[5].selector = @selector(isNegativeWithNetI2pCryptoEddsaMathFieldElement:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encode", "LNetI2pCryptoEddsaMathFieldElement;", "load_3", "[BI", "load_4", "decode", "[B", "isNegative" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding = { "Ed25519LittleEndianEncoding", "net.i2p.crypto.eddsa.math.ed25519", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding;
}

@end

void NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_init(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding *self) {
  NetI2pCryptoEddsaMathEncoding_init(self);
}

NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding *new_NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding, init)
}

NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding *create_NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding, init)
}

jint NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_3WithByteArray_withInt_(IOSByteArray *inArg, jint offset) {
  NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_initialize();
  jint result = IOSByteArray_Get(nil_chk(inArg), offset++) & (jint) 0xff;
  result |= JreLShift32((IOSByteArray_Get(inArg, offset++) & (jint) 0xff), 8);
  result |= JreLShift32((IOSByteArray_Get(inArg, offset) & (jint) 0xff), 16);
  return result;
}

jlong NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_load_4WithByteArray_withInt_(IOSByteArray *inArg, jint offset) {
  NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding_initialize();
  jint result = IOSByteArray_Get(nil_chk(inArg), offset++) & (jint) 0xff;
  result |= JreLShift32((IOSByteArray_Get(inArg, offset++) & (jint) 0xff), 8);
  result |= JreLShift32((IOSByteArray_Get(inArg, offset++) & (jint) 0xff), 16);
  result |= JreLShift32(IOSByteArray_Get(inArg, offset), 24);
  return ((jlong) result) & (jlong) 0xffffffffLL;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaMathEd25519Ed25519LittleEndianEncoding)
