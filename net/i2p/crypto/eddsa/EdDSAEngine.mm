//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/EdDSAEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/nio/ByteBuffer.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "java/util/Arrays.h"
#include "net/i2p/crypto/eddsa/EdDSAEngine.h"
#include "net/i2p/crypto/eddsa/EdDSAKey.h"
#include "net/i2p/crypto/eddsa/EdDSAPrivateKey.h"
#include "net/i2p/crypto/eddsa/EdDSAPublicKey.h"
#include "net/i2p/crypto/eddsa/math/Curve.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/GroupElement.h"
#include "net/i2p/crypto/eddsa/math/ScalarOps.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.h"

@interface NetI2pCryptoEddsaEdDSAEngine () {
 @public
  JavaSecurityMessageDigest *digest_;
  JavaIoByteArrayOutputStream *baos_;
  id<NetI2pCryptoEddsaEdDSAKey> key_;
  jboolean oneShotMode_;
  IOSByteArray *oneShotBytes_;
  jint oneShotOffset_;
  jint oneShotLength_;
}

- (void)reset;

- (void)digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey:(NetI2pCryptoEddsaEdDSAPrivateKey *)privKey;

- (IOSByteArray *)x_engineSign;

- (jboolean)x_engineVerifyWithByteArray:(IOSByteArray *)sigBytes;

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaEdDSAEngine, digest_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaEdDSAEngine, baos_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaEdDSAEngine, key_, id<NetI2pCryptoEddsaEdDSAKey>)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaEdDSAEngine, oneShotBytes_, IOSByteArray *)

__attribute__((unused)) static void NetI2pCryptoEddsaEdDSAEngine_reset(NetI2pCryptoEddsaEdDSAEngine *self);

__attribute__((unused)) static void NetI2pCryptoEddsaEdDSAEngine_digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey_(NetI2pCryptoEddsaEdDSAEngine *self, NetI2pCryptoEddsaEdDSAPrivateKey *privKey);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoEddsaEdDSAEngine_x_engineSign(NetI2pCryptoEddsaEdDSAEngine *self);

__attribute__((unused)) static jboolean NetI2pCryptoEddsaEdDSAEngine_x_engineVerifyWithByteArray_(NetI2pCryptoEddsaEdDSAEngine *self, IOSByteArray *sigBytes);

@interface NetI2pCryptoEddsaEdDSAEngine_OneShotSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec)

__attribute__((unused)) static void NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *self);

__attribute__((unused)) static NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *new_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *create_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec)

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoEddsaEdDSAEngine)

NSString *NetI2pCryptoEddsaEdDSAEngine_SIGNATURE_ALGORITHM = @"NONEwithEdDSA";
id<JavaSecuritySpecAlgorithmParameterSpec> NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE;

@implementation NetI2pCryptoEddsaEdDSAEngine

+ (NSString *)SIGNATURE_ALGORITHM {
  return NetI2pCryptoEddsaEdDSAEngine_SIGNATURE_ALGORITHM;
}

+ (id<JavaSecuritySpecAlgorithmParameterSpec>)ONE_SHOT_MODE {
  return NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoEddsaEdDSAEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest {
  NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(self, digest);
  return self;
}

- (void)reset {
  NetI2pCryptoEddsaEdDSAEngine_reset(self);
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  NetI2pCryptoEddsaEdDSAEngine_reset(self);
  if ([privateKey isKindOfClass:[NetI2pCryptoEddsaEdDSAPrivateKey class]]) {
    NetI2pCryptoEddsaEdDSAPrivateKey *privKey = (NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(privateKey, [NetI2pCryptoEddsaEdDSAPrivateKey class]);
    JreStrongAssign(&key_, privKey);
    if (digest_ == nil) {
      @try {
        JreStrongAssign(&digest_, JavaSecurityMessageDigest_getInstanceWithNSString_([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm]));
      }
      @catch (JavaSecurityNoSuchAlgorithmException *e) {
        @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$", @"cannot get required digest ", [((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm], @" for private key."));
      }
    }
    else if (![((NSString *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm])) isEqual:[((JavaSecurityMessageDigest *) nil_chk(digest_)) getAlgorithm]]) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"Key hash algorithm does not match chosen digest");
    NetI2pCryptoEddsaEdDSAEngine_digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey_(self, privKey);
  }
  else {
    @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@", @"cannot identify EdDSA private key: ", [((id<JavaSecurityPrivateKey>) nil_chk(privateKey)) java_getClass]));
  }
}

- (void)digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey:(NetI2pCryptoEddsaEdDSAPrivateKey *)privKey {
  NetI2pCryptoEddsaEdDSAEngine_digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey_(self, privKey);
}

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  NetI2pCryptoEddsaEdDSAEngine_reset(self);
  if ([publicKey isKindOfClass:[NetI2pCryptoEddsaEdDSAPublicKey class]]) {
    JreStrongAssign(&key_, (NetI2pCryptoEddsaEdDSAPublicKey *) cast_chk(publicKey, [NetI2pCryptoEddsaEdDSAPublicKey class]));
    if (digest_ == nil) {
      @try {
        JreStrongAssign(&digest_, JavaSecurityMessageDigest_getInstanceWithNSString_([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm]));
      }
      @catch (JavaSecurityNoSuchAlgorithmException *e) {
        @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$$", @"cannot get required digest ", [((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm], @" for private key."));
      }
    }
    else if (![((NSString *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(key_)) getParams])) getHashAlgorithm])) isEqual:[((JavaSecurityMessageDigest *) nil_chk(digest_)) getAlgorithm]]) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"Key hash algorithm does not match chosen digest");
  }
  else if ([((NSString *) nil_chk([[((id<JavaSecurityPublicKey>) nil_chk(publicKey)) java_getClass] getName])) isEqual:@"sun.security.x509.X509Key"]) {
    NetI2pCryptoEddsaEdDSAPublicKey *parsedPublicKey;
    @try {
      parsedPublicKey = create_NetI2pCryptoEddsaEdDSAPublicKey_initWithJavaSecuritySpecX509EncodedKeySpec_(create_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([publicKey getEncoded]));
    }
    @catch (JavaSecuritySpecInvalidKeySpecException *ex) {
      @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot handle X.509 EdDSA public key: ", [publicKey getAlgorithm]));
    }
    [self engineInitVerifyWithJavaSecurityPublicKey:parsedPublicKey];
  }
  else {
    @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@", @"cannot identify EdDSA public key: ", [publicKey java_getClass]));
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  if (oneShotMode_) @throw create_JavaSecuritySignatureException_initWithNSString_(@"unsupported in one-shot mode");
  if (baos_ == nil) JreStrongAssignAndConsume(&baos_, new_JavaIoByteArrayOutputStream_initWithInt_(256));
  [baos_ writeWithInt:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  if (oneShotMode_) {
    if (oneShotBytes_ != nil) @throw create_JavaSecuritySignatureException_initWithNSString_(@"update() already called");
    JreStrongAssign(&oneShotBytes_, b);
    oneShotOffset_ = off;
    oneShotLength_ = len;
  }
  else {
    if (baos_ == nil) JreStrongAssignAndConsume(&baos_, new_JavaIoByteArrayOutputStream_initWithInt_(256));
    [baos_ writeWithByteArray:b withInt:off withInt:len];
  }
}

- (IOSByteArray *)engineSign {
  @try {
    return NetI2pCryptoEddsaEdDSAEngine_x_engineSign(self);
  }
  @finally {
    NetI2pCryptoEddsaEdDSAEngine_reset(self);
    NetI2pCryptoEddsaEdDSAPrivateKey *privKey = (NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(key_, [NetI2pCryptoEddsaEdDSAPrivateKey class]);
    NetI2pCryptoEddsaEdDSAEngine_digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey_(self, privKey);
  }
}

- (IOSByteArray *)x_engineSign {
  return NetI2pCryptoEddsaEdDSAEngine_x_engineSign(self);
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  @try {
    return NetI2pCryptoEddsaEdDSAEngine_x_engineVerifyWithByteArray_(self, sigBytes);
  }
  @finally {
    NetI2pCryptoEddsaEdDSAEngine_reset(self);
  }
}

- (jboolean)x_engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  return NetI2pCryptoEddsaEdDSAEngine_x_engineVerifyWithByteArray_(self, sigBytes);
}

- (IOSByteArray *)signOneShotWithByteArray:(IOSByteArray *)data {
  return [self signOneShotWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
}

- (IOSByteArray *)signOneShotWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)off
                                   withInt:(jint)len {
  oneShotMode_ = true;
  [self updateWithByteArray:data withInt:off withInt:len];
  return [self sign];
}

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                         withByteArray:(IOSByteArray *)signature {
  return [self verifyOneShotWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_ withByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
}

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)len
                         withByteArray:(IOSByteArray *)signature {
  return [self verifyOneShotWithByteArray:data withInt:off withInt:len withByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
}

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)sigoff
                               withInt:(jint)siglen {
  return [self verifyOneShotWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_ withByteArray:signature withInt:sigoff withInt:siglen];
}

- (jboolean)verifyOneShotWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)len
                         withByteArray:(IOSByteArray *)signature
                               withInt:(jint)sigoff
                               withInt:(jint)siglen {
  oneShotMode_ = true;
  [self updateWithByteArray:data withInt:off withInt:len];
  return [self verifyWithByteArray:signature withInt:sigoff withInt:siglen];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec {
  if ([((id<JavaSecuritySpecAlgorithmParameterSpec>) nil_chk(spec)) isEqual:NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE]) {
    if (oneShotBytes_ != nil || (baos_ != nil && [baos_ size] > 0)) @throw create_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"update() already called");
    oneShotMode_ = true;
  }
  else {
    [super engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:spec];
  }
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)dealloc {
  RELEASE_(digest_);
  RELEASE_(baos_);
  RELEASE_(key_);
  RELEASE_(oneShotBytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 11, 10, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "Z", 0x4, 12, 13, 10, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 13, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 13, 10, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 11, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 18, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 19, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 20, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaSecurityMessageDigest:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[4].selector = @selector(digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey:);
  methods[5].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[6].selector = @selector(engineUpdateWithByte:);
  methods[7].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(engineSign);
  methods[9].selector = @selector(x_engineSign);
  methods[10].selector = @selector(engineVerifyWithByteArray:);
  methods[11].selector = @selector(x_engineVerifyWithByteArray:);
  methods[12].selector = @selector(signOneShotWithByteArray:);
  methods[13].selector = @selector(signOneShotWithByteArray:withInt:withInt:);
  methods[14].selector = @selector(verifyOneShotWithByteArray:withByteArray:);
  methods[15].selector = @selector(verifyOneShotWithByteArray:withInt:withInt:withByteArray:);
  methods[16].selector = @selector(verifyOneShotWithByteArray:withByteArray:withInt:withInt:);
  methods[17].selector = @selector(verifyOneShotWithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[18].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[19].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[20].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIGNATURE_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "digest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baos_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LNetI2pCryptoEddsaEdDSAKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneShotMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneShotBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneShotOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneShotLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ONE_SHOT_MODE", "LJavaSecuritySpecAlgorithmParameterSpec;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityMessageDigest;", "engineInitSign", "LJavaSecurityPrivateKey;", "LJavaSecurityInvalidKeyException;", "digestInitSign", "LNetI2pCryptoEddsaEdDSAPrivateKey;", "engineInitVerify", "LJavaSecurityPublicKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "[B", "x_engineVerify", "signOneShot", "verifyOneShot", "[B[B", "[BII[B", "[B[BII", "[BII[BII", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LJavaSecurityInvalidAlgorithmParameterException;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;", &NetI2pCryptoEddsaEdDSAEngine_SIGNATURE_ALGORITHM, &NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE, "LNetI2pCryptoEddsaEdDSAEngine_OneShotSpec;" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaEdDSAEngine = { "EdDSAEngine", "net.i2p.crypto.eddsa", ptrTable, methods, fields, 7, 0x11, 21, 9, -1, 29, -1, -1, -1 };
  return &_NetI2pCryptoEddsaEdDSAEngine;
}

+ (void)initialize {
  if (self == [NetI2pCryptoEddsaEdDSAEngine class]) {
    JreStrongAssignAndConsume(&NetI2pCryptoEddsaEdDSAEngine_ONE_SHOT_MODE, new_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init());
    J2OBJC_SET_INITIALIZED(NetI2pCryptoEddsaEdDSAEngine)
  }
}

@end

void NetI2pCryptoEddsaEdDSAEngine_init(NetI2pCryptoEddsaEdDSAEngine *self) {
  JavaSecuritySignature_initWithNSString_(self, NetI2pCryptoEddsaEdDSAEngine_SIGNATURE_ALGORITHM);
}

NetI2pCryptoEddsaEdDSAEngine *new_NetI2pCryptoEddsaEdDSAEngine_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaEdDSAEngine, init)
}

NetI2pCryptoEddsaEdDSAEngine *create_NetI2pCryptoEddsaEdDSAEngine_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaEdDSAEngine, init)
}

void NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(NetI2pCryptoEddsaEdDSAEngine *self, JavaSecurityMessageDigest *digest) {
  NetI2pCryptoEddsaEdDSAEngine_init(self);
  JreStrongAssign(&self->digest_, digest);
}

NetI2pCryptoEddsaEdDSAEngine *new_NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaEdDSAEngine, initWithJavaSecurityMessageDigest_, digest)
}

NetI2pCryptoEddsaEdDSAEngine *create_NetI2pCryptoEddsaEdDSAEngine_initWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaEdDSAEngine, initWithJavaSecurityMessageDigest_, digest)
}

void NetI2pCryptoEddsaEdDSAEngine_reset(NetI2pCryptoEddsaEdDSAEngine *self) {
  if (self->digest_ != nil) [self->digest_ reset];
  if (self->baos_ != nil) [self->baos_ reset];
  self->oneShotMode_ = false;
  JreStrongAssign(&self->oneShotBytes_, nil);
}

void NetI2pCryptoEddsaEdDSAEngine_digestInitSignWithNetI2pCryptoEddsaEdDSAPrivateKey_(NetI2pCryptoEddsaEdDSAEngine *self, NetI2pCryptoEddsaEdDSAPrivateKey *privKey) {
  jint b = [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((NetI2pCryptoEddsaEdDSAPrivateKey *) nil_chk(privKey)) getParams])) getCurve])) getField])) getb];
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:[privKey getH] withInt:b / 8 withInt:b / 4 - b / 8];
}

IOSByteArray *NetI2pCryptoEddsaEdDSAEngine_x_engineSign(NetI2pCryptoEddsaEdDSAEngine *self) {
  NetI2pCryptoEddsaMathCurve *curve = [((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getCurve];
  id<NetI2pCryptoEddsaMathScalarOps> sc = [((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getScalarOps];
  IOSByteArray *a = [((NetI2pCryptoEddsaEdDSAPrivateKey *) nil_chk(((NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(self->key_, [NetI2pCryptoEddsaEdDSAPrivateKey class])))) geta];
  IOSByteArray *message;
  jint offset;
  jint length;
  if (self->oneShotMode_) {
    if (self->oneShotBytes_ == nil) @throw create_JavaSecuritySignatureException_initWithNSString_(@"update() not called first");
    message = self->oneShotBytes_;
    offset = self->oneShotOffset_;
    length = self->oneShotLength_;
  }
  else {
    if (self->baos_ == nil) message = [IOSByteArray arrayWithLength:0];
    else message = [self->baos_ toByteArray];
    offset = 0;
    length = ((IOSByteArray *) nil_chk(message))->size_;
  }
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:message withInt:offset withInt:length];
  IOSByteArray *r = [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) digest];
  r = [((id<NetI2pCryptoEddsaMathScalarOps>) nil_chk(sc)) reduceWithByteArray:r];
  NetI2pCryptoEddsaMathGroupElement *R = [((NetI2pCryptoEddsaMathGroupElement *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getB])) scalarMultiplyWithByteArray:r];
  IOSByteArray *Rbyte = [((NetI2pCryptoEddsaMathGroupElement *) nil_chk(R)) toByteArray];
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:Rbyte];
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:[((NetI2pCryptoEddsaEdDSAPrivateKey *) nil_chk(((NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(self->key_, [NetI2pCryptoEddsaEdDSAPrivateKey class])))) getAbyte]];
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:message withInt:offset withInt:length];
  IOSByteArray *h = [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) digest];
  h = [sc reduceWithByteArray:h];
  IOSByteArray *S = [sc multiplyAndAddWithByteArray:h withByteArray:a withByteArray:r];
  jint b = [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk(curve)) getField])) getb];
  JavaNioByteBuffer *out = JavaNioByteBuffer_allocateWithInt_(b / 4);
  [((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk(out)) putWithByteArray:Rbyte])) putWithByteArray:S];
  return [out array];
}

jboolean NetI2pCryptoEddsaEdDSAEngine_x_engineVerifyWithByteArray_(NetI2pCryptoEddsaEdDSAEngine *self, IOSByteArray *sigBytes) {
  NetI2pCryptoEddsaMathCurve *curve = [((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getCurve];
  jint b = [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk(curve)) getField])) getb];
  if (((IOSByteArray *) nil_chk(sigBytes))->size_ != b / 4) @throw create_JavaSecuritySignatureException_initWithNSString_(@"signature length is wrong");
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:sigBytes withInt:0 withInt:b / 8];
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:[((NetI2pCryptoEddsaEdDSAPublicKey *) nil_chk(((NetI2pCryptoEddsaEdDSAPublicKey *) cast_chk(self->key_, [NetI2pCryptoEddsaEdDSAPublicKey class])))) getAbyte]];
  IOSByteArray *message;
  jint offset;
  jint length;
  if (self->oneShotMode_) {
    if (self->oneShotBytes_ == nil) @throw create_JavaSecuritySignatureException_initWithNSString_(@"update() not called first");
    message = self->oneShotBytes_;
    offset = self->oneShotOffset_;
    length = self->oneShotLength_;
  }
  else {
    if (self->baos_ == nil) message = [IOSByteArray arrayWithLength:0];
    else message = [self->baos_ toByteArray];
    offset = 0;
    length = ((IOSByteArray *) nil_chk(message))->size_;
  }
  [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) updateWithByteArray:message withInt:offset withInt:length];
  IOSByteArray *h = [((JavaSecurityMessageDigest *) nil_chk(self->digest_)) digest];
  h = [((id<NetI2pCryptoEddsaMathScalarOps>) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getScalarOps])) reduceWithByteArray:h];
  IOSByteArray *Sbyte = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sigBytes, b / 8, b / 4);
  NetI2pCryptoEddsaMathGroupElement *R = [((NetI2pCryptoEddsaMathGroupElement *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk([((id<NetI2pCryptoEddsaEdDSAKey>) nil_chk(self->key_)) getParams])) getB])) doubleScalarMultiplyVariableTimeWithNetI2pCryptoEddsaMathGroupElement:[((NetI2pCryptoEddsaEdDSAPublicKey *) nil_chk(((NetI2pCryptoEddsaEdDSAPublicKey *) cast_chk(self->key_, [NetI2pCryptoEddsaEdDSAPublicKey class])))) getNegativeA] withByteArray:h withByteArray:Sbyte];
  IOSByteArray *Rcalc = [((NetI2pCryptoEddsaMathGroupElement *) nil_chk(R)) toByteArray];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(Rcalc))->size_; i++) {
    if (IOSByteArray_Get(Rcalc, i) != IOSByteArray_Get(sigBytes, i)) return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaEdDSAEngine)

@implementation NetI2pCryptoEddsaEdDSAEngine_OneShotSpec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pCryptoEddsaEdDSAEngine;" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaEdDSAEngine_OneShotSpec = { "OneShotSpec", "net.i2p.crypto.eddsa", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec;
}

@end

void NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *self) {
  NSObject_init(self);
}

NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *new_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec, init)
}

NetI2pCryptoEddsaEdDSAEngine_OneShotSpec *create_NetI2pCryptoEddsaEdDSAEngine_OneShotSpec_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaEdDSAEngine_OneShotSpec)
