//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/KeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGeneratorSpi.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/util/Hashtable.h"
#include "net/i2p/crypto/eddsa/EdDSAPrivateKey.h"
#include "net/i2p/crypto/eddsa/EdDSAPublicKey.h"
#include "net/i2p/crypto/eddsa/KeyPairGenerator.h"
#include "net/i2p/crypto/eddsa/math/Curve.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/GroupElement.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAGenParameterSpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSANamedCurveSpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSANamedCurveTable.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAPrivateKeySpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAPublicKeySpec.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pCryptoEddsaKeyPairGenerator () {
 @public
  NetI2pCryptoEddsaSpecEdDSAParameterSpec *edParams_;
  JavaSecuritySecureRandom *random_;
  jboolean initialized_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaKeyPairGenerator, edParams_, NetI2pCryptoEddsaSpecEdDSAParameterSpec *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaKeyPairGenerator, random_, JavaSecuritySecureRandom *)

inline jint NetI2pCryptoEddsaKeyPairGenerator_get_DEFAULT_KEYSIZE(void);
#define NetI2pCryptoEddsaKeyPairGenerator_DEFAULT_KEYSIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoEddsaKeyPairGenerator, DEFAULT_KEYSIZE, jint)

inline JavaUtilHashtable *NetI2pCryptoEddsaKeyPairGenerator_get_edParameters(void);
static JavaUtilHashtable *NetI2pCryptoEddsaKeyPairGenerator_edParameters;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoEddsaKeyPairGenerator, edParameters, JavaUtilHashtable *)

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoEddsaKeyPairGenerator)

@implementation NetI2pCryptoEddsaKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoEddsaKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)keysize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<JavaSecuritySpecAlgorithmParameterSpec> edParams = [((JavaUtilHashtable *) nil_chk(NetI2pCryptoEddsaKeyPairGenerator_edParameters)) getWithId:JavaLangInteger_valueOfWithInt_(keysize)];
  if (edParams == nil) @throw create_JavaSecurityInvalidParameterException_initWithNSString_(@"unknown key type.");
  @try {
    [self initialize__WithJavaSecuritySpecAlgorithmParameterSpec:edParams withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw create_JavaSecurityInvalidParameterException_initWithNSString_(@"key type not configurable.");
  }
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if ([params isKindOfClass:[NetI2pCryptoEddsaSpecEdDSAParameterSpec class]]) {
    JreStrongAssign(&edParams_, (NetI2pCryptoEddsaSpecEdDSAParameterSpec *) cast_chk(params, [NetI2pCryptoEddsaSpecEdDSAParameterSpec class]));
  }
  else if ([params isKindOfClass:[NetI2pCryptoEddsaSpecEdDSAGenParameterSpec class]]) {
    JreStrongAssign(&edParams_, [self createNamedCurveSpecWithNSString:[((NetI2pCryptoEddsaSpecEdDSAGenParameterSpec *) nil_chk(((NetI2pCryptoEddsaSpecEdDSAGenParameterSpec *) cast_chk(params, [NetI2pCryptoEddsaSpecEdDSAGenParameterSpec class])))) getName]]);
  }
  else @throw create_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a EdDSAParameterSpec");
  JreStrongAssign(&self->random_, random);
  initialized_ = true;
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialized_) [self initialize__WithInt:NetI2pCryptoEddsaKeyPairGenerator_DEFAULT_KEYSIZE withJavaSecuritySecureRandom:NetI2pUtilRandomSource_getInstance()];
  IOSByteArray *seed = [IOSByteArray arrayWithLength:[((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk(edParams_)) getCurve])) getField])) getb] / 8];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:seed];
  NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *privKey = create_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(seed, edParams_);
  NetI2pCryptoEddsaSpecEdDSAPublicKeySpec *pubKey = create_NetI2pCryptoEddsaSpecEdDSAPublicKeySpec_initWithNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_([privKey getA], edParams_);
  return create_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(create_NetI2pCryptoEddsaEdDSAPublicKey_initWithNetI2pCryptoEddsaSpecEdDSAPublicKeySpec_(pubKey), create_NetI2pCryptoEddsaEdDSAPrivateKey_initWithNetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_(privKey));
}

- (NetI2pCryptoEddsaSpecEdDSANamedCurveSpec *)createNamedCurveSpecWithNSString:(NSString *)curveName {
  NetI2pCryptoEddsaSpecEdDSANamedCurveSpec *spec = NetI2pCryptoEddsaSpecEdDSANamedCurveTable_getByNameWithNSString_(curveName);
  if (spec == nil) {
    @throw create_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"unknown curve name: ", curveName));
  }
  return spec;
}

- (void)dealloc {
  RELEASE_(edParams_);
  RELEASE_(random_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaSpecEdDSANamedCurveSpec;", 0x4, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  methods[4].selector = @selector(createNamedCurveSpecWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_KEYSIZE", "I", .constantValue.asInt = NetI2pCryptoEddsaKeyPairGenerator_DEFAULT_KEYSIZE, 0x1a, -1, -1, -1, -1 },
    { "edParams_", "LNetI2pCryptoEddsaSpecEdDSAParameterSpec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "edParameters", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x1a, -1, 6, 7, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "createNamedCurveSpec", "LNSString;", &NetI2pCryptoEddsaKeyPairGenerator_edParameters, "Ljava/util/Hashtable<Ljava/lang/Integer;Ljava/security/spec/AlgorithmParameterSpec;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaKeyPairGenerator = { "KeyPairGenerator", "net.i2p.crypto.eddsa", ptrTable, methods, fields, 7, 0x11, 5, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaKeyPairGenerator;
}

+ (void)initialize {
  if (self == [NetI2pCryptoEddsaKeyPairGenerator class]) {
    {
      JreStrongAssignAndConsume(&NetI2pCryptoEddsaKeyPairGenerator_edParameters, new_JavaUtilHashtable_init());
      [NetI2pCryptoEddsaKeyPairGenerator_edParameters putWithId:JavaLangInteger_valueOfWithInt_(NetI2pCryptoEddsaKeyPairGenerator_DEFAULT_KEYSIZE) withId:create_NetI2pCryptoEddsaSpecEdDSAGenParameterSpec_initWithNSString_(NetI2pCryptoEddsaSpecEdDSANamedCurveTable_ED_25519)];
    }
    J2OBJC_SET_INITIALIZED(NetI2pCryptoEddsaKeyPairGenerator)
  }
}

@end

void NetI2pCryptoEddsaKeyPairGenerator_init(NetI2pCryptoEddsaKeyPairGenerator *self) {
  JavaSecurityKeyPairGeneratorSpi_init(self);
}

NetI2pCryptoEddsaKeyPairGenerator *new_NetI2pCryptoEddsaKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaKeyPairGenerator, init)
}

NetI2pCryptoEddsaKeyPairGenerator *create_NetI2pCryptoEddsaKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaKeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaKeyPairGenerator)
