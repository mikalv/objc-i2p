//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/spec/EdDSAPrivateKeySpec.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/Arrays.h"
#include "net/i2p/crypto/eddsa/math/Curve.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/GroupElement.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAPrivateKeySpec.h"

@interface NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec () {
 @public
  IOSByteArray *seed_;
  IOSByteArray *h_;
  IOSByteArray *a_;
  NetI2pCryptoEddsaMathGroupElement *A_;
  NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, h_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, a_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, A_, NetI2pCryptoEddsaMathGroupElement *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, spec_, NetI2pCryptoEddsaSpecEdDSAParameterSpec *)

@implementation NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec

- (instancetype)initWithByteArray:(IOSByteArray *)seed
withNetI2pCryptoEddsaSpecEdDSAParameterSpec:(NetI2pCryptoEddsaSpecEdDSAParameterSpec *)spec {
  NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(self, seed, spec);
  return self;
}

- (instancetype)initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec:(NetI2pCryptoEddsaSpecEdDSAParameterSpec *)spec
                                                  withByteArray:(IOSByteArray *)h {
  NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_(self, spec, h);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)seed
                    withByteArray:(IOSByteArray *)h
                    withByteArray:(IOSByteArray *)a
withNetI2pCryptoEddsaMathGroupElement:(NetI2pCryptoEddsaMathGroupElement *)A
withNetI2pCryptoEddsaSpecEdDSAParameterSpec:(NetI2pCryptoEddsaSpecEdDSAParameterSpec *)spec {
  NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(self, seed, h, a, A, spec);
  return self;
}

- (IOSByteArray *)getSeed {
  return seed_;
}

- (IOSByteArray *)getH {
  return h_;
}

- (IOSByteArray *)geta {
  return a_;
}

- (NetI2pCryptoEddsaMathGroupElement *)getA {
  return A_;
}

- (NetI2pCryptoEddsaSpecEdDSAParameterSpec *)getParams {
  return spec_;
}

- (void)dealloc {
  RELEASE_(seed_);
  RELEASE_(h_);
  RELEASE_(a_);
  RELEASE_(A_);
  RELEASE_(spec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathGroupElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaSpecEdDSAParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withNetI2pCryptoEddsaSpecEdDSAParameterSpec:);
  methods[1].selector = @selector(initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec:withByteArray:);
  methods[2].selector = @selector(initWithByteArray:withByteArray:withByteArray:withNetI2pCryptoEddsaMathGroupElement:withNetI2pCryptoEddsaSpecEdDSAParameterSpec:);
  methods[3].selector = @selector(getSeed);
  methods[4].selector = @selector(getH);
  methods[5].selector = @selector(geta);
  methods[6].selector = @selector(getA);
  methods[7].selector = @selector(getParams);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "a_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "A_", "LNetI2pCryptoEddsaMathGroupElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "spec_", "LNetI2pCryptoEddsaSpecEdDSAParameterSpec;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLNetI2pCryptoEddsaSpecEdDSAParameterSpec;", "LNetI2pCryptoEddsaSpecEdDSAParameterSpec;[B", "[B[B[BLNetI2pCryptoEddsaMathGroupElement;LNetI2pCryptoEddsaSpecEdDSAParameterSpec;" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec = { "EdDSAPrivateKeySpec", "net.i2p.crypto.eddsa.spec", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec;
}

@end

void NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *self, IOSByteArray *seed, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(seed))->size_ != [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk(spec)) getCurve])) getField])) getb] / 8) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"seed length is wrong");
  JreStrongAssign(&self->spec_, spec);
  JreStrongAssign(&self->seed_, seed);
  @try {
    JavaSecurityMessageDigest *hash_ = JavaSecurityMessageDigest_getInstanceWithNSString_([spec getHashAlgorithm]);
    jint b = [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([spec getCurve])) getField])) getb];
    JreStrongAssign(&self->h_, [((JavaSecurityMessageDigest *) nil_chk(hash_)) digestWithByteArray:seed]);
    *IOSByteArray_GetRef(nil_chk(self->h_), 0) &= 248;
    *IOSByteArray_GetRef(self->h_, (b / 8) - 1) &= 63;
    *IOSByteArray_GetRef(self->h_, (b / 8) - 1) |= 64;
    JreStrongAssign(&self->a_, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(self->h_, 0, b / 8));
    JreStrongAssign(&self->A_, [((NetI2pCryptoEddsaMathGroupElement *) nil_chk([spec getB])) scalarMultiplyWithByteArray:self->a_]);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unsupported hash algorithm");
  }
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *new_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(IOSByteArray *seed, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_, seed, spec)
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *create_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(IOSByteArray *seed, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_, seed, spec)
}

void NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *self, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec, IOSByteArray *h) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(h))->size_ != [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk(spec)) getCurve])) getField])) getb] / 4) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"hash length is wrong");
  JreStrongAssign(&self->seed_, nil);
  JreStrongAssign(&self->h_, h);
  JreStrongAssign(&self->spec_, spec);
  jint b = [((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk([spec getCurve])) getField])) getb];
  *IOSByteArray_GetRef(h, 0) &= 248;
  *IOSByteArray_GetRef(h, (b / 8) - 1) &= 63;
  *IOSByteArray_GetRef(h, (b / 8) - 1) |= 64;
  JreStrongAssign(&self->a_, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(h, 0, b / 8));
  JreStrongAssign(&self->A_, [((NetI2pCryptoEddsaMathGroupElement *) nil_chk([spec getB])) scalarMultiplyWithByteArray:self->a_]);
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *new_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_(NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec, IOSByteArray *h) {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_, spec, h)
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *create_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_(NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec, IOSByteArray *h) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithNetI2pCryptoEddsaSpecEdDSAParameterSpec_withByteArray_, spec, h)
}

void NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *self, IOSByteArray *seed, IOSByteArray *h, IOSByteArray *a, NetI2pCryptoEddsaMathGroupElement *A, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  NSObject_init(self);
  JreStrongAssign(&self->seed_, seed);
  JreStrongAssign(&self->h_, h);
  JreStrongAssign(&self->a_, a);
  JreStrongAssign(&self->A_, A);
  JreStrongAssign(&self->spec_, spec);
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *new_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(IOSByteArray *seed, IOSByteArray *h, IOSByteArray *a, NetI2pCryptoEddsaMathGroupElement *A, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_, seed, h, a, A, spec)
}

NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec *create_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_(IOSByteArray *seed, IOSByteArray *h, IOSByteArray *a, NetI2pCryptoEddsaMathGroupElement *A, NetI2pCryptoEddsaSpecEdDSAParameterSpec *spec) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec, initWithByteArray_withByteArray_withByteArray_withNetI2pCryptoEddsaMathGroupElement_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_, seed, h, a, A, spec)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec)
