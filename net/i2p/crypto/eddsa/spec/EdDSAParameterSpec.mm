//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "net/i2p/crypto/eddsa/math/Curve.h"
#include "net/i2p/crypto/eddsa/math/Field.h"
#include "net/i2p/crypto/eddsa/math/GroupElement.h"
#include "net/i2p/crypto/eddsa/math/ScalarOps.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.h"

@interface NetI2pCryptoEddsaSpecEdDSAParameterSpec () {
 @public
  NetI2pCryptoEddsaMathCurve *curve_;
  NSString *hashAlgo_;
  id<NetI2pCryptoEddsaMathScalarOps> sc_;
  NetI2pCryptoEddsaMathGroupElement *B_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAParameterSpec, curve_, NetI2pCryptoEddsaMathCurve *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAParameterSpec, hashAlgo_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAParameterSpec, sc_, id<NetI2pCryptoEddsaMathScalarOps>)
J2OBJC_FIELD_SETTER(NetI2pCryptoEddsaSpecEdDSAParameterSpec, B_, NetI2pCryptoEddsaMathGroupElement *)

inline jlong NetI2pCryptoEddsaSpecEdDSAParameterSpec_get_serialVersionUID(void);
#define NetI2pCryptoEddsaSpecEdDSAParameterSpec_serialVersionUID 8274987108472012LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoEddsaSpecEdDSAParameterSpec, serialVersionUID, jlong)

@implementation NetI2pCryptoEddsaSpecEdDSAParameterSpec

- (instancetype)initWithNetI2pCryptoEddsaMathCurve:(NetI2pCryptoEddsaMathCurve *)curve
                                      withNSString:(NSString *)hashAlgo
                withNetI2pCryptoEddsaMathScalarOps:(id<NetI2pCryptoEddsaMathScalarOps>)sc
             withNetI2pCryptoEddsaMathGroupElement:(NetI2pCryptoEddsaMathGroupElement *)B {
  NetI2pCryptoEddsaSpecEdDSAParameterSpec_initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_(self, curve, hashAlgo, sc, B);
  return self;
}

- (NetI2pCryptoEddsaMathCurve *)getCurve {
  return curve_;
}

- (NSString *)getHashAlgorithm {
  return hashAlgo_;
}

- (id<NetI2pCryptoEddsaMathScalarOps>)getScalarOps {
  return sc_;
}

- (NetI2pCryptoEddsaMathGroupElement *)getB {
  return B_;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(hashAlgo_)) hash]) ^ ((jint) [((NetI2pCryptoEddsaMathCurve *) nil_chk(curve_)) hash]) ^ ((jint) [((NetI2pCryptoEddsaMathGroupElement *) nil_chk(B_)) hash]);
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (!([o isKindOfClass:[NetI2pCryptoEddsaSpecEdDSAParameterSpec class]])) return false;
  NetI2pCryptoEddsaSpecEdDSAParameterSpec *s = (NetI2pCryptoEddsaSpecEdDSAParameterSpec *) cast_chk(o, [NetI2pCryptoEddsaSpecEdDSAParameterSpec class]);
  return [((NSString *) nil_chk(hashAlgo_)) isEqual:[((NetI2pCryptoEddsaSpecEdDSAParameterSpec *) nil_chk(s)) getHashAlgorithm]] && [((NetI2pCryptoEddsaMathCurve *) nil_chk(curve_)) isEqual:[s getCurve]] && [((NetI2pCryptoEddsaMathGroupElement *) nil_chk(B_)) isEqual:[s getB]];
}

- (void)dealloc {
  RELEASE_(curve_);
  RELEASE_(hashAlgo_);
  RELEASE_(sc_);
  RELEASE_(B_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathScalarOps;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaMathGroupElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pCryptoEddsaMathCurve:withNSString:withNetI2pCryptoEddsaMathScalarOps:withNetI2pCryptoEddsaMathGroupElement:);
  methods[1].selector = @selector(getCurve);
  methods[2].selector = @selector(getHashAlgorithm);
  methods[3].selector = @selector(getScalarOps);
  methods[4].selector = @selector(getB);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pCryptoEddsaSpecEdDSAParameterSpec_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "curve_", "LNetI2pCryptoEddsaMathCurve;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hashAlgo_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sc_", "LNetI2pCryptoEddsaMathScalarOps;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "B_", "LNetI2pCryptoEddsaMathGroupElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pCryptoEddsaMathCurve;LNSString;LNetI2pCryptoEddsaMathScalarOps;LNetI2pCryptoEddsaMathGroupElement;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _NetI2pCryptoEddsaSpecEdDSAParameterSpec = { "EdDSAParameterSpec", "net.i2p.crypto.eddsa.spec", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoEddsaSpecEdDSAParameterSpec;
}

@end

void NetI2pCryptoEddsaSpecEdDSAParameterSpec_initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_(NetI2pCryptoEddsaSpecEdDSAParameterSpec *self, NetI2pCryptoEddsaMathCurve *curve, NSString *hashAlgo, id<NetI2pCryptoEddsaMathScalarOps> sc, NetI2pCryptoEddsaMathGroupElement *B) {
  NSObject_init(self);
  @try {
    JavaSecurityMessageDigest *hash_ = JavaSecurityMessageDigest_getInstanceWithNSString_(hashAlgo);
    if ([((NetI2pCryptoEddsaMathField *) nil_chk([((NetI2pCryptoEddsaMathCurve *) nil_chk(curve)) getField])) getb] / 4 != [((JavaSecurityMessageDigest *) nil_chk(hash_)) getDigestLength]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Hash output is not 2b-bit");
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unsupported hash algorithm");
  }
  JreStrongAssign(&self->curve_, curve);
  JreStrongAssign(&self->hashAlgo_, hashAlgo);
  JreStrongAssign(&self->sc_, sc);
  JreStrongAssign(&self->B_, B);
}

NetI2pCryptoEddsaSpecEdDSAParameterSpec *new_NetI2pCryptoEddsaSpecEdDSAParameterSpec_initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_(NetI2pCryptoEddsaMathCurve *curve, NSString *hashAlgo, id<NetI2pCryptoEddsaMathScalarOps> sc, NetI2pCryptoEddsaMathGroupElement *B) {
  J2OBJC_NEW_IMPL(NetI2pCryptoEddsaSpecEdDSAParameterSpec, initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_, curve, hashAlgo, sc, B)
}

NetI2pCryptoEddsaSpecEdDSAParameterSpec *create_NetI2pCryptoEddsaSpecEdDSAParameterSpec_initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_(NetI2pCryptoEddsaMathCurve *curve, NSString *hashAlgo, id<NetI2pCryptoEddsaMathScalarOps> sc, NetI2pCryptoEddsaMathGroupElement *B) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoEddsaSpecEdDSAParameterSpec, initWithNetI2pCryptoEddsaMathCurve_withNSString_withNetI2pCryptoEddsaMathScalarOps_withNetI2pCryptoEddsaMathGroupElement_, curve, hashAlgo, sc, B)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoEddsaSpecEdDSAParameterSpec)
