//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/KeyStoreUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoKeyStoreUtil")
#ifdef RESTRICT_NetI2pCryptoKeyStoreUtil
#define INCLUDE_ALL_NetI2pCryptoKeyStoreUtil 0
#else
#define INCLUDE_ALL_NetI2pCryptoKeyStoreUtil 1
#endif
#undef RESTRICT_NetI2pCryptoKeyStoreUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoKeyStoreUtil_) && (INCLUDE_ALL_NetI2pCryptoKeyStoreUtil || defined(INCLUDE_NetI2pCryptoKeyStoreUtil))
#define NetI2pCryptoKeyStoreUtil_

@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecurityCertCertStore;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509Certificate;
@class JavaSecurityKeyStore;
@class NetI2pCryptoSigType;
@protocol JavaSecurityPrivateKey;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface NetI2pCryptoKeyStoreUtil : NSObject
@property (readonly, copy, class) NSString *DEFAULT_KEYSTORE_PASSWORD NS_SWIFT_NAME(DEFAULT_KEYSTORE_PASSWORD);

+ (NSString *)DEFAULT_KEYSTORE_PASSWORD;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jboolean)addCertWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)alias
         withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks;

+ (jboolean)addCertWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)alias
         withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks
    withJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)cs;

+ (jint)addCertsWithJavaIoFile:(JavaIoFile *)dir
      withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks;

+ (jint)countCertsWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks;

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)keyPW;

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                             withInt:(jint)validDays
                        withNSString:(NSString *)keyAlg
                             withInt:(jint)keySize
                        withNSString:(NSString *)keyPW;

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)keyPW;

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                        withNSString:(NSString *)ou
                             withInt:(jint)validDays
                        withNSString:(NSString *)keyAlg
                             withInt:(jint)keySize
                        withNSString:(NSString *)keyPW;

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                   withJavaUtilSet:(id<JavaUtilSet>)altNames
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                      withNSString:(NSString *)keyPW;

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                   withJavaUtilSet:(id<JavaUtilSet>)altNames
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                                      withNSString:(NSString *)keyAlg
                                           withInt:(jint)keySize
                                      withNSString:(NSString *)keyPW;

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                      withNSString:(NSString *)keyPW;

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                                      withNSString:(NSString *)keyAlg
                                           withInt:(jint)keySize
                                      withNSString:(NSString *)keyPW;

+ (JavaSecurityKeyStore *)createKeyStoreWithJavaIoFile:(JavaIoFile *)ksFile
                                          withNSString:(NSString *)password;

+ (jboolean)exportCertWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                      withJavaIoFile:(JavaIoFile *)certFile;

+ (void)exportPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                          withNSString:(NSString *)ksPW
                          withNSString:(NSString *)alias
                          withNSString:(NSString *)keyPW
                withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (JavaSecurityCertCertificate *)getCertWithJavaIoFile:(JavaIoFile *)ks
                                          withNSString:(NSString *)ksPW
                                          withNSString:(NSString *)alias;

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                                             withNSString:(NSString *)ksPW
                                             withNSString:(NSString *)alias
                                             withNSString:(NSString *)keyPW;

+ (NSString *)importPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                                withNSString:(NSString *)ksPW
                                withNSString:(NSString *)alias
                                withNSString:(NSString *)keyPW
                       withJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (JavaSecurityKeyStore *)loadSystemKeyStore;

+ (jboolean)logCertExpirationWithJavaIoFile:(JavaIoFile *)f
                               withNSString:(NSString *)ksPW
                                   withLong:(jlong)expiresWithin;

+ (jboolean)logCertExpirationWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks
                                         withNSString:(NSString *)location
                                             withLong:(jlong)expiresWithin;

+ (NSString *)randomString;

+ (JavaSecurityCertX509Certificate *)renewPrivateKeyCertificateWithJavaIoFile:(JavaIoFile *)ks
                                                                 withNSString:(NSString *)ksPW
                                                                 withNSString:(NSString *)alias
                                                                 withNSString:(NSString *)keyPW
                                                                      withInt:(jint)validDays;

+ (void)storePrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                         withNSString:(NSString *)ksPW
                         withNSString:(NSString *)alias
                         withNSString:(NSString *)keyPW
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                     withJavaUtilList:(id<JavaUtilList>)certs;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoKeyStoreUtil)

inline NSString *NetI2pCryptoKeyStoreUtil_get_DEFAULT_KEYSTORE_PASSWORD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoKeyStoreUtil, DEFAULT_KEYSTORE_PASSWORD, NSString *)

FOUNDATION_EXPORT void NetI2pCryptoKeyStoreUtil_init(NetI2pCryptoKeyStoreUtil *self);

FOUNDATION_EXPORT NetI2pCryptoKeyStoreUtil *new_NetI2pCryptoKeyStoreUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoKeyStoreUtil *create_NetI2pCryptoKeyStoreUtil_init(void);

FOUNDATION_EXPORT JavaSecurityKeyStore *NetI2pCryptoKeyStoreUtil_createKeyStoreWithJavaIoFile_withNSString_(JavaIoFile *ksFile, NSString *password);

FOUNDATION_EXPORT JavaSecurityKeyStore *NetI2pCryptoKeyStoreUtil_loadSystemKeyStore(void);

FOUNDATION_EXPORT jint NetI2pCryptoKeyStoreUtil_countCertsWithJavaSecurityKeyStore_(JavaSecurityKeyStore *ks);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaIoFile_withNSString_withLong_(JavaIoFile *f, NSString *ksPW, jlong expiresWithin);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaSecurityKeyStore_withNSString_withLong_(JavaSecurityKeyStore *ks, NSString *location, jlong expiresWithin);

FOUNDATION_EXPORT jint NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(JavaIoFile *dir, JavaSecurityKeyStore *ks);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_(JavaIoFile *file, NSString *alias, JavaSecurityKeyStore *ks);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_withJavaSecurityCertCertStore_(JavaIoFile *file, NSString *alias, JavaSecurityKeyStore *ks, JavaSecurityCertCertStore *cs);

FOUNDATION_EXPORT NSString *NetI2pCryptoKeyStoreUtil_randomString(void);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_(JavaIoFile *ks, NSString *alias, NSString *cname, NSString *ou, NSString *keyPW);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withJavaUtilSet_withNSString_withNSString_(JavaIoFile *ks, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *keyPW);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NetI2pCryptoSigType *type, NSString *keyPW);

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NetI2pCryptoSigType *type, NSString *keyPW);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> NetI2pCryptoKeyStoreUtil_getPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW);

FOUNDATION_EXPORT void NetI2pCryptoKeyStoreUtil_exportPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoOutputStream_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaSecurityCertX509Certificate *NetI2pCryptoKeyStoreUtil_renewPrivateKeyCertificateWithJavaIoFile_withNSString_withNSString_withNSString_withInt_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, jint validDays);

FOUNDATION_EXPORT NSString *NetI2pCryptoKeyStoreUtil_importPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoInputStream_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pCryptoKeyStoreUtil_storePrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaUtilList_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, id<JavaSecurityPrivateKey> pk, id<JavaUtilList> certs);

FOUNDATION_EXPORT JavaSecurityCertCertificate *NetI2pCryptoKeyStoreUtil_getCertWithJavaIoFile_withNSString_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias);

FOUNDATION_EXPORT jboolean NetI2pCryptoKeyStoreUtil_exportCertWithJavaIoFile_withNSString_withNSString_withJavaIoFile_(JavaIoFile *ks, NSString *ksPW, NSString *alias, JavaIoFile *certFile);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoKeyStoreUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoKeyStoreUtil")
