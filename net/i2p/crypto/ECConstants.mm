//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/ECConstants.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/math/BigInteger.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/Provider.h"
#include "java/security/Security.h"
#include "java/security/spec/ECField.h"
#include "java/security/spec/ECFieldFp.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "net/i2p/crypto/ECConstants.h"
#include "net/i2p/util/NativeBigInteger.h"

@class NetI2pCryptoECConstants_ECParms;

@interface NetI2pCryptoECConstants ()

+ (void)logWithNSString:(NSString *)s;

+ (void)logWithNSString:(NSString *)s
  withJavaLangThrowable:(JavaLangThrowable *)t;

+ (JavaSecuritySpecECParameterSpec *)genSpecWithNSString:(NSString *)name;

+ (JavaSecuritySpecECParameterSpec *)genSpecWithNSString:(NSString *)name1
                                            withNSString:(NSString *)name2
                     withNetI2pCryptoECConstants_ECParms:(NetI2pCryptoECConstants_ECParms *)parms;

@end

inline jboolean NetI2pCryptoECConstants_get_DEBUG(void);
#define NetI2pCryptoECConstants_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoECConstants, DEBUG, jboolean)

inline jboolean NetI2pCryptoECConstants_get_BC_AVAILABLE(void);
static jboolean NetI2pCryptoECConstants_BC_AVAILABLE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pCryptoECConstants, BC_AVAILABLE, jboolean)

inline NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_get_PARM_P256(void);
static NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_PARM_P256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, PARM_P256, NetI2pCryptoECConstants_ECParms *)

inline NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_get_PARM_P384(void);
static NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_PARM_P384;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, PARM_P384, NetI2pCryptoECConstants_ECParms *)

inline NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_get_PARM_P521(void);
static NetI2pCryptoECConstants_ECParms *NetI2pCryptoECConstants_PARM_P521;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants, PARM_P521, NetI2pCryptoECConstants_ECParms *)

__attribute__((unused)) static void NetI2pCryptoECConstants_logWithNSString_(NSString *s);

__attribute__((unused)) static void NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t);

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_genSpecWithNSString_(NSString *name);

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(NSString *name1, NSString *name2, NetI2pCryptoECConstants_ECParms *parms);

@interface NetI2pCryptoECConstants_ECParms : NSObject {
 @public
  NSString *ps_;
  NSString *ns_;
  NSString *ss_;
  NSString *bs_;
  NSString *gxs_;
  NSString *gys_;
}

- (instancetype)initWithNSString:(NSString *)pss
                    withNSString:(NSString *)nss
                    withNSString:(NSString *)sss
                    withNSString:(NSString *)bss
                    withNSString:(NSString *)gxss
                    withNSString:(NSString *)gyss;

- (JavaSecuritySpecECParameterSpec *)genSpec;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoECConstants_ECParms)

J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, ps_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, ns_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, ss_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, bs_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, gxs_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pCryptoECConstants_ECParms, gys_, NSString *)

inline JavaMathBigInteger *NetI2pCryptoECConstants_ECParms_get_A(void);
static JavaMathBigInteger *NetI2pCryptoECConstants_ECParms_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoECConstants_ECParms, A, JavaMathBigInteger *)

inline jint NetI2pCryptoECConstants_ECParms_get_H(void);
#define NetI2pCryptoECConstants_ECParms_H 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoECConstants_ECParms, H, jint)

__attribute__((unused)) static void NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NetI2pCryptoECConstants_ECParms *self, NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss);

__attribute__((unused)) static NetI2pCryptoECConstants_ECParms *new_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pCryptoECConstants_ECParms *create_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoECConstants_ECParms)

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoECConstants)

JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P256_SPEC;
JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P384_SPEC;
JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_P521_SPEC;

@implementation NetI2pCryptoECConstants

+ (JavaSecuritySpecECParameterSpec *)P256_SPEC {
  return NetI2pCryptoECConstants_P256_SPEC;
}

+ (JavaSecuritySpecECParameterSpec *)P384_SPEC {
  return NetI2pCryptoECConstants_P384_SPEC;
}

+ (JavaSecuritySpecECParameterSpec *)P521_SPEC {
  return NetI2pCryptoECConstants_P521_SPEC;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoECConstants_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)logWithNSString:(NSString *)s {
  NetI2pCryptoECConstants_logWithNSString_(s);
}

+ (void)logWithNSString:(NSString *)s
  withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(s, t);
}

+ (jboolean)isBCAvailable {
  return NetI2pCryptoECConstants_isBCAvailable();
}

+ (JavaSecuritySpecECParameterSpec *)genSpecWithNSString:(NSString *)name {
  return NetI2pCryptoECConstants_genSpecWithNSString_(name);
}

+ (JavaSecuritySpecECParameterSpec *)genSpecWithNSString:(NSString *)name1
                                            withNSString:(NSString *)name2
                     withNetI2pCryptoECConstants_ECParms:(NetI2pCryptoECConstants_ECParms *)parms {
  return NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(name1, name2, parms);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0xa, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(logWithNSString:);
  methods[2].selector = @selector(logWithNSString:withJavaLangThrowable:);
  methods[3].selector = @selector(isBCAvailable);
  methods[4].selector = @selector(genSpecWithNSString:);
  methods[5].selector = @selector(genSpecWithNSString:withNSString:withNetI2pCryptoECConstants_ECParms:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = NetI2pCryptoECConstants_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "BC_AVAILABLE", "Z", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PARM_P256", "LNetI2pCryptoECConstants_ECParms;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "PARM_P384", "LNetI2pCryptoECConstants_ECParms;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "PARM_P521", "LNetI2pCryptoECConstants_ECParms;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "P256_SPEC", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "P384_SPEC", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "P521_SPEC", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "log", "LNSString;", "LNSString;LJavaLangThrowable;", "genSpec", "LNSString;LNSString;LNetI2pCryptoECConstants_ECParms;", &NetI2pCryptoECConstants_BC_AVAILABLE, &NetI2pCryptoECConstants_PARM_P256, &NetI2pCryptoECConstants_PARM_P384, &NetI2pCryptoECConstants_PARM_P521, &NetI2pCryptoECConstants_P256_SPEC, &NetI2pCryptoECConstants_P384_SPEC, &NetI2pCryptoECConstants_P521_SPEC, "LNetI2pCryptoECConstants_ECParms;" };
  static const J2ObjcClassInfo _NetI2pCryptoECConstants = { "ECConstants", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x10, 6, 8, -1, 12, -1, -1, -1 };
  return &_NetI2pCryptoECConstants;
}

+ (void)initialize {
  if (self == [NetI2pCryptoECConstants class]) {
    {
      jboolean loaded;
      if (JavaSecuritySecurity_getProviderWithNSString_(@"BC") == nil) {
        @try {
          IOSClass *cls = IOSClass_forName_(@"org.bouncycastle.jce.provider.BouncyCastleProvider");
          JavaLangReflectConstructor *con = [((IOSClass *) nil_chk(cls)) getConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
          JavaSecurityProvider *bc = (JavaSecurityProvider *) cast_chk([((JavaLangReflectConstructor *) nil_chk(con)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaSecurityProvider class]);
          JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(bc);
          NetI2pCryptoECConstants_logWithNSString_(@"Added BC provider");
          loaded = true;
        }
        @catch (JavaLangException *e) {
          NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(@"Unable to add BC provider", e);
          loaded = false;
        }
      }
      else {
        NetI2pCryptoECConstants_logWithNSString_(@"BC provider already loaded");
        loaded = true;
      }
      NetI2pCryptoECConstants_BC_AVAILABLE = loaded;
    }
    JreStrongAssignAndConsume(&NetI2pCryptoECConstants_PARM_P256, new_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(@"115792089210356248762697446949407573530086143415290314195533631308867097853951", @"115792089210356248762697446949407573529996955224135760342422259061068512044369", @"c49d3608 86e70493 6a6678e1 139d26b7 819f7e90", @"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f63bce3c3e 27d2604b", @"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0f4a13945 d898c296", @"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ececbb64068 37bf51f5"));
    JreStrongAssignAndConsume(&NetI2pCryptoECConstants_PARM_P384, new_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(@"39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319", @"39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643", @"a335926a a319a27a 1d00896a 6773a482 7acdac73", @"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe8141120314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", @"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b9859f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", @"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147ce9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"));
    JreStrongAssignAndConsume(&NetI2pCryptoECConstants_PARM_P521, new_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(@"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151", @"6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449", @"d09e8800 291cb853 96cc6717 393284aa a0da64ba", @"051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", @"c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", @"118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b9013fad0761 353c7086 a272c240 88be9476 9fd16650"));
    JreStrongAssign(&NetI2pCryptoECConstants_P256_SPEC, NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(@"secp256r1", @"P-256", NetI2pCryptoECConstants_PARM_P256));
    JreStrongAssign(&NetI2pCryptoECConstants_P384_SPEC, NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(@"secp384r1", @"P-384", NetI2pCryptoECConstants_PARM_P384));
    JreStrongAssign(&NetI2pCryptoECConstants_P521_SPEC, NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(@"secp521r1", @"P-521", NetI2pCryptoECConstants_PARM_P521));
    J2OBJC_SET_INITIALIZED(NetI2pCryptoECConstants)
  }
}

@end

void NetI2pCryptoECConstants_init(NetI2pCryptoECConstants *self) {
  NSObject_init(self);
}

NetI2pCryptoECConstants *new_NetI2pCryptoECConstants_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoECConstants, init)
}

NetI2pCryptoECConstants *create_NetI2pCryptoECConstants_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoECConstants, init)
}

void NetI2pCryptoECConstants_logWithNSString_(NSString *s) {
  NetI2pCryptoECConstants_initialize();
  NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(s, nil);
}

void NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t) {
  NetI2pCryptoECConstants_initialize();
}

jboolean NetI2pCryptoECConstants_isBCAvailable() {
  NetI2pCryptoECConstants_initialize();
  return NetI2pCryptoECConstants_BC_AVAILABLE;
}

JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_genSpecWithNSString_(NSString *name) {
  NetI2pCryptoECConstants_initialize();
  @try {
    JavaSecurityAlgorithmParameters *ap;
    @try {
      ap = JavaSecurityAlgorithmParameters_getInstanceWithNSString_(@"EC");
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      if (NetI2pCryptoECConstants_BC_AVAILABLE) {
        NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Named curve ", name, @" is not available, trying BC"), e);
        ap = JavaSecurityAlgorithmParameters_getInstanceWithNSString_withNSString_(@"EC", @"BC");
        NetI2pCryptoECConstants_logWithNSString_(JreStrcat("$$", @"Fallback to BC worked for named curve ", name));
      }
      else {
        @throw e;
      }
    }
    JavaSecuritySpecECGenParameterSpec *ecgps = create_JavaSecuritySpecECGenParameterSpec_initWithNSString_(name);
    [((JavaSecurityAlgorithmParameters *) nil_chk(ap)) init__WithJavaSecuritySpecAlgorithmParameterSpec:ecgps];
    JavaSecuritySpecECParameterSpec *rv = ((JavaSecuritySpecECParameterSpec *) [ap getParameterSpecWithIOSClass:JavaSecuritySpecECParameterSpec_class_()]);
    NetI2pCryptoECConstants_logWithNSString_(JreStrcat("$$$", @"Named curve ", name, @" loaded"));
    return rv;
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    NetI2pCryptoECConstants_logWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Named curve ", name, @" is not available"), e);
    return nil;
  }
}

JavaSecuritySpecECParameterSpec *NetI2pCryptoECConstants_genSpecWithNSString_withNSString_withNetI2pCryptoECConstants_ECParms_(NSString *name1, NSString *name2, NetI2pCryptoECConstants_ECParms *parms) {
  NetI2pCryptoECConstants_initialize();
  JavaSecuritySpecECParameterSpec *rv = NetI2pCryptoECConstants_genSpecWithNSString_(name1);
  if (rv == nil && name2 != nil) {
    rv = NetI2pCryptoECConstants_genSpecWithNSString_(name2);
    if (rv == nil && parms != nil) {
      rv = [parms genSpec];
      if (rv != nil) NetI2pCryptoECConstants_logWithNSString_(JreStrcat("$$$", @"Curve ", name2, @" created"));
    }
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoECConstants)

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoECConstants_ECParms)

@implementation NetI2pCryptoECConstants_ECParms

- (instancetype)initWithNSString:(NSString *)pss
                    withNSString:(NSString *)nss
                    withNSString:(NSString *)sss
                    withNSString:(NSString *)bss
                    withNSString:(NSString *)gxss
                    withNSString:(NSString *)gyss {
  NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(self, pss, nss, sss, bss, gxss, gyss);
  return self;
}

- (JavaSecuritySpecECParameterSpec *)genSpec {
  JavaMathBigInteger *pb = create_NetI2pUtilNativeBigInteger_initWithNSString_(ps_);
  JavaMathBigInteger *nb = create_NetI2pUtilNativeBigInteger_initWithNSString_(ns_);
  JavaMathBigInteger *sb = create_NetI2pUtilNativeBigInteger_initWithNSString_withInt_([((NSString *) nil_chk(ss_)) java_replace:@" " withSequence:@""], 16);
  JavaMathBigInteger *bb = create_NetI2pUtilNativeBigInteger_initWithNSString_withInt_([((NSString *) nil_chk(bs_)) java_replace:@" " withSequence:@""], 16);
  JavaMathBigInteger *gxb = create_NetI2pUtilNativeBigInteger_initWithNSString_withInt_([((NSString *) nil_chk(gxs_)) java_replace:@" " withSequence:@""], 16);
  JavaMathBigInteger *gyb = create_NetI2pUtilNativeBigInteger_initWithNSString_withInt_([((NSString *) nil_chk(gys_)) java_replace:@" " withSequence:@""], 16);
  JavaMathBigInteger *ab = create_NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(NetI2pCryptoECConstants_ECParms_A)) modWithJavaMathBigInteger:pb]);
  id<JavaSecuritySpecECField> field = create_JavaSecuritySpecECFieldFp_initWithJavaMathBigInteger_(pb);
  JavaSecuritySpecEllipticCurve *curve = create_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(field, ab, bb, [sb toByteArray]);
  JavaSecuritySpecECPoint *g = create_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_(gxb, gyb);
  return create_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(curve, g, nb, NetI2pCryptoECConstants_ECParms_H);
}

- (void)dealloc {
  RELEASE_(ps_);
  RELEASE_(ns_);
  RELEASE_(ss_);
  RELEASE_(bs_);
  RELEASE_(gxs_);
  RELEASE_(gys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(genSpec);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ps_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "ns_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "ss_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "bs_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "gxs_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "gys_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "A", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "H", "I", .constantValue.asInt = NetI2pCryptoECConstants_ECParms_H, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", &NetI2pCryptoECConstants_ECParms_A, "LNetI2pCryptoECConstants;" };
  static const J2ObjcClassInfo _NetI2pCryptoECConstants_ECParms = { "ECParms", "net.i2p.crypto", ptrTable, methods, fields, 7, 0xa, 2, 8, 2, -1, -1, -1, -1 };
  return &_NetI2pCryptoECConstants_ECParms;
}

+ (void)initialize {
  if (self == [NetI2pCryptoECConstants_ECParms class]) {
    JreStrongAssignAndConsume(&NetI2pCryptoECConstants_ECParms_A, new_NetI2pUtilNativeBigInteger_initWithNSString_(@"-3"));
    J2OBJC_SET_INITIALIZED(NetI2pCryptoECConstants_ECParms)
  }
}

@end

void NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NetI2pCryptoECConstants_ECParms *self, NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss) {
  NSObject_init(self);
  JreStrongAssign(&self->ps_, pss);
  JreStrongAssign(&self->ns_, nss);
  JreStrongAssign(&self->ss_, sss);
  JreStrongAssign(&self->bs_, bss);
  JreStrongAssign(&self->gxs_, gxss);
  JreStrongAssign(&self->gys_, gyss);
}

NetI2pCryptoECConstants_ECParms *new_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss) {
  J2OBJC_NEW_IMPL(NetI2pCryptoECConstants_ECParms, initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_, pss, nss, sss, bss, gxss, gyss)
}

NetI2pCryptoECConstants_ECParms *create_NetI2pCryptoECConstants_ECParms_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *pss, NSString *nss, NSString *sss, NSString *bss, NSString *gxss, NSString *gyss) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoECConstants_ECParms, initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_, pss, nss, sss, bss, gxss, gyss)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoECConstants_ECParms)
