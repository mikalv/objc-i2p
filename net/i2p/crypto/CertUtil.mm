//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/CertUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/KeyFactory.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/CollectionCertStoreParameters.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/EnumSet.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/SigAlgo.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/FileSuffixFilter.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pCryptoCertUtil ()

+ (void)exportPrivateKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                            withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)writePEMWithByteArray:(IOSByteArray *)buf
                 withNSString:(NSString *)what
       withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (NSString *)getValueWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)p
                                                withNSString:(NSString *)type;

+ (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)logWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withInt:(jint)level
                      withNSString:(NSString *)msg
             withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)loadCRLsWithJavaUtilSet:(id<JavaUtilSet>)crls
                 withJavaIoFile:(JavaIoFile *)dir;

+ (JavaSecurityCertX509CRL *)loadCRLWithJavaIoFile:(JavaIoFile *)file;

@end

inline NSString *NetI2pCryptoCertUtil_get_CERT_DIR(void);
static NSString *NetI2pCryptoCertUtil_CERT_DIR = @"certificates";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCertUtil, CERT_DIR, NSString *)

inline NSString *NetI2pCryptoCertUtil_get_REVOCATION_DIR(void);
static NSString *NetI2pCryptoCertUtil_REVOCATION_DIR = @"revocations";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCertUtil, REVOCATION_DIR, NSString *)

inline jint NetI2pCryptoCertUtil_get_LINE_LENGTH(void);
#define NetI2pCryptoCertUtil_LINE_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCertUtil, LINE_LENGTH, jint)

__attribute__((unused)) static void NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaIoOutputStream_(id<JavaSecurityPrivateKey> pk, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(IOSByteArray *buf, NSString *what, JavaIoOutputStream *outArg);

__attribute__((unused)) static NSString *NetI2pCryptoCertUtil_getValueWithJavaxSecurityAuthX500X500Principal_withNSString_(JavaxSecurityAuthX500X500Principal *p, NSString *type);

__attribute__((unused)) static void NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pCryptoCertUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext *ctx, jint level, NSString *msg, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(id<JavaUtilSet> crls, JavaIoFile *dir);

__attribute__((unused)) static JavaSecurityCertX509CRL *NetI2pCryptoCertUtil_loadCRLWithJavaIoFile_(JavaIoFile *file);

@implementation NetI2pCryptoCertUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoCertUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)saveCertWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                     withJavaIoFile:(JavaIoFile *)file {
  return NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(cert, file);
}

+ (void)exportPrivateKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
              withJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                            withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaIoOutputStream_(pk, certs, outArg);
}

+ (void)exportCertWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                           withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoCertUtil_exportCertWithJavaSecurityCertCertificate_withJavaIoOutputStream_(cert, outArg);
}

+ (void)exportPrivateKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                            withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaIoOutputStream_(pk, outArg);
}

+ (void)writePEMWithByteArray:(IOSByteArray *)buf
                 withNSString:(NSString *)what
       withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(buf, what, outArg);
}

+ (id<JavaUtilSet>)getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return NetI2pCryptoCertUtil_getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate_(cert);
}

+ (NSString *)getSubjectValueWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                    withNSString:(NSString *)type {
  return NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, type);
}

+ (NSString *)getIssuerValueWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withNSString:(NSString *)type {
  return NetI2pCryptoCertUtil_getIssuerValueWithJavaSecurityCertX509Certificate_withNSString_(cert, type);
}

+ (NSString *)getValueWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)p
                                                withNSString:(NSString *)type {
  return NetI2pCryptoCertUtil_getValueWithJavaxSecurityAuthX500X500Principal_withNSString_(p, type);
}

+ (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(msg, t);
}

+ (void)logWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withInt:(jint)level
                      withNSString:(NSString *)msg
             withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoCertUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(ctx, level, msg, t);
}

+ (id<JavaSecurityPublicKey>)loadKeyWithJavaIoFile:(JavaIoFile *)kd {
  return NetI2pCryptoCertUtil_loadKeyWithJavaIoFile_(kd);
}

+ (JavaSecurityCertX509Certificate *)loadCertWithJavaIoFile:(JavaIoFile *)kd {
  return NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(kd);
}

+ (id<JavaSecurityPrivateKey>)loadPrivateKeyWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pCryptoCertUtil_loadPrivateKeyWithJavaIoInputStream_(inArg);
}

+ (id<JavaUtilList>)loadCertsWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pCryptoCertUtil_loadCertsWithJavaIoInputStream_(inArg);
}

+ (jboolean)saveCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                withJavaIoFile:(JavaIoFile *)file {
  return NetI2pCryptoCertUtil_saveCRLWithJavaSecurityCertX509CRL_withJavaIoFile_(crl, file);
}

+ (void)exportCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoCertUtil_exportCRLWithJavaSecurityCertX509CRL_withJavaIoOutputStream_(crl, outArg);
}

+ (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  return NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertificate_(cert);
}

+ (jboolean)isRevokedWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
             withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  return NetI2pCryptoCertUtil_isRevokedWithNetI2pI2PAppContext_withJavaSecurityCertCertificate_(ctx, cert);
}

+ (jboolean)isRevokedWithJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)store
                   withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  return NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertStore_withJavaSecurityCertCertificate_(store, cert);
}

+ (JavaSecurityCertCertStore *)loadCRLs {
  return NetI2pCryptoCertUtil_loadCRLs();
}

+ (JavaSecurityCertCertStore *)loadCRLsWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  return NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(ctx);
}

+ (void)loadCRLsWithJavaUtilSet:(id<JavaUtilSet>)crls
                 withJavaIoFile:(JavaIoFile *)dir {
  NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(crls, dir);
}

+ (JavaSecurityCertX509CRL *)loadCRLWithJavaIoFile:(JavaIoFile *)file {
  return NetI2pCryptoCertUtil_loadCRLWithJavaIoFile_(file);
}

+ (JavaSecurityCertX509CRL *)loadCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pCryptoCertUtil_loadCRLWithJavaIoInputStream_(inArg);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pCryptoCertUtil_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 8, 9, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, 12, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 25, 26, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x9, 27, 26, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 28, 29, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 30, 29, 4, 31, -1, -1 },
    { NULL, "Z", 0x9, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 34, 35, 36, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 40, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertStore;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertStore;", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 43, -1, 44, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0xa, 45, 26, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0x9, 45, 29, 46, -1, -1, -1 },
    { NULL, "V", 0x19, 47, 48, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(saveCertWithJavaSecurityCertCertificate:withJavaIoFile:);
  methods[2].selector = @selector(exportPrivateKeyWithJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaIoOutputStream:);
  methods[3].selector = @selector(exportCertWithJavaSecurityCertCertificate:withJavaIoOutputStream:);
  methods[4].selector = @selector(exportPrivateKeyWithJavaSecurityPrivateKey:withJavaIoOutputStream:);
  methods[5].selector = @selector(writePEMWithByteArray:withNSString:withJavaIoOutputStream:);
  methods[6].selector = @selector(getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate:);
  methods[7].selector = @selector(getSubjectValueWithJavaSecurityCertX509Certificate:withNSString:);
  methods[8].selector = @selector(getIssuerValueWithJavaSecurityCertX509Certificate:withNSString:);
  methods[9].selector = @selector(getValueWithJavaxSecurityAuthX500X500Principal:withNSString:);
  methods[10].selector = @selector(errorWithNSString:withJavaLangThrowable:);
  methods[11].selector = @selector(logWithNetI2pI2PAppContext:withInt:withNSString:withJavaLangThrowable:);
  methods[12].selector = @selector(loadKeyWithJavaIoFile:);
  methods[13].selector = @selector(loadCertWithJavaIoFile:);
  methods[14].selector = @selector(loadPrivateKeyWithJavaIoInputStream:);
  methods[15].selector = @selector(loadCertsWithJavaIoInputStream:);
  methods[16].selector = @selector(saveCRLWithJavaSecurityCertX509CRL:withJavaIoFile:);
  methods[17].selector = @selector(exportCRLWithJavaSecurityCertX509CRL:withJavaIoOutputStream:);
  methods[18].selector = @selector(isRevokedWithJavaSecurityCertCertificate:);
  methods[19].selector = @selector(isRevokedWithNetI2pI2PAppContext:withJavaSecurityCertCertificate:);
  methods[20].selector = @selector(isRevokedWithJavaSecurityCertCertStore:withJavaSecurityCertCertificate:);
  methods[21].selector = @selector(loadCRLs);
  methods[22].selector = @selector(loadCRLsWithNetI2pI2PAppContext:);
  methods[23].selector = @selector(loadCRLsWithJavaUtilSet:withJavaIoFile:);
  methods[24].selector = @selector(loadCRLWithJavaIoFile:);
  methods[25].selector = @selector(loadCRLWithJavaIoInputStream:);
  methods[26].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CERT_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "REVOCATION_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "LINE_LENGTH", "I", .constantValue.asInt = NetI2pCryptoCertUtil_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "saveCert", "LJavaSecurityCertCertificate;LJavaIoFile;", "exportPrivateKey", "LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaIoOutputStream;", "LJavaIoIOException;LJavaSecurityGeneralSecurityException;", "exportCert", "LJavaSecurityCertCertificate;LJavaIoOutputStream;", "LJavaIoIOException;LJavaSecurityCertCertificateEncodingException;", "LJavaSecurityPrivateKey;LJavaIoOutputStream;", "LJavaIoIOException;LJavaSecurityInvalidKeyException;", "writePEM", "[BLNSString;LJavaIoOutputStream;", "LJavaIoIOException;", "getSubjectAlternativeNames", "LJavaSecurityCertX509Certificate;", "(Ljava/security/cert/X509Certificate;)Ljava/util/Set<Ljava/lang/String;>;", "getSubjectValue", "LJavaSecurityCertX509Certificate;LNSString;", "getIssuerValue", "getValue", "LJavaxSecurityAuthX500X500Principal;LNSString;", "error", "LNSString;LJavaLangThrowable;", "log", "LNetI2pI2PAppContext;ILNSString;LJavaLangThrowable;", "loadKey", "LJavaIoFile;", "loadCert", "loadPrivateKey", "LJavaIoInputStream;", "loadCerts", "(Ljava/io/InputStream;)Ljava/util/List<Ljava/security/cert/X509Certificate;>;", "saveCRL", "LJavaSecurityCertX509CRL;LJavaIoFile;", "exportCRL", "LJavaSecurityCertX509CRL;LJavaIoOutputStream;", "LJavaIoIOException;LJavaSecurityCertCRLException;", "isRevoked", "LJavaSecurityCertCertificate;", "LNetI2pI2PAppContext;LJavaSecurityCertCertificate;", "LJavaSecurityCertCertStore;LJavaSecurityCertCertificate;", "loadCRLs", "LNetI2pI2PAppContext;", "LJavaUtilSet;LJavaIoFile;", "(Ljava/util/Set<Ljava/security/cert/X509CRL;>;Ljava/io/File;)V", "loadCRL", "LJavaSecurityGeneralSecurityException;", "main", "[LNSString;", &NetI2pCryptoCertUtil_CERT_DIR, &NetI2pCryptoCertUtil_REVOCATION_DIR };
  static const J2ObjcClassInfo _NetI2pCryptoCertUtil = { "CertUtil", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 27, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoCertUtil;
}

@end

void NetI2pCryptoCertUtil_init(NetI2pCryptoCertUtil *self) {
  NSObject_init(self);
}

NetI2pCryptoCertUtil *new_NetI2pCryptoCertUtil_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoCertUtil, init)
}

NetI2pCryptoCertUtil *create_NetI2pCryptoCertUtil_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoCertUtil, init)
}

jboolean NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(JavaSecurityCertCertificate *cert, JavaIoFile *file) {
  NetI2pCryptoCertUtil_initialize();
  JavaIoOutputStream *os = nil;
  @try {
    os = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(file);
    NetI2pCryptoCertUtil_exportCertWithJavaSecurityCertCertificate_withJavaIoOutputStream_(cert, os);
    return true;
  }
  @catch (JavaSecurityCertCertificateEncodingException *cee) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error writing X509 Certificate ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), cee);
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error writing X509 Certificate ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), ioe);
    return false;
  }
  @finally {
    @try {
      if (os != nil) [os close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
}

void NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaIoOutputStream_(id<JavaSecurityPrivateKey> pk, IOSObjectArray *certs, JavaIoOutputStream *outArg) {
  NetI2pCryptoCertUtil_initialize();
  NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaIoOutputStream_(pk, outArg);
  if (certs == nil) return;
  for (jint i = 0; i < certs->size_; i++) {
    NetI2pCryptoCertUtil_exportCertWithJavaSecurityCertCertificate_withJavaIoOutputStream_(IOSObjectArray_Get(certs, i), outArg);
  }
}

void NetI2pCryptoCertUtil_exportCertWithJavaSecurityCertCertificate_withJavaIoOutputStream_(JavaSecurityCertCertificate *cert, JavaIoOutputStream *outArg) {
  NetI2pCryptoCertUtil_initialize();
  IOSByteArray *buf = [((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded];
  NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(buf, @"CERTIFICATE", outArg);
}

void NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaIoOutputStream_(id<JavaSecurityPrivateKey> pk, JavaIoOutputStream *outArg) {
  NetI2pCryptoCertUtil_initialize();
  IOSByteArray *buf = [((id<JavaSecurityPrivateKey>) nil_chk(pk)) getEncoded];
  if (buf == nil) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"encoding unsupported for this key");
  NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(buf, @"PRIVATE KEY", outArg);
}

void NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(IOSByteArray *buf, NSString *what, JavaIoOutputStream *outArg) {
  NetI2pCryptoCertUtil_initialize();
  JavaIoPrintWriter *wr = create_JavaIoPrintWriter_initWithJavaIoWriter_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(outArg, @"UTF-8"));
  [wr printlnWithNSString:JreStrcat("$$$", @"-----BEGIN ", what, @"-----")];
  NSString *b64 = NetI2pDataBase64_encodeWithByteArray_withBoolean_(buf, true);
  for (jint i = 0; i < [((NSString *) nil_chk(b64)) java_length]; i += NetI2pCryptoCertUtil_LINE_LENGTH) {
    [wr printlnWithNSString:[b64 java_substring:i endIndex:JavaLangMath_minWithInt_withInt_(i + NetI2pCryptoCertUtil_LINE_LENGTH, [b64 java_length])]];
  }
  [wr printlnWithNSString:JreStrcat("$$$", @"-----END ", what, @"-----")];
  [wr flush];
  if ([wr checkError]) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed write to ", outArg));
}

id<JavaUtilSet> NetI2pCryptoCertUtil_getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  NetI2pCryptoCertUtil_initialize();
  id<JavaUtilSet> rv = create_JavaUtilHashSet_initWithInt_(8);
  @try {
    id<JavaUtilCollection> c = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectAlternativeNames];
    if (c != nil) {
      for (id<JavaUtilList> __strong list in c) {
        @try {
          [rv addWithId:(NSString *) cast_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:1], [NSString class])];
        }
        @catch (JavaLangClassCastException *cce) {
        }
      }
    }
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
  }
  return rv;
}

NSString *NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(JavaSecurityCertX509Certificate *cert, NSString *type) {
  NetI2pCryptoCertUtil_initialize();
  JavaxSecurityAuthX500X500Principal *p = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal];
  return NetI2pCryptoCertUtil_getValueWithJavaxSecurityAuthX500X500Principal_withNSString_(p, type);
}

NSString *NetI2pCryptoCertUtil_getIssuerValueWithJavaSecurityCertX509Certificate_withNSString_(JavaSecurityCertX509Certificate *cert, NSString *type) {
  NetI2pCryptoCertUtil_initialize();
  JavaxSecurityAuthX500X500Principal *p = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal];
  return NetI2pCryptoCertUtil_getValueWithJavaxSecurityAuthX500X500Principal_withNSString_(p, type);
}

NSString *NetI2pCryptoCertUtil_getValueWithJavaxSecurityAuthX500X500Principal_withNSString_(JavaxSecurityAuthX500X500Principal *p, NSString *type) {
  NetI2pCryptoCertUtil_initialize();
  if (NetI2pUtilSystemVersion_isAndroid()) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(@"Don't call this in Android", create_JavaLangUnsupportedOperationException_initWithNSString_(@"I did it"));
    return nil;
  }
  if (p == nil) return nil;
  type = [((NSString *) nil_chk(type)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  NSString *subj = [p getName];
  @try {
    IOSClass *ldapName = IOSClass_forName_(@"javax.naming.ldap.LdapName");
    JavaLangReflectConstructor *ldapCtor = [((IOSClass *) nil_chk(ldapName)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    id name = [((JavaLangReflectConstructor *) nil_chk(ldapCtor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ subj } count:1 type:NSObject_class_()]];
    JavaLangReflectMethod *getRdns = [ldapName getDeclaredMethod:@"getRdns" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    IOSClass *rdnClass = IOSClass_forName_(@"javax.naming.ldap.Rdn");
    JavaLangReflectMethod *getType = [((IOSClass *) nil_chk(rdnClass)) getDeclaredMethod:@"getType" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    JavaLangReflectMethod *getValue = [rdnClass getDeclaredMethod:@"getValue" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    for (id __strong rdn in nil_chk((id<JavaUtilList>) cast_check([((JavaLangReflectMethod *) nil_chk(getRdns)) invokeWithId:name withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], JavaUtilList_class_()))) {
      if ([((NSString *) nil_chk(type)) isEqual:[((NSString *) nil_chk(((NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk(getType)) invokeWithId:rdn withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class])))) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]]) return (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk(getValue)) invokeWithId:rdn withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (JavaLangClassNotFoundException *e) {
  }
  @catch (JavaLangIllegalAccessException *e) {
  }
  @catch (JavaLangInstantiationException *e) {
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  return nil;
}

void NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t) {
  NetI2pCryptoCertUtil_initialize();
  NetI2pCryptoCertUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext_getGlobalContext(), NetI2pUtilLog_ERROR, msg, t);
}

void NetI2pCryptoCertUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext *ctx, jint level, NSString *msg, JavaLangThrowable *t) {
  NetI2pCryptoCertUtil_initialize();
  NetI2pUtilLog *l = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pCryptoCertUtil_class_()];
  [((NetI2pUtilLog *) nil_chk(l)) logWithInt:level withNSString:msg withJavaLangThrowable:t];
}

id<JavaSecurityPublicKey> NetI2pCryptoCertUtil_loadKeyWithJavaIoFile_(JavaIoFile *kd) {
  NetI2pCryptoCertUtil_initialize();
  JavaSecurityCertX509Certificate *cert = NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(kd);
  if (NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertificate_(cert)) @throw create_JavaSecurityCertCRLException_initWithNSString_(@"Certificate is revoked");
  return [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getPublicKey];
}

JavaSecurityCertX509Certificate *NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(JavaIoFile *kd) {
  NetI2pCryptoCertUtil_initialize();
  JavaIoInputStream *fis = nil;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(kd);
    JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCertificateWithJavaIoInputStream:fis], [JavaSecurityCertX509Certificate class]);
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidity];
    return cert;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"cert error", iae);
  }
  @finally {
    @try {
      if (fis != nil) [fis close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
}

id<JavaSecurityPrivateKey> NetI2pCryptoCertUtil_loadPrivateKeyWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pCryptoCertUtil_initialize();
  @try {
    NSString *line;
    while ((line = NetI2pDataDataHelper_readLineWithJavaIoInputStream_(inArg)) != nil) {
      if ([((NSString *) nil_chk(line)) java_hasPrefix:@"---"] && [line java_contains:@"BEGIN"] && [line java_contains:@"PRIVATE"]) break;
    }
    if (line == nil) @throw create_JavaIoIOException_initWithNSString_(@"no private key found");
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
    while ((line = NetI2pDataDataHelper_readLineWithJavaIoInputStream_(inArg)) != nil) {
      if ([((NSString *) nil_chk(line)) java_hasPrefix:@"---"]) break;
      [buf appendWithNSString:[line java_trim]];
    }
    if ([buf java_length] <= 0) @throw create_JavaIoIOException_initWithNSString_(@"no private key found");
    IOSByteArray *data = NetI2pDataBase64_decodeWithNSString_withBoolean_([buf description], true);
    if (data == nil) @throw create_JavaSecurityCertCertificateEncodingException_initWithNSString_(@"bad base64 cert");
    id<JavaSecurityPrivateKey> rv = nil;
    for (NetI2pCryptoSigAlgo * __strong algo in nil_chk(JavaUtilEnumSet_allOfWithIOSClass_(NetI2pCryptoSigAlgo_class_()))) {
      @try {
        id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(data);
        NSString *alg = [((NetI2pCryptoSigAlgo *) nil_chk(algo)) getName];
        JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(alg);
        rv = [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:ks];
        break;
      }
      @catch (JavaSecurityGeneralSecurityException *gse) {
      }
    }
    if (rv == nil) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"unsupported key type");
    return rv;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"key error", iae);
  }
}

id<JavaUtilList> NetI2pCryptoCertUtil_loadCertsWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pCryptoCertUtil_initialize();
  @try {
    JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
    id<JavaUtilCollection> certs = [((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCertificatesWithJavaIoInputStream:inArg];
    id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(certs)) size]);
    for (JavaSecurityCertCertificate * __strong cert in certs) {
      if (!([cert isKindOfClass:[JavaSecurityCertX509Certificate class]])) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"not a X.509 cert");
      JavaSecurityCertX509Certificate *xcert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
      [((JavaSecurityCertX509Certificate *) nil_chk(xcert)) checkValidity];
      [rv addWithId:xcert];
    }
    if ([rv isEmpty]) @throw create_JavaIoIOException_initWithNSString_(@"no certs found");
    return rv;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"cert error", iae);
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(inArg)) close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
}

jboolean NetI2pCryptoCertUtil_saveCRLWithJavaSecurityCertX509CRL_withJavaIoFile_(JavaSecurityCertX509CRL *crl, JavaIoFile *file) {
  NetI2pCryptoCertUtil_initialize();
  JavaIoOutputStream *os = nil;
  @try {
    os = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(file);
    NetI2pCryptoCertUtil_exportCRLWithJavaSecurityCertX509CRL_withJavaIoOutputStream_(crl, os);
    return true;
  }
  @catch (JavaSecurityCertCRLException *ce) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error writing X509 CRL ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), ce);
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error writing X509 CRL ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), ioe);
    return false;
  }
  @finally {
    @try {
      if (os != nil) [os close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
}

void NetI2pCryptoCertUtil_exportCRLWithJavaSecurityCertX509CRL_withJavaIoOutputStream_(JavaSecurityCertX509CRL *crl, JavaIoOutputStream *outArg) {
  NetI2pCryptoCertUtil_initialize();
  IOSByteArray *buf = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getEncoded];
  NetI2pCryptoCertUtil_writePEMWithByteArray_withNSString_withJavaIoOutputStream_(buf, @"X509 CRL", outArg);
}

jboolean NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *cert) {
  NetI2pCryptoCertUtil_initialize();
  return NetI2pCryptoCertUtil_isRevokedWithNetI2pI2PAppContext_withJavaSecurityCertCertificate_(NetI2pI2PAppContext_getGlobalContext(), cert);
}

jboolean NetI2pCryptoCertUtil_isRevokedWithNetI2pI2PAppContext_withJavaSecurityCertCertificate_(NetI2pI2PAppContext *ctx, JavaSecurityCertCertificate *cert) {
  NetI2pCryptoCertUtil_initialize();
  JavaSecurityCertCertStore *store = NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(ctx);
  return NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertStore_withJavaSecurityCertCertificate_(store, cert);
}

jboolean NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertStore_withJavaSecurityCertCertificate_(JavaSecurityCertCertStore *store, JavaSecurityCertCertificate *cert) {
  NetI2pCryptoCertUtil_initialize();
  @try {
    for (JavaSecurityCertCRL * __strong crl in nil_chk([((JavaSecurityCertCertStore *) nil_chk(store)) getCRLsWithJavaSecurityCertCRLSelector:nil])) {
      if ([((JavaSecurityCertCRL *) nil_chk(crl)) isRevokedWithJavaSecurityCertCertificate:cert]) return true;
    }
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
  }
  return false;
}

JavaSecurityCertCertStore *NetI2pCryptoCertUtil_loadCRLs() {
  NetI2pCryptoCertUtil_initialize();
  return NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(NetI2pI2PAppContext_getGlobalContext());
}

JavaSecurityCertCertStore *NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  NetI2pCryptoCertUtil_initialize();
  id<JavaUtilSet> crls = create_JavaUtilHashSet_initWithInt_(8);
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(ctx)) getBaseDir], NetI2pCryptoCertUtil_CERT_DIR);
  dir = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, NetI2pCryptoCertUtil_REVOCATION_DIR);
  NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(crls, dir);
  jboolean diff = true;
  @try {
    diff = ![((NSString *) nil_chk([((JavaIoFile *) nil_chk([ctx getBaseDir])) getCanonicalPath])) isEqual:[((JavaIoFile *) nil_chk([ctx getConfigDir])) getCanonicalPath]];
  }
  @catch (JavaIoIOException *ioe) {
  }
  if (diff) {
    JavaIoFile *dir2 = create_JavaIoFile_initWithJavaIoFile_withNSString_([ctx getConfigDir], NetI2pCryptoCertUtil_CERT_DIR);
    dir2 = create_JavaIoFile_initWithJavaIoFile_withNSString_(dir2, NetI2pCryptoCertUtil_REVOCATION_DIR);
    NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(crls, dir2);
  }
  JavaSecurityCertCollectionCertStoreParameters *ccsp = create_JavaSecurityCertCollectionCertStoreParameters_initWithJavaUtilCollection_(crls);
  @try {
    JavaSecurityCertCertStore *store = JavaSecurityCertCertStore_getInstanceWithNSString_withJavaSecurityCertCertStoreParameters_(@"Collection", ccsp);
    return store;
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(@"CertStore", gse);
    @throw create_JavaLangUnsupportedOperationException_initWithJavaLangThrowable_(gse);
  }
}

void NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(id<JavaUtilSet> crls, JavaIoFile *dir) {
  NetI2pCryptoCertUtil_initialize();
  if ([((JavaIoFile *) nil_chk(dir)) exists] && [dir isDirectory]) {
    IOSObjectArray *files = [dir listFilesWithJavaIoFileFilter:create_NetI2pUtilFileSuffixFilter_initWithNSString_(@".crl")];
    if (files != nil) {
      for (jint i = 0; i < files->size_; i++) {
        JavaIoFile *f = IOSObjectArray_Get(files, i);
        @try {
          JavaSecurityCertX509CRL *crl = NetI2pCryptoCertUtil_loadCRLWithJavaIoFile_(f);
          [((id<JavaUtilSet>) nil_chk(crls)) addWithId:crl];
        }
        @catch (JavaIoIOException *ioe) {
          NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Cannot load CRL from ", f), ioe);
        }
        @catch (JavaSecurityGeneralSecurityException *crle) {
          NetI2pCryptoCertUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Cannot load CRL from ", f), crle);
        }
      }
    }
  }
}

JavaSecurityCertX509CRL *NetI2pCryptoCertUtil_loadCRLWithJavaIoFile_(JavaIoFile *file) {
  NetI2pCryptoCertUtil_initialize();
  JavaIoInputStream *in = nil;
  @try {
    in = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
    return NetI2pCryptoCertUtil_loadCRLWithJavaIoInputStream_(in);
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

JavaSecurityCertX509CRL *NetI2pCryptoCertUtil_loadCRLWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pCryptoCertUtil_initialize();
  JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
  return (JavaSecurityCertX509CRL *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCRLWithJavaIoInputStream:inArg], [JavaSecurityCertX509CRL class]);
}

void NetI2pCryptoCertUtil_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pCryptoCertUtil_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 2) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: [loadcert | loadcrl | loadcrldir | loadcrldirs | isrevoked | loadprivatekey] file"];
    JavaLangSystem_exitWithInt_(1);
  }
  @try {
    JavaIoFile *f = create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 1));
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"loadcert"]) {
      JavaSecurityCertX509Certificate *cert = NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(f);
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NetI2pUtilHexDump_dumpWithByteArray_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getEncoded])];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"loadcrl"]) {
      NetI2pCryptoCertUtil_loadCRLWithJavaIoFile_(f);
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"loadcrldir"]) {
      id<JavaUtilSet> crls = create_JavaUtilHashSet_initWithInt_(8);
      NetI2pCryptoCertUtil_loadCRLsWithJavaUtilSet_withJavaIoFile_(crls, f);
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"Found ", [crls size], @" CRLs")];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"loadcrldirs"]) {
      JavaSecurityCertCertStore *store = NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(NetI2pI2PAppContext_getGlobalContext());
      id<JavaUtilCollection> crls = [((JavaSecurityCertCertStore *) nil_chk(store)) getCRLsWithJavaSecurityCertCRLSelector:nil];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"Found ", [((id<JavaUtilCollection>) nil_chk(crls)) size], @" CRLs")];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"isrevoked"]) {
      JavaSecurityCertCertificate *cert = NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(f);
      jboolean rv = NetI2pCryptoCertUtil_isRevokedWithNetI2pI2PAppContext_withJavaSecurityCertCertificate_(NetI2pI2PAppContext_getGlobalContext(), cert);
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Revoked? ", rv)];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: [loadcert | loadcrl | loadprivatekey] file"];
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    JavaLangSystem_exitWithInt_(1);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoCertUtil)
