//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SessionKeyManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoSessionKeyManager")
#ifdef RESTRICT_NetI2pCryptoSessionKeyManager
#define INCLUDE_ALL_NetI2pCryptoSessionKeyManager 0
#else
#define INCLUDE_ALL_NetI2pCryptoSessionKeyManager 1
#endif
#undef RESTRICT_NetI2pCryptoSessionKeyManager

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoSessionKeyManager_) && (INCLUDE_ALL_NetI2pCryptoSessionKeyManager || defined(INCLUDE_NetI2pCryptoSessionKeyManager))
#define NetI2pCryptoSessionKeyManager_

@class JavaIoWriter;
@class NetI2pDataPublicKey;
@class NetI2pDataSessionKey;
@class NetI2pDataSessionTag;
@class NetI2pI2PAppContext;
@protocol JavaUtilSet;
@protocol NetI2pCryptoTagSetHandle;

@interface NetI2pCryptoSessionKeyManager : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (NetI2pDataSessionTag *)consumeNextAvailableTagWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (NetI2pDataSessionKey *)consumeTagWithNetI2pDataSessionTag:(NetI2pDataSessionTag *)tag;

- (NetI2pDataSessionKey *)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (void)createSessionWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                    withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (void)failTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
               withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
           withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts;

- (jint)getAvailableTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                       withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (jlong)getAvailableTimeLeftWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (NetI2pDataSessionKey *)getCurrentKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (NetI2pDataSessionKey *)getCurrentOrNewKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target;

- (jint)getLowThreshold;

- (jint)getTagsToSend;

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg;

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (jboolean)shouldSendTagsWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                         withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                          withInt:(jint)lowThreshold;

- (void)shutdown;

- (void)tagsAckedWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
            withNetI2pCryptoTagSetHandle:(id<NetI2pCryptoTagSetHandle>)ts;

- (id<NetI2pCryptoTagSetHandle>)tagsDeliveredWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)target
                                            withNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                                                     withJavaUtilSet:(id<JavaUtilSet>)sessionTags;

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags;

- (void)tagsReceivedWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key
                             withJavaUtilSet:(id<JavaUtilSet>)sessionTags
                                    withLong:(jlong)expire;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pCryptoSessionKeyManager)

FOUNDATION_EXPORT void NetI2pCryptoSessionKeyManager_init(NetI2pCryptoSessionKeyManager *self);

FOUNDATION_EXPORT NetI2pCryptoSessionKeyManager *new_NetI2pCryptoSessionKeyManager_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoSessionKeyManager *create_NetI2pCryptoSessionKeyManager_init(void);

FOUNDATION_EXPORT void NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pCryptoSessionKeyManager *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pCryptoSessionKeyManager *new_NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoSessionKeyManager *create_NetI2pCryptoSessionKeyManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoSessionKeyManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoSessionKeyManager")
