//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/KeyStoreUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/Key.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/MessageDigest.h"
#include "java/security/PrivateKey.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EnumSet.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/crypto/SHA1.h"
#include "net/i2p/crypto/SHA1Hash.h"
#include "net/i2p/crypto/SelfSignedGenerator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/crypto/provider/I2PProvider.h"
#include "net/i2p/data/Base32.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/ShellCommand.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pCryptoKeyStoreUtil ()

+ (jboolean)loadCertsWithJavaIoFile:(JavaIoFile *)file
           withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks;

+ (jint)removeBlacklistedCertsWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks;

+ (jboolean)createKeysCLIWithJavaIoFile:(JavaIoFile *)ks
                           withNSString:(NSString *)ksPW
                           withNSString:(NSString *)alias
                           withNSString:(NSString *)cname
                           withNSString:(NSString *)ou
                                withInt:(jint)validDays
                           withNSString:(NSString *)keyAlg
                                withInt:(jint)keySize
                           withNSString:(NSString *)keyPW;

+ (NSString *)getSigAlgWithInt:(jint)size
                  withNSString:(NSString *)keyalg;

+ (void)infoWithNSString:(NSString *)msg;

+ (void)warnWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)logWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withInt:(jint)level
                      withNSString:(NSString *)msg
             withJavaLangThrowable:(JavaLangThrowable *)t;

@end

inline jboolean NetI2pCryptoKeyStoreUtil_get__blacklistLogged(void);
inline jboolean NetI2pCryptoKeyStoreUtil_set__blacklistLogged(jboolean value);
inline jboolean *NetI2pCryptoKeyStoreUtil_getRef__blacklistLogged(void);
static jboolean NetI2pCryptoKeyStoreUtil__blacklistLogged;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pCryptoKeyStoreUtil, _blacklistLogged, jboolean)

inline NSString *NetI2pCryptoKeyStoreUtil_get_DEFAULT_KEY_ALGORITHM(void);
static NSString *NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_ALGORITHM = @"RSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoKeyStoreUtil, DEFAULT_KEY_ALGORITHM, NSString *)

inline jint NetI2pCryptoKeyStoreUtil_get_DEFAULT_KEY_SIZE(void);
#define NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_SIZE 2048
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoKeyStoreUtil, DEFAULT_KEY_SIZE, jint)

inline NSString *NetI2pCryptoKeyStoreUtil_get_DEFAULT_CA_KEY_ALGORITHM(void);
static NSString *NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_ALGORITHM = @"EC";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoKeyStoreUtil, DEFAULT_CA_KEY_ALGORITHM, NSString *)

inline jint NetI2pCryptoKeyStoreUtil_get_DEFAULT_CA_KEY_SIZE(void);
#define NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoKeyStoreUtil, DEFAULT_CA_KEY_SIZE, jint)

inline jint NetI2pCryptoKeyStoreUtil_get_DEFAULT_KEY_VALID_DAYS(void);
#define NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_VALID_DAYS 3652
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoKeyStoreUtil, DEFAULT_KEY_VALID_DAYS, jint)

inline IOSObjectArray *NetI2pCryptoKeyStoreUtil_get_BLACKLIST_SHA1(void);
static IOSObjectArray *NetI2pCryptoKeyStoreUtil_BLACKLIST_SHA1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoKeyStoreUtil, BLACKLIST_SHA1, IOSObjectArray *)

inline id<JavaUtilSet> NetI2pCryptoKeyStoreUtil_get__blacklist(void);
static id<JavaUtilSet> NetI2pCryptoKeyStoreUtil__blacklist;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoKeyStoreUtil, _blacklist, id<JavaUtilSet>)

__attribute__((unused)) static jboolean NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(JavaIoFile *file, JavaSecurityKeyStore *ks);

__attribute__((unused)) static jint NetI2pCryptoKeyStoreUtil_removeBlacklistedCertsWithJavaSecurityKeyStore_(JavaSecurityKeyStore *ks);

__attribute__((unused)) static jboolean NetI2pCryptoKeyStoreUtil_createKeysCLIWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW);

__attribute__((unused)) static NSString *NetI2pCryptoKeyStoreUtil_getSigAlgWithInt_withNSString_(jint size, NSString *keyalg);

__attribute__((unused)) static void NetI2pCryptoKeyStoreUtil_infoWithNSString_(NSString *msg);

__attribute__((unused)) static void NetI2pCryptoKeyStoreUtil_warnWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext *ctx, jint level, NSString *msg, JavaLangThrowable *t);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoKeyStoreUtil)

NSString *NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD = @"changeit";

@implementation NetI2pCryptoKeyStoreUtil

+ (NSString *)DEFAULT_KEYSTORE_PASSWORD {
  return NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoKeyStoreUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaSecurityKeyStore *)createKeyStoreWithJavaIoFile:(JavaIoFile *)ksFile
                                          withNSString:(NSString *)password {
  return NetI2pCryptoKeyStoreUtil_createKeyStoreWithJavaIoFile_withNSString_(ksFile, password);
}

+ (JavaSecurityKeyStore *)loadSystemKeyStore {
  return NetI2pCryptoKeyStoreUtil_loadSystemKeyStore();
}

+ (jboolean)loadCertsWithJavaIoFile:(JavaIoFile *)file
           withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks {
  return NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(file, ks);
}

+ (jint)countCertsWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks {
  return NetI2pCryptoKeyStoreUtil_countCertsWithJavaSecurityKeyStore_(ks);
}

+ (jboolean)logCertExpirationWithJavaIoFile:(JavaIoFile *)f
                               withNSString:(NSString *)ksPW
                                   withLong:(jlong)expiresWithin {
  return NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaIoFile_withNSString_withLong_(f, ksPW, expiresWithin);
}

+ (jboolean)logCertExpirationWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks
                                         withNSString:(NSString *)location
                                             withLong:(jlong)expiresWithin {
  return NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaSecurityKeyStore_withNSString_withLong_(ks, location, expiresWithin);
}

+ (jint)removeBlacklistedCertsWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks {
  return NetI2pCryptoKeyStoreUtil_removeBlacklistedCertsWithJavaSecurityKeyStore_(ks);
}

+ (jint)addCertsWithJavaIoFile:(JavaIoFile *)dir
      withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks {
  return NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir, ks);
}

+ (jboolean)addCertWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)alias
         withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks {
  return NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_(file, alias, ks);
}

+ (jboolean)addCertWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)alias
         withJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks
    withJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)cs {
  return NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_withJavaSecurityCertCertStore_(file, alias, ks, cs);
}

+ (NSString *)randomString {
  return NetI2pCryptoKeyStoreUtil_randomString();
}

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_(ks, alias, cname, ou, keyPW);
}

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withJavaUtilSet_withNSString_withNSString_(ks, alias, cname, altNames, ou, keyPW);
}

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                        withNSString:(NSString *)ou
                             withInt:(jint)validDays
                        withNSString:(NSString *)keyAlg
                             withInt:(jint)keySize
                        withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, ou, validDays, keyAlg, keySize, keyPW);
}

+ (jboolean)createKeysWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                        withNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                             withInt:(jint)validDays
                        withNSString:(NSString *)keyAlg
                             withInt:(jint)keySize
                        withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, altNames, ou, validDays, keyAlg, keySize, keyPW);
}

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                                      withNSString:(NSString *)keyAlg
                                           withInt:(jint)keySize
                                      withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, ou, validDays, keyAlg, keySize, keyPW);
}

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                   withJavaUtilSet:(id<JavaUtilSet>)altNames
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                                      withNSString:(NSString *)keyAlg
                                           withInt:(jint)keySize
                                      withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, altNames, ou, validDays, keyAlg, keySize, keyPW);
}

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                      withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(ks, ksPW, alias, cname, ou, validDays, type, keyPW);
}

+ (IOSObjectArray *)createKeysAndCRLWithJavaIoFile:(JavaIoFile *)ks
                                      withNSString:(NSString *)ksPW
                                      withNSString:(NSString *)alias
                                      withNSString:(NSString *)cname
                                   withJavaUtilSet:(id<JavaUtilSet>)altNames
                                      withNSString:(NSString *)ou
                                           withInt:(jint)validDays
                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                      withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(ks, ksPW, alias, cname, altNames, ou, validDays, type, keyPW);
}

+ (jboolean)createKeysCLIWithJavaIoFile:(JavaIoFile *)ks
                           withNSString:(NSString *)ksPW
                           withNSString:(NSString *)alias
                           withNSString:(NSString *)cname
                           withNSString:(NSString *)ou
                                withInt:(jint)validDays
                           withNSString:(NSString *)keyAlg
                                withInt:(jint)keySize
                           withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_createKeysCLIWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, ou, validDays, keyAlg, keySize, keyPW);
}

+ (NSString *)getSigAlgWithInt:(jint)size
                  withNSString:(NSString *)keyalg {
  return NetI2pCryptoKeyStoreUtil_getSigAlgWithInt_withNSString_(size, keyalg);
}

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                                             withNSString:(NSString *)ksPW
                                             withNSString:(NSString *)alias
                                             withNSString:(NSString *)keyPW {
  return NetI2pCryptoKeyStoreUtil_getPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_(ks, ksPW, alias, keyPW);
}

+ (void)exportPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                          withNSString:(NSString *)ksPW
                          withNSString:(NSString *)alias
                          withNSString:(NSString *)keyPW
                withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pCryptoKeyStoreUtil_exportPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoOutputStream_(ks, ksPW, alias, keyPW, outArg);
}

+ (JavaSecurityCertX509Certificate *)renewPrivateKeyCertificateWithJavaIoFile:(JavaIoFile *)ks
                                                                 withNSString:(NSString *)ksPW
                                                                 withNSString:(NSString *)alias
                                                                 withNSString:(NSString *)keyPW
                                                                      withInt:(jint)validDays {
  return NetI2pCryptoKeyStoreUtil_renewPrivateKeyCertificateWithJavaIoFile_withNSString_withNSString_withNSString_withInt_(ks, ksPW, alias, keyPW, validDays);
}

+ (NSString *)importPrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                                withNSString:(NSString *)ksPW
                                withNSString:(NSString *)alias
                                withNSString:(NSString *)keyPW
                       withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pCryptoKeyStoreUtil_importPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoInputStream_(ks, ksPW, alias, keyPW, inArg);
}

+ (void)storePrivateKeyWithJavaIoFile:(JavaIoFile *)ks
                         withNSString:(NSString *)ksPW
                         withNSString:(NSString *)alias
                         withNSString:(NSString *)keyPW
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                     withJavaUtilList:(id<JavaUtilList>)certs {
  NetI2pCryptoKeyStoreUtil_storePrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaUtilList_(ks, ksPW, alias, keyPW, pk, certs);
}

+ (JavaSecurityCertCertificate *)getCertWithJavaIoFile:(JavaIoFile *)ks
                                          withNSString:(NSString *)ksPW
                                          withNSString:(NSString *)alias {
  return NetI2pCryptoKeyStoreUtil_getCertWithJavaIoFile_withNSString_withNSString_(ks, ksPW, alias);
}

+ (jboolean)exportCertWithJavaIoFile:(JavaIoFile *)ks
                        withNSString:(NSString *)ksPW
                        withNSString:(NSString *)alias
                      withJavaIoFile:(JavaIoFile *)certFile {
  return NetI2pCryptoKeyStoreUtil_exportCertWithJavaIoFile_withNSString_withNSString_withJavaIoFile_(ks, ksPW, alias, certFile);
}

+ (void)infoWithNSString:(NSString *)msg {
  NetI2pCryptoKeyStoreUtil_infoWithNSString_(msg);
}

+ (void)warnWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoKeyStoreUtil_warnWithNSString_withJavaLangThrowable_(msg, t);
}

+ (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(msg, t);
}

+ (void)logWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withInt:(jint)level
                      withNSString:(NSString *)msg
             withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(ctx, level, msg, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2a, 10, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x9, 15, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 20, -1, 21, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 22, 19, 2, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 22, 20, 2, 23, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 22, 24, 2, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 22, 25, 2, 26, -1, -1 },
    { NULL, "Z", 0xa, 27, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 30, 31, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 33, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x9, 34, 35, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 36, 37, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 39, 2, 40, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x9, 41, 42, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 51, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyStoreWithJavaIoFile:withNSString:);
  methods[2].selector = @selector(loadSystemKeyStore);
  methods[3].selector = @selector(loadCertsWithJavaIoFile:withJavaSecurityKeyStore:);
  methods[4].selector = @selector(countCertsWithJavaSecurityKeyStore:);
  methods[5].selector = @selector(logCertExpirationWithJavaIoFile:withNSString:withLong:);
  methods[6].selector = @selector(logCertExpirationWithJavaSecurityKeyStore:withNSString:withLong:);
  methods[7].selector = @selector(removeBlacklistedCertsWithJavaSecurityKeyStore:);
  methods[8].selector = @selector(addCertsWithJavaIoFile:withJavaSecurityKeyStore:);
  methods[9].selector = @selector(addCertWithJavaIoFile:withNSString:withJavaSecurityKeyStore:);
  methods[10].selector = @selector(addCertWithJavaIoFile:withNSString:withJavaSecurityKeyStore:withJavaSecurityCertCertStore:);
  methods[11].selector = @selector(randomString);
  methods[12].selector = @selector(createKeysWithJavaIoFile:withNSString:withNSString:withNSString:withNSString:);
  methods[13].selector = @selector(createKeysWithJavaIoFile:withNSString:withNSString:withJavaUtilSet:withNSString:withNSString:);
  methods[14].selector = @selector(createKeysWithJavaIoFile:withNSString:withNSString:withNSString:withNSString:withInt:withNSString:withInt:withNSString:);
  methods[15].selector = @selector(createKeysWithJavaIoFile:withNSString:withNSString:withNSString:withJavaUtilSet:withNSString:withInt:withNSString:withInt:withNSString:);
  methods[16].selector = @selector(createKeysAndCRLWithJavaIoFile:withNSString:withNSString:withNSString:withNSString:withInt:withNSString:withInt:withNSString:);
  methods[17].selector = @selector(createKeysAndCRLWithJavaIoFile:withNSString:withNSString:withNSString:withJavaUtilSet:withNSString:withInt:withNSString:withInt:withNSString:);
  methods[18].selector = @selector(createKeysAndCRLWithJavaIoFile:withNSString:withNSString:withNSString:withNSString:withInt:withNetI2pCryptoSigType:withNSString:);
  methods[19].selector = @selector(createKeysAndCRLWithJavaIoFile:withNSString:withNSString:withNSString:withJavaUtilSet:withNSString:withInt:withNetI2pCryptoSigType:withNSString:);
  methods[20].selector = @selector(createKeysCLIWithJavaIoFile:withNSString:withNSString:withNSString:withNSString:withInt:withNSString:withInt:withNSString:);
  methods[21].selector = @selector(getSigAlgWithInt:withNSString:);
  methods[22].selector = @selector(getPrivateKeyWithJavaIoFile:withNSString:withNSString:withNSString:);
  methods[23].selector = @selector(exportPrivateKeyWithJavaIoFile:withNSString:withNSString:withNSString:withJavaIoOutputStream:);
  methods[24].selector = @selector(renewPrivateKeyCertificateWithJavaIoFile:withNSString:withNSString:withNSString:withInt:);
  methods[25].selector = @selector(importPrivateKeyWithJavaIoFile:withNSString:withNSString:withNSString:withJavaIoInputStream:);
  methods[26].selector = @selector(storePrivateKeyWithJavaIoFile:withNSString:withNSString:withNSString:withJavaSecurityPrivateKey:withJavaUtilList:);
  methods[27].selector = @selector(getCertWithJavaIoFile:withNSString:withNSString:);
  methods[28].selector = @selector(exportCertWithJavaIoFile:withNSString:withNSString:withJavaIoFile:);
  methods[29].selector = @selector(infoWithNSString:);
  methods[30].selector = @selector(warnWithNSString:withJavaLangThrowable:);
  methods[31].selector = @selector(errorWithNSString:withJavaLangThrowable:);
  methods[32].selector = @selector(logWithNetI2pI2PAppContext:withInt:withNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_blacklistLogged", "Z", .constantValue.asLong = 0, 0xa, -1, 52, -1, -1 },
    { "DEFAULT_KEYSTORE_PASSWORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "DEFAULT_KEY_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "DEFAULT_KEY_SIZE", "I", .constantValue.asInt = NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_CA_KEY_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "DEFAULT_CA_KEY_SIZE", "I", .constantValue.asInt = NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_KEY_VALID_DAYS", "I", .constantValue.asInt = NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_VALID_DAYS, 0x1a, -1, -1, -1, -1 },
    { "BLACKLIST_SHA1", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "_blacklist", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 57, 58, -1 },
  };
  static const void *ptrTable[] = { "createKeyStore", "LJavaIoFile;LNSString;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "loadCerts", "LJavaIoFile;LJavaSecurityKeyStore;", "countCerts", "LJavaSecurityKeyStore;", "logCertExpiration", "LJavaIoFile;LNSString;J", "LJavaSecurityKeyStore;LNSString;J", "removeBlacklistedCerts", "addCerts", "addCert", "LJavaIoFile;LNSString;LJavaSecurityKeyStore;", "LJavaIoFile;LNSString;LJavaSecurityKeyStore;LJavaSecurityCertCertStore;", "createKeys", "LJavaIoFile;LNSString;LNSString;LNSString;LNSString;", "LJavaIoFile;LNSString;LNSString;LJavaUtilSet;LNSString;LNSString;", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;Ljava/lang/String;)Z", "LJavaIoFile;LNSString;LNSString;LNSString;LNSString;ILNSString;ILNSString;", "LJavaIoFile;LNSString;LNSString;LNSString;LJavaUtilSet;LNSString;ILNSString;ILNSString;", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;)Z", "createKeysAndCRL", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;)[Ljava/lang/Object;", "LJavaIoFile;LNSString;LNSString;LNSString;LNSString;ILNetI2pCryptoSigType;LNSString;", "LJavaIoFile;LNSString;LNSString;LNSString;LJavaUtilSet;LNSString;ILNetI2pCryptoSigType;LNSString;", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;ILnet/i2p/crypto/SigType;Ljava/lang/String;)[Ljava/lang/Object;", "createKeysCLI", "getSigAlg", "ILNSString;", "getPrivateKey", "LJavaIoFile;LNSString;LNSString;LNSString;", "exportPrivateKey", "LJavaIoFile;LNSString;LNSString;LNSString;LJavaIoOutputStream;", "renewPrivateKeyCertificate", "LJavaIoFile;LNSString;LNSString;LNSString;I", "importPrivateKey", "LJavaIoFile;LNSString;LNSString;LNSString;LJavaIoInputStream;", "storePrivateKey", "LJavaIoFile;LNSString;LNSString;LNSString;LJavaSecurityPrivateKey;LJavaUtilList;", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/security/PrivateKey;Ljava/util/List<Ljava/security/cert/X509Certificate;>;)V", "getCert", "LJavaIoFile;LNSString;LNSString;", "exportCert", "LJavaIoFile;LNSString;LNSString;LJavaIoFile;", "info", "LNSString;", "warn", "LNSString;LJavaLangThrowable;", "error", "log", "LNetI2pI2PAppContext;ILNSString;LJavaLangThrowable;", &NetI2pCryptoKeyStoreUtil__blacklistLogged, &NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, &NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_ALGORITHM, &NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_ALGORITHM, &NetI2pCryptoKeyStoreUtil_BLACKLIST_SHA1, &NetI2pCryptoKeyStoreUtil__blacklist, "Ljava/util/Set<Lnet/i2p/crypto/SHA1Hash;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoKeyStoreUtil = { "KeyStoreUtil", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 33, 9, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoKeyStoreUtil;
}

+ (void)initialize {
  if (self == [NetI2pCryptoKeyStoreUtil class]) {
    {
      NetI2pCryptoProviderI2PProvider_addProvider();
    }
    JreStrongAssignAndConsume(&NetI2pCryptoKeyStoreUtil_BLACKLIST_SHA1, [IOSObjectArray newArrayWithObjects:(id[]){ @"8b:af:4c:9b:1d:f0:2a:92:f7:da:12:8e:b9:1b:ac:f4:98:60:4b:6f", @"4f:99:aa:93:fb:2b:d1:37:26:a1:99:4a:ce:7f:f0:05:f2:93:5d:1e", @"c8:64:48:48:69:d4:1d:2b:0d:32:31:9c:5a:62:f9:31:5a:af:2c:bd", @"98:a0:4e:41:63:35:77:90:c4:a7:9e:6d:71:3f:f0:af:51:fe:69:27", @"02:c2:d9:31:06:2d:7b:1d:c2:a5:c7:f5:f0:68:50:64:08:1f:b2:21", @"a1:db:63:93:91:6f:17:e4:18:55:09:40:04:15:c7:02:40:b0:ae:6b", @"74:2c:31:92:e6:07:e4:24:eb:45:49:54:2b:e1:bb:c5:3e:61:74:e2", @"58:11:9f:0e:12:82:87:ea:50:fd:d9:87:45:6f:4f:78:dc:fa:d6:d4" } count:8 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pCryptoKeyStoreUtil__blacklist, new_JavaUtilHashSet_initWithInt_(16));
    {
      for (jint i = 0; i < NetI2pCryptoKeyStoreUtil_BLACKLIST_SHA1->size_; i++) {
        NSString *s = [((NSString *) nil_chk(IOSObjectArray_Get(NetI2pCryptoKeyStoreUtil_BLACKLIST_SHA1, i))) java_replace:@":" withSequence:@""];
        JavaMathBigInteger *bi = create_JavaMathBigInteger_initWithNSString_withInt_(s, 16);
        IOSByteArray *b = [bi toByteArray];
        if (((IOSByteArray *) nil_chk(b))->size_ == 21) {
          IOSByteArray *b2 = [IOSByteArray arrayWithLength:20];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 1, b2, 0, 20);
          b = b2;
        }
        NetI2pCryptoSHA1Hash *h = create_NetI2pCryptoSHA1Hash_initWithByteArray_(b);
        [NetI2pCryptoKeyStoreUtil__blacklist addWithId:h];
      }
    }
    J2OBJC_SET_INITIALIZED(NetI2pCryptoKeyStoreUtil)
  }
}

@end

void NetI2pCryptoKeyStoreUtil_init(NetI2pCryptoKeyStoreUtil *self) {
  NSObject_init(self);
}

NetI2pCryptoKeyStoreUtil *new_NetI2pCryptoKeyStoreUtil_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoKeyStoreUtil, init)
}

NetI2pCryptoKeyStoreUtil *create_NetI2pCryptoKeyStoreUtil_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoKeyStoreUtil, init)
}

JavaSecurityKeyStore *NetI2pCryptoKeyStoreUtil_createKeyStoreWithJavaIoFile_withNSString_(JavaIoFile *ksFile, NSString *password) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jboolean exists = ksFile != nil && [ksFile exists];
  IOSCharArray *pwchars = password != nil ? [password java_toCharArray] : nil;
  JavaSecurityKeyStore *ks = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
  if (exists) {
    JavaIoInputStream *fis = nil;
    @try {
      fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ksFile);
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:fis withCharArray:pwchars];
    }
    @finally {
      if (fis != nil) @try {
        [fis close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  if (ksFile != nil && !exists) {
    JavaIoOutputStream *fos = nil;
    @try {
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
      fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(ksFile);
      [ks storeWithJavaIoOutputStream:fos withCharArray:pwchars];
    }
    @finally {
      if (fos != nil) @try {
        [fos close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return ks;
}

JavaSecurityKeyStore *NetI2pCryptoKeyStoreUtil_loadSystemKeyStore() {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaSecurityKeyStore *ks;
  @try {
    ks = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Key Store init error", gse);
    return nil;
  }
  jboolean success = false;
  NSString *override = JavaLangSystem_getPropertyWithNSString_(@"javax.net.ssl.keyStore");
  if (override != nil) success = NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(create_JavaIoFile_initWithNSString_(override), ks);
  if (!success) {
    if (NetI2pUtilSystemVersion_isAndroid()) {
      if (NetI2pUtilSystemVersion_getAndroidVersion() >= 14) {
        @try {
          [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
          success = (NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.home"), @"etc/security/cacerts"), ks) > 0);
        }
        @catch (JavaIoIOException *e) {
        }
        @catch (JavaSecurityGeneralSecurityException *e) {
        }
      }
      else {
        success = NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.home"), @"etc/security/cacerts.bks"), ks);
      }
    }
    else {
      success = NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.home"), @"lib/security/jssecacerts"), ks);
      if (!success) success = NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.home"), @"lib/security/cacerts"), ks);
    }
  }
  if (success) {
    NetI2pCryptoKeyStoreUtil_removeBlacklistedCertsWithJavaSecurityKeyStore_(ks);
  }
  else {
    @try {
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
    }
    @catch (JavaIoIOException *e) {
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
    }
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"All key store loads failed, will only load local certificates", nil);
  }
  return ks;
}

jboolean NetI2pCryptoKeyStoreUtil_loadCertsWithJavaIoFile_withJavaSecurityKeyStore_(JavaIoFile *file, JavaSecurityKeyStore *ks) {
  NetI2pCryptoKeyStoreUtil_initialize();
  if (![((JavaIoFile *) nil_chk(file)) exists]) return false;
  JavaIoInputStream *fis = nil;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
    [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:fis withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
    NetI2pCryptoKeyStoreUtil_infoWithNSString_(JreStrcat("$@", @"Certs loaded from ", file));
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"KeyStore load error, no default keys: ", [file getAbsolutePath]), gse);
    @try {
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
    }
    @catch (JavaIoIOException *foo) {
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
    }
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"KeyStore load error, no default keys: ", [file getAbsolutePath]), ioe);
    @try {
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[((NSString *) nil_chk(NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD)) java_toCharArray]];
    }
    @catch (JavaIoIOException *foo) {
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
    }
    return false;
  }
  @finally {
    @try {
      if (fis != nil) [fis close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
  return true;
}

jint NetI2pCryptoKeyStoreUtil_countCertsWithJavaSecurityKeyStore_(JavaSecurityKeyStore *ks) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jint count = 0;
  @try {
    for (id<JavaUtilEnumeration> e = [((JavaSecurityKeyStore *) nil_chk(ks)) aliases]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
      NSString *alias = [e nextElement];
      if ([ks isCertificateEntryWithNSString:alias]) {
        count++;
      }
    }
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
  }
  return count;
}

jboolean NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaIoFile_withNSString_withLong_(JavaIoFile *f, NSString *ksPW, jlong expiresWithin) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NSString *location = [((JavaIoFile *) nil_chk(f)) getAbsolutePath];
  JavaIoInputStream *fis = nil;
  @try {
    JavaSecurityKeyStore *ks = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(f);
    [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:fis withCharArray:[((NSString *) nil_chk(ksPW)) java_toCharArray]];
    return NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaSecurityKeyStore_withNSString_withLong_(ks, location, expiresWithin);
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to check certificates in key store ", location), ioe);
    return false;
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to check certificates in key store ", location), gse);
    return false;
  }
  @finally {
    @try {
      if (fis != nil) [fis close];
    }
    @catch (JavaIoIOException *foo) {
    }
  }
}

jboolean NetI2pCryptoKeyStoreUtil_logCertExpirationWithJavaSecurityKeyStore_withNSString_withLong_(JavaSecurityKeyStore *ks, NSString *location, jlong expiresWithin) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jboolean rv = true;
  @try {
    jint count = 0;
    for (id<JavaUtilEnumeration> e = [((JavaSecurityKeyStore *) nil_chk(ks)) aliases]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
      NSString *alias = [e nextElement];
      if ([ks isKeyEntryWithNSString:alias]) {
        IOSObjectArray *cs;
        @try {
          cs = [ks getCertificateChainWithNSString:alias];
        }
        @catch (JavaSecurityKeyStoreException *kse) {
          NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$$", @"Unable to check certificates for \"", alias, @"\" in key store ", location), kse);
          rv = false;
          continue;
        }
        {
          IOSObjectArray *a__ = cs;
          JavaSecurityCertCertificate * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          JavaSecurityCertCertificate * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaSecurityCertCertificate *c = *b__++;
            if (c != nil && ([c isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
              count++;
              JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk(c, [JavaSecurityCertX509Certificate class]);
              @try {
                [cert checkValidity];
                jlong expiresIn = [((JavaUtilDate *) nil_chk([cert getNotAfter])) getTime] - JavaLangSystem_currentTimeMillis();
                if (expiresIn < expiresWithin) {
                  NetI2pUtilLog *l = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pCryptoKeyStoreUtil_class_()];
                  NSString *subj = [((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) description];
                  [((NetI2pUtilLog *) nil_chk(l)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:JreStrcat("$$$$$$$", @"Certificate \"", subj, @"\" in key store ", location, @" will expire in ", [((NSString *) nil_chk(NetI2pDataDataHelper_formatDuration2WithLong_(expiresIn))) java_replace:@"&nbsp;" withSequence:@" "], @"\nYou should renew the certificate soon.\nFor a local self-signed certificate, you may delete the keystore and restart, or ask for help on how to renew.")];
                }
              }
              @catch (JavaSecurityCertCertificateExpiredException *cee) {
                NSString *subj = [((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) description];
                NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"Expired certificate \"", subj, @"\" in key store ", location, @"\nYou must renew the certificate.\nFor a local self-signed certificate, you may simply delete the keystore and restart,\nor ask for help on how to renew."), nil);
                rv = false;
              }
              @catch (JavaSecurityCertCertificateNotYetValidException *cnyve) {
                NSString *subj = [((JavaxSecurityAuthX500X500Principal *) nil_chk([cert getIssuerX500Principal])) description];
                NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$$", @"Not yet valid certificate \"", subj, @"\" in key store ", location), nil);
                rv = false;
              }
            }
          }
        }
      }
    }
    if (count == 0) NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"No certificates found in key store ", location), nil);
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to check certificates in key store ", location), e);
    rv = false;
  }
  return rv;
}

jint NetI2pCryptoKeyStoreUtil_removeBlacklistedCertsWithJavaSecurityKeyStore_(JavaSecurityKeyStore *ks) {
  NetI2pCryptoKeyStoreUtil_initialize();
  @synchronized(NetI2pCryptoKeyStoreUtil_class_()) {
    if (NetI2pUtilSystemVersion_isAndroid()) return 0;
    id<JavaUtilList> toRemove = create_JavaUtilArrayList_initWithInt_(4);
    @try {
      JavaSecurityMessageDigest *md = NetI2pCryptoSHA1_getInstance();
      for (id<JavaUtilEnumeration> e = [((JavaSecurityKeyStore *) nil_chk(ks)) aliases]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
        NSString *alias = [e nextElement];
        if ([ks isCertificateEntryWithNSString:alias]) {
          JavaSecurityCertCertificate *c = [ks getCertificateWithNSString:alias];
          if (c != nil && ([c isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
            IOSByteArray *enc = [c getEncoded];
            if (enc != nil) {
              IOSByteArray *h = [((JavaSecurityMessageDigest *) nil_chk(md)) digestWithByteArray:enc];
              if ([((id<JavaUtilSet>) nil_chk(NetI2pCryptoKeyStoreUtil__blacklist)) containsWithId:create_NetI2pCryptoSHA1Hash_initWithByteArray_(h)]) {
                [toRemove addWithId:alias];
                if (!NetI2pCryptoKeyStoreUtil__blacklistLogged) {
                  JavaSecurityCertX509Certificate *xc = (JavaSecurityCertX509Certificate *) cast_chk(c, [JavaSecurityCertX509Certificate class]);
                  JavaMathBigInteger *serial = [xc getSerialNumber];
                  NSString *cn = NetI2pCryptoCertUtil_getIssuerValueWithJavaSecurityCertX509Certificate_withNSString_(xc, @"CN");
                  NSString *ou = NetI2pCryptoCertUtil_getIssuerValueWithJavaSecurityCertX509Certificate_withNSString_(xc, @"OU");
                  NetI2pCryptoKeyStoreUtil_warnWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$$$$", @"Ignoring blacklisted certificate \"", alias, @"\" CN: \"", cn, @"\" OU: \"", ou, @"\" s/n: ", [((JavaMathBigInteger *) nil_chk(serial)) toStringWithInt:16]), nil);
                }
              }
            }
            else {
              NetI2pCryptoKeyStoreUtil_infoWithNSString_(@"null encoding!!!");
            }
          }
        }
      }
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
    }
    if (![toRemove isEmpty]) {
      NetI2pCryptoKeyStoreUtil__blacklistLogged = true;
      for (NSString * __strong alias in toRemove) {
        @try {
          [((JavaSecurityKeyStore *) nil_chk(ks)) deleteEntryWithNSString:alias];
        }
        @catch (JavaSecurityGeneralSecurityException *e) {
        }
      }
    }
    return [toRemove size];
  }
}

jint NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(JavaIoFile *dir, JavaSecurityKeyStore *ks) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NetI2pCryptoKeyStoreUtil_infoWithNSString_(JreStrcat("$$", @"Looking for X509 Certificates in ", [((JavaIoFile *) nil_chk(dir)) getAbsolutePath]));
  jint added = 0;
  if ([dir exists] && [dir isDirectory]) {
    IOSObjectArray *files = [dir listFiles];
    if (files != nil) {
      JavaSecurityCertCertStore *cs = NetI2pCryptoCertUtil_loadCRLs();
      for (jint i = 0; i < files->size_; i++) {
        JavaIoFile *f = IOSObjectArray_Get(files, i);
        if (![((JavaIoFile *) nil_chk(f)) isFile]) continue;
        NSString *alias = [((NSString *) nil_chk([f getName])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        if ([((NSString *) nil_chk(alias)) java_hasSuffix:@".crt"] || [alias java_hasSuffix:@".pem"] || [alias java_hasSuffix:@".key"] || [alias java_hasSuffix:@".der"] || [alias java_hasSuffix:@".key"] || [alias java_hasSuffix:@".p7b"] || [alias java_hasSuffix:@".p7c"] || [alias java_hasSuffix:@".pfx"] || [alias java_hasSuffix:@".p12"] || [alias java_hasSuffix:@".cer"]) alias = [alias java_substring:0 endIndex:[alias java_length] - 4];
        jboolean success = NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_withJavaSecurityCertCertStore_(f, alias, ks, cs);
        if (success) added++;
      }
    }
  }
  return added;
}

jboolean NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_(JavaIoFile *file, NSString *alias, JavaSecurityKeyStore *ks) {
  NetI2pCryptoKeyStoreUtil_initialize();
  return NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_withJavaSecurityCertCertStore_(file, alias, ks, nil);
}

jboolean NetI2pCryptoKeyStoreUtil_addCertWithJavaIoFile_withNSString_withJavaSecurityKeyStore_withJavaSecurityCertCertStore_(JavaIoFile *file, NSString *alias, JavaSecurityKeyStore *ks, JavaSecurityCertCertStore *cs) {
  NetI2pCryptoKeyStoreUtil_initialize();
  @try {
    JavaSecurityCertX509Certificate *cert = NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(file);
    NetI2pCryptoKeyStoreUtil_infoWithNSString_(JreStrcat("$$$@$$$@$@", @"Read X509 Certificate from ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath], @" Issuer: ", [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal], @" Serial: ", [((JavaMathBigInteger *) nil_chk([cert getSerialNumber])) toStringWithInt:16], @"; Valid From: ", [cert getNotBefore], @" To: ", [cert getNotAfter]));
    if (cs != nil && NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertStore_withJavaSecurityCertCertificate_(cs, cert)) {
      NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Certificate is revoked: ", file), create_JavaLangException_init());
      return false;
    }
    [((JavaSecurityKeyStore *) nil_chk(ks)) setCertificateEntryWithNSString:alias withJavaSecurityCertCertificate:cert];
    NetI2pCryptoKeyStoreUtil_infoWithNSString_(JreStrcat("$@", @"Now trusting X509 Certificate, Issuer: ", [cert getIssuerX500Principal]));
  }
  @catch (JavaSecurityCertCertificateExpiredException *cee) {
    NSString *s = JreStrcat("$$", @"Rejecting expired X509 Certificate: ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]);
    NetI2pCryptoKeyStoreUtil_warnWithNSString_withJavaLangThrowable_(s, cee);
    return false;
  }
  @catch (JavaSecurityCertCertificateNotYetValidException *cnyve) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Rejecting X509 Certificate not yet valid: ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), cnyve);
    return false;
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error reading X509 Certificate: ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), gse);
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error reading X509 Certificate: ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), ioe);
    return false;
  }
  return true;
}

NSString *NetI2pCryptoKeyStoreUtil_randomString() {
  NetI2pCryptoKeyStoreUtil_initialize();
  NetI2pI2PAppContext *ctx = NetI2pI2PAppContext_getGlobalContext();
  IOSByteArray *rand = [IOSByteArray arrayWithLength:30];
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) random])) nextBytesWithByteArray:rand];
  return NetI2pDataBase32_encodeWithByteArray_(rand);
}

jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_(JavaIoFile *ks, NSString *alias, NSString *cname, NSString *ou, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jboolean isCA = ![((NSString *) nil_chk(cname)) java_contains:@"@"] && ![cname java_hasSuffix:@".family.i2p.net"] && [((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) isAvailable];
  NSString *alg = isCA ? NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_ALGORITHM : NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_ALGORITHM;
  jint sz = isCA ? NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_SIZE : NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_SIZE;
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, alias, cname, nil, ou, NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_VALID_DAYS, alg, sz, keyPW);
}

jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withJavaUtilSet_withNSString_withNSString_(JavaIoFile *ks, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jboolean isCA = ![((NSString *) nil_chk(cname)) java_contains:@"@"] && ![cname java_hasSuffix:@".family.i2p.net"] && [((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) isAvailable];
  NSString *alg = isCA ? NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_ALGORITHM : NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_ALGORITHM;
  jint sz = isCA ? NetI2pCryptoKeyStoreUtil_DEFAULT_CA_KEY_SIZE : NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_SIZE;
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD, alias, cname, altNames, ou, NetI2pCryptoKeyStoreUtil_DEFAULT_KEY_VALID_DAYS, alg, sz, keyPW);
}

jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  return NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, nil, ou, validDays, keyAlg, keySize, keyPW);
}

jboolean NetI2pCryptoKeyStoreUtil_createKeysWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  jboolean useKeytool = [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBooleanPropertyWithNSString:@"crypto.useExternalKeytool"];
  if (useKeytool) {
    if (altNames != nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"can't do SAN in keytool");
    return NetI2pCryptoKeyStoreUtil_createKeysCLIWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, ou, validDays, keyAlg, keySize, keyPW);
  }
  else {
    @try {
      NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, altNames, ou, validDays, keyAlg, keySize, keyPW);
      return true;
    }
    @catch (JavaSecurityGeneralSecurityException *gse) {
      NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Create keys error", gse);
      return false;
    }
    @catch (JavaIoIOException *ioe) {
      NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Create keys error", ioe);
      return false;
    }
  }
}

IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(ks, ksPW, alias, cname, nil, ou, validDays, keyAlg, keySize, keyPW);
}

IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NSString *algoName = NetI2pCryptoKeyStoreUtil_getSigAlgWithInt_withNSString_(keySize, keyAlg);
  NetI2pCryptoSigType *type = nil;
  for (NetI2pCryptoSigType * __strong t in nil_chk(JavaUtilEnumSet_allOfWithIOSClass_(NetI2pCryptoSigType_class_()))) {
    if ([((NSString *) nil_chk([((NetI2pCryptoSigType *) nil_chk(t)) getAlgorithmName])) isEqual:algoName]) {
      type = t;
      break;
    }
  }
  if (type == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$CI", @"Unsupported algorithm/size: ", keyAlg, '/', keySize));
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(ks, ksPW, alias, cname, altNames, ou, validDays, type, keyPW);
}

IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NetI2pCryptoSigType *type, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  return NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(ks, ksPW, alias, cname, nil, ou, validDays, type, keyPW);
}

IOSObjectArray *NetI2pCryptoKeyStoreUtil_createKeysAndCRLWithJavaIoFile_withNSString_withNSString_withNSString_withJavaUtilSet_withNSString_withInt_withNetI2pCryptoSigType_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, jint validDays, NetI2pCryptoSigType *type, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoFile *dir = [((JavaIoFile *) nil_chk(ks)) getParentFile];
  if (dir != nil && ![dir exists]) {
    JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithNSString_([dir getAbsolutePath]);
    if (![sdir mkdirs]) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Can't create directory ", dir));
  }
  IOSObjectArray *rv = NetI2pCryptoSelfSignedGenerator_generateWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(cname, altNames, ou, @"I2P", @"I2P Anonymous Network", nil, nil, validDays, type);
  id<JavaSecurityPrivateKey> jpriv = (id<JavaSecurityPrivateKey>) cast_check(IOSObjectArray_Get(nil_chk(rv), 1), JavaSecurityPrivateKey_class_());
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(rv, 2), [JavaSecurityCertX509Certificate class]);
  id<JavaUtilList> certs = JavaUtilCollections_singletonListWithId_(cert);
  NetI2pCryptoKeyStoreUtil_storePrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaUtilList_(ks, ksPW, alias, keyPW, jpriv, certs);
  return rv;
}

jboolean NetI2pCryptoKeyStoreUtil_createKeysCLIWithJavaIoFile_withNSString_withNSString_withNSString_withNSString_withInt_withNSString_withInt_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *cname, NSString *ou, jint validDays, NSString *keyAlg, jint keySize, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  if ([((JavaIoFile *) nil_chk(ks)) exists]) {
    @try {
      if (NetI2pCryptoKeyStoreUtil_getCertWithJavaIoFile_withNSString_withNSString_(ks, ksPW, alias) != nil) {
        NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"Not overwriting key ", alias, @", already exists in ", ks), nil);
        return false;
      }
    }
    @catch (JavaIoIOException *e) {
      NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"Not overwriting key \"", alias, @"\", already exists in ", ks), e);
      return false;
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"Not overwriting key \"", alias, @"\", already exists in ", ks), e);
      return false;
    }
  }
  else {
    JavaIoFile *dir = [ks getParentFile];
    if (dir != nil && ![dir exists]) {
      JavaIoFile *sdir = create_NetI2pUtilSecureDirectory_initWithNSString_([dir getAbsolutePath]);
      if (![sdir mkdir]) {
        NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Can't create directory ", dir), nil);
        return false;
      }
    }
  }
  NSString *keytool = [(create_JavaIoFile_initWithNSString_withNSString_(JavaLangSystem_getPropertyWithNSString_(@"java.home"), @"bin/keytool")) getAbsolutePath];
  id<JavaUtilList> a = create_JavaUtilArrayList_initWithInt_(32);
  [a addWithId:keytool];
  [a addWithId:@"-genkey"];
  [a addWithId:@"-storetype"];
  [a addWithId:JavaSecurityKeyStore_getDefaultType()];
  [a addWithId:@"-keystore"];
  [a addWithId:[ks getAbsolutePath]];
  [a addWithId:@"-storepass"];
  [a addWithId:ksPW];
  [a addWithId:@"-alias"];
  [a addWithId:alias];
  [a addWithId:@"-dname"];
  [a addWithId:JreStrcat("$$$$$", @"CN=", cname, @",OU=", ou, @",O=I2P Anonymous Network,L=XX,ST=XX,C=XX")];
  [a addWithId:@"-validity"];
  [a addWithId:JavaLangInteger_toStringWithInt_(validDays)];
  [a addWithId:@"-keyalg"];
  [a addWithId:keyAlg];
  [a addWithId:@"-sigalg"];
  [a addWithId:NetI2pCryptoKeyStoreUtil_getSigAlgWithInt_withNSString_(keySize, keyAlg)];
  [a addWithId:@"-keysize"];
  [a addWithId:JavaLangInteger_toStringWithInt_(keySize)];
  [a addWithId:@"-keypass"];
  [a addWithId:keyPW];
  if ([((NSString *) nil_chk(keyAlg)) isEqual:@"Ed"] || [keyAlg isEqual:@"EdDSA"] || [keyAlg isEqual:@"ElGamal"]) {
    JavaIoFile *f = [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBaseDir];
    f = create_JavaIoFile_initWithJavaIoFile_withNSString_(f, @"lib");
    f = create_JavaIoFile_initWithJavaIoFile_withNSString_(f, @"i2p.jar");
    [a addWithId:@"-providerpath"];
    [a addWithId:[f getAbsolutePath]];
    [a addWithId:@"-providerclass"];
    [a addWithId:@"net.i2p.crypto.provider.I2PProvider"];
  }
  IOSObjectArray *args = [a toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[a size] type:NSString_class_()]];
  jboolean success = [(create_NetI2pUtilShellCommand_init()) executeSilentAndWaitTimedWithNSStringArray:args withInt:240];
  if (success) {
    success = [ks exists];
    if (success) {
      @try {
        success = (NetI2pCryptoKeyStoreUtil_getPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_(ks, ksPW, alias, keyPW) != nil);
        if (!success) NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Key gen failed to get private key", nil);
      }
      @catch (JavaIoIOException *e) {
        NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Key gen failed to get private key", e);
        success = false;
      }
      @catch (JavaSecurityGeneralSecurityException *e) {
        NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Key gen failed to get private key", e);
        success = false;
      }
    }
    if (!success) NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Key gen failed for unknown reasons", nil);
  }
  if (success) {
    NetI2pUtilSecureFileOutputStream_setPermsWithJavaIoFile_(ks);
    NetI2pCryptoKeyStoreUtil_infoWithNSString_(JreStrcat("$$$$", @"Created self-signed certificate for ", cname, @" in keystore: ", [ks getAbsolutePath]));
  }
  else {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'"'])) appendWithNSString:IOSObjectArray_Get(args, i)])) appendWithNSString:@"\" "];
    }
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Failed to generate keys using command line: ", buf), nil);
  }
  return success;
}

NSString *NetI2pCryptoKeyStoreUtil_getSigAlgWithInt_withNSString_(jint size, NSString *keyalg) {
  NetI2pCryptoKeyStoreUtil_initialize();
  if ([((NSString *) nil_chk(keyalg)) isEqual:@"EC"]) keyalg = @"ECDSA";
  else if ([keyalg isEqual:@"Ed"]) keyalg = @"EdDSA";
  NSString *hash_;
  if ([keyalg isEqual:@"ECDSA"]) {
    if (size <= 256) hash_ = @"SHA256";
    else if (size <= 384) hash_ = @"SHA384";
    else hash_ = @"SHA512";
  }
  else if ([keyalg isEqual:@"EdDSA"]) {
    hash_ = @"SHA512";
  }
  else {
    if (size <= 1024) hash_ = @"SHA1";
    else if (size <= 2048) hash_ = @"SHA256";
    else if (size <= 3072) hash_ = @"SHA384";
    else hash_ = @"SHA512";
  }
  return JreStrcat("$$$", hash_, @"with", keyalg);
}

id<JavaSecurityPrivateKey> NetI2pCryptoKeyStoreUtil_getPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoInputStream *fis = nil;
  @try {
    JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ks);
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:fis withCharArray:pwchars];
    IOSCharArray *keypwchars = [((NSString *) nil_chk(keyPW)) java_toCharArray];
    return (id<JavaSecurityPrivateKey>) cast_check([keyStore getKeyWithNSString:alias withCharArray:keypwchars], JavaSecurityPrivateKey_class_());
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

void NetI2pCryptoKeyStoreUtil_exportPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoOutputStream_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, JavaIoOutputStream *outArg) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoInputStream *fis = nil;
  @try {
    JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ks);
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:fis withCharArray:pwchars];
    IOSCharArray *keypwchars = [((NSString *) nil_chk(keyPW)) java_toCharArray];
    id<JavaSecurityPrivateKey> pk = (id<JavaSecurityPrivateKey>) cast_check([keyStore getKeyWithNSString:alias withCharArray:keypwchars], JavaSecurityPrivateKey_class_());
    if (pk == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$", @"private key not found: ", alias));
    IOSObjectArray *certs = [keyStore getCertificateChainWithNSString:alias];
    NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaIoOutputStream_(pk, certs, outArg);
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

JavaSecurityCertX509Certificate *NetI2pCryptoKeyStoreUtil_renewPrivateKeyCertificateWithJavaIoFile_withNSString_withNSString_withNSString_withInt_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, jint validDays) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoInputStream *fis = nil;
  JavaIoOutputStream *fos = nil;
  @try {
    JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ks);
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:fis withCharArray:pwchars];
    @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    fis = nil;
    IOSCharArray *keypwchars = [((NSString *) nil_chk(keyPW)) java_toCharArray];
    if (alias == nil) {
      for (id<JavaUtilEnumeration> e = [keyStore aliases]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
        alias = [e nextElement];
        break;
      }
      if (alias == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"no private keys found");
    }
    id<JavaSecurityPrivateKey> pk = (id<JavaSecurityPrivateKey>) cast_check([keyStore getKeyWithNSString:alias withCharArray:keypwchars], JavaSecurityPrivateKey_class_());
    if (pk == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$", @"private key not found: ", alias));
    IOSObjectArray *certs = [keyStore getCertificateChainWithNSString:alias];
    if (((IOSObjectArray *) nil_chk(certs))->size_ != 1) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"Bad cert chain length");
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(certs, 0), [JavaSecurityCertX509Certificate class]);
    IOSObjectArray *rv = NetI2pCryptoSelfSignedGenerator_renewWithJavaSecurityCertX509Certificate_withJavaSecurityPrivateKey_withInt_(cert, pk, validDays);
    cert = (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(rv), 2), [JavaSecurityCertX509Certificate class]);
    IOSObjectArray_Set(certs, 0, cert);
    [keyStore setKeyEntryWithNSString:alias withJavaSecurityKey:pk withCharArray:keypwchars withJavaSecurityCertCertificateArray:certs];
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(ks);
    [keyStore storeWithJavaIoOutputStream:fos withCharArray:pwchars];
    return cert;
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

NSString *NetI2pCryptoKeyStoreUtil_importPrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaIoInputStream_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, JavaIoInputStream *inArg) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoOutputStream *fos = nil;
  @try {
    JavaSecurityKeyStore *keyStore = NetI2pCryptoKeyStoreUtil_createKeyStoreWithJavaIoFile_withNSString_(ks, ksPW);
    id<JavaSecurityPrivateKey> pk = NetI2pCryptoCertUtil_loadPrivateKeyWithJavaIoInputStream_(inArg);
    id<JavaUtilList> certs = NetI2pCryptoCertUtil_loadCertsWithJavaIoInputStream_(inArg);
    if (alias == nil) {
      alias = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_([((id<JavaUtilList>) nil_chk(certs)) getWithInt:0], @"CN");
      if (alias == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"no alias specified and no Subject CN in cert");
      if ([alias java_hasSuffix:@".family.i2p.net"] && [alias java_length] > [@".family.i2p.net" java_length]) alias = [alias java_substring:0 endIndex:[@".family.i2p.net" java_length]];
    }
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) setKeyEntryWithNSString:alias withJavaSecurityKey:pk withCharArray:[((NSString *) nil_chk(keyPW)) java_toCharArray] withJavaSecurityCertCertificateArray:[((id<JavaUtilList>) nil_chk(certs)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[certs size] type:JavaSecurityCertCertificate_class_()]]];
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(ks);
    [keyStore storeWithJavaIoOutputStream:fos withCharArray:pwchars];
    return alias;
  }
  @finally {
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    @try {
      [((JavaIoInputStream *) nil_chk(inArg)) close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

void NetI2pCryptoKeyStoreUtil_storePrivateKeyWithJavaIoFile_withNSString_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaUtilList_(JavaIoFile *ks, NSString *ksPW, NSString *alias, NSString *keyPW, id<JavaSecurityPrivateKey> pk, id<JavaUtilList> certs) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoOutputStream *fos = nil;
  @try {
    JavaSecurityKeyStore *keyStore = NetI2pCryptoKeyStoreUtil_createKeyStoreWithJavaIoFile_withNSString_(ks, ksPW);
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) setKeyEntryWithNSString:alias withJavaSecurityKey:pk withCharArray:[((NSString *) nil_chk(keyPW)) java_toCharArray] withJavaSecurityCertCertificateArray:[((id<JavaUtilList>) nil_chk(certs)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[certs size] type:JavaSecurityCertCertificate_class_()]]];
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(ks);
    [keyStore storeWithJavaIoOutputStream:fos withCharArray:pwchars];
  }
  @finally {
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

JavaSecurityCertCertificate *NetI2pCryptoKeyStoreUtil_getCertWithJavaIoFile_withNSString_withNSString_(JavaIoFile *ks, NSString *ksPW, NSString *alias) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoInputStream *fis = nil;
  @try {
    JavaSecurityKeyStore *keyStore = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(ks);
    IOSCharArray *pwchars = ksPW != nil ? [ksPW java_toCharArray] : nil;
    [((JavaSecurityKeyStore *) nil_chk(keyStore)) load__WithJavaIoInputStream:fis withCharArray:pwchars];
    return [keyStore getCertificateWithNSString:alias];
  }
  @finally {
    if (fis != nil) @try {
      [fis close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jboolean NetI2pCryptoKeyStoreUtil_exportCertWithJavaIoFile_withNSString_withNSString_withJavaIoFile_(JavaIoFile *ks, NSString *ksPW, NSString *alias, JavaIoFile *certFile) {
  NetI2pCryptoKeyStoreUtil_initialize();
  JavaIoInputStream *fis = nil;
  @try {
    JavaSecurityCertCertificate *cert = NetI2pCryptoKeyStoreUtil_getCertWithJavaIoFile_withNSString_withNSString_(ks, ksPW, alias);
    if (cert != nil) return NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(cert, certFile);
  }
  @catch (JavaSecurityGeneralSecurityException *gse) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Error saving ASCII SSL keys", gse);
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(@"Error saving ASCII SSL keys", ioe);
  }
  return false;
}

void NetI2pCryptoKeyStoreUtil_infoWithNSString_(NSString *msg) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext_getGlobalContext(), NetI2pUtilLog_INFO, msg, nil);
}

void NetI2pCryptoKeyStoreUtil_warnWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext_getGlobalContext(), NetI2pUtilLog_WARN, msg, t);
}

void NetI2pCryptoKeyStoreUtil_errorWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *t) {
  NetI2pCryptoKeyStoreUtil_initialize();
  NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext_getGlobalContext(), NetI2pUtilLog_ERROR, msg, t);
}

void NetI2pCryptoKeyStoreUtil_logWithNetI2pI2PAppContext_withInt_withNSString_withJavaLangThrowable_(NetI2pI2PAppContext *ctx, jint level, NSString *msg, JavaLangThrowable *t) {
  NetI2pCryptoKeyStoreUtil_initialize();
  if (level >= NetI2pUtilLog_WARN && ![((NetI2pI2PAppContext *) nil_chk(ctx)) isRouterContext]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:msg];
    if (t != nil) [t printStackTrace];
  }
  NetI2pUtilLog *l = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pCryptoKeyStoreUtil_class_()];
  [((NetI2pUtilLog *) nil_chk(l)) logWithInt:level withNSString:msg withJavaLangThrowable:t];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoKeyStoreUtil)
