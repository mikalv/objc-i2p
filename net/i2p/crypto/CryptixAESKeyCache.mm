//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/CryptixAESKeyCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/crypto/CryptixAESKeyCache.h"
#include "net/i2p/crypto/CryptixRijndael_Algorithm.h"

@interface NetI2pCryptoCryptixAESKeyCache () {
 @public
  JavaUtilConcurrentLinkedBlockingQueue *_availableKeys_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoCryptixAESKeyCache, _availableKeys_, JavaUtilConcurrentLinkedBlockingQueue *)

inline jint NetI2pCryptoCryptixAESKeyCache_get_KEYSIZE(void);
#define NetI2pCryptoCryptixAESKeyCache_KEYSIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixAESKeyCache, KEYSIZE, jint)

inline jint NetI2pCryptoCryptixAESKeyCache_get_BLOCKSIZE(void);
#define NetI2pCryptoCryptixAESKeyCache_BLOCKSIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixAESKeyCache, BLOCKSIZE, jint)

inline jint NetI2pCryptoCryptixAESKeyCache_get_ROUNDS(void);
static jint NetI2pCryptoCryptixAESKeyCache_ROUNDS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pCryptoCryptixAESKeyCache, ROUNDS, jint)

inline jint NetI2pCryptoCryptixAESKeyCache_get_BC(void);
#define NetI2pCryptoCryptixAESKeyCache_BC 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixAESKeyCache, BC, jint)

inline jint NetI2pCryptoCryptixAESKeyCache_get_KC(void);
#define NetI2pCryptoCryptixAESKeyCache_KC 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixAESKeyCache, KC, jint)

inline jint NetI2pCryptoCryptixAESKeyCache_get_MAX_KEYS(void);
#define NetI2pCryptoCryptixAESKeyCache_MAX_KEYS 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixAESKeyCache, MAX_KEYS, jint)

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$2(void);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoCryptixAESKeyCache)

@implementation NetI2pCryptoCryptixAESKeyCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoCryptixAESKeyCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *)acquireKey {
  NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *rv = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_availableKeys_)) poll];
  if (rv != nil) return rv;
  return NetI2pCryptoCryptixAESKeyCache_createNew();
}

- (void)releaseKeyWithNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry:(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *)key {
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_availableKeys_)) offerWithId:key];
}

+ (NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *)createNew {
  return NetI2pCryptoCryptixAESKeyCache_createNew();
}

- (void)dealloc {
  RELEASE_(_availableKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, 4, -1 },
    { NULL, "LNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;", 0x19, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acquireKey);
  methods[2].selector = @selector(releaseKeyWithNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry:);
  methods[3].selector = @selector(createNew);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_availableKeys_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "KEYSIZE", "I", .constantValue.asInt = NetI2pCryptoCryptixAESKeyCache_KEYSIZE, 0x1a, -1, -1, -1, -1 },
    { "BLOCKSIZE", "I", .constantValue.asInt = NetI2pCryptoCryptixAESKeyCache_BLOCKSIZE, 0x1a, -1, -1, -1, -1 },
    { "ROUNDS", "I", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "BC", "I", .constantValue.asInt = NetI2pCryptoCryptixAESKeyCache_BC, 0x1a, -1, -1, -1, -1 },
    { "KC", "I", .constantValue.asInt = NetI2pCryptoCryptixAESKeyCache_KC, 0x1a, -1, -1, -1, -1 },
    { "MAX_KEYS", "I", .constantValue.asInt = NetI2pCryptoCryptixAESKeyCache_MAX_KEYS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&NetI2pCryptoCryptixAESKeyCache__Annotations$0, (void *)&NetI2pCryptoCryptixAESKeyCache__Annotations$1, "releaseKey", "LNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;", (void *)&NetI2pCryptoCryptixAESKeyCache__Annotations$2, "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/crypto/CryptixAESKeyCache$KeyCacheEntry;>;", &NetI2pCryptoCryptixAESKeyCache_ROUNDS };
  static const J2ObjcClassInfo _NetI2pCryptoCryptixAESKeyCache = { "CryptixAESKeyCache", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 4, 7, -1, 3, -1, -1, -1 };
  return &_NetI2pCryptoCryptixAESKeyCache;
}

+ (void)initialize {
  if (self == [NetI2pCryptoCryptixAESKeyCache class]) {
    NetI2pCryptoCryptixAESKeyCache_ROUNDS = NetI2pCryptoCryptixRijndael_Algorithm_getRoundsWithInt_withInt_(NetI2pCryptoCryptixAESKeyCache_KEYSIZE, NetI2pCryptoCryptixAESKeyCache_BLOCKSIZE);
    J2OBJC_SET_INITIALIZED(NetI2pCryptoCryptixAESKeyCache)
  }
}

@end

void NetI2pCryptoCryptixAESKeyCache_init(NetI2pCryptoCryptixAESKeyCache *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_availableKeys_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(NetI2pCryptoCryptixAESKeyCache_MAX_KEYS));
}

NetI2pCryptoCryptixAESKeyCache *new_NetI2pCryptoCryptixAESKeyCache_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoCryptixAESKeyCache, init)
}

NetI2pCryptoCryptixAESKeyCache *create_NetI2pCryptoCryptixAESKeyCache_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoCryptixAESKeyCache, init)
}

NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *NetI2pCryptoCryptixAESKeyCache_createNew() {
  NetI2pCryptoCryptixAESKeyCache_initialize();
  NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *e = create_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_init();
  return e;
}

IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pCryptoCryptixAESKeyCache__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoCryptixAESKeyCache)

@implementation NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)rounds
                    withInt:(jint)bc {
  NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_initWithInt_withInt_(self, rounds, bc);
  return self;
}

- (void)dealloc {
  RELEASE_(Ke_);
  RELEASE_(Kd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Ke_", "[[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "Kd_", "[[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LNetI2pCryptoCryptixAESKeyCache;" };
  static const J2ObjcClassInfo _NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry = { "KeyCacheEntry", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x9, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;
}

@end

void NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_init(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->Ke_, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ JreLoadStatic(NetI2pCryptoCryptixAESKeyCache, ROUNDS) + 1, NetI2pCryptoCryptixAESKeyCache_BC }]);
  JreStrongAssignAndConsume(&self->Kd_, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ JreLoadStatic(NetI2pCryptoCryptixAESKeyCache, ROUNDS) + 1, NetI2pCryptoCryptixAESKeyCache_BC }]);
}

NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *new_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry, init)
}

NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *create_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry, init)
}

void NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_initWithInt_withInt_(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *self, jint rounds, jint bc) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->Ke_, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ rounds + 1, bc }]);
  JreStrongAssignAndConsume(&self->Kd_, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ rounds + 1, bc }]);
}

NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *new_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_initWithInt_withInt_(jint rounds, jint bc) {
  J2OBJC_NEW_IMPL(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry, initWithInt_withInt_, rounds, bc)
}

NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *create_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_initWithInt_withInt_(jint rounds, jint bc) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry, initWithInt_withInt_, rounds, bc)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry)
