//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/CryptixRijndael_Algorithm.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/InvalidKeyException.h"
#include "net/i2p/crypto/CryptixAESKeyCache.h"
#include "net/i2p/crypto/CryptixRijndael_Algorithm.h"

@interface NetI2pCryptoCryptixRijndael_Algorithm ()

+ (jint)mulWithInt:(jint)a
           withInt:(jint)b;

+ (jint)mul4WithInt:(jint)a
      withByteArray:(IOSByteArray *)b;

+ (NSString *)intToStringWithInt:(jint)n;

+ (NSString *)toStringWithByteArray:(IOSByteArray *)ba;

+ (NSString *)toStringWithIntArray:(IOSIntArray *)ia;

@end

inline jint NetI2pCryptoCryptixRijndael_Algorithm_get__BLOCK_SIZE(void);
#define NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoCryptixRijndael_Algorithm, _BLOCK_SIZE, jint)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__alog(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__alog;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _alog, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__log(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _log, IOSIntArray *)

inline IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm_get__S(void);
static IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm__S;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _S, IOSByteArray *)

inline IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm_get__Si(void);
static IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm__Si;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _Si, IOSByteArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T1(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T1, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T2(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T2, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T3(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T3, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T4(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T4, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T5(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T5;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T5, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T6(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T6;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T6, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T7(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T7;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T7, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__T8(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__T8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _T8, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__U1(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__U1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _U1, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__U2(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__U2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _U2, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__U3(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__U3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _U3, IOSIntArray *)

inline IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm_get__U4(void);
static IOSIntArray *NetI2pCryptoCryptixRijndael_Algorithm__U4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _U4, IOSIntArray *)

inline IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm_get__rcon(void);
static IOSByteArray *NetI2pCryptoCryptixRijndael_Algorithm__rcon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _rcon, IOSByteArray *)

inline IOSObjectArray *NetI2pCryptoCryptixRijndael_Algorithm_get__shifts(void);
static IOSObjectArray *NetI2pCryptoCryptixRijndael_Algorithm__shifts;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _shifts, IOSObjectArray *)

inline IOSCharArray *NetI2pCryptoCryptixRijndael_Algorithm_get__HEX_DIGITS(void);
static IOSCharArray *NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoCryptixRijndael_Algorithm, _HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static jint NetI2pCryptoCryptixRijndael_Algorithm_mulWithInt_withInt_(jint a, jint b);

__attribute__((unused)) static jint NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(jint a, IOSByteArray *b);

__attribute__((unused)) static NSString *NetI2pCryptoCryptixRijndael_Algorithm_intToStringWithInt_(jint n);

__attribute__((unused)) static NSString *NetI2pCryptoCryptixRijndael_Algorithm_toStringWithByteArray_(IOSByteArray *ba);

__attribute__((unused)) static NSString *NetI2pCryptoCryptixRijndael_Algorithm_toStringWithIntArray_(IOSIntArray *ia);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoCryptixRijndael_Algorithm)

@implementation NetI2pCryptoCryptixRijndael_Algorithm

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoCryptixRijndael_Algorithm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)mulWithInt:(jint)a
           withInt:(jint)b {
  return NetI2pCryptoCryptixRijndael_Algorithm_mulWithInt_withInt_(a, b);
}

+ (jint)mul4WithInt:(jint)a
      withByteArray:(IOSByteArray *)b {
  return NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(a, b);
}

+ (id)makeKeyWithByteArray:(IOSByteArray *)k {
  return NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_(k);
}

+ (void)blockEncryptWithByteArray:(IOSByteArray *)inArg
                    withByteArray:(IOSByteArray *)result
                          withInt:(jint)inOffset
                          withInt:(jint)outOffset
                           withId:(id)sessionKey {
  NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(inArg, result, inOffset, outOffset, sessionKey);
}

+ (void)blockDecryptWithByteArray:(IOSByteArray *)inArg
                    withByteArray:(IOSByteArray *)result
                          withInt:(jint)inOffset
                          withInt:(jint)outOffset
                           withId:(id)sessionKey {
  NetI2pCryptoCryptixRijndael_Algorithm_blockDecryptWithByteArray_withByteArray_withInt_withInt_withId_(inArg, result, inOffset, outOffset, sessionKey);
}

+ (jint)blockSize {
  return NetI2pCryptoCryptixRijndael_Algorithm_blockSize();
}

+ (id)makeKeyWithByteArray:(IOSByteArray *)k
                   withInt:(jint)blockSize {
  return NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_(k, blockSize);
}

+ (id)makeKeyWithByteArray:(IOSByteArray *)k
                   withInt:(jint)blockSize
withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry:(NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *)keyData {
  return NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_(k, blockSize, keyData);
}

+ (void)blockEncryptWithByteArray:(IOSByteArray *)inArg
                    withByteArray:(IOSByteArray *)result
                          withInt:(jint)inOffset
                          withInt:(jint)outOffset
                           withId:(id)sessionKey
                          withInt:(jint)blockSize {
  NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_withInt_(inArg, result, inOffset, outOffset, sessionKey, blockSize);
}

+ (void)blockDecryptWithByteArray:(IOSByteArray *)inArg
                    withByteArray:(IOSByteArray *)result
                          withInt:(jint)inOffset
                          withInt:(jint)outOffset
                           withId:(id)sessionKey
                          withInt:(jint)blockSize {
  NetI2pCryptoCryptixRijndael_Algorithm_blockDecryptWithByteArray_withByteArray_withInt_withInt_withId_withInt_(inArg, result, inOffset, outOffset, sessionKey, blockSize);
}

+ (jint)getRoundsWithInt:(jint)keySize
                 withInt:(jint)blockSize {
  return NetI2pCryptoCryptixRijndael_Algorithm_getRoundsWithInt_withInt_(keySize, blockSize);
}

+ (NSString *)intToStringWithInt:(jint)n {
  return NetI2pCryptoCryptixRijndael_Algorithm_intToStringWithInt_(n);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)ba {
  return NetI2pCryptoCryptixRijndael_Algorithm_toStringWithByteArray_(ba);
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)ia {
  return NetI2pCryptoCryptixRijndael_Algorithm_toStringWithIntArray_(ia);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1a, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1a, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x19, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x19, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x19, 4, 10, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x19, 4, 11, 6, -1, -1, -1 },
    { NULL, "V", 0x19, 7, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 9, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 13, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 16, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mulWithInt:withInt:);
  methods[2].selector = @selector(mul4WithInt:withByteArray:);
  methods[3].selector = @selector(makeKeyWithByteArray:);
  methods[4].selector = @selector(blockEncryptWithByteArray:withByteArray:withInt:withInt:withId:);
  methods[5].selector = @selector(blockDecryptWithByteArray:withByteArray:withInt:withInt:withId:);
  methods[6].selector = @selector(blockSize);
  methods[7].selector = @selector(makeKeyWithByteArray:withInt:);
  methods[8].selector = @selector(makeKeyWithByteArray:withInt:withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry:);
  methods[9].selector = @selector(blockEncryptWithByteArray:withByteArray:withInt:withInt:withId:withInt:);
  methods[10].selector = @selector(blockDecryptWithByteArray:withByteArray:withInt:withInt:withId:withInt:);
  methods[11].selector = @selector(getRoundsWithInt:withInt:);
  methods[12].selector = @selector(intToStringWithInt:);
  methods[13].selector = @selector(toStringWithByteArray:);
  methods[14].selector = @selector(toStringWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_BLOCK_SIZE", "I", .constantValue.asInt = NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_alog", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "_log", "[I", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "_S", "[B", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "_Si", "[B", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "_T1", "[I", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "_T2", "[I", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "_T3", "[I", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "_T4", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "_T5", "[I", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "_T6", "[I", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "_T7", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "_T8", "[I", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "_U1", "[I", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "_U2", "[I", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "_U3", "[I", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "_U4", "[I", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "_rcon", "[B", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "_shifts", "[[[I", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "_HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
  };
  static const void *ptrTable[] = { "mul", "II", "mul4", "I[B", "makeKey", "[B", "LJavaSecurityInvalidKeyException;", "blockEncrypt", "[B[BIILNSObject;", "blockDecrypt", "[BI", "[BILNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry;", "[B[BIILNSObject;I", "getRounds", "intToString", "I", "toString", "[I", &NetI2pCryptoCryptixRijndael_Algorithm__alog, &NetI2pCryptoCryptixRijndael_Algorithm__log, &NetI2pCryptoCryptixRijndael_Algorithm__S, &NetI2pCryptoCryptixRijndael_Algorithm__Si, &NetI2pCryptoCryptixRijndael_Algorithm__T1, &NetI2pCryptoCryptixRijndael_Algorithm__T2, &NetI2pCryptoCryptixRijndael_Algorithm__T3, &NetI2pCryptoCryptixRijndael_Algorithm__T4, &NetI2pCryptoCryptixRijndael_Algorithm__T5, &NetI2pCryptoCryptixRijndael_Algorithm__T6, &NetI2pCryptoCryptixRijndael_Algorithm__T7, &NetI2pCryptoCryptixRijndael_Algorithm__T8, &NetI2pCryptoCryptixRijndael_Algorithm__U1, &NetI2pCryptoCryptixRijndael_Algorithm__U2, &NetI2pCryptoCryptixRijndael_Algorithm__U3, &NetI2pCryptoCryptixRijndael_Algorithm__U4, &NetI2pCryptoCryptixRijndael_Algorithm__rcon, &NetI2pCryptoCryptixRijndael_Algorithm__shifts, &NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS };
  static const J2ObjcClassInfo _NetI2pCryptoCryptixRijndael_Algorithm = { "CryptixRijndael_Algorithm", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 15, 20, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoCryptixRijndael_Algorithm;
}

+ (void)initialize {
  if (self == [NetI2pCryptoCryptixRijndael_Algorithm class]) {
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__alog, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__log, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__S, [IOSByteArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__Si, [IOSByteArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T1, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T2, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T3, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T4, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T5, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T6, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T7, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__T8, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__U1, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__U2, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__U3, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__U4, [IOSIntArray newArrayWithLength:256]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__rcon, [IOSByteArray newArrayWithLength:30]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__shifts, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(jint[]){ 0, 0 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 1, 3 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 2, 2 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 3, 1 } count:2] } count:4 type:IOSClass_intArray(1)], [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(jint[]){ 0, 0 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 1, 5 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 2, 4 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 3, 3 } count:2] } count:4 type:IOSClass_intArray(1)], [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(jint[]){ 0, 0 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 1, 7 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 3, 5 } count:2], [IOSIntArray arrayWithInts:(jint[]){ 4, 4 } count:2] } count:4 type:IOSClass_intArray(1)] } count:3 type:IOSClass_intArray(2)]);
    JreStrongAssignAndConsume(&NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16]);
    {
      jint ROOT = (jint) 0x11B;
      jint i;
      jint j = 0;
      *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__alog, 0) = 1;
      for (i = 1; i < 256; i++) {
        j = (JreLShift32(IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__alog, i - 1), 1)) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__alog, i - 1);
        if ((j & (jint) 0x100) != 0) j ^= ROOT;
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__alog, i) = j;
      }
      for (i = 1; i < 255; i++) {
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__alog, i)) = i;
      }
      IOSObjectArray *A = [IOSObjectArray arrayWithObjects:(id[]){ [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 1, 1, 1, 0, 0, 0 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 0, 1, 1, 1, 1, 1, 0, 0 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 0, 0, 1, 1, 1, 1, 1, 0 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 0, 0, 0, 1, 1, 1, 1, 1 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 0, 0, 0, 1, 1, 1, 1 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 0, 0, 0, 1, 1, 1 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 1, 0, 0, 0, 1, 1 } count:8], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 1, 1, 0, 0, 0, 1 } count:8] } count:8 type:IOSClass_byteArray(1)];
      IOSByteArray *B = [IOSByteArray arrayWithBytes:(jbyte[]){ 0, 1, 1, 0, 0, 0, 1, 1 } count:8];
      jint t;
      IOSObjectArray *box = [IOSByteArray arrayWithDimensions:2 lengths:(jint[]){ 256, 8 }];
      *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(box, 1)), 7) = 1;
      for (i = 2; i < 256; i++) {
        j = IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__alog, 255 - IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, i));
        for (t = 0; t < 8; t++) {
          *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(box, i)), t) = (jbyte) ((JreURShift32(j, (7 - t))) & (jint) 0x01);
        }
      }
      IOSObjectArray *cox = [IOSByteArray arrayWithDimensions:2 lengths:(jint[]){ 256, 8 }];
      for (i = 0; i < 256; i++) {
        for (t = 0; t < 8; t++) {
          *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(cox, i)), t) = IOSByteArray_Get(B, t);
          for (j = 0; j < 8; j++) {
            *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(cox, i)), t) ^= IOSByteArray_Get(nil_chk(IOSObjectArray_Get(A, t)), j) * IOSByteArray_Get(nil_chk(IOSObjectArray_Get(box, i)), j);
          }
        }
      }
      for (i = 0; i < 256; i++) {
        *IOSByteArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__S, i) = (jbyte) (JreLShift32(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(cox, i)), 0), 7));
        for (t = 1; t < 8; t++) {
          *IOSByteArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__S, i) ^= JreLShift32(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(cox, i)), t), (7 - t));
        }
        *IOSByteArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__Si, IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, i) & (jint) 0xFF) = (jbyte) i;
      }
      IOSObjectArray *G = [IOSObjectArray arrayWithObjects:(id[]){ [IOSByteArray arrayWithBytes:(jbyte[]){ 2, 1, 1, 3 } count:4], [IOSByteArray arrayWithBytes:(jbyte[]){ 3, 2, 1, 1 } count:4], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 3, 2, 1 } count:4], [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, 3, 2 } count:4] } count:4 type:IOSClass_byteArray(1)];
      IOSObjectArray *AA = [IOSByteArray arrayWithDimensions:2 lengths:(jint[]){ 4, 8 }];
      for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
          *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, i)), j) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(G, i)), j);
        }
        *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, i)), i + 4) = 1;
      }
      jbyte pivot;
      jbyte tmp;
      IOSObjectArray *iG = [IOSByteArray arrayWithDimensions:2 lengths:(jint[]){ 4, 4 }];
      for (i = 0; i < 4; i++) {
        pivot = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), i);
        if (pivot == 0) {
          t = i + 1;
          while ((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, t)), i) == 0) && (t < 4)) t++;
          if (t == 4) @throw create_JavaLangRuntimeException_initWithNSString_(@"G matrix is not invertible");
          for (j = 0; j < 8; j++) {
            tmp = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), j);
            *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, i)), j) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, t)), j);
            *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, t)), j) = tmp;
          }
          pivot = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), i);
        }
        for (j = 0; j < 8; j++) {
          if (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), j) != 0) *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, i)), j) = (jbyte) IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__alog, (255 + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), j) & (jint) 0xFF) - IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, pivot & (jint) 0xFF)) % 255);
        }
        for (t = 0; t < 4; t++) {
          if (i != t) {
            for (j = i + 1; j < 8; j++) *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, t)), j) ^= NetI2pCryptoCryptixRijndael_Algorithm_mulWithInt_withInt_(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), j), IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, t)), i));
            *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(AA, t)), i) = 0;
          }
        }
      }
      for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
          *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(iG, i)), j) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(AA, i)), j + 4);
        }
      }
      jint s;
      for (t = 0; t < 256; t++) {
        s = IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, t);
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T1, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(G, 0));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T2, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(G, 1));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T3, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(G, 2));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T4, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(G, 3));
        s = IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, t);
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T5, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(iG, 0));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T6, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(iG, 1));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T7, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(iG, 2));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__T8, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(s, IOSObjectArray_Get(iG, 3));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__U1, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(t, IOSObjectArray_Get(iG, 0));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__U2, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(t, IOSObjectArray_Get(iG, 1));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__U3, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(t, IOSObjectArray_Get(iG, 2));
        *IOSIntArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__U4, t) = NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(t, IOSObjectArray_Get(iG, 3));
      }
      *IOSByteArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__rcon, 0) = 1;
      jint r = 1;
      for (t = 1; t < 30; ) {
        *IOSByteArray_GetRef(NetI2pCryptoCryptixRijndael_Algorithm__rcon, t++) = (jbyte) (r = NetI2pCryptoCryptixRijndael_Algorithm_mulWithInt_withInt_(2, r));
      }
    }
    J2OBJC_SET_INITIALIZED(NetI2pCryptoCryptixRijndael_Algorithm)
  }
}

@end

void NetI2pCryptoCryptixRijndael_Algorithm_init(NetI2pCryptoCryptixRijndael_Algorithm *self) {
  NSObject_init(self);
}

NetI2pCryptoCryptixRijndael_Algorithm *new_NetI2pCryptoCryptixRijndael_Algorithm_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoCryptixRijndael_Algorithm, init)
}

NetI2pCryptoCryptixRijndael_Algorithm *create_NetI2pCryptoCryptixRijndael_Algorithm_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoCryptixRijndael_Algorithm, init)
}

jint NetI2pCryptoCryptixRijndael_Algorithm_mulWithInt_withInt_(jint a, jint b) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  return (a != 0 && b != 0) ? IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__alog), (IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__log), a & (jint) 0xFF) + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, b & (jint) 0xFF)) % 255) : 0;
}

jint NetI2pCryptoCryptixRijndael_Algorithm_mul4WithInt_withByteArray_(jint a, IOSByteArray *b) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  if (a == 0) return 0;
  a = IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__log), a & (jint) 0xFF);
  jint a0 = (IOSByteArray_Get(nil_chk(b), 0) != 0) ? IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__alog), (a + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSByteArray_Get(b, 0) & (jint) 0xFF)) % 255) & (jint) 0xFF : 0;
  jint a1 = (IOSByteArray_Get(b, 1) != 0) ? IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__alog), (a + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSByteArray_Get(b, 1) & (jint) 0xFF)) % 255) & (jint) 0xFF : 0;
  jint a2 = (IOSByteArray_Get(b, 2) != 0) ? IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__alog), (a + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSByteArray_Get(b, 2) & (jint) 0xFF)) % 255) & (jint) 0xFF : 0;
  jint a3 = (IOSByteArray_Get(b, 3) != 0) ? IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__alog), (a + IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__log, IOSByteArray_Get(b, 3) & (jint) 0xFF)) % 255) & (jint) 0xFF : 0;
  return (JreLShift32(a0, 24)) | (JreLShift32(a1, 16)) | (JreLShift32(a2, 8)) | a3;
}

id NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_(IOSByteArray *k) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  return NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_(k, NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE);
}

void NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(IOSByteArray *inArg, IOSByteArray *result, jint inOffset, jint outOffset, id sessionKey) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  IOSObjectArray *Ke = ((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) nil_chk(((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) cast_chk(sessionKey, [NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry class]))))->Ke_;
  jint ROUNDS = ((IOSObjectArray *) nil_chk(Ke))->size_ - 1;
  IOSIntArray *Ker = IOSObjectArray_Get(Ke, 0);
  jint unseq$1 = inOffset++;
  jint unseq$2 = inOffset++;
  jint unseq$3 = inOffset++;
  jint t0 = ((JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(Ker), 0);
  jint unseq$4 = inOffset++;
  jint unseq$5 = inOffset++;
  jint unseq$6 = inOffset++;
  jint t1 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$4) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$5) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$6) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 1);
  jint unseq$7 = inOffset++;
  jint unseq$8 = inOffset++;
  jint unseq$9 = inOffset++;
  jint t2 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$7) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$8) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$9) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 2);
  jint unseq$10 = inOffset++;
  jint unseq$11 = inOffset++;
  jint unseq$12 = inOffset++;
  jint t3 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$10) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$11) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$12) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 3);
  jint a0;
  jint a1;
  jint a2;
  jint a3;
  for (jint r = 1; r < ROUNDS; r++) {
    Ker = IOSObjectArray_Get(Ke, r);
    a0 = (IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T1), (JreURShift32(t0, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T2), (JreURShift32(t1, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T3), (JreURShift32(t2, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T4), t3 & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(Ker), 0);
    a1 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T1, (JreURShift32(t1, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T2, (JreURShift32(t2, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T3, (JreURShift32(t3, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T4, t0 & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 1);
    a2 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T1, (JreURShift32(t2, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T2, (JreURShift32(t3, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T3, (JreURShift32(t0, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T4, t1 & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 2);
    a3 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T1, (JreURShift32(t3, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T2, (JreURShift32(t0, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T3, (JreURShift32(t1, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T4, t2 & (jint) 0xFF)) ^ IOSIntArray_Get(Ker, 3);
    t0 = a0;
    t1 = a1;
    t2 = a2;
    t3 = a3;
  }
  Ker = IOSObjectArray_Get(Ke, ROUNDS);
  jint tt = IOSIntArray_Get(nil_chk(Ker), 0);
  *IOSByteArray_GetRef(nil_chk(result), outOffset++) = (jbyte) (IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__S), (JreURShift32(t0, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t1, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t2, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, t3 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Ker, 1);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t1, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t2, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t3, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, t0 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Ker, 2);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t2, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t3, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t0, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, t1 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Ker, 3);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t3, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t0, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(t1, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, t2 & (jint) 0xFF) ^ tt);
}

void NetI2pCryptoCryptixRijndael_Algorithm_blockDecryptWithByteArray_withByteArray_withInt_withInt_withId_(IOSByteArray *inArg, IOSByteArray *result, jint inOffset, jint outOffset, id sessionKey) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  if (((IOSByteArray *) nil_chk(result))->size_ - outOffset <= 15) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"result too small: result.len=", result->size_, @" result.offset=", outOffset));
  if (((IOSByteArray *) nil_chk(inArg))->size_ - inOffset <= 15) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"data too small: ", inArg->size_, @" inOffset: ", inOffset));
  IOSObjectArray *Kd = ((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) nil_chk(((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) cast_chk(sessionKey, [NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry class]))))->Kd_;
  jint ROUNDS = ((IOSObjectArray *) nil_chk(Kd))->size_ - 1;
  IOSIntArray *Kdr = IOSObjectArray_Get(Kd, 0);
  jint unseq$1 = inOffset++;
  jint unseq$2 = inOffset++;
  jint unseq$3 = inOffset++;
  jint t0 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$1) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(Kdr), 0);
  jint unseq$4 = inOffset++;
  jint unseq$5 = inOffset++;
  jint unseq$6 = inOffset++;
  jint t1 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$4) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$5) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$6) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 1);
  jint unseq$7 = inOffset++;
  jint unseq$8 = inOffset++;
  jint unseq$9 = inOffset++;
  jint t2 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$7) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$8) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$9) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 2);
  jint unseq$10 = inOffset++;
  jint unseq$11 = inOffset++;
  jint unseq$12 = inOffset++;
  jint t3 = ((JreLShift32((IOSByteArray_Get(inArg, unseq$10) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$11) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$12) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 3);
  jint a0;
  jint a1;
  jint a2;
  jint a3;
  for (jint r = 1; r < ROUNDS; r++) {
    Kdr = IOSObjectArray_Get(Kd, r);
    a0 = (IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T5), (JreURShift32(t0, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T6), (JreURShift32(t3, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T7), (JreURShift32(t2, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T8), t1 & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(Kdr), 0);
    a1 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T5, (JreURShift32(t1, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T6, (JreURShift32(t0, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T7, (JreURShift32(t3, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T8, t2 & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 1);
    a2 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T5, (JreURShift32(t2, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T6, (JreURShift32(t1, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T7, (JreURShift32(t0, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T8, t3 & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 2);
    a3 = (IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T5, (JreURShift32(t3, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T6, (JreURShift32(t2, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T7, (JreURShift32(t1, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__T8, t0 & (jint) 0xFF)) ^ IOSIntArray_Get(Kdr, 3);
    t0 = a0;
    t1 = a1;
    t2 = a2;
    t3 = a3;
  }
  Kdr = IOSObjectArray_Get(Kd, ROUNDS);
  jint tt = IOSIntArray_Get(nil_chk(Kdr), 0);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__Si), (JreURShift32(t0, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t3, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t2, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, t1 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Kdr, 1);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t1, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t0, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t3, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, t2 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Kdr, 2);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t2, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t1, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t0, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, t3 & (jint) 0xFF) ^ tt);
  tt = IOSIntArray_Get(Kdr, 3);
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t3, 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t2, 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(t1, 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
  *IOSByteArray_GetRef(result, outOffset++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, t0 & (jint) 0xFF) ^ tt);
}

jint NetI2pCryptoCryptixRijndael_Algorithm_blockSize() {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  return NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE;
}

id NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_(IOSByteArray *k, jint blockSize) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  return NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_(k, blockSize, nil);
}

id NetI2pCryptoCryptixRijndael_Algorithm_makeKeyWithByteArray_withInt_withNetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_(IOSByteArray *k, jint blockSize, NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *keyData) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  if (k == nil) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"Empty key");
  if (!(k->size_ == 16 || k->size_ == 24 || k->size_ == 32)) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"Incorrect key length");
  jint ROUNDS = NetI2pCryptoCryptixRijndael_Algorithm_getRoundsWithInt_withInt_(k->size_, blockSize);
  jint BC = blockSize / 4;
  IOSObjectArray *Ke;
  IOSObjectArray *Kd;
  jint ROUND_KEY_COUNT = (ROUNDS + 1) * BC;
  jint KC = k->size_ / 4;
  IOSIntArray *tk = [IOSIntArray arrayWithLength:KC];
  jint i;
  jint j;
  if (keyData == nil) {
    keyData = create_NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry_initWithInt_withInt_(ROUNDS, BC);
  }
  Ke = keyData->Ke_;
  Kd = keyData->Kd_;
  for (i = 0, j = 0; i < KC; ) {
    jint unseq$1 = j++;
    jint unseq$2 = j++;
    jint unseq$3 = j++;
    *IOSIntArray_GetRef(tk, i++) = (JreLShift32((IOSByteArray_Get(k, unseq$1) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(k, unseq$2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(k, unseq$3) & (jint) 0xFF), 8)) | (IOSByteArray_Get(k, j++) & (jint) 0xFF);
  }
  jint t = 0;
  for (j = 0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(Ke), t / BC)), t % BC) = IOSIntArray_Get(tk, j);
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(Kd), ROUNDS - (t / BC))), t % BC) = IOSIntArray_Get(tk, j);
  }
  jint tt;
  jint rconpointer = 0;
  while (t < ROUND_KEY_COUNT) {
    tt = IOSIntArray_Get(tk, KC - 1);
    *IOSIntArray_GetRef(tk, 0) ^= JreLShift32((IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__S), (JreURShift32(tt, 16)) & (jint) 0xFF) & (jint) 0xFF), 24) ^ JreLShift32((IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(tt, 8)) & (jint) 0xFF) & (jint) 0xFF), 16) ^ JreLShift32((IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, tt & (jint) 0xFF) & (jint) 0xFF), 8) ^ (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(tt, 24)) & (jint) 0xFF) & (jint) 0xFF) ^ JreLShift32((IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__rcon), rconpointer++) & (jint) 0xFF), 24);
    if (KC != 8) {
      for (i = 1, j = 0; i < KC; ) {
        *IOSIntArray_GetRef(tk, i) ^= IOSIntArray_Get(tk, j++);
        i++;
      }
    }
    else {
      for (i = 1, j = 0; i < KC / 2; ) {
        *IOSIntArray_GetRef(tk, i) ^= IOSIntArray_Get(tk, j++);
        i++;
      }
      tt = IOSIntArray_Get(tk, KC / 2 - 1);
      *IOSIntArray_GetRef(tk, KC / 2) ^= (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, tt & (jint) 0xFF) & (jint) 0xFF) ^ JreLShift32((IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(tt, 8)) & (jint) 0xFF) & (jint) 0xFF), 8) ^ JreLShift32((IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(tt, 16)) & (jint) 0xFF) & (jint) 0xFF), 16) ^ JreLShift32((IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(tt, 24)) & (jint) 0xFF) & (jint) 0xFF), 24);
      for (j = KC / 2, i = j + 1; i < KC; ) {
        *IOSIntArray_GetRef(tk, i) ^= IOSIntArray_Get(tk, j++);
        i++;
      }
    }
    for (j = 0; (j < KC) && (t < ROUND_KEY_COUNT); j++, t++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(Ke), t / BC)), t % BC) = IOSIntArray_Get(tk, j);
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(Kd), ROUNDS - (t / BC))), t % BC) = IOSIntArray_Get(tk, j);
    }
  }
  for (jint r = 1; r < ROUNDS; r++) {
    for (j = 0; j < BC; j++) {
      tt = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(Kd), r)), j);
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(Kd, r)), j) = IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__U1), (JreURShift32(tt, 24)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__U2), (JreURShift32(tt, 16)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__U3), (JreURShift32(tt, 8)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__U4), tt & (jint) 0xFF);
    }
  }
  return keyData;
}

void NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_withInt_(IOSByteArray *inArg, IOSByteArray *result, jint inOffset, jint outOffset, id sessionKey, jint blockSize) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  if (blockSize == NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE) {
    NetI2pCryptoCryptixRijndael_Algorithm_blockEncryptWithByteArray_withByteArray_withInt_withInt_withId_(inArg, result, inOffset, outOffset, sessionKey);
    return;
  }
  IOSObjectArray *Ke = ((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) nil_chk(((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) cast_chk(sessionKey, [NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry class]))))->Ke_;
  jint BC = blockSize / 4;
  jint ROUNDS = ((IOSObjectArray *) nil_chk(Ke))->size_ - 1;
  jint SC = BC == 4 ? 0 : (BC == 6 ? 1 : 2);
  jint s1 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__shifts), SC)), 1)), 0);
  jint s2 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__shifts, SC)), 2)), 0);
  jint s3 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__shifts, SC)), 3)), 0);
  IOSIntArray *a = [IOSIntArray arrayWithLength:BC];
  IOSIntArray *t = [IOSIntArray arrayWithLength:BC];
  jint i;
  jint j = outOffset;
  jint tt;
  for (i = 0; i < BC; i++) {
    jint unseq$1 = inOffset++;
    jint unseq$2 = inOffset++;
    jint unseq$3 = inOffset++;
    *IOSIntArray_GetRef(t, i) = ((JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Ke, 0)), i);
  }
  for (jint r = 1; r < ROUNDS; r++) {
    for (i = 0; i < BC; i++) {
      *IOSIntArray_GetRef(a, i) = (IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T1), (JreURShift32(IOSIntArray_Get(t, i), 24)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T2), (JreURShift32(IOSIntArray_Get(t, (i + s1) % BC), 16)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T3), (JreURShift32(IOSIntArray_Get(t, (i + s2) % BC), 8)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T4), IOSIntArray_Get(t, (i + s3) % BC) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Ke, r)), i);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, t, 0, BC);
  }
  for (i = 0; i < BC; i++) {
    tt = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Ke, ROUNDS)), i);
    *IOSByteArray_GetRef(nil_chk(result), j++) = (jbyte) (IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__S), (JreURShift32(IOSIntArray_Get(t, i), 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(IOSIntArray_Get(t, (i + s1) % BC), 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, (JreURShift32(IOSIntArray_Get(t, (i + s2) % BC), 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__S, IOSIntArray_Get(t, (i + s3) % BC) & (jint) 0xFF) ^ tt);
  }
}

void NetI2pCryptoCryptixRijndael_Algorithm_blockDecryptWithByteArray_withByteArray_withInt_withInt_withId_withInt_(IOSByteArray *inArg, IOSByteArray *result, jint inOffset, jint outOffset, id sessionKey, jint blockSize) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  if (blockSize == NetI2pCryptoCryptixRijndael_Algorithm__BLOCK_SIZE) {
    NetI2pCryptoCryptixRijndael_Algorithm_blockDecryptWithByteArray_withByteArray_withInt_withInt_withId_(inArg, result, inOffset, outOffset, sessionKey);
    return;
  }
  IOSObjectArray *Kd = ((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) nil_chk(((NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry *) cast_chk(sessionKey, [NetI2pCryptoCryptixAESKeyCache_KeyCacheEntry class]))))->Kd_;
  jint BC = blockSize / 4;
  jint ROUNDS = ((IOSObjectArray *) nil_chk(Kd))->size_ - 1;
  jint SC = BC == 4 ? 0 : (BC == 6 ? 1 : 2);
  jint s1 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__shifts), SC)), 1)), 1);
  jint s2 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__shifts, SC)), 2)), 1);
  jint s3 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__shifts, SC)), 3)), 1);
  IOSIntArray *a = [IOSIntArray arrayWithLength:BC];
  IOSIntArray *t = [IOSIntArray arrayWithLength:BC];
  jint i;
  jint j = outOffset;
  jint tt;
  for (i = 0; i < BC; i++) {
    jint unseq$1 = inOffset++;
    jint unseq$2 = inOffset++;
    jint unseq$3 = inOffset++;
    *IOSIntArray_GetRef(t, i) = ((JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xFF), 8)) | (IOSByteArray_Get(inArg, inOffset++) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Kd, 0)), i);
  }
  for (jint r = 1; r < ROUNDS; r++) {
    for (i = 0; i < BC; i++) {
      *IOSIntArray_GetRef(a, i) = (IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T5), (JreURShift32(IOSIntArray_Get(t, i), 24)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T6), (JreURShift32(IOSIntArray_Get(t, (i + s1) % BC), 16)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T7), (JreURShift32(IOSIntArray_Get(t, (i + s2) % BC), 8)) & (jint) 0xFF) ^ IOSIntArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__T8), IOSIntArray_Get(t, (i + s3) % BC) & (jint) 0xFF)) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Kd, r)), i);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, t, 0, BC);
  }
  for (i = 0; i < BC; i++) {
    tt = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(Kd, ROUNDS)), i);
    *IOSByteArray_GetRef(nil_chk(result), j++) = (jbyte) (IOSByteArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__Si), (JreURShift32(IOSIntArray_Get(t, i), 24)) & (jint) 0xFF) ^ (JreURShift32(tt, 24)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(IOSIntArray_Get(t, (i + s1) % BC), 16)) & (jint) 0xFF) ^ (JreURShift32(tt, 16)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, (JreURShift32(IOSIntArray_Get(t, (i + s2) % BC), 8)) & (jint) 0xFF) ^ (JreURShift32(tt, 8)));
    *IOSByteArray_GetRef(result, j++) = (jbyte) (IOSByteArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__Si, IOSIntArray_Get(t, (i + s3) % BC) & (jint) 0xFF) ^ tt);
  }
}

jint NetI2pCryptoCryptixRijndael_Algorithm_getRoundsWithInt_withInt_(jint keySize, jint blockSize) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  switch (keySize) {
    case 16:
    return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);
    case 24:
    return blockSize != 32 ? 12 : 14;
    default:
    return 14;
  }
}

NSString *NetI2pCryptoCryptixRijndael_Algorithm_intToStringWithInt_(jint n) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  IOSCharArray *buf = [IOSCharArray arrayWithLength:8];
  for (jint i = 7; i >= 0; i--) {
    *IOSCharArray_GetRef(buf, i) = IOSCharArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS), n & (jint) 0x0F);
    JreURShiftAssignInt(&n, 4);
  }
  return [NSString java_stringWithCharacters:buf];
}

NSString *NetI2pCryptoCryptixRijndael_Algorithm_toStringWithByteArray_(IOSByteArray *ba) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  jint length = ((IOSByteArray *) nil_chk(ba))->size_;
  IOSCharArray *buf = [IOSCharArray arrayWithLength:length * 2];
  for (jint i = 0, j = 0, k; i < length; ) {
    k = IOSByteArray_Get(ba, i++);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS), (JreURShift32(k, 4)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, k & (jint) 0x0F);
  }
  return [NSString java_stringWithCharacters:buf];
}

NSString *NetI2pCryptoCryptixRijndael_Algorithm_toStringWithIntArray_(IOSIntArray *ia) {
  NetI2pCryptoCryptixRijndael_Algorithm_initialize();
  jint length = ((IOSIntArray *) nil_chk(ia))->size_;
  IOSCharArray *buf = [IOSCharArray arrayWithLength:length * 8];
  for (jint i = 0, j = 0, k; i < length; i++) {
    k = IOSIntArray_Get(ia, i);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(nil_chk(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS), (JreURShift32(k, 28)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 24)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 20)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 16)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 12)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 8)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, (JreURShift32(k, 4)) & (jint) 0x0F);
    *IOSCharArray_GetRef(buf, j++) = IOSCharArray_Get(NetI2pCryptoCryptixRijndael_Algorithm__HEX_DIGITS, k & (jint) 0x0F);
  }
  return [NSString java_stringWithCharacters:buf];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoCryptixRijndael_Algorithm)
