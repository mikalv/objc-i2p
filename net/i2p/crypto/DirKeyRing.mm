//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/DirKeyRing.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/X509Certificate.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/DirKeyRing.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pCryptoDirKeyRing () {
 @public
  JavaIoFile *_base_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pCryptoDirKeyRing, _base_, JavaIoFile *)

@implementation NetI2pCryptoDirKeyRing

- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDir {
  NetI2pCryptoDirKeyRing_initWithJavaIoFile_(self, baseDir);
  return self;
}

- (id<JavaSecurityPublicKey>)getKeyWithNSString:(NSString *)keyName
                                   withNSString:(NSString *)scope
                        withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  NSString *fileName = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(keyName)) java_replace:@"@" withSequence:@"_at_"])) java_replace:@"<" withSequence:@"_"])) java_replace:@">" withSequence:@"_"];
  JavaIoFile *test = create_JavaIoFile_initWithNSString_(fileName);
  if ([test getParent] != nil) @throw create_JavaIoIOException_initWithNSString_(@"bad key name");
  JavaIoFile *sd = create_JavaIoFile_initWithJavaIoFile_withNSString_(_base_, scope);
  JavaIoFile *kd = create_JavaIoFile_initWithJavaIoFile_withNSString_(sd, JreStrcat("$$", fileName, @".crt"));
  if (![kd exists]) return nil;
  JavaSecurityCertX509Certificate *cert = NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(kd);
  if (NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertificate_(cert)) @throw create_JavaSecurityCertCRLException_initWithNSString_(@"Certificate is revoked");
  if (!NetI2pUtilSystemVersion_isAndroid()) {
    NSString *cn = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"CN");
    if (![keyName isEqual:cn]) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$$", @"CN mismatch: ", cn));
  }
  return [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getPublicKey];
}

- (void)setKeyWithNSString:(NSString *)keyName
              withNSString:(NSString *)scope
 withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
}

- (void)dealloc {
  RELEASE_(_base_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoFile:);
  methods[1].selector = @selector(getKeyWithNSString:withNSString:withNetI2pCryptoSigType:);
  methods[2].selector = @selector(setKeyWithNSString:withNSString:withJavaSecurityPublicKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_base_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;", "getKey", "LNSString;LNSString;LNetI2pCryptoSigType;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "setKey", "LNSString;LNSString;LJavaSecurityPublicKey;" };
  static const J2ObjcClassInfo _NetI2pCryptoDirKeyRing = { "DirKeyRing", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoDirKeyRing;
}

@end

void NetI2pCryptoDirKeyRing_initWithJavaIoFile_(NetI2pCryptoDirKeyRing *self, JavaIoFile *baseDir) {
  NSObject_init(self);
  JreStrongAssign(&self->_base_, baseDir);
}

NetI2pCryptoDirKeyRing *new_NetI2pCryptoDirKeyRing_initWithJavaIoFile_(JavaIoFile *baseDir) {
  J2OBJC_NEW_IMPL(NetI2pCryptoDirKeyRing, initWithJavaIoFile_, baseDir)
}

NetI2pCryptoDirKeyRing *create_NetI2pCryptoDirKeyRing_initWithJavaIoFile_(JavaIoFile *baseDir) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoDirKeyRing, initWithJavaIoFile_, baseDir)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoDirKeyRing)
