//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/CertUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoCertUtil")
#ifdef RESTRICT_NetI2pCryptoCertUtil
#define INCLUDE_ALL_NetI2pCryptoCertUtil 0
#else
#define INCLUDE_ALL_NetI2pCryptoCertUtil 1
#endif
#undef RESTRICT_NetI2pCryptoCertUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoCertUtil_) && (INCLUDE_ALL_NetI2pCryptoCertUtil || defined(INCLUDE_NetI2pCryptoCertUtil))
#define NetI2pCryptoCertUtil_

@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecurityCertCertStore;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509CRL;
@class JavaSecurityCertX509Certificate;
@class NetI2pI2PAppContext;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface NetI2pCryptoCertUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)exportCertWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                           withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)exportCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                      withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)exportPrivateKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
              withJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                            withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (NSString *)getIssuerValueWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withNSString:(NSString *)type;

+ (id<JavaUtilSet>)getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (NSString *)getSubjectValueWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                    withNSString:(NSString *)type;

+ (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

+ (jboolean)isRevokedWithJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)store
                   withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

+ (jboolean)isRevokedWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
             withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

+ (JavaSecurityCertX509Certificate *)loadCertWithJavaIoFile:(JavaIoFile *)kd;

+ (id<JavaUtilList>)loadCertsWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (JavaSecurityCertX509CRL *)loadCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (JavaSecurityCertCertStore *)loadCRLs;

+ (JavaSecurityCertCertStore *)loadCRLsWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (id<JavaSecurityPublicKey>)loadKeyWithJavaIoFile:(JavaIoFile *)kd;

+ (id<JavaSecurityPrivateKey>)loadPrivateKeyWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (jboolean)saveCertWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                     withJavaIoFile:(JavaIoFile *)file;

+ (jboolean)saveCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                withJavaIoFile:(JavaIoFile *)file;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pCryptoCertUtil)

FOUNDATION_EXPORT void NetI2pCryptoCertUtil_init(NetI2pCryptoCertUtil *self);

FOUNDATION_EXPORT NetI2pCryptoCertUtil *new_NetI2pCryptoCertUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoCertUtil *create_NetI2pCryptoCertUtil_init(void);

FOUNDATION_EXPORT jboolean NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(JavaSecurityCertCertificate *cert, JavaIoFile *file);

FOUNDATION_EXPORT void NetI2pCryptoCertUtil_exportPrivateKeyWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaIoOutputStream_(id<JavaSecurityPrivateKey> pk, IOSObjectArray *certs, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void NetI2pCryptoCertUtil_exportCertWithJavaSecurityCertCertificate_withJavaIoOutputStream_(JavaSecurityCertCertificate *cert, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT id<JavaUtilSet> NetI2pCryptoCertUtil_getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT NSString *NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(JavaSecurityCertX509Certificate *cert, NSString *type);

FOUNDATION_EXPORT NSString *NetI2pCryptoCertUtil_getIssuerValueWithJavaSecurityCertX509Certificate_withNSString_(JavaSecurityCertX509Certificate *cert, NSString *type);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> NetI2pCryptoCertUtil_loadKeyWithJavaIoFile_(JavaIoFile *kd);

FOUNDATION_EXPORT JavaSecurityCertX509Certificate *NetI2pCryptoCertUtil_loadCertWithJavaIoFile_(JavaIoFile *kd);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> NetI2pCryptoCertUtil_loadPrivateKeyWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id<JavaUtilList> NetI2pCryptoCertUtil_loadCertsWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT jboolean NetI2pCryptoCertUtil_saveCRLWithJavaSecurityCertX509CRL_withJavaIoFile_(JavaSecurityCertX509CRL *crl, JavaIoFile *file);

FOUNDATION_EXPORT void NetI2pCryptoCertUtil_exportCRLWithJavaSecurityCertX509CRL_withJavaIoOutputStream_(JavaSecurityCertX509CRL *crl, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT jboolean NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *cert);

FOUNDATION_EXPORT jboolean NetI2pCryptoCertUtil_isRevokedWithNetI2pI2PAppContext_withJavaSecurityCertCertificate_(NetI2pI2PAppContext *ctx, JavaSecurityCertCertificate *cert);

FOUNDATION_EXPORT jboolean NetI2pCryptoCertUtil_isRevokedWithJavaSecurityCertCertStore_withJavaSecurityCertCertificate_(JavaSecurityCertCertStore *store, JavaSecurityCertCertificate *cert);

FOUNDATION_EXPORT JavaSecurityCertCertStore *NetI2pCryptoCertUtil_loadCRLs(void);

FOUNDATION_EXPORT JavaSecurityCertCertStore *NetI2pCryptoCertUtil_loadCRLsWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT JavaSecurityCertX509CRL *NetI2pCryptoCertUtil_loadCRLWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pCryptoCertUtil_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoCertUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoCertUtil")
