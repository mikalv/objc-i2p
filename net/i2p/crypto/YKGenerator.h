//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/YKGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoYKGenerator")
#ifdef RESTRICT_NetI2pCryptoYKGenerator
#define INCLUDE_ALL_NetI2pCryptoYKGenerator 0
#else
#define INCLUDE_ALL_NetI2pCryptoYKGenerator 1
#endif
#undef RESTRICT_NetI2pCryptoYKGenerator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoYKGenerator_) && (INCLUDE_ALL_NetI2pCryptoYKGenerator || defined(INCLUDE_NetI2pCryptoYKGenerator))
#define NetI2pCryptoYKGenerator_

@class IOSObjectArray;
@class NetI2pI2PAppContext;

@interface NetI2pCryptoYKGenerator : NSObject
@property (readonly, copy, class) NSString *PROP_YK_PRECALC_MIN NS_SWIFT_NAME(PROP_YK_PRECALC_MIN);
@property (readonly, copy, class) NSString *PROP_YK_PRECALC_MAX NS_SWIFT_NAME(PROP_YK_PRECALC_MAX);
@property (readonly, copy, class) NSString *PROP_YK_PRECALC_DELAY NS_SWIFT_NAME(PROP_YK_PRECALC_DELAY);
@property (readonly, class) jint DEFAULT_YK_PRECALC_MIN NS_SWIFT_NAME(DEFAULT_YK_PRECALC_MIN);
@property (readonly, class) jint DEFAULT_YK_PRECALC_MAX NS_SWIFT_NAME(DEFAULT_YK_PRECALC_MAX);
@property (readonly, class) jint DEFAULT_YK_PRECALC_DELAY NS_SWIFT_NAME(DEFAULT_YK_PRECALC_DELAY);

+ (NSString *)PROP_YK_PRECALC_MIN;

+ (NSString *)PROP_YK_PRECALC_MAX;

+ (NSString *)PROP_YK_PRECALC_DELAY;

+ (jint)DEFAULT_YK_PRECALC_MIN;

+ (jint)DEFAULT_YK_PRECALC_MAX;

+ (jint)DEFAULT_YK_PRECALC_DELAY;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (IOSObjectArray *)getNextYK;

- (void)shutdown;

- (void)start;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoYKGenerator)

inline NSString *NetI2pCryptoYKGenerator_get_PROP_YK_PRECALC_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoYKGenerator, PROP_YK_PRECALC_MIN, NSString *)

inline NSString *NetI2pCryptoYKGenerator_get_PROP_YK_PRECALC_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoYKGenerator, PROP_YK_PRECALC_MAX, NSString *)

inline NSString *NetI2pCryptoYKGenerator_get_PROP_YK_PRECALC_DELAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pCryptoYKGenerator_PROP_YK_PRECALC_DELAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoYKGenerator, PROP_YK_PRECALC_DELAY, NSString *)

inline jint NetI2pCryptoYKGenerator_get_DEFAULT_YK_PRECALC_MIN(void);
#define NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MIN 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoYKGenerator, DEFAULT_YK_PRECALC_MIN, jint)

inline jint NetI2pCryptoYKGenerator_get_DEFAULT_YK_PRECALC_MAX(void);
#define NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_MAX 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoYKGenerator, DEFAULT_YK_PRECALC_MAX, jint)

inline jint NetI2pCryptoYKGenerator_get_DEFAULT_YK_PRECALC_DELAY(void);
#define NetI2pCryptoYKGenerator_DEFAULT_YK_PRECALC_DELAY 200
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoYKGenerator, DEFAULT_YK_PRECALC_DELAY, jint)

FOUNDATION_EXPORT void NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pCryptoYKGenerator *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pCryptoYKGenerator *new_NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pCryptoYKGenerator *create_NetI2pCryptoYKGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoYKGenerator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoYKGenerator")
