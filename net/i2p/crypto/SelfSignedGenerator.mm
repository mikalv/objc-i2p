//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SelfSignedGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/MessageDigest.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509Certificate.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/TreeSet.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "net/i2p/crypto/CertUtil.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/crypto/SHA1.h"
#include "net/i2p/crypto/SU3File.h"
#include "net/i2p/crypto/SelfSignedGenerator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pCryptoSelfSignedGenerator ()

+ (IOSObjectArray *)generateWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)jpub
                           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)jpriv
                      withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)priv
                              withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                         withNSString:(NSString *)cname
                                      withJavaUtilSet:(id<JavaUtilSet>)altNames
                                         withNSString:(NSString *)ou
                                         withNSString:(NSString *)o
                                         withNSString:(NSString *)l
                                         withNSString:(NSString *)st
                                         withNSString:(NSString *)c
                                              withInt:(jint)validDays;

+ (JavaSecurityCertX509CRL *)generateCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withInt:(jint)validDays
                                                                    withInt:(jint)crlNum
                                                              withByteArray:(IOSByteArray *)sigoid
                                            withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)priv;

+ (IOSByteArray *)genTBSWithNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)o
                        withNSString:(NSString *)l
                        withNSString:(NSString *)st
                        withNSString:(NSString *)c
                             withInt:(jint)validDays
                       withByteArray:(IOSByteArray *)sigoid
           withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)jpub;

+ (IOSByteArray *)genTBSCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                       withInt:(jint)validDays
                                                       withInt:(jint)crlNum
                                                 withByteArray:(IOSByteArray *)sigalg;

+ (jint)spaceForWithInt:(jint)val;

+ (IOSByteArray *)getValidityWithInt:(jint)validDays;

+ (IOSByteArray *)getDateWithLong:(jlong)now;

+ (IOSByteArray *)getExtensionsWithByteArray:(IOSByteArray *)pubbytes
                                withNSString:(NSString *)cname
                             withJavaUtilSet:(id<JavaUtilSet>)altNames;

+ (IOSByteArray *)getCRLExtensionsWithInt:(jint)crlNum;

+ (IOSByteArray *)getEncodedOIDSeqWithNSString:(NSString *)oid;

+ (IOSByteArray *)getEncodedOIDWithNSString:(NSString *)oid;

+ (void)usage;

@end

inline jboolean NetI2pCryptoSelfSignedGenerator_get_DEBUG(void);
#define NetI2pCryptoSelfSignedGenerator_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pCryptoSelfSignedGenerator, DEBUG, jboolean)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_QT_CPSURI(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_QT_CPSURI = @"1.3.6.1.5.5.7.2.1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_QT_CPSURI, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_QT_UNOTICE(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_QT_UNOTICE = @"1.3.6.1.5.5.7.2.2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_QT_UNOTICE, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_CN(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_CN = @"2.5.4.3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_CN, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_C(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_C = @"2.5.4.6";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_C, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_L(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_L = @"2.5.4.7";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_L, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_ST(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_ST = @"2.5.4.8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_ST, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_O(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_O = @"2.5.4.10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_O, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_OU(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_OU = @"2.5.4.11";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_OU, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_SKI(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_SKI = @"2.5.29.14";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_SKI, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_USAGE(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_USAGE = @"2.5.29.15";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_USAGE, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_SAN(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_SAN = @"2.5.29.17";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_SAN, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_BASIC(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_BASIC = @"2.5.29.19";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_BASIC, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_CRLNUM(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_CRLNUM = @"2.5.29.20";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_CRLNUM, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_POLICY(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_POLICY = @"2.5.29.32";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_POLICY, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_POLICY_ANY(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_POLICY_ANY = @"2.5.29.32.0";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_POLICY_ANY, NSString *)

inline NSString *NetI2pCryptoSelfSignedGenerator_get_OID_AKI(void);
static NSString *NetI2pCryptoSelfSignedGenerator_OID_AKI = @"2.5.29.35";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OID_AKI, NSString *)

inline id<JavaUtilMap> NetI2pCryptoSelfSignedGenerator_get_OIDS(void);
static id<JavaUtilMap> NetI2pCryptoSelfSignedGenerator_OIDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSelfSignedGenerator, OIDS, id<JavaUtilMap>)

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoSelfSignedGenerator_generateWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_withNetI2pDataSigningPrivateKey_withNetI2pCryptoSigType_withNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_(id<JavaSecurityPublicKey> jpub, id<JavaSecurityPrivateKey> jpriv, NetI2pDataSigningPrivateKey *priv, NetI2pCryptoSigType *type, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays);

__attribute__((unused)) static JavaSecurityCertX509CRL *NetI2pCryptoSelfSignedGenerator_generateCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_withNetI2pDataSigningPrivateKey_(JavaSecurityCertX509Certificate *cert, jint validDays, jint crlNum, IOSByteArray *sigoid, NetI2pDataSigningPrivateKey *priv);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_genTBSWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withByteArray_withJavaSecurityPublicKey_(NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays, IOSByteArray *sigoid, id<JavaSecurityPublicKey> jpub);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_genTBSCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_(JavaSecurityCertX509Certificate *cert, jint validDays, jint crlNum, IOSByteArray *sigalg);

__attribute__((unused)) static jint NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(jint val);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getValidityWithInt_(jint validDays);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getDateWithLong_(jlong now);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getExtensionsWithByteArray_withNSString_withJavaUtilSet_(IOSByteArray *pubbytes, NSString *cname, id<JavaUtilSet> altNames);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getCRLExtensionsWithInt_(jint crlNum);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getEncodedOIDSeqWithNSString_(NSString *oid);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NSString *oid);

__attribute__((unused)) static void NetI2pCryptoSelfSignedGenerator_usage(void);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoSelfSignedGenerator)

@implementation NetI2pCryptoSelfSignedGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoSelfSignedGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)generateWithNSString:(NSString *)cname
                            withNSString:(NSString *)ou
                            withNSString:(NSString *)o
                            withNSString:(NSString *)l
                            withNSString:(NSString *)st
                            withNSString:(NSString *)c
                                 withInt:(jint)validDays
                 withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSelfSignedGenerator_generateWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(cname, ou, o, l, st, c, validDays, type);
}

+ (IOSObjectArray *)generateWithNSString:(NSString *)cname
                         withJavaUtilSet:(id<JavaUtilSet>)altNames
                            withNSString:(NSString *)ou
                            withNSString:(NSString *)o
                            withNSString:(NSString *)l
                            withNSString:(NSString *)st
                            withNSString:(NSString *)c
                                 withInt:(jint)validDays
                 withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSelfSignedGenerator_generateWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(cname, altNames, ou, o, l, st, c, validDays, type);
}

+ (IOSObjectArray *)generateWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)jpub
                           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)jpriv
                      withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)priv
                              withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                         withNSString:(NSString *)cname
                                      withJavaUtilSet:(id<JavaUtilSet>)altNames
                                         withNSString:(NSString *)ou
                                         withNSString:(NSString *)o
                                         withNSString:(NSString *)l
                                         withNSString:(NSString *)st
                                         withNSString:(NSString *)c
                                              withInt:(jint)validDays {
  return NetI2pCryptoSelfSignedGenerator_generateWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_withNetI2pDataSigningPrivateKey_withNetI2pCryptoSigType_withNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_(jpub, jpriv, priv, type, cname, altNames, ou, o, l, st, c, validDays);
}

+ (IOSObjectArray *)renewWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                  withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)jpriv
                                                     withInt:(jint)validDays {
  return NetI2pCryptoSelfSignedGenerator_renewWithJavaSecurityCertX509Certificate_withJavaSecurityPrivateKey_withInt_(cert, jpriv, validDays);
}

+ (JavaSecurityCertX509CRL *)generateCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withInt:(jint)validDays
                                                                    withInt:(jint)crlNum
                                                              withByteArray:(IOSByteArray *)sigoid
                                            withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)priv {
  return NetI2pCryptoSelfSignedGenerator_generateCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_withNetI2pDataSigningPrivateKey_(cert, validDays, crlNum, sigoid, priv);
}

+ (IOSByteArray *)genTBSWithNSString:(NSString *)cname
                     withJavaUtilSet:(id<JavaUtilSet>)altNames
                        withNSString:(NSString *)ou
                        withNSString:(NSString *)o
                        withNSString:(NSString *)l
                        withNSString:(NSString *)st
                        withNSString:(NSString *)c
                             withInt:(jint)validDays
                       withByteArray:(IOSByteArray *)sigoid
           withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)jpub {
  return NetI2pCryptoSelfSignedGenerator_genTBSWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withByteArray_withJavaSecurityPublicKey_(cname, altNames, ou, o, l, st, c, validDays, sigoid, jpub);
}

+ (IOSByteArray *)genTBSCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                       withInt:(jint)validDays
                                                       withInt:(jint)crlNum
                                                 withByteArray:(IOSByteArray *)sigalg {
  return NetI2pCryptoSelfSignedGenerator_genTBSCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_(cert, validDays, crlNum, sigalg);
}

+ (jint)spaceForWithInt:(jint)val {
  return NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(val);
}

+ (IOSByteArray *)getValidityWithInt:(jint)validDays {
  return NetI2pCryptoSelfSignedGenerator_getValidityWithInt_(validDays);
}

+ (IOSByteArray *)getDateWithLong:(jlong)now {
  return NetI2pCryptoSelfSignedGenerator_getDateWithLong_(now);
}

+ (IOSByteArray *)getExtensionsWithByteArray:(IOSByteArray *)pubbytes
                                withNSString:(NSString *)cname
                             withJavaUtilSet:(id<JavaUtilSet>)altNames {
  return NetI2pCryptoSelfSignedGenerator_getExtensionsWithByteArray_withNSString_withJavaUtilSet_(pubbytes, cname, altNames);
}

+ (IOSByteArray *)getCRLExtensionsWithInt:(jint)crlNum {
  return NetI2pCryptoSelfSignedGenerator_getCRLExtensionsWithInt_(crlNum);
}

+ (IOSByteArray *)getEncodedOIDSeqWithNSString:(NSString *)oid {
  return NetI2pCryptoSelfSignedGenerator_getEncodedOIDSeqWithNSString_(oid);
}

+ (IOSByteArray *)getEncodedOIDWithNSString:(NSString *)oid {
  return NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(oid);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pCryptoSelfSignedGenerator_mainWithNSStringArray_(args);
}

+ (void)usage {
  NetI2pCryptoSelfSignedGenerator_usage();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 0, 3, 2, 4, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 0, 5, 2, 6, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 7, 8, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0xa, 9, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 11, 12, 2, 13, -1, -1 },
    { NULL, "[B", 0xa, 14, 15, 2, -1, -1, -1 },
    { NULL, "I", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 18, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 21, 22, -1, 23, -1, -1 },
    { NULL, "[B", 0xa, 24, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, 30, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateWithNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withInt:withNetI2pCryptoSigType:);
  methods[2].selector = @selector(generateWithNSString:withJavaUtilSet:withNSString:withNSString:withNSString:withNSString:withNSString:withInt:withNetI2pCryptoSigType:);
  methods[3].selector = @selector(generateWithJavaSecurityPublicKey:withJavaSecurityPrivateKey:withNetI2pDataSigningPrivateKey:withNetI2pCryptoSigType:withNSString:withJavaUtilSet:withNSString:withNSString:withNSString:withNSString:withNSString:withInt:);
  methods[4].selector = @selector(renewWithJavaSecurityCertX509Certificate:withJavaSecurityPrivateKey:withInt:);
  methods[5].selector = @selector(generateCRLWithJavaSecurityCertX509Certificate:withInt:withInt:withByteArray:withNetI2pDataSigningPrivateKey:);
  methods[6].selector = @selector(genTBSWithNSString:withJavaUtilSet:withNSString:withNSString:withNSString:withNSString:withNSString:withInt:withByteArray:withJavaSecurityPublicKey:);
  methods[7].selector = @selector(genTBSCRLWithJavaSecurityCertX509Certificate:withInt:withInt:withByteArray:);
  methods[8].selector = @selector(spaceForWithInt:);
  methods[9].selector = @selector(getValidityWithInt:);
  methods[10].selector = @selector(getDateWithLong:);
  methods[11].selector = @selector(getExtensionsWithByteArray:withNSString:withJavaUtilSet:);
  methods[12].selector = @selector(getCRLExtensionsWithInt:);
  methods[13].selector = @selector(getEncodedOIDSeqWithNSString:);
  methods[14].selector = @selector(getEncodedOIDWithNSString:);
  methods[15].selector = @selector(mainWithNSStringArray:);
  methods[16].selector = @selector(usage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = NetI2pCryptoSelfSignedGenerator_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "OID_QT_CPSURI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "OID_QT_UNOTICE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "OID_CN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "OID_C", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "OID_L", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "OID_ST", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "OID_O", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "OID_OU", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "OID_SKI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "OID_USAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "OID_SAN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "OID_BASIC", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "OID_CRLNUM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "OID_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "OID_POLICY_ANY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "OID_AKI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "OIDS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 47, 48, -1 },
  };
  static const void *ptrTable[] = { "generate", "LNSString;LNSString;LNSString;LNSString;LNSString;LNSString;ILNetI2pCryptoSigType;", "LJavaSecurityGeneralSecurityException;", "LNSString;LJavaUtilSet;LNSString;LNSString;LNSString;LNSString;LNSString;ILNetI2pCryptoSigType;", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILnet/i2p/crypto/SigType;)[Ljava/lang/Object;", "LJavaSecurityPublicKey;LJavaSecurityPrivateKey;LNetI2pDataSigningPrivateKey;LNetI2pCryptoSigType;LNSString;LJavaUtilSet;LNSString;LNSString;LNSString;LNSString;LNSString;I", "(Ljava/security/PublicKey;Ljava/security/PrivateKey;Lnet/i2p/data/SigningPrivateKey;Lnet/i2p/crypto/SigType;Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/Object;", "renew", "LJavaSecurityCertX509Certificate;LJavaSecurityPrivateKey;I", "generateCRL", "LJavaSecurityCertX509Certificate;II[BLNetI2pDataSigningPrivateKey;", "genTBS", "LNSString;LJavaUtilSet;LNSString;LNSString;LNSString;LNSString;LNSString;I[BLJavaSecurityPublicKey;", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLjava/security/PublicKey;)[B", "genTBSCRL", "LJavaSecurityCertX509Certificate;II[B", "spaceFor", "I", "getValidity", "getDate", "J", "getExtensions", "[BLNSString;LJavaUtilSet;", "([BLjava/lang/String;Ljava/util/Set<Ljava/lang/String;>;)[B", "getCRLExtensions", "getEncodedOIDSeq", "LNSString;", "getEncodedOID", "main", "[LNSString;", "LJavaLangException;", &NetI2pCryptoSelfSignedGenerator_OID_QT_CPSURI, &NetI2pCryptoSelfSignedGenerator_OID_QT_UNOTICE, &NetI2pCryptoSelfSignedGenerator_OID_CN, &NetI2pCryptoSelfSignedGenerator_OID_C, &NetI2pCryptoSelfSignedGenerator_OID_L, &NetI2pCryptoSelfSignedGenerator_OID_ST, &NetI2pCryptoSelfSignedGenerator_OID_O, &NetI2pCryptoSelfSignedGenerator_OID_OU, &NetI2pCryptoSelfSignedGenerator_OID_SKI, &NetI2pCryptoSelfSignedGenerator_OID_USAGE, &NetI2pCryptoSelfSignedGenerator_OID_SAN, &NetI2pCryptoSelfSignedGenerator_OID_BASIC, &NetI2pCryptoSelfSignedGenerator_OID_CRLNUM, &NetI2pCryptoSelfSignedGenerator_OID_POLICY, &NetI2pCryptoSelfSignedGenerator_OID_POLICY_ANY, &NetI2pCryptoSelfSignedGenerator_OID_AKI, &NetI2pCryptoSelfSignedGenerator_OIDS, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoSelfSignedGenerator = { "SelfSignedGenerator", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 17, 18, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoSelfSignedGenerator;
}

+ (void)initialize {
  if (self == [NetI2pCryptoSelfSignedGenerator class]) {
    {
      JreStrongAssignAndConsume(&NetI2pCryptoSelfSignedGenerator_OIDS, new_JavaUtilHashMap_initWithInt_(16));
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_CN withId:@"CN"];
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_C withId:@"C"];
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_L withId:@"L"];
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_ST withId:@"ST"];
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_O withId:@"O"];
      [NetI2pCryptoSelfSignedGenerator_OIDS putWithId:NetI2pCryptoSelfSignedGenerator_OID_OU withId:@"OU"];
    }
    J2OBJC_SET_INITIALIZED(NetI2pCryptoSelfSignedGenerator)
  }
}

@end

void NetI2pCryptoSelfSignedGenerator_init(NetI2pCryptoSelfSignedGenerator *self) {
  NSObject_init(self);
}

NetI2pCryptoSelfSignedGenerator *new_NetI2pCryptoSelfSignedGenerator_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoSelfSignedGenerator, init)
}

NetI2pCryptoSelfSignedGenerator *create_NetI2pCryptoSelfSignedGenerator_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoSelfSignedGenerator, init)
}

IOSObjectArray *NetI2pCryptoSelfSignedGenerator_generateWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(NSString *cname, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays, NetI2pCryptoSigType *type) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  return NetI2pCryptoSelfSignedGenerator_generateWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(cname, nil, ou, o, l, st, c, validDays, type);
}

IOSObjectArray *NetI2pCryptoSelfSignedGenerator_generateWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withNetI2pCryptoSigType_(NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays, NetI2pCryptoSigType *type) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  IOSObjectArray *keys = [((NetI2pCryptoKeyGenerator *) nil_chk(NetI2pCryptoKeyGenerator_getInstance())) generateSigningKeysWithNetI2pCryptoSigType:type];
  NetI2pDataSigningPublicKey *pub = (NetI2pDataSigningPublicKey *) cast_chk(IOSObjectArray_Get(nil_chk(keys), 0), [NetI2pDataSigningPublicKey class]);
  NetI2pDataSigningPrivateKey *priv = (NetI2pDataSigningPrivateKey *) cast_chk(IOSObjectArray_Get(keys, 1), [NetI2pDataSigningPrivateKey class]);
  id<JavaSecurityPublicKey> jpub = NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPublicKey_(pub);
  id<JavaSecurityPrivateKey> jpriv = NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPrivateKey_(priv);
  return NetI2pCryptoSelfSignedGenerator_generateWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_withNetI2pDataSigningPrivateKey_withNetI2pCryptoSigType_withNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_(jpub, jpriv, priv, type, cname, altNames, ou, o, l, st, c, validDays);
}

IOSObjectArray *NetI2pCryptoSelfSignedGenerator_generateWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_withNetI2pDataSigningPrivateKey_withNetI2pCryptoSigType_withNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_(id<JavaSecurityPublicKey> jpub, id<JavaSecurityPrivateKey> jpriv, NetI2pDataSigningPrivateKey *priv, NetI2pCryptoSigType *type, NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  NSString *oid;
  switch ([type ordinal]) {
    case NetI2pCryptoSigType_Enum_DSA_SHA1:
    case NetI2pCryptoSigType_Enum_ECDSA_SHA256_P256:
    case NetI2pCryptoSigType_Enum_ECDSA_SHA384_P384:
    case NetI2pCryptoSigType_Enum_ECDSA_SHA512_P521:
    case NetI2pCryptoSigType_Enum_RSA_SHA256_2048:
    case NetI2pCryptoSigType_Enum_RSA_SHA384_3072:
    case NetI2pCryptoSigType_Enum_RSA_SHA512_4096:
    case NetI2pCryptoSigType_Enum_EdDSA_SHA512_Ed25519:
    case NetI2pCryptoSigType_Enum_EdDSA_SHA512_Ed25519ph:
    oid = [((NetI2pCryptoSigType *) nil_chk(type)) getOID];
    break;
    default:
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$@", @"Unsupported: ", type));
  }
  IOSByteArray *sigoid = NetI2pCryptoSelfSignedGenerator_getEncodedOIDSeqWithNSString_(oid);
  IOSByteArray *tbs = NetI2pCryptoSelfSignedGenerator_genTBSWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withByteArray_withJavaSecurityPublicKey_(cname, altNames, ou, o, l, st, c, validDays, sigoid, jpub);
  jint tbslen = ((IOSByteArray *) nil_chk(tbs))->size_;
  NetI2pDataSignature *sig = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) signWithByteArray:tbs withNetI2pDataSigningPrivateKey:priv];
  if (sig == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"sig failed");
  IOSByteArray *sigbytes = NetI2pCryptoSigUtil_toJavaSigWithNetI2pDataSignature_(sig);
  jint seqlen = tbslen + ((IOSByteArray *) nil_chk(sigoid))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(sigbytes))->size_ + 1);
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(seqlen);
  IOSByteArray *cb = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(cb, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(cb, idx, seqlen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tbs, 0, cb, idx, tbs->size_);
  idx += tbs->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigoid, 0, cb, idx, sigoid->size_);
  idx += sigoid->size_;
  *IOSByteArray_GetRef(cb, idx++) = (jint) 0x03;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(cb, idx, sigbytes->size_ + 1);
  *IOSByteArray_GetRef(cb, idx++) = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigbytes, 0, cb, idx, sigbytes->size_);
  JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_(cb);
  JavaSecurityCertX509Certificate *cert;
  @try {
    JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
    cert = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCertificateWithJavaIoInputStream:bais], [JavaSecurityCertX509Certificate class]);
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidity];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"cert error", iae);
  }
  JavaSecurityCertX509CRL *crl = NetI2pCryptoSelfSignedGenerator_generateCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_withNetI2pDataSigningPrivateKey_(cert, validDays, 1, sigoid, priv);
  id<JavaSecurityPublicKey> cpub = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getPublicKey];
  [cert verifyWithJavaSecurityPublicKey:cpub];
  if (![((id<JavaSecurityPublicKey>) nil_chk(cpub)) isEqual:jpub]) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"pubkey mismatch");
  IOSObjectArray *rv = [IOSObjectArray arrayWithObjects:(id[]){ jpub, jpriv, cert, crl } count:4 type:NSObject_class_()];
  return rv;
}

IOSObjectArray *NetI2pCryptoSelfSignedGenerator_renewWithJavaSecurityCertX509Certificate_withJavaSecurityPrivateKey_withInt_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPrivateKey> jpriv, jint validDays) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  NSString *cname = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"CN");
  if (cname == nil) cname = @"localhost";
  NSString *ou = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"OU");
  NSString *o = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"O");
  NSString *l = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"L");
  NSString *st = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"ST");
  NSString *c = NetI2pCryptoCertUtil_getSubjectValueWithJavaSecurityCertX509Certificate_withNSString_(cert, @"C");
  id<JavaUtilSet> altNames = NetI2pCryptoCertUtil_getSubjectAlternativeNamesWithJavaSecurityCertX509Certificate_(cert);
  NetI2pDataSigningPrivateKey *priv = NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_(jpriv);
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPrivateKey *) nil_chk(priv)) getType];
  NetI2pDataSigningPublicKey *pub = NetI2pCryptoKeyGenerator_getSigningPublicKeyWithNetI2pDataSigningPrivateKey_(priv);
  id<JavaSecurityPublicKey> jpub = NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPublicKey_(pub);
  if (type == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(JreStrcat("$@", @"Unsupported: ", jpriv));
  return NetI2pCryptoSelfSignedGenerator_generateWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_withNetI2pDataSigningPrivateKey_withNetI2pCryptoSigType_withNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_(jpub, jpriv, priv, type, cname, altNames, ou, o, l, st, c, validDays);
}

JavaSecurityCertX509CRL *NetI2pCryptoSelfSignedGenerator_generateCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_withNetI2pDataSigningPrivateKey_(JavaSecurityCertX509Certificate *cert, jint validDays, jint crlNum, IOSByteArray *sigoid, NetI2pDataSigningPrivateKey *priv) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  IOSByteArray *tbs = NetI2pCryptoSelfSignedGenerator_genTBSCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_(cert, validDays, crlNum, sigoid);
  jint tbslen = ((IOSByteArray *) nil_chk(tbs))->size_;
  NetI2pDataSignature *sig = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) signWithByteArray:tbs withNetI2pDataSigningPrivateKey:priv];
  if (sig == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"sig failed");
  IOSByteArray *sigbytes = NetI2pCryptoSigUtil_toJavaSigWithNetI2pDataSignature_(sig);
  jint seqlen = tbslen + ((IOSByteArray *) nil_chk(sigoid))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(sigbytes))->size_ + 1);
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(seqlen);
  IOSByteArray *cb = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(cb, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(cb, idx, seqlen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tbs, 0, cb, idx, tbs->size_);
  idx += tbs->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigoid, 0, cb, idx, sigoid->size_);
  idx += sigoid->size_;
  *IOSByteArray_GetRef(cb, idx++) = (jint) 0x03;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(cb, idx, sigbytes->size_ + 1);
  *IOSByteArray_GetRef(cb, idx++) = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigbytes, 0, cb, idx, sigbytes->size_);
  JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_(cb);
  JavaSecurityCertX509CRL *rv;
  @try {
    JavaSecurityCertCertificateFactory *cf = JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509");
    rv = (JavaSecurityCertX509CRL *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCRLWithJavaIoInputStream:bais], [JavaSecurityCertX509CRL class]);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"cert error", iae);
  }
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_genTBSWithNSString_withJavaUtilSet_withNSString_withNSString_withNSString_withNSString_withNSString_withInt_withByteArray_withJavaSecurityPublicKey_(NSString *cname, id<JavaUtilSet> altNames, NSString *ou, NSString *o, NSString *l, NSString *st, NSString *c, jint validDays, IOSByteArray *sigoid, id<JavaSecurityPublicKey> jpub) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  IOSByteArray *version_ = [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xa0, 3, 2, 1, 2 } count:5];
  IOSByteArray *serial = [IOSByteArray arrayWithLength:10];
  *IOSByteArray_GetRef(serial, 0) = 2;
  *IOSByteArray_GetRef(serial, 1) = 8;
  [((NetI2pUtilRandomSource *) nil_chk(NetI2pUtilRandomSource_getInstance())) nextBytesWithByteArray:serial withInt:2 withInt:8];
  *IOSByteArray_GetRef(serial, 2) &= (jint) 0x7f;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"CN="])) appendWithNSString:cname];
  if (ou != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@",OU="])) appendWithNSString:ou];
  if (o != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@",O="])) appendWithNSString:o];
  if (l != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@",L="])) appendWithNSString:l];
  if (st != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@",ST="])) appendWithNSString:st];
  if (c != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@",C="])) appendWithNSString:c];
  NSString *dname = [buf description];
  IOSByteArray *issuer = [(create_JavaxSecurityAuthX500X500Principal_initWithNSString_withJavaUtilMap_(dname, NetI2pCryptoSelfSignedGenerator_OIDS)) getEncoded];
  IOSByteArray *validity = NetI2pCryptoSelfSignedGenerator_getValidityWithInt_(validDays);
  IOSByteArray *subject = issuer;
  IOSByteArray *pubbytes = [((id<JavaSecurityPublicKey>) nil_chk(jpub)) getEncoded];
  IOSByteArray *extbytes = NetI2pCryptoSelfSignedGenerator_getExtensionsWithByteArray_withNSString_withJavaUtilSet_(pubbytes, cname, altNames);
  jint len = version_->size_ + serial->size_ + ((IOSByteArray *) nil_chk(sigoid))->size_ + ((IOSByteArray *) nil_chk(issuer))->size_ + ((IOSByteArray *) nil_chk(validity))->size_ + ((IOSByteArray *) nil_chk(subject))->size_ + ((IOSByteArray *) nil_chk(pubbytes))->size_ + ((IOSByteArray *) nil_chk(extbytes))->size_;
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(len);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(version_, 0, rv, idx, version_->size_);
  idx += version_->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(serial, 0, rv, idx, serial->size_);
  idx += serial->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigoid, 0, rv, idx, sigoid->size_);
  idx += sigoid->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(issuer, 0, rv, idx, issuer->size_);
  idx += issuer->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(validity, 0, rv, idx, validity->size_);
  idx += validity->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(subject, 0, rv, idx, subject->size_);
  idx += subject->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pubbytes, 0, rv, idx, pubbytes->size_);
  idx += pubbytes->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(extbytes, 0, rv, idx, extbytes->size_);
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_genTBSCRLWithJavaSecurityCertX509Certificate_withInt_withInt_withByteArray_(JavaSecurityCertX509Certificate *cert, jint validDays, jint crlNum, IOSByteArray *sigalg) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  IOSByteArray *version_ = [IOSByteArray arrayWithBytes:(jbyte[]){ 2, 1, 1 } count:3];
  IOSByteArray *issuer = [((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])) getEncoded];
  IOSByteArray *serial = [((JavaMathBigInteger *) nil_chk([cert getSerialNumber])) toByteArray];
  if (((IOSByteArray *) nil_chk(serial))->size_ > 255) @throw create_JavaLangIllegalArgumentException_init();
  jlong now = JavaLangSystem_currentTimeMillis() - (24LL * 60 * 60 * 1000);
  jlong then = now + ((validDays + 1) * 24LL * 60 * 60 * 1000);
  IOSByteArray *nowbytes = NetI2pCryptoSelfSignedGenerator_getDateWithLong_(now);
  IOSByteArray *thenbytes = NetI2pCryptoSelfSignedGenerator_getDateWithLong_(then);
  IOSByteArray *extbytes = NetI2pCryptoSelfSignedGenerator_getCRLExtensionsWithInt_(crlNum);
  jint revlen = 2 + serial->size_ + ((IOSByteArray *) nil_chk(nowbytes))->size_;
  jint revseqlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(revlen);
  jint revsseqlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(revseqlen);
  jint len = version_->size_ + ((IOSByteArray *) nil_chk(sigalg))->size_ + ((IOSByteArray *) nil_chk(issuer))->size_ + nowbytes->size_ + ((IOSByteArray *) nil_chk(thenbytes))->size_ + revsseqlen + ((IOSByteArray *) nil_chk(extbytes))->size_;
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(len);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(version_, 0, rv, idx, version_->size_);
  idx += version_->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigalg, 0, rv, idx, sigalg->size_);
  idx += sigalg->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(issuer, 0, rv, idx, issuer->size_);
  idx += issuer->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nowbytes, 0, rv, idx, nowbytes->size_);
  idx += nowbytes->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(thenbytes, 0, rv, idx, thenbytes->size_);
  idx += thenbytes->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, revseqlen);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, revlen);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) serial->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(serial, 0, rv, idx, serial->size_);
  idx += serial->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nowbytes, 0, rv, idx, nowbytes->size_);
  idx += nowbytes->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(extbytes, 0, rv, idx, extbytes->size_);
  return rv;
}

jint NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(jint val) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  jint rv;
  if (val > 255) rv = 3;
  else if (val > 127) rv = 2;
  else rv = 1;
  return 1 + rv + val;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getValidityWithInt_(jint validDays) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  IOSByteArray *rv = [IOSByteArray arrayWithLength:32];
  *IOSByteArray_GetRef(rv, 0) = (jint) 0x30;
  *IOSByteArray_GetRef(rv, 1) = 30;
  jlong now = JavaLangSystem_currentTimeMillis() - (24LL * 60 * 60 * 1000);
  jlong then = now + ((validDays + 1) * 24LL * 60 * 60 * 1000);
  IOSByteArray *nowbytes = NetI2pCryptoSelfSignedGenerator_getDateWithLong_(now);
  IOSByteArray *thenbytes = NetI2pCryptoSelfSignedGenerator_getDateWithLong_(then);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nowbytes, 0, rv, 2, 15);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(thenbytes, 0, rv, 17, 15);
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getDateWithLong_(jlong now) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  JavaTextSimpleDateFormat *fmt = create_JavaTextSimpleDateFormat_initWithNSString_(@"yyMMddHHmmss");
  [fmt setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT")];
  IOSByteArray *nowbytes = NetI2pDataDataHelper_getASCIIWithNSString_([fmt formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(now)]);
  if (((IOSByteArray *) nil_chk(nowbytes))->size_ != 12) @throw create_JavaLangIllegalArgumentException_init();
  IOSByteArray *rv = [IOSByteArray arrayWithLength:15];
  *IOSByteArray_GetRef(rv, 0) = (jint) 0x17;
  *IOSByteArray_GetRef(rv, 1) = 13;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nowbytes, 0, rv, 2, 12);
  *IOSByteArray_GetRef(rv, 14) = (jbyte) 'Z';
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getExtensionsWithByteArray_withNSString_withJavaUtilSet_(IOSByteArray *pubbytes, NSString *cname, id<JavaUtilSet> altNames) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  jint pidx = 1;
  jint skip = IOSByteArray_Get(nil_chk(pubbytes), pidx++);
  if ((skip & (jint) 0x80) != 0) pidx += skip & (jint) 0x80;
  pidx++;
  JavaSecurityMessageDigest *md = NetI2pCryptoSHA1_getInstance();
  [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:pubbytes withInt:pidx withInt:pubbytes->size_ - pidx];
  IOSByteArray *sha = [md digest];
  IOSByteArray *oid1 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_SKI);
  IOSByteArray *oid2 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_USAGE);
  IOSByteArray *oid3 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_BASIC);
  IOSByteArray *oid4 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_SAN);
  IOSByteArray *oid5 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_AKI);
  IOSByteArray *oid6 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_POLICY);
  IOSByteArray *oid7 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_POLICY_ANY);
  IOSByteArray *oid8 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_QT_UNOTICE);
  IOSByteArray *oid9 = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_QT_CPSURI);
  IOSByteArray *TRUE_ = [IOSByteArray arrayWithBytes:(jbyte[]){ 1, 1, (jbyte) (jint) 0xff } count:3];
  jint wrap1len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(sha))->size_);
  jint ext1len = ((IOSByteArray *) nil_chk(oid1))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap1len);
  jint wrap2len = 4;
  jint ext2len = ((IOSByteArray *) nil_chk(oid2))->size_ + TRUE_->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap2len);
  jint wrap3len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(TRUE_->size_);
  jint ext3len = ((IOSByteArray *) nil_chk(oid3))->size_ + TRUE_->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap3len);
  jint wrap41len = 0;
  if (altNames == nil) {
    altNames = create_JavaUtilTreeSet_init();
  }
  else {
    altNames = create_JavaUtilTreeSet_initWithJavaUtilCollection_(altNames);
    [altNames removeWithId:@"0:0:0:0:0:0:0:1"];
  }
  [altNames addWithId:cname];
  jboolean isCA = ![((NSString *) nil_chk(cname)) java_contains:@"@"] && ![cname java_hasSuffix:@".family.i2p.net"];
  if (isCA) {
    [altNames addWithId:@"localhost"];
    [altNames addWithId:@"127.0.0.1"];
    [altNames addWithId:@"::1"];
  }
  for (NSString * __strong n in altNames) {
    jint len;
    if (NetI2pUtilAddresses_isIPv4AddressWithNSString_(n)) len = 4;
    else if (NetI2pUtilAddresses_isIPv6AddressWithNSString_(n)) len = 16;
    else len = [((NSString *) nil_chk(n)) java_length];
    wrap41len += NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(len);
  }
  jint wrap4len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap41len);
  jint ext4len = ((IOSByteArray *) nil_chk(oid4))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap4len);
  jint wrap51len = wrap1len;
  jint wrap5len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap51len);
  jint ext5len = ((IOSByteArray *) nil_chk(oid5))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap5len);
  IOSByteArray *policyTextBytes = NetI2pDataDataHelper_getASCIIWithNSString_(@"This self-signed certificate is required for secure local access to I2P services.");
  IOSByteArray *policyURIBytes = NetI2pDataDataHelper_getASCIIWithNSString_(@"https://geti2p.net/");
  jint wrap61len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(policyTextBytes))->size_);
  jint wrap62len = ((IOSByteArray *) nil_chk(oid8))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap61len);
  jint wrap63len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(policyURIBytes))->size_);
  jint wrap64len = ((IOSByteArray *) nil_chk(oid9))->size_ + wrap63len;
  jint wrap65len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap62len) + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap64len);
  jint wrap66len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(((IOSByteArray *) nil_chk(oid7))->size_ + wrap65len);
  jint wrap67len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap66len);
  jint wrap68len = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap67len);
  jint ext6len = ((IOSByteArray *) nil_chk(oid6))->size_ + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(wrap68len);
  jint extslen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext1len) + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext2len) + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext4len) + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext5len);
  if (isCA) extslen += NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext3len) + NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(ext6len);
  jint seqlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(extslen);
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(seqlen);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0xa3;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seqlen);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, extslen);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext1len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid1, 0, rv, idx, oid1->size_);
  idx += oid1->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap1len);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, sha->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sha, 0, rv, idx, sha->size_);
  idx += sha->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext5len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid5, 0, rv, idx, oid5->size_);
  idx += oid5->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap5len);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap51len);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x80;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, sha->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sha, 0, rv, idx, sha->size_);
  idx += sha->size_;
  if (isCA) {
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext3len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid3, 0, rv, idx, oid3->size_);
    idx += oid3->size_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TRUE_, 0, rv, idx, TRUE_->size_);
    idx += TRUE_->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap3len);
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, TRUE_->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TRUE_, 0, rv, idx, TRUE_->size_);
    idx += TRUE_->size_;
  }
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext2len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid2, 0, rv, idx, oid2->size_);
  idx += oid2->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(TRUE_, 0, rv, idx, TRUE_->size_);
  idx += TRUE_->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap2len);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x03;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x02;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x01;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0xa6;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext4len);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid4, 0, rv, idx, oid4->size_);
  idx += oid4->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap4len);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap41len);
  for (NSString * __strong n in altNames) {
    IOSByteArray *b;
    if (NetI2pUtilAddresses_isIPv4AddressWithNSString_(n) || NetI2pUtilAddresses_isIPv6AddressWithNSString_(n)) {
      b = NetI2pUtilAddresses_getIPWithNSString_(n);
      if (b == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"fail ", n));
      *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x87;
    }
    else {
      b = NetI2pDataDataHelper_getASCIIWithNSString_(n);
      *IOSByteArray_GetRef(rv, idx++) = (jbyte) (isCA ? (jint) 0x82 : (jint) 0x81);
    }
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ((IOSByteArray *) nil_chk(b))->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, rv, idx, b->size_);
    idx += b->size_;
  }
  if (isCA) {
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, ext6len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid6, 0, rv, idx, oid6->size_);
    idx += oid6->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap68len);
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap67len);
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap66len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid7, 0, rv, idx, oid7->size_);
    idx += oid7->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap65len);
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap64len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid9, 0, rv, idx, oid9->size_);
    idx += oid9->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x16;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, policyURIBytes->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(policyURIBytes, 0, rv, idx, policyURIBytes->size_);
    idx += policyURIBytes->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap62len);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid8, 0, rv, idx, oid8->size_);
    idx += oid8->size_;
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, wrap61len);
    *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x16;
    idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, policyTextBytes->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(policyTextBytes, 0, rv, idx, policyTextBytes->size_);
    idx += policyTextBytes->size_;
  }
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getCRLExtensionsWithInt_(jint crlNum) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  if (crlNum < 0 || crlNum > 255) @throw create_JavaLangIllegalArgumentException_init();
  IOSByteArray *oid = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NetI2pCryptoSelfSignedGenerator_OID_CRLNUM);
  jint extlen = ((IOSByteArray *) nil_chk(oid))->size_ + 5;
  jint extslen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(extlen);
  jint seqlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(extslen);
  jint totlen = NetI2pCryptoSelfSignedGenerator_spaceForWithInt_(seqlen);
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0xa0;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seqlen);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, extslen);
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, extlen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid, 0, rv, idx, oid->size_);
  idx += oid->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x04;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) 3;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) (jint) 0x02;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) 1;
  *IOSByteArray_GetRef(rv, idx++) = (jbyte) crlNum;
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getEncodedOIDSeqWithNSString_(NSString *oid) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(16);
  [baos writeWithInt:(jint) 0x30];
  [baos writeWithInt:0];
  IOSByteArray *b = NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(oid);
  [baos writeWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
  [baos writeWithInt:(jint) 0x05];
  [baos writeWithInt:0];
  IOSByteArray *rv = [baos toByteArray];
  *IOSByteArray_GetRef(nil_chk(rv), 1) = (jbyte) (rv->size_ - 2);
  return rv;
}

IOSByteArray *NetI2pCryptoSelfSignedGenerator_getEncodedOIDWithNSString_(NSString *oid) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(16);
  [baos writeWithInt:(jint) 0x06];
  [baos writeWithInt:0];
  IOSObjectArray *f = NetI2pDataDataHelper_splitWithNSString_withNSString_(oid, @"[.]");
  if (((IOSObjectArray *) nil_chk(f))->size_ < 2) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"length: ", f->size_));
  [baos writeWithInt:(40 * JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(f, 0))) + JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(f, 1))];
  for (jint i = 2; i < f->size_; i++) {
    jint v = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(f, i));
    if (v >= 128 * 128 * 128 || v < 0) @throw create_JavaLangIllegalArgumentException_init();
    if (v >= 128 * 128) [baos writeWithInt:(JreRShift32(v, 14)) | (jint) 0x80];
    if (v >= 128) [baos writeWithInt:(JreRShift32(v, 7)) | (jint) 0x80];
    [baos writeWithInt:v & (jint) 0x7f];
  }
  IOSByteArray *rv = [baos toByteArray];
  if (((IOSByteArray *) nil_chk(rv))->size_ > 129) @throw create_JavaLangIllegalArgumentException_init();
  *IOSByteArray_GetRef(rv, 1) = (jbyte) (rv->size_ - 2);
  return rv;
}

void NetI2pCryptoSelfSignedGenerator_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pCryptoSelfSignedGenerator_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    NetI2pCryptoSelfSignedGenerator_usage();
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"keygen"]) {
    if (args->size_ >= 4) NetI2pCryptoSU3File_mainWithNSStringArray_(args);
    else NetI2pCryptoSelfSignedGenerator_usage();
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"renew"]) {
    if (args->size_ >= 3) {
      NSString *ksPW;
      NSString *cert;
      NSString *ks;
      if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) isEqual:@"-p"]) {
        ksPW = IOSObjectArray_Get(args, 2);
        cert = IOSObjectArray_Get(args, 3);
        ks = IOSObjectArray_Get(args, 4);
      }
      else {
        ksPW = NetI2pCryptoKeyStoreUtil_DEFAULT_KEYSTORE_PASSWORD;
        cert = IOSObjectArray_Get(args, 1);
        ks = IOSObjectArray_Get(args, 2);
      }
      NSString *keypw = @"";
      @try {
        while ([keypw java_length] < 6) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"Enter password for key: "];
          keypw = NetI2pDataDataHelper_readLineWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in));
          if (keypw == nil) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nEOF reading password"];
            JavaLangSystem_exitWithInt_(1);
          }
          keypw = [((NSString *) nil_chk(keypw)) java_trim];
          if ([((NSString *) nil_chk(keypw)) java_length] > 0 && [keypw java_length] < 6) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Key password must be at least 6 characters"];
        }
      }
      @catch (JavaIoIOException *ioe) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Error asking for password"];
        @throw ioe;
      }
      JavaIoFile *ksf = create_JavaIoFile_initWithNSString_(ks);
      JavaSecurityCertX509Certificate *newCert = NetI2pCryptoKeyStoreUtil_renewPrivateKeyCertificateWithJavaIoFile_withNSString_withNSString_withNSString_withInt_(ksf, ksPW, nil, keypw, 3652);
      NetI2pCryptoCertUtil_saveCertWithJavaSecurityCertCertificate_withJavaIoFile_(newCert, create_JavaIoFile_initWithNSString_(cert));
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"Certificate renewed for 10 years, and stored in ", cert, @" and ", ks)];
    }
    else {
      NetI2pCryptoSelfSignedGenerator_usage();
    }
  }
  else {
    NetI2pCryptoSelfSignedGenerator_usage();
  }
}

void NetI2pCryptoSelfSignedGenerator_usage() {
  NetI2pCryptoSelfSignedGenerator_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: selfsignedgenerator keygen [-t type|code] [-p keystorepw] [-r crlFile.crl] publicKeyFile.crt keystore.ks localhost\n       selfsignedgenerator renew  [-p keystorepw] publicKeyFile.crt keystore.ks"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoSelfSignedGenerator)
