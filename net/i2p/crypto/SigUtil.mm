//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SigUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/KeyFactory.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SignatureException.h"
#include "java/security/interfaces/DSAPrivateKey.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/interfaces/RSAPrivateCrtKey.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/DSAPrivateKeySpec.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPrivateKeySpec.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/RSAKeyGenParameterSpec.h"
#include "java/security/spec/RSAPrivateKeySpec.h"
#include "java/security/spec/RSAPublicKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "java/util/Map.h"
#include "net/i2p/crypto/CryptoConstants.h"
#include "net/i2p/crypto/RSASigningPrivateCrtKey.h"
#include "net/i2p/crypto/SigAlgo.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/crypto/SigUtil.h"
#include "net/i2p/crypto/eddsa/EdDSAPrivateKey.h"
#include "net/i2p/crypto/eddsa/EdDSAPublicKey.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAParameterSpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAPrivateKeySpec.h"
#include "net/i2p/crypto/eddsa/spec/EdDSAPublicKeySpec.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/NativeBigInteger.h"

@interface NetI2pCryptoSigUtil ()

- (instancetype)init;

+ (id<JavaSecurityInterfacesECPublicKey>)cvtToJavaECKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (id<JavaSecurityInterfacesECPrivateKey>)cvtToJavaECKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (NetI2pCryptoEddsaEdDSAPublicKey *)cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk;

+ (NetI2pCryptoEddsaEdDSAPrivateKey *)cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk;

+ (IOSByteArray *)getDataWithJavaIoFile:(JavaIoFile *)file;

+ (IOSObjectArray *)splitWithByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)sigBytesToASN1WithByteArray:(IOSByteArray *)sig;

+ (IOSByteArray *)aSN1ToSigBytesWithByteArray:(IOSByteArray *)asn
                                      withInt:(jint)len;

@end

inline id<JavaUtilMap> NetI2pCryptoSigUtil_get__ECPubkeyCache(void);
static id<JavaUtilMap> NetI2pCryptoSigUtil__ECPubkeyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSigUtil, _ECPubkeyCache, id<JavaUtilMap>)

inline id<JavaUtilMap> NetI2pCryptoSigUtil_get__ECPrivkeyCache(void);
static id<JavaUtilMap> NetI2pCryptoSigUtil__ECPrivkeyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSigUtil, _ECPrivkeyCache, id<JavaUtilMap>)

inline id<JavaUtilMap> NetI2pCryptoSigUtil_get__EdPubkeyCache(void);
static id<JavaUtilMap> NetI2pCryptoSigUtil__EdPubkeyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSigUtil, _EdPubkeyCache, id<JavaUtilMap>)

inline id<JavaUtilMap> NetI2pCryptoSigUtil_get__EdPrivkeyCache(void);
static id<JavaUtilMap> NetI2pCryptoSigUtil__EdPrivkeyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pCryptoSigUtil, _EdPrivkeyCache, id<JavaUtilMap>)

__attribute__((unused)) static void NetI2pCryptoSigUtil_init(NetI2pCryptoSigUtil *self);

__attribute__((unused)) static NetI2pCryptoSigUtil *new_NetI2pCryptoSigUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pCryptoSigUtil *create_NetI2pCryptoSigUtil_init(void);

__attribute__((unused)) static id<JavaSecurityInterfacesECPublicKey> NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

__attribute__((unused)) static id<JavaSecurityInterfacesECPrivateKey> NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

__attribute__((unused)) static NetI2pCryptoEddsaEdDSAPublicKey *NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk);

__attribute__((unused)) static NetI2pCryptoEddsaEdDSAPrivateKey *NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSigUtil_getDataWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static IOSObjectArray *NetI2pCryptoSigUtil_splitWithByteArray_(IOSByteArray *b);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSigUtil_sigBytesToASN1WithByteArray_(IOSByteArray *sig);

__attribute__((unused)) static IOSByteArray *NetI2pCryptoSigUtil_aSN1ToSigBytesWithByteArray_withInt_(IOSByteArray *asn, jint len);

J2OBJC_INITIALIZED_DEFN(NetI2pCryptoSigUtil)

@implementation NetI2pCryptoSigUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoSigUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaSecurityPublicKey>)toJavaKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (id<JavaSecurityPrivateKey>)toJavaKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pk {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pk
                                             withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_withNetI2pCryptoSigType_(pk, type);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_(pk);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)pk
                                               withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_withNetI2pCryptoSigType_(pk, type);
}

+ (id<JavaSecurityInterfacesECPublicKey>)toJavaECKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (id<JavaSecurityInterfacesECPrivateKey>)toJavaECKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (id<JavaSecurityInterfacesECPublicKey>)cvtToJavaECKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (id<JavaSecurityInterfacesECPrivateKey>)cvtToJavaECKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)pk
                                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPublicKey_withNetI2pCryptoSigType_(pk, type);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesECPrivateKey:(id<JavaSecurityInterfacesECPrivateKey>)pk
                                                           withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPrivateKey_withNetI2pCryptoSigType_(pk, type);
}

+ (NetI2pCryptoEddsaEdDSAPublicKey *)toJavaEdDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (NetI2pCryptoEddsaEdDSAPrivateKey *)toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pCryptoEddsaEdDSAPublicKey *)cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (NetI2pCryptoEddsaEdDSAPrivateKey *)cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey:(NetI2pCryptoEddsaEdDSAPublicKey *)pk
                                                       withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey_withNetI2pCryptoSigType_(pk, type);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey:(NetI2pCryptoEddsaEdDSAPrivateKey *)pk
                                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey_withNetI2pCryptoSigType_(pk, type);
}

+ (id<JavaSecurityInterfacesDSAPublicKey>)toJavaDSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (id<JavaSecurityInterfacesDSAPrivateKey>)toJavaDSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey:(id<JavaSecurityInterfacesDSAPublicKey>)pk {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey_(pk);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey:(id<JavaSecurityInterfacesDSAPrivateKey>)pk {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey_(pk);
}

+ (id<JavaSecurityInterfacesRSAPublicKey>)toJavaRSAKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)pk {
  return NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPublicKey_(pk);
}

+ (id<JavaSecurityInterfacesRSAPrivateKey>)toJavaRSAKeyWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)pk {
  return NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPrivateKey_(pk);
}

+ (NetI2pDataSigningPublicKey *)fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey:(id<JavaSecurityInterfacesRSAPublicKey>)pk
                                                          withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey_withNetI2pCryptoSigType_(pk, type);
}

+ (NetI2pDataSigningPrivateKey *)fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey:(id<JavaSecurityInterfacesRSAPrivateKey>)pk
                                                            withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey_withNetI2pCryptoSigType_(pk, type);
}

+ (IOSByteArray *)toJavaSigWithNetI2pDataSignature:(NetI2pDataSignature *)sig {
  return NetI2pCryptoSigUtil_toJavaSigWithNetI2pDataSignature_(sig);
}

+ (NetI2pDataSignature *)fromJavaSigWithByteArray:(IOSByteArray *)asn
                          withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_fromJavaSigWithByteArray_withNetI2pCryptoSigType_(asn, type);
}

+ (id<JavaSecurityPublicKey>)importJavaPublicKeyWithJavaIoFile:(JavaIoFile *)file
                                       withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_importJavaPublicKeyWithJavaIoFile_withNetI2pCryptoSigType_(file, type);
}

+ (id<JavaSecurityPrivateKey>)importJavaPrivateKeyWithJavaIoFile:(JavaIoFile *)file
                                         withNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  return NetI2pCryptoSigUtil_importJavaPrivateKeyWithJavaIoFile_withNetI2pCryptoSigType_(file, type);
}

+ (IOSByteArray *)getDataWithJavaIoFile:(JavaIoFile *)file {
  return NetI2pCryptoSigUtil_getDataWithJavaIoFile_(file);
}

+ (IOSObjectArray *)splitWithByteArray:(IOSByteArray *)b {
  return NetI2pCryptoSigUtil_splitWithByteArray_(b);
}

+ (IOSByteArray *)combineWithJavaMathBigInteger:(JavaMathBigInteger *)x
                         withJavaMathBigInteger:(JavaMathBigInteger *)y
                                        withInt:(jint)len {
  return NetI2pCryptoSigUtil_combineWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(x, y, len);
}

+ (IOSByteArray *)rectifyWithJavaMathBigInteger:(JavaMathBigInteger *)bi
                                        withInt:(jint)len {
  return NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(bi, len);
}

+ (IOSByteArray *)sigBytesToASN1WithByteArray:(IOSByteArray *)sig {
  return NetI2pCryptoSigUtil_sigBytesToASN1WithByteArray_(sig);
}

+ (IOSByteArray *)sigBytesToASN1WithJavaMathBigInteger:(JavaMathBigInteger *)r
                                withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return NetI2pCryptoSigUtil_sigBytesToASN1WithJavaMathBigInteger_withJavaMathBigInteger_(r, s);
}

+ (jint)intToASN1WithByteArray:(IOSByteArray *)d
                       withInt:(jint)idx
                       withInt:(jint)val {
  return NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(d, idx, val);
}

+ (IOSByteArray *)aSN1ToSigBytesWithByteArray:(IOSByteArray *)asn
                                      withInt:(jint)len {
  return NetI2pCryptoSigUtil_aSN1ToSigBytesWithByteArray_withInt_(asn, len);
}

+ (IOSObjectArray *)aSN1ToBigIntegerWithByteArray:(IOSByteArray *)asn
                                          withInt:(jint)len {
  return NetI2pCryptoSigUtil_aSN1ToBigIntegerWithByteArray_withInt_(asn, len);
}

+ (void)clearCaches {
  NetI2pCryptoSigUtil_clearCaches();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 6, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 7, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 8, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesECPublicKey;", 0x9, 9, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesECPrivateKey;", 0x9, 9, 3, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesECPublicKey;", 0xa, 10, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesECPrivateKey;", 0xa, 10, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 11, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 12, 2, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaEdDSAPublicKey;", 0x9, 13, 1, 2, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaEdDSAPrivateKey;", 0x9, 13, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaEdDSAPublicKey;", 0xa, 14, 1, 2, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEddsaEdDSAPrivateKey;", 0xa, 14, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 15, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 16, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesDSAPublicKey;", 0x9, 17, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesDSAPrivateKey;", 0x9, 17, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 18, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 19, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesRSAPublicKey;", 0x9, 20, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesRSAPrivateKey;", 0x9, 20, 3, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x9, 4, 21, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPrivateKey;", 0x9, 4, 22, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSignature;", 0x9, 25, 26, 27, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 28, 29, 30, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 31, 29, 30, -1, -1, -1 },
    { NULL, "[B", 0xa, 32, 33, 34, -1, -1, -1 },
    { NULL, "[LNetI2pUtilNativeBigInteger;", 0xa, 35, 36, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 37, 38, 39, -1, -1, -1 },
    { NULL, "[B", 0x9, 40, 41, 39, -1, -1, -1 },
    { NULL, "[B", 0xa, 42, 36, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 46, 47, 27, -1, -1, -1 },
    { NULL, "[LNetI2pUtilNativeBigInteger;", 0x9, 48, 47, 27, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toJavaKeyWithNetI2pDataSigningPublicKey:);
  methods[2].selector = @selector(toJavaKeyWithNetI2pDataSigningPrivateKey:);
  methods[3].selector = @selector(fromJavaKeyWithJavaSecurityPublicKey:);
  methods[4].selector = @selector(fromJavaKeyWithJavaSecurityPublicKey:withNetI2pCryptoSigType:);
  methods[5].selector = @selector(fromJavaKeyWithJavaSecurityPrivateKey:);
  methods[6].selector = @selector(fromJavaKeyWithJavaSecurityPrivateKey:withNetI2pCryptoSigType:);
  methods[7].selector = @selector(toJavaECKeyWithNetI2pDataSigningPublicKey:);
  methods[8].selector = @selector(toJavaECKeyWithNetI2pDataSigningPrivateKey:);
  methods[9].selector = @selector(cvtToJavaECKeyWithNetI2pDataSigningPublicKey:);
  methods[10].selector = @selector(cvtToJavaECKeyWithNetI2pDataSigningPrivateKey:);
  methods[11].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesECPublicKey:withNetI2pCryptoSigType:);
  methods[12].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesECPrivateKey:withNetI2pCryptoSigType:);
  methods[13].selector = @selector(toJavaEdDSAKeyWithNetI2pDataSigningPublicKey:);
  methods[14].selector = @selector(toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:);
  methods[15].selector = @selector(cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey:);
  methods[16].selector = @selector(cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey:);
  methods[17].selector = @selector(fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey:withNetI2pCryptoSigType:);
  methods[18].selector = @selector(fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey:withNetI2pCryptoSigType:);
  methods[19].selector = @selector(toJavaDSAKeyWithNetI2pDataSigningPublicKey:);
  methods[20].selector = @selector(toJavaDSAKeyWithNetI2pDataSigningPrivateKey:);
  methods[21].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey:);
  methods[22].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey:);
  methods[23].selector = @selector(toJavaRSAKeyWithNetI2pDataSigningPublicKey:);
  methods[24].selector = @selector(toJavaRSAKeyWithNetI2pDataSigningPrivateKey:);
  methods[25].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey:withNetI2pCryptoSigType:);
  methods[26].selector = @selector(fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey:withNetI2pCryptoSigType:);
  methods[27].selector = @selector(toJavaSigWithNetI2pDataSignature:);
  methods[28].selector = @selector(fromJavaSigWithByteArray:withNetI2pCryptoSigType:);
  methods[29].selector = @selector(importJavaPublicKeyWithJavaIoFile:withNetI2pCryptoSigType:);
  methods[30].selector = @selector(importJavaPrivateKeyWithJavaIoFile:withNetI2pCryptoSigType:);
  methods[31].selector = @selector(getDataWithJavaIoFile:);
  methods[32].selector = @selector(splitWithByteArray:);
  methods[33].selector = @selector(combineWithJavaMathBigInteger:withJavaMathBigInteger:withInt:);
  methods[34].selector = @selector(rectifyWithJavaMathBigInteger:withInt:);
  methods[35].selector = @selector(sigBytesToASN1WithByteArray:);
  methods[36].selector = @selector(sigBytesToASN1WithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[37].selector = @selector(intToASN1WithByteArray:withInt:withInt:);
  methods[38].selector = @selector(aSN1ToSigBytesWithByteArray:withInt:);
  methods[39].selector = @selector(aSN1ToBigIntegerWithByteArray:withInt:);
  methods[40].selector = @selector(clearCaches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ECPubkeyCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 49, 50, -1 },
    { "_ECPrivkeyCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 51, 52, -1 },
    { "_EdPubkeyCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 53, 54, -1 },
    { "_EdPrivkeyCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 55, 56, -1 },
  };
  static const void *ptrTable[] = { "toJavaKey", "LNetI2pDataSigningPublicKey;", "LJavaSecurityGeneralSecurityException;", "LNetI2pDataSigningPrivateKey;", "fromJavaKey", "LJavaSecurityPublicKey;", "LJavaSecurityPublicKey;LNetI2pCryptoSigType;", "LJavaSecurityPrivateKey;", "LJavaSecurityPrivateKey;LNetI2pCryptoSigType;", "toJavaECKey", "cvtToJavaECKey", "LJavaSecurityInterfacesECPublicKey;LNetI2pCryptoSigType;", "LJavaSecurityInterfacesECPrivateKey;LNetI2pCryptoSigType;", "toJavaEdDSAKey", "cvtToJavaEdDSAKey", "LNetI2pCryptoEddsaEdDSAPublicKey;LNetI2pCryptoSigType;", "LNetI2pCryptoEddsaEdDSAPrivateKey;LNetI2pCryptoSigType;", "toJavaDSAKey", "LJavaSecurityInterfacesDSAPublicKey;", "LJavaSecurityInterfacesDSAPrivateKey;", "toJavaRSAKey", "LJavaSecurityInterfacesRSAPublicKey;LNetI2pCryptoSigType;", "LJavaSecurityInterfacesRSAPrivateKey;LNetI2pCryptoSigType;", "toJavaSig", "LNetI2pDataSignature;", "fromJavaSig", "[BLNetI2pCryptoSigType;", "LJavaSecuritySignatureException;", "importJavaPublicKey", "LJavaIoFile;LNetI2pCryptoSigType;", "LJavaSecurityGeneralSecurityException;LJavaIoIOException;", "importJavaPrivateKey", "getData", "LJavaIoFile;", "LJavaIoIOException;", "split", "[B", "combine", "LJavaMathBigInteger;LJavaMathBigInteger;I", "LJavaSecurityInvalidKeyException;", "rectify", "LJavaMathBigInteger;I", "sigBytesToASN1", "LJavaMathBigInteger;LJavaMathBigInteger;", "intToASN1", "[BII", "aSN1ToSigBytes", "[BI", "aSN1ToBigInteger", &NetI2pCryptoSigUtil__ECPubkeyCache, "Ljava/util/Map<Lnet/i2p/data/SigningPublicKey;Ljava/security/interfaces/ECPublicKey;>;", &NetI2pCryptoSigUtil__ECPrivkeyCache, "Ljava/util/Map<Lnet/i2p/data/SigningPrivateKey;Ljava/security/interfaces/ECPrivateKey;>;", &NetI2pCryptoSigUtil__EdPubkeyCache, "Ljava/util/Map<Lnet/i2p/data/SigningPublicKey;Lnet/i2p/crypto/eddsa/EdDSAPublicKey;>;", &NetI2pCryptoSigUtil__EdPrivkeyCache, "Ljava/util/Map<Lnet/i2p/data/SigningPrivateKey;Lnet/i2p/crypto/eddsa/EdDSAPrivateKey;>;" };
  static const J2ObjcClassInfo _NetI2pCryptoSigUtil = { "SigUtil", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x11, 41, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoSigUtil;
}

+ (void)initialize {
  if (self == [NetI2pCryptoSigUtil class]) {
    JreStrongAssignAndConsume(&NetI2pCryptoSigUtil__ECPubkeyCache, new_NetI2pUtilLHMCache_initWithInt_(64));
    JreStrongAssignAndConsume(&NetI2pCryptoSigUtil__ECPrivkeyCache, new_NetI2pUtilLHMCache_initWithInt_(16));
    JreStrongAssignAndConsume(&NetI2pCryptoSigUtil__EdPubkeyCache, new_NetI2pUtilLHMCache_initWithInt_(64));
    JreStrongAssignAndConsume(&NetI2pCryptoSigUtil__EdPrivkeyCache, new_NetI2pUtilLHMCache_initWithInt_(16));
    J2OBJC_SET_INITIALIZED(NetI2pCryptoSigUtil)
  }
}

@end

void NetI2pCryptoSigUtil_init(NetI2pCryptoSigUtil *self) {
  NSObject_init(self);
}

NetI2pCryptoSigUtil *new_NetI2pCryptoSigUtil_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoSigUtil, init)
}

NetI2pCryptoSigUtil *create_NetI2pCryptoSigUtil_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoSigUtil, init)
}

id<JavaSecurityPublicKey> NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  switch ([[((NetI2pCryptoSigType *) nil_chk([((NetI2pDataSigningPublicKey *) nil_chk(pk)) getType])) getBaseAlgorithm] ordinal]) {
    case NetI2pCryptoSigAlgo_Enum_DSA:
    return NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPublicKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_EC:
    return NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPublicKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_EdDSA:
    return NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_RSA:
    return NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPublicKey_(pk);
    default:
    @throw create_JavaLangIllegalArgumentException_init();
  }
}

id<JavaSecurityPrivateKey> NetI2pCryptoSigUtil_toJavaKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  switch ([[((NetI2pCryptoSigType *) nil_chk([((NetI2pDataSigningPrivateKey *) nil_chk(pk)) getType])) getBaseAlgorithm] ordinal]) {
    case NetI2pCryptoSigAlgo_Enum_DSA:
    return NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_EC:
    return NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPrivateKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_EdDSA:
    return NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
    case NetI2pCryptoSigAlgo_Enum_RSA:
    return NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPrivateKey_(pk);
    default:
    @throw create_JavaLangIllegalArgumentException_init();
  }
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> pk) {
  NetI2pCryptoSigUtil_initialize();
  if ([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pk]) {
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey_((id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pk, JavaSecurityInterfacesDSAPublicKey_class_()));
  }
  if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:pk]) {
    id<JavaSecurityInterfacesECPublicKey> k = (id<JavaSecurityInterfacesECPublicKey>) cast_check(pk, JavaSecurityInterfacesECPublicKey_class_());
    id<JavaSecuritySpecAlgorithmParameterSpec> spec = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(k)) getParams];
    NetI2pCryptoSigType *type;
    if ([((id<JavaSecuritySpecAlgorithmParameterSpec>) nil_chk(spec)) isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256);
    else if ([spec isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA384_P384))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA384_P384);
    else if ([spec isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA512_P521))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA512_P521);
    else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unknown EC type");
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPublicKey_withNetI2pCryptoSigType_(k, type);
  }
  if ([pk isKindOfClass:[NetI2pCryptoEddsaEdDSAPublicKey class]]) {
    return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey_withNetI2pCryptoSigType_((NetI2pCryptoEddsaEdDSAPublicKey *) cast_chk(pk, [NetI2pCryptoEddsaEdDSAPublicKey class]), JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519));
  }
  if ([JavaSecurityInterfacesRSAPublicKey_class_() isInstance:pk]) {
    id<JavaSecurityInterfacesRSAPublicKey> k = (id<JavaSecurityInterfacesRSAPublicKey>) cast_check(pk, JavaSecurityInterfacesRSAPublicKey_class_());
    jint sz = [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(k)) getModulus])) bitLength];
    NetI2pCryptoSigType *type;
    if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA256_2048))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA256_2048);
    else if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA384_3072))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA384_3072);
    else if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA512_4096))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA512_4096);
    else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unknown RSA type");
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey_withNetI2pCryptoSigType_(k, type);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown type: ", [((id<JavaSecurityPublicKey>) nil_chk(pk)) java_getClass]));
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityPublicKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  switch ([[((NetI2pCryptoSigType *) nil_chk(type)) getBaseAlgorithm] ordinal]) {
    case NetI2pCryptoSigAlgo_Enum_DSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey_((id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pk, JavaSecurityInterfacesDSAPublicKey_class_()));
    case NetI2pCryptoSigAlgo_Enum_EC:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPublicKey_withNetI2pCryptoSigType_((id<JavaSecurityInterfacesECPublicKey>) cast_check(pk, JavaSecurityInterfacesECPublicKey_class_()), type);
    case NetI2pCryptoSigAlgo_Enum_EdDSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey_withNetI2pCryptoSigType_((NetI2pCryptoEddsaEdDSAPublicKey *) cast_chk(pk, [NetI2pCryptoEddsaEdDSAPublicKey class]), type);
    case NetI2pCryptoSigAlgo_Enum_RSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey_withNetI2pCryptoSigType_((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(pk, JavaSecurityInterfacesRSAPublicKey_class_()), type);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown type: ", type));
  }
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> pk) {
  NetI2pCryptoSigUtil_initialize();
  if ([JavaSecurityInterfacesDSAPrivateKey_class_() isInstance:pk]) {
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey_((id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(pk, JavaSecurityInterfacesDSAPrivateKey_class_()));
  }
  if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:pk]) {
    id<JavaSecurityInterfacesECPrivateKey> k = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(pk, JavaSecurityInterfacesECPrivateKey_class_());
    id<JavaSecuritySpecAlgorithmParameterSpec> spec = [((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(k)) getParams];
    NetI2pCryptoSigType *type;
    if ([((id<JavaSecuritySpecAlgorithmParameterSpec>) nil_chk(spec)) isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256);
    else if ([spec isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA384_P384))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA384_P384);
    else if ([spec isEqual:[((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA512_P521))) getParams]]) type = JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA512_P521);
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"Unknown EC type: ", [((id<JavaSecurityPrivateKey>) nil_chk(pk)) java_getClass], @" spec: ", [spec java_getClass]));
    }
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPrivateKey_withNetI2pCryptoSigType_(k, type);
  }
  if ([pk isKindOfClass:[NetI2pCryptoEddsaEdDSAPrivateKey class]]) {
    return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey_withNetI2pCryptoSigType_((NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(pk, [NetI2pCryptoEddsaEdDSAPrivateKey class]), JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519));
  }
  if ([JavaSecurityInterfacesRSAPrivateKey_class_() isInstance:pk]) {
    id<JavaSecurityInterfacesRSAPrivateKey> k = (id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(pk, JavaSecurityInterfacesRSAPrivateKey_class_());
    jint sz = [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesRSAPrivateKey>) nil_chk(k)) getModulus])) bitLength];
    NetI2pCryptoSigType *type;
    if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA256_2048))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA256_2048);
    else if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA384_3072))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA384_3072);
    else if (sz <= [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, RSA_SHA512_4096))) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getKeysize]) type = JreLoadEnum(NetI2pCryptoSigType, RSA_SHA512_4096);
    else @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unknown RSA type");
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey_withNetI2pCryptoSigType_(k, type);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown type: ", [((id<JavaSecurityPrivateKey>) nil_chk(pk)) java_getClass]));
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityPrivateKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  switch ([[((NetI2pCryptoSigType *) nil_chk(type)) getBaseAlgorithm] ordinal]) {
    case NetI2pCryptoSigAlgo_Enum_DSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey_((id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(pk, JavaSecurityInterfacesDSAPrivateKey_class_()));
    case NetI2pCryptoSigAlgo_Enum_EC:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPrivateKey_withNetI2pCryptoSigType_((id<JavaSecurityInterfacesECPrivateKey>) cast_check(pk, JavaSecurityInterfacesECPrivateKey_class_()), type);
    case NetI2pCryptoSigAlgo_Enum_EdDSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey_withNetI2pCryptoSigType_((NetI2pCryptoEddsaEdDSAPrivateKey *) cast_chk(pk, [NetI2pCryptoEddsaEdDSAPrivateKey class]), type);
    case NetI2pCryptoSigAlgo_Enum_RSA:
    return NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey_withNetI2pCryptoSigType_((id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(pk, JavaSecurityInterfacesRSAPrivateKey_class_()), type);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown type: ", type));
  }
}

id<JavaSecurityInterfacesECPublicKey> NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  id<JavaSecurityInterfacesECPublicKey> rv;
  @synchronized(NetI2pCryptoSigUtil__ECPubkeyCache) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__ECPubkeyCache)) getWithId:pk]);
  }
  if (rv != nil) return rv;
  rv = NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPublicKey_(pk);
  @synchronized(NetI2pCryptoSigUtil__ECPubkeyCache) {
    [NetI2pCryptoSigUtil__ECPubkeyCache putWithId:pk withId:rv];
  }
  return rv;
}

id<JavaSecurityInterfacesECPrivateKey> NetI2pCryptoSigUtil_toJavaECKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  id<JavaSecurityInterfacesECPrivateKey> rv;
  @synchronized(NetI2pCryptoSigUtil__ECPrivkeyCache) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__ECPrivkeyCache)) getWithId:pk]);
  }
  if (rv != nil) return rv;
  rv = NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPrivateKey_(pk);
  @synchronized(NetI2pCryptoSigUtil__ECPrivkeyCache) {
    [NetI2pCryptoSigUtil__ECPrivkeyCache putWithId:pk withId:rv];
  }
  return rv;
}

id<JavaSecurityInterfacesECPublicKey> NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(pk)) getType];
  IOSObjectArray *xy = NetI2pCryptoSigUtil_splitWithByteArray_([pk getData]);
  JavaSecuritySpecECPoint *w = create_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(xy), 0), IOSObjectArray_Get(xy, 1));
  JavaSecuritySpecECPublicKeySpec *ks = create_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(w, (JavaSecuritySpecECParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(type)) getParams], [JavaSecuritySpecECParameterSpec class]));
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"EC");
  return (id<JavaSecurityInterfacesECPublicKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesECPublicKey_class_());
}

id<JavaSecurityInterfacesECPrivateKey> NetI2pCryptoSigUtil_cvtToJavaECKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPrivateKey *) nil_chk(pk)) getType];
  IOSByteArray *b = [pk getData];
  JavaMathBigInteger *s = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, b);
  JavaSecuritySpecECPrivateKeySpec *ks = create_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_(s, (JavaSecuritySpecECParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(type)) getParams], [JavaSecuritySpecECParameterSpec class]));
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"EC");
  return (id<JavaSecurityInterfacesECPrivateKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesECPrivateKey_class_());
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesECPublicKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  JavaSecuritySpecECPoint *w = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(pk)) getW];
  JavaMathBigInteger *x = [((JavaSecuritySpecECPoint *) nil_chk(w)) getAffineX];
  JavaMathBigInteger *y = [w getAffineY];
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPubkeyLen];
  IOSByteArray *b = NetI2pCryptoSigUtil_combineWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(x, y, len);
  return create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(type, b);
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesECPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesECPrivateKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  JavaMathBigInteger *s = [((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(pk)) getS];
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPrivkeyLen];
  IOSByteArray *bs = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(s, len);
  return create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_withByteArray_(type, bs);
}

NetI2pCryptoEddsaEdDSAPublicKey *NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  NetI2pCryptoEddsaEdDSAPublicKey *rv;
  @synchronized(NetI2pCryptoSigUtil__EdPubkeyCache) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__EdPubkeyCache)) getWithId:pk]);
  }
  if (rv != nil) return rv;
  rv = NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(pk);
  @synchronized(NetI2pCryptoSigUtil__EdPubkeyCache) {
    [NetI2pCryptoSigUtil__EdPubkeyCache putWithId:pk withId:rv];
  }
  return rv;
}

NetI2pCryptoEddsaEdDSAPrivateKey *NetI2pCryptoSigUtil_toJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  NetI2pCryptoEddsaEdDSAPrivateKey *rv;
  @synchronized(NetI2pCryptoSigUtil__EdPrivkeyCache) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__EdPrivkeyCache)) getWithId:pk]);
  }
  if (rv != nil) return rv;
  rv = NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(pk);
  @synchronized(NetI2pCryptoSigUtil__EdPrivkeyCache) {
    [NetI2pCryptoSigUtil__EdPrivkeyCache putWithId:pk withId:rv];
  }
  return rv;
}

NetI2pCryptoEddsaEdDSAPublicKey *NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  @try {
    return create_NetI2pCryptoEddsaEdDSAPublicKey_initWithNetI2pCryptoEddsaSpecEdDSAPublicKeySpec_(create_NetI2pCryptoEddsaSpecEdDSAPublicKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_([((NetI2pDataSigningPublicKey *) nil_chk(pk)) getData], (NetI2pCryptoEddsaSpecEdDSAParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk([pk getType])) getParams], [NetI2pCryptoEddsaSpecEdDSAParameterSpec class])));
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityInvalidKeyException_initWithJavaLangThrowable_(iae);
  }
}

NetI2pCryptoEddsaEdDSAPrivateKey *NetI2pCryptoSigUtil_cvtToJavaEdDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  @try {
    return create_NetI2pCryptoEddsaEdDSAPrivateKey_initWithNetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_(create_NetI2pCryptoEddsaSpecEdDSAPrivateKeySpec_initWithByteArray_withNetI2pCryptoEddsaSpecEdDSAParameterSpec_([((NetI2pDataSigningPrivateKey *) nil_chk(pk)) getData], (NetI2pCryptoEddsaSpecEdDSAParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk([pk getType])) getParams], [NetI2pCryptoEddsaSpecEdDSAParameterSpec class])));
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_JavaSecurityInvalidKeyException_initWithJavaLangThrowable_(iae);
  }
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPublicKey_withNetI2pCryptoSigType_(NetI2pCryptoEddsaEdDSAPublicKey *pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  return create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(type, [((NetI2pCryptoEddsaEdDSAPublicKey *) nil_chk(pk)) getAbyte]);
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithNetI2pCryptoEddsaEdDSAPrivateKey_withNetI2pCryptoSigType_(NetI2pCryptoEddsaEdDSAPrivateKey *pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  return create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_withByteArray_(type, [((NetI2pCryptoEddsaEdDSAPrivateKey *) nil_chk(pk)) getSeed]);
}

id<JavaSecurityInterfacesDSAPublicKey> NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"DSA");
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, [((NetI2pDataSigningPublicKey *) nil_chk(pk)) getData]), JreLoadStatic(NetI2pCryptoCryptoConstants, dsap), JreLoadStatic(NetI2pCryptoCryptoConstants, dsaq), JreLoadStatic(NetI2pCryptoCryptoConstants, dsag));
  return (id<JavaSecurityInterfacesDSAPublicKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesDSAPublicKey_class_());
}

id<JavaSecurityInterfacesDSAPrivateKey> NetI2pCryptoSigUtil_toJavaDSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"DSA");
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecDSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, [((NetI2pDataSigningPrivateKey *) nil_chk(pk)) getData]), JreLoadStatic(NetI2pCryptoCryptoConstants, dsap), JreLoadStatic(NetI2pCryptoCryptoConstants, dsaq), JreLoadStatic(NetI2pCryptoCryptoConstants, dsag));
  return (id<JavaSecurityInterfacesDSAPrivateKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesDSAPrivateKey_class_());
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPublicKey_(id<JavaSecurityInterfacesDSAPublicKey> pk) {
  NetI2pCryptoSigUtil_initialize();
  JavaMathBigInteger *y = [((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(pk)) getY];
  NetI2pCryptoSigType *type = JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1);
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPubkeyLen];
  IOSByteArray *by = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(y, len);
  return create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(type, by);
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesDSAPrivateKey_(id<JavaSecurityInterfacesDSAPrivateKey> pk) {
  NetI2pCryptoSigUtil_initialize();
  JavaMathBigInteger *x = [((id<JavaSecurityInterfacesDSAPrivateKey>) nil_chk(pk)) getX];
  NetI2pCryptoSigType *type = JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1);
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPrivkeyLen];
  IOSByteArray *bx = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(x, len);
  return create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_withByteArray_(type, bx);
}

id<JavaSecurityInterfacesRSAPublicKey> NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(pk)) getType];
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"RSA");
  JavaMathBigInteger *n = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, [pk getData]);
  JavaMathBigInteger *e = [((JavaSecuritySpecRSAKeyGenParameterSpec *) nil_chk(((JavaSecuritySpecRSAKeyGenParameterSpec *) cast_chk([((NetI2pCryptoSigType *) nil_chk(type)) getParams], [JavaSecuritySpecRSAKeyGenParameterSpec class])))) getPublicExponent];
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecRSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(n, e);
  return (id<JavaSecurityInterfacesRSAPublicKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesRSAPublicKey_class_());
}

id<JavaSecurityInterfacesRSAPrivateKey> NetI2pCryptoSigUtil_toJavaRSAKeyWithNetI2pDataSigningPrivateKey_(NetI2pDataSigningPrivateKey *pk) {
  NetI2pCryptoSigUtil_initialize();
  if ([pk isKindOfClass:[NetI2pCryptoRSASigningPrivateCrtKey class]]) return [((NetI2pCryptoRSASigningPrivateCrtKey *) nil_chk(((NetI2pCryptoRSASigningPrivateCrtKey *) cast_chk(pk, [NetI2pCryptoRSASigningPrivateCrtKey class])))) toJavaKey];
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(@"RSA");
  IOSObjectArray *nd = NetI2pCryptoSigUtil_splitWithByteArray_([((NetI2pDataSigningPrivateKey *) nil_chk(pk)) getData]);
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecRSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(nd), 0), IOSObjectArray_Get(nd, 1));
  return (id<JavaSecurityInterfacesRSAPrivateKey>) cast_check([((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:ks], JavaSecurityInterfacesRSAPrivateKey_class_());
}

NetI2pDataSigningPublicKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPublicKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesRSAPublicKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  JavaMathBigInteger *n = [((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(pk)) getModulus];
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPubkeyLen];
  IOSByteArray *bn = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(n, len);
  return create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(type, bn);
}

NetI2pDataSigningPrivateKey *NetI2pCryptoSigUtil_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateKey_withNetI2pCryptoSigType_(id<JavaSecurityInterfacesRSAPrivateKey> pk, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  JavaMathBigInteger *n = [((id<JavaSecurityInterfacesRSAPrivateKey>) nil_chk(pk)) getModulus];
  JavaMathBigInteger *d = [pk getPrivateExponent];
  IOSByteArray *b = NetI2pCryptoSigUtil_combineWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(n, d, [((NetI2pCryptoSigType *) nil_chk(type)) getPrivkeyLen]);
  if ([JavaSecurityInterfacesRSAPrivateCrtKey_class_() isInstance:pk]) return NetI2pCryptoRSASigningPrivateCrtKey_fromJavaKeyWithJavaSecurityInterfacesRSAPrivateCrtKey_((id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(pk, JavaSecurityInterfacesRSAPrivateCrtKey_class_()));
  return create_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_withByteArray_(type, b);
}

IOSByteArray *NetI2pCryptoSigUtil_toJavaSigWithNetI2pDataSignature_(NetI2pDataSignature *sig) {
  NetI2pCryptoSigUtil_initialize();
  if ([((NetI2pCryptoSigType *) nil_chk([((NetI2pDataSignature *) nil_chk(sig)) getType])) getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, RSA) || [((NetI2pCryptoSigType *) nil_chk([sig getType])) getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, EdDSA)) return [sig getData];
  return NetI2pCryptoSigUtil_sigBytesToASN1WithByteArray_([sig getData]);
}

NetI2pDataSignature *NetI2pCryptoSigUtil_fromJavaSigWithByteArray_withNetI2pCryptoSigType_(IOSByteArray *asn, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  if ([((NetI2pCryptoSigType *) nil_chk(type)) getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, RSA) || [type getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, EdDSA)) return create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, asn);
  return create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, NetI2pCryptoSigUtil_aSN1ToSigBytesWithByteArray_withInt_(asn, [type getSigLen]));
}

id<JavaSecurityPublicKey> NetI2pCryptoSigUtil_importJavaPublicKeyWithJavaIoFile_withNetI2pCryptoSigType_(JavaIoFile *file, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  IOSByteArray *data = NetI2pCryptoSigUtil_getDataWithJavaIoFile_(file);
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_(data);
  NSString *algo = [((NetI2pCryptoSigAlgo *) nil_chk([((NetI2pCryptoSigType *) nil_chk(type)) getBaseAlgorithm])) getName];
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(algo);
  return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:ks];
}

id<JavaSecurityPrivateKey> NetI2pCryptoSigUtil_importJavaPrivateKeyWithJavaIoFile_withNetI2pCryptoSigType_(JavaIoFile *file, NetI2pCryptoSigType *type) {
  NetI2pCryptoSigUtil_initialize();
  IOSByteArray *data = NetI2pCryptoSigUtil_getDataWithJavaIoFile_(file);
  id<JavaSecuritySpecKeySpec> ks = create_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(data);
  NSString *algo = [((NetI2pCryptoSigAlgo *) nil_chk([((NetI2pCryptoSigType *) nil_chk(type)) getBaseAlgorithm])) getName];
  JavaSecurityKeyFactory *kf = JavaSecurityKeyFactory_getInstanceWithNSString_(algo);
  return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:ks];
}

IOSByteArray *NetI2pCryptoSigUtil_getDataWithJavaIoFile_(JavaIoFile *file) {
  NetI2pCryptoSigUtil_initialize();
  IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
  JavaIoInputStream *in = nil;
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_initWithInt_(1024);
  @try {
    in = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
    jint read = 0;
    jint tot = 0;
    while ((read = [in readWithByteArray:buf]) != -1) {
      [out writeWithByteArray:buf withInt:0 withInt:read];
      tot += read;
      if (tot > 16 * 1024) @throw create_JavaIoIOException_initWithNSString_(@"too big");
    }
    return [out toByteArray];
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

IOSObjectArray *NetI2pCryptoSigUtil_splitWithByteArray_(IOSByteArray *b) {
  NetI2pCryptoSigUtil_initialize();
  if ((((IOSByteArray *) nil_chk(b))->size_ & (jint) 0x01) != 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"length must be even");
  jint sublen = b->size_ / 2;
  IOSByteArray *bx = [IOSByteArray arrayWithLength:sublen];
  IOSByteArray *by = [IOSByteArray arrayWithLength:sublen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, bx, 0, sublen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, sublen, by, 0, sublen);
  NetI2pUtilNativeBigInteger *x = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, bx);
  NetI2pUtilNativeBigInteger *y = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, by);
  return [IOSObjectArray arrayWithObjects:(id[]){ x, y } count:2 type:NetI2pUtilNativeBigInteger_class_()];
}

IOSByteArray *NetI2pCryptoSigUtil_combineWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *x, JavaMathBigInteger *y, jint len) {
  NetI2pCryptoSigUtil_initialize();
  if ((len & (jint) 0x01) != 0) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"length must be even");
  jint sublen = len / 2;
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  IOSByteArray *bx = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(x, sublen);
  IOSByteArray *by = NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(y, sublen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bx, 0, b, 0, sublen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(by, 0, b, sublen, sublen);
  return b;
}

IOSByteArray *NetI2pCryptoSigUtil_rectifyWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bi, jint len) {
  NetI2pCryptoSigUtil_initialize();
  IOSByteArray *b = [((JavaMathBigInteger *) nil_chk(bi)) toByteArray];
  if (((IOSByteArray *) nil_chk(b))->size_ == len) {
    return b;
  }
  if (b->size_ > len + 1) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$I$I", @"key too big (", b->size_, @") max is ", (len + 1)));
  IOSByteArray *rv = [IOSByteArray arrayWithLength:len];
  if (b->size_ == 0) return rv;
  if ((IOSByteArray_Get(b, 0) & (jint) 0x80) != 0) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(@"negative");
  if (b->size_ > len) {
    if (IOSByteArray_Get(b, 0) != 0) @throw create_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$I$I", @"key too big (", b->size_, @") max is ", len));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 1, rv, 0, len);
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, rv, len - b->size_, b->size_);
  }
  return rv;
}

IOSByteArray *NetI2pCryptoSigUtil_sigBytesToASN1WithByteArray_(IOSByteArray *sig) {
  NetI2pCryptoSigUtil_initialize();
  IOSObjectArray *rs = NetI2pCryptoSigUtil_splitWithByteArray_(sig);
  return NetI2pCryptoSigUtil_sigBytesToASN1WithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(rs), 0), IOSObjectArray_Get(rs, 1));
}

IOSByteArray *NetI2pCryptoSigUtil_sigBytesToASN1WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *r, JavaMathBigInteger *s) {
  NetI2pCryptoSigUtil_initialize();
  jint extra = 4;
  IOSByteArray *rb = [((JavaMathBigInteger *) nil_chk(r)) toByteArray];
  if (((IOSByteArray *) nil_chk(rb))->size_ > 127) {
    extra++;
    if (rb->size_ > 255) extra++;
  }
  IOSByteArray *sb = [((JavaMathBigInteger *) nil_chk(s)) toByteArray];
  if (((IOSByteArray *) nil_chk(sb))->size_ > 127) {
    extra++;
    if (sb->size_ > 255) extra++;
  }
  jint seqlen = rb->size_ + sb->size_ + extra;
  jint totlen = seqlen + 2;
  if (seqlen > 127) {
    totlen++;
    if (seqlen > 255) totlen++;
  }
  IOSByteArray *rv = [IOSByteArray arrayWithLength:totlen];
  jint idx = 0;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x30;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, seqlen);
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, rb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(rb, 0, rv, idx, rb->size_);
  idx += rb->size_;
  *IOSByteArray_GetRef(rv, idx++) = (jint) 0x02;
  idx = NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(rv, idx, sb->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sb, 0, rv, idx, sb->size_);
  return rv;
}

jint NetI2pCryptoSigUtil_intToASN1WithByteArray_withInt_withInt_(IOSByteArray *d, jint idx, jint val) {
  NetI2pCryptoSigUtil_initialize();
  if (val < 0 || val > 65535) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"fixme length ", val));
  if (val > 127) {
    if (val > 255) {
      *IOSByteArray_GetRef(nil_chk(d), idx++) = (jbyte) (jint) 0x82;
      *IOSByteArray_GetRef(d, idx++) = (jbyte) (JreRShift32(val, 8));
    }
    else {
      *IOSByteArray_GetRef(nil_chk(d), idx++) = (jbyte) (jint) 0x81;
    }
  }
  *IOSByteArray_GetRef(nil_chk(d), idx++) = (jbyte) val;
  return idx;
}

IOSByteArray *NetI2pCryptoSigUtil_aSN1ToSigBytesWithByteArray_withInt_(IOSByteArray *asn, jint len) {
  NetI2pCryptoSigUtil_initialize();
  if (IOSByteArray_Get(nil_chk(asn), 0) != (jint) 0x30) @throw create_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$I", @"asn[0] = ", (IOSByteArray_Get(asn, 0) & (jint) 0xff)));
  jint idx = 2;
  if ((IOSByteArray_Get(asn, 1) & (jint) 0x80) != 0) idx += IOSByteArray_Get(asn, 1) & (jint) 0x7f;
  if (IOSByteArray_Get(asn, idx) != (jint) 0x02) @throw create_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$I", @"asn[2] = ", (IOSByteArray_Get(asn, idx) & (jint) 0xff)));
  IOSByteArray *rv = [IOSByteArray arrayWithLength:len];
  jint sublen = len / 2;
  jint rlen = IOSByteArray_Get(asn, ++idx);
  if ((rlen & (jint) 0x80) != 0) {
    if ((rlen & (jint) 0xff) == (jint) 0x81) {
      rlen = IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
    }
    else if ((rlen & (jint) 0xff) == (jint) 0x82) {
      rlen = IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
      JreLShiftAssignInt(&rlen, 8);
      rlen |= IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
    }
    else {
      @throw create_JavaSecuritySignatureException_initWithNSString_(@"FIXME R length > 65535");
    }
  }
  if ((IOSByteArray_Get(asn, ++idx) & (jint) 0x80) != 0) @throw create_JavaSecuritySignatureException_initWithNSString_(@"R is negative");
  if (rlen > sublen + 1) @throw create_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$I", @"R too big ", rlen));
  if (rlen == sublen + 1) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(asn, idx + 1, rv, 0, sublen);
  else JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(asn, idx, rv, sublen - rlen, rlen);
  idx += rlen;
  if (IOSByteArray_Get(asn, idx) != (jint) 0x02) @throw create_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$I", @"asn[s] = ", (IOSByteArray_Get(asn, idx) & (jint) 0xff)));
  jint slen = IOSByteArray_Get(asn, ++idx);
  if ((slen & (jint) 0x80) != 0) {
    if ((slen & (jint) 0xff) == (jint) 0x81) {
      slen = IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
    }
    else if ((slen & (jint) 0xff) == (jint) 0x82) {
      slen = IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
      JreLShiftAssignInt(&slen, 8);
      slen |= IOSByteArray_Get(asn, ++idx) & (jint) 0xff;
    }
    else {
      @throw create_JavaSecuritySignatureException_initWithNSString_(@"FIXME S length > 65535");
    }
  }
  if ((IOSByteArray_Get(asn, ++idx) & (jint) 0x80) != 0) @throw create_JavaSecuritySignatureException_initWithNSString_(@"S is negative");
  if (slen > sublen + 1) @throw create_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$I", @"S too big ", slen));
  if (slen == sublen + 1) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(asn, idx + 1, rv, sublen, sublen);
  else JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(asn, idx, rv, len - slen, slen);
  return rv;
}

IOSObjectArray *NetI2pCryptoSigUtil_aSN1ToBigIntegerWithByteArray_withInt_(IOSByteArray *asn, jint len) {
  NetI2pCryptoSigUtil_initialize();
  IOSByteArray *sig = NetI2pCryptoSigUtil_aSN1ToSigBytesWithByteArray_withInt_(asn, len * 2);
  return NetI2pCryptoSigUtil_splitWithByteArray_(sig);
}

void NetI2pCryptoSigUtil_clearCaches() {
  NetI2pCryptoSigUtil_initialize();
  @synchronized(NetI2pCryptoSigUtil__ECPubkeyCache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__ECPubkeyCache)) clear];
  }
  @synchronized(NetI2pCryptoSigUtil__ECPrivkeyCache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__ECPrivkeyCache)) clear];
  }
  @synchronized(NetI2pCryptoSigUtil__EdPubkeyCache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__EdPubkeyCache)) clear];
  }
  @synchronized(NetI2pCryptoSigUtil__EdPrivkeyCache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pCryptoSigUtil__EdPrivkeyCache)) clear];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoSigUtil)
