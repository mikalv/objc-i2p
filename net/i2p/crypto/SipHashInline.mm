//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SipHashInline.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/crypto/SipHashInline.h"

@interface NetI2pCryptoSipHashInline ()

- (instancetype)init;

@end

__attribute__((unused)) static void NetI2pCryptoSipHashInline_init(NetI2pCryptoSipHashInline *self);

__attribute__((unused)) static NetI2pCryptoSipHashInline *new_NetI2pCryptoSipHashInline_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pCryptoSipHashInline *create_NetI2pCryptoSipHashInline_init(void);

@implementation NetI2pCryptoSipHashInline

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoSipHashInline_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)hash24WithLong:(jlong)k0
               withLong:(jlong)k1
          withByteArray:(IOSByteArray *)data {
  return NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(k0, k1, data);
}

+ (jlong)hash24WithLong:(jlong)k0
               withLong:(jlong)k1
          withByteArray:(IOSByteArray *)data
                withInt:(jint)off
                withInt:(jint)len {
  return NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_withInt_withInt_(k0, k1, data, off, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hash24WithLong:withLong:withByteArray:);
  methods[2].selector = @selector(hash24WithLong:withLong:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "hash24", "JJ[B", "JJ[BII" };
  static const J2ObjcClassInfo _NetI2pCryptoSipHashInline = { "SipHashInline", "net.i2p.crypto", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoSipHashInline;
}

@end

void NetI2pCryptoSipHashInline_init(NetI2pCryptoSipHashInline *self) {
  NSObject_init(self);
}

NetI2pCryptoSipHashInline *new_NetI2pCryptoSipHashInline_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoSipHashInline, init)
}

NetI2pCryptoSipHashInline *create_NetI2pCryptoSipHashInline_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoSipHashInline, init)
}

jlong NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(jlong k0, jlong k1, IOSByteArray *data) {
  NetI2pCryptoSipHashInline_initialize();
  return NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_withInt_withInt_(k0, k1, data, 0, ((IOSByteArray *) nil_chk(data))->size_);
}

jlong NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_withInt_withInt_(jlong k0, jlong k1, IOSByteArray *data, jint off, jint len) {
  NetI2pCryptoSipHashInline_initialize();
  jlong v0 = (jlong) 0x736f6d6570736575LL ^ k0;
  jlong v1 = (jlong) 0x646f72616e646f6dLL ^ k1;
  jlong v2 = (jlong) 0x6c7967656e657261LL ^ k0;
  jlong v3 = (jlong) 0x7465646279746573LL ^ k1;
  jlong m;
  jint last = off + (len / 8 * 8);
  jint i = off;
  while (i < last) {
    jint unseq$1 = i++;
    jint unseq$2 = i++;
    jint unseq$3 = i++;
    jint unseq$4 = i++;
    jint unseq$5 = i++;
    jint unseq$6 = i++;
    jint unseq$7 = i++;
    m = ((((jlong) IOSByteArray_Get(nil_chk(data), unseq$1)) & (jint) 0xff)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$2)) & (jint) 0xff), 8)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$3)) & (jint) 0xff), 16)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$4)) & (jint) 0xff), 24)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$5)) & (jint) 0xff), 32)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$6)) & (jint) 0xff), 40)) | (JreLShift64((((jlong) IOSByteArray_Get(data, unseq$7)) & (jint) 0xff), 48)) | (JreLShift64((((jlong) IOSByteArray_Get(data, i++)) & (jint) 0xff), 56));
    v3 ^= m;
    v0 += v1;
    v2 += v3;
    v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
    v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
    v1 ^= v0;
    v3 ^= v2;
    v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
    v2 += v1;
    v0 += v3;
    v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
    v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
    v1 ^= v2;
    v3 ^= v0;
    v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
    v0 += v1;
    v2 += v3;
    v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
    v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
    v1 ^= v0;
    v3 ^= v2;
    v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
    v2 += v1;
    v0 += v3;
    v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
    v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
    v1 ^= v2;
    v3 ^= v0;
    v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
    v0 ^= m;
  }
  m = 0;
  for (i = off + len - 1; i >= last; --i) {
    JreLShiftAssignLong(&m, 8);
    m |= (jlong) (IOSByteArray_Get(nil_chk(data), i) & (jint) 0xff);
  }
  m |= JreLShift64((jlong) len, 56);
  v3 ^= m;
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  v0 ^= m;
  v2 ^= (jint) 0xff;
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  v0 += v1;
  v2 += v3;
  v1 = (JreLShift64(v1, 13)) | (JreURShift64(v1, 51));
  v3 = (JreLShift64(v3, 16)) | (JreURShift64(v3, 48));
  v1 ^= v0;
  v3 ^= v2;
  v0 = (JreLShift64(v0, 32)) | (JreURShift64(v0, 32));
  v2 += v1;
  v0 += v3;
  v1 = (JreLShift64(v1, 17)) | (JreURShift64(v1, 47));
  v3 = (JreLShift64(v3, 21)) | (JreURShift64(v3, 43));
  v1 ^= v2;
  v3 ^= v0;
  v2 = (JreLShift64(v2, 32)) | (JreURShift64(v2, 32));
  return v0 ^ v1 ^ v2 ^ v3;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoSipHashInline)
