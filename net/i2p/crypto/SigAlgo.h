//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/SigAlgo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pCryptoSigAlgo")
#ifdef RESTRICT_NetI2pCryptoSigAlgo
#define INCLUDE_ALL_NetI2pCryptoSigAlgo 0
#else
#define INCLUDE_ALL_NetI2pCryptoSigAlgo 1
#endif
#undef RESTRICT_NetI2pCryptoSigAlgo

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pCryptoSigAlgo_) && (INCLUDE_ALL_NetI2pCryptoSigAlgo || defined(INCLUDE_NetI2pCryptoSigAlgo))
#define NetI2pCryptoSigAlgo_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, NetI2pCryptoSigAlgo_Enum) {
  NetI2pCryptoSigAlgo_Enum_DSA = 0,
  NetI2pCryptoSigAlgo_Enum_EC = 1,
  NetI2pCryptoSigAlgo_Enum_EdDSA = 2,
  NetI2pCryptoSigAlgo_Enum_RSA = 3,
  NetI2pCryptoSigAlgo_Enum_ElGamal = 4,
};

@interface NetI2pCryptoSigAlgo : JavaLangEnum

@property (readonly, class, nonnull) NetI2pCryptoSigAlgo *DSA NS_SWIFT_NAME(DSA);
@property (readonly, class, nonnull) NetI2pCryptoSigAlgo *EC NS_SWIFT_NAME(EC);
@property (readonly, class, nonnull) NetI2pCryptoSigAlgo *EdDSA NS_SWIFT_NAME(EdDSA);
@property (readonly, class, nonnull) NetI2pCryptoSigAlgo *RSA NS_SWIFT_NAME(RSA);
@property (readonly, class, nonnull) NetI2pCryptoSigAlgo *ElGamal NS_SWIFT_NAME(ElGamal);
+ (NetI2pCryptoSigAlgo * __nonnull)DSA;

+ (NetI2pCryptoSigAlgo * __nonnull)EC;

+ (NetI2pCryptoSigAlgo * __nonnull)EdDSA;

+ (NetI2pCryptoSigAlgo * __nonnull)RSA;

+ (NetI2pCryptoSigAlgo * __nonnull)ElGamal;

#pragma mark Public

- (NSString *)getName;

+ (NetI2pCryptoSigAlgo *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (NetI2pCryptoSigAlgo_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pCryptoSigAlgo)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_values_[];

inline NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_get_DSA(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoSigAlgo, DSA)

inline NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_get_EC(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoSigAlgo, EC)

inline NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_get_EdDSA(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoSigAlgo, EdDSA)

inline NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_get_RSA(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoSigAlgo, RSA)

inline NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_get_ElGamal(void);
J2OBJC_ENUM_CONSTANT(NetI2pCryptoSigAlgo, ElGamal)

FOUNDATION_EXPORT IOSObjectArray *NetI2pCryptoSigAlgo_values(void);

FOUNDATION_EXPORT NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pCryptoSigAlgo *NetI2pCryptoSigAlgo_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pCryptoSigAlgo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pCryptoSigAlgo")
