//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/crypto/Hash384.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/crypto/Hash384.h"
#include "net/i2p/data/SimpleDataStructure.h"

@implementation NetI2pCryptoHash384

+ (jint)HASH_LENGTH {
  return NetI2pCryptoHash384_HASH_LENGTH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pCryptoHash384_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pCryptoHash384_initWithByteArray_(self, data);
  return self;
}

- (jint)length {
  return NetI2pCryptoHash384_HASH_LENGTH;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(length);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HASH_LENGTH", "I", .constantValue.asInt = NetI2pCryptoHash384_HASH_LENGTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B" };
  static const J2ObjcClassInfo _NetI2pCryptoHash384 = { "Hash384", "net.i2p.crypto", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pCryptoHash384;
}

@end

void NetI2pCryptoHash384_init(NetI2pCryptoHash384 *self) {
  NetI2pDataSimpleDataStructure_init(self);
}

NetI2pCryptoHash384 *new_NetI2pCryptoHash384_init() {
  J2OBJC_NEW_IMPL(NetI2pCryptoHash384, init)
}

NetI2pCryptoHash384 *create_NetI2pCryptoHash384_init() {
  J2OBJC_CREATE_IMPL(NetI2pCryptoHash384, init)
}

void NetI2pCryptoHash384_initWithByteArray_(NetI2pCryptoHash384 *self, IOSByteArray *data) {
  NetI2pDataSimpleDataStructure_initWithByteArray_(self, data);
}

NetI2pCryptoHash384 *new_NetI2pCryptoHash384_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(NetI2pCryptoHash384, initWithByteArray_, data)
}

NetI2pCryptoHash384 *create_NetI2pCryptoHash384_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(NetI2pCryptoHash384, initWithByteArray_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pCryptoHash384)
