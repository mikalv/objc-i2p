//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/internal/QueuedI2CPMessageReader.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageReader.h"
#include "net/i2p/internal/I2CPMessageQueue.h"
#include "net/i2p/internal/PoisonI2CPMessage.h"
#include "net/i2p/internal/QueuedI2CPMessageReader.h"
#include "net/i2p/util/I2PThread.h"

@interface NetI2pInternalQueuedI2CPMessageReader () {
 @public
  NetI2pInternalI2CPMessageQueue *in_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pInternalQueuedI2CPMessageReader, in_, NetI2pInternalI2CPMessageQueue *)

@interface NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner () {
 @public
  NetI2pInternalQueuedI2CPMessageReader *this$1_;
}

@end

@implementation NetI2pInternalQueuedI2CPMessageReader

- (instancetype)initWithNetI2pInternalI2CPMessageQueue:(NetI2pInternalI2CPMessageQueue *)inArg
withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)lsnr {
  NetI2pInternalQueuedI2CPMessageReader_initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(self, inArg, lsnr);
  return self;
}

- (void)dealloc {
  RELEASE_(in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pInternalI2CPMessageQueue:withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LNetI2pInternalI2CPMessageQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pInternalI2CPMessageQueue;LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", "LNetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner;" };
  static const J2ObjcClassInfo _NetI2pInternalQueuedI2CPMessageReader = { "QueuedI2CPMessageReader", "net.i2p.internal", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, 1, -1, -1, -1 };
  return &_NetI2pInternalQueuedI2CPMessageReader;
}

@end

void NetI2pInternalQueuedI2CPMessageReader_initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(NetI2pInternalQueuedI2CPMessageReader *self, NetI2pInternalI2CPMessageQueue *inArg, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  NetI2pDataI2cpI2CPMessageReader_initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(self, lsnr);
  JreStrongAssign(&self->in_, inArg);
  JreStrongAssignAndConsume(&self->_reader_, new_NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner_initWithNetI2pInternalQueuedI2CPMessageReader_(self));
  JreStrongAssignAndConsume(&self->_readerThread_, new_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self->_reader_, JreStrcat("$J", @"I2CP Internal Reader ", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(JreLoadStatic(NetI2pDataI2cpI2CPMessageReader, __readerId))) incrementAndGet]), true));
}

NetI2pInternalQueuedI2CPMessageReader *new_NetI2pInternalQueuedI2CPMessageReader_initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(NetI2pInternalI2CPMessageQueue *inArg, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pInternalQueuedI2CPMessageReader, initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, inArg, lsnr)
}

NetI2pInternalQueuedI2CPMessageReader *create_NetI2pInternalQueuedI2CPMessageReader_initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(NetI2pInternalI2CPMessageQueue *inArg, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pInternalQueuedI2CPMessageReader, initWithNetI2pInternalI2CPMessageQueue_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, inArg, lsnr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pInternalQueuedI2CPMessageReader)

@implementation NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner

- (instancetype)initWithNetI2pInternalQueuedI2CPMessageReader:(NetI2pInternalQueuedI2CPMessageReader *)outer$ {
  NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner_initWithNetI2pInternalQueuedI2CPMessageReader_(self, outer$);
  return self;
}

- (void)cancelRunner {
  [super cancelRunner];
  [((JavaLangThread *) nil_chk(this$1_->_readerThread_)) interrupt];
}

- (void)run2 {
  while (JreLoadVolatileBoolean(&_stayAlive_)) {
    while (JreLoadVolatileBoolean(&_doRun_)) {
      id<NetI2pDataI2cpI2CPMessage> msg = nil;
      @try {
        msg = [((NetI2pInternalI2CPMessageQueue *) nil_chk(this$1_->in_)) take];
        if ([((id<NetI2pDataI2cpI2CPMessage>) nil_chk(msg)) getType] == NetI2pInternalPoisonI2CPMessage_MESSAGE_TYPE) {
          [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$1_->_listener_)) disconnectedWithNetI2pDataI2cpI2CPMessageReader:this$1_];
          [self cancelRunner];
        }
        else {
          [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$1_->_listener_)) messageReceivedWithNetI2pDataI2cpI2CPMessageReader:this$1_ withNetI2pDataI2cpI2CPMessage:msg];
        }
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
    if (JreLoadVolatileBoolean(&_stayAlive_) && !JreLoadVolatileBoolean(&_doRun_)) {
      @try {
        JavaLangThread_sleepWithLong_(500);
      }
      @catch (JavaLangInterruptedException *ie) {
        [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$1_->_listener_)) disconnectedWithNetI2pDataI2cpI2CPMessageReader:this$1_];
        [self cancelRunner];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pInternalQueuedI2CPMessageReader:);
  methods[1].selector = @selector(cancelRunner);
  methods[2].selector = @selector(run2);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pInternalQueuedI2CPMessageReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pInternalQueuedI2CPMessageReader;" };
  static const J2ObjcClassInfo _NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner = { "QueuedI2CPMessageReaderRunner", "net.i2p.internal", ptrTable, methods, fields, 7, 0x4, 3, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner;
}

@end

void NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner_initWithNetI2pInternalQueuedI2CPMessageReader_(NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner *self, NetI2pInternalQueuedI2CPMessageReader *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(self, outer$);
}

NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner *new_NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner_initWithNetI2pInternalQueuedI2CPMessageReader_(NetI2pInternalQueuedI2CPMessageReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner, initWithNetI2pInternalQueuedI2CPMessageReader_, outer$)
}

NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner *create_NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner_initWithNetI2pInternalQueuedI2CPMessageReader_(NetI2pInternalQueuedI2CPMessageReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner, initWithNetI2pInternalQueuedI2CPMessageReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pInternalQueuedI2CPMessageReader_QueuedI2CPMessageReaderRunner)
