//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SecureDirectory.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/Throwable.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"

J2OBJC_INITIALIZED_DEFN(NetI2pUtilSecureDirectory)

jboolean NetI2pUtilSecureDirectory_isNotWindows;

@implementation NetI2pUtilSecureDirectory

+ (jboolean)isNotWindows {
  return NetI2pUtilSecureDirectory_isNotWindows;
}

- (instancetype)initWithNSString:(NSString *)pathname {
  NetI2pUtilSecureDirectory_initWithNSString_(self, pathname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)parent
                    withNSString:(NSString *)child {
  NetI2pUtilSecureDirectory_initWithNSString_withNSString_(self, parent, child);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)parent
                      withNSString:(NSString *)child {
  NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(self, parent, child);
  return self;
}

- (jboolean)mkdir {
  jboolean rv = [super mkdir];
  if (rv) [self setPerms];
  return rv;
}

- (jboolean)mkdirs {
  jboolean rv = [super mkdirs];
  if (rv) [self setPerms];
  return rv;
}

- (void)setPerms {
  if (!NetI2pUtilSecureFileOutputStream_canSetPerms()) return;
  @try {
    [self setReadableWithBoolean:false withBoolean:false];
    [self setReadableWithBoolean:true withBoolean:true];
    [self setWritableWithBoolean:false withBoolean:false];
    [self setWritableWithBoolean:true withBoolean:true];
    if (NetI2pUtilSecureDirectory_isNotWindows) {
      [self setExecutableWithBoolean:false withBoolean:false];
      [self setExecutableWithBoolean:true withBoolean:true];
    }
  }
  @catch (JavaLangThrowable *t) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(initWithJavaIoFile:withNSString:);
  methods[3].selector = @selector(mkdir);
  methods[4].selector = @selector(mkdirs);
  methods[5].selector = @selector(setPerms);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isNotWindows", "Z", .constantValue.asLong = 0, 0x1c, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LNSString;", "LJavaIoFile;LNSString;", &NetI2pUtilSecureDirectory_isNotWindows };
  static const J2ObjcClassInfo _NetI2pUtilSecureDirectory = { "SecureDirectory", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilSecureDirectory;
}

+ (void)initialize {
  if (self == [NetI2pUtilSecureDirectory class]) {
    NetI2pUtilSecureDirectory_isNotWindows = !NetI2pUtilSystemVersion_isWindows();
    J2OBJC_SET_INITIALIZED(NetI2pUtilSecureDirectory)
  }
}

@end

void NetI2pUtilSecureDirectory_initWithNSString_(NetI2pUtilSecureDirectory *self, NSString *pathname) {
  JavaIoFile_initWithNSString_(self, pathname);
}

NetI2pUtilSecureDirectory *new_NetI2pUtilSecureDirectory_initWithNSString_(NSString *pathname) {
  J2OBJC_NEW_IMPL(NetI2pUtilSecureDirectory, initWithNSString_, pathname)
}

NetI2pUtilSecureDirectory *create_NetI2pUtilSecureDirectory_initWithNSString_(NSString *pathname) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSecureDirectory, initWithNSString_, pathname)
}

void NetI2pUtilSecureDirectory_initWithNSString_withNSString_(NetI2pUtilSecureDirectory *self, NSString *parent, NSString *child) {
  JavaIoFile_initWithNSString_withNSString_(self, parent, child);
}

NetI2pUtilSecureDirectory *new_NetI2pUtilSecureDirectory_initWithNSString_withNSString_(NSString *parent, NSString *child) {
  J2OBJC_NEW_IMPL(NetI2pUtilSecureDirectory, initWithNSString_withNSString_, parent, child)
}

NetI2pUtilSecureDirectory *create_NetI2pUtilSecureDirectory_initWithNSString_withNSString_(NSString *parent, NSString *child) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSecureDirectory, initWithNSString_withNSString_, parent, child)
}

void NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(NetI2pUtilSecureDirectory *self, JavaIoFile *parent, NSString *child) {
  JavaIoFile_initWithJavaIoFile_withNSString_(self, parent, child);
}

NetI2pUtilSecureDirectory *new_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(JavaIoFile *parent, NSString *child) {
  J2OBJC_NEW_IMPL(NetI2pUtilSecureDirectory, initWithJavaIoFile_withNSString_, parent, child)
}

NetI2pUtilSecureDirectory *create_NetI2pUtilSecureDirectory_initWithJavaIoFile_withNSString_(JavaIoFile *parent, NSString *child) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSecureDirectory, initWithJavaIoFile_withNSString_, parent, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSecureDirectory)
