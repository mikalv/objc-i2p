//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Clock.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilClock")
#ifdef RESTRICT_NetI2pUtilClock
#define INCLUDE_ALL_NetI2pUtilClock 0
#else
#define INCLUDE_ALL_NetI2pUtilClock 1
#endif
#undef RESTRICT_NetI2pUtilClock

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilClock_) && (INCLUDE_ALL_NetI2pUtilClock || defined(INCLUDE_NetI2pUtilClock))
#define NetI2pUtilClock_

#define RESTRICT_NetI2pTimeTimestamper 1
#define INCLUDE_NetI2pTimeTimestamper_UpdateListener 1
#include "net/i2p/time/Timestamper.h"

@class NetI2pI2PAppContext;
@class NetI2pTimeTimestamper;
@class NetI2pUtilLog;
@protocol NetI2pUtilClock_ClockUpdateListener;

@interface NetI2pUtilClock : NSObject < NetI2pTimeTimestamper_UpdateListener > {
 @public
  NetI2pI2PAppContext *_context_;
  jboolean _isSystemClockBad_;
  jlong _startedOn_;
  jboolean _statCreated_;
  volatile_jlong _offset_;
  jboolean _alreadyChanged_;
}
@property (readonly, class) jlong MAX_OFFSET NS_SWIFT_NAME(MAX_OFFSET);
@property (readonly, class) jlong MAX_LIVE_OFFSET NS_SWIFT_NAME(MAX_LIVE_OFFSET);
@property (readonly, class) jlong MIN_OFFSET_CHANGE NS_SWIFT_NAME(MIN_OFFSET_CHANGE);

+ (jlong)MAX_OFFSET;

+ (jlong)MAX_LIVE_OFFSET;

+ (jlong)MIN_OFFSET_CHANGE;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (void)addUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:(id<NetI2pUtilClock_ClockUpdateListener>)lsnr;

+ (NetI2pUtilClock *)getInstance;

- (jlong)getOffset;

- (NetI2pTimeTimestamper *)getTimestamper;

- (jboolean)getUpdatedSuccessfully;

- (jlong)now;

- (void)removeUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:(id<NetI2pUtilClock_ClockUpdateListener>)lsnr;

- (void)setNowWithLong:(jlong)realTime;

- (void)setNowWithLong:(jlong)realTime
               withInt:(jint)stratum;

- (void)setOffsetWithLong:(jlong)offsetMs;

- (void)setOffsetWithLong:(jlong)offsetMs
              withBoolean:(jboolean)force;

#pragma mark Protected

- (void)fireOffsetChangedWithLong:(jlong)delta;

- (NetI2pUtilLog *)getLog;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilClock)

J2OBJC_FIELD_SETTER(NetI2pUtilClock, _context_, NetI2pI2PAppContext *)

inline jlong NetI2pUtilClock_get_MAX_OFFSET(void);
#define NetI2pUtilClock_MAX_OFFSET 259200000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilClock, MAX_OFFSET, jlong)

inline jlong NetI2pUtilClock_get_MAX_LIVE_OFFSET(void);
#define NetI2pUtilClock_MAX_LIVE_OFFSET 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilClock, MAX_LIVE_OFFSET, jlong)

inline jlong NetI2pUtilClock_get_MIN_OFFSET_CHANGE(void);
#define NetI2pUtilClock_MIN_OFFSET_CHANGE 5000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilClock, MIN_OFFSET_CHANGE, jlong)

FOUNDATION_EXPORT void NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pUtilClock *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pUtilClock *new_NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilClock *create_NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pUtilClock *NetI2pUtilClock_getInstance(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilClock)

#endif

#if !defined (NetI2pUtilClock_ClockUpdateListener_) && (INCLUDE_ALL_NetI2pUtilClock || defined(INCLUDE_NetI2pUtilClock_ClockUpdateListener))
#define NetI2pUtilClock_ClockUpdateListener_

@protocol NetI2pUtilClock_ClockUpdateListener < JavaObject >

- (void)offsetChangedWithLong:(jlong)delta;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilClock_ClockUpdateListener)

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilClock_ClockUpdateListener)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilClock")
