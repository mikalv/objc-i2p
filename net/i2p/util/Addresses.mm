//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Addresses.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/net/SocketException.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/SystemVersion.h"
#include "org/apache/http/conn/util/InetAddressUtils.h"

@interface NetI2pUtilAddresses ()

+ (NSString *)stripScopeWithNSString:(NSString *)ip;

+ (jboolean)shouldIncludeWithJavaNetInetAddress:(JavaNetInetAddress *)ia
                                    withBoolean:(jboolean)includeSiteLocal
                                    withBoolean:(jboolean)includeLoopbackAndWildcard
                                    withBoolean:(jboolean)includeIPv6;

+ (void)refreshCache;

+ (void)printWithJavaUtilSet:(id<JavaUtilSet>)a;

+ (NSString *)getPrivacyStatus;

+ (jlong)getLongWithNSString:(NSString *)s;

@end

inline JavaIoFile *NetI2pUtilAddresses_get_IF_INET6_FILE(void);
static JavaIoFile *NetI2pUtilAddresses_IF_INET6_FILE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilAddresses, IF_INET6_FILE, JavaIoFile *)

inline jlong NetI2pUtilAddresses_get_INET6_CACHE_EXPIRE(void);
#define NetI2pUtilAddresses_INET6_CACHE_EXPIRE 600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilAddresses, INET6_CACHE_EXPIRE, jlong)

inline jboolean NetI2pUtilAddresses_get_INET6_CACHE_ENABLED(void);
static jboolean NetI2pUtilAddresses_INET6_CACHE_ENABLED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilAddresses, INET6_CACHE_ENABLED, jboolean)

inline jint NetI2pUtilAddresses_get_FLAG_PERMANENT(void);
#define NetI2pUtilAddresses_FLAG_PERMANENT 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilAddresses, FLAG_PERMANENT, jint)

inline jint NetI2pUtilAddresses_get_FLAG_DEPRECATED(void);
#define NetI2pUtilAddresses_FLAG_DEPRECATED 32
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilAddresses, FLAG_DEPRECATED, jint)

inline jint NetI2pUtilAddresses_get_FLAG_TEMPORARY(void);
#define NetI2pUtilAddresses_FLAG_TEMPORARY 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilAddresses, FLAG_TEMPORARY, jint)

inline jlong NetI2pUtilAddresses_get__ifCacheTime(void);
inline jlong NetI2pUtilAddresses_set__ifCacheTime(jlong value);
inline jlong *NetI2pUtilAddresses_getRef__ifCacheTime(void);
static jlong NetI2pUtilAddresses__ifCacheTime;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilAddresses, _ifCacheTime, jlong)

inline id<JavaUtilMap> NetI2pUtilAddresses_get__ifCache(void);
static id<JavaUtilMap> NetI2pUtilAddresses__ifCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilAddresses, _ifCache, id<JavaUtilMap>)

inline id<JavaUtilSet> NetI2pUtilAddresses_get__macCache(void);
static id<JavaUtilSet> NetI2pUtilAddresses__macCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilAddresses, _macCache, id<JavaUtilSet>)

inline id<JavaUtilMap> NetI2pUtilAddresses_get__IPAddress(void);
static id<JavaUtilMap> NetI2pUtilAddresses__IPAddress;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilAddresses, _IPAddress, id<JavaUtilMap>)

inline id<JavaUtilMap> NetI2pUtilAddresses_get__negativeCache(void);
static id<JavaUtilMap> NetI2pUtilAddresses__negativeCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilAddresses, _negativeCache, id<JavaUtilMap>)

inline jlong NetI2pUtilAddresses_get_NEG_CACHE_TIME(void);
#define NetI2pUtilAddresses_NEG_CACHE_TIME 3600000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilAddresses, NEG_CACHE_TIME, jlong)

__attribute__((unused)) static NSString *NetI2pUtilAddresses_stripScopeWithNSString_(NSString *ip);

__attribute__((unused)) static jboolean NetI2pUtilAddresses_shouldIncludeWithJavaNetInetAddress_withBoolean_withBoolean_withBoolean_(JavaNetInetAddress *ia, jboolean includeSiteLocal, jboolean includeLoopbackAndWildcard, jboolean includeIPv6);

__attribute__((unused)) static void NetI2pUtilAddresses_refreshCache(void);

__attribute__((unused)) static void NetI2pUtilAddresses_printWithJavaUtilSet_(id<JavaUtilSet> a);

__attribute__((unused)) static NSString *NetI2pUtilAddresses_getPrivacyStatus(void);

__attribute__((unused)) static jlong NetI2pUtilAddresses_getLongWithNSString_(NSString *s);

@interface NetI2pUtilAddresses_Inet6Addr : NSObject {
 @public
  JavaNetInet6Address *addr_;
  jboolean isDyn_;
  jboolean isDep_;
  jboolean isTemp_;
}

- (instancetype)initWithJavaNetInet6Address:(JavaNetInet6Address *)a
                                    withInt:(jint)flags;

- (JavaNetInet6Address *)getAddress;

- (jboolean)isDynamic;

- (jboolean)isDeprecated;

- (jboolean)isTemporary;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilAddresses_Inet6Addr)

J2OBJC_FIELD_SETTER(NetI2pUtilAddresses_Inet6Addr, addr_, JavaNetInet6Address *)

__attribute__((unused)) static void NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(NetI2pUtilAddresses_Inet6Addr *self, JavaNetInet6Address *a, jint flags);

__attribute__((unused)) static NetI2pUtilAddresses_Inet6Addr *new_NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(JavaNetInet6Address *a, jint flags) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilAddresses_Inet6Addr *create_NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(JavaNetInet6Address *a, jint flags);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilAddresses_Inet6Addr)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilAddresses)

@implementation NetI2pUtilAddresses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilAddresses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isConnected {
  return NetI2pUtilAddresses_isConnected();
}

+ (jboolean)isConnectedIPv6 {
  return NetI2pUtilAddresses_isConnectedIPv6();
}

+ (NSString *)getAnyAddress {
  return NetI2pUtilAddresses_getAnyAddress();
}

+ (id<JavaUtilSortedSet>)getAddresses {
  return NetI2pUtilAddresses_getAddresses();
}

+ (id<JavaUtilSortedSet>)getAllAddresses {
  return NetI2pUtilAddresses_getAllAddresses();
}

+ (id<JavaUtilSortedSet>)getAddressesWithBoolean:(jboolean)includeLocal
                                     withBoolean:(jboolean)includeIPv6 {
  return NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(includeLocal, includeIPv6);
}

+ (id<JavaUtilSortedSet>)getAddressesWithBoolean:(jboolean)includeSiteLocal
                                     withBoolean:(jboolean)includeLoopbackAndWildcard
                                     withBoolean:(jboolean)includeIPv6 {
  return NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(includeSiteLocal, includeLoopbackAndWildcard, includeIPv6);
}

+ (NSString *)stripScopeWithNSString:(NSString *)ip {
  return NetI2pUtilAddresses_stripScopeWithNSString_(ip);
}

+ (jboolean)shouldIncludeWithJavaNetInetAddress:(JavaNetInetAddress *)ia
                                    withBoolean:(jboolean)includeSiteLocal
                                    withBoolean:(jboolean)includeLoopbackAndWildcard
                                    withBoolean:(jboolean)includeIPv6 {
  return NetI2pUtilAddresses_shouldIncludeWithJavaNetInetAddress_withBoolean_withBoolean_withBoolean_(ia, includeSiteLocal, includeLoopbackAndWildcard, includeIPv6);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)addr {
  return NetI2pUtilAddresses_toStringWithByteArray_(addr);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)addr
                            withInt:(jint)port {
  return NetI2pUtilAddresses_toStringWithByteArray_withInt_(addr, port);
}

+ (jint)getPortWithNSString:(NSString *)port {
  return NetI2pUtilAddresses_getPortWithNSString_(port);
}

+ (IOSByteArray *)getIPWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_getIPWithNSString_(host);
}

+ (IOSByteArray *)getIPOnlyWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_getIPOnlyWithNSString_(host);
}

+ (IOSByteArray *)getIPWithNSString:(NSString *)host
                        withBoolean:(jboolean)preferIPv6 {
  return NetI2pUtilAddresses_getIPWithNSString_withBoolean_(host, preferIPv6);
}

+ (id<JavaUtilList>)getIPsWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_getIPsWithNSString_(host);
}

+ (jboolean)isIPv4AddressWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_isIPv4AddressWithNSString_(host);
}

+ (jboolean)isIPv6AddressWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_isIPv6AddressWithNSString_(host);
}

+ (jboolean)isIPAddressWithNSString:(NSString *)host {
  return NetI2pUtilAddresses_isIPAddressWithNSString_(host);
}

+ (void)refreshCache {
  NetI2pUtilAddresses_refreshCache();
}

+ (jboolean)isDynamicWithJavaNetInet6Address:(JavaNetInet6Address *)addr {
  return NetI2pUtilAddresses_isDynamicWithJavaNetInet6Address_(addr);
}

+ (jboolean)isDeprecatedWithJavaNetInet6Address:(JavaNetInet6Address *)addr {
  return NetI2pUtilAddresses_isDeprecatedWithJavaNetInet6Address_(addr);
}

+ (jboolean)isTemporaryWithJavaNetInet6Address:(JavaNetInet6Address *)addr {
  return NetI2pUtilAddresses_isTemporaryWithJavaNetInet6Address_(addr);
}

+ (void)clearCaches {
  NetI2pUtilAddresses_clearCaches();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilAddresses_mainWithNSStringArray_(args);
}

+ (void)printWithJavaUtilSet:(id<JavaUtilSet>)a {
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
}

+ (NSString *)getPrivacyStatus {
  return NetI2pUtilAddresses_getPrivacyStatus();
}

+ (jlong)getLongWithNSString:(NSString *)s {
  return NetI2pUtilAddresses_getLongWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSortedSet;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilSortedSet;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilSortedSet;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSortedSet;", 0x9, 1, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 14, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 15, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 14, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 17, 7, -1, 18, -1, -1 },
    { NULL, "Z", 0x9, 19, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 24, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 25, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, 30, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 31, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isConnected);
  methods[2].selector = @selector(isConnectedIPv6);
  methods[3].selector = @selector(getAnyAddress);
  methods[4].selector = @selector(getAddresses);
  methods[5].selector = @selector(getAllAddresses);
  methods[6].selector = @selector(getAddressesWithBoolean:withBoolean:);
  methods[7].selector = @selector(getAddressesWithBoolean:withBoolean:withBoolean:);
  methods[8].selector = @selector(stripScopeWithNSString:);
  methods[9].selector = @selector(shouldIncludeWithJavaNetInetAddress:withBoolean:withBoolean:withBoolean:);
  methods[10].selector = @selector(toStringWithByteArray:);
  methods[11].selector = @selector(toStringWithByteArray:withInt:);
  methods[12].selector = @selector(getPortWithNSString:);
  methods[13].selector = @selector(getIPWithNSString:);
  methods[14].selector = @selector(getIPOnlyWithNSString:);
  methods[15].selector = @selector(getIPWithNSString:withBoolean:);
  methods[16].selector = @selector(getIPsWithNSString:);
  methods[17].selector = @selector(isIPv4AddressWithNSString:);
  methods[18].selector = @selector(isIPv6AddressWithNSString:);
  methods[19].selector = @selector(isIPAddressWithNSString:);
  methods[20].selector = @selector(refreshCache);
  methods[21].selector = @selector(isDynamicWithJavaNetInet6Address:);
  methods[22].selector = @selector(isDeprecatedWithJavaNetInet6Address:);
  methods[23].selector = @selector(isTemporaryWithJavaNetInet6Address:);
  methods[24].selector = @selector(clearCaches);
  methods[25].selector = @selector(mainWithNSStringArray:);
  methods[26].selector = @selector(printWithJavaUtilSet:);
  methods[27].selector = @selector(getPrivacyStatus);
  methods[28].selector = @selector(getLongWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IF_INET6_FILE", "LJavaIoFile;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "INET6_CACHE_EXPIRE", "J", .constantValue.asLong = NetI2pUtilAddresses_INET6_CACHE_EXPIRE, 0x1a, -1, -1, -1, -1 },
    { "INET6_CACHE_ENABLED", "Z", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "FLAG_PERMANENT", "I", .constantValue.asInt = NetI2pUtilAddresses_FLAG_PERMANENT, 0x1a, -1, -1, -1, -1 },
    { "FLAG_DEPRECATED", "I", .constantValue.asInt = NetI2pUtilAddresses_FLAG_DEPRECATED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TEMPORARY", "I", .constantValue.asInt = NetI2pUtilAddresses_FLAG_TEMPORARY, 0x1a, -1, -1, -1, -1 },
    { "_ifCacheTime", "J", .constantValue.asLong = 0, 0xa, -1, 34, -1, -1 },
    { "_ifCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 35, 36, -1 },
    { "_macCache", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 37, 38, -1 },
    { "_IPAddress", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 39, 40, -1 },
    { "_negativeCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 41, 42, -1 },
    { "NEG_CACHE_TIME", "J", .constantValue.asLong = NetI2pUtilAddresses_NEG_CACHE_TIME, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/SortedSet<Ljava/lang/String;>;", "getAddresses", "ZZ", "(ZZ)Ljava/util/SortedSet<Ljava/lang/String;>;", "ZZZ", "(ZZZ)Ljava/util/SortedSet<Ljava/lang/String;>;", "stripScope", "LNSString;", "shouldInclude", "LJavaNetInetAddress;ZZZ", "toString", "[B", "[BI", "getPort", "getIP", "getIPOnly", "LNSString;Z", "getIPs", "(Ljava/lang/String;)Ljava/util/List<[B>;", "isIPv4Address", "isIPv6Address", "isIPAddress", "isDynamic", "LJavaNetInet6Address;", "isDeprecated", "isTemporary", "main", "[LNSString;", "print", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "getLong", &NetI2pUtilAddresses_IF_INET6_FILE, &NetI2pUtilAddresses_INET6_CACHE_ENABLED, &NetI2pUtilAddresses__ifCacheTime, &NetI2pUtilAddresses__ifCache, "Ljava/util/Map<Ljava/net/Inet6Address;Lnet/i2p/util/Addresses$Inet6Addr;>;", &NetI2pUtilAddresses__macCache, "Ljava/util/Set<Ljava/lang/String;>;", &NetI2pUtilAddresses__IPAddress, "Ljava/util/Map<Ljava/lang/String;[B>;", &NetI2pUtilAddresses__negativeCache, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Long;>;", "LNetI2pUtilAddresses_Inet6Addr;" };
  static const J2ObjcClassInfo _NetI2pUtilAddresses = { "Addresses", "net.i2p.util", ptrTable, methods, fields, 7, 0x401, 29, 12, -1, 43, -1, -1, -1 };
  return &_NetI2pUtilAddresses;
}

+ (void)initialize {
  if (self == [NetI2pUtilAddresses class]) {
    JreStrongAssignAndConsume(&NetI2pUtilAddresses_IF_INET6_FILE, new_JavaIoFile_initWithNSString_(@"/proc/net/if_inet6"));
    NetI2pUtilAddresses_INET6_CACHE_ENABLED = (!NetI2pUtilSystemVersion_isMac() && !NetI2pUtilSystemVersion_isWindows() && !NetI2pUtilSystemVersion_isAndroid() && [NetI2pUtilAddresses_IF_INET6_FILE exists]);
    JreStrongAssign(&NetI2pUtilAddresses__ifCache, NetI2pUtilAddresses_INET6_CACHE_ENABLED ? create_JavaUtilHashMap_initWithInt_(8) : nil);
    JreStrongAssignAndConsume(&NetI2pUtilAddresses__macCache, new_JavaUtilHashSet_init());
    {
      jint size;
      NetI2pI2PAppContext *ctx = NetI2pI2PAppContext_getCurrentContext();
      if (ctx != nil && [ctx isRouterContext]) {
        jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
        jlong min = 256;
        jlong max = 4096;
        size = (jint) JavaLangMath_maxWithLong_withLong_(min, JavaLangMath_minWithLong_withLong_(max, 1 + (maxMemory / (64 * 1024))));
      }
      else {
        size = 32;
      }
      JreStrongAssignAndConsume(&NetI2pUtilAddresses__IPAddress, new_NetI2pUtilLHMCache_initWithInt_(size));
      JreStrongAssignAndConsume(&NetI2pUtilAddresses__negativeCache, new_NetI2pUtilLHMCache_initWithInt_(128));
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilAddresses)
  }
}

@end

void NetI2pUtilAddresses_init(NetI2pUtilAddresses *self) {
  NSObject_init(self);
}

jboolean NetI2pUtilAddresses_isConnected() {
  NetI2pUtilAddresses_initialize();
  return ![((id<JavaUtilSortedSet>) nil_chk(NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(true, false, false))) isEmpty];
}

jboolean NetI2pUtilAddresses_isConnectedIPv6() {
  NetI2pUtilAddresses_initialize();
  for (NSString * __strong ip in nil_chk(NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, true))) {
    if ([((NSString *) nil_chk(ip)) java_contains:@":"]) return true;
  }
  return false;
}

NSString *NetI2pUtilAddresses_getAnyAddress() {
  NetI2pUtilAddresses_initialize();
  id<JavaUtilSortedSet> a = NetI2pUtilAddresses_getAddresses();
  if (![((id<JavaUtilSortedSet>) nil_chk(a)) isEmpty]) return [a first];
  return nil;
}

id<JavaUtilSortedSet> NetI2pUtilAddresses_getAddresses() {
  NetI2pUtilAddresses_initialize();
  return NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, false);
}

id<JavaUtilSortedSet> NetI2pUtilAddresses_getAllAddresses() {
  NetI2pUtilAddresses_initialize();
  return NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(true, true);
}

id<JavaUtilSortedSet> NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(jboolean includeLocal, jboolean includeIPv6) {
  NetI2pUtilAddresses_initialize();
  return NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(includeLocal, includeLocal, includeIPv6);
}

id<JavaUtilSortedSet> NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(jboolean includeSiteLocal, jboolean includeLoopbackAndWildcard, jboolean includeIPv6) {
  NetI2pUtilAddresses_initialize();
  jboolean haveIPv4 = false;
  jboolean haveIPv6 = false;
  id<JavaUtilSortedSet> rv = create_JavaUtilTreeSet_init();
  jboolean omitDeprecated = NetI2pUtilAddresses_INET6_CACHE_ENABLED && !includeSiteLocal && includeIPv6;
  @try {
    JavaNetInetAddress *localhost = JavaNetInetAddress_getLocalHost();
    IOSObjectArray *allMyIps = JavaNetInetAddress_getAllByNameWithNSString_([((JavaNetInetAddress *) nil_chk(localhost)) getCanonicalHostName]);
    if (allMyIps != nil) {
      for (jint i = 0; i < allMyIps->size_; i++) {
        jboolean isv4 = [IOSObjectArray_Get(allMyIps, i) isKindOfClass:[JavaNetInet4Address class]];
        if (isv4) haveIPv4 = true;
        else haveIPv6 = true;
        if (omitDeprecated && !isv4) {
          if (NetI2pUtilAddresses_isDeprecatedWithJavaNetInet6Address_((JavaNetInet6Address *) cast_chk(IOSObjectArray_Get(allMyIps, i), [JavaNetInet6Address class]))) continue;
        }
        if (NetI2pUtilAddresses_shouldIncludeWithJavaNetInetAddress_withBoolean_withBoolean_withBoolean_(IOSObjectArray_Get(allMyIps, i), includeSiteLocal, includeLoopbackAndWildcard, includeIPv6)) {
          [rv addWithId:NetI2pUtilAddresses_stripScopeWithNSString_([((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(allMyIps, i))) getHostAddress])];
        }
      }
    }
  }
  @catch (JavaNetUnknownHostException *e) {
  }
  @try {
    id<JavaUtilEnumeration> ifcs = JavaNetNetworkInterface_getNetworkInterfaces();
    if (ifcs != nil) {
      id<JavaUtilSet> newMacs = create_JavaUtilHashSet_initWithInt_(8);
      while ([ifcs hasMoreElements]) {
        JavaNetNetworkInterface *ifc = [ifcs nextElement];
        if (![((JavaNetNetworkInterface *) nil_chk(ifc)) isUp]) {
          continue;
        }
        @try {
          IOSByteArray *mac = [ifc getHardwareAddress];
          if (mac != nil && mac->size_ == 6) {
            [newMacs addWithId:NetI2pDataDataHelper_toStringWithByteArray_(mac)];
          }
        }
        @catch (JavaNetSocketException *ioe) {
        }
        for (id<JavaUtilEnumeration> addrs = [ifc getInetAddresses]; [((id<JavaUtilEnumeration>) nil_chk(addrs)) hasMoreElements]; ) {
          JavaNetInetAddress *addr = [addrs nextElement];
          jboolean isv4 = [addr isKindOfClass:[JavaNetInet4Address class]];
          if (isv4) haveIPv4 = true;
          else haveIPv6 = true;
          if (omitDeprecated && !isv4) {
            if (NetI2pUtilAddresses_isDeprecatedWithJavaNetInet6Address_((JavaNetInet6Address *) cast_chk(addr, [JavaNetInet6Address class]))) continue;
          }
          if (NetI2pUtilAddresses_shouldIncludeWithJavaNetInetAddress_withBoolean_withBoolean_withBoolean_(addr, includeSiteLocal, includeLoopbackAndWildcard, includeIPv6)) {
            [rv addWithId:NetI2pUtilAddresses_stripScopeWithNSString_([((JavaNetInetAddress *) nil_chk(addr)) getHostAddress])];
          }
        }
      }
      if (![newMacs isEmpty]) {
        @synchronized(NetI2pUtilAddresses__macCache) {
          [((id<JavaUtilSet>) nil_chk(NetI2pUtilAddresses__macCache)) clear];
          [NetI2pUtilAddresses__macCache addAllWithJavaUtilCollection:newMacs];
        }
      }
    }
  }
  @catch (JavaNetSocketException *e) {
  }
  @catch (JavaLangError *e) {
  }
  if (includeLoopbackAndWildcard) {
    if (haveIPv4) [rv addWithId:@"0.0.0.0"];
    if (includeIPv6 && haveIPv6) [rv addWithId:@"0:0:0:0:0:0:0:0"];
  }
  return rv;
}

NSString *NetI2pUtilAddresses_stripScopeWithNSString_(NSString *ip) {
  NetI2pUtilAddresses_initialize();
  jint pct = [((NSString *) nil_chk(ip)) java_indexOf:'%'];
  if (pct > 0) ip = [ip java_substring:0 endIndex:pct];
  return ip;
}

jboolean NetI2pUtilAddresses_shouldIncludeWithJavaNetInetAddress_withBoolean_withBoolean_withBoolean_(JavaNetInetAddress *ia, jboolean includeSiteLocal, jboolean includeLoopbackAndWildcard, jboolean includeIPv6) {
  NetI2pUtilAddresses_initialize();
  return (![((JavaNetInetAddress *) nil_chk(ia)) isLinkLocalAddress]) && (![ia isMulticastAddress]) && (includeLoopbackAndWildcard || ((![ia isAnyLocalAddress]) && (![ia isLoopbackAddress]))) && (includeSiteLocal || ((![ia isSiteLocalAddress]) && (((IOSByteArray *) nil_chk([ia getAddress]))->size_ != 16 || (IOSByteArray_Get(nil_chk([ia getAddress]), 0) & (jint) 0xfe) != (jint) 0xfc))) && (includeIPv6 || ([ia isKindOfClass:[JavaNetInet4Address class]]));
}

NSString *NetI2pUtilAddresses_toStringWithByteArray_(IOSByteArray *addr) {
  NetI2pUtilAddresses_initialize();
  if (addr == nil) return @"null";
  @try {
    return [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(addr))) getHostAddress];
  }
  @catch (JavaNetUnknownHostException *uhe) {
    return JreStrcat("$I", @"bad IP length ", addr->size_);
  }
}

NSString *NetI2pUtilAddresses_toStringWithByteArray_withInt_(IOSByteArray *addr, jint port) {
  NetI2pUtilAddresses_initialize();
  if (addr == nil) return JreStrcat("$I", @"null:", port);
  @try {
    NSString *ip = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(addr))) getHostAddress];
    if (addr->size_ != 16) return JreStrcat("$CI", ip, ':', port);
    return JreStrcat("C$$I", '[', ip, @"]:", port);
  }
  @catch (JavaNetUnknownHostException *uhe) {
    return JreStrcat("$I$I", @"(bad IP length ", addr->size_, @"):", port);
  }
}

jint NetI2pUtilAddresses_getPortWithNSString_(NSString *port) {
  NetI2pUtilAddresses_initialize();
  jint rv = 0;
  if (port != nil) {
    @try {
      jint iport = JavaLangInteger_parseIntWithNSString_(port);
      if (iport > 0 && iport <= 65535) rv = iport;
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return rv;
}

IOSByteArray *NetI2pUtilAddresses_getIPWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  if (host == nil) return nil;
  IOSByteArray *rv;
  @synchronized(NetI2pUtilAddresses__IPAddress) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__IPAddress)) getWithId:host]);
  }
  if (rv == nil) {
    @synchronized(NetI2pUtilAddresses__negativeCache) {
      JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__negativeCache)) getWithId:host];
      if (when != nil) {
        if ([when longLongValue] > JavaLangSystem_currentTimeMillis() - NetI2pUtilAddresses_NEG_CACHE_TIME) return JreRetainedLocalValue(nil);
        [NetI2pUtilAddresses__negativeCache removeWithId:host];
      }
    }
    @try {
      rv = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_(host))) getAddress];
      if (NetI2pUtilAddresses_isIPAddressWithNSString_(host)) {
        @synchronized(NetI2pUtilAddresses__IPAddress) {
          [NetI2pUtilAddresses__IPAddress putWithId:host withId:rv];
        }
      }
    }
    @catch (JavaNetUnknownHostException *uhe) {
      @synchronized(NetI2pUtilAddresses__negativeCache) {
        [NetI2pUtilAddresses__negativeCache putWithId:host withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
      }
    }
  }
  return rv;
}

IOSByteArray *NetI2pUtilAddresses_getIPOnlyWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  if (host == nil) return nil;
  IOSByteArray *rv;
  @synchronized(NetI2pUtilAddresses__IPAddress) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__IPAddress)) getWithId:host]);
  }
  if (rv == nil) {
    if (NetI2pUtilAddresses_isIPAddressWithNSString_(host)) {
      @try {
        rv = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_(host))) getAddress];
        @synchronized(NetI2pUtilAddresses__IPAddress) {
          [NetI2pUtilAddresses__IPAddress putWithId:host withId:rv];
        }
      }
      @catch (JavaNetUnknownHostException *uhe) {
      }
    }
  }
  return rv;
}

IOSByteArray *NetI2pUtilAddresses_getIPWithNSString_withBoolean_(NSString *host, jboolean preferIPv6) {
  NetI2pUtilAddresses_initialize();
  if (host == nil) return nil;
  if (NetI2pUtilAddresses_isIPAddressWithNSString_(host)) return NetI2pUtilAddresses_getIPWithNSString_(host);
  @synchronized(NetI2pUtilAddresses__negativeCache) {
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__negativeCache)) getWithId:host];
    if (when != nil) {
      if ([when longLongValue] > JavaLangSystem_currentTimeMillis() - NetI2pUtilAddresses_NEG_CACHE_TIME) return JreRetainedLocalValue(nil);
      [NetI2pUtilAddresses__negativeCache removeWithId:host];
    }
  }
  IOSByteArray *rv = nil;
  @try {
    IOSObjectArray *addrs = JavaNetInetAddress_getAllByNameWithNSString_(host);
    if (addrs == nil || addrs->size_ == 0) return nil;
    for (jint i = 0; i < addrs->size_; i++) {
      rv = [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(addrs, i))) getAddress];
      if (preferIPv6) {
        if (((IOSByteArray *) nil_chk(rv))->size_ == 16) break;
      }
      else {
        if (((IOSByteArray *) nil_chk(rv))->size_ == 4) break;
      }
    }
  }
  @catch (JavaNetUnknownHostException *uhe) {
    @synchronized(NetI2pUtilAddresses__negativeCache) {
      [NetI2pUtilAddresses__negativeCache putWithId:host withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
    }
  }
  return rv;
}

id<JavaUtilList> NetI2pUtilAddresses_getIPsWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  if (host == nil) return nil;
  if (NetI2pUtilAddresses_isIPAddressWithNSString_(host)) {
    IOSByteArray *brv = NetI2pUtilAddresses_getIPWithNSString_(host);
    if (brv == nil) return nil;
    return JavaUtilCollections_singletonListWithId_(brv);
  }
  @synchronized(NetI2pUtilAddresses__negativeCache) {
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__negativeCache)) getWithId:host];
    if (when != nil) {
      if ([when longLongValue] > JavaLangSystem_currentTimeMillis() - NetI2pUtilAddresses_NEG_CACHE_TIME) return JreRetainedLocalValue(nil);
      [NetI2pUtilAddresses__negativeCache removeWithId:host];
    }
  }
  @try {
    IOSObjectArray *addrs = JavaNetInetAddress_getAllByNameWithNSString_(host);
    if (addrs == nil || addrs->size_ == 0) return nil;
    id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(addrs->size_);
    for (jint i = 0; i < addrs->size_; i++) {
      [rv addWithId:[((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(addrs, i))) getAddress]];
    }
    return rv;
  }
  @catch (JavaNetUnknownHostException *uhe) {
    @synchronized(NetI2pUtilAddresses__negativeCache) {
      [NetI2pUtilAddresses__negativeCache putWithId:host withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
    }
  }
  return nil;
}

jboolean NetI2pUtilAddresses_isIPv4AddressWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv4AddressWithNSString_(host);
}

jboolean NetI2pUtilAddresses_isIPv6AddressWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv6AddressWithNSString_(host);
}

jboolean NetI2pUtilAddresses_isIPAddressWithNSString_(NSString *host) {
  NetI2pUtilAddresses_initialize();
  return OrgApacheHttpConnUtilInetAddressUtils_isIPv4AddressWithNSString_(host) || OrgApacheHttpConnUtilInetAddressUtils_isIPv6AddressWithNSString_(host);
}

void NetI2pUtilAddresses_refreshCache() {
  NetI2pUtilAddresses_initialize();
  jlong now = JavaLangSystem_currentTimeMillis();
  if (now - NetI2pUtilAddresses__ifCacheTime < NetI2pUtilAddresses_INET6_CACHE_EXPIRE) return;
  [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__ifCache)) clear];
  JavaIoBufferedReader *in = nil;
  @try {
    in = create_JavaIoBufferedReader_initWithJavaIoReader_withInt_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(NetI2pUtilAddresses_IF_INET6_FILE), @"ISO-8859-1"), 1024);
    NSString *line = nil;
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(40);
    while ((line = [in readLine]) != nil) {
      IOSObjectArray *parts = NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(line, @" ", 6);
      if (((IOSObjectArray *) nil_chk(parts))->size_ < 5) continue;
      NSString *as = IOSObjectArray_Get(parts, 0);
      if ([((NSString *) nil_chk(as)) java_length] != 32) continue;
      [buf setLengthWithInt:0];
      jint i = 0;
      while (true) {
        [buf appendWithNSString:[as java_substring:i endIndex:i + 4]];
        i += 4;
        if (i >= 32) break;
        [buf appendWithChar:':'];
      }
      JavaNetInet6Address *addr;
      @try {
        addr = (JavaNetInet6Address *) cast_chk(JavaNetInetAddress_getByNameWithNSString_([buf description]), [JavaNetInet6Address class]);
      }
      @catch (JavaNetUnknownHostException *uhe) {
        continue;
      }
      jint flags = NetI2pUtilAddresses_FLAG_PERMANENT;
      @try {
        flags = JavaLangInteger_parseIntWithNSString_withInt_(IOSObjectArray_Get(parts, 4), 16);
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
      NetI2pUtilAddresses_Inet6Addr *a = create_NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(addr, flags);
      [NetI2pUtilAddresses__ifCache putWithId:addr withId:a];
    }
  }
  @catch (JavaIoIOException *ioe) {
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  NetI2pUtilAddresses__ifCacheTime = now;
}

jboolean NetI2pUtilAddresses_isDynamicWithJavaNetInet6Address_(JavaNetInet6Address *addr) {
  NetI2pUtilAddresses_initialize();
  if (!NetI2pUtilAddresses_INET6_CACHE_ENABLED) return NetI2pUtilAddresses_isTemporaryWithJavaNetInet6Address_(addr);
  NetI2pUtilAddresses_Inet6Addr *a;
  @synchronized(NetI2pUtilAddresses__ifCache) {
    NetI2pUtilAddresses_refreshCache();
    a = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__ifCache)) getWithId:addr]);
  }
  if (a == nil) return false;
  return [a isDynamic];
}

jboolean NetI2pUtilAddresses_isDeprecatedWithJavaNetInet6Address_(JavaNetInet6Address *addr) {
  NetI2pUtilAddresses_initialize();
  if (!NetI2pUtilAddresses_INET6_CACHE_ENABLED) return false;
  NetI2pUtilAddresses_Inet6Addr *a;
  @synchronized(NetI2pUtilAddresses__ifCache) {
    NetI2pUtilAddresses_refreshCache();
    a = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__ifCache)) getWithId:addr]);
  }
  if (a == nil) return false;
  return [a isDeprecated];
}

jboolean NetI2pUtilAddresses_isTemporaryWithJavaNetInet6Address_(JavaNetInet6Address *addr) {
  NetI2pUtilAddresses_initialize();
  if (!NetI2pUtilAddresses_INET6_CACHE_ENABLED) {
    IOSByteArray *b = [((JavaNetInet6Address *) nil_chk(addr)) getAddress];
    if (((IOSByteArray *) nil_chk(b))->size_ != 16) return false;
    if (IOSByteArray_Get(b, 8) == 0 && IOSByteArray_Get(b, 9) == 0 && IOSByteArray_Get(b, 10) == 0 && IOSByteArray_Get(b, 11) == 0) return false;
    NSString *last3 = NetI2pDataDataHelper_toHexStringWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(b, 13, 16));
    @synchronized(NetI2pUtilAddresses__macCache) {
      for (NSString * __strong m in nil_chk(NetI2pUtilAddresses__macCache)) {
        if ([((NSString *) nil_chk(m)) java_hasSuffix:last3]) return false;
      }
    }
    if (!NetI2pUtilSystemVersion_isWindows()) return (IOSByteArray_Get(b, 8) & (jint) 0x02) == 0;
    return true;
  }
  NetI2pUtilAddresses_Inet6Addr *a;
  @synchronized(NetI2pUtilAddresses__ifCache) {
    NetI2pUtilAddresses_refreshCache();
    a = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__ifCache)) getWithId:addr]);
  }
  if (a == nil) return false;
  return [a isTemporary];
}

void NetI2pUtilAddresses_clearCaches() {
  NetI2pUtilAddresses_initialize();
  @synchronized(NetI2pUtilAddresses__IPAddress) {
    [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__IPAddress)) clear];
  }
  @synchronized(NetI2pUtilAddresses__negativeCache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pUtilAddresses__negativeCache)) clear];
  }
  if (NetI2pUtilAddresses__ifCache != nil) {
    @synchronized(NetI2pUtilAddresses__ifCache) {
      [NetI2pUtilAddresses__ifCache clear];
      NetI2pUtilAddresses__ifCacheTime = 0;
    }
  }
  @synchronized(NetI2pUtilAddresses__macCache) {
    [((id<JavaUtilSet>) nil_chk(NetI2pUtilAddresses__macCache)) clear];
  }
}

void NetI2pUtilAddresses_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilAddresses_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"External IPv4 Addresses:"];
  id<JavaUtilSet> a = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(false, false, false);
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nExternal and Local IPv4 Addresses:"];
  a = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(true, false, false);
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nAll External Addresses:"];
  a = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(false, false, true);
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nAll External and Local Addresses:"];
  a = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(true, false, true);
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nAll addresses:"];
  jlong time = JavaLangSystem_currentTimeMillis();
  a = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_withBoolean_(true, true, true);
  time = JavaLangSystem_currentTimeMillis() - time;
  NetI2pUtilAddresses_printWithJavaUtilSet_(a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nIPv6 address flags:"];
  for (NSString * __strong s in nil_chk(a)) {
    if (![((NSString *) nil_chk(s)) java_contains:@":"]) continue;
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
    [buf appendWithNSString:s];
    JavaNetInet6Address *addr;
    @try {
      addr = (JavaNetInet6Address *) cast_chk(JavaNetInetAddress_getByNameWithNSString_([buf description]), [JavaNetInet6Address class]);
      if ([((JavaNetInet6Address *) nil_chk(addr)) isSiteLocalAddress]) [buf appendWithNSString:@" host"];
      else if ([addr isLinkLocalAddress]) [buf appendWithNSString:@" link"];
      else if ([addr isAnyLocalAddress]) [buf appendWithNSString:@" wildcard"];
      else if ([addr isLoopbackAddress]) [buf appendWithNSString:@" loopback"];
      else {
        [buf appendWithNSString:@" global"];
        if (NetI2pUtilAddresses_isTemporaryWithJavaNetInet6Address_(addr)) [buf appendWithNSString:@" temporary"];
        if (NetI2pUtilAddresses_isDynamicWithJavaNetInet6Address_(addr)) [buf appendWithNSString:@" dynamic"];
        if (NetI2pUtilAddresses_isDeprecatedWithJavaNetInet6Address_(addr)) [buf appendWithNSString:@" deprecated"];
      }
    }
    @catch (JavaNetUnknownHostException *uhe) {
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[buf description]];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nMac addresses:"];
  id<JavaUtilSet> macs = create_JavaUtilTreeSet_init();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(17);
  for (NSString * __strong m in nil_chk(NetI2pUtilAddresses__macCache)) {
    [buf setLengthWithInt:0];
    jint i = 0;
    while (true) {
      [buf appendWithNSString:[((NSString *) nil_chk(m)) java_substring:i endIndex:i + 2]];
      i += 2;
      if (i >= 12) break;
      [buf appendWithChar:':'];
    }
    [macs addWithId:[buf description]];
  }
  NetI2pUtilAddresses_printWithJavaUtilSet_(macs);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z$Z", @"\nIs connected? ", NetI2pUtilAddresses_isConnected(), @"\nIs conn IPv6? ", NetI2pUtilAddresses_isConnectedIPv6())];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Has v6 flags? ", NetI2pUtilAddresses_INET6_CACHE_ENABLED)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Uses v6 temp? ", NetI2pUtilAddresses_getPrivacyStatus())];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"scan time:    ", NetI2pDataDataHelper_formatDurationWithLong_(time))];
}

void NetI2pUtilAddresses_printWithJavaUtilSet_(id<JavaUtilSet> a) {
  NetI2pUtilAddresses_initialize();
  if ([((id<JavaUtilSet>) nil_chk(a)) isEmpty]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"none"];
  }
  else {
    for (NSString * __strong s in a) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
    }
  }
}

NSString *NetI2pUtilAddresses_getPrivacyStatus() {
  NetI2pUtilAddresses_initialize();
  if (NetI2pUtilSystemVersion_isMac() || NetI2pUtilSystemVersion_isWindows()) return @"unknown";
  jlong t = NetI2pUtilAddresses_getLongWithNSString_(@"/proc/sys/net/ipv6/conf/all/use_tempaddr");
  if (t < 0) return @"unknown";
  NSString *rv;
  if (t == 0) rv = @"false";
  else if (t == 2) rv = @"true";
  else rv = @"unknown";
  if (t == 2) {
    jlong pref = NetI2pUtilAddresses_getLongWithNSString_(@"/proc/sys/net/ipv6/conf/all/temp_prefered_lft");
    if (pref > 0) JreStrAppend(&rv, "$$", @", preferred lifetime ", NetI2pDataDataHelper_formatDurationWithLong_(pref * 1000));
    jlong valid = NetI2pUtilAddresses_getLongWithNSString_(@"/proc/sys/net/ipv6/conf/all/temp_valid_lft");
    if (pref > 0) JreStrAppend(&rv, "$$", @", valid lifetime ", NetI2pDataDataHelper_formatDurationWithLong_(valid * 1000));
  }
  return rv;
}

jlong NetI2pUtilAddresses_getLongWithNSString_(NSString *s) {
  NetI2pUtilAddresses_initialize();
  JavaIoFile *f = create_JavaIoFile_initWithNSString_(s);
  jlong rv = -1;
  if ([f exists]) {
    JavaIoBufferedReader *in = nil;
    @try {
      in = create_JavaIoBufferedReader_initWithJavaIoReader_withInt_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(f), @"ISO-8859-1"), 64);
      NSString *line = [in readLine];
      if (line != nil) {
        @try {
          rv = JavaLangLong_parseLongWithNSString_([line java_trim]);
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
      }
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      if (in != nil) @try {
        [in close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilAddresses)

@implementation NetI2pUtilAddresses_Inet6Addr

- (instancetype)initWithJavaNetInet6Address:(JavaNetInet6Address *)a
                                    withInt:(jint)flags {
  NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(self, a, flags);
  return self;
}

- (JavaNetInet6Address *)getAddress {
  return addr_;
}

- (jboolean)isDynamic {
  return isDyn_;
}

- (jboolean)isDeprecated {
  return isDep_;
}

- (jboolean)isTemporary {
  return isTemp_;
}

- (void)dealloc {
  RELEASE_(addr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet6Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetInet6Address:withInt:);
  methods[1].selector = @selector(getAddress);
  methods[2].selector = @selector(isDynamic);
  methods[3].selector = @selector(isDeprecated);
  methods[4].selector = @selector(isTemporary);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "addr_", "LJavaNetInet6Address;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isDyn_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isDep_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isTemp_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInet6Address;I", "LNetI2pUtilAddresses;" };
  static const J2ObjcClassInfo _NetI2pUtilAddresses_Inet6Addr = { "Inet6Addr", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 5, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilAddresses_Inet6Addr;
}

@end

void NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(NetI2pUtilAddresses_Inet6Addr *self, JavaNetInet6Address *a, jint flags) {
  NSObject_init(self);
  JreStrongAssign(&self->addr_, a);
  self->isDyn_ = ((flags & NetI2pUtilAddresses_FLAG_PERMANENT) == 0);
  self->isDep_ = ((flags & NetI2pUtilAddresses_FLAG_DEPRECATED) != 0);
  self->isTemp_ = ((flags & NetI2pUtilAddresses_FLAG_TEMPORARY) != 0);
}

NetI2pUtilAddresses_Inet6Addr *new_NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(JavaNetInet6Address *a, jint flags) {
  J2OBJC_NEW_IMPL(NetI2pUtilAddresses_Inet6Addr, initWithJavaNetInet6Address_withInt_, a, flags)
}

NetI2pUtilAddresses_Inet6Addr *create_NetI2pUtilAddresses_Inet6Addr_initWithJavaNetInet6Address_withInt_(JavaNetInet6Address *a, jint flags) {
  J2OBJC_CREATE_IMPL(NetI2pUtilAddresses_Inet6Addr, initWithJavaNetInet6Address_withInt_, a, flags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilAddresses_Inet6Addr)
