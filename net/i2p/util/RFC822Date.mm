//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/RFC822Date.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "net/i2p/util/RFC822Date.h"

inline JavaTextSimpleDateFormat *NetI2pUtilRFC822Date_get_OUTPUT_FORMAT(void);
static JavaTextSimpleDateFormat *NetI2pUtilRFC822Date_OUTPUT_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilRFC822Date, OUTPUT_FORMAT, JavaTextSimpleDateFormat *)

inline IOSObjectArray *NetI2pUtilRFC822Date_get_rfc822DateFormats(void);
static IOSObjectArray *NetI2pUtilRFC822Date_rfc822DateFormats;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilRFC822Date, rfc822DateFormats, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilRFC822Date)

@implementation NetI2pUtilRFC822Date

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilRFC822Date_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)parse822DateWithNSString:(NSString *)s {
  return NetI2pUtilRFC822Date_parse822DateWithNSString_(s);
}

+ (NSString *)to822DateWithLong:(jlong)t {
  return NetI2pUtilRFC822Date_to822DateWithLong_(t);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilRFC822Date_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x29, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x29, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parse822DateWithNSString:);
  methods[2].selector = @selector(to822DateWithLong:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OUTPUT_FORMAT", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "rfc822DateFormats", "[LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "parse822Date", "LNSString;", "to822Date", "J", "main", "[LNSString;", &NetI2pUtilRFC822Date_OUTPUT_FORMAT, &NetI2pUtilRFC822Date_rfc822DateFormats };
  static const J2ObjcClassInfo _NetI2pUtilRFC822Date = { "RFC822Date", "net.i2p.util", ptrTable, methods, fields, 7, 0x401, 4, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilRFC822Date;
}

+ (void)initialize {
  if (self == [NetI2pUtilRFC822Date class]) {
    JreStrongAssignAndConsume(&NetI2pUtilRFC822Date_OUTPUT_FORMAT, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"EEE, d MMM yyyy HH:mm:ss z", JreLoadStatic(JavaUtilLocale, US)));
    JreStrongAssignAndConsume(&NetI2pUtilRFC822Date_rfc822DateFormats, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilRFC822Date_OUTPUT_FORMAT, create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"d MMM yy HH:mm:ss z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"EEE, d MMM yy HH:mm z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"EEE, d MMM yyyy HH:mm:ss z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"EEE, d MMM yyyy HH:mm z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"d MMM yy HH:mm z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"d MMM yy HH:mm:ss z", JreLoadStatic(JavaUtilLocale, US)), create_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"d MMM yyyy HH:mm z", JreLoadStatic(JavaUtilLocale, US)) } count:8 type:JavaTextSimpleDateFormat_class_()]);
    {
      JavaUtilTimeZone *utc = JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT");
      for (jint i = 0; i < NetI2pUtilRFC822Date_rfc822DateFormats->size_; i++) {
        [((JavaTextSimpleDateFormat *) nil_chk(IOSObjectArray_Get(NetI2pUtilRFC822Date_rfc822DateFormats, i))) setTimeZoneWithJavaUtilTimeZone:utc];
      }
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilRFC822Date)
  }
}

@end

void NetI2pUtilRFC822Date_init(NetI2pUtilRFC822Date *self) {
  NSObject_init(self);
}

jlong NetI2pUtilRFC822Date_parse822DateWithNSString_(NSString *s) {
  NetI2pUtilRFC822Date_initialize();
  @synchronized(NetI2pUtilRFC822Date_class_()) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(NetI2pUtilRFC822Date_rfc822DateFormats))->size_; i++) {
      @try {
        JavaUtilDate *date = [((JavaTextSimpleDateFormat *) nil_chk(IOSObjectArray_Get(NetI2pUtilRFC822Date_rfc822DateFormats, i))) parseWithNSString:s];
        if (date != nil) return [date getTime];
      }
      @catch (JavaTextParseException *pe) {
      }
    }
    return -1;
  }
}

NSString *NetI2pUtilRFC822Date_to822DateWithLong_(jlong t) {
  NetI2pUtilRFC822Date_initialize();
  @synchronized(NetI2pUtilRFC822Date_class_()) {
    return JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(NetI2pUtilRFC822Date_OUTPUT_FORMAT)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(t)]);
  }
}

void NetI2pUtilRFC822Date_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilRFC822Date_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 1) {
    @try {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NetI2pUtilRFC822Date_to822DateWithLong_(JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(args, 0)) * 1000)];
    }
    @catch (JavaLangNumberFormatException *nfe) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Invalid date"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[nfe description]];
    }
  }
  else if (args->size_ == 0) {
    jlong t = JavaLangSystem_currentTimeMillis();
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"Current Time: ", (t / 1000))];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NetI2pUtilRFC822Date_to822DateWithLong_(t)];
  }
  else {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
    for (jint i = 0; i < args->size_; i++) {
      [buf appendWithNSString:IOSObjectArray_Get(args, i)];
      if (i < args->size_ - 1) [buf appendWithChar:' '];
    }
    jlong t = NetI2pUtilRFC822Date_parse822DateWithNSString_([buf description]);
    if (t >= 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JavaLangLong_toStringWithLong_(t / 1000)];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Invalid date"];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: RFC822Date [numericDate|textualDate]"];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilRFC822Date)
