//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SimpleTimer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Executor.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleStore.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilSimpleTimer () {
 @public
  NetI2pUtilLog *_log_;
  JavaUtilTreeMap *_events_;
  id<JavaUtilMap> _eventTimes_;
  id<JavaUtilList> _readyEvents_;
  NetI2pUtilSimpleStore *runn_;
  jlong _occurredTime_;
  jlong _occurredEventCount_;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer, _events_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer, _eventTimes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer, _readyEvents_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer, runn_, NetI2pUtilSimpleStore *)

inline jint NetI2pUtilSimpleTimer_get_MIN_THREADS(void);
#define NetI2pUtilSimpleTimer_MIN_THREADS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleTimer, MIN_THREADS, jint)

inline jint NetI2pUtilSimpleTimer_get_MAX_THREADS(void);
#define NetI2pUtilSimpleTimer_MAX_THREADS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleTimer, MAX_THREADS, jint)

__attribute__((unused)) static void NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pUtilSimpleTimer *self, NetI2pI2PAppContext *context, NSString *name);

__attribute__((unused)) static NetI2pUtilSimpleTimer *new_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer *create_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$2(void);

@interface NetI2pUtilSimpleTimer_Shutdown : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilSimpleTimer *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer:(NetI2pUtilSimpleTimer *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer_Shutdown)

__attribute__((unused)) static void NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer_Shutdown *self, NetI2pUtilSimpleTimer *outer$);

__attribute__((unused)) static NetI2pUtilSimpleTimer_Shutdown *new_NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer_Shutdown *create_NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer_Shutdown)

@interface NetI2pUtilSimpleTimer_TimedEvent : NSObject

@end

@interface NetI2pUtilSimpleTimer_SimpleTimerRunner : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilSimpleTimer *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer:(NetI2pUtilSimpleTimer *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer_SimpleTimerRunner)

__attribute__((unused)) static void NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer_SimpleTimerRunner *self, NetI2pUtilSimpleTimer *outer$);

__attribute__((unused)) static NetI2pUtilSimpleTimer_SimpleTimerRunner *new_NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer_SimpleTimerRunner *create_NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer_SimpleTimerRunner)

@implementation NetI2pUtilSimpleTimer

+ (NetI2pUtilSimpleTimer *)getInstance {
  return NetI2pUtilSimpleTimer_getInstance();
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name {
  NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(self, context, name);
  return self;
}

- (void)removeSimpleTimer {
  @synchronized(_events_) {
    [((NetI2pUtilSimpleStore *) nil_chk(runn_)) setAnswerWithBoolean:false];
    [((JavaUtilTreeMap *) nil_chk(_events_)) clear];
    [((id<JavaUtilMap>) nil_chk(_eventTimes_)) clear];
    [_events_ java_notifyAll];
  }
  @synchronized(_readyEvents_) {
    [((id<JavaUtilList>) nil_chk(_readyEvents_)) clear];
    [_readyEvents_ java_notifyAll];
  }
}

- (void)rescheduleWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                              withLong:(jlong)timeoutMs {
  [self addEventWithNetI2pUtilSimpleTimer_TimedEvent:event withLong:timeoutMs withBoolean:false];
}

- (void)addEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                            withLong:(jlong)timeoutMs {
  [self addEventWithNetI2pUtilSimpleTimer_TimedEvent:event withLong:timeoutMs withBoolean:true];
}

- (void)addEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                            withLong:(jlong)timeoutMs
                                         withBoolean:(jboolean)useEarliestTime {
  jint totalEvents = 0;
  jlong now = JavaLangSystem_currentTimeMillis();
  jlong eventTime = now + timeoutMs;
  JavaLangLong *time = JavaLangLong_valueOfWithLong_(eventTime);
  @synchronized(_events_) {
    JavaLangLong *oldTime = [((id<JavaUtilMap>) nil_chk(_eventTimes_)) getWithId:event];
    if (oldTime != nil) {
      if (useEarliestTime) {
        if ([oldTime longLongValue] < eventTime) {
          [((JavaUtilTreeMap *) nil_chk(_events_)) java_notifyAll];
          return;
        }
        else {
          [((JavaUtilTreeMap *) nil_chk(_events_)) removeWithId:oldTime];
        }
      }
      else {
        if ([oldTime longLongValue] > eventTime) {
          [((JavaUtilTreeMap *) nil_chk(_events_)) java_notifyAll];
          return;
        }
        else {
          [((JavaUtilTreeMap *) nil_chk(_events_)) removeWithId:oldTime];
        }
      }
    }
    while ([((JavaUtilTreeMap *) nil_chk(_events_)) containsKeyWithId:time]) time = JreRetainedLocalValue(JavaLangLong_valueOfWithLong_([time longLongValue] + 1));
    [_events_ putWithId:time withId:event];
    [_eventTimes_ putWithId:event withId:time];
    if (([_events_ size] != [_eventTimes_ size])) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$I$I", @"Skewed events: ", [_events_ size], @" for ", [_eventTimes_ size])];
      for (id<NetI2pUtilSimpleTimer_TimedEvent> __strong evt in nil_chk([_eventTimes_ keySet])) {
        JavaLangLong *when = [_eventTimes_ getWithId:evt];
        id<NetI2pUtilSimpleTimer_TimedEvent> cur = [_events_ getWithId:when];
        if (cur != evt) {
          [_log_ errorWithNSString:JreStrcat("$@$@$@", @"event ", evt, @" @ ", when, @": ", cur)];
        }
      }
    }
    totalEvents = [_events_ size];
    [_events_ java_notifyAll];
  }
  if ([time longLongValue] > eventTime + 100) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$J$IC", @"Lots of timer congestion, had to push ", event, @" back ", ([time longLongValue] - eventTime), @"ms (# events: ", totalEvents, ')')];
  }
  jlong timeToAdd = JavaLangSystem_currentTimeMillis() - now;
  if (timeToAdd > 50) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$J$I$", @"timer contention: took ", timeToAdd, @"ms to add a job with ", totalEvents, @" queued")];
  }
}

- (jboolean)removeEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)evt {
  if (evt == nil) return false;
  @synchronized(_events_) {
    JavaLangLong *when = [((id<JavaUtilMap>) nil_chk(_eventTimes_)) removeWithId:evt];
    if (when != nil) [((JavaUtilTreeMap *) nil_chk(_events_)) removeWithId:when];
    return nil != when;
  }
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_events_);
  RELEASE_(_eventTimes_);
  RELEASE_(_readyEvents_);
  RELEASE_(runn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilSimpleTimer;", 0x9, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, 2, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withNSString:);
  methods[3].selector = @selector(removeSimpleTimer);
  methods[4].selector = @selector(rescheduleWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[5].selector = @selector(addEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[6].selector = @selector(addEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:withBoolean:);
  methods[7].selector = @selector(removeEventWithNetI2pUtilSimpleTimer_TimedEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_events_", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "_eventTimes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "_readyEvents_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "runn_", "LNetI2pUtilSimpleStore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MIN_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleTimer_MIN_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleTimer_MAX_THREADS, 0x1a, -1, -1, -1, -1 },
    { "_occurredTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_occurredEventCount_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&NetI2pUtilSimpleTimer__Annotations$0, "LNetI2pI2PAppContext;", (void *)&NetI2pUtilSimpleTimer__Annotations$1, "LNetI2pI2PAppContext;LNSString;", (void *)&NetI2pUtilSimpleTimer__Annotations$2, "reschedule", "LNetI2pUtilSimpleTimer_TimedEvent;J", "addEvent", "LNetI2pUtilSimpleTimer_TimedEvent;JZ", "removeEvent", "LNetI2pUtilSimpleTimer_TimedEvent;", "Ljava/util/TreeMap<Ljava/lang/Long;Lnet/i2p/util/SimpleTimer$TimedEvent;>;", "Ljava/util/Map<Lnet/i2p/util/SimpleTimer$TimedEvent;Ljava/lang/Long;>;", "Ljava/util/List<Lnet/i2p/util/SimpleTimer$TimedEvent;>;", "LNetI2pUtilSimpleTimer_Shutdown;LNetI2pUtilSimpleTimer_TimedEvent;LNetI2pUtilSimpleTimer_SimpleTimerRunner;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer = { "SimpleTimer", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 8, 9, -1, 14, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer;
}

@end

NetI2pUtilSimpleTimer *NetI2pUtilSimpleTimer_getInstance() {
  NetI2pUtilSimpleTimer_initialize();
  return [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) simpleTimer];
}

void NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_(NetI2pUtilSimpleTimer *self, NetI2pI2PAppContext *context) {
  NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(self, context, @"SimpleTimer");
}

NetI2pUtilSimpleTimer *new_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilSimpleTimer *create_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pUtilSimpleTimer *self, NetI2pI2PAppContext *context, NSString *name) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->runn_, new_NetI2pUtilSimpleStore_initWithBoolean_(true));
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pUtilSimpleTimer_class_()]);
  JreStrongAssignAndConsume(&self->_events_, new_JavaUtilTreeMap_init());
  JreStrongAssignAndConsume(&self->_eventTimes_, new_JavaUtilHashMap_initWithInt_(256));
  JreStrongAssignAndConsume(&self->_readyEvents_, new_JavaUtilArrayList_initWithInt_(4));
  NetI2pUtilI2PThread *runner = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(self));
  [runner setNameWithNSString:name];
  [runner setDaemonWithBoolean:true];
  [runner start];
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  jint threads = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pUtilSimpleTimer_MIN_THREADS, JavaLangMath_minWithLong_withLong_(NetI2pUtilSimpleTimer_MAX_THREADS, 1 + (maxMemory / (32 * 1024 * 1024))));
  for (jint i = 1; i <= threads; i++) {
    NetI2pUtilI2PThread *executor = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(create_NetI2pUtilExecutor_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_(context, self->_log_, self->_readyEvents_, self->runn_));
    [executor setNameWithNSString:JreStrcat("$$ICI", name, @"Executor ", i, '/', threads)];
    [executor setDaemonWithBoolean:true];
    [executor start];
  }
  [context addShutdownTaskWithJavaLangRunnable:create_NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(self)];
}

NetI2pUtilSimpleTimer *new_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

NetI2pUtilSimpleTimer *create_NetI2pUtilSimpleTimer_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilSimpleTimer__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer)

@implementation NetI2pUtilSimpleTimer_Shutdown

- (instancetype)initWithNetI2pUtilSimpleTimer:(NetI2pUtilSimpleTimer *)outer$ {
  NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ removeSimpleTimer];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleTimer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer_Shutdown = { "Shutdown", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer_Shutdown;
}

@end

void NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer_Shutdown *self, NetI2pUtilSimpleTimer *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleTimer_Shutdown *new_NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer_Shutdown, initWithNetI2pUtilSimpleTimer_, outer$)
}

NetI2pUtilSimpleTimer_Shutdown *create_NetI2pUtilSimpleTimer_Shutdown_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer_Shutdown, initWithNetI2pUtilSimpleTimer_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer_Shutdown)

@implementation NetI2pUtilSimpleTimer_TimedEvent

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer_TimedEvent = { "TimedEvent", "net.i2p.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer_TimedEvent;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer_TimedEvent)

@implementation NetI2pUtilSimpleTimer_SimpleTimerRunner

- (instancetype)initWithNetI2pUtilSimpleTimer:(NetI2pUtilSimpleTimer *)outer$ {
  NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(self, outer$);
  return self;
}

- (void)run {
  id<JavaUtilList> eventsToFire = create_JavaUtilArrayList_initWithInt_(1);
  while ([((NetI2pUtilSimpleStore *) nil_chk(this$0_->runn_)) getAnswer]) {
    @try {
      @synchronized(this$0_->_events_) {
        jlong now = JavaLangSystem_currentTimeMillis();
        jlong nextEventDelay = -1;
        id nextEvent = nil;
        while ([((NetI2pUtilSimpleStore *) nil_chk(this$0_->runn_)) getAnswer]) {
          if ([((JavaUtilTreeMap *) nil_chk(this$0_->_events_)) isEmpty]) {
            break;
          }
          JavaLangLong *when = [this$0_->_events_ firstKey];
          if ([((JavaLangLong *) nil_chk(when)) longLongValue] <= now) {
            id<NetI2pUtilSimpleTimer_TimedEvent> evt = [this$0_->_events_ removeWithId:when];
            if (evt != nil) {
              [((id<JavaUtilMap>) nil_chk(this$0_->_eventTimes_)) removeWithId:evt];
              [eventsToFire addWithId:evt];
            }
          }
          else {
            nextEventDelay = [when longLongValue] - now;
            nextEvent = [this$0_->_events_ getWithId:when];
            break;
          }
        }
        if ([eventsToFire isEmpty]) {
          if (nextEventDelay != -1) {
            if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$J$@", @"Next event in ", nextEventDelay, @": ", nextEvent)];
            [((JavaUtilTreeMap *) nil_chk(this$0_->_events_)) java_waitWithLong:nextEventDelay];
          }
          else {
            [((JavaUtilTreeMap *) nil_chk(this$0_->_events_)) java_wait];
          }
        }
      }
    }
    @catch (JavaLangThreadDeath *td) {
      return;
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @catch (JavaLangThrowable *t) {
      if (this$0_->_log_ != nil) {
        [this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:@"Uncaught exception in the SimpleTimer!" withJavaLangThrowable:t];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Uncaught exception in SimpleTimer"];
        [t printStackTrace];
      }
    }
    jlong now = JavaLangSystem_currentTimeMillis();
    now = now - (now % 1000);
    @synchronized(this$0_->_readyEvents_) {
      for (jint i = 0; i < [eventsToFire size]; i++) [((id<JavaUtilList>) nil_chk(this$0_->_readyEvents_)) addWithId:[eventsToFire getWithInt:i]];
      [((id<JavaUtilList>) nil_chk(this$0_->_readyEvents_)) java_notifyAll];
    }
    if (this$0_->_occurredTime_ == now) {
      this$0_->_occurredEventCount_ += [eventsToFire size];
    }
    else {
      this$0_->_occurredTime_ = now;
      if (this$0_->_occurredEventCount_ > 2500) {
        JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
        [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Too many simpleTimerJobs ("])) appendWithLong:this$0_->_occurredEventCount_];
        [buf appendWithNSString:@") in a second!"];
        [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) logWithInt:NetI2pUtilLog_WARN withNSString:[buf description]];
      }
      this$0_->_occurredEventCount_ = 0;
    }
    [eventsToFire clear];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleTimer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer_SimpleTimerRunner = { "SimpleTimerRunner", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer_SimpleTimerRunner;
}

@end

void NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer_SimpleTimerRunner *self, NetI2pUtilSimpleTimer *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleTimer_SimpleTimerRunner *new_NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer_SimpleTimerRunner, initWithNetI2pUtilSimpleTimer_, outer$)
}

NetI2pUtilSimpleTimer_SimpleTimerRunner *create_NetI2pUtilSimpleTimer_SimpleTimerRunner_initWithNetI2pUtilSimpleTimer_(NetI2pUtilSimpleTimer *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer_SimpleTimerRunner, initWithNetI2pUtilSimpleTimer_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer_SimpleTimerRunner)
