//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LogManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/text/DateFormat.h"
#include "java/text/DecimalFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConcurrentHashSet.h"
#include "net/i2p/util/FileLogWriter.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogConsoleBuffer.h"
#include "net/i2p/util/LogLimit.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/LogRecord.h"
#include "net/i2p/util/LogWriter.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilLogManager () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  jlong _configLastRead_;
  JavaIoFile *_locationFile_;
  JavaUtilConcurrentLinkedBlockingQueue *_records_;
  id<JavaUtilSet> _limits_;
  JavaUtilConcurrentConcurrentHashMap *_logs_;
  NetI2pUtilLogWriter *_writer_;
  jint _defaultLimit_;
  IOSCharArray *_format_;
  JavaTextSimpleDateFormat *_dateFormat_;
  NSString *_dateFormatPattern_;
  NSString *_baseLogfilename_;
  jint _fileSize_;
  jint _rotationLimit_;
  jint _onScreenLimit_;
  jboolean _displayOnScreen_;
  jint _consoleBufferSize_;
  NetI2pUtilLogConsoleBuffer *_consoleBuffer_;
  jint _logBufferSize_;
  jboolean _dropOnOverflow_;
  jboolean _dropDuplicates_;
  JavaUtilConcurrentAtomicAtomicLong *_droppedRecords_;
  jint _flushInterval_;
  jboolean _alreadyNoticedMissingConfig_;
}

- (void)startLogWriter;

- (void)loadConfig;

- (void)parseConfigWithJavaUtilProperties:(JavaUtilProperties *)config;

- (void)parseLimitsWithJavaUtilProperties:(JavaUtilProperties *)config;

- (void)parseLimitsWithJavaUtilProperties:(JavaUtilProperties *)config
                             withNSString:(NSString *)recordPrefix;

- (void)updateLimits;

- (void)updateLimitWithNetI2pUtilLog:(NetI2pUtilLog *)log;

- (id<JavaUtilList>)getLimitsWithNetI2pUtilLog:(NetI2pUtilLog *)log;

- (JavaUtilProperties *)createConfig;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _locationFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _records_, JavaUtilConcurrentLinkedBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _limits_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _logs_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _writer_, NetI2pUtilLogWriter *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _format_, IOSCharArray *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _dateFormat_, JavaTextSimpleDateFormat *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _dateFormatPattern_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _baseLogfilename_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _consoleBuffer_, NetI2pUtilLogConsoleBuffer *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogManager, _droppedRecords_, JavaUtilConcurrentAtomicAtomicLong *)

inline NSString *NetI2pUtilLogManager_get_PROP_LOG_BUFFER_SIZE(void);
static NSString *NetI2pUtilLogManager_PROP_LOG_BUFFER_SIZE = @"logger.logBufferSize";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogManager, PROP_LOG_BUFFER_SIZE, NSString *)

inline NSString *NetI2pUtilLogManager_get_PROP_DROP(void);
static NSString *NetI2pUtilLogManager_PROP_DROP = @"logger.dropOnOverflow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogManager, PROP_DROP, NSString *)

inline NSString *NetI2pUtilLogManager_get_PROP_DUP(void);
static NSString *NetI2pUtilLogManager_PROP_DUP = @"logger.dropDuplicates";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogManager, PROP_DUP, NSString *)

inline NSString *NetI2pUtilLogManager_get_PROP_FLUSH(void);
static NSString *NetI2pUtilLogManager_PROP_FLUSH = @"logger.flushInterval";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogManager, PROP_FLUSH, NSString *)

inline jint NetI2pUtilLogManager_get_MAX_BUFFER(void);
#define NetI2pUtilLogManager_MAX_BUFFER 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogManager, MAX_BUFFER, jint)

inline JavaUtilConcurrentAtomicAtomicInteger *NetI2pUtilLogManager_get___id(void);
static JavaUtilConcurrentAtomicAtomicInteger *NetI2pUtilLogManager___id;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogManager, __id, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void NetI2pUtilLogManager_startLogWriter(NetI2pUtilLogManager *self);

__attribute__((unused)) static void NetI2pUtilLogManager_loadConfig(NetI2pUtilLogManager *self);

__attribute__((unused)) static void NetI2pUtilLogManager_parseConfigWithJavaUtilProperties_(NetI2pUtilLogManager *self, JavaUtilProperties *config);

__attribute__((unused)) static void NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_(NetI2pUtilLogManager *self, JavaUtilProperties *config);

__attribute__((unused)) static void NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_withNSString_(NetI2pUtilLogManager *self, JavaUtilProperties *config, NSString *recordPrefix);

__attribute__((unused)) static void NetI2pUtilLogManager_updateLimits(NetI2pUtilLogManager *self);

__attribute__((unused)) static void NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(NetI2pUtilLogManager *self, NetI2pUtilLog *log);

__attribute__((unused)) static id<JavaUtilList> NetI2pUtilLogManager_getLimitsWithNetI2pUtilLog_(NetI2pUtilLogManager *self, NetI2pUtilLog *log);

__attribute__((unused)) static JavaUtilProperties *NetI2pUtilLogManager_createConfig(NetI2pUtilLogManager *self);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilLogManager__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilLogManager__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilLogManager__Annotations$2(void);

@interface NetI2pUtilLogManager_ShutdownHook : NetI2pUtilI2PAppThread {
 @public
  NetI2pUtilLogManager *this$0_;
  jint _id_;
}

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilLogManager_ShutdownHook)

__attribute__((unused)) static void NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager_ShutdownHook *self, NetI2pUtilLogManager *outer$);

__attribute__((unused)) static NetI2pUtilLogManager_ShutdownHook *new_NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilLogManager_ShutdownHook *create_NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilLogManager_ShutdownHook)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilLogManager)

NSString *NetI2pUtilLogManager_CONFIG_LOCATION_PROP = @"loggerConfigLocation";
NSString *NetI2pUtilLogManager_FILENAME_OVERRIDE_PROP = @"loggerFilenameOverride";
NSString *NetI2pUtilLogManager_CONFIG_LOCATION_DEFAULT = @"logger.config";
NSString *NetI2pUtilLogManager_PROP_FORMAT = @"logger.format";
NSString *NetI2pUtilLogManager_PROP_DATEFORMAT = @"logger.dateFormat";
NSString *NetI2pUtilLogManager_PROP_FILENAME = @"logger.logFileName";
NSString *NetI2pUtilLogManager_PROP_FILESIZE = @"logger.logFileSize";
NSString *NetI2pUtilLogManager_PROP_ROTATIONLIMIT = @"logger.logRotationLimit";
NSString *NetI2pUtilLogManager_PROP_DISPLAYONSCREEN = @"logger.displayOnScreen";
NSString *NetI2pUtilLogManager_PROP_CONSOLEBUFFERSIZE = @"logger.consoleBufferSize";
NSString *NetI2pUtilLogManager_PROP_DISPLAYONSCREENLEVEL = @"logger.minimumOnScreenLevel";
NSString *NetI2pUtilLogManager_PROP_DEFAULTLEVEL = @"logger.defaultLevel";
NSString *NetI2pUtilLogManager_PROP_RECORD_PREFIX = @"logger.record.";
NSString *NetI2pUtilLogManager_DEFAULT_FORMAT = @"d p [t] c: m";
NSString *NetI2pUtilLogManager_DEFAULT_DATEFORMAT = @"";
NSString *NetI2pUtilLogManager_DEFAULT_FILENAME = @"logs/log-@.txt";
NSString *NetI2pUtilLogManager_DEFAULT_FILESIZE = @"10m";
NSString *NetI2pUtilLogManager_DEFAULT_ROTATIONLIMIT = @"2";
NSString *NetI2pUtilLogManager_DEFAULT_DEFAULTLEVEL = @"ERROR";
NSString *NetI2pUtilLogManager_DEFAULT_ONSCREENLEVEL = @"CRIT";

@implementation NetI2pUtilLogManager

+ (NSString *)CONFIG_LOCATION_PROP {
  return NetI2pUtilLogManager_CONFIG_LOCATION_PROP;
}

+ (NSString *)FILENAME_OVERRIDE_PROP {
  return NetI2pUtilLogManager_FILENAME_OVERRIDE_PROP;
}

+ (NSString *)CONFIG_LOCATION_DEFAULT {
  return NetI2pUtilLogManager_CONFIG_LOCATION_DEFAULT;
}

+ (jchar)DATE {
  return NetI2pUtilLogManager_DATE;
}

+ (jchar)CLASS {
  return NetI2pUtilLogManager_CLASS;
}

+ (jchar)THREAD {
  return NetI2pUtilLogManager_THREAD;
}

+ (jchar)PRIORITY {
  return NetI2pUtilLogManager_PRIORITY;
}

+ (jchar)MESSAGE {
  return NetI2pUtilLogManager_MESSAGE;
}

+ (NSString *)PROP_FORMAT {
  return NetI2pUtilLogManager_PROP_FORMAT;
}

+ (NSString *)PROP_DATEFORMAT {
  return NetI2pUtilLogManager_PROP_DATEFORMAT;
}

+ (NSString *)PROP_FILENAME {
  return NetI2pUtilLogManager_PROP_FILENAME;
}

+ (NSString *)PROP_FILESIZE {
  return NetI2pUtilLogManager_PROP_FILESIZE;
}

+ (NSString *)PROP_ROTATIONLIMIT {
  return NetI2pUtilLogManager_PROP_ROTATIONLIMIT;
}

+ (NSString *)PROP_DISPLAYONSCREEN {
  return NetI2pUtilLogManager_PROP_DISPLAYONSCREEN;
}

+ (NSString *)PROP_CONSOLEBUFFERSIZE {
  return NetI2pUtilLogManager_PROP_CONSOLEBUFFERSIZE;
}

+ (NSString *)PROP_DISPLAYONSCREENLEVEL {
  return NetI2pUtilLogManager_PROP_DISPLAYONSCREENLEVEL;
}

+ (NSString *)PROP_DEFAULTLEVEL {
  return NetI2pUtilLogManager_PROP_DEFAULTLEVEL;
}

+ (NSString *)PROP_RECORD_PREFIX {
  return NetI2pUtilLogManager_PROP_RECORD_PREFIX;
}

+ (NSString *)DEFAULT_FORMAT {
  return NetI2pUtilLogManager_DEFAULT_FORMAT;
}

+ (NSString *)DEFAULT_DATEFORMAT {
  return NetI2pUtilLogManager_DEFAULT_DATEFORMAT;
}

+ (NSString *)DEFAULT_FILENAME {
  return NetI2pUtilLogManager_DEFAULT_FILENAME;
}

+ (NSString *)DEFAULT_FILESIZE {
  return NetI2pUtilLogManager_DEFAULT_FILESIZE;
}

+ (jboolean)DEFAULT_DISPLAYONSCREEN {
  return NetI2pUtilLogManager_DEFAULT_DISPLAYONSCREEN;
}

+ (jint)DEFAULT_CONSOLEBUFFERSIZE {
  return NetI2pUtilLogManager_DEFAULT_CONSOLEBUFFERSIZE;
}

+ (NSString *)DEFAULT_ROTATIONLIMIT {
  return NetI2pUtilLogManager_DEFAULT_ROTATIONLIMIT;
}

+ (NSString *)DEFAULT_DEFAULTLEVEL {
  return NetI2pUtilLogManager_DEFAULT_DEFAULTLEVEL;
}

+ (NSString *)DEFAULT_ONSCREENLEVEL {
  return NetI2pUtilLogManager_DEFAULT_ONSCREENLEVEL;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilLogManager_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)startLogWriter {
  NetI2pUtilLogManager_startLogWriter(self);
}

- (NetI2pUtilLog *)getLogWithIOSClass:(IOSClass *)cls {
  return [self getLogWithIOSClass:cls withNSString:nil];
}

- (NetI2pUtilLog *)getLogWithNSString:(NSString *)name {
  return [self getLogWithIOSClass:nil withNSString:name];
}

- (NetI2pUtilLog *)getLogWithIOSClass:(IOSClass *)cls
                         withNSString:(NSString *)name {
  NSString *scope = NetI2pUtilLog_getScopeWithNSString_withIOSClass_(name, cls);
  jboolean isNew = false;
  NetI2pUtilLog *rv = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_logs_)) getWithId:scope];
  if (rv == nil) {
    rv = create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, cls, name);
    NetI2pUtilLog *old = [_logs_ putIfAbsentWithId:scope withId:rv];
    isNew = (old == nil);
    if (!isNew) rv = old;
  }
  if (isNew) NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(self, rv);
  return rv;
}

- (id<JavaUtilList>)getLogs {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_logs_)) values]);
}

- (void)addLogWithNetI2pUtilLog:(NetI2pUtilLog *)log {
  NetI2pUtilLog *old = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_logs_)) putIfAbsentWithId:[((NetI2pUtilLog *) nil_chk(log)) getScope] withId:log];
  NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(self, log);
  if (old != nil) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Duplicate log for ", [log getName])];
  }
}

- (NetI2pUtilLogConsoleBuffer *)getBuffer {
  return _consoleBuffer_;
}

- (void)setDisplayOnScreenWithBoolean:(jboolean)yes {
  _displayOnScreen_ = yes;
}

- (jboolean)displayOnScreen {
  return _displayOnScreen_;
}

- (jint)getDisplayOnScreenLevel {
  return _onScreenLimit_;
}

- (void)setDisplayOnScreenLevelWithInt:(jint)level {
  _onScreenLimit_ = level;
}

- (jint)getConsoleBufferSize {
  return _consoleBufferSize_;
}

- (void)setConsoleBufferSizeWithInt:(jint)numRecords {
  _consoleBufferSize_ = numRecords;
}

- (void)setConfigWithNSString:(NSString *)filename {
  JreStrongAssignAndConsume(&_locationFile_, new_JavaIoFile_initWithNSString_(filename));
  if (![_locationFile_ isAbsolute]) JreStrongAssignAndConsume(&_locationFile_, new_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(_context_)) getConfigDir], filename));
  NetI2pUtilLogManager_loadConfig(self);
}

- (NSString *)currentFile {
  if (_writer_ == nil) return (@"No log file created yet");
  return [_writer_ currentFile];
}

- (void)addRecordWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)record {
  if ((![((NetI2pI2PAppContext *) nil_chk(_context_)) isRouterContext]) && _writer_ == nil) NetI2pUtilLogManager_startLogWriter(self);
  jboolean success = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_records_)) offerWithId:record];
  if (!success) {
    if (_dropOnOverflow_) {
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(_droppedRecords_)) incrementAndGet];
      return;
    }
    @synchronized(_writer_) {
      [((NetI2pUtilLogWriter *) nil_chk(_writer_)) java_notifyAll];
    }
    @try {
      [_records_ putWithId:record];
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  else if (_flushInterval_ <= 0) {
    @synchronized(_writer_) {
      [((NetI2pUtilLogWriter *) nil_chk(_writer_)) java_notifyAll];
    }
  }
}

- (void)rereadConfig {
  NetI2pUtilLogManager_loadConfig(self);
}

- (jboolean)shouldDropDuplicates {
  return _dropDuplicates_;
}

- (void)loadConfig {
  NetI2pUtilLogManager_loadConfig(self);
}

- (void)parseConfigWithJavaUtilProperties:(JavaUtilProperties *)config {
  NetI2pUtilLogManager_parseConfigWithJavaUtilProperties_(self, config);
}

- (void)parseLimitsWithJavaUtilProperties:(JavaUtilProperties *)config {
  NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_(self, config);
}

- (void)parseLimitsWithJavaUtilProperties:(JavaUtilProperties *)config
                             withNSString:(NSString *)recordPrefix {
  NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_withNSString_(self, config, recordPrefix);
}

- (void)setLimitsWithJavaUtilProperties:(JavaUtilProperties *)limits {
  NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_withNSString_(self, limits, nil);
}

- (jboolean)setDateFormatWithNSString:(NSString *)format {
  if (format == nil) format = @"";
  if ([format isEqual:_dateFormatPattern_] && _dateFormat_ != nil) return true;
  @try {
    JavaTextSimpleDateFormat *fmt = (JavaTextSimpleDateFormat *) cast_chk(JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(JavaTextDateFormat_SHORT, JavaTextDateFormat_MEDIUM), [JavaTextSimpleDateFormat class]);
    if (![format isEqual:@""]) [((JavaTextSimpleDateFormat *) nil_chk(fmt)) applyPatternWithNSString:format];
    [((JavaTextSimpleDateFormat *) nil_chk(fmt)) setTimeZoneWithJavaUtilTimeZone:NetI2pUtilSystemVersion_getSystemTimeZoneWithNetI2pI2PAppContext_(_context_)];
    JreStrongAssign(&_dateFormatPattern_, format);
    JreStrongAssign(&_dateFormat_, fmt);
    return true;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    return false;
  }
}

- (void)setFileSizeWithInt:(jint)numBytes {
  if (numBytes > 0) _fileSize_ = numBytes;
}

- (NSString *)getDefaultLimit {
  return NetI2pUtilLog_toLevelStringWithInt_(_defaultLimit_);
}

- (void)setDefaultLimitWithNSString:(NSString *)lim {
  _defaultLimit_ = NetI2pUtilLog_getLevelWithNSString_(lim);
  NetI2pUtilLogManager_updateLimits(self);
}

- (JavaUtilProperties *)getLimits {
  JavaUtilProperties *rv = create_JavaUtilProperties_init();
  for (NetI2pUtilLogLimit * __strong lim in nil_chk(_limits_)) {
    [rv setPropertyWithNSString:[((NetI2pUtilLogLimit *) nil_chk(lim)) getRootName] withNSString:NetI2pUtilLog_toLevelStringWithInt_([lim getLimit])];
  }
  return rv;
}

+ (jint)getFileSizeWithNSString:(NSString *)size {
  return NetI2pUtilLogManager_getFileSizeWithNSString_(size);
}

- (void)updateLimits {
  NetI2pUtilLogManager_updateLimits(self);
}

- (void)updateLimitWithNetI2pUtilLog:(NetI2pUtilLog *)log {
  NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(self, log);
}

- (id<JavaUtilList>)getLimitsWithNetI2pUtilLog:(NetI2pUtilLog *)log {
  return NetI2pUtilLogManager_getLimitsWithNetI2pUtilLog_(self, log);
}

- (NSString *)getBaseLogfilename {
  return _baseLogfilename_;
}

- (void)setBaseLogfilenameWithNSString:(NSString *)filenamePattern {
  JreStrongAssign(&_baseLogfilename_, [((NSString *) nil_chk(filenamePattern)) java_replace:'#' withChar:'@']);
}

- (jint)getFileSize {
  return _fileSize_;
}

- (jint)getRotationLimit {
  return _rotationLimit_;
}

- (jboolean)saveConfig {
  JavaUtilProperties *props = NetI2pUtilLogManager_createConfig(self);
  @try {
    NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(props, _locationFile_);
    return true;
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk([self getLogWithIOSClass:NetI2pUtilLogManager_class_()])) errorWithNSString:@"Error saving the config" withJavaLangThrowable:ioe];
    return false;
  }
}

- (JavaUtilProperties *)createConfig {
  return NetI2pUtilLogManager_createConfig(self);
}

- (id<JavaUtilQueue>)getQueue {
  return _records_;
}

- (IOSCharArray *)getFormat {
  return _format_;
}

- (void)setFormatWithCharArray:(IOSCharArray *)fmt {
  JreStrongAssign(&_format_, fmt);
}

- (JavaTextSimpleDateFormat *)getDateFormat {
  return _dateFormat_;
}

- (NSString *)getDateFormatPattern {
  return _dateFormatPattern_;
}

- (void)flush {
  if (_writer_ != nil) {
    jint i = 50;
    while ((![((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_records_)) isEmpty]) && i-- > 0) {
      @synchronized(_writer_) {
        [((NetI2pUtilLogWriter *) nil_chk(_writer_)) java_notifyAll];
      }
      @try {
        JavaLangThread_sleepWithLong_(5);
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
  }
}

- (void)shutdown {
  if (_writer_ != nil) {
    [self flush];
    [((NetI2pUtilLogWriter *) nil_chk(_writer_)) flushRecordsWithBoolean:false];
    [((NetI2pUtilLogWriter *) nil_chk(_writer_)) stopWriting];
    @synchronized(_writer_) {
      [((NetI2pUtilLogWriter *) nil_chk(_writer_)) java_notifyAll];
    }
  }
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_records_)) clear];
  [((id<JavaUtilSet>) nil_chk(_limits_)) clear];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_logs_)) clear];
  [((NetI2pUtilLogConsoleBuffer *) nil_chk(_consoleBuffer_)) clear];
}

- (NetI2pI2PAppContext *)getContext {
  return _context_;
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_locationFile_);
  RELEASE_(_records_);
  RELEASE_(_limits_);
  RELEASE_(_logs_);
  RELEASE_(_writer_);
  RELEASE_(_format_);
  RELEASE_(_dateFormat_);
  RELEASE_(_dateFormatPattern_);
  RELEASE_(_baseLogfilename_);
  RELEASE_(_consoleBuffer_);
  RELEASE_(_droppedRecords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilLog;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNetI2pUtilLog;", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilLog;", 0x1, 1, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilLogConsoleBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, 12, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, 15, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, 17, -1 },
    { NULL, "V", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 29, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 31, 9, -1, 32, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilQueue;", 0x0, -1, -1, -1, 34, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "LJavaTextSimpleDateFormat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pI2PAppContext;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(startLogWriter);
  methods[2].selector = @selector(getLogWithIOSClass:);
  methods[3].selector = @selector(getLogWithNSString:);
  methods[4].selector = @selector(getLogWithIOSClass:withNSString:);
  methods[5].selector = @selector(getLogs);
  methods[6].selector = @selector(addLogWithNetI2pUtilLog:);
  methods[7].selector = @selector(getBuffer);
  methods[8].selector = @selector(setDisplayOnScreenWithBoolean:);
  methods[9].selector = @selector(displayOnScreen);
  methods[10].selector = @selector(getDisplayOnScreenLevel);
  methods[11].selector = @selector(setDisplayOnScreenLevelWithInt:);
  methods[12].selector = @selector(getConsoleBufferSize);
  methods[13].selector = @selector(setConsoleBufferSizeWithInt:);
  methods[14].selector = @selector(setConfigWithNSString:);
  methods[15].selector = @selector(currentFile);
  methods[16].selector = @selector(addRecordWithNetI2pUtilLogRecord:);
  methods[17].selector = @selector(rereadConfig);
  methods[18].selector = @selector(shouldDropDuplicates);
  methods[19].selector = @selector(loadConfig);
  methods[20].selector = @selector(parseConfigWithJavaUtilProperties:);
  methods[21].selector = @selector(parseLimitsWithJavaUtilProperties:);
  methods[22].selector = @selector(parseLimitsWithJavaUtilProperties:withNSString:);
  methods[23].selector = @selector(setLimitsWithJavaUtilProperties:);
  methods[24].selector = @selector(setDateFormatWithNSString:);
  methods[25].selector = @selector(setFileSizeWithInt:);
  methods[26].selector = @selector(getDefaultLimit);
  methods[27].selector = @selector(setDefaultLimitWithNSString:);
  methods[28].selector = @selector(getLimits);
  methods[29].selector = @selector(getFileSizeWithNSString:);
  methods[30].selector = @selector(updateLimits);
  methods[31].selector = @selector(updateLimitWithNetI2pUtilLog:);
  methods[32].selector = @selector(getLimitsWithNetI2pUtilLog:);
  methods[33].selector = @selector(getBaseLogfilename);
  methods[34].selector = @selector(setBaseLogfilenameWithNSString:);
  methods[35].selector = @selector(getFileSize);
  methods[36].selector = @selector(getRotationLimit);
  methods[37].selector = @selector(saveConfig);
  methods[38].selector = @selector(createConfig);
  methods[39].selector = @selector(getQueue);
  methods[40].selector = @selector(getFormat);
  methods[41].selector = @selector(setFormatWithCharArray:);
  methods[42].selector = @selector(getDateFormat);
  methods[43].selector = @selector(getDateFormatPattern);
  methods[44].selector = @selector(flush);
  methods[45].selector = @selector(shutdown);
  methods[46].selector = @selector(getContext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONFIG_LOCATION_PROP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "FILENAME_OVERRIDE_PROP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "CONFIG_LOCATION_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "DATE", "C", .constantValue.asUnichar = NetI2pUtilLogManager_DATE, 0x19, -1, -1, -1, -1 },
    { "CLASS", "C", .constantValue.asUnichar = NetI2pUtilLogManager_CLASS, 0x19, -1, -1, -1, -1 },
    { "THREAD", "C", .constantValue.asUnichar = NetI2pUtilLogManager_THREAD, 0x19, -1, -1, -1, -1 },
    { "PRIORITY", "C", .constantValue.asUnichar = NetI2pUtilLogManager_PRIORITY, 0x19, -1, -1, -1, -1 },
    { "MESSAGE", "C", .constantValue.asUnichar = NetI2pUtilLogManager_MESSAGE, 0x19, -1, -1, -1, -1 },
    { "PROP_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "PROP_DATEFORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "PROP_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "PROP_FILESIZE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "PROP_ROTATIONLIMIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "PROP_DISPLAYONSCREEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "PROP_CONSOLEBUFFERSIZE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "PROP_DISPLAYONSCREENLEVEL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "PROP_DEFAULTLEVEL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "PROP_LOG_BUFFER_SIZE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "PROP_DROP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "PROP_DUP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "PROP_FLUSH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "PROP_RECORD_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "DEFAULT_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "DEFAULT_DATEFORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "DEFAULT_FILENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "DEFAULT_FILESIZE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "DEFAULT_DISPLAYONSCREEN", "Z", .constantValue.asBOOL = NetI2pUtilLogManager_DEFAULT_DISPLAYONSCREEN, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_CONSOLEBUFFERSIZE", "I", .constantValue.asInt = NetI2pUtilLogManager_DEFAULT_CONSOLEBUFFERSIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_ROTATIONLIMIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "DEFAULT_DEFAULTLEVEL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "DEFAULT_ONSCREENLEVEL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_configLastRead_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_locationFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_BUFFER", "I", .constantValue.asInt = NetI2pUtilLogManager_MAX_BUFFER, 0x1a, -1, -1, -1, -1 },
    { "_records_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 61, -1 },
    { "_limits_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 62, -1 },
    { "_logs_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 63, -1 },
    { "_writer_", "LNetI2pUtilLogWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_defaultLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_format_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dateFormat_", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dateFormatPattern_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_baseLogfilename_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fileSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rotationLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_onScreenLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_displayOnScreen_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consoleBufferSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_consoleBuffer_", "LNetI2pUtilLogConsoleBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_logBufferSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dropOnOverflow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dropDuplicates_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_droppedRecords_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_flushInterval_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_alreadyNoticedMissingConfig_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "__id", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "getLog", "LIOSClass;", "(Ljava/lang/Class<*>;)Lnet/i2p/util/Log;", "LNSString;", "LIOSClass;LNSString;", "(Ljava/lang/Class<*>;Ljava/lang/String;)Lnet/i2p/util/Log;", "()Ljava/util/List<Lnet/i2p/util/Log;>;", "addLog", "LNetI2pUtilLog;", "setDisplayOnScreen", "Z", (void *)&NetI2pUtilLogManager__Annotations$0, "setDisplayOnScreenLevel", "I", (void *)&NetI2pUtilLogManager__Annotations$1, "setConsoleBufferSize", (void *)&NetI2pUtilLogManager__Annotations$2, "setConfig", "addRecord", "LNetI2pUtilLogRecord;", "parseConfig", "LJavaUtilProperties;", "parseLimits", "LJavaUtilProperties;LNSString;", "setLimits", "setDateFormat", "setFileSize", "setDefaultLimit", "getFileSize", "updateLimit", "getLimits", "(Lnet/i2p/util/Log;)Ljava/util/List<Lnet/i2p/util/LogLimit;>;", "setBaseLogfilename", "()Ljava/util/Queue<Lnet/i2p/util/LogRecord;>;", "setFormat", "[C", &NetI2pUtilLogManager_CONFIG_LOCATION_PROP, &NetI2pUtilLogManager_FILENAME_OVERRIDE_PROP, &NetI2pUtilLogManager_CONFIG_LOCATION_DEFAULT, &NetI2pUtilLogManager_PROP_FORMAT, &NetI2pUtilLogManager_PROP_DATEFORMAT, &NetI2pUtilLogManager_PROP_FILENAME, &NetI2pUtilLogManager_PROP_FILESIZE, &NetI2pUtilLogManager_PROP_ROTATIONLIMIT, &NetI2pUtilLogManager_PROP_DISPLAYONSCREEN, &NetI2pUtilLogManager_PROP_CONSOLEBUFFERSIZE, &NetI2pUtilLogManager_PROP_DISPLAYONSCREENLEVEL, &NetI2pUtilLogManager_PROP_DEFAULTLEVEL, &NetI2pUtilLogManager_PROP_LOG_BUFFER_SIZE, &NetI2pUtilLogManager_PROP_DROP, &NetI2pUtilLogManager_PROP_DUP, &NetI2pUtilLogManager_PROP_FLUSH, &NetI2pUtilLogManager_PROP_RECORD_PREFIX, &NetI2pUtilLogManager_DEFAULT_FORMAT, &NetI2pUtilLogManager_DEFAULT_DATEFORMAT, &NetI2pUtilLogManager_DEFAULT_FILENAME, &NetI2pUtilLogManager_DEFAULT_FILESIZE, &NetI2pUtilLogManager_DEFAULT_ROTATIONLIMIT, &NetI2pUtilLogManager_DEFAULT_DEFAULTLEVEL, &NetI2pUtilLogManager_DEFAULT_ONSCREENLEVEL, "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/util/LogRecord;>;", "Ljava/util/Set<Lnet/i2p/util/LogLimit;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Object;Lnet/i2p/util/Log;>;", &NetI2pUtilLogManager___id, "LNetI2pUtilLogManager_ShutdownHook;" };
  static const J2ObjcClassInfo _NetI2pUtilLogManager = { "LogManager", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 47, 58, -1, 65, -1, -1, -1 };
  return &_NetI2pUtilLogManager;
}

+ (void)initialize {
  if (self == [NetI2pUtilLogManager class]) {
    JreStrongAssignAndConsume(&NetI2pUtilLogManager___id, new_JavaUtilConcurrentAtomicAtomicInteger_init());
    J2OBJC_SET_INITIALIZED(NetI2pUtilLogManager)
  }
}

@end

void NetI2pUtilLogManager_initWithNetI2pI2PAppContext_(NetI2pUtilLogManager *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  self->_consoleBufferSize_ = NetI2pUtilLogManager_DEFAULT_CONSOLEBUFFERSIZE;
  self->_logBufferSize_ = NetI2pUtilLogManager_MAX_BUFFER;
  JreStrongAssignAndConsume(&self->_droppedRecords_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  self->_flushInterval_ = (jint) (NetI2pUtilLogWriter_FLUSH_INTERVAL / 1000);
  self->_displayOnScreen_ = true;
  self->_alreadyNoticedMissingConfig_ = false;
  JreStrongAssignAndConsume(&self->_limits_, new_NetI2pUtilConcurrentHashSet_init());
  JreStrongAssignAndConsume(&self->_logs_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(128));
  self->_defaultLimit_ = NetI2pUtilLog_ERROR;
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [self getLogWithIOSClass:NetI2pUtilLogManager_class_()]);
  NSString *location = [((NetI2pI2PAppContext *) nil_chk(context)) getPropertyWithNSString:NetI2pUtilLogManager_CONFIG_LOCATION_PROP withNSString:NetI2pUtilLogManager_CONFIG_LOCATION_DEFAULT];
  [self setConfigWithNSString:location];
  JreStrongAssignAndConsume(&self->_records_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self->_logBufferSize_));
  JreStrongAssignAndConsume(&self->_consoleBuffer_, new_NetI2pUtilLogConsoleBuffer_initWithInt_(self->_consoleBufferSize_));
  if ([context isRouterContext]) {
    NetI2pUtilLogManager_startLogWriter(self);
  }
  else {
    @try {
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) addShutdownHookWithJavaLangThread:create_NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(self)];
    }
    @catch (JavaLangIllegalStateException *ise) {
    }
  }
}

NetI2pUtilLogManager *new_NetI2pUtilLogManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilLogManager, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilLogManager *create_NetI2pUtilLogManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogManager, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilLogManager_startLogWriter(NetI2pUtilLogManager *self) {
  @synchronized(self) {
    if (self->_writer_ != nil) return;
    if (NetI2pUtilSystemVersion_isAndroid()) {
      @try {
        IOSClass *clazz = [((IOSClass *) nil_chk(IOSClass_forName_(@"net.i2p.util.AndroidLogWriter"))) asSubclass:NetI2pUtilLogWriter_class_()];
        JavaLangReflectConstructor *ctor = [((IOSClass *) nil_chk(clazz)) getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pUtilLogManager_class_() } count:1 type:IOSClass_class_()]];
        JreStrongAssign(&self->_writer_, [((JavaLangReflectConstructor *) nil_chk(ctor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:NSObject_class_()]]);
      }
      @catch (JavaLangClassNotFoundException *e) {
      }
      @catch (JavaLangInstantiationException *e) {
      }
      @catch (JavaLangIllegalAccessException *e) {
      }
      @catch (JavaLangReflectInvocationTargetException *e) {
      }
      @catch (JavaLangNoSuchMethodException *e) {
      }
    }
    if (self->_writer_ == nil) JreStrongAssignAndConsume(&self->_writer_, new_NetI2pUtilFileLogWriter_initWithNetI2pUtilLogManager_(self));
    [self->_writer_ setFlushIntervalWithLong:self->_flushInterval_ * 1000];
    JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(self->_writer_, @"LogWriter");
    [t setDaemonWithBoolean:true];
    [t start];
  }
}

void NetI2pUtilLogManager_loadConfig(NetI2pUtilLogManager *self) {
  JavaIoFile *cfgFile = self->_locationFile_;
  if (![((JavaIoFile *) nil_chk(cfgFile)) exists]) {
    if (!self->_alreadyNoticedMissingConfig_) {
      self->_alreadyNoticedMissingConfig_ = true;
    }
    NetI2pUtilLogManager_parseConfigWithJavaUtilProperties_(self, create_JavaUtilProperties_init());
    NetI2pUtilLogManager_updateLimits(self);
    return;
  }
  self->_alreadyNoticedMissingConfig_ = false;
  if ((self->_configLastRead_ > 0) && (self->_configLastRead_ >= [cfgFile lastModified])) {
    return;
  }
  JavaUtilProperties *p = create_JavaUtilProperties_init();
  @try {
    NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(p, cfgFile);
    self->_configLastRead_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error loading logger config from ", [cfgFile getAbsolutePath])];
  }
  NetI2pUtilLogManager_parseConfigWithJavaUtilProperties_(self, p);
  NetI2pUtilLogManager_updateLimits(self);
}

void NetI2pUtilLogManager_parseConfigWithJavaUtilProperties_(NetI2pUtilLogManager *self, JavaUtilProperties *config) {
  NSString *fmt = [((JavaUtilProperties *) nil_chk(config)) getPropertyWithNSString:NetI2pUtilLogManager_PROP_FORMAT withNSString:NetI2pUtilLogManager_DEFAULT_FORMAT];
  JreStrongAssign(&self->_format_, [((NSString *) nil_chk(fmt)) java_toCharArray]);
  NSString *df = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DATEFORMAT withNSString:NetI2pUtilLogManager_DEFAULT_DATEFORMAT];
  [self setDateFormatWithNSString:df];
  NSString *disp = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DISPLAYONSCREEN];
  if (disp == nil) self->_displayOnScreen_ = NetI2pUtilLogManager_DEFAULT_DISPLAYONSCREEN;
  else {
    if ([@"TRUE" isEqual:[((NSString *) nil_chk([disp java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_trim]]) self->_displayOnScreen_ = true;
    else if ([@"YES" isEqual:[((NSString *) nil_chk([disp java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_trim]]) self->_displayOnScreen_ = true;
    else self->_displayOnScreen_ = false;
  }
  NSString *filename = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_FILENAME withNSString:NetI2pUtilLogManager_DEFAULT_FILENAME];
  NSString *filenameOverride = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pUtilLogManager_FILENAME_OVERRIDE_PROP];
  if (filenameOverride != nil && [((NSString *) nil_chk(filename)) isEqual:NetI2pUtilLogManager_DEFAULT_FILENAME]) [self setBaseLogfilenameWithNSString:filenameOverride];
  else [self setBaseLogfilenameWithNSString:filename];
  self->_fileSize_ = NetI2pUtilLogManager_getFileSizeWithNSString_([config getPropertyWithNSString:NetI2pUtilLogManager_PROP_FILESIZE withNSString:NetI2pUtilLogManager_DEFAULT_FILESIZE]);
  self->_rotationLimit_ = -1;
  @try {
    self->_rotationLimit_ = JavaLangInteger_parseIntWithNSString_([config getPropertyWithNSString:NetI2pUtilLogManager_PROP_ROTATIONLIMIT withNSString:NetI2pUtilLogManager_DEFAULT_ROTATIONLIMIT]);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Invalid rotation limit"];
    [nfe printStackTrace];
  }
  self->_defaultLimit_ = NetI2pUtilLog_getLevelWithNSString_([config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DEFAULTLEVEL withNSString:NetI2pUtilLogManager_DEFAULT_DEFAULTLEVEL]);
  self->_onScreenLimit_ = NetI2pUtilLog_getLevelWithNSString_([config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DISPLAYONSCREENLEVEL withNSString:NetI2pUtilLogManager_DEFAULT_ONSCREENLEVEL]);
  @try {
    NSString *str = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_CONSOLEBUFFERSIZE];
    if (str != nil) self->_consoleBufferSize_ = JavaLangInteger_parseIntWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  @try {
    NSString *str = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_LOG_BUFFER_SIZE];
    if (str != nil) self->_logBufferSize_ = JavaLangInteger_parseIntWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  @try {
    NSString *str = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_FLUSH];
    if (str != nil) {
      self->_flushInterval_ = JavaLangInteger_parseIntWithNSString_(str);
      @synchronized(self) {
        if (self->_writer_ != nil) [self->_writer_ setFlushIntervalWithLong:self->_flushInterval_ * 1000];
      }
    }
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  self->_dropOnOverflow_ = JavaLangBoolean_parseBooleanWithNSString_([config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DROP]);
  NSString *str = [config getPropertyWithNSString:NetI2pUtilLogManager_PROP_DUP];
  self->_dropDuplicates_ = (str == nil || JavaLangBoolean_parseBooleanWithNSString_(str));
  NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_(self, config);
}

void NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_(NetI2pUtilLogManager *self, JavaUtilProperties *config) {
  NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_withNSString_(self, config, NetI2pUtilLogManager_PROP_RECORD_PREFIX);
}

void NetI2pUtilLogManager_parseLimitsWithJavaUtilProperties_withNSString_(NetI2pUtilLogManager *self, JavaUtilProperties *config, NSString *recordPrefix) {
  [((id<JavaUtilSet>) nil_chk(self->_limits_)) clear];
  if (config != nil) {
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([config entrySet])) {
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
      if (recordPrefix != nil) {
        if ([((NSString *) nil_chk(key)) java_hasPrefix:recordPrefix]) {
          key = [key java_substring:[recordPrefix java_length]];
        }
        else {
          continue;
        }
      }
      NSString *val = (NSString *) cast_chk([e getValue], [NSString class]);
      NetI2pUtilLogLimit *lim = create_NetI2pUtilLogLimit_initWithNSString_withInt_(key, NetI2pUtilLog_getLevelWithNSString_(val));
      if (![self->_limits_ containsWithId:lim]) [self->_limits_ addWithId:lim];
    }
  }
  NetI2pUtilLogManager_updateLimits(self);
}

jint NetI2pUtilLogManager_getFileSizeWithNSString_(NSString *size) {
  NetI2pUtilLogManager_initialize();
  @try {
    NSString *v = [((NSString *) nil_chk([((NSString *) nil_chk(size)) java_trim])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    if ([((NSString *) nil_chk(v)) java_length] < 2) return -1;
    if ([v java_hasSuffix:@"IB"]) v = [v java_substring:0 endIndex:[v java_length] - 2];
    else if ([v java_hasSuffix:@"B"]) v = [v java_substring:0 endIndex:[v java_length] - 1];
    jchar mod = [((NSString *) nil_chk(v)) charAtWithInt:[v java_length] - 1];
    if (!JavaLangCharacter_isDigitWithChar_(mod)) v = [v java_substring:0 endIndex:[v java_length] - 1];
    jdouble val = [((NSNumber *) nil_chk([(create_JavaTextDecimalFormat_init()) parseWithNSString:[((NSString *) nil_chk(v)) java_trim]])) doubleValue];
    switch (mod) {
      case 'K':
      JreTimesAssignDoubleD(&val, 1024);
      break;
      case 'M':
      JreTimesAssignDoubleD(&val, 1024 * 1024);
      break;
      case 'G':
      JreTimesAssignDoubleD(&val, 1024 * 1024 * 1024);
      break;
      default:
      break;
    }
    if (val < 4096 || val > JavaLangInteger_MAX_VALUE) return -1;
    return JreFpToInt(val);
  }
  @catch (JavaLangThrowable *t) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Error parsing config for filesize: [", size, ']')];
    return -1;
  }
}

void NetI2pUtilLogManager_updateLimits(NetI2pUtilLogManager *self) {
  for (NetI2pUtilLog * __strong log in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->_logs_)) values])) {
    NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(self, log);
  }
}

void NetI2pUtilLogManager_updateLimitWithNetI2pUtilLog_(NetI2pUtilLogManager *self, NetI2pUtilLog *log) {
  id<JavaUtilList> limits = NetI2pUtilLogManager_getLimitsWithNetI2pUtilLog_(self, log);
  NetI2pUtilLogLimit *max = nil;
  if (limits != nil) {
    for (NetI2pUtilLogLimit * __strong cur in limits) {
      if (max == nil) max = cur;
      else {
        if ([((NSString *) nil_chk([((NetI2pUtilLogLimit *) nil_chk(cur)) getRootName])) java_length] > [((NSString *) nil_chk([max getRootName])) java_length]) {
          max = cur;
        }
      }
    }
  }
  if (max != nil) {
    [((NetI2pUtilLog *) nil_chk(log)) setMinimumPriorityWithInt:[max getLimit]];
  }
  else {
    [((NetI2pUtilLog *) nil_chk(log)) setMinimumPriorityWithInt:self->_defaultLimit_];
  }
}

id<JavaUtilList> NetI2pUtilLogManager_getLimitsWithNetI2pUtilLog_(NetI2pUtilLogManager *self, NetI2pUtilLog *log) {
  JavaUtilArrayList *limits = nil;
  for (NetI2pUtilLogLimit * __strong limit in nil_chk(self->_limits_)) {
    if ([((NetI2pUtilLogLimit *) nil_chk(limit)) matchesWithNetI2pUtilLog:log]) {
      if (limits == nil) limits = create_JavaUtilArrayList_initWithInt_(4);
      [limits addWithId:limit];
    }
  }
  return limits;
}

JavaUtilProperties *NetI2pUtilLogManager_createConfig(NetI2pUtilLogManager *self) {
  JavaUtilProperties *rv = create_NetI2pUtilOrderedProperties_init();
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FORMAT withNSString:[NSString java_stringWithCharacters:self->_format_]];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DATEFORMAT withNSString:self->_dateFormatPattern_];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DISPLAYONSCREEN withNSString:JavaLangBoolean_toStringWithBoolean_(self->_displayOnScreen_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DROP withNSString:JavaLangBoolean_toStringWithBoolean_(self->_dropOnOverflow_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DUP withNSString:JavaLangBoolean_toStringWithBoolean_(self->_dropDuplicates_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_LOG_BUFFER_SIZE withNSString:JavaLangInteger_toStringWithInt_(self->_logBufferSize_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FILENAME withNSString:self->_baseLogfilename_];
  if (self->_fileSize_ >= 1024 * 1024) [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FILESIZE withNSString:JreStrcat("IC", (self->_fileSize_ / (1024 * 1024)), 'm')];
  else if (self->_fileSize_ >= 1024) [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FILESIZE withNSString:JreStrcat("IC", (self->_fileSize_ / (1024)), 'k')];
  else if (self->_fileSize_ > 0) [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FILESIZE withNSString:JavaLangInteger_toStringWithInt_(self->_fileSize_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_ROTATIONLIMIT withNSString:JavaLangInteger_toStringWithInt_(self->_rotationLimit_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DEFAULTLEVEL withNSString:NetI2pUtilLog_toLevelStringWithInt_(self->_defaultLimit_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_DISPLAYONSCREENLEVEL withNSString:NetI2pUtilLog_toLevelStringWithInt_(self->_onScreenLimit_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_CONSOLEBUFFERSIZE withNSString:JavaLangInteger_toStringWithInt_(self->_consoleBufferSize_)];
  [rv setPropertyWithNSString:NetI2pUtilLogManager_PROP_FLUSH withNSString:JavaLangInteger_toStringWithInt_(self->_flushInterval_)];
  for (NetI2pUtilLogLimit * __strong lim in nil_chk(self->_limits_)) {
    [rv setPropertyWithNSString:JreStrcat("$$", NetI2pUtilLogManager_PROP_RECORD_PREFIX, [((NetI2pUtilLogLimit *) nil_chk(lim)) getRootName]) withNSString:NetI2pUtilLog_toLevelStringWithInt_([lim getLimit])];
  }
  return rv;
}

IOSObjectArray *NetI2pUtilLogManager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilLogManager__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilLogManager__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogManager)

@implementation NetI2pUtilLogManager_ShutdownHook

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)outer$ {
  NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(self, outer$);
  return self;
}

- (void)run {
  [self setNameWithNSString:JreStrcat("$I$", @"Log ", _id_, @" shutdown ")];
  [this$0_ shutdown];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilLogManager:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilLogManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_id_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilLogManager;" };
  static const J2ObjcClassInfo _NetI2pUtilLogManager_ShutdownHook = { "ShutdownHook", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 2, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilLogManager_ShutdownHook;
}

@end

void NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager_ShutdownHook *self, NetI2pUtilLogManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilI2PAppThread_init(self);
  self->_id_ = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(JreLoadStatic(NetI2pUtilLogManager, __id))) incrementAndGet];
}

NetI2pUtilLogManager_ShutdownHook *new_NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilLogManager_ShutdownHook, initWithNetI2pUtilLogManager_, outer$)
}

NetI2pUtilLogManager_ShutdownHook *create_NetI2pUtilLogManager_ShutdownHook_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogManager_ShutdownHook, initWithNetI2pUtilLogManager_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogManager_ShutdownHook)
