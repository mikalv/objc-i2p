//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ResettableGZIPOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/DeflaterOutputStream.h"
#include "net/i2p/util/ResettableGZIPOutputStream.h"

@interface NetI2pUtilResettableGZIPOutputStream () {
 @public
  jboolean _headerWritten_;
  jlong _writtenSize_;
  JavaUtilZipCRC32 *_crc32_;
}

- (void)ensureHeaderIsWritten;

- (void)writeFooter;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilResettableGZIPOutputStream, _crc32_, JavaUtilZipCRC32 *)

inline jboolean NetI2pUtilResettableGZIPOutputStream_get_DEBUG(void);
#define NetI2pUtilResettableGZIPOutputStream_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilResettableGZIPOutputStream, DEBUG, jboolean)

inline IOSByteArray *NetI2pUtilResettableGZIPOutputStream_get_HEADER(void);
static IOSByteArray *NetI2pUtilResettableGZIPOutputStream_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilResettableGZIPOutputStream, HEADER, IOSByteArray *)

__attribute__((unused)) static void NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(NetI2pUtilResettableGZIPOutputStream *self);

__attribute__((unused)) static void NetI2pUtilResettableGZIPOutputStream_writeFooter(NetI2pUtilResettableGZIPOutputStream *self);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilResettableGZIPOutputStream)

@implementation NetI2pUtilResettableGZIPOutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)o {
  NetI2pUtilResettableGZIPOutputStream_initWithJavaIoOutputStream_(self, o);
  return self;
}

- (void)reset {
  [((JavaUtilZipDeflater *) nil_chk(def_)) reset];
  [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) reset];
  _writtenSize_ = 0;
  _headerWritten_ = false;
}

- (void)ensureHeaderIsWritten {
  NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(self);
}

- (void)writeFooter {
  NetI2pUtilResettableGZIPOutputStream_writeFooter(self);
}

- (void)close {
  [self finish];
  [super close];
}

- (void)finish {
  NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(self);
  [super finish];
  NetI2pUtilResettableGZIPOutputStream_writeFooter(self);
}

- (void)writeWithInt:(jint)b {
  NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(self);
  [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) updateWithInt:b];
  _writtenSize_++;
  [super writeWithInt:b];
}

- (void)writeWithByteArray:(IOSByteArray *)buf {
  [self writeWithByteArray:buf withInt:0 withInt:((IOSByteArray *) nil_chk(buf))->size_];
}

- (void)writeWithByteArray:(IOSByteArray *)buf
                   withInt:(jint)off
                   withInt:(jint)len {
  NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(self);
  [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) updateWithByteArray:buf withInt:off withInt:len];
  _writtenSize_ += len;
  [super writeWithByteArray:buf withInt:off withInt:len];
}

- (void)dealloc {
  RELEASE_(_crc32_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(ensureHeaderIsWritten);
  methods[3].selector = @selector(writeFooter);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(finish);
  methods[6].selector = @selector(writeWithInt:);
  methods[7].selector = @selector(writeWithByteArray:);
  methods[8].selector = @selector(writeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_headerWritten_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_writtenSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_crc32_", "LJavaUtilZipCRC32;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = NetI2pUtilResettableGZIPOutputStream_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "HEADER", "[B", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "LJavaIoIOException;", "write", "I", "[B", "[BII", &NetI2pUtilResettableGZIPOutputStream_HEADER };
  static const J2ObjcClassInfo _NetI2pUtilResettableGZIPOutputStream = { "ResettableGZIPOutputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 9, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilResettableGZIPOutputStream;
}

+ (void)initialize {
  if (self == [NetI2pUtilResettableGZIPOutputStream class]) {
    JreStrongAssignAndConsume(&NetI2pUtilResettableGZIPOutputStream_HEADER, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x1F, (jbyte) (jint) 0x8b, (jint) 0x08, (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x02, (jbyte) (jint) 0xFF } count:10]);
    J2OBJC_SET_INITIALIZED(NetI2pUtilResettableGZIPOutputStream)
  }
}

@end

void NetI2pUtilResettableGZIPOutputStream_initWithJavaIoOutputStream_(NetI2pUtilResettableGZIPOutputStream *self, JavaIoOutputStream *o) {
  JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_(self, o, create_JavaUtilZipDeflater_initWithInt_withBoolean_(9, true));
  JreStrongAssignAndConsume(&self->_crc32_, new_JavaUtilZipCRC32_init());
}

NetI2pUtilResettableGZIPOutputStream *new_NetI2pUtilResettableGZIPOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *o) {
  J2OBJC_NEW_IMPL(NetI2pUtilResettableGZIPOutputStream, initWithJavaIoOutputStream_, o)
}

NetI2pUtilResettableGZIPOutputStream *create_NetI2pUtilResettableGZIPOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *o) {
  J2OBJC_CREATE_IMPL(NetI2pUtilResettableGZIPOutputStream, initWithJavaIoOutputStream_, o)
}

void NetI2pUtilResettableGZIPOutputStream_ensureHeaderIsWritten(NetI2pUtilResettableGZIPOutputStream *self) {
  if (self->_headerWritten_) return;
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:NetI2pUtilResettableGZIPOutputStream_HEADER];
  self->_headerWritten_ = true;
}

void NetI2pUtilResettableGZIPOutputStream_writeFooter(NetI2pUtilResettableGZIPOutputStream *self) {
  jlong crcVal = [((JavaUtilZipCRC32 *) nil_chk(self->_crc32_)) getValue];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) (crcVal & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(crcVal, 8)) & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(crcVal, 16)) & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(crcVal, 24)) & (jint) 0xFF)];
  jlong sizeVal = self->_writtenSize_;
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) (sizeVal & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(sizeVal, 8)) & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(sizeVal, 16)) & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithInt:(jint) ((JreURShift64(sizeVal, 24)) & (jint) 0xFF)];
  [((JavaIoOutputStream *) nil_chk(self->out_)) flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilResettableGZIPOutputStream)
