//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LHMCache.java
//

#include "J2ObjC_source.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "net/i2p/util/LHMCache.h"

@interface NetI2pUtilLHMCache () {
 @public
  jint _max_;
}

@end

@implementation NetI2pUtilLHMCache

- (instancetype)initWithInt:(jint)max {
  NetI2pUtilLHMCache_initWithInt_(self, max);
  return self;
}

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest {
  return [self size] > _max_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(removeEldestEntryWithJavaUtilMap_Entry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_max_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "removeEldestEntry", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/LinkedHashMap<TK;TV;>;" };
  static const J2ObjcClassInfo _NetI2pUtilLHMCache = { "LHMCache", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, 4, -1 };
  return &_NetI2pUtilLHMCache;
}

@end

void NetI2pUtilLHMCache_initWithInt_(NetI2pUtilLHMCache *self, jint max) {
  JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(self, max, 0.75f, true);
  self->_max_ = max;
}

NetI2pUtilLHMCache *new_NetI2pUtilLHMCache_initWithInt_(jint max) {
  J2OBJC_NEW_IMPL(NetI2pUtilLHMCache, initWithInt_, max)
}

NetI2pUtilLHMCache *create_NetI2pUtilLHMCache_initWithInt_(jint max) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLHMCache, initWithInt_, max)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLHMCache)
