//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/EventDispatcherImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "net/i2p/util/EventDispatcher.h"
#include "net/i2p/util/EventDispatcherImpl.h"

@interface NetI2pUtilEventDispatcherImpl () {
 @public
  jboolean _ignore_;
  id<JavaUtilMap> _events_;
  id<JavaUtilList> _attached_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilEventDispatcherImpl, _events_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pUtilEventDispatcherImpl, _attached_, id<JavaUtilList>)

@implementation NetI2pUtilEventDispatcherImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilEventDispatcherImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<NetI2pUtilEventDispatcher>)getEventDispatcher {
  return self;
}

- (void)attachEventDispatcherWithNetI2pUtilEventDispatcher:(id<NetI2pUtilEventDispatcher>)ev {
  if (ev == nil) return;
  [((id<JavaUtilList>) nil_chk(_attached_)) addWithId:ev];
}

- (void)detachEventDispatcherWithNetI2pUtilEventDispatcher:(id<NetI2pUtilEventDispatcher>)ev {
  if (ev == nil) return;
  [((id<JavaUtilList>) nil_chk(_attached_)) removeWithId:ev];
}

- (void)notifyEventWithNSString:(NSString *)eventName
                         withId:(id)args {
  if (_ignore_) return;
  if (args == nil) {
    args = @"[null value]";
  }
  [((id<JavaUtilMap>) nil_chk(_events_)) putWithId:eventName withId:args];
  @synchronized(_events_) {
    [_events_ java_notifyAll];
  }
  for (id<NetI2pUtilEventDispatcher> __strong e in nil_chk(_attached_)) {
    [((id<NetI2pUtilEventDispatcher>) nil_chk(e)) notifyEventWithNSString:eventName withId:args];
  }
}

- (id)getEventValueWithNSString:(NSString *)name {
  if (_ignore_) return nil;
  return [((id<JavaUtilMap>) nil_chk(_events_)) getWithId:name];
}

- (id<JavaUtilSet>)getEvents {
  if (_ignore_) return JavaUtilCollections_emptySet();
  return create_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(_events_)) keySet]);
}

- (void)ignoreEvents {
  _ignore_ = true;
  [((id<JavaUtilMap>) nil_chk(_events_)) clear];
}

- (void)unIgnoreEvents {
  _ignore_ = false;
}

- (id)waitEventValueWithNSString:(NSString *)name {
  if (_ignore_) return nil;
  do {
    @synchronized(_events_) {
      id val = [((id<JavaUtilMap>) nil_chk(_events_)) getWithId:name];
      if (val != nil) return JreRetainedLocalValue(val);
      @try {
        [_events_ java_waitWithLong:5 * 1000];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
  while (true);
}

- (void)dealloc {
  RELEASE_(_events_);
  RELEASE_(_attached_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilEventDispatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getEventDispatcher);
  methods[2].selector = @selector(attachEventDispatcherWithNetI2pUtilEventDispatcher:);
  methods[3].selector = @selector(detachEventDispatcherWithNetI2pUtilEventDispatcher:);
  methods[4].selector = @selector(notifyEventWithNSString:withId:);
  methods[5].selector = @selector(getEventValueWithNSString:);
  methods[6].selector = @selector(getEvents);
  methods[7].selector = @selector(ignoreEvents);
  methods[8].selector = @selector(unIgnoreEvents);
  methods[9].selector = @selector(waitEventValueWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_ignore_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_events_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_attached_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "attachEventDispatcher", "LNetI2pUtilEventDispatcher;", "detachEventDispatcher", "notifyEvent", "LNSString;LNSObject;", "getEventValue", "LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "waitEventValue", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Lnet/i2p/util/EventDispatcher;>;" };
  static const J2ObjcClassInfo _NetI2pUtilEventDispatcherImpl = { "EventDispatcherImpl", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilEventDispatcherImpl;
}

@end

void NetI2pUtilEventDispatcherImpl_init(NetI2pUtilEventDispatcherImpl *self) {
  NSObject_init(self);
  self->_ignore_ = false;
  JreStrongAssignAndConsume(&self->_events_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
  JreStrongAssignAndConsume(&self->_attached_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
}

NetI2pUtilEventDispatcherImpl *new_NetI2pUtilEventDispatcherImpl_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilEventDispatcherImpl, init)
}

NetI2pUtilEventDispatcherImpl *create_NetI2pUtilEventDispatcherImpl_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilEventDispatcherImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEventDispatcherImpl)
