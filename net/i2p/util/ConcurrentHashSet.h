//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ConcurrentHashSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilConcurrentHashSet")
#ifdef RESTRICT_NetI2pUtilConcurrentHashSet
#define INCLUDE_ALL_NetI2pUtilConcurrentHashSet 0
#else
#define INCLUDE_ALL_NetI2pUtilConcurrentHashSet 1
#endif
#undef RESTRICT_NetI2pUtilConcurrentHashSet

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilConcurrentHashSet_) && (INCLUDE_ALL_NetI2pUtilConcurrentHashSet || defined(INCLUDE_NetI2pUtilConcurrentHashSet))
#define NetI2pUtilConcurrentHashSet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

#define RESTRICT_JavaUtilSet 1
#define INCLUDE_JavaUtilSet 1
#include "java/util/Set.h"

@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface NetI2pUtilConcurrentHashSet : JavaUtilAbstractSet < JavaUtilSet >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)capacity;

- (jboolean)addWithId:(id)o;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jint)size;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(NetI2pUtilConcurrentHashSet)

FOUNDATION_EXPORT void NetI2pUtilConcurrentHashSet_init(NetI2pUtilConcurrentHashSet *self);

FOUNDATION_EXPORT NetI2pUtilConcurrentHashSet *new_NetI2pUtilConcurrentHashSet_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilConcurrentHashSet *create_NetI2pUtilConcurrentHashSet_init(void);

FOUNDATION_EXPORT void NetI2pUtilConcurrentHashSet_initWithInt_(NetI2pUtilConcurrentHashSet *self, jint capacity);

FOUNDATION_EXPORT NetI2pUtilConcurrentHashSet *new_NetI2pUtilConcurrentHashSet_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilConcurrentHashSet *create_NetI2pUtilConcurrentHashSet_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilConcurrentHashSet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilConcurrentHashSet")
