//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ResettableGZIPInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/Inflater.h"
#include "java/util/zip/InflaterInputStream.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/LookaheadInputStream.h"
#include "net/i2p/util/ResettableGZIPInputStream.h"

@class NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream;

@interface NetI2pUtilResettableGZIPInputStream () {
 @public
  NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *_extraByteInputStream_;
  NetI2pUtilLookaheadInputStream *_lookaheadStream_;
  JavaUtilZipCRC32 *_crc32_;
  IOSByteArray *_buf1_;
  jboolean _complete_;
}

- (void)verifyFooter;

- (void)verifyHeader;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilResettableGZIPInputStream, _extraByteInputStream_, NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilResettableGZIPInputStream, _lookaheadStream_, NetI2pUtilLookaheadInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilResettableGZIPInputStream, _crc32_, JavaUtilZipCRC32 *)
J2OBJC_FIELD_SETTER(NetI2pUtilResettableGZIPInputStream, _buf1_, IOSByteArray *)

inline jint NetI2pUtilResettableGZIPInputStream_get_FOOTER_SIZE(void);
#define NetI2pUtilResettableGZIPInputStream_FOOTER_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilResettableGZIPInputStream, FOOTER_SIZE, jint)

__attribute__((unused)) static void NetI2pUtilResettableGZIPInputStream_verifyFooter(NetI2pUtilResettableGZIPInputStream *self);

__attribute__((unused)) static void NetI2pUtilResettableGZIPInputStream_verifyHeader(NetI2pUtilResettableGZIPInputStream *self);

@interface NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream : JavaIoFilterInputStream {
 @public
  jboolean _extraSent_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)close;

- (void)reset;

- (JavaIoInputStream *)getInputStream;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream)

inline jbyte NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_get_DUMMY(void);
#define NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_DUMMY 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream, DUMMY, jbyte)

__attribute__((unused)) static void NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *self, JavaIoInputStream *inArg);

__attribute__((unused)) static NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *new_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *create_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream)

@implementation NetI2pUtilResettableGZIPInputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilResettableGZIPInputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)compressedStream {
  NetI2pUtilResettableGZIPInputStream_initWithJavaIoInputStream_(self, compressedStream);
  return self;
}

- (void)initialize__WithJavaIoInputStream:(JavaIoInputStream *)compressedStream {
  len_ = 0;
  [((JavaUtilZipInflater *) nil_chk(inf_)) reset];
  _complete_ = false;
  [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) reset];
  *IOSByteArray_GetRef(nil_chk(_buf1_), 0) = (jint) 0x0;
  [((NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *) nil_chk(_extraByteInputStream_)) reset];
  [((NetI2pUtilLookaheadInputStream *) nil_chk(_lookaheadStream_)) initialize__WithJavaIoInputStream:compressedStream];
  NetI2pUtilResettableGZIPInputStream_verifyHeader(self);
}

- (jint)read {
  jint read = [self readWithByteArray:_buf1_ withInt:0 withInt:1];
  if (read == -1) return -1;
  return IOSByteArray_Get(nil_chk(_buf1_), 0) & (jint) 0xff;
}

- (jint)readWithByteArray:(IOSByteArray *)buf {
  return [self readWithByteArray:buf withInt:0 withInt:((IOSByteArray *) nil_chk(buf))->size_];
}

- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  if (_complete_) {
    return -1;
  }
  jint read = [super readWithByteArray:buf withInt:off withInt:len];
  if (read == -1) {
    NetI2pUtilResettableGZIPInputStream_verifyFooter(self);
    return -1;
  }
  else {
    [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) updateWithByteArray:buf withInt:off withInt:read];
    if ([((JavaUtilZipInflater *) nil_chk(inf_)) finished]) {
      NetI2pUtilResettableGZIPInputStream_verifyFooter(self);
      [((JavaUtilZipInflater *) nil_chk(inf_)) reset];
      _complete_ = true;
    }
    return read;
  }
}

- (jlong)getTotalRead {
  @try {
    return [((JavaUtilZipInflater *) nil_chk(inf_)) getBytesRead];
  }
  @catch (JavaLangRuntimeException *e) {
    return 0;
  }
}

- (jlong)getTotalExpanded {
  @try {
    return [((JavaUtilZipInflater *) nil_chk(inf_)) getBytesWritten];
  }
  @catch (JavaLangRuntimeException *e) {
    return 0;
  }
}

- (jlong)getRemaining {
  @try {
    return [((JavaUtilZipInflater *) nil_chk(inf_)) getRemaining];
  }
  @catch (JavaLangRuntimeException *e) {
    return 0;
  }
}

- (jboolean)getFinished {
  @try {
    return [((JavaUtilZipInflater *) nil_chk(inf_)) finished];
  }
  @catch (JavaLangRuntimeException *e) {
    return true;
  }
}

- (void)close {
  len_ = 0;
  [((JavaUtilZipInflater *) nil_chk(inf_)) reset];
  _complete_ = false;
  [((JavaUtilZipCRC32 *) nil_chk(_crc32_)) reset];
  *IOSByteArray_GetRef(nil_chk(_buf1_), 0) = (jint) 0x0;
  [((NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *) nil_chk(_extraByteInputStream_)) close];
}

- (NSString *)description {
  return JreStrcat("$J$J$J$Z", @"Read: ", [self getTotalRead], @" expanded: ", [self getTotalExpanded], @" remaining: ", [self getRemaining], @" finished: ", [self getFinished]);
}

- (void)verifyFooter {
  NetI2pUtilResettableGZIPInputStream_verifyFooter(self);
}

- (void)verifyHeader {
  NetI2pUtilResettableGZIPInputStream_verifyHeader(self);
}

- (void)dealloc {
  RELEASE_(_extraByteInputStream_);
  RELEASE_(_lookaheadStream_);
  RELEASE_(_crc32_);
  RELEASE_(_buf1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 5, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaIoInputStream:);
  methods[2].selector = @selector(initialize__WithJavaIoInputStream:);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(readWithByteArray:);
  methods[5].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(getTotalRead);
  methods[7].selector = @selector(getTotalExpanded);
  methods[8].selector = @selector(getRemaining);
  methods[9].selector = @selector(getFinished);
  methods[10].selector = @selector(close);
  methods[11].selector = @selector(description);
  methods[12].selector = @selector(verifyFooter);
  methods[13].selector = @selector(verifyHeader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOOTER_SIZE", "I", .constantValue.asInt = NetI2pUtilResettableGZIPInputStream_FOOTER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_extraByteInputStream_", "LNetI2pUtilResettableGZIPInputStream_ExtraByteInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lookaheadStream_", "LNetI2pUtilLookaheadInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_crc32_", "LJavaUtilZipCRC32;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_buf1_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_complete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "initialize", "read", "[B", "[BII", "toString", "LNetI2pUtilResettableGZIPInputStream_ExtraByteInputStream;" };
  static const J2ObjcClassInfo _NetI2pUtilResettableGZIPInputStream = { "ResettableGZIPInputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 14, 6, -1, 7, -1, -1, -1 };
  return &_NetI2pUtilResettableGZIPInputStream;
}

@end

void NetI2pUtilResettableGZIPInputStream_init(NetI2pUtilResettableGZIPInputStream *self) {
  JavaUtilZipInflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipInflater_(self, create_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(create_NetI2pUtilLookaheadInputStream_initWithInt_(NetI2pUtilResettableGZIPInputStream_FOOTER_SIZE)), create_JavaUtilZipInflater_initWithBoolean_(true));
  JreStrongAssignAndConsume(&self->_buf1_, [IOSByteArray newArrayWithLength:1]);
  JreStrongAssign(&self->_extraByteInputStream_, (NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *) cast_chk(JreLoadVolatileId(&self->in_), [NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream class]));
  JreStrongAssign(&self->_lookaheadStream_, (NetI2pUtilLookaheadInputStream *) cast_chk([((NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *) nil_chk(self->_extraByteInputStream_)) getInputStream], [NetI2pUtilLookaheadInputStream class]));
  JreStrongAssignAndConsume(&self->_crc32_, new_JavaUtilZipCRC32_init());
}

NetI2pUtilResettableGZIPInputStream *new_NetI2pUtilResettableGZIPInputStream_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilResettableGZIPInputStream, init)
}

NetI2pUtilResettableGZIPInputStream *create_NetI2pUtilResettableGZIPInputStream_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilResettableGZIPInputStream, init)
}

void NetI2pUtilResettableGZIPInputStream_initWithJavaIoInputStream_(NetI2pUtilResettableGZIPInputStream *self, JavaIoInputStream *compressedStream) {
  NetI2pUtilResettableGZIPInputStream_init(self);
  [self initialize__WithJavaIoInputStream:compressedStream];
}

NetI2pUtilResettableGZIPInputStream *new_NetI2pUtilResettableGZIPInputStream_initWithJavaIoInputStream_(JavaIoInputStream *compressedStream) {
  J2OBJC_NEW_IMPL(NetI2pUtilResettableGZIPInputStream, initWithJavaIoInputStream_, compressedStream)
}

NetI2pUtilResettableGZIPInputStream *create_NetI2pUtilResettableGZIPInputStream_initWithJavaIoInputStream_(JavaIoInputStream *compressedStream) {
  J2OBJC_CREATE_IMPL(NetI2pUtilResettableGZIPInputStream, initWithJavaIoInputStream_, compressedStream)
}

void NetI2pUtilResettableGZIPInputStream_verifyFooter(NetI2pUtilResettableGZIPInputStream *self) {
  IOSByteArray *footer = [((NetI2pUtilLookaheadInputStream *) nil_chk(self->_lookaheadStream_)) getFooter];
  jlong actualSize = [((JavaUtilZipInflater *) nil_chk(self->inf_)) getTotalOut];
  jlong expectedSize = NetI2pDataDataHelper_fromLongLEWithByteArray_withInt_withInt_(footer, 4, 4);
  if (expectedSize != actualSize) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$J", @"gunzip expected ", expectedSize, @" bytes, got ", actualSize));
  jlong actualCRC = [((JavaUtilZipCRC32 *) nil_chk(self->_crc32_)) getValue];
  jlong expectedCRC = NetI2pDataDataHelper_fromLongLEWithByteArray_withInt_withInt_(footer, 0, 4);
  if (expectedCRC != actualCRC) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$$", @"gunzip CRC fail expected 0x", JavaLangLong_toHexStringWithLong_(expectedCRC), @" bytes, got 0x", JavaLangLong_toHexStringWithLong_(actualCRC)));
}

void NetI2pUtilResettableGZIPInputStream_verifyHeader(NetI2pUtilResettableGZIPInputStream *self) {
  jint c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c != (jint) 0x1F) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"First magic byte was wrong [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c != (jint) 0x8B) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Second magic byte was wrong [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c != (jint) 0x08) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Compression format is invalid [", c, ']'));
  jint flags = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c == -1) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"EOF on MTIME0 [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c == -1) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"EOF on MTIME1 [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c == -1) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"EOF on MTIME2 [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (c == -1) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"EOF on MTIME3 [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if ((c != (jint) 0x00) && (c != (jint) 0x02) && (c != (jint) 0x04)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Invalid extended flags [", c, ']'));
  c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
  if (0 != (flags & (JreLShift32(1, 5)))) {
    jint _len = 0;
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the extra header");
    _len = c;
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the extra header");
    _len += (JreLShift32(c, 8));
    for (jint i = 0; i < _len; i++) {
      c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
      if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the extra header's body");
    }
  }
  if (0 != (flags & (JreLShift32(1, 4)))) {
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    while (c != 0) {
      if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the name");
      c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    }
  }
  if (0 != (flags & (JreLShift32(1, 3)))) {
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    while (c != 0) {
      if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the comment");
      c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    }
  }
  if (0 != (flags & (JreLShift32(1, 6)))) {
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the CRC16");
    c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&self->in_))) read];
    if (c == -1) @throw create_JavaIoIOException_initWithNSString_(@"EOF reading the CRC16");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilResettableGZIPInputStream)

@implementation NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (jint)read {
  if (_extraSent_) return -1;
  jint rv = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
  if (rv >= 0) return rv;
  _extraSent_ = true;
  return NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_DUMMY;
}

- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  if (len == 0) return 0;
  if (_extraSent_) return -1;
  jint rv = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:buf withInt:off withInt:len];
  if (rv >= 0) return rv;
  _extraSent_ = true;
  *IOSByteArray_GetRef(nil_chk(buf), off) = NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_DUMMY;
  return 1;
}

- (void)close {
  _extraSent_ = false;
  [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) close];
}

- (void)reset {
  _extraSent_ = false;
}

- (JavaIoInputStream *)getInputStream {
  return JreLoadVolatileId(&in_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(reset);
  methods[5].selector = @selector(getInputStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DUMMY", "B", .constantValue.asChar = NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_DUMMY, 0x1a, -1, -1, -1, -1 },
    { "_extraSent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "read", "[BII", "LNetI2pUtilResettableGZIPInputStream;" };
  static const J2ObjcClassInfo _NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream = { "ExtraByteInputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 6, 2, 4, -1, -1, -1, -1 };
  return &_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream;
}

@end

void NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *self, JavaIoInputStream *inArg) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, inArg);
}

NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *new_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream, initWithJavaIoInputStream_, inArg)
}

NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream *create_NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream, initWithJavaIoInputStream_, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilResettableGZIPInputStream_ExtraByteInputStream)
