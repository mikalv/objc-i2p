//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/DNSOverHTTPS.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/DNSOverHTTPS.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/ObjectCounter.h"
#include "net/i2p/util/RFC822Date.h"
#include "net/i2p/util/SSLEepGet.h"
#include "net/minidev/json/JSONArray.h"
#include "net/minidev/json/JSONObject.h"
#include "net/minidev/json/parser/JSONParser.h"

@interface NetI2pUtilDNSOverHTTPS () {
 @public
  NetI2pI2PAppContext *ctx_;
  NetI2pUtilLog *_log_;
  NetMinidevJsonParserJSONParser *parser_;
  JavaIoByteArrayOutputStream *baos_;
  NetI2pUtilSSLEepGet_SSLState *state_;
  jlong fetchStart_;
  jint gotDate_;
}

+ (NSString *)lookupWithNSString:(NSString *)host
                 withJavaUtilMap:(id<JavaUtilMap>)cache;

- (NSString *)queryWithNSString:(NSString *)host
withNetI2pUtilDNSOverHTTPS_Type:(NetI2pUtilDNSOverHTTPS_Type *)type;

- (NSString *)queryWithNSString:(NSString *)host
                    withBoolean:(jboolean)isv6
               withJavaUtilList:(id<JavaUtilList>)toQuery;

- (NSString *)fetchWithNetI2pUtilSSLEepGet:(NetI2pUtilSSLEepGet *)eepget
                              withNSString:(NSString *)host
                               withBoolean:(jboolean)isv6;

- (void)logWithNSString:(NSString *)msg;

- (void)logWithNSString:(NSString *)msg
  withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)usage;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS, ctx_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS, parser_, NetMinidevJsonParserJSONParser *)
J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS, baos_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS, state_, NetI2pUtilSSLEepGet_SSLState *)

inline id<JavaUtilMap> NetI2pUtilDNSOverHTTPS_get_v4Cache(void);
static id<JavaUtilMap> NetI2pUtilDNSOverHTTPS_v4Cache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, v4Cache, id<JavaUtilMap>)

inline id<JavaUtilMap> NetI2pUtilDNSOverHTTPS_get_v6Cache(void);
static id<JavaUtilMap> NetI2pUtilDNSOverHTTPS_v6Cache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, v6Cache, id<JavaUtilMap>)

inline id<JavaUtilList> NetI2pUtilDNSOverHTTPS_get_v4urls(void);
static id<JavaUtilList> NetI2pUtilDNSOverHTTPS_v4urls;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, v4urls, id<JavaUtilList>)

inline id<JavaUtilList> NetI2pUtilDNSOverHTTPS_get_v6urls(void);
static id<JavaUtilList> NetI2pUtilDNSOverHTTPS_v6urls;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, v6urls, id<JavaUtilList>)

inline NetI2pUtilObjectCounter *NetI2pUtilDNSOverHTTPS_get_fails(void);
static NetI2pUtilObjectCounter *NetI2pUtilDNSOverHTTPS_fails;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, fails, NetI2pUtilObjectCounter *)

inline id<JavaUtilList> NetI2pUtilDNSOverHTTPS_get_locals(void);
static id<JavaUtilList> NetI2pUtilDNSOverHTTPS_locals;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilDNSOverHTTPS, locals, id<JavaUtilList>)

inline jlong NetI2pUtilDNSOverHTTPS_get_TIMEOUT(void);
#define NetI2pUtilDNSOverHTTPS_TIMEOUT 3000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, TIMEOUT, jlong)

inline jint NetI2pUtilDNSOverHTTPS_get_MAX_TTL(void);
#define NetI2pUtilDNSOverHTTPS_MAX_TTL 86400
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, MAX_TTL, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_MAX_FAILS(void);
#define NetI2pUtilDNSOverHTTPS_MAX_FAILS 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, MAX_FAILS, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_V4_CODE(void);
#define NetI2pUtilDNSOverHTTPS_V4_CODE 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, V4_CODE, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_CNAME_CODE(void);
#define NetI2pUtilDNSOverHTTPS_CNAME_CODE 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, CNAME_CODE, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_V6_CODE(void);
#define NetI2pUtilDNSOverHTTPS_V6_CODE 28
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, V6_CODE, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_MAX_DATE_SETS(void);
#define NetI2pUtilDNSOverHTTPS_MAX_DATE_SETS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, MAX_DATE_SETS, jint)

inline jint NetI2pUtilDNSOverHTTPS_get_DEFAULT_STRATUM(void);
#define NetI2pUtilDNSOverHTTPS_DEFAULT_STRATUM 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilDNSOverHTTPS, DEFAULT_STRATUM, jint)

__attribute__((unused)) static NSString *NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(NSString *host, id<JavaUtilMap> cache);

__attribute__((unused)) static NSString *NetI2pUtilDNSOverHTTPS_queryWithNSString_withNetI2pUtilDNSOverHTTPS_Type_(NetI2pUtilDNSOverHTTPS *self, NSString *host, NetI2pUtilDNSOverHTTPS_Type *type);

__attribute__((unused)) static NSString *NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(NetI2pUtilDNSOverHTTPS *self, NSString *host, jboolean isv6, id<JavaUtilList> toQuery);

__attribute__((unused)) static NSString *NetI2pUtilDNSOverHTTPS_fetchWithNetI2pUtilSSLEepGet_withNSString_withBoolean_(NetI2pUtilDNSOverHTTPS *self, NetI2pUtilSSLEepGet *eepget, NSString *host, jboolean isv6);

__attribute__((unused)) static void NetI2pUtilDNSOverHTTPS_logWithNSString_(NetI2pUtilDNSOverHTTPS *self, NSString *msg);

__attribute__((unused)) static void NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(NetI2pUtilDNSOverHTTPS *self, NSString *msg, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pUtilDNSOverHTTPS_usage(void);

__attribute__((unused)) static void NetI2pUtilDNSOverHTTPS_Type_initWithNSString_withInt_(NetI2pUtilDNSOverHTTPS_Type *self, NSString *__name, jint __ordinal);

@interface NetI2pUtilDNSOverHTTPS_Result : NSObject {
 @public
  NSString *ip_;
  jlong expires_;
}

- (instancetype)initWithNSString:(NSString *)i
                        withLong:(jlong)e;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilDNSOverHTTPS_Result)

J2OBJC_FIELD_SETTER(NetI2pUtilDNSOverHTTPS_Result, ip_, NSString *)

__attribute__((unused)) static void NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NetI2pUtilDNSOverHTTPS_Result *self, NSString *i, jlong e);

__attribute__((unused)) static NetI2pUtilDNSOverHTTPS_Result *new_NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NSString *i, jlong e) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilDNSOverHTTPS_Result *create_NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NSString *i, jlong e);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilDNSOverHTTPS_Result)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilDNSOverHTTPS)

@implementation NetI2pUtilDNSOverHTTPS

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
           withNetI2pUtilSSLEepGet_SSLState:(NetI2pUtilSSLEepGet_SSLState *)sslState {
  NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(self, context, sslState);
  return self;
}

- (NSString *)lookupWithNSString:(NSString *)host {
  return [self lookupWithNSString:host withNetI2pUtilDNSOverHTTPS_Type:JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY)];
}

- (NSString *)lookupWithNSString:(NSString *)host
 withNetI2pUtilDNSOverHTTPS_Type:(NetI2pUtilDNSOverHTTPS_Type *)type {
  if (NetI2pUtilAddresses_isIPAddressWithNSString_(host)) return host;
  if ([((NSString *) nil_chk(host)) java_hasPrefix:@"["]) return host;
  host = [host java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(host)) java_indexOf:'.'] < 0) return nil;
  for (NSString * __strong local in nil_chk(NetI2pUtilDNSOverHTTPS_locals)) {
    if ([host isEqual:local] || ([host java_hasSuffix:local] && [host charAtWithInt:[host java_length] - [((NSString *) nil_chk(local)) java_length] - 1] == '.')) {
      return nil;
    }
  }
  if ([host isEqual:@"dns.google.com"]) return @"8.8.8.8";
  if (type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY) || type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(host, NetI2pUtilDNSOverHTTPS_v4Cache);
    if (rv != nil) return rv;
  }
  if (type != JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(host, NetI2pUtilDNSOverHTTPS_v6Cache);
    if (rv != nil) return rv;
  }
  if (type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(host, NetI2pUtilDNSOverHTTPS_v4Cache);
    if (rv != nil) return rv;
  }
  return NetI2pUtilDNSOverHTTPS_queryWithNSString_withNetI2pUtilDNSOverHTTPS_Type_(self, host, type);
}

+ (void)clearCaches {
  NetI2pUtilDNSOverHTTPS_clearCaches();
}

+ (NSString *)lookupWithNSString:(NSString *)host
                 withJavaUtilMap:(id<JavaUtilMap>)cache {
  return NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(host, cache);
}

- (NSString *)queryWithNSString:(NSString *)host
withNetI2pUtilDNSOverHTTPS_Type:(NetI2pUtilDNSOverHTTPS_Type *)type {
  return NetI2pUtilDNSOverHTTPS_queryWithNSString_withNetI2pUtilDNSOverHTTPS_Type_(self, host, type);
}

- (NSString *)queryWithNSString:(NSString *)host
                    withBoolean:(jboolean)isv6
               withJavaUtilList:(id<JavaUtilList>)toQuery {
  return NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(self, host, isv6, toQuery);
}

- (NSString *)fetchWithNetI2pUtilSSLEepGet:(NetI2pUtilSSLEepGet *)eepget
                              withNSString:(NSString *)host
                               withBoolean:(jboolean)isv6 {
  return NetI2pUtilDNSOverHTTPS_fetchWithNetI2pUtilSSLEepGet_withNSString_withBoolean_(self, eepget, host, isv6);
}

- (void)attemptFailedWithNSString:(NSString *)url
                         withLong:(jlong)bytesTransferred
                         withLong:(jlong)bytesRemaining
                          withInt:(jint)currentAttempt
                          withInt:(jint)numRetries
            withJavaLangException:(JavaLangException *)cause {
}

- (void)bytesTransferredWithLong:(jlong)alreadyTransferred
                         withInt:(jint)currentWrite
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url {
}

- (void)transferCompleteWithLong:(jlong)alreadyTransferred
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url
                    withNSString:(NSString *)outputFile
                     withBoolean:(jboolean)notModified {
}

- (void)transferFailedWithNSString:(NSString *)url
                          withLong:(jlong)bytesTransferred
                          withLong:(jlong)bytesRemaining
                           withInt:(jint)currentAttempt {
}

- (void)attemptingWithNSString:(NSString *)url {
  if (gotDate_ < NetI2pUtilDNSOverHTTPS_MAX_DATE_SETS) fetchStart_ = JavaLangSystem_currentTimeMillis();
}

- (void)headerReceivedWithNSString:(NSString *)url
                           withInt:(jint)attemptNum
                      withNSString:(NSString *)key
                      withNSString:(NSString *)val {
  if (gotDate_ < NetI2pUtilDNSOverHTTPS_MAX_DATE_SETS && [@"Date" isEqual:key]) {
    jlong timeRcvd = JavaLangSystem_currentTimeMillis();
    jlong serverTime = NetI2pUtilRFC822Date_parse822DateWithNSString_(val);
    if (serverTime > 0) {
      jlong now = serverTime + 500 + ((timeRcvd - fetchStart_) / 2);
      jlong offset = now - [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx_)) clock])) now];
      if ([((NetI2pUtilClock *) nil_chk([ctx_ clock])) getUpdatedSuccessfully]) {
        if (gotDate_ > 0) [((NetI2pUtilClock *) nil_chk([ctx_ clock])) setNowWithLong:now withInt:NetI2pUtilDNSOverHTTPS_DEFAULT_STRATUM - 4];
        else [((NetI2pUtilClock *) nil_chk([ctx_ clock])) setNowWithLong:now withInt:NetI2pUtilDNSOverHTTPS_DEFAULT_STRATUM - 3];
        NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"DNSOverHTTPS adjusting clock by ", NetI2pDataDataHelper_formatDurationWithLong_(JavaLangMath_absWithLong_(offset))));
      }
      else {
        [((NetI2pUtilClock *) nil_chk([ctx_ clock])) setNowWithLong:now withInt:NetI2pUtilDNSOverHTTPS_DEFAULT_STRATUM - 3];
        NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"DNSOverHTTPS setting initial clock skew to ", NetI2pDataDataHelper_formatDurationWithLong_(JavaLangMath_absWithLong_(offset))));
      }
      gotDate_++;
    }
  }
}

- (void)logWithNSString:(NSString *)msg {
  NetI2pUtilDNSOverHTTPS_logWithNSString_(self, msg);
}

- (void)logWithNSString:(NSString *)msg
  withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(self, msg, t);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilDNSOverHTTPS_mainWithNSStringArray_(args);
}

+ (void)usage {
  NetI2pUtilDNSOverHTTPS_usage();
}

- (void)dealloc {
  RELEASE_(ctx_);
  RELEASE_(_log_);
  RELEASE_(parser_);
  RELEASE_(baos_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 5, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilSSLEepGet_SSLState:);
  methods[2].selector = @selector(lookupWithNSString:);
  methods[3].selector = @selector(lookupWithNSString:withNetI2pUtilDNSOverHTTPS_Type:);
  methods[4].selector = @selector(clearCaches);
  methods[5].selector = @selector(lookupWithNSString:withJavaUtilMap:);
  methods[6].selector = @selector(queryWithNSString:withNetI2pUtilDNSOverHTTPS_Type:);
  methods[7].selector = @selector(queryWithNSString:withBoolean:withJavaUtilList:);
  methods[8].selector = @selector(fetchWithNetI2pUtilSSLEepGet:withNSString:withBoolean:);
  methods[9].selector = @selector(attemptFailedWithNSString:withLong:withLong:withInt:withInt:withJavaLangException:);
  methods[10].selector = @selector(bytesTransferredWithLong:withInt:withLong:withLong:withNSString:);
  methods[11].selector = @selector(transferCompleteWithLong:withLong:withLong:withNSString:withNSString:withBoolean:);
  methods[12].selector = @selector(transferFailedWithNSString:withLong:withLong:withInt:);
  methods[13].selector = @selector(attemptingWithNSString:);
  methods[14].selector = @selector(headerReceivedWithNSString:withInt:withNSString:withNSString:);
  methods[15].selector = @selector(logWithNSString:);
  methods[16].selector = @selector(logWithNSString:withJavaLangThrowable:);
  methods[17].selector = @selector(mainWithNSStringArray:);
  methods[18].selector = @selector(usage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctx_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parser_", "LNetMinidevJsonParserJSONParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "baos_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "state_", "LNetI2pUtilSSLEepGet_SSLState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fetchStart_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gotDate_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "v4Cache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
    { "v6Cache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 29, 28, -1 },
    { "v4urls", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 30, 31, -1 },
    { "v6urls", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 32, 31, -1 },
    { "fails", "LNetI2pUtilObjectCounter;", .constantValue.asLong = 0, 0x1a, -1, 33, 34, -1 },
    { "locals", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 35, 31, -1 },
    { "TIMEOUT", "J", .constantValue.asLong = NetI2pUtilDNSOverHTTPS_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_TTL", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_MAX_TTL, 0x1a, -1, -1, -1, -1 },
    { "MAX_FAILS", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_MAX_FAILS, 0x1a, -1, -1, -1, -1 },
    { "V4_CODE", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_V4_CODE, 0x1a, -1, -1, -1, -1 },
    { "CNAME_CODE", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_CNAME_CODE, 0x1a, -1, -1, -1, -1 },
    { "V6_CODE", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_V6_CODE, 0x1a, -1, -1, -1, -1 },
    { "MAX_DATE_SETS", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_MAX_DATE_SETS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_STRATUM", "I", .constantValue.asInt = NetI2pUtilDNSOverHTTPS_DEFAULT_STRATUM, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;LNetI2pUtilSSLEepGet_SSLState;", "lookup", "LNSString;", "LNSString;LNetI2pUtilDNSOverHTTPS_Type;", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Lnet/i2p/util/DNSOverHTTPS$Result;>;)Ljava/lang/String;", "query", "LNSString;ZLJavaUtilList;", "(Ljava/lang/String;ZLjava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "fetch", "LNetI2pUtilSSLEepGet;LNSString;Z", "attemptFailed", "LNSString;JJIILJavaLangException;", "bytesTransferred", "JIJJLNSString;", "transferComplete", "JJJLNSString;LNSString;Z", "transferFailed", "LNSString;JJI", "attempting", "headerReceived", "LNSString;ILNSString;LNSString;", "log", "LNSString;LJavaLangThrowable;", "main", "[LNSString;", &NetI2pUtilDNSOverHTTPS_v4Cache, "Ljava/util/Map<Ljava/lang/String;Lnet/i2p/util/DNSOverHTTPS$Result;>;", &NetI2pUtilDNSOverHTTPS_v6Cache, &NetI2pUtilDNSOverHTTPS_v4urls, "Ljava/util/List<Ljava/lang/String;>;", &NetI2pUtilDNSOverHTTPS_v6urls, &NetI2pUtilDNSOverHTTPS_fails, "Lnet/i2p/util/ObjectCounter<Ljava/lang/String;>;", &NetI2pUtilDNSOverHTTPS_locals, "LNetI2pUtilDNSOverHTTPS_Type;LNetI2pUtilDNSOverHTTPS_Result;" };
  static const J2ObjcClassInfo _NetI2pUtilDNSOverHTTPS = { "DNSOverHTTPS", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 19, 21, -1, 36, -1, -1, -1 };
  return &_NetI2pUtilDNSOverHTTPS;
}

+ (void)initialize {
  if (self == [NetI2pUtilDNSOverHTTPS class]) {
    JreStrongAssignAndConsume(&NetI2pUtilDNSOverHTTPS_v4Cache, new_NetI2pUtilLHMCache_initWithInt_(32));
    JreStrongAssignAndConsume(&NetI2pUtilDNSOverHTTPS_v6Cache, new_NetI2pUtilLHMCache_initWithInt_(32));
    JreStrongAssignAndConsume(&NetI2pUtilDNSOverHTTPS_v4urls, new_JavaUtilArrayList_initWithInt_(4));
    JreStrongAssignAndConsume(&NetI2pUtilDNSOverHTTPS_v6urls, new_JavaUtilArrayList_initWithInt_(4));
    JreStrongAssignAndConsume(&NetI2pUtilDNSOverHTTPS_fails, new_NetI2pUtilObjectCounter_init());
    JreStrongAssign(&NetI2pUtilDNSOverHTTPS_locals, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"localhost", @"in-addr.arpa", @"ip6.arpa", @"home.arpa", @"i2p", @"onion", @"i2p.arpa", @"onion.arpa", @"corp", @"home", @"internal", @"intranet", @"lan", @"local", @"private", @"test", @"example", @"invalid", @"a", @"b", @"c", @"d", @"e", @"f", @"g", @"h", @"i", @"j", @"k", @"l", @"m", @"n", @"o", @"p", @"q", @"r", @"s", @"t", @"u", @"v", @"w", @"x", @"y", @"z" } count:44 type:NSString_class_()]));
    {
      [NetI2pUtilDNSOverHTTPS_v4urls addWithId:@"https://dns.google.com/resolve?edns_client_subnet=0.0.0.0/0&"];
      [NetI2pUtilDNSOverHTTPS_v6urls addWithId:@"https://dns.google.com/resolve?edns_client_subnet=0.0.0.0/0&"];
      [NetI2pUtilDNSOverHTTPS_v4urls addWithId:@"https://1.1.1.1/dns-query?ct=application/dns-json&"];
      [NetI2pUtilDNSOverHTTPS_v4urls addWithId:@"https://1.0.0.1/dns-query?ct=application/dns-json&"];
      [NetI2pUtilDNSOverHTTPS_v6urls addWithId:@"https://[2606:4700:4700::1111]/dns-query?ct=application/dns-json&"];
      [NetI2pUtilDNSOverHTTPS_v6urls addWithId:@"https://[2606:4700:4700::1001]/dns-query?ct=application/dns-json&"];
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilDNSOverHTTPS)
  }
}

@end

void NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(NetI2pUtilDNSOverHTTPS *self, NetI2pI2PAppContext *context) {
  NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(self, context, nil);
}

NetI2pUtilDNSOverHTTPS *new_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilDNSOverHTTPS, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilDNSOverHTTPS *create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilDNSOverHTTPS, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(NetI2pUtilDNSOverHTTPS *self, NetI2pI2PAppContext *context, NetI2pUtilSSLEepGet_SSLState *sslState) {
  NSObject_init(self);
  JreStrongAssign(&self->ctx_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) logManager])) getLogWithIOSClass:NetI2pUtilDNSOverHTTPS_class_()]);
  JreStrongAssign(&self->state_, sslState);
  JreStrongAssignAndConsume(&self->baos_, new_JavaIoByteArrayOutputStream_initWithInt_(512));
  JreStrongAssignAndConsume(&self->parser_, new_NetMinidevJsonParserJSONParser_initWithInt_(NetMinidevJsonParserJSONParser_MODE_PERMISSIVE));
}

NetI2pUtilDNSOverHTTPS *new_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *context, NetI2pUtilSSLEepGet_SSLState *sslState) {
  J2OBJC_NEW_IMPL(NetI2pUtilDNSOverHTTPS, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_, context, sslState)
}

NetI2pUtilDNSOverHTTPS *create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_(NetI2pI2PAppContext *context, NetI2pUtilSSLEepGet_SSLState *sslState) {
  J2OBJC_CREATE_IMPL(NetI2pUtilDNSOverHTTPS, initWithNetI2pI2PAppContext_withNetI2pUtilSSLEepGet_SSLState_, context, sslState)
}

void NetI2pUtilDNSOverHTTPS_clearCaches() {
  NetI2pUtilDNSOverHTTPS_initialize();
  @synchronized(NetI2pUtilDNSOverHTTPS_v4Cache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pUtilDNSOverHTTPS_v4Cache)) clear];
  }
  @synchronized(NetI2pUtilDNSOverHTTPS_v6Cache) {
    [((id<JavaUtilMap>) nil_chk(NetI2pUtilDNSOverHTTPS_v6Cache)) clear];
  }
  [((NetI2pUtilObjectCounter *) nil_chk(NetI2pUtilDNSOverHTTPS_fails)) clear];
}

NSString *NetI2pUtilDNSOverHTTPS_lookupWithNSString_withJavaUtilMap_(NSString *host, id<JavaUtilMap> cache) {
  NetI2pUtilDNSOverHTTPS_initialize();
  @synchronized(cache) {
    NetI2pUtilDNSOverHTTPS_Result *r = [((id<JavaUtilMap>) nil_chk(cache)) getWithId:host];
    if (r != nil) {
      if (r->expires_ >= JavaLangSystem_currentTimeMillis()) return JreRetainedLocalValue(r->ip_);
      [cache removeWithId:host];
    }
  }
  return nil;
}

NSString *NetI2pUtilDNSOverHTTPS_queryWithNSString_withNetI2pUtilDNSOverHTTPS_Type_(NetI2pUtilDNSOverHTTPS *self, NSString *host, NetI2pUtilDNSOverHTTPS_Type *type) {
  id<JavaUtilList> toQuery = create_JavaUtilArrayList_initWithJavaUtilCollection_((type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_ONLY)) ? NetI2pUtilDNSOverHTTPS_v6urls : NetI2pUtilDNSOverHTTPS_v4urls);
  JavaUtilCollections_shuffleWithJavaUtilList_(toQuery);
  if (type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY) || type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(self, host, false, toQuery);
    if (rv != nil) return rv;
  }
  if (type != JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(self, host, true, toQuery);
    if (rv != nil) return rv;
  }
  if (type == JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED)) {
    NSString *rv = NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(self, host, false, toQuery);
    if (rv != nil) return rv;
  }
  return nil;
}

NSString *NetI2pUtilDNSOverHTTPS_queryWithNSString_withBoolean_withJavaUtilList_(NetI2pUtilDNSOverHTTPS *self, NSString *host, jboolean isv6, id<JavaUtilList> toQuery) {
  for (NSString * __strong url in nil_chk(toQuery)) {
    if ([((NetI2pUtilObjectCounter *) nil_chk(NetI2pUtilDNSOverHTTPS_fails)) countWithId:url] > NetI2pUtilDNSOverHTTPS_MAX_FAILS) continue;
    jint tcode = isv6 ? NetI2pUtilDNSOverHTTPS_V6_CODE : NetI2pUtilDNSOverHTTPS_V4_CODE;
    NSString *furl = JreStrcat("$$$$I", url, @"name=", host, @"&type=", tcode);
    NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"Fetching ", furl));
    [((JavaIoByteArrayOutputStream *) nil_chk(self->baos_)) reset];
    NetI2pUtilSSLEepGet *eepget = create_NetI2pUtilSSLEepGet_initWithNetI2pI2PAppContext_withJavaIoOutputStream_withNSString_withNetI2pUtilSSLEepGet_SSLState_(self->ctx_, self->baos_, furl, self->state_);
    if ([((NetI2pI2PAppContext *) nil_chk(self->ctx_)) isRouterContext]) [eepget addStatusListenerWithNetI2pUtilEepGet_StatusListener:self];
    else self->fetchStart_ = JavaLangSystem_currentTimeMillis();
    NSString *rv = NetI2pUtilDNSOverHTTPS_fetchWithNetI2pUtilSSLEepGet_withNSString_withBoolean_(self, eepget, host, isv6);
    if (rv != nil) {
      [NetI2pUtilDNSOverHTTPS_fails clearWithId:url];
      return rv;
    }
    if (self->state_ == nil) JreStrongAssign(&self->state_, [eepget getSSLState]);
    [NetI2pUtilDNSOverHTTPS_fails incrementWithId:url];
    NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"No result from ", furl));
  }
  return nil;
}

NSString *NetI2pUtilDNSOverHTTPS_fetchWithNetI2pUtilSSLEepGet_withNSString_withBoolean_(NetI2pUtilDNSOverHTTPS *self, NetI2pUtilSSLEepGet *eepget, NSString *host, jboolean isv6) {
  if ([((NetI2pUtilSSLEepGet *) nil_chk(eepget)) fetchWithLong:NetI2pUtilDNSOverHTTPS_TIMEOUT withLong:NetI2pUtilDNSOverHTTPS_TIMEOUT withLong:NetI2pUtilDNSOverHTTPS_TIMEOUT] && [eepget getStatusCode] == 200 && [((JavaIoByteArrayOutputStream *) nil_chk(self->baos_)) size] > 0) {
    jlong end = JavaLangSystem_currentTimeMillis();
    NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$J$", @"Got response in ", (end - self->fetchStart_), @"ms"));
    IOSByteArray *b = [((JavaIoByteArrayOutputStream *) nil_chk(self->baos_)) toByteArray];
    @try {
      NetMinidevJsonJSONObject *map = (NetMinidevJsonJSONObject *) cast_chk([((NetMinidevJsonParserJSONParser *) nil_chk(self->parser_)) parseWithByteArray:b], [NetMinidevJsonJSONObject class]);
      if (map == nil) {
        NetI2pUtilDNSOverHTTPS_logWithNSString_(self, @"No map");
        return nil;
      }
      JavaLangInteger *status = (JavaLangInteger *) cast_chk([map getWithId:@"Status"], [JavaLangInteger class]);
      if (status == nil || [status intValue] != 0) {
        NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$@", @"Bad status: ", status));
        return nil;
      }
      NetMinidevJsonJSONArray *list = (NetMinidevJsonJSONArray *) cast_chk([map getWithId:@"Answer"], [NetMinidevJsonJSONArray class]);
      if (list == nil || [list isEmpty]) {
        NetI2pUtilDNSOverHTTPS_logWithNSString_(self, @"No answer");
        return nil;
      }
      NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("I$", [list size], @" answers"));
      NSString *hostAnswer = JreStrcat("$C", host, '.');
      for (id __strong o in list) {
        @try {
          NetMinidevJsonJSONObject *a = (NetMinidevJsonJSONObject *) cast_chk(o, [NetMinidevJsonJSONObject class]);
          NSString *data = (NSString *) cast_chk([((NetMinidevJsonJSONObject *) nil_chk(a)) getWithId:@"data"], [NSString class]);
          if (data == nil) {
            NetI2pUtilDNSOverHTTPS_logWithNSString_(self, @"no data");
            continue;
          }
          JavaLangInteger *typ = (JavaLangInteger *) cast_chk([a getWithId:@"type"], [JavaLangInteger class]);
          if (typ == nil) continue;
          NSString *name = (NSString *) cast_chk([a getWithId:@"name"], [NSString class]);
          if (name == nil) continue;
          if ([typ intValue] == NetI2pUtilDNSOverHTTPS_CNAME_CODE) {
            NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"CNAME is: ", data));
            hostAnswer = data;
            continue;
          }
          if (isv6) {
            if ([typ intValue] != NetI2pUtilDNSOverHTTPS_V6_CODE) {
              NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$@", @"type mismatch: ", typ));
              continue;
            }
            if (!NetI2pUtilAddresses_isIPv6AddressWithNSString_(data)) {
              NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"bad addr: ", data));
              continue;
            }
          }
          else {
            if ([typ intValue] != NetI2pUtilDNSOverHTTPS_V4_CODE) {
              NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$@", @"type mismatch: ", typ));
              continue;
            }
            if (!NetI2pUtilAddresses_isIPv4AddressWithNSString_(data)) {
              NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"bad addr: ", data));
              continue;
            }
          }
          if (![hostAnswer isEqual:name]) {
            NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"name mismatch: ", name));
            continue;
          }
          JavaLangInteger *ttl = (JavaLangInteger *) cast_chk([a getWithId:@"TTL"], [JavaLangInteger class]);
          jint ittl = (ttl != nil) ? JavaLangMath_minWithInt_withInt_([((JavaLangInteger *) nil_chk(ttl)) intValue], NetI2pUtilDNSOverHTTPS_MAX_TTL) : 3600;
          jlong expires = end + (ittl * 1000LL);
          id<JavaUtilMap> cache = isv6 ? NetI2pUtilDNSOverHTTPS_v6Cache : NetI2pUtilDNSOverHTTPS_v4Cache;
          @synchronized(cache) {
            [cache putWithId:host withId:create_NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(data, expires)];
          }
          NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$C@C@C$$J$", @"Got answer: ", name, ' ', typ, ' ', ttl, ' ', data, @" in ", (end - self->fetchStart_), @"ms"));
          return data;
        }
        @catch (JavaLangException *e) {
          NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(self, @"Fail parsing", e);
        }
      }
    }
    @catch (JavaLangException *e) {
      NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(self, @"Fail parsing", e);
    }
    NetI2pUtilDNSOverHTTPS_logWithNSString_(self, JreStrcat("$$", @"Bad response:\n", [NSString java_stringWithBytes:b]));
  }
  else {
    NetI2pUtilDNSOverHTTPS_logWithNSString_(self, @"Fail fetching");
  }
  return nil;
}

void NetI2pUtilDNSOverHTTPS_logWithNSString_(NetI2pUtilDNSOverHTTPS *self, NSString *msg) {
  NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(self, msg, nil);
}

void NetI2pUtilDNSOverHTTPS_logWithNSString_withJavaLangThrowable_(NetI2pUtilDNSOverHTTPS *self, NSString *msg, JavaLangThrowable *t) {
  jint level = (t != nil) ? NetI2pUtilLog_WARN : NetI2pUtilLog_INFO;
  [((NetI2pUtilLog *) nil_chk(self->_log_)) logWithInt:level withNSString:msg withJavaLangThrowable:t];
}

void NetI2pUtilDNSOverHTTPS_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilDNSOverHTTPS_initialize();
  NetI2pUtilDNSOverHTTPS_Type *type = JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED);
  jboolean error = false;
  GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"dnsoverhttps", args, @"46fs");
  @try {
    jint c;
    while ((c = [g getopt]) != -1) {
      switch (c) {
        case '4':
        type = JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY);
        break;
        case '6':
        type = JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_ONLY);
        break;
        case 'f':
        type = JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED);
        break;
        case 's':
        type = JreLoadEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED);
        break;
        case '?':
        case ':':
        default:
        error = true;
        break;
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [e printStackTrace];
    error = true;
  }
  if (error || ((IOSObjectArray *) nil_chk(args))->size_ - [g getOptind] != 1) {
    NetI2pUtilDNSOverHTTPS_usage();
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *url = IOSObjectArray_Get(nil_chk(args), [g getOptind]);
  NSString *result = [(create_NetI2pUtilDNSOverHTTPS_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext_getGlobalContext())) lookupWithNSString:url withNetI2pUtilDNSOverHTTPS_Type:type];
  if (result != nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@$$$$", type, @" lookup for ", url, @" is ", result)];
  else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("@$$", type, @" lookup failed for ", url)];
}

void NetI2pUtilDNSOverHTTPS_usage() {
  NetI2pUtilDNSOverHTTPS_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"DNSOverHTTPS [-fs46] hostname\n             [-f] (IPv4 preferred) (default)\n             [-s] (IPv6 preferred)\n             [-4] (IPv4 only)\n             [-6] (IPv6 only)"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilDNSOverHTTPS)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilDNSOverHTTPS_Type)

NetI2pUtilDNSOverHTTPS_Type *NetI2pUtilDNSOverHTTPS_Type_values_[4];

@implementation NetI2pUtilDNSOverHTTPS_Type

+ (NetI2pUtilDNSOverHTTPS_Type *)V4_ONLY {
  return JreEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY);
}

+ (NetI2pUtilDNSOverHTTPS_Type *)V6_ONLY {
  return JreEnum(NetI2pUtilDNSOverHTTPS_Type, V6_ONLY);
}

+ (NetI2pUtilDNSOverHTTPS_Type *)V4_PREFERRED {
  return JreEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED);
}

+ (NetI2pUtilDNSOverHTTPS_Type *)V6_PREFERRED {
  return JreEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED);
}

+ (IOSObjectArray *)values {
  return NetI2pUtilDNSOverHTTPS_Type_values();
}

+ (NetI2pUtilDNSOverHTTPS_Type *)valueOfWithNSString:(NSString *)name {
  return NetI2pUtilDNSOverHTTPS_Type_valueOfWithNSString_(name);
}

- (NetI2pUtilDNSOverHTTPS_Type_Enum)toNSEnum {
  return (NetI2pUtilDNSOverHTTPS_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pUtilDNSOverHTTPS_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilDNSOverHTTPS_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "V4_ONLY", "LNetI2pUtilDNSOverHTTPS_Type;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "V6_ONLY", "LNetI2pUtilDNSOverHTTPS_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "V4_PREFERRED", "LNetI2pUtilDNSOverHTTPS_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "V6_PREFERRED", "LNetI2pUtilDNSOverHTTPS_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pUtilDNSOverHTTPS_Type, V4_ONLY), &JreEnum(NetI2pUtilDNSOverHTTPS_Type, V6_ONLY), &JreEnum(NetI2pUtilDNSOverHTTPS_Type, V4_PREFERRED), &JreEnum(NetI2pUtilDNSOverHTTPS_Type, V6_PREFERRED), "LNetI2pUtilDNSOverHTTPS;", "Ljava/lang/Enum<Lnet/i2p/util/DNSOverHTTPS$Type;>;" };
  static const J2ObjcClassInfo _NetI2pUtilDNSOverHTTPS_Type = { "Type", "net.i2p.util", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pUtilDNSOverHTTPS_Type;
}

+ (void)initialize {
  if (self == [NetI2pUtilDNSOverHTTPS_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pUtilDNSOverHTTPS_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pUtilDNSOverHTTPS_Type_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pUtilDNSOverHTTPS_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilDNSOverHTTPS_Type)
  }
}

@end

void NetI2pUtilDNSOverHTTPS_Type_initWithNSString_withInt_(NetI2pUtilDNSOverHTTPS_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pUtilDNSOverHTTPS_Type_values() {
  NetI2pUtilDNSOverHTTPS_Type_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pUtilDNSOverHTTPS_Type_values_ count:4 type:NetI2pUtilDNSOverHTTPS_Type_class_()];
}

NetI2pUtilDNSOverHTTPS_Type *NetI2pUtilDNSOverHTTPS_Type_valueOfWithNSString_(NSString *name) {
  NetI2pUtilDNSOverHTTPS_Type_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pUtilDNSOverHTTPS_Type *e = NetI2pUtilDNSOverHTTPS_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pUtilDNSOverHTTPS_Type *NetI2pUtilDNSOverHTTPS_Type_fromOrdinal(NSUInteger ordinal) {
  NetI2pUtilDNSOverHTTPS_Type_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pUtilDNSOverHTTPS_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilDNSOverHTTPS_Type)

@implementation NetI2pUtilDNSOverHTTPS_Result

- (instancetype)initWithNSString:(NSString *)i
                        withLong:(jlong)e {
  NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(self, i, e);
  return self;
}

- (void)dealloc {
  RELEASE_(ip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ip_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "expires_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;J", "LNetI2pUtilDNSOverHTTPS;" };
  static const J2ObjcClassInfo _NetI2pUtilDNSOverHTTPS_Result = { "Result", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilDNSOverHTTPS_Result;
}

@end

void NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NetI2pUtilDNSOverHTTPS_Result *self, NSString *i, jlong e) {
  NSObject_init(self);
  JreStrongAssign(&self->ip_, i);
  self->expires_ = e;
}

NetI2pUtilDNSOverHTTPS_Result *new_NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NSString *i, jlong e) {
  J2OBJC_NEW_IMPL(NetI2pUtilDNSOverHTTPS_Result, initWithNSString_withLong_, i, e)
}

NetI2pUtilDNSOverHTTPS_Result *create_NetI2pUtilDNSOverHTTPS_Result_initWithNSString_withLong_(NSString *i, jlong e) {
  J2OBJC_CREATE_IMPL(NetI2pUtilDNSOverHTTPS_Result, initWithNSString_withLong_, i, e)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilDNSOverHTTPS_Result)
