//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/I2PSSLSocketFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilI2PSSLSocketFactory")
#ifdef RESTRICT_NetI2pUtilI2PSSLSocketFactory
#define INCLUDE_ALL_NetI2pUtilI2PSSLSocketFactory 0
#else
#define INCLUDE_ALL_NetI2pUtilI2PSSLSocketFactory 1
#endif
#undef RESTRICT_NetI2pUtilI2PSSLSocketFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilI2PSSLSocketFactory_) && (INCLUDE_ALL_NetI2pUtilI2PSSLSocketFactory || defined(INCLUDE_NetI2pUtilI2PSSLSocketFactory))
#define NetI2pUtilI2PSSLSocketFactory_

@class JavaNetInetAddress;
@class JavaNetSocket;
@class JavaxNetSslSSLServerSocket;
@class JavaxNetSslSSLSocket;
@class NetI2pI2PAppContext;
@protocol JavaUtilList;

@interface NetI2pUtilI2PSSLSocketFactory : NSObject
@property (readonly, class, strong) id<JavaUtilList> EXCLUDE_PROTOCOLS NS_SWIFT_NAME(EXCLUDE_PROTOCOLS);
@property (readonly, class, strong) id<JavaUtilList> INCLUDE_PROTOCOLS NS_SWIFT_NAME(INCLUDE_PROTOCOLS);
@property (readonly, class, strong) id<JavaUtilList> EXCLUDE_CIPHERS NS_SWIFT_NAME(EXCLUDE_CIPHERS);
@property (readonly, class, strong) id<JavaUtilList> INCLUDE_CIPHERS NS_SWIFT_NAME(INCLUDE_CIPHERS);

+ (id<JavaUtilList>)EXCLUDE_PROTOCOLS;

+ (id<JavaUtilList>)INCLUDE_PROTOCOLS;

+ (id<JavaUtilList>)EXCLUDE_CIPHERS;

+ (id<JavaUtilList>)INCLUDE_CIPHERS;

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                          withBoolean:(jboolean)loadSystemCerts
                                         withNSString:(NSString *)relativeCertPath;

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)host
                                              withInt:(jint)port;

- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port;

+ (void)setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket:(JavaxNetSslSSLServerSocket *)socket;

+ (void)setProtocolsAndCiphersWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

+ (void)verifyHostnameWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                     withJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket
                                 withNSString:(NSString *)host;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(NetI2pUtilI2PSSLSocketFactory)

inline id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_get_EXCLUDE_PROTOCOLS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, EXCLUDE_PROTOCOLS, id<JavaUtilList>)

inline id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_get_INCLUDE_PROTOCOLS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, INCLUDE_PROTOCOLS, id<JavaUtilList>)

inline id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_get_EXCLUDE_CIPHERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, EXCLUDE_CIPHERS, id<JavaUtilList>)

inline id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_get_INCLUDE_CIPHERS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, INCLUDE_CIPHERS, id<JavaUtilList>)

FOUNDATION_EXPORT void NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pUtilI2PSSLSocketFactory *self, NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath);

FOUNDATION_EXPORT NetI2pUtilI2PSSLSocketFactory *new_NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PSSLSocketFactory *create_NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath);

FOUNDATION_EXPORT void NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(NetI2pI2PAppContext *ctx, JavaxNetSslSSLSocket *socket, NSString *host);

FOUNDATION_EXPORT void NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(JavaxNetSslSSLSocket *socket);

FOUNDATION_EXPORT void NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket_(JavaxNetSslSSLServerSocket *socket);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilI2PSSLSocketFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilI2PSSLSocketFactory")
