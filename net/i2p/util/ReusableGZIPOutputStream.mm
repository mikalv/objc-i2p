//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ReusableGZIPOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/zip/Deflater.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/ResettableGZIPOutputStream.h"
#include "net/i2p/util/ReusableGZIPOutputStream.h"

@interface NetI2pUtilReusableGZIPOutputStream () {
 @public
  JavaIoByteArrayOutputStream *_buffer_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilReusableGZIPOutputStream, _buffer_, JavaIoByteArrayOutputStream *)

inline jboolean NetI2pUtilReusableGZIPOutputStream_get_ENABLE_CACHING(void);
#define NetI2pUtilReusableGZIPOutputStream_ENABLE_CACHING false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilReusableGZIPOutputStream, ENABLE_CACHING, jboolean)

inline JavaUtilConcurrentLinkedBlockingQueue *NetI2pUtilReusableGZIPOutputStream_get__available(void);
static JavaUtilConcurrentLinkedBlockingQueue *NetI2pUtilReusableGZIPOutputStream__available;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilReusableGZIPOutputStream, _available, JavaUtilConcurrentLinkedBlockingQueue *)

__attribute__((unused)) static void NetI2pUtilReusableGZIPOutputStream_init(NetI2pUtilReusableGZIPOutputStream *self);

__attribute__((unused)) static NetI2pUtilReusableGZIPOutputStream *new_NetI2pUtilReusableGZIPOutputStream_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilReusableGZIPOutputStream *create_NetI2pUtilReusableGZIPOutputStream_init(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilReusableGZIPOutputStream)

@implementation NetI2pUtilReusableGZIPOutputStream

+ (NetI2pUtilReusableGZIPOutputStream *)acquire {
  return NetI2pUtilReusableGZIPOutputStream_acquire();
}

+ (void)release__WithNetI2pUtilReusableGZIPOutputStream:(NetI2pUtilReusableGZIPOutputStream *)outArg {
  NetI2pUtilReusableGZIPOutputStream_release__WithNetI2pUtilReusableGZIPOutputStream_(outArg);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilReusableGZIPOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  [super reset];
  [((JavaIoByteArrayOutputStream *) nil_chk(_buffer_)) reset];
  [((JavaUtilZipDeflater *) nil_chk(def_)) setLevelWithInt:JavaUtilZipDeflater_BEST_COMPRESSION];
}

- (void)setLevelWithInt:(jint)level {
  [((JavaUtilZipDeflater *) nil_chk(def_)) setLevelWithInt:level];
}

- (IOSByteArray *)getData {
  return [((JavaIoByteArrayOutputStream *) nil_chk(_buffer_)) toByteArray];
}

+ (void)clearCache {
  NetI2pUtilReusableGZIPOutputStream_clearCache();
}

- (void)dealloc {
  RELEASE_(_buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilReusableGZIPOutputStream;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(acquire);
  methods[1].selector = @selector(release__WithNetI2pUtilReusableGZIPOutputStream:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(setLevelWithInt:);
  methods[5].selector = @selector(getData);
  methods[6].selector = @selector(clearCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ENABLE_CACHING", "Z", .constantValue.asBOOL = NetI2pUtilReusableGZIPOutputStream_ENABLE_CACHING, 0x1a, -1, -1, -1, -1 },
    { "_available", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x1a, -1, 4, 5, -1 },
    { "_buffer_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "release", "LNetI2pUtilReusableGZIPOutputStream;", "setLevel", "I", &NetI2pUtilReusableGZIPOutputStream__available, "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/util/ReusableGZIPOutputStream;>;" };
  static const J2ObjcClassInfo _NetI2pUtilReusableGZIPOutputStream = { "ReusableGZIPOutputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilReusableGZIPOutputStream;
}

+ (void)initialize {
  if (self == [NetI2pUtilReusableGZIPOutputStream class]) {
    {
      JreStrongAssign(&NetI2pUtilReusableGZIPOutputStream__available, nil);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilReusableGZIPOutputStream)
  }
}

@end

NetI2pUtilReusableGZIPOutputStream *NetI2pUtilReusableGZIPOutputStream_acquire() {
  NetI2pUtilReusableGZIPOutputStream_initialize();
  NetI2pUtilReusableGZIPOutputStream *rv = nil;
  if (rv == nil) {
    rv = create_NetI2pUtilReusableGZIPOutputStream_init();
  }
  return rv;
}

void NetI2pUtilReusableGZIPOutputStream_release__WithNetI2pUtilReusableGZIPOutputStream_(NetI2pUtilReusableGZIPOutputStream *outArg) {
  NetI2pUtilReusableGZIPOutputStream_initialize();
  [((NetI2pUtilReusableGZIPOutputStream *) nil_chk(outArg)) reset];
}

void NetI2pUtilReusableGZIPOutputStream_init(NetI2pUtilReusableGZIPOutputStream *self) {
  NetI2pUtilResettableGZIPOutputStream_initWithJavaIoOutputStream_(self, create_JavaIoByteArrayOutputStream_initWithInt_(NetI2pDataDataHelper_MAX_UNCOMPRESSED));
  JreStrongAssign(&self->_buffer_, (JavaIoByteArrayOutputStream *) cast_chk(self->out_, [JavaIoByteArrayOutputStream class]));
}

NetI2pUtilReusableGZIPOutputStream *new_NetI2pUtilReusableGZIPOutputStream_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilReusableGZIPOutputStream, init)
}

NetI2pUtilReusableGZIPOutputStream *create_NetI2pUtilReusableGZIPOutputStream_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilReusableGZIPOutputStream, init)
}

void NetI2pUtilReusableGZIPOutputStream_clearCache() {
  NetI2pUtilReusableGZIPOutputStream_initialize();
  if (NetI2pUtilReusableGZIPOutputStream__available != nil) [NetI2pUtilReusableGZIPOutputStream__available clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilReusableGZIPOutputStream)
