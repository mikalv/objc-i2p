//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/I2PSSLSocketFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/KeyStore.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLHandshakeException.h"
#include "javax/net/ssl/SSLServerSocket.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/KeyStoreUtil.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/I2PSSLSocketFactory.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"
#include "org/apache/http/conn/ssl/DefaultHostnameVerifier.h"
#include "org/apache/http/conn/util/PublicSuffixList.h"
#include "org/apache/http/conn/util/PublicSuffixListParser.h"
#include "org/apache/http/conn/util/PublicSuffixMatcher.h"

@interface NetI2pUtilI2PSSLSocketFactory () {
 @public
  JavaxNetSslSSLSocketFactory *_factory_;
  NetI2pI2PAppContext *_context_;
}

+ (OrgApacheHttpConnUtilPublicSuffixMatcher *)getDefaultMatcherWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (OrgApacheHttpConnUtilPublicSuffixList *)mergeWithOrgApacheHttpConnUtilPublicSuffixList:(OrgApacheHttpConnUtilPublicSuffixList *)a
                                                withOrgApacheHttpConnUtilPublicSuffixList:(OrgApacheHttpConnUtilPublicSuffixList *)b;

+ (void)addCountriesWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withJavaUtilList:(id<JavaUtilList>)tlds;

+ (JavaxNetSslSSLSocketFactory *)initSSLContextWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                                           withBoolean:(jboolean)loadSystemCerts
                                                          withNSString:(NSString *)relativeCertPath OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)selectProtocolsWithNSStringArray:(IOSObjectArray *)enabledProtocols
                                   withNSStringArray:(IOSObjectArray *)supportedProtocols;

+ (IOSObjectArray *)selectCipherSuitesWithNSStringArray:(IOSObjectArray *)enabledCipherSuites
                                      withNSStringArray:(IOSObjectArray *)supportedCipherSuites;

+ (IOSObjectArray *)selectWithNSStringArray:(IOSObjectArray *)enabledArr
                          withNSStringArray:(IOSObjectArray *)supportedArr
                           withJavaUtilList:(id<JavaUtilList>)toEnable
                           withJavaUtilList:(id<JavaUtilList>)toExclude;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilI2PSSLSocketFactory, _factory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(NetI2pUtilI2PSSLSocketFactory, _context_, NetI2pI2PAppContext *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_PROP_DISABLE(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_PROP_DISABLE = @"i2p.disableSSLHostnameVerification";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, PROP_DISABLE, NSString *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_PROP_GEOIP_DIR(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_PROP_GEOIP_DIR = @"geoip.dir";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, PROP_GEOIP_DIR, NSString *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_GEOIP_DIR_DEFAULT(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_GEOIP_DIR_DEFAULT = @"geoip";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, GEOIP_DIR_DEFAULT, NSString *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_GEOIP_FILE_DEFAULT(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_GEOIP_FILE_DEFAULT = @"geoip.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, GEOIP_FILE_DEFAULT, NSString *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_COUNTRY_FILE_DEFAULT(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_COUNTRY_FILE_DEFAULT = @"countries.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, COUNTRY_FILE_DEFAULT, NSString *)

inline NSString *NetI2pUtilI2PSSLSocketFactory_get_PUBLIC_SUFFIX_LIST(void);
static NSString *NetI2pUtilI2PSSLSocketFactory_PUBLIC_SUFFIX_LIST = @"public-suffix-list.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, PUBLIC_SUFFIX_LIST, NSString *)

inline OrgApacheHttpConnUtilPublicSuffixMatcher *NetI2pUtilI2PSSLSocketFactory_get_DEFAULT_MATCHER(void);
inline OrgApacheHttpConnUtilPublicSuffixMatcher *NetI2pUtilI2PSSLSocketFactory_set_DEFAULT_MATCHER(OrgApacheHttpConnUtilPublicSuffixMatcher *value);
static OrgApacheHttpConnUtilPublicSuffixMatcher *NetI2pUtilI2PSSLSocketFactory_DEFAULT_MATCHER;
J2OBJC_STATIC_FIELD_OBJ(NetI2pUtilI2PSSLSocketFactory, DEFAULT_MATCHER, OrgApacheHttpConnUtilPublicSuffixMatcher *)

inline jboolean NetI2pUtilI2PSSLSocketFactory_get__matcherLoaded(void);
inline jboolean NetI2pUtilI2PSSLSocketFactory_set__matcherLoaded(jboolean value);
inline jboolean *NetI2pUtilI2PSSLSocketFactory_getRef__matcherLoaded(void);
static jboolean NetI2pUtilI2PSSLSocketFactory__matcherLoaded;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilI2PSSLSocketFactory, _matcherLoaded, jboolean)

inline IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_get_DEFAULT_TLDS(void);
static IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_DEFAULT_TLDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, DEFAULT_TLDS, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_get_ADDITIONAL_TLDS(void);
static IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_ADDITIONAL_TLDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PSSLSocketFactory, ADDITIONAL_TLDS, IOSObjectArray *)

__attribute__((unused)) static OrgApacheHttpConnUtilPublicSuffixMatcher *NetI2pUtilI2PSSLSocketFactory_getDefaultMatcherWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

__attribute__((unused)) static OrgApacheHttpConnUtilPublicSuffixList *NetI2pUtilI2PSSLSocketFactory_mergeWithOrgApacheHttpConnUtilPublicSuffixList_withOrgApacheHttpConnUtilPublicSuffixList_(OrgApacheHttpConnUtilPublicSuffixList *a, OrgApacheHttpConnUtilPublicSuffixList *b);

__attribute__((unused)) static void NetI2pUtilI2PSSLSocketFactory_addCountriesWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *ctx, id<JavaUtilList> tlds);

__attribute__((unused)) static JavaxNetSslSSLSocketFactory *NetI2pUtilI2PSSLSocketFactory_initSSLContextWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectProtocolsWithNSStringArray_withNSStringArray_(IOSObjectArray *enabledProtocols, IOSObjectArray *supportedProtocols);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectCipherSuitesWithNSStringArray_withNSStringArray_(IOSObjectArray *enabledCipherSuites, IOSObjectArray *supportedCipherSuites);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectWithNSStringArray_withNSStringArray_withJavaUtilList_withJavaUtilList_(IOSObjectArray *enabledArr, IOSObjectArray *supportedArr, id<JavaUtilList> toEnable, id<JavaUtilList> toExclude);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilI2PSSLSocketFactory)

id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS;
id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS;
id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS;
id<JavaUtilList> NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS;

@implementation NetI2pUtilI2PSSLSocketFactory

+ (id<JavaUtilList>)EXCLUDE_PROTOCOLS {
  return NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS;
}

+ (id<JavaUtilList>)INCLUDE_PROTOCOLS {
  return NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS;
}

+ (id<JavaUtilList>)EXCLUDE_CIPHERS {
  return NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS;
}

+ (id<JavaUtilList>)INCLUDE_CIPHERS {
  return NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                withBoolean:(jboolean)loadSystemCerts
                               withNSString:(NSString *)relativeCertPath {
  NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(self, context, loadSystemCerts, relativeCertPath);
  return self;
}

- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port {
  JavaxNetSslSSLSocket *rv = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(_factory_)) createSocketWithNSString:host withInt:port], [JavaxNetSslSSLSocket class]);
  NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(rv);
  NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(_context_, rv, host);
  return rv;
}

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)host
                                              withInt:(jint)port {
  JavaxNetSslSSLSocket *rv = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(_factory_)) createSocketWithJavaNetInetAddress:host withInt:port], [JavaxNetSslSSLSocket class]);
  NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(rv);
  NSString *name = [((JavaNetInetAddress *) nil_chk(host)) getHostName];
  NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(_context_, rv, name);
  return rv;
}

+ (void)verifyHostnameWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                     withJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket
                                 withNSString:(NSString *)host {
  NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(ctx, socket, host);
}

+ (OrgApacheHttpConnUtilPublicSuffixMatcher *)getDefaultMatcherWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  return NetI2pUtilI2PSSLSocketFactory_getDefaultMatcherWithNetI2pI2PAppContext_(ctx);
}

+ (OrgApacheHttpConnUtilPublicSuffixList *)mergeWithOrgApacheHttpConnUtilPublicSuffixList:(OrgApacheHttpConnUtilPublicSuffixList *)a
                                                withOrgApacheHttpConnUtilPublicSuffixList:(OrgApacheHttpConnUtilPublicSuffixList *)b {
  return NetI2pUtilI2PSSLSocketFactory_mergeWithOrgApacheHttpConnUtilPublicSuffixList_withOrgApacheHttpConnUtilPublicSuffixList_(a, b);
}

+ (void)addCountriesWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                           withJavaUtilList:(id<JavaUtilList>)tlds {
  NetI2pUtilI2PSSLSocketFactory_addCountriesWithNetI2pI2PAppContext_withJavaUtilList_(ctx, tlds);
}

+ (JavaxNetSslSSLSocketFactory *)initSSLContextWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                                           withBoolean:(jboolean)loadSystemCerts
                                                          withNSString:(NSString *)relativeCertPath {
  return NetI2pUtilI2PSSLSocketFactory_initSSLContextWithNetI2pI2PAppContext_withBoolean_withNSString_(context, loadSystemCerts, relativeCertPath);
}

+ (void)setProtocolsAndCiphersWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket {
  NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(socket);
}

+ (void)setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket:(JavaxNetSslSSLServerSocket *)socket {
  NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket_(socket);
}

+ (IOSObjectArray *)selectProtocolsWithNSStringArray:(IOSObjectArray *)enabledProtocols
                                   withNSStringArray:(IOSObjectArray *)supportedProtocols {
  return NetI2pUtilI2PSSLSocketFactory_selectProtocolsWithNSStringArray_withNSStringArray_(enabledProtocols, supportedProtocols);
}

+ (IOSObjectArray *)selectCipherSuitesWithNSStringArray:(IOSObjectArray *)enabledCipherSuites
                                      withNSStringArray:(IOSObjectArray *)supportedCipherSuites {
  return NetI2pUtilI2PSSLSocketFactory_selectCipherSuitesWithNSStringArray_withNSStringArray_(enabledCipherSuites, supportedCipherSuites);
}

+ (IOSObjectArray *)selectWithNSStringArray:(IOSObjectArray *)enabledArr
                          withNSStringArray:(IOSObjectArray *)supportedArr
                           withJavaUtilList:(id<JavaUtilList>)toEnable
                           withJavaUtilList:(id<JavaUtilList>)toExclude {
  return NetI2pUtilI2PSSLSocketFactory_selectWithNSStringArray_withNSStringArray_withJavaUtilList_withJavaUtilList_(enabledArr, supportedArr, toEnable, toExclude);
}

- (void)dealloc {
  RELEASE_(_factory_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheHttpConnUtilPublicSuffixMatcher;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHttpConnUtilPublicSuffixList;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaxNetSslSSLSocketFactory;", 0xa, 16, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 19, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 22, 21, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 23, 24, -1, 25, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:);
  methods[1].selector = @selector(createSocketWithNSString:withInt:);
  methods[2].selector = @selector(createSocketWithJavaNetInetAddress:withInt:);
  methods[3].selector = @selector(verifyHostnameWithNetI2pI2PAppContext:withJavaxNetSslSSLSocket:withNSString:);
  methods[4].selector = @selector(getDefaultMatcherWithNetI2pI2PAppContext:);
  methods[5].selector = @selector(mergeWithOrgApacheHttpConnUtilPublicSuffixList:withOrgApacheHttpConnUtilPublicSuffixList:);
  methods[6].selector = @selector(addCountriesWithNetI2pI2PAppContext:withJavaUtilList:);
  methods[7].selector = @selector(initSSLContextWithNetI2pI2PAppContext:withBoolean:withNSString:);
  methods[8].selector = @selector(setProtocolsAndCiphersWithJavaxNetSslSSLSocket:);
  methods[9].selector = @selector(setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket:);
  methods[10].selector = @selector(selectProtocolsWithNSStringArray:withNSStringArray:);
  methods[11].selector = @selector(selectCipherSuitesWithNSStringArray:withNSStringArray:);
  methods[12].selector = @selector(selectWithNSStringArray:withNSStringArray:withJavaUtilList:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_DISABLE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "PROP_GEOIP_DIR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "GEOIP_DIR_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "GEOIP_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "COUNTRY_FILE_DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "PUBLIC_SUFFIX_LIST", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "DEFAULT_MATCHER", "LOrgApacheHttpConnUtilPublicSuffixMatcher;", .constantValue.asLong = 0, 0xa, -1, 32, -1, -1 },
    { "_matcherLoaded", "Z", .constantValue.asLong = 0, 0xa, -1, 33, -1, -1 },
    { "DEFAULT_TLDS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "ADDITIONAL_TLDS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "EXCLUDE_PROTOCOLS", "LJavaUtilList;", .constantValue.asLong = 0, 0x19, -1, 36, 37, -1 },
    { "INCLUDE_PROTOCOLS", "LJavaUtilList;", .constantValue.asLong = 0, 0x19, -1, 38, 37, -1 },
    { "EXCLUDE_CIPHERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x19, -1, 39, 37, -1 },
    { "INCLUDE_CIPHERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x19, -1, 40, 37, -1 },
    { "_factory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;ZLNSString;", "LJavaSecurityGeneralSecurityException;", "createSocket", "LNSString;I", "LJavaIoIOException;", "LJavaNetInetAddress;I", "verifyHostname", "LNetI2pI2PAppContext;LJavaxNetSslSSLSocket;LNSString;", "LJavaxNetSslSSLException;", "getDefaultMatcher", "LNetI2pI2PAppContext;", "merge", "LOrgApacheHttpConnUtilPublicSuffixList;LOrgApacheHttpConnUtilPublicSuffixList;", "addCountries", "LNetI2pI2PAppContext;LJavaUtilList;", "(Lnet/i2p/I2PAppContext;Ljava/util/List<Ljava/lang/String;>;)V", "initSSLContext", "setProtocolsAndCiphers", "LJavaxNetSslSSLSocket;", "LJavaxNetSslSSLServerSocket;", "selectProtocols", "[LNSString;[LNSString;", "selectCipherSuites", "select", "[LNSString;[LNSString;LJavaUtilList;LJavaUtilList;", "([Ljava/lang/String;[Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)[Ljava/lang/String;", &NetI2pUtilI2PSSLSocketFactory_PROP_DISABLE, &NetI2pUtilI2PSSLSocketFactory_PROP_GEOIP_DIR, &NetI2pUtilI2PSSLSocketFactory_GEOIP_DIR_DEFAULT, &NetI2pUtilI2PSSLSocketFactory_GEOIP_FILE_DEFAULT, &NetI2pUtilI2PSSLSocketFactory_COUNTRY_FILE_DEFAULT, &NetI2pUtilI2PSSLSocketFactory_PUBLIC_SUFFIX_LIST, &NetI2pUtilI2PSSLSocketFactory_DEFAULT_MATCHER, &NetI2pUtilI2PSSLSocketFactory__matcherLoaded, &NetI2pUtilI2PSSLSocketFactory_DEFAULT_TLDS, &NetI2pUtilI2PSSLSocketFactory_ADDITIONAL_TLDS, &NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS, "Ljava/util/List<Ljava/lang/String;>;", &NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS, &NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS, &NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS };
  static const J2ObjcClassInfo _NetI2pUtilI2PSSLSocketFactory = { "I2PSSLSocketFactory", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 13, 16, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilI2PSSLSocketFactory;
}

+ (void)initialize {
  if (self == [NetI2pUtilI2PSSLSocketFactory class]) {
    JreStrongAssignAndConsume(&NetI2pUtilI2PSSLSocketFactory_DEFAULT_TLDS, [IOSObjectArray newArrayWithObjects:(id[]){ @"arpa", @"asia", @"biz", @"cat", @"com", @"coop", @"edu", @"gov", @"info", @"int", @"jobs", @"mil", @"mobi", @"museum", @"name", @"net", @"org", @"post", @"pro", @"tel", @"travel", @"xxx" } count:22 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilI2PSSLSocketFactory_ADDITIONAL_TLDS, [IOSObjectArray newArrayWithObjects:(id[]){ @"i2p", @"mooo.com", @"onion" } count:3 type:NSString_class_()]);
    JreStrongAssign(&NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS, JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"SSLv2Hello", @"SSLv3" } count:2 type:NSString_class_()])));
    JreStrongAssign(&NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS, JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"TLSv1", @"TLSv1.1", @"TLSv1.2" } count:3 type:NSString_class_()])));
    JreStrongAssign(&NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS, JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", @"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", @"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", @"SSL_DH_anon_WITH_DES_CBC_SHA", @"SSL_DH_anon_WITH_RC4_128_MD5", @"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", @"SSL_DHE_DSS_WITH_DES_CBC_SHA", @"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", @"SSL_DHE_RSA_WITH_DES_CBC_SHA", @"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", @"SSL_RSA_EXPORT_WITH_RC4_40_MD5", @"SSL_RSA_WITH_DES_CBC_SHA", @"SSL_RSA_WITH_NULL_MD5", @"SSL_RSA_WITH_NULL_SHA", @"TLS_DH_anon_WITH_AES_128_CBC_SHA", @"TLS_DH_anon_WITH_AES_128_CBC_SHA256", @"TLS_DH_anon_WITH_AES_128_GCM_SHA256", @"TLS_DH_anon_WITH_AES_256_CBC_SHA", @"TLS_DH_anon_WITH_AES_256_CBC_SHA256", @"TLS_DH_anon_WITH_AES_256_GCM_SHA384", @"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", @"TLS_ECDH_anon_WITH_AES_128_CBC_SHA", @"TLS_ECDH_anon_WITH_AES_256_CBC_SHA", @"TLS_ECDH_anon_WITH_NULL_SHA", @"TLS_ECDH_anon_WITH_RC4_128_SHA", @"TLS_ECDH_ECDSA_WITH_NULL_SHA", @"TLS_ECDHE_ECDSA_WITH_NULL_SHA", @"TLS_ECDHE_RSA_WITH_NULL_SHA", @"TLS_ECDH_RSA_WITH_NULL_SHA", @"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", @"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", @"TLS_KRB5_EXPORT_WITH_RC4_40_MD5", @"TLS_KRB5_EXPORT_WITH_RC4_40_SHA", @"TLS_KRB5_WITH_3DES_EDE_CBC_MD5", @"TLS_KRB5_WITH_3DES_EDE_CBC_SHA", @"TLS_KRB5_WITH_DES_CBC_MD5", @"TLS_KRB5_WITH_DES_CBC_SHA", @"TLS_KRB5_WITH_RC4_128_MD5", @"TLS_KRB5_WITH_RC4_128_SHA", @"TLS_RSA_WITH_NULL_SHA256", @"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", @"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", @"SSL_RSA_WITH_3DES_EDE_CBC_SHA", @"SSL_RSA_WITH_RC4_128_MD5", @"SSL_RSA_WITH_RC4_128_SHA", @"TLS_ECDH_ECDSA_WITH_RC4_128_SHA", @"TLS_ECDH_RSA_WITH_RC4_128_SHA", @"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", @"TLS_ECDHE_RSA_WITH_RC4_128_SHA", @"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", @"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", @"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", @"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", @"TLS_DHE_DSS_WITH_AES_128_CBC_SHA" } count:54 type:NSString_class_()])));
    JreStrongAssign(&NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS, JavaUtilCollections_emptyList());
    J2OBJC_SET_INITIALIZED(NetI2pUtilI2PSSLSocketFactory)
  }
}

@end

void NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pUtilI2PSSLSocketFactory *self, NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath) {
  NSObject_init(self);
  JreStrongAssign(&self->_factory_, NetI2pUtilI2PSSLSocketFactory_initSSLContextWithNetI2pI2PAppContext_withBoolean_withNSString_(context, loadSystemCerts, relativeCertPath));
  JreStrongAssign(&self->_context_, context);
}

NetI2pUtilI2PSSLSocketFactory *new_NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PSSLSocketFactory, initWithNetI2pI2PAppContext_withBoolean_withNSString_, context, loadSystemCerts, relativeCertPath)
}

NetI2pUtilI2PSSLSocketFactory *create_NetI2pUtilI2PSSLSocketFactory_initWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PSSLSocketFactory, initWithNetI2pI2PAppContext_withBoolean_withNSString_, context, loadSystemCerts, relativeCertPath)
}

void NetI2pUtilI2PSSLSocketFactory_verifyHostnameWithNetI2pI2PAppContext_withJavaxNetSslSSLSocket_withNSString_(NetI2pI2PAppContext *ctx, JavaxNetSslSSLSocket *socket, NSString *host) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pUtilI2PSSLSocketFactory_class_()];
  if ([ctx getBooleanPropertyWithNSString:NetI2pUtilI2PSSLSocketFactory_PROP_DISABLE] || [((NSString *) nil_chk(host)) isEqual:@"localhost"] || [host isEqual:@"127.0.0.1"] || [host isEqual:@"::1"] || [host isEqual:@"0:0:0:0:0:0:0:1"]) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:JreStrcat("$$", @"Skipping hostname validation for ", host)];
    return;
  }
  id<JavaxNetSslHostnameVerifier> hv;
  if (NetI2pUtilSystemVersion_isAndroid()) {
    hv = JavaxNetSslHttpsURLConnection_getDefaultHostnameVerifier();
  }
  else {
    hv = create_OrgApacheHttpConnSslDefaultHostnameVerifier_initWithOrgApacheHttpConnUtilPublicSuffixMatcher_(NetI2pUtilI2PSSLSocketFactory_getDefaultMatcherWithNetI2pI2PAppContext_(ctx));
  }
  id<JavaxNetSslSSLSession> sess = [((JavaxNetSslSSLSocket *) nil_chk(socket)) getSession];
  if (![((id<JavaxNetSslHostnameVerifier>) nil_chk(hv)) verifyWithNSString:host withJavaxNetSslSSLSession:sess]) {
    @throw create_JavaxNetSslSSLHandshakeException_initWithNSString_(JreStrcat("$$$$$", @"SSL hostname verify failed, Expected ", host, @" - set ", NetI2pUtilI2PSSLSocketFactory_PROP_DISABLE, @"=true to disable verification (dangerous!)"));
  }
}

OrgApacheHttpConnUtilPublicSuffixMatcher *NetI2pUtilI2PSSLSocketFactory_getDefaultMatcherWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  @synchronized(NetI2pUtilI2PSSLSocketFactory_class_()) {
    if (!NetI2pUtilI2PSSLSocketFactory__matcherLoaded) {
      NSString *geoDir = [((NetI2pI2PAppContext *) nil_chk(ctx)) getPropertyWithNSString:NetI2pUtilI2PSSLSocketFactory_PROP_GEOIP_DIR withNSString:NetI2pUtilI2PSSLSocketFactory_GEOIP_DIR_DEFAULT];
      JavaIoFile *geoFile = create_JavaIoFile_initWithNSString_(geoDir);
      if (![geoFile isAbsolute]) geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([ctx getBaseDir], geoDir);
      geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(geoFile, NetI2pUtilI2PSSLSocketFactory_PUBLIC_SUFFIX_LIST);
      NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([ctx logManager])) getLogWithIOSClass:NetI2pUtilI2PSSLSocketFactory_class_()];
      if ([geoFile exists]) {
        @try {
          jlong begin = JavaLangSystem_currentTimeMillis();
          JavaIoInputStream *in = nil;
          OrgApacheHttpConnUtilPublicSuffixList *list = create_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(NetI2pUtilI2PSSLSocketFactory_ADDITIONAL_TLDS), JavaUtilCollections_emptyList());
          @try {
            in = create_JavaIoFileInputStream_initWithJavaIoFile_(geoFile);
            OrgApacheHttpConnUtilPublicSuffixList *list2 = [create_OrgApacheHttpConnUtilPublicSuffixListParser_init() parseWithJavaIoReader:create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(in, @"UTF-8")];
            list = NetI2pUtilI2PSSLSocketFactory_mergeWithOrgApacheHttpConnUtilPublicSuffixList_withOrgApacheHttpConnUtilPublicSuffixList_(list, list2);
          }
          @finally {
            @try {
              if (in != nil) [in close];
            }
            @catch (JavaIoIOException *ioe) {
            }
          }
          JreStrongAssignAndConsume(&NetI2pUtilI2PSSLSocketFactory_DEFAULT_MATCHER, new_OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_([((OrgApacheHttpConnUtilPublicSuffixList *) nil_chk(list)) getRules], [list getExceptions]));
          if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:JreStrcat("$@$J$I$I$", @"Loaded ", geoFile, @" in ", (JavaLangSystem_currentTimeMillis() - begin), @" ms and created list with ", [((id<JavaUtilList>) nil_chk([list getRules])) size], @" entries and ", [((id<JavaUtilList>) nil_chk([list getExceptions])) size], @" exceptions")];
        }
        @catch (JavaIoIOException *ex) {
          [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:JreStrcat("$@", @"Failure loading public suffix list from ", geoFile) withJavaLangThrowable:ex];
        }
      }
      else {
        id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(320);
        NetI2pUtilI2PSSLSocketFactory_addCountriesWithNetI2pI2PAppContext_withJavaUtilList_(ctx, list);
        [list addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(NetI2pUtilI2PSSLSocketFactory_DEFAULT_TLDS)];
        [list addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(NetI2pUtilI2PSSLSocketFactory_ADDITIONAL_TLDS)];
        JreStrongAssignAndConsume(&NetI2pUtilI2PSSLSocketFactory_DEFAULT_MATCHER, new_OrgApacheHttpConnUtilPublicSuffixMatcher_initWithJavaUtilCollection_withJavaUtilCollection_(list, nil));
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:JreStrcat("$@$I$", @"No public suffix list found at ", geoFile, @" - created default with ", [list size], @" entries")];
      }
    }
    NetI2pUtilI2PSSLSocketFactory__matcherLoaded = true;
  }
  return NetI2pUtilI2PSSLSocketFactory_DEFAULT_MATCHER;
}

OrgApacheHttpConnUtilPublicSuffixList *NetI2pUtilI2PSSLSocketFactory_mergeWithOrgApacheHttpConnUtilPublicSuffixList_withOrgApacheHttpConnUtilPublicSuffixList_(OrgApacheHttpConnUtilPublicSuffixList *a, OrgApacheHttpConnUtilPublicSuffixList *b) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  id<JavaUtilList> ar = [((OrgApacheHttpConnUtilPublicSuffixList *) nil_chk(a)) getRules];
  id<JavaUtilList> ae = [a getExceptions];
  id<JavaUtilList> br = [((OrgApacheHttpConnUtilPublicSuffixList *) nil_chk(b)) getRules];
  id<JavaUtilList> be = [b getExceptions];
  id<JavaUtilList> cr = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(ar)) size] + [((id<JavaUtilList>) nil_chk(br)) size]);
  id<JavaUtilList> ce = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(ae)) size] + [((id<JavaUtilList>) nil_chk(be)) size]);
  [cr addAllWithJavaUtilCollection:ar];
  [cr addAllWithJavaUtilCollection:br];
  [ce addAllWithJavaUtilCollection:ae];
  [ce addAllWithJavaUtilCollection:be];
  return create_OrgApacheHttpConnUtilPublicSuffixList_initWithJavaUtilList_withJavaUtilList_(cr, ce);
}

void NetI2pUtilI2PSSLSocketFactory_addCountriesWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *ctx, id<JavaUtilList> tlds) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pUtilI2PSSLSocketFactory_class_()];
  NSString *geoDir = [ctx getPropertyWithNSString:NetI2pUtilI2PSSLSocketFactory_PROP_GEOIP_DIR withNSString:NetI2pUtilI2PSSLSocketFactory_GEOIP_DIR_DEFAULT];
  JavaIoFile *geoFile = create_JavaIoFile_initWithNSString_(geoDir);
  if (![geoFile isAbsolute]) geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([ctx getBaseDir], geoDir);
  geoFile = create_JavaIoFile_initWithJavaIoFile_withNSString_(geoFile, NetI2pUtilI2PSSLSocketFactory_COUNTRY_FILE_DEFAULT);
  if (![geoFile exists]) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:JreStrcat("$$", @"Country file not found: ", [geoFile getAbsolutePath])];
    return;
  }
  JavaIoBufferedReader *br = nil;
  @try {
    br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithJavaIoFile_(geoFile), @"UTF-8"));
    NSString *line = nil;
    jint i = 0;
    while ((line = [br readLine]) != nil) {
      @try {
        if ([((NSString *) nil_chk(line)) charAtWithInt:0] == '#') continue;
        IOSObjectArray *s = NetI2pDataDataHelper_splitWithNSString_withNSString_(line, @",");
        NSString *lc = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        [((id<JavaUtilList>) nil_chk(tlds)) addWithId:lc];
        i++;
      }
      @catch (JavaLangIndexOutOfBoundsException *ioobe) {
      }
    }
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldInfo]) [log infoWithNSString:JreStrcat("$I$$", @"Loaded ", i, @" TLDs from ", [geoFile getAbsolutePath])];
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Error reading the Country File" withJavaLangThrowable:ioe];
  }
  @finally {
    if (br != nil) @try {
      [br close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

JavaxNetSslSSLSocketFactory *NetI2pUtilI2PSSLSocketFactory_initSSLContextWithNetI2pI2PAppContext_withBoolean_withNSString_(NetI2pI2PAppContext *context, jboolean loadSystemCerts, NSString *relativeCertPath) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pUtilI2PSSLSocketFactory_class_()];
  JavaSecurityKeyStore *ks;
  if (loadSystemCerts) {
    ks = NetI2pCryptoKeyStoreUtil_loadSystemKeyStore();
    if (ks == nil) @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(@"Key Store init error");
  }
  else {
    @try {
      ks = JavaSecurityKeyStore_getInstanceWithNSString_(JavaSecurityKeyStore_getDefaultType());
      [((JavaSecurityKeyStore *) nil_chk(ks)) load__WithJavaIoInputStream:nil withCharArray:[@"" java_toCharArray]];
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_JavaSecurityGeneralSecurityException_initWithNSString_withJavaLangThrowable_(@"Key Store init error", ioe);
    }
  }
  JavaIoFile *dir = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getConfigDir], relativeCertPath);
  jint adds = NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir, ks);
  jint totalAdds = adds;
  if (adds > 0) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$I$$", @"Loaded ", adds, @" trusted certificates from ", [dir getAbsolutePath])];
  }
  JavaIoFile *dir2 = create_JavaIoFile_initWithJavaIoFile_withNSString_([context getBaseDir], relativeCertPath);
  if (![((NSString *) nil_chk([dir getAbsolutePath])) isEqual:[dir2 getAbsolutePath]]) {
    adds = NetI2pCryptoKeyStoreUtil_addCertsWithJavaIoFile_withJavaSecurityKeyStore_(dir2, ks);
    totalAdds += adds;
    if (adds > 0) {
      if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$I$$", @"Loaded ", adds, @" trusted certificates from ", [dir getAbsolutePath])];
    }
  }
  if (totalAdds > 0 || loadSystemCerts) {
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$I$", @"Loaded total of ", totalAdds, @" new trusted certificates")];
  }
  else {
    NSString *msg = JreStrcat("$$$$$$", @"No trusted certificates loaded (looked in ", [dir getAbsolutePath], ([((NSString *) nil_chk([dir getAbsolutePath])) isEqual:[dir2 getAbsolutePath]] ? @"" : (JreStrcat("$$", @" and ", [dir2 getAbsolutePath]))), @", SSL connections will fail. Copy the cert in ", relativeCertPath, @" from the router to the directory.");
    @throw create_JavaSecurityGeneralSecurityException_initWithNSString_(msg);
  }
  JavaxNetSslSSLContext *sslc = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
  JavaxNetSslTrustManagerFactory *tmf = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
  [((JavaxNetSslTrustManagerFactory *) nil_chk(tmf)) init__WithJavaSecurityKeyStore:ks];
  [((JavaxNetSslSSLContext *) nil_chk(sslc)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:[tmf getTrustManagers] withJavaSecuritySecureRandom:[context random]];
  return [sslc getSocketFactory];
}

void NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLSocket_(JavaxNetSslSSLSocket *socket) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  [((JavaxNetSslSSLSocket *) nil_chk(socket)) setEnabledProtocolsWithNSStringArray:NetI2pUtilI2PSSLSocketFactory_selectProtocolsWithNSStringArray_withNSStringArray_([socket getEnabledProtocols], [socket getSupportedProtocols])];
  [socket setEnabledCipherSuitesWithNSStringArray:NetI2pUtilI2PSSLSocketFactory_selectCipherSuitesWithNSStringArray_withNSStringArray_([socket getEnabledCipherSuites], [socket getSupportedCipherSuites])];
}

void NetI2pUtilI2PSSLSocketFactory_setProtocolsAndCiphersWithJavaxNetSslSSLServerSocket_(JavaxNetSslSSLServerSocket *socket) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  IOSObjectArray *p = NetI2pUtilI2PSSLSocketFactory_selectProtocolsWithNSStringArray_withNSStringArray_([((JavaxNetSslSSLServerSocket *) nil_chk(socket)) getEnabledProtocols], [socket getSupportedProtocols]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(p))->size_; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(p, i))) isEqual:@"SSLv3"]) return;
  }
  [socket setEnabledProtocolsWithNSStringArray:p];
  [socket setEnabledCipherSuitesWithNSStringArray:NetI2pUtilI2PSSLSocketFactory_selectCipherSuitesWithNSStringArray_withNSStringArray_([socket getEnabledCipherSuites], [socket getSupportedCipherSuites])];
}

IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectProtocolsWithNSStringArray_withNSStringArray_(IOSObjectArray *enabledProtocols, IOSObjectArray *supportedProtocols) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  return NetI2pUtilI2PSSLSocketFactory_selectWithNSStringArray_withNSStringArray_withJavaUtilList_withJavaUtilList_(enabledProtocols, supportedProtocols, NetI2pUtilI2PSSLSocketFactory_INCLUDE_PROTOCOLS, NetI2pUtilI2PSSLSocketFactory_EXCLUDE_PROTOCOLS);
}

IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectCipherSuitesWithNSStringArray_withNSStringArray_(IOSObjectArray *enabledCipherSuites, IOSObjectArray *supportedCipherSuites) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  return NetI2pUtilI2PSSLSocketFactory_selectWithNSStringArray_withNSStringArray_withJavaUtilList_withJavaUtilList_(enabledCipherSuites, supportedCipherSuites, NetI2pUtilI2PSSLSocketFactory_INCLUDE_CIPHERS, NetI2pUtilI2PSSLSocketFactory_EXCLUDE_CIPHERS);
}

IOSObjectArray *NetI2pUtilI2PSSLSocketFactory_selectWithNSStringArray_withNSStringArray_withJavaUtilList_withJavaUtilList_(IOSObjectArray *enabledArr, IOSObjectArray *supportedArr, id<JavaUtilList> toEnable, id<JavaUtilList> toExclude) {
  NetI2pUtilI2PSSLSocketFactory_initialize();
  NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilI2PSSLSocketFactory_class_()];
  id<JavaUtilSet> selected = create_JavaUtilHashSet_initWithInt_(((IOSObjectArray *) nil_chk(enabledArr))->size_);
  [selected addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(enabledArr)];
  [selected removeAllWithJavaUtilCollection:toExclude];
  id<JavaUtilSet> supported = create_JavaUtilHashSet_initWithInt_(((IOSObjectArray *) nil_chk(supportedArr))->size_);
  [supported addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(supportedArr)];
  for (NSString * __strong s in nil_chk(toEnable)) {
    if ([supported containsWithId:s]) {
      if ([selected addWithId:s]) {
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$$", @"Added, previously disabled: ", s)];
      }
    }
    else if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) {
      [log infoWithNSString:JreStrcat("$$", @"Not supported in this JVM: ", s)];
    }
  }
  if ([selected isEmpty]) {
    [((NetI2pUtilLog *) nil_chk(log)) logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:@"No TLS support for SSLEepGet, falling back"];
    return enabledArr;
  }
  if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) {
    id<JavaUtilList> foo = create_JavaUtilArrayList_initWithJavaUtilCollection_(selected);
    JavaUtilCollections_sortWithJavaUtilList_(foo);
    [log debugWithNSString:JreStrcat("$@", @"Selected: ", foo)];
  }
  return [selected toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[selected size] type:NSString_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilI2PSSLSocketFactory)
