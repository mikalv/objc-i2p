//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/InternalServerSocket.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InterruptedIOException.h"
#include "java/io/PipedOutputStream.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/util/InternalServerSocket.h"
#include "net/i2p/util/InternalSocket.h"
#include "net/i2p/util/TimeoutPipedInputStream.h"
#include "net/i2p/util/TimeoutPipedOutputStream.h"

@interface NetI2pUtilInternalServerSocket () {
 @public
  id<JavaUtilConcurrentBlockingQueue> _acceptQueue_;
  JavaLangInteger *_port_;
  volatile_jboolean _running_;
}

- (void)queueConnectionWithNetI2pUtilInternalSocket:(NetI2pUtilInternalSocket *)sock;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilInternalServerSocket, _acceptQueue_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(NetI2pUtilInternalServerSocket, _port_, JavaLangInteger *)

inline JavaUtilConcurrentConcurrentHashMap *NetI2pUtilInternalServerSocket_get__sockets(void);
static JavaUtilConcurrentConcurrentHashMap *NetI2pUtilInternalServerSocket__sockets;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilInternalServerSocket, _sockets, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void NetI2pUtilInternalServerSocket_queueConnectionWithNetI2pUtilInternalSocket_(NetI2pUtilInternalServerSocket *self, NetI2pUtilInternalSocket *sock);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$7(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilInternalServerSocket)

@implementation NetI2pUtilInternalServerSocket

- (instancetype)initWithInt:(jint)port {
  NetI2pUtilInternalServerSocket_initWithInt_(self, port);
  return self;
}

- (void)close {
  JreAssignVolatileBoolean(&_running_, false);
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilInternalServerSocket__sockets)) removeWithId:_port_];
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_acceptQueue_)) clear];
  @try {
    [_acceptQueue_ putWithId:create_NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(nil, nil)];
  }
  @catch (JavaLangInterruptedException *ie) {
  }
}

- (JavaNetSocket *)accept {
  NetI2pUtilInternalSocket *serverSock = nil;
  while (JreLoadVolatileBoolean(&_running_)) {
    @try {
      serverSock = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(_acceptQueue_)) take];
    }
    @catch (JavaLangInterruptedException *ie) {
      if (JreLoadVolatileBoolean(&_running_)) @throw create_JavaIoInterruptedIOException_init();
      @throw create_JavaIoIOException_initWithNSString_(@"closed");
    }
    if ([((NetI2pUtilInternalSocket *) nil_chk(serverSock)) getInputStream] == nil) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    break;
  }
  return serverSock;
}

- (NSString *)description {
  return (JreStrcat("$@", @"Internal server socket on port ", _port_));
}

+ (void)internalConnectWithInt:(jint)port
  withNetI2pUtilInternalSocket:(NetI2pUtilInternalSocket *)clientSock {
  NetI2pUtilInternalServerSocket_internalConnectWithInt_withNetI2pUtilInternalSocket_(port, clientSock);
}

- (void)queueConnectionWithNetI2pUtilInternalSocket:(NetI2pUtilInternalSocket *)sock {
  NetI2pUtilInternalServerSocket_queueConnectionWithNetI2pUtilInternalSocket_(self, sock);
}

- (jint)getLocalPort {
  return [((JavaLangInteger *) nil_chk(_port_)) intValue];
}

- (void)setSoTimeoutWithInt:(jint)timeout {
}

- (jint)getSoTimeout {
  return 0;
}

- (void)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)endpoint {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (void)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)endpoint
                             withInt:(jint)backlog {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (JavaNioChannelsServerSocketChannel *)getChannel {
  return nil;
}

- (JavaNetInetAddress *)getInetAddress {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (JavaNetSocketAddress *)getLocalSocketAddress {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (jint)getReceiveBufferSize {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (jboolean)getReuseAddress {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (jboolean)isBound {
  return true;
}

- (jboolean)isClosed {
  return !JreLoadVolatileBoolean(&_running_);
}

- (void)setReceiveBufferSizeWithInt:(jint)size {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

- (void)setReuseAddressWithBoolean:(jboolean)on {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported");
}

+ (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  NetI2pUtilInternalServerSocket_renderStatusHTMLWithJavaIoWriter_(outArg);
}

- (void)dealloc {
  RELEASE_(_acceptQueue_);
  RELEASE_(_port_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, 10, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, 12, -1 },
    { NULL, "LJavaNioChannelsServerSocketChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "LJavaNetSocketAddress;", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 0, -1, -1, 18, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, 21, -1 },
    { NULL, "V", 0x9, 22, 23, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(accept);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(internalConnectWithInt:withNetI2pUtilInternalSocket:);
  methods[5].selector = @selector(queueConnectionWithNetI2pUtilInternalSocket:);
  methods[6].selector = @selector(getLocalPort);
  methods[7].selector = @selector(setSoTimeoutWithInt:);
  methods[8].selector = @selector(getSoTimeout);
  methods[9].selector = @selector(bindWithJavaNetSocketAddress:);
  methods[10].selector = @selector(bindWithJavaNetSocketAddress:withInt:);
  methods[11].selector = @selector(getChannel);
  methods[12].selector = @selector(getInetAddress);
  methods[13].selector = @selector(getLocalSocketAddress);
  methods[14].selector = @selector(getReceiveBufferSize);
  methods[15].selector = @selector(getReuseAddress);
  methods[16].selector = @selector(isBound);
  methods[17].selector = @selector(isClosed);
  methods[18].selector = @selector(setReceiveBufferSizeWithInt:);
  methods[19].selector = @selector(setReuseAddressWithBoolean:);
  methods[20].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sockets", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 24, 25, -1 },
    { "_acceptQueue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "_port_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_running_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaIoIOException;", "toString", "internalConnect", "ILNetI2pUtilInternalSocket;", "queueConnection", "LNetI2pUtilInternalSocket;", "setSoTimeout", "bind", "LJavaNetSocketAddress;", (void *)&NetI2pUtilInternalServerSocket__Annotations$0, "LJavaNetSocketAddress;I", (void *)&NetI2pUtilInternalServerSocket__Annotations$1, (void *)&NetI2pUtilInternalServerSocket__Annotations$2, (void *)&NetI2pUtilInternalServerSocket__Annotations$3, (void *)&NetI2pUtilInternalServerSocket__Annotations$4, (void *)&NetI2pUtilInternalServerSocket__Annotations$5, "setReceiveBufferSize", (void *)&NetI2pUtilInternalServerSocket__Annotations$6, "setReuseAddress", "Z", (void *)&NetI2pUtilInternalServerSocket__Annotations$7, "renderStatusHTML", "LJavaIoWriter;", &NetI2pUtilInternalServerSocket__sockets, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Integer;Lnet/i2p/util/InternalServerSocket;>;", "Ljava/util/concurrent/BlockingQueue<Lnet/i2p/util/InternalSocket;>;" };
  static const J2ObjcClassInfo _NetI2pUtilInternalServerSocket = { "InternalServerSocket", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilInternalServerSocket;
}

+ (void)initialize {
  if (self == [NetI2pUtilInternalServerSocket class]) {
    JreStrongAssignAndConsume(&NetI2pUtilInternalServerSocket__sockets, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(4));
    J2OBJC_SET_INITIALIZED(NetI2pUtilInternalServerSocket)
  }
}

@end

void NetI2pUtilInternalServerSocket_initWithInt_(NetI2pUtilInternalServerSocket *self, jint port) {
  JavaNetServerSocket_init(self);
  if (port <= 0) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad port: ", port));
  JreStrongAssign(&self->_port_, JavaLangInteger_valueOfWithInt_(port));
  NetI2pUtilInternalServerSocket *previous = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilInternalServerSocket__sockets)) putIfAbsentWithId:self->_port_ withId:self];
  if (previous != nil) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Internal port in use: ", port));
  JreAssignVolatileBoolean(&self->_running_, true);
  JreStrongAssignAndConsume(&self->_acceptQueue_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
}

NetI2pUtilInternalServerSocket *new_NetI2pUtilInternalServerSocket_initWithInt_(jint port) {
  J2OBJC_NEW_IMPL(NetI2pUtilInternalServerSocket, initWithInt_, port)
}

NetI2pUtilInternalServerSocket *create_NetI2pUtilInternalServerSocket_initWithInt_(jint port) {
  J2OBJC_CREATE_IMPL(NetI2pUtilInternalServerSocket, initWithInt_, port)
}

void NetI2pUtilInternalServerSocket_internalConnectWithInt_withNetI2pUtilInternalSocket_(jint port, NetI2pUtilInternalSocket *clientSock) {
  NetI2pUtilInternalServerSocket_initialize();
  NetI2pUtilInternalServerSocket *iss = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilInternalServerSocket__sockets)) getWithId:JavaLangInteger_valueOfWithInt_(port)];
  if (iss == nil) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"No server for port: ", port));
  NetI2pUtilTimeoutPipedInputStream *cis = create_NetI2pUtilTimeoutPipedInputStream_initWithInt_(64 * 1024);
  NetI2pUtilTimeoutPipedInputStream *sis = create_NetI2pUtilTimeoutPipedInputStream_initWithInt_(64 * 1024);
  JavaIoPipedOutputStream *cos = create_NetI2pUtilTimeoutPipedOutputStream_initWithNetI2pUtilTimeoutPipedInputStream_(sis);
  JavaIoPipedOutputStream *sos = create_NetI2pUtilTimeoutPipedOutputStream_initWithNetI2pUtilTimeoutPipedInputStream_(cis);
  [((NetI2pUtilInternalSocket *) nil_chk(clientSock)) setInputStreamWithJavaIoInputStream:cis];
  [clientSock setOutputStreamWithJavaIoOutputStream:cos];
  NetI2pUtilInternalServerSocket_queueConnectionWithNetI2pUtilInternalSocket_(iss, create_NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(sis, sos));
}

void NetI2pUtilInternalServerSocket_queueConnectionWithNetI2pUtilInternalSocket_(NetI2pUtilInternalServerSocket *self, NetI2pUtilInternalSocket *sock) {
  if (!JreLoadVolatileBoolean(&self->_running_)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Server closed for port: ", self->_port_));
  @try {
    [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(self->_acceptQueue_)) putWithId:sock];
  }
  @catch (JavaLangInterruptedException *ie) {
  }
}

void NetI2pUtilInternalServerSocket_renderStatusHTMLWithJavaIoWriter_(JavaIoWriter *outArg) {
  NetI2pUtilInternalServerSocket_initialize();
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"<h2 id=\"debug_portmapper\">Internal Server Sockets</h2><table id=\"portmapper\"><tr><th>Port\n"];
  id<JavaUtilList> ports = create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilInternalServerSocket__sockets)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_(ports);
  for (JavaLangInteger * __strong i in ports) {
    [outArg writeWithNSString:JreStrcat("$@C", @"<tr><td>", i, 0x000a)];
  }
  [outArg writeWithNSString:@"</table>\n"];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalServerSocket__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilInternalServerSocket)
