//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/EepHead.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/BufferedReader.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/EepHead.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SocketTimeout.h"

@interface NetI2pUtilEepHead ()

+ (void)usage;

@end

__attribute__((unused)) static void NetI2pUtilEepHead_usage(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilEepHead)

JavaIoOutputStream *NetI2pUtilEepHead__dummyStream;

@implementation NetI2pUtilEepHead

+ (JavaIoOutputStream *)_dummyStream {
  return NetI2pUtilEepHead__dummyStream;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)url {
  NetI2pUtilEepHead_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_(self, ctx, proxyHost, proxyPort, numRetries, url);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilEepHead_mainWithNSStringArray_(args);
}

+ (void)usage {
  NetI2pUtilEepHead_usage();
}

- (void)doFetchWithNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)timeout {
  _aborted_ = false;
  [self readHeaders];
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP headers");
  [((NetI2pUtilSocketTimeout *) nil_chk(timeout)) resetTimer];
  if (_fetchInactivityTimeout_ > 0) [timeout setInactivityTimeoutWithLong:_fetchInactivityTimeout_];
  else [timeout setInactivityTimeoutWithLong:60 * 1000];
  if (_redirectLocation_ != nil) {
    @try {
      if ([_redirectLocation_ java_hasPrefix:@"http://"]) {
        JreStrongAssign(&_actualURL_, _redirectLocation_);
      }
      else {
        JavaNetURI *url = create_JavaNetURI_initWithNSString_(_actualURL_);
        NSString *host = [url getHost];
        if (host == nil) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Redirected to invalid URL");
        jint port = [url getPort];
        if (port < 0) port = 80;
        if ([((NSString *) nil_chk(_redirectLocation_)) java_hasPrefix:@"/"]) JreStrongAssign(&_actualURL_, JreStrcat("$$CI$", @"http://", host, ':', port, _redirectLocation_));
        else JreStrongAssign(&_actualURL_, JreStrcat("$$CIC$", @"http://", host, ':', port, '/', _redirectLocation_));
      }
    }
    @catch (JavaNetURISyntaxException *use) {
      JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Redirected to invalid URL");
      [ioe initCauseWithJavaLangThrowable:use];
      @throw ioe;
    }
    NetI2pUtilEepGet_AuthState *as = _authState_;
    if (_responseCode_ == 407) {
      if (!_shouldProxy_) @throw create_JavaIoIOException_initWithNSString_(@"Proxy auth response from non-proxy");
      if (as == nil) @throw create_JavaIoIOException_initWithNSString_(@"Proxy requires authentication");
      if (as->authSent_) @throw create_JavaIoIOException_initWithNSString_(@"Proxy authentication failed");
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Adding auth"];
    }
    else {
      _redirects_++;
      if (_redirects_ > 5) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Too many redirects: to ", _redirectLocation_));
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Redirecting to ", _redirectLocation_)];
      if (as != nil) as->authSent_ = false;
    }
    _bytesRemaining_ = -1;
    JreStrongAssign(&_redirectLocation_, nil);
    JreStrongAssign(&_etag_, nil);
    JreStrongAssign(&_lastModified_, nil);
    JreStrongAssign(&_contentType_, nil);
    _encodingChunked_ = false;
    [self sendRequestWithNetI2pUtilSocketTimeout:timeout];
    [self doFetchWithNetI2pUtilSocketTimeout:timeout];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Headers read completely"];
  if (_out_ != nil) [_out_ close];
  JreStrongAssign(&_out_, nil);
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP data");
  [timeout cancel];
  if (_transferFailed_) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) attemptFailedWithNSString:_url_ withLong:0 withLong:0 withInt:_currentAttempt_ withInt:_numRetries_ withJavaLangException:create_JavaLangException_initWithNSString_(@"Attempt failed")];
  }
  else {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) transferCompleteWithLong:0 withLong:0 withLong:0 withNSString:_url_ withNSString:@"dummy" withBoolean:false];
  }
}

- (NSString *)getRequest {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(512);
  JavaNetURI *url;
  @try {
    url = create_JavaNetURI_initWithNSString_(_actualURL_);
  }
  @catch (JavaNetURISyntaxException *use) {
    JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL");
    [ioe initCauseWithJavaLangThrowable:use];
    @throw ioe;
  }
  NSString *host = [((JavaNetURI *) nil_chk(url)) getHost];
  if (host == nil) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL");
  jint port = [url getPort];
  NSString *path = [url getRawPath];
  NSString *query = [url getRawQuery];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Requesting ", _actualURL_)];
  NSString *urlToSend;
  if (_shouldProxy_) {
    urlToSend = _actualURL_;
    if ((path == nil || [path java_length] <= 0) && (query == nil || [query java_length] <= 0)) JreStrAppend(&urlToSend, "$", @"/");
  }
  else {
    urlToSend = path;
    if (urlToSend == nil || [urlToSend java_length] <= 0) urlToSend = @"/";
    if (query != nil) JreStrAppend(&urlToSend, "C$", '?', query);
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"HEAD "])) appendWithNSString:urlToSend])) appendWithNSString:@" HTTP/1.1\x0d\n"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Host: "])) appendWithNSString:host];
  if (port >= 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithInt:port];
  [buf appendWithNSString:@"\x0d\n"];
  [buf appendWithNSString:@"Accept-Encoding: \x0d\n"];
  [buf appendWithNSString:JreStrcat("$$$", @"User-Agent: ", NetI2pUtilEepGet_USER_AGENT, @"\x0d\n")];
  if (_authState_ != nil && _shouldProxy_ && _authState_->authMode_ != JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE)) {
    [buf appendWithNSString:@"Proxy-Authorization: "];
    [buf appendWithNSString:[((NetI2pUtilEepGet_AuthState *) nil_chk(_authState_)) getAuthHeaderWithNSString:@"HEAD" withNSString:urlToSend]];
    [buf appendWithNSString:@"\x0d\n"];
  }
  [buf appendWithNSString:@"Connection: close\x0d\n\x0d\n"];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$C", @"Request: [", [buf description], ']')];
  return [buf description];
}

- (jlong)getContentLength {
  return _bytesRemaining_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 5, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:withInt:withNSString:);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(usage);
  methods[3].selector = @selector(doFetchWithNetI2pUtilSocketTimeout:);
  methods[4].selector = @selector(getRequest);
  methods[5].selector = @selector(getContentLength);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_dummyStream", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;IILNSString;", "main", "[LNSString;", "doFetch", "LNetI2pUtilSocketTimeout;", "LJavaIoIOException;", &NetI2pUtilEepHead__dummyStream };
  static const J2ObjcClassInfo _NetI2pUtilEepHead = { "EepHead", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilEepHead;
}

+ (void)initialize {
  if (self == [NetI2pUtilEepHead class]) {
    JreStrongAssignAndConsume(&NetI2pUtilEepHead__dummyStream, new_JavaIoByteArrayOutputStream_initWithInt_(0));
    J2OBJC_SET_INITIALIZED(NetI2pUtilEepHead)
  }
}

@end

void NetI2pUtilEepHead_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_(NetI2pUtilEepHead *self, NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *url) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, true, proxyHost, proxyPort, numRetries, -1, -1, nil, NetI2pUtilEepHead__dummyStream, url, true, nil, nil);
}

NetI2pUtilEepHead *new_NetI2pUtilEepHead_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepHead, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_, ctx, proxyHost, proxyPort, numRetries, url)
}

NetI2pUtilEepHead *create_NetI2pUtilEepHead_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepHead, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_, ctx, proxyHost, proxyPort, numRetries, url)
}

void NetI2pUtilEepHead_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilEepHead_initialize();
  NSString *proxyHost = @"127.0.0.1";
  jint proxyPort = 4444;
  jint numRetries = 0;
  jint inactivityTimeout = 60 * 1000;
  NSString *username = nil;
  NSString *password = nil;
  jboolean error = false;
  GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"eephead", args, @"p:cn:t:u:x:");
  @try {
    jint c;
    while ((c = [g getopt]) != -1) {
      {
        NSString *s;
        jint colon;
        switch (c) {
          case 'p':
          s = [g getOptarg];
          colon = [((NSString *) nil_chk(s)) java_indexOf:':'];
          if (colon >= 0) {
            proxyHost = [s java_substring:0 endIndex:colon];
            NSString *port = [s java_substring:colon + 1];
            proxyPort = JavaLangInteger_parseIntWithNSString_(port);
          }
          else {
            proxyHost = s;
          }
          break;
          case 'c':
          proxyHost = @"";
          proxyPort = 0;
          break;
          case 'n':
          numRetries = JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 't':
          inactivityTimeout = 1000 * JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 'u':
          username = [g getOptarg];
          break;
          case 'x':
          password = [g getOptarg];
          break;
          case '?':
          case ':':
          default:
          error = true;
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [e printStackTrace];
    error = true;
  }
  if (error || ((IOSObjectArray *) nil_chk(args))->size_ - [g getOptind] != 1) {
    NetI2pUtilEepHead_usage();
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *url = IOSObjectArray_Get(nil_chk(args), [g getOptind]);
  NetI2pUtilEepHead *get = create_NetI2pUtilEepHead_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_(NetI2pI2PAppContext_getGlobalContext(), proxyHost, proxyPort, numRetries, url);
  if (username != nil) {
    if (password == nil) {
      @try {
        JavaIoBufferedReader *r = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
        do {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"Proxy password: "];
          password = [r readLine];
          if (password == nil) @throw create_JavaIoIOException_init();
          password = [password java_trim];
        }
        while ([((NSString *) nil_chk(password)) java_length] <= 0);
      }
      @catch (JavaIoIOException *ioe) {
        JavaLangSystem_exitWithInt_(1);
      }
    }
    [get addAuthorizationWithNSString:username withNSString:password];
  }
  if ([get fetchWithLong:45 * 1000 withLong:-1 withLong:inactivityTimeout]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Content-Type: ", [get getContentType])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$J", @"Content-Length: ", [get getContentLength])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Last-Modified: ", [get getLastModified])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Etag: ", [get getETag])];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Failed ", url)];
    JavaLangSystem_exitWithInt_(1);
  }
}

void NetI2pUtilEepHead_usage() {
  NetI2pUtilEepHead_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"EepHead [-p 127.0.0.1[:4444]] [-c]\n        [-n #retries] (default 0)\n        [-t timeout]  (default 60 sec)\n        [-u username] [-x password] url\n        (use -c or -p :0 for no proxy)"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepHead)
