//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/PortMapper.java
//

#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/net/InetSocketAddress.h"
#include "java/text/Collator.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Addresses.h"
#include "net/i2p/util/PortMapper.h"

@interface NetI2pUtilPortMapper () {
 @public
  JavaUtilConcurrentConcurrentHashMap *_dir_;
}

+ (NSString *)convertWildcardWithNSString:(NSString *)ip
                             withNSString:(NSString *)def;

- (NSString *)getHTTPConsoleURL;

- (NSString *)getHTTPSConsoleURL;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilPortMapper, _dir_, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static NSString *NetI2pUtilPortMapper_convertWildcardWithNSString_withNSString_(NSString *ip, NSString *def);

__attribute__((unused)) static NSString *NetI2pUtilPortMapper_getHTTPConsoleURL(NetI2pUtilPortMapper *self);

__attribute__((unused)) static NSString *NetI2pUtilPortMapper_getHTTPSConsoleURL(NetI2pUtilPortMapper *self);

NSString *NetI2pUtilPortMapper_PROP_PREFER_HTTPS = @"routerconsole.preferHTTPS";
NSString *NetI2pUtilPortMapper_SVC_CONSOLE = @"console";
NSString *NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE = @"https_console";
NSString *NetI2pUtilPortMapper_SVC_HTTP_PROXY = @"HTTP";
NSString *NetI2pUtilPortMapper_SVC_HTTPS_PROXY = @"HTTPS";
NSString *NetI2pUtilPortMapper_SVC_EEPSITE = @"eepsite";
NSString *NetI2pUtilPortMapper_SVC_HTTPS_EEPSITE = @"https_eepsite";
NSString *NetI2pUtilPortMapper_SVC_IRC = @"irc";
NSString *NetI2pUtilPortMapper_SVC_SOCKS = @"socks";
NSString *NetI2pUtilPortMapper_SVC_TAHOE = @"tahoe-lafs";
NSString *NetI2pUtilPortMapper_SVC_SMTP = @"SMTP";
NSString *NetI2pUtilPortMapper_SVC_POP = @"POP3";
NSString *NetI2pUtilPortMapper_SVC_SAM = @"SAM";
NSString *NetI2pUtilPortMapper_SVC_SAM_UDP = @"SAM-UDP";
NSString *NetI2pUtilPortMapper_SVC_SAM_SSL = @"SAM-SSL";
NSString *NetI2pUtilPortMapper_SVC_BOB = @"BOB";
NSString *NetI2pUtilPortMapper_SVC_I2CP = @"I2CP";
NSString *NetI2pUtilPortMapper_SVC_I2CP_SSL = @"I2CP-SSL";
NSString *NetI2pUtilPortMapper_SVC_HTTP_I2PCONTROL = @"http_i2pcontrol";
NSString *NetI2pUtilPortMapper_SVC_HTTPS_I2PCONTROL = @"https_i2pcontrol";
NSString *NetI2pUtilPortMapper_SVC_I2PSNARK = @"i2psnark";
NSString *NetI2pUtilPortMapper_SVC_I2PTUNNEL = @"i2ptunnel";
NSString *NetI2pUtilPortMapper_SVC_IMAGEGEN = @"imagegen";
NSString *NetI2pUtilPortMapper_SVC_SUSIDNS = @"susidns";
NSString *NetI2pUtilPortMapper_SVC_SUSIMAIL = @"susimail";
NSString *NetI2pUtilPortMapper_DEFAULT_HOST = @"127.0.0.1";

@implementation NetI2pUtilPortMapper

+ (NSString *)PROP_PREFER_HTTPS {
  return NetI2pUtilPortMapper_PROP_PREFER_HTTPS;
}

+ (NSString *)SVC_CONSOLE {
  return NetI2pUtilPortMapper_SVC_CONSOLE;
}

+ (NSString *)SVC_HTTPS_CONSOLE {
  return NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE;
}

+ (NSString *)SVC_HTTP_PROXY {
  return NetI2pUtilPortMapper_SVC_HTTP_PROXY;
}

+ (NSString *)SVC_HTTPS_PROXY {
  return NetI2pUtilPortMapper_SVC_HTTPS_PROXY;
}

+ (NSString *)SVC_EEPSITE {
  return NetI2pUtilPortMapper_SVC_EEPSITE;
}

+ (NSString *)SVC_HTTPS_EEPSITE {
  return NetI2pUtilPortMapper_SVC_HTTPS_EEPSITE;
}

+ (NSString *)SVC_IRC {
  return NetI2pUtilPortMapper_SVC_IRC;
}

+ (NSString *)SVC_SOCKS {
  return NetI2pUtilPortMapper_SVC_SOCKS;
}

+ (NSString *)SVC_TAHOE {
  return NetI2pUtilPortMapper_SVC_TAHOE;
}

+ (NSString *)SVC_SMTP {
  return NetI2pUtilPortMapper_SVC_SMTP;
}

+ (NSString *)SVC_POP {
  return NetI2pUtilPortMapper_SVC_POP;
}

+ (NSString *)SVC_SAM {
  return NetI2pUtilPortMapper_SVC_SAM;
}

+ (NSString *)SVC_SAM_UDP {
  return NetI2pUtilPortMapper_SVC_SAM_UDP;
}

+ (NSString *)SVC_SAM_SSL {
  return NetI2pUtilPortMapper_SVC_SAM_SSL;
}

+ (NSString *)SVC_BOB {
  return NetI2pUtilPortMapper_SVC_BOB;
}

+ (NSString *)SVC_I2CP {
  return NetI2pUtilPortMapper_SVC_I2CP;
}

+ (NSString *)SVC_I2CP_SSL {
  return NetI2pUtilPortMapper_SVC_I2CP_SSL;
}

+ (NSString *)SVC_HTTP_I2PCONTROL {
  return NetI2pUtilPortMapper_SVC_HTTP_I2PCONTROL;
}

+ (NSString *)SVC_HTTPS_I2PCONTROL {
  return NetI2pUtilPortMapper_SVC_HTTPS_I2PCONTROL;
}

+ (NSString *)SVC_I2PSNARK {
  return NetI2pUtilPortMapper_SVC_I2PSNARK;
}

+ (NSString *)SVC_I2PTUNNEL {
  return NetI2pUtilPortMapper_SVC_I2PTUNNEL;
}

+ (NSString *)SVC_IMAGEGEN {
  return NetI2pUtilPortMapper_SVC_IMAGEGEN;
}

+ (NSString *)SVC_SUSIDNS {
  return NetI2pUtilPortMapper_SVC_SUSIDNS;
}

+ (NSString *)SVC_SUSIMAIL {
  return NetI2pUtilPortMapper_SVC_SUSIMAIL;
}

+ (jint)DEFAULT_CONSOLE_PORT {
  return NetI2pUtilPortMapper_DEFAULT_CONSOLE_PORT;
}

+ (jint)DEFAULT_HTTPS_CONSOLE_PORT {
  return NetI2pUtilPortMapper_DEFAULT_HTTPS_CONSOLE_PORT;
}

+ (NSString *)DEFAULT_HOST {
  return NetI2pUtilPortMapper_DEFAULT_HOST;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilPortMapper_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (jboolean)register__WithNSString:(NSString *)service
                           withInt:(jint)port {
  return [self register__WithNSString:service withNSString:NetI2pUtilPortMapper_DEFAULT_HOST withInt:port];
}

- (jboolean)register__WithNSString:(NSString *)service
                      withNSString:(NSString *)host
                           withInt:(jint)port {
  if (port <= 0 || port > 65535) return false;
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) putIfAbsentWithId:service withId:JavaNetInetSocketAddress_createUnresolvedWithNSString_withInt_(host, port)] == nil;
}

- (jboolean)isRegisteredWithNSString:(NSString *)service {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) containsKeyWithId:service];
}

- (void)unregisterWithNSString:(NSString *)service {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) removeWithId:service];
}

- (void)unregisterWithNSString:(NSString *)service
                       withInt:(jint)port {
  if ([self getPortWithNSString:service] == port) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) removeWithId:service];
}

- (jint)getPortWithNSString:(NSString *)service {
  jint port = [self getPortWithNSString:service withInt:-1];
  return port;
}

- (jint)getPortWithNSString:(NSString *)service
                    withInt:(jint)def {
  JavaNetInetSocketAddress *ia = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) getWithId:service];
  if (ia == nil) return def;
  return [ia getPort];
}

- (NSString *)getHostWithNSString:(NSString *)service
                     withNSString:(NSString *)def {
  JavaNetInetSocketAddress *ia = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) getWithId:service];
  if (ia == nil) return def;
  return [ia getHostName];
}

- (NSString *)getActualHostWithNSString:(NSString *)service
                           withNSString:(NSString *)def {
  JavaNetInetSocketAddress *ia = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) getWithId:service];
  if (ia == nil) return def;
  return NetI2pUtilPortMapper_convertWildcardWithNSString_withNSString_([ia getHostName], def);
}

+ (NSString *)convertWildcardWithNSString:(NSString *)ip
                             withNSString:(NSString *)def {
  return NetI2pUtilPortMapper_convertWildcardWithNSString_withNSString_(ip, def);
}

- (NSString *)getConsoleURL {
  return [self getConsoleURLWithBoolean:[((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBooleanPropertyDefaultTrueWithNSString:NetI2pUtilPortMapper_PROP_PREFER_HTTPS]];
}

- (NSString *)getConsoleURLWithBoolean:(jboolean)preferHTTPS {
  return preferHTTPS ? NetI2pUtilPortMapper_getHTTPSConsoleURL(self) : NetI2pUtilPortMapper_getHTTPConsoleURL(self);
}

- (NSString *)getHTTPConsoleURL {
  return NetI2pUtilPortMapper_getHTTPConsoleURL(self);
}

- (NSString *)getHTTPSConsoleURL {
  return NetI2pUtilPortMapper_getHTTPSConsoleURL(self);
}

- (void)renderStatusHTMLWithJavaIoWriter:(JavaIoWriter *)outArg {
  id<JavaUtilList> services = create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(_dir_)) keySet]);
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"<h2 id=\"debug_portmapper\">Port Mapper</h2><table id=\"portmapper\"><tr><th>Service<th>Host<th>Port\n"];
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(services, JavaTextCollator_getInstance());
  for (NSString * __strong s in services) {
    JavaNetInetSocketAddress *ia = [_dir_ getWithId:s];
    if (ia == nil) continue;
    [outArg writeWithNSString:JreStrcat("$$$$$IC", @"<tr><td>", s, @"<td>", NetI2pUtilPortMapper_convertWildcardWithNSString_withNSString_([ia getHostName], NetI2pUtilPortMapper_DEFAULT_HOST), @"<td>", [ia getPort], 0x000a)];
  }
  [outArg writeWithNSString:@"</table>\n"];
}

- (void)dealloc {
  RELEASE_(_dir_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 11, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 16, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(register__WithNSString:withInt:);
  methods[2].selector = @selector(register__WithNSString:withNSString:withInt:);
  methods[3].selector = @selector(isRegisteredWithNSString:);
  methods[4].selector = @selector(unregisterWithNSString:);
  methods[5].selector = @selector(unregisterWithNSString:withInt:);
  methods[6].selector = @selector(getPortWithNSString:);
  methods[7].selector = @selector(getPortWithNSString:withInt:);
  methods[8].selector = @selector(getHostWithNSString:withNSString:);
  methods[9].selector = @selector(getActualHostWithNSString:withNSString:);
  methods[10].selector = @selector(convertWildcardWithNSString:withNSString:);
  methods[11].selector = @selector(getConsoleURL);
  methods[12].selector = @selector(getConsoleURLWithBoolean:);
  methods[13].selector = @selector(getHTTPConsoleURL);
  methods[14].selector = @selector(getHTTPSConsoleURL);
  methods[15].selector = @selector(renderStatusHTMLWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_dir_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "PROP_PREFER_HTTPS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "SVC_CONSOLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "SVC_HTTPS_CONSOLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "SVC_HTTP_PROXY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "SVC_HTTPS_PROXY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "SVC_EEPSITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "SVC_HTTPS_EEPSITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "SVC_IRC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "SVC_SOCKS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "SVC_TAHOE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "SVC_SMTP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "SVC_POP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "SVC_SAM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "SVC_SAM_UDP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "SVC_SAM_SSL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "SVC_BOB", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "SVC_I2CP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "SVC_I2CP_SSL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "SVC_HTTP_I2PCONTROL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "SVC_HTTPS_I2PCONTROL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "SVC_I2PSNARK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "SVC_I2PTUNNEL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "SVC_IMAGEGEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "SVC_SUSIDNS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "SVC_SUSIMAIL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "DEFAULT_CONSOLE_PORT", "I", .constantValue.asInt = NetI2pUtilPortMapper_DEFAULT_CONSOLE_PORT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_HTTPS_CONSOLE_PORT", "I", .constantValue.asInt = NetI2pUtilPortMapper_DEFAULT_HTTPS_CONSOLE_PORT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_HOST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "register", "LNSString;I", "LNSString;LNSString;I", "isRegistered", "LNSString;", "unregister", "getPort", "getHost", "LNSString;LNSString;", "getActualHost", "convertWildcard", "getConsoleURL", "Z", "renderStatusHTML", "LJavaIoWriter;", "LJavaIoIOException;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/net/InetSocketAddress;>;", &NetI2pUtilPortMapper_PROP_PREFER_HTTPS, &NetI2pUtilPortMapper_SVC_CONSOLE, &NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE, &NetI2pUtilPortMapper_SVC_HTTP_PROXY, &NetI2pUtilPortMapper_SVC_HTTPS_PROXY, &NetI2pUtilPortMapper_SVC_EEPSITE, &NetI2pUtilPortMapper_SVC_HTTPS_EEPSITE, &NetI2pUtilPortMapper_SVC_IRC, &NetI2pUtilPortMapper_SVC_SOCKS, &NetI2pUtilPortMapper_SVC_TAHOE, &NetI2pUtilPortMapper_SVC_SMTP, &NetI2pUtilPortMapper_SVC_POP, &NetI2pUtilPortMapper_SVC_SAM, &NetI2pUtilPortMapper_SVC_SAM_UDP, &NetI2pUtilPortMapper_SVC_SAM_SSL, &NetI2pUtilPortMapper_SVC_BOB, &NetI2pUtilPortMapper_SVC_I2CP, &NetI2pUtilPortMapper_SVC_I2CP_SSL, &NetI2pUtilPortMapper_SVC_HTTP_I2PCONTROL, &NetI2pUtilPortMapper_SVC_HTTPS_I2PCONTROL, &NetI2pUtilPortMapper_SVC_I2PSNARK, &NetI2pUtilPortMapper_SVC_I2PTUNNEL, &NetI2pUtilPortMapper_SVC_IMAGEGEN, &NetI2pUtilPortMapper_SVC_SUSIDNS, &NetI2pUtilPortMapper_SVC_SUSIMAIL, &NetI2pUtilPortMapper_DEFAULT_HOST };
  static const J2ObjcClassInfo _NetI2pUtilPortMapper = { "PortMapper", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 16, 29, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilPortMapper;
}

@end

void NetI2pUtilPortMapper_initWithNetI2pI2PAppContext_(NetI2pUtilPortMapper *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_dir_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(8));
}

NetI2pUtilPortMapper *new_NetI2pUtilPortMapper_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilPortMapper, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilPortMapper *create_NetI2pUtilPortMapper_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilPortMapper, initWithNetI2pI2PAppContext_, context)
}

NSString *NetI2pUtilPortMapper_convertWildcardWithNSString_withNSString_(NSString *ip, NSString *def) {
  NetI2pUtilPortMapper_initialize();
  NSString *rv = ip;
  if ([((NSString *) nil_chk(rv)) isEqual:@"0.0.0.0"]) {
    rv = NetI2pUtilAddresses_getAnyAddress();
    if (rv == nil) {
      rv = def;
      id<JavaUtilSet> addrs = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(true, false);
      for (NSString * __strong addr in nil_chk(addrs)) {
        if (![((NSString *) nil_chk(addr)) java_hasPrefix:@"127."] && ![addr isEqual:@"0.0.0.0"]) {
          rv = addr;
          break;
        }
      }
    }
  }
  else if ([rv isEqual:@"::"] || [rv isEqual:@"0:0:0:0:0:0:0:0"]) {
    rv = def;
    id<JavaUtilSet> addrs = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(false, true);
    for (NSString * __strong addr in nil_chk(addrs)) {
      if (![((NSString *) nil_chk(addr)) java_contains:@"."]) {
        return rv;
      }
    }
    addrs = NetI2pUtilAddresses_getAddressesWithBoolean_withBoolean_(true, true);
    for (NSString * __strong addr in nil_chk(addrs)) {
      if (![((NSString *) nil_chk(addr)) java_contains:@"."] && ![addr isEqual:@"::"] && ![addr isEqual:@"0:0:0:0:0:0:0:0"]) {
        rv = addr;
        break;
      }
    }
  }
  return rv;
}

NSString *NetI2pUtilPortMapper_getHTTPConsoleURL(NetI2pUtilPortMapper *self) {
  NSString *unset = @"*unset*";
  NSString *httpHost = [self getActualHostWithNSString:NetI2pUtilPortMapper_SVC_CONSOLE withNSString:unset];
  NSString *httpsHost = [self getActualHostWithNSString:NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE withNSString:unset];
  jint httpPort = [self getPortWithNSString:NetI2pUtilPortMapper_SVC_CONSOLE withInt:NetI2pUtilPortMapper_DEFAULT_CONSOLE_PORT];
  jint httpsPort = [self getPortWithNSString:NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE];
  jboolean httpsOnly = httpsPort > 0 && [((NSString *) nil_chk(httpHost)) isEqual:unset] && ![((NSString *) nil_chk(httpsHost)) isEqual:unset];
  if (httpsOnly) return JreStrcat("$$CIC", @"https://", httpsHost, ':', httpsPort, '/');
  if ([((NSString *) nil_chk(httpHost)) isEqual:unset]) httpHost = NetI2pUtilPortMapper_DEFAULT_HOST;
  return JreStrcat("$$CIC", @"http://", httpHost, ':', httpPort, '/');
}

NSString *NetI2pUtilPortMapper_getHTTPSConsoleURL(NetI2pUtilPortMapper *self) {
  NSString *unset = @"*unset*";
  NSString *httpHost = [self getActualHostWithNSString:NetI2pUtilPortMapper_SVC_CONSOLE withNSString:unset];
  NSString *httpsHost = [self getActualHostWithNSString:NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE withNSString:unset];
  jint httpPort = [self getPortWithNSString:NetI2pUtilPortMapper_SVC_CONSOLE];
  jint httpsPort = [self getPortWithNSString:NetI2pUtilPortMapper_SVC_HTTPS_CONSOLE withInt:NetI2pUtilPortMapper_DEFAULT_HTTPS_CONSOLE_PORT];
  jboolean httpOnly = httpPort > 0 && [((NSString *) nil_chk(httpsHost)) isEqual:unset] && ![((NSString *) nil_chk(httpHost)) isEqual:unset];
  if (httpOnly) return JreStrcat("$$CIC", @"http://", httpHost, ':', httpPort, '/');
  if ([((NSString *) nil_chk(httpsHost)) isEqual:unset]) return JreStrcat("$$CIC", @"http://", NetI2pUtilPortMapper_DEFAULT_HOST, ':', NetI2pUtilPortMapper_DEFAULT_CONSOLE_PORT, '/');
  return JreStrcat("$$CIC", @"https://", httpsHost, ':', httpsPort, '/');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilPortMapper)
