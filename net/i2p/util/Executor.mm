//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Executor.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Executor.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SimpleStore.h"
#include "net/i2p/util/SimpleTimer.h"

@interface NetI2pUtilExecutor () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  id<JavaUtilList> _readyEvents_;
  NetI2pUtilSimpleStore *runn_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilExecutor, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pUtilExecutor, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilExecutor, _readyEvents_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pUtilExecutor, runn_, NetI2pUtilSimpleStore *)

@implementation NetI2pUtilExecutor

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                          withNetI2pUtilLog:(NetI2pUtilLog *)log
                           withJavaUtilList:(id<JavaUtilList>)events
                  withNetI2pUtilSimpleStore:(NetI2pUtilSimpleStore *)x {
  NetI2pUtilExecutor_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_(self, ctx, log, events, x);
  return self;
}

- (void)run {
  while ([((NetI2pUtilSimpleStore *) nil_chk(runn_)) getAnswer]) {
    id<NetI2pUtilSimpleTimer_TimedEvent> evt = nil;
    @synchronized(_readyEvents_) {
      if ([((id<JavaUtilList>) nil_chk(_readyEvents_)) isEmpty]) @try {
        [_readyEvents_ java_wait];
      }
      @catch (JavaLangInterruptedException *ie) {
      }
      if (![_readyEvents_ isEmpty]) evt = JreRetainedLocalValue([_readyEvents_ removeWithInt:0]);
    }
    if (evt != nil) {
      jlong before = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
      @try {
        [evt timeReached];
      }
      @catch (JavaLangThrowable *t) {
        [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@$", @"Executing task ", evt, @" exited unexpectedly, please report") withJavaLangThrowable:t];
      }
      jlong time = [((NetI2pUtilClock *) nil_chk([_context_ clock])) now] - before;
      if ((time > 1000) && ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN])) [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:JreStrcat("$J$@", @"event execution took ", time, @": ", evt)];
    }
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_readyEvents_);
  RELEASE_(runn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pUtilLog:withJavaUtilList:withNetI2pUtilSimpleStore:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_readyEvents_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "runn_", "LNetI2pUtilSimpleStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pUtilLog;LJavaUtilList;LNetI2pUtilSimpleStore;", "(Lnet/i2p/I2PAppContext;Lnet/i2p/util/Log;Ljava/util/List<Lnet/i2p/util/SimpleTimer$TimedEvent;>;Lnet/i2p/util/SimpleStore;)V", "Ljava/util/List<Lnet/i2p/util/SimpleTimer$TimedEvent;>;" };
  static const J2ObjcClassInfo _NetI2pUtilExecutor = { "Executor", "net.i2p.util", ptrTable, methods, fields, 7, 0x0, 2, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilExecutor;
}

@end

void NetI2pUtilExecutor_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_(NetI2pUtilExecutor *self, NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, id<JavaUtilList> events, NetI2pUtilSimpleStore *x) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, log);
  JreStrongAssign(&self->_readyEvents_, events);
  JreStrongAssign(&self->runn_, x);
}

NetI2pUtilExecutor *new_NetI2pUtilExecutor_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, id<JavaUtilList> events, NetI2pUtilSimpleStore *x) {
  J2OBJC_NEW_IMPL(NetI2pUtilExecutor, initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_, ctx, log, events, x)
}

NetI2pUtilExecutor *create_NetI2pUtilExecutor_initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_(NetI2pI2PAppContext *ctx, NetI2pUtilLog *log, id<JavaUtilList> events, NetI2pUtilSimpleStore *x) {
  J2OBJC_CREATE_IMPL(NetI2pUtilExecutor, initWithNetI2pI2PAppContext_withNetI2pUtilLog_withJavaUtilList_withNetI2pUtilSimpleStore_, ctx, log, events, x)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilExecutor)
