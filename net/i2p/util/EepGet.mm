//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/EepGet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PipedInputStream.h"
#include "java/io/PipedOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/ConnectException.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/MalformedURLException.h"
#include "java/net/Socket.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/UnknownHostException.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Formatter.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/Base32.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/InternalSocket.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/PasswordManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/ReusableGZIPInputStream.h"
#include "net/i2p/util/SocketTimeout.h"

@interface NetI2pUtilEepGet () {
 @public
  jlong _minSize_;
  jlong _maxSize_;
  NSString *_postData_;
  jboolean _allowCaching_;
  jlong _fetchEndTime_;
}

+ (NSString *)sanitizeWithNSString:(NSString *)name;

+ (void)usage;

- (jint)handleStatusWithNSString:(NSString *)line;

- (void)handleWithNSString:(NSString *)key
              withNSString:(NSString *)val;

+ (void)incrementWithByteArray:(IOSByteArray *)lookahead
                       withInt:(jint)cur;

+ (jboolean)isEndOfHeadersWithByteArray:(IOSByteArray *)lookahead;

+ (NSString *)lc8hexWithInt:(jint)nc;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilEepGet, _postData_, NSString *)

inline IOSCharArray *NetI2pUtilEepGet_get_ILLEGAL(void);
static IOSCharArray *NetI2pUtilEepGet_ILLEGAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilEepGet, ILLEGAL, IOSCharArray *)

inline jbyte NetI2pUtilEepGet_get_NL(void);
#define NetI2pUtilEepGet_NL 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilEepGet, NL, jbyte)

__attribute__((unused)) static NSString *NetI2pUtilEepGet_sanitizeWithNSString_(NSString *name);

__attribute__((unused)) static void NetI2pUtilEepGet_usage(void);

__attribute__((unused)) static jint NetI2pUtilEepGet_handleStatusWithNSString_(NetI2pUtilEepGet *self, NSString *line);

__attribute__((unused)) static void NetI2pUtilEepGet_handleWithNSString_withNSString_(NetI2pUtilEepGet *self, NSString *key, NSString *val);

__attribute__((unused)) static void NetI2pUtilEepGet_incrementWithByteArray_withInt_(IOSByteArray *lookahead, jint cur);

__attribute__((unused)) static jboolean NetI2pUtilEepGet_isEndOfHeadersWithByteArray_(IOSByteArray *lookahead);

__attribute__((unused)) static NSString *NetI2pUtilEepGet_lc8hexWithInt_(jint nc);

@interface NetI2pUtilEepGet_StatusListener : NSObject

@end

@interface NetI2pUtilEepGet_CLIStatusListener () {
 @public
  NetI2pUtilEepGet *this$0_;
  jint _markSize_;
  jint _lineSize_;
  jlong _startedOn_;
  jlong _written_;
  jlong _previousWritten_;
  jlong _discarded_;
  jlong _lastComplete_;
  jboolean _firstTime_;
  JavaTextDecimalFormat *_pct_;
  JavaTextDecimalFormat *_kbps_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_CLIStatusListener, _pct_, JavaTextDecimalFormat *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_CLIStatusListener, _kbps_, JavaTextDecimalFormat *)

@interface NetI2pUtilEepGet_1 : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilEepGet *this$0_;
  NetI2pUtilSocketTimeout *val$stimeout_;
}

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$
             withNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilEepGet_1)

__attribute__((unused)) static void NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet_1 *self, NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0);

__attribute__((unused)) static NetI2pUtilEepGet_1 *new_NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilEepGet_1 *create_NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0);

__attribute__((unused)) static void NetI2pUtilEepGet_AUTH_MODE_initWithNSString_withInt_(NetI2pUtilEepGet_AUTH_MODE *self, NSString *__name, jint __ordinal);

@interface NetI2pUtilEepGet_AuthState () {
 @public
  NetI2pUtilEepGet *this$0_;
  NSString *username_;
  NSString *password_;
  NSString *authChallenge_;
  jint nonceCount_;
  NSString *cnonce_;
  id<JavaUtilMap> args_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_AuthState, username_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_AuthState, password_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_AuthState, authChallenge_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_AuthState, cnonce_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_AuthState, args_, id<JavaUtilMap>)

@interface NetI2pUtilEepGet_Gunzipper () {
 @public
  NetI2pUtilEepGet *this$0_;
  JavaIoInputStream *_inRaw_;
  JavaIoOutputStream *_out_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_Gunzipper, _inRaw_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilEepGet_Gunzipper, _out_, JavaIoOutputStream *)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilEepGet)

NSString *NetI2pUtilEepGet_USER_AGENT = @"Wget/1.11.4";

@implementation NetI2pUtilEepGet

+ (NSString *)USER_AGENT {
  return NetI2pUtilEepGet_USER_AGENT;
}

+ (jint)CONNECT_TIMEOUT {
  return NetI2pUtilEepGet_CONNECT_TIMEOUT;
}

+ (jint)INACTIVITY_TIMEOUT {
  return NetI2pUtilEepGet_INACTIVITY_TIMEOUT;
}

+ (jint)MAX_COMPLETE_FAILS {
  return NetI2pUtilEepGet_MAX_COMPLETE_FAILS;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_(self, ctx, proxyHost, proxyPort, numRetries, outputFile, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_(self, ctx, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_(self, ctx, numRetries, outputFile, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_(self, ctx, numRetries, outputFile, url, allowCaching);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
                               withNSString:(NSString *)postData {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, postData);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching
                               withNSString:(NSString *)etag {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                               withNSString:(NSString *)outputFile
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching
                               withNSString:(NSString *)etag
                               withNSString:(NSString *)lastModified {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag, lastModified);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                                   withLong:(jlong)minSize
                                   withLong:(jlong)maxSize
                               withNSString:(NSString *)outputFile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching
                               withNSString:(NSString *)etag
                               withNSString:(NSString *)postData {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, postData);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withBoolean:(jboolean)shouldProxy
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                                    withInt:(jint)numRetries
                                   withLong:(jlong)minSize
                                   withLong:(jlong)maxSize
                               withNSString:(NSString *)outputFile
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
                                withBoolean:(jboolean)allowCaching
                               withNSString:(NSString *)etag
                               withNSString:(NSString *)lastModified
                               withNSString:(NSString *)postData {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, lastModified, postData);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilEepGet_mainWithNSStringArray_(args);
}

+ (NSString *)suggestNameWithNSString:(NSString *)url {
  return NetI2pUtilEepGet_suggestNameWithNSString_(url);
}

+ (NSString *)sanitizeWithNSString:(NSString *)name {
  return NetI2pUtilEepGet_sanitizeWithNSString_(name);
}

+ (void)usage {
  NetI2pUtilEepGet_usage();
}

- (void)addStatusListenerWithNetI2pUtilEepGet_StatusListener:(id<NetI2pUtilEepGet_StatusListener>)lsnr {
  @synchronized(_listeners_) {
    [((id<JavaUtilList>) nil_chk(_listeners_)) addWithId:lsnr];
  }
}

- (void)stopFetching {
  _keepFetching_ = false;
}

- (jboolean)fetch {
  return [self fetchWithLong:_fetchHeaderTimeout_];
}

- (jboolean)fetchWithLong:(jlong)fetchHeaderTimeout {
  return [self fetchWithLong:fetchHeaderTimeout withLong:-1 withLong:-1];
}

- (jboolean)fetchWithLong:(jlong)fetchHeaderTimeout
                 withLong:(jlong)totalTimeout
                 withLong:(jlong)inactivityTimeout {
  _fetchHeaderTimeout_ = (jint) JavaLangMath_minWithLong_withLong_(fetchHeaderTimeout, JavaLangInteger_MAX_VALUE);
  _fetchEndTime_ = (totalTimeout > 0 ? JavaLangSystem_currentTimeMillis() + totalTimeout : -1);
  _fetchInactivityTimeout_ = (jint) JavaLangMath_minWithLong_withLong_(inactivityTimeout, JavaLangInteger_MAX_VALUE);
  _keepFetching_ = true;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$Z$$", @"Fetching (proxied? ", _shouldProxy_, @") url=", _actualURL_)];
  while (_keepFetching_) {
    NetI2pUtilSocketTimeout *timeout = nil;
    if (_fetchHeaderTimeout_ > 0) {
      timeout = create_NetI2pUtilSocketTimeout_initWithLong_(_fetchHeaderTimeout_);
      NetI2pUtilSocketTimeout *stimeout = timeout;
      [timeout setTimeoutCommandWithJavaLangRunnable:create_NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(self, stimeout)];
      [timeout setTotalTimeoutPeriodWithLong:_fetchEndTime_];
    }
    @try {
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) attemptingWithNSString:_url_];
      [self sendRequestWithNetI2pUtilSocketTimeout:timeout];
      if (timeout != nil) [timeout resetTimer];
      [self doFetchWithNetI2pUtilSocketTimeout:timeout];
      if (timeout != nil) [timeout cancel];
      if (!_transferFailed_) return true;
      break;
    }
    @catch (JavaIoIOException *ioe) {
      if (timeout != nil) [timeout cancel];
      for (jint i = 0; i < [_listeners_ size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) attemptFailedWithNSString:_url_ withLong:_bytesTransferred_ withLong:_bytesRemaining_ withInt:_currentAttempt_ withInt:_numRetries_ withJavaLangException:ioe];
      if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:@"ERR: doFetch failed " withJavaLangThrowable:ioe];
      if ([ioe isKindOfClass:[JavaNetMalformedURLException class]] || [ioe isKindOfClass:[JavaNetUnknownHostException class]] || [ioe isKindOfClass:[JavaNetConnectException class]]) _keepFetching_ = false;
    }
    @finally {
      if (_out_ != nil) {
        @try {
          [_out_ close];
        }
        @catch (JavaIoIOException *cioe) {
        }
        JreStrongAssign(&_out_, nil);
      }
      if (_proxy_ != nil) {
        @try {
          [_proxy_ close];
          JreStrongAssign(&_proxy_, nil);
        }
        @catch (JavaIoIOException *ioe) {
        }
      }
    }
    _currentAttempt_++;
    if (_currentAttempt_ > _numRetries_ || (_alreadyTransferred_ == 0 && _currentAttempt_ > NetI2pUtilEepGet_MAX_COMPLETE_FAILS) || !_keepFetching_) break;
    _redirects_ = 0;
    @try {
      jlong delay = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) random])) nextIntWithInt:60 * 1000];
      JavaLangThread_sleepWithLong_(5 * 1000 + delay);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) transferFailedWithNSString:_url_ withLong:_bytesTransferred_ withLong:_bytesRemaining_ withInt:_currentAttempt_];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", @"All attempts failed for ", _url_)];
  return false;
}

- (void)doFetchWithNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)timeout {
  _aborted_ = false;
  [self readHeaders];
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP headers");
  if (timeout != nil) {
    [timeout resetTimer];
    if (_fetchInactivityTimeout_ > 0) [timeout setInactivityTimeoutWithLong:_fetchInactivityTimeout_];
    else [timeout setInactivityTimeoutWithLong:NetI2pUtilEepGet_INACTIVITY_TIMEOUT];
  }
  if (_proxy_ != nil && !_shouldProxy_) {
    if (_fetchInactivityTimeout_ > 0) [_proxy_ setSoTimeoutWithInt:_fetchInactivityTimeout_];
    else [_proxy_ setSoTimeoutWithInt:NetI2pUtilEepGet_INACTIVITY_TIMEOUT];
  }
  if (_redirectLocation_ != nil) {
    @try {
      if ([_redirectLocation_ java_hasPrefix:@"http://"]) {
        JreStrongAssign(&_actualURL_, _redirectLocation_);
      }
      else if ([((NSString *) nil_chk(_redirectLocation_)) java_hasPrefix:@"https://"]) {
        @throw create_JavaIoIOException_initWithNSString_(@"Redirect to https unsupported");
      }
      else {
        JavaNetURI *url = create_JavaNetURI_initWithNSString_(_actualURL_);
        NSString *host = [url getHost];
        if (host == nil) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Redirected to invalid URL");
        jint port = [url getPort];
        if (port < 0) port = 80;
        if ([((NSString *) nil_chk(_redirectLocation_)) java_hasPrefix:@"/"]) JreStrongAssign(&_actualURL_, JreStrcat("$$CI$", @"http://", host, ':', port, _redirectLocation_));
        else JreStrongAssign(&_actualURL_, JreStrcat("$$CIC$", @"http://", host, ':', port, '/', _redirectLocation_));
      }
    }
    @catch (JavaNetURISyntaxException *use) {
      JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Redirected to invalid URL");
      [ioe initCauseWithJavaLangThrowable:use];
      @throw ioe;
    }
    NetI2pUtilEepGet_AuthState *as = _authState_;
    if (_responseCode_ == 407) {
      if (!_shouldProxy_) @throw create_JavaIoIOException_initWithNSString_(@"Proxy auth response from non-proxy");
      if (as == nil) @throw create_JavaIoIOException_initWithNSString_(@"Proxy requires authentication");
      if (as->authSent_) @throw create_JavaIoIOException_initWithNSString_(@"Proxy authentication failed");
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:@"Adding auth"];
    }
    else {
      _redirects_++;
      if (_redirects_ > 5) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Too many redirects: to ", _redirectLocation_));
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Redirecting to ", _redirectLocation_)];
      if (as != nil) as->authSent_ = false;
    }
    _bytesRemaining_ = -1;
    JreStrongAssign(&_redirectLocation_, nil);
    JreStrongAssign(&_etag_, _etagOrig_);
    JreStrongAssign(&_lastModified_, _lastModifiedOrig_);
    JreStrongAssign(&_contentType_, nil);
    _encodingChunked_ = false;
    [self sendRequestWithNetI2pUtilSocketTimeout:timeout];
    [self doFetchWithNetI2pUtilSocketTimeout:timeout];
    return;
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Headers read completely, reading ", _bytesRemaining_)];
  jboolean strictSize = (_bytesRemaining_ >= 0);
  if ((_minSize_ > 0) && (_bytesRemaining_ < _minSize_)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$J$", @"HTTP response size ", _bytesRemaining_, @" violates minimum of ", _minSize_, @" bytes"));
  if ((_maxSize_ > -1) && (_bytesRemaining_ > _maxSize_)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$J$", @"HTTP response size ", _bytesRemaining_, @" violates maximum of ", _maxSize_, @" bytes"));
  JavaLangThread *pusher = nil;
  JreStrongAssign(&_decompressException_, nil);
  if (_isGzippedResponse_) {
    if ([_log_ shouldInfo]) [_log_ infoWithNSString:@"Gzipped response, starting decompressor"];
    JavaIoPipedInputStream *pi = create_JavaIoPipedInputStream_initWithInt_(64 * 1024);
    JavaIoPipedOutputStream *po = create_JavaIoPipedOutputStream_initWithJavaIoPipedInputStream_(pi);
    pusher = create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(create_NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(self, pi, _out_), @"EepGet Decompressor");
    JreStrongAssign(&_out_, po);
    [pusher start];
  }
  jint remaining = (jint) _bytesRemaining_;
  IOSByteArray *buf = [IOSByteArray arrayWithLength:16 * 1024];
  while (_keepFetching_ && ((remaining > 0) || !strictSize) && !_aborted_) {
    jint toRead = buf->size_;
    if (strictSize && toRead > remaining) toRead = remaining;
    jint read = [((JavaIoInputStream *) nil_chk(_proxyIn_)) readWithByteArray:buf withInt:0 withInt:toRead];
    if (read == -1) break;
    if (timeout != nil) [timeout resetTimer];
    [((JavaIoOutputStream *) nil_chk(_out_)) writeWithByteArray:buf withInt:0 withInt:read];
    _bytesTransferred_ += read;
    if ((_maxSize_ > -1) && (_alreadyTransferred_ + read > _maxSize_)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$J$", @"Bytes transferred ", (_alreadyTransferred_ + read), @" violates maximum of ", _maxSize_, @" bytes"));
    remaining -= read;
    if (remaining == 0 && _encodingChunked_) {
      jint char1 = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
      if (char1 == 0x000d) {
        jint char2 = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
        if (char2 == 0x000a) {
          remaining = (jint) [self readChunkLength];
        }
        else {
          [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char1];
          [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char2];
          _bytesTransferred_ += 2;
          remaining -= 2;
          read += 2;
        }
      }
      else {
        [((JavaIoOutputStream *) nil_chk(_out_)) writeWithInt:char1];
        _bytesTransferred_++;
        remaining--;
        read++;
      }
    }
    if (timeout != nil) [timeout resetTimer];
    if (_bytesRemaining_ >= read) _bytesRemaining_ -= read;
    if (read > 0) {
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) bytesTransferredWithLong:_alreadyTransferred_ withInt:read withLong:_bytesTransferred_ withLong:_encodingChunked_ ? -1 : _bytesRemaining_ withNSString:_url_];
      _alreadyTransferred_ += read;
    }
  }
  if (_out_ != nil) [_out_ close];
  JreStrongAssign(&_out_, nil);
  if (_isGzippedResponse_) {
    @try {
      [((JavaLangThread *) nil_chk(pusher)) join];
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    pusher = nil;
    if (_decompressException_ != nil) {
      _keepFetching_ = false;
      @throw _decompressException_;
    }
  }
  if (_aborted_) @throw create_JavaIoIOException_initWithNSString_(@"Timed out reading the HTTP data");
  if (timeout != nil) [timeout cancel];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J$ZC", @"Done transferring ", _bytesTransferred_, @" (ok? ", !_transferFailed_, ')')];
  if (_transferFailed_) {
    if (![((id<JavaUtilList>) nil_chk(_listeners_)) isEmpty]) {
      NSString *s;
      if (_responseText_ != nil) s = JreStrcat("$IC$", @"Attempt failed: ", _responseCode_, ' ', _responseText_);
      else s = JreStrcat("$I", @"Attempt failed: ", _responseCode_);
      JavaLangException *e = create_JavaIoIOException_initWithNSString_(s);
      for (jint i = 0; i < [_listeners_ size]; i++) {
        [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) attemptFailedWithNSString:_url_ withLong:_bytesTransferred_ withLong:_bytesRemaining_ withInt:_currentAttempt_ withInt:_numRetries_ withJavaLangException:e];
      }
    }
  }
  else if ((_minSize_ > 0) && (_alreadyTransferred_ < _minSize_)) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J$J$", @"Bytes transferred ", _alreadyTransferred_, @" violates minimum of ", _minSize_, @" bytes"));
  }
  else if ((_bytesRemaining_ == -1) || (remaining == 0)) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([_listeners_ getWithInt:i])) transferCompleteWithLong:_alreadyTransferred_ withLong:_bytesTransferred_ withLong:_encodingChunked_ ? -1 : _bytesRemaining_ withNSString:_url_ withNSString:_outputFile_ withBoolean:_notModified_];
  }
  else {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$J", @"Disconnection on attempt ", _currentAttempt_, @" after ", _bytesTransferred_));
  }
}

- (void)readHeaders {
  NSString *key = nil;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(32);
  jboolean read = NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_(_proxyIn_, buf);
  if (!read) @throw create_JavaIoIOException_initWithNSString_(@"Unable to read the first line");
  _responseCode_ = NetI2pUtilEepGet_handleStatusWithNSString_(self, [buf description]);
  jboolean redirect = false;
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$$", @"rc: ", _responseCode_, @" for ", _actualURL_)];
  jboolean rcOk = false;
  switch (_responseCode_) {
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 207:
    case 208:
    case 226:
    if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
    else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, false));
    _alreadyTransferred_ = 0;
    rcOk = true;
    break;
    case 206:
    if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
    else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, true));
    rcOk = true;
    break;
    case 301:
    case 302:
    case 303:
    case 307:
    case 308:
    _alreadyTransferred_ = 0;
    rcOk = true;
    redirect = true;
    break;
    case 304:
    _bytesRemaining_ = 0;
    _keepFetching_ = false;
    _notModified_ = true;
    return;
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 408:
    case 409:
    case 410:
    case 411:
    case 413:
    case 414:
    case 415:
    case 418:
    case 420:
    case 421:
    case 423:
    case 424:
    case 426:
    case 428:
    case 429:
    case 431:
    case 451:
    case 500:
    case 501:
    case 502:
    case 503:
    case 505:
    case 506:
    case 507:
    case 508:
    case 510:
    case 511:
    _transferFailed_ = true;
    if (_alreadyTransferred_ > 0 || !_shouldWriteErrorToOutput_) {
      _keepFetching_ = false;
      return;
    }
    rcOk = true;
    if (_out_ == nil) {
      if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
      else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, true));
    }
    break;
    case 407:
    _alreadyTransferred_ = 0;
    if (_authState_ != nil) rcOk = !_authState_->authSent_;
    else rcOk = false;
    redirect = rcOk;
    _keepFetching_ = rcOk;
    break;
    case 416:
    _bytesRemaining_ = 0;
    if (_alreadyTransferred_ > 0 || !_shouldWriteErrorToOutput_) {
      _keepFetching_ = false;
      return;
    }
    rcOk = true;
    if (_out_ == nil) {
      if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
      else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, true));
    }
    break;
    case 504:
    if (_alreadyTransferred_ > 0 || (!_shouldWriteErrorToOutput_) || _currentAttempt_ < _numRetries_) {
      @throw create_JavaIoIOException_initWithNSString_(@"HTTP Proxy timeout");
    }
    rcOk = true;
    if (_out_ == nil) {
      if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
      else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, true));
    }
    _transferFailed_ = true;
    break;
    default:
    if (_alreadyTransferred_ > 0 || !_shouldWriteErrorToOutput_) {
      _keepFetching_ = false;
    }
    else {
      rcOk = true;
      if (_out_ == nil) {
        if (_outputStream_ != nil) JreStrongAssign(&_out_, _outputStream_);
        else JreStrongAssignAndConsume(&_out_, new_JavaIoFileOutputStream_initWithNSString_withBoolean_(_outputFile_, true));
      }
    }
    _transferFailed_ = true;
  }
  _isGzippedResponse_ = false;
  JreStrongAssign(&_etag_, nil);
  JreStrongAssign(&_lastModified_, nil);
  [buf setLengthWithInt:0];
  IOSByteArray *lookahead = [IOSByteArray arrayWithLength:3];
  NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, 0x000a);
  while (true) {
    jint cur = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
    switch (cur) {
      case -1:
      @throw create_JavaIoIOException_initWithNSString_(@"EOF reading headers");
      case ':':
      if (key == nil) {
        key = [buf description];
        [buf setLengthWithInt:0];
        NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, cur);
        break;
      }
      else {
        [buf appendWithChar:(jchar) cur];
        NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, cur);
        break;
      }
      case 0x000a:
      case 0x000d:
      if (key != nil) NetI2pUtilEepGet_handleWithNSString_withNSString_(self, key, [buf description]);
      [buf setLengthWithInt:0];
      key = nil;
      NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, cur);
      if (NetI2pUtilEepGet_isEndOfHeadersWithByteArray_(lookahead)) {
        if (!rcOk) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$IC$", @"Invalid HTTP response: ", _responseCode_, ' ', _responseText_));
        if (_encodingChunked_) {
          _bytesRemaining_ = [self readChunkLength];
        }
        if (!redirect) JreStrongAssign(&_redirectLocation_, nil);
        else if (_responseCode_ == 407) JreStrongAssign(&_redirectLocation_, _actualURL_);
        return;
      }
      break;
      default:
      [buf appendWithChar:(jchar) cur];
      NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, cur);
    }
    if ([buf java_length] > 4096) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Header line too long: ", [buf description]));
  }
}

- (jlong)readChunkLength {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(8);
  jint nl = 0;
  while (true) {
    jint cur = [((JavaIoInputStream *) nil_chk(_proxyIn_)) read];
    switch (cur) {
      case -1:
      @throw create_JavaIoIOException_initWithNSString_(@"Chunk ended too soon");
      case 0x000a:
      case 0x000d:
      nl++;
      default:
      [buf appendWithChar:(jchar) cur];
    }
    if (nl >= 2) break;
  }
  NSString *len = [((NSString *) nil_chk([buf description])) java_trim];
  @try {
    jlong bytes = JavaLangLong_parseLongWithNSString_withInt_(len, 16);
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$J", @"Chunked length: ", bytes)];
    return bytes;
  }
  @catch (JavaLangNumberFormatException *nfe) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$C", @"Invalid chunk length [", len, ']'));
  }
}

- (jint)handleStatusWithNSString:(NSString *)line {
  return NetI2pUtilEepGet_handleStatusWithNSString_(self, line);
}

- (void)handleWithNSString:(NSString *)key
              withNSString:(NSString *)val {
  NetI2pUtilEepGet_handleWithNSString_withNSString_(self, key, val);
}

+ (void)incrementWithByteArray:(IOSByteArray *)lookahead
                       withInt:(jint)cur {
  NetI2pUtilEepGet_incrementWithByteArray_withInt_(lookahead, cur);
}

+ (jboolean)isEndOfHeadersWithByteArray:(IOSByteArray *)lookahead {
  return NetI2pUtilEepGet_isEndOfHeadersWithByteArray_(lookahead);
}

- (void)sendRequestWithNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)timeout {
  if (_outputStream_ != nil) {
  }
  else {
    JavaIoFile *outFile = create_JavaIoFile_initWithNSString_(_outputFile_);
    if ([outFile exists]) _alreadyTransferred_ = [outFile length];
  }
  NSString *req = [self getRequest];
  if (_proxyIn_ != nil) @try {
    [_proxyIn_ close];
  }
  @catch (JavaIoIOException *ioe) {
  }
  if (_proxyOut_ != nil) @try {
    [_proxyOut_ close];
  }
  @catch (JavaIoIOException *ioe) {
  }
  if (_proxy_ != nil) @try {
    [_proxy_ close];
  }
  @catch (JavaIoIOException *ioe) {
  }
  if (_shouldProxy_) {
    JreStrongAssign(&_proxy_, NetI2pUtilInternalSocket_getSocketWithNSString_withInt_(_proxyHost_, _proxyPort_));
  }
  else {
    @try {
      JavaNetURI *url = create_JavaNetURI_initWithNSString_(_actualURL_);
      if ([@"http" isEqual:[url getScheme]]) {
        NSString *host = [url getHost];
        if (host == nil) @throw create_JavaNetMalformedURLException_initWithNSString_(JreStrcat("$$", @"URL is not supported:", _actualURL_));
        NSString *hostlc = [host java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        if ([((NSString *) nil_chk(hostlc)) java_hasSuffix:@".i2p"]) @throw create_JavaNetUnknownHostException_initWithNSString_(@"I2P addresses must be proxied");
        if ([hostlc java_hasSuffix:@".onion"]) @throw create_JavaNetUnknownHostException_initWithNSString_(@"Tor addresses must be proxied");
        jint port = [url getPort];
        if (port == -1) port = 80;
        if (_fetchHeaderTimeout_ > 0) {
          JreStrongAssignAndConsume(&_proxy_, new_JavaNetSocket_init());
          [_proxy_ setSoTimeoutWithInt:_fetchHeaderTimeout_];
          [((JavaNetSocket *) nil_chk(_proxy_)) connectWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithNSString_withInt_(host, port) withInt:_fetchHeaderTimeout_];
        }
        else {
          JreStrongAssignAndConsume(&_proxy_, new_JavaNetSocket_initWithNSString_withInt_(host, port));
        }
      }
      else {
        @throw create_JavaNetMalformedURLException_initWithNSString_(JreStrcat("$$", @"URL is not supported:", _actualURL_));
      }
    }
    @catch (JavaNetURISyntaxException *use) {
      JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Request URL is invalid");
      [ioe initCauseWithJavaLangThrowable:use];
      @throw ioe;
    }
  }
  JreStrongAssign(&_proxyIn_, [((JavaNetSocket *) nil_chk(_proxy_)) getInputStream]);
  if (!([_proxy_ isKindOfClass:[NetI2pUtilInternalSocket class]])) JreStrongAssignAndConsume(&_proxyIn_, new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(_proxyIn_));
  JreStrongAssign(&_proxyOut_, [((JavaNetSocket *) nil_chk(_proxy_)) getOutputStream]);
  if (timeout != nil) [timeout setSocketWithJavaNetSocket:_proxy_];
  [((JavaIoOutputStream *) nil_chk(_proxyOut_)) writeWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(req)];
  [((JavaIoOutputStream *) nil_chk(_proxyOut_)) flush];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:@"Request flushed"];
}

- (NSString *)getRequest {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(2048);
  jboolean post = false;
  if ((_postData_ != nil) && ([((NSString *) nil_chk(_postData_)) java_length] > 0)) post = true;
  JavaNetURI *url;
  @try {
    url = create_JavaNetURI_initWithNSString_(_actualURL_);
  }
  @catch (JavaNetURISyntaxException *use) {
    JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL");
    [ioe initCauseWithJavaLangThrowable:use];
    @throw ioe;
  }
  NSString *host = [((JavaNetURI *) nil_chk(url)) getHost];
  if (host == nil || [host java_length] <= 0) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL, no host");
  jint port = [url getPort];
  NSString *path = [url getRawPath];
  NSString *query = [url getRawQuery];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Requesting ", _actualURL_)];
  NSString *urlToSend;
  if (_shouldProxy_) {
    urlToSend = _actualURL_;
    if ((path == nil || [path java_length] <= 0) && (query == nil || [query java_length] <= 0)) JreStrAppend(&urlToSend, "$", @"/");
  }
  else {
    urlToSend = path;
    if (urlToSend == nil || [urlToSend java_length] <= 0) urlToSend = @"/";
    if (query != nil) JreStrAppend(&urlToSend, "C$", '?', query);
  }
  if (post) {
    [buf appendWithNSString:@"POST "];
  }
  else {
    [buf appendWithNSString:@"GET "];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:urlToSend])) appendWithNSString:@" HTTP/1.1\x0d\n"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Host: "])) appendWithNSString:host];
  if (port >= 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithInt:port];
  [buf appendWithNSString:@"\x0d\n"];
  if (_alreadyTransferred_ > 0) {
    [buf appendWithNSString:@"Range: bytes="];
    [buf appendWithLong:_alreadyTransferred_];
    [buf appendWithNSString:@"-\x0d\n"];
  }
  if (!_allowCaching_) {
    [buf appendWithNSString:@"Cache-Control: no-cache\x0d\nPragma: no-cache\x0d\n"];
  }
  jboolean uaOverridden = false;
  jboolean etagOverridden = false;
  jboolean lastmodOverridden = false;
  if (_extraHeaders_ != nil) {
    for (NSString * __strong hdr in _extraHeaders_) {
      NSString *hlc = [((NSString *) nil_chk(hdr)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
      if ([((NSString *) nil_chk(hlc)) java_hasPrefix:@"user-agent: "]) uaOverridden = true;
      else if ([hlc java_hasPrefix:@"if-none-match: "]) etagOverridden = true;
      else if ([hlc java_hasPrefix:@"if-modified-since: "]) lastmodOverridden = true;
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:hdr])) appendWithNSString:@"\x0d\n"];
    }
  }
  if ((_etag_ != nil) && (_alreadyTransferred_ <= 0) && !etagOverridden) {
    [buf appendWithNSString:@"If-None-Match: "];
    [buf appendWithNSString:_etag_];
    [buf appendWithNSString:@"\x0d\n"];
  }
  if ((_lastModified_ != nil) && (_alreadyTransferred_ <= 0) && !lastmodOverridden) {
    [buf appendWithNSString:@"If-Modified-Since: "];
    [buf appendWithNSString:_lastModified_];
    [buf appendWithNSString:@"\x0d\n"];
  }
  if (post) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Content-length: "])) appendWithInt:[((NSString *) nil_chk(_postData_)) java_length]])) appendWithNSString:@"\x0d\n"];
  [buf appendWithNSString:@"Accept-Encoding: "];
  if (path == nil || (![path java_hasSuffix:@".gz"] && ![path java_hasSuffix:@".tgz"])) [buf appendWithNSString:@"gzip"];
  [buf appendWithNSString:@"\x0d\n"];
  if (!uaOverridden) [buf appendWithNSString:JreStrcat("$$$", @"User-Agent: ", NetI2pUtilEepGet_USER_AGENT, @"\x0d\n")];
  if (_authState_ != nil && _shouldProxy_ && _authState_->authMode_ != JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE)) {
    [buf appendWithNSString:@"Proxy-Authorization: "];
    NSString *method = post ? @"POST" : @"GET";
    [buf appendWithNSString:[((NetI2pUtilEepGet_AuthState *) nil_chk(_authState_)) getAuthHeaderWithNSString:method withNSString:urlToSend]];
    [buf appendWithNSString:@"\x0d\n"];
  }
  [buf appendWithNSString:@"Connection: close\x0d\n\x0d\n"];
  if (post) [buf appendWithNSString:_postData_];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$C", @"Request: [", [buf description], ']')];
  return [buf description];
}

- (NSString *)getETag {
  return _etag_;
}

- (NSString *)getLastModified {
  return _lastModified_;
}

- (jboolean)getNotModified {
  return _notModified_;
}

- (NSString *)getContentType {
  return _contentType_;
}

- (jint)getStatusCode {
  return _responseCode_;
}

- (NSString *)getStatusText {
  return _responseText_;
}

- (void)setWriteErrorToOutput {
  _shouldWriteErrorToOutput_ = true;
}

- (void)addHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  if (_extraHeaders_ == nil) JreStrongAssignAndConsume(&_extraHeaders_, new_JavaUtilArrayList_init());
  [_extraHeaders_ addWithId:JreStrcat("$$$", name, @": ", value)];
}

- (void)addAuthorizationWithNSString:(NSString *)userName
                        withNSString:(NSString *)password {
  if (_shouldProxy_) {
    if (_authState_ != nil) @throw create_JavaLangIllegalStateException_init();
    JreStrongAssignAndConsume(&_authState_, new_NetI2pUtilEepGet_AuthState_initWithNetI2pUtilEepGet_withNSString_withNSString_(self, userName, password));
  }
}

+ (id<JavaUtilMap>)parseAuthArgsWithNSString:(NSString *)args {
  return NetI2pUtilEepGet_parseAuthArgsWithNSString_(args);
}

+ (NSString *)lc8hexWithInt:(jint)nc {
  return NetI2pUtilEepGet_lc8hexWithInt_(nc);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_proxyHost_);
  RELEASE_(_outputFile_);
  RELEASE_(_outputStream_);
  RELEASE_(_url_);
  RELEASE_(_actualURL_);
  RELEASE_(_postData_);
  RELEASE_(_listeners_);
  RELEASE_(_extraHeaders_);
  RELEASE_(_proxy_);
  RELEASE_(_proxyOut_);
  RELEASE_(_proxyIn_);
  RELEASE_(_out_);
  RELEASE_(_responseText_);
  RELEASE_(_etag_);
  RELEASE_(_lastModified_);
  RELEASE_(_etagOrig_);
  RELEASE_(_lastModifiedOrig_);
  RELEASE_(_contentType_);
  RELEASE_(_redirectLocation_);
  RELEASE_(_decompressException_);
  RELEASE_(_authState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 20, 21, 22, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 22, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, 22, -1, -1, -1 },
    { NULL, "I", 0x2, 23, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 30, 21, 22, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 22, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 33, 13, -1, 34, -1, -1 },
    { NULL, "LNSString;", 0xa, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:withInt:withNSString:withNSString:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:withInt:withNSString:withNSString:withBoolean:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withInt:withNSString:withNSString:);
  methods[3].selector = @selector(initWithNetI2pI2PAppContext:withInt:withNSString:withNSString:withBoolean:);
  methods[4].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withNSString:withNSString:);
  methods[5].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withNSString:withNSString:withNSString:);
  methods[6].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withNSString:withNSString:withBoolean:withNSString:);
  methods[7].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withNSString:withNSString:withBoolean:withNSString:withNSString:);
  methods[8].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withLong:withLong:withNSString:withJavaIoOutputStream:withNSString:withBoolean:withNSString:withNSString:);
  methods[9].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:withNSString:withInt:withInt:withLong:withLong:withNSString:withJavaIoOutputStream:withNSString:withBoolean:withNSString:withNSString:withNSString:);
  methods[10].selector = @selector(mainWithNSStringArray:);
  methods[11].selector = @selector(suggestNameWithNSString:);
  methods[12].selector = @selector(sanitizeWithNSString:);
  methods[13].selector = @selector(usage);
  methods[14].selector = @selector(addStatusListenerWithNetI2pUtilEepGet_StatusListener:);
  methods[15].selector = @selector(stopFetching);
  methods[16].selector = @selector(fetch);
  methods[17].selector = @selector(fetchWithLong:);
  methods[18].selector = @selector(fetchWithLong:withLong:withLong:);
  methods[19].selector = @selector(doFetchWithNetI2pUtilSocketTimeout:);
  methods[20].selector = @selector(readHeaders);
  methods[21].selector = @selector(readChunkLength);
  methods[22].selector = @selector(handleStatusWithNSString:);
  methods[23].selector = @selector(handleWithNSString:withNSString:);
  methods[24].selector = @selector(incrementWithByteArray:withInt:);
  methods[25].selector = @selector(isEndOfHeadersWithByteArray:);
  methods[26].selector = @selector(sendRequestWithNetI2pUtilSocketTimeout:);
  methods[27].selector = @selector(getRequest);
  methods[28].selector = @selector(getETag);
  methods[29].selector = @selector(getLastModified);
  methods[30].selector = @selector(getNotModified);
  methods[31].selector = @selector(getContentType);
  methods[32].selector = @selector(getStatusCode);
  methods[33].selector = @selector(getStatusText);
  methods[34].selector = @selector(setWriteErrorToOutput);
  methods[35].selector = @selector(addHeaderWithNSString:withNSString:);
  methods[36].selector = @selector(addAuthorizationWithNSString:withNSString:);
  methods[37].selector = @selector(parseAuthArgsWithNSString:);
  methods[38].selector = @selector(lc8hexWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_shouldProxy_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_proxyHost_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_proxyPort_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_numRetries_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_minSize_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_maxSize_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_outputFile_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_outputStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_url_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_actualURL_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_postData_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_allowCaching_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 37, -1 },
    { "_extraHeaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 38, -1 },
    { "_keepFetching_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_proxy_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_proxyOut_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_proxyIn_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_alreadyTransferred_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_bytesTransferred_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_bytesRemaining_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_currentAttempt_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_responseCode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_responseText_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_shouldWriteErrorToOutput_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_etag_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_lastModified_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_etagOrig_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_lastModifiedOrig_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_encodingChunked_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_notModified_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_contentType_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_transferFailed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_aborted_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_fetchHeaderTimeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_fetchEndTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fetchInactivityTimeout_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_redirects_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_redirectLocation_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_isGzippedResponse_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_decompressException_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_authState_", "LNetI2pUtilEepGet_AuthState;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "USER_AGENT", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 39, -1, -1 },
    { "CONNECT_TIMEOUT", "I", .constantValue.asInt = NetI2pUtilEepGet_CONNECT_TIMEOUT, 0x1c, -1, -1, -1, -1 },
    { "INACTIVITY_TIMEOUT", "I", .constantValue.asInt = NetI2pUtilEepGet_INACTIVITY_TIMEOUT, 0x1c, -1, -1, -1, -1 },
    { "MAX_COMPLETE_FAILS", "I", .constantValue.asInt = NetI2pUtilEepGet_MAX_COMPLETE_FAILS, 0x1c, -1, -1, -1, -1 },
    { "ILLEGAL", "[C", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "NL", "B", .constantValue.asChar = NetI2pUtilEepGet_NL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;IILNSString;LNSString;", "LNetI2pI2PAppContext;LNSString;IILNSString;LNSString;Z", "LNetI2pI2PAppContext;ILNSString;LNSString;", "LNetI2pI2PAppContext;ILNSString;LNSString;Z", "LNetI2pI2PAppContext;ZLNSString;IILNSString;LNSString;", "LNetI2pI2PAppContext;ZLNSString;IILNSString;LNSString;LNSString;", "LNetI2pI2PAppContext;ZLNSString;IILNSString;LNSString;ZLNSString;", "LNetI2pI2PAppContext;ZLNSString;IILNSString;LNSString;ZLNSString;LNSString;", "LNetI2pI2PAppContext;ZLNSString;IIJJLNSString;LJavaIoOutputStream;LNSString;ZLNSString;LNSString;", "LNetI2pI2PAppContext;ZLNSString;IIJJLNSString;LJavaIoOutputStream;LNSString;ZLNSString;LNSString;LNSString;", "main", "[LNSString;", "suggestName", "LNSString;", "sanitize", "addStatusListener", "LNetI2pUtilEepGet_StatusListener;", "fetch", "J", "JJJ", "doFetch", "LNetI2pUtilSocketTimeout;", "LJavaIoIOException;", "handleStatus", "handle", "LNSString;LNSString;", "increment", "[BI", "isEndOfHeaders", "[B", "sendRequest", "addHeader", "addAuthorization", "parseAuthArgs", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "lc8hex", "I", "Ljava/util/List<Lnet/i2p/util/EepGet$StatusListener;>;", "Ljava/util/List<Ljava/lang/String;>;", &NetI2pUtilEepGet_USER_AGENT, &NetI2pUtilEepGet_ILLEGAL, "LNetI2pUtilEepGet_StatusListener;LNetI2pUtilEepGet_CLIStatusListener;LNetI2pUtilEepGet_AUTH_MODE;LNetI2pUtilEepGet_AuthState;LNetI2pUtilEepGet_Gunzipper;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet = { "EepGet", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 39, 51, -1, 41, -1, -1, -1 };
  return &_NetI2pUtilEepGet;
}

+ (void)initialize {
  if (self == [NetI2pUtilEepGet class]) {
    JreStrongAssignAndConsume(&NetI2pUtilEepGet_ILLEGAL, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '>', ':', '"', '/', '\\', '|', '?', '*', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, (jint) 0x7f } count:42]);
    J2OBJC_SET_INITIALIZED(NetI2pUtilEepGet)
  }
}

@end

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(self, ctx, true, proxyHost, proxyPort, numRetries, outputFile, url);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_, ctx, proxyHost, proxyPort, numRetries, outputFile, url)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_, ctx, proxyHost, proxyPort, numRetries, outputFile, url)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(self, ctx, true, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, nil);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_, ctx, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_, ctx, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(self, ctx, false, nil, -1, numRetries, outputFile, url);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_, ctx, numRetries, outputFile, url)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_, ctx, numRetries, outputFile, url)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(self, ctx, false, nil, -1, numRetries, outputFile, url, allowCaching, nil);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_(NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_, ctx, numRetries, outputFile, url, allowCaching)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_(NetI2pI2PAppContext *ctx, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withInt_withNSString_withNSString_withBoolean_, ctx, numRetries, outputFile, url, allowCaching)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, true, nil);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, NSString *postData) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, -1, -1, outputFile, nil, url, true, nil, postData);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, NSString *postData) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, postData)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, NSString *postData) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, postData)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, -1, -1, outputFile, nil, url, allowCaching, etag, nil);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, -1, -1, outputFile, nil, url, allowCaching, etag, lastModified, nil);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag, lastModified)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, NSString *outputFile, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, outputFile, url, allowCaching, etag, lastModified)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *postData) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(self, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, nil, postData);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *postData) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, postData)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *postData) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, postData)
}

void NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(NetI2pUtilEepGet *self, NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified, NSString *postData) {
  NSObject_init(self);
  self->_responseCode_ = -1;
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  self->_shouldProxy_ = ((proxyHost != nil) && ([((NSString *) nil_chk(proxyHost)) java_length] > 0) && (proxyPort > 0) && shouldProxy);
  JreStrongAssign(&self->_proxyHost_, proxyHost);
  self->_proxyPort_ = proxyPort;
  self->_numRetries_ = numRetries;
  self->_minSize_ = minSize;
  self->_maxSize_ = maxSize;
  JreStrongAssign(&self->_outputFile_, outputFile);
  JreStrongAssign(&self->_outputStream_, outputStream);
  JreStrongAssign(&self->_url_, url);
  JreStrongAssign(&self->_actualURL_, url);
  JreStrongAssign(&self->_postData_, postData);
  self->_bytesRemaining_ = -1;
  self->_fetchHeaderTimeout_ = NetI2pUtilEepGet_CONNECT_TIMEOUT;
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilArrayList_initWithInt_(1));
  JreStrongAssign(&self->_etag_, etag);
  JreStrongAssign(&self->_lastModified_, lastModified);
  JreStrongAssign(&self->_etagOrig_, etag);
  JreStrongAssign(&self->_lastModifiedOrig_, lastModified);
}

NetI2pUtilEepGet *new_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified, NSString *postData) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, lastModified, postData)
}

NetI2pUtilEepGet *create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_(NetI2pI2PAppContext *ctx, jboolean shouldProxy, NSString *proxyHost, jint proxyPort, jint numRetries, jlong minSize, jlong maxSize, NSString *outputFile, JavaIoOutputStream *outputStream, NSString *url, jboolean allowCaching, NSString *etag, NSString *lastModified, NSString *postData) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet, initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_withNSString_, ctx, shouldProxy, proxyHost, proxyPort, numRetries, minSize, maxSize, outputFile, outputStream, url, allowCaching, etag, lastModified, postData)
}

void NetI2pUtilEepGet_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilEepGet_initialize();
  NSString *proxyHost = @"127.0.0.1";
  jint proxyPort = 4444;
  jint numRetries = 0;
  jint markSize = 1024;
  jint lineLen = 40;
  jlong inactivityTimeout = NetI2pUtilEepGet_INACTIVITY_TIMEOUT;
  NSString *etag = nil;
  NSString *saveAs = nil;
  id<JavaUtilList> extra = nil;
  NSString *username = nil;
  NSString *password = nil;
  jboolean error = false;
  GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"eepget", args, @"p:cn:t:e:o:m:l:h:u:x:");
  @try {
    jint c;
    while ((c = [g getopt]) != -1) {
      {
        NSString *s;
        jint colon;
        NSString *a;
        jint eq;
        switch (c) {
          case 'p':
          s = [g getOptarg];
          colon = [((NSString *) nil_chk(s)) java_indexOf:':'];
          if (colon >= 0) {
            proxyHost = [s java_substring:0 endIndex:colon];
            NSString *port = [s java_substring:colon + 1];
            proxyPort = JavaLangInteger_parseIntWithNSString_(port);
          }
          else {
            proxyHost = s;
          }
          break;
          case 'c':
          proxyHost = @"";
          proxyPort = 0;
          break;
          case 'n':
          numRetries = JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 't':
          inactivityTimeout = 1000 * JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 'e':
          etag = JreStrcat("C$C", '"', [g getOptarg], '"');
          break;
          case 'o':
          saveAs = [g getOptarg];
          break;
          case 'm':
          markSize = JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 'l':
          lineLen = JavaLangInteger_parseIntWithNSString_([g getOptarg]);
          break;
          case 'h':
          a = [g getOptarg];
          eq = [((NSString *) nil_chk(a)) java_indexOf:'='];
          if (eq > 0) {
            if (extra == nil) extra = create_JavaUtilArrayList_initWithInt_(2);
            NSString *key = [a java_substring:0 endIndex:eq];
            NSString *val = [a java_substring:eq + 1];
            [extra addWithId:key];
            [extra addWithId:val];
          }
          else {
            error = true;
          }
          break;
          case 'u':
          username = [g getOptarg];
          break;
          case 'x':
          password = [g getOptarg];
          break;
          case '?':
          case ':':
          default:
          error = true;
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [e printStackTrace];
    error = true;
  }
  if (error || ((IOSObjectArray *) nil_chk(args))->size_ - [g getOptind] != 1) {
    NetI2pUtilEepGet_usage();
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *url = IOSObjectArray_Get(nil_chk(args), [g getOptind]);
  if (saveAs == nil) saveAs = NetI2pUtilEepGet_suggestNameWithNSString_(url);
  NetI2pUtilEepGet *get = create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withNSString_withNSString_withBoolean_withNSString_(NetI2pI2PAppContext_getGlobalContext(), true, proxyHost, proxyPort, numRetries, saveAs, url, true, etag);
  if (extra != nil) {
    for (jint i = 0; i < [extra size]; i += 2) {
      [get addHeaderWithNSString:[extra getWithInt:i] withNSString:[extra getWithInt:i + 1]];
    }
  }
  if (username != nil) {
    if (password == nil) {
      @try {
        JavaIoBufferedReader *r = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
        do {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"Proxy password: "];
          password = [r readLine];
          if (password == nil) @throw create_JavaIoIOException_init();
          password = [password java_trim];
        }
        while ([((NSString *) nil_chk(password)) java_length] <= 0);
      }
      @catch (JavaIoIOException *ioe) {
        JavaLangSystem_exitWithInt_(1);
      }
    }
    [get addAuthorizationWithNSString:username withNSString:password];
  }
  [get addStatusListenerWithNetI2pUtilEepGet_StatusListener:create_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(get, markSize, lineLen)];
  if (![get fetchWithLong:NetI2pUtilEepGet_CONNECT_TIMEOUT withLong:-1 withLong:inactivityTimeout]) JavaLangSystem_exitWithInt_(1);
}

NSString *NetI2pUtilEepGet_suggestNameWithNSString_(NSString *url) {
  NetI2pUtilEepGet_initialize();
  JavaNetURI *nameURL = nil;
  NSString *name;
  @try {
    nameURL = create_JavaNetURI_initWithNSString_(url);
  }
  @catch (JavaNetURISyntaxException *e) {
    NSString *msg = [e getLocalizedMessage];
    if (msg != nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:msg];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Please enter a properly formed URL."];
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *path = [((JavaNetURI *) nil_chk(nameURL)) getRawPath];
  JavaUtilRegexPattern *slashes = JavaUtilRegexPattern_compileWithNSString_(@"/+");
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(slashes)) matcherWithJavaLangCharSequence:path];
  if ([((NSString *) nil_chk(path)) isEqual:@""] || [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    name = NetI2pUtilEepGet_sanitizeWithNSString_([nameURL getAuthority]);
  }
  else {
    jint last = [path java_lastIndexOf:'/'];
    if (last != [path java_length] - 1) {
      name = NetI2pUtilEepGet_sanitizeWithNSString_([path java_substring:last + 1]);
    }
    else {
      jint i = 1;
      jint slash;
      while (true) {
        slash = [path java_lastIndexOf:'/' fromIndex:last - i];
        if (slash != last - i) {
          break;
        }
        i += 1;
      }
      name = NetI2pUtilEepGet_sanitizeWithNSString_([path java_substring:slash + 1 endIndex:[path java_length] - i]);
    }
  }
  return name;
}

NSString *NetI2pUtilEepGet_sanitizeWithNSString_(NSString *name) {
  NetI2pUtilEepGet_initialize();
  if ([((NSString *) nil_chk(name)) isEqual:@"."] || [name isEqual:@" "]) return @"_";
  NSString *rv = name;
  if ([rv java_hasPrefix:@"."]) rv = JreStrcat("C$", '_', [rv java_substring:1]);
  if ([rv java_hasSuffix:@"."] || [rv java_hasSuffix:@" "]) rv = JreStrcat("$C", [rv java_substring:0 endIndex:[rv java_length] - 1], '_');
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(NetI2pUtilEepGet_ILLEGAL))->size_; i++) {
    if ([((NSString *) nil_chk(rv)) java_indexOf:IOSCharArray_Get(NetI2pUtilEepGet_ILLEGAL, i)] >= 0) rv = [rv java_replace:IOSCharArray_Get(NetI2pUtilEepGet_ILLEGAL, i) withChar:'_'];
  }
  return rv;
}

void NetI2pUtilEepGet_usage() {
  NetI2pUtilEepGet_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"eepget [-p 127.0.0.1[:4444]] [-c] [-o outputFile]\n       [-n #retries] (default 0)\n       [-m markSize] (default 1024)\n       [-l lineLen]  (default 40)\n       [-t timeout]  (default 60 sec)\n       [-e etag]\n       [-h headerName=headerValue]\n       [-u username] [-x password] url\n       (use -c or -p :0 for no proxy)"];
}

jint NetI2pUtilEepGet_handleStatusWithNSString_(NetI2pUtilEepGet *self, NSString *line) {
  line = [((NSString *) nil_chk(line)) java_trim];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$C", @"Status line: [", line, ']')];
  IOSObjectArray *toks = NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(line, @" ", 3);
  if (((IOSObjectArray *) nil_chk(toks))->size_ < 2) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"ERR: status ", line)];
    return -1;
  }
  NSString *rc = IOSObjectArray_Get(toks, 1);
  @try {
    if (toks->size_ >= 3) JreStrongAssign(&self->_responseText_, [((NSString *) nil_chk(IOSObjectArray_Get(toks, 2))) java_trim]);
    else JreStrongAssign(&self->_responseText_, nil);
    return JavaLangInteger_parseIntWithNSString_(rc);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("$$", @"ERR: status is invalid: ", line) withJavaLangThrowable:nfe];
    return -1;
  }
}

void NetI2pUtilEepGet_handleWithNSString_withNSString_(NetI2pUtilEepGet *self, NSString *key, NSString *val) {
  key = [((NSString *) nil_chk(key)) java_trim];
  val = [((NSString *) nil_chk(val)) java_trim];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->_listeners_)) size]; i++) [((id<NetI2pUtilEepGet_StatusListener>) nil_chk([self->_listeners_ getWithInt:i])) headerReceivedWithNSString:self->_url_ withInt:self->_currentAttempt_ withNSString:key withNSString:val];
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$$$$C", @"Header line: [", key, @"] = [", val, ']')];
  key = [((NSString *) nil_chk(key)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(key)) isEqual:@"content-length"]) {
    @try {
      self->_bytesRemaining_ = JavaLangLong_parseLongWithNSString_(val);
    }
    @catch (JavaLangNumberFormatException *nfe) {
      [nfe printStackTrace];
    }
  }
  else if ([key isEqual:@"etag"]) {
    JreStrongAssign(&self->_etag_, val);
  }
  else if ([key isEqual:@"last-modified"]) {
    JreStrongAssign(&self->_lastModified_, val);
  }
  else if ([key isEqual:@"transfer-encoding"]) {
    self->_encodingChunked_ = [((NSString *) nil_chk([((NSString *) nil_chk(val)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"chunked"];
  }
  else if ([key isEqual:@"content-encoding"]) {
    if ((![((NSString *) nil_chk(self->_actualURL_)) java_hasSuffix:@".gz"]) && (![((NSString *) nil_chk(self->_actualURL_)) java_hasSuffix:@".tgz"])) self->_isGzippedResponse_ = [((NSString *) nil_chk([((NSString *) nil_chk(val)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"gzip"];
  }
  else if ([key isEqual:@"content-type"]) {
    JreStrongAssign(&self->_contentType_, val);
  }
  else if ([key isEqual:@"location"]) {
    JreStrongAssign(&self->_redirectLocation_, val);
  }
  else if ([key isEqual:@"proxy-authenticate"] && self->_responseCode_ == 407 && self->_authState_ != nil && self->_shouldProxy_) {
    [self->_authState_ setAuthChallengeWithNSString:val];
  }
  else {
  }
}

void NetI2pUtilEepGet_incrementWithByteArray_withInt_(IOSByteArray *lookahead, jint cur) {
  NetI2pUtilEepGet_initialize();
  *IOSByteArray_GetRef(nil_chk(lookahead), 0) = IOSByteArray_Get(lookahead, 1);
  *IOSByteArray_GetRef(lookahead, 1) = IOSByteArray_Get(lookahead, 2);
  *IOSByteArray_GetRef(lookahead, 2) = (jbyte) cur;
}

jboolean NetI2pUtilEepGet_isEndOfHeadersWithByteArray_(IOSByteArray *lookahead) {
  NetI2pUtilEepGet_initialize();
  return IOSByteArray_Get(nil_chk(lookahead), 2) == NetI2pUtilEepGet_NL && (IOSByteArray_Get(lookahead, 0) == NetI2pUtilEepGet_NL || IOSByteArray_Get(lookahead, 1) == NetI2pUtilEepGet_NL);
}

id<JavaUtilMap> NetI2pUtilEepGet_parseAuthArgsWithNSString_(NSString *args) {
  NetI2pUtilEepGet_initialize();
  id<JavaUtilMap> rv = create_JavaUtilHashMap_initWithInt_(8);
  IOSCharArray *data = [((NSString *) nil_chk(args)) java_toCharArray];
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(32);
  jboolean isQuoted = false;
  NSString *key = nil;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(data))->size_; i++) {
    switch (IOSCharArray_Get(data, i)) {
      case '"':
      if (isQuoted) {
        if (key != nil) {
          [rv putWithId:key withId:[((NSString *) nil_chk([buf description])) java_trim]];
          key = nil;
        }
        [buf setLengthWithInt:0];
      }
      isQuoted = !isQuoted;
      break;
      case ' ':
      case 0x000d:
      case 0x000a:
      case 0x0009:
      case ',':
      if (isQuoted) {
        [buf appendWithChar:IOSCharArray_Get(data, i)];
      }
      else {
        if (key != nil) {
          [rv putWithId:key withId:[((NSString *) nil_chk([buf description])) java_trim]];
          key = nil;
        }
        [buf setLengthWithInt:0];
      }
      break;
      case '=':
      if (isQuoted) {
        [buf appendWithChar:IOSCharArray_Get(data, i)];
      }
      else {
        key = [((NSString *) nil_chk([((NSString *) nil_chk([buf description])) java_trim])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
        [buf setLengthWithInt:0];
      }
      break;
      default:
      [buf appendWithChar:IOSCharArray_Get(data, i)];
      break;
    }
  }
  if (key != nil) [rv putWithId:key withId:[((NSString *) nil_chk([buf description])) java_trim]];
  return rv;
}

NSString *NetI2pUtilEepGet_lc8hexWithInt_(jint nc) {
  NetI2pUtilEepGet_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(8);
  for (jint i = 28; i >= 0; i -= 4) {
    jint v = (JreRShift32(nc, i)) & (jint) 0xf;
    if (v < 10) [buf appendWithChar:(jchar) (v + '0')];
    else [buf appendWithChar:(jchar) (v + 'a' - 10)];
  }
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet)

@implementation NetI2pUtilEepGet_StatusListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(bytesTransferredWithLong:withInt:withLong:withLong:withNSString:);
  methods[1].selector = @selector(transferCompleteWithLong:withLong:withLong:withNSString:withNSString:withBoolean:);
  methods[2].selector = @selector(attemptFailedWithNSString:withLong:withLong:withInt:withInt:withJavaLangException:);
  methods[3].selector = @selector(transferFailedWithNSString:withLong:withLong:withInt:);
  methods[4].selector = @selector(headerReceivedWithNSString:withInt:withNSString:withNSString:);
  methods[5].selector = @selector(attemptingWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "bytesTransferred", "JIJJLNSString;", "transferComplete", "JJJLNSString;LNSString;Z", "attemptFailed", "LNSString;JJIILJavaLangException;", "transferFailed", "LNSString;JJI", "headerReceived", "LNSString;ILNSString;LNSString;", "attempting", "LNSString;", "LNetI2pUtilEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_StatusListener = { "StatusListener", "net.i2p.util", ptrTable, methods, NULL, 7, 0x609, 6, 0, 12, -1, -1, -1, -1 };
  return &_NetI2pUtilEepGet_StatusListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet_StatusListener)

@implementation NetI2pUtilEepGet_CLIStatusListener

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$ {
  NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_(self, outer$);
  return self;
}

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$
                                 withInt:(jint)markSize
                                 withInt:(jint)lineSize {
  NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(self, outer$, markSize, lineSize);
  return self;
}

- (void)bytesTransferredWithLong:(jlong)alreadyTransferred
                         withInt:(jint)currentWrite
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url {
  if (_firstTime_) {
    if (alreadyTransferred > 0) {
      _previousWritten_ = alreadyTransferred;
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$", @"File found with length ", alreadyTransferred, @", resuming")];
    }
    _firstTime_ = false;
  }
  if (_written_ == 0 && alreadyTransferred == 0 && _previousWritten_ > 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$", @"Server does not support resume, discarding ", _previousWritten_, @" bytes")];
    _discarded_ += _previousWritten_;
    _previousWritten_ = 0;
  }
  for (jint i = 0; i < currentWrite; i++) {
    _written_++;
    if ((_markSize_ > 0) && (_written_ % _markSize_ == 0)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"#"];
      if ((_lineSize_ > 0) && (_written_ % ((jlong) _markSize_ * (jlong) _lineSize_) == 0l)) {
        jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now];
        jlong timeToSend = now - _lastComplete_;
        if (timeToSend > 0) {
          JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(50);
          JavaUtilFormatter *fmt = create_JavaUtilFormatter_initWithJavaLangAppendable_(buf);
          [buf appendWithNSString:@" "];
          if (bytesRemaining > 0) {
            jdouble pct = 100 * ((jdouble) _written_ + _previousWritten_) / ((jdouble) alreadyTransferred + (jdouble) currentWrite + bytesRemaining);
            [fmt formatWithNSString:@"%4.1f" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(pct) } count:1 type:NSObject_class_()]];
            [buf appendWithNSString:@"%: "];
          }
          [fmt formatWithNSString:@"%8d" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(_written_) } count:1 type:NSObject_class_()]];
          [buf appendWithNSString:@" @ "];
          jdouble lineKBytes = ((jdouble) _markSize_ * (jdouble) _lineSize_) / 1024.0;
          jdouble kbps = lineKBytes / (timeToSend / 1000.0);
          [fmt formatWithNSString:@"%7.2f" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(kbps) } count:1 type:NSObject_class_()]];
          [buf appendWithNSString:@" KBps"];
          [buf appendWithNSString:@" / "];
          jlong lifetime = [((NetI2pUtilClock *) nil_chk([this$0_->_context_ clock])) now] - _startedOn_;
          jdouble lifetimeKBps = (1000.0 * (_written_) / (lifetime * 1024.0));
          [fmt formatWithNSString:@"%7.2f" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(lifetimeKBps) } count:1 type:NSObject_class_()]];
          [buf appendWithNSString:@" KBps"];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[buf description]];
          [fmt close];
        }
        _lastComplete_ = now;
      }
    }
  }
}

- (void)transferCompleteWithLong:(jlong)alreadyTransferred
                        withLong:(jlong)bytesTransferred
                        withLong:(jlong)bytesRemaining
                    withNSString:(NSString *)url
                    withNSString:(NSString *)outputFile
                     withBoolean:(jboolean)notModified {
  jlong transferred;
  if (_firstTime_) transferred = 0;
  else transferred = alreadyTransferred - _previousWritten_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"== ", create_JavaUtilDate_init())];
  if (notModified) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"== Source not modified since last download"];
  }
  else {
    if (bytesRemaining > 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$J$J$$", @"== Transfer of ", url, @" completed with ", transferred, @" transferred and ", (bytesRemaining - bytesTransferred), @" remaining", (_discarded_ > 0 ? (JreStrcat("$J$", @" and ", _discarded_, @" bytes discarded")) : @""))];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$J$$", @"== Transfer of ", url, @" completed with ", transferred, @" bytes transferred", (_discarded_ > 0 ? (JreStrcat("$J$", @" and ", _discarded_, @" bytes discarded")) : @""))];
    }
    if (transferred > 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$J$", @"== Output saved to ", outputFile, @" (", alreadyTransferred, @" bytes)")];
  }
  jlong timeToSend = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now] - _startedOn_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"== Transfer time: ", NetI2pDataDataHelper_formatDurationWithLong_(timeToSend))];
  if (this$0_->_etag_ != nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"== ETag: ", this$0_->_etag_)];
  if (transferred > 0) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(50);
    [buf appendWithNSString:@"== Transfer rate: "];
    jdouble kbps = (1000.0 * (transferred) / (timeToSend * 1024.0));
    @synchronized(_kbps_) {
      [buf appendWithNSString:[((JavaTextDecimalFormat *) nil_chk(_kbps_)) formatWithDouble:kbps]];
    }
    [buf appendWithNSString:@"KBps"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[buf description]];
  }
}

- (void)attemptFailedWithNSString:(NSString *)url
                         withLong:(jlong)bytesTransferred
                         withLong:(jlong)bytesRemaining
                          withInt:(jint)currentAttempt
                          withInt:(jint)numRetries
            withJavaLangException:(JavaLangException *)cause {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"** ", create_JavaUtilDate_init())];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$$", @"** Attempt ", currentAttempt, @" of ", url, @" failed")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$$$", @"** Transfered ", bytesTransferred, @" with ", (bytesRemaining < 0 ? @"unknown" : JavaLangLong_toStringWithLong_(bytesRemaining)), @" remaining")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"** ", [((JavaLangException *) nil_chk(cause)) getMessage])];
  _previousWritten_ += _written_;
  _written_ = 0;
}

- (void)transferFailedWithNSString:(NSString *)url
                          withLong:(jlong)bytesTransferred
                          withLong:(jlong)bytesRemaining
                           withInt:(jint)currentAttempt {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"== ", create_JavaUtilDate_init())];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$I$", @"== Transfer of ", url, @" failed after ", currentAttempt, @" attempts")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$$$", @"== Transfer size: ", bytesTransferred, @" with ", (bytesRemaining < 0 ? @"unknown" : JavaLangLong_toStringWithLong_(bytesRemaining)), @" remaining")];
  jlong timeToSend = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now] - _startedOn_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"== Transfer time: ", NetI2pDataDataHelper_formatDurationWithLong_(timeToSend))];
  jdouble kbps = (timeToSend > 0 ? (1000.0 * (bytesTransferred) / (timeToSend * 1024.0)) : 0);
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(50);
  [buf appendWithNSString:@"== Transfer rate: "];
  @synchronized(_kbps_) {
    [buf appendWithNSString:[((JavaTextDecimalFormat *) nil_chk(_kbps_)) formatWithDouble:kbps]];
  }
  [buf appendWithNSString:@"KBps"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[buf description]];
}

- (void)attemptingWithNSString:(NSString *)url {
}

- (void)headerReceivedWithNSString:(NSString *)url
                           withInt:(jint)currentAttempt
                      withNSString:(NSString *)key
                      withNSString:(NSString *)val {
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_pct_);
  RELEASE_(_kbps_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilEepGet:);
  methods[1].selector = @selector(initWithNetI2pUtilEepGet:withInt:withInt:);
  methods[2].selector = @selector(bytesTransferredWithLong:withInt:withLong:withLong:withNSString:);
  methods[3].selector = @selector(transferCompleteWithLong:withLong:withLong:withNSString:withNSString:withBoolean:);
  methods[4].selector = @selector(attemptFailedWithNSString:withLong:withLong:withInt:withInt:withJavaLangException:);
  methods[5].selector = @selector(transferFailedWithNSString:withLong:withLong:withInt:);
  methods[6].selector = @selector(attemptingWithNSString:);
  methods[7].selector = @selector(headerReceivedWithNSString:withInt:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilEepGet;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_markSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lineSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_startedOn_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_written_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_previousWritten_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_discarded_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastComplete_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_firstTime_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_pct_", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_kbps_", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "bytesTransferred", "JIJJLNSString;", "transferComplete", "JJJLNSString;LNSString;Z", "attemptFailed", "LNSString;JJIILJavaLangException;", "transferFailed", "LNSString;JJI", "attempting", "LNSString;", "headerReceived", "LNSString;ILNSString;LNSString;", "LNetI2pUtilEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_CLIStatusListener = { "CLIStatusListener", "net.i2p.util", ptrTable, methods, fields, 7, 0x4, 8, 11, 13, -1, -1, -1, -1 };
  return &_NetI2pUtilEepGet_CLIStatusListener;
}

@end

void NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_(NetI2pUtilEepGet_CLIStatusListener *self, NetI2pUtilEepGet *outer$) {
  NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(self, outer$, 1024, 40);
}

NetI2pUtilEepGet_CLIStatusListener *new_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_(NetI2pUtilEepGet *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet_CLIStatusListener, initWithNetI2pUtilEepGet_, outer$)
}

NetI2pUtilEepGet_CLIStatusListener *create_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_(NetI2pUtilEepGet *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet_CLIStatusListener, initWithNetI2pUtilEepGet_, outer$)
}

void NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(NetI2pUtilEepGet_CLIStatusListener *self, NetI2pUtilEepGet *outer$, jint markSize, jint lineSize) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_pct_, new_JavaTextDecimalFormat_initWithNSString_(@"00.0%"));
  JreStrongAssignAndConsume(&self->_kbps_, new_JavaTextDecimalFormat_initWithNSString_(@"###,000.00"));
  self->_markSize_ = markSize;
  self->_lineSize_ = lineSize;
  self->_lastComplete_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(outer$->_context_)) clock])) now];
  self->_startedOn_ = self->_lastComplete_;
  self->_firstTime_ = true;
}

NetI2pUtilEepGet_CLIStatusListener *new_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(NetI2pUtilEepGet *outer$, jint markSize, jint lineSize) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet_CLIStatusListener, initWithNetI2pUtilEepGet_withInt_withInt_, outer$, markSize, lineSize)
}

NetI2pUtilEepGet_CLIStatusListener *create_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(NetI2pUtilEepGet *outer$, jint markSize, jint lineSize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet_CLIStatusListener, initWithNetI2pUtilEepGet_withInt_withInt_, outer$, markSize, lineSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet_CLIStatusListener)

@implementation NetI2pUtilEepGet_1

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$
             withNetI2pUtilSocketTimeout:(NetI2pUtilSocketTimeout *)capture$0 {
  NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(self, outer$, capture$0);
  return self;
}

- (void)run {
  if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$$$@", @"timeout reached on ", this$0_->_url_, @": ", val$stimeout_)];
  this$0_->_aborted_ = true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$stimeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilEepGet:withNetI2pUtilSocketTimeout:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilEepGet;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$stimeout_", "LNetI2pUtilSocketTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilEepGet;", "fetchWithLong:withLong:withLong:" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_1 = { "", "net.i2p.util", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_NetI2pUtilEepGet_1;
}

@end

void NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet_1 *self, NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$stimeout_, capture$0);
  NSObject_init(self);
}

NetI2pUtilEepGet_1 *new_NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet_1, initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_, outer$, capture$0)
}

NetI2pUtilEepGet_1 *create_NetI2pUtilEepGet_1_initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_(NetI2pUtilEepGet *outer$, NetI2pUtilSocketTimeout *capture$0) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet_1, initWithNetI2pUtilEepGet_withNetI2pUtilSocketTimeout_, outer$, capture$0)
}

J2OBJC_INITIALIZED_DEFN(NetI2pUtilEepGet_AUTH_MODE)

NetI2pUtilEepGet_AUTH_MODE *NetI2pUtilEepGet_AUTH_MODE_values_[4];

@implementation NetI2pUtilEepGet_AUTH_MODE

+ (NetI2pUtilEepGet_AUTH_MODE *)NONE {
  return JreEnum(NetI2pUtilEepGet_AUTH_MODE, NONE);
}

+ (NetI2pUtilEepGet_AUTH_MODE *)BASIC {
  return JreEnum(NetI2pUtilEepGet_AUTH_MODE, BASIC);
}

+ (NetI2pUtilEepGet_AUTH_MODE *)DIGEST {
  return JreEnum(NetI2pUtilEepGet_AUTH_MODE, DIGEST);
}

+ (NetI2pUtilEepGet_AUTH_MODE *)UNKNOWN {
  return JreEnum(NetI2pUtilEepGet_AUTH_MODE, UNKNOWN);
}

+ (IOSObjectArray *)values {
  return NetI2pUtilEepGet_AUTH_MODE_values();
}

+ (NetI2pUtilEepGet_AUTH_MODE *)valueOfWithNSString:(NSString *)name {
  return NetI2pUtilEepGet_AUTH_MODE_valueOfWithNSString_(name);
}

- (NetI2pUtilEepGet_AUTH_MODE_Enum)toNSEnum {
  return (NetI2pUtilEepGet_AUTH_MODE_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pUtilEepGet_AUTH_MODE;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilEepGet_AUTH_MODE;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LNetI2pUtilEepGet_AUTH_MODE;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BASIC", "LNetI2pUtilEepGet_AUTH_MODE;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DIGEST", "LNetI2pUtilEepGet_AUTH_MODE;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "UNKNOWN", "LNetI2pUtilEepGet_AUTH_MODE;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pUtilEepGet_AUTH_MODE, NONE), &JreEnum(NetI2pUtilEepGet_AUTH_MODE, BASIC), &JreEnum(NetI2pUtilEepGet_AUTH_MODE, DIGEST), &JreEnum(NetI2pUtilEepGet_AUTH_MODE, UNKNOWN), "LNetI2pUtilEepGet;", "Ljava/lang/Enum<Lnet/i2p/util/EepGet$AUTH_MODE;>;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_AUTH_MODE = { "AUTH_MODE", "net.i2p.util", ptrTable, methods, fields, 7, 0x401c, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pUtilEepGet_AUTH_MODE;
}

+ (void)initialize {
  if (self == [NetI2pUtilEepGet_AUTH_MODE class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pUtilEepGet_AUTH_MODE_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pUtilEepGet_AUTH_MODE_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pUtilEepGet_AUTH_MODE_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilEepGet_AUTH_MODE)
  }
}

@end

void NetI2pUtilEepGet_AUTH_MODE_initWithNSString_withInt_(NetI2pUtilEepGet_AUTH_MODE *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pUtilEepGet_AUTH_MODE_values() {
  NetI2pUtilEepGet_AUTH_MODE_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pUtilEepGet_AUTH_MODE_values_ count:4 type:NetI2pUtilEepGet_AUTH_MODE_class_()];
}

NetI2pUtilEepGet_AUTH_MODE *NetI2pUtilEepGet_AUTH_MODE_valueOfWithNSString_(NSString *name) {
  NetI2pUtilEepGet_AUTH_MODE_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pUtilEepGet_AUTH_MODE *e = NetI2pUtilEepGet_AUTH_MODE_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pUtilEepGet_AUTH_MODE *NetI2pUtilEepGet_AUTH_MODE_fromOrdinal(NSUInteger ordinal) {
  NetI2pUtilEepGet_AUTH_MODE_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pUtilEepGet_AUTH_MODE_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet_AUTH_MODE)

@implementation NetI2pUtilEepGet_AuthState

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$
                            withNSString:(NSString *)user
                            withNSString:(NSString *)pw {
  NetI2pUtilEepGet_AuthState_initWithNetI2pUtilEepGet_withNSString_withNSString_(self, outer$, user, pw);
  return self;
}

- (void)setAuthChallengeWithNSString:(NSString *)auth {
  NSString *authLC = [((NSString *) nil_chk(auth)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(authLC)) java_hasPrefix:@"basic "]) {
    if (authMode_ != JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, DIGEST)) {
      JreStrongAssign(&authMode_, JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, BASIC));
      JreStrongAssign(&authChallenge_, [auth java_substring:6]);
    }
  }
  else if ([authLC java_hasPrefix:@"digest "]) {
    JreStrongAssign(&authMode_, JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, DIGEST));
    JreStrongAssign(&authChallenge_, [auth java_substring:7]);
  }
  else {
    if (authMode_ == JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE)) {
      JreStrongAssign(&authMode_, JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, UNKNOWN));
      JreStrongAssign(&authChallenge_, nil);
    }
  }
  nonceCount_ = 0;
  JreStrongAssign(&args_, nil);
}

- (NSString *)getAuthHeaderWithNSString:(NSString *)method
                           withNSString:(NSString *)uri {
  {
    id<JavaUtilMap> outArgs;
    JavaLangStringBuilder *buf;
    switch ([authMode_ ordinal]) {
      case NetI2pUtilEepGet_AUTH_MODE_Enum_BASIC:
      authSent_ = true;
      return JreStrcat("$$", @"Basic ", NetI2pDataBase64_encodeWithByteArray_withBoolean_(NetI2pDataDataHelper_getUTF8WithNSString_(JreStrcat("$C$", username_, ':', password_)), true));
      case NetI2pUtilEepGet_AUTH_MODE_Enum_DIGEST:
      if (authChallenge_ == nil) @throw create_JavaIoIOException_initWithNSString_(@"Bad proxy auth response");
      if (args_ == nil) JreStrongAssign(&args_, NetI2pUtilEepGet_parseAuthArgsWithNSString_(authChallenge_));
      outArgs = [self generateAuthArgsWithNSString:method withNSString:uri];
      if (outArgs == nil) @throw create_JavaIoIOException_initWithNSString_(@"Bad proxy auth response");
      buf = create_JavaLangStringBuilder_initWithInt_(256);
      [buf appendWithNSString:@"Digest"];
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([outArgs entrySet])) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]])) appendWithChar:'='])) appendWithNSString:[e getValue]];
      }
      authSent_ = true;
      return [buf description];
      default:
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Unknown proxy auth type ", authChallenge_));
    }
  }
}

- (id<JavaUtilMap>)generateAuthArgsWithNSString:(NSString *)method
                                   withNSString:(NSString *)uri {
  id<JavaUtilMap> rv = create_JavaUtilHashMap_initWithInt_(12);
  NSString *realm = [((id<JavaUtilMap>) nil_chk(args_)) getWithId:@"realm"];
  NSString *nonce = [((id<JavaUtilMap>) nil_chk(args_)) getWithId:@"nonce"];
  NSString *qop = [((id<JavaUtilMap>) nil_chk(args_)) getWithId:@"qop"];
  NSString *opaque = [((id<JavaUtilMap>) nil_chk(args_)) getWithId:@"opaque"];
  if (realm == nil || nonce == nil) {
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [this$0_->_log_ infoWithNSString:JreStrcat("$$", @"Bad digest request: ", NetI2pDataDataHelper_toStringWithJavaUtilMap_(args_))];
    @throw create_JavaIoIOException_initWithNSString_(@"Bad auth response");
  }
  [rv putWithId:@"username" withId:JreStrcat("C$C", '"', username_, '"')];
  [rv putWithId:@"realm" withId:JreStrcat("C$C", '"', realm, '"')];
  [rv putWithId:@"nonce" withId:JreStrcat("C$C", '"', nonce, '"')];
  [rv putWithId:@"uri" withId:JreStrcat("C$C", '"', uri, '"')];
  if (opaque != nil) [rv putWithId:@"opaque" withId:JreStrcat("C$C", '"', opaque, '"')];
  NSString *kdMiddle;
  if ([@"auth" isEqual:qop]) {
    [rv putWithId:@"qop" withId:@"\"auth\""];
    if (cnonce_ == nil) {
      IOSByteArray *rand = [IOSByteArray arrayWithLength:5];
      [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) random])) nextBytesWithByteArray:rand];
      JreStrongAssign(&cnonce_, NetI2pDataBase32_encodeWithByteArray_(rand));
    }
    [rv putWithId:@"cnonce" withId:JreStrcat("C$C", '"', cnonce_, '"')];
    NSString *nc = NetI2pUtilEepGet_lc8hexWithInt_(++nonceCount_);
    [rv putWithId:@"nc" withId:nc];
    kdMiddle = JreStrcat("C$C$C$", ':', nc, ':', cnonce_, ':', qop);
  }
  else {
    kdMiddle = @"";
  }
  NSString *ha1 = NetI2pUtilPasswordManager_md5HexWithNSString_(JreStrcat("$C$C$", username_, ':', realm, ':', password_));
  NSString *a2 = JreStrcat("$C$", method, ':', uri);
  NSString *ha2 = NetI2pUtilPasswordManager_md5HexWithNSString_(a2);
  NSString *kd = JreStrcat("$C$$C$", ha1, ':', nonce, kdMiddle, ':', ha2);
  [rv putWithId:@"response" withId:JreStrcat("C$C", '"', NetI2pUtilPasswordManager_md5HexWithNSString_(kd), '"')];
  return rv;
}

- (NSString *)getUsername {
  return username_;
}

- (NSString *)getPassword {
  return password_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(username_);
  RELEASE_(password_);
  RELEASE_(authMode_);
  RELEASE_(authChallenge_);
  RELEASE_(cnonce_);
  RELEASE_(args_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 0, 4, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilEepGet:withNSString:withNSString:);
  methods[1].selector = @selector(setAuthChallengeWithNSString:);
  methods[2].selector = @selector(getAuthHeaderWithNSString:withNSString:);
  methods[3].selector = @selector(generateAuthArgsWithNSString:withNSString:);
  methods[4].selector = @selector(getUsername);
  methods[5].selector = @selector(getPassword);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilEepGet;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "username_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "password_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "authMode_", "LNetI2pUtilEepGet_AUTH_MODE;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "authChallenge_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authSent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nonceCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cnonce_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "args_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "setAuthChallenge", "LNSString;", "getAuthHeader", "LJavaIoIOException;", "generateAuthArgs", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LNetI2pUtilEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_AuthState = { "AuthState", "net.i2p.util", ptrTable, methods, fields, 7, 0x4, 6, 9, 8, -1, -1, -1, -1 };
  return &_NetI2pUtilEepGet_AuthState;
}

@end

void NetI2pUtilEepGet_AuthState_initWithNetI2pUtilEepGet_withNSString_withNSString_(NetI2pUtilEepGet_AuthState *self, NetI2pUtilEepGet *outer$, NSString *user, NSString *pw) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->authMode_, JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE));
  JreStrongAssign(&self->username_, user);
  JreStrongAssign(&self->password_, pw);
}

NetI2pUtilEepGet_AuthState *new_NetI2pUtilEepGet_AuthState_initWithNetI2pUtilEepGet_withNSString_withNSString_(NetI2pUtilEepGet *outer$, NSString *user, NSString *pw) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet_AuthState, initWithNetI2pUtilEepGet_withNSString_withNSString_, outer$, user, pw)
}

NetI2pUtilEepGet_AuthState *create_NetI2pUtilEepGet_AuthState_initWithNetI2pUtilEepGet_withNSString_withNSString_(NetI2pUtilEepGet *outer$, NSString *user, NSString *pw) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet_AuthState, initWithNetI2pUtilEepGet_withNSString_withNSString_, outer$, user, pw)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet_AuthState)

@implementation NetI2pUtilEepGet_Gunzipper

- (instancetype)initWithNetI2pUtilEepGet:(NetI2pUtilEepGet *)outer$
                   withJavaIoInputStream:(JavaIoInputStream *)inArg
                  withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(self, outer$, inArg, outArg);
  return self;
}

- (void)run {
  NetI2pUtilReusableGZIPInputStream *in = NetI2pUtilReusableGZIPInputStream_acquire();
  NetI2pDataByteArray *ba = nil;
  jlong written = 0;
  @try {
    [((NetI2pUtilReusableGZIPInputStream *) nil_chk(in)) initialize__WithJavaIoInputStream:_inRaw_];
    NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(in, _out_);
  }
  @catch (JavaIoIOException *ioe) {
    JreStrongAssign(&this$0_->_decompressException_, ioe);
    if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [this$0_->_log_ warnWithNSString:JreStrcat("$J$JCJ", @"Error decompressing: ", written, @", ", [in getTotalRead], '/', [in getTotalExpanded]) withJavaLangThrowable:ioe];
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    JreStrongAssignAndConsume(&this$0_->_decompressException_, new_JavaIoIOException_initWithNSString_(@"OOM in HTTP Decompressor"));
    [((NetI2pUtilLog *) nil_chk(this$0_->_log_)) errorWithNSString:@"OOM in HTTP Decompressor" withJavaLangThrowable:oom];
  }
  @finally {
    if (_out_ != nil) @try {
      [_out_ close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    NetI2pUtilReusableGZIPInputStream_release__WithNetI2pUtilReusableGZIPInputStream_(in);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_inRaw_);
  RELEASE_(_out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilEepGet:withJavaIoInputStream:withJavaIoOutputStream:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilEepGet;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_inRaw_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoOutputStream;", "LNetI2pUtilEepGet;" };
  static const J2ObjcClassInfo _NetI2pUtilEepGet_Gunzipper = { "Gunzipper", "net.i2p.util", ptrTable, methods, fields, 7, 0x4, 2, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilEepGet_Gunzipper;
}

@end

void NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(NetI2pUtilEepGet_Gunzipper *self, NetI2pUtilEepGet *outer$, JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_inRaw_, inArg);
  JreStrongAssign(&self->_out_, outArg);
}

NetI2pUtilEepGet_Gunzipper *new_NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(NetI2pUtilEepGet *outer$, JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(NetI2pUtilEepGet_Gunzipper, initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_, outer$, inArg, outArg)
}

NetI2pUtilEepGet_Gunzipper *create_NetI2pUtilEepGet_Gunzipper_initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_(NetI2pUtilEepGet *outer$, JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(NetI2pUtilEepGet_Gunzipper, initWithNetI2pUtilEepGet_withJavaIoInputStream_withJavaIoOutputStream_, outer$, inArg, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilEepGet_Gunzipper)
