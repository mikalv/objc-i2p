//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ObjectCounter.java
//

#include "J2ObjC_source.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/util/ObjectCounter.h"

@interface NetI2pUtilObjectCounter () {
 @public
  JavaUtilConcurrentConcurrentHashMap *map_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilObjectCounter, map_, JavaUtilConcurrentConcurrentHashMap *)

inline jlong NetI2pUtilObjectCounter_get_serialVersionUID(void);
#define NetI2pUtilObjectCounter_serialVersionUID 3160378641721937421LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilObjectCounter, serialVersionUID, jlong)

@implementation NetI2pUtilObjectCounter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilObjectCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)incrementWithId:(id)h {
  JavaUtilConcurrentAtomicAtomicInteger *i = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->map_)) putIfAbsentWithId:h withId:create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1)];
  if (i != nil) return [i incrementAndGet];
  return 1;
}

- (jint)countWithId:(id)h {
  JavaUtilConcurrentAtomicAtomicInteger *i = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->map_)) getWithId:h];
  if (i != nil) return [i get];
  return 0;
}

- (id<JavaUtilSet>)objects {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->map_)) keySet];
}

- (void)clear {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->map_)) clear];
}

- (void)clearWithId:(id)h {
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->map_)) removeWithId:h];
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(incrementWithId:);
  methods[2].selector = @selector(countWithId:);
  methods[3].selector = @selector(objects);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(clearWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pUtilObjectCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "increment", "LNSObject;", "(TK;)I", "count", "()Ljava/util/Set<TK;>;", "clear", "(TK;)V", "Ljava/util/concurrent/ConcurrentHashMap<TK;Ljava/util/concurrent/atomic/AtomicInteger;>;", "<K:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pUtilObjectCounter = { "ObjectCounter", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 8, -1 };
  return &_NetI2pUtilObjectCounter;
}

@end

void NetI2pUtilObjectCounter_init(NetI2pUtilObjectCounter *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

NetI2pUtilObjectCounter *new_NetI2pUtilObjectCounter_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilObjectCounter, init)
}

NetI2pUtilObjectCounter *create_NetI2pUtilObjectCounter_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilObjectCounter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilObjectCounter)
