//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/PartialEepGet.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "gnu/getopt/Getopt.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/PartialEepGet.h"

@interface NetI2pUtilPartialEepGet () {
 @public
  jlong _fetchSize_;
}

+ (void)usage;

@end

__attribute__((unused)) static void NetI2pUtilPartialEepGet_usage(void);

@implementation NetI2pUtilPartialEepGet

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                               withNSString:(NSString *)proxyHost
                                    withInt:(jint)proxyPort
                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                               withNSString:(NSString *)url
                                   withLong:(jlong)size {
  NetI2pUtilPartialEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_(self, ctx, proxyHost, proxyPort, outputStream, url, size);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilPartialEepGet_mainWithNSStringArray_(args);
}

+ (void)usage {
  NetI2pUtilPartialEepGet_usage();
}

- (NSString *)getRequest {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(2048);
  JavaNetURI *url;
  @try {
    url = create_JavaNetURI_initWithNSString_(_actualURL_);
  }
  @catch (JavaNetURISyntaxException *use) {
    JavaIoIOException *ioe = create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL");
    [ioe initCauseWithJavaLangThrowable:use];
    @throw ioe;
  }
  NSString *host = [((JavaNetURI *) nil_chk(url)) getHost];
  if (host == nil || [host java_length] <= 0) @throw create_JavaNetMalformedURLException_initWithNSString_(@"Bad URL, no host");
  jint port = [url getPort];
  NSString *path = [url getRawPath];
  NSString *query = [url getRawQuery];
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", @"Requesting ", _actualURL_)];
  NSString *urlToSend;
  if (_shouldProxy_) {
    urlToSend = _actualURL_;
    if ((path == nil || [path java_length] <= 0) && (query == nil || [query java_length] <= 0)) JreStrAppend(&urlToSend, "$", @"/");
  }
  else {
    urlToSend = path;
    if (urlToSend == nil || [urlToSend java_length] <= 0) urlToSend = @"/";
    if (query != nil) JreStrAppend(&urlToSend, "C$", '?', query);
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"GET "])) appendWithNSString:urlToSend])) appendWithNSString:@" HTTP/1.1\x0d\n"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Host: "])) appendWithNSString:host];
  if (port >= 0) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithInt:port];
  [buf appendWithNSString:@"\x0d\n"];
  [buf appendWithNSString:@"Range: bytes="];
  [buf appendWithLong:_alreadyTransferred_];
  [buf appendWithChar:'-'];
  [buf appendWithLong:_fetchSize_ - 1];
  [buf appendWithNSString:@"\x0d\n"];
  [buf appendWithNSString:@"Cache-Control: no-cache\x0d\nPragma: no-cache\x0d\nAccept-Encoding: \x0d\nConnection: close\x0d\n"];
  jboolean uaOverridden = false;
  if (_extraHeaders_ != nil) {
    for (NSString * __strong hdr in _extraHeaders_) {
      if ([((NSString *) nil_chk([((NSString *) nil_chk(hdr)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasPrefix:@"user-agent: "]) uaOverridden = true;
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:hdr])) appendWithNSString:@"\x0d\n"];
    }
  }
  if (!uaOverridden) [buf appendWithNSString:JreStrcat("$$$", @"User-Agent: ", NetI2pUtilEepGet_USER_AGENT, @"\x0d\n")];
  if (_authState_ != nil && _shouldProxy_ && _authState_->authMode_ != JreLoadEnum(NetI2pUtilEepGet_AUTH_MODE, NONE)) {
    [buf appendWithNSString:@"Proxy-Authorization: "];
    [buf appendWithNSString:[((NetI2pUtilEepGet_AuthState *) nil_chk(_authState_)) getAuthHeaderWithNSString:@"GET" withNSString:urlToSend]];
    [buf appendWithNSString:@"\x0d\n"];
  }
  [buf appendWithNSString:@"\x0d\n"];
  if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$C", @"Request: [", [buf description], ']')];
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withInt:withJavaIoOutputStream:withNSString:withLong:);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(usage);
  methods[3].selector = @selector(getRequest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_fetchSize_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNSString;ILJavaIoOutputStream;LNSString;J", "main", "[LNSString;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _NetI2pUtilPartialEepGet = { "PartialEepGet", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilPartialEepGet;
}

@end

void NetI2pUtilPartialEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_(NetI2pUtilPartialEepGet *self, NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, jlong size) {
  NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self, ctx, proxyHost != nil && proxyPort > 0, proxyHost, proxyPort, 0, size, size, nil, outputStream, url, true, nil, nil);
  self->_fetchSize_ = size;
}

NetI2pUtilPartialEepGet *new_NetI2pUtilPartialEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, jlong size) {
  J2OBJC_NEW_IMPL(NetI2pUtilPartialEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_, ctx, proxyHost, proxyPort, outputStream, url, size)
}

NetI2pUtilPartialEepGet *create_NetI2pUtilPartialEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_(NetI2pI2PAppContext *ctx, NSString *proxyHost, jint proxyPort, JavaIoOutputStream *outputStream, NSString *url, jlong size) {
  J2OBJC_CREATE_IMPL(NetI2pUtilPartialEepGet, initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_, ctx, proxyHost, proxyPort, outputStream, url, size)
}

void NetI2pUtilPartialEepGet_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilPartialEepGet_initialize();
  NSString *proxyHost = @"127.0.0.1";
  jint proxyPort = 4444;
  jlong size = 56;
  NSString *saveAs = nil;
  NSString *username = nil;
  NSString *password = nil;
  jboolean error = false;
  GnuGetoptGetopt *g = create_GnuGetoptGetopt_initWithNSString_withNSStringArray_withNSString_(@"partialeepget", args, @"p:cl:o:u:x:");
  @try {
    jint c;
    while ((c = [g getopt]) != -1) {
      {
        NSString *s;
        jint colon;
        switch (c) {
          case 'p':
          s = [g getOptarg];
          colon = [((NSString *) nil_chk(s)) java_indexOf:':'];
          if (colon >= 0) {
            proxyHost = [s java_substring:0 endIndex:colon];
            NSString *port = [s java_substring:colon + 1];
            proxyPort = JavaLangInteger_parseIntWithNSString_(port);
          }
          else {
            proxyHost = s;
          }
          break;
          case 'c':
          proxyHost = @"";
          proxyPort = 0;
          break;
          case 'l':
          size = JavaLangLong_parseLongWithNSString_([g getOptarg]);
          break;
          case 'o':
          saveAs = [g getOptarg];
          break;
          case 'u':
          username = [g getOptarg];
          break;
          case 'x':
          password = [g getOptarg];
          break;
          case '?':
          case ':':
          default:
          error = true;
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [e printStackTrace];
    error = true;
  }
  if (error || ((IOSObjectArray *) nil_chk(args))->size_ - [g getOptind] != 1) {
    NetI2pUtilPartialEepGet_usage();
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *url = IOSObjectArray_Get(nil_chk(args), [g getOptind]);
  if (saveAs == nil) saveAs = NetI2pUtilEepGet_suggestNameWithNSString_(url);
  JavaIoOutputStream *out;
  @try {
    out = create_JavaIoFileOutputStream_initWithNSString_(saveAs);
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Failed to create output file ", saveAs)];
    out = nil;
    JavaLangSystem_exitWithInt_(1);
  }
  NetI2pUtilEepGet *get = create_NetI2pUtilPartialEepGet_initWithNetI2pI2PAppContext_withNSString_withInt_withJavaIoOutputStream_withNSString_withLong_(NetI2pI2PAppContext_getGlobalContext(), proxyHost, proxyPort, out, url, size);
  if (username != nil) {
    if (password == nil) {
      @try {
        JavaIoBufferedReader *r = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
        do {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"Proxy password: "];
          password = [r readLine];
          if (password == nil) @throw create_JavaIoIOException_init();
          password = [password java_trim];
        }
        while ([((NSString *) nil_chk(password)) java_length] <= 0);
      }
      @catch (JavaIoIOException *ioe) {
        JavaLangSystem_exitWithInt_(1);
      }
    }
    [get addAuthorizationWithNSString:username withNSString:password];
  }
  [get addStatusListenerWithNetI2pUtilEepGet_StatusListener:create_NetI2pUtilEepGet_CLIStatusListener_initWithNetI2pUtilEepGet_withInt_withInt_(get, 1024, 40)];
  if ([get fetchWithLong:45 * 1000 withLong:-1 withLong:60 * 1000]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Last-Modified: ", [get getLastModified])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Etag: ", [get getETag])];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Failed ", url)];
    JavaLangSystem_exitWithInt_(1);
  }
}

void NetI2pUtilPartialEepGet_usage() {
  NetI2pUtilPartialEepGet_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"PartialEepGet [-p 127.0.0.1[:4444]] [-c] [-o outputFile]\n              [-l #bytes] (default 56)\n              [-u username] [-x password] url\n              (use -c or -p :0 for no proxy)"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilPartialEepGet)
