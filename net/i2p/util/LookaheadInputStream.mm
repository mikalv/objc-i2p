//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LookaheadInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/FilterInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/System.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/LookaheadInputStream.h"

@interface NetI2pUtilLookaheadInputStream () {
 @public
  jboolean _eofReached_;
  IOSByteArray *_footerLookahead_;
  jint size_;
  jint index_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLookaheadInputStream, _footerLookahead_, IOSByteArray *)

inline JavaIoInputStream *NetI2pUtilLookaheadInputStream_get__fakeInputStream(void);
static JavaIoInputStream *NetI2pUtilLookaheadInputStream__fakeInputStream;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLookaheadInputStream, _fakeInputStream, JavaIoInputStream *)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilLookaheadInputStream)

@implementation NetI2pUtilLookaheadInputStream

- (instancetype)initWithInt:(jint)lookaheadSize {
  NetI2pUtilLookaheadInputStream_initWithInt_(self, lookaheadSize);
  return self;
}

- (jboolean)getEOFReached {
  return _eofReached_;
}

- (void)initialize__WithJavaIoInputStream:(JavaIoInputStream *)src {
  JreVolatileStrongAssign(&in_, src);
  _eofReached_ = false;
  index_ = 0;
  NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(JreLoadVolatileId(&in_), _footerLookahead_);
}

- (jint)read {
  if (_eofReached_) return -1;
  jint c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
  if (c == -1) {
    _eofReached_ = true;
    return -1;
  }
  jint rv = IOSByteArray_Get(nil_chk(_footerLookahead_), index_) & (jint) 0xff;
  *IOSByteArray_GetRef(_footerLookahead_, index_) = (jbyte) c;
  index_++;
  if (index_ >= size_) index_ = 0;
  return rv;
}

- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  if (_eofReached_) return -1;
  for (jint i = 0; i < len; i++) {
    jint c = [self read];
    if (c == -1) {
      if (i == 0) return -1;
      else return i;
    }
    else {
      *IOSByteArray_GetRef(nil_chk(buf), off + i) = (jbyte) c;
    }
  }
  return len;
}

- (IOSByteArray *)getFooter {
  if (index_ == 0) return _footerLookahead_;
  IOSByteArray *rv = [IOSByteArray arrayWithLength:size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_footerLookahead_, index_, rv, 0, size_ - index_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_footerLookahead_, 0, rv, size_ - index_, index_);
  return rv;
}

- (jlong)skipWithLong:(jlong)n {
  jlong rv = 0;
  jint c;
  while (rv < n && (c = [self read]) >= 0) {
    rv++;
  }
  return rv;
}

- (void)dealloc {
  RELEASE_(_footerLookahead_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getEOFReached);
  methods[2].selector = @selector(initialize__WithJavaIoInputStream:);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(getFooter);
  methods[6].selector = @selector(skipWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_eofReached_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_footerLookahead_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fakeInputStream", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "initialize", "LJavaIoInputStream;", "LJavaIoIOException;", "read", "[BII", "skip", "J", &NetI2pUtilLookaheadInputStream__fakeInputStream };
  static const J2ObjcClassInfo _NetI2pUtilLookaheadInputStream = { "LookaheadInputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilLookaheadInputStream;
}

+ (void)initialize {
  if (self == [NetI2pUtilLookaheadInputStream class]) {
    JreStrongAssignAndConsume(&NetI2pUtilLookaheadInputStream__fakeInputStream, new_JavaIoByteArrayInputStream_initWithByteArray_([IOSByteArray arrayWithLength:0]));
    J2OBJC_SET_INITIALIZED(NetI2pUtilLookaheadInputStream)
  }
}

@end

void NetI2pUtilLookaheadInputStream_initWithInt_(NetI2pUtilLookaheadInputStream *self, jint lookaheadSize) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, NetI2pUtilLookaheadInputStream__fakeInputStream);
  JreStrongAssignAndConsume(&self->_footerLookahead_, [IOSByteArray newArrayWithLength:lookaheadSize]);
  self->size_ = lookaheadSize;
}

NetI2pUtilLookaheadInputStream *new_NetI2pUtilLookaheadInputStream_initWithInt_(jint lookaheadSize) {
  J2OBJC_NEW_IMPL(NetI2pUtilLookaheadInputStream, initWithInt_, lookaheadSize)
}

NetI2pUtilLookaheadInputStream *create_NetI2pUtilLookaheadInputStream_initWithInt_(jint lookaheadSize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLookaheadInputStream, initWithInt_, lookaheadSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLookaheadInputStream)
