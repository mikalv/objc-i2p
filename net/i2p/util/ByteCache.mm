//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ByteCache.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/locks/Lock.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/TryCache.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pUtilByteCache () {
 @public
  jint _entrySize_;
}

- (instancetype)initWithInt:(jint)maxCachedEntries
                    withInt:(jint)entrySize;

- (void)resizeWithInt:(jint)maxCachedEntries;

@end

inline id<JavaUtilMap> NetI2pUtilByteCache_get__caches(void);
static id<JavaUtilMap> NetI2pUtilByteCache__caches;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilByteCache, _caches, id<JavaUtilMap>)

inline jint NetI2pUtilByteCache_get_MAX_CACHE(void);
static jint NetI2pUtilByteCache_MAX_CACHE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilByteCache, MAX_CACHE, jint)

inline jint NetI2pUtilByteCache_get_CLEANUP_FREQUENCY(void);
#define NetI2pUtilByteCache_CLEANUP_FREQUENCY 33000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilByteCache, CLEANUP_FREQUENCY, jint)

inline jlong NetI2pUtilByteCache_get_EXPIRE_PERIOD(void);
#define NetI2pUtilByteCache_EXPIRE_PERIOD 120000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilByteCache, EXPIRE_PERIOD, jlong)

__attribute__((unused)) static void NetI2pUtilByteCache_initWithInt_withInt_(NetI2pUtilByteCache *self, jint maxCachedEntries, jint entrySize);

__attribute__((unused)) static NetI2pUtilByteCache *new_NetI2pUtilByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilByteCache *create_NetI2pUtilByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize);

__attribute__((unused)) static void NetI2pUtilByteCache_resizeWithInt_(NetI2pUtilByteCache *self, jint maxCachedEntries);

@interface NetI2pUtilByteCache_ByteArrayFactory : NSObject < NetI2pUtilTryCache_ObjectFactory > {
 @public
  jint sz_;
}

- (instancetype)initWithInt:(jint)entrySize;

- (NetI2pDataByteArray *)newInstance OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilByteCache_ByteArrayFactory)

__attribute__((unused)) static void NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(NetI2pUtilByteCache_ByteArrayFactory *self, jint entrySize);

__attribute__((unused)) static NetI2pUtilByteCache_ByteArrayFactory *new_NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(jint entrySize) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilByteCache_ByteArrayFactory *create_NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(jint entrySize);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilByteCache_ByteArrayFactory)

@interface NetI2pUtilByteCache_Cleanup : NSObject < NetI2pUtilSimpleTimer_TimedEvent > {
 @public
  NetI2pUtilByteCache *this$0_;
}

- (instancetype)initWithNetI2pUtilByteCache:(NetI2pUtilByteCache *)outer$;

- (void)timeReached;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilByteCache_Cleanup)

__attribute__((unused)) static void NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache_Cleanup *self, NetI2pUtilByteCache *outer$);

__attribute__((unused)) static NetI2pUtilByteCache_Cleanup *new_NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilByteCache_Cleanup *create_NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilByteCache_Cleanup)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilByteCache)

@implementation NetI2pUtilByteCache

+ (NetI2pUtilByteCache *)getInstanceWithInt:(jint)cacheSize
                                    withInt:(jint)size {
  return NetI2pUtilByteCache_getInstanceWithInt_withInt_(cacheSize, size);
}

+ (void)clearAll {
  NetI2pUtilByteCache_clearAll();
}

- (instancetype)initWithInt:(jint)maxCachedEntries
                    withInt:(jint)entrySize {
  NetI2pUtilByteCache_initWithInt_withInt_(self, maxCachedEntries, entrySize);
  return self;
}

- (void)resizeWithInt:(jint)maxCachedEntries {
  NetI2pUtilByteCache_resizeWithInt_(self, maxCachedEntries);
}

- (void)release__WithId:(NetI2pDataByteArray *)entry_ {
  [self release__WithNetI2pDataByteArray:entry_ withBoolean:true];
}

- (void)release__WithNetI2pDataByteArray:(NetI2pDataByteArray *)entry_
                             withBoolean:(jboolean)shouldZero {
  if (entry_ == nil || [entry_ getData] == nil) return;
  if (((IOSByteArray *) nil_chk([entry_ getData]))->size_ != _entrySize_) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilByteCache_class_()];
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:@"Bad size" withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"I did it")];
    return;
  }
  [entry_ setValidWithInt:0];
  [entry_ setOffsetWithInt:0];
  if (shouldZero) JavaUtilArrays_fillWithByteArray_withByte_([entry_ getData], (jbyte) (jint) 0x0);
  [super release__WithId:entry_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilByteCache;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithInt:withInt:);
  methods[1].selector = @selector(clearAll);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(resizeWithInt:);
  methods[4].selector = @selector(release__WithId:);
  methods[5].selector = @selector(release__WithNetI2pDataByteArray:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_caches", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
    { "MAX_CACHE", "I", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "_entrySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CLEANUP_FREQUENCY", "I", .constantValue.asInt = NetI2pUtilByteCache_CLEANUP_FREQUENCY, 0x1a, -1, -1, -1, -1 },
    { "EXPIRE_PERIOD", "J", .constantValue.asLong = NetI2pUtilByteCache_EXPIRE_PERIOD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "II", "resize", "I", "release", "LNetI2pDataByteArray;", "LNetI2pDataByteArray;Z", &NetI2pUtilByteCache__caches, "Ljava/util/Map<Ljava/lang/Integer;Lnet/i2p/util/ByteCache;>;", &NetI2pUtilByteCache_MAX_CACHE, "LNetI2pUtilByteCache_ByteArrayFactory;LNetI2pUtilByteCache_Cleanup;", "Lnet/i2p/util/TryCache<Lnet/i2p/data/ByteArray;>;" };
  static const J2ObjcClassInfo _NetI2pUtilByteCache = { "ByteCache", "net.i2p.util", ptrTable, methods, fields, 7, 0x11, 6, 5, -1, 10, -1, 11, -1 };
  return &_NetI2pUtilByteCache;
}

+ (void)initialize {
  if (self == [NetI2pUtilByteCache class]) {
    JreStrongAssignAndConsume(&NetI2pUtilByteCache__caches, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(16));
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      NetI2pUtilByteCache_MAX_CACHE = (jint) JavaLangMath_minWithLong_withLong_(4 * 1024 * 1024l, JavaLangMath_maxWithLong_withLong_(128 * 1024l, maxMemory / 128));
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilByteCache)
  }
}

@end

NetI2pUtilByteCache *NetI2pUtilByteCache_getInstanceWithInt_withInt_(jint cacheSize, jint size) {
  NetI2pUtilByteCache_initialize();
  if (cacheSize * size > NetI2pUtilByteCache_MAX_CACHE) cacheSize = NetI2pUtilByteCache_MAX_CACHE / size;
  JavaLangInteger *sz = JavaLangInteger_valueOfWithInt_(size);
  NetI2pUtilByteCache *cache;
  @synchronized(NetI2pUtilByteCache__caches) {
    cache = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(NetI2pUtilByteCache__caches)) getWithId:sz]);
    if (cache == nil) {
      cache = JreRetainedLocalValue(create_NetI2pUtilByteCache_initWithInt_withInt_(cacheSize, size));
      [NetI2pUtilByteCache__caches putWithId:sz withId:cache];
    }
  }
  NetI2pUtilByteCache_resizeWithInt_(cache, cacheSize);
  return cache;
}

void NetI2pUtilByteCache_clearAll() {
  NetI2pUtilByteCache_initialize();
  for (NetI2pUtilByteCache * __strong bc in nil_chk([((id<JavaUtilMap>) nil_chk(NetI2pUtilByteCache__caches)) values])) [((NetI2pUtilByteCache *) nil_chk(bc)) clear];
}

void NetI2pUtilByteCache_initWithInt_withInt_(NetI2pUtilByteCache *self, jint maxCachedEntries, jint entrySize) {
  NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(self, create_NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(entrySize), maxCachedEntries);
  self->_entrySize_ = entrySize;
  jint stagger = NetI2pUtilSystemVersion_isAndroid() ? 0 : (entrySize % 777);
  [((NetI2pUtilSimpleTimer2 *) nil_chk(NetI2pUtilSimpleTimer2_getInstance())) addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:create_NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(self) withLong:NetI2pUtilByteCache_CLEANUP_FREQUENCY + stagger];
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) statManager])) createRateStatWithNSString:JreStrcat("$I", @"byteCache.memory.", entrySize) withNSString:@"Memory usage (B)" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
}

NetI2pUtilByteCache *new_NetI2pUtilByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) {
  J2OBJC_NEW_IMPL(NetI2pUtilByteCache, initWithInt_withInt_, maxCachedEntries, entrySize)
}

NetI2pUtilByteCache *create_NetI2pUtilByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilByteCache, initWithInt_withInt_, maxCachedEntries, entrySize)
}

void NetI2pUtilByteCache_resizeWithInt_(NetI2pUtilByteCache *self, jint maxCachedEntries) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilByteCache)

@implementation NetI2pUtilByteCache_ByteArrayFactory

- (instancetype)initWithInt:(jint)entrySize {
  NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(self, entrySize);
  return self;
}

- (NetI2pDataByteArray *)newInstance {
  IOSByteArray *data = [IOSByteArray arrayWithLength:sz_];
  NetI2pDataByteArray *rv = create_NetI2pDataByteArray_initWithByteArray_(data);
  [rv setValidWithInt:0];
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataByteArray;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sz_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LNetI2pUtilByteCache;", "Ljava/lang/Object;Lnet/i2p/util/TryCache$ObjectFactory<Lnet/i2p/data/ByteArray;>;" };
  static const J2ObjcClassInfo _NetI2pUtilByteCache_ByteArrayFactory = { "ByteArrayFactory", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, 2, -1 };
  return &_NetI2pUtilByteCache_ByteArrayFactory;
}

@end

void NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(NetI2pUtilByteCache_ByteArrayFactory *self, jint entrySize) {
  NSObject_init(self);
  self->sz_ = entrySize;
}

NetI2pUtilByteCache_ByteArrayFactory *new_NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(jint entrySize) {
  J2OBJC_NEW_IMPL(NetI2pUtilByteCache_ByteArrayFactory, initWithInt_, entrySize)
}

NetI2pUtilByteCache_ByteArrayFactory *create_NetI2pUtilByteCache_ByteArrayFactory_initWithInt_(jint entrySize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilByteCache_ByteArrayFactory, initWithInt_, entrySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilByteCache_ByteArrayFactory)

@implementation NetI2pUtilByteCache_Cleanup

- (instancetype)initWithNetI2pUtilByteCache:(NetI2pUtilByteCache *)outer$ {
  NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(self, outer$);
  return self;
}

- (void)timeReached {
  jint origsz;
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(this$0_->lock_)) lock];
  @try {
    origsz = [((id<JavaUtilList>) nil_chk(this$0_->items_)) size];
    if (origsz > 1 && JavaLangSystem_currentTimeMillis() - this$0_->_lastUnderflow_ > NetI2pUtilByteCache_EXPIRE_PERIOD) {
      jint toRemove = origsz / 2;
      for (jint i = 0; i < toRemove; i++) {
        [this$0_->items_ removeWithInt:[this$0_->items_ size] - 1];
      }
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) statManager])) addRateDataWithNSString:JreStrcat("$I", @"byteCache.memory.", this$0_->_entrySize_) withLong:this$0_->_entrySize_ * origsz];
}

- (NSString *)description {
  return JreStrcat("$I$", @"Cleaner for ", this$0_->_entrySize_, @" byte cache");
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilByteCache:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilByteCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LNetI2pUtilByteCache;" };
  static const J2ObjcClassInfo _NetI2pUtilByteCache_Cleanup = { "Cleanup", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 3, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilByteCache_Cleanup;
}

@end

void NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache_Cleanup *self, NetI2pUtilByteCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilByteCache_Cleanup *new_NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilByteCache_Cleanup, initWithNetI2pUtilByteCache_, outer$)
}

NetI2pUtilByteCache_Cleanup *create_NetI2pUtilByteCache_Cleanup_initWithNetI2pUtilByteCache_(NetI2pUtilByteCache *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilByteCache_Cleanup, initWithNetI2pUtilByteCache_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilByteCache_Cleanup)
