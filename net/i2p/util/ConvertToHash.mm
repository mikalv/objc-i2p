//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ConvertToHash.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/data/Base32.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/util/ConvertToHash.h"

@implementation NetI2pUtilConvertToHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilConvertToHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NetI2pDataHash *)getHashWithNSString:(NSString *)peer {
  return NetI2pUtilConvertToHash_getHashWithNSString_(peer);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilConvertToHash_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getHashWithNSString:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getHash", "LNSString;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _NetI2pUtilConvertToHash = { "ConvertToHash", "net.i2p.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilConvertToHash;
}

@end

void NetI2pUtilConvertToHash_init(NetI2pUtilConvertToHash *self) {
  NSObject_init(self);
}

NetI2pUtilConvertToHash *new_NetI2pUtilConvertToHash_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilConvertToHash, init)
}

NetI2pUtilConvertToHash *create_NetI2pUtilConvertToHash_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilConvertToHash, init)
}

NetI2pDataHash *NetI2pUtilConvertToHash_getHashWithNSString_(NSString *peer) {
  NetI2pUtilConvertToHash_initialize();
  if (peer == nil) return nil;
  NSString *peerLC = [peer java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([peer java_length] == 44 && ![((NSString *) nil_chk(peerLC)) java_hasSuffix:@".i2p"]) {
    IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_(peer);
    if (b != nil && b->size_ == NetI2pDataHash_HASH_LENGTH) return NetI2pDataHash_createWithByteArray_(b);
  }
  if ([peer java_length] == 48 && [((NSString *) nil_chk(peerLC)) java_hasSuffix:@".i2p"]) {
    IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_([peer java_substring:0 endIndex:44]);
    if (b != nil && b->size_ == NetI2pDataHash_HASH_LENGTH) return NetI2pDataHash_createWithByteArray_(b);
  }
  if ([peer java_length] >= 520 && [((NSString *) nil_chk(peerLC)) java_hasSuffix:@".i2p"]) {
    @try {
      NetI2pDataDestination *d = create_NetI2pDataDestination_init();
      [d fromBase64WithNSString:[peer java_substring:0 endIndex:[peer java_length] - 4]];
      return [d calculateHash];
    }
    @catch (NetI2pDataDataFormatException *dfe) {
    }
  }
  if ([peer java_length] >= 516 && ![((NSString *) nil_chk(peerLC)) java_hasSuffix:@".i2p"]) {
    @try {
      NetI2pDataDestination *d = create_NetI2pDataDestination_init();
      [d fromBase64WithNSString:peer];
      return [d calculateHash];
    }
    @catch (NetI2pDataDataFormatException *dfe) {
    }
  }
  if ([peer java_length] == 60 && [((NSString *) nil_chk(peerLC)) java_hasSuffix:@".b32.i2p"]) {
    IOSByteArray *b = NetI2pDataBase32_decodeWithNSString_([peer java_substring:0 endIndex:52]);
    if (b != nil && b->size_ == NetI2pDataHash_HASH_LENGTH) return NetI2pDataHash_createWithByteArray_(b);
  }
  if ([peer java_length] == 52 && ![((NSString *) nil_chk(peerLC)) java_hasSuffix:@".i2p"]) {
    IOSByteArray *b = NetI2pDataBase32_decodeWithNSString_(peer);
    if (b != nil && b->size_ == NetI2pDataHash_HASH_LENGTH) return NetI2pDataHash_createWithByteArray_(b);
  }
  NetI2pDataDestination *d = [((NetI2pClientNamingNamingService *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) namingService])) lookupWithNSString:peer];
  if (d != nil) return [d calculateHash];
  return nil;
}

void NetI2pUtilConvertToHash_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilConvertToHash_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: converttohash [hostname|b32|destination]..."];
    return;
  }
  for (jint i = 0; i < args->size_; i++) {
    NetI2pDataHash *h = NetI2pUtilConvertToHash_getHashWithNSString_(IOSObjectArray_Get(args, i));
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:h != nil ? [h toBase64] : @"conversion failed"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilConvertToHash)
