//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/FileSuffixFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/Locale.h"
#include "net/i2p/util/FileSuffixFilter.h"

@interface NetI2pUtilFileSuffixFilter () {
 @public
  NSString *begin_;
  NSString *end_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilFileSuffixFilter, begin_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilFileSuffixFilter, end_, NSString *)

@implementation NetI2pUtilFileSuffixFilter

- (instancetype)initWithNSString:(NSString *)suffix {
  NetI2pUtilFileSuffixFilter_initWithNSString_(self, suffix);
  return self;
}

- (instancetype)initWithNSString:(NSString *)prefix
                    withNSString:(NSString *)suffix {
  NetI2pUtilFileSuffixFilter_initWithNSString_withNSString_(self, prefix, suffix);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  NSString *name = [((NSString *) nil_chk([((JavaIoFile *) nil_chk(file)) getName])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  return [((NSString *) nil_chk(name)) java_hasSuffix:end_] && (begin_ == nil || [name java_hasPrefix:begin_]) && [file isFile];
}

- (void)dealloc {
  RELEASE_(begin_);
  RELEASE_(end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "begin_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "end_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LNSString;", "accept", "LJavaIoFile;" };
  static const J2ObjcClassInfo _NetI2pUtilFileSuffixFilter = { "FileSuffixFilter", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilFileSuffixFilter;
}

@end

void NetI2pUtilFileSuffixFilter_initWithNSString_(NetI2pUtilFileSuffixFilter *self, NSString *suffix) {
  NSObject_init(self);
  JreStrongAssign(&self->begin_, nil);
  JreStrongAssign(&self->end_, [((NSString *) nil_chk(suffix)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
}

NetI2pUtilFileSuffixFilter *new_NetI2pUtilFileSuffixFilter_initWithNSString_(NSString *suffix) {
  J2OBJC_NEW_IMPL(NetI2pUtilFileSuffixFilter, initWithNSString_, suffix)
}

NetI2pUtilFileSuffixFilter *create_NetI2pUtilFileSuffixFilter_initWithNSString_(NSString *suffix) {
  J2OBJC_CREATE_IMPL(NetI2pUtilFileSuffixFilter, initWithNSString_, suffix)
}

void NetI2pUtilFileSuffixFilter_initWithNSString_withNSString_(NetI2pUtilFileSuffixFilter *self, NSString *prefix, NSString *suffix) {
  NSObject_init(self);
  JreStrongAssign(&self->begin_, [((NSString *) nil_chk(prefix)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
  JreStrongAssign(&self->end_, [((NSString *) nil_chk(suffix)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]);
}

NetI2pUtilFileSuffixFilter *new_NetI2pUtilFileSuffixFilter_initWithNSString_withNSString_(NSString *prefix, NSString *suffix) {
  J2OBJC_NEW_IMPL(NetI2pUtilFileSuffixFilter, initWithNSString_withNSString_, prefix, suffix)
}

NetI2pUtilFileSuffixFilter *create_NetI2pUtilFileSuffixFilter_initWithNSString_withNSString_(NSString *prefix, NSString *suffix) {
  J2OBJC_CREATE_IMPL(NetI2pUtilFileSuffixFilter, initWithNSString_withNSString_, prefix, suffix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilFileSuffixFilter)
