//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/VersionComparator.java
//

#include "J2ObjC_source.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/util/VersionComparator.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pUtilVersionComparator ()

+ (jboolean)isSeparatorWithChar:(jchar)c;

+ (jboolean)isDigitWithChar:(jchar)c;

+ (jint)getDigitWithChar:(jchar)c;

+ (jint)nextSeparatorWithNSString:(NSString *)s
                          withInt:(jint)start;

+ (jlong)parseLongWithNSString:(NSString *)s
                       withInt:(jint)start
                       withInt:(jint)end;

@end

__attribute__((unused)) static jboolean NetI2pUtilVersionComparator_isSeparatorWithChar_(jchar c);

__attribute__((unused)) static jboolean NetI2pUtilVersionComparator_isDigitWithChar_(jchar c);

__attribute__((unused)) static jint NetI2pUtilVersionComparator_getDigitWithChar_(jchar c);

__attribute__((unused)) static jint NetI2pUtilVersionComparator_nextSeparatorWithNSString_withInt_(NSString *s, jint start);

__attribute__((unused)) static jlong NetI2pUtilVersionComparator_parseLongWithNSString_withInt_withInt_(NSString *s, jint start, jint end);

@implementation NetI2pUtilVersionComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilVersionComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(NSString *)l
               withId:(NSString *)r {
  return NetI2pUtilVersionComparator_compWithNSString_withNSString_(l, r);
}

+ (jint)compWithNSString:(NSString *)l
            withNSString:(NSString *)r {
  return NetI2pUtilVersionComparator_compWithNSString_withNSString_(l, r);
}

+ (jboolean)isSeparatorWithChar:(jchar)c {
  return NetI2pUtilVersionComparator_isSeparatorWithChar_(c);
}

+ (jboolean)isDigitWithChar:(jchar)c {
  return NetI2pUtilVersionComparator_isDigitWithChar_(c);
}

+ (jint)getDigitWithChar:(jchar)c {
  return NetI2pUtilVersionComparator_getDigitWithChar_(c);
}

+ (jint)nextSeparatorWithNSString:(NSString *)s
                          withInt:(jint)start {
  return NetI2pUtilVersionComparator_nextSeparatorWithNSString_withInt_(s, start);
}

+ (jlong)parseLongWithNSString:(NSString *)s
                       withInt:(jint)start
                       withInt:(jint)end {
  return NetI2pUtilVersionComparator_parseLongWithNSString_withInt_withInt_(s, start, end);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  methods[2].selector = @selector(compWithNSString:withNSString:);
  methods[3].selector = @selector(isSeparatorWithChar:);
  methods[4].selector = @selector(isDigitWithChar:);
  methods[5].selector = @selector(getDigitWithChar:);
  methods[6].selector = @selector(nextSeparatorWithNSString:withInt:);
  methods[7].selector = @selector(parseLongWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSString;LNSString;", "comp", "isSeparator", "C", "isDigit", "getDigit", "nextSeparator", "LNSString;I", "parseLong", "LNSString;II", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/String;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pUtilVersionComparator = { "VersionComparator", "net.i2p.util", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, 11, -1 };
  return &_NetI2pUtilVersionComparator;
}

@end

void NetI2pUtilVersionComparator_init(NetI2pUtilVersionComparator *self) {
  NSObject_init(self);
}

NetI2pUtilVersionComparator *new_NetI2pUtilVersionComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilVersionComparator, init)
}

NetI2pUtilVersionComparator *create_NetI2pUtilVersionComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilVersionComparator, init)
}

jint NetI2pUtilVersionComparator_compWithNSString_withNSString_(NSString *l, NSString *r) {
  NetI2pUtilVersionComparator_initialize();
  if ([((NSString *) nil_chk(l)) isEqual:r]) return 0;
  jint ll = [l java_length];
  jint rl = [((NSString *) nil_chk(r)) java_length];
  jint il = 0;
  jint ir = 0;
  jint nl = 0;
  jint nr = 0;
  while (true) {
    if (il >= ll) {
      if (ir >= rl) return 0;
      return -1;
    }
    else if (ir >= rl) return 1;
    jlong lv = -1;
    while (lv == -1 && il < ll) {
      nl = NetI2pUtilVersionComparator_nextSeparatorWithNSString_withInt_(l, il);
      lv = NetI2pUtilVersionComparator_parseLongWithNSString_withInt_withInt_(l, il, nl);
      il = nl + 1;
    }
    jlong rv = -1;
    while (rv == -1 && ir < rl) {
      nr = NetI2pUtilVersionComparator_nextSeparatorWithNSString_withInt_(r, ir);
      rv = NetI2pUtilVersionComparator_parseLongWithNSString_withInt_withInt_(r, ir, nr);
      ir = nr + 1;
    }
    if (lv < rv) return -1;
    else if (lv > rv) return 1;
  }
}

jboolean NetI2pUtilVersionComparator_isSeparatorWithChar_(jchar c) {
  NetI2pUtilVersionComparator_initialize();
  switch (c) {
    case '.':
    case '_':
    case '-':
    return true;
    default:
    return false;
  }
}

jboolean NetI2pUtilVersionComparator_isDigitWithChar_(jchar c) {
  NetI2pUtilVersionComparator_initialize();
  return c >= '0' && c <= '9';
}

jint NetI2pUtilVersionComparator_getDigitWithChar_(jchar c) {
  NetI2pUtilVersionComparator_initialize();
  return c - '0';
}

jint NetI2pUtilVersionComparator_nextSeparatorWithNSString_withInt_(NSString *s, jint start) {
  NetI2pUtilVersionComparator_initialize();
  while (start < [((NSString *) nil_chk(s)) java_length]) {
    if (NetI2pUtilVersionComparator_isSeparatorWithChar_([s charAtWithInt:start])) return start;
    start++;
  }
  return start;
}

jlong NetI2pUtilVersionComparator_parseLongWithNSString_withInt_withInt_(NSString *s, jint start, jint end) {
  NetI2pUtilVersionComparator_initialize();
  jlong rv = 0;
  jboolean parsedAny = false;
  for (jint i = start; i < end && rv >= 0; i++) {
    jchar c = [((NSString *) nil_chk(s)) charAtWithInt:i];
    if (!NetI2pUtilVersionComparator_isDigitWithChar_(c)) continue;
    parsedAny = true;
    rv = rv * 10 + NetI2pUtilVersionComparator_getDigitWithChar_(c);
  }
  if (!parsedAny) return -1;
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilVersionComparator)
