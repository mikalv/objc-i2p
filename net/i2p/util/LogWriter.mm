//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LogWriter.java
//

#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Queue.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogConsoleBuffer.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/LogRecord.h"
#include "net/i2p/util/LogRecordFormatter.h"
#include "net/i2p/util/LogWriter.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"

@interface NetI2pUtilLogWriter () {
 @public
  jlong _lastReadConfig_;
  NetI2pUtilLogRecord *_last_;
  jlong _firstTimestamp_;
  volatile_jlong _flushInterval_;
}

- (void)writeDupMessageWithInt:(jint)dupCount
       withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)lastRecord;

- (NSString *)dupMessageWithInt:(jint)dupCount
        withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)lastRecord
                    withBoolean:(jboolean)reverse;

- (NSString *)_tWithInt:(jint)a
           withNSString:(NSString *)b
           withNSString:(NSString *)c;

- (void)rereadConfig;

- (void)writeRecordWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLogWriter, _last_, NetI2pUtilLogRecord *)

inline jlong NetI2pUtilLogWriter_get_CONFIG_READ_INTERVAL(void);
#define NetI2pUtilLogWriter_CONFIG_READ_INTERVAL 50000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogWriter, CONFIG_READ_INTERVAL, jlong)

inline jlong NetI2pUtilLogWriter_get_MIN_FLUSH_INTERVAL(void);
#define NetI2pUtilLogWriter_MIN_FLUSH_INTERVAL 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogWriter, MIN_FLUSH_INTERVAL, jlong)

inline jlong NetI2pUtilLogWriter_get_MAX_FLUSH_INTERVAL(void);
#define NetI2pUtilLogWriter_MAX_FLUSH_INTERVAL 300000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogWriter, MAX_FLUSH_INTERVAL, jlong)

inline NSString *NetI2pUtilLogWriter_get_BUNDLE_NAME(void);
static NSString *NetI2pUtilLogWriter_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogWriter, BUNDLE_NAME, NSString *)

__attribute__((unused)) static void NetI2pUtilLogWriter_writeDupMessageWithInt_withNetI2pUtilLogRecord_(NetI2pUtilLogWriter *self, jint dupCount, NetI2pUtilLogRecord *lastRecord);

__attribute__((unused)) static NSString *NetI2pUtilLogWriter_dupMessageWithInt_withNetI2pUtilLogRecord_withBoolean_(NetI2pUtilLogWriter *self, jint dupCount, NetI2pUtilLogRecord *lastRecord, jboolean reverse);

__attribute__((unused)) static NSString *NetI2pUtilLogWriter__tWithInt_withNSString_withNSString_(NetI2pUtilLogWriter *self, jint a, NSString *b, NSString *c);

__attribute__((unused)) static void NetI2pUtilLogWriter_rereadConfig(NetI2pUtilLogWriter *self);

__attribute__((unused)) static void NetI2pUtilLogWriter_writeRecordWithNetI2pUtilLogRecord_(NetI2pUtilLogWriter *self, NetI2pUtilLogRecord *rec);

@implementation NetI2pUtilLogWriter

+ (jlong)FLUSH_INTERVAL {
  return NetI2pUtilLogWriter_FLUSH_INTERVAL;
}

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager {
  NetI2pUtilLogWriter_initWithNetI2pUtilLogManager_(self, manager);
  return self;
}

- (NSString *)currentFile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)writeRecordWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec
                              withNSString:(NSString *)formatted {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)writeRecordWithInt:(jint)priority
              withNSString:(NSString *)line {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)flushWriter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)closeWriter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stopWriting {
  JreAssignVolatileBoolean(&_write_, false);
}

- (void)setFlushIntervalWithLong:(jlong)interval {
  JreAssignVolatileLong(&_flushInterval_, JavaLangMath_minWithLong_withLong_(NetI2pUtilLogWriter_MAX_FLUSH_INTERVAL, JavaLangMath_maxWithLong_withLong_(NetI2pUtilLogWriter_MIN_FLUSH_INTERVAL, interval)));
}

- (void)run {
  JreAssignVolatileBoolean(&_write_, true);
  jboolean shouldReadConfig = !NetI2pUtilSystemVersion_isAndroid();
  @try {
    while (JreLoadVolatileBoolean(&_write_)) {
      [self flushRecords];
      if (JreLoadVolatileBoolean(&_write_) && shouldReadConfig) NetI2pUtilLogWriter_rereadConfig(self);
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error writing the log: ", e)];
    [e printStackTrace];
  }
  [self closeWriter];
}

- (void)flushRecords {
  [self flushRecordsWithBoolean:true];
}

- (void)flushRecordsWithBoolean:(jboolean)shouldWait {
  @try {
    id<JavaUtilQueue> records = [((NetI2pUtilLogManager *) nil_chk(_manager_)) getQueue];
    if (records == nil) return;
    if (![records isEmpty]) {
      if (_last_ != nil && _firstTimestamp_ < [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk([_manager_ getContext])) clock])) now] - 30 * 60 * 1000) JreStrongAssign(&_last_, nil);
      NetI2pUtilLogRecord *rec;
      jint dupCount = 0;
      while ((rec = [records poll]) != nil) {
        if ([_manager_ shouldDropDuplicates] && [((NetI2pUtilLogRecord *) nil_chk(rec)) isEqual:_last_]) {
          dupCount++;
        }
        else {
          if (dupCount > 0) {
            NetI2pUtilLogWriter_writeDupMessageWithInt_withNetI2pUtilLogRecord_(self, dupCount, _last_);
            dupCount = 0;
          }
          NetI2pUtilLogWriter_writeRecordWithNetI2pUtilLogRecord_(self, rec);
          _firstTimestamp_ = [((NetI2pUtilLogRecord *) nil_chk(rec)) getDate];
        }
        JreStrongAssign(&_last_, rec);
      }
      if (dupCount > 0) {
        NetI2pUtilLogWriter_writeDupMessageWithInt_withNetI2pUtilLogRecord_(self, dupCount, _last_);
      }
      [self flushWriter];
    }
  }
  @catch (JavaLangThrowable *t) {
    [t printStackTrace];
  }
  @finally {
    if (shouldWait) {
      @try {
        @synchronized(self) {
          [self java_waitWithLong:JreLoadVolatileLong(&_flushInterval_)];
        }
      }
      @catch (JavaLangInterruptedException *ie) {
      }
    }
  }
}

- (void)writeDupMessageWithInt:(jint)dupCount
       withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)lastRecord {
  NetI2pUtilLogWriter_writeDupMessageWithInt_withNetI2pUtilLogRecord_(self, dupCount, lastRecord);
}

- (NSString *)dupMessageWithInt:(jint)dupCount
        withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)lastRecord
                    withBoolean:(jboolean)reverse {
  return NetI2pUtilLogWriter_dupMessageWithInt_withNetI2pUtilLogRecord_withBoolean_(self, dupCount, lastRecord, reverse);
}

- (NSString *)_tWithInt:(jint)a
           withNSString:(NSString *)b
           withNSString:(NSString *)c {
  return NetI2pUtilLogWriter__tWithInt_withNSString_withNSString_(self, a, b, c);
}

- (void)rereadConfig {
  NetI2pUtilLogWriter_rereadConfig(self);
}

- (void)writeRecordWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec {
  NetI2pUtilLogWriter_writeRecordWithNetI2pUtilLogRecord_(self, rec);
}

- (void)dealloc {
  RELEASE_(_manager_);
  RELEASE_(_last_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilLogManager:);
  methods[1].selector = @selector(currentFile);
  methods[2].selector = @selector(writeRecordWithNetI2pUtilLogRecord:withNSString:);
  methods[3].selector = @selector(writeRecordWithInt:withNSString:);
  methods[4].selector = @selector(flushWriter);
  methods[5].selector = @selector(closeWriter);
  methods[6].selector = @selector(stopWriting);
  methods[7].selector = @selector(setFlushIntervalWithLong:);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(flushRecords);
  methods[10].selector = @selector(flushRecordsWithBoolean:);
  methods[11].selector = @selector(writeDupMessageWithInt:withNetI2pUtilLogRecord:);
  methods[12].selector = @selector(dupMessageWithInt:withNetI2pUtilLogRecord:withBoolean:);
  methods[13].selector = @selector(_tWithInt:withNSString:withNSString:);
  methods[14].selector = @selector(rereadConfig);
  methods[15].selector = @selector(writeRecordWithNetI2pUtilLogRecord:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONFIG_READ_INTERVAL", "J", .constantValue.asLong = NetI2pUtilLogWriter_CONFIG_READ_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "FLUSH_INTERVAL", "J", .constantValue.asLong = NetI2pUtilLogWriter_FLUSH_INTERVAL, 0x18, -1, -1, -1, -1 },
    { "MIN_FLUSH_INTERVAL", "J", .constantValue.asLong = NetI2pUtilLogWriter_MIN_FLUSH_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "MAX_FLUSH_INTERVAL", "J", .constantValue.asLong = NetI2pUtilLogWriter_MAX_FLUSH_INTERVAL, 0x1a, -1, -1, -1, -1 },
    { "_lastReadConfig_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pUtilLogManager;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_write_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_last_", "LNetI2pUtilLogRecord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_firstTimestamp_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_flushInterval_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilLogManager;", "writeRecord", "LNetI2pUtilLogRecord;LNSString;", "ILNSString;", "setFlushInterval", "J", "flushRecords", "Z", "writeDupMessage", "ILNetI2pUtilLogRecord;", "dupMessage", "ILNetI2pUtilLogRecord;Z", "_t", "ILNSString;LNSString;", "LNetI2pUtilLogRecord;", &NetI2pUtilLogWriter_BUNDLE_NAME };
  static const J2ObjcClassInfo _NetI2pUtilLogWriter = { "LogWriter", "net.i2p.util", ptrTable, methods, fields, 7, 0x400, 16, 11, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilLogWriter;
}

@end

void NetI2pUtilLogWriter_initWithNetI2pUtilLogManager_(NetI2pUtilLogWriter *self, NetI2pUtilLogManager *manager) {
  NSObject_init(self);
  JreAssignVolatileLong(&self->_flushInterval_, NetI2pUtilLogWriter_FLUSH_INTERVAL);
  JreStrongAssign(&self->_manager_, manager);
  self->_lastReadConfig_ = [((NetI2pUtilClock *) nil_chk(NetI2pUtilClock_getInstance())) now];
}

void NetI2pUtilLogWriter_writeDupMessageWithInt_withNetI2pUtilLogRecord_(NetI2pUtilLogWriter *self, jint dupCount, NetI2pUtilLogRecord *lastRecord) {
  NSString *dmsg = NetI2pUtilLogWriter_dupMessageWithInt_withNetI2pUtilLogRecord_withBoolean_(self, dupCount, lastRecord, false);
  [self writeRecordWithInt:[((NetI2pUtilLogRecord *) nil_chk(lastRecord)) getPriority] withNSString:dmsg];
  if ([((NetI2pUtilLogManager *) nil_chk(self->_manager_)) getDisplayOnScreenLevel] <= [lastRecord getPriority] && [self->_manager_ displayOnScreen]) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:dmsg];
  dmsg = NetI2pUtilLogWriter_dupMessageWithInt_withNetI2pUtilLogRecord_withBoolean_(self, dupCount, lastRecord, true);
  [((NetI2pUtilLogConsoleBuffer *) nil_chk([self->_manager_ getBuffer])) addWithNSString:dmsg];
  if ([lastRecord getPriority] >= NetI2pUtilLog_CRIT) [((NetI2pUtilLogConsoleBuffer *) nil_chk([self->_manager_ getBuffer])) addCriticalWithNSString:dmsg];
}

NSString *NetI2pUtilLogWriter_dupMessageWithInt_withNetI2pUtilLogRecord_withBoolean_(NetI2pUtilLogWriter *self, jint dupCount, NetI2pUtilLogRecord *lastRecord, jboolean reverse) {
  NSString *arrows = reverse ? (NetI2pUtilSystemVersion_isAndroid() ? @"vvv" : @"&darr;&darr;&darr;") : @"^^^";
  return JreStrcat("$C$C$C$$", NetI2pUtilLogRecordFormatter_getWhenWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(self->_manager_, lastRecord), ' ', arrows, ' ', NetI2pUtilLogWriter__tWithInt_withNSString_withNSString_(self, dupCount, @"1 similar message omitted", @"{0} similar messages omitted"), ' ', arrows, JreLoadStatic(NetI2pUtilLogRecordFormatter, NL));
}

NSString *NetI2pUtilLogWriter__tWithInt_withNSString_withNSString_(NetI2pUtilLogWriter *self, jint a, NSString *b, NSString *c) {
  return NetI2pUtilTranslate_getStringWithInt_withNSString_withNSString_withNetI2pI2PAppContext_withNSString_(a, b, c, [((NetI2pUtilLogManager *) nil_chk(self->_manager_)) getContext], NetI2pUtilLogWriter_BUNDLE_NAME);
}

void NetI2pUtilLogWriter_rereadConfig(NetI2pUtilLogWriter *self) {
  jlong now = [((NetI2pUtilClock *) nil_chk(NetI2pUtilClock_getInstance())) now];
  if (now - self->_lastReadConfig_ > NetI2pUtilLogWriter_CONFIG_READ_INTERVAL) {
    [((NetI2pUtilLogManager *) nil_chk(self->_manager_)) rereadConfig];
    self->_lastReadConfig_ = now;
  }
}

void NetI2pUtilLogWriter_writeRecordWithNetI2pUtilLogRecord_(NetI2pUtilLogWriter *self, NetI2pUtilLogRecord *rec) {
  NSString *val = NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_withBoolean_(self->_manager_, rec, true);
  [self writeRecordWithNetI2pUtilLogRecord:rec withNSString:val];
  [((NetI2pUtilLogConsoleBuffer *) nil_chk([((NetI2pUtilLogManager *) nil_chk(self->_manager_)) getBuffer])) addWithNSString:val];
  if ([((NetI2pUtilLogRecord *) nil_chk(rec)) getPriority] >= NetI2pUtilLog_CRIT) [((NetI2pUtilLogConsoleBuffer *) nil_chk([self->_manager_ getBuffer])) addCriticalWithNSString:val];
  if ([self->_manager_ getDisplayOnScreenLevel] <= [rec getPriority]) {
    if ([self->_manager_ displayOnScreen]) {
      if ([((NetI2pI2PAppContext *) nil_chk([self->_manager_ getContext])) hasWrapper] || NetI2pUtilSystemVersion_isAndroid()) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_withBoolean_(self->_manager_, rec, false)];
      else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:val];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogWriter)
