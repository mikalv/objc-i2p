//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/TryCache.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "net/i2p/util/TryCache.h"

@interface NetI2pUtilTryCache () {
 @public
  id<NetI2pUtilTryCache_ObjectFactory> factory_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilTryCache, factory_, id<NetI2pUtilTryCache_ObjectFactory>)

inline jboolean NetI2pUtilTryCache_get_DEBUG_DUP(void);
#define NetI2pUtilTryCache_DEBUG_DUP false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilTryCache, DEBUG_DUP, jboolean)

@interface NetI2pUtilTryCache_ObjectFactory : NSObject

@end

@implementation NetI2pUtilTryCache

- (instancetype)initWithNetI2pUtilTryCache_ObjectFactory:(id<NetI2pUtilTryCache_ObjectFactory>)factory
                                                 withInt:(jint)capacity {
  NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(self, factory, capacity);
  return self;
}

- (id)acquire {
  id rv = nil;
  if ([((id<JavaUtilConcurrentLocksLock>) nil_chk(lock_)) tryLock]) {
    @try {
      if (![((id<JavaUtilList>) nil_chk(items_)) isEmpty]) {
        rv = [items_ removeWithInt:[items_ size] - 1];
      }
      else {
        _lastUnderflow_ = JavaLangSystem_currentTimeMillis();
      }
    }
    @finally {
      [lock_ unlock];
    }
  }
  if (rv == nil) {
    rv = [((id<NetI2pUtilTryCache_ObjectFactory>) nil_chk(factory_)) newInstance];
  }
  return rv;
}

- (void)release__WithId:(id)item {
  if ([((id<JavaUtilConcurrentLocksLock>) nil_chk(lock_)) tryLock]) {
    @try {
      if ([((id<JavaUtilList>) nil_chk(items_)) size] < capacity_) {
        [items_ addWithId:item];
      }
    }
    @finally {
      [lock_ unlock];
    }
  }
}

- (void)clear {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock_)) lock];
  @try {
    [((id<JavaUtilList>) nil_chk(items_)) clear];
  }
  @finally {
    [lock_ unlock];
  }
}

- (void)dealloc {
  RELEASE_(factory_);
  RELEASE_(items_);
  RELEASE_(lock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilTryCache_ObjectFactory:withInt:);
  methods[1].selector = @selector(acquire);
  methods[2].selector = @selector(release__WithId:);
  methods[3].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_DUP", "Z", .constantValue.asBOOL = NetI2pUtilTryCache_DEBUG_DUP, 0x1a, -1, -1, -1, -1 },
    { "factory_", "LNetI2pUtilTryCache_ObjectFactory;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "capacity_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "items_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 7, -1 },
    { "lock_", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_lastUnderflow_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilTryCache_ObjectFactory;I", "(Lnet/i2p/util/TryCache$ObjectFactory<TT;>;I)V", "()TT;", "release", "LNSObject;", "(TT;)V", "Lnet/i2p/util/TryCache$ObjectFactory<TT;>;", "Ljava/util/List<TT;>;", "LNetI2pUtilTryCache_ObjectFactory;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pUtilTryCache = { "TryCache", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, 8, -1, 9, -1 };
  return &_NetI2pUtilTryCache;
}

@end

void NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(NetI2pUtilTryCache *self, id<NetI2pUtilTryCache_ObjectFactory> factory, jint capacity) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssign(&self->factory_, factory);
  self->capacity_ = capacity;
  JreStrongAssignAndConsume(&self->items_, new_JavaUtilArrayList_initWithInt_(capacity));
}

NetI2pUtilTryCache *new_NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(id<NetI2pUtilTryCache_ObjectFactory> factory, jint capacity) {
  J2OBJC_NEW_IMPL(NetI2pUtilTryCache, initWithNetI2pUtilTryCache_ObjectFactory_withInt_, factory, capacity)
}

NetI2pUtilTryCache *create_NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(id<NetI2pUtilTryCache_ObjectFactory> factory, jint capacity) {
  J2OBJC_CREATE_IMPL(NetI2pUtilTryCache, initWithNetI2pUtilTryCache_ObjectFactory_withInt_, factory, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilTryCache)

@implementation NetI2pUtilTryCache_ObjectFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "LNetI2pUtilTryCache;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pUtilTryCache_ObjectFactory = { "ObjectFactory", "net.i2p.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, 2, -1 };
  return &_NetI2pUtilTryCache_ObjectFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pUtilTryCache_ObjectFactory)
