//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/FileLogWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedWriter.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/Writer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/FileLogWriter.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/LogRecord.h"
#include "net/i2p/util/LogWriter.h"
#include "net/i2p/util/SecureDirectory.h"
#include "net/i2p/util/SecureFileOutputStream.h"

@interface NetI2pUtilFileLogWriter () {
 @public
  volatile_id _currentOut_;
  jint _rotationNum_;
  JavaIoFile *_currentFile_;
  jlong _numBytesInCurrentFile_;
  jint _diskFullMessageCount_;
}

- (void)rotateFile;

- (JavaIoFile *)getNextFile;

- (JavaIoFile *)getFirstFileWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)pattern
                                   withInt:(jint)max;

+ (NSString *)replaceWithNSString:(NSString *)pattern
                          withInt:(jint)num;

@end

J2OBJC_VOLATILE_FIELD_SETTER(NetI2pUtilFileLogWriter, _currentOut_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(NetI2pUtilFileLogWriter, _currentFile_, JavaIoFile *)

inline jint NetI2pUtilFileLogWriter_get_MAX_DISKFULL_MESSAGES(void);
#define NetI2pUtilFileLogWriter_MAX_DISKFULL_MESSAGES 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilFileLogWriter, MAX_DISKFULL_MESSAGES, jint)

__attribute__((unused)) static void NetI2pUtilFileLogWriter_rotateFile(NetI2pUtilFileLogWriter *self);

__attribute__((unused)) static JavaIoFile *NetI2pUtilFileLogWriter_getNextFile(NetI2pUtilFileLogWriter *self);

__attribute__((unused)) static JavaIoFile *NetI2pUtilFileLogWriter_getFirstFileWithJavaIoFile_withNSString_withInt_(NetI2pUtilFileLogWriter *self, JavaIoFile *base, NSString *pattern, jint max);

__attribute__((unused)) static NSString *NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(NSString *pattern, jint num);

@implementation NetI2pUtilFileLogWriter

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager {
  NetI2pUtilFileLogWriter_initWithNetI2pUtilLogManager_(self, manager);
  return self;
}

- (NSString *)currentFile {
  @synchronized(self) {
    if (_currentFile_ != nil) return JreRetainedLocalValue([_currentFile_ getAbsolutePath]);
    NSString *rv = [((JavaIoFile *) nil_chk(NetI2pUtilFileLogWriter_getNextFile(self))) getAbsolutePath];
    _rotationNum_ = -1;
    return JreRetainedLocalValue(rv);
  }
}

- (void)writeRecordWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec
                              withNSString:(NSString *)formatted {
  [self writeRecordWithInt:[((NetI2pUtilLogRecord *) nil_chk(rec)) getPriority] withNSString:formatted];
}

- (void)writeRecordWithInt:(jint)priority
              withNSString:(NSString *)val {
  @synchronized(self) {
    if (val == nil) return;
    if (JreLoadVolatileId(&_currentOut_) == nil) {
      NetI2pUtilFileLogWriter_rotateFile(self);
      if (JreLoadVolatileId(&_currentOut_) == nil) return;
    }
    @try {
      [((JavaIoWriter *) nil_chk(JreLoadVolatileId(&_currentOut_))) writeWithNSString:val];
      _numBytesInCurrentFile_ += [val java_length];
    }
    @catch (JavaLangThrowable *t) {
      if (!JreLoadVolatileBoolean(&_write_)) return;
      if (++_diskFullMessageCount_ < NetI2pUtilFileLogWriter_MAX_DISKFULL_MESSAGES) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error writing log, disk full? ", t)];
    }
    if (_numBytesInCurrentFile_ >= [((NetI2pUtilLogManager *) nil_chk(_manager_)) getFileSize]) {
      NetI2pUtilFileLogWriter_rotateFile(self);
    }
  }
}

- (void)flushWriter {
  @try {
    if (JreLoadVolatileId(&_currentOut_) != nil) [((JavaIoWriter *) nil_chk(JreLoadVolatileId(&_currentOut_))) flush];
  }
  @catch (JavaIoIOException *ioe) {
    if (JreLoadVolatileBoolean(&_write_) && ++_diskFullMessageCount_ < NetI2pUtilFileLogWriter_MAX_DISKFULL_MESSAGES) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error writing the router log - disk full? ", ioe)];
  }
}

- (void)closeWriter {
  JavaIoWriter *out = JreLoadVolatileId(&_currentOut_);
  if (out != nil) {
    @try {
      [out close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

- (void)rotateFile {
  NetI2pUtilFileLogWriter_rotateFile(self);
}

- (JavaIoFile *)getNextFile {
  return NetI2pUtilFileLogWriter_getNextFile(self);
}

- (JavaIoFile *)getFirstFileWithJavaIoFile:(JavaIoFile *)base
                              withNSString:(NSString *)pattern
                                   withInt:(jint)max {
  return NetI2pUtilFileLogWriter_getFirstFileWithJavaIoFile_withNSString_withInt_(self, base, pattern, max);
}

+ (NSString *)replaceWithNSString:(NSString *)pattern
                          withInt:(jint)num {
  return NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, num);
}

- (void)__javaClone:(NetI2pUtilFileLogWriter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_currentOut_, &original->_currentOut_);
}

- (void)dealloc {
  JreReleaseVolatile(&_currentOut_);
  RELEASE_(_currentFile_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilLogManager:);
  methods[1].selector = @selector(currentFile);
  methods[2].selector = @selector(writeRecordWithNetI2pUtilLogRecord:withNSString:);
  methods[3].selector = @selector(writeRecordWithInt:withNSString:);
  methods[4].selector = @selector(flushWriter);
  methods[5].selector = @selector(closeWriter);
  methods[6].selector = @selector(rotateFile);
  methods[7].selector = @selector(getNextFile);
  methods[8].selector = @selector(getFirstFileWithJavaIoFile:withNSString:withInt:);
  methods[9].selector = @selector(replaceWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_currentOut_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_rotationNum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_numBytesInCurrentFile_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_DISKFULL_MESSAGES", "I", .constantValue.asInt = NetI2pUtilFileLogWriter_MAX_DISKFULL_MESSAGES, 0x1a, -1, -1, -1, -1 },
    { "_diskFullMessageCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilLogManager;", "writeRecord", "LNetI2pUtilLogRecord;LNSString;", "ILNSString;", "getFirstFile", "LJavaIoFile;LNSString;I", "replace", "LNSString;I" };
  static const J2ObjcClassInfo _NetI2pUtilFileLogWriter = { "FileLogWriter", "net.i2p.util", ptrTable, methods, fields, 7, 0x0, 10, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilFileLogWriter;
}

@end

void NetI2pUtilFileLogWriter_initWithNetI2pUtilLogManager_(NetI2pUtilFileLogWriter *self, NetI2pUtilLogManager *manager) {
  NetI2pUtilLogWriter_initWithNetI2pUtilLogManager_(self, manager);
  self->_rotationNum_ = -1;
}

NetI2pUtilFileLogWriter *new_NetI2pUtilFileLogWriter_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *manager) {
  J2OBJC_NEW_IMPL(NetI2pUtilFileLogWriter, initWithNetI2pUtilLogManager_, manager)
}

NetI2pUtilFileLogWriter *create_NetI2pUtilFileLogWriter_initWithNetI2pUtilLogManager_(NetI2pUtilLogManager *manager) {
  J2OBJC_CREATE_IMPL(NetI2pUtilFileLogWriter, initWithNetI2pUtilLogManager_, manager)
}

void NetI2pUtilFileLogWriter_rotateFile(NetI2pUtilFileLogWriter *self) {
  JavaIoFile *f = NetI2pUtilFileLogWriter_getNextFile(self);
  JreStrongAssign(&self->_currentFile_, f);
  self->_numBytesInCurrentFile_ = 0;
  JavaIoFile *parent = [((JavaIoFile *) nil_chk(f)) getParentFile];
  if (parent != nil) {
    if (![parent exists]) {
      JavaIoFile *sd = create_NetI2pUtilSecureDirectory_initWithNSString_([parent getAbsolutePath]);
      jboolean ok = [sd mkdirs];
      if (!ok) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unable to create the parent directory: ", [parent getAbsolutePath])];
      }
    }
    if (![parent isDirectory]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Cannot put the logs in a subdirectory of a plain file: ", [f getAbsolutePath])];
    }
  }
  [self closeWriter];
  @try {
    JreVolatileStrongAssign(&self->_currentOut_, create_JavaIoBufferedWriter_initWithJavaIoWriter_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(f), @"UTF-8")));
  }
  @catch (JavaIoIOException *ioe) {
    if (++self->_diskFullMessageCount_ < NetI2pUtilFileLogWriter_MAX_DISKFULL_MESSAGES) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C@", @"Error creating log file [", [f getAbsolutePath], ']', ioe)];
  }
}

JavaIoFile *NetI2pUtilFileLogWriter_getNextFile(NetI2pUtilFileLogWriter *self) {
  NSString *pattern = [((NetI2pUtilLogManager *) nil_chk(self->_manager_)) getBaseLogfilename];
  JavaIoFile *f = create_JavaIoFile_initWithNSString_(pattern);
  JavaIoFile *base = nil;
  if (![f isAbsolute]) base = [((NetI2pI2PAppContext *) nil_chk([self->_manager_ getContext])) getLogDir];
  if (([((NSString *) nil_chk(pattern)) java_indexOf:'#'] < 0) && ([pattern java_indexOf:'@'] <= 0)) {
    if (base != nil) return create_JavaIoFile_initWithJavaIoFile_withNSString_(base, pattern);
    else return f;
  }
  jint max = [self->_manager_ getRotationLimit];
  if (self->_rotationNum_ == -1) {
    return NetI2pUtilFileLogWriter_getFirstFileWithJavaIoFile_withNSString_withInt_(self, base, pattern, max);
  }
  self->_rotationNum_++;
  if (self->_rotationNum_ > max) self->_rotationNum_ = 0;
  NSString *newf = NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, self->_rotationNum_);
  if (base != nil) return create_JavaIoFile_initWithJavaIoFile_withNSString_(base, newf);
  return create_JavaIoFile_initWithNSString_(newf);
}

JavaIoFile *NetI2pUtilFileLogWriter_getFirstFileWithJavaIoFile_withNSString_withInt_(NetI2pUtilFileLogWriter *self, JavaIoFile *base, NSString *pattern, jint max) {
  for (jint i = 0; i < max; i++) {
    JavaIoFile *f;
    if (base != nil) f = create_JavaIoFile_initWithJavaIoFile_withNSString_(base, NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, i));
    else f = create_JavaIoFile_initWithNSString_(NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, i));
    if (![f exists]) {
      self->_rotationNum_ = i;
      return f;
    }
  }
  JavaIoFile *oldest = nil;
  for (jint i = 0; i < max; i++) {
    JavaIoFile *f;
    if (base != nil) f = create_JavaIoFile_initWithJavaIoFile_withNSString_(base, NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, i));
    else f = create_JavaIoFile_initWithNSString_(NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(pattern, i));
    if (oldest == nil) {
      oldest = f;
    }
    else {
      if ([f lastModified] < [oldest lastModified]) {
        self->_rotationNum_ = i;
        oldest = f;
      }
    }
  }
  return oldest;
}

NSString *NetI2pUtilFileLogWriter_replaceWithNSString_withInt_(NSString *pattern, jint num) {
  NetI2pUtilFileLogWriter_initialize();
  IOSCharArray *c = [((NSString *) nil_chk(pattern)) java_toCharArray];
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(c))->size_; i++) {
    if ((IOSCharArray_Get(c, i) != '#') && (IOSCharArray_Get(c, i) != '@')) [buf appendWithChar:IOSCharArray_Get(c, i)];
    else [buf appendWithInt:num];
  }
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilFileLogWriter)
