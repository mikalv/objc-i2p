//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/I2PAppThread.java
//

#include "J2ObjC_source.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runnable.h"
#include "java/lang/ThreadGroup.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/I2PThread.h"

@interface NetI2pUtilI2PAppThread () {
 @public
  id<JavaUtilSet> _threadListeners_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilI2PAppThread, _threadListeners_, id<JavaUtilSet>)

@implementation NetI2pUtilI2PAppThread

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilI2PAppThread_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)name {
  NetI2pUtilI2PAppThread_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(self, r);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                            withNSString:(NSString *)name {
  NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(self, r, name);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                            withNSString:(NSString *)name
                             withBoolean:(jboolean)isDaemon {
  NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, r, name, isDaemon);
  return self;
}

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                       withJavaLangRunnable:(id<JavaLangRunnable>)r
                               withNSString:(NSString *)name {
  NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(self, group, r, name);
  return self;
}

- (void)fireOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom {
  for (id<NetI2pUtilI2PThread_OOMEventListener> __strong listener in nil_chk(_threadListeners_)) [((id<NetI2pUtilI2PThread_OOMEventListener>) nil_chk(listener)) outOfMemoryWithJavaLangOutOfMemoryError:oom];
}

- (void)addOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_threadListeners_)) addWithId:lsnr];
}

- (void)removeOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_threadListeners_)) removeWithId:lsnr];
}

- (void)dealloc {
  RELEASE_(_threadListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithJavaLangRunnable:);
  methods[3].selector = @selector(initWithJavaLangRunnable:withNSString:);
  methods[4].selector = @selector(initWithJavaLangRunnable:withNSString:withBoolean:);
  methods[5].selector = @selector(initWithJavaLangThreadGroup:withJavaLangRunnable:withNSString:);
  methods[6].selector = @selector(fireOOMWithJavaLangOutOfMemoryError:);
  methods[7].selector = @selector(addOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:);
  methods[8].selector = @selector(removeOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_threadListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangRunnable;", "LJavaLangRunnable;LNSString;", "LJavaLangRunnable;LNSString;Z", "LJavaLangThreadGroup;LJavaLangRunnable;LNSString;", "fireOOM", "LJavaLangOutOfMemoryError;", "addOOMEventThreadListener", "LNetI2pUtilI2PThread_OOMEventListener;", "removeOOMEventThreadListener", "Ljava/util/Set<Lnet/i2p/util/I2PThread$OOMEventListener;>;" };
  static const J2ObjcClassInfo _NetI2pUtilI2PAppThread = { "I2PAppThread", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilI2PAppThread;
}

@end

void NetI2pUtilI2PAppThread_init(NetI2pUtilI2PAppThread *self) {
  NetI2pUtilI2PThread_init(self);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, init)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, init)
}

void NetI2pUtilI2PAppThread_initWithNSString_(NetI2pUtilI2PAppThread *self, NSString *name) {
  NetI2pUtilI2PThread_initWithNSString_(self, name);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, initWithNSString_, name)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, initWithNSString_, name)
}

void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r) {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_(self, r);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_, r)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_, r)
}

void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r, NSString *name) {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(self, r, name);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_withNSString_, r, name)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_withNSString_, r, name)
}

void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, r, name, isDaemon);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_withNSString_withBoolean_, r, name, isDaemon)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangRunnable_withNSString_withBoolean_, r, name, isDaemon)
}

void NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(NetI2pUtilI2PAppThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(self, group, r, name);
  JreStrongAssignAndConsume(&self->_threadListeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_, group, r, name)
}

NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PAppThread, initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_, group, r, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilI2PAppThread)
