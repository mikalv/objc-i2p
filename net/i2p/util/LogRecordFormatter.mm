//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LogRecordFormatter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/LogRecord.h"
#include "net/i2p/util/LogRecordFormatter.h"
#include "net/i2p/util/Translate.h"

@interface NetI2pUtilLogRecordFormatter ()

+ (NSString *)getThreadWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)logRecord;

+ (NSString *)getPriorityWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec
                         withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (NSString *)getWhatWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec;

+ (NSString *)getWhereWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec;

+ (NSString *)toStringWithNSString:(NSString *)str
                           withInt:(jint)size;

@end

inline jint NetI2pUtilLogRecordFormatter_get_MAX_WHERE_LENGTH(void);
#define NetI2pUtilLogRecordFormatter_MAX_WHERE_LENGTH 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogRecordFormatter, MAX_WHERE_LENGTH, jint)

inline jint NetI2pUtilLogRecordFormatter_get_MAX_THREAD_LENGTH(void);
#define NetI2pUtilLogRecordFormatter_MAX_THREAD_LENGTH 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogRecordFormatter, MAX_THREAD_LENGTH, jint)

inline jint NetI2pUtilLogRecordFormatter_get_MAX_PRIORITY_LENGTH(void);
#define NetI2pUtilLogRecordFormatter_MAX_PRIORITY_LENGTH 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLogRecordFormatter, MAX_PRIORITY_LENGTH, jint)

inline NSString *NetI2pUtilLogRecordFormatter_get_BUNDLE_NAME(void);
static NSString *NetI2pUtilLogRecordFormatter_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLogRecordFormatter, BUNDLE_NAME, NSString *)

__attribute__((unused)) static NSString *NetI2pUtilLogRecordFormatter_getThreadWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *logRecord);

__attribute__((unused)) static NSString *NetI2pUtilLogRecordFormatter_getPriorityWithNetI2pUtilLogRecord_withNetI2pI2PAppContext_(NetI2pUtilLogRecord *rec, NetI2pI2PAppContext *ctx);

__attribute__((unused)) static NSString *NetI2pUtilLogRecordFormatter_getWhatWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *rec);

__attribute__((unused)) static NSString *NetI2pUtilLogRecordFormatter_getWhereWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *rec);

__attribute__((unused)) static NSString *NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_(NSString *str, jint size);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilLogRecordFormatter)

NSString *NetI2pUtilLogRecordFormatter_NL;

@implementation NetI2pUtilLogRecordFormatter

+ (NSString *)NL {
  return NetI2pUtilLogRecordFormatter_NL;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilLogRecordFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)formatRecordWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                           withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec {
  return NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(manager, rec);
}

+ (NSString *)formatRecordWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                           withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec
                                       withBoolean:(jboolean)showDate {
  return NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_withBoolean_(manager, rec, showDate);
}

+ (NSString *)getThreadWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)logRecord {
  return NetI2pUtilLogRecordFormatter_getThreadWithNetI2pUtilLogRecord_(logRecord);
}

+ (NSString *)getWhenWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                      withNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)logRecord {
  return NetI2pUtilLogRecordFormatter_getWhenWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(manager, logRecord);
}

+ (NSString *)getPriorityWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec
                         withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  return NetI2pUtilLogRecordFormatter_getPriorityWithNetI2pUtilLogRecord_withNetI2pI2PAppContext_(rec, ctx);
}

+ (NSString *)getWhatWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec {
  return NetI2pUtilLogRecordFormatter_getWhatWithNetI2pUtilLogRecord_(rec);
}

+ (NSString *)getWhereWithNetI2pUtilLogRecord:(NetI2pUtilLogRecord *)rec {
  return NetI2pUtilLogRecordFormatter_getWhereWithNetI2pUtilLogRecord_(rec);
}

+ (NSString *)toStringWithNSString:(NSString *)str
                           withInt:(jint)size {
  return NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_(str, size);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(formatRecordWithNetI2pUtilLogManager:withNetI2pUtilLogRecord:);
  methods[2].selector = @selector(formatRecordWithNetI2pUtilLogManager:withNetI2pUtilLogRecord:withBoolean:);
  methods[3].selector = @selector(getThreadWithNetI2pUtilLogRecord:);
  methods[4].selector = @selector(getWhenWithNetI2pUtilLogManager:withNetI2pUtilLogRecord:);
  methods[5].selector = @selector(getPriorityWithNetI2pUtilLogRecord:withNetI2pI2PAppContext:);
  methods[6].selector = @selector(getWhatWithNetI2pUtilLogRecord:);
  methods[7].selector = @selector(getWhereWithNetI2pUtilLogRecord:);
  methods[8].selector = @selector(toStringWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "MAX_WHERE_LENGTH", "I", .constantValue.asInt = NetI2pUtilLogRecordFormatter_MAX_WHERE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREAD_LENGTH", "I", .constantValue.asInt = NetI2pUtilLogRecordFormatter_MAX_THREAD_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_PRIORITY_LENGTH", "I", .constantValue.asInt = NetI2pUtilLogRecordFormatter_MAX_PRIORITY_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "formatRecord", "LNetI2pUtilLogManager;LNetI2pUtilLogRecord;", "LNetI2pUtilLogManager;LNetI2pUtilLogRecord;Z", "getThread", "LNetI2pUtilLogRecord;", "getWhen", "getPriority", "LNetI2pUtilLogRecord;LNetI2pI2PAppContext;", "getWhat", "getWhere", "toString", "LNSString;I", &NetI2pUtilLogRecordFormatter_NL, &NetI2pUtilLogRecordFormatter_BUNDLE_NAME };
  static const J2ObjcClassInfo _NetI2pUtilLogRecordFormatter = { "LogRecordFormatter", "net.i2p.util", ptrTable, methods, fields, 7, 0x0, 9, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilLogRecordFormatter;
}

+ (void)initialize {
  if (self == [NetI2pUtilLogRecordFormatter class]) {
    JreStrongAssign(&NetI2pUtilLogRecordFormatter_NL, JavaLangSystem_getPropertyWithNSString_(@"line.separator"));
    J2OBJC_SET_INITIALIZED(NetI2pUtilLogRecordFormatter)
  }
}

@end

void NetI2pUtilLogRecordFormatter_init(NetI2pUtilLogRecordFormatter *self) {
  NSObject_init(self);
}

NetI2pUtilLogRecordFormatter *new_NetI2pUtilLogRecordFormatter_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilLogRecordFormatter, init)
}

NetI2pUtilLogRecordFormatter *create_NetI2pUtilLogRecordFormatter_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogRecordFormatter, init)
}

NSString *NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(NetI2pUtilLogManager *manager, NetI2pUtilLogRecord *rec) {
  NetI2pUtilLogRecordFormatter_initialize();
  return NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_withBoolean_(manager, rec, true);
}

NSString *NetI2pUtilLogRecordFormatter_formatRecordWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_withBoolean_(NetI2pUtilLogManager *manager, NetI2pUtilLogRecord *rec, jboolean showDate) {
  NetI2pUtilLogRecordFormatter_initialize();
  jint size = 128 + [((NSString *) nil_chk([((NetI2pUtilLogRecord *) nil_chk(rec)) getMessage])) java_length];
  if ([rec getThrowable] != nil) size += 512;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(size);
  IOSCharArray *format = [((NetI2pUtilLogManager *) nil_chk(manager)) getFormat];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(format))->size_; ++i) {
    {
      NSString *msg;
      switch (IOSCharArray_Get(format, i)) {
        case NetI2pUtilLogManager_DATE:
        if (showDate) [buf appendWithNSString:NetI2pUtilLogRecordFormatter_getWhenWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(manager, rec)];
        else if (i + 1 < format->size_ && IOSCharArray_Get(format, i + 1) == ' ') i++;
        break;
        case NetI2pUtilLogManager_CLASS:
        [buf appendWithNSString:NetI2pUtilLogRecordFormatter_getWhereWithNetI2pUtilLogRecord_(rec)];
        break;
        case NetI2pUtilLogManager_THREAD:
        [buf appendWithNSString:NetI2pUtilLogRecordFormatter_getThreadWithNetI2pUtilLogRecord_(rec)];
        break;
        case NetI2pUtilLogManager_PRIORITY:
        [buf appendWithNSString:NetI2pUtilLogRecordFormatter_getPriorityWithNetI2pUtilLogRecord_withNetI2pI2PAppContext_(rec, [manager getContext])];
        break;
        case NetI2pUtilLogManager_MESSAGE:
        msg = NetI2pUtilLogRecordFormatter_getWhatWithNetI2pUtilLogRecord_(rec);
        if (msg != nil) [buf appendWithNSString:msg];
        break;
        default:
        [buf appendWithChar:IOSCharArray_Get(format, i)];
        break;
      }
    }
  }
  [buf appendWithNSString:NetI2pUtilLogRecordFormatter_NL];
  if ([rec getThrowable] != nil) {
    JavaIoStringWriter *sw = create_JavaIoStringWriter_initWithInt_(512);
    JavaIoPrintWriter *pw = create_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
    [((JavaLangThrowable *) nil_chk([rec getThrowable])) printStackTraceWithJavaIoPrintWriter:pw];
    [pw flush];
    [buf appendWithNSString:[sw description]];
  }
  return [buf description];
}

NSString *NetI2pUtilLogRecordFormatter_getThreadWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *logRecord) {
  NetI2pUtilLogRecordFormatter_initialize();
  return NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_([((NetI2pUtilLogRecord *) nil_chk(logRecord)) getThreadName], NetI2pUtilLogRecordFormatter_MAX_THREAD_LENGTH);
}

NSString *NetI2pUtilLogRecordFormatter_getWhenWithNetI2pUtilLogManager_withNetI2pUtilLogRecord_(NetI2pUtilLogManager *manager, NetI2pUtilLogRecord *logRecord) {
  NetI2pUtilLogRecordFormatter_initialize();
  return [((JavaTextSimpleDateFormat *) nil_chk([((NetI2pUtilLogManager *) nil_chk(manager)) getDateFormat])) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_([((NetI2pUtilLogRecord *) nil_chk(logRecord)) getDate])];
}

NSString *NetI2pUtilLogRecordFormatter_getPriorityWithNetI2pUtilLogRecord_withNetI2pI2PAppContext_(NetI2pUtilLogRecord *rec, NetI2pI2PAppContext *ctx) {
  NetI2pUtilLogRecordFormatter_initialize();
  jint len;
  if ([((NSString *) nil_chk(NetI2pUtilTranslate_getLanguageWithNetI2pI2PAppContext_(ctx))) isEqual:@"de"]) len = 8;
  else len = NetI2pUtilLogRecordFormatter_MAX_PRIORITY_LENGTH;
  return NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_(NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(NetI2pUtilLog_toLevelStringWithInt_([((NetI2pUtilLogRecord *) nil_chk(rec)) getPriority]), ctx, NetI2pUtilLogRecordFormatter_BUNDLE_NAME), len);
}

NSString *NetI2pUtilLogRecordFormatter_getWhatWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *rec) {
  NetI2pUtilLogRecordFormatter_initialize();
  return [((NetI2pUtilLogRecord *) nil_chk(rec)) getMessage];
}

NSString *NetI2pUtilLogRecordFormatter_getWhereWithNetI2pUtilLogRecord_(NetI2pUtilLogRecord *rec) {
  NetI2pUtilLogRecordFormatter_initialize();
  NSString *src = ([((NetI2pUtilLogRecord *) nil_chk(rec)) getSource] != nil ? [((IOSClass *) nil_chk([rec getSource])) getName] : [rec getSourceName]);
  if (src == nil) src = @"<none>";
  return NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_(src, NetI2pUtilLogRecordFormatter_MAX_WHERE_LENGTH);
}

NSString *NetI2pUtilLogRecordFormatter_toStringWithNSString_withInt_(NSString *str, jint size) {
  NetI2pUtilLogRecordFormatter_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  if (str == nil) str = @"";
  if ([str java_length] > size) str = [str java_substring:[str java_length] - size];
  [buf appendWithNSString:str];
  while ([buf java_length] < size) [buf appendWithChar:' '];
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogRecordFormatter)
