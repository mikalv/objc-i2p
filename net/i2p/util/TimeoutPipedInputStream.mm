//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/TimeoutPipedInputStream.java
//

#include "J2ObjC_source.h"
#include "java/io/InterruptedIOException.h"
#include "java/io/PipedInputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/net/SocketTimeoutException.h"
#include "net/i2p/util/TimeoutPipedInputStream.h"

@interface NetI2pUtilTimeoutPipedInputStream () {
 @public
  jint timeout_;
  jboolean _closedByWriter_;
  volatile_jboolean _closedByReader_;
}

@end

@implementation NetI2pUtilTimeoutPipedInputStream

- (instancetype)initWithInt:(jint)pipeSize {
  NetI2pUtilTimeoutPipedInputStream_initWithInt_(self, pipeSize);
  return self;
}

- (jint)read {
  @synchronized(self) {
    if (in_ < 0 && timeout_ > 0 && !JreLoadVolatileBoolean(&_closedByReader_)) {
      jlong now = JavaLangSystem_currentTimeMillis();
      jlong end = now + timeout_;
      while (true) {
        if (_closedByWriter_) return -1;
        @try {
          [self java_waitWithLong:JavaLangMath_maxWithLong_withLong_(1LL, JavaLangMath_minWithLong_withLong_(1000LL, end - now))];
        }
        @catch (JavaLangInterruptedException *ex) {
          @throw create_JavaIoInterruptedIOException_init();
        }
        if (in_ >= 0 || JreLoadVolatileBoolean(&_closedByReader_)) break;
        now = JavaLangSystem_currentTimeMillis();
        if (now >= end) @throw create_JavaNetSocketTimeoutException_init();
      }
    }
    return [super read];
  }
}

- (void)setReadTimeoutWithInt:(jint)ms {
  timeout_ = JavaLangMath_maxWithInt_withInt_(0, ms);
}

- (void)x_receivedLast {
  @synchronized(self) {
    _closedByWriter_ = true;
    [self java_notifyAll];
  }
}

- (void)close {
  JreAssignVolatileBoolean(&_closedByReader_, true);
  [super close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(setReadTimeoutWithInt:);
  methods[3].selector = @selector(x_receivedLast);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_closedByWriter_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_closedByReader_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaIoIOException;", "setReadTimeout" };
  static const J2ObjcClassInfo _NetI2pUtilTimeoutPipedInputStream = { "TimeoutPipedInputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilTimeoutPipedInputStream;
}

@end

void NetI2pUtilTimeoutPipedInputStream_initWithInt_(NetI2pUtilTimeoutPipedInputStream *self, jint pipeSize) {
  JavaIoPipedInputStream_initWithInt_(self, pipeSize);
}

NetI2pUtilTimeoutPipedInputStream *new_NetI2pUtilTimeoutPipedInputStream_initWithInt_(jint pipeSize) {
  J2OBJC_NEW_IMPL(NetI2pUtilTimeoutPipedInputStream, initWithInt_, pipeSize)
}

NetI2pUtilTimeoutPipedInputStream *create_NetI2pUtilTimeoutPipedInputStream_initWithInt_(jint pipeSize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilTimeoutPipedInputStream, initWithInt_, pipeSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilTimeoutPipedInputStream)
