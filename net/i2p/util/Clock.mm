//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Clock.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/time/BuildTime.h"
#include "net/i2p/time/Timestamper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pUtilClock () {
 @public
  id<JavaUtilSet> _listeners_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilClock, _listeners_, id<JavaUtilSet>)

@interface NetI2pUtilClock_ClockUpdateListener : NSObject

@end

@implementation NetI2pUtilClock

+ (jlong)MAX_OFFSET {
  return NetI2pUtilClock_MAX_OFFSET;
}

+ (jlong)MAX_LIVE_OFFSET {
  return NetI2pUtilClock_MAX_LIVE_OFFSET;
}

+ (jlong)MIN_OFFSET_CHANGE {
  return NetI2pUtilClock_MIN_OFFSET_CHANGE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilClock_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

+ (NetI2pUtilClock *)getInstance {
  return NetI2pUtilClock_getInstance();
}

- (NetI2pTimeTimestamper *)getTimestamper {
  return create_NetI2pTimeTimestamper_init();
}

- (NetI2pUtilLog *)getLog {
  return [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) logManager])) getLogWithIOSClass:NetI2pUtilClock_class_()];
}

- (void)setOffsetWithLong:(jlong)offsetMs {
  [self setOffsetWithLong:offsetMs withBoolean:false];
}

- (void)setOffsetWithLong:(jlong)offsetMs
              withBoolean:(jboolean)force {
  @synchronized(self) {
    jlong delta = offsetMs - JreLoadVolatileLong(&_offset_);
    if (!force) {
      if (!_isSystemClockBad_ && (offsetMs > NetI2pUtilClock_MAX_OFFSET || offsetMs < 0 - NetI2pUtilClock_MAX_OFFSET)) {
        NetI2pUtilLog *log = [self getLog];
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$J$", @"Maximum offset shift exceeded [", offsetMs, @"], NOT HONORING IT")];
        return;
      }
      if (_alreadyChanged_ && (JavaLangSystem_currentTimeMillis() - _startedOn_ > 10 * 60 * 1000)) {
        if ((delta > NetI2pUtilClock_MAX_LIVE_OFFSET) || (delta < 0 - NetI2pUtilClock_MAX_LIVE_OFFSET)) {
          NetI2pUtilLog *log = [self getLog];
          if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_WARN]) [log warnWithNSString:JreStrcat("$J$J$", @"The clock has already been updated, but you want to change it by ", delta, @" to ", offsetMs, @"?  Did something break?")];
          return;
        }
      }
      if ((delta < NetI2pUtilClock_MIN_OFFSET_CHANGE) && (delta > 0 - NetI2pUtilClock_MIN_OFFSET_CHANGE)) {
        NetI2pUtilLog *log = [self getLog];
        if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [log debugWithNSString:JreStrcat("$J$", @"Not changing offset since it is only ", delta, @"ms")];
        _alreadyChanged_ = true;
        return;
      }
    }
    if (_alreadyChanged_) {
      if (delta > 15 * 1000) [((NetI2pUtilLog *) nil_chk([self getLog])) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$J$J$", @"Updating clock offset to ", offsetMs, @"ms from ", JreLoadVolatileLong(&_offset_), @"ms")];
      else if ([((NetI2pUtilLog *) nil_chk([self getLog])) shouldLogWithInt:NetI2pUtilLog_INFO]) [((NetI2pUtilLog *) nil_chk([self getLog])) infoWithNSString:JreStrcat("$J$J$", @"Updating clock offset to ", offsetMs, @"ms from ", JreLoadVolatileLong(&_offset_), @"ms")];
      if (!_statCreated_) {
        [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) createRequiredRateStatWithNSString:@"clock.skew" withNSString:@"Clock step adjustment (ms)" withNSString:@"Clock" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000, 3 * 60 * 60 * 1000, 24 * 60 * 60 * 1000 } count:3]];
        _statCreated_ = true;
      }
      [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"clock.skew" withLong:delta withLong:0];
    }
    else {
      NetI2pUtilLog *log = [self getLog];
      if ([((NetI2pUtilLog *) nil_chk(log)) shouldLogWithInt:NetI2pUtilLog_INFO]) [log infoWithNSString:JreStrcat("$J$J$", @"Initializing clock offset to ", offsetMs, @"ms from ", JreLoadVolatileLong(&_offset_), @"ms")];
    }
    _alreadyChanged_ = true;
    JreAssignVolatileLong(&_offset_, offsetMs);
    [self fireOffsetChangedWithLong:delta];
  }
}

- (jlong)getOffset {
  @synchronized(self) {
    return JreLoadVolatileLong(&_offset_);
  }
}

- (jboolean)getUpdatedSuccessfully {
  return _alreadyChanged_;
}

- (void)setNowWithLong:(jlong)realTime {
  if (realTime < NetI2pTimeBuildTime_getEarliestTime() || realTime > NetI2pTimeBuildTime_getLatestTime()) {
    NetI2pUtilLog *log = [self getLog];
    NSString *msg = JreStrcat("$@", @"Invalid time received: ", create_JavaUtilDate_initWithLong_(realTime));
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) [log warnWithNSString:msg withJavaLangThrowable:create_JavaLangException_init()];
    else [log logAlwaysWithInt:NetI2pUtilLog_WARN withNSString:msg];
    return;
  }
  jlong diff = realTime - JavaLangSystem_currentTimeMillis();
  [self setOffsetWithLong:diff];
}

- (void)setNowWithLong:(jlong)realTime
               withInt:(jint)stratum {
  [self setNowWithLong:realTime];
}

- (jlong)now {
  return JreLoadVolatileLong(&_offset_) + JavaLangSystem_currentTimeMillis();
}

- (void)addUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:(id<NetI2pUtilClock_ClockUpdateListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_listeners_)) addWithId:lsnr];
}

- (void)removeUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:(id<NetI2pUtilClock_ClockUpdateListener>)lsnr {
  [((id<JavaUtilSet>) nil_chk(_listeners_)) removeWithId:lsnr];
}

- (void)fireOffsetChangedWithLong:(jlong)delta {
  for (id<NetI2pUtilClock_ClockUpdateListener> __strong lsnr in nil_chk(_listeners_)) {
    [((id<NetI2pUtilClock_ClockUpdateListener>) nil_chk(lsnr)) offsetChangedWithLong:delta];
  }
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_listeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilClock;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pTimeTimestamper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilLog;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(getTimestamper);
  methods[3].selector = @selector(getLog);
  methods[4].selector = @selector(setOffsetWithLong:);
  methods[5].selector = @selector(setOffsetWithLong:withBoolean:);
  methods[6].selector = @selector(getOffset);
  methods[7].selector = @selector(getUpdatedSuccessfully);
  methods[8].selector = @selector(setNowWithLong:);
  methods[9].selector = @selector(setNowWithLong:withInt:);
  methods[10].selector = @selector(now);
  methods[11].selector = @selector(addUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:);
  methods[12].selector = @selector(removeUpdateListenerWithNetI2pUtilClock_ClockUpdateListener:);
  methods[13].selector = @selector(fireOffsetChangedWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_isSystemClockBad_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_startedOn_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_statCreated_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_offset_", "J", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_alreadyChanged_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "MAX_OFFSET", "J", .constantValue.asLong = NetI2pUtilClock_MAX_OFFSET, 0x19, -1, -1, -1, -1 },
    { "MAX_LIVE_OFFSET", "J", .constantValue.asLong = NetI2pUtilClock_MAX_LIVE_OFFSET, 0x19, -1, -1, -1, -1 },
    { "MIN_OFFSET_CHANGE", "J", .constantValue.asLong = NetI2pUtilClock_MIN_OFFSET_CHANGE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setOffset", "J", "JZ", "setNow", "JI", "addUpdateListener", "LNetI2pUtilClock_ClockUpdateListener;", "removeUpdateListener", "fireOffsetChanged", "Ljava/util/Set<Lnet/i2p/util/Clock$ClockUpdateListener;>;" };
  static const J2ObjcClassInfo _NetI2pUtilClock = { "Clock", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, 7, -1, -1, -1 };
  return &_NetI2pUtilClock;
}

@end

void NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pUtilClock *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  jlong now = JavaLangSystem_currentTimeMillis();
  jlong min = NetI2pTimeBuildTime_getEarliestTime();
  jlong max = NetI2pTimeBuildTime_getLatestTime();
  if (now < min) {
    JreAssignVolatileLong(&self->_offset_, min - now);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"ERROR: System clock is invalid: ", create_JavaUtilDate_initWithLong_(now))];
    now = min;
    self->_isSystemClockBad_ = true;
  }
  else if (now > max) {
    JreAssignVolatileLong(&self->_offset_, max - now);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"ERROR: System clock is invalid: ", create_JavaUtilDate_initWithLong_(now))];
    now = max;
    self->_isSystemClockBad_ = true;
  }
  else {
    self->_isSystemClockBad_ = false;
  }
  self->_startedOn_ = now;
}

NetI2pUtilClock *new_NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilClock, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilClock *create_NetI2pUtilClock_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilClock, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilClock *NetI2pUtilClock_getInstance() {
  NetI2pUtilClock_initialize();
  return [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) clock];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilClock)

@implementation NetI2pUtilClock_ClockUpdateListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(offsetChangedWithLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "offsetChanged", "J", "LNetI2pUtilClock;" };
  static const J2ObjcClassInfo _NetI2pUtilClock_ClockUpdateListener = { "ClockUpdateListener", "net.i2p.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pUtilClock_ClockUpdateListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pUtilClock_ClockUpdateListener)
