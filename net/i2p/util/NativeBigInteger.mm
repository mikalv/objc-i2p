//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/NativeBigInteger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "freenet/support/CPUInformation/AMDCPUInfo.h"
#include "freenet/support/CPUInformation/CPUID.h"
#include "freenet/support/CPUInformation/CPUInfo.h"
#include "freenet/support/CPUInformation/IntelCPUInfo.h"
#include "freenet/support/CPUInformation/UnknownCPUException.h"
#include "freenet/support/CPUInformation/VIACPUInfo.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsatisfiedLinkError.h"
#include "java/math/BigInteger.h"
#include "java/net/URL.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/CryptoConstants.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/NativeBigInteger.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SystemVersion.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface NetI2pUtilNativeBigInteger () {
 @public
  IOSByteArray *cachedBa_;
}

+ (NSString *)resolveCPUType;

+ (IOSByteArray *)nativeModPowWithByteArray:(IOSByteArray *)base
                              withByteArray:(IOSByteArray *)exponent
                              withByteArray:(IOSByteArray *)modulus;

+ (IOSByteArray *)nativeModPowCTWithByteArray:(IOSByteArray *)base
                                withByteArray:(IOSByteArray *)exponent
                                withByteArray:(IOSByteArray *)modulus;

+ (IOSByteArray *)nativeModInverseWithByteArray:(IOSByteArray *)base
                                  withByteArray:(IOSByteArray *)d;

+ (jint)nativeJbigiVersion;

+ (jint)nativeGMPMajorVersion;

+ (jint)nativeGMPMinorVersion;

+ (jint)nativeGMPPatchVersion;

+ (jint)fetchJbigiVersion;

+ (void)setVersions;

+ (void)runModPowTestWithInt:(jint)numRuns
                     withInt:(jint)mode
                 withBoolean:(jboolean)nativeOnly;

+ (void)loadNative;

+ (void)debugWithNSString:(NSString *)s;

+ (void)infoWithNSString:(NSString *)s;

+ (void)warnWithNSString:(NSString *)s;

+ (void)warnWithNSString:(NSString *)s
   withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)errorWithNSString:(NSString *)s;

+ (void)errorWithNSString:(NSString *)s
    withJavaLangThrowable:(JavaLangThrowable *)t;

+ (jboolean)loadGenericWithNSString:(NSString *)name;

+ (jboolean)loadFromResourceWithNSString:(NSString *)resourceName;

+ (id<JavaUtilList>)getResourceList;

+ (id<JavaUtilMap>)getCPUInfo;

+ (NSString *)getMiddleName2WithBoolean:(jboolean)optimized;

+ (NSString *)getMiddleName1;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilNativeBigInteger, cachedBa_, IOSByteArray *)

inline jboolean NetI2pUtilNativeBigInteger_get__nativeOk(void);
inline jboolean NetI2pUtilNativeBigInteger_set__nativeOk(jboolean value);
inline jboolean *NetI2pUtilNativeBigInteger_getRef__nativeOk(void);
static jboolean NetI2pUtilNativeBigInteger__nativeOk;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilNativeBigInteger, _nativeOk, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__nativeOk3(void);
inline jboolean NetI2pUtilNativeBigInteger_set__nativeOk3(jboolean value);
inline jboolean *NetI2pUtilNativeBigInteger_getRef__nativeOk3(void);
static jboolean NetI2pUtilNativeBigInteger__nativeOk3;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilNativeBigInteger, _nativeOk3, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__nativeCTOk(void);
inline jboolean NetI2pUtilNativeBigInteger_set__nativeCTOk(jboolean value);
inline jboolean *NetI2pUtilNativeBigInteger_getRef__nativeCTOk(void);
static jboolean NetI2pUtilNativeBigInteger__nativeCTOk;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilNativeBigInteger, _nativeCTOk, jboolean)

inline jint NetI2pUtilNativeBigInteger_get__jbigiVersion(void);
inline jint NetI2pUtilNativeBigInteger_set__jbigiVersion(jint value);
inline jint *NetI2pUtilNativeBigInteger_getRef__jbigiVersion(void);
static jint NetI2pUtilNativeBigInteger__jbigiVersion;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilNativeBigInteger, _jbigiVersion, jint)

inline NSString *NetI2pUtilNativeBigInteger_get__libGMPVersion(void);
inline NSString *NetI2pUtilNativeBigInteger_set__libGMPVersion(NSString *value);
static NSString *NetI2pUtilNativeBigInteger__libGMPVersion = @"unknown";
J2OBJC_STATIC_FIELD_OBJ(NetI2pUtilNativeBigInteger, _libGMPVersion, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get__loadStatus(void);
inline NSString *NetI2pUtilNativeBigInteger_set__loadStatus(NSString *value);
static NSString *NetI2pUtilNativeBigInteger__loadStatus = @"uninitialized";
J2OBJC_STATIC_FIELD_OBJ(NetI2pUtilNativeBigInteger, _loadStatus, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get__cpuModel(void);
inline NSString *NetI2pUtilNativeBigInteger_set__cpuModel(NSString *value);
static NSString *NetI2pUtilNativeBigInteger__cpuModel = @"uninitialized";
J2OBJC_STATIC_FIELD_OBJ(NetI2pUtilNativeBigInteger, _cpuModel, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get__extractedResource(void);
inline NSString *NetI2pUtilNativeBigInteger_set__extractedResource(NSString *value);
static NSString *NetI2pUtilNativeBigInteger__extractedResource;
J2OBJC_STATIC_FIELD_OBJ(NetI2pUtilNativeBigInteger, _extractedResource, NSString *)

inline jboolean NetI2pUtilNativeBigInteger_get__doLog(void);
inline jboolean NetI2pUtilNativeBigInteger_set__doLog(jboolean value);
inline jboolean *NetI2pUtilNativeBigInteger_getRef__doLog(void);
static jboolean NetI2pUtilNativeBigInteger__doLog;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilNativeBigInteger, _doLog, jboolean)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_K6(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6 = @"k6";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_K6, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_K6_2(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2 = @"k62";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_K6_2, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_K6_3(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3 = @"k63";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_K6_3, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ATHLON(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON = @"athlon";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ATHLON, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ATHLON64(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64 = @"athlon64";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ATHLON64, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUM(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM = @"pentium";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUM, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUMMMX(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX = @"pentiummmx";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUMMMX, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUM2(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2 = @"pentium2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUM2, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUM3(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3 = @"pentium3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUM3, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUM4(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4 = @"pentium4";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUM4, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_VIAC3(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC3 = @"viac3";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_VIAC3, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ATOM(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATOM = @"atom";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ATOM, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_CORE2(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_CORE2 = @"core2";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_CORE2, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_COREI(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI = @"corei";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_COREI, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_GEODE(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_GEODE = @"geode";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_GEODE, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_NANO(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_NANO = @"nano";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_NANO, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PENTIUMM(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM = @"pentiumm";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PENTIUMM, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_VIAC32(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC32 = @"viac32";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_VIAC32, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_COREI_SBR(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_SBR = @"coreisbr";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_COREI_SBR, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_COREI_HWL(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_HWL = @"coreihwl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_COREI_HWL, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_COREI_BWL(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_BWL = @"coreibwl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_COREI_BWL, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_K10(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K10 = @"k10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_K10, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_BULLDOZER(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BULLDOZER = @"bulldozer";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_BULLDOZER, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PILEDRIVER(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PILEDRIVER = @"piledriver";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PILEDRIVER, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_STEAMROLLER(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_STEAMROLLER = @"steamroller";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_STEAMROLLER, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_EXCAVATOR(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_EXCAVATOR = @"excavator";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_EXCAVATOR, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_BOBCAT(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BOBCAT = @"bobcat";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_BOBCAT, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_JAGUAR(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_JAGUAR = @"jaguar";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_JAGUAR, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_PPC(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PPC = @"ppc";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_PPC, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_ARMV5(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5 = @"armv5";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_ARMV5, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_ARMV6(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6 = @"armv6";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_ARMV6, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_ARMV7(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7 = @"armv7";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_ARMV7, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_CORTEX_A5(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A5 = @"armcortexa5";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_CORTEX_A5, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_CORTEX_A7(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A7 = @"armcortexa7";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_CORTEX_A7, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_CORTEX_A8(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A8 = @"armcortexa8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_CORTEX_A8, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_CORTEX_A9(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A9 = @"armcortexa9";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_CORTEX_A9, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_ARM_CORTEX_A15(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15 = @"armcortexa15";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_ARM_CORTEX_A15, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_JBIGI_OPTIMIZATION_X86(void);
static NSString *NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_OPTIMIZATION_X86, NSString *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_NONE(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_NONE, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_PPC(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_PPC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_PPC, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_ARM(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_ARM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_VIA(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_VIA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_VIA, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_AMD_ATHLON(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_ATHLON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_AMD_GEODE(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_GEODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_GEODE, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_AMD_APU(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_APU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_APU, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_AMD_BULLDOZER(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_BULLDOZER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_BULLDOZER, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_INTEL_ATOM(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_ATOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_ATOM, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_INTEL_PENTIUM(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_PENTIUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM, IOSObjectArray *)

inline IOSObjectArray *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_LIST_INTEL_CORE(void);
static IOSObjectArray *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_CORE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE, IOSObjectArray *)

inline JavaUtilHashMap *NetI2pUtilNativeBigInteger_get_JBIGI_COMPAT_MAP(void);
static JavaUtilHashMap *NetI2pUtilNativeBigInteger_JBIGI_COMPAT_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_MAP, JavaUtilHashMap *)

inline jboolean NetI2pUtilNativeBigInteger_get__isWin(void);
static jboolean NetI2pUtilNativeBigInteger__isWin;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isWin, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isOS2(void);
static jboolean NetI2pUtilNativeBigInteger__isOS2;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isOS2, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isMac(void);
static jboolean NetI2pUtilNativeBigInteger__isMac;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isMac, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isLinux(void);
static jboolean NetI2pUtilNativeBigInteger__isLinux;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isLinux, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isKFreebsd(void);
static jboolean NetI2pUtilNativeBigInteger__isKFreebsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isKFreebsd, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isFreebsd(void);
static jboolean NetI2pUtilNativeBigInteger__isFreebsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isFreebsd, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isNetbsd(void);
static jboolean NetI2pUtilNativeBigInteger__isNetbsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isNetbsd, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isOpenbsd(void);
static jboolean NetI2pUtilNativeBigInteger__isOpenbsd;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isOpenbsd, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isSunos(void);
static jboolean NetI2pUtilNativeBigInteger__isSunos;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isSunos, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isAndroid(void);
static jboolean NetI2pUtilNativeBigInteger__isAndroid;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isAndroid, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__is64(void);
static jboolean NetI2pUtilNativeBigInteger__is64;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _is64, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isX86(void);
static jboolean NetI2pUtilNativeBigInteger__isX86;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isX86, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isArm(void);
static jboolean NetI2pUtilNativeBigInteger__isArm;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isArm, jboolean)

inline jboolean NetI2pUtilNativeBigInteger_get__isPPC(void);
static jboolean NetI2pUtilNativeBigInteger__isPPC;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilNativeBigInteger, _isPPC, jboolean)

inline NSString *NetI2pUtilNativeBigInteger_get__libPrefix(void);
static NSString *NetI2pUtilNativeBigInteger__libPrefix;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, _libPrefix, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get__libSuffix(void);
static NSString *NetI2pUtilNativeBigInteger__libSuffix;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, _libSuffix, NSString *)

inline NSString *NetI2pUtilNativeBigInteger_get_sCPUType(void);
static NSString *NetI2pUtilNativeBigInteger_sCPUType;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilNativeBigInteger, sCPUType, NSString *)

__attribute__((unused)) static NSString *NetI2pUtilNativeBigInteger_resolveCPUType(void);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModPowWithByteArray_withByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *exponent, IOSByteArray *modulus);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModPowCTWithByteArray_withByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *exponent, IOSByteArray *modulus);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModInverseWithByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *d);

jint NetI2pUtilNativeBigInteger_nativeJbigiVersion(void);

jint NetI2pUtilNativeBigInteger_nativeGMPMajorVersion(void);

jint NetI2pUtilNativeBigInteger_nativeGMPMinorVersion(void);

jint NetI2pUtilNativeBigInteger_nativeGMPPatchVersion(void);

__attribute__((unused)) static jint NetI2pUtilNativeBigInteger_fetchJbigiVersion(void);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_setVersions(void);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(jint numRuns, jint mode, jboolean nativeOnly);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_loadNative(void);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_debugWithNSString_(NSString *s);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_infoWithNSString_(NSString *s);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_warnWithNSString_(NSString *s);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_errorWithNSString_(NSString *s);

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_errorWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t);

__attribute__((unused)) static jboolean NetI2pUtilNativeBigInteger_loadGenericWithNSString_(NSString *name);

__attribute__((unused)) static jboolean NetI2pUtilNativeBigInteger_loadFromResourceWithNSString_(NSString *resourceName);

__attribute__((unused)) static id<JavaUtilList> NetI2pUtilNativeBigInteger_getResourceList(void);

__attribute__((unused)) static id<JavaUtilMap> NetI2pUtilNativeBigInteger_getCPUInfo(void);

__attribute__((unused)) static NSString *NetI2pUtilNativeBigInteger_getMiddleName2WithBoolean_(jboolean optimized);

__attribute__((unused)) static NSString *NetI2pUtilNativeBigInteger_getMiddleName1(void);

@interface NetI2pUtilNativeBigInteger_1 : JavaUtilHashMap

- (instancetype)init;

- (IOSObjectArray *)computeIfAbsentWithId:(NSString *)arg0
             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (IOSObjectArray *)getWithId:(id)arg0;

- (IOSObjectArray *)removeWithId:(id)arg0;

- (IOSObjectArray *)putIfAbsentWithId:(NSString *)arg0
                               withId:(IOSObjectArray *)arg1;

- (IOSObjectArray *)computeIfPresentWithId:(NSString *)arg0
            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (IOSObjectArray *)replaceWithId:(NSString *)arg0
                           withId:(IOSObjectArray *)arg1;

- (IOSObjectArray *)putWithId:(NSString *)arg0
                       withId:(IOSObjectArray *)arg1;

- (IOSObjectArray *)computeWithId:(NSString *)arg0
   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (IOSObjectArray *)mergeWithId:(NSString *)arg0
                         withId:(IOSObjectArray *)arg1
 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (IOSObjectArray *)getOrDefaultWithId:(id)arg0
                                withId:(IOSObjectArray *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilNativeBigInteger_1)

__attribute__((unused)) static void NetI2pUtilNativeBigInteger_1_init(NetI2pUtilNativeBigInteger_1 *self);

__attribute__((unused)) static NetI2pUtilNativeBigInteger_1 *new_NetI2pUtilNativeBigInteger_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilNativeBigInteger_1 *create_NetI2pUtilNativeBigInteger_1_init(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilNativeBigInteger)

@implementation NetI2pUtilNativeBigInteger

+ (NSString *)resolveCPUType {
  return NetI2pUtilNativeBigInteger_resolveCPUType();
}

+ (IOSByteArray *)nativeModPowWithByteArray:(IOSByteArray *)base
                              withByteArray:(IOSByteArray *)exponent
                              withByteArray:(IOSByteArray *)modulus {
  return NetI2pUtilNativeBigInteger_nativeModPowWithByteArray_withByteArray_withByteArray_(base, exponent, modulus);
}

+ (IOSByteArray *)nativeModPowCTWithByteArray:(IOSByteArray *)base
                                withByteArray:(IOSByteArray *)exponent
                                withByteArray:(IOSByteArray *)modulus {
  return NetI2pUtilNativeBigInteger_nativeModPowCTWithByteArray_withByteArray_withByteArray_(base, exponent, modulus);
}

+ (IOSByteArray *)nativeModInverseWithByteArray:(IOSByteArray *)base
                                  withByteArray:(IOSByteArray *)d {
  return NetI2pUtilNativeBigInteger_nativeModInverseWithByteArray_withByteArray_(base, d);
}

+ (jint)nativeJbigiVersion {
  return NetI2pUtilNativeBigInteger_nativeJbigiVersion();
}

+ (jint)nativeGMPMajorVersion {
  return NetI2pUtilNativeBigInteger_nativeGMPMajorVersion();
}

+ (jint)nativeGMPMinorVersion {
  return NetI2pUtilNativeBigInteger_nativeGMPMinorVersion();
}

+ (jint)nativeGMPPatchVersion {
  return NetI2pUtilNativeBigInteger_nativeGMPPatchVersion();
}

+ (jint)fetchJbigiVersion {
  return NetI2pUtilNativeBigInteger_fetchJbigiVersion();
}

+ (void)setVersions {
  NetI2pUtilNativeBigInteger_setVersions();
}

+ (jint)getJbigiVersion {
  return NetI2pUtilNativeBigInteger_getJbigiVersion();
}

+ (NSString *)getLibGMPVersion {
  return NetI2pUtilNativeBigInteger_getLibGMPVersion();
}

- (instancetype)initWithByteArray:(IOSByteArray *)val {
  NetI2pUtilNativeBigInteger_initWithByteArray_(self, val);
  return self;
}

- (instancetype)initWithInt:(jint)signum
              withByteArray:(IOSByteArray *)magnitude {
  NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(self, signum, magnitude);
  return self;
}

- (instancetype)initWithInt:(jint)bitlen
                    withInt:(jint)certainty
         withJavaUtilRandom:(JavaUtilRandom *)rnd {
  NetI2pUtilNativeBigInteger_initWithInt_withInt_withJavaUtilRandom_(self, bitlen, certainty, rnd);
  return self;
}

- (instancetype)initWithInt:(jint)numbits
         withJavaUtilRandom:(JavaUtilRandom *)rnd {
  NetI2pUtilNativeBigInteger_initWithInt_withJavaUtilRandom_(self, numbits, rnd);
  return self;
}

- (instancetype)initWithNSString:(NSString *)val {
  NetI2pUtilNativeBigInteger_initWithNSString_(self, val);
  return self;
}

- (instancetype)initWithNSString:(NSString *)val
                         withInt:(jint)radix {
  NetI2pUtilNativeBigInteger_initWithNSString_withInt_(self, val, radix);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)integer {
  NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(self, integer);
  return self;
}

- (JavaMathBigInteger *)modPowWithJavaMathBigInteger:(JavaMathBigInteger *)exponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (NetI2pUtilNativeBigInteger__nativeOk3 || (NetI2pUtilNativeBigInteger__nativeOk && [self signum] >= 0 && [((JavaMathBigInteger *) nil_chk(exponent)) signum] >= 0 && [((JavaMathBigInteger *) nil_chk(m)) signum] > 0)) return create_NetI2pUtilNativeBigInteger_initWithByteArray_(NetI2pUtilNativeBigInteger_nativeModPowWithByteArray_withByteArray_withByteArray_([self toByteArray], [((JavaMathBigInteger *) nil_chk(exponent)) toByteArray], [((JavaMathBigInteger *) nil_chk(m)) toByteArray]));
  else return [super modPowWithJavaMathBigInteger:exponent withJavaMathBigInteger:m];
}

- (JavaMathBigInteger *)modPowCTWithJavaMathBigInteger:(JavaMathBigInteger *)exponent
                                withJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (NetI2pUtilNativeBigInteger__nativeCTOk) return create_NetI2pUtilNativeBigInteger_initWithByteArray_(NetI2pUtilNativeBigInteger_nativeModPowCTWithByteArray_withByteArray_withByteArray_([self toByteArray], [((JavaMathBigInteger *) nil_chk(exponent)) toByteArray], [((JavaMathBigInteger *) nil_chk(m)) toByteArray]));
  else return [self modPowWithJavaMathBigInteger:exponent withJavaMathBigInteger:m];
}

- (JavaMathBigInteger *)modInverseWithJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (NetI2pUtilNativeBigInteger__nativeOk3) return create_NetI2pUtilNativeBigInteger_initWithByteArray_(NetI2pUtilNativeBigInteger_nativeModInverseWithByteArray_withByteArray_([self toByteArray], [((JavaMathBigInteger *) nil_chk(m)) toByteArray]));
  else return [super modInverseWithJavaMathBigInteger:m];
}

- (IOSByteArray *)toByteArray {
  if (cachedBa_ == nil) JreStrongAssign(&cachedBa_, [super toByteArray]);
  return cachedBa_;
}

+ (jboolean)isNative {
  return NetI2pUtilNativeBigInteger_isNative();
}

+ (NSString *)loadStatus {
  return NetI2pUtilNativeBigInteger_loadStatus();
}

+ (NSString *)getLoadedResourceName {
  return NetI2pUtilNativeBigInteger_getLoadedResourceName();
}

+ (NSString *)cpuType {
  return NetI2pUtilNativeBigInteger_cpuType();
}

+ (NSString *)cpuModel {
  return NetI2pUtilNativeBigInteger_cpuModel();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilNativeBigInteger_mainWithNSStringArray_(args);
}

+ (void)runModPowTestWithInt:(jint)numRuns
                     withInt:(jint)mode
                 withBoolean:(jboolean)nativeOnly {
  NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(numRuns, mode, nativeOnly);
}

+ (void)loadNative {
  NetI2pUtilNativeBigInteger_loadNative();
}

+ (void)debugWithNSString:(NSString *)s {
  NetI2pUtilNativeBigInteger_debugWithNSString_(s);
}

+ (void)infoWithNSString:(NSString *)s {
  NetI2pUtilNativeBigInteger_infoWithNSString_(s);
}

+ (void)warnWithNSString:(NSString *)s {
  NetI2pUtilNativeBigInteger_warnWithNSString_(s);
}

+ (void)warnWithNSString:(NSString *)s
   withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(s, t);
}

+ (void)errorWithNSString:(NSString *)s {
  NetI2pUtilNativeBigInteger_errorWithNSString_(s);
}

+ (void)errorWithNSString:(NSString *)s
    withJavaLangThrowable:(JavaLangThrowable *)t {
  NetI2pUtilNativeBigInteger_errorWithNSString_withJavaLangThrowable_(s, t);
}

+ (jboolean)loadGenericWithNSString:(NSString *)name {
  return NetI2pUtilNativeBigInteger_loadGenericWithNSString_(name);
}

+ (jboolean)loadFromResourceWithNSString:(NSString *)resourceName {
  return NetI2pUtilNativeBigInteger_loadFromResourceWithNSString_(resourceName);
}

+ (id<JavaUtilList>)getResourceList {
  return NetI2pUtilNativeBigInteger_getResourceList();
}

+ (id<JavaUtilMap>)getCPUInfo {
  return NetI2pUtilNativeBigInteger_getCPUInfo();
}

+ (NSString *)getMiddleName2WithBoolean:(jboolean)optimized {
  return NetI2pUtilNativeBigInteger_getMiddleName2WithBoolean_(optimized);
}

+ (NSString *)getMiddleName1 {
  return NetI2pUtilNativeBigInteger_getMiddleName1();
}

- (jboolean)isEqual:(id)o {
  return [super isEqual:o];
}

- (NSUInteger)hash {
  return ((jint) [super hash]);
}

- (void)dealloc {
  RELEASE_(cachedBa_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x10a, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x10a, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 20, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 25, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 26, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, -1, -1, -1, 27, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 28, -1, -1 },
    { NULL, "LNSString;", 0x1a, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(resolveCPUType);
  methods[1].selector = @selector(nativeModPowWithByteArray:withByteArray:withByteArray:);
  methods[2].selector = @selector(nativeModPowCTWithByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(nativeModInverseWithByteArray:withByteArray:);
  methods[4].selector = @selector(nativeJbigiVersion);
  methods[5].selector = @selector(nativeGMPMajorVersion);
  methods[6].selector = @selector(nativeGMPMinorVersion);
  methods[7].selector = @selector(nativeGMPPatchVersion);
  methods[8].selector = @selector(fetchJbigiVersion);
  methods[9].selector = @selector(setVersions);
  methods[10].selector = @selector(getJbigiVersion);
  methods[11].selector = @selector(getLibGMPVersion);
  methods[12].selector = @selector(initWithByteArray:);
  methods[13].selector = @selector(initWithInt:withByteArray:);
  methods[14].selector = @selector(initWithInt:withInt:withJavaUtilRandom:);
  methods[15].selector = @selector(initWithInt:withJavaUtilRandom:);
  methods[16].selector = @selector(initWithNSString:);
  methods[17].selector = @selector(initWithNSString:withInt:);
  methods[18].selector = @selector(initWithJavaMathBigInteger:);
  methods[19].selector = @selector(modPowWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[20].selector = @selector(modPowCTWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[21].selector = @selector(modInverseWithJavaMathBigInteger:);
  methods[22].selector = @selector(toByteArray);
  methods[23].selector = @selector(isNative);
  methods[24].selector = @selector(loadStatus);
  methods[25].selector = @selector(getLoadedResourceName);
  methods[26].selector = @selector(cpuType);
  methods[27].selector = @selector(cpuModel);
  methods[28].selector = @selector(mainWithNSStringArray:);
  methods[29].selector = @selector(runModPowTestWithInt:withInt:withBoolean:);
  methods[30].selector = @selector(loadNative);
  methods[31].selector = @selector(debugWithNSString:);
  methods[32].selector = @selector(infoWithNSString:);
  methods[33].selector = @selector(warnWithNSString:);
  methods[34].selector = @selector(warnWithNSString:withJavaLangThrowable:);
  methods[35].selector = @selector(errorWithNSString:);
  methods[36].selector = @selector(errorWithNSString:withJavaLangThrowable:);
  methods[37].selector = @selector(loadGenericWithNSString:);
  methods[38].selector = @selector(loadFromResourceWithNSString:);
  methods[39].selector = @selector(getResourceList);
  methods[40].selector = @selector(getCPUInfo);
  methods[41].selector = @selector(getMiddleName2WithBoolean:);
  methods[42].selector = @selector(getMiddleName1);
  methods[43].selector = @selector(isEqual:);
  methods[44].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_nativeOk", "Z", .constantValue.asLong = 0, 0xa, -1, 34, -1, -1 },
    { "_nativeOk3", "Z", .constantValue.asLong = 0, 0xa, -1, 35, -1, -1 },
    { "_nativeCTOk", "Z", .constantValue.asLong = 0, 0xa, -1, 36, -1, -1 },
    { "_jbigiVersion", "I", .constantValue.asLong = 0, 0xa, -1, 37, -1, -1 },
    { "_libGMPVersion", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
    { "_loadStatus", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
    { "_cpuModel", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 40, -1, -1 },
    { "_extractedResource", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 41, -1, -1 },
    { "_doLog", "Z", .constantValue.asLong = 0, 0xa, -1, 42, -1, -1 },
    { "JBIGI_OPTIMIZATION_K6", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "JBIGI_OPTIMIZATION_K6_2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "JBIGI_OPTIMIZATION_K6_3", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "JBIGI_OPTIMIZATION_ATHLON", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "JBIGI_OPTIMIZATION_ATHLON64", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUMMMX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUM2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUM3", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUM4", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "JBIGI_OPTIMIZATION_VIAC3", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "JBIGI_OPTIMIZATION_ATOM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "JBIGI_OPTIMIZATION_CORE2", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "JBIGI_OPTIMIZATION_COREI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "JBIGI_OPTIMIZATION_GEODE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "JBIGI_OPTIMIZATION_NANO", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "JBIGI_OPTIMIZATION_PENTIUMM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "JBIGI_OPTIMIZATION_VIAC32", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "JBIGI_OPTIMIZATION_COREI_SBR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "JBIGI_OPTIMIZATION_COREI_HWL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "JBIGI_OPTIMIZATION_COREI_BWL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "JBIGI_OPTIMIZATION_K10", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "JBIGI_OPTIMIZATION_BULLDOZER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
    { "JBIGI_OPTIMIZATION_PILEDRIVER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 66, -1, -1 },
    { "JBIGI_OPTIMIZATION_STEAMROLLER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "JBIGI_OPTIMIZATION_EXCAVATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "JBIGI_OPTIMIZATION_BOBCAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "JBIGI_OPTIMIZATION_JAGUAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "JBIGI_OPTIMIZATION_PPC", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_ARMV5", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_ARMV6", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_ARMV7", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_CORTEX_A5", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_CORTEX_A7", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_CORTEX_A8", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_CORTEX_A9", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 78, -1, -1 },
    { "JBIGI_OPTIMIZATION_ARM_CORTEX_A15", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 79, -1, -1 },
    { "JBIGI_OPTIMIZATION_X86", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
    { "JBIGI_COMPAT_LIST_NONE", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
    { "JBIGI_COMPAT_LIST_PPC", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 82, -1, -1 },
    { "JBIGI_COMPAT_LIST_ARM", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 83, -1, -1 },
    { "JBIGI_COMPAT_LIST_VIA", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 84, -1, -1 },
    { "JBIGI_COMPAT_LIST_AMD_ATHLON", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 85, -1, -1 },
    { "JBIGI_COMPAT_LIST_AMD_GEODE", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 86, -1, -1 },
    { "JBIGI_COMPAT_LIST_AMD_APU", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 87, -1, -1 },
    { "JBIGI_COMPAT_LIST_AMD_BULLDOZER", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "JBIGI_COMPAT_LIST_INTEL_ATOM", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 89, -1, -1 },
    { "JBIGI_COMPAT_LIST_INTEL_PENTIUM", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 90, -1, -1 },
    { "JBIGI_COMPAT_LIST_INTEL_CORE", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 91, -1, -1 },
    { "JBIGI_COMPAT_MAP", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 92, 93, -1 },
    { "_isWin", "Z", .constantValue.asLong = 0, 0x1a, -1, 94, -1, -1 },
    { "_isOS2", "Z", .constantValue.asLong = 0, 0x1a, -1, 95, -1, -1 },
    { "_isMac", "Z", .constantValue.asLong = 0, 0x1a, -1, 96, -1, -1 },
    { "_isLinux", "Z", .constantValue.asLong = 0, 0x1a, -1, 97, -1, -1 },
    { "_isKFreebsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 98, -1, -1 },
    { "_isFreebsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 99, -1, -1 },
    { "_isNetbsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 100, -1, -1 },
    { "_isOpenbsd", "Z", .constantValue.asLong = 0, 0x1a, -1, 101, -1, -1 },
    { "_isSunos", "Z", .constantValue.asLong = 0, 0x1a, -1, 102, -1, -1 },
    { "_isAndroid", "Z", .constantValue.asLong = 0, 0x1a, -1, 103, -1, -1 },
    { "_is64", "Z", .constantValue.asLong = 0, 0x1a, -1, 104, -1, -1 },
    { "_isX86", "Z", .constantValue.asLong = 0, 0x1a, -1, 105, -1, -1 },
    { "_isArm", "Z", .constantValue.asLong = 0, 0x1a, -1, 106, -1, -1 },
    { "_isPPC", "Z", .constantValue.asLong = 0, 0x1a, -1, 107, -1, -1 },
    { "_libPrefix", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 108, -1, -1 },
    { "_libSuffix", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 109, -1, -1 },
    { "sCPUType", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 110, -1, -1 },
    { "cachedBa_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeModPow", "[B[B[B", "nativeModPowCT", "nativeModInverse", "[B[B", "[B", "I[B", "IILJavaUtilRandom;", "ILJavaUtilRandom;", "LNSString;", "LNSString;I", "LJavaMathBigInteger;", "modPow", "LJavaMathBigInteger;LJavaMathBigInteger;", "modPowCT", "modInverse", "main", "[LNSString;", "runModPowTest", "IIZ", "debug", "info", "warn", "LNSString;LJavaLangThrowable;", "error", "loadGeneric", "loadFromResource", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "getMiddleName2", "Z", "equals", "LNSObject;", "hashCode", &NetI2pUtilNativeBigInteger__nativeOk, &NetI2pUtilNativeBigInteger__nativeOk3, &NetI2pUtilNativeBigInteger__nativeCTOk, &NetI2pUtilNativeBigInteger__jbigiVersion, &NetI2pUtilNativeBigInteger__libGMPVersion, &NetI2pUtilNativeBigInteger__loadStatus, &NetI2pUtilNativeBigInteger__cpuModel, &NetI2pUtilNativeBigInteger__extractedResource, &NetI2pUtilNativeBigInteger__doLog, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC3, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATOM, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_CORE2, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_GEODE, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_NANO, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC32, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_SBR, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_HWL, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_BWL, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K10, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BULLDOZER, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PILEDRIVER, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_STEAMROLLER, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_EXCAVATOR, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BOBCAT, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_JAGUAR, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PPC, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A5, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A7, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A8, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A9, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15, &NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_NONE, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_PPC, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_ARM, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_VIA, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_ATHLON, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_GEODE, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_APU, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_BULLDOZER, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_ATOM, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_PENTIUM, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_CORE, &NetI2pUtilNativeBigInteger_JBIGI_COMPAT_MAP, "Ljava/util/HashMap<Ljava/lang/String;[Ljava/lang/String;>;", &NetI2pUtilNativeBigInteger__isWin, &NetI2pUtilNativeBigInteger__isOS2, &NetI2pUtilNativeBigInteger__isMac, &NetI2pUtilNativeBigInteger__isLinux, &NetI2pUtilNativeBigInteger__isKFreebsd, &NetI2pUtilNativeBigInteger__isFreebsd, &NetI2pUtilNativeBigInteger__isNetbsd, &NetI2pUtilNativeBigInteger__isOpenbsd, &NetI2pUtilNativeBigInteger__isSunos, &NetI2pUtilNativeBigInteger__isAndroid, &NetI2pUtilNativeBigInteger__is64, &NetI2pUtilNativeBigInteger__isX86, &NetI2pUtilNativeBigInteger__isArm, &NetI2pUtilNativeBigInteger__isPPC, &NetI2pUtilNativeBigInteger__libPrefix, &NetI2pUtilNativeBigInteger__libSuffix, &NetI2pUtilNativeBigInteger_sCPUType };
  static const J2ObjcClassInfo _NetI2pUtilNativeBigInteger = { "NativeBigInteger", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 45, 77, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilNativeBigInteger;
}

+ (void)initialize {
  if (self == [NetI2pUtilNativeBigInteger class]) {
    NetI2pUtilNativeBigInteger__doLog = (JavaLangSystem_getPropertyWithNSString_(@"jbigi.dontLog") == nil && NetI2pI2PAppContext_getCurrentContext() != nil && [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getCurrentContext())) isRouterContext]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_NONE, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:1 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_PPC, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PPC } count:1 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_ARM, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A9, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A8, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A7, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A5, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5 } count:8 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_VIA, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_NANO, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC32, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:5 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_ATHLON, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K10, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:7 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_GEODE, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_GEODE, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:5 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_APU, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_JAGUAR, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BOBCAT, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64 } count:3 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_AMD_BULLDOZER, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_EXCAVATOR, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_STEAMROLLER, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PILEDRIVER, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BULLDOZER, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:6 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_ATOM, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATOM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4 } count:7 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_PENTIUM, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:7 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_LIST_INTEL_CORE, [IOSObjectArray newArrayWithObjects:(id[]){ NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_BWL, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_HWL, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_SBR, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_CORE2, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3, NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 } count:8 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pUtilNativeBigInteger_JBIGI_COMPAT_MAP, new_NetI2pUtilNativeBigInteger_1_init());
    NetI2pUtilNativeBigInteger__isWin = NetI2pUtilSystemVersion_isWindows();
    NetI2pUtilNativeBigInteger__isOS2 = [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_hasPrefix:@"OS/2"];
    NetI2pUtilNativeBigInteger__isMac = NetI2pUtilSystemVersion_isMac();
    NetI2pUtilNativeBigInteger__isLinux = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"linux"];
    NetI2pUtilNativeBigInteger__isKFreebsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"kfreebsd"];
    NetI2pUtilNativeBigInteger__isFreebsd = ((!NetI2pUtilNativeBigInteger__isKFreebsd) && [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"freebsd"]);
    NetI2pUtilNativeBigInteger__isNetbsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"netbsd"];
    NetI2pUtilNativeBigInteger__isOpenbsd = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"openbsd"];
    NetI2pUtilNativeBigInteger__isSunos = [((NSString *) nil_chk([((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_contains:@"sunos"];
    NetI2pUtilNativeBigInteger__isAndroid = NetI2pUtilSystemVersion_isAndroid();
    NetI2pUtilNativeBigInteger__is64 = NetI2pUtilSystemVersion_is64Bit();
    NetI2pUtilNativeBigInteger__isX86 = NetI2pUtilSystemVersion_isX86();
    NetI2pUtilNativeBigInteger__isArm = NetI2pUtilSystemVersion_isARM();
    NetI2pUtilNativeBigInteger__isPPC = [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.arch"))) java_contains:@"ppc"];
    JreStrongAssign(&NetI2pUtilNativeBigInteger__libPrefix, (NetI2pUtilNativeBigInteger__isWin || NetI2pUtilNativeBigInteger__isOS2 ? @"" : @"lib"));
    JreStrongAssign(&NetI2pUtilNativeBigInteger__libSuffix, (NetI2pUtilNativeBigInteger__isWin || NetI2pUtilNativeBigInteger__isOS2 ? @".dll" : NetI2pUtilNativeBigInteger__isMac ? @".jnilib" : @".so"));
    {
      JreStrongAssign(&NetI2pUtilNativeBigInteger_sCPUType, NetI2pUtilNativeBigInteger_resolveCPUType());
      NetI2pUtilNativeBigInteger_loadNative();
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilNativeBigInteger)
  }
}

@end

NSString *NetI2pUtilNativeBigInteger_resolveCPUType() {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__isX86) {
    @try {
      id<FreenetSupportCPUInformationCPUInfo> c = FreenetSupportCPUInformationCPUID_getInfo();
      @try {
        JreStrongAssign(&NetI2pUtilNativeBigInteger__cpuModel, [((id<FreenetSupportCPUInformationCPUInfo>) nil_chk(c)) getCPUModelString]);
      }
      @catch (FreenetSupportCPUInformationUnknownCPUException *e) {
      }
      if ([FreenetSupportCPUInformationVIACPUInfo_class_() isInstance:c]) {
        id<FreenetSupportCPUInformationVIACPUInfo> viacpu = (id<FreenetSupportCPUInformationVIACPUInfo>) cast_check(c, FreenetSupportCPUInformationVIACPUInfo_class_());
        if ([viacpu IsNanoCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_NANO;
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC3;
      }
      else if ([FreenetSupportCPUInformationAMDCPUInfo_class_() isInstance:c]) {
        id<FreenetSupportCPUInformationAMDCPUInfo> amdcpu = (id<FreenetSupportCPUInformationAMDCPUInfo>) cast_check(c, FreenetSupportCPUInformationAMDCPUInfo_class_());
        if ([amdcpu IsExcavatorCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_EXCAVATOR;
        if ([amdcpu IsSteamrollerCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_STEAMROLLER;
        if ([amdcpu IsPiledriverCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PILEDRIVER;
        if ([amdcpu IsBulldozerCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BULLDOZER;
        if ([amdcpu IsJaguarCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_JAGUAR;
        if ([amdcpu IsBobcatCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BOBCAT;
        if ([amdcpu IsK10Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K10;
        if ([amdcpu IsAthlon64Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64;
        if ([amdcpu IsAthlonCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON;
        if ([amdcpu IsGeodeCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_GEODE;
        if ([amdcpu IsK6_3_Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3;
        if ([amdcpu IsK6_2_Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2;
        if ([amdcpu IsK6Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6;
      }
      else if ([FreenetSupportCPUInformationIntelCPUInfo_class_() isInstance:c]) {
        id<FreenetSupportCPUInformationIntelCPUInfo> intelcpu = (id<FreenetSupportCPUInformationIntelCPUInfo>) cast_check(c, FreenetSupportCPUInformationIntelCPUInfo_class_());
        if ([intelcpu IsBroadwellCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_BWL;
        if ([intelcpu IsHaswellCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_HWL;
        if ([intelcpu IsSandyCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_SBR;
        if ([intelcpu IsCoreiCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI;
        if ([intelcpu IsCore2Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_CORE2;
        if ([intelcpu IsAtomCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATOM;
        if ([intelcpu IsPentium4Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4;
        if ([intelcpu IsPentiumMCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM;
        if ([intelcpu IsPentium3Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3;
        if ([intelcpu IsPentium2Compatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2;
        if ([intelcpu IsPentiumMMXCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX;
        if ([intelcpu IsPentiumCompatible]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM;
      }
    }
    @catch (FreenetSupportCPUInformationUnknownCPUException *e) {
    }
    return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86;
  }
  else if (NetI2pUtilNativeBigInteger__isArm) {
    if (NetI2pUtilNativeBigInteger__isWin) return nil;
    id<JavaUtilMap> cpuinfo = NetI2pUtilNativeBigInteger_getCPUInfo();
    NSString *implementer = [((id<JavaUtilMap>) nil_chk(cpuinfo)) getWithId:@"cpu implementer"];
    NSString *part = [cpuinfo getWithId:@"cpu part"];
    if (implementer != nil && part != nil && [implementer java_contains:@"0x41"]) {
      if ([part java_contains:@"0xc0f"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
      }
      else if ([part java_contains:@"0xc0e"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
      }
      else if ([part java_contains:@"0xc0d"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15;
      }
      else if ([part java_contains:@"0xc09"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A9;
      }
      else if ([part java_contains:@"0xc08"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A8;
      }
      else if ([part java_contains:@"0xc07"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A7;
      }
      else if ([part java_contains:@"0xc05"]) {
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A5;
      }
    }
    NSString *arch = [cpuinfo getWithId:@"cpu architecture"];
    NSString *model = [cpuinfo getWithId:@"model name"];
    if (arch != nil) {
      if ([arch java_hasPrefix:@"7"]) {
        if (model != nil && [model java_contains:@"ARMv6"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6;
        return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7;
      }
      if ([arch java_hasPrefix:@"6"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6;
      if ([arch java_hasPrefix:@"5"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5;
    }
    if (model != nil) {
      if ([model java_contains:@"ARMv7"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7;
      if ([model java_contains:@"ARMv6"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6;
      if ([model java_contains:@"ARMv5"]) return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5;
    }
    return nil;
  }
  else if (NetI2pUtilNativeBigInteger__isPPC && !NetI2pUtilNativeBigInteger__isMac) {
    return NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PPC;
  }
  return nil;
}

JNIEXPORT jarray Java_net_i2p_util_NativeBigInteger_nativeModPow(JNIEnv *_env_, jclass _cls_, jarray base, jarray exponent, jarray modulus);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModPowWithByteArray_withByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *exponent, IOSByteArray *modulus) {
  return (IOSByteArray *) Java_net_i2p_util_NativeBigInteger_nativeModPow(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_(), base, exponent, modulus);
}

JNIEXPORT jarray Java_net_i2p_util_NativeBigInteger_nativeModPowCT(JNIEnv *_env_, jclass _cls_, jarray base, jarray exponent, jarray modulus);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModPowCTWithByteArray_withByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *exponent, IOSByteArray *modulus) {
  return (IOSByteArray *) Java_net_i2p_util_NativeBigInteger_nativeModPowCT(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_(), base, exponent, modulus);
}

JNIEXPORT jarray Java_net_i2p_util_NativeBigInteger_nativeModInverse(JNIEnv *_env_, jclass _cls_, jarray base, jarray d);

IOSByteArray *NetI2pUtilNativeBigInteger_nativeModInverseWithByteArray_withByteArray_(IOSByteArray *base, IOSByteArray *d) {
  return (IOSByteArray *) Java_net_i2p_util_NativeBigInteger_nativeModInverse(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_(), base, d);
}

JNIEXPORT jint Java_net_i2p_util_NativeBigInteger_nativeJbigiVersion(JNIEnv *_env_, jclass _cls_);

jint NetI2pUtilNativeBigInteger_nativeJbigiVersion() {
  return Java_net_i2p_util_NativeBigInteger_nativeJbigiVersion(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_());
}

JNIEXPORT jint Java_net_i2p_util_NativeBigInteger_nativeGMPMajorVersion(JNIEnv *_env_, jclass _cls_);

jint NetI2pUtilNativeBigInteger_nativeGMPMajorVersion() {
  return Java_net_i2p_util_NativeBigInteger_nativeGMPMajorVersion(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_());
}

JNIEXPORT jint Java_net_i2p_util_NativeBigInteger_nativeGMPMinorVersion(JNIEnv *_env_, jclass _cls_);

jint NetI2pUtilNativeBigInteger_nativeGMPMinorVersion() {
  return Java_net_i2p_util_NativeBigInteger_nativeGMPMinorVersion(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_());
}

JNIEXPORT jint Java_net_i2p_util_NativeBigInteger_nativeGMPPatchVersion(JNIEnv *_env_, jclass _cls_);

jint NetI2pUtilNativeBigInteger_nativeGMPPatchVersion() {
  return Java_net_i2p_util_NativeBigInteger_nativeGMPPatchVersion(&J2ObjC_JNIEnv, NetI2pUtilNativeBigInteger_class_());
}

jint NetI2pUtilNativeBigInteger_fetchJbigiVersion() {
  NetI2pUtilNativeBigInteger_initialize();
  if (!NetI2pUtilNativeBigInteger__nativeOk) return 0;
  @try {
    return NetI2pUtilNativeBigInteger_nativeJbigiVersion();
  }
  @catch (JavaLangThrowable *t) {
    return 2;
  }
}

void NetI2pUtilNativeBigInteger_setVersions() {
  NetI2pUtilNativeBigInteger_initialize();
  NetI2pUtilNativeBigInteger__jbigiVersion = NetI2pUtilNativeBigInteger_fetchJbigiVersion();
  NetI2pUtilNativeBigInteger__nativeOk3 = (NetI2pUtilNativeBigInteger__jbigiVersion > 2);
  if (NetI2pUtilNativeBigInteger__nativeOk3) {
    @try {
      jint maj = NetI2pUtilNativeBigInteger_nativeGMPMajorVersion();
      jint min = NetI2pUtilNativeBigInteger_nativeGMPMinorVersion();
      jint pat = NetI2pUtilNativeBigInteger_nativeGMPPatchVersion();
      JreStrongAssign(&NetI2pUtilNativeBigInteger__libGMPVersion, JreStrcat("ICICI", maj, '.', min, '.', pat));
      NetI2pUtilNativeBigInteger__nativeCTOk = (maj >= 5);
    }
    @catch (JavaLangThrowable *t) {
      NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(JreStrcat("$I$", @"jbigi version ", NetI2pUtilNativeBigInteger__jbigiVersion, @" but GMP version not available???"), t);
    }
  }
}

jint NetI2pUtilNativeBigInteger_getJbigiVersion() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__jbigiVersion;
}

NSString *NetI2pUtilNativeBigInteger_getLibGMPVersion() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__libGMPVersion;
}

void NetI2pUtilNativeBigInteger_initWithByteArray_(NetI2pUtilNativeBigInteger *self, IOSByteArray *val) {
  JavaMathBigInteger_initWithByteArray_(self, val);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithByteArray_(IOSByteArray *val) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithByteArray_, val)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithByteArray_(IOSByteArray *val) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithByteArray_, val)
}

void NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(NetI2pUtilNativeBigInteger *self, jint signum, IOSByteArray *magnitude) {
  JavaMathBigInteger_initWithInt_withByteArray_(self, signum, magnitude);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(jint signum, IOSByteArray *magnitude) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withByteArray_, signum, magnitude)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(jint signum, IOSByteArray *magnitude) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withByteArray_, signum, magnitude)
}

void NetI2pUtilNativeBigInteger_initWithInt_withInt_withJavaUtilRandom_(NetI2pUtilNativeBigInteger *self, jint bitlen, jint certainty, JavaUtilRandom *rnd) {
  JavaMathBigInteger_initWithInt_withInt_withJavaUtilRandom_(self, bitlen, certainty, rnd);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithInt_withInt_withJavaUtilRandom_(jint bitlen, jint certainty, JavaUtilRandom *rnd) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withInt_withJavaUtilRandom_, bitlen, certainty, rnd)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithInt_withInt_withJavaUtilRandom_(jint bitlen, jint certainty, JavaUtilRandom *rnd) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withInt_withJavaUtilRandom_, bitlen, certainty, rnd)
}

void NetI2pUtilNativeBigInteger_initWithInt_withJavaUtilRandom_(NetI2pUtilNativeBigInteger *self, jint numbits, JavaUtilRandom *rnd) {
  JavaMathBigInteger_initWithInt_withJavaUtilRandom_(self, numbits, rnd);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithInt_withJavaUtilRandom_(jint numbits, JavaUtilRandom *rnd) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withJavaUtilRandom_, numbits, rnd)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithInt_withJavaUtilRandom_(jint numbits, JavaUtilRandom *rnd) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithInt_withJavaUtilRandom_, numbits, rnd)
}

void NetI2pUtilNativeBigInteger_initWithNSString_(NetI2pUtilNativeBigInteger *self, NSString *val) {
  JavaMathBigInteger_initWithNSString_(self, val);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithNSString_(NSString *val) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithNSString_, val)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithNSString_(NSString *val) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithNSString_, val)
}

void NetI2pUtilNativeBigInteger_initWithNSString_withInt_(NetI2pUtilNativeBigInteger *self, NSString *val, jint radix) {
  JavaMathBigInteger_initWithNSString_withInt_(self, val, radix);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithNSString_withInt_(NSString *val, jint radix) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithNSString_withInt_, val, radix)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithNSString_withInt_(NSString *val, jint radix) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithNSString_withInt_, val, radix)
}

void NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(NetI2pUtilNativeBigInteger *self, JavaMathBigInteger *integer) {
  NetI2pUtilNativeBigInteger_initWithByteArray_(self, [((JavaMathBigInteger *) nil_chk(integer)) toByteArray]);
}

NetI2pUtilNativeBigInteger *new_NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *integer) {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger, initWithJavaMathBigInteger_, integer)
}

NetI2pUtilNativeBigInteger *create_NetI2pUtilNativeBigInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *integer) {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger, initWithJavaMathBigInteger_, integer)
}

jboolean NetI2pUtilNativeBigInteger_isNative() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__nativeOk;
}

NSString *NetI2pUtilNativeBigInteger_loadStatus() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__loadStatus;
}

NSString *NetI2pUtilNativeBigInteger_getLoadedResourceName() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__extractedResource;
}

NSString *NetI2pUtilNativeBigInteger_cpuType() {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger_sCPUType != nil) return NetI2pUtilNativeBigInteger_sCPUType;
  return @"unrecognized";
}

NSString *NetI2pUtilNativeBigInteger_cpuModel() {
  NetI2pUtilNativeBigInteger_initialize();
  return NetI2pUtilNativeBigInteger__cpuModel;
}

void NetI2pUtilNativeBigInteger_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilNativeBigInteger_initialize();
  NetI2pUtilNativeBigInteger__doLog = true;
  NSString *path = JavaLangSystem_getPropertyWithNSString_(@"java.library.path");
  NSString *name = JreStrcat("$$$", NetI2pUtilNativeBigInteger__libPrefix, @"jbigi", NetI2pUtilNativeBigInteger__libSuffix);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Native library search path: ", path)];
  if (NetI2pUtilNativeBigInteger__nativeOk) {
    NSString *sep = JavaLangSystem_getPropertyWithNSString_(@"path.separator");
    IOSObjectArray *paths = NetI2pDataDataHelper_splitWithNSString_withNSString_(path, sep);
    {
      IOSObjectArray *a__ = paths;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *p = *b__++;
        JavaIoFile *f = create_JavaIoFile_initWithNSString_withNSString_(p, name);
        if ([f exists]) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Found native library: ", f)];
          break;
        }
      }
    }
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Failed to load native library. Please verify the existence of the ", name, @" file in the library path, or set -Djava.library.path=. in the command line")];
  }
  jboolean nativeOnly = ((IOSObjectArray *) nil_chk(args))->size_ > 0 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-n"];
  if (nativeOnly && !NetI2pUtilNativeBigInteger__nativeOk) {
    JavaLangSystem_exitWithInt_(1);
  }
  if (NetI2pUtilNativeBigInteger__nativeOk) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @"JBigi Version: ", NetI2pUtilNativeBigInteger__jbigiVersion, @" GMP Version: ", NetI2pUtilNativeBigInteger__libGMPVersion)];
    if (NetI2pUtilNativeBigInteger__extractedResource != nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Using native resource: ", NetI2pUtilNativeBigInteger__extractedResource)];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"DEBUG: Warming up the random number generator..."];
  JavaSecuritySecureRandom *rand = NetI2pUtilRandomSource_getInstance();
  [((JavaSecuritySecureRandom *) nil_chk(rand)) nextBoolean];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"DEBUG: Random number generator warmed up"];
  NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(100, 1, nativeOnly);
  if (NetI2pUtilNativeBigInteger__nativeOk3) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ModPowCT test:"];
    NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(100, 2, nativeOnly);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ModInverse test:"];
    NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(10000, 3, nativeOnly);
  }
}

void NetI2pUtilNativeBigInteger_runModPowTestWithInt_withInt_withBoolean_(jint numRuns, jint mode, jboolean nativeOnly) {
  NetI2pUtilNativeBigInteger_initialize();
  JavaSecuritySecureRandom *rand = NetI2pUtilRandomSource_getInstance();
  IOSByteArray *sampleGenerator = [((NetI2pUtilNativeBigInteger *) nil_chk(JreLoadStatic(NetI2pCryptoCryptoConstants, elgg))) toByteArray];
  IOSByteArray *samplePrime = [((NetI2pUtilNativeBigInteger *) nil_chk(JreLoadStatic(NetI2pCryptoCryptoConstants, elgp))) toByteArray];
  JavaMathBigInteger *jg = create_JavaMathBigInteger_initWithByteArray_(sampleGenerator);
  NetI2pUtilNativeBigInteger *ng = JreLoadStatic(NetI2pCryptoCryptoConstants, elgg);
  JavaMathBigInteger *jp = create_JavaMathBigInteger_initWithByteArray_(samplePrime);
  jlong totalTime = 0;
  jlong javaTime = 0;
  jint runsProcessed = 0;
  for (jint i = 0; i < 1000; i++) {
    JavaMathBigInteger *bi;
    do {
      bi = create_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(16, rand);
    }
    while ([bi signum] == 0);
    if (mode == 1) [jg modPowWithJavaMathBigInteger:bi withJavaMathBigInteger:jp];
    else if (mode == 2) [ng modPowCTWithJavaMathBigInteger:bi withJavaMathBigInteger:jp];
    else [bi modInverseWithJavaMathBigInteger:jp];
  }
  JavaMathBigInteger *myValue = nil;
  JavaMathBigInteger *jval;
  NetI2pUtilNativeBigInteger *g = JreLoadStatic(NetI2pCryptoCryptoConstants, elgg);
  NetI2pUtilNativeBigInteger *p = JreLoadStatic(NetI2pCryptoCryptoConstants, elgp);
  jint numBits = (mode == 3) ? 1060 : 2048;
  for (runsProcessed = 0; runsProcessed < numRuns; runsProcessed++) {
    JavaMathBigInteger *bi;
    do {
      bi = create_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(numBits, rand);
    }
    while ([bi signum] == 0);
    NetI2pUtilNativeBigInteger *k = create_NetI2pUtilNativeBigInteger_initWithInt_withByteArray_(1, [bi toByteArray]);
    jlong beforeModPow = JavaLangSystem_nanoTime();
    if (NetI2pUtilNativeBigInteger__nativeOk) {
      if (mode == 1) myValue = [g modPowWithJavaMathBigInteger:k withJavaMathBigInteger:p];
      else if (mode == 2) myValue = [g modPowCTWithJavaMathBigInteger:bi withJavaMathBigInteger:jp];
      else myValue = [k modInverseWithJavaMathBigInteger:p];
    }
    jlong afterModPow = JavaLangSystem_nanoTime();
    totalTime += (afterModPow - beforeModPow);
    if (!nativeOnly) {
      if (mode != 3) jval = [jg modPowWithJavaMathBigInteger:bi withJavaMathBigInteger:jp];
      else jval = [bi modInverseWithJavaMathBigInteger:jp];
      jlong afterJavaModPow = JavaLangSystem_nanoTime();
      javaTime += (afterJavaModPow - afterModPow);
      if (NetI2pUtilNativeBigInteger__nativeOk && ![((JavaMathBigInteger *) nil_chk(myValue)) isEqual:jval]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"ERROR: [", runsProcessed, @"]\tnative modPow != java modPow")];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"ERROR: native modPow value: ", [((JavaMathBigInteger *) nil_chk(myValue)) description])];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"ERROR: java modPow value: ", [((JavaMathBigInteger *) nil_chk(jval)) description])];
        break;
      }
    }
  }
  jdouble dtotal = totalTime / 1000000.0f;
  jdouble djava = javaTime / 1000000.0f;
  if (NetI2pUtilNativeBigInteger__nativeOk) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"INFO: run time: %.3f ms (%.3f ms each)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(dtotal), JavaLangDouble_valueOfWithDouble_(dtotal / (runsProcessed + 1)) } count:2 type:NSObject_class_()])];
  if (numRuns == runsProcessed) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"INFO: ", runsProcessed, @" runs complete without any errors")];
  else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"ERROR: ", runsProcessed, @" runs until we got an error")];
  if (NetI2pUtilNativeBigInteger__nativeOk) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Native run time: \t%9.3f ms (%7.3f ms each)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(dtotal), JavaLangDouble_valueOfWithDouble_(dtotal / (runsProcessed + 1)) } count:2 type:NSObject_class_()])];
    if (!nativeOnly) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Java run time:   \t%9.3f ms (%7.3f ms each)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(djava), JavaLangDouble_valueOfWithDouble_(djava / (runsProcessed + 1)) } count:2 type:NSObject_class_()])];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Native = %.3f%% of pure Java time", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(dtotal * 100.0 / djava) } count:1 type:NSObject_class_()])];
      if (dtotal < djava) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Native is BETTER by a factor of %.3f -- YAY!", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(djava / dtotal) } count:1 type:NSObject_class_()])];
      else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Native is WORSE by a factor of %.3f -- BOO!", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(dtotal / djava) } count:1 type:NSObject_class_()])];
    }
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"java run time: \t%.3f ms (%.3f ms each)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(djava), JavaLangDouble_valueOfWithDouble_(djava / (runsProcessed + 1)) } count:2 type:NSObject_class_()])];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"However, we couldn't load the native library, so this doesn't test much"];
  }
}

void NetI2pUtilNativeBigInteger_loadNative() {
  NetI2pUtilNativeBigInteger_initialize();
  @try {
    NSString *wantedProp = JavaLangSystem_getPropertyWithNSString_withNSString_(@"jbigi.enable", @"true");
    jboolean wantNative = JavaLangBoolean_parseBooleanWithNSString_(wantedProp);
    if (wantNative) {
      NetI2pUtilNativeBigInteger_debugWithNSString_(@"trying loadGeneric");
      jboolean loaded = NetI2pUtilNativeBigInteger_loadGenericWithNSString_(@"jbigi");
      if (loaded) {
        NetI2pUtilNativeBigInteger__nativeOk = true;
        NSString *s = [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getPropertyWithNSString:@"jbigi.loadedResource"];
        if (s != nil) NetI2pUtilNativeBigInteger_infoWithNSString_(JreStrcat("$$$", @"Locally optimized library ", s, @" loaded from file"));
        else NetI2pUtilNativeBigInteger_infoWithNSString_(@"Locally optimized native BigInteger library loaded from file");
      }
      else {
        id<JavaUtilList> toTry = NetI2pUtilNativeBigInteger_getResourceList();
        NetI2pUtilNativeBigInteger_debugWithNSString_(JreStrcat("$@", @"loadResource list to try is: ", toTry));
        for (NSString * __strong s in nil_chk(toTry)) {
          NetI2pUtilNativeBigInteger_debugWithNSString_(JreStrcat("$$", @"Trying to load resource ", s));
          if (NetI2pUtilNativeBigInteger_loadFromResourceWithNSString_(s)) {
            NetI2pUtilNativeBigInteger__nativeOk = true;
            JreStrongAssign(&NetI2pUtilNativeBigInteger__extractedResource, s);
            NetI2pUtilNativeBigInteger_infoWithNSString_(JreStrcat("$$$", @"Native BigInteger library ", s, @" loaded from resource"));
            break;
          }
        }
      }
    }
    if (!NetI2pUtilNativeBigInteger__nativeOk) {
      NetI2pUtilNativeBigInteger_warnWithNSString_(@"Native BigInteger library jbigi not loaded - using pure Java - poor performance may result - see http://i2p-projekt.i2p/jbigi for help");
    }
    else {
      NetI2pUtilNativeBigInteger_setVersions();
    }
  }
  @catch (JavaLangException *e) {
    NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(@"Native BigInteger library jbigi not loaded, using pure java", e);
  }
}

void NetI2pUtilNativeBigInteger_debugWithNSString_(NSString *s) {
  NetI2pUtilNativeBigInteger_initialize();
  [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilNativeBigInteger_class_()])) debugWithNSString:s];
}

void NetI2pUtilNativeBigInteger_infoWithNSString_(NSString *s) {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__doLog) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"INFO: ", s)];
  [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilNativeBigInteger_class_()])) infoWithNSString:s];
  JreStrongAssign(&NetI2pUtilNativeBigInteger__loadStatus, s);
}

void NetI2pUtilNativeBigInteger_warnWithNSString_(NSString *s) {
  NetI2pUtilNativeBigInteger_initialize();
  NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(s, nil);
}

void NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t) {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__doLog) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"WARNING: ", s)];
    if (t != nil) [t printStackTrace];
  }
  [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilNativeBigInteger_class_()])) warnWithNSString:s withJavaLangThrowable:t];
  if (t != nil) JreStrongAssign(&NetI2pUtilNativeBigInteger__loadStatus, JreStrcat("$C@", s, ' ', t));
  else JreStrongAssign(&NetI2pUtilNativeBigInteger__loadStatus, s);
}

void NetI2pUtilNativeBigInteger_errorWithNSString_(NSString *s) {
  NetI2pUtilNativeBigInteger_initialize();
  NetI2pUtilNativeBigInteger_errorWithNSString_withJavaLangThrowable_(s, nil);
}

void NetI2pUtilNativeBigInteger_errorWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *t) {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__doLog) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"ERROR: ", s)];
    if (t != nil) [t printStackTrace];
  }
  [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilNativeBigInteger_class_()])) errorWithNSString:s withJavaLangThrowable:t];
  if (t != nil) JreStrongAssign(&NetI2pUtilNativeBigInteger__loadStatus, JreStrcat("$C@", s, ' ', t));
  else JreStrongAssign(&NetI2pUtilNativeBigInteger__loadStatus, s);
}

jboolean NetI2pUtilNativeBigInteger_loadGenericWithNSString_(NSString *name) {
  NetI2pUtilNativeBigInteger_initialize();
  @try {
    if (name == nil) return false;
    JavaLangSystem_loadLibraryWithNSString_(name);
    return true;
  }
  @catch (JavaLangUnsatisfiedLinkError *ule) {
    if (NetI2pUtilNativeBigInteger__isAndroid) {
      NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(@"jbigi loadLibrary() fail", ule);
    }
    return false;
  }
}

jboolean NetI2pUtilNativeBigInteger_loadFromResourceWithNSString_(NSString *resourceName) {
  NetI2pUtilNativeBigInteger_initialize();
  if (resourceName == nil) return false;
  JavaNetURL *resource = JavaLangClassLoader_getSystemResourceWithNSString_(resourceName);
  if (resource == nil) {
    NetI2pUtilNativeBigInteger_infoWithNSString_(JreStrcat("$$$", @"Resource name [", resourceName, @"] was not found"));
    return false;
  }
  JavaIoInputStream *libStream = nil;
  JavaIoFile *outFile = nil;
  JavaIoFileOutputStream *fos = nil;
  NSString *filename = JreStrcat("$$$", NetI2pUtilNativeBigInteger__libPrefix, @"jbigi", NetI2pUtilNativeBigInteger__libSuffix);
  @try {
    libStream = [resource openStream];
    outFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getTempDir], filename);
    fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(outFile);
    NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(libStream, fos);
    [fos close];
    fos = nil;
    JavaLangSystem_load__WithNSString_([outFile getAbsolutePath]);
    NetI2pUtilNativeBigInteger_infoWithNSString_(JreStrcat("$@", @"Loaded library: ", resource));
  }
  @catch (JavaLangUnsatisfiedLinkError *ule) {
    NetI2pUtilNativeBigInteger_warnWithNSString_(JreStrcat("$$$", @"Failed to load the resource ", resourceName, @" - not a valid library for this platform"));
    if (outFile != nil) [outFile delete__];
    return false;
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pUtilNativeBigInteger_warnWithNSString_(JreStrcat("$@", @"Problem writing out the temporary native library data: ", ioe));
    if (outFile != nil) [outFile delete__];
    return false;
  }
  @finally {
    if (libStream != nil) @try {
      [libStream close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    if (fos != nil) {
      @try {
        [fos close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  JavaIoFile *newFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getBaseDir], filename);
  NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(outFile, newFile, false, true);
  return true;
}

id<JavaUtilList> NetI2pUtilNativeBigInteger_getResourceList() {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__isAndroid) return JavaUtilCollections_emptyList();
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(20);
  NSString *primary = NetI2pUtilNativeBigInteger_getMiddleName2WithBoolean_(true);
  IOSObjectArray *compatList = [((JavaUtilHashMap *) nil_chk(NetI2pUtilNativeBigInteger_JBIGI_COMPAT_MAP)) getWithId:primary];
  if (primary != nil && compatList == nil) {
    NetI2pUtilNativeBigInteger_errorWithNSString_(JreStrcat("$$$", @"A bug relating to how jbigi is loaded for \"", primary, @"\" has been spotted"));
  }
  if (primary != nil && compatList != nil) {
    jint i = 0;
    for (; i < compatList->size_; ++i) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(compatList, i))) isEqual:primary]) {
        break;
      }
    }
    for (; i < compatList->size_; ++i) {
      NSString *middle = NetI2pUtilNativeBigInteger_getMiddleName1();
      if (NetI2pUtilNativeBigInteger__is64) {
        [rv addWithId:JreStrcat("$$$$$", NetI2pUtilNativeBigInteger__libPrefix, middle, IOSObjectArray_Get(compatList, i), @"_64", NetI2pUtilNativeBigInteger__libSuffix)];
      }
      [rv addWithId:JreStrcat("$$$$", NetI2pUtilNativeBigInteger__libPrefix, middle, IOSObjectArray_Get(compatList, i), NetI2pUtilNativeBigInteger__libSuffix)];
    }
    if ([rv isEmpty]) {
      NetI2pUtilNativeBigInteger_errorWithNSString_(JreStrcat("$$$$$$C", @"Couldn't find the arch \"", primary, @"\" in its compatibility map \"", primary, @": ", JavaUtilArrays_toStringWithNSObjectArray_(compatList), '"'));
    }
  }
  return rv;
}

id<JavaUtilMap> NetI2pUtilNativeBigInteger_getCPUInfo() {
  NetI2pUtilNativeBigInteger_initialize();
  id<JavaUtilMap> rv = create_JavaUtilHashMap_initWithInt_(32);
  JavaIoBufferedReader *in = nil;
  @try {
    in = create_JavaIoBufferedReader_initWithJavaIoReader_withInt_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(create_JavaIoFileInputStream_initWithNSString_(@"/proc/cpuinfo"), @"ISO-8859-1"), 4096);
    NSString *line = nil;
    while ((line = [in readLine]) != nil) {
      IOSObjectArray *parts = NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(line, @":", 2);
      if (((IOSObjectArray *) nil_chk(parts))->size_ < 2) continue;
      NSString *key = [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) java_trim])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
      if (![rv containsKeyWithId:key]) [rv putWithId:key withId:[((NSString *) nil_chk(IOSObjectArray_Get(parts, 1))) java_trim]];
    }
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pUtilNativeBigInteger_warnWithNSString_withJavaLangThrowable_(@"Unable to read /proc/cpuinfo", ioe);
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  return rv;
}

NSString *NetI2pUtilNativeBigInteger_getMiddleName2WithBoolean_(jboolean optimized) {
  NetI2pUtilNativeBigInteger_initialize();
  NSString *sAppend;
  if (optimized) {
    if (NetI2pUtilNativeBigInteger_sCPUType == nil) return nil;
    if ([NetI2pUtilNativeBigInteger_sCPUType isEqual:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3] && !NetI2pUtilNativeBigInteger__isWin) sAppend = NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2;
    else if ([NetI2pUtilNativeBigInteger_sCPUType isEqual:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2] && NetI2pUtilNativeBigInteger__isSunos && NetI2pUtilNativeBigInteger__isX86) sAppend = NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3;
    else if ([NetI2pUtilNativeBigInteger_sCPUType isEqual:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC32]) sAppend = NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3;
    else sAppend = NetI2pUtilNativeBigInteger_sCPUType;
  }
  else {
    sAppend = @"none";
  }
  return sAppend;
}

NSString *NetI2pUtilNativeBigInteger_getMiddleName1() {
  NetI2pUtilNativeBigInteger_initialize();
  if (NetI2pUtilNativeBigInteger__isWin) return @"jbigi-windows-";
  if (NetI2pUtilNativeBigInteger__isKFreebsd) return @"jbigi-kfreebsd-";
  if (NetI2pUtilNativeBigInteger__isFreebsd) return @"jbigi-freebsd-";
  if (NetI2pUtilNativeBigInteger__isNetbsd) return @"jbigi-netbsd-";
  if (NetI2pUtilNativeBigInteger__isOpenbsd) return @"jbigi-openbsd-";
  if (NetI2pUtilNativeBigInteger__isMac) return @"jbigi-osx-";
  if (NetI2pUtilNativeBigInteger__isOS2) return @"jbigi-os2-";
  if (NetI2pUtilNativeBigInteger__isSunos) return @"jbigi-solaris-";
  return @"jbigi-linux-";
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilNativeBigInteger)

@implementation NetI2pUtilNativeBigInteger_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilNativeBigInteger_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetI2pUtilNativeBigInteger;", "Ljava/util/HashMap<Ljava/lang/String;[Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pUtilNativeBigInteger_1 = { "", "net.i2p.util", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_NetI2pUtilNativeBigInteger_1;
}

@end

void NetI2pUtilNativeBigInteger_1_init(NetI2pUtilNativeBigInteger_1 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_X86 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_NONE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PPC withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_PPC)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV5 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV6 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_ARMV7 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A5 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A7 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A8 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A9 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ARM_CORTEX_A15 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_ARM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC3 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_VIA)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_VIAC32 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_VIA)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_NANO withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_VIA)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_2 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K6_3 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATHLON64 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_K10 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_ATHLON)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_GEODE withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_GEODE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BOBCAT withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_APU)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_JAGUAR withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_APU)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_BULLDOZER withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_BULLDOZER)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PILEDRIVER withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_BULLDOZER)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_STEAMROLLER withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_BULLDOZER)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_EXCAVATOR withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_AMD_BULLDOZER)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_ATOM withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_ATOM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMMMX withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM2 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM4 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_PENTIUM)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUM3 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_PENTIUMM withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_CORE2 withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_SBR withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_HWL withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
    [self putWithId:NetI2pUtilNativeBigInteger_JBIGI_OPTIMIZATION_COREI_BWL withId:JreLoadStatic(NetI2pUtilNativeBigInteger, JBIGI_COMPAT_LIST_INTEL_CORE)];
  }
}

NetI2pUtilNativeBigInteger_1 *new_NetI2pUtilNativeBigInteger_1_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilNativeBigInteger_1, init)
}

NetI2pUtilNativeBigInteger_1 *create_NetI2pUtilNativeBigInteger_1_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilNativeBigInteger_1, init)
}
