//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Translate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilTranslate")
#ifdef RESTRICT_NetI2pUtilTranslate
#define INCLUDE_ALL_NetI2pUtilTranslate 0
#else
#define INCLUDE_ALL_NetI2pUtilTranslate 1
#endif
#undef RESTRICT_NetI2pUtilTranslate

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilTranslate_) && (INCLUDE_ALL_NetI2pUtilTranslate || defined(INCLUDE_NetI2pUtilTranslate))
#define NetI2pUtilTranslate_

@class IOSObjectArray;
@class NetI2pI2PAppContext;

@interface NetI2pUtilTranslate : NSObject
@property (readonly, copy, class) NSString *PROP_LANG NS_SWIFT_NAME(PROP_LANG);
@property (readonly, copy, class) NSString *PROP_COUNTRY NS_SWIFT_NAME(PROP_COUNTRY);

+ (NSString *)PROP_LANG;

+ (NSString *)PROP_COUNTRY;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)clearCache;

+ (NSString *)getCountryWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (NSString *)getDisplayLanguageWithNSString:(NSString *)langCode
                                withNSString:(NSString *)dflt
                     withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                withNSString:(NSString *)bun;

+ (NSString *)getLanguageWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (NSString *)getStringWithInt:(jint)n
                  withNSString:(NSString *)s
                  withNSString:(NSString *)p
       withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                  withNSString:(NSString *)bun;

+ (NSString *)getStringWithNSString:(NSString *)key
            withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                       withNSString:(NSString *)bun;

+ (NSString *)getStringWithNSString:(NSString *)s
            withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                       withNSString:(NSString *)bun
                  withNSObjectArray:(IOSObjectArray *)oArray;

+ (NSString *)getStringWithNSString:(NSString *)s
                             withId:(id)o
            withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                       withNSString:(NSString *)bun;

+ (NSString *)getStringWithNSString:(NSString *)s
                             withId:(id)o
                             withId:(id)o2
            withNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                       withNSString:(NSString *)bun;

+ (void)setLanguageWithNSString:(NSString *)lang
                   withNSString:(NSString *)country;

@end

J2OBJC_STATIC_INIT(NetI2pUtilTranslate)

inline NSString *NetI2pUtilTranslate_get_PROP_LANG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_PROP_LANG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilTranslate, PROP_LANG, NSString *)

inline NSString *NetI2pUtilTranslate_get_PROP_COUNTRY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_PROP_COUNTRY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilTranslate, PROP_COUNTRY, NSString *)

FOUNDATION_EXPORT void NetI2pUtilTranslate_init(NetI2pUtilTranslate *self);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(NSString *key, NetI2pI2PAppContext *ctx, NSString *bun);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getStringWithNSString_withId_withNetI2pI2PAppContext_withNSString_(NSString *s, id o, NetI2pI2PAppContext *ctx, NSString *bun);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getStringWithNSString_withId_withId_withNetI2pI2PAppContext_withNSString_(NSString *s, id o, id o2, NetI2pI2PAppContext *ctx, NSString *bun);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_withNSObjectArray_(NSString *s, NetI2pI2PAppContext *ctx, NSString *bun, IOSObjectArray *oArray);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getStringWithInt_withNSString_withNSString_withNetI2pI2PAppContext_withNSString_(jint n, NSString *s, NSString *p, NetI2pI2PAppContext *ctx, NSString *bun);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getLanguageWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getCountryWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT void NetI2pUtilTranslate_setLanguageWithNSString_withNSString_(NSString *lang, NSString *country);

FOUNDATION_EXPORT NSString *NetI2pUtilTranslate_getDisplayLanguageWithNSString_withNSString_withNetI2pI2PAppContext_withNSString_(NSString *langCode, NSString *dflt, NetI2pI2PAppContext *ctx, NSString *bun);

FOUNDATION_EXPORT void NetI2pUtilTranslate_clearCache(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilTranslate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilTranslate")
