//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SimpleScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleScheduler.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilSimpleScheduler () {
 @public
  NetI2pUtilLog *_log_;
  JavaUtilConcurrentScheduledThreadPoolExecutor *_executor_;
  NSString *_name_;
  jint _count_;
  jint _threads_;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name;

- (NSString *)debug;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleScheduler, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleScheduler, _executor_, JavaUtilConcurrentScheduledThreadPoolExecutor *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleScheduler, _name_, NSString *)

inline jint NetI2pUtilSimpleScheduler_get_MIN_THREADS(void);
#define NetI2pUtilSimpleScheduler_MIN_THREADS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleScheduler, MIN_THREADS, jint)

inline jint NetI2pUtilSimpleScheduler_get_MAX_THREADS(void);
#define NetI2pUtilSimpleScheduler_MAX_THREADS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleScheduler, MAX_THREADS, jint)

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pUtilSimpleScheduler *self, NetI2pI2PAppContext *context, NSString *name);

__attribute__((unused)) static NetI2pUtilSimpleScheduler *new_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleScheduler *create_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name);

__attribute__((unused)) static NSString *NetI2pUtilSimpleScheduler_debug(NetI2pUtilSimpleScheduler *self);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$3(void);

@interface NetI2pUtilSimpleScheduler_Shutdown : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilSimpleScheduler *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleScheduler_Shutdown)

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler_Shutdown *self, NetI2pUtilSimpleScheduler *outer$);

__attribute__((unused)) static NetI2pUtilSimpleScheduler_Shutdown *new_NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleScheduler_Shutdown *create_NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleScheduler_Shutdown)

@interface NetI2pUtilSimpleScheduler_CustomThreadFactory : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  NetI2pUtilSimpleScheduler *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleScheduler_CustomThreadFactory)

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler_CustomThreadFactory *self, NetI2pUtilSimpleScheduler *outer$);

__attribute__((unused)) static NetI2pUtilSimpleScheduler_CustomThreadFactory *new_NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleScheduler_CustomThreadFactory *create_NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleScheduler_CustomThreadFactory)

@interface NetI2pUtilSimpleScheduler_RunnableEvent : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilSimpleScheduler *this$0_;
  id<NetI2pUtilSimpleTimer_TimedEvent> _timedEvent_;
  jlong _scheduled_;
}

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$
             withNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)t
                                         withLong:(jlong)timeoutMs;

- (void)schedule;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleScheduler_RunnableEvent)

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleScheduler_RunnableEvent, _timedEvent_, id<NetI2pUtilSimpleTimer_TimedEvent>)

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler_RunnableEvent *self, NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs);

__attribute__((unused)) static NetI2pUtilSimpleScheduler_RunnableEvent *new_NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleScheduler_RunnableEvent *create_NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs);

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_RunnableEvent_run(NetI2pUtilSimpleScheduler_RunnableEvent *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleScheduler_RunnableEvent)

@interface NetI2pUtilSimpleScheduler_PeriodicRunnableEvent : NetI2pUtilSimpleScheduler_RunnableEvent {
 @public
  NetI2pUtilSimpleScheduler *this$1_;
  jlong _timeoutMs_;
  jlong _initialDelay_;
}

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$
             withNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)t
                                         withLong:(jlong)initialDelay
                                         withLong:(jlong)timeoutMs;

- (void)schedule;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent)

__attribute__((unused)) static void NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *self, NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs);

__attribute__((unused)) static NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *new_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *create_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent)

@implementation NetI2pUtilSimpleScheduler

+ (NetI2pUtilSimpleScheduler *)getInstance {
  return NetI2pUtilSimpleScheduler_getInstance();
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name {
  NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(self, context, name);
  return self;
}

- (void)stop {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(_executor_)) setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:create_JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy_init()];
  [_executor_ shutdownNow];
}

- (void)addEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                            withLong:(jlong)timeoutMs {
  if (event == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"addEvent null");
  NetI2pUtilSimpleScheduler_RunnableEvent *re = create_NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(self, event, timeoutMs);
  [re schedule];
}

- (void)addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                                    withLong:(jlong)timeoutMs {
  [self addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:event withLong:timeoutMs withLong:timeoutMs];
}

- (void)addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                                    withLong:(jlong)initialDelay
                                                    withLong:(jlong)timeoutMs {
  if (event == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"addEvent null");
  NetI2pUtilSimpleScheduler_RunnableEvent *re = create_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(self, event, initialDelay, timeoutMs);
  [re schedule];
}

- (NSString *)debug {
  return NetI2pUtilSimpleScheduler_debug(self);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_executor_);
  RELEASE_(_name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilSimpleScheduler;", 0x9, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, 2, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withNSString:);
  methods[3].selector = @selector(stop);
  methods[4].selector = @selector(addEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[5].selector = @selector(addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[6].selector = @selector(addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:withLong:);
  methods[7].selector = @selector(debug);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleScheduler_MIN_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleScheduler_MAX_THREADS, 0x1a, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_executor_", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_threads_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&NetI2pUtilSimpleScheduler__Annotations$0, "LNetI2pI2PAppContext;", (void *)&NetI2pUtilSimpleScheduler__Annotations$1, "LNetI2pI2PAppContext;LNSString;", (void *)&NetI2pUtilSimpleScheduler__Annotations$2, "addEvent", "LNetI2pUtilSimpleTimer_TimedEvent;J", "addPeriodicEvent", "LNetI2pUtilSimpleTimer_TimedEvent;JJ", "LNetI2pUtilSimpleScheduler_Shutdown;LNetI2pUtilSimpleScheduler_CustomThreadFactory;LNetI2pUtilSimpleScheduler_RunnableEvent;LNetI2pUtilSimpleScheduler_PeriodicRunnableEvent;", (void *)&NetI2pUtilSimpleScheduler__Annotations$3 };
  static const J2ObjcClassInfo _NetI2pUtilSimpleScheduler = { "SimpleScheduler", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 8, 7, -1, 9, -1, -1, 10 };
  return &_NetI2pUtilSimpleScheduler;
}

@end

NetI2pUtilSimpleScheduler *NetI2pUtilSimpleScheduler_getInstance() {
  NetI2pUtilSimpleScheduler_initialize();
  return [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) simpleScheduler];
}

void NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_(NetI2pUtilSimpleScheduler *self, NetI2pI2PAppContext *context) {
  NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(self, context, @"SimpleScheduler");
}

NetI2pUtilSimpleScheduler *new_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilSimpleScheduler *create_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pUtilSimpleScheduler *self, NetI2pI2PAppContext *context, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pUtilSimpleScheduler_class_()]);
  JreStrongAssign(&self->_name_, name);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  self->_threads_ = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pUtilSimpleScheduler_MIN_THREADS, JavaLangMath_minWithLong_withLong_(NetI2pUtilSimpleScheduler_MAX_THREADS, 1 + (maxMemory / (32 * 1024 * 1024))));
  JreStrongAssignAndConsume(&self->_executor_, new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(self->_threads_, create_NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(self)));
  [self->_executor_ prestartAllCoreThreads];
  [context addShutdownTaskWithJavaLangRunnable:create_NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(self)];
}

NetI2pUtilSimpleScheduler *new_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

NetI2pUtilSimpleScheduler *create_NetI2pUtilSimpleScheduler_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

NSString *NetI2pUtilSimpleScheduler_debug(NetI2pUtilSimpleScheduler *self) {
  return JreStrcat("$$$ICI$J$I", @" Pool: ", self->_name_, @" Active: ", [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->_executor_)) getActiveCount], '/', [self->_executor_ getPoolSize], @" Completed: ", [self->_executor_ getCompletedTaskCount], @" Queued: ", [((id<JavaUtilConcurrentBlockingQueue>) nil_chk([self->_executor_ getQueue])) size]);
}

IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilSimpleScheduler__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleScheduler)

@implementation NetI2pUtilSimpleScheduler_Shutdown

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$ {
  NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ stop];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleScheduler:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleScheduler;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleScheduler_Shutdown = { "Shutdown", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleScheduler_Shutdown;
}

@end

void NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler_Shutdown *self, NetI2pUtilSimpleScheduler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleScheduler_Shutdown *new_NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler_Shutdown, initWithNetI2pUtilSimpleScheduler_, outer$)
}

NetI2pUtilSimpleScheduler_Shutdown *create_NetI2pUtilSimpleScheduler_Shutdown_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler_Shutdown, initWithNetI2pUtilSimpleScheduler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleScheduler_Shutdown)

@implementation NetI2pUtilSimpleScheduler_CustomThreadFactory

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$ {
  NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(self, outer$);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *rv = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(JavaUtilConcurrentExecutors_defaultThreadFactory())) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(rv)) setNameWithNSString:JreStrcat("$CICI", this$0_->_name_, ' ', (++this$0_->_count_), '/', this$0_->_threads_)];
  [rv setDaemonWithBoolean:true];
  return rv;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleScheduler:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LNetI2pUtilSimpleScheduler;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleScheduler_CustomThreadFactory = { "CustomThreadFactory", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleScheduler_CustomThreadFactory;
}

@end

void NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler_CustomThreadFactory *self, NetI2pUtilSimpleScheduler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleScheduler_CustomThreadFactory *new_NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler_CustomThreadFactory, initWithNetI2pUtilSimpleScheduler_, outer$)
}

NetI2pUtilSimpleScheduler_CustomThreadFactory *create_NetI2pUtilSimpleScheduler_CustomThreadFactory_initWithNetI2pUtilSimpleScheduler_(NetI2pUtilSimpleScheduler *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler_CustomThreadFactory, initWithNetI2pUtilSimpleScheduler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleScheduler_CustomThreadFactory)

@implementation NetI2pUtilSimpleScheduler_RunnableEvent

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$
             withNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)t
                                         withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(self, outer$, t, timeoutMs);
  return self;
}

- (void)schedule {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(this$0_->_executor_)) scheduleWithJavaLangRunnable:self withLong:_scheduled_ - JavaLangSystem_currentTimeMillis() withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)run {
  NetI2pUtilSimpleScheduler_RunnableEvent_run(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_timedEvent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleScheduler:withNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[1].selector = @selector(schedule);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_timedEvent_", "LNetI2pUtilSimpleTimer_TimedEvent;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_scheduled_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer_TimedEvent;J", "LNetI2pUtilSimpleScheduler;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleScheduler_RunnableEvent = { "RunnableEvent", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleScheduler_RunnableEvent;
}

@end

void NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler_RunnableEvent *self, NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  if ([((NetI2pUtilLog *) nil_chk(outer$->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [outer$->_log_ debugWithNSString:JreStrcat("$J$@", @"Creating w/ delay ", timeoutMs, @" : ", t)];
  JreStrongAssign(&self->_timedEvent_, t);
  self->_scheduled_ = timeoutMs + JavaLangSystem_currentTimeMillis();
}

NetI2pUtilSimpleScheduler_RunnableEvent *new_NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler_RunnableEvent, initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_, outer$, t, timeoutMs)
}

NetI2pUtilSimpleScheduler_RunnableEvent *create_NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong timeoutMs) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler_RunnableEvent, initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_, outer$, t, timeoutMs)
}

void NetI2pUtilSimpleScheduler_RunnableEvent_run(NetI2pUtilSimpleScheduler_RunnableEvent *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->this$0_->_log_ debugWithNSString:JreStrcat("$@", @"Running: ", self->_timedEvent_)];
  jlong before = JavaLangSystem_currentTimeMillis();
  if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN] && before < self->_scheduled_ - 100) [self->this$0_->_log_ warnWithNSString:JreStrcat("$$J$@", self->this$0_->_name_, @" early execution ", (self->_scheduled_ - before), @": ", self->_timedEvent_)];
  else if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN] && before > self->_scheduled_ + 1000) [self->this$0_->_log_ warnWithNSString:JreStrcat("$J$@$", @"late execution ", (before - self->_scheduled_), @": ", self->_timedEvent_, NetI2pUtilSimpleScheduler_debug(self->this$0_))];
  @try {
    [((id<NetI2pUtilSimpleTimer_TimedEvent>) nil_chk(self->_timedEvent_)) timeReached];
  }
  @catch (JavaLangThrowable *t) {
    [self->this$0_->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$$@$", self->this$0_->_name_, @": Scheduled task ", self->_timedEvent_, @" exited unexpectedly, please report") withJavaLangThrowable:t];
  }
  jlong time = JavaLangSystem_currentTimeMillis() - before;
  if (time > 1000 && [self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->this$0_->_log_ warnWithNSString:JreStrcat("$$J$@", self->this$0_->_name_, @" event execution took ", time, @": ", self->_timedEvent_)];
  if ([self->this$0_->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jlong completed = [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->this$0_->_executor_)) getCompletedTaskCount];
    if (completed % 250 == 0) [self->this$0_->_log_ infoWithNSString:NetI2pUtilSimpleScheduler_debug(self->this$0_)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleScheduler_RunnableEvent)

@implementation NetI2pUtilSimpleScheduler_PeriodicRunnableEvent

- (instancetype)initWithNetI2pUtilSimpleScheduler:(NetI2pUtilSimpleScheduler *)outer$
             withNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)t
                                         withLong:(jlong)initialDelay
                                         withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(self, outer$, t, initialDelay, timeoutMs);
  return self;
}

- (void)schedule {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(this$1_->_executor_)) scheduleWithFixedDelayWithJavaLangRunnable:self withLong:_initialDelay_ withLong:_timeoutMs_ withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)run {
  NetI2pUtilSimpleScheduler_RunnableEvent_run(self);
  _scheduled_ = _timeoutMs_ + JavaLangSystem_currentTimeMillis();
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleScheduler:withNetI2pUtilSimpleTimer_TimedEvent:withLong:withLong:);
  methods[1].selector = @selector(schedule);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LNetI2pUtilSimpleScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_timeoutMs_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_initialDelay_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer_TimedEvent;JJ", "LNetI2pUtilSimpleScheduler;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleScheduler_PeriodicRunnableEvent = { "PeriodicRunnableEvent", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent;
}

@end

void NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *self, NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs) {
  JreStrongAssign(&self->this$1_, outer$);
  NetI2pUtilSimpleScheduler_RunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_(self, outer$, t, timeoutMs);
  self->_initialDelay_ = initialDelay;
  self->_timeoutMs_ = timeoutMs;
  self->_scheduled_ = initialDelay + JavaLangSystem_currentTimeMillis();
}

NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *new_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent, initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_, outer$, t, initialDelay, timeoutMs)
}

NetI2pUtilSimpleScheduler_PeriodicRunnableEvent *create_NetI2pUtilSimpleScheduler_PeriodicRunnableEvent_initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_(NetI2pUtilSimpleScheduler *outer$, id<NetI2pUtilSimpleTimer_TimedEvent> t, jlong initialDelay, jlong timeoutMs) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent, initWithNetI2pUtilSimpleScheduler_withNetI2pUtilSimpleTimer_TimedEvent_withLong_withLong_, outer$, t, initialDelay, timeoutMs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleScheduler_PeriodicRunnableEvent)
