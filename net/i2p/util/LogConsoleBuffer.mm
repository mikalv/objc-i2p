//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LogConsoleBuffer.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/LogConsoleBuffer.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pUtilLogConsoleBuffer () {
 @public
  jint lim_;
  JavaUtilConcurrentLinkedBlockingQueue *_buffer_;
  JavaUtilConcurrentLinkedBlockingQueue *_critBuffer_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLogConsoleBuffer, _buffer_, JavaUtilConcurrentLinkedBlockingQueue *)
J2OBJC_FIELD_SETTER(NetI2pUtilLogConsoleBuffer, _critBuffer_, JavaUtilConcurrentLinkedBlockingQueue *)

@implementation NetI2pUtilLogConsoleBuffer

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilLogConsoleBuffer_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithInt:(jint)limit {
  NetI2pUtilLogConsoleBuffer_initWithInt_(self, limit);
  return self;
}

- (void)addWithNSString:(NSString *)msg {
  while ([((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_buffer_)) size] >= lim_) [_buffer_ poll];
  [_buffer_ offerWithId:msg];
}

- (void)addCriticalWithNSString:(NSString *)msg {
  while ([((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_critBuffer_)) size] >= lim_) [_critBuffer_ poll];
  [_critBuffer_ offerWithId:msg];
}

- (id<JavaUtilList>)getMostRecentMessages {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(_buffer_);
}

- (id<JavaUtilList>)getMostRecentCriticalMessages {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(_critBuffer_);
}

- (void)clear {
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_buffer_)) clear];
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(_critBuffer_)) clear];
}

- (void)dealloc {
  RELEASE_(_buffer_);
  RELEASE_(_critBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(addWithNSString:);
  methods[3].selector = @selector(addCriticalWithNSString:);
  methods[4].selector = @selector(getMostRecentMessages);
  methods[5].selector = @selector(getMostRecentCriticalMessages);
  methods[6].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lim_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_buffer_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "_critBuffer_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "I", "add", "LNSString;", "addCritical", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/concurrent/LinkedBlockingQueue<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pUtilLogConsoleBuffer = { "LogConsoleBuffer", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilLogConsoleBuffer;
}

@end

void NetI2pUtilLogConsoleBuffer_initWithNetI2pI2PAppContext_(NetI2pUtilLogConsoleBuffer *self, NetI2pI2PAppContext *context) {
  NetI2pUtilLogConsoleBuffer_initWithInt_(self, NetI2pUtilLogManager_DEFAULT_CONSOLEBUFFERSIZE);
}

NetI2pUtilLogConsoleBuffer *new_NetI2pUtilLogConsoleBuffer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilLogConsoleBuffer, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilLogConsoleBuffer *create_NetI2pUtilLogConsoleBuffer_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogConsoleBuffer, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilLogConsoleBuffer_initWithInt_(NetI2pUtilLogConsoleBuffer *self, jint limit) {
  NSObject_init(self);
  self->lim_ = JavaLangMath_maxWithInt_withInt_(limit, 4);
  JreStrongAssignAndConsume(&self->_buffer_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self->lim_ + 4));
  JreStrongAssignAndConsume(&self->_critBuffer_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(self->lim_ + 4));
}

NetI2pUtilLogConsoleBuffer *new_NetI2pUtilLogConsoleBuffer_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(NetI2pUtilLogConsoleBuffer, initWithInt_, limit)
}

NetI2pUtilLogConsoleBuffer *create_NetI2pUtilLogConsoleBuffer_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogConsoleBuffer, initWithInt_, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogConsoleBuffer)
