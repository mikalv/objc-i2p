//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Log.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilLog")
#ifdef RESTRICT_NetI2pUtilLog
#define INCLUDE_ALL_NetI2pUtilLog 0
#else
#define INCLUDE_ALL_NetI2pUtilLog 1
#endif
#undef RESTRICT_NetI2pUtilLog

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilLog_) && (INCLUDE_ALL_NetI2pUtilLog || defined(INCLUDE_NetI2pUtilLog))
#define NetI2pUtilLog_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangThrowable;
@class NetI2pUtilLogManager;

@interface NetI2pUtilLog : NSObject
@property (readonly, class) jint DEBUG_ NS_SWIFT_NAME(DEBUG_);
@property (readonly, class) jint INFO NS_SWIFT_NAME(INFO);
@property (readonly, class) jint WARN NS_SWIFT_NAME(WARN);
@property (readonly, class) jint ERROR NS_SWIFT_NAME(ERROR);
@property (readonly, class) jint CRIT NS_SWIFT_NAME(CRIT);
@property (readonly, copy, class) NSString *STR_DEBUG NS_SWIFT_NAME(STR_DEBUG);
@property (readonly, copy, class) NSString *STR_INFO NS_SWIFT_NAME(STR_INFO);
@property (readonly, copy, class) NSString *STR_WARN NS_SWIFT_NAME(STR_WARN);
@property (readonly, copy, class) NSString *STR_ERROR NS_SWIFT_NAME(STR_ERROR);
@property (readonly, copy, class) NSString *STR_CRIT NS_SWIFT_NAME(STR_CRIT);

+ (jint)DEBUG_;

+ (jint)INFO;

+ (jint)WARN;

+ (jint)ERROR;

+ (jint)CRIT;

+ (NSString *)STR_DEBUG;

+ (NSString *)STR_INFO;

+ (NSString *)STR_WARN;

+ (NSString *)STR_ERROR;

+ (NSString *)STR_CRIT;

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cls;

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (void)debugWithNSString:(NSString *)msg;

- (void)debugWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t;

- (void)errorWithNSString:(NSString *)msg;

- (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t;

+ (jint)getLevelWithNSString:(NSString *)level;

- (jint)getMinimumPriority;

- (NSString *)getName;

- (id)getScope;

- (void)infoWithNSString:(NSString *)msg;

- (void)infoWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t;

- (void)logWithInt:(jint)priority
      withNSString:(NSString *)msg;

- (void)logWithInt:(jint)priority
      withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)t;

- (void)logAlwaysWithInt:(jint)priority
            withNSString:(NSString *)msg;

- (void)logCloseLoopWithInt:(jint)level
          withNSObjectArray:(IOSObjectArray *)desc;

- (void)logCloseLoopWithNSObjectArray:(IOSObjectArray *)desc;

- (void)setMinimumPriorityWithInt:(jint)priority;

- (jboolean)shouldDebug;

- (jboolean)shouldError;

- (jboolean)shouldInfo;

- (jboolean)shouldLogWithInt:(jint)priority;

- (jboolean)shouldWarn;

+ (NSString *)toLevelStringWithInt:(jint)level;

- (void)warnWithNSString:(NSString *)msg;

- (void)warnWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                          withIOSClass:(IOSClass *)cls;

- (instancetype __nonnull)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                          withIOSClass:(IOSClass *)cls
                                          withNSString:(NSString *)name;

- (instancetype __nonnull)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                          withNSString:(NSString *)name;

+ (NSString *)getScopeWithNSString:(NSString *)name
                      withIOSClass:(IOSClass *)cls;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilLog)

inline jint NetI2pUtilLog_get_DEBUG(void);
#define NetI2pUtilLog_DEBUG 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLog, DEBUG, jint)

inline jint NetI2pUtilLog_get_INFO(void);
#define NetI2pUtilLog_INFO 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLog, INFO, jint)

inline jint NetI2pUtilLog_get_WARN(void);
#define NetI2pUtilLog_WARN 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLog, WARN, jint)

inline jint NetI2pUtilLog_get_ERROR(void);
#define NetI2pUtilLog_ERROR 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLog, ERROR, jint)

inline jint NetI2pUtilLog_get_CRIT(void);
#define NetI2pUtilLog_CRIT 50
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilLog, CRIT, jint)

inline NSString *NetI2pUtilLog_get_STR_DEBUG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilLog_STR_DEBUG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLog, STR_DEBUG, NSString *)

inline NSString *NetI2pUtilLog_get_STR_INFO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilLog_STR_INFO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLog, STR_INFO, NSString *)

inline NSString *NetI2pUtilLog_get_STR_WARN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilLog_STR_WARN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLog, STR_WARN, NSString *)

inline NSString *NetI2pUtilLog_get_STR_ERROR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilLog_STR_ERROR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLog, STR_ERROR, NSString *)

inline NSString *NetI2pUtilLog_get_STR_CRIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilLog_STR_CRIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilLog, STR_CRIT, NSString *)

FOUNDATION_EXPORT jint NetI2pUtilLog_getLevelWithNSString_(NSString *level);

FOUNDATION_EXPORT NSString *NetI2pUtilLog_toLevelStringWithInt_(jint level);

FOUNDATION_EXPORT void NetI2pUtilLog_initWithIOSClass_(NetI2pUtilLog *self, IOSClass *cls);

FOUNDATION_EXPORT NetI2pUtilLog *new_NetI2pUtilLog_initWithIOSClass_(IOSClass *cls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilLog *create_NetI2pUtilLog_initWithIOSClass_(IOSClass *cls);

FOUNDATION_EXPORT void NetI2pUtilLog_initWithNSString_(NetI2pUtilLog *self, NSString *name);

FOUNDATION_EXPORT NetI2pUtilLog *new_NetI2pUtilLog_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilLog *create_NetI2pUtilLog_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, IOSClass *cls);

FOUNDATION_EXPORT NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLogManager *manager, IOSClass *cls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLogManager *manager, IOSClass *cls);

FOUNDATION_EXPORT void NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, NSString *name);

FOUNDATION_EXPORT NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLogManager *manager, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLogManager *manager, NSString *name);

FOUNDATION_EXPORT void NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name);

FOUNDATION_EXPORT NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name);

FOUNDATION_EXPORT NSString *NetI2pUtilLog_getScopeWithNSString_withIOSClass_(NSString *name, IOSClass *cls);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilLog)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilLog")
