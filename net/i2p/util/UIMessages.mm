//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/UIMessages.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "net/i2p/util/UIMessages.h"

@interface NetI2pUtilUIMessages () {
 @public
  jint _maxSize_;
  jint _count_;
  JavaUtilLinkedList *_messages_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilUIMessages, _messages_, JavaUtilLinkedList *)

@interface NetI2pUtilUIMessages_Message ()

- (instancetype)initWithInt:(jint)i
               withNSString:(NSString *)msg;

@end

__attribute__((unused)) static void NetI2pUtilUIMessages_Message_initWithInt_withNSString_(NetI2pUtilUIMessages_Message *self, jint i, NSString *msg);

__attribute__((unused)) static NetI2pUtilUIMessages_Message *new_NetI2pUtilUIMessages_Message_initWithInt_withNSString_(jint i, NSString *msg) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilUIMessages_Message *create_NetI2pUtilUIMessages_Message_initWithInt_withNSString_(jint i, NSString *msg);

@implementation NetI2pUtilUIMessages

- (instancetype)initWithInt:(jint)maxSize {
  NetI2pUtilUIMessages_initWithInt_(self, maxSize);
  return self;
}

- (jint)addMessageWithNSString:(NSString *)message {
  return [self addMessageNoEscapeWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(message)) java_replace:@"&" withSequence:@"&amp;"])) java_replace:@"<" withSequence:@"&lt;"])) java_replace:@">" withSequence:@"&gt;"]];
}

- (jint)addMessageNoEscapeWithNSString:(NSString *)message {
  @synchronized(self) {
    [((JavaUtilLinkedList *) nil_chk(_messages_)) offerWithId:create_NetI2pUtilUIMessages_Message_initWithInt_withNSString_(_count_++, message)];
    while ([_messages_ size] > _maxSize_) {
      [_messages_ poll];
    }
    return _count_;
  }
}

- (jint)getLastMessageID {
  @synchronized(self) {
    return _count_ - 1;
  }
}

- (id<JavaUtilList>)getMessages {
  @synchronized(self) {
    if ([((JavaUtilLinkedList *) nil_chk(_messages_)) isEmpty]) return JreRetainedLocalValue(JavaUtilCollections_emptyList());
    return JreRetainedLocalValue(create_JavaUtilArrayList_initWithJavaUtilCollection_(_messages_));
  }
}

- (void)clear {
  @synchronized(self) {
    [((JavaUtilLinkedList *) nil_chk(_messages_)) clear];
  }
}

- (void)clearThroughWithInt:(jint)id_ {
  @synchronized(self) {
    NetI2pUtilUIMessages_Message *m = [((JavaUtilLinkedList *) nil_chk(_messages_)) peekLast];
    if (m == nil) {
    }
    else if (m->id__ <= id_) {
      [_messages_ clear];
    }
    else {
      for (id<JavaUtilIterator> iter = [_messages_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
        NetI2pUtilUIMessages_Message *msg = [iter next];
        if (((NetI2pUtilUIMessages_Message *) nil_chk(msg))->id__ > id_) break;
        [iter remove];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(_messages_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x21, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(addMessageWithNSString:);
  methods[2].selector = @selector(addMessageNoEscapeWithNSString:);
  methods[3].selector = @selector(getLastMessageID);
  methods[4].selector = @selector(getMessages);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(clearThroughWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_maxSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messages_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "I", "addMessage", "LNSString;", "addMessageNoEscape", "()Ljava/util/List<Lnet/i2p/util/UIMessages$Message;>;", "clearThrough", "Ljava/util/LinkedList<Lnet/i2p/util/UIMessages$Message;>;", "LNetI2pUtilUIMessages_Message;" };
  static const J2ObjcClassInfo _NetI2pUtilUIMessages = { "UIMessages", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 7, -1, -1, -1 };
  return &_NetI2pUtilUIMessages;
}

@end

void NetI2pUtilUIMessages_initWithInt_(NetI2pUtilUIMessages *self, jint maxSize) {
  NSObject_init(self);
  if (maxSize < 1) @throw create_JavaLangIllegalArgumentException_init();
  self->_maxSize_ = maxSize;
  JreStrongAssignAndConsume(&self->_messages_, new_JavaUtilLinkedList_init());
}

NetI2pUtilUIMessages *new_NetI2pUtilUIMessages_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(NetI2pUtilUIMessages, initWithInt_, maxSize)
}

NetI2pUtilUIMessages *create_NetI2pUtilUIMessages_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilUIMessages, initWithInt_, maxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilUIMessages)

@implementation NetI2pUtilUIMessages_Message

- (instancetype)initWithInt:(jint)i
               withNSString:(NSString *)msg {
  NetI2pUtilUIMessages_Message_initWithInt_withNSString_(self, i, msg);
  return self;
}

- (NSString *)description {
  return message_;
}

- (void)dealloc {
  RELEASE_(message_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x11, 2, -1, -1, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "toString", "id", "LNetI2pUtilUIMessages;" };
  static const J2ObjcClassInfo _NetI2pUtilUIMessages_Message = { "Message", "net.i2p.util", ptrTable, methods, fields, 7, 0x9, 2, 2, 3, -1, -1, -1, -1 };
  return &_NetI2pUtilUIMessages_Message;
}

@end

void NetI2pUtilUIMessages_Message_initWithInt_withNSString_(NetI2pUtilUIMessages_Message *self, jint i, NSString *msg) {
  NSObject_init(self);
  self->id__ = i;
  JreStrongAssign(&self->message_, msg);
}

NetI2pUtilUIMessages_Message *new_NetI2pUtilUIMessages_Message_initWithInt_withNSString_(jint i, NSString *msg) {
  J2OBJC_NEW_IMPL(NetI2pUtilUIMessages_Message, initWithInt_withNSString_, i, msg)
}

NetI2pUtilUIMessages_Message *create_NetI2pUtilUIMessages_Message_initWithInt_withNSString_(jint i, NSString *msg) {
  J2OBJC_CREATE_IMPL(NetI2pUtilUIMessages_Message, initWithInt_withNSString_, i, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilUIMessages_Message)
