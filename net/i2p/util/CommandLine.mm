//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/CommandLine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "net/i2p/CoreVersion.h"
#include "net/i2p/util/CommandLine.h"

@interface NetI2pUtilCommandLine ()

+ (void)usage;

@end

__attribute__((unused)) static void NetI2pUtilCommandLine_usage(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilCommandLine)

id<JavaUtilList> NetI2pUtilCommandLine_CLASSES;

@implementation NetI2pUtilCommandLine

+ (id<JavaUtilList>)CLASSES {
  return NetI2pUtilCommandLine_CLASSES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilCommandLine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilCommandLine_mainWithNSStringArray_(args);
}

+ (void)execWithNSStringArray:(IOSObjectArray *)args
             withJavaUtilList:(id<JavaUtilList>)classes {
  NetI2pUtilCommandLine_execWithNSStringArray_withJavaUtilList_(args, classes);
}

+ (void)usage {
  NetI2pUtilCommandLine_usage();
}

+ (void)printCommandsWithJavaUtilList:(id<JavaUtilList>)classes {
  NetI2pUtilCommandLine_printCommandsWithJavaUtilList_(classes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(execWithNSStringArray:withJavaUtilList:);
  methods[3].selector = @selector(usage);
  methods[4].selector = @selector(printCommandsWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CLASSES", "LJavaUtilList;", .constantValue.asLong = 0, 0x1c, -1, 8, 9, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "exec", "[LNSString;LJavaUtilList;", "([Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)V", "printCommands", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", &NetI2pUtilCommandLine_CLASSES, "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _NetI2pUtilCommandLine = { "CommandLine", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilCommandLine;
}

+ (void)initialize {
  if (self == [NetI2pUtilCommandLine class]) {
    JreStrongAssign(&NetI2pUtilCommandLine_CLASSES, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"freenet.support.CPUInformation.CPUID", @"net.i2p.CoreVersion", @"net.i2p.crypto.CertUtil", @"net.i2p.crypto.CryptoCheck", @"net.i2p.crypto.KeyGenerator", @"net.i2p.crypto.SelfSignedGenerator", @"net.i2p.crypto.SU3File", @"net.i2p.crypto.TrustedUpdate", @"net.i2p.data.Base32", @"net.i2p.data.Base64", @"net.i2p.data.PrivateKeyFile", @"net.i2p.time.BuildTime", @"net.i2p.util.Addresses", @"net.i2p.util.ConvertToHash", @"net.i2p.util.DNSOverHTTPS", @"net.i2p.util.EepGet", @"net.i2p.util.EepHead", @"net.i2p.util.FileUtil", @"net.i2p.util.FortunaRandomSource", @"net.i2p.util.NativeBigInteger", @"net.i2p.util.PartialEepGet", @"net.i2p.util.RFC822Date", @"net.i2p.util.ShellCommand", @"net.i2p.util.SSLEepGet", @"net.i2p.util.SystemVersion", @"net.i2p.util.TranslateReader", @"net.i2p.util.ZipFileComment" } count:27 type:NSString_class_()]));
    J2OBJC_SET_INITIALIZED(NetI2pUtilCommandLine)
  }
}

@end

void NetI2pUtilCommandLine_init(NetI2pUtilCommandLine *self) {
  NSObject_init(self);
}

NetI2pUtilCommandLine *new_NetI2pUtilCommandLine_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilCommandLine, init)
}

NetI2pUtilCommandLine *create_NetI2pUtilCommandLine_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilCommandLine, init)
}

void NetI2pUtilCommandLine_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilCommandLine_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
    NetI2pUtilCommandLine_execWithNSStringArray_withJavaUtilList_(args, NetI2pUtilCommandLine_CLASSES);
  }
  NetI2pUtilCommandLine_usage();
  JavaLangSystem_exitWithInt_(1);
}

void NetI2pUtilCommandLine_execWithNSStringArray_withJavaUtilList_(IOSObjectArray *args, id<JavaUtilList> classes) {
  NetI2pUtilCommandLine_initialize();
  NSString *cmd = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  for (NSString * __strong cls in nil_chk(classes)) {
    NSString *ccmd = [((NSString *) nil_chk([((NSString *) nil_chk(cls)) java_substring:[cls java_lastIndexOf:'.'] + 1])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    if ([((NSString *) nil_chk(cmd)) isEqual:ccmd]) {
      @try {
        IOSObjectArray *cargs = [IOSObjectArray arrayWithLength:args->size_ - 1 type:NSString_class_()];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, 1, cargs, 0, args->size_ - 1);
        IOSClass *c = IOSClass_forName_initialize_classLoader_(cls, true, JavaLangClassLoader_getSystemClassLoader());
        JavaLangReflectMethod *main = [((IOSClass *) nil_chk(c)) getMethod:@"main" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_arrayType(NSString_class_(), 1) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(main)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ cargs } count:1 type:NSObject_class_()]];
        JavaLangSystem_exitWithInt_(0);
      }
      @catch (JavaLangException *e) {
        [e printStackTrace];
        JavaLangSystem_exitWithInt_(1);
      }
    }
  }
}

void NetI2pUtilCommandLine_usage() {
  NetI2pUtilCommandLine_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"I2P Core version ", NetI2pCoreVersion_VERSION, @"\nUSAGE: java -jar /path/to/i2p.jar command [args]")];
  NetI2pUtilCommandLine_printCommandsWithJavaUtilList_(NetI2pUtilCommandLine_CLASSES);
}

void NetI2pUtilCommandLine_printCommandsWithJavaUtilList_(id<JavaUtilList> classes) {
  NetI2pUtilCommandLine_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Available commands:"];
  id<JavaUtilList> cmds = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(classes)) size]);
  for (NSString * __strong cls in classes) {
    NSString *ccmd = [((NSString *) nil_chk([((NSString *) nil_chk(cls)) java_substring:[cls java_lastIndexOf:'.'] + 1])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
    [cmds addWithId:ccmd];
  }
  JavaUtilCollections_sortWithJavaUtilList_(cmds);
  for (NSString * __strong cmd in cmds) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"    ", cmd)];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Enter command for detailed help."];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilCommandLine)
