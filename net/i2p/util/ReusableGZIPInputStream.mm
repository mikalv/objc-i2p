//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ReusableGZIPInputStream.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "net/i2p/util/ResettableGZIPInputStream.h"
#include "net/i2p/util/ReusableGZIPInputStream.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilReusableGZIPInputStream ()

- (instancetype)init;

@end

inline jboolean NetI2pUtilReusableGZIPInputStream_get_ENABLE_CACHING(void);
static jboolean NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilReusableGZIPInputStream, ENABLE_CACHING, jboolean)

inline JavaUtilConcurrentLinkedBlockingQueue *NetI2pUtilReusableGZIPInputStream_get__available(void);
static JavaUtilConcurrentLinkedBlockingQueue *NetI2pUtilReusableGZIPInputStream__available;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilReusableGZIPInputStream, _available, JavaUtilConcurrentLinkedBlockingQueue *)

__attribute__((unused)) static void NetI2pUtilReusableGZIPInputStream_init(NetI2pUtilReusableGZIPInputStream *self);

__attribute__((unused)) static NetI2pUtilReusableGZIPInputStream *new_NetI2pUtilReusableGZIPInputStream_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilReusableGZIPInputStream *create_NetI2pUtilReusableGZIPInputStream_init(void);

J2OBJC_INITIALIZED_DEFN(NetI2pUtilReusableGZIPInputStream)

@implementation NetI2pUtilReusableGZIPInputStream

+ (NetI2pUtilReusableGZIPInputStream *)acquire {
  return NetI2pUtilReusableGZIPInputStream_acquire();
}

+ (void)release__WithNetI2pUtilReusableGZIPInputStream:(NetI2pUtilReusableGZIPInputStream *)released {
  NetI2pUtilReusableGZIPInputStream_release__WithNetI2pUtilReusableGZIPInputStream_(released);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilReusableGZIPInputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)clearCache {
  NetI2pUtilReusableGZIPInputStream_clearCache();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilReusableGZIPInputStream;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(acquire);
  methods[1].selector = @selector(release__WithNetI2pUtilReusableGZIPInputStream:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(clearCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ENABLE_CACHING", "Z", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "_available", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "release", "LNetI2pUtilReusableGZIPInputStream;", &NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING, &NetI2pUtilReusableGZIPInputStream__available, "Ljava/util/concurrent/LinkedBlockingQueue<Lnet/i2p/util/ReusableGZIPInputStream;>;" };
  static const J2ObjcClassInfo _NetI2pUtilReusableGZIPInputStream = { "ReusableGZIPInputStream", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilReusableGZIPInputStream;
}

+ (void)initialize {
  if (self == [NetI2pUtilReusableGZIPInputStream class]) {
    NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING = !(NetI2pUtilSystemVersion_isApache() || NetI2pUtilSystemVersion_isAndroid());
    {
      if (NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING) JreStrongAssignAndConsume(&NetI2pUtilReusableGZIPInputStream__available, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(8));
      else JreStrongAssign(&NetI2pUtilReusableGZIPInputStream__available, nil);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilReusableGZIPInputStream)
  }
}

@end

NetI2pUtilReusableGZIPInputStream *NetI2pUtilReusableGZIPInputStream_acquire() {
  NetI2pUtilReusableGZIPInputStream_initialize();
  NetI2pUtilReusableGZIPInputStream *rv = nil;
  if (NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING) rv = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(NetI2pUtilReusableGZIPInputStream__available)) poll];
  if (rv == nil) {
    rv = create_NetI2pUtilReusableGZIPInputStream_init();
  }
  return rv;
}

void NetI2pUtilReusableGZIPInputStream_release__WithNetI2pUtilReusableGZIPInputStream_(NetI2pUtilReusableGZIPInputStream *released) {
  NetI2pUtilReusableGZIPInputStream_initialize();
  if (NetI2pUtilReusableGZIPInputStream_ENABLE_CACHING) [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(NetI2pUtilReusableGZIPInputStream__available)) offerWithId:released];
}

void NetI2pUtilReusableGZIPInputStream_init(NetI2pUtilReusableGZIPInputStream *self) {
  NetI2pUtilResettableGZIPInputStream_init(self);
}

NetI2pUtilReusableGZIPInputStream *new_NetI2pUtilReusableGZIPInputStream_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilReusableGZIPInputStream, init)
}

NetI2pUtilReusableGZIPInputStream *create_NetI2pUtilReusableGZIPInputStream_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilReusableGZIPInputStream, init)
}

void NetI2pUtilReusableGZIPInputStream_clearCache() {
  NetI2pUtilReusableGZIPInputStream_initialize();
  if (NetI2pUtilReusableGZIPInputStream__available != nil) [NetI2pUtilReusableGZIPInputStream__available clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilReusableGZIPInputStream)
