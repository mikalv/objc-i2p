//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SimpleTimer2.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleTimer.h"
#include "net/i2p/util/SimpleTimer2.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilSimpleTimer2 () {
 @public
  JavaUtilConcurrentScheduledThreadPoolExecutor *_executor_;
  NSString *_name_;
  JavaUtilConcurrentAtomicAtomicInteger *_count_;
  jint _threads_;
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithNetI2pUtilSimpleTimer2_TimedEvent:(NetI2pUtilSimpleTimer2_TimedEvent *)t
                                                                              withLong:(jlong)timeoutMs;

- (jlong)getCompletedTaskCount;

- (NSString *)debug;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2, _executor_, JavaUtilConcurrentScheduledThreadPoolExecutor *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2, _name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2, _count_, JavaUtilConcurrentAtomicAtomicInteger *)

inline jint NetI2pUtilSimpleTimer2_get_MIN_THREADS(void);
#define NetI2pUtilSimpleTimer2_MIN_THREADS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleTimer2, MIN_THREADS, jint)

inline jint NetI2pUtilSimpleTimer2_get_MAX_THREADS(void);
#define NetI2pUtilSimpleTimer2_MAX_THREADS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleTimer2, MAX_THREADS, jint)

__attribute__((unused)) static id<JavaUtilConcurrentScheduledFuture> NetI2pUtilSimpleTimer2_scheduleWithNetI2pUtilSimpleTimer2_TimedEvent_withLong_(NetI2pUtilSimpleTimer2 *self, NetI2pUtilSimpleTimer2_TimedEvent *t, jlong timeoutMs);

__attribute__((unused)) static jlong NetI2pUtilSimpleTimer2_getCompletedTaskCount(NetI2pUtilSimpleTimer2 *self);

__attribute__((unused)) static NSString *NetI2pUtilSimpleTimer2_debug(NetI2pUtilSimpleTimer2 *self);

@interface NetI2pUtilSimpleTimer2_Shutdown : NSObject < JavaLangRunnable > {
 @public
  NetI2pUtilSimpleTimer2 *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_Shutdown)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2_Shutdown *self, NetI2pUtilSimpleTimer2 *outer$);

__attribute__((unused)) static NetI2pUtilSimpleTimer2_Shutdown *new_NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer2_Shutdown *create_NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer2_Shutdown)

@interface NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor : JavaUtilConcurrentScheduledThreadPoolExecutor

- (instancetype)initWithInt:(jint)threads
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)factory;

- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)r
                   withJavaLangThrowable:(JavaLangThrowable *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *self, jint threads, id<JavaUtilConcurrentThreadFactory> factory);

__attribute__((unused)) static NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *new_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(jint threads, id<JavaUtilConcurrentThreadFactory> factory) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *create_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(jint threads, id<JavaUtilConcurrentThreadFactory> factory);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor)

@interface NetI2pUtilSimpleTimer2_CustomThreadFactory : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  NetI2pUtilSimpleTimer2 *this$0_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)outer$;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_CustomThreadFactory)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2_CustomThreadFactory *self, NetI2pUtilSimpleTimer2 *outer$);

__attribute__((unused)) static NetI2pUtilSimpleTimer2_CustomThreadFactory *new_NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer2_CustomThreadFactory *create_NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer2_CustomThreadFactory)

@interface NetI2pUtilSimpleTimer2_TimedEvent () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pUtilSimpleTimer2 *_pool_;
  jint _fuzz_;
  id<JavaUtilConcurrentScheduledFuture> _future_;
  jlong _nextRun_;
  jboolean _rescheduleAfterRun_;
  jboolean _cancelAfterRun_;
}

- (void)run2;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2_TimedEvent, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2_TimedEvent, _pool_, NetI2pUtilSimpleTimer2 *)
J2OBJC_FIELD_SETTER(NetI2pUtilSimpleTimer2_TimedEvent, _future_, id<JavaUtilConcurrentScheduledFuture>)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_TimedEvent_run(NetI2pUtilSimpleTimer2_TimedEvent *self);

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_TimedEvent_run2(NetI2pUtilSimpleTimer2_TimedEvent *self);

@interface NetI2pUtilSimpleTimer2_1 : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  id<NetI2pUtilSimpleTimer_TimedEvent> val$event_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)capture$0
                              withNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                                withLong:(jlong)timeoutMs;

- (void)timeReached;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_1)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(NetI2pUtilSimpleTimer2_1 *self, id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs);

__attribute__((unused)) static NetI2pUtilSimpleTimer2_1 *new_NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer2_1 *create_NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs);

@interface NetI2pUtilSimpleTimer2_PeriodicTimedEvent : NetI2pUtilSimpleTimer2_TimedEvent {
 @public
  jlong _timeoutMs_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                      withLong:(jlong)delay
                                      withLong:(jlong)timeoutMs;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_PeriodicTimedEvent)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_PeriodicTimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_withLong_(NetI2pUtilSimpleTimer2_PeriodicTimedEvent *self, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleTimer2_PeriodicTimedEvent)

@interface NetI2pUtilSimpleTimer2_2 : NetI2pUtilSimpleTimer2_PeriodicTimedEvent {
 @public
  id<NetI2pUtilSimpleTimer_TimedEvent> val$event_;
}

- (instancetype)initWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)capture$0
                              withNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                                withLong:(jlong)delay
                                                withLong:(jlong)timeoutMs;

- (void)timeReached;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleTimer2_2)

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(NetI2pUtilSimpleTimer2_2 *self, id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs);

__attribute__((unused)) static NetI2pUtilSimpleTimer2_2 *new_NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleTimer2_2 *create_NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs);

__attribute__((unused)) static void NetI2pUtilSimpleTimer2_TimedEventState_initWithNSString_withInt_(NetI2pUtilSimpleTimer2_TimedEventState *self, NSString *__name, jint __ordinal);

@implementation NetI2pUtilSimpleTimer2

+ (NetI2pUtilSimpleTimer2 *)getInstance {
  return NetI2pUtilSimpleTimer2_getInstance();
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name {
  NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_(self, context, name);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                               withNSString:(NSString *)name
                                withBoolean:(jboolean)prestartAllThreads {
  NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_withBoolean_(self, context, name, prestartAllThreads);
  return self;
}

- (void)stop {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(_executor_)) setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:create_JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy_init()];
  [_executor_ shutdownNow];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithNetI2pUtilSimpleTimer2_TimedEvent:(NetI2pUtilSimpleTimer2_TimedEvent *)t
                                                                              withLong:(jlong)timeoutMs {
  return NetI2pUtilSimpleTimer2_scheduleWithNetI2pUtilSimpleTimer2_TimedEvent_withLong_(self, t, timeoutMs);
}

- (void)addEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                            withLong:(jlong)timeoutMs {
  if (event == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"addEvent null");
  create_NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(event, self, timeoutMs);
}

- (void)addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                                    withLong:(jlong)timeoutMs {
  [self addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:event withLong:timeoutMs withLong:timeoutMs];
}

- (void)addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)event
                                                    withLong:(jlong)delay
                                                    withLong:(jlong)timeoutMs {
  create_NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(event, self, delay, timeoutMs);
}

- (NSString *)description {
  return _name_;
}

- (jlong)getCompletedTaskCount {
  return NetI2pUtilSimpleTimer2_getCompletedTaskCount(self);
}

- (NSString *)debug {
  return NetI2pUtilSimpleTimer2_debug(self);
}

- (void)dealloc {
  RELEASE_(_executor_);
  RELEASE_(_name_);
  RELEASE_(_count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilSimpleTimer2;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(initWithNetI2pI2PAppContext:withNSString:);
  methods[3].selector = @selector(initWithNetI2pI2PAppContext:withNSString:withBoolean:);
  methods[4].selector = @selector(stop);
  methods[5].selector = @selector(scheduleWithNetI2pUtilSimpleTimer2_TimedEvent:withLong:);
  methods[6].selector = @selector(addEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[7].selector = @selector(addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:);
  methods[8].selector = @selector(addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:withLong:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(getCompletedTaskCount);
  methods[11].selector = @selector(debug);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleTimer2_MIN_THREADS, 0x1a, -1, -1, -1, -1 },
    { "MAX_THREADS", "I", .constantValue.asInt = NetI2pUtilSimpleTimer2_MAX_THREADS, 0x1a, -1, -1, -1, -1 },
    { "_executor_", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_threads_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;LNSString;", "LNetI2pI2PAppContext;LNSString;Z", "schedule", "LNetI2pUtilSimpleTimer2_TimedEvent;J", "(Lnet/i2p/util/SimpleTimer2$TimedEvent;J)Ljava/util/concurrent/ScheduledFuture<*>;", "addEvent", "LNetI2pUtilSimpleTimer_TimedEvent;J", "addPeriodicEvent", "LNetI2pUtilSimpleTimer_TimedEvent;JJ", "toString", "LNetI2pUtilSimpleTimer2_Shutdown;LNetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor;LNetI2pUtilSimpleTimer2_CustomThreadFactory;LNetI2pUtilSimpleTimer2_TimedEventState;LNetI2pUtilSimpleTimer2_TimedEvent;LNetI2pUtilSimpleTimer2_PeriodicTimedEvent;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2 = { "SimpleTimer2", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, 11, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2;
}

@end

NetI2pUtilSimpleTimer2 *NetI2pUtilSimpleTimer2_getInstance() {
  NetI2pUtilSimpleTimer2_initialize();
  return [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) simpleTimer2];
}

void NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_(NetI2pUtilSimpleTimer2 *self, NetI2pI2PAppContext *context) {
  NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_(self, context, @"SimpleTimer2");
}

NetI2pUtilSimpleTimer2 *new_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilSimpleTimer2 *create_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_, context)
}

void NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_(NetI2pUtilSimpleTimer2 *self, NetI2pI2PAppContext *context, NSString *name) {
  NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_withBoolean_(self, context, name, true);
}

NetI2pUtilSimpleTimer2 *new_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

NetI2pUtilSimpleTimer2 *create_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *context, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_withNSString_, context, name)
}

void NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_withBoolean_(NetI2pUtilSimpleTimer2 *self, NetI2pI2PAppContext *context, NSString *name, jboolean prestartAllThreads) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_count_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->_name_, name);
  jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
  self->_threads_ = (jint) JavaLangMath_maxWithLong_withLong_(NetI2pUtilSimpleTimer2_MIN_THREADS, JavaLangMath_minWithLong_withLong_(NetI2pUtilSimpleTimer2_MAX_THREADS, 1 + (maxMemory / (32 * 1024 * 1024))));
  JreStrongAssignAndConsume(&self->_executor_, new_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(self->_threads_, create_NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(self)));
  if (prestartAllThreads) [self->_executor_ prestartAllCoreThreads];
  [((NetI2pI2PAppContext *) nil_chk(context)) addShutdownTaskWithJavaLangRunnable:create_NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(self)];
}

NetI2pUtilSimpleTimer2 *new_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_withBoolean_(NetI2pI2PAppContext *context, NSString *name, jboolean prestartAllThreads) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_withNSString_withBoolean_, context, name, prestartAllThreads)
}

NetI2pUtilSimpleTimer2 *create_NetI2pUtilSimpleTimer2_initWithNetI2pI2PAppContext_withNSString_withBoolean_(NetI2pI2PAppContext *context, NSString *name, jboolean prestartAllThreads) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2, initWithNetI2pI2PAppContext_withNSString_withBoolean_, context, name, prestartAllThreads)
}

id<JavaUtilConcurrentScheduledFuture> NetI2pUtilSimpleTimer2_scheduleWithNetI2pUtilSimpleTimer2_TimedEvent_withLong_(NetI2pUtilSimpleTimer2 *self, NetI2pUtilSimpleTimer2_TimedEvent *t, jlong timeoutMs) {
  return [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->_executor_)) scheduleWithJavaLangRunnable:t withLong:timeoutMs withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

jlong NetI2pUtilSimpleTimer2_getCompletedTaskCount(NetI2pUtilSimpleTimer2 *self) {
  return [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->_executor_)) getCompletedTaskCount];
}

NSString *NetI2pUtilSimpleTimer2_debug(NetI2pUtilSimpleTimer2 *self) {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->_executor_)) purge];
  return JreStrcat("$$$ICI$J$I", @" Pool: ", self->_name_, @" Active: ", [self->_executor_ getActiveCount], '/', [self->_executor_ getPoolSize], @" Completed: ", [self->_executor_ getCompletedTaskCount], @" Queued: ", [((id<JavaUtilConcurrentBlockingQueue>) nil_chk([self->_executor_ getQueue])) size]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2)

@implementation NetI2pUtilSimpleTimer2_Shutdown

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)outer$ {
  NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ stop];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer2:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleTimer2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_Shutdown = { "Shutdown", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_Shutdown;
}

@end

void NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2_Shutdown *self, NetI2pUtilSimpleTimer2 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleTimer2_Shutdown *new_NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2_Shutdown, initWithNetI2pUtilSimpleTimer2_, outer$)
}

NetI2pUtilSimpleTimer2_Shutdown *create_NetI2pUtilSimpleTimer2_Shutdown_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2_Shutdown, initWithNetI2pUtilSimpleTimer2_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_Shutdown)

@implementation NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor

- (instancetype)initWithInt:(jint)threads
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)factory {
  NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(self, threads, factory);
  return self;
}

- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)r
                   withJavaLangThrowable:(JavaLangThrowable *)t {
  [super afterExecuteWithJavaLangRunnable:r withJavaLangThrowable:t];
  if (t != nil) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilSimpleTimer2_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$@", @"event borked: ", r) withJavaLangThrowable:t];
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilConcurrentThreadFactory:);
  methods[1].selector = @selector(afterExecuteWithJavaLangRunnable:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "ILJavaUtilConcurrentThreadFactory;", "afterExecute", "LJavaLangRunnable;LJavaLangThrowable;", "LNetI2pUtilSimpleTimer2;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor = { "CustomScheduledThreadPoolExecutor", "net.i2p.util", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor;
}

@end

void NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *self, jint threads, id<JavaUtilConcurrentThreadFactory> factory) {
  JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(self, threads, factory);
}

NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *new_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(jint threads, id<JavaUtilConcurrentThreadFactory> factory) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor, initWithInt_withJavaUtilConcurrentThreadFactory_, threads, factory)
}

NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor *create_NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(jint threads, id<JavaUtilConcurrentThreadFactory> factory) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor, initWithInt_withJavaUtilConcurrentThreadFactory_, threads, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_CustomScheduledThreadPoolExecutor)

@implementation NetI2pUtilSimpleTimer2_CustomThreadFactory

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)outer$ {
  NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(self, outer$);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *rv = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(JavaUtilConcurrentExecutors_defaultThreadFactory())) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(rv)) setNameWithNSString:JreStrcat("$CICI", this$0_->_name_, ' ', [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->_count_)) incrementAndGet], '/', this$0_->_threads_)];
  [rv setDaemonWithBoolean:true];
  [rv setPriorityWithInt:JavaLangThread_NORM_PRIORITY + 1];
  return rv;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer2:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilSimpleTimer2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LNetI2pUtilSimpleTimer2;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_CustomThreadFactory = { "CustomThreadFactory", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 1, 2, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_CustomThreadFactory;
}

@end

void NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2_CustomThreadFactory *self, NetI2pUtilSimpleTimer2 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pUtilSimpleTimer2_CustomThreadFactory *new_NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2_CustomThreadFactory, initWithNetI2pUtilSimpleTimer2_, outer$)
}

NetI2pUtilSimpleTimer2_CustomThreadFactory *create_NetI2pUtilSimpleTimer2_CustomThreadFactory_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2 *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2_CustomThreadFactory, initWithNetI2pUtilSimpleTimer2_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_CustomThreadFactory)

@implementation NetI2pUtilSimpleTimer2_TimedEvent

+ (jint)DEFAULT_FUZZ {
  return NetI2pUtilSimpleTimer2_TimedEvent_DEFAULT_FUZZ;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, pool);
  return self;
}

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                      withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, pool, timeoutMs);
  return self;
}

- (void)setFuzzWithInt:(jint)fuzz {
  @synchronized(self) {
    _fuzz_ = fuzz;
  }
}

- (void)scheduleWithLong:(jlong)timeoutMs {
  @synchronized(self) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$J$@", @"Scheduling: ", self, @" timeout = ", timeoutMs, @" state: ", _state_)];
    if (timeoutMs <= 0) {
      if (timeoutMs < 0 && [_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@$J$@", @"Sched. timeout < 0: ", self, @" timeout = ", timeoutMs, @" state: ", _state_)];
      timeoutMs = 1;
    }
    _nextRun_ = timeoutMs + JavaLangSystem_currentTimeMillis();
    _cancelAfterRun_ = false;
    switch ([_state_ ordinal]) {
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_RUNNING:
      _rescheduleAfterRun_ = true;
      break;
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_IDLE:
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_CANCELLED:
      JreStrongAssign(&_future_, NetI2pUtilSimpleTimer2_scheduleWithNetI2pUtilSimpleTimer2_TimedEvent_withLong_(nil_chk(_pool_), self, timeoutMs));
      JreStrongAssign(&_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, SCHEDULED));
      break;
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_SCHEDULED:
      ;
    }
  }
}

- (void)rescheduleWithLong:(jlong)timeoutMs {
  [self rescheduleWithLong:timeoutMs withBoolean:true];
}

- (void)rescheduleWithLong:(jlong)timeoutMs
               withBoolean:(jboolean)useEarliestTime {
  @synchronized(self) {
    if (timeoutMs <= 0) {
      if (timeoutMs < 0 && [((NetI2pUtilLog *) nil_chk(_log_)) shouldInfo]) [((NetI2pUtilLog *) nil_chk(_log_)) infoWithNSString:JreStrcat("$@$J$@", @"Resched. timeout < 0: ", self, @" timeout = ", timeoutMs, @" state: ", _state_)];
      timeoutMs = 1;
    }
    jlong now = JavaLangSystem_currentTimeMillis();
    jlong oldTimeout;
    jboolean scheduled = _state_ == JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, SCHEDULED);
    if (scheduled) oldTimeout = _nextRun_ - now;
    else oldTimeout = timeoutMs;
    if ((oldTimeout - _fuzz_ > timeoutMs && useEarliestTime) || (oldTimeout + _fuzz_ < timeoutMs && !useEarliestTime) || (!scheduled)) {
      if (scheduled && oldTimeout <= 5) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldWarn]) [_log_ warnWithNSString:JreStrcat("$J$@$J", @"not rescheduling to ", timeoutMs, @", about to execute ", self, @" in ", oldTimeout)];
        return;
      }
      if (scheduled && (now + timeoutMs) < _nextRun_) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$@$J$J$@", @"Re-scheduling: ", self, @" timeout = ", timeoutMs, @" old timeout was ", oldTimeout, @" state: ", _state_)];
        [self cancel];
      }
      [self scheduleWithLong:timeoutMs];
    }
  }
}

- (void)forceRescheduleWithLong:(jlong)timeoutMs {
  @synchronized(self) {
    if (_state_ == JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, SCHEDULED)) [self cancel];
    [self scheduleWithLong:timeoutMs];
  }
}

- (jboolean)cancel {
  @synchronized(self) {
    _rescheduleAfterRun_ = false;
    {
      jboolean cancelled;
      switch ([_state_ ordinal]) {
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_CANCELLED:
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_IDLE:
        break;
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_RUNNING:
        _cancelAfterRun_ = true;
        return true;
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_SCHEDULED:
        cancelled = [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(_future_)) cancelWithBoolean:true];
        if (cancelled) JreStrongAssign(&_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, CANCELLED));
        else [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$@$J", @"could not cancel ", self, @" to run in ", (_nextRun_ - JavaLangSystem_currentTimeMillis())) withJavaLangThrowable:create_JavaLangException_init()];
        return cancelled;
      }
    }
    return false;
  }
}

- (void)run {
  NetI2pUtilSimpleTimer2_TimedEvent_run(self);
}

- (void)run2 {
  NetI2pUtilSimpleTimer2_TimedEvent_run2(self);
}

- (void)timeReached {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_pool_);
  RELEASE_(_future_);
  RELEASE_(_state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer2:);
  methods[1].selector = @selector(initWithNetI2pUtilSimpleTimer2:withLong:);
  methods[2].selector = @selector(setFuzzWithInt:);
  methods[3].selector = @selector(scheduleWithLong:);
  methods[4].selector = @selector(rescheduleWithLong:);
  methods[5].selector = @selector(rescheduleWithLong:withBoolean:);
  methods[6].selector = @selector(forceRescheduleWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(run2);
  methods[10].selector = @selector(timeReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_pool_", "LNetI2pUtilSimpleTimer2;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_fuzz_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_FUZZ", "I", .constantValue.asInt = NetI2pUtilSimpleTimer2_TimedEvent_DEFAULT_FUZZ, 0x1c, -1, -1, -1, -1 },
    { "_future_", "LJavaUtilConcurrentScheduledFuture;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "_state_", "LNetI2pUtilSimpleTimer2_TimedEventState;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_nextRun_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_rescheduleAfterRun_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_cancelAfterRun_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;", "LNetI2pUtilSimpleTimer2;J", "setFuzz", "I", "schedule", "J", "reschedule", "JZ", "forceReschedule", "Ljava/util/concurrent/ScheduledFuture<*>;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_TimedEvent = { "TimedEvent", "net.i2p.util", ptrTable, methods, fields, 7, 0x409, 11, 9, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_TimedEvent;
}

@end

void NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(NetI2pUtilSimpleTimer2_TimedEvent *self, NetI2pUtilSimpleTimer2 *pool) {
  NSObject_init(self);
  JreStrongAssign(&self->_pool_, pool);
  self->_fuzz_ = NetI2pUtilSimpleTimer2_TimedEvent_DEFAULT_FUZZ;
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pUtilSimpleTimer2_class_()]);
  JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE));
}

void NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(NetI2pUtilSimpleTimer2_TimedEvent *self, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs) {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_(self, pool);
  [self scheduleWithLong:timeoutMs];
}

void NetI2pUtilSimpleTimer2_TimedEvent_run(NetI2pUtilSimpleTimer2_TimedEvent *self) {
  @try {
    NetI2pUtilSimpleTimer2_TimedEvent_run2(self);
  }
  @catch (JavaLangRuntimeException *re) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"timer error" withJavaLangThrowable:re];
    @throw re;
  }
}

void NetI2pUtilSimpleTimer2_TimedEvent_run2(NetI2pUtilSimpleTimer2_TimedEvent *self) {
  if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$@", @"Running: ", self)];
  jlong before = JavaLangSystem_currentTimeMillis();
  jlong delay = 0;
  @synchronized(self) {
    if ([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted]) {
      if ([self->_log_ shouldWarn]) [self->_log_ warnWithNSString:JreStrcat("$@$@", @"I was interrupted in run, state ", self->_state_, @" event ", self)];
      return;
    }
    if (self->_rescheduleAfterRun_) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$", self, @" rescheduleAfterRun cannot be true here"));
    switch ([self->_state_ ordinal]) {
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_CANCELLED:
      if ([self->_log_ shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Not actually running: CANCELLED ", self)];
      return;
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_IDLE:
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_RUNNING:
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$@", self, @" not possible to be in ", self->_state_));
      case NetI2pUtilSimpleTimer2_TimedEventState_Enum_SCHEDULED:
      ;
    }
    jlong difference = self->_nextRun_ - before;
    if (difference > self->_fuzz_) {
      JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE));
      if ([self->_log_ shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$J$@", @"Early execution, Rescheduling for ", difference, @" later: ", self)];
      [self scheduleWithLong:difference];
      return;
    }
    JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, RUNNING));
  }
  if (self->_future_ != nil) delay = [self->_future_ getDelayWithJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  else if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("@$@", self->_pool_, @" no _future ", self)];
  if ([self->_log_ shouldWarn]) {
    if (delay > 100) [self->_log_ warnWithNSString:JreStrcat("@$J$@", self->_pool_, @" early execution ", delay, @": ", self)];
    else if (delay < -1000) [self->_log_ warnWithNSString:JreStrcat("$J$@$", @" late execution ", (0 - delay), @": ", self, NetI2pUtilSimpleTimer2_debug(nil_chk(self->_pool_)))];
  }
  @try {
    [self timeReached];
  }
  @catch (JavaLangThrowable *t) {
    [self->_log_ logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("@$@$", self->_pool_, @": Timed task ", self, @" exited unexpectedly, please report") withJavaLangThrowable:t];
  }
  @finally {
    @synchronized(self) {
      switch ([self->_state_ ordinal]) {
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_SCHEDULED:
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_IDLE:
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$@", self, @" can't be ", self->_state_));
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_CANCELLED:
        break;
        case NetI2pUtilSimpleTimer2_TimedEventState_Enum_RUNNING:
        if (self->_cancelAfterRun_) {
          self->_cancelAfterRun_ = false;
          JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, CANCELLED));
        }
        else {
          JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE));
          if (self->_rescheduleAfterRun_) {
            self->_rescheduleAfterRun_ = false;
            if ([self->_log_ shouldInfo]) [self->_log_ infoWithNSString:JreStrcat("$@", @"Reschedule after run: ", self)];
            [self scheduleWithLong:self->_nextRun_ - JavaLangSystem_currentTimeMillis()];
          }
        }
      }
    }
  }
  jlong time = JavaLangSystem_currentTimeMillis() - before;
  if (time > 500 && [self->_log_ shouldLogWithInt:NetI2pUtilLog_WARN]) [self->_log_ warnWithNSString:JreStrcat("@$J$@", self->_pool_, @" event execution took ", time, @": ", self)];
  else if ([self->_log_ shouldDebug]) [self->_log_ debugWithNSString:JreStrcat("$J$@", @"Execution finished in ", time, @": ", self)];
  if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) {
    jlong completed = NetI2pUtilSimpleTimer2_getCompletedTaskCount(nil_chk(self->_pool_));
    if (completed % 250 == 0) [self->_log_ infoWithNSString:NetI2pUtilSimpleTimer2_debug(self->_pool_)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_TimedEvent)

@implementation NetI2pUtilSimpleTimer2_1

- (instancetype)initWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)capture$0
                              withNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                                withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(self, capture$0, pool, timeoutMs);
  return self;
}

- (void)timeReached {
  [((id<NetI2pUtilSimpleTimer_TimedEvent>) nil_chk(val$event_)) timeReached];
}

- (NSString *)description {
  return [((id<NetI2pUtilSimpleTimer_TimedEvent>) nil_chk(val$event_)) description];
}

- (void)dealloc {
  RELEASE_(val$event_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer_TimedEvent:withNetI2pUtilSimpleTimer2:withLong:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$event_", "LNetI2pUtilSimpleTimer_TimedEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;J", "toString", "LNetI2pUtilSimpleTimer2;", "addEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_1 = { "", "net.i2p.util", ptrTable, methods, fields, 7, 0x8018, 3, 1, 2, -1, 3, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_1;
}

@end

void NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(NetI2pUtilSimpleTimer2_1 *self, id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs) {
  JreStrongAssign(&self->val$event_, capture$0);
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, pool, timeoutMs);
}

NetI2pUtilSimpleTimer2_1 *new_NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2_1, initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_, capture$0, pool, timeoutMs)
}

NetI2pUtilSimpleTimer2_1 *create_NetI2pUtilSimpleTimer2_1_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong timeoutMs) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2_1, initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_, capture$0, pool, timeoutMs)
}

@implementation NetI2pUtilSimpleTimer2_PeriodicTimedEvent

- (instancetype)initWithNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                      withLong:(jlong)delay
                                      withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleTimer2_PeriodicTimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_withLong_(self, pool, delay, timeoutMs);
  return self;
}

- (void)run {
  NetI2pUtilSimpleTimer2_TimedEvent_run(self);
  @synchronized(self) {
    if (_state_ == JreLoadEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE)) [self scheduleWithLong:_timeoutMs_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer2:withLong:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_timeoutMs_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;JJ", "LNetI2pUtilSimpleTimer2;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_PeriodicTimedEvent = { "PeriodicTimedEvent", "net.i2p.util", ptrTable, methods, fields, 7, 0x40a, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_PeriodicTimedEvent;
}

@end

void NetI2pUtilSimpleTimer2_PeriodicTimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_withLong_(NetI2pUtilSimpleTimer2_PeriodicTimedEvent *self, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs) {
  NetI2pUtilSimpleTimer2_TimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_(self, pool, delay);
  if (timeoutMs < 5000) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout minimum 5000");
  self->_timeoutMs_ = timeoutMs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_PeriodicTimedEvent)

@implementation NetI2pUtilSimpleTimer2_2

- (instancetype)initWithNetI2pUtilSimpleTimer_TimedEvent:(id<NetI2pUtilSimpleTimer_TimedEvent>)capture$0
                              withNetI2pUtilSimpleTimer2:(NetI2pUtilSimpleTimer2 *)pool
                                                withLong:(jlong)delay
                                                withLong:(jlong)timeoutMs {
  NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(self, capture$0, pool, delay, timeoutMs);
  return self;
}

- (void)timeReached {
  [((id<NetI2pUtilSimpleTimer_TimedEvent>) nil_chk(val$event_)) timeReached];
}

- (NSString *)description {
  return [((id<NetI2pUtilSimpleTimer_TimedEvent>) nil_chk(val$event_)) description];
}

- (void)dealloc {
  RELEASE_(val$event_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilSimpleTimer_TimedEvent:withNetI2pUtilSimpleTimer2:withLong:withLong:);
  methods[1].selector = @selector(timeReached);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$event_", "LNetI2pUtilSimpleTimer_TimedEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilSimpleTimer2;JJ", "toString", "LNetI2pUtilSimpleTimer2;", "addPeriodicEventWithNetI2pUtilSimpleTimer_TimedEvent:withLong:withLong:" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_2 = { "", "net.i2p.util", ptrTable, methods, fields, 7, 0x8018, 3, 1, 2, -1, 3, -1, -1 };
  return &_NetI2pUtilSimpleTimer2_2;
}

@end

void NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(NetI2pUtilSimpleTimer2_2 *self, id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs) {
  JreStrongAssign(&self->val$event_, capture$0);
  NetI2pUtilSimpleTimer2_PeriodicTimedEvent_initWithNetI2pUtilSimpleTimer2_withLong_withLong_(self, pool, delay, timeoutMs);
}

NetI2pUtilSimpleTimer2_2 *new_NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleTimer2_2, initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_, capture$0, pool, delay, timeoutMs)
}

NetI2pUtilSimpleTimer2_2 *create_NetI2pUtilSimpleTimer2_2_initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_(id<NetI2pUtilSimpleTimer_TimedEvent> capture$0, NetI2pUtilSimpleTimer2 *pool, jlong delay, jlong timeoutMs) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleTimer2_2, initWithNetI2pUtilSimpleTimer_TimedEvent_withNetI2pUtilSimpleTimer2_withLong_withLong_, capture$0, pool, delay, timeoutMs)
}

J2OBJC_INITIALIZED_DEFN(NetI2pUtilSimpleTimer2_TimedEventState)

NetI2pUtilSimpleTimer2_TimedEventState *NetI2pUtilSimpleTimer2_TimedEventState_values_[4];

@implementation NetI2pUtilSimpleTimer2_TimedEventState

+ (NetI2pUtilSimpleTimer2_TimedEventState *)IDLE {
  return JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE);
}

+ (NetI2pUtilSimpleTimer2_TimedEventState *)SCHEDULED {
  return JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, SCHEDULED);
}

+ (NetI2pUtilSimpleTimer2_TimedEventState *)RUNNING {
  return JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, RUNNING);
}

+ (NetI2pUtilSimpleTimer2_TimedEventState *)CANCELLED {
  return JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, CANCELLED);
}

+ (IOSObjectArray *)values {
  return NetI2pUtilSimpleTimer2_TimedEventState_values();
}

+ (NetI2pUtilSimpleTimer2_TimedEventState *)valueOfWithNSString:(NSString *)name {
  return NetI2pUtilSimpleTimer2_TimedEventState_valueOfWithNSString_(name);
}

- (NetI2pUtilSimpleTimer2_TimedEventState_Enum)toNSEnum {
  return (NetI2pUtilSimpleTimer2_TimedEventState_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pUtilSimpleTimer2_TimedEventState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSimpleTimer2_TimedEventState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IDLE", "LNetI2pUtilSimpleTimer2_TimedEventState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SCHEDULED", "LNetI2pUtilSimpleTimer2_TimedEventState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "RUNNING", "LNetI2pUtilSimpleTimer2_TimedEventState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "CANCELLED", "LNetI2pUtilSimpleTimer2_TimedEventState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, IDLE), &JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, SCHEDULED), &JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, RUNNING), &JreEnum(NetI2pUtilSimpleTimer2_TimedEventState, CANCELLED), "LNetI2pUtilSimpleTimer2;", "Ljava/lang/Enum<Lnet/i2p/util/SimpleTimer2$TimedEventState;>;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleTimer2_TimedEventState = { "TimedEventState", "net.i2p.util", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pUtilSimpleTimer2_TimedEventState;
}

+ (void)initialize {
  if (self == [NetI2pUtilSimpleTimer2_TimedEventState class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pUtilSimpleTimer2_TimedEventState_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pUtilSimpleTimer2_TimedEventState_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pUtilSimpleTimer2_TimedEventState_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pUtilSimpleTimer2_TimedEventState)
  }
}

@end

void NetI2pUtilSimpleTimer2_TimedEventState_initWithNSString_withInt_(NetI2pUtilSimpleTimer2_TimedEventState *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pUtilSimpleTimer2_TimedEventState_values() {
  NetI2pUtilSimpleTimer2_TimedEventState_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pUtilSimpleTimer2_TimedEventState_values_ count:4 type:NetI2pUtilSimpleTimer2_TimedEventState_class_()];
}

NetI2pUtilSimpleTimer2_TimedEventState *NetI2pUtilSimpleTimer2_TimedEventState_valueOfWithNSString_(NSString *name) {
  NetI2pUtilSimpleTimer2_TimedEventState_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pUtilSimpleTimer2_TimedEventState *e = NetI2pUtilSimpleTimer2_TimedEventState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pUtilSimpleTimer2_TimedEventState *NetI2pUtilSimpleTimer2_TimedEventState_fromOrdinal(NSUInteger ordinal) {
  NetI2pUtilSimpleTimer2_TimedEventState_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pUtilSimpleTimer2_TimedEventState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleTimer2_TimedEventState)
