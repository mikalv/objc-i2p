//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SimpleByteCache.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/TryCache.h"

@interface NetI2pUtilSimpleByteCache () {
 @public
  NetI2pUtilTryCache *_available_;
  jint _entrySize_;
}

- (instancetype)initWithInt:(jint)maxCachedEntries
                    withInt:(jint)entrySize;

- (void)resizeWithInt:(jint)maxCachedEntries;

- (IOSByteArray *)acquire;

- (void)releaseItWithByteArray:(IOSByteArray *)entry_;

- (void)clear;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilSimpleByteCache, _available_, NetI2pUtilTryCache *)

inline JavaUtilConcurrentConcurrentHashMap *NetI2pUtilSimpleByteCache_get__caches(void);
static JavaUtilConcurrentConcurrentHashMap *NetI2pUtilSimpleByteCache__caches;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilSimpleByteCache, _caches, JavaUtilConcurrentConcurrentHashMap *)

inline jint NetI2pUtilSimpleByteCache_get_DEFAULT_SIZE(void);
#define NetI2pUtilSimpleByteCache_DEFAULT_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilSimpleByteCache, DEFAULT_SIZE, jint)

__attribute__((unused)) static void NetI2pUtilSimpleByteCache_initWithInt_withInt_(NetI2pUtilSimpleByteCache *self, jint maxCachedEntries, jint entrySize);

__attribute__((unused)) static NetI2pUtilSimpleByteCache *new_NetI2pUtilSimpleByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleByteCache *create_NetI2pUtilSimpleByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize);

__attribute__((unused)) static void NetI2pUtilSimpleByteCache_resizeWithInt_(NetI2pUtilSimpleByteCache *self, jint maxCachedEntries);

__attribute__((unused)) static IOSByteArray *NetI2pUtilSimpleByteCache_acquire(NetI2pUtilSimpleByteCache *self);

__attribute__((unused)) static void NetI2pUtilSimpleByteCache_releaseItWithByteArray_(NetI2pUtilSimpleByteCache *self, IOSByteArray *entry_);

__attribute__((unused)) static void NetI2pUtilSimpleByteCache_clear(NetI2pUtilSimpleByteCache *self);

@interface NetI2pUtilSimpleByteCache_ByteArrayFactory : NSObject < NetI2pUtilTryCache_ObjectFactory > {
 @public
  jint sz_;
}

- (instancetype)initWithInt:(jint)entrySize;

- (IOSByteArray *)newInstance OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilSimpleByteCache_ByteArrayFactory)

__attribute__((unused)) static void NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(NetI2pUtilSimpleByteCache_ByteArrayFactory *self, jint entrySize);

__attribute__((unused)) static NetI2pUtilSimpleByteCache_ByteArrayFactory *new_NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(jint entrySize) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilSimpleByteCache_ByteArrayFactory *create_NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(jint entrySize);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSimpleByteCache_ByteArrayFactory)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilSimpleByteCache)

@implementation NetI2pUtilSimpleByteCache

+ (NetI2pUtilSimpleByteCache *)getInstanceWithInt:(jint)size {
  return NetI2pUtilSimpleByteCache_getInstanceWithInt_(size);
}

+ (NetI2pUtilSimpleByteCache *)getInstanceWithInt:(jint)cacheSize
                                          withInt:(jint)size {
  return NetI2pUtilSimpleByteCache_getInstanceWithInt_withInt_(cacheSize, size);
}

+ (void)clearAll {
  NetI2pUtilSimpleByteCache_clearAll();
}

- (instancetype)initWithInt:(jint)maxCachedEntries
                    withInt:(jint)entrySize {
  NetI2pUtilSimpleByteCache_initWithInt_withInt_(self, maxCachedEntries, entrySize);
  return self;
}

- (void)resizeWithInt:(jint)maxCachedEntries {
  NetI2pUtilSimpleByteCache_resizeWithInt_(self, maxCachedEntries);
}

+ (IOSByteArray *)acquireWithInt:(jint)size {
  return NetI2pUtilSimpleByteCache_acquireWithInt_(size);
}

- (IOSByteArray *)acquire {
  return NetI2pUtilSimpleByteCache_acquire(self);
}

+ (void)release__WithByteArray:(IOSByteArray *)entry_ {
  NetI2pUtilSimpleByteCache_release__WithByteArray_(entry_);
}

- (void)releaseItWithByteArray:(IOSByteArray *)entry_ {
  NetI2pUtilSimpleByteCache_releaseItWithByteArray_(self, entry_);
}

- (void)clear {
  NetI2pUtilSimpleByteCache_clear(self);
}

- (void)dealloc {
  RELEASE_(_available_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pUtilSimpleByteCache;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilSimpleByteCache;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithInt:);
  methods[1].selector = @selector(getInstanceWithInt:withInt:);
  methods[2].selector = @selector(clearAll);
  methods[3].selector = @selector(initWithInt:withInt:);
  methods[4].selector = @selector(resizeWithInt:);
  methods[5].selector = @selector(acquireWithInt:);
  methods[6].selector = @selector(acquire);
  methods[7].selector = @selector(release__WithByteArray:);
  methods[8].selector = @selector(releaseItWithByteArray:);
  methods[9].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_caches", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 8, 9, -1 },
    { "DEFAULT_SIZE", "I", .constantValue.asInt = NetI2pUtilSimpleByteCache_DEFAULT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_available_", "LNetI2pUtilTryCache;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "_entrySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "I", "II", "resize", "acquire", "release", "[B", "releaseIt", &NetI2pUtilSimpleByteCache__caches, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Integer;Lnet/i2p/util/SimpleByteCache;>;", "Lnet/i2p/util/TryCache<[B>;", "LNetI2pUtilSimpleByteCache_ByteArrayFactory;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleByteCache = { "SimpleByteCache", "net.i2p.util", ptrTable, methods, fields, 7, 0x11, 10, 4, -1, 11, -1, -1, -1 };
  return &_NetI2pUtilSimpleByteCache;
}

+ (void)initialize {
  if (self == [NetI2pUtilSimpleByteCache class]) {
    JreStrongAssignAndConsume(&NetI2pUtilSimpleByteCache__caches, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(8));
    J2OBJC_SET_INITIALIZED(NetI2pUtilSimpleByteCache)
  }
}

@end

NetI2pUtilSimpleByteCache *NetI2pUtilSimpleByteCache_getInstanceWithInt_(jint size) {
  NetI2pUtilSimpleByteCache_initialize();
  return NetI2pUtilSimpleByteCache_getInstanceWithInt_withInt_(NetI2pUtilSimpleByteCache_DEFAULT_SIZE, size);
}

NetI2pUtilSimpleByteCache *NetI2pUtilSimpleByteCache_getInstanceWithInt_withInt_(jint cacheSize, jint size) {
  NetI2pUtilSimpleByteCache_initialize();
  JavaLangInteger *sz = JavaLangInteger_valueOfWithInt_(size);
  NetI2pUtilSimpleByteCache *cache = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilSimpleByteCache__caches)) getWithId:sz];
  if (cache == nil) {
    cache = create_NetI2pUtilSimpleByteCache_initWithInt_withInt_(cacheSize, size);
    NetI2pUtilSimpleByteCache *old = [NetI2pUtilSimpleByteCache__caches putIfAbsentWithId:sz withId:cache];
    if (old != nil) cache = old;
  }
  NetI2pUtilSimpleByteCache_resizeWithInt_(cache, cacheSize);
  return cache;
}

void NetI2pUtilSimpleByteCache_clearAll() {
  NetI2pUtilSimpleByteCache_initialize();
  for (NetI2pUtilSimpleByteCache * __strong bc in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilSimpleByteCache__caches)) values])) NetI2pUtilSimpleByteCache_clear(nil_chk(bc));
}

void NetI2pUtilSimpleByteCache_initWithInt_withInt_(NetI2pUtilSimpleByteCache *self, jint maxCachedEntries, jint entrySize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_available_, new_NetI2pUtilTryCache_initWithNetI2pUtilTryCache_ObjectFactory_withInt_(create_NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(entrySize), maxCachedEntries));
  self->_entrySize_ = entrySize;
}

NetI2pUtilSimpleByteCache *new_NetI2pUtilSimpleByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleByteCache, initWithInt_withInt_, maxCachedEntries, entrySize)
}

NetI2pUtilSimpleByteCache *create_NetI2pUtilSimpleByteCache_initWithInt_withInt_(jint maxCachedEntries, jint entrySize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleByteCache, initWithInt_withInt_, maxCachedEntries, entrySize)
}

void NetI2pUtilSimpleByteCache_resizeWithInt_(NetI2pUtilSimpleByteCache *self, jint maxCachedEntries) {
}

IOSByteArray *NetI2pUtilSimpleByteCache_acquireWithInt_(jint size) {
  NetI2pUtilSimpleByteCache_initialize();
  return NetI2pUtilSimpleByteCache_acquire(nil_chk(NetI2pUtilSimpleByteCache_getInstanceWithInt_(size)));
}

IOSByteArray *NetI2pUtilSimpleByteCache_acquire(NetI2pUtilSimpleByteCache *self) {
  return [((NetI2pUtilTryCache *) nil_chk(self->_available_)) acquire];
}

void NetI2pUtilSimpleByteCache_release__WithByteArray_(IOSByteArray *entry_) {
  NetI2pUtilSimpleByteCache_initialize();
  NetI2pUtilSimpleByteCache *cache = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pUtilSimpleByteCache__caches)) getWithId:JavaLangInteger_valueOfWithInt_(((IOSByteArray *) nil_chk(entry_))->size_)];
  if (cache != nil) NetI2pUtilSimpleByteCache_releaseItWithByteArray_(cache, entry_);
}

void NetI2pUtilSimpleByteCache_releaseItWithByteArray_(NetI2pUtilSimpleByteCache *self, IOSByteArray *entry_) {
  if (entry_ == nil || entry_->size_ != self->_entrySize_) return;
  [((NetI2pUtilTryCache *) nil_chk(self->_available_)) release__WithId:entry_];
}

void NetI2pUtilSimpleByteCache_clear(NetI2pUtilSimpleByteCache *self) {
  [((NetI2pUtilTryCache *) nil_chk(self->_available_)) clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleByteCache)

@implementation NetI2pUtilSimpleByteCache_ByteArrayFactory

- (instancetype)initWithInt:(jint)entrySize {
  NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(self, entrySize);
  return self;
}

- (IOSByteArray *)newInstance {
  return [IOSByteArray arrayWithLength:sz_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sz_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LNetI2pUtilSimpleByteCache;", "Ljava/lang/Object;Lnet/i2p/util/TryCache$ObjectFactory<[B>;" };
  static const J2ObjcClassInfo _NetI2pUtilSimpleByteCache_ByteArrayFactory = { "ByteArrayFactory", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, 2, -1 };
  return &_NetI2pUtilSimpleByteCache_ByteArrayFactory;
}

@end

void NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(NetI2pUtilSimpleByteCache_ByteArrayFactory *self, jint entrySize) {
  NSObject_init(self);
  self->sz_ = entrySize;
}

NetI2pUtilSimpleByteCache_ByteArrayFactory *new_NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(jint entrySize) {
  J2OBJC_NEW_IMPL(NetI2pUtilSimpleByteCache_ByteArrayFactory, initWithInt_, entrySize)
}

NetI2pUtilSimpleByteCache_ByteArrayFactory *create_NetI2pUtilSimpleByteCache_ByteArrayFactory_initWithInt_(jint entrySize) {
  J2OBJC_CREATE_IMPL(NetI2pUtilSimpleByteCache_ByteArrayFactory, initWithInt_, entrySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSimpleByteCache_ByteArrayFactory)
