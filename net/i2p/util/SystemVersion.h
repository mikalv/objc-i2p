//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SystemVersion.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilSystemVersion")
#ifdef RESTRICT_NetI2pUtilSystemVersion
#define INCLUDE_ALL_NetI2pUtilSystemVersion 0
#else
#define INCLUDE_ALL_NetI2pUtilSystemVersion 1
#endif
#undef RESTRICT_NetI2pUtilSystemVersion

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilSystemVersion_) && (INCLUDE_ALL_NetI2pUtilSystemVersion || defined(INCLUDE_NetI2pUtilSystemVersion))
#define NetI2pUtilSystemVersion_

@class IOSObjectArray;
@class JavaUtilTimeZone;
@class NetI2pI2PAppContext;

@interface NetI2pUtilSystemVersion : NSObject
@property (readonly, copy, class) NSString *DAEMON_USER NS_SWIFT_NAME(DAEMON_USER);
@property (readonly, copy, class) NSString *GENTOO_USER NS_SWIFT_NAME(GENTOO_USER);

+ (NSString *)DAEMON_USER;

+ (NSString *)GENTOO_USER;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)getAndroidVersion;

+ (jint)getCores;

+ (jlong)getMaxMemory;

+ (JavaUtilTimeZone *)getSystemTimeZone;

+ (JavaUtilTimeZone *)getSystemTimeZoneWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx;

+ (jboolean)hasWrapper;

+ (jboolean)is64Bit;

+ (jboolean)isAndroid;

+ (jboolean)isApache;

+ (jboolean)isARM;

+ (jboolean)isGentoo;

+ (jboolean)isGNU;

+ (jboolean)isJava10;

+ (jboolean)isJava11;

+ (jboolean)isJava6;

+ (jboolean)isJava7;

+ (jboolean)isJava8;

+ (jboolean)isJava9;

+ (jboolean)isLinuxService;

+ (jboolean)isMac;

+ (jboolean)isOpenJDK;

+ (jboolean)isSlow;

+ (jboolean)isWindows;

+ (jboolean)isX86;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

@end

J2OBJC_STATIC_INIT(NetI2pUtilSystemVersion)

inline NSString *NetI2pUtilSystemVersion_get_DAEMON_USER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilSystemVersion_DAEMON_USER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilSystemVersion, DAEMON_USER, NSString *)

inline NSString *NetI2pUtilSystemVersion_get_GENTOO_USER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pUtilSystemVersion_GENTOO_USER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilSystemVersion, GENTOO_USER, NSString *)

FOUNDATION_EXPORT void NetI2pUtilSystemVersion_init(NetI2pUtilSystemVersion *self);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isWindows(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isMac(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isAndroid(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isApache(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isGNU(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isGentoo(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isOpenJDK(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isARM(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isX86(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isSlow(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava6(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava7(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava8(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava9(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava10(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isJava11(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_is64Bit(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_isLinuxService(void);

FOUNDATION_EXPORT jint NetI2pUtilSystemVersion_getAndroidVersion(void);

FOUNDATION_EXPORT jboolean NetI2pUtilSystemVersion_hasWrapper(void);

FOUNDATION_EXPORT jlong NetI2pUtilSystemVersion_getMaxMemory(void);

FOUNDATION_EXPORT jint NetI2pUtilSystemVersion_getCores(void);

FOUNDATION_EXPORT JavaUtilTimeZone *NetI2pUtilSystemVersion_getSystemTimeZone(void);

FOUNDATION_EXPORT JavaUtilTimeZone *NetI2pUtilSystemVersion_getSystemTimeZoneWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx);

FOUNDATION_EXPORT void NetI2pUtilSystemVersion_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilSystemVersion)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilSystemVersion")
