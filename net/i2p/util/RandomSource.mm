//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/RandomSource.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/SecureRandom.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/EntropyHarvester.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilRandomSource () {
 @public
  id<NetI2pCryptoEntropyHarvester> _entropyHarvester_;
}

+ (jboolean)seedFromFileWithJavaIoFile:(JavaIoFile *)f
                         withByteArray:(IOSByteArray *)buf;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilRandomSource, _entropyHarvester_, id<NetI2pCryptoEntropyHarvester>)

inline jlong NetI2pUtilRandomSource_get_serialVersionUID(void);
#define NetI2pUtilRandomSource_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilRandomSource, serialVersionUID, jlong)

inline NSString *NetI2pUtilRandomSource_get_SEEDFILE(void);
static NSString *NetI2pUtilRandomSource_SEEDFILE = @"prngseed.rnd";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilRandomSource, SEEDFILE, NSString *)

__attribute__((unused)) static jboolean NetI2pUtilRandomSource_initSeedWithByteArray_(NetI2pUtilRandomSource *self, IOSByteArray *buf);

__attribute__((unused)) static jboolean NetI2pUtilRandomSource_seedFromFileWithJavaIoFile_withByteArray_(JavaIoFile *f, IOSByteArray *buf);

@interface NetI2pUtilRandomSource_SecureRandomInit : NSObject < JavaLangRunnable > {
 @public
  IOSByteArray *buf_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buf;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilRandomSource_SecureRandomInit)

J2OBJC_FIELD_SETTER(NetI2pUtilRandomSource_SecureRandomInit, buf_, IOSByteArray *)

inline jint NetI2pUtilRandomSource_SecureRandomInit_get_SZ(void);
#define NetI2pUtilRandomSource_SecureRandomInit_SZ 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilRandomSource_SecureRandomInit, SZ, jint)

__attribute__((unused)) static void NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(NetI2pUtilRandomSource_SecureRandomInit *self, IOSByteArray *buf);

__attribute__((unused)) static NetI2pUtilRandomSource_SecureRandomInit *new_NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(IOSByteArray *buf) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilRandomSource_SecureRandomInit *create_NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(IOSByteArray *buf);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilRandomSource_SecureRandomInit)

@implementation NetI2pUtilRandomSource

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pUtilRandomSource_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

+ (NetI2pUtilRandomSource *)getInstance {
  return NetI2pUtilRandomSource_getInstance();
}

- (jint)nextIntWithInt:(jint)n {
  if (n == 0) return 0;
  jint val = [super nextIntWithInt:n];
  if (val < 0) val = 0 - val;
  if (val >= n) val = val % n;
  return val;
}

- (jlong)nextLongWithLong:(jlong)n {
  jlong v = [super nextLong];
  if (v < 0) v = 0 - v;
  if (v >= n) v = v % n;
  return v;
}

- (void)nextBytesWithByteArray:(IOSByteArray *)buf
                       withInt:(jint)offset
                       withInt:(jint)length {
  if (offset == 0 && ((IOSByteArray *) nil_chk(buf))->size_ == length) {
    [self nextBytesWithByteArray:buf];
  }
  else {
    IOSByteArray *tmp = [IOSByteArray arrayWithLength:length];
    [self nextBytesWithByteArray:tmp];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, buf, offset, length);
  }
}

- (id<NetI2pCryptoEntropyHarvester>)harvester {
  return _entropyHarvester_;
}

- (void)feedEntropyWithNSString:(NSString *)source
                       withLong:(jlong)data
                        withInt:(jint)bitoffset
                        withInt:(jint)bits {
  if (bitoffset == 0) [self setSeedWithLong:data];
}

- (void)feedEntropyWithNSString:(NSString *)source
                  withByteArray:(IOSByteArray *)data
                        withInt:(jint)offset
                        withInt:(jint)len {
  if ((offset == 0) && (len == ((IOSByteArray *) nil_chk(data))->size_)) {
    [self setSeedWithByteArray:data];
  }
  else {
    [self setSeedWithByteArray:[((NetI2pDataHash *) nil_chk([((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) sha])) calculateHashWithByteArray:data withInt:offset withInt:len])) getData]];
  }
}

- (void)loadSeed {
  IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
  if (NetI2pUtilRandomSource_initSeedWithByteArray_(self, buf)) [self setSeedWithByteArray:buf];
}

- (void)saveSeed {
  IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
  [self nextBytesWithByteArray:buf];
  NetI2pUtilRandomSource_writeSeedWithByteArray_(buf);
}

+ (void)writeSeedWithByteArray:(IOSByteArray *)buf {
  NetI2pUtilRandomSource_writeSeedWithByteArray_(buf);
}

- (jboolean)initSeedWithByteArray:(IOSByteArray *)buf {
  return NetI2pUtilRandomSource_initSeedWithByteArray_(self, buf);
}

+ (jboolean)seedFromFileWithJavaIoFile:(JavaIoFile *)f
                         withByteArray:(IOSByteArray *)buf {
  return NetI2pUtilRandomSource_seedFromFileWithJavaIoFile_withByteArray_(f, buf);
}

- (void)dealloc {
  RELEASE_(_entropyHarvester_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilRandomSource;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoEntropyHarvester;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(nextIntWithInt:);
  methods[3].selector = @selector(nextLongWithLong:);
  methods[4].selector = @selector(nextBytesWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(harvester);
  methods[6].selector = @selector(feedEntropyWithNSString:withLong:withInt:withInt:);
  methods[7].selector = @selector(feedEntropyWithNSString:withByteArray:withInt:withInt:);
  methods[8].selector = @selector(loadSeed);
  methods[9].selector = @selector(saveSeed);
  methods[10].selector = @selector(writeSeedWithByteArray:);
  methods[11].selector = @selector(initSeedWithByteArray:);
  methods[12].selector = @selector(seedFromFileWithJavaIoFile:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pUtilRandomSource_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_entropyHarvester_", "LNetI2pCryptoEntropyHarvester;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x94, -1, -1, -1, -1 },
    { "SEEDFILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "nextInt", "I", "nextLong", "J", "nextBytes", "[BII", "feedEntropy", "LNSString;JII", "LNSString;[BII", "writeSeed", "[B", "initSeed", "seedFromFile", "LJavaIoFile;[B", &NetI2pUtilRandomSource_SEEDFILE, "LNetI2pUtilRandomSource_SecureRandomInit;" };
  static const J2ObjcClassInfo _NetI2pUtilRandomSource = { "RandomSource", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, 16, -1, -1, -1 };
  return &_NetI2pUtilRandomSource;
}

@end

void NetI2pUtilRandomSource_initWithNetI2pI2PAppContext_(NetI2pUtilRandomSource *self, NetI2pI2PAppContext *context) {
  JavaSecuritySecureRandom_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_entropyHarvester_, self);
}

NetI2pUtilRandomSource *new_NetI2pUtilRandomSource_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pUtilRandomSource, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilRandomSource *create_NetI2pUtilRandomSource_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pUtilRandomSource, initWithNetI2pI2PAppContext_, context)
}

NetI2pUtilRandomSource *NetI2pUtilRandomSource_getInstance() {
  NetI2pUtilRandomSource_initialize();
  return [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) random];
}

void NetI2pUtilRandomSource_writeSeedWithByteArray_(IOSByteArray *buf) {
  NetI2pUtilRandomSource_initialize();
  JavaIoFile *f = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) getConfigDir], NetI2pUtilRandomSource_SEEDFILE);
  JavaIoFileOutputStream *fos = nil;
  @try {
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(f);
    [fos writeWithByteArray:buf];
  }
  @catch (JavaIoIOException *ioe) {
  }
  @finally {
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jboolean NetI2pUtilRandomSource_initSeedWithByteArray_(NetI2pUtilRandomSource *self, IOSByteArray *buf) {
  jboolean ok = false;
  IOSByteArray *tbuf = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(buf))->size_];
  JavaLangThread *t = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(create_NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(tbuf), @"SecureRandomInit", true);
  [t start];
  @try {
    [t joinWithLong:10 * 1000];
    @synchronized(tbuf) {
      for (jint i = 0; i < tbuf->size_; i++) {
        if (IOSByteArray_Get(tbuf, i) != 0) {
          ok = true;
          break;
        }
      }
      if (ok) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tbuf, 0, buf, 0, buf->size_);
    }
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  if (!NetI2pUtilSystemVersion_isWindows()) ok = (NetI2pUtilRandomSource_seedFromFileWithJavaIoFile_withByteArray_(create_JavaIoFile_initWithNSString_(@"/dev/urandom"), buf) || ok);
  JavaIoFile *localFile = create_JavaIoFile_initWithJavaIoFile_withNSString_([((NetI2pI2PAppContext *) nil_chk(self->_context_)) getConfigDir], NetI2pUtilRandomSource_SEEDFILE);
  ok = (NetI2pUtilRandomSource_seedFromFileWithJavaIoFile_withByteArray_(localFile, buf) || ok);
  return ok;
}

jboolean NetI2pUtilRandomSource_seedFromFileWithJavaIoFile_withByteArray_(JavaIoFile *f, IOSByteArray *buf) {
  NetI2pUtilRandomSource_initialize();
  if ([((JavaIoFile *) nil_chk(f)) exists]) {
    JavaIoFileInputStream *fis = nil;
    @try {
      fis = create_JavaIoFileInputStream_initWithJavaIoFile_(f);
      jint read = 0;
      IOSByteArray *tbuf = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(buf))->size_];
      while (read < buf->size_) {
        jint curRead = [fis readWithByteArray:tbuf withInt:read withInt:tbuf->size_ - read];
        if (curRead < 0) break;
        read += curRead;
      }
      for (jint i = 0; i < read; i++) *IOSByteArray_GetRef(buf, i) ^= IOSByteArray_Get(tbuf, i);
      return true;
    }
    @catch (JavaIoIOException *ioe) {
    }
    @finally {
      if (fis != nil) @try {
        [fis close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilRandomSource)

@implementation NetI2pUtilRandomSource_SecureRandomInit

- (instancetype)initWithByteArray:(IOSByteArray *)buf {
  NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(self, buf);
  return self;
}

- (void)run {
  IOSByteArray *buf2 = [IOSByteArray arrayWithLength:NetI2pUtilRandomSource_SecureRandomInit_SZ];
  @try {
    JavaSecuritySecureRandom *sr = JavaSecuritySecureRandom_getInstanceWithNSString_(@"SHA1PRNG");
    for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i += NetI2pUtilRandomSource_SecureRandomInit_SZ) {
      [((JavaSecuritySecureRandom *) nil_chk(sr)) nextBytesWithByteArray:buf2];
      @synchronized(buf_) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf2, 0, buf_, i, JavaLangMath_minWithInt_withInt_(NetI2pUtilRandomSource_SecureRandomInit_SZ, buf_->size_ - i));
      }
    }
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
  }
}

- (void)dealloc {
  RELEASE_(buf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SZ", "I", .constantValue.asInt = NetI2pUtilRandomSource_SecureRandomInit_SZ, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LNetI2pUtilRandomSource;" };
  static const J2ObjcClassInfo _NetI2pUtilRandomSource_SecureRandomInit = { "SecureRandomInit", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 2, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilRandomSource_SecureRandomInit;
}

@end

void NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(NetI2pUtilRandomSource_SecureRandomInit *self, IOSByteArray *buf) {
  NSObject_init(self);
  JreStrongAssign(&self->buf_, buf);
}

NetI2pUtilRandomSource_SecureRandomInit *new_NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(IOSByteArray *buf) {
  J2OBJC_NEW_IMPL(NetI2pUtilRandomSource_SecureRandomInit, initWithByteArray_, buf)
}

NetI2pUtilRandomSource_SecureRandomInit *create_NetI2pUtilRandomSource_SecureRandomInit_initWithByteArray_(IOSByteArray *buf) {
  J2OBJC_CREATE_IMPL(NetI2pUtilRandomSource_SecureRandomInit, initWithByteArray_, buf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilRandomSource_SecureRandomInit)
