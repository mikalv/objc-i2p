//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/I2PAppThread.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pUtilI2PAppThread")
#ifdef RESTRICT_NetI2pUtilI2PAppThread
#define INCLUDE_ALL_NetI2pUtilI2PAppThread 0
#else
#define INCLUDE_ALL_NetI2pUtilI2PAppThread 1
#endif
#undef RESTRICT_NetI2pUtilI2PAppThread

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pUtilI2PAppThread_) && (INCLUDE_ALL_NetI2pUtilI2PAppThread || defined(INCLUDE_NetI2pUtilI2PAppThread))
#define NetI2pUtilI2PAppThread_

#define RESTRICT_NetI2pUtilI2PThread 1
#define INCLUDE_NetI2pUtilI2PThread 1
#include "net/i2p/util/I2PThread.h"

@class JavaLangOutOfMemoryError;
@class JavaLangThreadGroup;
@protocol JavaLangRunnable;
@protocol NetI2pUtilI2PThread_OOMEventListener;

@interface NetI2pUtilI2PAppThread : NetI2pUtilI2PThread

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)r;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                      withNSString:(NSString *)name;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                      withNSString:(NSString *)name
                                       withBoolean:(jboolean)isDaemon;

- (instancetype __nonnull)initWithNSString:(NSString *)name;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                                 withJavaLangRunnable:(id<JavaLangRunnable>)r
                                         withNSString:(NSString *)name;

- (void)addOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr;

- (void)removeOOMEventThreadListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr;

#pragma mark Protected

- (void)fireOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilI2PAppThread)

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_init(NetI2pUtilI2PAppThread *self);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_init(void);

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_initWithNSString_(NetI2pUtilI2PAppThread *self, NSString *name);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r);

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r, NSString *name);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name);

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(NetI2pUtilI2PAppThread *self, id<JavaLangRunnable> r, NSString *name, jboolean isDaemon);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon);

FOUNDATION_EXPORT void NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(NetI2pUtilI2PAppThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name);

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *new_NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pUtilI2PAppThread *create_NetI2pUtilI2PAppThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilI2PAppThread)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pUtilI2PAppThread")
