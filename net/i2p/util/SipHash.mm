//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/SipHash.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/crypto/SipHashInline.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SipHash.h"

inline jlong NetI2pUtilSipHash_get_K0(void);
static jlong NetI2pUtilSipHash_K0;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilSipHash, K0, jlong)

inline jlong NetI2pUtilSipHash_get_K1(void);
static jlong NetI2pUtilSipHash_K1;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pUtilSipHash, K1, jlong)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilSipHash)

@implementation NetI2pUtilSipHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilSipHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)digestWithByteArray:(IOSByteArray *)data {
  return NetI2pUtilSipHash_digestWithByteArray_(data);
}

+ (jlong)digestWithByteArray:(IOSByteArray *)data
                     withInt:(jint)off
                     withInt:(jint)len {
  return NetI2pUtilSipHash_digestWithByteArray_withInt_withInt_(data, off, len);
}

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data {
  return NetI2pUtilSipHash_hashCodeWithByteArray_(data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(digestWithByteArray:);
  methods[2].selector = @selector(digestWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(hashCodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "K0", "J", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "K1", "J", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "digest", "[B", "[BII", "hashCode", &NetI2pUtilSipHash_K0, &NetI2pUtilSipHash_K1 };
  static const J2ObjcClassInfo _NetI2pUtilSipHash = { "SipHash", "net.i2p.util", ptrTable, methods, fields, 7, 0x401, 4, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilSipHash;
}

+ (void)initialize {
  if (self == [NetI2pUtilSipHash class]) {
    NetI2pUtilSipHash_K0 = [((NetI2pUtilRandomSource *) nil_chk(NetI2pUtilRandomSource_getInstance())) nextLong];
    NetI2pUtilSipHash_K1 = [((NetI2pUtilRandomSource *) nil_chk(NetI2pUtilRandomSource_getInstance())) nextLong];
    J2OBJC_SET_INITIALIZED(NetI2pUtilSipHash)
  }
}

@end

void NetI2pUtilSipHash_init(NetI2pUtilSipHash *self) {
  NSObject_init(self);
}

jlong NetI2pUtilSipHash_digestWithByteArray_(IOSByteArray *data) {
  NetI2pUtilSipHash_initialize();
  return NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(NetI2pUtilSipHash_K0, NetI2pUtilSipHash_K1, data);
}

jlong NetI2pUtilSipHash_digestWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint len) {
  NetI2pUtilSipHash_initialize();
  return NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_withInt_withInt_(NetI2pUtilSipHash_K0, NetI2pUtilSipHash_K1, data, off, len);
}

jint NetI2pUtilSipHash_hashCodeWithByteArray_(IOSByteArray *data) {
  NetI2pUtilSipHash_initialize();
  if (data == nil) return 0;
  return (jint) NetI2pCryptoSipHashInline_hash24WithLong_withLong_withByteArray_(NetI2pUtilSipHash_K0, NetI2pUtilSipHash_K1, data);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilSipHash)
