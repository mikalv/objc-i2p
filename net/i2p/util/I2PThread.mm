//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/I2PThread.java
//

#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/Throwable.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/SystemVersion.h"

inline id<JavaUtilSet> NetI2pUtilI2PThread_get__listeners(void);
static id<JavaUtilSet> NetI2pUtilI2PThread__listeners;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilI2PThread, _listeners, id<JavaUtilSet>)

@interface NetI2pUtilI2PThread_OOMEventListener : NSObject

@end

J2OBJC_INITIALIZED_DEFN(NetI2pUtilI2PThread)

@implementation NetI2pUtilI2PThread

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilI2PThread_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)name {
  NetI2pUtilI2PThread_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_(self, r);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                            withNSString:(NSString *)name {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(self, r, name);
  return self;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)r
                            withNSString:(NSString *)name
                             withBoolean:(jboolean)isDaemon {
  NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(self, r, name, isDaemon);
  return self;
}

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)g
                       withJavaLangRunnable:(id<JavaLangRunnable>)r {
  NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(self, g, r);
  return self;
}

- (instancetype)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)group
                       withJavaLangRunnable:(id<JavaLangRunnable>)r
                               withNSString:(NSString *)name {
  NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(self, group, r, name);
  return self;
}

- (void)start {
  @try {
    [super start];
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"ERROR: Thread could not be started: ", [self getName])];
    if (!(NetI2pUtilSystemVersion_isWindows() || NetI2pUtilSystemVersion_isAndroid())) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Check ulimit -u, /etc/security/limits.conf, or /proc/sys/kernel/threads-max"];
    }
    [oom printStackTrace];
    if (!(NetI2pUtilSystemVersion_isWindows() || NetI2pUtilSystemVersion_isAndroid())) @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Thread could not be started, Check ulimit -u, /etc/security/limits.conf, or /proc/sys/kernel/threads-max", oom);
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Thread could not be started", oom);
  }
}

- (void)run {
  @try {
    [super run];
  }
  @catch (JavaLangThrowable *t) {
    if ([t isKindOfClass:[JavaLangOutOfMemoryError class]]) {
      [self fireOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *) cast_chk(t, [JavaLangOutOfMemoryError class])];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Thread terminated unexpectedly: ", [self getName])];
      [t printStackTrace];
    }
  }
}

- (void)fireOOMWithJavaLangOutOfMemoryError:(JavaLangOutOfMemoryError *)oom {
  for (id<NetI2pUtilI2PThread_OOMEventListener> __strong listener in nil_chk(NetI2pUtilI2PThread__listeners)) [((id<NetI2pUtilI2PThread_OOMEventListener>) nil_chk(listener)) outOfMemoryWithJavaLangOutOfMemoryError:oom];
}

+ (void)addOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr {
  NetI2pUtilI2PThread_addOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(lsnr);
}

+ (void)removeOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener:(id<NetI2pUtilI2PThread_OOMEventListener>)lsnr {
  NetI2pUtilI2PThread_removeOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(lsnr);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithJavaLangRunnable:);
  methods[3].selector = @selector(initWithJavaLangRunnable:withNSString:);
  methods[4].selector = @selector(initWithJavaLangRunnable:withNSString:withBoolean:);
  methods[5].selector = @selector(initWithJavaLangThreadGroup:withJavaLangRunnable:);
  methods[6].selector = @selector(initWithJavaLangThreadGroup:withJavaLangRunnable:withNSString:);
  methods[7].selector = @selector(start);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(fireOOMWithJavaLangOutOfMemoryError:);
  methods[10].selector = @selector(addOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener:);
  methods[11].selector = @selector(removeOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_listeners", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaLangRunnable;", "LJavaLangRunnable;LNSString;", "LJavaLangRunnable;LNSString;Z", "LJavaLangThreadGroup;LJavaLangRunnable;", "LJavaLangThreadGroup;LJavaLangRunnable;LNSString;", "fireOOM", "LJavaLangOutOfMemoryError;", "addOOMEventListener", "LNetI2pUtilI2PThread_OOMEventListener;", "removeOOMEventListener", &NetI2pUtilI2PThread__listeners, "Ljava/util/Set<Lnet/i2p/util/I2PThread$OOMEventListener;>;" };
  static const J2ObjcClassInfo _NetI2pUtilI2PThread = { "I2PThread", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, 9, -1, -1, -1 };
  return &_NetI2pUtilI2PThread;
}

+ (void)initialize {
  if (self == [NetI2pUtilI2PThread class]) {
    JreStrongAssignAndConsume(&NetI2pUtilI2PThread__listeners, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
    J2OBJC_SET_INITIALIZED(NetI2pUtilI2PThread)
  }
}

@end

void NetI2pUtilI2PThread_init(NetI2pUtilI2PThread *self) {
  JavaLangThread_init(self);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, init)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, init)
}

void NetI2pUtilI2PThread_initWithNSString_(NetI2pUtilI2PThread *self, NSString *name) {
  JavaLangThread_initWithNSString_(self, name);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithNSString_, name)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithNSString_, name)
}

void NetI2pUtilI2PThread_initWithJavaLangRunnable_(NetI2pUtilI2PThread *self, id<JavaLangRunnable> r) {
  JavaLangThread_initWithJavaLangRunnable_(self, r);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_, r)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithJavaLangRunnable_(id<JavaLangRunnable> r) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_, r)
}

void NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(NetI2pUtilI2PThread *self, id<JavaLangRunnable> r, NSString *name) {
  JavaLangThread_initWithJavaLangRunnable_withNSString_(self, r, name);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_withNSString_, r, name)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_withNSString_, r, name)
}

void NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(NetI2pUtilI2PThread *self, id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  JavaLangThread_initWithJavaLangRunnable_withNSString_(self, r, name);
  [self setDaemonWithBoolean:isDaemon];
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_withNSString_withBoolean_, r, name, isDaemon)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_withBoolean_(id<JavaLangRunnable> r, NSString *name, jboolean isDaemon) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithJavaLangRunnable_withNSString_withBoolean_, r, name, isDaemon)
}

void NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(NetI2pUtilI2PThread *self, JavaLangThreadGroup *g, id<JavaLangRunnable> r) {
  JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(self, g, r);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(JavaLangThreadGroup *g, id<JavaLangRunnable> r) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithJavaLangThreadGroup_withJavaLangRunnable_, g, r)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_(JavaLangThreadGroup *g, id<JavaLangRunnable> r) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithJavaLangThreadGroup_withJavaLangRunnable_, g, r)
}

void NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(NetI2pUtilI2PThread *self, JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(self, group, r, name);
  [self setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
}

NetI2pUtilI2PThread *new_NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilI2PThread, initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_, group, r, name)
}

NetI2pUtilI2PThread *create_NetI2pUtilI2PThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JavaLangThreadGroup *group, id<JavaLangRunnable> r, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilI2PThread, initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_, group, r, name)
}

void NetI2pUtilI2PThread_addOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(id<NetI2pUtilI2PThread_OOMEventListener> lsnr) {
  NetI2pUtilI2PThread_initialize();
  [((id<JavaUtilSet>) nil_chk(NetI2pUtilI2PThread__listeners)) addWithId:lsnr];
}

void NetI2pUtilI2PThread_removeOOMEventListenerWithNetI2pUtilI2PThread_OOMEventListener_(id<NetI2pUtilI2PThread_OOMEventListener> lsnr) {
  NetI2pUtilI2PThread_initialize();
  [((id<JavaUtilSet>) nil_chk(NetI2pUtilI2PThread__listeners)) removeWithId:lsnr];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilI2PThread)

@implementation NetI2pUtilI2PThread_OOMEventListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(outOfMemoryWithJavaLangOutOfMemoryError:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "outOfMemory", "LJavaLangOutOfMemoryError;", "LNetI2pUtilI2PThread;" };
  static const J2ObjcClassInfo _NetI2pUtilI2PThread_OOMEventListener = { "OOMEventListener", "net.i2p.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pUtilI2PThread_OOMEventListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pUtilI2PThread_OOMEventListener)
