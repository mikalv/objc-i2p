//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ConcurrentHashSet.java
//

#include "J2ObjC_source.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/util/ConcurrentHashSet.h"

@interface NetI2pUtilConcurrentHashSet () {
 @public
  id<JavaUtilMap> _map_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilConcurrentHashSet, _map_, id<JavaUtilMap>)

inline id NetI2pUtilConcurrentHashSet_get_DUMMY(void);
static id NetI2pUtilConcurrentHashSet_DUMMY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pUtilConcurrentHashSet, DUMMY, id)

J2OBJC_INITIALIZED_DEFN(NetI2pUtilConcurrentHashSet)

@implementation NetI2pUtilConcurrentHashSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilConcurrentHashSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  NetI2pUtilConcurrentHashSet_initWithInt_(self, capacity);
  return self;
}

- (jboolean)addWithId:(id)o {
  return [((id<JavaUtilMap>) nil_chk(_map_)) putWithId:o withId:NetI2pUtilConcurrentHashSet_DUMMY] == nil;
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(_map_)) clear];
}

- (jboolean)containsWithId:(id)o {
  return [((id<JavaUtilMap>) nil_chk(_map_)) containsKeyWithId:o];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(_map_)) isEmpty];
}

- (jboolean)removeWithId:(id)o {
  return [((id<JavaUtilMap>) nil_chk(_map_)) removeWithId:o] != nil;
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(_map_)) size];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(_map_)) keySet])) iterator];
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean rv = false;
  for (id __strong e in nil_chk(c)) rv |= ([((id<JavaUtilMap>) nil_chk(_map_)) putWithId:e withId:NetI2pUtilConcurrentHashSet_DUMMY] == nil);
  return rv;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(_map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(addWithId:);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(removeWithId:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(iterator);
  methods[9].selector = @selector(addAllWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DUMMY", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "_map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LNSObject;", "(TE;)Z", "contains", "remove", "()Ljava/util/Iterator<TE;>;", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+TE;>;)Z", &NetI2pUtilConcurrentHashSet_DUMMY, "Ljava/util/Map<TE;Ljava/lang/Object;>;", "<E:Ljava/lang/Object;>Ljava/util/AbstractSet<TE;>;Ljava/util/Set<TE;>;" };
  static const J2ObjcClassInfo _NetI2pUtilConcurrentHashSet = { "ConcurrentHashSet", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, 12, -1 };
  return &_NetI2pUtilConcurrentHashSet;
}

+ (void)initialize {
  if (self == [NetI2pUtilConcurrentHashSet class]) {
    JreStrongAssignAndConsume(&NetI2pUtilConcurrentHashSet_DUMMY, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(NetI2pUtilConcurrentHashSet)
  }
}

@end

void NetI2pUtilConcurrentHashSet_init(NetI2pUtilConcurrentHashSet *self) {
  JavaUtilAbstractSet_init(self);
  JreStrongAssignAndConsume(&self->_map_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

NetI2pUtilConcurrentHashSet *new_NetI2pUtilConcurrentHashSet_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilConcurrentHashSet, init)
}

NetI2pUtilConcurrentHashSet *create_NetI2pUtilConcurrentHashSet_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilConcurrentHashSet, init)
}

void NetI2pUtilConcurrentHashSet_initWithInt_(NetI2pUtilConcurrentHashSet *self, jint capacity) {
  JavaUtilAbstractSet_init(self);
  JreStrongAssignAndConsume(&self->_map_, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(capacity));
}

NetI2pUtilConcurrentHashSet *new_NetI2pUtilConcurrentHashSet_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(NetI2pUtilConcurrentHashSet, initWithInt_, capacity)
}

NetI2pUtilConcurrentHashSet *create_NetI2pUtilConcurrentHashSet_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(NetI2pUtilConcurrentHashSet, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilConcurrentHashSet)
