//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/PasswordManager.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/util/PasswordManager.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pUtilPasswordManager () {
 @public
  NetI2pI2PAppContext *_context_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilPasswordManager, _context_, NetI2pI2PAppContext *)

NSString *NetI2pUtilPasswordManager_PROP_PW = @".password";
NSString *NetI2pUtilPasswordManager_PROP_B64 = @".b64";
NSString *NetI2pUtilPasswordManager_PROP_MD5 = @".md5";
NSString *NetI2pUtilPasswordManager_PROP_CRYPT = @".crypt";
NSString *NetI2pUtilPasswordManager_PROP_SHASH = @".shash";

@implementation NetI2pUtilPasswordManager

+ (jint)SALT_LENGTH {
  return NetI2pUtilPasswordManager_SALT_LENGTH;
}

+ (jint)SHASH_LENGTH {
  return NetI2pUtilPasswordManager_SHASH_LENGTH;
}

+ (NSString *)PROP_PW {
  return NetI2pUtilPasswordManager_PROP_PW;
}

+ (NSString *)PROP_B64 {
  return NetI2pUtilPasswordManager_PROP_B64;
}

+ (NSString *)PROP_MD5 {
  return NetI2pUtilPasswordManager_PROP_MD5;
}

+ (NSString *)PROP_CRYPT {
  return NetI2pUtilPasswordManager_PROP_CRYPT;
}

+ (NSString *)PROP_SHASH {
  return NetI2pUtilPasswordManager_PROP_SHASH;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pUtilPasswordManager_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (jboolean)checkWithNSString:(NSString *)realm
                 withNSString:(NSString *)user
                 withNSString:(NSString *)pw {
  return [self checkPlainWithNSString:realm withNSString:user withNSString:pw] || [self checkB64WithNSString:realm withNSString:user withNSString:pw] || [self checkHashWithNSString:realm withNSString:user withNSString:pw];
}

- (jboolean)checkPlainWithNSString:(NSString *)realm
                      withNSString:(NSString *)user
                      withNSString:(NSString *)pw {
  NSString *pfx = realm;
  if (user != nil && [user java_length] > 0) JreStrAppend(&pfx, "C$", '.', user);
  return [((NSString *) nil_chk(pw)) isEqual:[((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:JreStrcat("$$", pfx, NetI2pUtilPasswordManager_PROP_PW)]];
}

- (jboolean)checkB64WithNSString:(NSString *)realm
                    withNSString:(NSString *)user
                    withNSString:(NSString *)pw {
  NSString *pfx = realm;
  if (user != nil && [user java_length] > 0) JreStrAppend(&pfx, "C$", '.', user);
  NSString *b64 = [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:JreStrcat("$$", pfx, NetI2pUtilPasswordManager_PROP_B64)];
  if (b64 == nil) return false;
  return [b64 isEqual:NetI2pDataBase64_encodeWithByteArray_(NetI2pDataDataHelper_getUTF8WithNSString_(pw))];
}

- (jboolean)checkHashWithNSString:(NSString *)realm
                     withNSString:(NSString *)user
                     withNSString:(NSString *)pw {
  NSString *pfx = realm;
  if (user != nil && [user java_length] > 0) JreStrAppend(&pfx, "C$", '.', user);
  NSString *shash = [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:JreStrcat("$$", pfx, NetI2pUtilPasswordManager_PROP_SHASH)];
  if (shash == nil) return false;
  return [self checkHashWithNSString:shash withNSString:pw];
}

- (jboolean)checkHashWithNSString:(NSString *)shash
                     withNSString:(NSString *)pw {
  IOSByteArray *shashBytes = NetI2pDataBase64_decodeWithNSString_(shash);
  if (shashBytes == nil || shashBytes->size_ != NetI2pUtilPasswordManager_SHASH_LENGTH) return false;
  IOSByteArray *salt = [IOSByteArray arrayWithLength:NetI2pUtilPasswordManager_SALT_LENGTH];
  IOSByteArray *hash_ = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(shashBytes, 0, salt, 0, NetI2pUtilPasswordManager_SALT_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(shashBytes, NetI2pUtilPasswordManager_SALT_LENGTH, hash_, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
  IOSByteArray *pwHash = [((NetI2pDataSessionKey *) nil_chk([((NetI2pCryptoKeyGenerator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) keyGenerator])) generateSessionKeyWithByteArray:salt withByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(pw)])) getData];
  return NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(hash_, 0, pwHash, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
}

- (NSString *)createHashWithNSString:(NSString *)pw {
  IOSByteArray *salt = [IOSByteArray arrayWithLength:NetI2pUtilPasswordManager_SALT_LENGTH];
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) random])) nextBytesWithByteArray:salt];
  IOSByteArray *pwHash = [((NetI2pDataSessionKey *) nil_chk([((NetI2pCryptoKeyGenerator *) nil_chk([_context_ keyGenerator])) generateSessionKeyWithByteArray:salt withByteArray:NetI2pDataDataHelper_getUTF8WithNSString_(pw)])) getData];
  IOSByteArray *shashBytes = [IOSByteArray arrayWithLength:NetI2pUtilPasswordManager_SHASH_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(salt, 0, shashBytes, 0, NetI2pUtilPasswordManager_SALT_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pwHash, 0, shashBytes, NetI2pUtilPasswordManager_SALT_LENGTH, NetI2pDataSessionKey_KEYSIZE_BYTES);
  return NetI2pDataBase64_encodeWithByteArray_(shashBytes);
}

- (NSString *)getWithNSString:(NSString *)realm
                 withNSString:(NSString *)user {
  NSString *rv = [self getPlainWithNSString:realm withNSString:user];
  if (rv != nil) return rv;
  return [self getB64WithNSString:realm withNSString:user];
}

- (NSString *)getPlainWithNSString:(NSString *)realm
                      withNSString:(NSString *)user {
  NSString *pfx = realm;
  if (user != nil && [user java_length] > 0) JreStrAppend(&pfx, "C$", '.', user);
  return [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:JreStrcat("$$", pfx, NetI2pUtilPasswordManager_PROP_PW)];
}

- (NSString *)getB64WithNSString:(NSString *)realm
                    withNSString:(NSString *)user {
  NSString *pfx = realm;
  if (user != nil && [user java_length] > 0) JreStrAppend(&pfx, "C$", '.', user);
  NSString *b64 = [((NetI2pI2PAppContext *) nil_chk(_context_)) getPropertyWithNSString:JreStrcat("$$", pfx, NetI2pUtilPasswordManager_PROP_B64)];
  if (b64 == nil) return nil;
  return NetI2pDataBase64_decodeToStringWithNSString_(b64);
}

+ (NSString *)md5HexWithNSString:(NSString *)subrealm
                    withNSString:(NSString *)user
                    withNSString:(NSString *)pw {
  return NetI2pUtilPasswordManager_md5HexWithNSString_withNSString_withNSString_(subrealm, user, pw);
}

+ (NSString *)md5HexWithNSString:(NSString *)fullpw {
  return NetI2pUtilPasswordManager_md5HexWithNSString_(fullpw);
}

+ (IOSByteArray *)md5SumWithByteArray:(IOSByteArray *)data {
  return NetI2pUtilPasswordManager_md5SumWithByteArray_(data);
}

- (void)dealloc {
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(checkWithNSString:withNSString:withNSString:);
  methods[2].selector = @selector(checkPlainWithNSString:withNSString:withNSString:);
  methods[3].selector = @selector(checkB64WithNSString:withNSString:withNSString:);
  methods[4].selector = @selector(checkHashWithNSString:withNSString:withNSString:);
  methods[5].selector = @selector(checkHashWithNSString:withNSString:);
  methods[6].selector = @selector(createHashWithNSString:);
  methods[7].selector = @selector(getWithNSString:withNSString:);
  methods[8].selector = @selector(getPlainWithNSString:withNSString:);
  methods[9].selector = @selector(getB64WithNSString:withNSString:);
  methods[10].selector = @selector(md5HexWithNSString:withNSString:withNSString:);
  methods[11].selector = @selector(md5HexWithNSString:);
  methods[12].selector = @selector(md5SumWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SALT_LENGTH", "I", .constantValue.asInt = NetI2pUtilPasswordManager_SALT_LENGTH, 0x1c, -1, -1, -1, -1 },
    { "SHASH_LENGTH", "I", .constantValue.asInt = NetI2pUtilPasswordManager_SHASH_LENGTH, 0x1c, -1, -1, -1, -1 },
    { "PROP_PW", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 15, -1, -1 },
    { "PROP_B64", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 16, -1, -1 },
    { "PROP_MD5", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 17, -1, -1 },
    { "PROP_CRYPT", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 18, -1, -1 },
    { "PROP_SHASH", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "check", "LNSString;LNSString;LNSString;", "checkPlain", "checkB64", "checkHash", "LNSString;LNSString;", "createHash", "LNSString;", "get", "getPlain", "getB64", "md5Hex", "md5Sum", "[B", &NetI2pUtilPasswordManager_PROP_PW, &NetI2pUtilPasswordManager_PROP_B64, &NetI2pUtilPasswordManager_PROP_MD5, &NetI2pUtilPasswordManager_PROP_CRYPT, &NetI2pUtilPasswordManager_PROP_SHASH };
  static const J2ObjcClassInfo _NetI2pUtilPasswordManager = { "PasswordManager", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 13, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilPasswordManager;
}

@end

void NetI2pUtilPasswordManager_initWithNetI2pI2PAppContext_(NetI2pUtilPasswordManager *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
}

NetI2pUtilPasswordManager *new_NetI2pUtilPasswordManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pUtilPasswordManager, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pUtilPasswordManager *create_NetI2pUtilPasswordManager_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pUtilPasswordManager, initWithNetI2pI2PAppContext_, ctx)
}

NSString *NetI2pUtilPasswordManager_md5HexWithNSString_withNSString_withNSString_(NSString *subrealm, NSString *user, NSString *pw) {
  NetI2pUtilPasswordManager_initialize();
  NSString *fullpw = JreStrcat("$C$C$", user, ':', subrealm, ':', pw);
  return NetI2pUtilPasswordManager_md5HexWithNSString_(fullpw);
}

NSString *NetI2pUtilPasswordManager_md5HexWithNSString_(NSString *fullpw) {
  NetI2pUtilPasswordManager_initialize();
  IOSByteArray *data = NetI2pDataDataHelper_getUTF8WithNSString_(fullpw);
  IOSByteArray *sum = NetI2pUtilPasswordManager_md5SumWithByteArray_(data);
  if (sum != nil) return NetI2pDataDataHelper_toStringWithByteArray_(sum);
  return nil;
}

IOSByteArray *NetI2pUtilPasswordManager_md5SumWithByteArray_(IOSByteArray *data) {
  NetI2pUtilPasswordManager_initialize();
  @try {
    JavaSecurityMessageDigest *md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
    [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:data];
    return [md digest];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *nsae) {
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilPasswordManager)
