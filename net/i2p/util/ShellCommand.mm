//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/ShellCommand.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "net/i2p/util/I2PAppThread.h"
#include "net/i2p/util/ShellCommand.h"

@interface NetI2pUtilShellCommand () {
 @public
  JavaIoInputStream *_errorStream_;
  JavaIoInputStream *_inputStream_;
  JavaIoOutputStream *_outputStream_;
}

- (jboolean)executeSAWTWithId:(id)shellCommand
                      withInt:(jint)seconds;

- (jboolean)executeWithId:(id)shellCommand
              withBoolean:(jboolean)consumeOutput
              withBoolean:(jboolean)waitForExitStatus;

- (void)killStreams;

@end

J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand, _errorStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand, _inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand, _outputStream_, JavaIoOutputStream *)

inline jboolean NetI2pUtilShellCommand_get_DEBUG(void);
#define NetI2pUtilShellCommand_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, DEBUG, jboolean)

inline jboolean NetI2pUtilShellCommand_get_CONSUME_OUTPUT(void);
#define NetI2pUtilShellCommand_CONSUME_OUTPUT true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, CONSUME_OUTPUT, jboolean)

inline jboolean NetI2pUtilShellCommand_get_NO_CONSUME_OUTPUT(void);
#define NetI2pUtilShellCommand_NO_CONSUME_OUTPUT false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, NO_CONSUME_OUTPUT, jboolean)

inline jboolean NetI2pUtilShellCommand_get_WAIT_FOR_EXIT_STATUS(void);
#define NetI2pUtilShellCommand_WAIT_FOR_EXIT_STATUS true
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, WAIT_FOR_EXIT_STATUS, jboolean)

inline jboolean NetI2pUtilShellCommand_get_NO_WAIT_FOR_EXIT_STATUS(void);
#define NetI2pUtilShellCommand_NO_WAIT_FOR_EXIT_STATUS false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, NO_WAIT_FOR_EXIT_STATUS, jboolean)

inline jint NetI2pUtilShellCommand_get_BUFFER_SIZE(void);
#define NetI2pUtilShellCommand_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pUtilShellCommand, BUFFER_SIZE, jint)

__attribute__((unused)) static jboolean NetI2pUtilShellCommand_executeSAWTWithId_withInt_(NetI2pUtilShellCommand *self, id shellCommand, jint seconds);

__attribute__((unused)) static jboolean NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(NetI2pUtilShellCommand *self, id shellCommand, jboolean consumeOutput, jboolean waitForExitStatus);

__attribute__((unused)) static void NetI2pUtilShellCommand_killStreams(NetI2pUtilShellCommand *self);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilShellCommand__Annotations$6(void);

@interface NetI2pUtilShellCommand_Result : NSObject {
 @public
  volatile_jboolean commandSuccessful_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilShellCommand_Result)

__attribute__((unused)) static void NetI2pUtilShellCommand_Result_init(NetI2pUtilShellCommand_Result *self);

__attribute__((unused)) static NetI2pUtilShellCommand_Result *new_NetI2pUtilShellCommand_Result_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilShellCommand_Result *create_NetI2pUtilShellCommand_Result_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilShellCommand_Result)

@interface NetI2pUtilShellCommand_CommandThread : NetI2pUtilI2PAppThread {
 @public
  NetI2pUtilShellCommand *this$0_;
  jboolean consumeOutput_;
  id shellCommand_;
  NetI2pUtilShellCommand_Result *result_;
}

- (instancetype)initWithNetI2pUtilShellCommand:(NetI2pUtilShellCommand *)outer$
                                        withId:(id)shellCommand
                                   withBoolean:(jboolean)consumeOutput
             withNetI2pUtilShellCommand_Result:(NetI2pUtilShellCommand_Result *)result;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilShellCommand_CommandThread)

J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand_CommandThread, shellCommand_, id)
J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand_CommandThread, result_, NetI2pUtilShellCommand_Result *)

__attribute__((unused)) static void NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand_CommandThread *self, NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result);

__attribute__((unused)) static NetI2pUtilShellCommand_CommandThread *new_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilShellCommand_CommandThread *create_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilShellCommand_CommandThread)

@interface NetI2pUtilShellCommand_StreamConsumer : NetI2pUtilI2PAppThread {
 @public
  JavaIoBufferedReader *bufferedReader_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilShellCommand_StreamConsumer)

J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand_StreamConsumer, bufferedReader_, JavaIoBufferedReader *)

__attribute__((unused)) static void NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(NetI2pUtilShellCommand_StreamConsumer *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static NetI2pUtilShellCommand_StreamConsumer *new_NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilShellCommand_StreamConsumer *create_NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(JavaIoInputStream *inputStream);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilShellCommand_StreamConsumer)

@interface NetI2pUtilShellCommand_StreamReader : NetI2pUtilI2PAppThread {
 @public
  JavaIoBufferedReader *bufferedReader_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilShellCommand_StreamReader)

J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand_StreamReader, bufferedReader_, JavaIoBufferedReader *)

__attribute__((unused)) static void NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(NetI2pUtilShellCommand_StreamReader *self, JavaIoInputStream *inputStream);

__attribute__((unused)) static NetI2pUtilShellCommand_StreamReader *new_NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilShellCommand_StreamReader *create_NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilShellCommand_StreamReader)

@interface NetI2pUtilShellCommand_StreamWriter : NetI2pUtilI2PAppThread {
 @public
  JavaIoBufferedWriter *bufferedWriter_;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilShellCommand_StreamWriter)

J2OBJC_FIELD_SETTER(NetI2pUtilShellCommand_StreamWriter, bufferedWriter_, JavaIoBufferedWriter *)

__attribute__((unused)) static void NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(NetI2pUtilShellCommand_StreamWriter *self, JavaIoOutputStream *outputStream);

__attribute__((unused)) static NetI2pUtilShellCommand_StreamWriter *new_NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilShellCommand_StreamWriter *create_NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilShellCommand_StreamWriter)

@implementation NetI2pUtilShellCommand

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilShellCommand_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithNSString:(NSString *)shellCommand {
  NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(self, shellCommand, NetI2pUtilShellCommand_NO_CONSUME_OUTPUT, NetI2pUtilShellCommand_NO_WAIT_FOR_EXIT_STATUS);
}

- (jboolean)executeAndWaitWithNSString:(NSString *)shellCommand {
  return NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(self, shellCommand, NetI2pUtilShellCommand_NO_CONSUME_OUTPUT, NetI2pUtilShellCommand_WAIT_FOR_EXIT_STATUS);
}

- (jboolean)executeAndWaitTimedWithNSString:(NSString *)shellCommand
                                    withInt:(jint)seconds {
  NetI2pUtilShellCommand_Result *result = create_NetI2pUtilShellCommand_Result_init();
  JavaLangThread *commandThread = create_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(self, shellCommand, NetI2pUtilShellCommand_NO_CONSUME_OUTPUT, result);
  [commandThread start];
  @try {
    if (seconds > 0) {
      [commandThread joinWithLong:seconds * 1000];
      if ([commandThread isAlive]) return true;
    }
  }
  @catch (JavaLangInterruptedException *e) {
  }
  return JreLoadVolatileBoolean(&result->commandSuccessful_);
}

- (void)executeSilentWithNSString:(NSString *)shellCommand {
}

- (jboolean)executeSilentAndWaitWithNSString:(NSString *)shellCommand {
  return NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(self, shellCommand, NetI2pUtilShellCommand_CONSUME_OUTPUT, NetI2pUtilShellCommand_WAIT_FOR_EXIT_STATUS);
}

- (jboolean)executeSilentAndWaitTimedWithNSString:(NSString *)shellCommand
                                          withInt:(jint)seconds {
  return NetI2pUtilShellCommand_executeSAWTWithId_withInt_(self, shellCommand, seconds);
}

- (jboolean)executeSilentAndWaitTimedWithNSStringArray:(IOSObjectArray *)commandArray
                                               withInt:(jint)seconds {
  return NetI2pUtilShellCommand_executeSAWTWithId_withInt_(self, commandArray, seconds);
}

- (jboolean)executeSAWTWithId:(id)shellCommand
                      withInt:(jint)seconds {
  return NetI2pUtilShellCommand_executeSAWTWithId_withInt_(self, shellCommand, seconds);
}

- (JavaIoInputStream *)getErrorStream {
  return _errorStream_;
}

- (JavaIoInputStream *)getInputStream {
  return _inputStream_;
}

- (JavaIoOutputStream *)getOutputStream {
  return _outputStream_;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilShellCommand_mainWithNSStringArray_(args);
}

- (jboolean)executeWithId:(id)shellCommand
              withBoolean:(jboolean)consumeOutput
              withBoolean:(jboolean)waitForExitStatus {
  return NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(self, shellCommand, consumeOutput, waitForExitStatus);
}

- (void)killStreams {
  NetI2pUtilShellCommand_killStreams(self);
}

- (void)dealloc {
  RELEASE_(_errorStream_);
  RELEASE_(_inputStream_);
  RELEASE_(_outputStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, 2, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, -1, 4, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, 7, -1 },
    { NULL, "V", 0x1, 8, 1, 9, -1, 10, -1 },
    { NULL, "Z", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 0, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithNSString:);
  methods[2].selector = @selector(executeAndWaitWithNSString:);
  methods[3].selector = @selector(executeAndWaitTimedWithNSString:withInt:);
  methods[4].selector = @selector(executeSilentWithNSString:);
  methods[5].selector = @selector(executeSilentAndWaitWithNSString:);
  methods[6].selector = @selector(executeSilentAndWaitTimedWithNSString:withInt:);
  methods[7].selector = @selector(executeSilentAndWaitTimedWithNSStringArray:withInt:);
  methods[8].selector = @selector(executeSAWTWithId:withInt:);
  methods[9].selector = @selector(getErrorStream);
  methods[10].selector = @selector(getInputStream);
  methods[11].selector = @selector(getOutputStream);
  methods[12].selector = @selector(mainWithNSStringArray:);
  methods[13].selector = @selector(executeWithId:withBoolean:withBoolean:);
  methods[14].selector = @selector(killStreams);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = NetI2pUtilShellCommand_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "CONSUME_OUTPUT", "Z", .constantValue.asBOOL = NetI2pUtilShellCommand_CONSUME_OUTPUT, 0x1a, -1, -1, -1, -1 },
    { "NO_CONSUME_OUTPUT", "Z", .constantValue.asBOOL = NetI2pUtilShellCommand_NO_CONSUME_OUTPUT, 0x1a, -1, -1, -1, -1 },
    { "WAIT_FOR_EXIT_STATUS", "Z", .constantValue.asBOOL = NetI2pUtilShellCommand_WAIT_FOR_EXIT_STATUS, 0x1a, -1, -1, -1, -1 },
    { "NO_WAIT_FOR_EXIT_STATUS", "Z", .constantValue.asBOOL = NetI2pUtilShellCommand_NO_WAIT_FOR_EXIT_STATUS, 0x1a, -1, -1, -1, -1 },
    { "_errorStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_inputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outputStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = NetI2pUtilShellCommand_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LNSString;", (void *)&NetI2pUtilShellCommand__Annotations$0, "executeAndWait", (void *)&NetI2pUtilShellCommand__Annotations$1, "executeAndWaitTimed", "LNSString;I", (void *)&NetI2pUtilShellCommand__Annotations$2, "executeSilent", "LJavaIoIOException;", (void *)&NetI2pUtilShellCommand__Annotations$3, "executeSilentAndWait", "executeSilentAndWaitTimed", "[LNSString;I", "executeSAWT", "LNSObject;I", (void *)&NetI2pUtilShellCommand__Annotations$4, (void *)&NetI2pUtilShellCommand__Annotations$5, (void *)&NetI2pUtilShellCommand__Annotations$6, "main", "[LNSString;", "LNSObject;ZZ", "LNetI2pUtilShellCommand_Result;LNetI2pUtilShellCommand_CommandThread;LNetI2pUtilShellCommand_StreamConsumer;LNetI2pUtilShellCommand_StreamReader;LNetI2pUtilShellCommand_StreamWriter;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand = { "ShellCommand", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 15, 9, -1, 22, -1, -1, -1 };
  return &_NetI2pUtilShellCommand;
}

@end

void NetI2pUtilShellCommand_init(NetI2pUtilShellCommand *self) {
  NSObject_init(self);
}

NetI2pUtilShellCommand *new_NetI2pUtilShellCommand_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand, init)
}

NetI2pUtilShellCommand *create_NetI2pUtilShellCommand_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand, init)
}

jboolean NetI2pUtilShellCommand_executeSAWTWithId_withInt_(NetI2pUtilShellCommand *self, id shellCommand, jint seconds) {
  NSString *name = nil;
  jlong begin = 0;
  NetI2pUtilShellCommand_Result *result = create_NetI2pUtilShellCommand_Result_init();
  JavaLangThread *commandThread = create_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(self, shellCommand, NetI2pUtilShellCommand_CONSUME_OUTPUT, result);
  [commandThread start];
  @try {
    if (seconds > 0) {
      [commandThread joinWithLong:seconds * 1000];
      if ([commandThread isAlive]) {
        return true;
      }
    }
  }
  @catch (JavaLangInterruptedException *e) {
  }
  return JreLoadVolatileBoolean(&result->commandSuccessful_);
}

void NetI2pUtilShellCommand_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilShellCommand_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ <= 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: ShellCommand commandline"];
    return;
  }
  return;
}

jboolean NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(NetI2pUtilShellCommand *self, id shellCommand, jboolean consumeOutput, jboolean waitForExitStatus) {
  return true;
}

void NetI2pUtilShellCommand_killStreams(NetI2pUtilShellCommand *self) {
  @try {
    [((JavaIoInputStream *) nil_chk(self->_errorStream_)) close];
  }
  @catch (JavaIoIOException *e) {
  }
  @try {
    [((JavaIoInputStream *) nil_chk(self->_inputStream_)) close];
  }
  @catch (JavaIoIOException *e1) {
  }
  @try {
    [((JavaIoOutputStream *) nil_chk(self->_outputStream_)) close];
  }
  @catch (JavaIoIOException *e2) {
  }
  JreStrongAssign(&self->_errorStream_, nil);
  JreStrongAssign(&self->_inputStream_, nil);
  JreStrongAssign(&self->_outputStream_, nil);
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilShellCommand__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand)

@implementation NetI2pUtilShellCommand_Result

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilShellCommand_Result_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "commandSuccessful_", "Z", .constantValue.asLong = 0, 0x41, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pUtilShellCommand;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand_Result = { "Result", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_NetI2pUtilShellCommand_Result;
}

@end

void NetI2pUtilShellCommand_Result_init(NetI2pUtilShellCommand_Result *self) {
  NSObject_init(self);
}

NetI2pUtilShellCommand_Result *new_NetI2pUtilShellCommand_Result_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand_Result, init)
}

NetI2pUtilShellCommand_Result *create_NetI2pUtilShellCommand_Result_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand_Result, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand_Result)

@implementation NetI2pUtilShellCommand_CommandThread

- (instancetype)initWithNetI2pUtilShellCommand:(NetI2pUtilShellCommand *)outer$
                                        withId:(id)shellCommand
                                   withBoolean:(jboolean)consumeOutput
             withNetI2pUtilShellCommand_Result:(NetI2pUtilShellCommand_Result *)result {
  NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(self, outer$, shellCommand, consumeOutput, result);
  return self;
}

- (void)run {
  JreAssignVolatileBoolean(&((NetI2pUtilShellCommand_Result *) nil_chk(result_))->commandSuccessful_, NetI2pUtilShellCommand_executeWithId_withBoolean_withBoolean_(this$0_, shellCommand_, consumeOutput_, NetI2pUtilShellCommand_WAIT_FOR_EXIT_STATUS));
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(shellCommand_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pUtilShellCommand:withId:withBoolean:withNetI2pUtilShellCommand_Result:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pUtilShellCommand;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "consumeOutput_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shellCommand_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "result_", "LNetI2pUtilShellCommand_Result;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;ZLNetI2pUtilShellCommand_Result;", "LNetI2pUtilShellCommand;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand_CommandThread = { "CommandThread", "net.i2p.util", ptrTable, methods, fields, 7, 0x2, 2, 4, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilShellCommand_CommandThread;
}

@end

void NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand_CommandThread *self, NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result) {
  JreStrongAssign(&self->this$0_, outer$);
  NetI2pUtilI2PAppThread_initWithNSString_(self, @"ShellCommand Executor");
  JreStrongAssign(&self->shellCommand_, shellCommand);
  self->consumeOutput_ = consumeOutput;
  JreStrongAssign(&self->result_, result);
}

NetI2pUtilShellCommand_CommandThread *new_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result) {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand_CommandThread, initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_, outer$, shellCommand, consumeOutput, result)
}

NetI2pUtilShellCommand_CommandThread *create_NetI2pUtilShellCommand_CommandThread_initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_(NetI2pUtilShellCommand *outer$, id shellCommand, jboolean consumeOutput, NetI2pUtilShellCommand_Result *result) {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand_CommandThread, initWithNetI2pUtilShellCommand_withId_withBoolean_withNetI2pUtilShellCommand_Result_, outer$, shellCommand, consumeOutput, result)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand_CommandThread)

@implementation NetI2pUtilShellCommand_StreamConsumer

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(self, inputStream);
  return self;
}

- (void)run {
  @try {
    while (([((JavaIoBufferedReader *) nil_chk(bufferedReader_)) readLine]) != nil) {
    }
  }
  @catch (JavaIoIOException *e) {
  }
}

- (void)dealloc {
  RELEASE_(bufferedReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedReader_", "LJavaIoBufferedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LNetI2pUtilShellCommand;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand_StreamConsumer = { "StreamConsumer", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilShellCommand_StreamConsumer;
}

@end

void NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(NetI2pUtilShellCommand_StreamConsumer *self, JavaIoInputStream *inputStream) {
  NetI2pUtilI2PAppThread_initWithNSString_(self, @"ShellCommand Consumer");
  JavaIoInputStreamReader *inputStreamReader = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(inputStream);
  JreStrongAssignAndConsume(&self->bufferedReader_, new_JavaIoBufferedReader_initWithJavaIoReader_(inputStreamReader));
}

NetI2pUtilShellCommand_StreamConsumer *new_NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand_StreamConsumer, initWithJavaIoInputStream_, inputStream)
}

NetI2pUtilShellCommand_StreamConsumer *create_NetI2pUtilShellCommand_StreamConsumer_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand_StreamConsumer, initWithJavaIoInputStream_, inputStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand_StreamConsumer)

@implementation NetI2pUtilShellCommand_StreamReader

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(self, inputStream);
  return self;
}

- (void)run {
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:NetI2pUtilShellCommand_BUFFER_SIZE];
  jint bytesRead;
  @try {
    while (true) while ((bytesRead = [((JavaIoBufferedReader *) nil_chk(bufferedReader_)) readWithCharArray:buffer withInt:0 withInt:NetI2pUtilShellCommand_BUFFER_SIZE]) != -1) for (jint i = 0; i < bytesRead; i++) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithChar:IOSCharArray_Get(buffer, i)];
  }
  @catch (JavaIoIOException *e) {
  }
}

- (void)dealloc {
  RELEASE_(bufferedReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedReader_", "LJavaIoBufferedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LNetI2pUtilShellCommand;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand_StreamReader = { "StreamReader", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilShellCommand_StreamReader;
}

@end

void NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(NetI2pUtilShellCommand_StreamReader *self, JavaIoInputStream *inputStream) {
  NetI2pUtilI2PAppThread_initWithNSString_(self, @"ShellCommand Reader");
  JavaIoInputStreamReader *inputStreamReader = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(inputStream);
  JreStrongAssignAndConsume(&self->bufferedReader_, new_JavaIoBufferedReader_initWithJavaIoReader_(inputStreamReader));
}

NetI2pUtilShellCommand_StreamReader *new_NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand_StreamReader, initWithJavaIoInputStream_, inputStream)
}

NetI2pUtilShellCommand_StreamReader *create_NetI2pUtilShellCommand_StreamReader_initWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand_StreamReader, initWithJavaIoInputStream_, inputStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand_StreamReader)

@implementation NetI2pUtilShellCommand_StreamWriter

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(self, outputStream);
  return self;
}

- (void)run {
  JavaIoBufferedReader *in = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
  @try {
    while (true) {
      [((JavaIoBufferedWriter *) nil_chk(bufferedWriter_)) writeWithNSString:[in readLine]];
      [bufferedWriter_ writeWithNSString:@"\x0d\n"];
      [bufferedWriter_ flush];
    }
  }
  @catch (JavaIoIOException *e) {
    @try {
      [((JavaIoBufferedWriter *) nil_chk(bufferedWriter_)) flush];
    }
    @catch (JavaIoIOException *e1) {
    }
  }
}

- (void)dealloc {
  RELEASE_(bufferedWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedWriter_", "LJavaIoBufferedWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;", "LNetI2pUtilShellCommand;" };
  static const J2ObjcClassInfo _NetI2pUtilShellCommand_StreamWriter = { "StreamWriter", "net.i2p.util", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pUtilShellCommand_StreamWriter;
}

@end

void NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(NetI2pUtilShellCommand_StreamWriter *self, JavaIoOutputStream *outputStream) {
  NetI2pUtilI2PAppThread_initWithNSString_(self, @"ShellCommand Writer");
  JavaIoOutputStreamWriter *outputStreamWriter = create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(outputStream);
  JreStrongAssignAndConsume(&self->bufferedWriter_, new_JavaIoBufferedWriter_initWithJavaIoWriter_(outputStreamWriter));
}

NetI2pUtilShellCommand_StreamWriter *new_NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream) {
  J2OBJC_NEW_IMPL(NetI2pUtilShellCommand_StreamWriter, initWithJavaIoOutputStream_, outputStream)
}

NetI2pUtilShellCommand_StreamWriter *create_NetI2pUtilShellCommand_StreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream) {
  J2OBJC_CREATE_IMPL(NetI2pUtilShellCommand_StreamWriter, initWithJavaIoOutputStream_, outputStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilShellCommand_StreamWriter)
