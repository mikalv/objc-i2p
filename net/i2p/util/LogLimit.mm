//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/LogLimit.java
//

#include "J2ObjC_source.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogLimit.h"

@interface NetI2pUtilLogLimit () {
 @public
  NSString *_rootName_;
  jint _limit_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLogLimit, _rootName_, NSString *)

@implementation NetI2pUtilLogLimit

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)limit {
  NetI2pUtilLogLimit_initWithNSString_withInt_(self, name, limit);
  return self;
}

- (NSString *)getRootName {
  return _rootName_;
}

- (jint)getLimit {
  return _limit_;
}

- (void)setLimitWithInt:(jint)limit {
  _limit_ = limit;
}

- (jboolean)matchesWithNetI2pUtilLog:(NetI2pUtilLog *)log {
  NSString *name = [((NetI2pUtilLog *) nil_chk(log)) getName];
  if (name == nil) return false;
  return [name java_hasPrefix:_rootName_] && ([name java_length] == [((NSString *) nil_chk(_rootName_)) java_length] || [name charAtWithInt:[_rootName_ java_length]] == '.');
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(_rootName_)) hash]);
}

- (jboolean)isEqual:(id)o {
  if (o == nil || !([o isKindOfClass:[NetI2pUtilLogLimit class]])) return false;
  return [((NSString *) nil_chk(_rootName_)) isEqual:[((NetI2pUtilLogLimit *) cast_chk(o, [NetI2pUtilLogLimit class])) getRootName]];
}

- (void)dealloc {
  RELEASE_(_rootName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(getRootName);
  methods[2].selector = @selector(getLimit);
  methods[3].selector = @selector(setLimitWithInt:);
  methods[4].selector = @selector(matchesWithNetI2pUtilLog:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_rootName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "setLimit", "I", "matches", "LNetI2pUtilLog;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _NetI2pUtilLogLimit = { "LogLimit", "net.i2p.util", ptrTable, methods, fields, 7, 0x0, 7, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilLogLimit;
}

@end

void NetI2pUtilLogLimit_initWithNSString_withInt_(NetI2pUtilLogLimit *self, NSString *name, jint limit) {
  NSObject_init(self);
  JreStrongAssign(&self->_rootName_, name);
  self->_limit_ = limit;
}

NetI2pUtilLogLimit *new_NetI2pUtilLogLimit_initWithNSString_withInt_(NSString *name, jint limit) {
  J2OBJC_NEW_IMPL(NetI2pUtilLogLimit, initWithNSString_withInt_, name, limit)
}

NetI2pUtilLogLimit *create_NetI2pUtilLogLimit_initWithNSString_withInt_(NSString *name, jint limit) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLogLimit, initWithNSString_withInt_, name, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLogLimit)
