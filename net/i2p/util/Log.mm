//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/Log.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/Locale.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/LogRecord.h"

@class NetI2pUtilLog_LogScope;

@interface NetI2pUtilLog () {
 @public
  IOSClass *_class_;
  NSString *_className_;
  NSString *_name_;
  jint _minPriority_;
  NetI2pUtilLog_LogScope *_scope_;
  NetI2pUtilLogManager *_manager_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilLog, _class_, IOSClass *)
J2OBJC_FIELD_SETTER(NetI2pUtilLog, _className_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilLog, _name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pUtilLog, _scope_, NetI2pUtilLog_LogScope *)
J2OBJC_FIELD_SETTER(NetI2pUtilLog, _manager_, NetI2pUtilLogManager *)

@interface NetI2pUtilLog_LogScope : NSObject {
 @public
  NSString *_scopeCache_;
}

- (instancetype)initWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)cls;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pUtilLog_LogScope)

J2OBJC_FIELD_SETTER(NetI2pUtilLog_LogScope, _scopeCache_, NSString *)

__attribute__((unused)) static void NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NetI2pUtilLog_LogScope *self, NSString *name, IOSClass *cls);

__attribute__((unused)) static NetI2pUtilLog_LogScope *new_NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NSString *name, IOSClass *cls) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pUtilLog_LogScope *create_NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NSString *name, IOSClass *cls);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pUtilLog_LogScope)

NSString *NetI2pUtilLog_STR_DEBUG = @"DEBUG";
NSString *NetI2pUtilLog_STR_INFO = @"INFO";
NSString *NetI2pUtilLog_STR_WARN = @"WARN";
NSString *NetI2pUtilLog_STR_ERROR = @"ERROR";
NSString *NetI2pUtilLog_STR_CRIT = @"CRIT";

@implementation NetI2pUtilLog

+ (jint)DEBUG_ {
  return NetI2pUtilLog_DEBUG;
}

+ (jint)INFO {
  return NetI2pUtilLog_INFO;
}

+ (jint)WARN {
  return NetI2pUtilLog_WARN;
}

+ (jint)ERROR {
  return NetI2pUtilLog_ERROR;
}

+ (jint)CRIT {
  return NetI2pUtilLog_CRIT;
}

+ (NSString *)STR_DEBUG {
  return NetI2pUtilLog_STR_DEBUG;
}

+ (NSString *)STR_INFO {
  return NetI2pUtilLog_STR_INFO;
}

+ (NSString *)STR_WARN {
  return NetI2pUtilLog_STR_WARN;
}

+ (NSString *)STR_ERROR {
  return NetI2pUtilLog_STR_ERROR;
}

+ (NSString *)STR_CRIT {
  return NetI2pUtilLog_STR_CRIT;
}

+ (jint)getLevelWithNSString:(NSString *)level {
  return NetI2pUtilLog_getLevelWithNSString_(level);
}

+ (NSString *)toLevelStringWithInt:(jint)level {
  return NetI2pUtilLog_toLevelStringWithInt_(level);
}

- (instancetype)initWithIOSClass:(IOSClass *)cls {
  NetI2pUtilLog_initWithIOSClass_(self, cls);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name {
  NetI2pUtilLog_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                withIOSClass:(IOSClass *)cls {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(self, manager, cls);
  return self;
}

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                withNSString:(NSString *)name {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(self, manager, name);
  return self;
}

- (instancetype)initWithNetI2pUtilLogManager:(NetI2pUtilLogManager *)manager
                                withIOSClass:(IOSClass *)cls
                                withNSString:(NSString *)name {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, manager, cls, name);
  return self;
}

- (void)logWithInt:(jint)priority
      withNSString:(NSString *)msg {
  if (priority >= _minPriority_) {
    [((NetI2pUtilLogManager *) nil_chk(_manager_)) addRecordWithNetI2pUtilLogRecord:create_NetI2pUtilLogRecord_initWithIOSClass_withNSString_withNSString_withInt_withNSString_withJavaLangThrowable_(_class_, _name_, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], priority, msg, nil)];
  }
}

- (void)logWithInt:(jint)priority
      withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)t {
  if (priority >= _minPriority_) {
    [((NetI2pUtilLogManager *) nil_chk(_manager_)) addRecordWithNetI2pUtilLogRecord:create_NetI2pUtilLogRecord_initWithIOSClass_withNSString_withNSString_withInt_withNSString_withJavaLangThrowable_(_class_, _name_, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], priority, msg, t)];
  }
}

- (void)logAlwaysWithInt:(jint)priority
            withNSString:(NSString *)msg {
  [((NetI2pUtilLogManager *) nil_chk(_manager_)) addRecordWithNetI2pUtilLogRecord:create_NetI2pUtilLogRecord_initWithIOSClass_withNSString_withNSString_withInt_withNSString_withJavaLangThrowable_(_class_, _name_, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], priority, msg, nil)];
}

- (void)debugWithNSString:(NSString *)msg {
  [self logWithInt:NetI2pUtilLog_DEBUG withNSString:msg];
}

- (void)debugWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithInt:NetI2pUtilLog_DEBUG withNSString:msg withJavaLangThrowable:t];
}

- (void)infoWithNSString:(NSString *)msg {
  [self logWithInt:NetI2pUtilLog_INFO withNSString:msg];
}

- (void)infoWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithInt:NetI2pUtilLog_INFO withNSString:msg withJavaLangThrowable:t];
}

- (void)warnWithNSString:(NSString *)msg {
  [self logWithInt:NetI2pUtilLog_WARN withNSString:msg];
}

- (void)warnWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithInt:NetI2pUtilLog_WARN withNSString:msg withJavaLangThrowable:t];
}

- (void)errorWithNSString:(NSString *)msg {
  [self logWithInt:NetI2pUtilLog_ERROR withNSString:msg];
}

- (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithInt:NetI2pUtilLog_ERROR withNSString:msg withJavaLangThrowable:t];
}

- (jint)getMinimumPriority {
  return _minPriority_;
}

- (void)setMinimumPriorityWithInt:(jint)priority {
  _minPriority_ = priority;
}

- (jboolean)shouldLogWithInt:(jint)priority {
  return priority >= _minPriority_;
}

- (jboolean)shouldDebug {
  return [self shouldLogWithInt:NetI2pUtilLog_DEBUG];
}

- (jboolean)shouldInfo {
  return [self shouldLogWithInt:NetI2pUtilLog_INFO];
}

- (jboolean)shouldWarn {
  return [self shouldLogWithInt:NetI2pUtilLog_WARN];
}

- (jboolean)shouldError {
  return [self shouldLogWithInt:NetI2pUtilLog_ERROR];
}

- (void)logCloseLoopWithNSObjectArray:(IOSObjectArray *)desc {
  [self logCloseLoopWithInt:NetI2pUtilLog_DEBUG withNSObjectArray:desc];
}

- (void)logCloseLoopWithInt:(jint)level
          withNSObjectArray:(IOSObjectArray *)desc {
  if (![self shouldLogWithInt:level]) return;
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  [builder appendWithNSString:@"close() loop in"];
  {
    IOSObjectArray *a__ = desc;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      [builder appendWithNSString:@" "];
      [builder appendWithNSString:NSString_java_valueOf_(o)];
    }
  }
  JavaLangException *e = create_JavaLangException_initWithNSString_(@"check stack trace");
  [self logWithInt:level withNSString:[builder description] withJavaLangThrowable:e];
}

- (NSString *)getName {
  if (_className_ != nil) return _className_;
  return _name_;
}

- (id)getScope {
  return _scope_;
}

+ (NSString *)getScopeWithNSString:(NSString *)name
                      withIOSClass:(IOSClass *)cls {
  return NetI2pUtilLog_getScopeWithNSString_withIOSClass_(name, cls);
}

- (void)dealloc {
  RELEASE_(_class_);
  RELEASE_(_className_);
  RELEASE_(_name_);
  RELEASE_(_scope_);
  RELEASE_(_manager_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 22, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 25, 26, -1, 27, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getLevelWithNSString:);
  methods[1].selector = @selector(toLevelStringWithInt:);
  methods[2].selector = @selector(initWithIOSClass:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNetI2pUtilLogManager:withIOSClass:);
  methods[5].selector = @selector(initWithNetI2pUtilLogManager:withNSString:);
  methods[6].selector = @selector(initWithNetI2pUtilLogManager:withIOSClass:withNSString:);
  methods[7].selector = @selector(logWithInt:withNSString:);
  methods[8].selector = @selector(logWithInt:withNSString:withJavaLangThrowable:);
  methods[9].selector = @selector(logAlwaysWithInt:withNSString:);
  methods[10].selector = @selector(debugWithNSString:);
  methods[11].selector = @selector(debugWithNSString:withJavaLangThrowable:);
  methods[12].selector = @selector(infoWithNSString:);
  methods[13].selector = @selector(infoWithNSString:withJavaLangThrowable:);
  methods[14].selector = @selector(warnWithNSString:);
  methods[15].selector = @selector(warnWithNSString:withJavaLangThrowable:);
  methods[16].selector = @selector(errorWithNSString:);
  methods[17].selector = @selector(errorWithNSString:withJavaLangThrowable:);
  methods[18].selector = @selector(getMinimumPriority);
  methods[19].selector = @selector(setMinimumPriorityWithInt:);
  methods[20].selector = @selector(shouldLogWithInt:);
  methods[21].selector = @selector(shouldDebug);
  methods[22].selector = @selector(shouldInfo);
  methods[23].selector = @selector(shouldWarn);
  methods[24].selector = @selector(shouldError);
  methods[25].selector = @selector(logCloseLoopWithNSObjectArray:);
  methods[26].selector = @selector(logCloseLoopWithInt:withNSObjectArray:);
  methods[27].selector = @selector(getName);
  methods[28].selector = @selector(getScope);
  methods[29].selector = @selector(getScopeWithNSString:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_class_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "_className_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_minPriority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_scope_", "LNetI2pUtilLog_LogScope;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_manager_", "LNetI2pUtilLogManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEBUG", "I", .constantValue.asInt = NetI2pUtilLog_DEBUG, 0x19, -1, -1, -1, -1 },
    { "INFO", "I", .constantValue.asInt = NetI2pUtilLog_INFO, 0x19, -1, -1, -1, -1 },
    { "WARN", "I", .constantValue.asInt = NetI2pUtilLog_WARN, 0x19, -1, -1, -1, -1 },
    { "ERROR", "I", .constantValue.asInt = NetI2pUtilLog_ERROR, 0x19, -1, -1, -1, -1 },
    { "CRIT", "I", .constantValue.asInt = NetI2pUtilLog_CRIT, 0x19, -1, -1, -1, -1 },
    { "STR_DEBUG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "STR_INFO", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "STR_WARN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "STR_ERROR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "STR_CRIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
  };
  static const void *ptrTable[] = { "getLevel", "LNSString;", "toLevelString", "I", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "LNetI2pUtilLogManager;LIOSClass;", "(Lnet/i2p/util/LogManager;Ljava/lang/Class<*>;)V", "LNetI2pUtilLogManager;LNSString;", "LNetI2pUtilLogManager;LIOSClass;LNSString;", "(Lnet/i2p/util/LogManager;Ljava/lang/Class<*>;Ljava/lang/String;)V", "log", "ILNSString;", "ILNSString;LJavaLangThrowable;", "logAlways", "debug", "LNSString;LJavaLangThrowable;", "info", "warn", "error", "setMinimumPriority", "shouldLog", "logCloseLoop", "[LNSObject;", "I[LNSObject;", "getScope", "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/lang/String;", "Ljava/lang/Class<*>;", &NetI2pUtilLog_STR_DEBUG, &NetI2pUtilLog_STR_INFO, &NetI2pUtilLog_STR_WARN, &NetI2pUtilLog_STR_ERROR, &NetI2pUtilLog_STR_CRIT, "LNetI2pUtilLog_LogScope;" };
  static const J2ObjcClassInfo _NetI2pUtilLog = { "Log", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 30, 16, -1, 34, -1, -1, -1 };
  return &_NetI2pUtilLog;
}

@end

jint NetI2pUtilLog_getLevelWithNSString_(NSString *level) {
  NetI2pUtilLog_initialize();
  if (level == nil) return NetI2pUtilLog_ERROR;
  level = [level java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(NetI2pUtilLog_STR_DEBUG)) java_hasPrefix:level]) return NetI2pUtilLog_DEBUG;
  if ([((NSString *) nil_chk(NetI2pUtilLog_STR_INFO)) java_hasPrefix:level]) return NetI2pUtilLog_INFO;
  if ([((NSString *) nil_chk(NetI2pUtilLog_STR_WARN)) java_hasPrefix:level]) return NetI2pUtilLog_WARN;
  if ([((NSString *) nil_chk(NetI2pUtilLog_STR_ERROR)) java_hasPrefix:level]) return NetI2pUtilLog_ERROR;
  if ([((NSString *) nil_chk(NetI2pUtilLog_STR_CRIT)) java_hasPrefix:level]) return NetI2pUtilLog_CRIT;
  return NetI2pUtilLog_ERROR;
}

NSString *NetI2pUtilLog_toLevelStringWithInt_(jint level) {
  NetI2pUtilLog_initialize();
  switch (level) {
    case NetI2pUtilLog_DEBUG:
    return NetI2pUtilLog_STR_DEBUG;
    case NetI2pUtilLog_INFO:
    return NetI2pUtilLog_STR_INFO;
    case NetI2pUtilLog_WARN:
    return NetI2pUtilLog_STR_WARN;
    case NetI2pUtilLog_ERROR:
    return NetI2pUtilLog_STR_ERROR;
    case NetI2pUtilLog_CRIT:
    return NetI2pUtilLog_STR_CRIT;
  }
  return (level > NetI2pUtilLog_CRIT ? NetI2pUtilLog_STR_CRIT : NetI2pUtilLog_STR_DEBUG);
}

void NetI2pUtilLog_initWithIOSClass_(NetI2pUtilLog *self, IOSClass *cls) {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager], cls, nil);
  [((NetI2pUtilLogManager *) nil_chk(self->_manager_)) addLogWithNetI2pUtilLog:self];
}

NetI2pUtilLog *new_NetI2pUtilLog_initWithIOSClass_(IOSClass *cls) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog, initWithIOSClass_, cls)
}

NetI2pUtilLog *create_NetI2pUtilLog_initWithIOSClass_(IOSClass *cls) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog, initWithIOSClass_, cls)
}

void NetI2pUtilLog_initWithNSString_(NetI2pUtilLog *self, NSString *name) {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager], nil, name);
  [((NetI2pUtilLogManager *) nil_chk(self->_manager_)) addLogWithNetI2pUtilLog:self];
}

NetI2pUtilLog *new_NetI2pUtilLog_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog, initWithNSString_, name)
}

NetI2pUtilLog *create_NetI2pUtilLog_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog, initWithNSString_, name)
}

void NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, IOSClass *cls) {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, manager, cls, nil);
}

NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLogManager *manager, IOSClass *cls) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withIOSClass_, manager, cls)
}

NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_(NetI2pUtilLogManager *manager, IOSClass *cls) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withIOSClass_, manager, cls)
}

void NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, NSString *name) {
  NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(self, manager, nil, name);
}

NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLogManager *manager, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withNSString_, manager, name)
}

NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withNSString_(NetI2pUtilLogManager *manager, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withNSString_, manager, name)
}

void NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLog *self, NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->_manager_, manager);
  JreStrongAssign(&self->_class_, cls);
  JreStrongAssign(&self->_className_, cls != nil ? [cls getName] : nil);
  JreStrongAssign(&self->_name_, name);
  self->_minPriority_ = NetI2pUtilLog_DEBUG;
  JreStrongAssignAndConsume(&self->_scope_, new_NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(name, cls));
}

NetI2pUtilLog *new_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withIOSClass_withNSString_, manager, cls, name)
}

NetI2pUtilLog *create_NetI2pUtilLog_initWithNetI2pUtilLogManager_withIOSClass_withNSString_(NetI2pUtilLogManager *manager, IOSClass *cls, NSString *name) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog, initWithNetI2pUtilLogManager_withIOSClass_withNSString_, manager, cls, name)
}

NSString *NetI2pUtilLog_getScopeWithNSString_withIOSClass_(NSString *name, IOSClass *cls) {
  NetI2pUtilLog_initialize();
  if ((name == nil) && (cls == nil)) return @"f00";
  if (cls == nil) return name;
  if (name == nil) return [cls getName];
  return JreStrcat("$$", name, [cls getName]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLog)

@implementation NetI2pUtilLog_LogScope

- (instancetype)initWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)cls {
  NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(self, name, cls);
  return self;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(_scopeCache_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) return false;
  if ([obj isKindOfClass:[NetI2pUtilLog_LogScope class]]) {
    NetI2pUtilLog_LogScope *s = (NetI2pUtilLog_LogScope *) cast_chk(obj, [NetI2pUtilLog_LogScope class]);
    return [((NSString *) nil_chk(s->_scopeCache_)) isEqual:_scopeCache_];
  }
  else if ([obj isKindOfClass:[NSString class]]) {
    return [obj isEqual:_scopeCache_];
  }
  return false;
}

- (void)dealloc {
  RELEASE_(_scopeCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withIOSClass:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_scopeCache_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<*>;)V", "hashCode", "equals", "LNSObject;", "LNetI2pUtilLog;" };
  static const J2ObjcClassInfo _NetI2pUtilLog_LogScope = { "LogScope", "net.i2p.util", ptrTable, methods, fields, 7, 0x1a, 3, 1, 5, -1, -1, -1, -1 };
  return &_NetI2pUtilLog_LogScope;
}

@end

void NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NetI2pUtilLog_LogScope *self, NSString *name, IOSClass *cls) {
  NSObject_init(self);
  JreStrongAssign(&self->_scopeCache_, NetI2pUtilLog_getScopeWithNSString_withIOSClass_(name, cls));
}

NetI2pUtilLog_LogScope *new_NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NSString *name, IOSClass *cls) {
  J2OBJC_NEW_IMPL(NetI2pUtilLog_LogScope, initWithNSString_withIOSClass_, name, cls)
}

NetI2pUtilLog_LogScope *create_NetI2pUtilLog_LogScope_initWithNSString_withIOSClass_(NSString *name, IOSClass *cls) {
  J2OBJC_CREATE_IMPL(NetI2pUtilLog_LogScope, initWithNSString_withIOSClass_, name, cls)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilLog_LogScope)
