//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/FileUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/jar/JarOutputStream.h"
#include "java/util/zip/ZipEntry.h"
#include "java/util/zip/ZipFile.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pUtilFileUtil ()

+ (void)unpackWithJavaIoInputStream:(JavaIoInputStream *)inArg
     withJavaUtilJarJarOutputStream:(JavaUtilJarJarOutputStream *)outArg;

@end

inline jboolean NetI2pUtilFileUtil_get__failedOracle(void);
inline jboolean NetI2pUtilFileUtil_set__failedOracle(jboolean value);
inline jboolean *NetI2pUtilFileUtil_getRef__failedOracle(void);
static jboolean NetI2pUtilFileUtil__failedOracle;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilFileUtil, _failedOracle, jboolean)

inline jboolean NetI2pUtilFileUtil_get__failedApache(void);
inline jboolean NetI2pUtilFileUtil_set__failedApache(jboolean value);
inline jboolean *NetI2pUtilFileUtil_getRef__failedApache(void);
static jboolean NetI2pUtilFileUtil__failedApache;
J2OBJC_STATIC_FIELD_PRIMITIVE(NetI2pUtilFileUtil, _failedApache, jboolean)

__attribute__((unused)) static void NetI2pUtilFileUtil_unpackWithJavaIoInputStream_withJavaUtilJarJarOutputStream_(JavaIoInputStream *inArg, JavaUtilJarJarOutputStream *outArg);

@implementation NetI2pUtilFileUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pUtilFileUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)rmdirWithNSString:(NSString *)path
                  withBoolean:(jboolean)failIfNotEmpty {
  return NetI2pUtilFileUtil_rmdirWithNSString_withBoolean_(path, failIfNotEmpty);
}

+ (jboolean)rmdirWithJavaIoFile:(JavaIoFile *)target
                    withBoolean:(jboolean)failIfNotEmpty {
  return NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(target, failIfNotEmpty);
}

+ (jboolean)extractZipWithJavaIoFile:(JavaIoFile *)zipfile
                      withJavaIoFile:(JavaIoFile *)targetDir {
  return NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_(zipfile, targetDir);
}

+ (jboolean)extractZipWithJavaIoFile:(JavaIoFile *)zipfile
                      withJavaIoFile:(JavaIoFile *)targetDir
                             withInt:(jint)logLevel {
  return NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_withInt_(zipfile, targetDir, logLevel);
}

+ (jboolean)verifyZipWithJavaIoFile:(JavaIoFile *)zipfile {
  return NetI2pUtilFileUtil_verifyZipWithJavaIoFile_(zipfile);
}

+ (jboolean)isPack200Supported {
  return NetI2pUtilFileUtil_isPack200Supported();
}

+ (void)unpackWithJavaIoInputStream:(JavaIoInputStream *)inArg
     withJavaUtilJarJarOutputStream:(JavaUtilJarJarOutputStream *)outArg {
  NetI2pUtilFileUtil_unpackWithJavaIoInputStream_withJavaUtilJarJarOutputStream_(inArg, outArg);
}

+ (NSString *)readTextFileWithNSString:(NSString *)filename
                               withInt:(jint)maxNumLines
                           withBoolean:(jboolean)startAtBeginning {
  return NetI2pUtilFileUtil_readTextFileWithNSString_withInt_withBoolean_(filename, maxNumLines, startAtBeginning);
}

+ (void)readFileWithNSString:(NSString *)path
                withNSString:(NSString *)root
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pUtilFileUtil_readFileWithNSString_withNSString_withJavaIoOutputStream_(path, root, outArg);
}

+ (jboolean)copy__WithNSString:(NSString *)source
                  withNSString:(NSString *)dest
                   withBoolean:(jboolean)overwriteExisting {
  return NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_(source, dest, overwriteExisting);
}

+ (jboolean)copy__WithNSString:(NSString *)source
                  withNSString:(NSString *)dest
                   withBoolean:(jboolean)overwriteExisting
                   withBoolean:(jboolean)quiet {
  return NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(source, dest, overwriteExisting, quiet);
}

+ (jboolean)copy__WithJavaIoFile:(JavaIoFile *)src
                  withJavaIoFile:(JavaIoFile *)dst
                     withBoolean:(jboolean)overwriteExisting
                     withBoolean:(jboolean)quiet {
  return NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(src, dst, overwriteExisting, quiet);
}

+ (jboolean)renameWithJavaIoFile:(JavaIoFile *)from
                  withJavaIoFile:(JavaIoFile *)to {
  return NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(from, to);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pUtilFileUtil_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, 10, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, 15, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(rmdirWithNSString:withBoolean:);
  methods[2].selector = @selector(rmdirWithJavaIoFile:withBoolean:);
  methods[3].selector = @selector(extractZipWithJavaIoFile:withJavaIoFile:);
  methods[4].selector = @selector(extractZipWithJavaIoFile:withJavaIoFile:withInt:);
  methods[5].selector = @selector(verifyZipWithJavaIoFile:);
  methods[6].selector = @selector(isPack200Supported);
  methods[7].selector = @selector(unpackWithJavaIoInputStream:withJavaUtilJarJarOutputStream:);
  methods[8].selector = @selector(readTextFileWithNSString:withInt:withBoolean:);
  methods[9].selector = @selector(readFileWithNSString:withNSString:withJavaIoOutputStream:);
  methods[10].selector = @selector(copy__WithNSString:withNSString:withBoolean:);
  methods[11].selector = @selector(copy__WithNSString:withNSString:withBoolean:withBoolean:);
  methods[12].selector = @selector(copy__WithJavaIoFile:withJavaIoFile:withBoolean:withBoolean:);
  methods[13].selector = @selector(renameWithJavaIoFile:withJavaIoFile:);
  methods[14].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_failedOracle", "Z", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "_failedApache", "Z", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "rmdir", "LNSString;Z", "LJavaIoFile;Z", "extractZip", "LJavaIoFile;LJavaIoFile;", "LJavaIoFile;LJavaIoFile;I", "verifyZip", "LJavaIoFile;", "unpack", "LJavaIoInputStream;LJavaUtilJarJarOutputStream;", "LJavaLangException;", "readTextFile", "LNSString;IZ", "readFile", "LNSString;LNSString;LJavaIoOutputStream;", "LJavaIoIOException;", "copy", "LNSString;LNSString;Z", "LNSString;LNSString;ZZ", "LJavaIoFile;LJavaIoFile;ZZ", "rename", "main", "[LNSString;", &NetI2pUtilFileUtil__failedOracle, &NetI2pUtilFileUtil__failedApache };
  static const J2ObjcClassInfo _NetI2pUtilFileUtil = { "FileUtil", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilFileUtil;
}

@end

void NetI2pUtilFileUtil_init(NetI2pUtilFileUtil *self) {
  NSObject_init(self);
}

NetI2pUtilFileUtil *new_NetI2pUtilFileUtil_init() {
  J2OBJC_NEW_IMPL(NetI2pUtilFileUtil, init)
}

NetI2pUtilFileUtil *create_NetI2pUtilFileUtil_init() {
  J2OBJC_CREATE_IMPL(NetI2pUtilFileUtil, init)
}

jboolean NetI2pUtilFileUtil_rmdirWithNSString_withBoolean_(NSString *path, jboolean failIfNotEmpty) {
  NetI2pUtilFileUtil_initialize();
  return NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(create_JavaIoFile_initWithNSString_(path), failIfNotEmpty);
}

jboolean NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(JavaIoFile *target, jboolean failIfNotEmpty) {
  NetI2pUtilFileUtil_initialize();
  if (![((JavaIoFile *) nil_chk(target)) exists]) {
    return true;
  }
  if (![target isDirectory]) {
    return [target delete__];
  }
  else {
    IOSObjectArray *children = [target listFiles];
    if (children == nil) {
      return false;
    }
    if ((failIfNotEmpty) && (children->size_ > 0)) {
      return false;
    }
    for (jint i = 0; i < children->size_; i++) {
      if (!NetI2pUtilFileUtil_rmdirWithJavaIoFile_withBoolean_(IOSObjectArray_Get(children, i), failIfNotEmpty)) return false;
    }
    return [target delete__];
  }
}

jboolean NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_(JavaIoFile *zipfile, JavaIoFile *targetDir) {
  NetI2pUtilFileUtil_initialize();
  return NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_withInt_(zipfile, targetDir, NetI2pUtilLog_WARN);
}

jboolean NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_withInt_(JavaIoFile *zipfile, JavaIoFile *targetDir, jint logLevel) {
  NetI2pUtilFileUtil_initialize();
  jint files = 0;
  JavaUtilZipZipFile *zip = nil;
  @try {
    IOSByteArray *buf = [IOSByteArray arrayWithLength:8192];
    zip = create_JavaUtilZipZipFile_initWithJavaIoFile_(zipfile);
    id<JavaUtilEnumeration> entries = [zip entries];
    while ([((id<JavaUtilEnumeration>) nil_chk(entries)) hasMoreElements]) {
      JavaUtilZipZipEntry *entry_ = [entries nextElement];
      if ([((NSString *) nil_chk([((JavaUtilZipZipEntry *) nil_chk(entry_)) getName])) java_contains:@".."]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"ERROR: Refusing to extract a zip entry with '..' in it [", [entry_ getName], ']')];
        return false;
      }
      if ([((NSString *) nil_chk([entry_ getName])) java_indexOf:0] >= 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"ERROR: Refusing to extract a zip entry with null in it [", [entry_ getName], ']')];
        return false;
      }
      JavaIoFile *target = create_JavaIoFile_initWithJavaIoFile_withNSString_(targetDir, [entry_ getName]);
      JavaIoFile *parent = [target getParentFile];
      if ((parent != nil) && (![((JavaIoFile *) nil_chk(parent)) exists])) {
        jboolean parentsOk = [((JavaIoFile *) nil_chk(parent)) mkdirs];
        if (!parentsOk) {
          if (logLevel <= NetI2pUtilLog_ERROR) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$C", @"ERROR: Unable to create the parent dir for ", [entry_ getName], @": [", [parent getAbsolutePath], ']')];
          return false;
        }
      }
      if ([entry_ isDirectory]) {
        if (![target exists]) {
          jboolean created = [target mkdirs];
          if (!created) {
            if (logLevel <= NetI2pUtilLog_ERROR) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"ERROR: Unable to create the directory [", [entry_ getName], ']')];
            return false;
          }
          else if (logLevel <= NetI2pUtilLog_INFO) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"INFO: Creating directory [", [entry_ getName], ']')];
          }
        }
      }
      else {
        JavaIoInputStream *in = nil;
        JavaIoFileOutputStream *fos = nil;
        JavaUtilJarJarOutputStream *jos = nil;
        @try {
          in = [zip getInputStreamWithJavaUtilZipZipEntry:entry_];
          if ([((NSString *) nil_chk([entry_ getName])) java_hasSuffix:@".jar.pack"] || [((NSString *) nil_chk([entry_ getName])) java_hasSuffix:@".war.pack"]) {
            target = create_JavaIoFile_initWithJavaIoFile_withNSString_(targetDir, [((NSString *) nil_chk([entry_ getName])) java_substring:0 endIndex:[((NSString *) nil_chk([entry_ getName])) java_length] - [@".pack" java_length]]);
            jos = create_JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_(create_JavaIoFileOutputStream_initWithJavaIoFile_(target));
            NetI2pUtilFileUtil_unpackWithJavaIoInputStream_withJavaUtilJarJarOutputStream_(in, jos);
            if (logLevel <= NetI2pUtilLog_INFO) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"INFO: File [", [entry_ getName], @"] extracted and unpacked")];
          }
          else {
            fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(target);
            jint read;
            while ((read = [((JavaIoInputStream *) nil_chk(in)) readWithByteArray:buf]) != -1) {
              [fos writeWithByteArray:buf withInt:0 withInt:read];
            }
            if (logLevel <= NetI2pUtilLog_INFO) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"INFO: File [", [entry_ getName], @"] extracted")];
          }
          files++;
        }
        @catch (JavaIoIOException *ioe) {
          if (logLevel <= NetI2pUtilLog_ERROR) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"ERROR: Error extracting the zip entry (", [entry_ getName], ')')];
            if ([ioe getMessage] != nil && [((NSString *) nil_chk([ioe getMessage])) java_indexOfString:@"CAFED00D"] >= 0) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"This may be caused by a packed library that requires Java 1.6, your Java version is: ", JavaLangSystem_getPropertyWithNSString_(@"java.version"))];
            [ioe printStackTrace];
          }
          return false;
        }
        @catch (JavaLangException *e) {
          if (logLevel <= NetI2pUtilLog_ERROR) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"ERROR: Error extracting the zip entry (", [entry_ getName], ')')];
            [e printStackTrace];
          }
          return false;
        }
        @finally {
          @try {
            if (in != nil) [in close];
          }
          @catch (JavaIoIOException *ioe) {
          }
          @try {
            if (fos != nil) [fos close];
          }
          @catch (JavaIoIOException *ioe) {
          }
          @try {
            if (jos != nil) [jos close];
          }
          @catch (JavaIoIOException *ioe) {
          }
        }
      }
    }
    return true;
  }
  @catch (JavaIoIOException *ioe) {
    if (logLevel <= NetI2pUtilLog_ERROR) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: Unable to extract the zip file"];
      [ioe printStackTrace];
    }
    return false;
  }
  @finally {
    if (zip != nil) {
      @try {
        [zip close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
    if (files > 0 && logLevel <= NetI2pUtilLog_WARN) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$@", @"INFO: ", files, @" files extracted to ", targetDir)];
  }
}

jboolean NetI2pUtilFileUtil_verifyZipWithJavaIoFile_(JavaIoFile *zipfile) {
  NetI2pUtilFileUtil_initialize();
  JavaUtilZipZipFile *zip = nil;
  @try {
    IOSByteArray *buf = [IOSByteArray arrayWithLength:16 * 1024];
    zip = create_JavaUtilZipZipFile_initWithJavaIoFile_(zipfile);
    id<JavaUtilEnumeration> entries = [zip entries];
    jboolean p200TestRequired = true;
    while ([((id<JavaUtilEnumeration>) nil_chk(entries)) hasMoreElements]) {
      JavaUtilZipZipEntry *entry_ = [entries nextElement];
      if ([((NSString *) nil_chk([((JavaUtilZipZipEntry *) nil_chk(entry_)) getName])) java_indexOfString:@".."] != -1) {
        return false;
      }
      if ([entry_ isDirectory]) {
      }
      else {
        if (p200TestRequired && ([((NSString *) nil_chk([entry_ getName])) java_hasSuffix:@".jar.pack"] || [((NSString *) nil_chk([entry_ getName])) java_hasSuffix:@".war.pack"])) {
          if (!NetI2pUtilFileUtil_isPack200Supported()) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: Zip verify failed, your JVM does not support unpack200"];
            return false;
          }
          p200TestRequired = false;
        }
        @try {
          JavaIoInputStream *in = [zip getInputStreamWithJavaUtilZipZipEntry:entry_];
          while (([((JavaIoInputStream *) nil_chk(in)) readWithByteArray:buf]) != -1) {
          }
          [in close];
        }
        @catch (JavaIoIOException *ioe) {
          return false;
        }
      }
    }
    return true;
  }
  @catch (JavaIoIOException *ioe) {
    return false;
  }
  @finally {
    if (zip != nil) {
      @try {
        [zip close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
}

jboolean NetI2pUtilFileUtil_isPack200Supported() {
  NetI2pUtilFileUtil_initialize();
  @try {
    IOSClass_forName_initialize_classLoader_(@"java.util.jar.Pack200", false, JavaLangClassLoader_getSystemClassLoader());
    return true;
  }
  @catch (JavaLangException *e) {
  }
  @try {
    IOSClass_forName_initialize_classLoader_(@"org.apache.harmony.unpack200.Archive", false, JavaLangClassLoader_getSystemClassLoader());
    return true;
  }
  @catch (JavaLangException *e) {
  }
  return false;
}

void NetI2pUtilFileUtil_unpackWithJavaIoInputStream_withJavaUtilJarJarOutputStream_(JavaIoInputStream *inArg, JavaUtilJarJarOutputStream *outArg) {
  NetI2pUtilFileUtil_initialize();
  if (!NetI2pUtilFileUtil__failedOracle) {
    @try {
      IOSClass *p200 = IOSClass_forName_initialize_classLoader_(@"java.util.jar.Pack200", true, JavaLangClassLoader_getSystemClassLoader());
      JavaLangReflectMethod *newUnpacker = [((IOSClass *) nil_chk(p200)) getMethod:@"newUnpacker" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      id unpacker = [((JavaLangReflectMethod *) nil_chk(newUnpacker)) invokeWithId:nil withNSObjectArray:nil];
      JavaLangReflectMethod *unpack = [[nil_chk(unpacker) java_getClass] getMethod:@"unpack" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaIoInputStream_class_(), JavaUtilJarJarOutputStream_class_() } count:2 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(unpack)) invokeWithId:unpacker withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ inArg, outArg } count:2 type:NSObject_class_()]];
      return;
    }
    @catch (JavaLangClassNotFoundException *e) {
      NetI2pUtilFileUtil__failedOracle = true;
    }
    @catch (JavaLangNoSuchMethodException *e) {
      NetI2pUtilFileUtil__failedOracle = true;
    }
  }
  if (!NetI2pUtilFileUtil__failedApache) {
    @try {
      IOSClass *p200 = IOSClass_forName_initialize_classLoader_(@"org.apache.harmony.unpack200.Archive", true, JavaLangClassLoader_getSystemClassLoader());
      JavaLangReflectConstructor *newUnpacker = [((IOSClass *) nil_chk(p200)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ JavaIoInputStream_class_(), JavaUtilJarJarOutputStream_class_() } count:2 type:IOSClass_class_()]];
      id unpacker = [((JavaLangReflectConstructor *) nil_chk(newUnpacker)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ inArg, outArg } count:2 type:NSObject_class_()]];
      JavaLangReflectMethod *unpack = [[nil_chk(unpacker) java_getClass] getMethod:@"unpack" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(unpack)) invokeWithId:unpacker withNSObjectArray:nil];
      return;
    }
    @catch (JavaLangClassNotFoundException *e) {
      NetI2pUtilFileUtil__failedApache = true;
    }
    @catch (JavaLangNoSuchMethodException *e) {
      NetI2pUtilFileUtil__failedApache = true;
    }
  }
  @throw create_JavaIoIOException_initWithNSString_(@"Unpack200 not supported");
}

NSString *NetI2pUtilFileUtil_readTextFileWithNSString_withInt_withBoolean_(NSString *filename, jint maxNumLines, jboolean startAtBeginning) {
  NetI2pUtilFileUtil_initialize();
  JavaIoFile *f = create_JavaIoFile_initWithNSString_(filename);
  if (![f exists]) return nil;
  JavaIoFileInputStream *fis = nil;
  JavaIoBufferedReader *in = nil;
  @try {
    fis = create_JavaIoFileInputStream_initWithJavaIoFile_(f);
    in = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(fis, @"UTF-8"));
    id<JavaUtilList> lines = create_JavaUtilArrayList_initWithInt_(maxNumLines > 0 ? maxNumLines : 64);
    NSString *line = nil;
    while ((line = [in readLine]) != nil) {
      [lines addWithId:line];
      if ((maxNumLines > 0) && ([lines size] >= maxNumLines)) {
        if (startAtBeginning) break;
        else [lines removeWithInt:0];
      }
    }
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_([lines size] * 80);
    for (jint i = 0; i < [lines size]; i++) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[lines getWithInt:i]])) appendWithChar:0x000a];
    }
    return [buf description];
  }
  @catch (JavaIoIOException *ioe) {
    return nil;
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

void NetI2pUtilFileUtil_readFileWithNSString_withNSString_withJavaIoOutputStream_(NSString *path, NSString *root, JavaIoOutputStream *outArg) {
  NetI2pUtilFileUtil_initialize();
  JavaIoFile *rootDir = create_JavaIoFile_initWithNSString_(root);
  while ([((NSString *) nil_chk(path)) java_hasPrefix:@"/"] && ([path java_length] > 0)) path = [path java_substring:1];
  if ([path java_length] <= 0) @throw create_JavaIoFileNotFoundException_initWithNSString_(@"Not serving up the root dir");
  JavaIoFile *target = create_JavaIoFile_initWithJavaIoFile_withNSString_(rootDir, path);
  if (![target exists]) @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"Requested file does not exist: ", path));
  NSString *targetStr = [target getCanonicalPath];
  NSString *rootDirStr = [rootDir getCanonicalPath];
  if (![((NSString *) nil_chk(targetStr)) java_hasPrefix:rootDirStr]) @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"Requested file is outside the root dir: ", path));
  JavaIoFileInputStream *in = nil;
  @try {
    in = create_JavaIoFileInputStream_initWithJavaIoFile_(target);
    NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(in, outArg);
    @try {
      [((JavaIoOutputStream *) nil_chk(outArg)) close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jboolean NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_(NSString *source, NSString *dest, jboolean overwriteExisting) {
  NetI2pUtilFileUtil_initialize();
  return NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(source, dest, overwriteExisting, false);
}

jboolean NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_withBoolean_(NSString *source, NSString *dest, jboolean overwriteExisting, jboolean quiet) {
  NetI2pUtilFileUtil_initialize();
  JavaIoFile *src = create_JavaIoFile_initWithNSString_(source);
  JavaIoFile *dst = create_JavaIoFile_initWithNSString_(dest);
  return NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(src, dst, overwriteExisting, quiet);
}

jboolean NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(JavaIoFile *src, JavaIoFile *dst, jboolean overwriteExisting, jboolean quiet) {
  NetI2pUtilFileUtil_initialize();
  if ([((JavaIoFile *) nil_chk(dst)) exists] && [dst isDirectory]) dst = create_JavaIoFile_initWithJavaIoFile_withNSString_(dst, [((JavaIoFile *) nil_chk(src)) getName]);
  if (![((JavaIoFile *) nil_chk(src)) exists]) return false;
  if ([dst exists] && !overwriteExisting) return false;
  JavaIoInputStream *in = nil;
  JavaIoOutputStream *out = nil;
  @try {
    in = create_JavaIoFileInputStream_initWithJavaIoFile_(src);
    out = create_JavaIoFileOutputStream_initWithJavaIoFile_(dst);
    jint read;
    IOSByteArray *buf = [IOSByteArray arrayWithLength:4096];
    while ((read = [in readWithByteArray:buf]) != -1) {
      [out writeWithByteArray:buf withInt:0 withInt:read];
    }
    return true;
  }
  @catch (JavaIoIOException *ioe) {
    if (!quiet) [ioe printStackTrace];
    return false;
  }
  @finally {
    @try {
      if (in != nil) [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    @try {
      if (out != nil) [out close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

jboolean NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(JavaIoFile *from, JavaIoFile *to) {
  NetI2pUtilFileUtil_initialize();
  if (![((JavaIoFile *) nil_chk(from)) exists]) return false;
  jboolean success = false;
  jboolean isWindows = NetI2pUtilSystemVersion_isWindows();
  jboolean exists = [((JavaIoFile *) nil_chk(to)) exists];
  if (!isWindows || !exists) success = [from renameToWithJavaIoFile:to];
  if (!success) {
    if (exists && [to delete__]) success = [from renameToWithJavaIoFile:to];
    if (!success) {
      success = NetI2pUtilFileUtil_copy__WithJavaIoFile_withJavaIoFile_withBoolean_withBoolean_(from, to, true, true);
      if (success) [from delete__];
    }
  }
  return success;
}

void NetI2pUtilFileUtil_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pUtilFileUtil_initialize();
  if ((args == nil) || (((IOSObjectArray *) nil_chk(args))->size_ < 2)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: delete path | copy source dest | rename from to | unzip path.zip"];
  }
  else if ([@"delete" isEqual:IOSObjectArray_Get(nil_chk(args), 0)]) {
    jboolean deleted = NetI2pUtilFileUtil_rmdirWithNSString_withBoolean_(IOSObjectArray_Get(args, 1), false);
    if (!deleted) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Error deleting [", IOSObjectArray_Get(args, 1), ']')];
  }
  else if ([@"copy" isEqual:IOSObjectArray_Get(args, 0)]) {
    jboolean copied = NetI2pUtilFileUtil_copy__WithNSString_withNSString_withBoolean_(IOSObjectArray_Get(args, 1), IOSObjectArray_Get(args, 2), false);
    if (!copied) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$C", @"Error copying [", IOSObjectArray_Get(args, 1), @"] to [", IOSObjectArray_Get(args, 2), ']')];
  }
  else if ([@"unzip" isEqual:IOSObjectArray_Get(args, 0)]) {
    JavaIoFile *f = create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 1));
    JavaIoFile *to = create_JavaIoFile_initWithNSString_(@"tmp");
    [to mkdir];
    jboolean copied = NetI2pUtilFileUtil_verifyZipWithJavaIoFile_(f);
    if (!copied) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error verifying ", IOSObjectArray_Get(args, 1))];
    copied = NetI2pUtilFileUtil_extractZipWithJavaIoFile_withJavaIoFile_(f, to);
    if (copied) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@C", @"Unzipped [", IOSObjectArray_Get(args, 1), @"] to [", to, ']')];
    else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@C", @"Error unzipping [", IOSObjectArray_Get(args, 1), @"] to [", to, ']')];
  }
  else if ([@"rename" isEqual:IOSObjectArray_Get(args, 0)]) {
    jboolean success = NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 1)), create_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 2)));
    if (!success) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$C", @"Error renaming [", IOSObjectArray_Get(args, 1), @"] to [", IOSObjectArray_Get(args, 2), ']')];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: delete path | copy source dest | rename from to | unzip path.zip"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilFileUtil)
