//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/util/InternalSocket.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/channels/SocketChannel.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/util/InternalServerSocket.h"
#include "net/i2p/util/InternalSocket.h"
#include "net/i2p/util/TimeoutPipedInputStream.h"

@interface NetI2pUtilInternalSocket () {
 @public
  JavaIoInputStream *_is_;
  JavaIoOutputStream *_os_;
  jint _port_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pUtilInternalSocket, _is_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(NetI2pUtilInternalSocket, _os_, JavaIoOutputStream *)

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$5(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$6(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$7(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$8(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$9(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$10(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$11(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$12(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$13(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$14(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$15(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$16(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$17(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$18(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$19(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$20(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$21(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$22(void);

__attribute__((unused)) static IOSObjectArray *NetI2pUtilInternalSocket__Annotations$23(void);

@implementation NetI2pUtilInternalSocket

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                   withJavaIoOutputStream:(JavaIoOutputStream *)os {
  NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(self, is, os);
  return self;
}

- (instancetype)initWithInt:(jint)port {
  NetI2pUtilInternalSocket_initWithInt_(self, port);
  return self;
}

+ (JavaNetSocket *)getSocketWithNSString:(NSString *)host
                                 withInt:(jint)port {
  return NetI2pUtilInternalSocket_getSocketWithNSString_withInt_(host, port);
}

- (JavaIoInputStream *)getInputStream {
  return _is_;
}

- (JavaIoOutputStream *)getOutputStream {
  return _os_;
}

- (void)setInputStreamWithJavaIoInputStream:(JavaIoInputStream *)is {
  JreStrongAssign(&_is_, is);
}

- (void)setOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  JreStrongAssign(&_os_, os);
}

- (void)close {
  @synchronized(self) {
    @try {
      if (_is_ != nil) {
        [_is_ close];
        JreStrongAssign(&_is_, nil);
      }
    }
    @catch (JavaIoIOException *ie) {
    }
    @try {
      if (_os_ != nil) {
        [_os_ close];
        JreStrongAssign(&_os_, nil);
      }
    }
    @catch (JavaIoIOException *ie) {
    }
  }
}

- (jboolean)isClosed {
  @synchronized(self) {
    return _is_ == nil || _os_ == nil;
  }
}

- (NSString *)description {
  return (@"Internal socket");
}

- (void)setSoTimeoutWithInt:(jint)timeout {
  @synchronized(self) {
    if (_is_ != nil && [_is_ isKindOfClass:[NetI2pUtilTimeoutPipedInputStream class]]) [((NetI2pUtilTimeoutPipedInputStream *) cast_chk(_is_, [NetI2pUtilTimeoutPipedInputStream class])) setReadTimeoutWithInt:timeout];
  }
}

- (jint)getSoTimeout {
  return 0;
}

- (void)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)endpoint {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)endpoint {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)endpoint
                                withInt:(jint)timeout {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaNioChannelsSocketChannel *)getChannel {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaNetInetAddress *)getInetAddress {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)getKeepAlive {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaNetInetAddress *)getLocalAddress {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getLocalPort {
  return [self isConnected] ? 1 : -1;
}

- (JavaNetSocketAddress *)getLocalSocketAddress {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)getOOBInline {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getPort {
  return [self isConnected] ? _port_ : 0;
}

- (jint)getReceiveBufferSize {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (JavaNetSocketAddress *)getRemoteSocketAddress {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)getReuseAddress {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getSendBufferSize {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getSoLinger {
  return -1;
}

- (jboolean)getTcpNoDelay {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)getTrafficClass {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isBound {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isConnected {
  @synchronized(self) {
    return _is_ != nil || _os_ != nil;
  }
}

- (jboolean)isInputShutdown {
  @synchronized(self) {
    return _is_ == nil;
  }
}

- (jboolean)isOutputShutdown {
  @synchronized(self) {
    return _os_ == nil;
  }
}

- (void)sendUrgentDataWithInt:(jint)data {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setKeepAliveWithBoolean:(jboolean)on {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setOOBInlineWithBoolean:(jboolean)on {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setReceiveBufferSizeWithInt:(jint)size {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setReuseAddressWithBoolean:(jboolean)on {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setSendBufferSizeWithInt:(jint)size {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setSoLingerWithBoolean:(jboolean)on
                       withInt:(jint)linger {
}

- (void)setTcpNoDelayWithBoolean:(jboolean)on {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)setTrafficClassWithInt:(jint)cize {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)shutdownInput {
  @synchronized(self) {
    if (_is_ != nil) {
      [_is_ close];
      JreStrongAssign(&_is_, nil);
    }
  }
}

- (void)shutdownOutput {
  JavaIoOutputStream *out;
  @synchronized(self) {
    out = JreRetainedLocalValue(_os_);
  }
  if (out == nil) return;
  @try {
    [out flush];
    [out close];
  }
  @finally {
    @synchronized(self) {
      JreStrongAssign(&_os_, nil);
    }
  }
}

- (void)dealloc {
  RELEASE_(_is_);
  RELEASE_(_os_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, 13, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, 15, -1 },
    { NULL, "V", 0x1, 14, 16, -1, -1, 17, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocketAddress;", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "LJavaNetSocketAddress;", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, 35, -1 },
    { NULL, "V", 0x1, 36, 34, -1, -1, 37, -1 },
    { NULL, "V", 0x1, 38, 1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, 40, 34, -1, -1, 41, -1 },
    { NULL, "V", 0x1, 42, 1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 34, -1, -1, 47, -1 },
    { NULL, "V", 0x1, 48, 1, -1, -1, 49, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getSocketWithNSString:withInt:);
  methods[3].selector = @selector(getInputStream);
  methods[4].selector = @selector(getOutputStream);
  methods[5].selector = @selector(setInputStreamWithJavaIoInputStream:);
  methods[6].selector = @selector(setOutputStreamWithJavaIoOutputStream:);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(isClosed);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(setSoTimeoutWithInt:);
  methods[11].selector = @selector(getSoTimeout);
  methods[12].selector = @selector(bindWithJavaNetSocketAddress:);
  methods[13].selector = @selector(connectWithJavaNetSocketAddress:);
  methods[14].selector = @selector(connectWithJavaNetSocketAddress:withInt:);
  methods[15].selector = @selector(getChannel);
  methods[16].selector = @selector(getInetAddress);
  methods[17].selector = @selector(getKeepAlive);
  methods[18].selector = @selector(getLocalAddress);
  methods[19].selector = @selector(getLocalPort);
  methods[20].selector = @selector(getLocalSocketAddress);
  methods[21].selector = @selector(getOOBInline);
  methods[22].selector = @selector(getPort);
  methods[23].selector = @selector(getReceiveBufferSize);
  methods[24].selector = @selector(getRemoteSocketAddress);
  methods[25].selector = @selector(getReuseAddress);
  methods[26].selector = @selector(getSendBufferSize);
  methods[27].selector = @selector(getSoLinger);
  methods[28].selector = @selector(getTcpNoDelay);
  methods[29].selector = @selector(getTrafficClass);
  methods[30].selector = @selector(isBound);
  methods[31].selector = @selector(isConnected);
  methods[32].selector = @selector(isInputShutdown);
  methods[33].selector = @selector(isOutputShutdown);
  methods[34].selector = @selector(sendUrgentDataWithInt:);
  methods[35].selector = @selector(setKeepAliveWithBoolean:);
  methods[36].selector = @selector(setOOBInlineWithBoolean:);
  methods[37].selector = @selector(setReceiveBufferSizeWithInt:);
  methods[38].selector = @selector(setReuseAddressWithBoolean:);
  methods[39].selector = @selector(setSendBufferSizeWithInt:);
  methods[40].selector = @selector(setSoLingerWithBoolean:withInt:);
  methods[41].selector = @selector(setTcpNoDelayWithBoolean:);
  methods[42].selector = @selector(setTrafficClassWithInt:);
  methods[43].selector = @selector(shutdownInput);
  methods[44].selector = @selector(shutdownOutput);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_is_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_os_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoOutputStream;", "I", "LJavaIoIOException;", "getSocket", "LNSString;I", "setInputStream", "LJavaIoInputStream;", "setOutputStream", "LJavaIoOutputStream;", "toString", "setSoTimeout", "bind", "LJavaNetSocketAddress;", (void *)&NetI2pUtilInternalSocket__Annotations$0, "connect", (void *)&NetI2pUtilInternalSocket__Annotations$1, "LJavaNetSocketAddress;I", (void *)&NetI2pUtilInternalSocket__Annotations$2, (void *)&NetI2pUtilInternalSocket__Annotations$3, (void *)&NetI2pUtilInternalSocket__Annotations$4, (void *)&NetI2pUtilInternalSocket__Annotations$5, (void *)&NetI2pUtilInternalSocket__Annotations$6, (void *)&NetI2pUtilInternalSocket__Annotations$7, (void *)&NetI2pUtilInternalSocket__Annotations$8, (void *)&NetI2pUtilInternalSocket__Annotations$9, (void *)&NetI2pUtilInternalSocket__Annotations$10, (void *)&NetI2pUtilInternalSocket__Annotations$11, (void *)&NetI2pUtilInternalSocket__Annotations$12, (void *)&NetI2pUtilInternalSocket__Annotations$13, (void *)&NetI2pUtilInternalSocket__Annotations$14, (void *)&NetI2pUtilInternalSocket__Annotations$15, "sendUrgentData", (void *)&NetI2pUtilInternalSocket__Annotations$16, "setKeepAlive", "Z", (void *)&NetI2pUtilInternalSocket__Annotations$17, "setOOBInline", (void *)&NetI2pUtilInternalSocket__Annotations$18, "setReceiveBufferSize", (void *)&NetI2pUtilInternalSocket__Annotations$19, "setReuseAddress", (void *)&NetI2pUtilInternalSocket__Annotations$20, "setSendBufferSize", (void *)&NetI2pUtilInternalSocket__Annotations$21, "setSoLinger", "ZI", "setTcpNoDelay", (void *)&NetI2pUtilInternalSocket__Annotations$22, "setTrafficClass", (void *)&NetI2pUtilInternalSocket__Annotations$23 };
  static const J2ObjcClassInfo _NetI2pUtilInternalSocket = { "InternalSocket", "net.i2p.util", ptrTable, methods, fields, 7, 0x1, 45, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pUtilInternalSocket;
}

@end

void NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(NetI2pUtilInternalSocket *self, JavaIoInputStream *is, JavaIoOutputStream *os) {
  JavaNetSocket_init(self);
  JreStrongAssign(&self->_is_, is);
  JreStrongAssign(&self->_os_, os);
  self->_port_ = 1;
}

NetI2pUtilInternalSocket *new_NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *is, JavaIoOutputStream *os) {
  J2OBJC_NEW_IMPL(NetI2pUtilInternalSocket, initWithJavaIoInputStream_withJavaIoOutputStream_, is, os)
}

NetI2pUtilInternalSocket *create_NetI2pUtilInternalSocket_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *is, JavaIoOutputStream *os) {
  J2OBJC_CREATE_IMPL(NetI2pUtilInternalSocket, initWithJavaIoInputStream_withJavaIoOutputStream_, is, os)
}

void NetI2pUtilInternalSocket_initWithInt_(NetI2pUtilInternalSocket *self, jint port) {
  JavaNetSocket_init(self);
  if (port <= 0) @throw create_JavaIoIOException_initWithNSString_(@"bad port number");
  self->_port_ = port;
  NetI2pUtilInternalServerSocket_internalConnectWithInt_withNetI2pUtilInternalSocket_(port, self);
}

NetI2pUtilInternalSocket *new_NetI2pUtilInternalSocket_initWithInt_(jint port) {
  J2OBJC_NEW_IMPL(NetI2pUtilInternalSocket, initWithInt_, port)
}

NetI2pUtilInternalSocket *create_NetI2pUtilInternalSocket_initWithInt_(jint port) {
  J2OBJC_CREATE_IMPL(NetI2pUtilInternalSocket, initWithInt_, port)
}

JavaNetSocket *NetI2pUtilInternalSocket_getSocketWithNSString_withInt_(NSString *host, jint port) {
  NetI2pUtilInternalSocket_initialize();
  if ([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) isRouterContext] && ([((NSString *) nil_chk(host)) isEqual:@"127.0.0.1"] || [host isEqual:@"localhost"])) {
    @try {
      return create_NetI2pUtilInternalSocket_initWithInt_(port);
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  return create_JavaNetSocket_initWithNSString_withInt_(host, port);
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pUtilInternalSocket__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pUtilInternalSocket)
