//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/kademlia/KBucketSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/kademlia/KBucket.h"
#include "net/i2p/kademlia/KBucketImpl.h"
#include "net/i2p/kademlia/KBucketSet.h"
#include "net/i2p/kademlia/KBucketTrimmer.h"
#include "net/i2p/kademlia/RandomTrimmer.h"
#include "net/i2p/kademlia/SelectionCollector.h"
#include "net/i2p/kademlia/XORComparator.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"

@class NetI2pKademliaKBucketSet_Range;

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pKademliaKBucketSet () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  NetI2pDataSimpleDataStructure *_us_;
  id<JavaUtilList> _buckets_;
  NetI2pKademliaKBucketSet_Range *_rangeCalc_;
  id<NetI2pKademliaKBucketTrimmer> _trimmer_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *_bucketsLock_;
  jint KEYSIZE_BITS_;
  jint NUM_BUCKETS_;
  jint BUCKET_SIZE_;
  jint B_VALUE_;
  jint B_FACTOR_;
}

- (void)getReadLock;

- (jboolean)tryReadLock;

- (void)releaseReadLock;

- (jboolean)getWriteLock;

- (void)releaseWriteLock;

- (jboolean)shouldSplitWithNetI2pKademliaKBucket:(id<NetI2pKademliaKBucket>)b;

- (void)splitWithInt:(jint)r;

- (void)locked_splitWithInt:(jint)r;

- (jint)pickBucketWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key;

- (id<NetI2pKademliaKBucket>)getBucketWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key;

- (jint)pickBucketWithInt:(jint)range;

- (id<JavaUtilList>)createBuckets;

- (id<NetI2pKademliaKBucket>)createBucketWithInt:(jint)start
                                         withInt:(jint)end;

- (NetI2pDataSimpleDataStructure *)makeKeyWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _us_, NetI2pDataSimpleDataStructure *)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _buckets_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _rangeCalc_, NetI2pKademliaKBucketSet_Range *)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _trimmer_, id<NetI2pKademliaKBucketTrimmer>)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet, _bucketsLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)

__attribute__((unused)) static void NetI2pKademliaKBucketSet_getReadLock(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static jboolean NetI2pKademliaKBucketSet_tryReadLock(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static void NetI2pKademliaKBucketSet_releaseReadLock(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static jboolean NetI2pKademliaKBucketSet_getWriteLock(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static void NetI2pKademliaKBucketSet_releaseWriteLock(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static jboolean NetI2pKademliaKBucketSet_shouldSplitWithNetI2pKademliaKBucket_(NetI2pKademliaKBucketSet *self, id<NetI2pKademliaKBucket> b);

__attribute__((unused)) static void NetI2pKademliaKBucketSet_splitWithInt_(NetI2pKademliaKBucketSet *self, jint r);

__attribute__((unused)) static void NetI2pKademliaKBucketSet_locked_splitWithInt_(NetI2pKademliaKBucketSet *self, jint r);

__attribute__((unused)) static jint NetI2pKademliaKBucketSet_pickBucketWithNetI2pDataSimpleDataStructure_(NetI2pKademliaKBucketSet *self, NetI2pDataSimpleDataStructure *key);

__attribute__((unused)) static id<NetI2pKademliaKBucket> NetI2pKademliaKBucketSet_getBucketWithNetI2pDataSimpleDataStructure_(NetI2pKademliaKBucketSet *self, NetI2pDataSimpleDataStructure *key);

__attribute__((unused)) static jint NetI2pKademliaKBucketSet_pickBucketWithInt_(NetI2pKademliaKBucketSet *self, jint range);

__attribute__((unused)) static id<JavaUtilList> NetI2pKademliaKBucketSet_createBuckets(NetI2pKademliaKBucketSet *self);

__attribute__((unused)) static id<NetI2pKademliaKBucket> NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(NetI2pKademliaKBucketSet *self, jint start, jint end);

__attribute__((unused)) static NetI2pDataSimpleDataStructure *NetI2pKademliaKBucketSet_makeKeyWithByteArray_(NetI2pKademliaKBucketSet *self, IOSByteArray *data);

@interface NetI2pKademliaKBucketSet_Range : NSObject {
 @public
  jint _bValue_;
  JavaMathBigInteger *_bigUs_;
  id<JavaUtilMap> _distanceCache_;
}

- (instancetype)initWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)us
                                              withInt:(jint)bValue;

- (jint)getRangeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key;

- (void)clear;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pKademliaKBucketSet_Range)

J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet_Range, _bigUs_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(NetI2pKademliaKBucketSet_Range, _distanceCache_, id<JavaUtilMap>)

__attribute__((unused)) static void NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pKademliaKBucketSet_Range *self, NetI2pDataSimpleDataStructure *us, jint bValue);

__attribute__((unused)) static NetI2pKademliaKBucketSet_Range *new_NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pDataSimpleDataStructure *us, jint bValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pKademliaKBucketSet_Range *create_NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pDataSimpleDataStructure *us, jint bValue);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pKademliaKBucketSet_Range)

@interface NetI2pKademliaKBucketSet_DummyBucket : NSObject < NetI2pKademliaKBucket > {
 @public
  jint r_;
}

- (instancetype)initWithInt:(jint)range;

- (jint)getRangeBegin;

- (jint)getRangeEnd;

- (jint)getKeyCount;

- (id<JavaUtilSet>)getEntries;

- (void)getEntriesWithNetI2pKademliaSelectionCollector:(id<NetI2pKademliaSelectionCollector>)collector;

- (void)clear;

- (jboolean)addWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)peer;

- (jboolean)removeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)peer;

- (void)setLastChanged;

- (jlong)getLastChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pKademliaKBucketSet_DummyBucket)

__attribute__((unused)) static void NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(NetI2pKademliaKBucketSet_DummyBucket *self, jint range);

__attribute__((unused)) static NetI2pKademliaKBucketSet_DummyBucket *new_NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(jint range) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pKademliaKBucketSet_DummyBucket *create_NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(jint range);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pKademliaKBucketSet_DummyBucket)

@interface NetI2pKademliaKBucketSet_BucketComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

- (instancetype)init;

- (jint)compareWithId:(id<NetI2pKademliaKBucket>)l
               withId:(id<NetI2pKademliaKBucket>)r;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pKademliaKBucketSet_BucketComparator)

__attribute__((unused)) static void NetI2pKademliaKBucketSet_BucketComparator_init(NetI2pKademliaKBucketSet_BucketComparator *self);

__attribute__((unused)) static NetI2pKademliaKBucketSet_BucketComparator *new_NetI2pKademliaKBucketSet_BucketComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pKademliaKBucketSet_BucketComparator *create_NetI2pKademliaKBucketSet_BucketComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pKademliaKBucketSet_BucketComparator)

@implementation NetI2pKademliaKBucketSet

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
          withNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)us
                                    withInt:(jint)max
                                    withInt:(jint)b {
  NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_(self, context, us, max, b);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
          withNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)us
                                    withInt:(jint)max
                                    withInt:(jint)b
           withNetI2pKademliaKBucketTrimmer:(id<NetI2pKademliaKBucketTrimmer>)trimmer {
  NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(self, context, us, max, b, trimmer);
  return self;
}

- (void)getReadLock {
  NetI2pKademliaKBucketSet_getReadLock(self);
}

- (jboolean)tryReadLock {
  return NetI2pKademliaKBucketSet_tryReadLock(self);
}

- (void)releaseReadLock {
  NetI2pKademliaKBucketSet_releaseReadLock(self);
}

- (jboolean)getWriteLock {
  return NetI2pKademliaKBucketSet_getWriteLock(self);
}

- (void)releaseWriteLock {
  NetI2pKademliaKBucketSet_releaseWriteLock(self);
}

- (jboolean)addWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)peer {
  id<NetI2pKademliaKBucket> bucket;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    bucket = NetI2pKademliaKBucketSet_getBucketWithNetI2pDataSimpleDataStructure_(self, peer);
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  if (bucket != nil) {
    if ([bucket addWithNetI2pDataSimpleDataStructure:peer]) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Peer ", peer, @" added to bucket ", bucket)];
      if (NetI2pKademliaKBucketSet_shouldSplitWithNetI2pKademliaKBucket_(self, bucket)) {
        if ([_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@", @"Splitting bucket ", bucket)];
        NetI2pKademliaKBucketSet_splitWithInt_(self, [bucket getRangeBegin]);
      }
      return true;
    }
    else {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$@$@", @"Peer ", peer, @" NOT added to bucket ", bucket)];
      return false;
    }
  }
  else {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$@", @"Failed to add, probably us: ", peer)];
    return false;
  }
}

- (jboolean)shouldSplitWithNetI2pKademliaKBucket:(id<NetI2pKademliaKBucket>)b {
  return NetI2pKademliaKBucketSet_shouldSplitWithNetI2pKademliaKBucket_(self, b);
}

- (void)splitWithInt:(jint)r {
  NetI2pKademliaKBucketSet_splitWithInt_(self, r);
}

- (void)locked_splitWithInt:(jint)r {
  NetI2pKademliaKBucketSet_locked_splitWithInt_(self, r);
}

- (jint)size {
  jint rv = 0;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (id<NetI2pKademliaKBucket> __strong b in nil_chk(_buckets_)) {
      rv += [((id<NetI2pKademliaKBucket>) nil_chk(b)) getKeyCount];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  return rv;
}

- (jboolean)removeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)entry_ {
  id<NetI2pKademliaKBucket> kbucket;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    kbucket = NetI2pKademliaKBucketSet_getBucketWithNetI2pDataSimpleDataStructure_(self, entry_);
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  if (kbucket == nil) return false;
  jboolean removed = [kbucket removeWithNetI2pDataSimpleDataStructure:entry_];
  return removed;
}

- (void)clear {
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (id<NetI2pKademliaKBucket> __strong b in nil_chk(_buckets_)) {
      [((id<NetI2pKademliaKBucket>) nil_chk(b)) clear];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  [((NetI2pKademliaKBucketSet_Range *) nil_chk(_rangeCalc_)) clear];
}

- (id<JavaUtilSet>)getAll {
  id<JavaUtilSet> all = create_JavaUtilHashSet_initWithInt_(256);
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (id<NetI2pKademliaKBucket> __strong b in nil_chk(_buckets_)) {
      [all addAllWithJavaUtilCollection:[((id<NetI2pKademliaKBucket>) nil_chk(b)) getEntries]];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  return all;
}

- (id<JavaUtilSet>)getAllWithJavaUtilSet:(id<JavaUtilSet>)toIgnore {
  id<JavaUtilSet> all = [self getAll];
  [((id<JavaUtilSet>) nil_chk(all)) removeAllWithJavaUtilCollection:toIgnore];
  return all;
}

- (void)getAllWithNetI2pKademliaSelectionCollector:(id<NetI2pKademliaSelectionCollector>)collector {
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (id<NetI2pKademliaKBucket> __strong b in nil_chk(_buckets_)) {
      [((id<NetI2pKademliaKBucket>) nil_chk(b)) getEntriesWithNetI2pKademliaSelectionCollector:collector];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
}

- (id<JavaUtilList>)getClosestWithInt:(jint)max {
  return [self getClosestWithInt:max withJavaUtilCollection:JavaUtilCollections_emptySet()];
}

- (id<JavaUtilList>)getClosestWithInt:(jint)max
               withJavaUtilCollection:(id<JavaUtilCollection>)toIgnore {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(max);
  jint count = 0;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(_buckets_)) size] && count < max; i++) {
      id<JavaUtilSet> entries = [((id<NetI2pKademliaKBucket>) nil_chk([_buckets_ getWithInt:i])) getEntries];
      for (NetI2pDataSimpleDataStructure * __strong e in nil_chk(entries)) {
        if (![((id<JavaUtilCollection>) nil_chk(toIgnore)) containsWithId:e]) {
          [rv addWithId:e];
          count++;
        }
      }
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  id<JavaUtilComparator> comp = create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(_us_);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(rv, comp);
  jint sz = [rv size];
  for (jint i = sz - 1; i >= max; i--) {
    [rv removeWithInt:i];
  }
  return rv;
}

- (id<JavaUtilList>)getClosestWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key
                                                        withInt:(jint)max {
  return [self getClosestWithNetI2pDataSimpleDataStructure:key withInt:max withJavaUtilCollection:JavaUtilCollections_emptySet()];
}

- (id<JavaUtilList>)getClosestWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key
                                                        withInt:(jint)max
                                         withJavaUtilCollection:(id<JavaUtilCollection>)toIgnore {
  if ([((NetI2pDataSimpleDataStructure *) nil_chk(key)) isEqual:_us_]) return [self getClosestWithInt:max withJavaUtilCollection:toIgnore];
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_(max);
  jint count = 0;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    jint start = NetI2pKademliaKBucketSet_pickBucketWithNetI2pDataSimpleDataStructure_(self, key);
    for (jint i = start; i >= 0 && count < max; i--) {
      id<JavaUtilSet> entries = [((id<NetI2pKademliaKBucket>) nil_chk([((id<JavaUtilList>) nil_chk(_buckets_)) getWithInt:i])) getEntries];
      for (NetI2pDataSimpleDataStructure * __strong e in nil_chk(entries)) {
        if (![((id<JavaUtilCollection>) nil_chk(toIgnore)) containsWithId:e]) {
          [rv addWithId:e];
          count++;
        }
      }
    }
    for (jint i = start + 1; i < [((id<JavaUtilList>) nil_chk(_buckets_)) size] && count < max; i++) {
      id<JavaUtilSet> entries = [((id<NetI2pKademliaKBucket>) nil_chk([_buckets_ getWithInt:i])) getEntries];
      for (NetI2pDataSimpleDataStructure * __strong e in nil_chk(entries)) {
        if (![((id<JavaUtilCollection>) nil_chk(toIgnore)) containsWithId:e]) {
          [rv addWithId:e];
          count++;
        }
      }
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  id<JavaUtilComparator> comp = create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(key);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(rv, comp);
  jint sz = [rv size];
  for (jint i = sz - 1; i >= max; i--) {
    [rv removeWithInt:i];
  }
  return rv;
}

- (jint)pickBucketWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key {
  return NetI2pKademliaKBucketSet_pickBucketWithNetI2pDataSimpleDataStructure_(self, key);
}

- (id<JavaUtilList>)getBuckets {
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_(_buckets_);
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
}

- (id<NetI2pKademliaKBucket>)getBucketWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key {
  return NetI2pKademliaKBucketSet_getBucketWithNetI2pDataSimpleDataStructure_(self, key);
}

- (jint)pickBucketWithInt:(jint)range {
  return NetI2pKademliaKBucketSet_pickBucketWithInt_(self, range);
}

- (id<JavaUtilList>)createBuckets {
  return NetI2pKademliaKBucketSet_createBuckets(self);
}

- (id<NetI2pKademliaKBucket>)createBucketWithInt:(jint)start
                                         withInt:(jint)end {
  return NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(self, start, end);
}

- (jint)getRangeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key {
  return [((NetI2pKademliaKBucketSet_Range *) nil_chk(_rangeCalc_)) getRangeWithNetI2pDataSimpleDataStructure:key];
}

- (id<JavaUtilList>)getExploreKeysWithLong:(jlong)age {
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(_buckets_)) size]);
  jlong old = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - age;
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    for (id<NetI2pKademliaKBucket> __strong b in _buckets_) {
      jint curSize = [((id<NetI2pKademliaKBucket>) nil_chk(b)) getKeyCount];
      if (([b getRangeBegin] == 0) || ([b getLastChanged] < old || curSize < BUCKET_SIZE_ * 3 / 4)) [rv addWithId:[self generateRandomKeyWithNetI2pKademliaKBucket:b]];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  return rv;
}

- (NetI2pDataSimpleDataStructure *)generateRandomKeyWithNetI2pKademliaKBucket:(id<NetI2pKademliaKBucket>)bucket {
  jint begin = [((id<NetI2pKademliaKBucket>) nil_chk(bucket)) getRangeBegin];
  jint end = [bucket getRangeEnd];
  jint fixed = 0;
  jint bsz = 1 + end - begin;
  while (bsz < B_FACTOR_) {
    fixed++;
    JreLShiftAssignInt(&bsz, 1);
  }
  jint fixedBits = 0;
  if (fixed > 0) {
    jint mask = (JreLShift32(1, fixed)) - 1;
    fixedBits = (JreRShift32(begin, (B_VALUE_ - (fixed + 1)))) & mask;
  }
  jint obegin = begin;
  jint oend = end;
  JreRShiftAssignInt(&begin, (B_VALUE_ - 1));
  JreRShiftAssignInt(&end, (B_VALUE_ - 1));
  JavaMathBigInteger *variance;
  if (begin > 0) variance = create_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(begin - fixed, [((NetI2pI2PAppContext *) nil_chk(_context_)) random]);
  else variance = JreLoadStatic(JavaMathBigInteger, ZERO);
  jint numNonZero = 1 + end - begin;
  if (numNonZero == 1) {
    variance = [((JavaMathBigInteger *) nil_chk(variance)) setBitWithInt:begin];
    if (fixed > 0) variance = [((JavaMathBigInteger *) nil_chk(variance)) or__WithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(fixedBits))) shiftLeftWithInt:begin - fixed]];
  }
  else {
    if (fixed > 0) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"??? ", bucket));
    JavaMathBigInteger *nonz;
    if (numNonZero <= 62) {
      jlong nz = 1 + [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) random])) nextLongWithLong:(JreLShift64(1l, numNonZero)) - 1];
      nonz = JavaMathBigInteger_valueOfWithLong_(nz);
    }
    else {
      do {
        nonz = create_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(numNonZero, [((NetI2pI2PAppContext *) nil_chk(_context_)) random]);
      }
      while ([nonz isEqual:JreLoadStatic(JavaMathBigInteger, ZERO)]);
    }
    if (begin > 0) nonz = [((JavaMathBigInteger *) nil_chk(nonz)) shiftLeftWithInt:begin];
    variance = [((JavaMathBigInteger *) nil_chk(variance)) or__WithJavaMathBigInteger:nonz];
  }
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$ICI$ICI$I$I$I", @"SB(", obegin, ',', oend, @") KB(", begin, ',', end, @") fixed=", fixed, @" fixedBits=", fixedBits, @" numNonZ=", numNonZero)];
  IOSByteArray *data = [((JavaMathBigInteger *) nil_chk(variance)) toByteArray];
  NetI2pDataSimpleDataStructure *key = NetI2pKademliaKBucketSet_makeKeyWithByteArray_(self, data);
  IOSByteArray *hash_ = NetI2pDataDataHelper_xor__WithByteArray_withByteArray_([((NetI2pDataSimpleDataStructure *) nil_chk(key)) getData], [((NetI2pDataSimpleDataStructure *) nil_chk(_us_)) getData]);
  NetI2pDataSimpleDataStructure *rv = NetI2pKademliaKBucketSet_makeKeyWithByteArray_(self, hash_);
  return rv;
}

- (NetI2pDataSimpleDataStructure *)makeKeyWithByteArray:(IOSByteArray *)data {
  return NetI2pKademliaKBucketSet_makeKeyWithByteArray_(self, data);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(1024);
  [buf appendWithNSString:@"<div class=\"debug_container buckets\">"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<hr><b>Bucket set rooted on:</b> "])) appendWithNSString:[((NetI2pDataSimpleDataStructure *) nil_chk(_us_)) description]])) appendWithNSString:@" K="])) appendWithInt:BUCKET_SIZE_])) appendWithNSString:@" B="])) appendWithInt:B_VALUE_])) appendWithNSString:@" with "])) appendWithInt:[self size]])) appendWithNSString:@" keys in "])) appendWithInt:[((id<JavaUtilList>) nil_chk(_buckets_)) size]])) appendWithNSString:@" buckets:<br>\n"];
  NetI2pKademliaKBucketSet_getReadLock(self);
  @try {
    jint len = [_buckets_ size];
    for (jint i = 0; i < len; i++) {
      id<NetI2pKademliaKBucket> b = [_buckets_ getWithInt:i];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"<b>Bucket "])) appendWithInt:i])) appendWithNSString:@"/"])) appendWithInt:len])) appendWithNSString:@":</b> "];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((id<NetI2pKademliaKBucket>) nil_chk(b)) description]])) appendWithNSString:@"<br>\n"];
    }
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseReadLock(self);
  }
  [buf appendWithNSString:@"</div>"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_us_);
  RELEASE_(_buckets_);
  RELEASE_(_rangeCalc_);
  RELEASE_(_trimmer_);
  RELEASE_(_bucketsLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 15, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 20, 11, -1, 21, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 20, 22, -1, 23, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 20, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 20, 26, -1, 27, -1, -1 },
    { NULL, "I", 0x2, 28, 5, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 30, -1, -1 },
    { NULL, "LNetI2pKademliaKBucket;", 0x2, 31, 5, -1, 32, -1, -1 },
    { NULL, "I", 0x2, 28, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 30, -1, -1 },
    { NULL, "LNetI2pKademliaKBucket;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "I", 0x0, 36, 5, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 37, 38, -1, 39, -1, -1 },
    { NULL, "LNetI2pDataSimpleDataStructure;", 0x0, 40, 8, -1, 41, -1, -1 },
    { NULL, "LNetI2pDataSimpleDataStructure;", 0x2, 42, 43, -1, 44, -1, -1 },
    { NULL, "LNSString;", 0x1, 45, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pDataSimpleDataStructure:withInt:withInt:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pDataSimpleDataStructure:withInt:withInt:withNetI2pKademliaKBucketTrimmer:);
  methods[2].selector = @selector(getReadLock);
  methods[3].selector = @selector(tryReadLock);
  methods[4].selector = @selector(releaseReadLock);
  methods[5].selector = @selector(getWriteLock);
  methods[6].selector = @selector(releaseWriteLock);
  methods[7].selector = @selector(addWithNetI2pDataSimpleDataStructure:);
  methods[8].selector = @selector(shouldSplitWithNetI2pKademliaKBucket:);
  methods[9].selector = @selector(splitWithInt:);
  methods[10].selector = @selector(locked_splitWithInt:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(removeWithNetI2pDataSimpleDataStructure:);
  methods[13].selector = @selector(clear);
  methods[14].selector = @selector(getAll);
  methods[15].selector = @selector(getAllWithJavaUtilSet:);
  methods[16].selector = @selector(getAllWithNetI2pKademliaSelectionCollector:);
  methods[17].selector = @selector(getClosestWithInt:);
  methods[18].selector = @selector(getClosestWithInt:withJavaUtilCollection:);
  methods[19].selector = @selector(getClosestWithNetI2pDataSimpleDataStructure:withInt:);
  methods[20].selector = @selector(getClosestWithNetI2pDataSimpleDataStructure:withInt:withJavaUtilCollection:);
  methods[21].selector = @selector(pickBucketWithNetI2pDataSimpleDataStructure:);
  methods[22].selector = @selector(getBuckets);
  methods[23].selector = @selector(getBucketWithNetI2pDataSimpleDataStructure:);
  methods[24].selector = @selector(pickBucketWithInt:);
  methods[25].selector = @selector(createBuckets);
  methods[26].selector = @selector(createBucketWithInt:withInt:);
  methods[27].selector = @selector(getRangeWithNetI2pDataSimpleDataStructure:);
  methods[28].selector = @selector(getExploreKeysWithLong:);
  methods[29].selector = @selector(generateRandomKeyWithNetI2pKademliaKBucket:);
  methods[30].selector = @selector(makeKeyWithByteArray:);
  methods[31].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_us_", "LNetI2pDataSimpleDataStructure;", .constantValue.asLong = 0, 0x12, -1, -1, 46, -1 },
    { "_buckets_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 47, -1 },
    { "_rangeCalc_", "LNetI2pKademliaKBucketSet_Range;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "_trimmer_", "LNetI2pKademliaKBucketTrimmer;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "_bucketsLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "KEYSIZE_BITS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NUM_BUCKETS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BUCKET_SIZE_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "B_VALUE_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "B_FACTOR_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;LNetI2pDataSimpleDataStructure;II", "(Lnet/i2p/I2PAppContext;TT;II)V", "LNetI2pI2PAppContext;LNetI2pDataSimpleDataStructure;IILNetI2pKademliaKBucketTrimmer;", "(Lnet/i2p/I2PAppContext;TT;IILnet/i2p/kademlia/KBucketTrimmer<TT;>;)V", "add", "LNetI2pDataSimpleDataStructure;", "(TT;)Z", "shouldSplit", "LNetI2pKademliaKBucket;", "(Lnet/i2p/kademlia/KBucket<TT;>;)Z", "split", "I", "locked_split", "remove", "()Ljava/util/Set<TT;>;", "getAll", "LJavaUtilSet;", "(Ljava/util/Set<TT;>;)Ljava/util/Set<TT;>;", "LNetI2pKademliaSelectionCollector;", "(Lnet/i2p/kademlia/SelectionCollector<TT;>;)V", "getClosest", "(I)Ljava/util/List<TT;>;", "ILJavaUtilCollection;", "(ILjava/util/Collection<TT;>;)Ljava/util/List<TT;>;", "LNetI2pDataSimpleDataStructure;I", "(TT;I)Ljava/util/List<TT;>;", "LNetI2pDataSimpleDataStructure;ILJavaUtilCollection;", "(TT;ILjava/util/Collection<TT;>;)Ljava/util/List<TT;>;", "pickBucket", "(TT;)I", "()Ljava/util/List<Lnet/i2p/kademlia/KBucket<TT;>;>;", "getBucket", "(TT;)Lnet/i2p/kademlia/KBucket<TT;>;", "createBucket", "II", "(II)Lnet/i2p/kademlia/KBucket<TT;>;", "getRange", "getExploreKeys", "J", "(J)Ljava/util/List<TT;>;", "generateRandomKey", "(Lnet/i2p/kademlia/KBucket<TT;>;)TT;", "makeKey", "[B", "([B)TT;", "toString", "TT;", "Ljava/util/List<Lnet/i2p/kademlia/KBucket<TT;>;>;", "Lnet/i2p/kademlia/KBucketSet$Range<TT;>;", "Lnet/i2p/kademlia/KBucketTrimmer<TT;>;", "LNetI2pKademliaKBucketSet_Range;LNetI2pKademliaKBucketSet_DummyBucket;LNetI2pKademliaKBucketSet_BucketComparator;", "<T:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pKademliaKBucketSet = { "KBucketSet", "net.i2p.kademlia", ptrTable, methods, fields, 7, 0x1, 32, 12, -1, 50, -1, 51, -1 };
  return &_NetI2pKademliaKBucketSet;
}

@end

void NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_(NetI2pKademliaKBucketSet *self, NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b) {
  NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(self, context, us, max, b, create_NetI2pKademliaRandomTrimmer_initWithNetI2pI2PAppContext_withInt_(context, max));
}

NetI2pKademliaKBucketSet *new_NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_(NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b) {
  J2OBJC_NEW_IMPL(NetI2pKademliaKBucketSet, initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_, context, us, max, b)
}

NetI2pKademliaKBucketSet *create_NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_(NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b) {
  J2OBJC_CREATE_IMPL(NetI2pKademliaKBucketSet, initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_, context, us, max, b)
}

void NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(NetI2pKademliaKBucketSet *self, NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b, id<NetI2pKademliaKBucketTrimmer> trimmer) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_bucketsLock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(false));
  JreStrongAssign(&self->_us_, us);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pKademliaKBucketSet_class_()]);
  JreStrongAssign(&self->_trimmer_, trimmer);
  if (max <= 4 || b <= 0 || b > 8) @throw create_JavaLangIllegalArgumentException_init();
  self->KEYSIZE_BITS_ = [((NetI2pDataSimpleDataStructure *) nil_chk(us)) length] * 8;
  self->B_VALUE_ = b;
  self->B_FACTOR_ = JreLShift32(1, (b - 1));
  self->NUM_BUCKETS_ = self->KEYSIZE_BITS_ * self->B_FACTOR_;
  self->BUCKET_SIZE_ = max;
  JreStrongAssign(&self->_buckets_, NetI2pKademliaKBucketSet_createBuckets(self));
  JreStrongAssignAndConsume(&self->_rangeCalc_, new_NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(us, self->B_VALUE_));
  NetI2pKademliaKBucketSet_makeKeyWithByteArray_(self, [IOSByteArray arrayWithLength:[us length]]);
}

NetI2pKademliaKBucketSet *new_NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b, id<NetI2pKademliaKBucketTrimmer> trimmer) {
  J2OBJC_NEW_IMPL(NetI2pKademliaKBucketSet, initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_, context, us, max, b, trimmer)
}

NetI2pKademliaKBucketSet *create_NetI2pKademliaKBucketSet_initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(NetI2pI2PAppContext *context, NetI2pDataSimpleDataStructure *us, jint max, jint b, id<NetI2pKademliaKBucketTrimmer> trimmer) {
  J2OBJC_CREATE_IMPL(NetI2pKademliaKBucketSet, initWithNetI2pI2PAppContext_withNetI2pDataSimpleDataStructure_withInt_withInt_withNetI2pKademliaKBucketTrimmer_, context, us, max, b, trimmer)
}

void NetI2pKademliaKBucketSet_getReadLock(NetI2pKademliaKBucketSet *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_bucketsLock_)) readLock])) lock];
}

jboolean NetI2pKademliaKBucketSet_tryReadLock(NetI2pKademliaKBucketSet *self) {
  return [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_bucketsLock_)) readLock])) tryLock];
}

void NetI2pKademliaKBucketSet_releaseReadLock(NetI2pKademliaKBucketSet *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_bucketsLock_)) readLock])) unlock];
}

jboolean NetI2pKademliaKBucketSet_getWriteLock(NetI2pKademliaKBucketSet *self) {
  @try {
    jboolean rv = [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_bucketsLock_)) writeLock])) tryLockWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    if ((!rv) && [((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [((NetI2pUtilLog *) nil_chk(self->_log_)) warnWithNSString:JreStrcat("$I", @"no lock, size is: ", [self->_bucketsLock_ getQueueLength]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"rats")];
    return rv;
  }
  @catch (JavaLangInterruptedException *ie) {
  }
  return false;
}

void NetI2pKademliaKBucketSet_releaseWriteLock(NetI2pKademliaKBucketSet *self) {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->_bucketsLock_)) writeLock])) unlock];
}

jboolean NetI2pKademliaKBucketSet_shouldSplitWithNetI2pKademliaKBucket_(NetI2pKademliaKBucketSet *self, id<NetI2pKademliaKBucket> b) {
  return [((id<NetI2pKademliaKBucket>) nil_chk(b)) getRangeBegin] != [b getRangeEnd] && [b getKeyCount] > self->BUCKET_SIZE_;
}

void NetI2pKademliaKBucketSet_splitWithInt_(NetI2pKademliaKBucketSet *self, jint r) {
  if (!NetI2pKademliaKBucketSet_getWriteLock(self)) return;
  @try {
    NetI2pKademliaKBucketSet_locked_splitWithInt_(self, r);
  }
  @finally {
    NetI2pKademliaKBucketSet_releaseWriteLock(self);
  }
}

void NetI2pKademliaKBucketSet_locked_splitWithInt_(NetI2pKademliaKBucketSet *self, jint r) {
  jint b = NetI2pKademliaKBucketSet_pickBucketWithInt_(self, r);
  while (NetI2pKademliaKBucketSet_shouldSplitWithNetI2pKademliaKBucket_(self, [((id<JavaUtilList>) nil_chk(self->_buckets_)) getWithInt:b])) {
    id<NetI2pKademliaKBucket> b0 = [self->_buckets_ getWithInt:b];
    jint s1;
    jint e1;
    jint s2;
    jint e2;
    s1 = [((id<NetI2pKademliaKBucket>) nil_chk(b0)) getRangeBegin];
    e2 = [b0 getRangeEnd];
    if (self->B_VALUE_ == 1 || ((s1 & (self->B_FACTOR_ - 1)) == 0 && ((e2 + 1) & (self->B_FACTOR_ - 1)) == 0 && e2 > s1 + self->B_FACTOR_)) {
      s2 = e2 + 1 - self->B_FACTOR_;
    }
    else {
      s2 = s1 + ((1 + e2 - s1) / 2);
    }
    e1 = s2 - 1;
    if ([((NetI2pUtilLog *) nil_chk(self->_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:JreStrcat("$ICI$ICI$ICIC", @"Splitting (", s1, ',', e2, @") -> (", s1, ',', e1, @") (", s2, ',', e2, ')')];
    id<NetI2pKademliaKBucket> b1 = NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(self, s1, e1);
    id<NetI2pKademliaKBucket> b2 = NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(self, s2, e2);
    for (NetI2pDataSimpleDataStructure * __strong key in nil_chk([b0 getEntries])) {
      if ([self getRangeWithNetI2pDataSimpleDataStructure:key] < s2) [((id<NetI2pKademliaKBucket>) nil_chk(b1)) addWithNetI2pDataSimpleDataStructure:key];
      else [((id<NetI2pKademliaKBucket>) nil_chk(b2)) addWithNetI2pDataSimpleDataStructure:key];
    }
    [self->_buckets_ setWithInt:b withId:b1];
    [self->_buckets_ addWithInt:b + 1 withId:b2];
    if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_DEBUG]) [self->_log_ debugWithNSString:JreStrcat("$I$@$@$@", @"Split bucket at idx ", b, @":\n", b0, @"\ninto: ", b1, @"\nand: ", b2)];
    if ([((id<NetI2pKademliaKBucket>) nil_chk(b2)) getKeyCount] > self->BUCKET_SIZE_) {
      if ([self->_log_ shouldLogWithInt:NetI2pUtilLog_INFO]) [self->_log_ infoWithNSString:@"All went into 2nd bucket after split"];
    }
  }
}

jint NetI2pKademliaKBucketSet_pickBucketWithNetI2pDataSimpleDataStructure_(NetI2pKademliaKBucketSet *self, NetI2pDataSimpleDataStructure *key) {
  jint range = [self getRangeWithNetI2pDataSimpleDataStructure:key];
  if (range < 0) return -1;
  jint rv = NetI2pKademliaKBucketSet_pickBucketWithInt_(self, range);
  if (rv >= 0) {
    return rv;
  }
  [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$@$$C", @"Key does not fit in any bucket?!\nKey  : [", NetI2pDataDataHelper_toHexStringWithByteArray_([((NetI2pDataSimpleDataStructure *) nil_chk(key)) getData]), @"]\nUs   : ", self->_us_, @"\nDelta: [", NetI2pDataDataHelper_toHexStringWithByteArray_(NetI2pDataDataHelper_xor__WithByteArray_withByteArray_([((NetI2pDataSimpleDataStructure *) nil_chk(self->_us_)) getData], [key getData])), ']') withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"???")];
  [self->_log_ errorWithNSString:[self description]];
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"pickBucket returned ", rv));
}

id<NetI2pKademliaKBucket> NetI2pKademliaKBucketSet_getBucketWithNetI2pDataSimpleDataStructure_(NetI2pKademliaKBucketSet *self, NetI2pDataSimpleDataStructure *key) {
  jint bucket = NetI2pKademliaKBucketSet_pickBucketWithNetI2pDataSimpleDataStructure_(self, key);
  if (bucket < 0) return nil;
  return [((id<JavaUtilList>) nil_chk(self->_buckets_)) getWithInt:bucket];
}

jint NetI2pKademliaKBucketSet_pickBucketWithInt_(NetI2pKademliaKBucketSet *self, jint range) {
  if (self->B_VALUE_ <= 3) {
    for (jint i = [((id<JavaUtilList>) nil_chk(self->_buckets_)) size] - 1; i >= 0; i--) {
      id<NetI2pKademliaKBucket> b = [self->_buckets_ getWithInt:i];
      if (range >= [((id<NetI2pKademliaKBucket>) nil_chk(b)) getRangeBegin] && range <= [b getRangeEnd]) return i;
    }
    return -1;
  }
  else {
    id<NetI2pKademliaKBucket> dummy = create_NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(range);
    return JavaUtilCollections_binarySearchWithJavaUtilList_withId_withJavaUtilComparator_(self->_buckets_, dummy, create_NetI2pKademliaKBucketSet_BucketComparator_init());
  }
}

id<JavaUtilList> NetI2pKademliaKBucketSet_createBuckets(NetI2pKademliaKBucketSet *self) {
  id<JavaUtilList> buckets = create_JavaUtilArrayList_initWithInt_(4 * self->B_FACTOR_);
  [buckets addWithId:NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(self, 0, self->NUM_BUCKETS_ - 1)];
  return buckets;
}

id<NetI2pKademliaKBucket> NetI2pKademliaKBucketSet_createBucketWithInt_withInt_(NetI2pKademliaKBucketSet *self, jint start, jint end) {
  if (end - start >= self->B_FACTOR_ && (((end + 1) & (self->B_FACTOR_ - 1)) != 0 || (start & (self->B_FACTOR_ - 1)) != 0)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$ICI", @"Sub-bkt crosses K-bkt boundary: ", start, '-', end));
  id<NetI2pKademliaKBucket> bucket = create_NetI2pKademliaKBucketImpl_initWithNetI2pI2PAppContext_withInt_withInt_withInt_withNetI2pKademliaKBucketTrimmer_(self->_context_, start, end, self->BUCKET_SIZE_, self->_trimmer_);
  return bucket;
}

NetI2pDataSimpleDataStructure *NetI2pKademliaKBucketSet_makeKeyWithByteArray_(NetI2pKademliaKBucketSet *self, IOSByteArray *data) {
  jint len = [((NetI2pDataSimpleDataStructure *) nil_chk(self->_us_)) length];
  jint dlen = ((IOSByteArray *) nil_chk(data))->size_;
  if (dlen > len + 1 || (dlen == len + 1 && IOSByteArray_Get(data, 0) != 0)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"bad length ", dlen, @" > ", len));
  NetI2pDataSimpleDataStructure *rv;
  @try {
    rv = [((JavaLangReflectConstructor *) nil_chk([[self->_us_ java_getClass] getDeclaredConstructor:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"fail" withJavaLangThrowable:e];
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  if (dlen == len) {
    [((NetI2pDataSimpleDataStructure *) nil_chk(rv)) setDataWithByteArray:data];
  }
  else {
    IOSByteArray *ndata = [IOSByteArray arrayWithLength:len];
    if (dlen == len + 1) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 1, ndata, 0, len);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, ndata, len - dlen, dlen);
    }
    [((NetI2pDataSimpleDataStructure *) nil_chk(rv)) setDataWithByteArray:ndata];
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pKademliaKBucketSet)

@implementation NetI2pKademliaKBucketSet_Range

- (instancetype)initWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)us
                                              withInt:(jint)bValue {
  NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(self, us, bValue);
  return self;
}

- (jint)getRangeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)key {
  JavaLangInteger *rv;
  @synchronized(_distanceCache_) {
    rv = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(_distanceCache_)) getWithId:key]);
    if (rv == nil) {
      JavaMathBigInteger *xor_ = [((JavaMathBigInteger *) nil_chk(_bigUs_)) xor__WithJavaMathBigInteger:create_JavaMathBigInteger_initWithInt_withByteArray_(1, [((NetI2pDataSimpleDataStructure *) nil_chk(key)) getData])];
      jint range = [((JavaMathBigInteger *) nil_chk(xor_)) bitLength] - 1;
      if (_bValue_ > 1) {
        jint toShift = range + 1 - _bValue_;
        jint highbit = range;
        JreLShiftAssignInt(&range, _bValue_ - 1);
        if (toShift >= 0) {
          jint extra = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([xor_ clearBitWithInt:highbit])) shiftRightWithInt:toShift])) intValue];
          range += extra;
        }
      }
      rv = JreRetainedLocalValue(JavaLangInteger_valueOfWithInt_(range));
      [_distanceCache_ putWithId:key withId:rv];
    }
  }
  return [rv intValue];
}

- (void)clear {
  @synchronized(_distanceCache_) {
    [((id<JavaUtilMap>) nil_chk(_distanceCache_)) clear];
  }
}

- (void)dealloc {
  RELEASE_(_bigUs_);
  RELEASE_(_distanceCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataSimpleDataStructure:withInt:);
  methods[1].selector = @selector(getRangeWithNetI2pDataSimpleDataStructure:);
  methods[2].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_bValue_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_bigUs_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_distanceCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataSimpleDataStructure;I", "(TT;I)V", "getRange", "LNetI2pDataSimpleDataStructure;", "(TT;)I", "Ljava/util/Map<TT;Ljava/lang/Integer;>;", "LNetI2pKademliaKBucketSet;", "<T:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pKademliaKBucketSet_Range = { "Range", "net.i2p.kademlia", ptrTable, methods, fields, 7, 0xa, 3, 3, 6, -1, -1, 7, -1 };
  return &_NetI2pKademliaKBucketSet_Range;
}

@end

void NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pKademliaKBucketSet_Range *self, NetI2pDataSimpleDataStructure *us, jint bValue) {
  NSObject_init(self);
  self->_bValue_ = bValue;
  JreStrongAssignAndConsume(&self->_bigUs_, new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((NetI2pDataSimpleDataStructure *) nil_chk(us)) getData]));
  JreStrongAssignAndConsume(&self->_distanceCache_, new_NetI2pUtilLHMCache_initWithInt_(256));
}

NetI2pKademliaKBucketSet_Range *new_NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pDataSimpleDataStructure *us, jint bValue) {
  J2OBJC_NEW_IMPL(NetI2pKademliaKBucketSet_Range, initWithNetI2pDataSimpleDataStructure_withInt_, us, bValue)
}

NetI2pKademliaKBucketSet_Range *create_NetI2pKademliaKBucketSet_Range_initWithNetI2pDataSimpleDataStructure_withInt_(NetI2pDataSimpleDataStructure *us, jint bValue) {
  J2OBJC_CREATE_IMPL(NetI2pKademliaKBucketSet_Range, initWithNetI2pDataSimpleDataStructure_withInt_, us, bValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pKademliaKBucketSet_Range)

@implementation NetI2pKademliaKBucketSet_DummyBucket

- (instancetype)initWithInt:(jint)range {
  NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(self, range);
  return self;
}

- (jint)getRangeBegin {
  return r_;
}

- (jint)getRangeEnd {
  return r_;
}

- (jint)getKeyCount {
  return 0;
}

- (id<JavaUtilSet>)getEntries {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)getEntriesWithNetI2pKademliaSelectionCollector:(id<NetI2pKademliaSelectionCollector>)collector {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)clear {
}

- (jboolean)addWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)peer {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)peer {
  return false;
}

- (void)setLastChanged {
}

- (jlong)getLastChanged {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getRangeBegin);
  methods[2].selector = @selector(getRangeEnd);
  methods[3].selector = @selector(getKeyCount);
  methods[4].selector = @selector(getEntries);
  methods[5].selector = @selector(getEntriesWithNetI2pKademliaSelectionCollector:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(addWithNetI2pDataSimpleDataStructure:);
  methods[8].selector = @selector(removeWithNetI2pDataSimpleDataStructure:);
  methods[9].selector = @selector(setLastChanged);
  methods[10].selector = @selector(getLastChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "r_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()Ljava/util/Set<TT;>;", "getEntries", "LNetI2pKademliaSelectionCollector;", "(Lnet/i2p/kademlia/SelectionCollector<TT;>;)V", "add", "LNetI2pDataSimpleDataStructure;", "(TT;)Z", "remove", "LNetI2pKademliaKBucketSet;", "<T:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;Lnet/i2p/kademlia/KBucket<TT;>;" };
  static const J2ObjcClassInfo _NetI2pKademliaKBucketSet_DummyBucket = { "DummyBucket", "net.i2p.kademlia", ptrTable, methods, fields, 7, 0xa, 11, 1, 9, -1, -1, 10, -1 };
  return &_NetI2pKademliaKBucketSet_DummyBucket;
}

@end

void NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(NetI2pKademliaKBucketSet_DummyBucket *self, jint range) {
  NSObject_init(self);
  self->r_ = range;
}

NetI2pKademliaKBucketSet_DummyBucket *new_NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(jint range) {
  J2OBJC_NEW_IMPL(NetI2pKademliaKBucketSet_DummyBucket, initWithInt_, range)
}

NetI2pKademliaKBucketSet_DummyBucket *create_NetI2pKademliaKBucketSet_DummyBucket_initWithInt_(jint range) {
  J2OBJC_CREATE_IMPL(NetI2pKademliaKBucketSet_DummyBucket, initWithInt_, range)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pKademliaKBucketSet_DummyBucket)

@implementation NetI2pKademliaKBucketSet_BucketComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pKademliaKBucketSet_BucketComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id<NetI2pKademliaKBucket>)l
               withId:(id<NetI2pKademliaKBucket>)r {
  if ([((id<NetI2pKademliaKBucket>) nil_chk(l)) getRangeEnd] < [((id<NetI2pKademliaKBucket>) nil_chk(r)) getRangeBegin]) return -1;
  if ([l getRangeBegin] > [r getRangeEnd]) return 1;
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNetI2pKademliaKBucket;LNetI2pKademliaKBucket;", "(Lnet/i2p/kademlia/KBucket<TT;>;Lnet/i2p/kademlia/KBucket<TT;>;)I", "LNetI2pKademliaKBucketSet;", "<T:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;Ljava/util/Comparator<Lnet/i2p/kademlia/KBucket<TT;>;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pKademliaKBucketSet_BucketComparator = { "BucketComparator", "net.i2p.kademlia", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_NetI2pKademliaKBucketSet_BucketComparator;
}

@end

void NetI2pKademliaKBucketSet_BucketComparator_init(NetI2pKademliaKBucketSet_BucketComparator *self) {
  NSObject_init(self);
}

NetI2pKademliaKBucketSet_BucketComparator *new_NetI2pKademliaKBucketSet_BucketComparator_init() {
  J2OBJC_NEW_IMPL(NetI2pKademliaKBucketSet_BucketComparator, init)
}

NetI2pKademliaKBucketSet_BucketComparator *create_NetI2pKademliaKBucketSet_BucketComparator_init() {
  J2OBJC_CREATE_IMPL(NetI2pKademliaKBucketSet_BucketComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pKademliaKBucketSet_BucketComparator)
