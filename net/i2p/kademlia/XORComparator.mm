//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/kademlia/XORComparator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/kademlia/XORComparator.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetI2pKademliaXORComparator () {
 @public
  IOSByteArray *_base_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pKademliaXORComparator, _base_, IOSByteArray *)

@implementation NetI2pKademliaXORComparator

- (instancetype)initWithNetI2pDataSimpleDataStructure:(NetI2pDataSimpleDataStructure *)target {
  NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(self, target);
  return self;
}

- (jint)compareWithId:(NetI2pDataSimpleDataStructure *)lhs
               withId:(NetI2pDataSimpleDataStructure *)rhs {
  IOSByteArray *lhsb = [((NetI2pDataSimpleDataStructure *) nil_chk(lhs)) getData];
  IOSByteArray *rhsb = [((NetI2pDataSimpleDataStructure *) nil_chk(rhs)) getData];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(_base_))->size_; i++) {
    jint ld = (IOSByteArray_Get(nil_chk(lhsb), i) ^ IOSByteArray_Get(_base_, i)) & (jint) 0xff;
    jint rd = (IOSByteArray_Get(nil_chk(rhsb), i) ^ IOSByteArray_Get(_base_, i)) & (jint) 0xff;
    if (ld < rd) return -1;
    if (ld > rd) return 1;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(_base_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataSimpleDataStructure:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_base_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataSimpleDataStructure;", "(TT;)V", "compare", "LNetI2pDataSimpleDataStructure;LNetI2pDataSimpleDataStructure;", "(TT;TT;)I", "<T:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;Ljava/util/Comparator<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _NetI2pKademliaXORComparator = { "XORComparator", "net.i2p.kademlia", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, 5, -1 };
  return &_NetI2pKademliaXORComparator;
}

@end

void NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(NetI2pKademliaXORComparator *self, NetI2pDataSimpleDataStructure *target) {
  NSObject_init(self);
  JreStrongAssign(&self->_base_, [((NetI2pDataSimpleDataStructure *) nil_chk(target)) getData]);
}

NetI2pKademliaXORComparator *new_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(NetI2pDataSimpleDataStructure *target) {
  J2OBJC_NEW_IMPL(NetI2pKademliaXORComparator, initWithNetI2pDataSimpleDataStructure_, target)
}

NetI2pKademliaXORComparator *create_NetI2pKademliaXORComparator_initWithNetI2pDataSimpleDataStructure_(NetI2pDataSimpleDataStructure *target) {
  J2OBJC_CREATE_IMPL(NetI2pKademliaXORComparator, initWithNetI2pDataSimpleDataStructure_, target)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pKademliaXORComparator)
