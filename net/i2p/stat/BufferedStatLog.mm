//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/stat/BufferedStatLog.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedWriter.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/stat/BufferedStatLog.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pStatBufferedStatLog () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  IOSObjectArray *_events_;
  jint _eventNext_;
  jint _lastWrite_;
  jint _flushFrequency_;
  id<JavaUtilList> _statFilters_;
  NSString *_lastFilters_;
  JavaIoBufferedWriter *_out_;
  NSString *_outFile_;
  volatile_jboolean _filtersSpecified_;
}

- (jboolean)shouldLogWithNSString:(NSString *)stat;

- (void)updateFilters;

@end

J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _events_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _statFilters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _lastFilters_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _out_, JavaIoBufferedWriter *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog, _outFile_, NSString *)

inline jint NetI2pStatBufferedStatLog_get_BUFFER_SIZE(void);
#define NetI2pStatBufferedStatLog_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pStatBufferedStatLog, BUFFER_SIZE, jint)

inline jboolean NetI2pStatBufferedStatLog_get_DISABLE_LOGGING(void);
#define NetI2pStatBufferedStatLog_DISABLE_LOGGING false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pStatBufferedStatLog, DISABLE_LOGGING, jboolean)

__attribute__((unused)) static jboolean NetI2pStatBufferedStatLog_shouldLogWithNSString_(NetI2pStatBufferedStatLog *self, NSString *stat);

__attribute__((unused)) static void NetI2pStatBufferedStatLog_updateFilters(NetI2pStatBufferedStatLog *self);

@interface NetI2pStatBufferedStatLog_StatLogWriter : NSObject < JavaLangRunnable > {
 @public
  NetI2pStatBufferedStatLog *this$0_;
  JavaTextSimpleDateFormat *_fmt_;
}

- (instancetype)initWithNetI2pStatBufferedStatLog:(NetI2pStatBufferedStatLog *)outer$;

- (void)run;

- (void)writeEventsWithInt:(jint)start
                   withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pStatBufferedStatLog_StatLogWriter)

J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog_StatLogWriter, _fmt_, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog_StatLogWriter *self, NetI2pStatBufferedStatLog *outer$);

__attribute__((unused)) static NetI2pStatBufferedStatLog_StatLogWriter *new_NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pStatBufferedStatLog_StatLogWriter *create_NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$);

__attribute__((unused)) static void NetI2pStatBufferedStatLog_StatLogWriter_writeEventsWithInt_withInt_(NetI2pStatBufferedStatLog_StatLogWriter *self, jint start, jint end);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pStatBufferedStatLog_StatLogWriter)

@interface NetI2pStatBufferedStatLog_StatEvent : NSObject {
 @public
  NetI2pStatBufferedStatLog *this$0_;
  jlong _time_;
  NSString *_scope_;
  NSString *_stat_;
  jlong _value_;
  jlong _duration_;
}

- (instancetype)initWithNetI2pStatBufferedStatLog:(NetI2pStatBufferedStatLog *)outer$;

- (jlong)getTime;

- (NSString *)getScope;

- (NSString *)getStat;

- (jlong)getValue;

- (jlong)getDuration;

- (void)init__WithNSString:(NSString *)scope
              withNSString:(NSString *)stat
                  withLong:(jlong)value
                  withLong:(jlong)duration OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pStatBufferedStatLog_StatEvent)

J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog_StatEvent, _scope_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pStatBufferedStatLog_StatEvent, _stat_, NSString *)

__attribute__((unused)) static void NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog_StatEvent *self, NetI2pStatBufferedStatLog *outer$);

__attribute__((unused)) static NetI2pStatBufferedStatLog_StatEvent *new_NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pStatBufferedStatLog_StatEvent *create_NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pStatBufferedStatLog_StatEvent)

@implementation NetI2pStatBufferedStatLog

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx {
  NetI2pStatBufferedStatLog_initWithNetI2pI2PAppContext_(self, ctx);
  return self;
}

- (void)addDataWithNSString:(NSString *)scope
               withNSString:(NSString *)stat
                   withLong:(jlong)value
                   withLong:(jlong)duration {
  if (!NetI2pStatBufferedStatLog_shouldLogWithNSString_(self, stat)) return;
  @synchronized(_events_) {
    [((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(nil_chk(_events_), _eventNext_))) init__WithNSString:scope withNSString:stat withLong:value withLong:duration];
    _eventNext_ = (_eventNext_ + 1) % _events_->size_;
    if (_eventNext_ == _lastWrite_) _lastWrite_ = (_lastWrite_ + 1) % _events_->size_;
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$I", @"AddData next=", _eventNext_, @" lastWrite=", _lastWrite_)];
    if (_eventNext_ > _lastWrite_) {
      if (_eventNext_ - _lastWrite_ >= _flushFrequency_) [_events_ java_notifyAll];
    }
    else {
      if (_events_->size_ - 1 - _lastWrite_ + _eventNext_ >= _flushFrequency_) [_events_ java_notifyAll];
    }
  }
}

- (jboolean)shouldLogWithNSString:(NSString *)stat {
  return NetI2pStatBufferedStatLog_shouldLogWithNSString_(self, stat);
}

- (void)updateFilters {
  NetI2pStatBufferedStatLog_updateFilters(self);
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_events_);
  RELEASE_(_statFilters_);
  RELEASE_(_lastFilters_);
  RELEASE_(_out_);
  RELEASE_(_outFile_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(addDataWithNSString:withNSString:withLong:withLong:);
  methods[2].selector = @selector(shouldLogWithNSString:);
  methods[3].selector = @selector(updateFilters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_events_", "[LNetI2pStatBufferedStatLog_StatEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_eventNext_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_flushFrequency_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_statFilters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "_lastFilters_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_out_", "LJavaIoBufferedWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_outFile_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_filtersSpecified_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = NetI2pStatBufferedStatLog_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DISABLE_LOGGING", "Z", .constantValue.asBOOL = NetI2pStatBufferedStatLog_DISABLE_LOGGING, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "addData", "LNSString;LNSString;JJ", "shouldLog", "LNSString;", "Ljava/util/List<Ljava/lang/String;>;", "LNetI2pStatBufferedStatLog_StatLogWriter;LNetI2pStatBufferedStatLog_StatEvent;" };
  static const J2ObjcClassInfo _NetI2pStatBufferedStatLog = { "BufferedStatLog", "net.i2p.stat", ptrTable, methods, fields, 7, 0x1, 4, 13, -1, 6, -1, -1, -1 };
  return &_NetI2pStatBufferedStatLog;
}

@end

void NetI2pStatBufferedStatLog_initWithNetI2pI2PAppContext_(NetI2pStatBufferedStatLog *self, NetI2pI2PAppContext *ctx) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pStatBufferedStatLog_class_()]);
  JreStrongAssignAndConsume(&self->_events_, [IOSObjectArray newArrayWithLength:NetI2pStatBufferedStatLog_BUFFER_SIZE type:NetI2pStatBufferedStatLog_StatEvent_class_()]);
  for (jint i = 0; i < NetI2pStatBufferedStatLog_BUFFER_SIZE; i++) IOSObjectArray_SetAndConsume(self->_events_, i, new_NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(self));
  self->_eventNext_ = 0;
  self->_lastWrite_ = self->_events_->size_ - 1;
  JreStrongAssignAndConsume(&self->_statFilters_, new_JavaUtilArrayList_initWithInt_(10));
  self->_flushFrequency_ = 500;
  NetI2pStatBufferedStatLog_updateFilters(self);
  NetI2pUtilI2PThread *writer = create_NetI2pUtilI2PThread_initWithJavaLangRunnable_withNSString_(create_NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(self), @"StatLogWriter");
  [writer setDaemonWithBoolean:true];
  [writer start];
}

NetI2pStatBufferedStatLog *new_NetI2pStatBufferedStatLog_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_NEW_IMPL(NetI2pStatBufferedStatLog, initWithNetI2pI2PAppContext_, ctx)
}

NetI2pStatBufferedStatLog *create_NetI2pStatBufferedStatLog_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *ctx) {
  J2OBJC_CREATE_IMPL(NetI2pStatBufferedStatLog, initWithNetI2pI2PAppContext_, ctx)
}

jboolean NetI2pStatBufferedStatLog_shouldLogWithNSString_(NetI2pStatBufferedStatLog *self, NSString *stat) {
  if (!JreLoadVolatileBoolean(&self->_filtersSpecified_)) return false;
  @synchronized(self->_statFilters_) {
    return [((id<JavaUtilList>) nil_chk(self->_statFilters_)) containsWithId:stat] || [self->_statFilters_ containsWithId:@"*"];
  }
}

void NetI2pStatBufferedStatLog_updateFilters(NetI2pStatBufferedStatLog *self) {
  NSString *val = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pStatStatManager_PROP_STAT_FILTER];
  if (val != nil) {
    if ((self->_lastFilters_ != nil) && ([((NSString *) nil_chk(self->_lastFilters_)) isEqual:val])) {
    }
    else {
      JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(val, @",");
      @synchronized(self->_statFilters_) {
        [((id<JavaUtilList>) nil_chk(self->_statFilters_)) clear];
        while ([tok hasMoreTokens]) [self->_statFilters_ addWithId:[((NSString *) nil_chk([tok nextToken])) java_trim]];
        JreAssignVolatileBoolean(&self->_filtersSpecified_, ![self->_statFilters_ isEmpty]);
      }
    }
    JreStrongAssign(&self->_lastFilters_, val);
  }
  else {
    @synchronized(self->_statFilters_) {
      [((id<JavaUtilList>) nil_chk(self->_statFilters_)) clear];
      JreAssignVolatileBoolean(&self->_filtersSpecified_, false);
    }
  }
  NSString *filename = [self->_context_ getPropertyWithNSString:NetI2pStatStatManager_PROP_STAT_FILE withNSString:NetI2pStatStatManager_DEFAULT_STAT_FILE];
  JavaIoFile *foo = create_JavaIoFile_initWithNSString_(filename);
  if (![foo isAbsolute]) filename = [(create_JavaIoFile_initWithJavaIoFile_withNSString_([self->_context_ getRouterDir], filename)) getAbsolutePath];
  if ((self->_outFile_ != nil) && ([((NSString *) nil_chk(self->_outFile_)) isEqual:filename])) {
  }
  else {
    if (self->_out_ != nil) @try {
      [self->_out_ close];
    }
    @catch (JavaIoIOException *ioe) {
    }
    JreStrongAssign(&self->_outFile_, filename);
    @try {
      JreStrongAssignAndConsume(&self->_out_, new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(create_JavaIoFileOutputStream_initWithNSString_withBoolean_(self->_outFile_, true), @"UTF-8"), 32 * 1024));
    }
    @catch (JavaIoIOException *ioe) {
      [ioe printStackTrace];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pStatBufferedStatLog)

@implementation NetI2pStatBufferedStatLog_StatLogWriter

- (instancetype)initWithNetI2pStatBufferedStatLog:(NetI2pStatBufferedStatLog *)outer$ {
  NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(self, outer$);
  return self;
}

- (void)run {
  jint writeStart = -1;
  jint writeEnd = -1;
  while (true) {
    @try {
      @synchronized(this$0_->_events_) {
        if (this$0_->_eventNext_ > this$0_->_lastWrite_) {
          if (this$0_->_eventNext_ - this$0_->_lastWrite_ < this$0_->_flushFrequency_) [((IOSObjectArray *) nil_chk(this$0_->_events_)) java_waitWithLong:30 * 1000];
        }
        else {
          if (((IOSObjectArray *) nil_chk(this$0_->_events_))->size_ - 1 - this$0_->_lastWrite_ + this$0_->_eventNext_ < this$0_->_flushFrequency_) [this$0_->_events_ java_waitWithLong:30 * 1000];
        }
        writeStart = (this$0_->_lastWrite_ + 1) % ((IOSObjectArray *) nil_chk(this$0_->_events_))->size_;
        writeEnd = this$0_->_eventNext_;
        this$0_->_lastWrite_ = (writeEnd == 0 ? this$0_->_events_->size_ - 1 : writeEnd - 1);
      }
      if (writeStart != writeEnd) {
        @try {
          if ([((NetI2pUtilLog *) nil_chk(this$0_->_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [this$0_->_log_ debugWithNSString:JreStrcat("$I$I", @"writing ", writeStart, @"->", writeEnd)];
          NetI2pStatBufferedStatLog_StatLogWriter_writeEventsWithInt_withInt_(self, writeStart, writeEnd);
        }
        @catch (JavaLangRuntimeException *e) {
          [this$0_->_log_ errorWithNSString:JreStrcat("$I$I", @"error writing ", writeStart, @"->", writeEnd) withJavaLangThrowable:e];
        }
      }
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (void)writeEventsWithInt:(jint)start
                   withInt:(jint)end {
  NetI2pStatBufferedStatLog_StatLogWriter_writeEventsWithInt_withInt_(self, start, end);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_fmt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pStatBufferedStatLog:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(writeEventsWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pStatBufferedStatLog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_fmt_", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeEvents", "II", "LNetI2pStatBufferedStatLog;" };
  static const J2ObjcClassInfo _NetI2pStatBufferedStatLog_StatLogWriter = { "StatLogWriter", "net.i2p.stat", ptrTable, methods, fields, 7, 0x2, 3, 2, 2, -1, -1, -1, -1 };
  return &_NetI2pStatBufferedStatLog_StatLogWriter;
}

@end

void NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog_StatLogWriter *self, NetI2pStatBufferedStatLog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_fmt_, new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMdd HH:mm:ss.SSS"));
}

NetI2pStatBufferedStatLog_StatLogWriter *new_NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) {
  J2OBJC_NEW_IMPL(NetI2pStatBufferedStatLog_StatLogWriter, initWithNetI2pStatBufferedStatLog_, outer$)
}

NetI2pStatBufferedStatLog_StatLogWriter *create_NetI2pStatBufferedStatLog_StatLogWriter_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pStatBufferedStatLog_StatLogWriter, initWithNetI2pStatBufferedStatLog_, outer$)
}

void NetI2pStatBufferedStatLog_StatLogWriter_writeEventsWithInt_withInt_(NetI2pStatBufferedStatLog_StatLogWriter *self, jint start, jint end) {
  @try {
    NetI2pStatBufferedStatLog_updateFilters(self->this$0_);
    jint cur = start;
    while (cur != end) {
      NSString *when = nil;
      @synchronized(self->_fmt_) {
        when = JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(self->_fmt_)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_([((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(nil_chk(self->this$0_->_events_), cur))) getTime])]);
      }
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:when];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@" "];
      if ([((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(self->this$0_->_events_, cur))) getScope] == nil) [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@"noScope"];
      else [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:[((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(self->this$0_->_events_, cur))) getScope]];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@" "];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:[((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(self->this$0_->_events_, cur))) getStat]];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@" "];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:JavaLangLong_toStringWithLong_([((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(self->this$0_->_events_, cur))) getValue])];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@" "];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:JavaLangLong_toStringWithLong_([((NetI2pStatBufferedStatLog_StatEvent *) nil_chk(IOSObjectArray_Get(self->this$0_->_events_, cur))) getDuration])];
      [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) writeWithNSString:@"\n"];
      cur = (cur + 1) % self->this$0_->_events_->size_;
    }
    [((JavaIoBufferedWriter *) nil_chk(self->this$0_->_out_)) flush];
  }
  @catch (JavaIoIOException *ioe) {
    [((NetI2pUtilLog *) nil_chk(self->this$0_->_log_)) errorWithNSString:@"Error writing out" withJavaLangThrowable:ioe];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pStatBufferedStatLog_StatLogWriter)

@implementation NetI2pStatBufferedStatLog_StatEvent

- (instancetype)initWithNetI2pStatBufferedStatLog:(NetI2pStatBufferedStatLog *)outer$ {
  NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(self, outer$);
  return self;
}

- (jlong)getTime {
  return _time_;
}

- (NSString *)getScope {
  return _scope_;
}

- (NSString *)getStat {
  return _stat_;
}

- (jlong)getValue {
  return _value_;
}

- (jlong)getDuration {
  return _duration_;
}

- (void)init__WithNSString:(NSString *)scope
              withNSString:(NSString *)stat
                  withLong:(jlong)value
                  withLong:(jlong)duration {
  JreStrongAssign(&_scope_, scope);
  JreStrongAssign(&_stat_, stat);
  _value_ = value;
  _duration_ = duration;
  _time_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(this$0_->_context_)) clock])) now];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_scope_);
  RELEASE_(_stat_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pStatBufferedStatLog:);
  methods[1].selector = @selector(getTime);
  methods[2].selector = @selector(getScope);
  methods[3].selector = @selector(getStat);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(getDuration);
  methods[6].selector = @selector(init__WithNSString:withNSString:withLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pStatBufferedStatLog;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_time_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_scope_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_stat_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_value_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_duration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LNSString;LNSString;JJ", "LNetI2pStatBufferedStatLog;" };
  static const J2ObjcClassInfo _NetI2pStatBufferedStatLog_StatEvent = { "StatEvent", "net.i2p.stat", ptrTable, methods, fields, 7, 0x2, 7, 6, 2, -1, -1, -1, -1 };
  return &_NetI2pStatBufferedStatLog_StatEvent;
}

@end

void NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog_StatEvent *self, NetI2pStatBufferedStatLog *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pStatBufferedStatLog_StatEvent *new_NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) {
  J2OBJC_NEW_IMPL(NetI2pStatBufferedStatLog_StatEvent, initWithNetI2pStatBufferedStatLog_, outer$)
}

NetI2pStatBufferedStatLog_StatEvent *create_NetI2pStatBufferedStatLog_StatEvent_initWithNetI2pStatBufferedStatLog_(NetI2pStatBufferedStatLog *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pStatBufferedStatLog_StatEvent, initWithNetI2pStatBufferedStatLog_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pStatBufferedStatLog_StatEvent)
