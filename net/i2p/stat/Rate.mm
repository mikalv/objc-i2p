//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/stat/Rate.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/stat/PersistenceHelper.h"
#include "net/i2p/stat/Rate.h"
#include "net/i2p/stat/RateAverages.h"
#include "net/i2p/stat/RateStat.h"
#include "net/i2p/stat/RateSummaryListener.h"

@interface NetI2pStatRate () {
 @public
  jfloat _currentTotalValue_;
  jint _currentEventCount_;
  jint _currentTotalEventTime_;
  jfloat _lastTotalValue_;
  jint _lastEventCount_;
  jint _lastTotalEventTime_;
  jfloat _extremeTotalValue_;
  jint _extremeEventCount_;
  jint _extremeTotalEventTime_;
  jfloat _lifetimeTotalValue_;
  jlong _lifetimeEventCount_;
  jlong _lifetimeTotalEventTime_;
  id<NetI2pStatRateSummaryListener> _summaryListener_;
  NetI2pStatRateStat *_stat_;
  jlong _lastCoalesceDate_;
  jlong _creationDate_;
  jint _period_;
}

+ (jlong)now;

@end

J2OBJC_FIELD_SETTER(NetI2pStatRate, _summaryListener_, id<NetI2pStatRateSummaryListener>)
J2OBJC_FIELD_SETTER(NetI2pStatRate, _stat_, NetI2pStatRateStat *)

inline jint NetI2pStatRate_get_SLACK(void);
#define NetI2pStatRate_SLACK 2000
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pStatRate, SLACK, jint)

__attribute__((unused)) static jlong NetI2pStatRate_now(void);

@implementation NetI2pStatRate

- (jdouble)getCurrentTotalValue {
  @synchronized(self) {
    return _currentTotalValue_;
  }
}

- (jlong)getCurrentEventCount {
  @synchronized(self) {
    return _currentEventCount_;
  }
}

- (jlong)getCurrentTotalEventTime {
  @synchronized(self) {
    return _currentTotalEventTime_;
  }
}

- (jdouble)getLastTotalValue {
  @synchronized(self) {
    return _lastTotalValue_;
  }
}

- (jlong)getLastEventCount {
  @synchronized(self) {
    return _lastEventCount_;
  }
}

- (jlong)getLastTotalEventTime {
  @synchronized(self) {
    return _lastTotalEventTime_;
  }
}

- (jdouble)getExtremeTotalValue {
  @synchronized(self) {
    return _extremeTotalValue_;
  }
}

- (jlong)getExtremeEventCount {
  @synchronized(self) {
    return _extremeEventCount_;
  }
}

- (jlong)getExtremeTotalEventTime {
  @synchronized(self) {
    return _extremeTotalEventTime_;
  }
}

- (jdouble)getLifetimeTotalValue {
  @synchronized(self) {
    return _lifetimeTotalValue_;
  }
}

- (jlong)getLifetimeEventCount {
  @synchronized(self) {
    return _lifetimeEventCount_;
  }
}

- (jlong)getLifetimeTotalEventTime {
  @synchronized(self) {
    return _lifetimeTotalEventTime_;
  }
}

- (jlong)getLastCoalesceDate {
  @synchronized(self) {
    return _lastCoalesceDate_;
  }
}

- (jlong)getCreationDate {
  @synchronized(self) {
    return _creationDate_;
  }
}

- (jlong)getPeriod {
  @synchronized(self) {
    return _period_;
  }
}

- (NetI2pStatRateStat *)getRateStat {
  return _stat_;
}

- (void)setRateStatWithNetI2pStatRateStat:(NetI2pStatRateStat *)rs {
  JreStrongAssign(&_stat_, rs);
}

- (instancetype)initWithLong:(jlong)period {
  NetI2pStatRate_initWithLong_(self, period);
  return self;
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)props
                              withNSString:(NSString *)prefix
                               withBoolean:(jboolean)treatAsCurrent {
  NetI2pStatRate_initWithJavaUtilProperties_withNSString_withBoolean_(self, props, prefix, treatAsCurrent);
  return self;
}

- (void)addDataWithLong:(jlong)value {
  @synchronized(self) {
    JrePlusAssignFloatF(&_currentTotalValue_, value);
    _currentEventCount_++;
    JrePlusAssignFloatF(&_lifetimeTotalValue_, value);
    _lifetimeEventCount_++;
  }
}

- (void)addDataWithLong:(jlong)value
               withLong:(jlong)eventDuration {
  @synchronized(self) {
    JrePlusAssignFloatF(&_currentTotalValue_, value);
    _currentEventCount_++;
    _currentTotalEventTime_ += eventDuration;
    JrePlusAssignFloatF(&_lifetimeTotalValue_, value);
    _lifetimeEventCount_++;
    _lifetimeTotalEventTime_ += eventDuration;
  }
}

- (void)coalesce {
  jlong now = NetI2pStatRate_now();
  jdouble correctedTotalValue;
  @synchronized(self) {
    jlong measuredPeriod = now - _lastCoalesceDate_;
    if (measuredPeriod < _period_ - NetI2pStatRate_SLACK) {
      return;
    }
    jfloat periodFactor = measuredPeriod / (jfloat) _period_;
    _lastTotalValue_ = _currentTotalValue_ / periodFactor;
    _lastEventCount_ = JreFpToInt((0.499999 + (_currentEventCount_ / periodFactor)));
    _lastTotalEventTime_ = JreFpToInt((_currentTotalEventTime_ / periodFactor));
    _lastCoalesceDate_ = now;
    if (_currentEventCount_ == 0) correctedTotalValue = 0;
    else correctedTotalValue = _currentTotalValue_ * (_lastEventCount_ / (jdouble) _currentEventCount_);
    if (_lastTotalValue_ >= _extremeTotalValue_) {
      _extremeTotalValue_ = _lastTotalValue_;
      _extremeEventCount_ = _lastEventCount_;
      _extremeTotalEventTime_ = _lastTotalEventTime_;
    }
    _currentTotalValue_ = 0.0f;
    _currentEventCount_ = 0;
    _currentTotalEventTime_ = 0;
  }
  if (_summaryListener_ != nil) [_summaryListener_ addWithDouble:correctedTotalValue withLong:_lastEventCount_ withDouble:_lastTotalEventTime_ withLong:_period_];
}

- (void)setSummaryListenerWithNetI2pStatRateSummaryListener:(id<NetI2pStatRateSummaryListener>)listener {
  JreStrongAssign(&_summaryListener_, listener);
}

- (id<NetI2pStatRateSummaryListener>)getSummaryListener {
  return _summaryListener_;
}

- (jdouble)getAverageValue {
  @synchronized(self) {
    jint lec = _lastEventCount_;
    if ((_lastTotalValue_ != 0) && (lec > 0)) return _lastTotalValue_ / lec;
    return 0.0;
  }
}

- (jdouble)getExtremeAverageValue {
  @synchronized(self) {
    if ((_extremeTotalValue_ != 0) && (_extremeEventCount_ > 0)) return _extremeTotalValue_ / _extremeEventCount_;
    return 0.0;
  }
}

- (jdouble)getLifetimeAverageValue {
  @synchronized(self) {
    if ((_lifetimeTotalValue_ != 0) && (_lifetimeEventCount_ > 0)) return _lifetimeTotalValue_ / _lifetimeEventCount_;
    return 0.0;
  }
}

- (jdouble)getAvgOrLifetimeAvg {
  @synchronized(self) {
    if ([self getLastEventCount] > 0) return [self getAverageValue];
    return [self getLifetimeAverageValue];
  }
}

- (jdouble)getLastEventSaturation {
  @synchronized(self) {
    if ((_lastEventCount_ > 0) && (_lastTotalEventTime_ > 0)) {
      return ((jdouble) _lastTotalEventTime_) / (jdouble) _period_;
    }
    return 0.0;
  }
}

- (jdouble)getExtremeEventSaturation {
  @synchronized(self) {
    if ((_extremeEventCount_ > 0) && (_extremeTotalEventTime_ > 0)) {
      jdouble eventTime = (jdouble) _extremeTotalEventTime_ / (jdouble) _extremeEventCount_;
      jdouble maxEvents = _period_ / eventTime;
      return _extremeEventCount_ / maxEvents;
    }
    return 0.0;
  }
}

- (jdouble)getLifetimeEventSaturation {
  @synchronized(self) {
    if ((_lastEventCount_ > 0) && (_lifetimeTotalEventTime_ > 0)) {
      jdouble eventTime = (jdouble) _lifetimeTotalEventTime_ / (jdouble) _lifetimeEventCount_;
      jdouble maxEvents = _period_ / eventTime;
      jdouble numPeriods = [self getLifetimePeriods];
      jdouble avgEventsPerPeriod = _lifetimeEventCount_ / numPeriods;
      return avgEventsPerPeriod / maxEvents;
    }
    return 0.0;
  }
}

- (jlong)getLifetimePeriods {
  @synchronized(self) {
    jlong lifetime = NetI2pStatRate_now() - _creationDate_;
    jdouble periods = lifetime / (jdouble) _period_;
    return JreFpToLong(JavaLangMath_floorWithDouble_(periods));
  }
}

- (jdouble)getLastSaturationLimit {
  @synchronized(self) {
    if ((_lastTotalValue_ != 0) && (_lastEventCount_ > 0) && (_lastTotalEventTime_ > 0)) {
      jdouble saturation = [self getLastEventSaturation];
      if (saturation != 0.0) return _lastTotalValue_ / saturation;
      return 0.0;
    }
    return 0.0;
  }
}

- (jdouble)getExtremeSaturationLimit {
  @synchronized(self) {
    if ((_extremeTotalValue_ != 0) && (_extremeEventCount_ > 0) && (_extremeTotalEventTime_ > 0)) {
      jdouble saturation = [self getExtremeEventSaturation];
      if (saturation != 0.0) return _extremeTotalValue_ / saturation;
      return 0.0;
    }
    return 0.0;
  }
}

- (jdouble)getPercentageOfExtremeValue {
  @synchronized(self) {
    if ((_lastTotalValue_ != 0) && (_extremeTotalValue_ != 0)) return _lastTotalValue_ / _extremeTotalValue_;
    return 0.0;
  }
}

- (jdouble)getPercentageOfLifetimeValue {
  @synchronized(self) {
    if ((_lastTotalValue_ != 0) && (_lifetimeTotalValue_ != 0)) {
      jdouble lifetimePeriodValue = _period_ * (_lifetimeTotalValue_ / (NetI2pStatRate_now() - _creationDate_));
      return _lastTotalValue_ / lifetimePeriodValue;
    }
    return 0.0;
  }
}

- (NetI2pStatRateAverages *)computeAverages {
  return [self computeAveragesWithNetI2pStatRateAverages:NetI2pStatRateAverages_getTemp() withBoolean:false];
}

- (NetI2pStatRateAverages *)computeAveragesWithNetI2pStatRateAverages:(NetI2pStatRateAverages *)outArg
                                                          withBoolean:(jboolean)useLifetime {
  @synchronized(self) {
    [((NetI2pStatRateAverages *) nil_chk(outArg)) reset];
    jlong total = _currentEventCount_ + _lastEventCount_;
    [outArg setTotalEventCountWithLong:total];
    if (total <= 0) {
      jdouble avg = useLifetime ? [self getLifetimeAverageValue] : [self getAverageValue];
      [outArg setAverageWithDouble:avg];
    }
    else {
      if (_currentEventCount_ > 0) [outArg setCurrentWithDouble:[self getCurrentTotalValue] / _currentEventCount_];
      if (_lastEventCount_ > 0) [outArg setLastWithDouble:[self getLastTotalValue] / _lastEventCount_];
      [outArg setTotalValuesWithDouble:[self getCurrentTotalValue] + [self getLastTotalValue]];
      [outArg setAverageWithDouble:[outArg getTotalValues] / total];
    }
    return JreRetainedLocalValue(outArg);
  }
}

- (void)storeWithNSString:(NSString *)prefix
withJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  @synchronized(self) {
    NetI2pStatPersistenceHelper_addTimeWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".period", @"Length of the period:", _period_);
    NetI2pStatPersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".creationDate", @"When was this rate created?", _creationDate_);
    NetI2pStatPersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".lastCoalesceDate", @"When did we last coalesce this rate?", _lastCoalesceDate_);
    NetI2pStatPersistenceHelper_addDateWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".currentDate", @"When was this data written?", NetI2pStatRate_now());
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withDouble_(buf, prefix, @".currentTotalValue", @"Total value of data points in the current (uncoalesced) period", _currentTotalValue_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".currentEventCount", @"How many events have occurred in the current (uncoalesced) period?", _currentEventCount_);
    NetI2pStatPersistenceHelper_addTimeWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".currentTotalEventTime", @"How much time have the events in the current (uncoalesced) period consumed?", _currentTotalEventTime_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withDouble_(buf, prefix, @".lastTotalValue", @"Total value of data points in the most recent (coalesced) period", _lastTotalValue_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".lastEventCount", @"How many events have occurred in the most recent (coalesced) period?", _lastEventCount_);
    NetI2pStatPersistenceHelper_addTimeWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".lastTotalEventTime", @"How much time have the events in the most recent (coalesced) period consumed?", _lastTotalEventTime_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withDouble_(buf, prefix, @".extremeTotalValue", @"Total value of data points in the most extreme period", _extremeTotalValue_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".extremeEventCount", @"How many events have occurred in the most extreme period?", _extremeEventCount_);
    NetI2pStatPersistenceHelper_addTimeWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".extremeTotalEventTime", @"How much time have the events in the most extreme period consumed?", _extremeTotalEventTime_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withDouble_(buf, prefix, @".lifetimeTotalValue", @"Total value of data points since this stat was created", _lifetimeTotalValue_);
    NetI2pStatPersistenceHelper_addWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".lifetimeEventCount", @"How many events have occurred since this stat was created?", _lifetimeEventCount_);
    NetI2pStatPersistenceHelper_addTimeWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withLong_(buf, prefix, @".lifetimeTotalEventTime", @"How much total time was consumed by the events since this stat was created?", _lifetimeTotalEventTime_);
  }
}

- (void)load__WithJavaUtilProperties:(JavaUtilProperties *)props
                        withNSString:(NSString *)prefix
                         withBoolean:(jboolean)treatAsCurrent {
  @synchronized(self) {
    _period_ = NetI2pStatPersistenceHelper_getIntWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".period");
    _creationDate_ = NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".creationDate");
    _lastCoalesceDate_ = NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lastCoalesceDate");
    _currentTotalValue_ = (jfloat) NetI2pStatPersistenceHelper_getDoubleWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".currentTotalValue");
    _currentEventCount_ = NetI2pStatPersistenceHelper_getIntWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".currentEventCount");
    _currentTotalEventTime_ = (jint) NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".currentTotalEventTime");
    _lastTotalValue_ = (jfloat) NetI2pStatPersistenceHelper_getDoubleWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lastTotalValue");
    _lastEventCount_ = NetI2pStatPersistenceHelper_getIntWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lastEventCount");
    _lastTotalEventTime_ = (jint) NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lastTotalEventTime");
    _extremeTotalValue_ = (jfloat) NetI2pStatPersistenceHelper_getDoubleWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".extremeTotalValue");
    _extremeEventCount_ = NetI2pStatPersistenceHelper_getIntWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".extremeEventCount");
    _extremeTotalEventTime_ = (jint) NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".extremeTotalEventTime");
    _lifetimeTotalValue_ = (jfloat) NetI2pStatPersistenceHelper_getDoubleWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lifetimeTotalValue");
    _lifetimeEventCount_ = NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lifetimeEventCount");
    _lifetimeTotalEventTime_ = NetI2pStatPersistenceHelper_getLongWithJavaUtilProperties_withNSString_withNSString_(props, prefix, @".lifetimeTotalEventTime");
    if (treatAsCurrent) _lastCoalesceDate_ = NetI2pStatRate_now();
    if (_period_ <= 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Period for ", prefix, @" is invalid"));
    [self coalesce];
  }
}

- (jboolean)isEqual:(id)obj {
  @synchronized(self) {
    if ((obj == nil) || !([obj isKindOfClass:[NetI2pStatRate class]])) return false;
    if (obj == self) return true;
    NetI2pStatRate *r = (NetI2pStatRate *) cast_chk(obj, [NetI2pStatRate class]);
    if (_period_ != [((NetI2pStatRate *) nil_chk(r)) getPeriod] || _creationDate_ != [r getCreationDate]) return false;
    if (_stat_ == nil && r->_stat_ == nil) return true;
    if (_stat_ != nil && r->_stat_ != nil) return [_stat_ nameGroupDescEqualsWithNetI2pStatRateStat:r->_stat_];
    return false;
  }
}

- (NSUInteger)hash {
  @synchronized(self) {
    return NetI2pDataDataHelper_hashCodeWithId_(_stat_) ^ _period_ ^ ((jint) _creationDate_);
  }
}

- (NSString *)description {
  @synchronized(self) {
    JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(2048);
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t total value: "])) appendWithDouble:[self getLastTotalValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t highest total value: "])) appendWithDouble:[self getExtremeTotalValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t lifetime total value: "])) appendWithDouble:[self getLifetimeTotalValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t # periods: "])) appendWithLong:[self getLifetimePeriods]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t average value: "])) appendWithDouble:[self getAverageValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t highest average value: "])) appendWithDouble:[self getExtremeAverageValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t lifetime average value: "])) appendWithDouble:[self getLifetimeAverageValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t % of lifetime rate: "])) appendWithDouble:100.0 * [self getPercentageOfLifetimeValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t % of highest rate: "])) appendWithDouble:100.0 * [self getPercentageOfExtremeValue]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t # events: "])) appendWithLong:[self getLastEventCount]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t lifetime events: "])) appendWithLong:[self getLifetimeEventCount]];
    if ([self getLifetimeTotalEventTime] > 0) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t % of time spent processing events: "])) appendWithDouble:100.0 * [self getLastEventSaturation]];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t total value if we were always processing events: "])) appendWithDouble:[self getLastSaturationLimit]];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t max % of time spent processing events: "])) appendWithDouble:100.0 * [self getExtremeEventSaturation]];
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t max total value if we were always processing events: "])) appendWithDouble:[self getExtremeSaturationLimit]];
    }
    return JreRetainedLocalValue([buf description]);
  }
}

+ (jlong)now {
  return NetI2pStatRate_now();
}

- (void)dealloc {
  RELEASE_(_summaryListener_);
  RELEASE_(_stat_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateStat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateSummaryListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateAverages;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pStatRateAverages;", 0x21, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x21, 14, 4, 3, -1, -1, -1 },
    { NULL, "Z", 0x21, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 18, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1a, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCurrentTotalValue);
  methods[1].selector = @selector(getCurrentEventCount);
  methods[2].selector = @selector(getCurrentTotalEventTime);
  methods[3].selector = @selector(getLastTotalValue);
  methods[4].selector = @selector(getLastEventCount);
  methods[5].selector = @selector(getLastTotalEventTime);
  methods[6].selector = @selector(getExtremeTotalValue);
  methods[7].selector = @selector(getExtremeEventCount);
  methods[8].selector = @selector(getExtremeTotalEventTime);
  methods[9].selector = @selector(getLifetimeTotalValue);
  methods[10].selector = @selector(getLifetimeEventCount);
  methods[11].selector = @selector(getLifetimeTotalEventTime);
  methods[12].selector = @selector(getLastCoalesceDate);
  methods[13].selector = @selector(getCreationDate);
  methods[14].selector = @selector(getPeriod);
  methods[15].selector = @selector(getRateStat);
  methods[16].selector = @selector(setRateStatWithNetI2pStatRateStat:);
  methods[17].selector = @selector(initWithLong:);
  methods[18].selector = @selector(initWithJavaUtilProperties:withNSString:withBoolean:);
  methods[19].selector = @selector(addDataWithLong:);
  methods[20].selector = @selector(addDataWithLong:withLong:);
  methods[21].selector = @selector(coalesce);
  methods[22].selector = @selector(setSummaryListenerWithNetI2pStatRateSummaryListener:);
  methods[23].selector = @selector(getSummaryListener);
  methods[24].selector = @selector(getAverageValue);
  methods[25].selector = @selector(getExtremeAverageValue);
  methods[26].selector = @selector(getLifetimeAverageValue);
  methods[27].selector = @selector(getAvgOrLifetimeAvg);
  methods[28].selector = @selector(getLastEventSaturation);
  methods[29].selector = @selector(getExtremeEventSaturation);
  methods[30].selector = @selector(getLifetimeEventSaturation);
  methods[31].selector = @selector(getLifetimePeriods);
  methods[32].selector = @selector(getLastSaturationLimit);
  methods[33].selector = @selector(getExtremeSaturationLimit);
  methods[34].selector = @selector(getPercentageOfExtremeValue);
  methods[35].selector = @selector(getPercentageOfLifetimeValue);
  methods[36].selector = @selector(computeAverages);
  methods[37].selector = @selector(computeAveragesWithNetI2pStatRateAverages:withBoolean:);
  methods[38].selector = @selector(storeWithNSString:withJavaLangStringBuilder:);
  methods[39].selector = @selector(load__WithJavaUtilProperties:withNSString:withBoolean:);
  methods[40].selector = @selector(isEqual:);
  methods[41].selector = @selector(hash);
  methods[42].selector = @selector(description);
  methods[43].selector = @selector(now);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_currentTotalValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentEventCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_currentTotalEventTime_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTotalValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastEventCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastTotalEventTime_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_extremeTotalValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_extremeEventCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_extremeTotalEventTime_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lifetimeTotalValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lifetimeEventCount_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lifetimeTotalEventTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_summaryListener_", "LNetI2pStatRateSummaryListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_stat_", "LNetI2pStatRateStat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastCoalesceDate_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_creationDate_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_period_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SLACK", "I", .constantValue.asInt = NetI2pStatRate_SLACK, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRateStat", "LNetI2pStatRateStat;", "J", "LJavaLangIllegalArgumentException;", "LJavaUtilProperties;LNSString;Z", "addData", "JJ", "setSummaryListener", "LNetI2pStatRateSummaryListener;", "computeAverages", "LNetI2pStatRateAverages;Z", "store", "LNSString;LJavaLangStringBuilder;", "LJavaIoIOException;", "load", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pStatRate = { "Rate", "net.i2p.stat", ptrTable, methods, fields, 7, 0x1, 44, 18, -1, -1, -1, -1, -1 };
  return &_NetI2pStatRate;
}

@end

void NetI2pStatRate_initWithLong_(NetI2pStatRate *self, jlong period) {
  NSObject_init(self);
  if (period <= 0 || period > JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_init();
  self->_creationDate_ = NetI2pStatRate_now();
  self->_lastCoalesceDate_ = self->_creationDate_;
  self->_period_ = (jint) period;
}

NetI2pStatRate *new_NetI2pStatRate_initWithLong_(jlong period) {
  J2OBJC_NEW_IMPL(NetI2pStatRate, initWithLong_, period)
}

NetI2pStatRate *create_NetI2pStatRate_initWithLong_(jlong period) {
  J2OBJC_CREATE_IMPL(NetI2pStatRate, initWithLong_, period)
}

void NetI2pStatRate_initWithJavaUtilProperties_withNSString_withBoolean_(NetI2pStatRate *self, JavaUtilProperties *props, NSString *prefix, jboolean treatAsCurrent) {
  NetI2pStatRate_initWithLong_(self, 1);
  [self load__WithJavaUtilProperties:props withNSString:prefix withBoolean:treatAsCurrent];
}

NetI2pStatRate *new_NetI2pStatRate_initWithJavaUtilProperties_withNSString_withBoolean_(JavaUtilProperties *props, NSString *prefix, jboolean treatAsCurrent) {
  J2OBJC_NEW_IMPL(NetI2pStatRate, initWithJavaUtilProperties_withNSString_withBoolean_, props, prefix, treatAsCurrent)
}

NetI2pStatRate *create_NetI2pStatRate_initWithJavaUtilProperties_withNSString_withBoolean_(JavaUtilProperties *props, NSString *prefix, jboolean treatAsCurrent) {
  J2OBJC_CREATE_IMPL(NetI2pStatRate, initWithJavaUtilProperties_withNSString_withBoolean_, props, prefix, treatAsCurrent)
}

jlong NetI2pStatRate_now() {
  NetI2pStatRate_initialize();
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pStatRate)
