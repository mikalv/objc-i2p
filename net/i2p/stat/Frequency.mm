//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/stat/Frequency.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "net/i2p/stat/Frequency.h"

@interface NetI2pStatFrequency () {
 @public
  jdouble _avgInterval_;
  jdouble _minAverageInterval_;
  jlong _period_;
  jlong _lastEvent_;
  jlong _start_;
  jlong _count_;
}

- (void)recalculateWithBoolean:(jboolean)eventOccurred;

+ (jlong)now;

@end

__attribute__((unused)) static void NetI2pStatFrequency_recalculateWithBoolean_(NetI2pStatFrequency *self, jboolean eventOccurred);

__attribute__((unused)) static jlong NetI2pStatFrequency_now(void);

__attribute__((unused)) static IOSObjectArray *NetI2pStatFrequency__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pStatFrequency__Annotations$1(void);

@implementation NetI2pStatFrequency

- (instancetype)initWithLong:(jlong)period {
  NetI2pStatFrequency_initWithLong_(self, period);
  return self;
}

- (jlong)getPeriod {
  return _period_;
}

- (jlong)getLastEvent {
  @synchronized(self) {
    return _lastEvent_;
  }
}

- (jdouble)getAverageInterval {
  @synchronized(self) {
    return _avgInterval_;
  }
}

- (jdouble)getMinAverageInterval {
  @synchronized(self) {
    return _minAverageInterval_;
  }
}

- (jdouble)getAverageEventsPerPeriod {
  @synchronized(self) {
    if (_avgInterval_ > 0) return _period_ / _avgInterval_;
    return 0;
  }
}

- (jdouble)getMaxAverageEventsPerPeriod {
  @synchronized(self) {
    if (_minAverageInterval_ > 0 && _minAverageInterval_ <= _period_) return _period_ / _minAverageInterval_;
    return 0;
  }
}

- (jdouble)getStrictAverageInterval {
  @synchronized(self) {
    jlong duration = NetI2pStatFrequency_now() - _start_;
    if ((duration <= 0) || (_count_ <= 0)) return JavaLangDouble_MAX_VALUE;
    return duration / (jdouble) _count_;
  }
}

- (jdouble)getStrictAverageEventsPerPeriod {
  @synchronized(self) {
    jdouble avgInterval = [self getStrictAverageInterval];
    if (avgInterval > 0) return _period_ / avgInterval;
    return 0;
  }
}

- (jlong)getEventCount {
  @synchronized(self) {
    return _count_;
  }
}

- (void)eventOccurred {
  NetI2pStatFrequency_recalculateWithBoolean_(self, true);
}

- (void)recalculate {
  NetI2pStatFrequency_recalculateWithBoolean_(self, false);
}

- (void)recalculateWithBoolean:(jboolean)eventOccurred {
  NetI2pStatFrequency_recalculateWithBoolean_(self, eventOccurred);
}

+ (jlong)now {
  return NetI2pStatFrequency_now();
}

- (void)storeWithJavaLangStringBuilder:(JavaLangStringBuilder *)dest {
  @synchronized(self) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(dest)) appendWithNSString:@"avgInterval:"])) appendWithDouble:_avgInterval_])) appendWithChar:','];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([dest appendWithNSString:@"minAverageInterval"])) appendWithDouble:_minAverageInterval_])) appendWithChar:','];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([dest appendWithNSString:@"lastEvent"])) appendWithLong:_lastEvent_])) appendWithNSString:@","];
    [((JavaLangStringBuilder *) nil_chk([dest appendWithNSString:@"count"])) appendWithLong:_count_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, 1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, 2, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(getPeriod);
  methods[2].selector = @selector(getLastEvent);
  methods[3].selector = @selector(getAverageInterval);
  methods[4].selector = @selector(getMinAverageInterval);
  methods[5].selector = @selector(getAverageEventsPerPeriod);
  methods[6].selector = @selector(getMaxAverageEventsPerPeriod);
  methods[7].selector = @selector(getStrictAverageInterval);
  methods[8].selector = @selector(getStrictAverageEventsPerPeriod);
  methods[9].selector = @selector(getEventCount);
  methods[10].selector = @selector(eventOccurred);
  methods[11].selector = @selector(recalculate);
  methods[12].selector = @selector(recalculateWithBoolean:);
  methods[13].selector = @selector(now);
  methods[14].selector = @selector(storeWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_avgInterval_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_minAverageInterval_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_period_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_lastEvent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_start_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_count_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", (void *)&NetI2pStatFrequency__Annotations$0, (void *)&NetI2pStatFrequency__Annotations$1, "recalculate", "Z", "store", "LJavaLangStringBuilder;" };
  static const J2ObjcClassInfo _NetI2pStatFrequency = { "Frequency", "net.i2p.stat", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pStatFrequency;
}

@end

void NetI2pStatFrequency_initWithLong_(NetI2pStatFrequency *self, jlong period) {
  NSObject_init(self);
  self->_start_ = NetI2pStatFrequency_now();
  self->_period_ = period;
  self->_avgInterval_ = period + 1;
  self->_minAverageInterval_ = self->_avgInterval_;
}

NetI2pStatFrequency *new_NetI2pStatFrequency_initWithLong_(jlong period) {
  J2OBJC_NEW_IMPL(NetI2pStatFrequency, initWithLong_, period)
}

NetI2pStatFrequency *create_NetI2pStatFrequency_initWithLong_(jlong period) {
  J2OBJC_CREATE_IMPL(NetI2pStatFrequency, initWithLong_, period)
}

void NetI2pStatFrequency_recalculateWithBoolean_(NetI2pStatFrequency *self, jboolean eventOccurred) {
  @synchronized(self) {
    jlong now = NetI2pStatFrequency_now();
    jlong interval = now - self->_lastEvent_;
    if (interval > self->_period_) interval = self->_period_;
    else if (interval <= 0) interval = 1;
    if (interval >= self->_period_ && !eventOccurred) {
      self->_avgInterval_ = self->_period_ + 1;
    }
    else {
      jdouble oldWeight = 1 - (interval / (jfloat) self->_period_);
      jdouble newWeight = (interval / (jfloat) self->_period_);
      jdouble oldInterval = self->_avgInterval_ * oldWeight;
      jdouble newInterval = interval * newWeight;
      self->_avgInterval_ = oldInterval + newInterval;
    }
    if ((self->_avgInterval_ < self->_minAverageInterval_) || (self->_minAverageInterval_ <= 0)) self->_minAverageInterval_ = self->_avgInterval_;
    if (eventOccurred) {
      self->_lastEvent_ = now;
      self->_count_++;
    }
  }
}

jlong NetI2pStatFrequency_now() {
  NetI2pStatFrequency_initialize();
  return JavaLangSystem_currentTimeMillis();
}

IOSObjectArray *NetI2pStatFrequency__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pStatFrequency__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pStatFrequency)
