//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/Base64.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataHelper.h"

@interface NetI2pDataBase64 ()

- (instancetype)init;

+ (void)runAppWithNSStringArray:(IOSObjectArray *)args;

+ (IOSByteArray *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (void)encodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)decodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)help;

+ (void)encode3to4WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                        withInt:(jint)numSigBytes
      withJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                  withByteArray:(IOSByteArray *)alpha;

+ (NSString *)safeEncodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                          withBoolean:(jboolean)useStandardAlphabet;

+ (IOSByteArray *)safeDecodeWithNSString:(NSString *)source
                             withBoolean:(jboolean)useStandardAlphabet;

+ (void)encodeBytesWithByteArray:(IOSByteArray *)source
                         withInt:(jint)off
                         withInt:(jint)len
                     withBoolean:(jboolean)breakLines
       withJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                   withByteArray:(IOSByteArray *)alpha;

+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset;

+ (IOSByteArray *)standardDecodeWithNSString:(NSString *)s;

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len;

@end

inline jint NetI2pDataBase64_get_MAX_LINE_LENGTH(void);
#define NetI2pDataBase64_MAX_LINE_LENGTH 76
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataBase64, MAX_LINE_LENGTH, jint)

inline jbyte NetI2pDataBase64_get_EQUALS_SIGN(void);
#define NetI2pDataBase64_EQUALS_SIGN 61
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataBase64, EQUALS_SIGN, jbyte)

inline IOSByteArray *NetI2pDataBase64_get_ALPHABET(void);
static IOSByteArray *NetI2pDataBase64_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase64, ALPHABET, IOSByteArray *)

inline IOSByteArray *NetI2pDataBase64_get_ALPHABET_ALT(void);
static IOSByteArray *NetI2pDataBase64_ALPHABET_ALT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase64, ALPHABET_ALT, IOSByteArray *)

inline IOSByteArray *NetI2pDataBase64_get_DECODABET(void);
static IOSByteArray *NetI2pDataBase64_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase64, DECODABET, IOSByteArray *)

inline jbyte NetI2pDataBase64_get_WHITE_SPACE_ENC(void);
#define NetI2pDataBase64_WHITE_SPACE_ENC -5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataBase64, WHITE_SPACE_ENC, jbyte)

inline jbyte NetI2pDataBase64_get_EQUALS_SIGN_ENC(void);
#define NetI2pDataBase64_EQUALS_SIGN_ENC -1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataBase64, EQUALS_SIGN_ENC, jbyte)

__attribute__((unused)) static void NetI2pDataBase64_init(NetI2pDataBase64 *self);

__attribute__((unused)) static NetI2pDataBase64 *new_NetI2pDataBase64_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataBase64 *create_NetI2pDataBase64_init(void);

__attribute__((unused)) static void NetI2pDataBase64_runAppWithNSStringArray_(IOSObjectArray *args);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase64_readWithJavaIoInputStream_(JavaIoInputStream *inArg);

__attribute__((unused)) static void NetI2pDataBase64_encodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pDataBase64_decodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pDataBase64_help(void);

__attribute__((unused)) static void NetI2pDataBase64_encode3to4WithByteArray_withInt_withInt_withJavaLangStringBuilder_withByteArray_(IOSByteArray *source, jint srcOffset, jint numSigBytes, JavaLangStringBuilder *buf, IOSByteArray *alpha);

__attribute__((unused)) static NSString *NetI2pDataBase64_safeEncodeWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *source, jint off, jint len, jboolean useStandardAlphabet);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase64_safeDecodeWithNSString_withBoolean_(NSString *source, jboolean useStandardAlphabet);

__attribute__((unused)) static void NetI2pDataBase64_encodeBytesWithByteArray_withInt_withInt_withBoolean_withJavaLangStringBuilder_withByteArray_(IOSByteArray *source, jint off, jint len, jboolean breakLines, JavaLangStringBuilder *outArg, IOSByteArray *alpha);

__attribute__((unused)) static jint NetI2pDataBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase64_standardDecodeWithNSString_(NSString *s);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase64_decodeWithByteArray_withInt_withInt_(IOSByteArray *source, jint off, jint len);

J2OBJC_INITIALIZED_DEFN(NetI2pDataBase64)

NSString *NetI2pDataBase64_ALPHABET_I2P = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-~";

@implementation NetI2pDataBase64

+ (NSString *)ALPHABET_I2P {
  return NetI2pDataBase64_ALPHABET_I2P;
}

+ (NSString *)encodeWithNSString:(NSString *)source {
  return NetI2pDataBase64_encodeWithNSString_(source);
}

+ (NSString *)encodeWithByteArray:(IOSByteArray *)source {
  return NetI2pDataBase64_encodeWithByteArray_(source);
}

+ (NSString *)encodeWithByteArray:(IOSByteArray *)source
                          withInt:(jint)off
                          withInt:(jint)len {
  return NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(source, off, len);
}

+ (NSString *)encodeWithByteArray:(IOSByteArray *)source
                      withBoolean:(jboolean)useStandardAlphabet {
  return NetI2pDataBase64_encodeWithByteArray_withBoolean_(source, useStandardAlphabet);
}

+ (NSString *)encodeWithByteArray:(IOSByteArray *)source
                          withInt:(jint)off
                          withInt:(jint)len
                      withBoolean:(jboolean)useStandardAlphabet {
  return NetI2pDataBase64_encodeWithByteArray_withInt_withInt_withBoolean_(source, off, len, useStandardAlphabet);
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s {
  return NetI2pDataBase64_decodeWithNSString_(s);
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s
                         withBoolean:(jboolean)useStandardAlphabet {
  return NetI2pDataBase64_decodeWithNSString_withBoolean_(s, useStandardAlphabet);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataBase64_mainWithNSStringArray_(args);
}

+ (void)runAppWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataBase64_runAppWithNSStringArray_(args);
}

+ (IOSByteArray *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataBase64_readWithJavaIoInputStream_(inArg);
}

+ (void)encodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataBase64_encodeWithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (void)decodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataBase64_decodeWithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (void)help {
  NetI2pDataBase64_help();
}

+ (void)encode3to4WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                        withInt:(jint)numSigBytes
      withJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                  withByteArray:(IOSByteArray *)alpha {
  NetI2pDataBase64_encode3to4WithByteArray_withInt_withInt_withJavaLangStringBuilder_withByteArray_(source, srcOffset, numSigBytes, buf, alpha);
}

+ (NSString *)safeEncodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                          withBoolean:(jboolean)useStandardAlphabet {
  return NetI2pDataBase64_safeEncodeWithByteArray_withInt_withInt_withBoolean_(source, off, len, useStandardAlphabet);
}

+ (IOSByteArray *)safeDecodeWithNSString:(NSString *)source
                             withBoolean:(jboolean)useStandardAlphabet {
  return NetI2pDataBase64_safeDecodeWithNSString_withBoolean_(source, useStandardAlphabet);
}

+ (void)encodeBytesWithByteArray:(IOSByteArray *)source
                         withInt:(jint)off
                         withInt:(jint)len
                     withBoolean:(jboolean)breakLines
       withJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                   withByteArray:(IOSByteArray *)alpha {
  NetI2pDataBase64_encodeBytesWithByteArray_withInt_withInt_withBoolean_withJavaLangStringBuilder_withByteArray_(source, off, len, breakLines, outArg, alpha);
}

+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset {
  return NetI2pDataBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_(source, srcOffset, destination, destOffset);
}

+ (IOSByteArray *)standardDecodeWithNSString:(NSString *)s {
  return NetI2pDataBase64_standardDecodeWithNSString_(s);
}

+ (NSString *)decodeToStringWithNSString:(NSString *)s {
  return NetI2pDataBase64_decodeToStringWithNSString_(s);
}

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len {
  return NetI2pDataBase64_decodeWithByteArray_withInt_withInt_(source, off, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 14, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 14, 13, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 17, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 18, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 23, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(encodeWithNSString:);
  methods[1].selector = @selector(encodeWithByteArray:);
  methods[2].selector = @selector(encodeWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(encodeWithByteArray:withBoolean:);
  methods[4].selector = @selector(encodeWithByteArray:withInt:withInt:withBoolean:);
  methods[5].selector = @selector(decodeWithNSString:);
  methods[6].selector = @selector(decodeWithNSString:withBoolean:);
  methods[7].selector = @selector(init);
  methods[8].selector = @selector(mainWithNSStringArray:);
  methods[9].selector = @selector(runAppWithNSStringArray:);
  methods[10].selector = @selector(readWithJavaIoInputStream:);
  methods[11].selector = @selector(encodeWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[12].selector = @selector(decodeWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[13].selector = @selector(help);
  methods[14].selector = @selector(encode3to4WithByteArray:withInt:withInt:withJavaLangStringBuilder:withByteArray:);
  methods[15].selector = @selector(safeEncodeWithByteArray:withInt:withInt:withBoolean:);
  methods[16].selector = @selector(safeDecodeWithNSString:withBoolean:);
  methods[17].selector = @selector(encodeBytesWithByteArray:withInt:withInt:withBoolean:withJavaLangStringBuilder:withByteArray:);
  methods[18].selector = @selector(decode4to3WithByteArray:withInt:withByteArray:withInt:);
  methods[19].selector = @selector(standardDecodeWithNSString:);
  methods[20].selector = @selector(decodeToStringWithNSString:);
  methods[21].selector = @selector(decodeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_LINE_LENGTH", "I", .constantValue.asInt = NetI2pDataBase64_MAX_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN", "B", .constantValue.asChar = NetI2pDataBase64_EQUALS_SIGN, 0x1a, -1, -1, -1, -1 },
    { "ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ALPHABET_I2P", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "ALPHABET_ALT", "[B", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "WHITE_SPACE_ENC", "B", .constantValue.asChar = NetI2pDataBase64_WHITE_SPACE_ENC, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN_ENC", "B", .constantValue.asChar = NetI2pDataBase64_EQUALS_SIGN_ENC, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LNSString;", "[B", "[BII", "[BZ", "[BIIZ", "decode", "LNSString;Z", "main", "[LNSString;", "runApp", "read", "LJavaIoInputStream;", "LJavaIoIOException;", "LJavaIoInputStream;LJavaIoOutputStream;", "encode3to4", "[BIILJavaLangStringBuilder;[B", "safeEncode", "safeDecode", "encodeBytes", "[BIIZLJavaLangStringBuilder;[B", "decode4to3", "[BI[BI", "standardDecode", "decodeToString", &NetI2pDataBase64_ALPHABET, &NetI2pDataBase64_ALPHABET_I2P, &NetI2pDataBase64_ALPHABET_ALT, &NetI2pDataBase64_DECODABET };
  static const J2ObjcClassInfo _NetI2pDataBase64 = { "Base64", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 22, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pDataBase64;
}

+ (void)initialize {
  if (self == [NetI2pDataBase64 class]) {
    JreStrongAssignAndConsume(&NetI2pDataBase64_ALPHABET, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n', (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z', (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64]);
    JreStrongAssign(&NetI2pDataBase64_ALPHABET_ALT, NetI2pDataDataHelper_getASCIIWithNSString_(NetI2pDataBase64_ALPHABET_I2P));
    JreStrongAssignAndConsume(&NetI2pDataBase64_DECODABET, [IOSByteArray newArrayWithBytes:(jbyte[]){ -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, 63, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:256]);
    J2OBJC_SET_INITIALIZED(NetI2pDataBase64)
  }
}

@end

NSString *NetI2pDataBase64_encodeWithNSString_(NSString *source) {
  NetI2pDataBase64_initialize();
  return (source != nil ? NetI2pDataBase64_encodeWithByteArray_(NetI2pDataDataHelper_getUTF8WithNSString_(source)) : @"");
}

NSString *NetI2pDataBase64_encodeWithByteArray_(IOSByteArray *source) {
  NetI2pDataBase64_initialize();
  return (source != nil ? NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(source, 0, source->size_) : @"");
}

NSString *NetI2pDataBase64_encodeWithByteArray_withInt_withInt_(IOSByteArray *source, jint off, jint len) {
  NetI2pDataBase64_initialize();
  return (source != nil ? NetI2pDataBase64_encodeWithByteArray_withInt_withInt_withBoolean_(source, off, len, false) : @"");
}

NSString *NetI2pDataBase64_encodeWithByteArray_withBoolean_(IOSByteArray *source, jboolean useStandardAlphabet) {
  NetI2pDataBase64_initialize();
  return (source != nil ? NetI2pDataBase64_encodeWithByteArray_withInt_withInt_withBoolean_(source, 0, source->size_, useStandardAlphabet) : @"");
}

NSString *NetI2pDataBase64_encodeWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *source, jint off, jint len, jboolean useStandardAlphabet) {
  NetI2pDataBase64_initialize();
  return (source != nil ? NetI2pDataBase64_safeEncodeWithByteArray_withInt_withInt_withBoolean_(source, off, len, useStandardAlphabet) : @"");
}

IOSByteArray *NetI2pDataBase64_decodeWithNSString_(NSString *s) {
  NetI2pDataBase64_initialize();
  return NetI2pDataBase64_safeDecodeWithNSString_withBoolean_(s, false);
}

IOSByteArray *NetI2pDataBase64_decodeWithNSString_withBoolean_(NSString *s, jboolean useStandardAlphabet) {
  NetI2pDataBase64_initialize();
  return NetI2pDataBase64_safeDecodeWithNSString_withBoolean_(s, useStandardAlphabet);
}

void NetI2pDataBase64_init(NetI2pDataBase64 *self) {
  NSObject_init(self);
}

NetI2pDataBase64 *new_NetI2pDataBase64_init() {
  J2OBJC_NEW_IMPL(NetI2pDataBase64, init)
}

NetI2pDataBase64 *create_NetI2pDataBase64_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataBase64, init)
}

void NetI2pDataBase64_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataBase64_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    NetI2pDataBase64_help();
  }
  NetI2pDataBase64_runAppWithNSStringArray_(args);
}

void NetI2pDataBase64_runAppWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataBase64_initialize();
  NSString *cmd = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([@"encodestring" isEqual:cmd]) {
    if (args->size_ != 2) NetI2pDataBase64_help();
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NetI2pDataBase64_encodeWithByteArray_(NetI2pDataDataHelper_getUTF8WithNSString_(IOSObjectArray_Get(args, 1)))];
    return;
  }
  if ([@"decodestring" isEqual:cmd]) {
    if (args->size_ != 2) NetI2pDataBase64_help();
    IOSByteArray *dec = NetI2pDataBase64_decodeWithNSString_(IOSObjectArray_Get(args, 1));
    if (dec != nil) {
      @try {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) writeWithByteArray:dec];
      }
      @catch (JavaIoIOException *ioe) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"output error ", ioe)];
        JavaLangSystem_exitWithInt_(1);
      }
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"decode error"];
      JavaLangSystem_exitWithInt_(1);
    }
    return;
  }
  if ([@"test" isEqual:cmd]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"test disabled"];
    JavaLangSystem_exitWithInt_(1);
  }
  if (!([@"encode" isEqual:cmd] || [@"decode" isEqual:cmd])) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"unknown command ", cmd)];
    JavaLangSystem_exitWithInt_(1);
  }
  JavaIoInputStream *in = JreLoadStatic(JavaLangSystem, in);
  JavaIoOutputStream *out = JreLoadStatic(JavaLangSystem, out);
  @try {
    if (args->size_ >= 3) {
      out = create_JavaIoFileOutputStream_initWithNSString_(IOSObjectArray_Get(args, 2));
    }
    if (args->size_ >= 2) {
      in = create_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 1));
    }
    if ([@"encode" isEqual:cmd]) {
      NetI2pDataBase64_encodeWithJavaIoInputStream_withJavaIoOutputStream_(in, out);
    }
    else {
      NetI2pDataBase64_decodeWithJavaIoInputStream_withJavaIoOutputStream_(in, out);
    }
  }
  @catch (JavaIoIOException *ioe) {
    [ioe printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(in)) close];
    }
    @catch (JavaIoIOException *e) {
    }
    @try {
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

IOSByteArray *NetI2pDataBase64_readWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataBase64_initialize();
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(1024);
  NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(inArg, baos);
  return [baos toByteArray];
}

void NetI2pDataBase64_encodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  NetI2pDataBase64_initialize();
  NSString *encoded = NetI2pDataBase64_encodeWithByteArray_(NetI2pDataBase64_readWithJavaIoInputStream_(inArg));
  for (jint i = 0; i < [((NSString *) nil_chk(encoded)) java_length]; i++) [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) ([encoded charAtWithInt:i] & (jint) 0xFF)];
}

void NetI2pDataBase64_decodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  NetI2pDataBase64_initialize();
  IOSByteArray *decoded = NetI2pDataBase64_decodeWithNSString_(NetI2pDataDataHelper_getUTF8WithByteArray_(NetI2pDataBase64_readWithJavaIoInputStream_(inArg)));
  if (decoded == nil) @throw create_JavaIoIOException_initWithNSString_(@"Invalid base 64 string");
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:decoded];
}

void NetI2pDataBase64_help() {
  NetI2pDataBase64_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: Base64 encode <inFile> <outFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 encode <inFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 encode (stdin to stdout)"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 decode <inFile> <outFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 decode <inFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 decode (stdin to stdout)"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 encodestring 'string to encode'"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 decodestring 'string to decode'"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"       Base64 test"];
  JavaLangSystem_exitWithInt_(1);
}

void NetI2pDataBase64_encode3to4WithByteArray_withInt_withInt_withJavaLangStringBuilder_withByteArray_(IOSByteArray *source, jint srcOffset, jint numSigBytes, JavaLangStringBuilder *buf, IOSByteArray *alpha) {
  NetI2pDataBase64_initialize();
  jint inBuff = (numSigBytes > 0 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset), 24)), 8)) : 0) | (numSigBytes > 1 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 1), 24)), 16)) : 0) | (numSigBytes > 2 ? (JreURShift32((JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 2), 24)), 24)) : 0);
  switch (numSigBytes) {
    case 3:
    [((JavaLangStringBuilder *) nil_chk(buf)) appendWithChar:(jchar) IOSByteArray_Get(nil_chk(alpha), (JreURShift32(inBuff, 18)))];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (JreURShift32(inBuff, 12)) & (jint) 0x3f)];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (JreURShift32(inBuff, 6)) & (jint) 0x3f)];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (inBuff) & (jint) 0x3f)];
    return;
    case 2:
    [((JavaLangStringBuilder *) nil_chk(buf)) appendWithChar:(jchar) IOSByteArray_Get(nil_chk(alpha), (JreURShift32(inBuff, 18)))];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (JreURShift32(inBuff, 12)) & (jint) 0x3f)];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (JreURShift32(inBuff, 6)) & (jint) 0x3f)];
    [buf appendWithChar:(jchar) NetI2pDataBase64_EQUALS_SIGN];
    return;
    case 1:
    [((JavaLangStringBuilder *) nil_chk(buf)) appendWithChar:(jchar) IOSByteArray_Get(nil_chk(alpha), (JreURShift32(inBuff, 18)))];
    [buf appendWithChar:(jchar) IOSByteArray_Get(alpha, (JreURShift32(inBuff, 12)) & (jint) 0x3f)];
    [buf appendWithChar:(jchar) NetI2pDataBase64_EQUALS_SIGN];
    [buf appendWithChar:(jchar) NetI2pDataBase64_EQUALS_SIGN];
    return;
    default:
    return;
  }
}

NSString *NetI2pDataBase64_safeEncodeWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *source, jint off, jint len, jboolean useStandardAlphabet) {
  NetI2pDataBase64_initialize();
  if (len + off > ((IOSByteArray *) nil_chk(source))->size_) @throw create_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I", @"Trying to encode too much!  source.len=", source->size_, @" off=", off, @" len=", len));
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(len * 4 / 3);
  if (useStandardAlphabet) NetI2pDataBase64_encodeBytesWithByteArray_withInt_withInt_withBoolean_withJavaLangStringBuilder_withByteArray_(source, off, len, false, buf, NetI2pDataBase64_ALPHABET);
  else NetI2pDataBase64_encodeBytesWithByteArray_withInt_withInt_withBoolean_withJavaLangStringBuilder_withByteArray_(source, off, len, false, buf, NetI2pDataBase64_ALPHABET_ALT);
  return [buf description];
}

IOSByteArray *NetI2pDataBase64_safeDecodeWithNSString_withBoolean_(NSString *source, jboolean useStandardAlphabet) {
  NetI2pDataBase64_initialize();
  if (source == nil) return nil;
  NSString *toDecode;
  if (useStandardAlphabet) {
    toDecode = [source java_replace:'/' withChar:'~'];
    toDecode = [((NSString *) nil_chk(toDecode)) java_replace:'+' withChar:'-'];
  }
  else {
    toDecode = source;
  }
  return NetI2pDataBase64_standardDecodeWithNSString_(toDecode);
}

void NetI2pDataBase64_encodeBytesWithByteArray_withInt_withInt_withBoolean_withJavaLangStringBuilder_withByteArray_(IOSByteArray *source, jint off, jint len, jboolean breakLines, JavaLangStringBuilder *outArg, IOSByteArray *alpha) {
  NetI2pDataBase64_initialize();
  jint d = 0;
  jint len2 = len - 2;
  jint lineLength = 0;
  for (; d < len2; d += 3) {
    NetI2pDataBase64_encode3to4WithByteArray_withInt_withInt_withJavaLangStringBuilder_withByteArray_(source, d + off, 3, outArg, alpha);
    lineLength += 4;
    if (breakLines && lineLength == NetI2pDataBase64_MAX_LINE_LENGTH) {
      [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:0x000a];
      lineLength = 0;
    }
  }
  if (d < len) {
    NetI2pDataBase64_encode3to4WithByteArray_withInt_withInt_withJavaLangStringBuilder_withByteArray_(source, d + off, len - d, outArg, alpha);
  }
}

jint NetI2pDataBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset) {
  NetI2pDataBase64_initialize();
  jbyte decode0 = IOSByteArray_Get(nil_chk(NetI2pDataBase64_DECODABET), IOSByteArray_Get(nil_chk(source), srcOffset++));
  jbyte decode1 = IOSByteArray_Get(NetI2pDataBase64_DECODABET, IOSByteArray_Get(source, srcOffset++));
  if (decode0 < 0 || decode1 < 0) return -1;
  if (IOSByteArray_Get(source, srcOffset) == NetI2pDataBase64_EQUALS_SIGN) {
    if (IOSByteArray_Get(source, srcOffset + 1) != NetI2pDataBase64_EQUALS_SIGN) return -1;
    if ((decode1 & (jint) 0x0f) != 0) return -1;
    jint outBuff = (JreLShift32(decode0, 18)) | (JreLShift32(decode1, 12));
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = (jbyte) (JreRShift32(outBuff, 16));
    return 1;
  }
  else if (IOSByteArray_Get(source, srcOffset + 1) == NetI2pDataBase64_EQUALS_SIGN) {
    jbyte decode2 = IOSByteArray_Get(NetI2pDataBase64_DECODABET, IOSByteArray_Get(source, srcOffset));
    if (decode2 < 0) return -1;
    if ((decode2 & (jint) 0x03) != 0) return -1;
    jint outBuff = (JreLShift32(decode0, 18)) | (JreLShift32(decode1, 12)) | (JreLShift32(decode2, 6));
    *IOSByteArray_GetRef(nil_chk(destination), destOffset++) = (jbyte) (JreRShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreRShift32(outBuff, 8));
    return 2;
  }
  else {
    jbyte decode2 = IOSByteArray_Get(NetI2pDataBase64_DECODABET, IOSByteArray_Get(source, srcOffset++));
    jbyte decode3 = IOSByteArray_Get(NetI2pDataBase64_DECODABET, IOSByteArray_Get(source, srcOffset));
    if (decode2 < 0 || decode3 < 0) return -1;
    jint outBuff = (JreLShift32(decode0, 18)) | (JreLShift32(decode1, 12)) | (JreLShift32(decode2, 6)) | decode3;
    *IOSByteArray_GetRef(nil_chk(destination), destOffset++) = (jbyte) (JreRShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset++) = (jbyte) (JreRShift32(outBuff, 8));
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (outBuff);
    return 3;
  }
}

IOSByteArray *NetI2pDataBase64_standardDecodeWithNSString_(NSString *s) {
  NetI2pDataBase64_initialize();
  IOSByteArray *bytes = NetI2pDataDataHelper_getUTF8WithNSString_(s);
  if (((IOSByteArray *) nil_chk(bytes))->size_ != [((NSString *) nil_chk(s)) java_length]) return nil;
  return NetI2pDataBase64_decodeWithByteArray_withInt_withInt_(bytes, 0, bytes->size_);
}

NSString *NetI2pDataBase64_decodeToStringWithNSString_(NSString *s) {
  NetI2pDataBase64_initialize();
  IOSByteArray *b = NetI2pDataBase64_decodeWithNSString_(s);
  if (b == nil) return nil;
  return NetI2pDataDataHelper_getUTF8WithByteArray_(b);
}

IOSByteArray *NetI2pDataBase64_decodeWithByteArray_withInt_withInt_(IOSByteArray *source, jint off, jint len) {
  NetI2pDataBase64_initialize();
  jint len34 = len * 3 / 4;
  IOSByteArray *outBuff = [IOSByteArray arrayWithLength:len34];
  jint outBuffPosn = 0;
  jint i = off;
  jint end = off + len;
  jint converted = 0;
  while (i + 3 < end) {
    converted = NetI2pDataBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_(source, i, outBuff, outBuffPosn);
    if (converted < 0) return nil;
    outBuffPosn += converted;
    i += 4;
    if (converted < 3) break;
  }
  jint remaining = end - i;
  if (remaining > 0) {
    if (converted > 0 && converted < 3) return nil;
    if (remaining == 1 || remaining > 3) return nil;
    IOSByteArray *b4 = [IOSByteArray arrayWithLength:4];
    *IOSByteArray_GetRef(b4, 0) = IOSByteArray_Get(nil_chk(source), i++);
    *IOSByteArray_GetRef(b4, 1) = IOSByteArray_Get(source, i++);
    if (remaining == 3) *IOSByteArray_GetRef(b4, 2) = IOSByteArray_Get(source, i);
    else *IOSByteArray_GetRef(b4, 2) = NetI2pDataBase64_EQUALS_SIGN;
    *IOSByteArray_GetRef(b4, 3) = NetI2pDataBase64_EQUALS_SIGN;
    converted = NetI2pDataBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_(b4, 0, outBuff, outBuffPosn);
    if (converted < 0) return nil;
    outBuffPosn += converted;
  }
  if (outBuffPosn == outBuff->size_) return outBuff;
  IOSByteArray *out = [IOSByteArray arrayWithLength:outBuffPosn];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuff, 0, out, 0, outBuffPosn);
  return out;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataBase64)
