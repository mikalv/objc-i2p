//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/Base32.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "net/i2p/data/Base32.h"
#include "net/i2p/data/DataHelper.h"

@interface NetI2pDataBase32 ()

- (instancetype)init;

+ (void)runAppWithNSStringArray:(IOSObjectArray *)args;

+ (IOSByteArray *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (void)encodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)decodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)help;

+ (void)encodeBytesWithByteArray:(IOSByteArray *)source
       withJavaLangStringBuilder:(JavaLangStringBuilder *)outArg;

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source;

@end

inline IOSCharArray *NetI2pDataBase32_get_ALPHABET(void);
static IOSCharArray *NetI2pDataBase32_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase32, ALPHABET, IOSCharArray *)

inline IOSByteArray *NetI2pDataBase32_get_DECODABET(void);
static IOSByteArray *NetI2pDataBase32_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase32, DECODABET, IOSByteArray *)

inline jbyte NetI2pDataBase32_get_BAD_ENCODING(void);
#define NetI2pDataBase32_BAD_ENCODING -9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataBase32, BAD_ENCODING, jbyte)

inline IOSByteArray *NetI2pDataBase32_get_emask(void);
static IOSByteArray *NetI2pDataBase32_emask;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase32, emask, IOSByteArray *)

inline IOSByteArray *NetI2pDataBase32_get_dmask(void);
static IOSByteArray *NetI2pDataBase32_dmask;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataBase32, dmask, IOSByteArray *)

__attribute__((unused)) static void NetI2pDataBase32_init(NetI2pDataBase32 *self);

__attribute__((unused)) static NetI2pDataBase32 *new_NetI2pDataBase32_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataBase32 *create_NetI2pDataBase32_init(void);

__attribute__((unused)) static void NetI2pDataBase32_runAppWithNSStringArray_(IOSObjectArray *args);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase32_readWithJavaIoInputStream_(JavaIoInputStream *inArg);

__attribute__((unused)) static void NetI2pDataBase32_encodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pDataBase32_decodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pDataBase32_help(void);

__attribute__((unused)) static void NetI2pDataBase32_encodeBytesWithByteArray_withJavaLangStringBuilder_(IOSByteArray *source, JavaLangStringBuilder *outArg);

__attribute__((unused)) static IOSByteArray *NetI2pDataBase32_decodeWithByteArray_(IOSByteArray *source);

J2OBJC_INITIALIZED_DEFN(NetI2pDataBase32)

@implementation NetI2pDataBase32

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataBase32_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataBase32_mainWithNSStringArray_(args);
}

+ (void)runAppWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataBase32_runAppWithNSStringArray_(args);
}

+ (IOSByteArray *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataBase32_readWithJavaIoInputStream_(inArg);
}

+ (void)encodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataBase32_encodeWithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (void)decodeWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataBase32_decodeWithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (void)help {
  NetI2pDataBase32_help();
}

+ (NSString *)encodeWithNSString:(NSString *)source {
  return NetI2pDataBase32_encodeWithNSString_(source);
}

+ (NSString *)encodeWithByteArray:(IOSByteArray *)source {
  return NetI2pDataBase32_encodeWithByteArray_(source);
}

+ (void)encodeBytesWithByteArray:(IOSByteArray *)source
       withJavaLangStringBuilder:(JavaLangStringBuilder *)outArg {
  NetI2pDataBase32_encodeBytesWithByteArray_withJavaLangStringBuilder_(source, outArg);
}

+ (NSString *)decodeToStringWithNSString:(NSString *)s {
  return NetI2pDataBase32_decodeToStringWithNSString_(s);
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s {
  return NetI2pDataBase32_decodeWithNSString_(s);
}

+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source {
  return NetI2pDataBase32_decodeWithByteArray_(source);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 7, 5, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 8, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(runAppWithNSStringArray:);
  methods[3].selector = @selector(readWithJavaIoInputStream:);
  methods[4].selector = @selector(encodeWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[5].selector = @selector(decodeWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[6].selector = @selector(help);
  methods[7].selector = @selector(encodeWithNSString:);
  methods[8].selector = @selector(encodeWithByteArray:);
  methods[9].selector = @selector(encodeBytesWithByteArray:withJavaLangStringBuilder:);
  methods[10].selector = @selector(decodeToStringWithNSString:);
  methods[11].selector = @selector(decodeWithNSString:);
  methods[12].selector = @selector(decodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALPHABET", "[C", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "BAD_ENCODING", "B", .constantValue.asChar = NetI2pDataBase32_BAD_ENCODING, 0x1a, -1, -1, -1, -1 },
    { "emask", "[B", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "dmask", "[B", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "runApp", "read", "LJavaIoInputStream;", "LJavaIoIOException;", "encode", "LJavaIoInputStream;LJavaIoOutputStream;", "decode", "LNSString;", "[B", "encodeBytes", "[BLJavaLangStringBuilder;", "decodeToString", &NetI2pDataBase32_ALPHABET, &NetI2pDataBase32_DECODABET, &NetI2pDataBase32_emask, &NetI2pDataBase32_dmask };
  static const J2ObjcClassInfo _NetI2pDataBase32 = { "Base32", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pDataBase32;
}

+ (void)initialize {
  if (self == [NetI2pDataBase32 class]) {
    JreStrongAssignAndConsume(&NetI2pDataBase32_ALPHABET, [IOSCharArray newArrayWithChars:(jchar[]){ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '2', '3', '4', '5', '6', '7' } count:32]);
    JreStrongAssignAndConsume(&NetI2pDataBase32_DECODABET, [IOSByteArray newArrayWithBytes:(jbyte[]){ 26, 27, 28, 29, 30, 31, -9, -9, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9 } count:78]);
    JreStrongAssignAndConsume(&NetI2pDataBase32_emask, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x1f, (jbyte) (jint) 0x01, (jbyte) (jint) 0x03, (jbyte) (jint) 0x07, (jbyte) (jint) 0x0f } count:5]);
    JreStrongAssignAndConsume(&NetI2pDataBase32_dmask, [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xf8, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x3e, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x0f, (jbyte) (jint) 0x07, (jbyte) (jint) 0x03, (jbyte) (jint) 0x01 } count:8]);
    J2OBJC_SET_INITIALIZED(NetI2pDataBase32)
  }
}

@end

void NetI2pDataBase32_init(NetI2pDataBase32 *self) {
  NSObject_init(self);
}

NetI2pDataBase32 *new_NetI2pDataBase32_init() {
  J2OBJC_NEW_IMPL(NetI2pDataBase32, init)
}

NetI2pDataBase32 *create_NetI2pDataBase32_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataBase32, init)
}

void NetI2pDataBase32_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataBase32_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    NetI2pDataBase32_help();
    return;
  }
  NetI2pDataBase32_runAppWithNSStringArray_(args);
}

void NetI2pDataBase32_runAppWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataBase32_initialize();
  NSString *cmd = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([@"encodestring" isEqual:cmd]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:NetI2pDataBase32_encodeWithByteArray_(NetI2pDataDataHelper_getUTF8WithNSString_(IOSObjectArray_Get(args, 1)))];
    return;
  }
  JavaIoInputStream *in = JreLoadStatic(JavaLangSystem, in);
  JavaIoOutputStream *out = JreLoadStatic(JavaLangSystem, out);
  @try {
    if (args->size_ >= 3) {
      out = create_JavaIoFileOutputStream_initWithNSString_(IOSObjectArray_Get(args, 2));
    }
    if (args->size_ >= 2) {
      in = create_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 1));
    }
    if ([@"encode" isEqual:cmd]) {
      NetI2pDataBase32_encodeWithJavaIoInputStream_withJavaIoOutputStream_(in, out);
      return;
    }
    if ([@"decode" isEqual:cmd]) {
      NetI2pDataBase32_decodeWithJavaIoInputStream_withJavaIoOutputStream_(in, out);
      return;
    }
  }
  @catch (JavaIoIOException *ioe) {
    [ioe printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(in)) close];
    }
    @catch (JavaIoIOException *e) {
    }
    @try {
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
}

IOSByteArray *NetI2pDataBase32_readWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataBase32_initialize();
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(64);
  NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(inArg, baos);
  return [baos toByteArray];
}

void NetI2pDataBase32_encodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  NetI2pDataBase32_initialize();
  NSString *encoded = NetI2pDataBase32_encodeWithByteArray_(NetI2pDataBase32_readWithJavaIoInputStream_(inArg));
  for (jint i = 0; i < [((NSString *) nil_chk(encoded)) java_length]; i++) [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) ([encoded charAtWithInt:i] & (jint) 0xFF)];
}

void NetI2pDataBase32_decodeWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  NetI2pDataBase32_initialize();
  IOSByteArray *decoded = NetI2pDataBase32_decodeWithNSString_(NetI2pDataDataHelper_getUTF8WithByteArray_(NetI2pDataBase32_readWithJavaIoInputStream_(inArg)));
  if (decoded == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"FAIL"];
    return;
  }
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:decoded];
}

void NetI2pDataBase32_help() {
  NetI2pDataBase32_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Syntax: Base32 encode <inFile> <outFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 encode <inFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 encodestring <string>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 encode"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 decode <inFile> <outFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 decode <inFile>"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"or    : Base32 decode"];
}

NSString *NetI2pDataBase32_encodeWithNSString_(NSString *source) {
  NetI2pDataBase32_initialize();
  return (source != nil ? NetI2pDataBase32_encodeWithByteArray_(NetI2pDataDataHelper_getUTF8WithNSString_(source)) : @"");
}

NSString *NetI2pDataBase32_encodeWithByteArray_(IOSByteArray *source) {
  NetI2pDataBase32_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_((((IOSByteArray *) nil_chk(source))->size_ + 7) * 8 / 5);
  NetI2pDataBase32_encodeBytesWithByteArray_withJavaLangStringBuilder_(source, buf);
  return [buf description];
}

void NetI2pDataBase32_encodeBytesWithByteArray_withJavaLangStringBuilder_(IOSByteArray *source, JavaLangStringBuilder *outArg) {
  NetI2pDataBase32_initialize();
  jint usedbits = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(source))->size_; ) {
    jint fivebits;
    if (usedbits < 3) {
      fivebits = (JreRShift32(IOSByteArray_Get(source, i), (3 - usedbits))) & (jint) 0x1f;
      usedbits += 5;
    }
    else if (usedbits == 3) {
      fivebits = IOSByteArray_Get(source, i++) & (jint) 0x1f;
      usedbits = 0;
    }
    else {
      fivebits = (JreLShift32(IOSByteArray_Get(source, i++), (usedbits - 3))) & (jint) 0x1f;
      if (i < source->size_) {
        usedbits -= 3;
        fivebits |= (JreRShift32(IOSByteArray_Get(source, i), (8 - usedbits))) & IOSByteArray_Get(nil_chk(NetI2pDataBase32_emask), usedbits);
      }
    }
    [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:IOSCharArray_Get(nil_chk(NetI2pDataBase32_ALPHABET), fivebits)];
  }
}

NSString *NetI2pDataBase32_decodeToStringWithNSString_(NSString *s) {
  NetI2pDataBase32_initialize();
  IOSByteArray *b = NetI2pDataBase32_decodeWithNSString_(s);
  if (b == nil) return nil;
  return NetI2pDataDataHelper_getUTF8WithByteArray_(b);
}

IOSByteArray *NetI2pDataBase32_decodeWithNSString_(NSString *s) {
  NetI2pDataBase32_initialize();
  return NetI2pDataBase32_decodeWithByteArray_(NetI2pDataDataHelper_getASCIIWithNSString_(s));
}

IOSByteArray *NetI2pDataBase32_decodeWithByteArray_(IOSByteArray *source) {
  NetI2pDataBase32_initialize();
  jint len58;
  if (((IOSByteArray *) nil_chk(source))->size_ <= 1) len58 = source->size_;
  else len58 = source->size_ * 5 / 8;
  IOSByteArray *outBuff = [IOSByteArray arrayWithLength:len58];
  jint outBuffPosn = 0;
  jint usedbits = 0;
  for (jint i = 0; i < source->size_; i++) {
    jint fivebits;
    if ((IOSByteArray_Get(source, i) & (jint) 0x80) != 0 || IOSByteArray_Get(source, i) < '2' || IOSByteArray_Get(source, i) > 'z') fivebits = NetI2pDataBase32_BAD_ENCODING;
    else fivebits = IOSByteArray_Get(nil_chk(NetI2pDataBase32_DECODABET), IOSByteArray_Get(source, i) - '2');
    if (fivebits >= 0) {
      if (usedbits == 0) {
        *IOSByteArray_GetRef(outBuff, outBuffPosn) = (jbyte) ((JreLShift32(fivebits, 3)) & (jint) 0xf8);
        usedbits = 5;
      }
      else if (usedbits < 3) {
        *IOSByteArray_GetRef(outBuff, outBuffPosn) |= (JreLShift32(fivebits, (3 - usedbits))) & IOSByteArray_Get(nil_chk(NetI2pDataBase32_dmask), usedbits);
        usedbits += 5;
      }
      else if (usedbits == 3) {
        *IOSByteArray_GetRef(outBuff, outBuffPosn++) |= fivebits;
        usedbits = 0;
      }
      else {
        *IOSByteArray_GetRef(outBuff, outBuffPosn++) |= (JreRShift32(fivebits, (usedbits - 3))) & IOSByteArray_Get(nil_chk(NetI2pDataBase32_dmask), usedbits);
        jbyte next = (jbyte) (JreLShift32(fivebits, (11 - usedbits)));
        if (outBuffPosn < len58) {
          *IOSByteArray_GetRef(outBuff, outBuffPosn) = next;
          usedbits -= 3;
        }
        else if (next != 0) {
          return nil;
        }
      }
    }
    else {
      return nil;
    }
  }
  return outBuff;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataBase32)
