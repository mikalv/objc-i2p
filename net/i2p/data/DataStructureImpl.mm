//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/DataStructureImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation NetI2pDataDataStructureImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataDataStructureImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)toBase64 {
  IOSByteArray *data = [self toByteArray];
  if (data == nil) return nil;
  return NetI2pDataBase64_encodeWithByteArray_(data);
}

- (void)fromBase64WithNSString:(NSString *)data {
  if (data == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Null data passed in");
  IOSByteArray *bytes = NetI2pDataBase64_decodeWithNSString_(data);
  if (bytes == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$$C", @"Bad Base64 \"", data, '"'));
  [self fromByteArrayWithByteArray:bytes];
}

- (NetI2pDataHash *)calculateHash {
  IOSByteArray *data = [self toByteArray];
  if (data != nil) return [((NetI2pCryptoSHA256Generator *) nil_chk(NetI2pCryptoSHA256Generator_getInstance())) calculateHashWithByteArray:data];
  return nil;
}

- (IOSByteArray *)toByteArray {
  @try {
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(512);
    [self writeBytesWithJavaIoOutputStream:baos];
    return [baos toByteArray];
  }
  @catch (JavaIoIOException *ioe) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:[self java_getClass]];
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Error writing out the byte array" withJavaLangThrowable:ioe];
    return nil;
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:[self java_getClass]];
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Error writing out the byte array" withJavaLangThrowable:dfe];
    return nil;
  }
}

- (void)fromByteArrayWithByteArray:(IOSByteArray *)data {
  if (data == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Null data passed in");
  @try {
    JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_(data);
    [self readBytesWithJavaIoInputStream:bais];
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"Error reading the byte array", ioe);
  }
}

- (jint)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withByteArray:(IOSByteArray *)target {
  return NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(inArg, target);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toBase64);
  methods[2].selector = @selector(fromBase64WithNSString:);
  methods[3].selector = @selector(calculateHash);
  methods[4].selector = @selector(toByteArray);
  methods[5].selector = @selector(fromByteArrayWithByteArray:);
  methods[6].selector = @selector(readWithJavaIoInputStream:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fromBase64", "LNSString;", "LNetI2pDataDataFormatException;", "fromByteArray", "[B", "read", "LJavaIoInputStream;[B", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _NetI2pDataDataStructureImpl = { "DataStructureImpl", "net.i2p.data", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pDataDataStructureImpl;
}

@end

void NetI2pDataDataStructureImpl_init(NetI2pDataDataStructureImpl *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataDataStructureImpl)
