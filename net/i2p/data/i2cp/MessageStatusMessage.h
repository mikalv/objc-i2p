//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/MessageStatusMessage.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataI2cpMessageStatusMessage")
#ifdef RESTRICT_NetI2pDataI2cpMessageStatusMessage
#define INCLUDE_ALL_NetI2pDataI2cpMessageStatusMessage 0
#else
#define INCLUDE_ALL_NetI2pDataI2cpMessageStatusMessage 1
#endif
#undef RESTRICT_NetI2pDataI2cpMessageStatusMessage

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataI2cpMessageStatusMessage_) && (INCLUDE_ALL_NetI2pDataI2cpMessageStatusMessage || defined(INCLUDE_NetI2pDataI2cpMessageStatusMessage))
#define NetI2pDataI2cpMessageStatusMessage_

#define RESTRICT_NetI2pDataI2cpI2CPMessageImpl 1
#define INCLUDE_NetI2pDataI2cpI2CPMessageImpl 1
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class NetI2pDataI2cpSessionId;

@interface NetI2pDataI2cpMessageStatusMessage : NetI2pDataI2cpI2CPMessageImpl
@property (readonly, class) jint MESSAGE_TYPE NS_SWIFT_NAME(MESSAGE_TYPE);
@property (readonly, class) jint STATUS_AVAILABLE NS_SWIFT_NAME(STATUS_AVAILABLE);
@property (readonly, class) jint STATUS_SEND_ACCEPTED NS_SWIFT_NAME(STATUS_SEND_ACCEPTED);
@property (readonly, class) jint STATUS_SEND_BEST_EFFORT_SUCCESS NS_SWIFT_NAME(STATUS_SEND_BEST_EFFORT_SUCCESS);
@property (readonly, class) jint STATUS_SEND_BEST_EFFORT_FAILURE NS_SWIFT_NAME(STATUS_SEND_BEST_EFFORT_FAILURE);
@property (readonly, class) jint STATUS_SEND_GUARANTEED_SUCCESS NS_SWIFT_NAME(STATUS_SEND_GUARANTEED_SUCCESS);
@property (readonly, class) jint STATUS_SEND_GUARANTEED_FAILURE NS_SWIFT_NAME(STATUS_SEND_GUARANTEED_FAILURE);
@property (readonly, class) jint STATUS_SEND_SUCCESS_LOCAL NS_SWIFT_NAME(STATUS_SEND_SUCCESS_LOCAL);
@property (readonly, class) jint STATUS_SEND_FAILURE_LOCAL NS_SWIFT_NAME(STATUS_SEND_FAILURE_LOCAL);
@property (readonly, class) jint STATUS_SEND_FAILURE_ROUTER NS_SWIFT_NAME(STATUS_SEND_FAILURE_ROUTER);
@property (readonly, class) jint STATUS_SEND_FAILURE_NETWORK NS_SWIFT_NAME(STATUS_SEND_FAILURE_NETWORK);
@property (readonly, class) jint STATUS_SEND_FAILURE_BAD_SESSION NS_SWIFT_NAME(STATUS_SEND_FAILURE_BAD_SESSION);
@property (readonly, class) jint STATUS_SEND_FAILURE_BAD_MESSAGE NS_SWIFT_NAME(STATUS_SEND_FAILURE_BAD_MESSAGE);
@property (readonly, class) jint STATUS_SEND_FAILURE_BAD_OPTIONS NS_SWIFT_NAME(STATUS_SEND_FAILURE_BAD_OPTIONS);
@property (readonly, class) jint STATUS_SEND_FAILURE_OVERFLOW NS_SWIFT_NAME(STATUS_SEND_FAILURE_OVERFLOW);
@property (readonly, class) jint STATUS_SEND_FAILURE_EXPIRED NS_SWIFT_NAME(STATUS_SEND_FAILURE_EXPIRED);
@property (readonly, class) jint STATUS_SEND_FAILURE_LOCAL_LEASESET NS_SWIFT_NAME(STATUS_SEND_FAILURE_LOCAL_LEASESET);
@property (readonly, class) jint STATUS_SEND_FAILURE_NO_TUNNELS NS_SWIFT_NAME(STATUS_SEND_FAILURE_NO_TUNNELS);
@property (readonly, class) jint STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION NS_SWIFT_NAME(STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION);
@property (readonly, class) jint STATUS_SEND_FAILURE_DESTINATION NS_SWIFT_NAME(STATUS_SEND_FAILURE_DESTINATION);
@property (readonly, class) jint STATUS_SEND_FAILURE_BAD_LEASESET NS_SWIFT_NAME(STATUS_SEND_FAILURE_BAD_LEASESET);
@property (readonly, class) jint STATUS_SEND_FAILURE_EXPIRED_LEASESET NS_SWIFT_NAME(STATUS_SEND_FAILURE_EXPIRED_LEASESET);
@property (readonly, class) jint STATUS_SEND_FAILURE_NO_LEASESET NS_SWIFT_NAME(STATUS_SEND_FAILURE_NO_LEASESET);

+ (jint)MESSAGE_TYPE;

+ (jint)STATUS_AVAILABLE;

+ (jint)STATUS_SEND_ACCEPTED;

+ (jint)STATUS_SEND_BEST_EFFORT_SUCCESS;

+ (jint)STATUS_SEND_BEST_EFFORT_FAILURE;

+ (jint)STATUS_SEND_GUARANTEED_SUCCESS;

+ (jint)STATUS_SEND_GUARANTEED_FAILURE;

+ (jint)STATUS_SEND_SUCCESS_LOCAL;

+ (jint)STATUS_SEND_FAILURE_LOCAL;

+ (jint)STATUS_SEND_FAILURE_ROUTER;

+ (jint)STATUS_SEND_FAILURE_NETWORK;

+ (jint)STATUS_SEND_FAILURE_BAD_SESSION;

+ (jint)STATUS_SEND_FAILURE_BAD_MESSAGE;

+ (jint)STATUS_SEND_FAILURE_BAD_OPTIONS;

+ (jint)STATUS_SEND_FAILURE_OVERFLOW;

+ (jint)STATUS_SEND_FAILURE_EXPIRED;

+ (jint)STATUS_SEND_FAILURE_LOCAL_LEASESET;

+ (jint)STATUS_SEND_FAILURE_NO_TUNNELS;

+ (jint)STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION;

+ (jint)STATUS_SEND_FAILURE_DESTINATION;

+ (jint)STATUS_SEND_FAILURE_BAD_LEASESET;

+ (jint)STATUS_SEND_FAILURE_EXPIRED_LEASESET;

+ (jint)STATUS_SEND_FAILURE_NO_LEASESET;

#pragma mark Public

- (instancetype __nonnull)init;

- (jlong)getMessageId;

- (jlong)getNonce;

- (jlong)getSessionId;

- (jlong)getSize;

- (jint)getStatus;

+ (NSString *)getStatusStringWithInt:(jint)status;

- (jint)getType;

- (jboolean)isSuccessful;

+ (jboolean)isSuccessfulWithInt:(jint)status;

- (NetI2pDataI2cpSessionId *)sessionId;

- (void)setMessageIdWithLong:(jlong)id_;

- (void)setNonceWithLong:(jlong)nonce;

- (void)setSessionIdWithLong:(jlong)id_;

- (void)setSizeWithLong:(jlong)size;

- (void)setStatusWithInt:(jint)status;

- (NSString *)description;

- (void)writeMessageWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Protected

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size;

- (IOSByteArray *)doWriteMessage;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataI2cpMessageStatusMessage)

inline jint NetI2pDataI2cpMessageStatusMessage_get_MESSAGE_TYPE(void);
#define NetI2pDataI2cpMessageStatusMessage_MESSAGE_TYPE 22
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, MESSAGE_TYPE, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_AVAILABLE(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_AVAILABLE 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_AVAILABLE, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_ACCEPTED(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_ACCEPTED 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_ACCEPTED, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_BEST_EFFORT_SUCCESS(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_BEST_EFFORT_SUCCESS 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_BEST_EFFORT_SUCCESS, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_BEST_EFFORT_FAILURE(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_BEST_EFFORT_FAILURE 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_BEST_EFFORT_FAILURE, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_GUARANTEED_SUCCESS(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_GUARANTEED_SUCCESS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_GUARANTEED_SUCCESS, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_GUARANTEED_FAILURE(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_GUARANTEED_FAILURE 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_GUARANTEED_FAILURE, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_SUCCESS_LOCAL(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_SUCCESS_LOCAL 6
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_SUCCESS_LOCAL, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_LOCAL(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_LOCAL 7
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_LOCAL, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_ROUTER(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_ROUTER 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_ROUTER, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_NETWORK(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NETWORK 9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_NETWORK, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_BAD_SESSION(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_SESSION 10
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_BAD_SESSION, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_BAD_MESSAGE(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_MESSAGE 11
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_BAD_MESSAGE, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_BAD_OPTIONS(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_OPTIONS 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_BAD_OPTIONS, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_OVERFLOW(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_OVERFLOW 13
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_OVERFLOW, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_EXPIRED(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_EXPIRED 14
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_EXPIRED, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_LOCAL_LEASESET(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_LOCAL_LEASESET 15
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_LOCAL_LEASESET, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_NO_TUNNELS(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NO_TUNNELS 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_NO_TUNNELS, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION 17
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_DESTINATION(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_DESTINATION 18
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_DESTINATION, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_BAD_LEASESET(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_LEASESET 19
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_BAD_LEASESET, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_EXPIRED_LEASESET(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_EXPIRED_LEASESET 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_EXPIRED_LEASESET, jint)

inline jint NetI2pDataI2cpMessageStatusMessage_get_STATUS_SEND_FAILURE_NO_LEASESET(void);
#define NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NO_LEASESET 21
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpMessageStatusMessage, STATUS_SEND_FAILURE_NO_LEASESET, jint)

FOUNDATION_EXPORT void NetI2pDataI2cpMessageStatusMessage_init(NetI2pDataI2cpMessageStatusMessage *self);

FOUNDATION_EXPORT NetI2pDataI2cpMessageStatusMessage *new_NetI2pDataI2cpMessageStatusMessage_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataI2cpMessageStatusMessage *create_NetI2pDataI2cpMessageStatusMessage_init(void);

FOUNDATION_EXPORT jboolean NetI2pDataI2cpMessageStatusMessage_isSuccessfulWithInt_(jint status);

FOUNDATION_EXPORT NSString *NetI2pDataI2cpMessageStatusMessage_getStatusStringWithInt_(jint status);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataI2cpMessageStatusMessage)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataI2cpMessageStatusMessage")
