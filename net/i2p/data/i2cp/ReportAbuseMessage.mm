//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/ReportAbuseMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/i2cp/AbuseReason.h"
#include "net/i2p/data/i2cp/AbuseSeverity.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/ReportAbuseMessage.h"
#include "net/i2p/data/i2cp/SessionId.h"

@interface NetI2pDataI2cpReportAbuseMessage () {
 @public
  NetI2pDataI2cpSessionId *_sessionId_;
  NetI2pDataI2cpAbuseSeverity *_severity_;
  NetI2pDataI2cpAbuseReason *_reason_;
  NetI2pDataI2cpMessageId *_messageId_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpReportAbuseMessage, _sessionId_, NetI2pDataI2cpSessionId *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpReportAbuseMessage, _severity_, NetI2pDataI2cpAbuseSeverity *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpReportAbuseMessage, _reason_, NetI2pDataI2cpAbuseReason *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpReportAbuseMessage, _messageId_, NetI2pDataI2cpMessageId *)

@implementation NetI2pDataI2cpReportAbuseMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpReportAbuseMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpReportAbuseMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NetI2pDataI2cpSessionId *)getSessionId {
  return _sessionId_;
}

- (NetI2pDataI2cpSessionId *)sessionId {
  return _sessionId_;
}

- (void)setSessionIdWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  JreStrongAssign(&_sessionId_, id_);
}

- (NetI2pDataI2cpAbuseSeverity *)getSeverity {
  return _severity_;
}

- (void)setSeverityWithNetI2pDataI2cpAbuseSeverity:(NetI2pDataI2cpAbuseSeverity *)severity {
  JreStrongAssign(&_severity_, severity);
}

- (NetI2pDataI2cpAbuseReason *)getReason {
  return _reason_;
}

- (void)setReasonWithNetI2pDataI2cpAbuseReason:(NetI2pDataI2cpAbuseReason *)reason {
  JreStrongAssign(&_reason_, reason);
}

- (NetI2pDataI2cpMessageId *)getMessageId {
  return _messageId_;
}

- (void)setMessageIdWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_ {
  JreStrongAssign(&_messageId_, id_);
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    JreStrongAssignAndConsume(&_sessionId_, new_NetI2pDataI2cpSessionId_init());
    [_sessionId_ readBytesWithJavaIoInputStream:inArg];
    JreStrongAssignAndConsume(&_severity_, new_NetI2pDataI2cpAbuseSeverity_init());
    [_severity_ readBytesWithJavaIoInputStream:inArg];
    JreStrongAssignAndConsume(&_reason_, new_NetI2pDataI2cpAbuseReason_init());
    [_reason_ readBytesWithJavaIoInputStream:inArg];
    JreStrongAssignAndConsume(&_messageId_, new_NetI2pDataI2cpMessageId_init());
    [_messageId_ readBytesWithJavaIoInputStream:inArg];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  if ((_sessionId_ == nil) || (_severity_ == nil) || (_reason_ == nil)) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Not enough information to construct the message");
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(32);
  @try {
    [((NetI2pDataI2cpSessionId *) nil_chk(_sessionId_)) writeBytesWithJavaIoOutputStream:os];
    [((NetI2pDataI2cpAbuseSeverity *) nil_chk(_severity_)) writeBytesWithJavaIoOutputStream:os];
    [((NetI2pDataI2cpAbuseReason *) nil_chk(_reason_)) writeBytesWithJavaIoOutputStream:os];
    if (_messageId_ == nil) {
      JreStrongAssignAndConsume(&_messageId_, new_NetI2pDataI2cpMessageId_init());
      [_messageId_ setMessageIdWithLong:0];
    }
    [((NetI2pDataI2cpMessageId *) nil_chk(_messageId_)) writeBytesWithJavaIoOutputStream:os];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpReportAbuseMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[ReportAbuseMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSessionID: "])) appendWithId:[self getSessionId]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSeverity: "])) appendWithId:[self getSeverity]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReason: "])) appendWithId:[self getReason]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tMessageId: "])) appendWithId:[self getMessageId]];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_sessionId_);
  RELEASE_(_severity_);
  RELEASE_(_reason_);
  RELEASE_(_messageId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpAbuseSeverity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpAbuseReason;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpMessageId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 10, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSessionId);
  methods[2].selector = @selector(sessionId);
  methods[3].selector = @selector(setSessionIdWithNetI2pDataI2cpSessionId:);
  methods[4].selector = @selector(getSeverity);
  methods[5].selector = @selector(setSeverityWithNetI2pDataI2cpAbuseSeverity:);
  methods[6].selector = @selector(getReason);
  methods[7].selector = @selector(setReasonWithNetI2pDataI2cpAbuseReason:);
  methods[8].selector = @selector(getMessageId);
  methods[9].selector = @selector(setMessageIdWithNetI2pDataI2cpMessageId:);
  methods[10].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[11].selector = @selector(doWriteMessage);
  methods[12].selector = @selector(getType);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpReportAbuseMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_sessionId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_severity_", "LNetI2pDataI2cpAbuseSeverity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reason_", "LNetI2pDataI2cpAbuseReason;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_messageId_", "LNetI2pDataI2cpMessageId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSessionId", "LNetI2pDataI2cpSessionId;", "setSeverity", "LNetI2pDataI2cpAbuseSeverity;", "setReason", "LNetI2pDataI2cpAbuseReason;", "setMessageId", "LNetI2pDataI2cpMessageId;", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpReportAbuseMessage = { "ReportAbuseMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpReportAbuseMessage;
}

@end

void NetI2pDataI2cpReportAbuseMessage_init(NetI2pDataI2cpReportAbuseMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
}

NetI2pDataI2cpReportAbuseMessage *new_NetI2pDataI2cpReportAbuseMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpReportAbuseMessage, init)
}

NetI2pDataI2cpReportAbuseMessage *create_NetI2pDataI2cpReportAbuseMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpReportAbuseMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpReportAbuseMessage)
