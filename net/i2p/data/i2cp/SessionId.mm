//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/SessionId.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/i2cp/SessionId.h"

@interface NetI2pDataI2cpSessionId () {
 @public
  jint _sessionId_;
}

@end

@implementation NetI2pDataI2cpSessionId

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpSessionId_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)id_ {
  NetI2pDataI2cpSessionId_initWithInt_(self, id_);
  return self;
}

- (jint)getSessionId {
  return _sessionId_;
}

- (void)setSessionIdWithInt:(jint)id_ {
  if (id_ < 0 || id_ > 65535) @throw create_JavaLangIllegalArgumentException_init();
  if (_sessionId_ >= 0) @throw create_JavaLangIllegalStateException_init();
  _sessionId_ = id_;
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (_sessionId_ >= 0) @throw create_JavaLangIllegalStateException_init();
  _sessionId_ = (jint) NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 2);
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (_sessionId_ < 0) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"Invalid session ID: ", _sessionId_));
  NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, 2, _sessionId_);
}

- (jboolean)isEqual:(id)obj {
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pDataI2cpSessionId class]])) return false;
  return _sessionId_ == ((NetI2pDataI2cpSessionId *) nil_chk(((NetI2pDataI2cpSessionId *) cast_chk(obj, [NetI2pDataI2cpSessionId class]))))->_sessionId_;
}

- (NSUInteger)hash {
  return 777 * _sessionId_;
}

- (NSString *)description {
  return JreStrcat("$IC", @"[SessionId: ", _sessionId_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getSessionId);
  methods[3].selector = @selector(setSessionIdWithInt:);
  methods[4].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[5].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_sessionId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setSessionId", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpSessionId = { "SessionId", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpSessionId;
}

@end

void NetI2pDataI2cpSessionId_init(NetI2pDataI2cpSessionId *self) {
  NetI2pDataDataStructureImpl_init(self);
  self->_sessionId_ = -1;
}

NetI2pDataI2cpSessionId *new_NetI2pDataI2cpSessionId_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpSessionId, init)
}

NetI2pDataI2cpSessionId *create_NetI2pDataI2cpSessionId_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpSessionId, init)
}

void NetI2pDataI2cpSessionId_initWithInt_(NetI2pDataI2cpSessionId *self, jint id_) {
  NetI2pDataDataStructureImpl_init(self);
  if (id_ < 0 || id_ > 65535) @throw create_JavaLangIllegalArgumentException_init();
  self->_sessionId_ = id_;
}

NetI2pDataI2cpSessionId *new_NetI2pDataI2cpSessionId_initWithInt_(jint id_) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpSessionId, initWithInt_, id_)
}

NetI2pDataI2cpSessionId *create_NetI2pDataI2cpSessionId_initWithInt_(jint id_) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpSessionId, initWithInt_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpSessionId)
