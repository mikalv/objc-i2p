//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/RequestVariableLeaseSetMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"
#include "net/i2p/data/i2cp/RequestVariableLeaseSetMessage.h"
#include "net/i2p/data/i2cp/SessionId.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pDataI2cpRequestVariableLeaseSetMessage () {
 @public
  NetI2pDataI2cpSessionId *_sessionId_;
  id<JavaUtilList> _endpoints_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestVariableLeaseSetMessage, _sessionId_, NetI2pDataI2cpSessionId *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestVariableLeaseSetMessage, _endpoints_, id<JavaUtilList>)

inline NSString *NetI2pDataI2cpRequestVariableLeaseSetMessage_get_MIN_VERSION(void);
static NSString *NetI2pDataI2cpRequestVariableLeaseSetMessage_MIN_VERSION = @"0.9.7";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataI2cpRequestVariableLeaseSetMessage, MIN_VERSION, NSString *)

@implementation NetI2pDataI2cpRequestVariableLeaseSetMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpRequestVariableLeaseSetMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpRequestVariableLeaseSetMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isSupportedWithNSString:(NSString *)clientVersion {
  return NetI2pDataI2cpRequestVariableLeaseSetMessage_isSupportedWithNSString_(clientVersion);
}

- (NetI2pDataI2cpSessionId *)getSessionId {
  return _sessionId_;
}

- (NetI2pDataI2cpSessionId *)sessionId {
  return _sessionId_;
}

- (void)setSessionIdWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  JreStrongAssign(&_sessionId_, id_);
}

- (jint)getEndpoints {
  return [((id<JavaUtilList>) nil_chk(_endpoints_)) size];
}

- (NetI2pDataLease *)getEndpointWithInt:(jint)endpoint {
  if ((endpoint < 0) || ([((id<JavaUtilList>) nil_chk(_endpoints_)) size] <= endpoint)) return nil;
  return [((id<JavaUtilList>) nil_chk(_endpoints_)) getWithInt:endpoint];
}

- (void)addEndpointWithNetI2pDataLease:(NetI2pDataLease *)lease {
  if (lease == nil) @throw create_JavaLangIllegalArgumentException_init();
  [((id<JavaUtilList>) nil_chk(_endpoints_)) addWithId:lease];
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    if (_sessionId_ != nil) @throw create_JavaLangIllegalStateException_init();
    JreStrongAssignAndConsume(&_sessionId_, new_NetI2pDataI2cpSessionId_init());
    [_sessionId_ readBytesWithJavaIoInputStream:inArg];
    jint numTunnels = (jint) NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 1);
    for (jint i = 0; i < numTunnels; i++) {
      NetI2pDataLease *lease = create_NetI2pDataLease_init();
      [lease readBytesWithJavaIoInputStream:inArg];
      [((id<JavaUtilList>) nil_chk(_endpoints_)) addWithId:lease];
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  if (_sessionId_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"No data");
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(256);
  @try {
    [((NetI2pDataI2cpSessionId *) nil_chk(_sessionId_)) writeBytesWithJavaIoOutputStream:os];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 1, [((id<JavaUtilList>) nil_chk(_endpoints_)) size]);
    for (jint i = 0; i < [_endpoints_ size]; i++) {
      [((NetI2pDataLease *) nil_chk([_endpoints_ getWithInt:i])) writeBytesWithJavaIoOutputStream:os];
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpRequestVariableLeaseSetMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[RequestVariableLeaseSetMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSessionId: "])) appendWithId:[self getSessionId]];
  [buf appendWithNSString:@"\n\tTunnels:"];
  for (jint i = 0; i < [self getEndpoints]; i++) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x000a])) appendWithId:[((id<JavaUtilList>) nil_chk(_endpoints_)) getWithInt:i]];
  }
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_sessionId_);
  RELEASE_(_endpoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataLease;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 10, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isSupportedWithNSString:);
  methods[2].selector = @selector(getSessionId);
  methods[3].selector = @selector(sessionId);
  methods[4].selector = @selector(setSessionIdWithNetI2pDataI2cpSessionId:);
  methods[5].selector = @selector(getEndpoints);
  methods[6].selector = @selector(getEndpointWithInt:);
  methods[7].selector = @selector(addEndpointWithNetI2pDataLease:);
  methods[8].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[9].selector = @selector(doWriteMessage);
  methods[10].selector = @selector(getType);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpRequestVariableLeaseSetMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_sessionId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_endpoints_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "MIN_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "isSupported", "LNSString;", "setSessionId", "LNetI2pDataI2cpSessionId;", "getEndpoint", "I", "addEndpoint", "LNetI2pDataLease;", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString", "Ljava/util/List<Lnet/i2p/data/Lease;>;", &NetI2pDataI2cpRequestVariableLeaseSetMessage_MIN_VERSION };
  static const J2ObjcClassInfo _NetI2pDataI2cpRequestVariableLeaseSetMessage = { "RequestVariableLeaseSetMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpRequestVariableLeaseSetMessage;
}

@end

void NetI2pDataI2cpRequestVariableLeaseSetMessage_init(NetI2pDataI2cpRequestVariableLeaseSetMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  JreStrongAssignAndConsume(&self->_endpoints_, new_JavaUtilArrayList_init());
}

NetI2pDataI2cpRequestVariableLeaseSetMessage *new_NetI2pDataI2cpRequestVariableLeaseSetMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpRequestVariableLeaseSetMessage, init)
}

NetI2pDataI2cpRequestVariableLeaseSetMessage *create_NetI2pDataI2cpRequestVariableLeaseSetMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpRequestVariableLeaseSetMessage, init)
}

jboolean NetI2pDataI2cpRequestVariableLeaseSetMessage_isSupportedWithNSString_(NSString *clientVersion) {
  NetI2pDataI2cpRequestVariableLeaseSetMessage_initialize();
  return clientVersion != nil && NetI2pUtilVersionComparator_compWithNSString_withNSString_(clientVersion, NetI2pDataI2cpRequestVariableLeaseSetMessage_MIN_VERSION) >= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpRequestVariableLeaseSetMessage)
