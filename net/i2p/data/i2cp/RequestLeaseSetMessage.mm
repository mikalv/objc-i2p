//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/RequestLeaseSetMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/Serializable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"
#include "net/i2p/data/i2cp/RequestLeaseSetMessage.h"
#include "net/i2p/data/i2cp/SessionId.h"

@interface NetI2pDataI2cpRequestLeaseSetMessage () {
 @public
  NetI2pDataI2cpSessionId *_sessionId_;
  JavaUtilArrayList *_endpoints_;
  JavaUtilDate *_end_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestLeaseSetMessage, _sessionId_, NetI2pDataI2cpSessionId *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestLeaseSetMessage, _endpoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestLeaseSetMessage, _end_, JavaUtilDate *)

inline jlong NetI2pDataI2cpRequestLeaseSetMessage_get_serialVersionUID(void);
#define NetI2pDataI2cpRequestLeaseSetMessage_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpRequestLeaseSetMessage, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2cpRequestLeaseSetMessage__Annotations$0(void);

@interface NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint : NSObject < JavaIoSerializable > {
 @public
  NetI2pDataHash *_router_;
  NetI2pDataTunnelId *_tunnelId_;
}

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)router
                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_;

- (NetI2pDataHash *)getRouter;

- (NetI2pDataTunnelId *)getTunnelId;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint)

J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint, _router_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint, _tunnelId_, NetI2pDataTunnelId *)

inline jlong NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_get_serialVersionUID(void);
#define NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint, serialVersionUID, jlong)

__attribute__((unused)) static void NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *self, NetI2pDataHash *router, NetI2pDataTunnelId *id_);

__attribute__((unused)) static NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *new_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *router, NetI2pDataTunnelId *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *create_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *router, NetI2pDataTunnelId *id_);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint)

@implementation NetI2pDataI2cpRequestLeaseSetMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpRequestLeaseSetMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpRequestLeaseSetMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NetI2pDataI2cpSessionId *)getSessionId {
  return _sessionId_;
}

- (NetI2pDataI2cpSessionId *)sessionId {
  return _sessionId_;
}

- (void)setSessionIdWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_ {
  JreStrongAssign(&_sessionId_, id_);
}

- (jint)getEndpoints {
  return [((JavaUtilArrayList *) nil_chk(_endpoints_)) size];
}

- (NetI2pDataHash *)getRouterWithInt:(jint)endpoint {
  if ((endpoint < 0) || ([((JavaUtilArrayList *) nil_chk(_endpoints_)) size] <= endpoint)) return nil;
  return [((NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *) nil_chk([((JavaUtilArrayList *) nil_chk(_endpoints_)) getWithInt:endpoint])) getRouter];
}

- (NetI2pDataTunnelId *)getTunnelIdWithInt:(jint)endpoint {
  if ((endpoint < 0) || ([((JavaUtilArrayList *) nil_chk(_endpoints_)) size] <= endpoint)) return nil;
  return [((NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *) nil_chk([((JavaUtilArrayList *) nil_chk(_endpoints_)) getWithInt:endpoint])) getTunnelId];
}

- (void)remoteEndpointWithInt:(jint)endpoint {
  if ((endpoint >= 0) && (endpoint < [((JavaUtilArrayList *) nil_chk(_endpoints_)) size])) [((JavaUtilArrayList *) nil_chk(_endpoints_)) removeWithInt:endpoint];
}

- (void)addEndpointWithNetI2pDataHash:(NetI2pDataHash *)router
               withNetI2pDataTunnelId:(NetI2pDataTunnelId *)tunnel {
  if (router == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Null router (tunnel=", tunnel, ')'));
  if (tunnel == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Null tunnel (router=", router, ')'));
  [((JavaUtilArrayList *) nil_chk(_endpoints_)) addWithId:create_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(router, tunnel)];
}

- (JavaUtilDate *)getEndDate {
  return _end_;
}

- (void)setEndDateWithJavaUtilDate:(JavaUtilDate *)end {
  JreStrongAssign(&_end_, end);
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    JreStrongAssignAndConsume(&_sessionId_, new_NetI2pDataI2cpSessionId_init());
    [_sessionId_ readBytesWithJavaIoInputStream:inArg];
    jint numTunnels = (jint) NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 1);
    [((JavaUtilArrayList *) nil_chk(_endpoints_)) clear];
    for (jint i = 0; i < numTunnels; i++) {
      NetI2pDataHash *router = NetI2pDataHash_createWithJavaIoInputStream_(inArg);
      NetI2pDataTunnelId *tunnel = create_NetI2pDataTunnelId_init();
      [tunnel readBytesWithJavaIoInputStream:inArg];
      [_endpoints_ addWithId:create_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(router, tunnel)];
    }
    JreStrongAssign(&_end_, NetI2pDataDataHelper_readDateWithJavaIoInputStream_(inArg));
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  if (_sessionId_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Unable to write out the message as there is not enough data");
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(256);
  @try {
    [((NetI2pDataI2cpSessionId *) nil_chk(_sessionId_)) writeBytesWithJavaIoOutputStream:os];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 1, [((JavaUtilArrayList *) nil_chk(_endpoints_)) size]);
    for (jint i = 0; i < [_endpoints_ size]; i++) {
      NetI2pDataHash *router = [self getRouterWithInt:i];
      [((NetI2pDataHash *) nil_chk(router)) writeBytesWithJavaIoOutputStream:os];
      NetI2pDataTunnelId *tunnel = [self getTunnelIdWithInt:i];
      [((NetI2pDataTunnelId *) nil_chk(tunnel)) writeBytesWithJavaIoOutputStream:os];
    }
    NetI2pDataDataHelper_writeDateWithJavaIoOutputStream_withJavaUtilDate_(os, _end_);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpRequestLeaseSetMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[RequestLeaseSetMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSessionId: "])) appendWithId:[self getSessionId]];
  [buf appendWithNSString:@"\n\tTunnels:"];
  for (jint i = 0; i < [self getEndpoints]; i++) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\tRouterIdentity: "])) appendWithId:[self getRouterWithInt:i]];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\tTunnelId: "])) appendWithId:[self getTunnelIdWithInt:i]];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tEndDate: "])) appendWithId:[self getEndDate]];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_sessionId_);
  RELEASE_(_endpoints_);
  RELEASE_(_end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, 6, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, 13, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 13, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSessionId);
  methods[2].selector = @selector(sessionId);
  methods[3].selector = @selector(setSessionIdWithNetI2pDataI2cpSessionId:);
  methods[4].selector = @selector(getEndpoints);
  methods[5].selector = @selector(getRouterWithInt:);
  methods[6].selector = @selector(getTunnelIdWithInt:);
  methods[7].selector = @selector(remoteEndpointWithInt:);
  methods[8].selector = @selector(addEndpointWithNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[9].selector = @selector(getEndDate);
  methods[10].selector = @selector(setEndDateWithJavaUtilDate:);
  methods[11].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[12].selector = @selector(doWriteMessage);
  methods[13].selector = @selector(getType);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pDataI2cpRequestLeaseSetMessage_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpRequestLeaseSetMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_sessionId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_endpoints_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "_end_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSessionId", "LNetI2pDataI2cpSessionId;", "getRouter", "I", "getTunnelId", "remoteEndpoint", (void *)&NetI2pDataI2cpRequestLeaseSetMessage__Annotations$0, "addEndpoint", "LNetI2pDataHash;LNetI2pDataTunnelId;", "setEndDate", "LJavaUtilDate;", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString", "Ljava/util/ArrayList<Lnet/i2p/data/i2cp/RequestLeaseSetMessage$TunnelEndpoint;>;", "LNetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint;" };
  static const J2ObjcClassInfo _NetI2pDataI2cpRequestLeaseSetMessage = { "RequestLeaseSetMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 15, 5, -1, 16, -1, -1, -1 };
  return &_NetI2pDataI2cpRequestLeaseSetMessage;
}

@end

void NetI2pDataI2cpRequestLeaseSetMessage_init(NetI2pDataI2cpRequestLeaseSetMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  JreStrongAssignAndConsume(&self->_endpoints_, new_JavaUtilArrayList_init());
}

NetI2pDataI2cpRequestLeaseSetMessage *new_NetI2pDataI2cpRequestLeaseSetMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpRequestLeaseSetMessage, init)
}

NetI2pDataI2cpRequestLeaseSetMessage *create_NetI2pDataI2cpRequestLeaseSetMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpRequestLeaseSetMessage, init)
}

IOSObjectArray *NetI2pDataI2cpRequestLeaseSetMessage__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpRequestLeaseSetMessage)

@implementation NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint

- (instancetype)initWithNetI2pDataHash:(NetI2pDataHash *)router
                withNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(self, router, id_);
  return self;
}

- (NetI2pDataHash *)getRouter {
  return _router_;
}

- (NetI2pDataTunnelId *)getTunnelId {
  return _tunnelId_;
}

- (void)dealloc {
  RELEASE_(_router_);
  RELEASE_(_tunnelId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataHash:withNetI2pDataTunnelId:);
  methods[1].selector = @selector(getRouter);
  methods[2].selector = @selector(getTunnelId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_router_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_tunnelId_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataHash;LNetI2pDataTunnelId;", "LNetI2pDataI2cpRequestLeaseSetMessage;" };
  static const J2ObjcClassInfo _NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint = { "TunnelEndpoint", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0xa, 3, 3, 1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint;
}

@end

void NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *self, NetI2pDataHash *router, NetI2pDataTunnelId *id_) {
  NSObject_init(self);
  JreStrongAssign(&self->_router_, router);
  JreStrongAssign(&self->_tunnelId_, id_);
}

NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *new_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *router, NetI2pDataTunnelId *id_) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint, initWithNetI2pDataHash_withNetI2pDataTunnelId_, router, id_)
}

NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint *create_NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint_initWithNetI2pDataHash_withNetI2pDataTunnelId_(NetI2pDataHash *router, NetI2pDataTunnelId *id_) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint, initWithNetI2pDataHash_withNetI2pDataTunnelId_, router, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpRequestLeaseSetMessage_TunnelEndpoint)
