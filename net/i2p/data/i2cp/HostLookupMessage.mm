//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/HostLookupMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2cp/HostLookupMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"
#include "net/i2p/data/i2cp/SessionId.h"

@interface NetI2pDataI2cpHostLookupMessage () {
 @public
  jlong _reqID_;
  jlong _timeout_;
  jint _lookupType_;
  NetI2pDataHash *_hash_;
  NSString *_host_;
  NetI2pDataI2cpSessionId *_sessionId_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpHostLookupMessage, _hash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpHostLookupMessage, _host_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpHostLookupMessage, _sessionId_, NetI2pDataI2cpSessionId *)

inline jlong NetI2pDataI2cpHostLookupMessage_get_MAX_INT(void);
#define NetI2pDataI2cpHostLookupMessage_MAX_INT 4294967295LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpHostLookupMessage, MAX_INT, jlong)

@implementation NetI2pDataI2cpHostLookupMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpHostLookupMessage_MESSAGE_TYPE;
}

+ (jint)LOOKUP_HASH {
  return NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH;
}

+ (jint)LOOKUP_HOST {
  return NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpHostLookupMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_
                             withNetI2pDataHash:(NetI2pDataHash *)h
                                       withLong:(jlong)reqID
                                       withLong:(jlong)timeout {
  NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_(self, id_, h, reqID, timeout);
  return self;
}

- (instancetype)initWithNetI2pDataI2cpSessionId:(NetI2pDataI2cpSessionId *)id_
                                   withNSString:(NSString *)host
                                       withLong:(jlong)reqID
                                       withLong:(jlong)timeout {
  NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_(self, id_, host, reqID, timeout);
  return self;
}

- (NetI2pDataI2cpSessionId *)getSessionId {
  return _sessionId_;
}

- (NetI2pDataI2cpSessionId *)sessionId {
  return _sessionId_;
}

- (jlong)getReqID {
  return _reqID_;
}

- (jlong)getTimeout {
  return _timeout_;
}

- (jint)getLookupType {
  return _lookupType_;
}

- (NetI2pDataHash *)getHash {
  return _hash_;
}

- (NSString *)getHostname {
  return _host_;
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    JreStrongAssignAndConsume(&_sessionId_, new_NetI2pDataI2cpSessionId_init());
    [_sessionId_ readBytesWithJavaIoInputStream:inArg];
    _reqID_ = NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 4);
    _timeout_ = NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 4);
    _lookupType_ = (jint) NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 1);
    if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH) {
      JreStrongAssign(&_hash_, NetI2pDataHash_createWithJavaIoInputStream_(inArg));
    }
    else if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST) {
      JreStrongAssign(&_host_, NetI2pDataDataHelper_readStringWithJavaIoInputStream_(inArg));
      if ([((NSString *) nil_chk(_host_)) java_length] == 0) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"bad host");
    }
    else {
      @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"bad type");
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"bad data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  jint len;
  if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH) {
    if (_hash_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Unable to write out the message as there is not enough data");
    len = 11 + NetI2pDataHash_HASH_LENGTH;
  }
  else if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST) {
    if (_host_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"Unable to write out the message as there is not enough data");
    len = 12 + [_host_ java_length];
  }
  else {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"bad type");
  }
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(len);
  @try {
    [((NetI2pDataI2cpSessionId *) nil_chk(_sessionId_)) writeBytesWithJavaIoOutputStream:os];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 4, _reqID_);
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 4, _timeout_);
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 1, _lookupType_);
    if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH) {
      [((NetI2pDataHash *) nil_chk(_hash_)) writeBytesWithJavaIoOutputStream:os];
    }
    else {
      NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(os, _host_);
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"bad data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpHostLookupMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[HostLookupMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t"])) appendWithId:_sessionId_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReqID: "])) appendWithLong:_reqID_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tTimeout: "])) appendWithLong:_timeout_];
  if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tHash: "])) appendWithId:_hash_];
  else if (_lookupType_ == NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tHost: "])) appendWithNSString:_host_];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_hash_);
  RELEASE_(_host_);
  RELEASE_(_sessionId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpSessionId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pDataI2cpSessionId:withNetI2pDataHash:withLong:withLong:);
  methods[2].selector = @selector(initWithNetI2pDataI2cpSessionId:withNSString:withLong:withLong:);
  methods[3].selector = @selector(getSessionId);
  methods[4].selector = @selector(sessionId);
  methods[5].selector = @selector(getReqID);
  methods[6].selector = @selector(getTimeout);
  methods[7].selector = @selector(getLookupType);
  methods[8].selector = @selector(getHash);
  methods[9].selector = @selector(getHostname);
  methods[10].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[11].selector = @selector(doWriteMessage);
  methods[12].selector = @selector(getType);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpHostLookupMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_reqID_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_timeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lookupType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_host_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sessionId_", "LNetI2pDataI2cpSessionId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOOKUP_HASH", "I", .constantValue.asInt = NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH, 0x19, -1, -1, -1, -1 },
    { "LOOKUP_HOST", "I", .constantValue.asInt = NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST, 0x19, -1, -1, -1, -1 },
    { "MAX_INT", "J", .constantValue.asLong = NetI2pDataI2cpHostLookupMessage_MAX_INT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2cpSessionId;LNetI2pDataHash;JJ", "LNetI2pDataI2cpSessionId;LNSString;JJ", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpHostLookupMessage = { "HostLookupMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpHostLookupMessage;
}

@end

void NetI2pDataI2cpHostLookupMessage_init(NetI2pDataI2cpHostLookupMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
}

NetI2pDataI2cpHostLookupMessage *new_NetI2pDataI2cpHostLookupMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpHostLookupMessage, init)
}

NetI2pDataI2cpHostLookupMessage *create_NetI2pDataI2cpHostLookupMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpHostLookupMessage, init)
}

void NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_(NetI2pDataI2cpHostLookupMessage *self, NetI2pDataI2cpSessionId *id_, NetI2pDataHash *h, jlong reqID, jlong timeout) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  if (id_ == nil || h == nil) @throw create_JavaLangIllegalArgumentException_init();
  if (reqID < 0 || reqID > NetI2pDataI2cpHostLookupMessage_MAX_INT) @throw create_JavaLangIllegalArgumentException_init();
  if (timeout <= 0 || timeout > NetI2pDataI2cpHostLookupMessage_MAX_INT) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_sessionId_, id_);
  JreStrongAssign(&self->_hash_, h);
  self->_reqID_ = reqID;
  self->_timeout_ = timeout;
  self->_lookupType_ = NetI2pDataI2cpHostLookupMessage_LOOKUP_HASH;
}

NetI2pDataI2cpHostLookupMessage *new_NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_(NetI2pDataI2cpSessionId *id_, NetI2pDataHash *h, jlong reqID, jlong timeout) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpHostLookupMessage, initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_, id_, h, reqID, timeout)
}

NetI2pDataI2cpHostLookupMessage *create_NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_(NetI2pDataI2cpSessionId *id_, NetI2pDataHash *h, jlong reqID, jlong timeout) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpHostLookupMessage, initWithNetI2pDataI2cpSessionId_withNetI2pDataHash_withLong_withLong_, id_, h, reqID, timeout)
}

void NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_(NetI2pDataI2cpHostLookupMessage *self, NetI2pDataI2cpSessionId *id_, NSString *host, jlong reqID, jlong timeout) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  if (id_ == nil || host == nil) @throw create_JavaLangIllegalArgumentException_init();
  if (reqID < 0 || reqID > NetI2pDataI2cpHostLookupMessage_MAX_INT) @throw create_JavaLangIllegalArgumentException_init();
  if (timeout <= 0 || timeout > NetI2pDataI2cpHostLookupMessage_MAX_INT) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_sessionId_, id_);
  JreStrongAssign(&self->_host_, host);
  self->_reqID_ = reqID;
  self->_timeout_ = timeout;
  self->_lookupType_ = NetI2pDataI2cpHostLookupMessage_LOOKUP_HOST;
}

NetI2pDataI2cpHostLookupMessage *new_NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_(NetI2pDataI2cpSessionId *id_, NSString *host, jlong reqID, jlong timeout) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpHostLookupMessage, initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_, id_, host, reqID, timeout)
}

NetI2pDataI2cpHostLookupMessage *create_NetI2pDataI2cpHostLookupMessage_initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_(NetI2pDataI2cpSessionId *id_, NSString *host, jlong reqID, jlong timeout) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpHostLookupMessage, initWithNetI2pDataI2cpSessionId_withNSString_withLong_withLong_, id_, host, reqID, timeout)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpHostLookupMessage)
