//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/I2CPMessageReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/i2cp/I2CPMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageHandler.h"
#include "net/i2p/data/i2cp/I2CPMessageReader.h"
#include "net/i2p/util/I2PThread.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pDataI2cpI2CPMessageReader () {
 @public
  JavaIoInputStream *_stream_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpI2CPMessageReader, _stream_, JavaIoInputStream *)

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2cpI2CPMessageReader__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2cpI2CPMessageReader__Annotations$1(void);

@interface NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener : NSObject

@end

@interface NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner () {
 @public
  NetI2pDataI2cpI2CPMessageReader *this$0_;
  NetI2pUtilLog *_log_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner, _log_, NetI2pUtilLog *)

J2OBJC_INITIALIZED_DEFN(NetI2pDataI2cpI2CPMessageReader)

JavaUtilConcurrentAtomicAtomicLong *NetI2pDataI2cpI2CPMessageReader___readerId;

@implementation NetI2pDataI2cpI2CPMessageReader

+ (JavaUtilConcurrentAtomicAtomicLong *)__readerId {
  return NetI2pDataI2cpI2CPMessageReader___readerId;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)lsnr {
  NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(self, stream, lsnr);
  return self;
}

- (instancetype)initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)lsnr {
  NetI2pDataI2cpI2CPMessageReader_initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(self, lsnr);
  return self;
}

- (void)setListenerWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)lsnr {
  JreStrongAssign(&_listener_, lsnr);
}

- (id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>)getListener {
  return _listener_;
}

- (void)startReading {
  [((JavaLangThread *) nil_chk(_readerThread_)) start];
}

- (void)pauseReading {
  [((NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *) nil_chk(_reader_)) pauseRunner];
}

- (void)resumeReading {
  [((NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *) nil_chk(_reader_)) resumeRunner];
}

- (void)stopReading {
  [((NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *) nil_chk(_reader_)) cancelRunner];
}

- (void)dealloc {
  RELEASE_(_stream_);
  RELEASE_(_listener_);
  RELEASE_(_reader_);
  RELEASE_(_readerThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:);
  methods[1].selector = @selector(initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:);
  methods[2].selector = @selector(setListenerWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:);
  methods[3].selector = @selector(getListener);
  methods[4].selector = @selector(startReading);
  methods[5].selector = @selector(pauseReading);
  methods[6].selector = @selector(resumeReading);
  methods[7].selector = @selector(stopReading);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_stream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_listener_", "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_reader_", "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_readerThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "__readerId", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1c, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;", "setListener", (void *)&NetI2pDataI2cpI2CPMessageReader__Annotations$0, (void *)&NetI2pDataI2cpI2CPMessageReader__Annotations$1, &NetI2pDataI2cpI2CPMessageReader___readerId, "LNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;LNetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner;" };
  static const J2ObjcClassInfo _NetI2pDataI2cpI2CPMessageReader = { "I2CPMessageReader", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, 6, -1, -1, -1 };
  return &_NetI2pDataI2cpI2CPMessageReader;
}

+ (void)initialize {
  if (self == [NetI2pDataI2cpI2CPMessageReader class]) {
    JreStrongAssignAndConsume(&NetI2pDataI2cpI2CPMessageReader___readerId, new_JavaUtilConcurrentAtomicAtomicLong_init());
    J2OBJC_SET_INITIALIZED(NetI2pDataI2cpI2CPMessageReader)
  }
}

@end

void NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(NetI2pDataI2cpI2CPMessageReader *self, JavaIoInputStream *stream, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  NSObject_init(self);
  JreStrongAssign(&self->_stream_, stream);
  [self setListenerWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:lsnr];
  JreStrongAssignAndConsume(&self->_reader_, new_NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(self));
  JreStrongAssignAndConsume(&self->_readerThread_, new_NetI2pUtilI2PThread_initWithJavaLangRunnable_(self->_reader_));
  [self->_readerThread_ setDaemonWithBoolean:true];
  [((JavaLangThread *) nil_chk(self->_readerThread_)) setNameWithNSString:JreStrcat("$J", @"I2CP Reader ", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(NetI2pDataI2cpI2CPMessageReader___readerId)) incrementAndGet])];
}

NetI2pDataI2cpI2CPMessageReader *new_NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(JavaIoInputStream *stream, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpI2CPMessageReader, initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, stream, lsnr)
}

NetI2pDataI2cpI2CPMessageReader *create_NetI2pDataI2cpI2CPMessageReader_initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(JavaIoInputStream *stream, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpI2CPMessageReader, initWithJavaIoInputStream_withNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, stream, lsnr)
}

void NetI2pDataI2cpI2CPMessageReader_initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(NetI2pDataI2cpI2CPMessageReader *self, id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  NSObject_init(self);
  [self setListenerWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener:lsnr];
}

NetI2pDataI2cpI2CPMessageReader *new_NetI2pDataI2cpI2CPMessageReader_initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpI2CPMessageReader, initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, lsnr)
}

NetI2pDataI2cpI2CPMessageReader *create_NetI2pDataI2cpI2CPMessageReader_initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_(id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener> lsnr) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpI2CPMessageReader, initWithNetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener_, lsnr)
}

IOSObjectArray *NetI2pDataI2cpI2CPMessageReader__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataI2cpI2CPMessageReader__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpI2CPMessageReader)

@implementation NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(messageReceivedWithNetI2pDataI2cpI2CPMessageReader:withNetI2pDataI2cpI2CPMessage:);
  methods[1].selector = @selector(readErrorWithNetI2pDataI2cpI2CPMessageReader:withJavaLangException:);
  methods[2].selector = @selector(disconnectedWithNetI2pDataI2cpI2CPMessageReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "messageReceived", "LNetI2pDataI2cpI2CPMessageReader;LNetI2pDataI2cpI2CPMessage;", "readError", "LNetI2pDataI2cpI2CPMessageReader;LJavaLangException;", "disconnected", "LNetI2pDataI2cpI2CPMessageReader;" };
  static const J2ObjcClassInfo _NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener = { "I2CPMessageEventListener", "net.i2p.data.i2cp", ptrTable, methods, NULL, 7, 0x609, 3, 0, 5, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener)

@implementation NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner

- (instancetype)initWithNetI2pDataI2cpI2CPMessageReader:(NetI2pDataI2cpI2CPMessageReader *)outer$ {
  NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(self, outer$);
  return self;
}

- (void)pauseRunner {
  JreAssignVolatileBoolean(&_doRun_, false);
}

- (void)resumeRunner {
  JreAssignVolatileBoolean(&_doRun_, true);
}

- (void)cancelRunner {
  JreAssignVolatileBoolean(&_doRun_, false);
  JreAssignVolatileBoolean(&_stayAlive_, false);
  JavaIoInputStream *in = this$0_->_stream_;
  if (in != nil) {
    @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:@"Error closing the stream" withJavaLangThrowable:ioe];
    }
  }
}

- (void)run {
  @try {
    [self run2];
  }
  @catch (JavaLangRuntimeException *e) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Uncaught I2CP error" withJavaLangThrowable:e];
    [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) readErrorWithNetI2pDataI2cpI2CPMessageReader:this$0_ withJavaLangException:e];
    [self cancelRunner];
  }
}

- (void)run2 {
  while (JreLoadVolatileBoolean(&_stayAlive_)) {
    while (JreLoadVolatileBoolean(&_doRun_)) {
      @try {
        id<NetI2pDataI2cpI2CPMessage> msg = NetI2pDataI2cpI2CPMessageHandler_readMessageWithJavaIoInputStream_(this$0_->_stream_);
        if (msg != nil) {
          [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) messageReceivedWithNetI2pDataI2cpI2CPMessageReader:this$0_ withNetI2pDataI2cpI2CPMessage:msg];
        }
      }
      @catch (NetI2pDataI2cpI2CPMessageException *ime) {
        [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"Error handling message" withJavaLangThrowable:ime];
        [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) readErrorWithNetI2pDataI2cpI2CPMessageReader:this$0_ withJavaLangException:ime];
        [self cancelRunner];
      }
      @catch (JavaIoIOException *ioe) {
        [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"IO Error handling message" withJavaLangThrowable:ioe];
        [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) disconnectedWithNetI2pDataI2cpI2CPMessageReader:this$0_];
        [self cancelRunner];
      }
      @catch (JavaLangOutOfMemoryError *oom) {
        @throw oom;
      }
      @catch (JavaLangRuntimeException *e) {
        [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Unhandled error reading I2CP stream" withJavaLangThrowable:e];
        [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) disconnectedWithNetI2pDataI2cpI2CPMessageReader:this$0_];
        [self cancelRunner];
      }
    }
    if (JreLoadVolatileBoolean(&_stayAlive_) && !JreLoadVolatileBoolean(&_doRun_)) {
      @try {
        JavaLangThread_sleepWithLong_(500);
      }
      @catch (JavaLangInterruptedException *ie) {
        [((NetI2pUtilLog *) nil_chk(_log_)) warnWithNSString:@"Breaking away stream" withJavaLangThrowable:ie];
        [((id<NetI2pDataI2cpI2CPMessageReader_I2CPMessageEventListener>) nil_chk(this$0_->_listener_)) disconnectedWithNetI2pDataI2cpI2CPMessageReader:this$0_];
        [self cancelRunner];
      }
    }
  }
  JreStrongAssign(&this$0_->_stream_, nil);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataI2cpI2CPMessageReader:);
  methods[1].selector = @selector(pauseRunner);
  methods[2].selector = @selector(resumeRunner);
  methods[3].selector = @selector(cancelRunner);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(run2);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pDataI2cpI2CPMessageReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_doRun_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_stayAlive_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataI2cpI2CPMessageReader;" };
  static const J2ObjcClassInfo _NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner = { "I2CPMessageReaderRunner", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x4, 6, 4, 0, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner;
}

@end

void NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *self, NetI2pDataI2cpI2CPMessageReader *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pDataI2cpI2CPMessageReader_class_()]);
  JreAssignVolatileBoolean(&self->_doRun_, true);
  JreAssignVolatileBoolean(&self->_stayAlive_, true);
}

NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *new_NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(NetI2pDataI2cpI2CPMessageReader *outer$) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner, initWithNetI2pDataI2cpI2CPMessageReader_, outer$)
}

NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner *create_NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner_initWithNetI2pDataI2cpI2CPMessageReader_(NetI2pDataI2cpI2CPMessageReader *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner, initWithNetI2pDataI2cpI2CPMessageReader_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpI2CPMessageReader_I2CPMessageReaderRunner)
