//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/DisconnectMessage.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataI2cpDisconnectMessage")
#ifdef RESTRICT_NetI2pDataI2cpDisconnectMessage
#define INCLUDE_ALL_NetI2pDataI2cpDisconnectMessage 0
#else
#define INCLUDE_ALL_NetI2pDataI2cpDisconnectMessage 1
#endif
#undef RESTRICT_NetI2pDataI2cpDisconnectMessage

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataI2cpDisconnectMessage_) && (INCLUDE_ALL_NetI2pDataI2cpDisconnectMessage || defined(INCLUDE_NetI2pDataI2cpDisconnectMessage))
#define NetI2pDataI2cpDisconnectMessage_

#define RESTRICT_NetI2pDataI2cpI2CPMessageImpl 1
#define INCLUDE_NetI2pDataI2cpI2CPMessageImpl 1
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"

@class IOSByteArray;
@class JavaIoInputStream;

@interface NetI2pDataI2cpDisconnectMessage : NetI2pDataI2cpI2CPMessageImpl
@property (readonly, class) jint MESSAGE_TYPE NS_SWIFT_NAME(MESSAGE_TYPE);

+ (jint)MESSAGE_TYPE;

#pragma mark Public

- (instancetype __nonnull)init;

- (NSString *)getReason;

- (jint)getType;

- (void)setReasonWithNSString:(NSString *)reason;

- (NSString *)description;

#pragma mark Protected

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size;

- (IOSByteArray *)doWriteMessage;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataI2cpDisconnectMessage)

inline jint NetI2pDataI2cpDisconnectMessage_get_MESSAGE_TYPE(void);
#define NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE 30
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpDisconnectMessage, MESSAGE_TYPE, jint)

FOUNDATION_EXPORT void NetI2pDataI2cpDisconnectMessage_init(NetI2pDataI2cpDisconnectMessage *self);

FOUNDATION_EXPORT NetI2pDataI2cpDisconnectMessage *new_NetI2pDataI2cpDisconnectMessage_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataI2cpDisconnectMessage *create_NetI2pDataI2cpDisconnectMessage_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataI2cpDisconnectMessage)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataI2cpDisconnectMessage")
