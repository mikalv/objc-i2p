//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/AbuseReason.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/i2cp/AbuseReason.h"

@interface NetI2pDataI2cpAbuseReason () {
 @public
  NSString *_reason_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpAbuseReason, _reason_, NSString *)

@implementation NetI2pDataI2cpAbuseReason

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpAbuseReason_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getReason {
  return _reason_;
}

- (void)setReasonWithNSString:(NSString *)reason {
  JreStrongAssign(&_reason_, reason);
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  JreStrongAssign(&_reason_, NetI2pDataDataHelper_readStringWithJavaIoInputStream_(inArg));
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (_reason_ == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Invalid abuse reason");
  NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(outArg, _reason_);
}

- (jboolean)isEqual:(id)object {
  if ((object == nil) || !([object isKindOfClass:[NetI2pDataI2cpAbuseReason class]])) return false;
  return NetI2pDataDataHelper_eqWithId_withId_(_reason_, [((NetI2pDataI2cpAbuseReason *) nil_chk(((NetI2pDataI2cpAbuseReason *) cast_chk(object, [NetI2pDataI2cpAbuseReason class])))) getReason]);
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_(_reason_);
}

- (NSString *)description {
  return JreStrcat("$$C", @"[AbuseReason: ", _reason_, ']');
}

- (void)dealloc {
  RELEASE_(_reason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getReason);
  methods[2].selector = @selector(setReasonWithNSString:);
  methods[3].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[4].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_reason_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setReason", "LNSString;", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpAbuseReason = { "AbuseReason", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpAbuseReason;
}

@end

void NetI2pDataI2cpAbuseReason_init(NetI2pDataI2cpAbuseReason *self) {
  NetI2pDataDataStructureImpl_init(self);
}

NetI2pDataI2cpAbuseReason *new_NetI2pDataI2cpAbuseReason_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpAbuseReason, init)
}

NetI2pDataI2cpAbuseReason *create_NetI2pDataI2cpAbuseReason_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpAbuseReason, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpAbuseReason)
