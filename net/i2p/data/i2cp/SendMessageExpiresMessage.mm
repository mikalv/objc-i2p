//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/SendMessageExpiresMessage.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Date.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DateAndFlags.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Payload.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/SendMessageExpiresMessage.h"
#include "net/i2p/data/i2cp/SendMessageMessage.h"
#include "net/i2p/data/i2cp/SessionId.h"

@interface NetI2pDataI2cpSendMessageExpiresMessage () {
 @public
  NetI2pDataDateAndFlags *_daf_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpSendMessageExpiresMessage, _daf_, NetI2pDataDateAndFlags *)

@implementation NetI2pDataI2cpSendMessageExpiresMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpSendMessageExpiresMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpSendMessageExpiresMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pDataDateAndFlags:(NetI2pDataDateAndFlags *)options {
  NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(self, options);
  return self;
}

- (JavaUtilDate *)getExpiration {
  return [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) getDate];
}

- (jlong)getExpirationTime {
  return [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) getTime];
}

- (void)setExpirationWithJavaUtilDate:(JavaUtilDate *)d {
  [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) setDateWithJavaUtilDate:d];
}

- (void)setExpirationWithLong:(jlong)d {
  [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) setDateWithLong:d];
}

- (jint)getFlags {
  return [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) getFlags];
}

- (void)setFlagsWithInt:(jint)f {
  [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) setFlagsWithInt:f];
}

- (void)readMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                 withInt:(jint)length
                                 withInt:(jint)type {
  [super readMessageWithJavaIoInputStream:inArg withInt:length withInt:type];
  @try {
    [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) readBytesWithJavaIoInputStream:inArg];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (void)writeMessageWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (_sessionId_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"No session ID");
  if (_destination_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"No dest");
  if (_payload_ == nil) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"No payload");
  if (_nonce_ < 0) @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_(@"No nonce");
  jint len = 2 + [_destination_ size] + [((NetI2pDataPayload *) nil_chk(_payload_)) getSize] + 4 + 4 + NetI2pDataDataHelper_DATE_LENGTH;
  @try {
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, 4, len);
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) NetI2pDataI2cpSendMessageExpiresMessage_MESSAGE_TYPE];
    [((NetI2pDataI2cpSessionId *) nil_chk(_sessionId_)) writeBytesWithJavaIoOutputStream:outArg];
    [((NetI2pDataDestination *) nil_chk(_destination_)) writeBytesWithJavaIoOutputStream:outArg];
    [((NetI2pDataPayload *) nil_chk(_payload_)) writeBytesWithJavaIoOutputStream:outArg];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, 4, _nonce_);
    [((NetI2pDataDateAndFlags *) nil_chk(_daf_)) writeBytesWithJavaIoOutputStream:outArg];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing the msg", dfe);
  }
}

- (jint)getType {
  return NetI2pDataI2cpSendMessageExpiresMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[SendMessageExpiresMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSessionId: "])) appendWithId:_sessionId_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tNonce: "])) appendWithLong:_nonce_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tDestination: "])) appendWithId:_destination_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tExpiration: "])) appendWithId:[self getExpiration]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tPayload: "])) appendWithId:_payload_];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_daf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pDataDateAndFlags:);
  methods[2].selector = @selector(getExpiration);
  methods[3].selector = @selector(getExpirationTime);
  methods[4].selector = @selector(setExpirationWithJavaUtilDate:);
  methods[5].selector = @selector(setExpirationWithLong:);
  methods[6].selector = @selector(getFlags);
  methods[7].selector = @selector(setFlagsWithInt:);
  methods[8].selector = @selector(readMessageWithJavaIoInputStream:withInt:withInt:);
  methods[9].selector = @selector(writeMessageWithJavaIoOutputStream:);
  methods[10].selector = @selector(getType);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpSendMessageExpiresMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_daf_", "LNetI2pDataDateAndFlags;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDateAndFlags;", "setExpiration", "LJavaUtilDate;", "J", "setFlags", "I", "readMessage", "LJavaIoInputStream;II", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "writeMessage", "LJavaIoOutputStream;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpSendMessageExpiresMessage = { "SendMessageExpiresMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpSendMessageExpiresMessage;
}

@end

void NetI2pDataI2cpSendMessageExpiresMessage_init(NetI2pDataI2cpSendMessageExpiresMessage *self) {
  NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(self, create_NetI2pDataDateAndFlags_init());
}

NetI2pDataI2cpSendMessageExpiresMessage *new_NetI2pDataI2cpSendMessageExpiresMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpSendMessageExpiresMessage, init)
}

NetI2pDataI2cpSendMessageExpiresMessage *create_NetI2pDataI2cpSendMessageExpiresMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpSendMessageExpiresMessage, init)
}

void NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(NetI2pDataI2cpSendMessageExpiresMessage *self, NetI2pDataDateAndFlags *options) {
  NetI2pDataI2cpSendMessageMessage_init(self);
  JreStrongAssign(&self->_daf_, options);
}

NetI2pDataI2cpSendMessageExpiresMessage *new_NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(NetI2pDataDateAndFlags *options) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpSendMessageExpiresMessage, initWithNetI2pDataDateAndFlags_, options)
}

NetI2pDataI2cpSendMessageExpiresMessage *create_NetI2pDataI2cpSendMessageExpiresMessage_initWithNetI2pDataDateAndFlags_(NetI2pDataDateAndFlags *options) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpSendMessageExpiresMessage, initWithNetI2pDataDateAndFlags_, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpSendMessageExpiresMessage)
