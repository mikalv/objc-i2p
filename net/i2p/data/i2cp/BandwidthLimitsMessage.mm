//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/BandwidthLimitsMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/i2cp/BandwidthLimitsMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"

@interface NetI2pDataI2cpBandwidthLimitsMessage () {
 @public
  IOSIntArray *data_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpBandwidthLimitsMessage, data_, IOSIntArray *)

inline jint NetI2pDataI2cpBandwidthLimitsMessage_get_LIMITS(void);
#define NetI2pDataI2cpBandwidthLimitsMessage_LIMITS 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2cpBandwidthLimitsMessage, LIMITS, jint)

@implementation NetI2pDataI2cpBandwidthLimitsMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpBandwidthLimitsMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpBandwidthLimitsMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)inArg
                    withInt:(jint)outArg {
  NetI2pDataI2cpBandwidthLimitsMessage_initWithInt_withInt_(self, inArg, outArg);
  return self;
}

- (IOSIntArray *)getLimits {
  return data_;
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    for (jint i = 0; i < NetI2pDataI2cpBandwidthLimitsMessage_LIMITS; i++) {
      *IOSIntArray_GetRef(nil_chk(data_), i) = (jint) NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 4);
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(64);
  @try {
    for (jint i = 0; i < NetI2pDataI2cpBandwidthLimitsMessage_LIMITS; i++) {
      NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(os, 4, IOSIntArray_Get(nil_chk(data_), i));
    }
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpBandwidthLimitsMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[BandwidthLimitsMessage"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tIn: "])) appendWithInt:IOSIntArray_Get(nil_chk(data_), 0)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tOut: "])) appendWithInt:IOSIntArray_Get(nil_chk(data_), 1)];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(getLimits);
  methods[3].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[4].selector = @selector(doWriteMessage);
  methods[5].selector = @selector(getType);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpBandwidthLimitsMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "LIMITS", "I", .constantValue.asInt = NetI2pDataI2cpBandwidthLimitsMessage_LIMITS, 0x1a, -1, -1, -1, -1 },
    { "data_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpBandwidthLimitsMessage = { "BandwidthLimitsMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpBandwidthLimitsMessage;
}

@end

void NetI2pDataI2cpBandwidthLimitsMessage_init(NetI2pDataI2cpBandwidthLimitsMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  JreStrongAssignAndConsume(&self->data_, [IOSIntArray newArrayWithLength:NetI2pDataI2cpBandwidthLimitsMessage_LIMITS]);
}

NetI2pDataI2cpBandwidthLimitsMessage *new_NetI2pDataI2cpBandwidthLimitsMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpBandwidthLimitsMessage, init)
}

NetI2pDataI2cpBandwidthLimitsMessage *create_NetI2pDataI2cpBandwidthLimitsMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpBandwidthLimitsMessage, init)
}

void NetI2pDataI2cpBandwidthLimitsMessage_initWithInt_withInt_(NetI2pDataI2cpBandwidthLimitsMessage *self, jint inArg, jint outArg) {
  NetI2pDataI2cpBandwidthLimitsMessage_init(self);
  *IOSIntArray_GetRef(nil_chk(self->data_), 0) = inArg;
  *IOSIntArray_GetRef(self->data_, 1) = outArg;
}

NetI2pDataI2cpBandwidthLimitsMessage *new_NetI2pDataI2cpBandwidthLimitsMessage_initWithInt_withInt_(jint inArg, jint outArg) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpBandwidthLimitsMessage, initWithInt_withInt_, inArg, outArg)
}

NetI2pDataI2cpBandwidthLimitsMessage *create_NetI2pDataI2cpBandwidthLimitsMessage_initWithInt_withInt_(jint inArg, jint outArg) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpBandwidthLimitsMessage, initWithInt_withInt_, inArg, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpBandwidthLimitsMessage)
