//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/GetDateMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/i2cp/GetDateMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"
#include "net/i2p/util/OrderedProperties.h"

@interface NetI2pDataI2cpGetDateMessage () {
 @public
  NSString *_version_;
  JavaUtilProperties *_options_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpGetDateMessage, _version_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pDataI2cpGetDateMessage, _options_, JavaUtilProperties *)

@implementation NetI2pDataI2cpGetDateMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpGetDateMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpGetDateMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)version_ {
  NetI2pDataI2cpGetDateMessage_initWithNSString_(self, version_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)version_
          withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pDataI2cpGetDateMessage_initWithNSString_withJavaUtilProperties_(self, version_, options);
  return self;
}

- (NSString *)getVersion {
  return _version_;
}

- (JavaUtilProperties *)getOptions {
  return _options_;
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  if (size > 0) {
    @try {
      JreStrongAssign(&_version_, NetI2pDataDataHelper_readStringWithJavaIoInputStream_(inArg));
      if (size > 1 + [((NSString *) nil_chk(_version_)) java_length]) JreStrongAssign(&_options_, NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_(inArg));
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Bad version string", dfe);
    }
  }
}

- (IOSByteArray *)doWriteMessage {
  if (_version_ == nil) return [IOSByteArray arrayWithLength:0];
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(_options_ != nil ? 128 : 16);
  @try {
    NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(os, _version_);
    if (_options_ != nil && ![_options_ isEmpty]) NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_(os, _options_, true);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpGetDateMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[GetDateMessage]"];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tVersion: "])) appendWithNSString:_version_];
  if (_options_ != nil && ![_options_ isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tOptions: #: "])) appendWithInt:[((JavaUtilProperties *) nil_chk(_options_)) size]];
    JavaUtilProperties *sorted = create_NetI2pUtilOrderedProperties_init();
    [sorted putAllWithJavaUtilMap:_options_];
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([sorted entrySet])) {
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
      NSString *val = (NSString *) cast_chk([e getValue], [NSString class]);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\t["])) appendWithNSString:key])) appendWithNSString:@"] = ["])) appendWithNSString:val])) appendWithNSString:@"]"];
    }
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_version_);
  RELEASE_(_options_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withJavaUtilProperties:);
  methods[3].selector = @selector(getVersion);
  methods[4].selector = @selector(getOptions);
  methods[5].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[6].selector = @selector(doWriteMessage);
  methods[7].selector = @selector(getType);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpGetDateMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_version_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_options_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaUtilProperties;", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpGetDateMessage = { "GetDateMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpGetDateMessage;
}

@end

void NetI2pDataI2cpGetDateMessage_init(NetI2pDataI2cpGetDateMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
}

NetI2pDataI2cpGetDateMessage *new_NetI2pDataI2cpGetDateMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpGetDateMessage, init)
}

NetI2pDataI2cpGetDateMessage *create_NetI2pDataI2cpGetDateMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpGetDateMessage, init)
}

void NetI2pDataI2cpGetDateMessage_initWithNSString_(NetI2pDataI2cpGetDateMessage *self, NSString *version_) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  JreStrongAssign(&self->_version_, version_);
}

NetI2pDataI2cpGetDateMessage *new_NetI2pDataI2cpGetDateMessage_initWithNSString_(NSString *version_) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpGetDateMessage, initWithNSString_, version_)
}

NetI2pDataI2cpGetDateMessage *create_NetI2pDataI2cpGetDateMessage_initWithNSString_(NSString *version_) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpGetDateMessage, initWithNSString_, version_)
}

void NetI2pDataI2cpGetDateMessage_initWithNSString_withJavaUtilProperties_(NetI2pDataI2cpGetDateMessage *self, NSString *version_, JavaUtilProperties *options) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
  if (version_ == nil && options != nil && ![options isEmpty]) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&self->_version_, version_);
  JreStrongAssign(&self->_options_, options);
}

NetI2pDataI2cpGetDateMessage *new_NetI2pDataI2cpGetDateMessage_initWithNSString_withJavaUtilProperties_(NSString *version_, JavaUtilProperties *options) {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpGetDateMessage, initWithNSString_withJavaUtilProperties_, version_, options)
}

NetI2pDataI2cpGetDateMessage *create_NetI2pDataI2cpGetDateMessage_initWithNSString_withJavaUtilProperties_(NSString *version_, JavaUtilProperties *options) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpGetDateMessage, initWithNSString_withJavaUtilProperties_, version_, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpGetDateMessage)
