//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/i2cp/DisconnectMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuilder.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/i2cp/DisconnectMessage.h"
#include "net/i2p/data/i2cp/I2CPMessageException.h"
#include "net/i2p/data/i2cp/I2CPMessageImpl.h"

@interface NetI2pDataI2cpDisconnectMessage () {
 @public
  NSString *_reason_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2cpDisconnectMessage, _reason_, NSString *)

@implementation NetI2pDataI2cpDisconnectMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2cpDisconnectMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getReason {
  return _reason_;
}

- (void)setReasonWithNSString:(NSString *)reason {
  JreStrongAssign(&_reason_, reason);
}

- (void)doReadMessageWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                   withInt:(jint)size {
  @try {
    JreStrongAssign(&_reason_, NetI2pDataDataHelper_readStringWithJavaIoInputStream_(inArg));
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Unable to load the message data", dfe);
  }
}

- (IOSByteArray *)doWriteMessage {
  JavaIoByteArrayOutputStream *os = create_JavaIoByteArrayOutputStream_initWithInt_(64);
  @try {
    NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(os, _reason_);
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    @throw create_NetI2pDataI2cpI2CPMessageException_initWithNSString_withJavaLangThrowable_(@"Error writing out the message data", dfe);
  }
  return [os toByteArray];
}

- (jint)getType {
  return NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[DisconnectMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReason: "])) appendWithNSString:[self getReason]];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_reason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getReason);
  methods[2].selector = @selector(setReasonWithNSString:);
  methods[3].selector = @selector(doReadMessageWithJavaIoInputStream:withInt:);
  methods[4].selector = @selector(doWriteMessage);
  methods[5].selector = @selector(getType);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2cpDisconnectMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_reason_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setReason", "LNSString;", "doReadMessage", "LJavaIoInputStream;I", "LNetI2pDataI2cpI2CPMessageException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2cpDisconnectMessage = { "DisconnectMessage", "net.i2p.data.i2cp", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2cpDisconnectMessage;
}

@end

void NetI2pDataI2cpDisconnectMessage_init(NetI2pDataI2cpDisconnectMessage *self) {
  NetI2pDataI2cpI2CPMessageImpl_init(self);
}

NetI2pDataI2cpDisconnectMessage *new_NetI2pDataI2cpDisconnectMessage_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2cpDisconnectMessage, init)
}

NetI2pDataI2cpDisconnectMessage *create_NetI2pDataI2cpDisconnectMessage_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2cpDisconnectMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2cpDisconnectMessage)
