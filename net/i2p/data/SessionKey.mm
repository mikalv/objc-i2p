//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/SessionKey.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SimpleDataStructure.h"

@interface NetI2pDataSessionKey () {
 @public
  id _preparedKey_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataSessionKey, _preparedKey_, id)

J2OBJC_INITIALIZED_DEFN(NetI2pDataSessionKey)

NetI2pDataSessionKey *NetI2pDataSessionKey_INVALID_KEY;

@implementation NetI2pDataSessionKey

+ (jint)KEYSIZE_BYTES {
  return NetI2pDataSessionKey_KEYSIZE_BYTES;
}

+ (NetI2pDataSessionKey *)INVALID_KEY {
  return NetI2pDataSessionKey_INVALID_KEY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataSessionKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pDataSessionKey_initWithByteArray_(self, data);
  return self;
}

- (jint)length {
  return NetI2pDataSessionKey_KEYSIZE_BYTES;
}

- (void)setDataWithByteArray:(IOSByteArray *)data {
  [super setDataWithByteArray:data];
}

- (id)getPreparedKey {
  return _preparedKey_;
}

- (void)setPreparedKeyWithId:(id)obj {
  JreStrongAssign(&_preparedKey_, obj);
}

- (void)dealloc {
  RELEASE_(_preparedKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(setDataWithByteArray:);
  methods[4].selector = @selector(getPreparedKey);
  methods[5].selector = @selector(setPreparedKeyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_preparedKey_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEYSIZE_BYTES", "I", .constantValue.asInt = NetI2pDataSessionKey_KEYSIZE_BYTES, 0x19, -1, -1, -1, -1 },
    { "INVALID_KEY", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "setData", "setPreparedKey", "LNSObject;", &NetI2pDataSessionKey_INVALID_KEY };
  static const J2ObjcClassInfo _NetI2pDataSessionKey = { "SessionKey", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pDataSessionKey;
}

+ (void)initialize {
  if (self == [NetI2pDataSessionKey class]) {
    JreStrongAssignAndConsume(&NetI2pDataSessionKey_INVALID_KEY, new_NetI2pDataSessionKey_initWithByteArray_([IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES]));
    J2OBJC_SET_INITIALIZED(NetI2pDataSessionKey)
  }
}

@end

void NetI2pDataSessionKey_init(NetI2pDataSessionKey *self) {
  NetI2pDataSimpleDataStructure_init(self);
}

NetI2pDataSessionKey *new_NetI2pDataSessionKey_init() {
  J2OBJC_NEW_IMPL(NetI2pDataSessionKey, init)
}

NetI2pDataSessionKey *create_NetI2pDataSessionKey_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataSessionKey, init)
}

void NetI2pDataSessionKey_initWithByteArray_(NetI2pDataSessionKey *self, IOSByteArray *data) {
  NetI2pDataSimpleDataStructure_initWithByteArray_(self, data);
}

NetI2pDataSessionKey *new_NetI2pDataSessionKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(NetI2pDataSessionKey, initWithByteArray_, data)
}

NetI2pDataSessionKey *create_NetI2pDataSessionKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(NetI2pDataSessionKey, initWithByteArray_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataSessionKey)
