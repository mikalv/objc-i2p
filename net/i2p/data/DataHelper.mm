//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/DataHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileDescriptor.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/security/MessageDigest.h"
#include "java/text/DecimalFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/ByteArray.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/util/ByteCache.h"
#include "net/i2p/util/FileUtil.h"
#include "net/i2p/util/OrderedProperties.h"
#include "net/i2p/util/ReusableGZIPInputStream.h"
#include "net/i2p/util/ReusableGZIPOutputStream.h"
#include "net/i2p/util/SecureFileOutputStream.h"
#include "net/i2p/util/SystemVersion.h"
#include "net/i2p/util/Translate.h"

@interface NetI2pDataDataHelper ()

+ (NSString *)_tWithNSString:(NSString *)key;

+ (NSString *)ngettextWithNSString:(NSString *)s
                      withNSString:(NSString *)p
                           withInt:(jint)n;

@end

inline jboolean NetI2pDataDataHelper_get_SHOULD_SYNC(void);
static jboolean NetI2pDataDataHelper_SHOULD_SYNC;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataDataHelper, SHOULD_SYNC, jboolean)

inline id<JavaUtilMap> NetI2pDataDataHelper_get__propertiesKeyCache(void);
static id<JavaUtilMap> NetI2pDataDataHelper__propertiesKeyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, _propertiesKeyCache, id<JavaUtilMap>)

inline JavaUtilRegexPattern *NetI2pDataDataHelper_get_ILLEGAL_KEY(void);
static JavaUtilRegexPattern *NetI2pDataDataHelper_ILLEGAL_KEY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, ILLEGAL_KEY, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *NetI2pDataDataHelper_get_ILLEGAL_VALUE(void);
static JavaUtilRegexPattern *NetI2pDataDataHelper_ILLEGAL_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, ILLEGAL_VALUE, JavaUtilRegexPattern *)

inline IOSByteArray *NetI2pDataDataHelper_get_EMPTY_BUFFER(void);
static IOSByteArray *NetI2pDataDataHelper_EMPTY_BUFFER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, EMPTY_BUFFER, IOSByteArray *)

inline jint NetI2pDataDataHelper_get_MAX_LINE_LENGTH(void);
#define NetI2pDataDataHelper_MAX_LINE_LENGTH 8192
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDataHelper, MAX_LINE_LENGTH, jint)

inline NSString *NetI2pDataDataHelper_get_BUNDLE_NAME(void);
static NSString *NetI2pDataDataHelper_BUNDLE_NAME = @"net.i2p.router.web.messages";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, BUNDLE_NAME, NSString *)

inline IOSObjectArray *NetI2pDataDataHelper_get_escapeChars(void);
static IOSObjectArray *NetI2pDataDataHelper_escapeChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, escapeChars, IOSObjectArray *)

inline IOSObjectArray *NetI2pDataDataHelper_get_escapeCodes(void);
static IOSObjectArray *NetI2pDataDataHelper_escapeCodes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, escapeCodes, IOSObjectArray *)

inline JavaUtilConcurrentConcurrentHashMap *NetI2pDataDataHelper_get_patterns(void);
static JavaUtilConcurrentConcurrentHashMap *NetI2pDataDataHelper_patterns;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataDataHelper, patterns, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static NSString *NetI2pDataDataHelper__tWithNSString_(NSString *key);

__attribute__((unused)) static NSString *NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(NSString *s, NSString *p, jint n);

__attribute__((unused)) static IOSObjectArray *NetI2pDataDataHelper__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataDataHelper__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataDataHelper__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataDataHelper__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataDataHelper__Annotations$4(void);

J2OBJC_INITIALIZED_DEFN(NetI2pDataDataHelper)

@implementation NetI2pDataDataHelper

+ (jint)DATE_LENGTH {
  return NetI2pDataDataHelper_DATE_LENGTH;
}

+ (jint)MAX_UNCOMPRESSED {
  return NetI2pDataDataHelper_MAX_UNCOMPRESSED;
}

+ (jint)MAX_COMPRESSION {
  return NetI2pDataDataHelper_MAX_COMPRESSION;
}

+ (jint)NO_COMPRESSION {
  return NetI2pDataDataHelper_NO_COMPRESSION;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataDataHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaUtilProperties *)readPropertiesWithJavaIoInputStream:(JavaIoInputStream *)rawStream {
  return NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_(rawStream);
}

+ (JavaUtilProperties *)readPropertiesWithJavaIoInputStream:(JavaIoInputStream *)rawStream
                                     withJavaUtilProperties:(JavaUtilProperties *)props {
  return NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_withJavaUtilProperties_(rawStream, props);
}

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props {
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_(rawStream, props);
}

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props
                                  withBoolean:(jboolean)utf8 {
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_(rawStream, props, utf8);
}

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props
                                  withBoolean:(jboolean)utf8
                                  withBoolean:(jboolean)sort {
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_withBoolean_(rawStream, props, utf8, sort);
}

+ (jint)toPropertiesWithByteArray:(IOSByteArray *)target
                          withInt:(jint)offset
           withJavaUtilProperties:(JavaUtilProperties *)props {
  return NetI2pDataDataHelper_toPropertiesWithByteArray_withInt_withJavaUtilProperties_(target, offset, props);
}

+ (jint)fromPropertiesWithByteArray:(IOSByteArray *)source
                            withInt:(jint)offset
             withJavaUtilProperties:(JavaUtilProperties *)target {
  return NetI2pDataDataHelper_fromPropertiesWithByteArray_withInt_withJavaUtilProperties_(source, offset, target);
}

+ (IOSByteArray *)toPropertiesWithJavaUtilProperties:(JavaUtilProperties *)opts {
  return NetI2pDataDataHelper_toPropertiesWithJavaUtilProperties_(opts);
}

+ (NSString *)toStringWithJavaUtilProperties:(JavaUtilProperties *)options {
  return NetI2pDataDataHelper_toStringWithJavaUtilProperties_(options);
}

+ (NSString *)toStringWithJavaUtilMap:(id<JavaUtilMap>)options {
  return NetI2pDataDataHelper_toStringWithJavaUtilMap_(options);
}

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file {
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(props, file);
}

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file
                            withBoolean:(jboolean)forceLowerCase {
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_withBoolean_(props, file, forceLowerCase);
}

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                  withJavaIoInputStream:(JavaIoInputStream *)inStr {
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_(props, inStr);
}

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                  withJavaIoInputStream:(JavaIoInputStream *)inStr
                            withBoolean:(jboolean)forceLowerCase {
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_withBoolean_(props, inStr, forceLowerCase);
}

+ (void)storePropsWithJavaUtilProperties:(JavaUtilProperties *)props
                          withJavaIoFile:(JavaIoFile *)file {
  NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(props, file);
}

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)col {
  return NetI2pDataDataHelper_toStringWithJavaUtilCollection_(col);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)buf {
  return NetI2pDataDataHelper_toStringWithByteArray_(buf);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)len {
  return NetI2pDataDataHelper_toStringWithByteArray_withInt_(buf, len);
}

+ (NSString *)toDecimalStringWithByteArray:(IOSByteArray *)buf
                                   withInt:(jint)len {
  return NetI2pDataDataHelper_toDecimalStringWithByteArray_withInt_(buf, len);
}

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data {
  return NetI2pDataDataHelper_toHexStringWithByteArray_(data);
}

+ (IOSByteArray *)fromHexStringWithNSString:(NSString *)val {
  return NetI2pDataDataHelper_fromHexStringWithNSString_(val);
}

+ (jlong)readLongWithJavaIoInputStream:(JavaIoInputStream *)rawStream
                               withInt:(jint)numBytes {
  return NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(rawStream, numBytes);
}

+ (void)writeLongWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                                withInt:(jint)numBytes
                               withLong:(jlong)value {
  NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(rawStream, numBytes, value);
}

+ (IOSByteArray *)toLongWithInt:(jint)numBytes
                       withLong:(jlong)value {
  return NetI2pDataDataHelper_toLongWithInt_withLong_(numBytes, value);
}

+ (void)toLongWithByteArray:(IOSByteArray *)target
                    withInt:(jint)offset
                    withInt:(jint)numBytes
                   withLong:(jlong)value {
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(target, offset, numBytes, value);
}

+ (void)toLongLEWithByteArray:(IOSByteArray *)target
                      withInt:(jint)offset
                      withInt:(jint)numBytes
                     withLong:(jlong)value {
  NetI2pDataDataHelper_toLongLEWithByteArray_withInt_withInt_withLong_(target, offset, numBytes, value);
}

+ (jlong)fromLongWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset
                       withInt:(jint)numBytes {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(src, offset, numBytes);
}

+ (jlong)fromLongLEWithByteArray:(IOSByteArray *)src
                         withInt:(jint)offset
                         withInt:(jint)numBytes {
  return NetI2pDataDataHelper_fromLongLEWithByteArray_withInt_withInt_(src, offset, numBytes);
}

+ (JavaUtilDate *)readDateWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataDataHelper_readDateWithJavaIoInputStream_(inArg);
}

+ (void)writeDateWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                       withJavaUtilDate:(JavaUtilDate *)date {
  NetI2pDataDataHelper_writeDateWithJavaIoOutputStream_withJavaUtilDate_(outArg, date);
}

+ (IOSByteArray *)toDateWithJavaUtilDate:(JavaUtilDate *)date {
  return NetI2pDataDataHelper_toDateWithJavaUtilDate_(date);
}

+ (void)toDateWithByteArray:(IOSByteArray *)target
                    withInt:(jint)offset
                   withLong:(jlong)when {
  NetI2pDataDataHelper_toDateWithByteArray_withInt_withLong_(target, offset, when);
}

+ (JavaUtilDate *)fromDateWithByteArray:(IOSByteArray *)src
                                withInt:(jint)offset {
  return NetI2pDataDataHelper_fromDateWithByteArray_withInt_(src, offset);
}

+ (NSString *)readStringWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataDataHelper_readStringWithJavaIoInputStream_(inArg);
}

+ (void)writeStringWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)string {
  NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(outArg, string);
}

+ (void)writeStringUTF8WithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                 withNSString:(NSString *)string {
  NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(outArg, string);
}

+ (jboolean)eqWithId:(id)lhs
              withId:(id)rhs {
  return NetI2pDataDataHelper_eqWithId_withId_(lhs, rhs);
}

+ (jboolean)eqWithJavaUtilCollection:(id<JavaUtilCollection>)lhs
              withJavaUtilCollection:(id<JavaUtilCollection>)rhs {
  return NetI2pDataDataHelper_eqWithJavaUtilCollection_withJavaUtilCollection_(lhs, rhs);
}

+ (jboolean)eqWithByteArray:(IOSByteArray *)lhs
              withByteArray:(IOSByteArray *)rhs {
  return NetI2pDataDataHelper_eqWithByteArray_withByteArray_(lhs, rhs);
}

+ (jboolean)eqWithInt:(jint)lhs
              withInt:(jint)rhs {
  return NetI2pDataDataHelper_eqWithInt_withInt_(lhs, rhs);
}

+ (jboolean)eqWithLong:(jlong)lhs
              withLong:(jlong)rhs {
  return NetI2pDataDataHelper_eqWithLong_withLong_(lhs, rhs);
}

+ (jboolean)eqWithByte:(jbyte)lhs
              withByte:(jbyte)rhs {
  return NetI2pDataDataHelper_eqWithByte_withByte_(lhs, rhs);
}

+ (jboolean)eqWithByteArray:(IOSByteArray *)lhs
                    withInt:(jint)offsetLeft
              withByteArray:(IOSByteArray *)rhs
                    withInt:(jint)offsetRight
                    withInt:(jint)length {
  return NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(lhs, offsetLeft, rhs, offsetRight, length);
}

+ (jboolean)eqCTWithByteArray:(IOSByteArray *)lhs
                      withInt:(jint)offsetLeft
                withByteArray:(IOSByteArray *)rhs
                      withInt:(jint)offsetRight
                      withInt:(jint)length {
  return NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(lhs, offsetLeft, rhs, offsetRight, length);
}

+ (jint)compareToWithByteArray:(IOSByteArray *)lhs
                 withByteArray:(IOSByteArray *)rhs {
  return NetI2pDataDataHelper_compareToWithByteArray_withByteArray_(lhs, rhs);
}

+ (IOSByteArray *)xor__WithByteArray:(IOSByteArray *)lhs
                       withByteArray:(IOSByteArray *)rhs {
  return NetI2pDataDataHelper_xor__WithByteArray_withByteArray_(lhs, rhs);
}

+ (void)xor__WithByteArray:(IOSByteArray *)lhs
                   withInt:(jint)startLeft
             withByteArray:(IOSByteArray *)rhs
                   withInt:(jint)startRight
             withByteArray:(IOSByteArray *)outArg
                   withInt:(jint)startOut
                   withInt:(jint)len {
  NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(lhs, startLeft, rhs, startRight, outArg, startOut, len);
}

+ (jint)hashCodeWithId:(id)obj {
  return NetI2pDataDataHelper_hashCodeWithId_(obj);
}

+ (jint)hashCodeWithJavaUtilDate:(JavaUtilDate *)obj {
  return NetI2pDataDataHelper_hashCodeWithJavaUtilDate_(obj);
}

+ (jint)hashCodeWithByteArray:(IOSByteArray *)b {
  return NetI2pDataDataHelper_hashCodeWithByteArray_(b);
}

+ (jint)hashCodeWithJavaUtilCollection:(id<JavaUtilCollection>)col {
  return NetI2pDataDataHelper_hashCodeWithJavaUtilCollection_(col);
}

+ (void)skipWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withLong:(jlong)n {
  NetI2pDataDataHelper_skipWithJavaIoInputStream_withLong_(inArg, n);
}

+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withByteArray:(IOSByteArray *)target {
  return NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(inArg, target);
}

+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withByteArray:(IOSByteArray *)target
                          withInt:(jint)offset
                          withInt:(jint)length {
  return NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_withInt_withInt_(inArg, target, offset, length);
}

+ (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_(inArg);
}

+ (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
              withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_ {
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaSecurityMessageDigest_(inArg, hash_);
}

+ (jboolean)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
                withJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_(inArg, buf);
}

+ (jboolean)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
                withJavaLangStringBuilder:(JavaLangStringBuilder *)buf
            withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_ {
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_withJavaSecurityMessageDigest_(inArg, buf, hash_);
}

+ (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                      withByteArray:(IOSByteArray *)data
      withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_ {
  NetI2pDataDataHelper_writeWithJavaIoOutputStream_withByteArray_withJavaSecurityMessageDigest_(outArg, data, hash_);
}

+ (NSString *)formatDurationWithLong:(jlong)ms {
  return NetI2pDataDataHelper_formatDurationWithLong_(ms);
}

+ (NSString *)formatDuration2WithLong:(jlong)ms {
  return NetI2pDataDataHelper_formatDuration2WithLong_(ms);
}

+ (NSString *)formatDuration2WithDouble:(jdouble)ms {
  return NetI2pDataDataHelper_formatDuration2WithDouble_(ms);
}

+ (NSString *)_tWithNSString:(NSString *)key {
  return NetI2pDataDataHelper__tWithNSString_(key);
}

+ (NSString *)ngettextWithNSString:(NSString *)s
                      withNSString:(NSString *)p
                           withInt:(jint)n {
  return NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(s, p, n);
}

+ (NSString *)formatSizeWithLong:(jlong)bytes {
  return NetI2pDataDataHelper_formatSizeWithLong_(bytes);
}

+ (NSString *)formatSize2WithLong:(jlong)bytes {
  return NetI2pDataDataHelper_formatSize2WithLong_(bytes);
}

+ (NSString *)formatSize2WithLong:(jlong)bytes
                      withBoolean:(jboolean)nonBreaking {
  return NetI2pDataDataHelper_formatSize2WithLong_withBoolean_(bytes, nonBreaking);
}

+ (NSString *)formatSize2DecimalWithLong:(jlong)bytes {
  return NetI2pDataDataHelper_formatSize2DecimalWithLong_(bytes);
}

+ (NSString *)formatSize2DecimalWithLong:(jlong)bytes
                             withBoolean:(jboolean)nonBreaking {
  return NetI2pDataDataHelper_formatSize2DecimalWithLong_withBoolean_(bytes, nonBreaking);
}

+ (NSString *)stripHTMLWithNSString:(NSString *)orig {
  return NetI2pDataDataHelper_stripHTMLWithNSString_(orig);
}

+ (NSString *)escapeHTMLWithNSString:(NSString *)unescaped {
  return NetI2pDataDataHelper_escapeHTMLWithNSString_(unescaped);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig {
  return NetI2pDataDataHelper_compressWithByteArray_(orig);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig
                                withInt:(jint)offset
                                withInt:(jint)size {
  return NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(orig, offset, size);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig
                                withInt:(jint)offset
                                withInt:(jint)size
                                withInt:(jint)level {
  return NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(orig, offset, size, level);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)orig {
  return NetI2pDataDataHelper_decompressWithByteArray_(orig);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)orig
                                  withInt:(jint)offset
                                  withInt:(jint)length {
  return NetI2pDataDataHelper_decompressWithByteArray_withInt_withInt_(orig, offset, length);
}

+ (IOSByteArray *)getUTF8WithNSString:(NSString *)orig {
  return NetI2pDataDataHelper_getUTF8WithNSString_(orig);
}

+ (IOSByteArray *)getUTF8WithJavaLangStringBuffer:(JavaLangStringBuffer *)orig {
  return NetI2pDataDataHelper_getUTF8WithJavaLangStringBuffer_(orig);
}

+ (NSString *)getUTF8WithByteArray:(IOSByteArray *)orig {
  return NetI2pDataDataHelper_getUTF8WithByteArray_(orig);
}

+ (NSString *)getUTF8WithByteArray:(IOSByteArray *)orig
                           withInt:(jint)offset
                           withInt:(jint)len {
  return NetI2pDataDataHelper_getUTF8WithByteArray_withInt_withInt_(orig, offset, len);
}

+ (IOSByteArray *)getASCIIWithNSString:(NSString *)orig {
  return NetI2pDataDataHelper_getASCIIWithNSString_(orig);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                         withNSString:(NSString *)regex {
  return NetI2pDataDataHelper_splitWithNSString_withNSString_(s, regex);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                         withNSString:(NSString *)regex
                              withInt:(jint)limit {
  return NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(s, regex, limit);
}

+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(inArg, outArg);
}

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)c {
  NetI2pDataDataHelper_sortWithJavaUtilList_withJavaUtilComparator_(list, c);
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)a
       withJavaUtilComparator:(id<JavaUtilComparator>)c {
  NetI2pDataDataHelper_sortWithNSObjectArray_withJavaUtilComparator_(a, c);
}

+ (void)replaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)from
                            withNSString:(NSString *)to {
  NetI2pDataDataHelper_replaceWithJavaLangStringBuilder_withNSString_withNSString_(buf, from, to);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 7, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 9, 2, -1, 10, -1 },
    { NULL, "I", 0x9, 11, 9, 12, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 13, 12, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x9, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 20, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 21, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 22, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 18, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 29, 26, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 30, 31, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 32, 33, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 34, 35, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 36, 37, 38, -1, -1, -1 },
    { NULL, "V", 0x9, 36, 39, 38, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 44, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 46, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 47, 48, 38, -1, 49, -1 },
    { NULL, "V", 0x9, 47, 50, 38, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 51, 27, 12, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 52, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 53, 54, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 55, 54, 2, -1, -1, -1 },
    { NULL, "Z", 0x19, 56, 57, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 56, 58, -1, 59, -1, -1 },
    { NULL, "Z", 0x19, 56, 60, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 56, 61, -1, -1, 62, -1 },
    { NULL, "Z", 0x19, 56, 63, -1, -1, 64, -1 },
    { NULL, "Z", 0x19, 56, 65, -1, -1, 66, -1 },
    { NULL, "Z", 0x19, 56, 67, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 68, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x19, 69, 60, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 70, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 70, 71, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 72, 73, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 72, 48, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 72, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 72, 24, -1, 74, -1, -1 },
    { NULL, "V", 0x9, 75, 76, 19, -1, -1, -1 },
    { NULL, "I", 0x9, 77, 78, 19, -1, -1, -1 },
    { NULL, "I", 0x9, 77, 79, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 80, 1, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 80, 81, 19, -1, -1, -1 },
    { NULL, "Z", 0x9, 80, 82, 19, -1, -1, -1 },
    { NULL, "Z", 0x9, 80, 83, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 84, 85, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 86, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 88, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 88, 89, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 90, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 91, 92, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 93, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 94, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 94, 95, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 96, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 96, 95, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 97, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 98, 31, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 99, 26, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 99, 42, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 99, 100, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 101, 26, 19, -1, -1, -1 },
    { NULL, "[B", 0x9, 101, 42, 19, -1, -1, -1 },
    { NULL, "[B", 0x9, 102, 31, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 102, 103, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 102, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 102, 42, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 104, 31, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 105, 106, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 105, 92, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 107, 108, 19, -1, -1, -1 },
    { NULL, "V", 0x9, 109, 110, -1, 111, -1, -1 },
    { NULL, "V", 0x9, 109, 112, -1, 113, -1, -1 },
    { NULL, "V", 0x9, 114, 115, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readPropertiesWithJavaIoInputStream:);
  methods[2].selector = @selector(readPropertiesWithJavaIoInputStream:withJavaUtilProperties:);
  methods[3].selector = @selector(writePropertiesWithJavaIoOutputStream:withJavaUtilProperties:);
  methods[4].selector = @selector(writePropertiesWithJavaIoOutputStream:withJavaUtilProperties:withBoolean:);
  methods[5].selector = @selector(writePropertiesWithJavaIoOutputStream:withJavaUtilProperties:withBoolean:withBoolean:);
  methods[6].selector = @selector(toPropertiesWithByteArray:withInt:withJavaUtilProperties:);
  methods[7].selector = @selector(fromPropertiesWithByteArray:withInt:withJavaUtilProperties:);
  methods[8].selector = @selector(toPropertiesWithJavaUtilProperties:);
  methods[9].selector = @selector(toStringWithJavaUtilProperties:);
  methods[10].selector = @selector(toStringWithJavaUtilMap:);
  methods[11].selector = @selector(loadPropsWithJavaUtilProperties:withJavaIoFile:);
  methods[12].selector = @selector(loadPropsWithJavaUtilProperties:withJavaIoFile:withBoolean:);
  methods[13].selector = @selector(loadPropsWithJavaUtilProperties:withJavaIoInputStream:);
  methods[14].selector = @selector(loadPropsWithJavaUtilProperties:withJavaIoInputStream:withBoolean:);
  methods[15].selector = @selector(storePropsWithJavaUtilProperties:withJavaIoFile:);
  methods[16].selector = @selector(toStringWithJavaUtilCollection:);
  methods[17].selector = @selector(toStringWithByteArray:);
  methods[18].selector = @selector(toStringWithByteArray:withInt:);
  methods[19].selector = @selector(toDecimalStringWithByteArray:withInt:);
  methods[20].selector = @selector(toHexStringWithByteArray:);
  methods[21].selector = @selector(fromHexStringWithNSString:);
  methods[22].selector = @selector(readLongWithJavaIoInputStream:withInt:);
  methods[23].selector = @selector(writeLongWithJavaIoOutputStream:withInt:withLong:);
  methods[24].selector = @selector(toLongWithInt:withLong:);
  methods[25].selector = @selector(toLongWithByteArray:withInt:withInt:withLong:);
  methods[26].selector = @selector(toLongLEWithByteArray:withInt:withInt:withLong:);
  methods[27].selector = @selector(fromLongWithByteArray:withInt:withInt:);
  methods[28].selector = @selector(fromLongLEWithByteArray:withInt:withInt:);
  methods[29].selector = @selector(readDateWithJavaIoInputStream:);
  methods[30].selector = @selector(writeDateWithJavaIoOutputStream:withJavaUtilDate:);
  methods[31].selector = @selector(toDateWithJavaUtilDate:);
  methods[32].selector = @selector(toDateWithByteArray:withInt:withLong:);
  methods[33].selector = @selector(fromDateWithByteArray:withInt:);
  methods[34].selector = @selector(readStringWithJavaIoInputStream:);
  methods[35].selector = @selector(writeStringWithJavaIoOutputStream:withNSString:);
  methods[36].selector = @selector(writeStringUTF8WithJavaIoOutputStream:withNSString:);
  methods[37].selector = @selector(eqWithId:withId:);
  methods[38].selector = @selector(eqWithJavaUtilCollection:withJavaUtilCollection:);
  methods[39].selector = @selector(eqWithByteArray:withByteArray:);
  methods[40].selector = @selector(eqWithInt:withInt:);
  methods[41].selector = @selector(eqWithLong:withLong:);
  methods[42].selector = @selector(eqWithByte:withByte:);
  methods[43].selector = @selector(eqWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[44].selector = @selector(eqCTWithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[45].selector = @selector(compareToWithByteArray:withByteArray:);
  methods[46].selector = @selector(xor__WithByteArray:withByteArray:);
  methods[47].selector = @selector(xor__WithByteArray:withInt:withByteArray:withInt:withByteArray:withInt:withInt:);
  methods[48].selector = @selector(hashCodeWithId:);
  methods[49].selector = @selector(hashCodeWithJavaUtilDate:);
  methods[50].selector = @selector(hashCodeWithByteArray:);
  methods[51].selector = @selector(hashCodeWithJavaUtilCollection:);
  methods[52].selector = @selector(skipWithJavaIoInputStream:withLong:);
  methods[53].selector = @selector(readWithJavaIoInputStream:withByteArray:);
  methods[54].selector = @selector(readWithJavaIoInputStream:withByteArray:withInt:withInt:);
  methods[55].selector = @selector(readLineWithJavaIoInputStream:);
  methods[56].selector = @selector(readLineWithJavaIoInputStream:withJavaSecurityMessageDigest:);
  methods[57].selector = @selector(readLineWithJavaIoInputStream:withJavaLangStringBuilder:);
  methods[58].selector = @selector(readLineWithJavaIoInputStream:withJavaLangStringBuilder:withJavaSecurityMessageDigest:);
  methods[59].selector = @selector(writeWithJavaIoOutputStream:withByteArray:withJavaSecurityMessageDigest:);
  methods[60].selector = @selector(formatDurationWithLong:);
  methods[61].selector = @selector(formatDuration2WithLong:);
  methods[62].selector = @selector(formatDuration2WithDouble:);
  methods[63].selector = @selector(_tWithNSString:);
  methods[64].selector = @selector(ngettextWithNSString:withNSString:withInt:);
  methods[65].selector = @selector(formatSizeWithLong:);
  methods[66].selector = @selector(formatSize2WithLong:);
  methods[67].selector = @selector(formatSize2WithLong:withBoolean:);
  methods[68].selector = @selector(formatSize2DecimalWithLong:);
  methods[69].selector = @selector(formatSize2DecimalWithLong:withBoolean:);
  methods[70].selector = @selector(stripHTMLWithNSString:);
  methods[71].selector = @selector(escapeHTMLWithNSString:);
  methods[72].selector = @selector(compressWithByteArray:);
  methods[73].selector = @selector(compressWithByteArray:withInt:withInt:);
  methods[74].selector = @selector(compressWithByteArray:withInt:withInt:withInt:);
  methods[75].selector = @selector(decompressWithByteArray:);
  methods[76].selector = @selector(decompressWithByteArray:withInt:withInt:);
  methods[77].selector = @selector(getUTF8WithNSString:);
  methods[78].selector = @selector(getUTF8WithJavaLangStringBuffer:);
  methods[79].selector = @selector(getUTF8WithByteArray:);
  methods[80].selector = @selector(getUTF8WithByteArray:withInt:withInt:);
  methods[81].selector = @selector(getASCIIWithNSString:);
  methods[82].selector = @selector(splitWithNSString:withNSString:);
  methods[83].selector = @selector(splitWithNSString:withNSString:withInt:);
  methods[84].selector = @selector(copy__WithJavaIoInputStream:withJavaIoOutputStream:);
  methods[85].selector = @selector(sortWithJavaUtilList:withJavaUtilComparator:);
  methods[86].selector = @selector(sortWithNSObjectArray:withJavaUtilComparator:);
  methods[87].selector = @selector(replaceWithJavaLangStringBuilder:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SHOULD_SYNC", "Z", .constantValue.asLong = 0, 0x1a, -1, 116, -1, -1 },
    { "_propertiesKeyCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 117, 118, -1 },
    { "ILLEGAL_KEY", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 119, -1, -1 },
    { "ILLEGAL_VALUE", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 120, -1, -1 },
    { "EMPTY_BUFFER", "[B", .constantValue.asLong = 0, 0x1a, -1, 121, -1, -1 },
    { "DATE_LENGTH", "I", .constantValue.asInt = NetI2pDataDataHelper_DATE_LENGTH, 0x19, -1, -1, -1, -1 },
    { "MAX_LINE_LENGTH", "I", .constantValue.asInt = NetI2pDataDataHelper_MAX_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "BUNDLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 122, -1, -1 },
    { "escapeChars", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 123, -1, -1 },
    { "escapeCodes", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 124, -1, -1 },
    { "MAX_UNCOMPRESSED", "I", .constantValue.asInt = NetI2pDataDataHelper_MAX_UNCOMPRESSED, 0x19, -1, -1, -1, -1 },
    { "MAX_COMPRESSION", "I", .constantValue.asInt = NetI2pDataDataHelper_MAX_COMPRESSION, 0x19, -1, -1, -1, -1 },
    { "NO_COMPRESSION", "I", .constantValue.asInt = NetI2pDataDataHelper_NO_COMPRESSION, 0x19, -1, -1, -1, -1 },
    { "patterns", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 125, 126, -1 },
  };
  static const void *ptrTable[] = { "readProperties", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "LJavaIoInputStream;LJavaUtilProperties;", "writeProperties", "LJavaIoOutputStream;LJavaUtilProperties;", "LJavaIoOutputStream;LJavaUtilProperties;Z", "LJavaIoOutputStream;LJavaUtilProperties;ZZ", "toProperties", "[BILJavaUtilProperties;", (void *)&NetI2pDataDataHelper__Annotations$0, "fromProperties", "LNetI2pDataDataFormatException;", "LJavaUtilProperties;", "toString", "LJavaUtilMap;", "(Ljava/util/Map<**>;)Ljava/lang/String;", "loadProps", "LJavaUtilProperties;LJavaIoFile;", "LJavaIoIOException;", "LJavaUtilProperties;LJavaIoFile;Z", "LJavaUtilProperties;LJavaIoInputStream;", "LJavaUtilProperties;LJavaIoInputStream;Z", "storeProps", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Ljava/lang/String;", "[B", "[BI", "toDecimalString", "toHexString", "fromHexString", "LNSString;", "readLong", "LJavaIoInputStream;I", "writeLong", "LJavaIoOutputStream;IJ", "toLong", "IJ", "LJavaLangIllegalArgumentException;", "[BIIJ", "toLongLE", "fromLong", "[BII", "fromLongLE", "readDate", "writeDate", "LJavaIoOutputStream;LJavaUtilDate;", "toDate", "LJavaUtilDate;", (void *)&NetI2pDataDataHelper__Annotations$1, "[BIJ", "fromDate", "readString", "writeString", "LJavaIoOutputStream;LNSString;", "writeStringUTF8", "eq", "LNSObject;LNSObject;", "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<*>;Ljava/util/Collection<*>;)Z", "[B[B", "II", (void *)&NetI2pDataDataHelper__Annotations$2, "JJ", (void *)&NetI2pDataDataHelper__Annotations$3, "BB", (void *)&NetI2pDataDataHelper__Annotations$4, "[BI[BII", "eqCT", "compareTo", "xor", "[BI[BI[BII", "hashCode", "LNSObject;", "(Ljava/util/Collection<*>;)I", "skip", "LJavaIoInputStream;J", "read", "LJavaIoInputStream;[B", "LJavaIoInputStream;[BII", "readLine", "LJavaIoInputStream;LJavaSecurityMessageDigest;", "LJavaIoInputStream;LJavaLangStringBuilder;", "LJavaIoInputStream;LJavaLangStringBuilder;LJavaSecurityMessageDigest;", "write", "LJavaIoOutputStream;[BLJavaSecurityMessageDigest;", "formatDuration", "J", "formatDuration2", "D", "_t", "ngettext", "LNSString;LNSString;I", "formatSize", "formatSize2", "JZ", "formatSize2Decimal", "stripHTML", "escapeHTML", "compress", "[BIII", "decompress", "getUTF8", "LJavaLangStringBuffer;", "getASCII", "split", "LNSString;LNSString;", "copy", "LJavaIoInputStream;LJavaIoOutputStream;", "sort", "LJavaUtilList;LJavaUtilComparator;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Ljava/util/Comparator<-TT;>;)V", "[LNSObject;LJavaUtilComparator;", "<T:Ljava/lang/Object;>([TT;Ljava/util/Comparator<-TT;>;)V", "replace", "LJavaLangStringBuilder;LNSString;LNSString;", &NetI2pDataDataHelper_SHOULD_SYNC, &NetI2pDataDataHelper__propertiesKeyCache, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &NetI2pDataDataHelper_ILLEGAL_KEY, &NetI2pDataDataHelper_ILLEGAL_VALUE, &NetI2pDataDataHelper_EMPTY_BUFFER, &NetI2pDataDataHelper_BUNDLE_NAME, &NetI2pDataDataHelper_escapeChars, &NetI2pDataDataHelper_escapeCodes, &NetI2pDataDataHelper_patterns, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/util/regex/Pattern;>;" };
  static const J2ObjcClassInfo _NetI2pDataDataHelper = { "DataHelper", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 88, 14, -1, -1, -1, -1, -1 };
  return &_NetI2pDataDataHelper;
}

+ (void)initialize {
  if (self == [NetI2pDataDataHelper class]) {
    NetI2pDataDataHelper_SHOULD_SYNC = !(NetI2pUtilSystemVersion_isAndroid() || NetI2pUtilSystemVersion_isARM());
    {
      IOSObjectArray *keys = [IOSObjectArray arrayWithObjects:(id[]){ @"cost", @"host", @"port", @"key", @"mtu", @"ihost0", @"iport0", @"ikey0", @"itag0", @"iexp0", @"ihost1", @"iport1", @"ikey1", @"itag1", @"iexp1", @"ihost2", @"iport2", @"ikey2", @"itag2", @"iexp2", @"caps", @"coreVersion", @"netId", @"router.version", @"netdb.knownLeaseSets", @"netdb.knownRouters", @"stat_bandwidthReceiveBps.60m", @"stat_bandwidthSendBps.60m", @"stat_tunnel.buildClientExpire.60m", @"stat_tunnel.buildClientReject.60m", @"stat_tunnel.buildClientSuccess.60m", @"stat_tunnel.buildExploratoryExpire.60m", @"stat_tunnel.buildExploratoryReject.60m", @"stat_tunnel.buildExploratorySuccess.60m", @"stat_tunnel.participatingTunnels.60m", @"stat_uptime", @"family", @"family.key", @"family.sig", @"version", @"created", @"upgraded", @"lists", @"a", @"m", @"s", @"v", @"notes", @"i" } count:49 type:NSString_class_()];
      JreStrongAssignAndConsume(&NetI2pDataDataHelper__propertiesKeyCache, new_JavaUtilHashMap_initWithInt_(keys->size_));
      for (jint i = 0; i < keys->size_; i++) {
        [NetI2pDataDataHelper__propertiesKeyCache putWithId:IOSObjectArray_Get(keys, i) withId:IOSObjectArray_Get(keys, i)];
      }
    }
    JreStrongAssign(&NetI2pDataDataHelper_ILLEGAL_KEY, JavaUtilRegexPattern_compileWithNSString_(@"[#=\x0d\n;]"));
    JreStrongAssign(&NetI2pDataDataHelper_ILLEGAL_VALUE, JavaUtilRegexPattern_compileWithNSString_(@"[#\x0d\n]"));
    JreStrongAssignAndConsume(&NetI2pDataDataHelper_EMPTY_BUFFER, [IOSByteArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&NetI2pDataDataHelper_escapeChars, [IOSObjectArray newArrayWithObjects:(id[]){ @"&", @"\"", @"<", @">", @"'" } count:5 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pDataDataHelper_escapeCodes, [IOSObjectArray newArrayWithObjects:(id[]){ @"&amp;", @"&quot;", @"&lt;", @"&gt;", @"&apos;" } count:5 type:NSString_class_()]);
    JreStrongAssignAndConsume(&NetI2pDataDataHelper_patterns, new_JavaUtilConcurrentConcurrentHashMap_init());
    J2OBJC_SET_INITIALIZED(NetI2pDataDataHelper)
  }
}

@end

void NetI2pDataDataHelper_init(NetI2pDataDataHelper *self) {
  NSObject_init(self);
}

NetI2pDataDataHelper *new_NetI2pDataDataHelper_init() {
  J2OBJC_NEW_IMPL(NetI2pDataDataHelper, init)
}

NetI2pDataDataHelper *create_NetI2pDataDataHelper_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataDataHelper, init)
}

JavaUtilProperties *NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_(JavaIoInputStream *rawStream) {
  NetI2pDataDataHelper_initialize();
  JavaUtilProperties *props = create_NetI2pUtilOrderedProperties_init();
  NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_withJavaUtilProperties_(rawStream, props);
  return props;
}

JavaUtilProperties *NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_withJavaUtilProperties_(JavaIoInputStream *rawStream, JavaUtilProperties *props) {
  NetI2pDataDataHelper_initialize();
  jlong size = NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(rawStream, 2);
  IOSByteArray *data = [IOSByteArray arrayWithLength:(jint) size];
  jint read = NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(rawStream, data);
  if (read != size) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$J$I", @"Not enough data to read the properties, expected ", size, @" but got ", read));
  JavaIoByteArrayInputStream *in = create_JavaIoByteArrayInputStream_initWithByteArray_(data);
  while ([in available] > 0) {
    NSString *key = NetI2pDataDataHelper_readStringWithJavaIoInputStream_(in);
    NSString *cached = [((id<JavaUtilMap>) nil_chk(NetI2pDataDataHelper__propertiesKeyCache)) getWithId:key];
    if (cached != nil) key = cached;
    jint b = [in read];
    if (b != '=') @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad key");
    NSString *val = NetI2pDataDataHelper_readStringWithJavaIoInputStream_(in);
    b = [in read];
    if (b != ';') @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad value");
    id old = [((JavaUtilProperties *) nil_chk(props)) putWithId:key withId:val];
    if (old != nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$$", @"Duplicate key ", key));
  }
  return props;
}

void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_(JavaIoOutputStream *rawStream, JavaUtilProperties *props) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_(rawStream, props, false);
}

void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_(JavaIoOutputStream *rawStream, JavaUtilProperties *props, jboolean utf8) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_withBoolean_(rawStream, props, utf8, props != nil && !([props isKindOfClass:[NetI2pUtilOrderedProperties class]]));
}

void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_withBoolean_(JavaIoOutputStream *rawStream, JavaUtilProperties *props, jboolean utf8, jboolean sort) {
  NetI2pDataDataHelper_initialize();
  if (props != nil && ![props isEmpty]) {
    JavaUtilProperties *p;
    if (sort) {
      p = create_NetI2pUtilOrderedProperties_init();
      [p putAllWithJavaUtilMap:props];
    }
    else {
      p = props;
    }
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_([p size] * 64);
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([p entrySet])) {
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
      NSString *val = (NSString *) cast_chk([entry_ getValue], [NSString class]);
      if (utf8) NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(baos, key);
      else NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(baos, key);
      [baos writeWithInt:'='];
      if (utf8) NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(baos, val);
      else NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(baos, val);
      [baos writeWithInt:';'];
    }
    if ([baos size] > 65535) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"Properties too big (65535 max): ", [baos size]));
    IOSByteArray *propBytes = [baos toByteArray];
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(rawStream, 2, ((IOSByteArray *) nil_chk(propBytes))->size_);
    [((JavaIoOutputStream *) nil_chk(rawStream)) writeWithByteArray:propBytes];
  }
  else {
    NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(rawStream, 2, 0);
  }
}

jint NetI2pDataDataHelper_toPropertiesWithByteArray_withInt_withJavaUtilProperties_(IOSByteArray *target, jint offset, JavaUtilProperties *props) {
  NetI2pDataDataHelper_initialize();
  if (props != nil) {
    NetI2pUtilOrderedProperties *p = create_NetI2pUtilOrderedProperties_init();
    [p putAllWithJavaUtilMap:props];
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_([p size] * 64);
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([p entrySet])) {
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
      NSString *val = (NSString *) cast_chk([entry_ getValue], [NSString class]);
      NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(baos, key);
      [baos writeWithInt:'='];
      NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(baos, val);
      [baos writeWithInt:';'];
    }
    if ([baos size] > 65535) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"Properties too big (65535 max): ", [baos size]));
    IOSByteArray *propBytes = [baos toByteArray];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(target, offset, 2, ((IOSByteArray *) nil_chk(propBytes))->size_);
    offset += 2;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(propBytes, 0, target, offset, propBytes->size_);
    offset += propBytes->size_;
    return offset;
  }
  else {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(target, offset, 2, 0);
    return offset + 2;
  }
}

jint NetI2pDataDataHelper_fromPropertiesWithByteArray_withInt_withJavaUtilProperties_(IOSByteArray *source, jint offset, JavaUtilProperties *target) {
  NetI2pDataDataHelper_initialize();
  jint size = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(source, offset, 2);
  offset += 2;
  JavaIoByteArrayInputStream *in = create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(source, offset, size);
  while ([in available] > 0) {
    NSString *key;
    @try {
      key = NetI2pDataDataHelper_readStringWithJavaIoInputStream_(in);
      NSString *cached = [((id<JavaUtilMap>) nil_chk(NetI2pDataDataHelper__propertiesKeyCache)) getWithId:key];
      if (cached != nil) key = cached;
      jint b = [in read];
      if (b != '=') @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad key");
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"Bad key", ioe);
    }
    NSString *val;
    @try {
      val = NetI2pDataDataHelper_readStringWithJavaIoInputStream_(in);
      jint b = [in read];
      if (b != ';') @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad value");
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"Bad value", ioe);
    }
    id old = [((JavaUtilProperties *) nil_chk(target)) putWithId:key withId:val];
    if (old != nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$$", @"Duplicate key ", key));
  }
  return offset + size;
}

IOSByteArray *NetI2pDataDataHelper_toPropertiesWithJavaUtilProperties_(JavaUtilProperties *opts) {
  NetI2pDataDataHelper_initialize();
  @try {
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(2 + (32 * [((JavaUtilProperties *) nil_chk(opts)) size]));
    NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_withBoolean_(baos, opts, true, false);
    return [baos toByteArray];
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"IO error writing to memory?! ", [ioe getMessage]));
  }
}

NSString *NetI2pDataDataHelper_toStringWithJavaUtilProperties_(JavaUtilProperties *options) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_toStringWithJavaUtilMap_(options);
}

NSString *NetI2pDataDataHelper_toStringWithJavaUtilMap_(id<JavaUtilMap> options) {
  NetI2pDataDataHelper_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  if (options != nil) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([options entrySet])) {
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
      NSString *val = (NSString *) cast_chk([entry_ getValue], [NSString class]);
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"["])) appendWithNSString:key])) appendWithNSString:@"] = ["])) appendWithNSString:val])) appendWithNSString:@"]"];
    }
  }
  else {
    [buf appendWithNSString:@"(null properties map)"];
  }
  return [buf description];
}

void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(JavaUtilProperties *props, JavaIoFile *file) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_withBoolean_(props, file, false);
}

void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_withBoolean_(JavaUtilProperties *props, JavaIoFile *file, jboolean forceLowerCase) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_withBoolean_(props, create_JavaIoFileInputStream_initWithJavaIoFile_(file), forceLowerCase);
}

void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_(JavaUtilProperties *props, JavaIoInputStream *inStr) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_withBoolean_(props, inStr, false);
}

void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_withBoolean_(JavaUtilProperties *props, JavaIoInputStream *inStr, jboolean forceLowerCase) {
  NetI2pDataDataHelper_initialize();
  JavaIoBufferedReader *in = nil;
  @try {
    in = create_JavaIoBufferedReader_initWithJavaIoReader_withInt_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(inStr, @"UTF-8"), 16 * 1024);
    NSString *line = nil;
    while ((line = [in readLine]) != nil) {
      if ([((NSString *) nil_chk([((NSString *) nil_chk(line)) java_trim])) java_length] <= 0) continue;
      if ([line charAtWithInt:0] == '#') continue;
      if ([line charAtWithInt:0] == ';') continue;
      if ([line java_indexOf:'#'] > 0) line = [((NSString *) nil_chk([line java_substring:0 endIndex:[line java_indexOf:'#']])) java_trim];
      jint split = [((NSString *) nil_chk(line)) java_indexOf:'='];
      if (split <= 0) continue;
      NSString *key = [line java_substring:0 endIndex:split];
      NSString *val = [((NSString *) nil_chk([line java_substring:split + 1])) java_trim];
      if (forceLowerCase) [((JavaUtilProperties *) nil_chk(props)) setPropertyWithNSString:[((NSString *) nil_chk(key)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)] withNSString:val];
      else [((JavaUtilProperties *) nil_chk(props)) setPropertyWithNSString:key withNSString:val];
    }
  }
  @finally {
    if (in != nil) @try {
      [in close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

void NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(JavaUtilProperties *props, JavaIoFile *file) {
  NetI2pDataDataHelper_initialize();
  JavaIoFileOutputStream *fos = nil;
  JavaIoPrintWriter *out = nil;
  JavaLangIllegalArgumentException *iae = nil;
  JavaIoFile *tmpFile = create_JavaIoFile_initWithNSString_(JreStrcat("$$", [((JavaIoFile *) nil_chk(file)) getPath], @".tmp"));
  @try {
    fos = create_NetI2pUtilSecureFileOutputStream_initWithJavaIoFile_(tmpFile);
    out = create_JavaIoPrintWriter_initWithJavaIoWriter_(create_JavaIoBufferedWriter_initWithJavaIoWriter_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(fos, @"UTF-8")));
    [out printlnWithNSString:@"# NOTE: This I2P config file must use UTF-8 encoding"];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilProperties *) nil_chk(props)) entrySet])) {
      NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
      NSString *val = (NSString *) cast_chk([entry_ getValue], [NSString class]);
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(NetI2pDataDataHelper_ILLEGAL_KEY)) matcherWithJavaLangCharSequence:name])) matches]) {
        if (iae == nil) iae = create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$C", @"Invalid character (one of \"#;=\\r\\n\") in key: \"", name, @"\" = \"", val, '"'));
        continue;
      }
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(NetI2pDataDataHelper_ILLEGAL_VALUE)) matcherWithJavaLangCharSequence:val])) matches]) {
        if (iae == nil) iae = create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$C", @"Invalid character (one of \"#\\r\\n\") in value: \"", name, @"\" = \"", val, '"'));
        continue;
      }
      [out printlnWithNSString:JreStrcat("$C$", name, '=', val)];
    }
    if (NetI2pDataDataHelper_SHOULD_SYNC) {
      [out flush];
      [((JavaIoFileDescriptor *) nil_chk([fos getFD])) sync];
    }
    [out close];
    if ([out checkError]) {
      out = nil;
      [tmpFile delete__];
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Failed to write properties to ", tmpFile));
    }
    out = nil;
    if (!NetI2pUtilFileUtil_renameWithJavaIoFile_withJavaIoFile_(tmpFile, file)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$@$@", @"Failed rename from ", tmpFile, @" to ", file));
  }
  @finally {
    if (out != nil) [out close];
    if (fos != nil) @try {
      [fos close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
  if (iae != nil) @throw iae;
}

NSString *NetI2pDataDataHelper_toStringWithJavaUtilCollection_(id<JavaUtilCollection> col) {
  NetI2pDataDataHelper_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  if (col != nil) {
    for (id<JavaUtilIterator> iter = [col iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      id o = [iter next];
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"["])) appendWithId:o])) appendWithNSString:@"]"];
      if ([iter hasNext]) [buf appendWithNSString:@", "];
    }
  }
  else {
    [buf appendWithNSString:@"null"];
  }
  return [buf description];
}

NSString *NetI2pDataDataHelper_toStringWithByteArray_(IOSByteArray *buf) {
  NetI2pDataDataHelper_initialize();
  if (buf == nil) return @"";
  return NetI2pDataDataHelper_toStringWithByteArray_withInt_(buf, buf->size_);
}

NSString *NetI2pDataDataHelper_toStringWithByteArray_withInt_(IOSByteArray *buf, jint len) {
  NetI2pDataDataHelper_initialize();
  if (buf == nil) buf = NetI2pDataDataHelper_EMPTY_BUFFER;
  JavaLangStringBuilder *out = create_JavaLangStringBuilder_init();
  if (len > ((IOSByteArray *) nil_chk(buf))->size_) {
    for (jint i = 0; i < len - buf->size_; i++) [out appendWithNSString:@"00"];
  }
  jint min = JavaLangMath_minWithInt_withInt_(buf->size_, len);
  for (jint i = 0; i < min; i++) {
    jint bi = IOSByteArray_Get(buf, i) & (jint) 0xff;
    if (bi < 16) [out appendWithChar:'0'];
    [out appendWithNSString:JavaLangInteger_toHexStringWithInt_(bi)];
  }
  return [out description];
}

NSString *NetI2pDataDataHelper_toDecimalStringWithByteArray_withInt_(IOSByteArray *buf, jint len) {
  NetI2pDataDataHelper_initialize();
  if (buf == nil) return @"0";
  JavaMathBigInteger *val = create_JavaMathBigInteger_initWithInt_withByteArray_(1, buf);
  return [val description];
}

NSString *NetI2pDataDataHelper_toHexStringWithByteArray_(IOSByteArray *data) {
  NetI2pDataDataHelper_initialize();
  if ((data == nil) || (((IOSByteArray *) nil_chk(data))->size_ <= 0)) return @"00";
  JavaMathBigInteger *bi = create_JavaMathBigInteger_initWithInt_withByteArray_(1, data);
  return [bi toStringWithInt:16];
}

IOSByteArray *NetI2pDataDataHelper_fromHexStringWithNSString_(NSString *val) {
  NetI2pDataDataHelper_initialize();
  JavaMathBigInteger *bv = create_JavaMathBigInteger_initWithNSString_withInt_(val, 16);
  return [bv toByteArray];
}

jlong NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(JavaIoInputStream *rawStream, jint numBytes) {
  NetI2pDataDataHelper_initialize();
  if (numBytes > 8) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"readLong doesn't currently support reading numbers > 8 bytes [as thats bigger than java's long]");
  jlong rv = 0;
  for (jint i = 0; i < numBytes; i++) {
    jint cur = [((JavaIoInputStream *) nil_chk(rawStream)) read];
    if (cur == -1) @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$I$", @"EOF reading ", numBytes, @" byte value"));
    if (cur != 0) {
      rv = cur & (jint) 0xff;
      for (jint j = i + 1; j < numBytes; j++) {
        JreLShiftAssignLong(&rv, 8);
        cur = [rawStream read];
        if (cur == -1) @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$I$", @"EOF reading ", numBytes, @" byte value"));
        rv |= cur & (jint) 0xff;
      }
      break;
    }
  }
  if (rv < 0) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$J$I", @"readLong got a negative? ", rv, @" numBytes=", numBytes));
  return rv;
}

void NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(JavaIoOutputStream *rawStream, jint numBytes, jlong value) {
  NetI2pDataDataHelper_initialize();
  if (numBytes <= 0 || numBytes > 8) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I", @"Bad byte count ", numBytes));
  if (value < 0) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$JC", @"Value is negative (", value, ')'));
  for (jint i = (numBytes - 1) * 8; i >= 0; i -= 8) {
    jbyte cur = (jbyte) (JreRShift64(value, i));
    [((JavaIoOutputStream *) nil_chk(rawStream)) writeWithInt:cur];
  }
}

IOSByteArray *NetI2pDataDataHelper_toLongWithInt_withLong_(jint numBytes, jlong value) {
  NetI2pDataDataHelper_initialize();
  IOSByteArray *val = [IOSByteArray arrayWithLength:numBytes];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(val, 0, numBytes, value);
  return val;
}

void NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(IOSByteArray *target, jint offset, jint numBytes, jlong value) {
  NetI2pDataDataHelper_initialize();
  if (numBytes <= 0 || numBytes > 8) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid number of bytes");
  if (value < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Negative value not allowed");
  for (jint i = offset + numBytes - 1; i >= offset; i--) {
    *IOSByteArray_GetRef(nil_chk(target), i) = (jbyte) value;
    JreRShiftAssignLong(&value, 8);
  }
}

void NetI2pDataDataHelper_toLongLEWithByteArray_withInt_withInt_withLong_(IOSByteArray *target, jint offset, jint numBytes, jlong value) {
  NetI2pDataDataHelper_initialize();
  if (numBytes <= 0 || numBytes > 8) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid number of bytes");
  if (value < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Negative value not allowed");
  jint limit = offset + numBytes;
  for (jint i = offset; i < limit; i++) {
    *IOSByteArray_GetRef(nil_chk(target), i) = (jbyte) value;
    JreRShiftAssignLong(&value, 8);
  }
}

jlong NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint numBytes) {
  NetI2pDataDataHelper_initialize();
  if (numBytes <= 0 || numBytes > 8) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid number of bytes");
  if ((src == nil) || (((IOSByteArray *) nil_chk(src))->size_ == 0)) return 0;
  jlong rv = 0;
  jint limit = offset + numBytes;
  for (jint i = offset; i < limit; i++) {
    JreLShiftAssignLong(&rv, 8);
    rv |= IOSByteArray_Get(nil_chk(src), i) & (jint) 0xFF;
  }
  if (rv < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$I$I", @"fromLong got a negative? ", rv, @": offset=", offset, @" numBytes=", numBytes));
  return rv;
}

jlong NetI2pDataDataHelper_fromLongLEWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint numBytes) {
  NetI2pDataDataHelper_initialize();
  if (numBytes <= 0 || numBytes > 8) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid number of bytes");
  jlong rv = 0;
  for (jint i = offset + numBytes - 1; i >= offset; i--) {
    JreLShiftAssignLong(&rv, 8);
    rv |= IOSByteArray_Get(nil_chk(src), i) & (jint) 0xFF;
  }
  if (rv < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$I$I", @"fromLong got a negative? ", rv, @": offset=", offset, @" numBytes=", numBytes));
  return rv;
}

JavaUtilDate *NetI2pDataDataHelper_readDateWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataDataHelper_initialize();
  jlong date = NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, NetI2pDataDataHelper_DATE_LENGTH);
  if (date == 0LL) return nil;
  return create_JavaUtilDate_initWithLong_(date);
}

void NetI2pDataDataHelper_writeDateWithJavaIoOutputStream_withJavaUtilDate_(JavaIoOutputStream *outArg, JavaUtilDate *date) {
  NetI2pDataDataHelper_initialize();
  if (date == nil) NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, NetI2pDataDataHelper_DATE_LENGTH, 0LL);
  else NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, NetI2pDataDataHelper_DATE_LENGTH, [date getTime]);
}

IOSByteArray *NetI2pDataDataHelper_toDateWithJavaUtilDate_(JavaUtilDate *date) {
  NetI2pDataDataHelper_initialize();
  if (date == nil) return NetI2pDataDataHelper_toLongWithInt_withLong_(NetI2pDataDataHelper_DATE_LENGTH, 0LL);
  else return NetI2pDataDataHelper_toLongWithInt_withLong_(NetI2pDataDataHelper_DATE_LENGTH, [date getTime]);
}

void NetI2pDataDataHelper_toDateWithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong when) {
  NetI2pDataDataHelper_initialize();
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(target, offset, NetI2pDataDataHelper_DATE_LENGTH, when);
}

JavaUtilDate *NetI2pDataDataHelper_fromDateWithByteArray_withInt_(IOSByteArray *src, jint offset) {
  NetI2pDataDataHelper_initialize();
  if ((src == nil) || (offset + NetI2pDataDataHelper_DATE_LENGTH > ((IOSByteArray *) nil_chk(src))->size_)) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Not enough data to read a date");
  @try {
    jlong when = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(src, offset, NetI2pDataDataHelper_DATE_LENGTH);
    if (when <= 0) return nil;
    else return create_JavaUtilDate_initWithLong_(when);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_NetI2pDataDataFormatException_initWithNSString_([iae getMessage]);
  }
}

NSString *NetI2pDataDataHelper_readStringWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataDataHelper_initialize();
  jint size = [((JavaIoInputStream *) nil_chk(inArg)) read];
  if (size == -1) @throw create_JavaIoEOFException_initWithNSString_(@"EOF reading string");
  if (size == 0) return @"";
  size &= (jint) 0xff;
  IOSByteArray *raw = [IOSByteArray arrayWithLength:size];
  jint read = NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(inArg, raw);
  if (read != size) @throw create_JavaIoEOFException_initWithNSString_(@"EOF reading string");
  return [NSString java_stringWithBytes:raw charsetName:@"UTF-8"];
}

void NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *string) {
  NetI2pDataDataHelper_initialize();
  if (string == nil) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) 0];
  }
  else {
    jint len = [string java_length];
    if (len > 255) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I$$C", @"The I2P data spec limits strings to 255 bytes or less, but this is ", len, @" [", string, ']'));
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) len];
    for (jint i = 0; i < len; i++) [outArg writeWithInt:(jbyte) ([string charAtWithInt:i] & (jint) 0xFF)];
  }
}

void NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *string) {
  NetI2pDataDataHelper_initialize();
  if (string == nil) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) 0];
  }
  else {
    IOSByteArray *raw = [string java_getBytesWithCharsetName:@"UTF-8"];
    jint len = ((IOSByteArray *) nil_chk(raw))->size_;
    if (len > 255) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I$$C", @"The I2P data spec limits strings to 255 bytes or less, but this is ", len, @" [", string, ']'));
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) len];
    [outArg writeWithByteArray:raw];
  }
}

jboolean NetI2pDataDataHelper_eqWithId_withId_(id lhs, id rhs) {
  NetI2pDataDataHelper_initialize();
  @try {
    jboolean eq = (((lhs == nil) && (rhs == nil)) || ((lhs != nil) && ([nil_chk(lhs) isEqual:rhs])));
    return eq;
  }
  @catch (JavaLangClassCastException *cce) {
    return false;
  }
}

jboolean NetI2pDataDataHelper_eqWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> lhs, id<JavaUtilCollection> rhs) {
  NetI2pDataDataHelper_initialize();
  if ((lhs == nil) && (rhs == nil)) return true;
  if ((lhs == nil) || (rhs == nil)) return false;
  if ([((id<JavaUtilCollection>) nil_chk(lhs)) size] != [((id<JavaUtilCollection>) nil_chk(rhs)) size]) return false;
  id<JavaUtilIterator> liter = [lhs iterator];
  id<JavaUtilIterator> riter = [rhs iterator];
  while (([((id<JavaUtilIterator>) nil_chk(liter)) hasNext]) && ([((id<JavaUtilIterator>) nil_chk(riter)) hasNext])) if (!(NetI2pDataDataHelper_eqWithId_withId_([liter next], [((id<JavaUtilIterator>) nil_chk(riter)) next]))) return false;
  return true;
}

jboolean NetI2pDataDataHelper_eqWithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs) {
  NetI2pDataDataHelper_initialize();
  return JavaUtilArrays_equalsWithByteArray_withByteArray_(lhs, rhs);
}

jboolean NetI2pDataDataHelper_eqWithInt_withInt_(jint lhs, jint rhs) {
  NetI2pDataDataHelper_initialize();
  return lhs == rhs;
}

jboolean NetI2pDataDataHelper_eqWithLong_withLong_(jlong lhs, jlong rhs) {
  NetI2pDataDataHelper_initialize();
  return lhs == rhs;
}

jboolean NetI2pDataDataHelper_eqWithByte_withByte_(jbyte lhs, jbyte rhs) {
  NetI2pDataDataHelper_initialize();
  return lhs == rhs;
}

jboolean NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint offsetLeft, IOSByteArray *rhs, jint offsetRight, jint length) {
  NetI2pDataDataHelper_initialize();
  if ((lhs == nil) || (rhs == nil)) return false;
  for (jint i = 0; i < length; i++) {
    if (IOSByteArray_Get(nil_chk(lhs), offsetLeft + i) != IOSByteArray_Get(nil_chk(rhs), offsetRight + i)) return false;
  }
  return true;
}

jboolean NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint offsetLeft, IOSByteArray *rhs, jint offsetRight, jint length) {
  NetI2pDataDataHelper_initialize();
  jint r = 0;
  for (jint i = 0; i < length; i++) {
    r |= IOSByteArray_Get(nil_chk(lhs), offsetLeft + i) ^ IOSByteArray_Get(nil_chk(rhs), offsetRight + i);
  }
  return r == 0;
}

jint NetI2pDataDataHelper_compareToWithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs) {
  NetI2pDataDataHelper_initialize();
  if ((rhs == nil) && (lhs == nil)) return 0;
  if (lhs == nil) return -1;
  if (rhs == nil) return 1;
  if (rhs->size_ < lhs->size_) return 1;
  if (rhs->size_ > lhs->size_) return -1;
  for (jint i = 0; i < rhs->size_; i++) {
    if ((IOSByteArray_Get(rhs, i) & (jint) 0xff) > (IOSByteArray_Get(lhs, i) & (jint) 0xff)) return -1;
    else if ((IOSByteArray_Get(rhs, i) & (jint) 0xff) < (IOSByteArray_Get(lhs, i) & (jint) 0xff)) return 1;
  }
  return 0;
}

IOSByteArray *NetI2pDataDataHelper_xor__WithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs) {
  NetI2pDataDataHelper_initialize();
  if ((lhs == nil) || (rhs == nil) || (((IOSByteArray *) nil_chk(lhs))->size_ != ((IOSByteArray *) nil_chk(rhs))->size_)) return nil;
  IOSByteArray *diff = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(lhs))->size_];
  NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(lhs, 0, rhs, 0, diff, 0, lhs->size_);
  return diff;
}

void NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint startLeft, IOSByteArray *rhs, jint startRight, IOSByteArray *outArg, jint startOut, jint len) {
  NetI2pDataDataHelper_initialize();
  if ((lhs == nil) || (rhs == nil) || (outArg == nil)) @throw create_JavaLangNullPointerException_initWithNSString_(@"Null params to xor");
  if (((IOSByteArray *) nil_chk(lhs))->size_ < startLeft + len) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Left hand side is too short");
  if (((IOSByteArray *) nil_chk(rhs))->size_ < startRight + len) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Right hand side is too short");
  if (((IOSByteArray *) nil_chk(outArg))->size_ < startOut + len) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Result is too short");
  for (jint i = 0; i < len; i++) *IOSByteArray_GetRef(outArg, startOut + i) = (jbyte) (IOSByteArray_Get(lhs, startLeft + i) ^ IOSByteArray_Get(rhs, startRight + i));
}

jint NetI2pDataDataHelper_hashCodeWithId_(id obj) {
  NetI2pDataDataHelper_initialize();
  if (obj == nil) return 0;
  return ((jint) [obj hash]);
}

jint NetI2pDataDataHelper_hashCodeWithJavaUtilDate_(JavaUtilDate *obj) {
  NetI2pDataDataHelper_initialize();
  if (obj == nil) return 0;
  return (jint) [obj getTime];
}

jint NetI2pDataDataHelper_hashCodeWithByteArray_(IOSByteArray *b) {
  NetI2pDataDataHelper_initialize();
  jint rv = 0;
  if (b != nil) {
    if (b->size_ <= 32) {
      rv = JavaUtilArrays_hashCodeWithByteArray_(b);
    }
    else {
      for (jint i = 0; i < 32; i++) rv ^= (JreLShift32(IOSByteArray_Get(b, i), i));
    }
  }
  return rv;
}

jint NetI2pDataDataHelper_hashCodeWithJavaUtilCollection_(id<JavaUtilCollection> col) {
  NetI2pDataDataHelper_initialize();
  if (col == nil) return 0;
  jint c = 0;
  for (id<JavaUtilIterator> iter = [col iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) c = 7 * c + NetI2pDataDataHelper_hashCodeWithId_([iter next]);
  return c;
}

void NetI2pDataDataHelper_skipWithJavaIoInputStream_withLong_(JavaIoInputStream *inArg, jlong n) {
  NetI2pDataDataHelper_initialize();
  if (n < 0) @throw create_JavaLangIllegalArgumentException_init();
  if (n == 0) return;
  jlong read = 0;
  jlong nm1 = n - 1;
  if (nm1 > 0) {
    do {
      jlong c = [((JavaIoInputStream *) nil_chk(inArg)) skipWithLong:nm1 - read];
      if (c < 0) @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$J$J", @"EOF while skipping ", n, @", read only ", read));
      if (c == 0) {
        if ([inArg read] == -1) @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$J$J", @"EOF while skipping ", n, @", read only ", read));
        read++;
      }
      else {
        read += c;
      }
    }
    while (read < nm1);
  }
  if ([((JavaIoInputStream *) nil_chk(inArg)) read] == -1) @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$J$J", @"EOF while skipping ", n, @", read only ", read));
}

jint NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inArg, IOSByteArray *target) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_withInt_withInt_(inArg, target, 0, ((IOSByteArray *) nil_chk(target))->size_);
}

jint NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inArg, IOSByteArray *target, jint offset, jint length) {
  NetI2pDataDataHelper_initialize();
  jint cur = 0;
  while (cur < length) {
    jint numRead = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:target withInt:offset + cur withInt:length - cur];
    if (numRead == -1) {
      @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I$", @"EOF after reading ", cur, @" bytes of ", length, @" byte value"));
    }
    cur += numRead;
  }
  return offset + cur;
}

NSString *NetI2pDataDataHelper_readLineWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaSecurityMessageDigest_(inArg, nil);
}

NSString *NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaSecurityMessageDigest_(JavaIoInputStream *inArg, JavaSecurityMessageDigest *hash_) {
  NetI2pDataDataHelper_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  jboolean ok = NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_withJavaSecurityMessageDigest_(inArg, buf, hash_);
  if (ok) return [buf description];
  else return nil;
}

jboolean NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_(JavaIoInputStream *inArg, JavaLangStringBuilder *buf) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_withJavaSecurityMessageDigest_(inArg, buf, nil);
}

jboolean NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_withJavaSecurityMessageDigest_(JavaIoInputStream *inArg, JavaLangStringBuilder *buf, JavaSecurityMessageDigest *hash_) {
  NetI2pDataDataHelper_initialize();
  jint c = -1;
  jint i = 0;
  while ((c = [((JavaIoInputStream *) nil_chk(inArg)) read]) != -1) {
    if (++i > NetI2pDataDataHelper_MAX_LINE_LENGTH) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Line too long - max ", NetI2pDataDataHelper_MAX_LINE_LENGTH));
    if (hash_ != nil) [hash_ updateWithByte:(jbyte) c];
    if (c == 0x000a) break;
    [((JavaLangStringBuilder *) nil_chk(buf)) appendWithChar:(jchar) c];
  }
  return c != -1 || i > 0;
}

void NetI2pDataDataHelper_writeWithJavaIoOutputStream_withByteArray_withJavaSecurityMessageDigest_(JavaIoOutputStream *outArg, IOSByteArray *data, JavaSecurityMessageDigest *hash_) {
  NetI2pDataDataHelper_initialize();
  [((JavaSecurityMessageDigest *) nil_chk(hash_)) updateWithByteArray:data];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:data];
}

NSString *NetI2pDataDataHelper_formatDurationWithLong_(jlong ms) {
  NetI2pDataDataHelper_initialize();
  if (ms < 5 * 1000) {
    return JreStrcat("J$", ms, @"ms");
  }
  else if (ms < 3 * 60 * 1000) {
    return JreStrcat("JC", (ms / 1000), 's');
  }
  else if (ms < 120 * 60 * 1000) {
    return JreStrcat("JC", (ms / (60 * 1000)), 'm');
  }
  else if (ms < 3 * 24 * 60 * 60 * 1000) {
    return JreStrcat("JC", (ms / (60 * 60 * 1000)), 'h');
  }
  else if (ms < 3LL * 365 * 24 * 60 * 60 * 1000) {
    return JreStrcat("JC", (ms / (24 * 60 * 60 * 1000)), 'd');
  }
  else if (ms < 1000LL * 365 * 24 * 60 * 60 * 1000) {
    return JreStrcat("JC", (ms / (365LL * 24 * 60 * 60 * 1000)), 'y');
  }
  else {
    return @"n/a";
  }
}

NSString *NetI2pDataDataHelper_formatDuration2WithLong_(jlong ms) {
  NetI2pDataDataHelper_initialize();
  if (ms == 0) return @"0";
  NSString *t;
  jlong ams = ms >= 0 ? ms : 0 - ms;
  if (ams < 3 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 ms", @"{0,number,####} ms", (jint) ms);
  }
  else if (ams < 2 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 sec", @"{0} sec", (jint) (ms / 1000));
  }
  else if (ams < 120 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 min", @"{0} min", (jint) (ms / (60 * 1000)));
  }
  else if (ams < 2 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 hour", @"{0} hours", (jint) (ms / (60 * 60 * 1000)));
  }
  else if (ams < 3LL * 365 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 day", @"{0} days", (jint) (ms / (24 * 60 * 60 * 1000)));
  }
  else if (ams < 1000LL * 365 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 year", @"{0} years", (jint) (ms / (365LL * 24 * 60 * 60 * 1000)));
  }
  else {
    return NetI2pDataDataHelper__tWithNSString_(@"n/a");
  }
  if (ms < 0) t = [((NSString *) nil_chk(t)) java_replace:@"-" withSequence:@"&minus;"];
  return [((NSString *) nil_chk(t)) java_replace:@" " withSequence:@"&nbsp;"];
}

NSString *NetI2pDataDataHelper_formatDuration2WithDouble_(jdouble ms) {
  NetI2pDataDataHelper_initialize();
  if (ms == 0.0) return @"0";
  NSString *t;
  jdouble adms = ms >= 0 ? ms : 0 - ms;
  jlong lms = JreFpToLong(ms);
  jlong ams = lms >= 0 ? lms : 0 - lms;
  if (adms < 0.000000001) {
    return @"0";
  }
  else if (adms < 0.001) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 ns", @"{0,number,###} ns", (jint) JavaLangMath_roundWithDouble_(ms * 1000000.0));
  }
  else if (adms < 1.0) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 \u03bcs", @"{0,number,###} \u03bcs", (jint) JavaLangMath_roundWithDouble_(ms * 1000.0));
  }
  else if (ams < 3 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 ms", @"{0,number,####} ms", (jint) JavaLangMath_roundWithDouble_(ms));
  }
  else if (ams < 2 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 sec", @"{0} sec", JreFpToInt((ms / 1000)));
  }
  else if (ams < 120 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 min", @"{0} min", JreFpToInt((ms / (60 * 1000))));
  }
  else if (ams < 2 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 hour", @"{0} hours", JreFpToInt((ms / (60 * 60 * 1000))));
  }
  else if (ams < 3LL * 365 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 day", @"{0} days", JreFpToInt((ms / (24 * 60 * 60 * 1000))));
  }
  else if (ams < 1000LL * 365 * 24 * 60 * 60 * 1000) {
    t = NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(@"1 year", @"{0} years", JreFpToInt((ms / (365LL * 24 * 60 * 60 * 1000))));
  }
  else {
    return NetI2pDataDataHelper__tWithNSString_(@"n/a");
  }
  if (ms < 0) t = [((NSString *) nil_chk(t)) java_replace:@"-" withSequence:@"&minus;"];
  return [((NSString *) nil_chk(t)) java_replace:@" " withSequence:@"&nbsp;"];
}

NSString *NetI2pDataDataHelper__tWithNSString_(NSString *key) {
  NetI2pDataDataHelper_initialize();
  return NetI2pUtilTranslate_getStringWithNSString_withNetI2pI2PAppContext_withNSString_(key, NetI2pI2PAppContext_getGlobalContext(), NetI2pDataDataHelper_BUNDLE_NAME);
}

NSString *NetI2pDataDataHelper_ngettextWithNSString_withNSString_withInt_(NSString *s, NSString *p, jint n) {
  NetI2pDataDataHelper_initialize();
  return NetI2pUtilTranslate_getStringWithInt_withNSString_withNSString_withNetI2pI2PAppContext_withNSString_(n, s, p, NetI2pI2PAppContext_getGlobalContext(), NetI2pDataDataHelper_BUNDLE_NAME);
}

NSString *NetI2pDataDataHelper_formatSizeWithLong_(jlong bytes) {
  NetI2pDataDataHelper_initialize();
  jfloat val = bytes;
  jint scale_ = 0;
  while (val >= 1024.0f) {
    scale_++;
    JreDivideAssignFloatF(&val, 1024.0f);
  }
  JavaTextDecimalFormat *fmt = create_JavaTextDecimalFormat_initWithNSString_(@"##0.00");
  NSString *str = [fmt formatWithDouble:val];
  switch (scale_) {
    case 1:
    return JreStrcat("$$", str, @"Ki");
    case 2:
    return JreStrcat("$$", str, @"Mi");
    case 3:
    return JreStrcat("$$", str, @"Gi");
    case 4:
    return JreStrcat("$$", str, @"Ti");
    case 5:
    return JreStrcat("$$", str, @"Pi");
    case 6:
    return JreStrcat("$$", str, @"Ei");
    case 7:
    return JreStrcat("$$", str, @"Zi");
    case 8:
    return JreStrcat("$$", str, @"Yi");
    default:
    return JavaLangLong_toStringWithLong_(bytes);
  }
}

NSString *NetI2pDataDataHelper_formatSize2WithLong_(jlong bytes) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_formatSize2WithLong_withBoolean_(bytes, true);
}

NSString *NetI2pDataDataHelper_formatSize2WithLong_withBoolean_(jlong bytes, jboolean nonBreaking) {
  NetI2pDataDataHelper_initialize();
  NSString *space = nonBreaking ? @"&#8239;" : @" ";
  if (bytes < 1024) return JreStrcat("J$", bytes, space);
  jdouble val = bytes;
  jint scale_ = 0;
  while (val >= 1024) {
    scale_++;
    JreDivideAssignDoubleD(&val, 1024);
  }
  JavaTextDecimalFormat *fmt = create_JavaTextDecimalFormat_initWithNSString_(@"##0.##");
  if (val >= 200) {
    [fmt setMaximumFractionDigitsWithInt:0];
  }
  else if (val >= 20) {
    [fmt setMaximumFractionDigitsWithInt:1];
  }
  NSString *str = JreStrcat("$$", [fmt formatWithDouble:val], space);
  switch (scale_) {
    case 1:
    return JreStrcat("$$", str, @"Ki");
    case 2:
    return JreStrcat("$$", str, @"Mi");
    case 3:
    return JreStrcat("$$", str, @"Gi");
    case 4:
    return JreStrcat("$$", str, @"Ti");
    case 5:
    return JreStrcat("$$", str, @"Pi");
    case 6:
    return JreStrcat("$$", str, @"Ei");
    case 7:
    return JreStrcat("$$", str, @"Zi");
    case 8:
    return JreStrcat("$$", str, @"Yi");
    default:
    return JreStrcat("J$", bytes, space);
  }
}

NSString *NetI2pDataDataHelper_formatSize2DecimalWithLong_(jlong bytes) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_formatSize2DecimalWithLong_withBoolean_(bytes, true);
}

NSString *NetI2pDataDataHelper_formatSize2DecimalWithLong_withBoolean_(jlong bytes, jboolean nonBreaking) {
  NetI2pDataDataHelper_initialize();
  NSString *space = nonBreaking ? @"&#8239;" : @" ";
  if (bytes < 1000) return JreStrcat("J$", bytes, space);
  jdouble val = bytes;
  jint scale_ = 0;
  while (val >= 1000) {
    scale_++;
    JreDivideAssignDoubleD(&val, 1000);
  }
  JavaTextDecimalFormat *fmt = create_JavaTextDecimalFormat_initWithNSString_(@"##0.##");
  if (val >= 200) {
    [fmt setMaximumFractionDigitsWithInt:0];
  }
  else if (val >= 20) {
    [fmt setMaximumFractionDigitsWithInt:1];
  }
  NSString *str = JreStrcat("$$", [fmt formatWithDouble:val], space);
  switch (scale_) {
    case 1:
    return JreStrcat("$C", str, 'K');
    case 2:
    return JreStrcat("$C", str, 'M');
    case 3:
    return JreStrcat("$C", str, 'G');
    case 4:
    return JreStrcat("$C", str, 'T');
    case 5:
    return JreStrcat("$C", str, 'P');
    case 6:
    return JreStrcat("$C", str, 'E');
    case 7:
    return JreStrcat("$C", str, 'Z');
    case 8:
    return JreStrcat("$C", str, 'Y');
    default:
    return JreStrcat("J$", bytes, space);
  }
}

NSString *NetI2pDataDataHelper_stripHTMLWithNSString_(NSString *orig) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return @"";
  NSString *t1 = [orig java_replace:'<' withChar:' '];
  NSString *rv = [((NSString *) nil_chk(t1)) java_replace:'>' withChar:' '];
  rv = [((NSString *) nil_chk(rv)) java_replace:'"' withChar:' '];
  rv = [((NSString *) nil_chk(rv)) java_replace:'\'' withChar:' '];
  return rv;
}

NSString *NetI2pDataDataHelper_escapeHTMLWithNSString_(NSString *unescaped) {
  NetI2pDataDataHelper_initialize();
  if (unescaped == nil) return nil;
  NSString *escaped = unescaped;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(NetI2pDataDataHelper_escapeChars))->size_; i++) {
    escaped = [((NSString *) nil_chk(escaped)) java_replace:IOSObjectArray_Get(NetI2pDataDataHelper_escapeChars, i) withSequence:IOSObjectArray_Get(nil_chk(NetI2pDataDataHelper_escapeCodes), i)];
  }
  return escaped;
}

IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_(IOSByteArray *orig) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(orig, 0, ((IOSByteArray *) nil_chk(orig))->size_);
}

IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint size) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(orig, offset, size, NetI2pDataDataHelper_MAX_COMPRESSION);
}

IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(IOSByteArray *orig, jint offset, jint size, jint level) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return orig;
  if (size > NetI2pDataDataHelper_MAX_UNCOMPRESSED) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"tell jrandom size=", size));
  NetI2pUtilReusableGZIPOutputStream *out = NetI2pUtilReusableGZIPOutputStream_acquire();
  [((NetI2pUtilReusableGZIPOutputStream *) nil_chk(out)) setLevelWithInt:level];
  @try {
    [out writeWithByteArray:orig withInt:offset withInt:size];
    [out finish];
    [out flush];
    IOSByteArray *rv = [out getData];
    if (((IOSByteArray *) nil_chk(rv))->size_ <= 18) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Compression failed, input size: ", size, @" output size: ", rv->size_));
    return rv;
  }
  @catch (JavaIoIOException *ioe) {
    [ioe printStackTrace];
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$I", @"Compression failed, input size: ", size), ioe);
  }
  @finally {
    NetI2pUtilReusableGZIPOutputStream_release__WithNetI2pUtilReusableGZIPOutputStream_(out);
  }
}

IOSByteArray *NetI2pDataDataHelper_decompressWithByteArray_(IOSByteArray *orig) {
  NetI2pDataDataHelper_initialize();
  return (orig != nil ? NetI2pDataDataHelper_decompressWithByteArray_withInt_withInt_(orig, 0, orig->size_) : nil);
}

IOSByteArray *NetI2pDataDataHelper_decompressWithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint length) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return orig;
  if (offset + length > orig->size_) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$I$I", @"Bad params arrlen ", orig->size_, @" off ", offset, @" len ", length));
  NetI2pUtilReusableGZIPInputStream *in = NetI2pUtilReusableGZIPInputStream_acquire();
  [((NetI2pUtilReusableGZIPInputStream *) nil_chk(in)) initialize__WithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(orig, offset, length)];
  NetI2pUtilByteCache *cache = NetI2pUtilByteCache_getInstanceWithInt_withInt_(8, NetI2pDataDataHelper_MAX_UNCOMPRESSED);
  NetI2pDataByteArray *outBuf = [((NetI2pUtilByteCache *) nil_chk(cache)) acquire];
  @try {
    jint written = 0;
    while (true) {
      jint read = [in readWithByteArray:[((NetI2pDataByteArray *) nil_chk(outBuf)) getData] withInt:written withInt:NetI2pDataDataHelper_MAX_UNCOMPRESSED - written];
      if (read == -1) break;
      written += read;
      if (written >= NetI2pDataDataHelper_MAX_UNCOMPRESSED) {
        if ([in available] > 0) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Uncompressed data larger than ", NetI2pDataDataHelper_MAX_UNCOMPRESSED));
        break;
      }
    }
    IOSByteArray *rv = [IOSByteArray arrayWithLength:written];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataByteArray *) nil_chk(outBuf)) getData], 0, rv, 0, written);
    return rv;
  }
  @finally {
    [cache release__WithId:outBuf];
    NetI2pUtilReusableGZIPInputStream_release__WithNetI2pUtilReusableGZIPInputStream_(in);
  }
}

IOSByteArray *NetI2pDataDataHelper_getUTF8WithNSString_(NSString *orig) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return nil;
  @try {
    return [orig java_getBytesWithCharsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"no utf8!?");
  }
}

IOSByteArray *NetI2pDataDataHelper_getUTF8WithJavaLangStringBuffer_(JavaLangStringBuffer *orig) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return nil;
  return NetI2pDataDataHelper_getUTF8WithNSString_([orig description]);
}

NSString *NetI2pDataDataHelper_getUTF8WithByteArray_(IOSByteArray *orig) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return nil;
  @try {
    return [NSString java_stringWithBytes:orig charsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"no utf8!?");
  }
}

NSString *NetI2pDataDataHelper_getUTF8WithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint len) {
  NetI2pDataDataHelper_initialize();
  if (orig == nil) return nil;
  @try {
    return [NSString java_stringWithBytes:orig offset:offset length:len charsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"no utf8!?");
  }
}

IOSByteArray *NetI2pDataDataHelper_getASCIIWithNSString_(NSString *orig) {
  NetI2pDataDataHelper_initialize();
  IOSByteArray *rv = [IOSByteArray arrayWithLength:[((NSString *) nil_chk(orig)) java_length]];
  for (jint i = 0; i < rv->size_; i++) {
    *IOSByteArray_GetRef(rv, i) = (jbyte) [orig charAtWithInt:i];
  }
  return rv;
}

IOSObjectArray *NetI2pDataDataHelper_splitWithNSString_withNSString_(NSString *s, NSString *regex) {
  NetI2pDataDataHelper_initialize();
  return NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(s, regex, 0);
}

IOSObjectArray *NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(NSString *s, NSString *regex, jint limit) {
  NetI2pDataDataHelper_initialize();
  JavaUtilRegexPattern *p = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetI2pDataDataHelper_patterns)) getWithId:regex];
  if (p == nil) {
    if ([((NSString *) nil_chk(regex)) java_length] > 1 && ![regex java_hasPrefix:@"["] && ![regex isEqual:@"\x0d\n"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Warning: Split on regex: \"", regex, @"\" should probably be enclosed with []")];
    }
    p = JavaUtilRegexPattern_compileWithNSString_(regex);
    [NetI2pDataDataHelper_patterns putIfAbsentWithId:regex withId:p];
  }
  return [((JavaUtilRegexPattern *) nil_chk(p)) splitWithJavaLangCharSequence:s withInt:limit];
}

void NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg) {
  NetI2pDataDataHelper_initialize();
  NetI2pUtilByteCache *cache = NetI2pUtilByteCache_getInstanceWithInt_withInt_(8, 8 * 1024);
  NetI2pDataByteArray *ba = [((NetI2pUtilByteCache *) nil_chk(cache)) acquire];
  @try {
    IOSByteArray *buf = [((NetI2pDataByteArray *) nil_chk(ba)) getData];
    jint read;
    while ((read = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buf]) != -1) {
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buf withInt:0 withInt:read];
    }
  }
  @finally {
    [cache release__WithId:ba];
  }
}

void NetI2pDataDataHelper_sortWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> list, id<JavaUtilComparator> c) {
  NetI2pDataDataHelper_initialize();
  @try {
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(list, c);
  }
  @catch (JavaLangIllegalArgumentException *iae1) {
    @try {
      JavaLangThread_sleepWithLong_(5);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @try {
      JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(list, c);
    }
    @catch (JavaLangIllegalArgumentException *iae2) {
    }
  }
}

void NetI2pDataDataHelper_sortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> c) {
  NetI2pDataDataHelper_initialize();
  @try {
    JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(a, c);
  }
  @catch (JavaLangIllegalArgumentException *iae1) {
    @try {
      JavaLangThread_sleepWithLong_(5);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
    @try {
      JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(a, c);
    }
    @catch (JavaLangIllegalArgumentException *iae2) {
    }
  }
}

void NetI2pDataDataHelper_replaceWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *buf, NSString *from, NSString *to) {
  NetI2pDataDataHelper_initialize();
  jint oidx = 0;
  while (oidx < [((JavaLangStringBuilder *) nil_chk(buf)) java_length]) {
    jint idx = [buf indexOfWithNSString:from withInt:oidx];
    if (idx < 0) break;
    [buf replaceWithInt:idx withInt:idx + [((NSString *) nil_chk(from)) java_length] withNSString:to];
    oidx = idx + [((NSString *) nil_chk(to)) java_length];
  }
}

IOSObjectArray *NetI2pDataDataHelper__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataDataHelper__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataDataHelper__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataDataHelper__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataDataHelper__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataDataHelper)
