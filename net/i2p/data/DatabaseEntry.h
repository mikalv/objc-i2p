//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/DatabaseEntry.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataDatabaseEntry")
#ifdef RESTRICT_NetI2pDataDatabaseEntry
#define INCLUDE_ALL_NetI2pDataDatabaseEntry 0
#else
#define INCLUDE_ALL_NetI2pDataDatabaseEntry 1
#endif
#undef RESTRICT_NetI2pDataDatabaseEntry

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataDatabaseEntry_) && (INCLUDE_ALL_NetI2pDataDatabaseEntry || defined(INCLUDE_NetI2pDataDatabaseEntry))
#define NetI2pDataDatabaseEntry_

#define RESTRICT_NetI2pDataDataStructureImpl 1
#define INCLUDE_NetI2pDataDataStructureImpl 1
#include "net/i2p/data/DataStructureImpl.h"

@class IOSByteArray;
@class NetI2pDataHash;
@class NetI2pDataKeysAndCert;
@class NetI2pDataSignature;
@class NetI2pDataSigningPrivateKey;
@class NetI2pDataSigningPublicKey;

@interface NetI2pDataDatabaseEntry : NetI2pDataDataStructureImpl {
 @public
  volatile_id _signature_;
  volatile_id _currentRoutingKey_;
  volatile_jlong _routingKeyGenMod_;
}
@property (readonly, class) jint KEY_TYPE_ROUTERINFO NS_SWIFT_NAME(KEY_TYPE_ROUTERINFO);
@property (readonly, class) jint KEY_TYPE_LEASESET NS_SWIFT_NAME(KEY_TYPE_LEASESET);

+ (jint)KEY_TYPE_ROUTERINFO;

+ (jint)KEY_TYPE_LEASESET;

#pragma mark Public

- (instancetype __nonnull)init;

- (jlong)getDate;

- (NetI2pDataHash *)getHash;

- (NetI2pDataKeysAndCert *)getKeysAndCert;

- (NetI2pDataHash *)getRoutingKey;

- (NetI2pDataSignature *)getSignature;

- (jint)getType;

- (void)setSignatureWithNetI2pDataSignature:(NetI2pDataSignature *)signature;

- (void)signWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)key;

- (jboolean)validateRoutingKey;

#pragma mark Protected

- (IOSByteArray *)getBytes;

- (NetI2pDataSigningPublicKey *)getSigningPublicKey;

- (jboolean)verifySignature;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataDatabaseEntry)

J2OBJC_VOLATILE_FIELD_SETTER(NetI2pDataDatabaseEntry, _signature_, NetI2pDataSignature *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pDataDatabaseEntry, _currentRoutingKey_, NetI2pDataHash *)

inline jint NetI2pDataDatabaseEntry_get_KEY_TYPE_ROUTERINFO(void);
#define NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDatabaseEntry, KEY_TYPE_ROUTERINFO, jint)

inline jint NetI2pDataDatabaseEntry_get_KEY_TYPE_LEASESET(void);
#define NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDatabaseEntry, KEY_TYPE_LEASESET, jint)

FOUNDATION_EXPORT void NetI2pDataDatabaseEntry_init(NetI2pDataDatabaseEntry *self);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataDatabaseEntry)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataDatabaseEntry")
