//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/SimpleDataStructure.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SimpleDataStructure.h"

@implementation NetI2pDataSimpleDataStructure

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataSimpleDataStructure_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pDataSimpleDataStructure_initWithByteArray_(self, data);
  return self;
}

- (jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getData {
  return _data_;
}

- (void)setDataWithByteArray:(IOSByteArray *)data {
  if (_data_ != nil) @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
  if (data != nil && data->size_ != [self length]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Bad data length: ", data->size_, @"; required: ", [self length]));
  JreStrongAssign(&_data_, data);
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (_data_ != nil) @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
  jint length = [self length];
  JreStrongAssignAndConsume(&_data_, [IOSByteArray newArrayWithLength:length]);
  [self readWithJavaIoInputStream:inArg withByteArray:_data_];
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (_data_ == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"No data to write out");
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:_data_];
}

- (NSString *)toBase64 {
  if (_data_ == nil) return nil;
  return NetI2pDataBase64_encodeWithByteArray_(_data_);
}

- (void)fromBase64WithNSString:(NSString *)data {
  if (data == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Null data passed in");
  IOSByteArray *d = NetI2pDataBase64_decodeWithNSString_(data);
  if (d == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad Base64 encoded data");
  if (d->size_ != [self length]) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I$I", @"Bad decoded data length, expected ", [self length], @" got ", d->size_));
  [self setDataWithByteArray:d];
}

- (NetI2pDataHash *)calculateHash {
  if (_data_ != nil) return [((NetI2pCryptoSHA256Generator *) nil_chk(NetI2pCryptoSHA256Generator_getInstance())) calculateHashWithByteArray:_data_];
  return nil;
}

- (IOSByteArray *)toByteArray {
  return _data_;
}

- (void)fromByteArrayWithByteArray:(IOSByteArray *)data {
  if (data == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Null data passed in");
  if (data->size_ != [self length]) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$I$I", @"Bad data length: ", data->size_, @"; required: ", [self length]));
  [self setDataWithByteArray:data];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithNSString:[[self java_getClass] getSimpleName]])) appendWithNSString:@": "];
  jint length = [self length];
  if (_data_ == nil) {
    [buf appendWithNSString:@"null"];
  }
  else if (length <= 32) {
    [buf appendWithNSString:[self toBase64]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"size: "])) appendWithNSString:JavaLangInteger_toStringWithInt_(length)];
  }
  [buf appendWithChar:']'];
  return [buf description];
}

- (NSUInteger)hash {
  if (_data_ == nil) return 0;
  jint rv = IOSByteArray_Get(_data_, 0);
  for (jint i = 1; i < 4; i++) rv ^= (JreLShift32(IOSByteArray_Get(_data_, i), (i * 8)));
  return rv;
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) return true;
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pDataSimpleDataStructure class]])) return false;
  return JavaUtilArrays_equalsWithByteArray_withByteArray_(_data_, ((NetI2pDataSimpleDataStructure *) nil_chk(((NetI2pDataSimpleDataStructure *) cast_chk(obj, [NetI2pDataSimpleDataStructure class]))))->_data_);
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(getData);
  methods[4].selector = @selector(setDataWithByteArray:);
  methods[5].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[6].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[7].selector = @selector(toBase64);
  methods[8].selector = @selector(fromBase64WithNSString:);
  methods[9].selector = @selector(calculateHash);
  methods[10].selector = @selector(toByteArray);
  methods[11].selector = @selector(fromByteArrayWithByteArray:);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_data_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "setData", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "fromBase64", "LNSString;", "LNetI2pDataDataFormatException;", "fromByteArray", "toString", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _NetI2pDataSimpleDataStructure = { "SimpleDataStructure", "net.i2p.data", ptrTable, methods, fields, 7, 0x401, 15, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pDataSimpleDataStructure;
}

@end

void NetI2pDataSimpleDataStructure_init(NetI2pDataSimpleDataStructure *self) {
  NetI2pDataDataStructureImpl_init(self);
}

void NetI2pDataSimpleDataStructure_initWithByteArray_(NetI2pDataSimpleDataStructure *self, IOSByteArray *data) {
  NetI2pDataDataStructureImpl_init(self);
  [self setDataWithByteArray:data];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataSimpleDataStructure)
