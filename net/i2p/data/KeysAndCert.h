//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/KeysAndCert.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataKeysAndCert")
#ifdef RESTRICT_NetI2pDataKeysAndCert
#define INCLUDE_ALL_NetI2pDataKeysAndCert 0
#else
#define INCLUDE_ALL_NetI2pDataKeysAndCert 1
#endif
#undef RESTRICT_NetI2pDataKeysAndCert

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataKeysAndCert_) && (INCLUDE_ALL_NetI2pDataKeysAndCert || defined(INCLUDE_NetI2pDataKeysAndCert))
#define NetI2pDataKeysAndCert_

#define RESTRICT_NetI2pDataDataStructureImpl 1
#define INCLUDE_NetI2pDataDataStructureImpl 1
#include "net/i2p/data/DataStructureImpl.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class NetI2pCryptoSigType;
@class NetI2pDataCertificate;
@class NetI2pDataHash;
@class NetI2pDataPublicKey;
@class NetI2pDataSigningPublicKey;

@interface NetI2pDataKeysAndCert : NetI2pDataDataStructureImpl {
 @public
  NetI2pDataPublicKey *_publicKey_;
  NetI2pDataSigningPublicKey *_signingKey_;
  NetI2pDataCertificate *_certificate_;
  IOSByteArray *_padding_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (NetI2pDataHash *)calculateHash;

- (jboolean)isEqual:(id)object;

- (NetI2pDataCertificate *)getCertificate;

- (NetI2pDataHash *)getHash;

- (IOSByteArray *)getPadding;

- (NetI2pDataPublicKey *)getPublicKey;

- (NetI2pDataSigningPublicKey *)getSigningPublicKey;

- (NetI2pCryptoSigType *)getSigType;

- (NSUInteger)hash;

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (void)setCertificateWithNetI2pDataCertificate:(NetI2pDataCertificate *)cert;

- (void)setPaddingWithByteArray:(IOSByteArray *)padding;

- (void)setPublicKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)key;

- (void)setSigningPublicKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)key;

- (NSString *)description;

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataKeysAndCert)

J2OBJC_FIELD_SETTER(NetI2pDataKeysAndCert, _publicKey_, NetI2pDataPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pDataKeysAndCert, _signingKey_, NetI2pDataSigningPublicKey *)
J2OBJC_FIELD_SETTER(NetI2pDataKeysAndCert, _certificate_, NetI2pDataCertificate *)
J2OBJC_FIELD_SETTER(NetI2pDataKeysAndCert, _padding_, IOSByteArray *)

FOUNDATION_EXPORT void NetI2pDataKeysAndCert_init(NetI2pDataKeysAndCert *self);

FOUNDATION_EXPORT NetI2pDataKeysAndCert *new_NetI2pDataKeysAndCert_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataKeysAndCert *create_NetI2pDataKeysAndCert_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataKeysAndCert)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataKeysAndCert")
