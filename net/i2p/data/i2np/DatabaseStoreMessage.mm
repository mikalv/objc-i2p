//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/DatabaseStoreMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Date.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/LeaseSet.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/FastI2NPMessageImpl.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/stat/StatManager.h"

@interface NetI2pDataI2npDatabaseStoreMessage () {
 @public
  NetI2pDataHash *_key_;
  NetI2pDataDatabaseEntry *_dbEntry_;
  IOSByteArray *_byteCache_;
  jlong _replyToken_;
  NetI2pDataTunnelId *_replyTunnel_;
  NetI2pDataHash *_replyGateway_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseStoreMessage, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseStoreMessage, _dbEntry_, NetI2pDataDatabaseEntry *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseStoreMessage, _byteCache_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseStoreMessage, _replyTunnel_, NetI2pDataTunnelId *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseStoreMessage, _replyGateway_, NetI2pDataHash *)

@implementation NetI2pDataI2npDatabaseStoreMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pDataHash *)getKey {
  if (_key_ != nil) return _key_;
  if (_dbEntry_ != nil) return [_dbEntry_ getHash];
  return nil;
}

- (NetI2pDataDatabaseEntry *)getEntry {
  return _dbEntry_;
}

- (void)setEntryWithNetI2pDataDatabaseEntry:(NetI2pDataDatabaseEntry *)entry_ {
  if (_dbEntry_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_dbEntry_, entry_);
}

- (jlong)getReplyToken {
  return _replyToken_;
}

- (void)setReplyTokenWithLong:(jlong)token {
  if (token > NetI2pDataI2npI2NPMessage_MAX_ID_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$JC", @"Token too large: ", token, @" (max=", NetI2pDataI2npI2NPMessage_MAX_ID_VALUE, ')'));
  else if (token < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"Token too small: ", token));
  _replyToken_ = token;
}

- (NetI2pDataTunnelId *)getReplyTunnel {
  return _replyTunnel_;
}

- (void)setReplyTunnelWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  JreStrongAssign(&_replyTunnel_, id_);
}

- (NetI2pDataHash *)getReplyGateway {
  return _replyGateway_;
}

- (void)setReplyGatewayWithNetI2pDataHash:(NetI2pDataHash *)peer {
  JreStrongAssign(&_replyGateway_, peer);
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (type != NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  jint curIndex = offset;
  JreStrongAssign(&_key_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
  if ([((NetI2pDataHash *) nil_chk(_key_)) isEqual:JreLoadStatic(NetI2pDataHash, FAKE_HASH)]) {
    [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) statManager])) addRateDataWithNSString:@"netDb.DSMAllZeros" withLong:1];
    @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"DSM all zeros");
  }
  curIndex += NetI2pDataHash_HASH_LENGTH;
  jint dbType = IOSByteArray_Get(nil_chk(data), curIndex) & (jint) 0x01;
  curIndex++;
  _replyToken_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 4);
  curIndex += 4;
  if (_replyToken_ > 0) {
    jlong tunnel = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 4);
    if (tunnel > 0) JreStrongAssignAndConsume(&_replyTunnel_, new_NetI2pDataTunnelId_initWithLong_(tunnel));
    curIndex += 4;
    JreStrongAssign(&_replyGateway_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
    curIndex += NetI2pDataHash_HASH_LENGTH;
  }
  else {
    JreStrongAssign(&_replyTunnel_, nil);
    JreStrongAssign(&_replyGateway_, nil);
  }
  if (dbType == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    JreStrongAssignAndConsume(&_dbEntry_, new_NetI2pDataLeaseSet_init());
    @try {
      [_dbEntry_ readBytesWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(data, curIndex, data->size_ - curIndex)];
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Error reading the leaseSet", dfe);
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Error reading the leaseSet", ioe);
    }
  }
  else {
    JreStrongAssignAndConsume(&_dbEntry_, new_NetI2pDataRouterRouterInfo_init());
    jint compressedSize = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 2);
    curIndex += 2;
    if (compressedSize <= 0 || curIndex + compressedSize > data->size_ || curIndex + compressedSize > dataSize + offset) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I$I", @"Compressed RI length: ", compressedSize, @" but remaining bytes: ", JavaLangMath_minWithInt_withInt_(data->size_ - curIndex, dataSize + offset - curIndex)));
    @try {
      IOSByteArray *decompressed = NetI2pDataDataHelper_decompressWithByteArray_withInt_withInt_(data, curIndex, compressedSize);
      [((NetI2pDataDatabaseEntry *) nil_chk(_dbEntry_)) readBytesWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_(decompressed)];
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Error reading the routerInfo", dfe);
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(JreStrcat("$I", @"Corrupt compressed routerInfo size = ", compressedSize), ioe);
    }
  }
}

- (jint)calculateWrittenLength {
  if (_dbEntry_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Missing entry");
  jint len = NetI2pDataHash_HASH_LENGTH + 1 + 4;
  if (_replyToken_ > 0) len += 4 + NetI2pDataHash_HASH_LENGTH;
  jint type = [_dbEntry_ getType];
  if (type == NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET) {
    if (_byteCache_ == nil) {
      JreStrongAssign(&_byteCache_, [((NetI2pDataDatabaseEntry *) nil_chk(_dbEntry_)) toByteArray]);
    }
  }
  else if (type == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    if (_byteCache_ == nil) {
      IOSByteArray *uncompressed = [((NetI2pDataDatabaseEntry *) nil_chk(_dbEntry_)) toByteArray];
      JreStrongAssign(&_byteCache_, NetI2pDataDataHelper_compressWithByteArray_(uncompressed));
    }
    len += 2;
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Invalid key type ", type));
  }
  len += ((IOSByteArray *) nil_chk(_byteCache_))->size_;
  return len;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  if (_dbEntry_ == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Missing entry");
  jint type = [_dbEntry_ getType];
  if (type != NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET && type != NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"Invalid key type ", type));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk([self getKey])) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
  curIndex += NetI2pDataHash_HASH_LENGTH;
  *IOSByteArray_GetRef(nil_chk(outArg), curIndex++) = (jbyte) type;
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 4, _replyToken_);
  curIndex += 4;
  if (_replyToken_ > 0) {
    jlong replyTunnel = 0;
    if (_replyTunnel_ != nil) replyTunnel = [_replyTunnel_ getTunnelId];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 4, replyTunnel);
    curIndex += 4;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(_replyGateway_)) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
    curIndex += NetI2pDataHash_HASH_LENGTH;
  }
  if (type == NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO) {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 2, ((IOSByteArray *) nil_chk(_byteCache_))->size_);
    curIndex += 2;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_byteCache_, 0, outArg, curIndex, ((IOSByteArray *) nil_chk(_byteCache_))->size_);
  curIndex += ((IOSByteArray *) nil_chk(_byteCache_))->size_;
  return curIndex;
}

- (jint)getType {
  return NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE;
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_([self getKey]) + NetI2pDataDataHelper_hashCodeWithId_(_dbEntry_) + (jint) _replyToken_ + NetI2pDataDataHelper_hashCodeWithId_(_replyTunnel_) + NetI2pDataDataHelper_hashCodeWithId_(_replyGateway_);
}

- (jboolean)isEqual:(id)object {
  if ((object != nil) && ([object isKindOfClass:[NetI2pDataI2npDatabaseStoreMessage class]])) {
    NetI2pDataI2npDatabaseStoreMessage *msg = (NetI2pDataI2npDatabaseStoreMessage *) cast_chk(object, [NetI2pDataI2npDatabaseStoreMessage class]);
    return NetI2pDataDataHelper_eqWithId_withId_([self getKey], [((NetI2pDataI2npDatabaseStoreMessage *) nil_chk(msg)) getKey]) && NetI2pDataDataHelper_eqWithId_withId_(_dbEntry_, [msg getEntry]) && _replyToken_ == msg->_replyToken_ && NetI2pDataDataHelper_eqWithId_withId_(_replyTunnel_, msg->_replyTunnel_) && NetI2pDataDataHelper_eqWithId_withId_(_replyGateway_, msg->_replyGateway_);
  }
  else {
    return false;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[DatabaseStoreMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tExpiration: "])) appendWithId:create_JavaUtilDate_initWithLong_(_expiration_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tUnique ID: "])) appendWithLong:[self getUniqueId]];
  if (_replyToken_ != 0) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply token: "])) appendWithLong:_replyToken_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply tunnel: "])) appendWithId:_replyTunnel_];
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply gateway: "])) appendWithId:_replyGateway_];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tKey: "])) appendWithId:[self getKey]];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tEntry: "])) appendWithId:_dbEntry_];
  [buf appendWithChar:']'];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_key_);
  RELEASE_(_dbEntry_);
  RELEASE_(_byteCache_);
  RELEASE_(_replyTunnel_);
  RELEASE_(_replyGateway_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDatabaseEntry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 13, 14, 12, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getEntry);
  methods[3].selector = @selector(setEntryWithNetI2pDataDatabaseEntry:);
  methods[4].selector = @selector(getReplyToken);
  methods[5].selector = @selector(setReplyTokenWithLong:);
  methods[6].selector = @selector(getReplyTunnel);
  methods[7].selector = @selector(setReplyTunnelWithNetI2pDataTunnelId:);
  methods[8].selector = @selector(getReplyGateway);
  methods[9].selector = @selector(setReplyGatewayWithNetI2pDataHash:);
  methods[10].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[11].selector = @selector(calculateWrittenLength);
  methods[12].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[13].selector = @selector(getType);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(isEqual:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dbEntry_", "LNetI2pDataDatabaseEntry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_byteCache_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyToken_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTunnel_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyGateway_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setEntry", "LNetI2pDataDatabaseEntry;", "setReplyToken", "J", "LJavaLangIllegalArgumentException;", "setReplyTunnel", "LNetI2pDataTunnelId;", "setReplyGateway", "LNetI2pDataHash;", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2npDatabaseStoreMessage = { "DatabaseStoreMessage", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 17, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npDatabaseStoreMessage;
}

@end

void NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(NetI2pDataI2npDatabaseStoreMessage *self, NetI2pI2PAppContext *context) {
  NetI2pDataI2npFastI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
}

NetI2pDataI2npDatabaseStoreMessage *new_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npDatabaseStoreMessage, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataI2npDatabaseStoreMessage *create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npDatabaseStoreMessage, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npDatabaseStoreMessage)
