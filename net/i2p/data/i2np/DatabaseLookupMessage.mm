//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/DatabaseLookupMessage.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/FastI2NPMessageImpl.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/util/VersionComparator.h"

@interface NetI2pDataI2npDatabaseLookupMessage () {
 @public
  NetI2pDataHash *_key_;
  NetI2pDataHash *_fromHash_;
  NetI2pDataTunnelId *_replyTunnel_;
  id<JavaUtilList> _dontIncludePeers_;
  NetI2pDataSessionKey *_replyKey_;
  NetI2pDataSessionTag *_replyTag_;
  NetI2pDataI2npDatabaseLookupMessage_Type *_type_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _fromHash_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _replyTunnel_, NetI2pDataTunnelId *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _dontIncludePeers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _replyKey_, NetI2pDataSessionKey *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _replyTag_, NetI2pDataSessionTag *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseLookupMessage, _type_, NetI2pDataI2npDatabaseLookupMessage_Type *)

inline jint NetI2pDataI2npDatabaseLookupMessage_get_MAX_NUM_PEERS(void);
#define NetI2pDataI2npDatabaseLookupMessage_MAX_NUM_PEERS 512
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, MAX_NUM_PEERS, jint)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TUNNEL(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TUNNEL 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TUNNEL, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_ENCRYPT(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_ENCRYPT 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_ENCRYPT, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TYPE_MASK(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_MASK 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TYPE_MASK, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TYPE_ANY(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_ANY 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TYPE_ANY, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TYPE_LS(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_LS 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TYPE_LS, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TYPE_RI(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_RI 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TYPE_RI, jbyte)

inline jbyte NetI2pDataI2npDatabaseLookupMessage_get_FLAG_TYPE_EXPL(void);
#define NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_EXPL 12
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npDatabaseLookupMessage, FLAG_TYPE_EXPL, jbyte)

inline NSString *NetI2pDataI2npDatabaseLookupMessage_get_MIN_ENCRYPTION_VERSION(void);
static NSString *NetI2pDataI2npDatabaseLookupMessage_MIN_ENCRYPTION_VERSION = @"0.9.7";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataI2npDatabaseLookupMessage, MIN_ENCRYPTION_VERSION, NSString *)

__attribute__((unused)) static void NetI2pDataI2npDatabaseLookupMessage_Type_initWithNSString_withInt_(NetI2pDataI2npDatabaseLookupMessage_Type *self, NSString *__name, jint __ordinal);

@implementation NetI2pDataI2npDatabaseLookupMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                withBoolean:(jboolean)locallyCreated {
  NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_(self, context, locallyCreated);
  return self;
}

- (NetI2pDataHash *)getSearchKey {
  return _key_;
}

- (void)setSearchKeyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (_key_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_key_, key);
}

- (NetI2pDataI2npDatabaseLookupMessage_Type *)getSearchType {
  return _type_;
}

- (void)setSearchTypeWithNetI2pDataI2npDatabaseLookupMessage_Type:(NetI2pDataI2npDatabaseLookupMessage_Type *)type {
  if (type == nil) @throw create_JavaLangIllegalArgumentException_init();
  JreStrongAssign(&_type_, type);
}

- (NetI2pDataHash *)getFrom {
  return _fromHash_;
}

- (void)setFromWithNetI2pDataHash:(NetI2pDataHash *)from {
  if (_fromHash_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_fromHash_, from);
}

- (NetI2pDataTunnelId *)getReplyTunnel {
  return _replyTunnel_;
}

- (void)setReplyTunnelWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)replyTunnel {
  if (_replyTunnel_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_replyTunnel_, replyTunnel);
}

+ (jboolean)supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)to {
  return NetI2pDataI2npDatabaseLookupMessage_supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo_(to);
}

- (NetI2pDataSessionKey *)getReplyKey {
  return _replyKey_;
}

- (NetI2pDataSessionTag *)getReplyTag {
  return _replyTag_;
}

- (void)setReplySessionWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)encryptKey
                       withNetI2pDataSessionTag:(NetI2pDataSessionTag *)encryptTag {
  if (_replyKey_ != nil || _replyTag_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_replyKey_, encryptKey);
  JreStrongAssign(&_replyTag_, encryptTag);
}

- (id<JavaUtilSet>)getDontIncludePeers {
  if (_dontIncludePeers_ == nil) return nil;
  return create_JavaUtilHashSet_initWithJavaUtilCollection_(_dontIncludePeers_);
}

- (void)setDontIncludePeersWithJavaUtilCollection:(id<JavaUtilCollection>)peers {
  _hasChecksum_ = false;
  if (peers != nil) JreStrongAssignAndConsume(&_dontIncludePeers_, new_JavaUtilArrayList_initWithJavaUtilCollection_(peers));
  else JreStrongAssign(&_dontIncludePeers_, nil);
}

- (void)addDontIncludePeerWithNetI2pDataHash:(NetI2pDataHash *)peer {
  if (_dontIncludePeers_ == nil) JreStrongAssignAndConsume(&_dontIncludePeers_, new_JavaUtilArrayList_init());
  else if ([_dontIncludePeers_ containsWithId:peer]) return;
  _hasChecksum_ = false;
  [((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) addWithId:peer];
}

- (void)addDontIncludePeersWithJavaUtilCollection:(id<JavaUtilCollection>)peers {
  _hasChecksum_ = false;
  if (_dontIncludePeers_ == nil) {
    JreStrongAssignAndConsume(&_dontIncludePeers_, new_JavaUtilArrayList_initWithJavaUtilCollection_(peers));
  }
  else {
    for (NetI2pDataHash * __strong peer in nil_chk(peers)) {
      if (![((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) containsWithId:peer]) [((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) addWithId:peer];
    }
  }
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (type != NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  jint curIndex = offset;
  JreStrongAssign(&_key_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
  curIndex += NetI2pDataHash_HASH_LENGTH;
  JreStrongAssign(&_fromHash_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
  curIndex += NetI2pDataHash_HASH_LENGTH;
  jboolean tunnelSpecified = (IOSByteArray_Get(nil_chk(data), curIndex) & NetI2pDataI2npDatabaseLookupMessage_FLAG_TUNNEL) != 0;
  jboolean replyKeySpecified = (IOSByteArray_Get(data, curIndex) & NetI2pDataI2npDatabaseLookupMessage_FLAG_ENCRYPT) != 0;
  switch (IOSByteArray_Get(data, curIndex) & NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_MASK) {
    case NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_LS:
    JreStrongAssign(&_type_, JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS));
    break;
    case NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_RI:
    JreStrongAssign(&_type_, JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, RI));
    break;
    case NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_EXPL:
    JreStrongAssign(&_type_, JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL));
    break;
    case NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_ANY:
    default:
    JreStrongAssign(&_type_, JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, ANY));
    break;
  }
  curIndex++;
  if (tunnelSpecified) {
    JreStrongAssignAndConsume(&_replyTunnel_, new_NetI2pDataTunnelId_initWithLong_(NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 4)));
    curIndex += 4;
  }
  jint numPeers = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 2);
  curIndex += 2;
  if ((numPeers < 0) || (numPeers > NetI2pDataI2npDatabaseLookupMessage_MAX_NUM_PEERS)) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"Invalid number of peers - ", numPeers));
  id<JavaUtilList> peers = numPeers > 0 ? create_JavaUtilArrayList_initWithInt_(numPeers) : nil;
  for (jint i = 0; i < numPeers; i++) {
    NetI2pDataHash *p = NetI2pDataHash_createWithByteArray_withInt_(data, curIndex);
    curIndex += NetI2pDataHash_HASH_LENGTH;
    [peers addWithId:p];
  }
  JreStrongAssign(&_dontIncludePeers_, peers);
  if (replyKeySpecified) {
    IOSByteArray *rk = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, curIndex, rk, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
    JreStrongAssignAndConsume(&_replyKey_, new_NetI2pDataSessionKey_initWithByteArray_(rk));
    curIndex += NetI2pDataSessionKey_KEYSIZE_BYTES;
    curIndex++;
    IOSByteArray *rt = [IOSByteArray arrayWithLength:NetI2pDataSessionTag_BYTE_LENGTH];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, curIndex, rt, 0, NetI2pDataSessionTag_BYTE_LENGTH);
    JreStrongAssignAndConsume(&_replyTag_, new_NetI2pDataSessionTag_initWithByteArray_(rt));
  }
}

- (jint)calculateWrittenLength {
  jint totalLength = 0;
  totalLength += NetI2pDataHash_HASH_LENGTH * 2;
  totalLength += 1;
  if (_replyTunnel_ != nil) totalLength += 4;
  totalLength += 2;
  if (_dontIncludePeers_ != nil) totalLength += NetI2pDataHash_HASH_LENGTH * [_dontIncludePeers_ size];
  if (_replyKey_ != nil) totalLength += NetI2pDataSessionKey_KEYSIZE_BYTES + 1 + NetI2pDataSessionTag_BYTE_LENGTH;
  return totalLength;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  if (_key_ == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Key being searched for not specified");
  if (_fromHash_ == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"From address not specified");
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([_key_ getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
  curIndex += NetI2pDataHash_HASH_LENGTH;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(_fromHash_)) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
  curIndex += NetI2pDataHash_HASH_LENGTH;
  jbyte flag;
  if (_replyKey_ != nil) flag = NetI2pDataI2npDatabaseLookupMessage_FLAG_ENCRYPT;
  else flag = 0;
  switch ([_type_ ordinal]) {
    case NetI2pDataI2npDatabaseLookupMessage_Type_Enum_LS:
    flag |= NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_LS;
    break;
    case NetI2pDataI2npDatabaseLookupMessage_Type_Enum_RI:
    flag |= NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_RI;
    break;
    case NetI2pDataI2npDatabaseLookupMessage_Type_Enum_EXPL:
    flag |= NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_EXPL;
    break;
    case NetI2pDataI2npDatabaseLookupMessage_Type_Enum_ANY:
    default:
    break;
  }
  if (_replyTunnel_ != nil) {
    flag |= NetI2pDataI2npDatabaseLookupMessage_FLAG_TUNNEL;
    *IOSByteArray_GetRef(nil_chk(outArg), curIndex++) = flag;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 4, [_replyTunnel_ getTunnelId]);
    curIndex += 4;
  }
  else {
    *IOSByteArray_GetRef(nil_chk(outArg), curIndex++) = flag;
  }
  if ((_dontIncludePeers_ == nil) || ([((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) isEmpty])) {
    *IOSByteArray_GetRef(outArg, curIndex++) = (jint) 0x0;
    *IOSByteArray_GetRef(outArg, curIndex++) = (jint) 0x0;
  }
  else {
    jint size = [((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) size];
    if (size > NetI2pDataI2npDatabaseLookupMessage_MAX_NUM_PEERS) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"Too many peers: ", size));
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 2, size);
    curIndex += 2;
    for (NetI2pDataHash * __strong peer in nil_chk(_dontIncludePeers_)) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(peer)) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
      curIndex += NetI2pDataHash_HASH_LENGTH;
    }
  }
  if (_replyKey_ != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([_replyKey_ getData], 0, outArg, curIndex, NetI2pDataSessionKey_KEYSIZE_BYTES);
    curIndex += NetI2pDataSessionKey_KEYSIZE_BYTES;
    *IOSByteArray_GetRef(outArg, curIndex++) = 1;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionTag *) nil_chk(_replyTag_)) getData], 0, outArg, curIndex, NetI2pDataSessionTag_BYTE_LENGTH);
    curIndex += NetI2pDataSessionTag_BYTE_LENGTH;
  }
  return curIndex;
}

- (jint)getType {
  return NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE;
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_(_key_) + NetI2pDataDataHelper_hashCodeWithId_(_fromHash_) + NetI2pDataDataHelper_hashCodeWithId_(_replyTunnel_) + NetI2pDataDataHelper_hashCodeWithJavaUtilCollection_(_dontIncludePeers_);
}

- (jboolean)isEqual:(id)object {
  if ((object != nil) && ([object isKindOfClass:[NetI2pDataI2npDatabaseLookupMessage class]])) {
    NetI2pDataI2npDatabaseLookupMessage *msg = (NetI2pDataI2npDatabaseLookupMessage *) cast_chk(object, [NetI2pDataI2npDatabaseLookupMessage class]);
    return NetI2pDataDataHelper_eqWithId_withId_(_key_, ((NetI2pDataI2npDatabaseLookupMessage *) nil_chk(msg))->_key_) && NetI2pDataDataHelper_eqWithId_withId_(_fromHash_, msg->_fromHash_) && NetI2pDataDataHelper_eqWithId_withId_(_replyTunnel_, msg->_replyTunnel_) && NetI2pDataDataHelper_eqWithJavaUtilCollection_withJavaUtilCollection_(_dontIncludePeers_, msg->_dontIncludePeers_);
  }
  else {
    return false;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:@"[DatabaseLookupMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSearch Type: "])) appendWithId:_type_];
  [buf appendWithNSString:@"\n\tSearch Key: "];
  if (_type_ == JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS)) [buf appendWithNSString:[((NetI2pDataHash *) nil_chk(_key_)) toBase32]];
  else [buf appendWithId:_key_];
  if (_replyKey_ != nil) [buf appendWithNSString:@"\n\tReply GW: "];
  else [buf appendWithNSString:@"\n\tFrom: "];
  [buf appendWithId:_fromHash_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply Tunnel: "])) appendWithId:_replyTunnel_];
  if (_replyKey_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply Key: "])) appendWithId:_replyKey_];
  if (_replyTag_ != nil) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReply Tag: "])) appendWithId:_replyTag_];
  if (_dontIncludePeers_ != nil) {
    [buf appendWithNSString:@"\n\tDon't Include Peers: "];
    [buf appendWithInt:[((id<JavaUtilList>) nil_chk(_dontIncludePeers_)) size]];
  }
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_key_);
  RELEASE_(_fromHash_);
  RELEASE_(_replyTunnel_);
  RELEASE_(_dontIncludePeers_);
  RELEASE_(_replyKey_);
  RELEASE_(_replyTag_);
  RELEASE_(_type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDatabaseLookupMessage_Type;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionTag;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 19, 20, 21, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 22, 23, 21, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withBoolean:);
  methods[2].selector = @selector(getSearchKey);
  methods[3].selector = @selector(setSearchKeyWithNetI2pDataHash:);
  methods[4].selector = @selector(getSearchType);
  methods[5].selector = @selector(setSearchTypeWithNetI2pDataI2npDatabaseLookupMessage_Type:);
  methods[6].selector = @selector(getFrom);
  methods[7].selector = @selector(setFromWithNetI2pDataHash:);
  methods[8].selector = @selector(getReplyTunnel);
  methods[9].selector = @selector(setReplyTunnelWithNetI2pDataTunnelId:);
  methods[10].selector = @selector(supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo:);
  methods[11].selector = @selector(getReplyKey);
  methods[12].selector = @selector(getReplyTag);
  methods[13].selector = @selector(setReplySessionWithNetI2pDataSessionKey:withNetI2pDataSessionTag:);
  methods[14].selector = @selector(getDontIncludePeers);
  methods[15].selector = @selector(setDontIncludePeersWithJavaUtilCollection:);
  methods[16].selector = @selector(addDontIncludePeerWithNetI2pDataHash:);
  methods[17].selector = @selector(addDontIncludePeersWithJavaUtilCollection:);
  methods[18].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[19].selector = @selector(calculateWrittenLength);
  methods[20].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[21].selector = @selector(getType);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_fromHash_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTunnel_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_dontIncludePeers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "_replyKey_", "LNetI2pDataSessionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_replyTag_", "LNetI2pDataSessionTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_type_", "LNetI2pDataI2npDatabaseLookupMessage_Type;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_NUM_PEERS", "I", .constantValue.asInt = NetI2pDataI2npDatabaseLookupMessage_MAX_NUM_PEERS, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TUNNEL", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TUNNEL, 0x1a, -1, -1, -1, -1 },
    { "FLAG_ENCRYPT", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_ENCRYPT, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TYPE_MASK", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_MASK, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TYPE_ANY", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_ANY, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TYPE_LS", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_LS, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TYPE_RI", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_RI, 0x1a, -1, -1, -1, -1 },
    { "FLAG_TYPE_EXPL", "B", .constantValue.asChar = NetI2pDataI2npDatabaseLookupMessage_FLAG_TYPE_EXPL, 0x1a, -1, -1, -1, -1 },
    { "MIN_ENCRYPTION_VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;Z", "setSearchKey", "LNetI2pDataHash;", "setSearchType", "LNetI2pDataI2npDatabaseLookupMessage_Type;", "setFrom", "setReplyTunnel", "LNetI2pDataTunnelId;", "supportsEncryptedReplies", "LNetI2pDataRouterRouterInfo;", "setReplySession", "LNetI2pDataSessionKey;LNetI2pDataSessionTag;", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", "setDontIncludePeers", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/Hash;>;)V", "addDontIncludePeer", "addDontIncludePeers", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI", "hashCode", "equals", "LNSObject;", "toString", "Ljava/util/List<Lnet/i2p/data/Hash;>;", &NetI2pDataI2npDatabaseLookupMessage_MIN_ENCRYPTION_VERSION };
  static const J2ObjcClassInfo _NetI2pDataI2npDatabaseLookupMessage = { "DatabaseLookupMessage", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 25, 17, -1, 5, -1, -1, -1 };
  return &_NetI2pDataI2npDatabaseLookupMessage;
}

@end

void NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_(NetI2pDataI2npDatabaseLookupMessage *self, NetI2pI2PAppContext *context) {
  NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_(self, context, false);
}

NetI2pDataI2npDatabaseLookupMessage *new_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npDatabaseLookupMessage, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataI2npDatabaseLookupMessage *create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npDatabaseLookupMessage, initWithNetI2pI2PAppContext_, context)
}

void NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_(NetI2pDataI2npDatabaseLookupMessage *self, NetI2pI2PAppContext *context, jboolean locallyCreated) {
  NetI2pDataI2npFastI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
  JreStrongAssign(&self->_type_, JreLoadEnum(NetI2pDataI2npDatabaseLookupMessage_Type, ANY));
}

NetI2pDataI2npDatabaseLookupMessage *new_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_(NetI2pI2PAppContext *context, jboolean locallyCreated) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npDatabaseLookupMessage, initWithNetI2pI2PAppContext_withBoolean_, context, locallyCreated)
}

NetI2pDataI2npDatabaseLookupMessage *create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_withBoolean_(NetI2pI2PAppContext *context, jboolean locallyCreated) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npDatabaseLookupMessage, initWithNetI2pI2PAppContext_withBoolean_, context, locallyCreated)
}

jboolean NetI2pDataI2npDatabaseLookupMessage_supportsEncryptedRepliesWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *to) {
  NetI2pDataI2npDatabaseLookupMessage_initialize();
  if (to == nil) return false;
  NSString *v = [to getVersion];
  return NetI2pUtilVersionComparator_compWithNSString_withNSString_(v, NetI2pDataI2npDatabaseLookupMessage_MIN_ENCRYPTION_VERSION) >= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npDatabaseLookupMessage)

J2OBJC_INITIALIZED_DEFN(NetI2pDataI2npDatabaseLookupMessage_Type)

NetI2pDataI2npDatabaseLookupMessage_Type *NetI2pDataI2npDatabaseLookupMessage_Type_values_[4];

@implementation NetI2pDataI2npDatabaseLookupMessage_Type

+ (NetI2pDataI2npDatabaseLookupMessage_Type *)ANY {
  return JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, ANY);
}

+ (NetI2pDataI2npDatabaseLookupMessage_Type *)LS {
  return JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS);
}

+ (NetI2pDataI2npDatabaseLookupMessage_Type *)RI {
  return JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, RI);
}

+ (NetI2pDataI2npDatabaseLookupMessage_Type *)EXPL {
  return JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL);
}

+ (IOSObjectArray *)values {
  return NetI2pDataI2npDatabaseLookupMessage_Type_values();
}

+ (NetI2pDataI2npDatabaseLookupMessage_Type *)valueOfWithNSString:(NSString *)name {
  return NetI2pDataI2npDatabaseLookupMessage_Type_valueOfWithNSString_(name);
}

- (NetI2pDataI2npDatabaseLookupMessage_Type_Enum)toNSEnum {
  return (NetI2pDataI2npDatabaseLookupMessage_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pDataI2npDatabaseLookupMessage_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDatabaseLookupMessage_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY", "LNetI2pDataI2npDatabaseLookupMessage_Type;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "LS", "LNetI2pDataI2npDatabaseLookupMessage_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "RI", "LNetI2pDataI2npDatabaseLookupMessage_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "EXPL", "LNetI2pDataI2npDatabaseLookupMessage_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, ANY), &JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, LS), &JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, RI), &JreEnum(NetI2pDataI2npDatabaseLookupMessage_Type, EXPL), "LNetI2pDataI2npDatabaseLookupMessage;", "Ljava/lang/Enum<Lnet/i2p/data/i2np/DatabaseLookupMessage$Type;>;" };
  static const J2ObjcClassInfo _NetI2pDataI2npDatabaseLookupMessage_Type = { "Type", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pDataI2npDatabaseLookupMessage_Type;
}

+ (void)initialize {
  if (self == [NetI2pDataI2npDatabaseLookupMessage_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pDataI2npDatabaseLookupMessage_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pDataI2npDatabaseLookupMessage_Type_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pDataI2npDatabaseLookupMessage_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pDataI2npDatabaseLookupMessage_Type)
  }
}

@end

void NetI2pDataI2npDatabaseLookupMessage_Type_initWithNSString_withInt_(NetI2pDataI2npDatabaseLookupMessage_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pDataI2npDatabaseLookupMessage_Type_values() {
  NetI2pDataI2npDatabaseLookupMessage_Type_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pDataI2npDatabaseLookupMessage_Type_values_ count:4 type:NetI2pDataI2npDatabaseLookupMessage_Type_class_()];
}

NetI2pDataI2npDatabaseLookupMessage_Type *NetI2pDataI2npDatabaseLookupMessage_Type_valueOfWithNSString_(NSString *name) {
  NetI2pDataI2npDatabaseLookupMessage_Type_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pDataI2npDatabaseLookupMessage_Type *e = NetI2pDataI2npDatabaseLookupMessage_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pDataI2npDatabaseLookupMessage_Type *NetI2pDataI2npDatabaseLookupMessage_Type_fromOrdinal(NSUInteger ordinal) {
  NetI2pDataI2npDatabaseLookupMessage_Type_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pDataI2npDatabaseLookupMessage_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npDatabaseLookupMessage_Type)
