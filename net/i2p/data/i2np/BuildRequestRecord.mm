//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/BuildRequestRecord.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Date.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/ElGamalEngine.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/BuildRequestRecord.h"
#include "net/i2p/data/i2np/EncryptedBuildRecord.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/RandomSource.h"

@interface NetI2pDataI2npBuildRequestRecord () {
 @public
  IOSByteArray *_data_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npBuildRequestRecord, _data_, IOSByteArray *)

inline jint NetI2pDataI2npBuildRequestRecord_get_FLAG_UNRESTRICTED_PREV(void);
#define NetI2pDataI2npBuildRequestRecord_FLAG_UNRESTRICTED_PREV 128
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, FLAG_UNRESTRICTED_PREV, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_FLAG_OUTBOUND_ENDPOINT(void);
#define NetI2pDataI2npBuildRequestRecord_FLAG_OUTBOUND_ENDPOINT 64
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, FLAG_OUTBOUND_ENDPOINT, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_RECV_TUNNEL(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_RECV_TUNNEL 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_RECV_TUNNEL, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_OUR_IDENT(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_OUR_IDENT 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_OUR_IDENT, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_SEND_TUNNEL(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_SEND_TUNNEL 36
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_SEND_TUNNEL, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_SEND_IDENT(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_SEND_IDENT 40
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_SEND_IDENT, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_LAYER_KEY(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_LAYER_KEY 72
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_LAYER_KEY, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_IV_KEY(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_IV_KEY 104
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_IV_KEY, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_REPLY_IV(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_REPLY_IV 168
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_REPLY_IV, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_FLAG(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_FLAG 184
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_FLAG, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_REQ_TIME(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_REQ_TIME 185
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_REQ_TIME, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_OFF_SEND_MSG_ID(void);
#define NetI2pDataI2npBuildRequestRecord_OFF_SEND_MSG_ID 189
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, OFF_SEND_MSG_ID, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_PADDING_SIZE(void);
#define NetI2pDataI2npBuildRequestRecord_PADDING_SIZE 29
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, PADDING_SIZE, jint)

inline jint NetI2pDataI2npBuildRequestRecord_get_LENGTH(void);
#define NetI2pDataI2npBuildRequestRecord_LENGTH 222
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npBuildRequestRecord, LENGTH, jint)

@implementation NetI2pDataI2npBuildRequestRecord

+ (jint)IV_SIZE {
  return NetI2pDataI2npBuildRequestRecord_IV_SIZE;
}

+ (jint)PEER_SIZE {
  return NetI2pDataI2npBuildRequestRecord_PEER_SIZE;
}

+ (jint)OFF_REPLY_KEY {
  return NetI2pDataI2npBuildRequestRecord_OFF_REPLY_KEY;
}

- (IOSByteArray *)getData {
  return _data_;
}

- (jlong)readReceiveTunnelId {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_RECV_TUNNEL, 4);
}

- (jlong)readNextTunnelId {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_SEND_TUNNEL, 4);
}

- (NetI2pDataHash *)readNextIdentity {
  return NetI2pDataHash_createWithByteArray_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_SEND_IDENT);
}

- (NetI2pDataSessionKey *)readLayerKey {
  IOSByteArray *key = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_LAYER_KEY, key, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
  return create_NetI2pDataSessionKey_initWithByteArray_(key);
}

- (NetI2pDataSessionKey *)readIVKey {
  IOSByteArray *key = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_IV_KEY, key, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
  return create_NetI2pDataSessionKey_initWithByteArray_(key);
}

- (NetI2pDataSessionKey *)readReplyKey {
  IOSByteArray *key = [IOSByteArray arrayWithLength:NetI2pDataSessionKey_KEYSIZE_BYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_REPLY_KEY, key, 0, NetI2pDataSessionKey_KEYSIZE_BYTES);
  return create_NetI2pDataSessionKey_initWithByteArray_(key);
}

- (IOSByteArray *)readReplyIV {
  IOSByteArray *iv = [IOSByteArray arrayWithLength:NetI2pDataI2npBuildRequestRecord_IV_SIZE];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_REPLY_IV, iv, 0, NetI2pDataI2npBuildRequestRecord_IV_SIZE);
  return iv;
}

- (jboolean)readIsInboundGateway {
  return (IOSByteArray_Get(nil_chk(_data_), NetI2pDataI2npBuildRequestRecord_OFF_FLAG) & NetI2pDataI2npBuildRequestRecord_FLAG_UNRESTRICTED_PREV) != 0;
}

- (jboolean)readIsOutboundEndpoint {
  return (IOSByteArray_Get(nil_chk(_data_), NetI2pDataI2npBuildRequestRecord_OFF_FLAG) & NetI2pDataI2npBuildRequestRecord_FLAG_OUTBOUND_ENDPOINT) != 0;
}

- (jlong)readRequestTime {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_REQ_TIME, 4) * (60 * 60 * 1000LL);
}

- (jlong)readReplyMessageId {
  return NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(_data_, NetI2pDataI2npBuildRequestRecord_OFF_SEND_MSG_ID, 4);
}

- (NetI2pDataI2npEncryptedBuildRecord *)encryptRecordWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                                     withNetI2pDataPublicKey:(NetI2pDataPublicKey *)toKey
                                                          withNetI2pDataHash:(NetI2pDataHash *)toPeer {
  IOSByteArray *out = [IOSByteArray arrayWithLength:NetI2pDataI2npEncryptedBuildRecord_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(toPeer)) getData], 0, out, 0, NetI2pDataI2npBuildRequestRecord_PEER_SIZE);
  IOSByteArray *encrypted = [((NetI2pCryptoElGamalEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) elGamalEngine])) encryptWithByteArray:_data_ withNetI2pDataPublicKey:toKey];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encrypted, 1, out, NetI2pDataI2npBuildRequestRecord_PEER_SIZE, 256);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(encrypted, 258, out, 256 + NetI2pDataI2npBuildRequestRecord_PEER_SIZE, 256);
  return create_NetI2pDataI2npEncryptedBuildRecord_initWithByteArray_(out);
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                   withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)ourKey
     withNetI2pDataI2npEncryptedBuildRecord:(NetI2pDataI2npEncryptedBuildRecord *)encryptedRecord {
  NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_(self, ctx, ourKey, encryptedRecord);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                   withLong:(jlong)receiveTunnelId
                         withNetI2pDataHash:(NetI2pDataHash *)peer
                                   withLong:(jlong)nextTunnelId
                         withNetI2pDataHash:(NetI2pDataHash *)nextHop
                                   withLong:(jlong)nextMsgId
                   withNetI2pDataSessionKey:(NetI2pDataSessionKey *)layerKey
                   withNetI2pDataSessionKey:(NetI2pDataSessionKey *)ivKey
                   withNetI2pDataSessionKey:(NetI2pDataSessionKey *)replyKey
                              withByteArray:(IOSByteArray *)iv
                                withBoolean:(jboolean)isInGateway
                                withBoolean:(jboolean)isOutEndpoint {
  NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_(self, ctx, receiveTunnelId, peer, nextTunnelId, nextHop, nextMsgId, layerKey, ivKey, replyKey, iv, isInGateway, isOutEndpoint);
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  [buf appendWithNSString:@"BRR "];
  jboolean isIBGW = [self readIsInboundGateway];
  jboolean isOBEP = [self readIsOutboundEndpoint];
  if (isIBGW) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"IBGW in: "])) appendWithLong:[self readReceiveTunnelId]])) appendWithNSString:@" out "])) appendWithLong:[self readNextTunnelId]];
  }
  else if (isOBEP) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"OBEP in: "])) appendWithLong:[self readReceiveTunnelId]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"part. in: "])) appendWithLong:[self readReceiveTunnelId]])) appendWithNSString:@" out: "])) appendWithLong:[self readNextTunnelId]];
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@" to: "])) appendWithId:[self readNextIdentity]])) appendWithNSString:@" layer key: "])) appendWithId:[self readLayerKey]])) appendWithNSString:@" IV key: "])) appendWithId:[self readIVKey]])) appendWithNSString:@" reply key: "])) appendWithId:[self readReplyKey]])) appendWithNSString:@" reply IV: "])) appendWithNSString:NetI2pDataBase64_encodeWithByteArray_([self readReplyIV])])) appendWithNSString:@" hour: "])) appendWithId:create_JavaUtilDate_initWithLong_([self readRequestTime])])) appendWithNSString:@" reply msg id: "])) appendWithLong:[self readReplyMessageId]];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSessionKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npEncryptedBuildRecord;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getData);
  methods[1].selector = @selector(readReceiveTunnelId);
  methods[2].selector = @selector(readNextTunnelId);
  methods[3].selector = @selector(readNextIdentity);
  methods[4].selector = @selector(readLayerKey);
  methods[5].selector = @selector(readIVKey);
  methods[6].selector = @selector(readReplyKey);
  methods[7].selector = @selector(readReplyIV);
  methods[8].selector = @selector(readIsInboundGateway);
  methods[9].selector = @selector(readIsOutboundEndpoint);
  methods[10].selector = @selector(readRequestTime);
  methods[11].selector = @selector(readReplyMessageId);
  methods[12].selector = @selector(encryptRecordWithNetI2pI2PAppContext:withNetI2pDataPublicKey:withNetI2pDataHash:);
  methods[13].selector = @selector(initWithNetI2pI2PAppContext:withNetI2pDataPrivateKey:withNetI2pDataI2npEncryptedBuildRecord:);
  methods[14].selector = @selector(initWithNetI2pI2PAppContext:withLong:withNetI2pDataHash:withLong:withNetI2pDataHash:withLong:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withNetI2pDataSessionKey:withByteArray:withBoolean:withBoolean:);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "FLAG_UNRESTRICTED_PREV", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_FLAG_UNRESTRICTED_PREV, 0x1a, -1, -1, -1, -1 },
    { "FLAG_OUTBOUND_ENDPOINT", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_FLAG_OUTBOUND_ENDPOINT, 0x1a, -1, -1, -1, -1 },
    { "IV_SIZE", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_IV_SIZE, 0x19, -1, -1, -1, -1 },
    { "PEER_SIZE", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_PEER_SIZE, 0x19, -1, -1, -1, -1 },
    { "OFF_RECV_TUNNEL", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_RECV_TUNNEL, 0x1a, -1, -1, -1, -1 },
    { "OFF_OUR_IDENT", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_OUR_IDENT, 0x1a, -1, -1, -1, -1 },
    { "OFF_SEND_TUNNEL", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_SEND_TUNNEL, 0x1a, -1, -1, -1, -1 },
    { "OFF_SEND_IDENT", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_SEND_IDENT, 0x1a, -1, -1, -1, -1 },
    { "OFF_LAYER_KEY", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_LAYER_KEY, 0x1a, -1, -1, -1, -1 },
    { "OFF_IV_KEY", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_IV_KEY, 0x1a, -1, -1, -1, -1 },
    { "OFF_REPLY_KEY", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_REPLY_KEY, 0x19, -1, -1, -1, -1 },
    { "OFF_REPLY_IV", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_REPLY_IV, 0x1a, -1, -1, -1, -1 },
    { "OFF_FLAG", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_FLAG, 0x1a, -1, -1, -1, -1 },
    { "OFF_REQ_TIME", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_REQ_TIME, 0x1a, -1, -1, -1, -1 },
    { "OFF_SEND_MSG_ID", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_OFF_SEND_MSG_ID, 0x1a, -1, -1, -1, -1 },
    { "PADDING_SIZE", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_PADDING_SIZE, 0x1a, -1, -1, -1, -1 },
    { "LENGTH", "I", .constantValue.asInt = NetI2pDataI2npBuildRequestRecord_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encryptRecord", "LNetI2pI2PAppContext;LNetI2pDataPublicKey;LNetI2pDataHash;", "LNetI2pI2PAppContext;LNetI2pDataPrivateKey;LNetI2pDataI2npEncryptedBuildRecord;", "LNetI2pDataDataFormatException;", "LNetI2pI2PAppContext;JLNetI2pDataHash;JLNetI2pDataHash;JLNetI2pDataSessionKey;LNetI2pDataSessionKey;LNetI2pDataSessionKey;[BZZ", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2npBuildRequestRecord = { "BuildRequestRecord", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 16, 18, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npBuildRequestRecord;
}

@end

void NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_(NetI2pDataI2npBuildRequestRecord *self, NetI2pI2PAppContext *ctx, NetI2pDataPrivateKey *ourKey, NetI2pDataI2npEncryptedBuildRecord *encryptedRecord) {
  NSObject_init(self);
  IOSByteArray *preDecrypt = [IOSByteArray arrayWithLength:514];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataI2npEncryptedBuildRecord *) nil_chk(encryptedRecord)) getData], NetI2pDataI2npBuildRequestRecord_PEER_SIZE, preDecrypt, 1, 256);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([encryptedRecord getData], NetI2pDataI2npBuildRequestRecord_PEER_SIZE + 256, preDecrypt, 258, 256);
  IOSByteArray *decrypted = [((NetI2pCryptoElGamalEngine *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) elGamalEngine])) decryptWithByteArray:preDecrypt withNetI2pDataPrivateKey:ourKey];
  if (decrypted != nil) {
    JreStrongAssign(&self->_data_, decrypted);
  }
  else {
    @throw create_NetI2pDataDataFormatException_initWithNSString_(@"decrypt fail");
  }
}

NetI2pDataI2npBuildRequestRecord *new_NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_(NetI2pI2PAppContext *ctx, NetI2pDataPrivateKey *ourKey, NetI2pDataI2npEncryptedBuildRecord *encryptedRecord) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npBuildRequestRecord, initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_, ctx, ourKey, encryptedRecord)
}

NetI2pDataI2npBuildRequestRecord *create_NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_(NetI2pI2PAppContext *ctx, NetI2pDataPrivateKey *ourKey, NetI2pDataI2npEncryptedBuildRecord *encryptedRecord) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npBuildRequestRecord, initWithNetI2pI2PAppContext_withNetI2pDataPrivateKey_withNetI2pDataI2npEncryptedBuildRecord_, ctx, ourKey, encryptedRecord)
}

void NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_(NetI2pDataI2npBuildRequestRecord *self, NetI2pI2PAppContext *ctx, jlong receiveTunnelId, NetI2pDataHash *peer, jlong nextTunnelId, NetI2pDataHash *nextHop, jlong nextMsgId, NetI2pDataSessionKey *layerKey, NetI2pDataSessionKey *ivKey, NetI2pDataSessionKey *replyKey, IOSByteArray *iv, jboolean isInGateway, jboolean isOutEndpoint) {
  NSObject_init(self);
  IOSByteArray *buf = [IOSByteArray arrayWithLength:NetI2pDataI2npBuildRequestRecord_LENGTH];
  JreStrongAssign(&self->_data_, buf);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf, NetI2pDataI2npBuildRequestRecord_OFF_RECV_TUNNEL, 4, receiveTunnelId);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(peer)) getData], 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_OUR_IDENT, NetI2pDataHash_HASH_LENGTH);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf, NetI2pDataI2npBuildRequestRecord_OFF_SEND_TUNNEL, 4, nextTunnelId);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(nextHop)) getData], 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_SEND_IDENT, NetI2pDataHash_HASH_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(layerKey)) getData], 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_LAYER_KEY, NetI2pDataSessionKey_KEYSIZE_BYTES);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(ivKey)) getData], 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_IV_KEY, NetI2pDataSessionKey_KEYSIZE_BYTES);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataSessionKey *) nil_chk(replyKey)) getData], 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_REPLY_KEY, NetI2pDataSessionKey_KEYSIZE_BYTES);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, buf, NetI2pDataI2npBuildRequestRecord_OFF_REPLY_IV, NetI2pDataI2npBuildRequestRecord_IV_SIZE);
  if (isInGateway) *IOSByteArray_GetRef(buf, NetI2pDataI2npBuildRequestRecord_OFF_FLAG) |= NetI2pDataI2npBuildRequestRecord_FLAG_UNRESTRICTED_PREV;
  else if (isOutEndpoint) *IOSByteArray_GetRef(buf, NetI2pDataI2npBuildRequestRecord_OFF_FLAG) |= NetI2pDataI2npBuildRequestRecord_FLAG_OUTBOUND_ENDPOINT;
  jlong truncatedHour = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) clock])) now];
  truncatedHour -= [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextIntWithInt:90 * 1000];
  truncatedHour /= (60l * 60l * 1000l);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf, NetI2pDataI2npBuildRequestRecord_OFF_REQ_TIME, 4, truncatedHour);
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buf, NetI2pDataI2npBuildRequestRecord_OFF_SEND_MSG_ID, 4, nextMsgId);
  [((NetI2pUtilRandomSource *) nil_chk([ctx random])) nextBytesWithByteArray:buf withInt:NetI2pDataI2npBuildRequestRecord_OFF_SEND_MSG_ID + 4 withInt:NetI2pDataI2npBuildRequestRecord_PADDING_SIZE];
  IOSByteArray *wroteIV = [self readReplyIV];
  if (!NetI2pDataDataHelper_eqWithByteArray_withByteArray_(iv, wroteIV)) @throw create_JavaLangRuntimeException_initWithNSString_(@"foo");
}

NetI2pDataI2npBuildRequestRecord *new_NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_(NetI2pI2PAppContext *ctx, jlong receiveTunnelId, NetI2pDataHash *peer, jlong nextTunnelId, NetI2pDataHash *nextHop, jlong nextMsgId, NetI2pDataSessionKey *layerKey, NetI2pDataSessionKey *ivKey, NetI2pDataSessionKey *replyKey, IOSByteArray *iv, jboolean isInGateway, jboolean isOutEndpoint) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npBuildRequestRecord, initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_, ctx, receiveTunnelId, peer, nextTunnelId, nextHop, nextMsgId, layerKey, ivKey, replyKey, iv, isInGateway, isOutEndpoint)
}

NetI2pDataI2npBuildRequestRecord *create_NetI2pDataI2npBuildRequestRecord_initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_(NetI2pI2PAppContext *ctx, jlong receiveTunnelId, NetI2pDataHash *peer, jlong nextTunnelId, NetI2pDataHash *nextHop, jlong nextMsgId, NetI2pDataSessionKey *layerKey, NetI2pDataSessionKey *ivKey, NetI2pDataSessionKey *replyKey, IOSByteArray *iv, jboolean isInGateway, jboolean isOutEndpoint) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npBuildRequestRecord, initWithNetI2pI2PAppContext_withLong_withNetI2pDataHash_withLong_withNetI2pDataHash_withLong_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withNetI2pDataSessionKey_withByteArray_withBoolean_withBoolean_, ctx, receiveTunnelId, peer, nextTunnelId, nextHop, nextMsgId, layerKey, ivKey, replyKey, iv, isInGateway, isOutEndpoint)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npBuildRequestRecord)
