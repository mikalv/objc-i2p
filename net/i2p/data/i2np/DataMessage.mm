//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/DataMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/i2np/DataMessage.h"
#include "net/i2p/data/i2np/FastI2NPMessageImpl.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"

@interface NetI2pDataI2npDataMessage () {
 @public
  IOSByteArray *_data_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npDataMessage, _data_, IOSByteArray *)

@implementation NetI2pDataI2npDataMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2npDataMessage_MESSAGE_TYPE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npDataMessage_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (IOSByteArray *)getData {
  return _data_;
}

- (void)setDataWithByteArray:(IOSByteArray *)data {
  if (_data_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_data_, data);
}

- (jint)getSize {
  return ((IOSByteArray *) nil_chk(_data_))->size_;
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (type != NetI2pDataI2npDataMessage_MESSAGE_TYPE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  jint curIndex = offset;
  jlong size = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, curIndex, 4);
  curIndex += 4;
  if (size > NetI2pDataI2npI2NPMessage_MAX_SIZE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$J", @"too large msg, size=", size));
  JreStrongAssignAndConsume(&_data_, [IOSByteArray newArrayWithLength:(jint) size]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, curIndex, _data_, 0, (jint) size);
}

- (jint)calculateWrittenLength {
  if (_data_ == nil) return 4;
  else return 4 + _data_->size_;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  if (_data_ == nil) {
    *IOSByteArray_GetRef(nil_chk(outArg), curIndex++) = (jint) 0x0;
    *IOSByteArray_GetRef(outArg, curIndex++) = (jint) 0x0;
    *IOSByteArray_GetRef(outArg, curIndex++) = (jint) 0x0;
    *IOSByteArray_GetRef(outArg, curIndex++) = (jint) 0x0;
  }
  else {
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(outArg, curIndex, 4, _data_->size_);
    curIndex += 4;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, 0, outArg, curIndex, ((IOSByteArray *) nil_chk(_data_))->size_);
    curIndex += ((IOSByteArray *) nil_chk(_data_))->size_;
  }
  return curIndex;
}

- (jint)getType {
  return NetI2pDataI2npDataMessage_MESSAGE_TYPE;
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithByteArray_(_data_);
}

- (jboolean)isEqual:(id)object {
  if ((object != nil) && ([object isKindOfClass:[NetI2pDataI2npDataMessage class]])) {
    NetI2pDataI2npDataMessage *msg = (NetI2pDataI2npDataMessage *) cast_chk(object, [NetI2pDataI2npDataMessage class]);
    return NetI2pDataDataHelper_eqWithByteArray_withByteArray_(_data_, ((NetI2pDataI2npDataMessage *) nil_chk(msg))->_data_);
  }
  else {
    return false;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[DataMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tData: "])) appendWithNSString:NetI2pDataDataHelper_toStringWithByteArray_withInt_(_data_, 64)];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getData);
  methods[2].selector = @selector(setDataWithByteArray:);
  methods[3].selector = @selector(getSize);
  methods[4].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[5].selector = @selector(calculateWrittenLength);
  methods[6].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[7].selector = @selector(getType);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2npDataMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setData", "[B", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2npDataMessage = { "DataMessage", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npDataMessage;
}

@end

void NetI2pDataI2npDataMessage_initWithNetI2pI2PAppContext_(NetI2pDataI2npDataMessage *self, NetI2pI2PAppContext *context) {
  NetI2pDataI2npFastI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
}

NetI2pDataI2npDataMessage *new_NetI2pDataI2npDataMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npDataMessage, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataI2npDataMessage *create_NetI2pDataI2npDataMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npDataMessage, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npDataMessage)
