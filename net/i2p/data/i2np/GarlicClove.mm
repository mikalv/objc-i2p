//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/GarlicClove.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Date.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/i2np/DeliveryInstructions.h"
#include "net/i2p/data/i2np/GarlicClove.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pDataI2npGarlicClove () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pDataI2npDeliveryInstructions *_instructions_;
  id<NetI2pDataI2npI2NPMessage> _msg_;
  jlong _cloveId_;
  JavaUtilDate *_expiration_;
  NetI2pDataCertificate *_certificate_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npGarlicClove, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npGarlicClove, _instructions_, NetI2pDataI2npDeliveryInstructions *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npGarlicClove, _msg_, id<NetI2pDataI2npI2NPMessage>)
J2OBJC_FIELD_SETTER(NetI2pDataI2npGarlicClove, _expiration_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npGarlicClove, _certificate_, NetI2pDataCertificate *)

inline jlong NetI2pDataI2npGarlicClove_get_serialVersionUID(void);
#define NetI2pDataI2npGarlicClove_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataI2npGarlicClove, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2npGarlicClove__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2npGarlicClove__Annotations$1(void);

@implementation NetI2pDataI2npGarlicClove

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pDataI2npDeliveryInstructions *)getInstructions {
  return _instructions_;
}

- (void)setInstructionsWithNetI2pDataI2npDeliveryInstructions:(NetI2pDataI2npDeliveryInstructions *)instr {
  JreStrongAssign(&_instructions_, instr);
}

- (id<NetI2pDataI2npI2NPMessage>)getData {
  return _msg_;
}

- (void)setDataWithNetI2pDataI2npI2NPMessage:(id<NetI2pDataI2npI2NPMessage>)msg {
  JreStrongAssign(&_msg_, msg);
}

- (jlong)getCloveId {
  return _cloveId_;
}

- (void)setCloveIdWithLong:(jlong)id_ {
  _cloveId_ = id_;
}

- (JavaUtilDate *)getExpiration {
  return _expiration_;
}

- (void)setExpirationWithJavaUtilDate:(JavaUtilDate *)exp {
  JreStrongAssign(&_expiration_, exp);
}

- (NetI2pDataCertificate *)getCertificate {
  return _certificate_;
}

- (void)setCertificateWithNetI2pDataCertificate:(NetI2pDataCertificate *)cert {
  JreStrongAssign(&_certificate_, cert);
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset {
  jint cur = offset;
  JreStrongAssign(&_instructions_, NetI2pDataI2npDeliveryInstructions_createWithByteArray_withInt_(source, offset));
  cur += [((NetI2pDataI2npDeliveryInstructions *) nil_chk(_instructions_)) getSize];
  @try {
    NetI2pDataI2npI2NPMessageHandler *handler = create_NetI2pDataI2npI2NPMessageHandler_initWithNetI2pI2PAppContext_(_context_);
    cur += [handler readMessageWithByteArray:source withInt:cur];
    JreStrongAssign(&_msg_, [handler lastRead]);
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"Unable to read the message from a garlic clove", ime);
  }
  _cloveId_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(source, cur, 4);
  cur += 4;
  JreStrongAssign(&_expiration_, NetI2pDataDataHelper_fromDateWithByteArray_withInt_(source, cur));
  cur += NetI2pDataDataHelper_DATE_LENGTH;
  JreStrongAssign(&_certificate_, NetI2pDataCertificate_createWithByteArray_withInt_(source, cur));
  cur += [((NetI2pDataCertificate *) nil_chk(_certificate_)) size];
  return cur - offset;
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *rv = [IOSByteArray arrayWithLength:[self estimateSize]];
  jint offset = 0;
  offset += [((NetI2pDataI2npDeliveryInstructions *) nil_chk(_instructions_)) writeBytesWithByteArray:rv withInt:offset];
  @try {
    IOSByteArray *m = [((id<NetI2pDataI2npI2NPMessage>) nil_chk(_msg_)) toByteArray];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, rv, offset, ((IOSByteArray *) nil_chk(m))->size_);
    offset += m->size_;
  }
  @catch (JavaLangRuntimeException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$", @"Unable to write: ", _msg_, @": ", [e getMessage]));
  }
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(rv, offset, 4, _cloveId_);
  offset += 4;
  NetI2pDataDataHelper_toDateWithByteArray_withInt_withLong_(rv, offset, [((JavaUtilDate *) nil_chk(_expiration_)) getTime]);
  offset += NetI2pDataDataHelper_DATE_LENGTH;
  offset += [((NetI2pDataCertificate *) nil_chk(_certificate_)) writeBytesWithByteArray:rv withInt:offset];
  if (offset != rv->size_) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pDataI2npGarlicClove_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:JreStrcat("$I$I", @"Clove offset: ", offset, @" but estimated length: ", rv->size_)];
  }
  return rv;
}

- (jint)estimateSize {
  return [((NetI2pDataI2npDeliveryInstructions *) nil_chk(_instructions_)) getSize] + [((id<NetI2pDataI2npI2NPMessage>) nil_chk(_msg_)) getMessageSize] + 4 + NetI2pDataDataHelper_DATE_LENGTH + [((NetI2pDataCertificate *) nil_chk(_certificate_)) size];
}

- (jboolean)isEqual:(id)obj {
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pDataI2npGarlicClove class]])) return false;
  NetI2pDataI2npGarlicClove *clove = (NetI2pDataI2npGarlicClove *) cast_chk(obj, [NetI2pDataI2npGarlicClove class]);
  return NetI2pDataDataHelper_eqWithId_withId_(_certificate_, ((NetI2pDataI2npGarlicClove *) nil_chk(clove))->_certificate_) && _cloveId_ == clove->_cloveId_ && NetI2pDataDataHelper_eqWithId_withId_(_msg_, clove->_msg_) && NetI2pDataDataHelper_eqWithId_withId_(_expiration_, clove->_expiration_) && NetI2pDataDataHelper_eqWithId_withId_(_instructions_, clove->_instructions_);
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_(_certificate_) ^ (jint) _cloveId_ ^ NetI2pDataDataHelper_hashCodeWithId_(_msg_) ^ NetI2pDataDataHelper_hashCodeWithJavaUtilDate_(_expiration_) ^ NetI2pDataDataHelper_hashCodeWithId_(_instructions_);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:@"[GarlicClove: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tInstructions: "])) appendWithId:_instructions_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tCertificate: "])) appendWithId:_certificate_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tClove ID: "])) appendWithLong:_cloveId_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tExpiration: "])) appendWithId:_expiration_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tData: "])) appendWithId:_msg_];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_instructions_);
  RELEASE_(_msg_);
  RELEASE_(_expiration_);
  RELEASE_(_certificate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npDeliveryInstructions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, 13, -1 },
    { NULL, "I", 0x1, 11, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, 18, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getInstructions);
  methods[2].selector = @selector(setInstructionsWithNetI2pDataI2npDeliveryInstructions:);
  methods[3].selector = @selector(getData);
  methods[4].selector = @selector(setDataWithNetI2pDataI2npI2NPMessage:);
  methods[5].selector = @selector(getCloveId);
  methods[6].selector = @selector(setCloveIdWithLong:);
  methods[7].selector = @selector(getExpiration);
  methods[8].selector = @selector(setExpirationWithJavaUtilDate:);
  methods[9].selector = @selector(getCertificate);
  methods[10].selector = @selector(setCertificateWithNetI2pDataCertificate:);
  methods[11].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[12].selector = @selector(readBytesWithByteArray:withInt:);
  methods[13].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[14].selector = @selector(toByteArray);
  methods[15].selector = @selector(estimateSize);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(hash);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = NetI2pDataI2npGarlicClove_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "_instructions_", "LNetI2pDataI2npDeliveryInstructions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_msg_", "LNetI2pDataI2npI2NPMessage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_cloveId_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_expiration_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_certificate_", "LNetI2pDataCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setInstructions", "LNetI2pDataI2npDeliveryInstructions;", "setData", "LNetI2pDataI2npI2NPMessage;", "setCloveId", "J", "setExpiration", "LJavaUtilDate;", "setCertificate", "LNetI2pDataCertificate;", "readBytes", "LJavaIoInputStream;", (void *)&NetI2pDataI2npGarlicClove__Annotations$0, "[BI", "LNetI2pDataDataFormatException;", "writeBytes", "LJavaIoOutputStream;", (void *)&NetI2pDataI2npGarlicClove__Annotations$1, "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2npGarlicClove = { "GarlicClove", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 19, 7, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npGarlicClove;
}

@end

void NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(NetI2pDataI2npGarlicClove *self, NetI2pI2PAppContext *context) {
  NetI2pDataDataStructureImpl_init(self);
  JreStrongAssign(&self->_context_, context);
  self->_cloveId_ = -1;
}

NetI2pDataI2npGarlicClove *new_NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npGarlicClove, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataI2npGarlicClove *create_NetI2pDataI2npGarlicClove_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npGarlicClove, initWithNetI2pI2PAppContext_, context)
}

IOSObjectArray *NetI2pDataI2npGarlicClove__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataI2npGarlicClove__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npGarlicClove)
