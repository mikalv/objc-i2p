//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/DatabaseSearchReplyMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/FastI2NPMessageImpl.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"

@interface NetI2pDataI2npDatabaseSearchReplyMessage () {
 @public
  NetI2pDataHash *_key_;
  id<JavaUtilList> _peerHashes_;
  NetI2pDataHash *_from_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseSearchReplyMessage, _key_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseSearchReplyMessage, _peerHashes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pDataI2npDatabaseSearchReplyMessage, _from_, NetI2pDataHash *)

@implementation NetI2pDataI2npDatabaseSearchReplyMessage

+ (jint)MESSAGE_TYPE {
  return NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pDataHash *)getSearchKey {
  return _key_;
}

- (void)setSearchKeyWithNetI2pDataHash:(NetI2pDataHash *)key {
  if (_key_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_key_, key);
}

- (jint)getNumReplies {
  return [((id<JavaUtilList>) nil_chk(_peerHashes_)) size];
}

- (NetI2pDataHash *)getReplyWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(_peerHashes_)) getWithInt:index];
}

- (void)addReplyWithNetI2pDataHash:(NetI2pDataHash *)peer {
  [((id<JavaUtilList>) nil_chk(_peerHashes_)) addWithId:peer];
}

- (NetI2pDataHash *)getFromHash {
  return _from_;
}

- (void)setFromHashWithNetI2pDataHash:(NetI2pDataHash *)from {
  JreStrongAssign(&_from_, from);
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (type != NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  jint curIndex = offset;
  JreStrongAssign(&_key_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
  curIndex += NetI2pDataHash_HASH_LENGTH;
  jint num = IOSByteArray_Get(nil_chk(data), curIndex) & (jint) 0xff;
  curIndex++;
  [((id<JavaUtilList>) nil_chk(_peerHashes_)) clear];
  for (jint i = 0; i < num; i++) {
    NetI2pDataHash *p = NetI2pDataHash_createWithByteArray_withInt_(data, curIndex);
    curIndex += NetI2pDataHash_HASH_LENGTH;
    [self addReplyWithNetI2pDataHash:p];
  }
  JreStrongAssign(&_from_, NetI2pDataHash_createWithByteArray_withInt_(data, curIndex));
  curIndex += NetI2pDataHash_HASH_LENGTH;
}

- (jint)calculateWrittenLength {
  return NetI2pDataHash_HASH_LENGTH + 1 + [self getNumReplies] * NetI2pDataHash_HASH_LENGTH + NetI2pDataHash_HASH_LENGTH;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  if (_key_ == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Key in reply to not specified");
  if (_from_ == nil) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"No 'from' address specified!");
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([_key_ getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
  curIndex += NetI2pDataHash_HASH_LENGTH;
  *IOSByteArray_GetRef(nil_chk(outArg), curIndex++) = (jbyte) [((id<JavaUtilList>) nil_chk(_peerHashes_)) size];
  for (jint i = 0; i < [self getNumReplies]; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk([self getReplyWithInt:i])) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
    curIndex += NetI2pDataHash_HASH_LENGTH;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataHash *) nil_chk(_from_)) getData], 0, outArg, curIndex, NetI2pDataHash_HASH_LENGTH);
  curIndex += NetI2pDataHash_HASH_LENGTH;
  return curIndex;
}

- (jint)getType {
  return NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE;
}

- (jboolean)isEqual:(id)object {
  if ((object != nil) && ([object isKindOfClass:[NetI2pDataI2npDatabaseSearchReplyMessage class]])) {
    NetI2pDataI2npDatabaseSearchReplyMessage *msg = (NetI2pDataI2npDatabaseSearchReplyMessage *) cast_chk(object, [NetI2pDataI2npDatabaseSearchReplyMessage class]);
    return NetI2pDataDataHelper_eqWithId_withId_(_key_, ((NetI2pDataI2npDatabaseSearchReplyMessage *) nil_chk(msg))->_key_) && NetI2pDataDataHelper_eqWithId_withId_(_from_, msg->_from_) && NetI2pDataDataHelper_eqWithJavaUtilCollection_withJavaUtilCollection_(_peerHashes_, msg->_peerHashes_);
  }
  else {
    return false;
  }
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithId_(_key_) + NetI2pDataDataHelper_hashCodeWithId_(_from_) + NetI2pDataDataHelper_hashCodeWithJavaUtilCollection_(_peerHashes_);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[DatabaseSearchReplyMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSearch Key: "])) appendWithId:_key_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tReplies: # = "])) appendWithInt:[self getNumReplies]];
  for (jint i = 0; i < [self getNumReplies]; i++) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\tReply ["])) appendWithInt:i])) appendWithNSString:@"]: "])) appendWithId:[self getReplyWithInt:i]];
  }
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tFrom: "])) appendWithId:_from_];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_key_);
  RELEASE_(_peerHashes_);
  RELEASE_(_from_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 10, 11, 9, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getSearchKey);
  methods[2].selector = @selector(setSearchKeyWithNetI2pDataHash:);
  methods[3].selector = @selector(getNumReplies);
  methods[4].selector = @selector(getReplyWithInt:);
  methods[5].selector = @selector(addReplyWithNetI2pDataHash:);
  methods[6].selector = @selector(getFromHash);
  methods[7].selector = @selector(setFromHashWithNetI2pDataHash:);
  methods[8].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[9].selector = @selector(calculateWrittenLength);
  methods[10].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[11].selector = @selector(getType);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MESSAGE_TYPE", "I", .constantValue.asInt = NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE, 0x19, -1, -1, -1, -1 },
    { "_key_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_peerHashes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "_from_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setSearchKey", "LNetI2pDataHash;", "getReply", "I", "addReply", "setFromHash", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI", "equals", "LNSObject;", "hashCode", "toString", "Ljava/util/List<Lnet/i2p/data/Hash;>;" };
  static const J2ObjcClassInfo _NetI2pDataI2npDatabaseSearchReplyMessage = { "DatabaseSearchReplyMessage", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npDatabaseSearchReplyMessage;
}

@end

void NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_(NetI2pDataI2npDatabaseSearchReplyMessage *self, NetI2pI2PAppContext *context) {
  NetI2pDataI2npFastI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
  JreStrongAssignAndConsume(&self->_peerHashes_, new_JavaUtilArrayList_initWithInt_(3));
}

NetI2pDataI2npDatabaseSearchReplyMessage *new_NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npDatabaseSearchReplyMessage, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataI2npDatabaseSearchReplyMessage *create_NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npDatabaseSearchReplyMessage, initWithNetI2pI2PAppContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npDatabaseSearchReplyMessage)
