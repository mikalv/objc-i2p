//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/TunnelBuildMessageBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/i2np/EncryptedBuildRecord.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageImpl.h"
#include "net/i2p/data/i2np/TunnelBuildMessageBase.h"

@implementation NetI2pDataI2npTunnelBuildMessageBase

+ (jint)MAX_RECORD_COUNT {
  return NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT;
}

+ (jint)RECORD_SIZE {
  return NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npTunnelBuildMessageBase_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)records {
  NetI2pDataI2npTunnelBuildMessageBase_initWithNetI2pI2PAppContext_withInt_(self, context, records);
  return self;
}

- (void)setRecordWithInt:(jint)index
withNetI2pDataI2npEncryptedBuildRecord:(NetI2pDataI2npEncryptedBuildRecord *)record {
  IOSObjectArray_Set(nil_chk(_records_), index, record);
}

- (NetI2pDataI2npEncryptedBuildRecord *)getRecordWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(_records_), index);
}

- (jint)getRecordCount {
  return RECORD_COUNT_;
}

- (jint)calculateWrittenLength {
  return NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE * RECORD_COUNT_;
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (type != [self getType]) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  if (dataSize != [self calculateWrittenLength]) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I$IC", @"Wrong length (expects ", [self calculateWrittenLength], @", recv ", dataSize, ')'));
  for (jint i = 0; i < RECORD_COUNT_; i++) {
    jint off = offset + (i * NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE);
    IOSByteArray *rec = [IOSByteArray arrayWithLength:NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, off, rec, 0, NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE);
    [self setRecordWithInt:i withNetI2pDataI2npEncryptedBuildRecord:create_NetI2pDataI2npEncryptedBuildRecord_initWithByteArray_(rec)];
  }
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  jint remaining = ((IOSByteArray *) nil_chk(outArg))->size_ - (curIndex + [self calculateWrittenLength]);
  if (remaining < 0) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$IC", @"Not large enough (too short by ", remaining, ')'));
  for (jint i = 0; i < RECORD_COUNT_; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((NetI2pDataI2npEncryptedBuildRecord *) nil_chk(IOSObjectArray_Get(nil_chk(_records_), i))) getData], 0, outArg, curIndex, NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE);
    curIndex += NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE;
  }
  return curIndex;
}

- (void)dealloc {
  RELEASE_(_records_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npEncryptedBuildRecord;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 10, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withInt:);
  methods[2].selector = @selector(setRecordWithInt:withNetI2pDataI2npEncryptedBuildRecord:);
  methods[3].selector = @selector(getRecordWithInt:);
  methods[4].selector = @selector(getRecordCount);
  methods[5].selector = @selector(calculateWrittenLength);
  methods[6].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_records_", "[LNetI2pDataI2npEncryptedBuildRecord;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "RECORD_COUNT_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "MAX_RECORD_COUNT", "I", .constantValue.asInt = NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT, 0x19, -1, -1, -1, -1 },
    { "RECORD_SIZE", "I", .constantValue.asInt = NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;I", "setRecord", "ILNetI2pDataI2npEncryptedBuildRecord;", "getRecord", "I", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI" };
  static const J2ObjcClassInfo _NetI2pDataI2npTunnelBuildMessageBase = { "TunnelBuildMessageBase", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x401, 8, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npTunnelBuildMessageBase;
}

@end

void NetI2pDataI2npTunnelBuildMessageBase_initWithNetI2pI2PAppContext_(NetI2pDataI2npTunnelBuildMessageBase *self, NetI2pI2PAppContext *context) {
  NetI2pDataI2npTunnelBuildMessageBase_initWithNetI2pI2PAppContext_withInt_(self, context, NetI2pDataI2npTunnelBuildMessageBase_MAX_RECORD_COUNT);
}

void NetI2pDataI2npTunnelBuildMessageBase_initWithNetI2pI2PAppContext_withInt_(NetI2pDataI2npTunnelBuildMessageBase *self, NetI2pI2PAppContext *context, jint records) {
  NetI2pDataI2npI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
  if (records > 0) {
    self->RECORD_COUNT_ = records;
    JreStrongAssignAndConsume(&self->_records_, [IOSObjectArray newArrayWithLength:records type:NetI2pDataI2npEncryptedBuildRecord_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npTunnelBuildMessageBase)
