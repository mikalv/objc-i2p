//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/I2NPMessageImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/DataMessage.h"
#include "net/i2p/data/i2np/DatabaseLookupMessage.h"
#include "net/i2p/data/i2np/DatabaseSearchReplyMessage.h"
#include "net/i2p/data/i2np/DatabaseStoreMessage.h"
#include "net/i2p/data/i2np/DeliveryStatusMessage.h"
#include "net/i2p/data/i2np/GarlicMessage.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageHandler.h"
#include "net/i2p/data/i2np/I2NPMessageImpl.h"
#include "net/i2p/data/i2np/TunnelBuildMessage.h"
#include "net/i2p/data/i2np/TunnelBuildReplyMessage.h"
#include "net/i2p/data/i2np/TunnelDataMessage.h"
#include "net/i2p/data/i2np/TunnelGatewayMessage.h"
#include "net/i2p/data/i2np/UnknownI2NPMessage.h"
#include "net/i2p/data/i2np/VariableTunnelBuildMessage.h"
#include "net/i2p/data/i2np/VariableTunnelBuildReplyMessage.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleByteCache.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline id<JavaUtilMap> NetI2pDataI2npI2NPMessageImpl_get__builders(void);
static id<JavaUtilMap> NetI2pDataI2npI2NPMessageImpl__builders;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataI2npI2NPMessageImpl, _builders, id<JavaUtilMap>)

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$2(void);

@interface NetI2pDataI2npI2NPMessageImpl_Builder : NSObject

@end

J2OBJC_INITIALIZED_DEFN(NetI2pDataI2npI2NPMessageImpl)

@implementation NetI2pDataI2npI2NPMessageImpl

+ (jlong)DEFAULT_EXPIRATION_MS {
  return NetI2pDataI2npI2NPMessageImpl_DEFAULT_EXPIRATION_MS;
}

+ (jint)CHECKSUM_LENGTH {
  return NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH;
}

+ (jint)HEADER_LENGTH {
  return NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH;
}

+ (void)registerBuilderWithNetI2pDataI2npI2NPMessageImpl_Builder:(id<NetI2pDataI2npI2NPMessageImpl_Builder>)builder
                                                         withInt:(jint)type {
  NetI2pDataI2npI2NPMessageImpl_registerBuilderWithNetI2pDataI2npI2NPMessageImpl_Builder_withInt_(builder, type);
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataI2npI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)readBytesWithByteArray:(IOSByteArray *)data
                       withInt:(jint)type
                       withInt:(jint)offset {
  return [self readBytesWithByteArray:data withInt:type withInt:offset withInt:((IOSByteArray *) nil_chk(data))->size_ - offset];
}

- (jint)readBytesWithByteArray:(IOSByteArray *)data
                       withInt:(jint)type
                       withInt:(jint)offset
                       withInt:(jint)maxLen {
  jint headerSize = NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH;
  if (type >= 0) headerSize--;
  if (maxLen < headerSize) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"Payload is too short ", maxLen));
  jint cur = offset;
  if (type < 0) {
    type = IOSByteArray_Get(nil_chk(data), cur) & (jint) 0xff;
    cur++;
  }
  _uniqueId_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, cur, 4);
  cur += 4;
  _expiration_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, cur, NetI2pDataDataHelper_DATE_LENGTH);
  cur += NetI2pDataDataHelper_DATE_LENGTH;
  jint size = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, cur, 2);
  cur += 2;
  if (cur + size > ((IOSByteArray *) nil_chk(data))->size_ || headerSize + size > maxLen) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I$I$I$I$I$$", @"Payload is too short [data.len=", data->size_, @"maxLen=", maxLen, @" offset=", offset, @" cur=", cur, @" wanted=", size, @"]: ", [[self java_getClass] getSimpleName]));
  jint sz = JavaLangMath_minWithInt_withInt_(size, maxLen - headerSize);
  IOSByteArray *calc = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) sha])) calculateHashWithByteArray:data withInt:cur + NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH withInt:sz withByteArray:calc withInt:0];
  jboolean eq = NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(data, cur, calc, 0, NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH);
  cur += NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH;
  NetI2pUtilSimpleByteCache_release__WithByteArray_(calc);
  if (!eq) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I$$", @"Bad checksum on ", size, @" byte I2NP ", [[self java_getClass] getSimpleName]));
  if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$I$J$J", @"Reading bytes: type = ", type, @" / uniqueId : ", _uniqueId_, @" / expiration : ", _expiration_)];
  [self readMessageWithByteArray:data withInt:cur withInt:sz withInt:type];
  cur += sz;
  return cur - offset;
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jlong)getUniqueId {
  if (_uniqueId_ < 0) {
    _uniqueId_ = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
  }
  return _uniqueId_;
}

- (void)setUniqueIdWithLong:(jlong)id_ {
  _uniqueId_ = id_;
}

- (jlong)getMessageExpiration {
  return _expiration_;
}

- (void)setMessageExpirationWithLong:(jlong)exp {
  _expiration_ = exp;
}

- (jint)getMessageSize {
  @synchronized(self) {
    return [self calculateWrittenLength] + (15 + NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH);
  }
}

- (jint)getRawMessageSize {
  @synchronized(self) {
    return [self calculateWrittenLength] + 5;
  }
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *data = [IOSByteArray arrayWithLength:[self getMessageSize]];
  jint written = [self toByteArrayWithByteArray:data];
  if (written != data->size_) {
    [((NetI2pUtilLog *) nil_chk(_log_)) logWithInt:NetI2pUtilLog_CRIT withNSString:JreStrcat("$I$I$I$I$$", @"Error writing out ", data->size_, @" (written: ", written, @", msgSize: ", [self getMessageSize], @", writtenLen: ", [self calculateWrittenLength], @") for ", [[self java_getClass] getSimpleName])];
    return nil;
  }
  return data;
}

- (jint)toByteArrayWithByteArray:(IOSByteArray *)buffer {
  return [self toByteArrayWithByteArray:buffer withInt:0];
}

- (jint)toByteArrayWithByteArray:(IOSByteArray *)buffer
                         withInt:(jint)off {
  jint start = off;
  @try {
    jint rv = [self writeMessageBodyWithByteArray:buffer withInt:off + NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH];
    jint payloadLen = rv - (off + NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH);
    IOSByteArray *h = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
    [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) sha])) calculateHashWithByteArray:buffer withInt:off + NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH withInt:payloadLen withByteArray:h withInt:0];
    *IOSByteArray_GetRef(nil_chk(buffer), off++) = (jbyte) [self getType];
    if (_uniqueId_ < 0) {
      _uniqueId_ = [((NetI2pUtilRandomSource *) nil_chk([_context_ random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
    }
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, 4, _uniqueId_);
    off += 4;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, NetI2pDataDataHelper_DATE_LENGTH, _expiration_);
    off += NetI2pDataDataHelper_DATE_LENGTH;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, 2, payloadLen);
    off += 2;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(h, 0, buffer, off, NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH);
    NetI2pUtilSimpleByteCache_release__WithByteArray_(h);
    return rv;
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) logManager])) getLogWithIOSClass:[self java_getClass]])) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error writing" withJavaLangThrowable:ime];
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to serialize the message ", [[self java_getClass] getSimpleName]), ime);
  }
}

- (jint)calculateWrittenLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)toRawByteArrayWithByteArray:(IOSByteArray *)buffer {
  @try {
    jint off = 0;
    *IOSByteArray_GetRef(nil_chk(buffer), off++) = (jbyte) [self getType];
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, 4, (_expiration_ + 500) / 1000);
    off += 4;
    return [self writeMessageBodyWithByteArray:buffer withInt:off];
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) logManager])) getLogWithIOSClass:[self java_getClass]])) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error writing" withJavaLangThrowable:ime];
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to serialize the message ", [[self java_getClass] getSimpleName]), ime);
  }
}

- (jint)toRawByteArrayNTCP2WithByteArray:(IOSByteArray *)buffer
                                 withInt:(jint)off {
  @try {
    *IOSByteArray_GetRef(nil_chk(buffer), off++) = (jbyte) [self getType];
    if (_uniqueId_ < 0) {
      _uniqueId_ = [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) random])) nextLongWithLong:NetI2pDataI2npI2NPMessage_MAX_ID_VALUE];
    }
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, 4, _uniqueId_);
    off += 4;
    NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(buffer, off, 4, (_expiration_ + 500) / 1000);
    off += 4;
    return [self writeMessageBodyWithByteArray:buffer withInt:off];
  }
  @catch (NetI2pDataI2npI2NPMessageException *ime) {
    [((NetI2pUtilLog *) nil_chk([((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) logManager])) getLogWithIOSClass:[self java_getClass]])) logWithInt:NetI2pUtilLog_CRIT withNSString:@"Error writing" withJavaLangThrowable:ime];
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to serialize the message ", [[self java_getClass] getSimpleName]), ime);
  }
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type
withNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  @try {
    [self readMessageWithByteArray:data withInt:offset withInt:dataSize withInt:type];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Error reading the message", iae);
  }
}

+ (id<NetI2pDataI2npI2NPMessage>)fromRawByteArrayWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                                           withByteArray:(IOSByteArray *)buffer
                                                                 withInt:(jint)offset
                                                                 withInt:(jint)len
                                    withNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  return NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayWithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(ctx, buffer, offset, len, handler);
}

+ (id<NetI2pDataI2npI2NPMessage>)fromRawByteArrayNTCP2WithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                                                withByteArray:(IOSByteArray *)buffer
                                                                      withInt:(jint)offset
                                                                      withInt:(jint)len
                                         withNetI2pDataI2npI2NPMessageHandler:(NetI2pDataI2npI2NPMessageHandler *)handler {
  return NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayNTCP2WithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(ctx, buffer, offset, len, handler);
}

+ (id<NetI2pDataI2npI2NPMessage>)createMessageWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                                              withInt:(jint)type {
  return NetI2pDataI2npI2NPMessageImpl_createMessageWithNetI2pI2PAppContext_withInt_(context, type);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x19, 0, 1, -1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, 6, -1 },
    { NULL, "I", 0x1, 4, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 9, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, 12, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 19, 18, 8, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 8, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x9, 24, 25, 8, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x9, 26, 25, 8, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x9, 27, 28, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(registerBuilderWithNetI2pDataI2npI2NPMessageImpl_Builder:withInt:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[2].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[3].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(readBytesWithByteArray:withInt:withInt:withInt:);
  methods[5].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[6].selector = @selector(getUniqueId);
  methods[7].selector = @selector(setUniqueIdWithLong:);
  methods[8].selector = @selector(getMessageExpiration);
  methods[9].selector = @selector(setMessageExpirationWithLong:);
  methods[10].selector = @selector(getMessageSize);
  methods[11].selector = @selector(getRawMessageSize);
  methods[12].selector = @selector(toByteArray);
  methods[13].selector = @selector(toByteArrayWithByteArray:);
  methods[14].selector = @selector(toByteArrayWithByteArray:withInt:);
  methods[15].selector = @selector(calculateWrittenLength);
  methods[16].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[17].selector = @selector(toRawByteArrayWithByteArray:);
  methods[18].selector = @selector(toRawByteArrayNTCP2WithByteArray:withInt:);
  methods[19].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:withNetI2pDataI2npI2NPMessageHandler:);
  methods[20].selector = @selector(fromRawByteArrayWithNetI2pI2PAppContext:withByteArray:withInt:withInt:withNetI2pDataI2npI2NPMessageHandler:);
  methods[21].selector = @selector(fromRawByteArrayNTCP2WithNetI2pI2PAppContext:withByteArray:withInt:withInt:withNetI2pDataI2npI2NPMessageHandler:);
  methods[22].selector = @selector(createMessageWithNetI2pI2PAppContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_expiration_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_uniqueId_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DEFAULT_EXPIRATION_MS", "J", .constantValue.asLong = NetI2pDataI2npI2NPMessageImpl_DEFAULT_EXPIRATION_MS, 0x19, -1, -1, -1, -1 },
    { "CHECKSUM_LENGTH", "I", .constantValue.asInt = NetI2pDataI2npI2NPMessageImpl_CHECKSUM_LENGTH, 0x19, -1, -1, -1, -1 },
    { "HEADER_LENGTH", "I", .constantValue.asInt = NetI2pDataI2npI2NPMessageImpl_HEADER_LENGTH, 0x19, -1, -1, -1, -1 },
    { "_builders", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 29, 30, -1 },
  };
  static const void *ptrTable[] = { "registerBuilder", "LNetI2pDataI2npI2NPMessageImpl_Builder;I", (void *)&NetI2pDataI2npI2NPMessageImpl__Annotations$0, "LNetI2pI2PAppContext;", "readBytes", "LJavaIoInputStream;", (void *)&NetI2pDataI2npI2NPMessageImpl__Annotations$1, "[BII", "LNetI2pDataI2npI2NPMessageException;", "[BIII", "writeBytes", "LJavaIoOutputStream;", (void *)&NetI2pDataI2npI2NPMessageImpl__Annotations$2, "setUniqueId", "J", "setMessageExpiration", "toByteArray", "[B", "[BI", "writeMessageBody", "toRawByteArray", "toRawByteArrayNTCP2", "readMessage", "[BIIILNetI2pDataI2npI2NPMessageHandler;", "fromRawByteArray", "LNetI2pI2PAppContext;[BIILNetI2pDataI2npI2NPMessageHandler;", "fromRawByteArrayNTCP2", "createMessage", "LNetI2pI2PAppContext;I", &NetI2pDataI2npI2NPMessageImpl__builders, "Ljava/util/Map<Ljava/lang/Integer;Lnet/i2p/data/i2np/I2NPMessageImpl$Builder;>;", "LNetI2pDataI2npI2NPMessageImpl_Builder;" };
  static const J2ObjcClassInfo _NetI2pDataI2npI2NPMessageImpl = { "I2NPMessageImpl", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x401, 23, 8, -1, 31, -1, -1, -1 };
  return &_NetI2pDataI2npI2NPMessageImpl;
}

+ (void)initialize {
  if (self == [NetI2pDataI2npI2NPMessageImpl class]) {
    JreStrongAssignAndConsume(&NetI2pDataI2npI2NPMessageImpl__builders, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(1));
    J2OBJC_SET_INITIALIZED(NetI2pDataI2npI2NPMessageImpl)
  }
}

@end

void NetI2pDataI2npI2NPMessageImpl_registerBuilderWithNetI2pDataI2npI2NPMessageImpl_Builder_withInt_(id<NetI2pDataI2npI2NPMessageImpl_Builder> builder, jint type) {
  NetI2pDataI2npI2NPMessageImpl_initialize();
  [((id<JavaUtilMap>) nil_chk(NetI2pDataI2npI2NPMessageImpl__builders)) putWithId:JavaLangInteger_valueOfWithInt_(type) withId:builder];
}

void NetI2pDataI2npI2NPMessageImpl_initWithNetI2pI2PAppContext_(NetI2pDataI2npI2NPMessageImpl *self, NetI2pI2PAppContext *context) {
  NetI2pDataDataStructureImpl_init(self);
  self->_uniqueId_ = -1;
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pDataI2npI2NPMessageImpl_class_()]);
  self->_expiration_ = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(self->_context_)) clock])) now] + NetI2pDataI2npI2NPMessageImpl_DEFAULT_EXPIRATION_MS;
}

id<NetI2pDataI2npI2NPMessage> NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayWithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(NetI2pI2PAppContext *ctx, IOSByteArray *buffer, jint offset, jint len, NetI2pDataI2npI2NPMessageHandler *handler) {
  NetI2pDataI2npI2NPMessageImpl_initialize();
  jint type = IOSByteArray_Get(nil_chk(buffer), offset) & (jint) 0xff;
  offset++;
  id<NetI2pDataI2npI2NPMessage> msg = NetI2pDataI2npI2NPMessageImpl_createMessageWithNetI2pI2PAppContext_withInt_(ctx, type);
  @try {
    jlong expiration = (NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(buffer, offset, 4) * 1000) + 500;
    offset += 4;
    jint dataSize = len - 1 - 4;
    [((id<NetI2pDataI2npI2NPMessage>) nil_chk(msg)) readMessageWithByteArray:buffer withInt:offset withInt:dataSize withInt:type withNetI2pDataI2npI2NPMessageHandler:handler];
    [msg setMessageExpirationWithLong:expiration];
    return msg;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Corrupt message (negative expiration)", iae);
  }
}

id<NetI2pDataI2npI2NPMessage> NetI2pDataI2npI2NPMessageImpl_fromRawByteArrayNTCP2WithNetI2pI2PAppContext_withByteArray_withInt_withInt_withNetI2pDataI2npI2NPMessageHandler_(NetI2pI2PAppContext *ctx, IOSByteArray *buffer, jint offset, jint len, NetI2pDataI2npI2NPMessageHandler *handler) {
  NetI2pDataI2npI2NPMessageImpl_initialize();
  jint type = IOSByteArray_Get(nil_chk(buffer), offset) & (jint) 0xff;
  offset++;
  id<NetI2pDataI2npI2NPMessage> msg = NetI2pDataI2npI2NPMessageImpl_createMessageWithNetI2pI2PAppContext_withInt_(ctx, type);
  @try {
    jlong id_ = NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(buffer, offset, 4);
    offset += 4;
    jlong expiration = (NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(buffer, offset, 4) * 1000) + 500;
    offset += 4;
    jint dataSize = len - 9;
    [((id<NetI2pDataI2npI2NPMessage>) nil_chk(msg)) readMessageWithByteArray:buffer withInt:offset withInt:dataSize withInt:type withNetI2pDataI2npI2NPMessageHandler:handler];
    [msg setUniqueIdWithLong:id_];
    [msg setMessageExpirationWithLong:expiration];
    return msg;
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_withJavaLangThrowable_(@"Corrupt message (negative expiration)", iae);
  }
}

id<NetI2pDataI2npI2NPMessage> NetI2pDataI2npI2NPMessageImpl_createMessageWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint type) {
  NetI2pDataI2npI2NPMessageImpl_initialize();
  {
    id<NetI2pDataI2npI2NPMessageImpl_Builder> builder;
    switch (type) {
      case NetI2pDataI2npDatabaseStoreMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npDatabaseStoreMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npDatabaseLookupMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npDatabaseLookupMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npDatabaseSearchReplyMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npDatabaseSearchReplyMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npDeliveryStatusMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npDeliveryStatusMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npGarlicMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npGarlicMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npTunnelDataMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npTunnelDataMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npTunnelGatewayMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npTunnelGatewayMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npDataMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npDataMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npTunnelBuildMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npTunnelBuildMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npTunnelBuildReplyMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npVariableTunnelBuildMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npVariableTunnelBuildMessage_initWithNetI2pI2PAppContext_(context);
      case NetI2pDataI2npVariableTunnelBuildReplyMessage_MESSAGE_TYPE:
      return create_NetI2pDataI2npVariableTunnelBuildReplyMessage_initWithNetI2pI2PAppContext_(context);
      default:
      builder = [((id<JavaUtilMap>) nil_chk(NetI2pDataI2npI2NPMessageImpl__builders)) getWithId:JavaLangInteger_valueOfWithInt_(type)];
      if (builder != nil) return [builder buildWithNetI2pI2PAppContext:context];
      return create_NetI2pDataI2npUnknownI2NPMessage_initWithNetI2pI2PAppContext_withInt_(context, type);
    }
  }
}

IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataI2npI2NPMessageImpl__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npI2NPMessageImpl)

@implementation NetI2pDataI2npI2NPMessageImpl_Builder

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(buildWithNetI2pI2PAppContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "build", "LNetI2pI2PAppContext;", "LNetI2pDataI2npI2NPMessageImpl;" };
  static const J2ObjcClassInfo _NetI2pDataI2npI2NPMessageImpl_Builder = { "Builder", "net.i2p.data.i2np", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetI2pDataI2npI2NPMessageImpl_Builder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetI2pDataI2npI2NPMessageImpl_Builder)
