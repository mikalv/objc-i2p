//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/BuildResponseRecord.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/AESEngine.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/SessionKey.h"
#include "net/i2p/data/i2np/BuildResponseRecord.h"
#include "net/i2p/data/i2np/EncryptedBuildRecord.h"
#include "net/i2p/data/i2np/TunnelBuildMessageBase.h"
#include "net/i2p/util/RandomSource.h"

@implementation NetI2pDataI2npBuildResponseRecord

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataI2npBuildResponseRecord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NetI2pDataI2npEncryptedBuildRecord *)createWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                                              withInt:(jint)status
                                             withNetI2pDataSessionKey:(NetI2pDataSessionKey *)replyKey
                                                        withByteArray:(IOSByteArray *)replyIV
                                                             withLong:(jlong)responseMessageId {
  return NetI2pDataI2npBuildResponseRecord_createWithNetI2pI2PAppContext_withInt_withNetI2pDataSessionKey_withByteArray_withLong_(ctx, status, replyKey, replyIV, responseMessageId);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npEncryptedBuildRecord;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithNetI2pI2PAppContext:withInt:withNetI2pDataSessionKey:withByteArray:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LNetI2pI2PAppContext;ILNetI2pDataSessionKey;[BJ" };
  static const J2ObjcClassInfo _NetI2pDataI2npBuildResponseRecord = { "BuildResponseRecord", "net.i2p.data.i2np", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npBuildResponseRecord;
}

@end

void NetI2pDataI2npBuildResponseRecord_init(NetI2pDataI2npBuildResponseRecord *self) {
  NSObject_init(self);
}

NetI2pDataI2npBuildResponseRecord *new_NetI2pDataI2npBuildResponseRecord_init() {
  J2OBJC_NEW_IMPL(NetI2pDataI2npBuildResponseRecord, init)
}

NetI2pDataI2npBuildResponseRecord *create_NetI2pDataI2npBuildResponseRecord_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npBuildResponseRecord, init)
}

NetI2pDataI2npEncryptedBuildRecord *NetI2pDataI2npBuildResponseRecord_createWithNetI2pI2PAppContext_withInt_withNetI2pDataSessionKey_withByteArray_withLong_(NetI2pI2PAppContext *ctx, jint status, NetI2pDataSessionKey *replyKey, IOSByteArray *replyIV, jlong responseMessageId) {
  NetI2pDataI2npBuildResponseRecord_initialize();
  IOSByteArray *rv = [IOSByteArray arrayWithLength:NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE];
  [((NetI2pUtilRandomSource *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) random])) nextBytesWithByteArray:rv withInt:NetI2pDataHash_HASH_LENGTH withInt:NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE - NetI2pDataHash_HASH_LENGTH - 1];
  NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(rv, NetI2pDataI2npTunnelBuildMessageBase_RECORD_SIZE - 1, 1, status);
  [((NetI2pCryptoSHA256Generator *) nil_chk([ctx sha])) calculateHashWithByteArray:rv withInt:NetI2pDataHash_HASH_LENGTH withInt:rv->size_ - NetI2pDataHash_HASH_LENGTH withByteArray:rv withInt:0];
  [((NetI2pCryptoAESEngine *) nil_chk([ctx aes])) encryptWithByteArray:rv withInt:0 withByteArray:rv withInt:0 withNetI2pDataSessionKey:replyKey withByteArray:replyIV withInt:rv->size_];
  return create_NetI2pDataI2npEncryptedBuildRecord_initWithByteArray_(rv);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npBuildResponseRecord)
