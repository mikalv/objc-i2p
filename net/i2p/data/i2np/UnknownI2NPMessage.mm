//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/i2np/UnknownI2NPMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/i2np/FastI2NPMessageImpl.h"
#include "net/i2p/data/i2np/I2NPMessage.h"
#include "net/i2p/data/i2np/I2NPMessageException.h"
#include "net/i2p/data/i2np/I2NPMessageImpl.h"
#include "net/i2p/data/i2np/UnknownI2NPMessage.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pDataI2npUnknownI2NPMessage () {
 @public
  IOSByteArray *_data_;
  jint _type_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataI2npUnknownI2NPMessage, _data_, IOSByteArray *)

@implementation NetI2pDataI2npUnknownI2NPMessage

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                    withInt:(jint)type {
  NetI2pDataI2npUnknownI2NPMessage_initWithNetI2pI2PAppContext_withInt_(self, context, type);
  return self;
}

- (void)readMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)dataSize
                         withInt:(jint)type {
  if (_data_ != nil) @throw create_JavaLangIllegalStateException_init();
  if (type != _type_) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Message type is incorrect for this message");
  if (dataSize > NetI2pDataI2npI2NPMessage_MAX_SIZE) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"size mismatch, too big, size=", dataSize));
  JreStrongAssignAndConsume(&_data_, [IOSByteArray newArrayWithLength:dataSize]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, offset, _data_, 0, dataSize);
}

- (jint)calculateWrittenLength {
  if (_data_ == nil) return 0;
  else return _data_->size_;
}

- (jint)writeMessageBodyWithByteArray:(IOSByteArray *)outArg
                              withInt:(jint)curIndex {
  if (_data_ != nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, 0, outArg, curIndex, _data_->size_);
    curIndex += ((IOSByteArray *) nil_chk(_data_))->size_;
  }
  return curIndex;
}

- (jint)getType {
  return _type_;
}

- (id<NetI2pDataI2npI2NPMessage>)convert {
  if (_data_ == nil || !_hasChecksum_) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(@"Illegal state");
  id<NetI2pDataI2npI2NPMessage> msg = NetI2pDataI2npI2NPMessageImpl_createMessageWithNetI2pI2PAppContext_withInt_(_context_, _type_);
  if ([msg isKindOfClass:[NetI2pDataI2npUnknownI2NPMessage class]]) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I", @"Unable to convert unknown type ", _type_));
  IOSByteArray *calc = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
  [((NetI2pCryptoSHA256Generator *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) sha])) calculateHashWithByteArray:_data_ withInt:0 withInt:((IOSByteArray *) nil_chk(_data_))->size_ withByteArray:calc withInt:0];
  jboolean eq = _checksum_ == IOSByteArray_Get(nil_chk(calc), 0);
  NetI2pUtilSimpleByteCache_release__WithByteArray_(calc);
  if (!eq) @throw create_NetI2pDataI2npI2NPMessageException_initWithNSString_(JreStrcat("$I$I", @"Bad checksum on ", ((IOSByteArray *) nil_chk(_data_))->size_, @" byte msg type ", _type_));
  [((id<NetI2pDataI2npI2NPMessage>) nil_chk(msg)) readMessageWithByteArray:_data_ withInt:0 withInt:((IOSByteArray *) nil_chk(_data_))->size_ withInt:_type_];
  [msg setUniqueIdWithLong:_uniqueId_];
  [msg setMessageExpirationWithLong:_expiration_];
  return msg;
}

- (NSUInteger)hash {
  return _type_ + NetI2pDataDataHelper_hashCodeWithByteArray_(_data_);
}

- (jboolean)isEqual:(id)object {
  if ((object != nil) && ([object isKindOfClass:[NetI2pDataI2npUnknownI2NPMessage class]])) {
    NetI2pDataI2npUnknownI2NPMessage *msg = (NetI2pDataI2npUnknownI2NPMessage *) cast_chk(object, [NetI2pDataI2npUnknownI2NPMessage class]);
    return _type_ == [((NetI2pDataI2npUnknownI2NPMessage *) nil_chk(msg)) getType] && NetI2pDataDataHelper_eqWithByteArray_withByteArray_(_data_, msg->_data_);
  }
  else {
    return false;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  [buf appendWithNSString:@"[UnknownI2NPMessage: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tType: "])) appendWithInt:_type_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tLength: "])) appendWithInt:[self calculateWrittenLength]];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2npI2NPMessage;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withInt:);
  methods[1].selector = @selector(readMessageWithByteArray:withInt:withInt:withInt:);
  methods[2].selector = @selector(calculateWrittenLength);
  methods[3].selector = @selector(writeMessageBodyWithByteArray:withInt:);
  methods[4].selector = @selector(getType);
  methods[5].selector = @selector(convert);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;I", "readMessage", "[BIII", "LNetI2pDataI2npI2NPMessageException;", "writeMessageBody", "[BI", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _NetI2pDataI2npUnknownI2NPMessage = { "UnknownI2NPMessage", "net.i2p.data.i2np", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataI2npUnknownI2NPMessage;
}

@end

void NetI2pDataI2npUnknownI2NPMessage_initWithNetI2pI2PAppContext_withInt_(NetI2pDataI2npUnknownI2NPMessage *self, NetI2pI2PAppContext *context, jint type) {
  NetI2pDataI2npFastI2NPMessageImpl_initWithNetI2pI2PAppContext_(self, context);
  self->_type_ = type;
}

NetI2pDataI2npUnknownI2NPMessage *new_NetI2pDataI2npUnknownI2NPMessage_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint type) {
  J2OBJC_NEW_IMPL(NetI2pDataI2npUnknownI2NPMessage, initWithNetI2pI2PAppContext_withInt_, context, type)
}

NetI2pDataI2npUnknownI2NPMessage *create_NetI2pDataI2npUnknownI2NPMessage_initWithNetI2pI2PAppContext_withInt_(NetI2pI2PAppContext *context, jint type) {
  J2OBJC_CREATE_IMPL(NetI2pDataI2npUnknownI2NPMessage, initWithNetI2pI2PAppContext_withInt_, context, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataI2npUnknownI2NPMessage)
