//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/router/RouterInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/security/DigestInputStream.h"
#include "java/security/MessageDigest.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/KeysAndCert.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/data/router/RouterAddress.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterInfo.h"
#include "net/i2p/data/router/SortHelper.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/OrderedProperties.h"

static jboolean (*NetI2pDataRouterRouterInfo_super$_verifySignature)(id, SEL);

@interface NetI2pDataRouterRouterInfo () {
 @public
  NetI2pDataRouterRouterIdentity *_identity_;
  volatile_jlong _published_;
  id<JavaUtilList> _addresses_;
  id<JavaUtilSet> _peers_;
  JavaUtilProperties *_options_;
  volatile_jboolean _validated_;
  volatile_jboolean _isValid_;
  volatile_id _byteified_;
  volatile_jint _hashCode_;
  volatile_jboolean _hashCodeInitialized_;
  jboolean _shouldCache_;
}

- (void)writeDataBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (void)doValidate;

@end

J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterInfo, _identity_, NetI2pDataRouterRouterIdentity *)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterInfo, _addresses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterInfo, _peers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterInfo, _options_, JavaUtilProperties *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pDataRouterRouterInfo, _byteified_, IOSByteArray *)

inline jboolean NetI2pDataRouterRouterInfo_get_CACHE_ALL(void);
#define NetI2pDataRouterRouterInfo_CACHE_ALL false
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataRouterRouterInfo, CACHE_ALL, jboolean)

__attribute__((unused)) static void NetI2pDataRouterRouterInfo_writeDataBytesWithJavaIoOutputStream_(NetI2pDataRouterRouterInfo *self, JavaIoOutputStream *outArg);

__attribute__((unused)) static void NetI2pDataRouterRouterInfo_doValidate(NetI2pDataRouterRouterInfo *self);

__attribute__((unused)) static IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$2(void);

J2OBJC_INITIALIZED_DEFN(NetI2pDataRouterRouterInfo)

NSString *NetI2pDataRouterRouterInfo_PROP_NETWORK_ID = @"netId";
NSString *NetI2pDataRouterRouterInfo_PROP_CAPABILITIES = @"caps";
NSString *NetI2pDataRouterRouterInfo_BW_CAPABILITY_CHARS = @"XPONMLK";

@implementation NetI2pDataRouterRouterInfo

+ (NSString *)PROP_NETWORK_ID {
  return NetI2pDataRouterRouterInfo_PROP_NETWORK_ID;
}

+ (NSString *)PROP_CAPABILITIES {
  return NetI2pDataRouterRouterInfo_PROP_CAPABILITIES;
}

+ (jchar)CAPABILITY_HIDDEN {
  return NetI2pDataRouterRouterInfo_CAPABILITY_HIDDEN;
}

+ (NSString *)BW_CAPABILITY_CHARS {
  return NetI2pDataRouterRouterInfo_BW_CAPABILITY_CHARS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataRouterRouterInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNetI2pDataRouterRouterInfo:(NetI2pDataRouterRouterInfo *)old {
  NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(self, old);
  return self;
}

- (jlong)getDate {
  return JreLoadVolatileLong(&_published_);
}

- (NetI2pDataKeysAndCert *)getKeysAndCert {
  return _identity_;
}

- (jint)getType {
  return NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO;
}

- (NetI2pDataRouterRouterIdentity *)getIdentity {
  return _identity_;
}

- (void)setIdentityWithNetI2pDataRouterRouterIdentity:(NetI2pDataRouterRouterIdentity *)ident {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&_identity_, ident);
  _shouldCache_ = true;
}

- (jlong)getPublished {
  return JreLoadVolatileLong(&_published_);
}

- (void)setPublishedWithLong:(jlong)published {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  JreAssignVolatileLong(&_published_, published);
}

- (jint)getAddressCount {
  return [((id<JavaUtilList>) nil_chk(_addresses_)) size];
}

- (id<JavaUtilCollection>)getAddresses {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(_addresses_);
}

- (void)setAddressesWithJavaUtilCollection:(id<JavaUtilCollection>)addresses {
  if (JreLoadVolatileId(&_signature_) != nil || ![((id<JavaUtilList>) nil_chk(_addresses_)) isEmpty]) @throw create_JavaLangIllegalStateException_init();
  if (addresses != nil) {
    [((id<JavaUtilList>) nil_chk(_addresses_)) addAllWithJavaUtilCollection:addresses];
  }
}

- (id<JavaUtilSet>)getPeers {
  if (_peers_ == nil) return JavaUtilCollections_emptySet();
  return _peers_;
}

- (void)setPeersWithJavaUtilSet:(id<JavaUtilSet>)peers {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  if (peers == nil || [peers isEmpty]) {
    JreStrongAssign(&_peers_, nil);
    return;
  }
  if (_peers_ == nil) JreStrongAssignAndConsume(&_peers_, new_JavaUtilHashSet_initWithInt_(2));
  @synchronized(_peers_) {
    [_peers_ clear];
    [((id<JavaUtilSet>) nil_chk(_peers_)) addAllWithJavaUtilCollection:peers];
  }
}

- (JavaUtilProperties *)getOptions {
  return _options_;
}

- (id<JavaUtilMap>)getOptionsMap {
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(_options_);
}

- (NSString *)getOptionWithNSString:(NSString *)opt {
  return [((JavaUtilProperties *) nil_chk(_options_)) getPropertyWithNSString:opt];
}

- (NSString *)getVersion {
  NSString *rv = [((JavaUtilProperties *) nil_chk(_options_)) getPropertyWithNSString:@"router.version"];
  return rv != nil ? rv : @"0";
}

- (void)setOptionsWithJavaUtilProperties:(JavaUtilProperties *)options {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  [((JavaUtilProperties *) nil_chk(_options_)) clear];
  if (options != nil) [_options_ putAllWithJavaUtilMap:options];
}

- (IOSByteArray *)getBytes {
  if (JreLoadVolatileId(&_byteified_) != nil) return JreLoadVolatileId(&_byteified_);
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_initWithInt_(2 * 1024);
  @try {
    NetI2pDataRouterRouterInfo_writeDataBytesWithJavaIoOutputStream_(self, out);
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_NetI2pDataDataFormatException_initWithNSString_withJavaLangThrowable_(@"IO Error getting bytes", ioe);
  }
  IOSByteArray *data = [out toByteArray];
  if (_shouldCache_) JreVolatileStrongAssign(&_byteified_, data);
  return data;
}

- (void)writeDataBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  NetI2pDataRouterRouterInfo_writeDataBytesWithJavaIoOutputStream_(self, outArg);
}

- (jboolean)isValid {
  if (!JreLoadVolatileBoolean(&_validated_)) NetI2pDataRouterRouterInfo_doValidate(self);
  return JreLoadVolatileBoolean(&_isValid_);
}

- (jboolean)verifySignature {
  return [self isValid];
}

- (jint)getNetworkId {
  NSString *id_ = [((JavaUtilProperties *) nil_chk(_options_)) getPropertyWithNSString:NetI2pDataRouterRouterInfo_PROP_NETWORK_ID];
  if ([@"2" isEqual:id_]) return 2;
  if (id_ != nil) {
    @try {
      return JavaLangInteger_parseIntWithNSString_(id_);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
  }
  return -1;
}

- (NSString *)getCapabilities {
  NSString *capabilities = [((JavaUtilProperties *) nil_chk(_options_)) getPropertyWithNSString:NetI2pDataRouterRouterInfo_PROP_CAPABILITIES];
  if (capabilities != nil) return capabilities;
  else return @"";
}

- (jboolean)isHidden {
  return ([((NSString *) nil_chk([self getCapabilities])) java_indexOf:NetI2pDataRouterRouterInfo_CAPABILITY_HIDDEN] >= 0) || (_identity_ != nil && [_identity_ isHidden]);
}

- (NSString *)getBandwidthTier {
  NSString *bwTiers = NetI2pDataRouterRouterInfo_BW_CAPABILITY_CHARS;
  NSString *bwTier = @"Unknown";
  NSString *capabilities = [self getCapabilities];
  for (jint i = 0; i < [((NSString *) nil_chk(capabilities)) java_length]; i++) {
    if ([((NSString *) nil_chk(bwTiers)) java_indexOf:[capabilities charAtWithInt:i]] != -1) {
      bwTier = NSString_java_valueOfChar_([capabilities charAtWithInt:i]);
      break;
    }
  }
  return (bwTier);
}

- (jboolean)isCurrentWithLong:(jlong)maxAgeMs {
  jlong earliestExpire = [((NetI2pUtilClock *) nil_chk(NetI2pUtilClock_getInstance())) now] - maxAgeMs;
  if (JreLoadVolatileLong(&_published_) < earliestExpire) return false;
  return true;
}

- (NetI2pDataRouterRouterAddress *)getTargetAddressWithNSString:(NSString *)transportStyle {
  for (NetI2pDataRouterRouterAddress * __strong addr in nil_chk(_addresses_)) {
    if ([((NSString *) nil_chk([((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getTransportStyle])) isEqual:transportStyle]) return addr;
  }
  return nil;
}

- (id<JavaUtilList>)getTargetAddressesWithNSString:(NSString *)transportStyle {
  id<JavaUtilList> ret = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(_addresses_)) size]);
  for (NetI2pDataRouterRouterAddress * __strong addr in _addresses_) {
    if ([((NSString *) nil_chk([((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getTransportStyle])) isEqual:transportStyle]) [ret addWithId:addr];
  }
  return ret;
}

- (id<JavaUtilList>)getTargetAddressesWithNSString:(NSString *)transportStyle1
                                      withNSString:(NSString *)transportStyle2 {
  id<JavaUtilList> ret = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(_addresses_)) size]);
  for (NetI2pDataRouterRouterAddress * __strong addr in _addresses_) {
    NSString *style = [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) getTransportStyle];
    if ([((NSString *) nil_chk(style)) isEqual:transportStyle1] || [style isEqual:transportStyle2]) [ret addWithId:addr];
  }
  return ret;
}

- (void)doValidate {
  NetI2pDataRouterRouterInfo_doValidate(self);
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  [self readBytesWithJavaIoInputStream:inArg withBoolean:false];
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                           withBoolean:(jboolean)verifySig {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssignAndConsume(&_identity_, new_NetI2pDataRouterRouterIdentity_init());
  [_identity_ readBytesWithJavaIoInputStream:inArg];
  JavaIoInputStream *din;
  JavaSecurityMessageDigest *digest;
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([((NetI2pDataRouterRouterIdentity *) nil_chk(_identity_)) getSigningPublicKey])) getType];
  if (type == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"unknown sig type");
  if (verifySig) {
    if (type != JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519)) {
      digest = [type getDigestInstance];
      [((JavaSecurityMessageDigest *) nil_chk(digest)) updateWithByteArray:[((NetI2pDataRouterRouterIdentity *) nil_chk(_identity_)) toByteArray]];
      din = create_JavaSecurityDigestInputStream_initWithJavaIoInputStream_withJavaSecurityMessageDigest_(inArg, digest);
    }
    else {
      digest = nil;
      din = inArg;
    }
  }
  else {
    digest = nil;
    din = inArg;
  }
  JreAssignVolatileLong(&_published_, NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(din, 8));
  jint numAddresses = [((JavaIoInputStream *) nil_chk(din)) read];
  for (jint i = 0; i < numAddresses; i++) {
    NetI2pDataRouterRouterAddress *address = create_NetI2pDataRouterRouterAddress_init();
    [address readBytesWithJavaIoInputStream:din];
    [((id<JavaUtilList>) nil_chk(_addresses_)) addWithId:address];
  }
  jint numPeers = [din read];
  if (numPeers <= 0) {
    JreStrongAssign(&_peers_, nil);
  }
  else {
    JreStrongAssignAndConsume(&_peers_, new_JavaUtilHashSet_initWithInt_(numPeers));
    for (jint i = 0; i < numPeers; i++) {
      NetI2pDataHash *peerIdentityHash = create_NetI2pDataHash_init();
      [peerIdentityHash readBytesWithJavaIoInputStream:din];
      [((id<JavaUtilSet>) nil_chk(_peers_)) addWithId:peerIdentityHash];
    }
  }
  NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_withJavaUtilProperties_(din, _options_);
  JreVolatileStrongAssign(&_signature_, create_NetI2pDataSignature_initWithNetI2pCryptoSigType_(type));
  [((NetI2pDataSignature *) nil_chk(JreLoadVolatileId(&_signature_))) readBytesWithJavaIoInputStream:inArg];
  if (verifySig) {
    if (type != JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519)) {
      NetI2pDataSimpleDataStructure *hash_ = [type getHashInstance];
      [((NetI2pDataSimpleDataStructure *) nil_chk(hash_)) setDataWithByteArray:[((JavaSecurityMessageDigest *) nil_chk(digest)) digest]];
      JreAssignVolatileBoolean(&_isValid_, [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) verifySignatureWithNetI2pDataSignature:JreLoadVolatileId(&_signature_) withNetI2pDataSimpleDataStructure:hash_ withNetI2pDataSigningPublicKey:[((NetI2pDataRouterRouterIdentity *) nil_chk(_identity_)) getSigningPublicKey]]);
      JreAssignVolatileBoolean(&_validated_, true);
    }
    else {
      NetI2pDataRouterRouterInfo_doValidate(self);
    }
    if (!JreLoadVolatileBoolean(&_isValid_)) {
      @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad sig");
    }
  }
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (JreLoadVolatileId(&_signature_) == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Signature is null");
  NetI2pDataRouterRouterInfo_writeDataBytesWithJavaIoOutputStream_(self, outArg);
  [((NetI2pDataSignature *) nil_chk(JreLoadVolatileId(&_signature_))) writeBytesWithJavaIoOutputStream:outArg];
}

- (jboolean)isEqual:(id)object {
  if (object == self) return true;
  if ((object == nil) || !([object isKindOfClass:[NetI2pDataRouterRouterInfo class]])) return false;
  NetI2pDataRouterRouterInfo *info = (NetI2pDataRouterRouterInfo *) cast_chk(object, [NetI2pDataRouterRouterInfo class]);
  return JreLoadVolatileLong(&_published_) == [((NetI2pDataRouterRouterInfo *) nil_chk(info)) getPublished] && NetI2pDataDataHelper_eqWithId_withId_(JreLoadVolatileId(&_signature_), [info getSignature]) && NetI2pDataDataHelper_eqWithId_withId_(_identity_, [info getIdentity]);
}

- (NSUInteger)hash {
  if (!JreLoadVolatileBoolean(&_hashCodeInitialized_)) {
    JreAssignVolatileInt(&_hashCode_, NetI2pDataDataHelper_hashCodeWithId_(_identity_) + (jint) JreLoadVolatileLong(&_published_));
    JreAssignVolatileBoolean(&_hashCodeInitialized_, true);
  }
  return JreLoadVolatileInt(&_hashCode_);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(1024);
  [buf appendWithNSString:@"[RouterInfo: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tIdentity: "])) appendWithId:_identity_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSignature: "])) appendWithId:JreLoadVolatileId(&_signature_)];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tPublished: "])) appendWithId:create_JavaUtilDate_initWithLong_(JreLoadVolatileLong(&_published_))];
  if (_peers_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tPeers ("])) appendWithInt:[((id<JavaUtilSet>) nil_chk(_peers_)) size]])) appendWithNSString:@"):"];
    for (NetI2pDataHash * __strong hash_ in nil_chk(_peers_)) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\tPeer hash: "])) appendWithId:hash_];
    }
  }
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tOptions ("])) appendWithInt:[((JavaUtilProperties *) nil_chk(_options_)) size]])) appendWithNSString:@"):"];
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([_options_ entrySet])) {
    NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    NSString *val = (NSString *) cast_chk([e getValue], [NSString class]);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t\t["])) appendWithNSString:key])) appendWithNSString:@"] = ["])) appendWithNSString:val])) appendWithNSString:@"]"];
  }
  if (![((id<JavaUtilList>) nil_chk(_addresses_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tAddresses ("])) appendWithInt:[_addresses_ size]])) appendWithNSString:@"):"];
    for (NetI2pDataRouterRouterAddress * __strong addr in _addresses_) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\t"])) appendWithId:addr];
    }
  }
  [buf appendWithNSString:@"]"];
  NSString *rv = [buf description];
  return rv;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataRouterRouterInfo_mainWithNSStringArray_(args);
}

- (void)__javaClone:(NetI2pDataRouterRouterInfo *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_byteified_, &original->_byteified_);
}

- (void)dealloc {
  RELEASE_(_identity_);
  RELEASE_(_addresses_);
  RELEASE_(_peers_);
  RELEASE_(_options_);
  JreReleaseVolatile(&_byteified_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataKeysAndCert;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterIdentity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, 10, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, 14, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 21, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 24, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterAddress;", 0x1, 26, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 27, 18, -1, 28, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 27, 29, -1, 30, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 33, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 23, 24, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 38, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 40, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNetI2pDataRouterRouterInfo:);
  methods[2].selector = @selector(getDate);
  methods[3].selector = @selector(getKeysAndCert);
  methods[4].selector = @selector(getType);
  methods[5].selector = @selector(getIdentity);
  methods[6].selector = @selector(setIdentityWithNetI2pDataRouterRouterIdentity:);
  methods[7].selector = @selector(getPublished);
  methods[8].selector = @selector(setPublishedWithLong:);
  methods[9].selector = @selector(getAddressCount);
  methods[10].selector = @selector(getAddresses);
  methods[11].selector = @selector(setAddressesWithJavaUtilCollection:);
  methods[12].selector = @selector(getPeers);
  methods[13].selector = @selector(setPeersWithJavaUtilSet:);
  methods[14].selector = @selector(getOptions);
  methods[15].selector = @selector(getOptionsMap);
  methods[16].selector = @selector(getOptionWithNSString:);
  methods[17].selector = @selector(getVersion);
  methods[18].selector = @selector(setOptionsWithJavaUtilProperties:);
  methods[19].selector = @selector(getBytes);
  methods[20].selector = @selector(writeDataBytesWithJavaIoOutputStream:);
  methods[21].selector = @selector(isValid);
  methods[22].selector = @selector(verifySignature);
  methods[23].selector = @selector(getNetworkId);
  methods[24].selector = @selector(getCapabilities);
  methods[25].selector = @selector(isHidden);
  methods[26].selector = @selector(getBandwidthTier);
  methods[27].selector = @selector(isCurrentWithLong:);
  methods[28].selector = @selector(getTargetAddressWithNSString:);
  methods[29].selector = @selector(getTargetAddressesWithNSString:);
  methods[30].selector = @selector(getTargetAddressesWithNSString:withNSString:);
  methods[31].selector = @selector(doValidate);
  methods[32].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[33].selector = @selector(readBytesWithJavaIoInputStream:withBoolean:);
  methods[34].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[35].selector = @selector(isEqual:);
  methods[36].selector = @selector(hash);
  methods[37].selector = @selector(description);
  methods[38].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_identity_", "LNetI2pDataRouterRouterIdentity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_published_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_addresses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 41, -1 },
    { "_peers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "_options_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_validated_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_isValid_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_byteified_", "[B", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_hashCode_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_hashCodeInitialized_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_shouldCache_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CACHE_ALL", "Z", .constantValue.asBOOL = NetI2pDataRouterRouterInfo_CACHE_ALL, 0x1a, -1, -1, -1, -1 },
    { "PROP_NETWORK_ID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "PROP_CAPABILITIES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "CAPABILITY_HIDDEN", "C", .constantValue.asUnichar = NetI2pDataRouterRouterInfo_CAPABILITY_HIDDEN, 0x19, -1, -1, -1, -1 },
    { "BW_CAPABILITY_CHARS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataRouterRouterInfo;", "setIdentity", "LNetI2pDataRouterRouterIdentity;", "setPublished", "J", "()Ljava/util/Collection<Lnet/i2p/data/router/RouterAddress;>;", "setAddresses", "LJavaUtilCollection;", "(Ljava/util/Collection<Lnet/i2p/data/router/RouterAddress;>;)V", "()Ljava/util/Set<Lnet/i2p/data/Hash;>;", (void *)&NetI2pDataRouterRouterInfo__Annotations$0, "setPeers", "LJavaUtilSet;", "(Ljava/util/Set<Lnet/i2p/data/Hash;>;)V", (void *)&NetI2pDataRouterRouterInfo__Annotations$1, (void *)&NetI2pDataRouterRouterInfo__Annotations$2, "()Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;", "getOption", "LNSString;", "setOptions", "LJavaUtilProperties;", "LNetI2pDataDataFormatException;", "writeDataBytes", "LJavaIoOutputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "isCurrent", "getTargetAddress", "getTargetAddresses", "(Ljava/lang/String;)Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "readBytes", "LJavaIoInputStream;", "LJavaIoInputStream;Z", "writeBytes", "equals", "LNSObject;", "hashCode", "toString", "main", "[LNSString;", "Ljava/util/List<Lnet/i2p/data/router/RouterAddress;>;", "Ljava/util/Set<Lnet/i2p/data/Hash;>;", &NetI2pDataRouterRouterInfo_PROP_NETWORK_ID, &NetI2pDataRouterRouterInfo_PROP_CAPABILITIES, &NetI2pDataRouterRouterInfo_BW_CAPABILITY_CHARS };
  static const J2ObjcClassInfo _NetI2pDataRouterRouterInfo = { "RouterInfo", "net.i2p.data.router", ptrTable, methods, fields, 7, 0x1, 39, 16, -1, -1, -1, -1, -1 };
  return &_NetI2pDataRouterRouterInfo;
}

+ (void)initialize {
  if (self == [NetI2pDataRouterRouterInfo class]) {
    NetI2pDataRouterRouterInfo_super$_verifySignature = (jboolean (*)(id, SEL))[NetI2pDataDatabaseEntry instanceMethodForSelector:@selector(verifySignature)];
    J2OBJC_SET_INITIALIZED(NetI2pDataRouterRouterInfo)
  }
}

@end

void NetI2pDataRouterRouterInfo_init(NetI2pDataRouterRouterInfo *self) {
  NetI2pDataDatabaseEntry_init(self);
  JreStrongAssignAndConsume(&self->_addresses_, new_JavaUtilArrayList_initWithInt_(2));
  JreStrongAssignAndConsume(&self->_options_, new_NetI2pUtilOrderedProperties_init());
}

NetI2pDataRouterRouterInfo *new_NetI2pDataRouterRouterInfo_init() {
  J2OBJC_NEW_IMPL(NetI2pDataRouterRouterInfo, init)
}

NetI2pDataRouterRouterInfo *create_NetI2pDataRouterRouterInfo_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataRouterRouterInfo, init)
}

void NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *self, NetI2pDataRouterRouterInfo *old) {
  NetI2pDataRouterRouterInfo_init(self);
  [self setIdentityWithNetI2pDataRouterRouterIdentity:[((NetI2pDataRouterRouterInfo *) nil_chk(old)) getIdentity]];
  [self setPeersWithJavaUtilSet:[old getPeers]];
}

NetI2pDataRouterRouterInfo *new_NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *old) {
  J2OBJC_NEW_IMPL(NetI2pDataRouterRouterInfo, initWithNetI2pDataRouterRouterInfo_, old)
}

NetI2pDataRouterRouterInfo *create_NetI2pDataRouterRouterInfo_initWithNetI2pDataRouterRouterInfo_(NetI2pDataRouterRouterInfo *old) {
  J2OBJC_CREATE_IMPL(NetI2pDataRouterRouterInfo, initWithNetI2pDataRouterRouterInfo_, old)
}

void NetI2pDataRouterRouterInfo_writeDataBytesWithJavaIoOutputStream_(NetI2pDataRouterRouterInfo *self, JavaIoOutputStream *outArg) {
  if (self->_identity_ == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Missing identity");
  if (JreLoadVolatileLong(&self->_published_) < 0) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$J", @"Invalid published date: ", JreLoadVolatileLong(&self->_published_)));
  [self->_identity_ writeBytesWithJavaIoOutputStream:outArg];
  NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, 8, JreLoadVolatileLong(&self->_published_));
  jint sz = [((id<JavaUtilList>) nil_chk(self->_addresses_)) size];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jbyte) sz];
  if (sz > 0) {
    for (NetI2pDataRouterRouterAddress * __strong addr in self->_addresses_) {
      [((NetI2pDataRouterRouterAddress *) nil_chk(addr)) writeBytesWithJavaIoOutputStream:outArg];
    }
  }
  jint psz = self->_peers_ == nil ? 0 : [self->_peers_ size];
  [outArg writeWithInt:(jbyte) psz];
  if (psz > 0) {
    id<JavaUtilCollection> peers = self->_peers_;
    if (psz > 1) peers = NetI2pDataRouterSortHelper_sortStructuresWithJavaUtilCollection_(peers);
    for (NetI2pDataHash * __strong peerHash in nil_chk(peers)) {
      [((NetI2pDataHash *) nil_chk(peerHash)) writeBytesWithJavaIoOutputStream:outArg];
    }
  }
  NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_(outArg, self->_options_);
}

void NetI2pDataRouterRouterInfo_doValidate(NetI2pDataRouterRouterInfo *self) {
  JreAssignVolatileBoolean(&self->_isValid_, NetI2pDataRouterRouterInfo_super$_verifySignature(self, @selector(verifySignature)));
  JreAssignVolatileBoolean(&self->_validated_, true);
  if (!JreLoadVolatileBoolean(&self->_isValid_)) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pDataRouterRouterInfo_class_()];
    if ([((NetI2pUtilLog *) nil_chk(log)) shouldWarn]) {
      [log warnWithNSString:JreStrcat("$$", @"Sig verify fail: ", [self description]) withJavaLangThrowable:create_JavaLangException_initWithNSString_(@"from")];
    }
  }
}

void NetI2pDataRouterRouterInfo_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataRouterRouterInfo_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ <= 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: RouterInfo file ..."];
    JavaLangSystem_exitWithInt_(1);
  }
  jboolean fail = false;
  for (jint i = 0; i < args->size_; i++) {
    NetI2pDataRouterRouterInfo *ri = create_NetI2pDataRouterRouterInfo_init();
    JavaIoInputStream *is = nil;
    @try {
      is = create_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, i));
      [ri readBytesWithJavaIoInputStream:is];
      if ([ri isValid]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[ri description]];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Router info ", IOSObjectArray_Get(args, i), @" is invalid")];
        fail = true;
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Error reading ", IOSObjectArray_Get(args, i), @": ", e)];
      fail = true;
    }
    @catch (NetI2pDataDataFormatException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Error reading ", IOSObjectArray_Get(args, i), @": ", e)];
      fail = true;
    }
    @finally {
      if (is != nil) {
        @try {
          [is close];
        }
        @catch (JavaIoIOException *ioe) {
        }
      }
    }
  }
  if (fail) JavaLangSystem_exitWithInt_(1);
}

IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetI2pDataRouterRouterInfo__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataRouterRouterInfo)
