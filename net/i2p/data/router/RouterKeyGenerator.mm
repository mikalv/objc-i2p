//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/router/RouterKeyGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/router/RouterKeyGenerator.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/ConvertToHash.h"
#include "net/i2p/util/HexDump.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@interface NetI2pDataRouterRouterKeyGenerator () {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  volatile_id _currentModData_;
  volatile_id _nextModData_;
  volatile_jlong _nextMidnight_;
  volatile_jlong _lastChanged_;
  JavaUtilCalendar *_cal_;
  JavaTextSimpleDateFormat *_fmt_;
}

- (void)setCalToPreviousMidnightWithLong:(jlong)now;

- (IOSByteArray *)generateModDataFromCal;

+ (NetI2pDataHash *)getKeyWithNetI2pDataHash:(NetI2pDataHash *)origKey
                               withByteArray:(IOSByteArray *)modData;

@end

J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _context_, NetI2pI2PAppContext *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _currentModData_, IOSByteArray *)
J2OBJC_VOLATILE_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _nextModData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _cal_, JavaUtilCalendar *)
J2OBJC_FIELD_SETTER(NetI2pDataRouterRouterKeyGenerator, _fmt_, JavaTextSimpleDateFormat *)

inline NSString *NetI2pDataRouterRouterKeyGenerator_get_FORMAT(void);
static NSString *NetI2pDataRouterRouterKeyGenerator_FORMAT = @"yyyyMMdd";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataRouterRouterKeyGenerator, FORMAT, NSString *)

inline jint NetI2pDataRouterRouterKeyGenerator_get_LENGTH(void);
static jint NetI2pDataRouterRouterKeyGenerator_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataRouterRouterKeyGenerator, LENGTH, jint)

__attribute__((unused)) static void NetI2pDataRouterRouterKeyGenerator_setCalToPreviousMidnightWithLong_(NetI2pDataRouterRouterKeyGenerator *self, jlong now);

__attribute__((unused)) static IOSByteArray *NetI2pDataRouterRouterKeyGenerator_generateModDataFromCal(NetI2pDataRouterRouterKeyGenerator *self);

__attribute__((unused)) static NetI2pDataHash *NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(NetI2pDataHash *origKey, IOSByteArray *modData);

J2OBJC_INITIALIZED_DEFN(NetI2pDataRouterRouterKeyGenerator)

@implementation NetI2pDataRouterRouterKeyGenerator

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (IOSByteArray *)getModData {
  return JreLoadVolatileId(&_currentModData_);
}

- (IOSByteArray *)getNextModData {
  return JreLoadVolatileId(&_nextModData_);
}

- (jlong)getLastChanged {
  return JreLoadVolatileLong(&_lastChanged_);
}

- (jlong)getTimeTillMidnight {
  return JreLoadVolatileLong(&_nextMidnight_) - [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
}

- (void)setCalToPreviousMidnightWithLong:(jlong)now {
  NetI2pDataRouterRouterKeyGenerator_setCalToPreviousMidnightWithLong_(self, now);
}

- (IOSByteArray *)generateModDataFromCal {
  return NetI2pDataRouterRouterKeyGenerator_generateModDataFromCal(self);
}

- (jboolean)generateDateBasedModData {
  @synchronized(self) {
    jlong now = [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
    NetI2pDataRouterRouterKeyGenerator_setCalToPreviousMidnightWithLong_(self, now);
    IOSByteArray *mod = NetI2pDataRouterRouterKeyGenerator_generateModDataFromCal(self);
    jboolean changed = !JavaUtilArrays_equalsWithByteArray_withByteArray_(JreLoadVolatileId(&_currentModData_), mod);
    if (changed) {
      [((JavaUtilCalendar *) nil_chk(_cal_)) addWithInt:JavaUtilCalendar_DATE withInt:1];
      JreAssignVolatileLong(&_nextMidnight_, [((JavaUtilDate *) nil_chk([_cal_ getTime])) getTime]);
      IOSByteArray *next = NetI2pDataRouterRouterKeyGenerator_generateModDataFromCal(self);
      JreVolatileStrongAssign(&_currentModData_, mod);
      JreVolatileStrongAssign(&_nextModData_, next);
      if (JreLoadVolatileLong(&_lastChanged_) == now) now++;
      JreAssignVolatileLong(&_lastChanged_, now);
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_INFO]) [_log_ infoWithNSString:JreStrcat("$$", @"Routing modifier generated: ", NetI2pUtilHexDump_dumpWithByteArray_(mod))];
    }
    return changed;
  }
}

- (NetI2pDataHash *)getRoutingKeyWithNetI2pDataHash:(NetI2pDataHash *)origKey {
  return NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(origKey, JreLoadVolatileId(&_currentModData_));
}

- (NetI2pDataHash *)getNextRoutingKeyWithNetI2pDataHash:(NetI2pDataHash *)origKey {
  return NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(origKey, JreLoadVolatileId(&_nextModData_));
}

- (NetI2pDataHash *)getRoutingKeyWithNetI2pDataHash:(NetI2pDataHash *)origKey
                                           withLong:(jlong)time {
  NSString *modVal;
  @synchronized(self) {
    modVal = JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(_fmt_)) formatWithId:JavaLangLong_valueOfWithLong_(time)]);
  }
  if ([((NSString *) nil_chk(modVal)) java_length] != NetI2pDataRouterRouterKeyGenerator_LENGTH) @throw create_JavaLangIllegalStateException_init();
  IOSByteArray *mod = NetI2pDataDataHelper_getASCIIWithNSString_(modVal);
  return NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(origKey, mod);
}

+ (NetI2pDataHash *)getKeyWithNetI2pDataHash:(NetI2pDataHash *)origKey
                               withByteArray:(IOSByteArray *)modData {
  return NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(origKey, modData);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pDataRouterRouterKeyGenerator_mainWithNSStringArray_(args);
}

- (void)__javaClone:(NetI2pDataRouterRouterKeyGenerator *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_currentModData_, &original->_currentModData_);
  JreCloneVolatileStrong(&_nextModData_, &original->_nextModData_);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  JreReleaseVolatile(&_currentModData_);
  JreReleaseVolatile(&_nextModData_);
  RELEASE_(_cal_);
  RELEASE_(_fmt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getModData);
  methods[2].selector = @selector(getNextModData);
  methods[3].selector = @selector(getLastChanged);
  methods[4].selector = @selector(getTimeTillMidnight);
  methods[5].selector = @selector(setCalToPreviousMidnightWithLong:);
  methods[6].selector = @selector(generateModDataFromCal);
  methods[7].selector = @selector(generateDateBasedModData);
  methods[8].selector = @selector(getRoutingKeyWithNetI2pDataHash:);
  methods[9].selector = @selector(getNextRoutingKeyWithNetI2pDataHash:);
  methods[10].selector = @selector(getRoutingKeyWithNetI2pDataHash:withLong:);
  methods[11].selector = @selector(getKeyWithNetI2pDataHash:withByteArray:);
  methods[12].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_currentModData_", "[B", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_nextModData_", "[B", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_nextMidnight_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_lastChanged_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_cal_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "_fmt_", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "setCalToPreviousMidnight", "J", "getRoutingKey", "LNetI2pDataHash;", "getNextRoutingKey", "LNetI2pDataHash;J", "getKey", "LNetI2pDataHash;[B", "main", "[LNSString;", &NetI2pDataRouterRouterKeyGenerator_FORMAT, &NetI2pDataRouterRouterKeyGenerator_LENGTH };
  static const J2ObjcClassInfo _NetI2pDataRouterRouterKeyGenerator = { "RouterKeyGenerator", "net.i2p.data.router", ptrTable, methods, fields, 7, 0x1, 13, 10, -1, -1, -1, -1, -1 };
  return &_NetI2pDataRouterRouterKeyGenerator;
}

+ (void)initialize {
  if (self == [NetI2pDataRouterRouterKeyGenerator class]) {
    NetI2pDataRouterRouterKeyGenerator_LENGTH = [((NSString *) nil_chk(NetI2pDataRouterRouterKeyGenerator_FORMAT)) java_length];
    J2OBJC_SET_INITIALIZED(NetI2pDataRouterRouterKeyGenerator)
  }
}

@end

void NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(NetI2pDataRouterRouterKeyGenerator *self, NetI2pI2PAppContext *context) {
  NetI2pDataRoutingKeyGenerator_init(self);
  JreStrongAssign(&self->_cal_, JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone_getTimeZoneWithNSString_(@"GMT")));
  JreStrongAssignAndConsume(&self->_fmt_, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(NetI2pDataRouterRouterKeyGenerator_FORMAT, JreLoadStatic(JavaUtilLocale, US)));
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:NetI2pDataRoutingKeyGenerator_class_()]);
  JreStrongAssign(&self->_context_, context);
  [self->_fmt_ setCalendarWithJavaUtilCalendar:self->_cal_];
  [self generateDateBasedModData];
}

NetI2pDataRouterRouterKeyGenerator *new_NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pDataRouterRouterKeyGenerator, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataRouterRouterKeyGenerator *create_NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pDataRouterRouterKeyGenerator, initWithNetI2pI2PAppContext_, context)
}

void NetI2pDataRouterRouterKeyGenerator_setCalToPreviousMidnightWithLong_(NetI2pDataRouterRouterKeyGenerator *self, jlong now) {
  [((JavaUtilCalendar *) nil_chk(self->_cal_)) setTimeWithJavaUtilDate:create_JavaUtilDate_initWithLong_(now)];
  [self->_cal_ setWithInt:JavaUtilCalendar_YEAR withInt:[self->_cal_ getWithInt:JavaUtilCalendar_YEAR]];
  [self->_cal_ setWithInt:JavaUtilCalendar_DAY_OF_YEAR withInt:[self->_cal_ getWithInt:JavaUtilCalendar_DAY_OF_YEAR]];
  [self->_cal_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
  [self->_cal_ setWithInt:JavaUtilCalendar_MINUTE withInt:0];
  [self->_cal_ setWithInt:JavaUtilCalendar_SECOND withInt:0];
  [self->_cal_ setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
}

IOSByteArray *NetI2pDataRouterRouterKeyGenerator_generateModDataFromCal(NetI2pDataRouterRouterKeyGenerator *self) {
  JavaUtilDate *today = [((JavaUtilCalendar *) nil_chk(self->_cal_)) getTime];
  NSString *modVal = [((JavaTextSimpleDateFormat *) nil_chk(self->_fmt_)) formatWithJavaUtilDate:today];
  if ([((NSString *) nil_chk(modVal)) java_length] != NetI2pDataRouterRouterKeyGenerator_LENGTH) @throw create_JavaLangIllegalStateException_init();
  IOSByteArray *mod = NetI2pDataDataHelper_getASCIIWithNSString_(modVal);
  return mod;
}

NetI2pDataHash *NetI2pDataRouterRouterKeyGenerator_getKeyWithNetI2pDataHash_withByteArray_(NetI2pDataHash *origKey, IOSByteArray *modData) {
  NetI2pDataRouterRouterKeyGenerator_initialize();
  if (origKey == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Original key is null");
  IOSByteArray *modVal = [IOSByteArray arrayWithLength:NetI2pDataHash_HASH_LENGTH + NetI2pDataRouterRouterKeyGenerator_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([origKey getData], 0, modVal, 0, NetI2pDataHash_HASH_LENGTH);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(modData, 0, modVal, NetI2pDataHash_HASH_LENGTH, NetI2pDataRouterRouterKeyGenerator_LENGTH);
  return [((NetI2pCryptoSHA256Generator *) nil_chk(NetI2pCryptoSHA256Generator_getInstance())) calculateHashWithByteArray:modVal];
}

void NetI2pDataRouterRouterKeyGenerator_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pDataRouterRouterKeyGenerator_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ <= 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: RouterKeyGenerator [-days] [+days] hash|hostname|destination..."];
    JavaLangSystem_exitWithInt_(1);
  }
  jlong now = JavaLangSystem_currentTimeMillis();
  jint st = 0;
  if (args->size_ > 1 && ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) java_hasPrefix:@"+"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) java_hasPrefix:@"-"])) {
    now += JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 0)) * (24 * 60 * 60 * 1000LL);
    st++;
  }
  NetI2pDataRouterRouterKeyGenerator *rkg = create_NetI2pDataRouterRouterKeyGenerator_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext_getGlobalContext());
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Date: ", [((JavaTextSimpleDateFormat *) nil_chk(rkg->_fmt_)) formatWithId:JavaLangLong_valueOfWithLong_(now)], @"\nHash                                         Routing Key\n----                                         -----------")];
  for (jint i = st; i < args->size_; i++) {
    NSString *s = IOSObjectArray_Get(args, i);
    NSString *sp = @" ";
    if ([((NSString *) nil_chk(s)) java_length] < 44) sp = [@"                                            " java_substring:0 endIndex:45 - [s java_length]];
    NetI2pDataHash *h = NetI2pUtilConvertToHash_getHashWithNSString_(s);
    if (h == nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", s, sp, @"Bad hash")];
      continue;
    }
    NetI2pDataHash *rkey = [rkg getRoutingKeyWithNetI2pDataHash:h withLong:now];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", s, sp, [((NetI2pDataHash *) nil_chk(rkey)) toBase64])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataRouterRouterKeyGenerator)
