//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: router/java/src/net/i2p/data/router/RouterPrivateKeyFile.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PrivateKeyFile.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/data/router/RouterIdentity.h"
#include "net/i2p/data/router/RouterPrivateKeyFile.h"

@implementation NetI2pDataRouterRouterPrivateKeyFile

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file {
  NetI2pDataRouterRouterPrivateKeyFile_initWithJavaIoFile_(self, file);
  return self;
}

- (NetI2pDataRouterRouterIdentity *)getRouterIdentity {
  JavaIoInputStream *in = nil;
  @try {
    in = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(self->file_));
    NetI2pDataRouterRouterIdentity *ri = create_NetI2pDataRouterRouterIdentity_init();
    [ri readBytesWithJavaIoInputStream:in];
    JreStrongAssignAndConsume(&privKey_, new_NetI2pDataPrivateKey_init());
    [privKey_ readBytesWithJavaIoInputStream:in];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk([ri getSigningPublicKey])) getType];
    if (type == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Unknown sig type");
    JreStrongAssignAndConsume(&signingPrivKey_, new_NetI2pDataSigningPrivateKey_initWithNetI2pCryptoSigType_(type));
    [signingPrivKey_ readBytesWithJavaIoInputStream:in];
    JreStrongAssignAndConsume(&dest_, new_NetI2pDataDestination_init());
    [dest_ setPublicKeyWithNetI2pDataPublicKey:[ri getPublicKey]];
    [((NetI2pDataDestination *) nil_chk(dest_)) setSigningPublicKeyWithNetI2pDataSigningPublicKey:[ri getSigningPublicKey]];
    [((NetI2pDataDestination *) nil_chk(dest_)) setCertificateWithNetI2pDataCertificate:[ri getCertificate]];
    [((NetI2pDataDestination *) nil_chk(dest_)) setPaddingWithByteArray:[ri getPadding]];
    return ri;
  }
  @finally {
    if (in != nil) {
      @try {
        [in close];
      }
      @catch (JavaIoIOException *ioe) {
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataRouterRouterIdentity;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoFile:);
  methods[1].selector = @selector(getRouterIdentity);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoFile;", "LJavaIoIOException;LNetI2pDataDataFormatException;" };
  static const J2ObjcClassInfo _NetI2pDataRouterRouterPrivateKeyFile = { "RouterPrivateKeyFile", "net.i2p.data.router", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_NetI2pDataRouterRouterPrivateKeyFile;
}

@end

void NetI2pDataRouterRouterPrivateKeyFile_initWithJavaIoFile_(NetI2pDataRouterRouterPrivateKeyFile *self, JavaIoFile *file) {
  NetI2pDataPrivateKeyFile_initWithJavaIoFile_(self, file);
}

NetI2pDataRouterRouterPrivateKeyFile *new_NetI2pDataRouterRouterPrivateKeyFile_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_NEW_IMPL(NetI2pDataRouterRouterPrivateKeyFile, initWithJavaIoFile_, file)
}

NetI2pDataRouterRouterPrivateKeyFile *create_NetI2pDataRouterRouterPrivateKeyFile_initWithJavaIoFile_(JavaIoFile *file) {
  J2OBJC_CREATE_IMPL(NetI2pDataRouterRouterPrivateKeyFile, initWithJavaIoFile_, file)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataRouterRouterPrivateKeyFile)
