//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/SDSCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/Arrays.h"
#include "java/util/Map.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/SDSCache.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/stat/StatManager.h"
#include "net/i2p/util/LHMCache.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/SystemVersion.h"

@interface NetI2pDataSDSCache () {
 @public
  id<JavaUtilMap> _cache_;
  jint _datalen_;
  JavaLangReflectConstructor *_rvCon_;
  NSString *_statName_;
}

+ (JavaLangInteger *)hashCodeOfWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(NetI2pDataSDSCache, _cache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(NetI2pDataSDSCache, _rvCon_, JavaLangReflectConstructor *)
J2OBJC_FIELD_SETTER(NetI2pDataSDSCache, _statName_, NSString *)

inline jdouble NetI2pDataSDSCache_get_MIN_FACTOR(void);
#define NetI2pDataSDSCache_MIN_FACTOR 0.2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataSDSCache, MIN_FACTOR, jdouble)

inline jdouble NetI2pDataSDSCache_get_MAX_FACTOR(void);
#define NetI2pDataSDSCache_MAX_FACTOR 5.0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataSDSCache, MAX_FACTOR, jdouble)

inline jdouble NetI2pDataSDSCache_get_FACTOR(void);
static jdouble NetI2pDataSDSCache_FACTOR;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataSDSCache, FACTOR, jdouble)

__attribute__((unused)) static JavaLangInteger *NetI2pDataSDSCache_hashCodeOfWithByteArray_(IOSByteArray *data);

@interface NetI2pDataSDSCache_Shutdown : NSObject < JavaLangRunnable > {
 @public
  NetI2pDataSDSCache *this$0_;
}

- (instancetype)initWithNetI2pDataSDSCache:(NetI2pDataSDSCache *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataSDSCache_Shutdown)

__attribute__((unused)) static void NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache_Shutdown *self, NetI2pDataSDSCache *outer$);

__attribute__((unused)) static NetI2pDataSDSCache_Shutdown *new_NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataSDSCache_Shutdown *create_NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataSDSCache_Shutdown)

J2OBJC_INITIALIZED_DEFN(NetI2pDataSDSCache)

@implementation NetI2pDataSDSCache

- (instancetype)initWithIOSClass:(IOSClass *)rvClass
                         withInt:(jint)len
                         withInt:(jint)max {
  NetI2pDataSDSCache_initWithIOSClass_withInt_withInt_(self, rvClass, len, max);
  return self;
}

- (void)clear {
  @synchronized(_cache_) {
    [((id<JavaUtilMap>) nil_chk(_cache_)) clear];
  }
}

- (NetI2pDataSimpleDataStructure *)getWithByteArray:(IOSByteArray *)data {
  if (data == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Don't pull null data from the cache");
  jint found;
  NetI2pDataSimpleDataStructure *rv;
  JavaLangInteger *key = NetI2pDataSDSCache_hashCodeOfWithByteArray_(data);
  @synchronized(_cache_) {
    JavaLangRefWeakReference *ref = [((id<JavaUtilMap>) nil_chk(_cache_)) getWithId:key];
    if (ref != nil) rv = JreRetainedLocalValue([ref get]);
    else rv = JreRetainedLocalValue(nil);
    if (rv != nil && JavaUtilArrays_equalsWithByteArray_withByteArray_(data, [rv getData])) {
      NetI2pUtilSimpleByteCache_release__WithByteArray_(data);
      found = 1;
    }
    else {
      @try {
        rv = JreRetainedLocalValue([((JavaLangReflectConstructor *) nil_chk(_rvCon_)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ data } count:1 type:NSObject_class_()]]);
      }
      @catch (JavaLangInstantiationException *e) {
        @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"SDSCache error", e);
      }
      @catch (JavaLangIllegalAccessException *e) {
        @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"SDSCache error", e);
      }
      @catch (JavaLangReflectInvocationTargetException *e) {
        @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"SDSCache error", e);
      }
      [_cache_ putWithId:key withId:create_JavaLangRefWeakReference_initWithId_(rv)];
      found = 0;
    }
  }
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) statManager])) addRateDataWithNSString:_statName_ withLong:found];
  return rv;
}

- (NetI2pDataSimpleDataStructure *)getWithByteArray:(IOSByteArray *)b
                                            withInt:(jint)off {
  IOSByteArray *data = NetI2pUtilSimpleByteCache_acquireWithInt_(_datalen_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, off, data, 0, _datalen_);
  return [self getWithByteArray:data];
}

- (NetI2pDataSimpleDataStructure *)getWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  IOSByteArray *data = NetI2pUtilSimpleByteCache_acquireWithInt_(_datalen_);
  jint read = NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(inArg, data);
  if (read != _datalen_) @throw create_JavaIoEOFException_initWithNSString_(@"Not enough bytes to read the data");
  return [self getWithByteArray:data];
}

+ (JavaLangInteger *)hashCodeOfWithByteArray:(IOSByteArray *)data {
  return NetI2pDataSDSCache_hashCodeOfWithByteArray_(data);
}

- (void)dealloc {
  RELEASE_(_cache_);
  RELEASE_(_rvCon_);
  RELEASE_(_statName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSimpleDataStructure;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNetI2pDataSimpleDataStructure;", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LNetI2pDataSimpleDataStructure;", 0x1, 2, 7, 8, 9, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 10, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withInt:withInt:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(getWithByteArray:);
  methods[3].selector = @selector(getWithByteArray:withInt:);
  methods[4].selector = @selector(getWithJavaIoInputStream:);
  methods[5].selector = @selector(hashCodeOfWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_FACTOR", "D", .constantValue.asDouble = NetI2pDataSDSCache_MIN_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "MAX_FACTOR", "D", .constantValue.asDouble = NetI2pDataSDSCache_MAX_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "FACTOR", "D", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "_cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "_datalen_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_rvCon_", "LJavaLangReflectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "_statName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;II", "(Ljava/lang/Class<TV;>;II)V", "get", "[B", "([B)TV;", "[BI", "([BI)TV;", "LJavaIoInputStream;", "LJavaIoIOException;", "(Ljava/io/InputStream;)TV;", "hashCodeOf", &NetI2pDataSDSCache_FACTOR, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/ref/WeakReference<TV;>;>;", "Ljava/lang/reflect/Constructor<TV;>;", "LNetI2pDataSDSCache_Shutdown;", "<V:Lnet/i2p/data/SimpleDataStructure;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _NetI2pDataSDSCache = { "SDSCache", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, 14, -1, 15, -1 };
  return &_NetI2pDataSDSCache;
}

+ (void)initialize {
  if (self == [NetI2pDataSDSCache class]) {
    {
      jlong maxMemory = NetI2pUtilSystemVersion_getMaxMemory();
      NetI2pDataSDSCache_FACTOR = JavaLangMath_maxWithDouble_withDouble_(NetI2pDataSDSCache_MIN_FACTOR, JavaLangMath_minWithDouble_withDouble_(NetI2pDataSDSCache_MAX_FACTOR, maxMemory / (128 * 1024 * 1024.0)));
    }
    J2OBJC_SET_INITIALIZED(NetI2pDataSDSCache)
  }
}

@end

void NetI2pDataSDSCache_initWithIOSClass_withInt_withInt_(NetI2pDataSDSCache *self, IOSClass *rvClass, jint len, jint max) {
  NSObject_init(self);
  jint size = JreFpToInt((max * NetI2pDataSDSCache_FACTOR));
  JreStrongAssignAndConsume(&self->_cache_, new_NetI2pUtilLHMCache_initWithInt_(size));
  self->_datalen_ = len;
  @try {
    JreStrongAssign(&self->_rvCon_, [((IOSClass *) nil_chk(rvClass)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_byteArray(1) } count:1 type:IOSClass_class_()]]);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"SDSCache init error", e);
  }
  JreStrongAssign(&self->_statName_, JreStrcat("$$", @"SDSCache.", [rvClass getSimpleName]));
  [((NetI2pStatStatManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) statManager])) createRateStatWithNSString:self->_statName_ withNSString:@"Hit rate" withNSString:@"Router" withLongArray:[IOSLongArray arrayWithLongs:(jlong[]){ 10 * 60 * 1000 } count:1]];
  [((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) addShutdownTaskWithJavaLangRunnable:create_NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(self)];
}

NetI2pDataSDSCache *new_NetI2pDataSDSCache_initWithIOSClass_withInt_withInt_(IOSClass *rvClass, jint len, jint max) {
  J2OBJC_NEW_IMPL(NetI2pDataSDSCache, initWithIOSClass_withInt_withInt_, rvClass, len, max)
}

NetI2pDataSDSCache *create_NetI2pDataSDSCache_initWithIOSClass_withInt_withInt_(IOSClass *rvClass, jint len, jint max) {
  J2OBJC_CREATE_IMPL(NetI2pDataSDSCache, initWithIOSClass_withInt_withInt_, rvClass, len, max)
}

JavaLangInteger *NetI2pDataSDSCache_hashCodeOfWithByteArray_(IOSByteArray *data) {
  NetI2pDataSDSCache_initialize();
  jint rv = IOSByteArray_Get(nil_chk(data), 0);
  for (jint i = 1; i < 4; i++) rv ^= (JreLShift32(IOSByteArray_Get(data, i), (i * 8)));
  return JavaLangInteger_valueOfWithInt_(rv);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataSDSCache)

@implementation NetI2pDataSDSCache_Shutdown

- (instancetype)initWithNetI2pDataSDSCache:(NetI2pDataSDSCache *)outer$ {
  NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pDataSDSCache:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetI2pDataSDSCache;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lnet/i2p/data/SDSCache<TV;>;", "LNetI2pDataSDSCache;" };
  static const J2ObjcClassInfo _NetI2pDataSDSCache_Shutdown = { "Shutdown", "net.i2p.data", ptrTable, methods, fields, 7, 0x2, 2, 1, 1, -1, -1, -1, -1 };
  return &_NetI2pDataSDSCache_Shutdown;
}

@end

void NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache_Shutdown *self, NetI2pDataSDSCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

NetI2pDataSDSCache_Shutdown *new_NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache *outer$) {
  J2OBJC_NEW_IMPL(NetI2pDataSDSCache_Shutdown, initWithNetI2pDataSDSCache_, outer$)
}

NetI2pDataSDSCache_Shutdown *create_NetI2pDataSDSCache_Shutdown_initWithNetI2pDataSDSCache_(NetI2pDataSDSCache *outer$) {
  J2OBJC_CREATE_IMPL(NetI2pDataSDSCache_Shutdown, initWithNetI2pDataSDSCache_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataSDSCache_Shutdown)
