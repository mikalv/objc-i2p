//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/Certificate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataCertificate")
#ifdef RESTRICT_NetI2pDataCertificate
#define INCLUDE_ALL_NetI2pDataCertificate 0
#else
#define INCLUDE_ALL_NetI2pDataCertificate 1
#endif
#undef RESTRICT_NetI2pDataCertificate

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataCertificate_) && (INCLUDE_ALL_NetI2pDataCertificate || defined(INCLUDE_NetI2pDataCertificate))
#define NetI2pDataCertificate_

#define RESTRICT_NetI2pDataDataStructureImpl 1
#define INCLUDE_NetI2pDataDataStructureImpl 1
#include "net/i2p/data/DataStructureImpl.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class NetI2pDataKeyCertificate;

@interface NetI2pDataCertificate : NetI2pDataDataStructureImpl {
 @public
  jint _type_;
  IOSByteArray *_payload_;
}
@property (readonly, class, strong) NetI2pDataCertificate *NULL_CERT NS_SWIFT_NAME(NULL_CERT);
@property (readonly, class) jint CERTIFICATE_TYPE_NULL NS_SWIFT_NAME(CERTIFICATE_TYPE_NULL);
@property (readonly, class) jint CERTIFICATE_TYPE_HASHCASH NS_SWIFT_NAME(CERTIFICATE_TYPE_HASHCASH);
@property (readonly, class) jint CERTIFICATE_TYPE_HIDDEN NS_SWIFT_NAME(CERTIFICATE_TYPE_HIDDEN);
@property (readonly, class) jint CERTIFICATE_TYPE_SIGNED NS_SWIFT_NAME(CERTIFICATE_TYPE_SIGNED);
@property (readonly, class) jint CERTIFICATE_LENGTH_SIGNED_WITH_HASH NS_SWIFT_NAME(CERTIFICATE_LENGTH_SIGNED_WITH_HASH);
@property (readonly, class) jint CERTIFICATE_TYPE_MULTIPLE NS_SWIFT_NAME(CERTIFICATE_TYPE_MULTIPLE);
@property (readonly, class) jint CERTIFICATE_TYPE_KEY NS_SWIFT_NAME(CERTIFICATE_TYPE_KEY);

+ (NetI2pDataCertificate *)NULL_CERT;

+ (jint)CERTIFICATE_TYPE_NULL;

+ (jint)CERTIFICATE_TYPE_HASHCASH;

+ (jint)CERTIFICATE_TYPE_HIDDEN;

+ (jint)CERTIFICATE_TYPE_SIGNED;

+ (jint)CERTIFICATE_LENGTH_SIGNED_WITH_HASH;

+ (jint)CERTIFICATE_TYPE_MULTIPLE;

+ (jint)CERTIFICATE_TYPE_KEY;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithInt:(jint)type
                        withByteArray:(IOSByteArray *)payload;

+ (NetI2pDataCertificate *)createWithByteArray:(IOSByteArray *)data
                                       withInt:(jint)off;

+ (NetI2pDataCertificate *)createWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (jboolean)isEqual:(id)object;

- (jint)getCertificateType;

- (IOSByteArray *)getPayload;

- (NSUInteger)hash;

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset;

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (void)setCertificateTypeWithInt:(jint)type;

- (void)setPayloadWithByteArray:(IOSByteArray *)payload;

- (jint)size;

- (NetI2pDataKeyCertificate *)toKeyCertificate;

- (NSString *)description;

- (jint)writeBytesWithByteArray:(IOSByteArray *)target
                        withInt:(jint)offset;

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(NetI2pDataCertificate)

J2OBJC_FIELD_SETTER(NetI2pDataCertificate, _payload_, IOSByteArray *)

inline NetI2pDataCertificate *NetI2pDataCertificate_get_NULL_CERT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NetI2pDataCertificate *NetI2pDataCertificate_NULL_CERT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataCertificate, NULL_CERT, NetI2pDataCertificate *)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_NULL(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_NULL, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_HASHCASH(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_HASHCASH 1
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_HASHCASH, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_HIDDEN(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_HIDDEN 2
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_HIDDEN, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_SIGNED(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_SIGNED 3
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_SIGNED, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_LENGTH_SIGNED_WITH_HASH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pDataCertificate_CERTIFICATE_LENGTH_SIGNED_WITH_HASH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataCertificate, CERTIFICATE_LENGTH_SIGNED_WITH_HASH, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_MULTIPLE(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_MULTIPLE 4
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_MULTIPLE, jint)

inline jint NetI2pDataCertificate_get_CERTIFICATE_TYPE_KEY(void);
#define NetI2pDataCertificate_CERTIFICATE_TYPE_KEY 5
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataCertificate, CERTIFICATE_TYPE_KEY, jint)

FOUNDATION_EXPORT NetI2pDataCertificate *NetI2pDataCertificate_createWithByteArray_withInt_(IOSByteArray *data, jint off);

FOUNDATION_EXPORT NetI2pDataCertificate *NetI2pDataCertificate_createWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pDataCertificate_init(NetI2pDataCertificate *self);

FOUNDATION_EXPORT NetI2pDataCertificate *new_NetI2pDataCertificate_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataCertificate *create_NetI2pDataCertificate_init(void);

FOUNDATION_EXPORT void NetI2pDataCertificate_initWithInt_withByteArray_(NetI2pDataCertificate *self, jint type, IOSByteArray *payload);

FOUNDATION_EXPORT NetI2pDataCertificate *new_NetI2pDataCertificate_initWithInt_withByteArray_(jint type, IOSByteArray *payload) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataCertificate *create_NetI2pDataCertificate_initWithInt_withByteArray_(jint type, IOSByteArray *payload);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataCertificate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataCertificate")
