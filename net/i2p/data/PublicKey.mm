//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/PublicKey.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SDSCache.h"
#include "net/i2p/data/SimpleDataStructure.h"

inline jint NetI2pDataPublicKey_get_CACHE_SIZE(void);
#define NetI2pDataPublicKey_CACHE_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataPublicKey, CACHE_SIZE, jint)

inline NetI2pDataSDSCache *NetI2pDataPublicKey_get__cache(void);
static NetI2pDataSDSCache *NetI2pDataPublicKey__cache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataPublicKey, _cache, NetI2pDataSDSCache *)

J2OBJC_INITIALIZED_DEFN(NetI2pDataPublicKey)

@implementation NetI2pDataPublicKey

+ (jint)KEYSIZE_BYTES {
  return NetI2pDataPublicKey_KEYSIZE_BYTES;
}

+ (NetI2pDataPublicKey *)createWithByteArray:(IOSByteArray *)data
                                     withInt:(jint)off {
  return NetI2pDataPublicKey_createWithByteArray_withInt_(data, off);
}

+ (NetI2pDataPublicKey *)createWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return NetI2pDataPublicKey_createWithJavaIoInputStream_(inArg);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataPublicKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pDataPublicKey_initWithByteArray_(self, data);
  return self;
}

- (instancetype)initWithNSString:(NSString *)base64Data {
  NetI2pDataPublicKey_initWithNSString_(self, base64Data);
  return self;
}

- (jint)length {
  return NetI2pDataPublicKey_KEYSIZE_BYTES;
}

+ (void)clearCache {
  NetI2pDataPublicKey_clearCache();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNetI2pDataPublicKey;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPublicKey;", 0x9, 0, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithByteArray:withInt:);
  methods[1].selector = @selector(createWithJavaIoInputStream:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithByteArray:);
  methods[4].selector = @selector(initWithNSString:);
  methods[5].selector = @selector(length);
  methods[6].selector = @selector(clearCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEYSIZE_BYTES", "I", .constantValue.asInt = NetI2pDataPublicKey_KEYSIZE_BYTES, 0x19, -1, -1, -1, -1 },
    { "CACHE_SIZE", "I", .constantValue.asInt = NetI2pDataPublicKey_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "_cache", "LNetI2pDataSDSCache;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "create", "[BI", "LJavaIoInputStream;", "LJavaIoIOException;", "[B", "LNSString;", "LNetI2pDataDataFormatException;", &NetI2pDataPublicKey__cache, "Lnet/i2p/data/SDSCache<Lnet/i2p/data/PublicKey;>;" };
  static const J2ObjcClassInfo _NetI2pDataPublicKey = { "PublicKey", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pDataPublicKey;
}

+ (void)initialize {
  if (self == [NetI2pDataPublicKey class]) {
    JreStrongAssignAndConsume(&NetI2pDataPublicKey__cache, new_NetI2pDataSDSCache_initWithIOSClass_withInt_withInt_(NetI2pDataPublicKey_class_(), NetI2pDataPublicKey_KEYSIZE_BYTES, NetI2pDataPublicKey_CACHE_SIZE));
    J2OBJC_SET_INITIALIZED(NetI2pDataPublicKey)
  }
}

@end

NetI2pDataPublicKey *NetI2pDataPublicKey_createWithByteArray_withInt_(IOSByteArray *data, jint off) {
  NetI2pDataPublicKey_initialize();
  return ((NetI2pDataPublicKey *) [((NetI2pDataSDSCache *) nil_chk(NetI2pDataPublicKey__cache)) getWithByteArray:data withInt:off]);
}

NetI2pDataPublicKey *NetI2pDataPublicKey_createWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  NetI2pDataPublicKey_initialize();
  return ((NetI2pDataPublicKey *) [((NetI2pDataSDSCache *) nil_chk(NetI2pDataPublicKey__cache)) getWithJavaIoInputStream:inArg]);
}

void NetI2pDataPublicKey_init(NetI2pDataPublicKey *self) {
  NetI2pDataSimpleDataStructure_init(self);
}

NetI2pDataPublicKey *new_NetI2pDataPublicKey_init() {
  J2OBJC_NEW_IMPL(NetI2pDataPublicKey, init)
}

NetI2pDataPublicKey *create_NetI2pDataPublicKey_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataPublicKey, init)
}

void NetI2pDataPublicKey_initWithByteArray_(NetI2pDataPublicKey *self, IOSByteArray *data) {
  NetI2pDataSimpleDataStructure_init(self);
  if (data == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Data must be specified");
  JreStrongAssign(&self->_data_, data);
}

NetI2pDataPublicKey *new_NetI2pDataPublicKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(NetI2pDataPublicKey, initWithByteArray_, data)
}

NetI2pDataPublicKey *create_NetI2pDataPublicKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(NetI2pDataPublicKey, initWithByteArray_, data)
}

void NetI2pDataPublicKey_initWithNSString_(NetI2pDataPublicKey *self, NSString *base64Data) {
  NetI2pDataSimpleDataStructure_init(self);
  [self fromBase64WithNSString:base64Data];
}

NetI2pDataPublicKey *new_NetI2pDataPublicKey_initWithNSString_(NSString *base64Data) {
  J2OBJC_NEW_IMPL(NetI2pDataPublicKey, initWithNSString_, base64Data)
}

NetI2pDataPublicKey *create_NetI2pDataPublicKey_initWithNSString_(NSString *base64Data) {
  J2OBJC_CREATE_IMPL(NetI2pDataPublicKey, initWithNSString_, base64Data)
}

void NetI2pDataPublicKey_clearCache() {
  NetI2pDataPublicKey_initialize();
  [((NetI2pDataSDSCache *) nil_chk(NetI2pDataPublicKey__cache)) clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataPublicKey)
