//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/SigningPublicKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataSigningPublicKey")
#ifdef RESTRICT_NetI2pDataSigningPublicKey
#define INCLUDE_ALL_NetI2pDataSigningPublicKey 0
#else
#define INCLUDE_ALL_NetI2pDataSigningPublicKey 1
#endif
#undef RESTRICT_NetI2pDataSigningPublicKey

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataSigningPublicKey_) && (INCLUDE_ALL_NetI2pDataSigningPublicKey || defined(INCLUDE_NetI2pDataSigningPublicKey))
#define NetI2pDataSigningPublicKey_

#define RESTRICT_NetI2pDataSimpleDataStructure 1
#define INCLUDE_NetI2pDataSimpleDataStructure 1
#include "net/i2p/data/SimpleDataStructure.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class NetI2pCryptoSigType;
@class NetI2pDataKeyCertificate;

@interface NetI2pDataSigningPublicKey : NetI2pDataSimpleDataStructure
@property (readonly, class) jint KEYSIZE_BYTES NS_SWIFT_NAME(KEYSIZE_BYTES);

+ (jint)KEYSIZE_BYTES;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)data;

- (instancetype __nonnull)initWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (instancetype __nonnull)initWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                        withByteArray:(IOSByteArray *)data;

- (instancetype __nonnull)initWithNSString:(NSString *)base64Data;

+ (void)clearCache;

+ (NetI2pDataSigningPublicKey *)createWithByteArray:(IOSByteArray *)data
                                            withInt:(jint)off;

+ (NetI2pDataSigningPublicKey *)createWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (jboolean)isEqual:(id)obj;

- (IOSByteArray *)getPaddingWithNetI2pDataKeyCertificate:(NetI2pDataKeyCertificate *)kcert;

- (NetI2pCryptoSigType *)getType;

- (NSUInteger)hash;

- (jint)length;

- (NSString *)description;

- (NetI2pDataSigningPublicKey *)toTypedKeyWithNetI2pDataKeyCertificate:(NetI2pDataKeyCertificate *)kcert;

- (void)writeTruncatedBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(NetI2pDataSigningPublicKey)

inline jint NetI2pDataSigningPublicKey_get_KEYSIZE_BYTES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pDataSigningPublicKey_KEYSIZE_BYTES;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataSigningPublicKey, KEYSIZE_BYTES, jint)

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pDataSigningPublicKey_createWithByteArray_withInt_(IOSByteArray *data, jint off);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *NetI2pDataSigningPublicKey_createWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_init(NetI2pDataSigningPublicKey *self);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *new_NetI2pDataSigningPublicKey_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *create_NetI2pDataSigningPublicKey_init(void);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_(NetI2pDataSigningPublicKey *self, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *new_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_initWithByteArray_(NetI2pDataSigningPublicKey *self, IOSByteArray *data);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *new_NetI2pDataSigningPublicKey_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *create_NetI2pDataSigningPublicKey_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(NetI2pDataSigningPublicKey *self, NetI2pCryptoSigType *type, IOSByteArray *data);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *new_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(NetI2pCryptoSigType *type, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *create_NetI2pDataSigningPublicKey_initWithNetI2pCryptoSigType_withByteArray_(NetI2pCryptoSigType *type, IOSByteArray *data);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_initWithNSString_(NetI2pDataSigningPublicKey *self, NSString *base64Data);

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *new_NetI2pDataSigningPublicKey_initWithNSString_(NSString *base64Data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSigningPublicKey *create_NetI2pDataSigningPublicKey_initWithNSString_(NSString *base64Data);

FOUNDATION_EXPORT void NetI2pDataSigningPublicKey_clearCache(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataSigningPublicKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataSigningPublicKey")
