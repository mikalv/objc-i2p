//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/PrivateKey.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "net/i2p/crypto/KeyGenerator.h"
#include "net/i2p/data/PrivateKey.h"
#include "net/i2p/data/PublicKey.h"
#include "net/i2p/data/SimpleDataStructure.h"

@implementation NetI2pDataPrivateKey

+ (jint)KEYSIZE_BYTES {
  return NetI2pDataPrivateKey_KEYSIZE_BYTES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataPrivateKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  NetI2pDataPrivateKey_initWithByteArray_(self, data);
  return self;
}

- (instancetype)initWithNSString:(NSString *)base64Data {
  NetI2pDataPrivateKey_initWithNSString_(self, base64Data);
  return self;
}

- (jint)length {
  return NetI2pDataPrivateKey_KEYSIZE_BYTES;
}

- (NetI2pDataPublicKey *)toPublic {
  return NetI2pCryptoKeyGenerator_getPublicKeyWithNetI2pDataPrivateKey_(self);
}

- (NSUInteger)hash {
  if (_data_ == nil) return 0;
  jint rv = IOSByteArray_Get(_data_, NetI2pDataPrivateKey_KEYSIZE_BYTES - 4);
  for (jint i = 1; i < 4; i++) rv ^= (JreLShift32(IOSByteArray_Get(_data_, i + (NetI2pDataPrivateKey_KEYSIZE_BYTES - 4)), (i * 8)));
  return rv;
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) return true;
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pDataPrivateKey class]])) return false;
  return JavaUtilArrays_equalsWithByteArray_withByteArray_(_data_, ((NetI2pDataPrivateKey *) nil_chk(((NetI2pDataPrivateKey *) cast_chk(obj, [NetI2pDataPrivateKey class]))))->_data_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(toPublic);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEYSIZE_BYTES", "I", .constantValue.asInt = NetI2pDataPrivateKey_KEYSIZE_BYTES, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LNSString;", "LNetI2pDataDataFormatException;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _NetI2pDataPrivateKey = { "PrivateKey", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_NetI2pDataPrivateKey;
}

@end

void NetI2pDataPrivateKey_init(NetI2pDataPrivateKey *self) {
  NetI2pDataSimpleDataStructure_init(self);
}

NetI2pDataPrivateKey *new_NetI2pDataPrivateKey_init() {
  J2OBJC_NEW_IMPL(NetI2pDataPrivateKey, init)
}

NetI2pDataPrivateKey *create_NetI2pDataPrivateKey_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataPrivateKey, init)
}

void NetI2pDataPrivateKey_initWithByteArray_(NetI2pDataPrivateKey *self, IOSByteArray *data) {
  NetI2pDataSimpleDataStructure_initWithByteArray_(self, data);
}

NetI2pDataPrivateKey *new_NetI2pDataPrivateKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(NetI2pDataPrivateKey, initWithByteArray_, data)
}

NetI2pDataPrivateKey *create_NetI2pDataPrivateKey_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(NetI2pDataPrivateKey, initWithByteArray_, data)
}

void NetI2pDataPrivateKey_initWithNSString_(NetI2pDataPrivateKey *self, NSString *base64Data) {
  NetI2pDataSimpleDataStructure_init(self);
  [self fromBase64WithNSString:base64Data];
}

NetI2pDataPrivateKey *new_NetI2pDataPrivateKey_initWithNSString_(NSString *base64Data) {
  J2OBJC_NEW_IMPL(NetI2pDataPrivateKey, initWithNSString_, base64Data)
}

NetI2pDataPrivateKey *create_NetI2pDataPrivateKey_initWithNSString_(NSString *base64Data) {
  J2OBJC_CREATE_IMPL(NetI2pDataPrivateKey, initWithNSString_, base64Data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataPrivateKey)
