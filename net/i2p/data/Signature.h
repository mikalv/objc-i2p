//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/Signature.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataSignature")
#ifdef RESTRICT_NetI2pDataSignature
#define INCLUDE_ALL_NetI2pDataSignature 0
#else
#define INCLUDE_ALL_NetI2pDataSignature 1
#endif
#undef RESTRICT_NetI2pDataSignature

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataSignature_) && (INCLUDE_ALL_NetI2pDataSignature || defined(INCLUDE_NetI2pDataSignature))
#define NetI2pDataSignature_

#define RESTRICT_NetI2pDataSimpleDataStructure 1
#define INCLUDE_NetI2pDataSimpleDataStructure 1
#include "net/i2p/data/SimpleDataStructure.h"

@class IOSByteArray;
@class NetI2pCryptoSigType;

@interface NetI2pDataSignature : NetI2pDataSimpleDataStructure
@property (readonly, class) jint SIGNATURE_BYTES NS_SWIFT_NAME(SIGNATURE_BYTES);
@property (readonly, class, strong) IOSByteArray *FAKE_SIGNATURE NS_SWIFT_NAME(FAKE_SIGNATURE);

+ (jint)SIGNATURE_BYTES;

+ (IOSByteArray *)FAKE_SIGNATURE;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)data;

- (instancetype __nonnull)initWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (instancetype __nonnull)initWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type
                                        withByteArray:(IOSByteArray *)data;

- (jboolean)isEqual:(id)obj;

- (NetI2pCryptoSigType *)getType;

- (NSUInteger)hash;

- (jint)length;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(NetI2pDataSignature)

inline jint NetI2pDataSignature_get_SIGNATURE_BYTES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pDataSignature_SIGNATURE_BYTES;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataSignature, SIGNATURE_BYTES, jint)

inline IOSByteArray *NetI2pDataSignature_get_FAKE_SIGNATURE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *NetI2pDataSignature_FAKE_SIGNATURE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataSignature, FAKE_SIGNATURE, IOSByteArray *)

FOUNDATION_EXPORT void NetI2pDataSignature_init(NetI2pDataSignature *self);

FOUNDATION_EXPORT NetI2pDataSignature *new_NetI2pDataSignature_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSignature *create_NetI2pDataSignature_init(void);

FOUNDATION_EXPORT void NetI2pDataSignature_initWithNetI2pCryptoSigType_(NetI2pDataSignature *self, NetI2pCryptoSigType *type);

FOUNDATION_EXPORT NetI2pDataSignature *new_NetI2pDataSignature_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSignature *create_NetI2pDataSignature_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type);

FOUNDATION_EXPORT void NetI2pDataSignature_initWithByteArray_(NetI2pDataSignature *self, IOSByteArray *data);

FOUNDATION_EXPORT NetI2pDataSignature *new_NetI2pDataSignature_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSignature *create_NetI2pDataSignature_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(NetI2pDataSignature *self, NetI2pCryptoSigType *type, IOSByteArray *data);

FOUNDATION_EXPORT NetI2pDataSignature *new_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(NetI2pCryptoSigType *type, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataSignature *create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(NetI2pCryptoSigType *type, IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataSignature)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataSignature")
