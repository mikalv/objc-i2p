//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/DatabaseEntry.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SigAlgo.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/DatabaseEntry.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/KeysAndCert.h"
#include "net/i2p/data/RoutingKeyGenerator.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"

@implementation NetI2pDataDatabaseEntry

+ (jint)KEY_TYPE_ROUTERINFO {
  return NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO;
}

+ (jint)KEY_TYPE_LEASESET {
  return NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataDatabaseEntry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getDate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataKeysAndCert *)getKeysAndCert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataHash *)getHash {
  NetI2pDataKeysAndCert *kac = [self getKeysAndCert];
  if (kac == nil) return nil;
  return [kac getHash];
}

- (jint)getType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NetI2pDataHash *)getRoutingKey {
  NetI2pI2PAppContext *ctx = NetI2pI2PAppContext_getGlobalContext();
  if (![((NetI2pI2PAppContext *) nil_chk(ctx)) isRouterContext]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Not in router context");
  NetI2pDataRoutingKeyGenerator *gen = [ctx routingKeyGenerator];
  jlong mod = [((NetI2pDataRoutingKeyGenerator *) nil_chk(gen)) getLastChanged];
  if (mod != JreLoadVolatileLong(&_routingKeyGenMod_)) {
    JreVolatileStrongAssign(&_currentRoutingKey_, [gen getRoutingKeyWithNetI2pDataHash:[self getHash]]);
    JreAssignVolatileLong(&_routingKeyGenMod_, mod);
  }
  return JreLoadVolatileId(&_currentRoutingKey_);
}

- (jboolean)validateRoutingKey {
  NetI2pI2PAppContext *ctx = NetI2pI2PAppContext_getGlobalContext();
  if (![((NetI2pI2PAppContext *) nil_chk(ctx)) isRouterContext]) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Not in router context");
  NetI2pDataRoutingKeyGenerator *gen = [ctx routingKeyGenerator];
  NetI2pDataHash *destKey = [self getHash];
  NetI2pDataHash *rk = [((NetI2pDataRoutingKeyGenerator *) nil_chk(gen)) getRoutingKeyWithNetI2pDataHash:destKey];
  return [((NetI2pDataHash *) nil_chk(rk)) isEqual:[self getRoutingKey]];
}

- (NetI2pDataSignature *)getSignature {
  return JreLoadVolatileId(&_signature_);
}

- (void)setSignatureWithNetI2pDataSignature:(NetI2pDataSignature *)signature {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  JreVolatileStrongAssign(&_signature_, signature);
}

- (void)signWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)key {
  if (JreLoadVolatileId(&_signature_) != nil) @throw create_JavaLangIllegalStateException_init();
  IOSByteArray *bytes = [self getBytes];
  if (bytes == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Not enough data to sign");
  if (key == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"No signing key");
  JreVolatileStrongAssign(&_signature_, [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) signWithByteArray:bytes withNetI2pDataSigningPrivateKey:key]);
  if (JreLoadVolatileId(&_signature_) == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$@$", @"Signature failed with ", [key getType], @" key"));
}

- (NetI2pDataSigningPublicKey *)getSigningPublicKey {
  NetI2pDataKeysAndCert *kac = [self getKeysAndCert];
  if (kac == nil) return nil;
  return [kac getSigningPublicKey];
}

- (jboolean)verifySignature {
  if (JreLoadVolatileId(&_signature_) == nil) return false;
  IOSByteArray *data;
  @try {
    data = [self getBytes];
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    return false;
  }
  if (data == nil) return false;
  NetI2pDataSigningPublicKey *spk = [self getSigningPublicKey];
  NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(spk)) getType];
  if (type == nil || [type getBaseAlgorithm] == JreLoadEnum(NetI2pCryptoSigAlgo, RSA)) return false;
  return [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) verifySignatureWithNetI2pDataSignature:JreLoadVolatileId(&_signature_) withByteArray:data withNetI2pDataSigningPublicKey:spk];
}

- (void)__javaClone:(NetI2pDataDatabaseEntry *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_signature_, &original->_signature_);
  JreCloneVolatileStrong(&_currentRoutingKey_, &original->_currentRoutingKey_);
}

- (void)dealloc {
  JreReleaseVolatile(&_signature_);
  JreReleaseVolatile(&_currentRoutingKey_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataKeysAndCert;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x404, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataSignature;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 0, -1, -1, -1 },
    { NULL, "LNetI2pDataSigningPublicKey;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDate);
  methods[2].selector = @selector(getKeysAndCert);
  methods[3].selector = @selector(getHash);
  methods[4].selector = @selector(getType);
  methods[5].selector = @selector(getBytes);
  methods[6].selector = @selector(getRoutingKey);
  methods[7].selector = @selector(validateRoutingKey);
  methods[8].selector = @selector(getSignature);
  methods[9].selector = @selector(setSignatureWithNetI2pDataSignature:);
  methods[10].selector = @selector(signWithNetI2pDataSigningPrivateKey:);
  methods[11].selector = @selector(getSigningPublicKey);
  methods[12].selector = @selector(verifySignature);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEY_TYPE_ROUTERINFO", "I", .constantValue.asInt = NetI2pDataDatabaseEntry_KEY_TYPE_ROUTERINFO, 0x19, -1, -1, -1, -1 },
    { "KEY_TYPE_LEASESET", "I", .constantValue.asInt = NetI2pDataDatabaseEntry_KEY_TYPE_LEASESET, 0x19, -1, -1, -1, -1 },
    { "_signature_", "LNetI2pDataSignature;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_currentRoutingKey_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "_routingKeyGenMod_", "J", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDataFormatException;", "setSignature", "LNetI2pDataSignature;", "sign", "LNetI2pDataSigningPrivateKey;" };
  static const J2ObjcClassInfo _NetI2pDataDatabaseEntry = { "DatabaseEntry", "net.i2p.data", ptrTable, methods, fields, 7, 0x401, 13, 5, -1, -1, -1, -1, -1 };
  return &_NetI2pDataDatabaseEntry;
}

@end

void NetI2pDataDatabaseEntry_init(NetI2pDataDatabaseEntry *self) {
  NetI2pDataDataStructureImpl_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataDatabaseEntry)
