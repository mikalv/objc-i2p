//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/VerifiedDestination.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataVerifiedDestination")
#ifdef RESTRICT_NetI2pDataVerifiedDestination
#define INCLUDE_ALL_NetI2pDataVerifiedDestination 0
#else
#define INCLUDE_ALL_NetI2pDataVerifiedDestination 1
#endif
#undef RESTRICT_NetI2pDataVerifiedDestination

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataVerifiedDestination_) && (INCLUDE_ALL_NetI2pDataVerifiedDestination || defined(INCLUDE_NetI2pDataVerifiedDestination))
#define NetI2pDataVerifiedDestination_

#define RESTRICT_NetI2pDataDestination 1
#define INCLUDE_NetI2pDataDestination 1
#include "net/i2p/data/Destination.h"

@interface NetI2pDataVerifiedDestination : NetI2pDataDestination
@property (readonly, class) jint MIN_HASHCASH_EFFORT NS_SWIFT_NAME(MIN_HASHCASH_EFFORT);
@property (readonly, class) jint CERTIFICATE_LENGTH_SIGNED NS_SWIFT_NAME(CERTIFICATE_LENGTH_SIGNED);
@property (readonly, class) jint CERTIFICATE_LENGTH_SIGNED_WITH_HASH NS_SWIFT_NAME(CERTIFICATE_LENGTH_SIGNED_WITH_HASH);

+ (jint)MIN_HASHCASH_EFFORT;

+ (jint)CERTIFICATE_LENGTH_SIGNED;

+ (jint)CERTIFICATE_LENGTH_SIGNED_WITH_HASH;

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNetI2pDataDestination:(NetI2pDataDestination *)d;

- (instancetype __nonnull)initWithNSString:(NSString *)s;

- (NSString *)description;

- (jboolean)verifyCertWithBoolean:(jboolean)allowNone;

#pragma mark Protected

- (jboolean)verifyHashCashCert;

- (jboolean)verifySignedCert;

- (jboolean)verifyUnknownCert;

@end

J2OBJC_STATIC_INIT(NetI2pDataVerifiedDestination)

inline jint NetI2pDataVerifiedDestination_get_MIN_HASHCASH_EFFORT(void);
#define NetI2pDataVerifiedDestination_MIN_HASHCASH_EFFORT 20
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataVerifiedDestination, MIN_HASHCASH_EFFORT, jint)

inline jint NetI2pDataVerifiedDestination_get_CERTIFICATE_LENGTH_SIGNED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pDataVerifiedDestination_CERTIFICATE_LENGTH_SIGNED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataVerifiedDestination, CERTIFICATE_LENGTH_SIGNED, jint)

inline jint NetI2pDataVerifiedDestination_get_CERTIFICATE_LENGTH_SIGNED_WITH_HASH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint NetI2pDataVerifiedDestination_CERTIFICATE_LENGTH_SIGNED_WITH_HASH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataVerifiedDestination, CERTIFICATE_LENGTH_SIGNED_WITH_HASH, jint)

FOUNDATION_EXPORT void NetI2pDataVerifiedDestination_init(NetI2pDataVerifiedDestination *self);

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *new_NetI2pDataVerifiedDestination_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *create_NetI2pDataVerifiedDestination_init(void);

FOUNDATION_EXPORT void NetI2pDataVerifiedDestination_initWithNSString_(NetI2pDataVerifiedDestination *self, NSString *s);

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *new_NetI2pDataVerifiedDestination_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *create_NetI2pDataVerifiedDestination_initWithNSString_(NSString *s);

FOUNDATION_EXPORT void NetI2pDataVerifiedDestination_initWithNetI2pDataDestination_(NetI2pDataVerifiedDestination *self, NetI2pDataDestination *d);

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *new_NetI2pDataVerifiedDestination_initWithNetI2pDataDestination_(NetI2pDataDestination *d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataVerifiedDestination *create_NetI2pDataVerifiedDestination_initWithNetI2pDataDestination_(NetI2pDataDestination *d);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataVerifiedDestination)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataVerifiedDestination")
