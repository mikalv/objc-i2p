//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/LeaseSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataLeaseSet")
#ifdef RESTRICT_NetI2pDataLeaseSet
#define INCLUDE_ALL_NetI2pDataLeaseSet 0
#else
#define INCLUDE_ALL_NetI2pDataLeaseSet 1
#endif
#undef RESTRICT_NetI2pDataLeaseSet

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataLeaseSet_) && (INCLUDE_ALL_NetI2pDataLeaseSet || defined(INCLUDE_NetI2pDataLeaseSet))
#define NetI2pDataLeaseSet_

#define RESTRICT_NetI2pDataDatabaseEntry 1
#define INCLUDE_NetI2pDataDatabaseEntry 1
#include "net/i2p/data/DatabaseEntry.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class NetI2pDataDestination;
@class NetI2pDataKeysAndCert;
@class NetI2pDataLease;
@class NetI2pDataPublicKey;
@class NetI2pDataSessionKey;
@class NetI2pDataSigningPublicKey;

@interface NetI2pDataLeaseSet : NetI2pDataDatabaseEntry
@property (readonly, class) jint MAX_LEASES NS_SWIFT_NAME(MAX_LEASES);

+ (jint)MAX_LEASES;

#pragma mark Public

- (instancetype __nonnull)init;

- (void)addLeaseWithNetI2pDataLease:(NetI2pDataLease *)lease;

- (void)encryptWithNetI2pDataSessionKey:(NetI2pDataSessionKey *)key;

- (jboolean)isEqual:(id)object;

- (jlong)getDate;

- (NetI2pDataDestination *)getDestination;

- (jlong)getEarliestLeaseDate;

- (NetI2pDataPublicKey *)getEncryptionKey;

- (NetI2pDataKeysAndCert *)getKeysAndCert;

- (jlong)getLatestLeaseDate;

- (NetI2pDataLease *)getLeaseWithInt:(jint)index;

- (jint)getLeaseCount;

- (jboolean)getReceivedAsPublished;

- (jboolean)getReceivedAsReply;

- (NetI2pDataSigningPublicKey *)getSigningKey;

- (jint)getType;

- (NSUInteger)hash;

- (jboolean)isCurrentWithLong:(jlong)fudge;

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (void)setDestinationWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (void)setEncryptionKeyWithNetI2pDataPublicKey:(NetI2pDataPublicKey *)encryptionKey;

- (void)setReceivedAsPublishedWithBoolean:(jboolean)received;

- (void)setReceivedAsReply;

- (void)setSigningKeyWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)key;

- (jint)size;

- (NSString *)description;

- (jboolean)verifySignature;

- (jboolean)verifySignatureWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)signingKey;

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Protected

- (IOSByteArray *)getBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataLeaseSet)

inline jint NetI2pDataLeaseSet_get_MAX_LEASES(void);
#define NetI2pDataLeaseSet_MAX_LEASES 16
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataLeaseSet, MAX_LEASES, jint)

FOUNDATION_EXPORT void NetI2pDataLeaseSet_init(NetI2pDataLeaseSet *self);

FOUNDATION_EXPORT NetI2pDataLeaseSet *new_NetI2pDataLeaseSet_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataLeaseSet *create_NetI2pDataLeaseSet_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataLeaseSet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataLeaseSet")
