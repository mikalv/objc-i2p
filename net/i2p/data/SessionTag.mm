//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/SessionTag.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "net/i2p/data/SessionTag.h"
#include "net/i2p/data/SimpleDataStructure.h"
#include "net/i2p/util/RandomSource.h"
#include "net/i2p/util/SimpleByteCache.h"
#include "net/i2p/util/SipHash.h"

@interface NetI2pDataSessionTag () {
 @public
  jint _cachedHashCode_;
}

@end

@implementation NetI2pDataSessionTag

+ (jint)BYTE_LENGTH {
  return NetI2pDataSessionTag_BYTE_LENGTH;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataSessionTag_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)create {
  NetI2pDataSessionTag_initWithBoolean_(self, create);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)val {
  NetI2pDataSessionTag_initWithByteArray_(self, val);
  return self;
}

- (jint)length {
  return NetI2pDataSessionTag_BYTE_LENGTH;
}

- (void)setDataWithByteArray:(IOSByteArray *)data {
  [super setDataWithByteArray:data];
  _cachedHashCode_ = NetI2pUtilSipHash_hashCodeWithByteArray_(data);
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  [super readBytesWithJavaIoInputStream:inArg];
  _cachedHashCode_ = NetI2pUtilSipHash_hashCodeWithByteArray_(_data_);
}

- (NSUInteger)hash {
  return _cachedHashCode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(setDataWithByteArray:);
  methods[5].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE_LENGTH", "I", .constantValue.asInt = NetI2pDataSessionTag_BYTE_LENGTH, 0x19, -1, -1, -1, -1 },
    { "_cachedHashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "[B", "setData", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "hashCode" };
  static const J2ObjcClassInfo _NetI2pDataSessionTag = { "SessionTag", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataSessionTag;
}

@end

void NetI2pDataSessionTag_init(NetI2pDataSessionTag *self) {
  NetI2pDataSimpleDataStructure_init(self);
}

NetI2pDataSessionTag *new_NetI2pDataSessionTag_init() {
  J2OBJC_NEW_IMPL(NetI2pDataSessionTag, init)
}

NetI2pDataSessionTag *create_NetI2pDataSessionTag_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataSessionTag, init)
}

void NetI2pDataSessionTag_initWithBoolean_(NetI2pDataSessionTag *self, jboolean create) {
  NetI2pDataSimpleDataStructure_init(self);
  if (create) {
    JreStrongAssign(&self->_data_, NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataSessionTag_BYTE_LENGTH));
    [((NetI2pUtilRandomSource *) nil_chk(NetI2pUtilRandomSource_getInstance())) nextBytesWithByteArray:self->_data_];
    self->_cachedHashCode_ = NetI2pUtilSipHash_hashCodeWithByteArray_(self->_data_);
  }
}

NetI2pDataSessionTag *new_NetI2pDataSessionTag_initWithBoolean_(jboolean create) {
  J2OBJC_NEW_IMPL(NetI2pDataSessionTag, initWithBoolean_, create)
}

NetI2pDataSessionTag *create_NetI2pDataSessionTag_initWithBoolean_(jboolean create) {
  J2OBJC_CREATE_IMPL(NetI2pDataSessionTag, initWithBoolean_, create)
}

void NetI2pDataSessionTag_initWithByteArray_(NetI2pDataSessionTag *self, IOSByteArray *val) {
  NetI2pDataSimpleDataStructure_initWithByteArray_(self, val);
}

NetI2pDataSessionTag *new_NetI2pDataSessionTag_initWithByteArray_(IOSByteArray *val) {
  J2OBJC_NEW_IMPL(NetI2pDataSessionTag, initWithByteArray_, val)
}

NetI2pDataSessionTag *create_NetI2pDataSessionTag_initWithByteArray_(IOSByteArray *val) {
  J2OBJC_CREATE_IMPL(NetI2pDataSessionTag, initWithByteArray_, val)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataSessionTag)
