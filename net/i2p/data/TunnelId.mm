//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/TunnelId.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/TunnelId.h"

@interface NetI2pDataTunnelId () {
 @public
  jlong _tunnelId_;
}

@end

@implementation NetI2pDataTunnelId

+ (jlong)MAX_ID_VALUE {
  return NetI2pDataTunnelId_MAX_ID_VALUE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataTunnelId_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLong:(jlong)id_ {
  NetI2pDataTunnelId_initWithLong_(self, id_);
  return self;
}

- (jlong)getTunnelId {
  return _tunnelId_;
}

- (void)setTunnelIdWithLong:(jlong)id_ {
  if (id_ <= 0 || id_ > NetI2pDataTunnelId_MAX_ID_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"bad id ", id_));
  _tunnelId_ = id_;
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  _tunnelId_ = NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(inArg, 4);
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (_tunnelId_ < 0) @throw create_NetI2pDataDataFormatException_initWithNSString_(JreStrcat("$J", @"Invalid tunnel ID: ", _tunnelId_));
  NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(outArg, 4, _tunnelId_);
}

- (IOSByteArray *)toByteArray {
  return NetI2pDataDataHelper_toLongWithInt_withLong_(4, _tunnelId_);
}

- (void)fromByteArrayWithByteArray:(IOSByteArray *)data {
  if (data == nil) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Null data passed in");
  if (data->size_ != 4) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Bad data length");
  _tunnelId_ = (jint) NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(data, 0, 4);
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) return true;
  if ((obj == nil) || !([obj isKindOfClass:[NetI2pDataTunnelId class]])) return false;
  return _tunnelId_ == ((NetI2pDataTunnelId *) nil_chk(((NetI2pDataTunnelId *) cast_chk(obj, [NetI2pDataTunnelId class]))))->_tunnelId_;
}

- (NSUInteger)hash {
  return (jint) _tunnelId_;
}

- (NSString *)description {
  return NSString_java_valueOfLong_(_tunnelId_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithLong:);
  methods[2].selector = @selector(getTunnelId);
  methods[3].selector = @selector(setTunnelIdWithLong:);
  methods[4].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[5].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[6].selector = @selector(toByteArray);
  methods[7].selector = @selector(fromByteArrayWithByteArray:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_tunnelId_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_ID_VALUE", "J", .constantValue.asLong = NetI2pDataTunnelId_MAX_ID_VALUE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "setTunnelId", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "fromByteArray", "[B", "LNetI2pDataDataFormatException;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pDataTunnelId = { "TunnelId", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pDataTunnelId;
}

@end

void NetI2pDataTunnelId_init(NetI2pDataTunnelId *self) {
  NetI2pDataDataStructureImpl_init(self);
  self->_tunnelId_ = -1;
}

NetI2pDataTunnelId *new_NetI2pDataTunnelId_init() {
  J2OBJC_NEW_IMPL(NetI2pDataTunnelId, init)
}

NetI2pDataTunnelId *create_NetI2pDataTunnelId_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataTunnelId, init)
}

void NetI2pDataTunnelId_initWithLong_(NetI2pDataTunnelId *self, jlong id_) {
  NetI2pDataDataStructureImpl_init(self);
  [self setTunnelIdWithLong:id_];
}

NetI2pDataTunnelId *new_NetI2pDataTunnelId_initWithLong_(jlong id_) {
  J2OBJC_NEW_IMPL(NetI2pDataTunnelId, initWithLong_, id_)
}

NetI2pDataTunnelId *create_NetI2pDataTunnelId_initWithLong_(jlong id_) {
  J2OBJC_CREATE_IMPL(NetI2pDataTunnelId, initWithLong_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataTunnelId)
