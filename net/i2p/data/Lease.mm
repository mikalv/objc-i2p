//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/Lease.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Date.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/DataStructureImpl.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Lease.h"
#include "net/i2p/data/TunnelId.h"
#include "net/i2p/util/Clock.h"

@interface NetI2pDataLease () {
 @public
  NetI2pDataHash *_gateway_;
  NetI2pDataTunnelId *_tunnelId_;
  JavaUtilDate *_end_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pDataLease, _gateway_, NetI2pDataHash *)
J2OBJC_FIELD_SETTER(NetI2pDataLease, _tunnelId_, NetI2pDataTunnelId *)
J2OBJC_FIELD_SETTER(NetI2pDataLease, _end_, JavaUtilDate *)

@implementation NetI2pDataLease

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataLease_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NetI2pDataHash *)getGateway {
  return _gateway_;
}

- (void)setGatewayWithNetI2pDataHash:(NetI2pDataHash *)ident {
  JreStrongAssign(&_gateway_, ident);
}

- (NetI2pDataTunnelId *)getTunnelId {
  return _tunnelId_;
}

- (void)setTunnelIdWithNetI2pDataTunnelId:(NetI2pDataTunnelId *)id_ {
  JreStrongAssign(&_tunnelId_, id_);
}

- (JavaUtilDate *)getEndDate {
  return _end_;
}

- (void)setEndDateWithJavaUtilDate:(JavaUtilDate *)date {
  JreStrongAssign(&_end_, date);
}

- (jboolean)isExpired {
  return [self isExpiredWithLong:0];
}

- (jboolean)isExpiredWithLong:(jlong)fudgeFactor {
  if (_end_ == nil) return true;
  return [_end_ getTime] < [((NetI2pUtilClock *) nil_chk(NetI2pUtilClock_getInstance())) now] - fudgeFactor;
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  JreStrongAssign(&_gateway_, NetI2pDataHash_createWithJavaIoInputStream_(inArg));
  JreStrongAssignAndConsume(&_tunnelId_, new_NetI2pDataTunnelId_init());
  [_tunnelId_ readBytesWithJavaIoInputStream:inArg];
  JreStrongAssign(&_end_, NetI2pDataDataHelper_readDateWithJavaIoInputStream_(inArg));
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((_gateway_ == nil) || (_tunnelId_ == nil)) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"Not enough data to write out a Lease");
  [((NetI2pDataHash *) nil_chk(_gateway_)) writeBytesWithJavaIoOutputStream:outArg];
  [((NetI2pDataTunnelId *) nil_chk(_tunnelId_)) writeBytesWithJavaIoOutputStream:outArg];
  NetI2pDataDataHelper_writeDateWithJavaIoOutputStream_withJavaUtilDate_(outArg, _end_);
}

- (jboolean)isEqual:(id)object {
  if (object == self) return true;
  if ((object == nil) || !([object isKindOfClass:[NetI2pDataLease class]])) return false;
  NetI2pDataLease *lse = (NetI2pDataLease *) cast_chk(object, [NetI2pDataLease class]);
  return NetI2pDataDataHelper_eqWithId_withId_(_end_, [((NetI2pDataLease *) nil_chk(lse)) getEndDate]) && NetI2pDataDataHelper_eqWithId_withId_(_tunnelId_, [lse getTunnelId]) && NetI2pDataDataHelper_eqWithId_withId_(_gateway_, [lse getGateway]);
}

- (NSUInteger)hash {
  return NetI2pDataDataHelper_hashCodeWithJavaUtilDate_(_end_) + NetI2pDataDataHelper_hashCodeWithId_(_gateway_) + NetI2pDataDataHelper_hashCodeWithId_(_tunnelId_);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(128);
  [buf appendWithNSString:@"[Lease: "];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tEnd Date: "])) appendWithId:_end_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tGateway: "])) appendWithId:_gateway_];
  [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tTunnelId: "])) appendWithId:_tunnelId_];
  [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(_gateway_);
  RELEASE_(_tunnelId_);
  RELEASE_(_end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataTunnelId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGateway);
  methods[2].selector = @selector(setGatewayWithNetI2pDataHash:);
  methods[3].selector = @selector(getTunnelId);
  methods[4].selector = @selector(setTunnelIdWithNetI2pDataTunnelId:);
  methods[5].selector = @selector(getEndDate);
  methods[6].selector = @selector(setEndDateWithJavaUtilDate:);
  methods[7].selector = @selector(isExpired);
  methods[8].selector = @selector(isExpiredWithLong:);
  methods[9].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[10].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_gateway_", "LNetI2pDataHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_tunnelId_", "LNetI2pDataTunnelId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_end_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setGateway", "LNetI2pDataHash;", "setTunnelId", "LNetI2pDataTunnelId;", "setEndDate", "LJavaUtilDate;", "isExpired", "J", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _NetI2pDataLease = { "Lease", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 14, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pDataLease;
}

@end

void NetI2pDataLease_init(NetI2pDataLease *self) {
  NetI2pDataDataStructureImpl_init(self);
}

NetI2pDataLease *new_NetI2pDataLease_init() {
  J2OBJC_NEW_IMPL(NetI2pDataLease, init)
}

NetI2pDataLease *create_NetI2pDataLease_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataLease, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataLease)
