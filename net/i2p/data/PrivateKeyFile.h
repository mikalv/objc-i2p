//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/PrivateKeyFile.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataPrivateKeyFile")
#ifdef RESTRICT_NetI2pDataPrivateKeyFile
#define INCLUDE_ALL_NetI2pDataPrivateKeyFile 0
#else
#define INCLUDE_ALL_NetI2pDataPrivateKeyFile 1
#endif
#undef RESTRICT_NetI2pDataPrivateKeyFile

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataPrivateKeyFile_) && (INCLUDE_ALL_NetI2pDataPrivateKeyFile || defined(INCLUDE_NetI2pDataPrivateKeyFile))
#define NetI2pDataPrivateKeyFile_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaUtilProperties;
@class NetI2pCryptoSigType;
@class NetI2pDataCertificate;
@class NetI2pDataDestination;
@class NetI2pDataPrivateKey;
@class NetI2pDataPublicKey;
@class NetI2pDataSignature;
@class NetI2pDataSigningPrivateKey;
@class NetI2pDataSigningPublicKey;
@protocol NetI2pClientI2PClient;
@protocol NetI2pClientI2PSession;

@interface NetI2pDataPrivateKeyFile : NSObject {
 @public
  JavaIoFile *file_;
  NetI2pDataDestination *dest_;
  NetI2pDataPrivateKey *privKey_;
  NetI2pDataSigningPrivateKey *signingPrivKey_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withNetI2pDataDestination:(NetI2pDataDestination *)dest
                    withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)pk
             withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withNetI2pClientI2PClient:(id<NetI2pClientI2PClient>)client;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                  withNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                     withNetI2pDataPublicKey:(NetI2pDataPublicKey *)pubkey
              withNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)spubkey
                   withNetI2pDataCertificate:(NetI2pDataCertificate *)cert
                    withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)pk
             withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                     withNetI2pDataPublicKey:(NetI2pDataPublicKey *)pubkey
              withNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)spubkey
                   withNetI2pDataCertificate:(NetI2pDataCertificate *)cert
                    withNetI2pDataPrivateKey:(NetI2pDataPrivateKey *)pk
             withNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk
                               withByteArray:(IOSByteArray *)padding;

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (instancetype __nonnull)initWithNSString:(NSString *)file;

+ (jboolean)checkSignatureWithNetI2pDataSignature:(NetI2pDataSignature *)s
                                    withByteArray:(IOSByteArray *)data
                   withNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)spk;

- (NetI2pDataDestination *)createIfAbsent;

- (NetI2pDataDestination *)createIfAbsentWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

+ (NSString *)estimateHashCashTimeWithInt:(jint)hashEffort;

- (NetI2pDataDestination *)getDestination;

- (NetI2pDataPrivateKey *)getPrivKey;

- (NetI2pDataSigningPrivateKey *)getSigningPrivKey;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (id<NetI2pClientI2PSession>)open;

- (id<NetI2pClientI2PSession>)openWithJavaUtilProperties:(JavaUtilProperties *)opts;

- (NetI2pDataCertificate *)setCertTypeWithInt:(jint)t;

- (void)setDestinationWithNetI2pDataDestination:(NetI2pDataDestination *)d;

- (NetI2pDataCertificate *)setHashCashCertWithInt:(jint)effort;

- (NetI2pDataCertificate *)setKeyCertWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type;

- (NetI2pDataCertificate *)setSignedCertWithNetI2pDataPrivateKeyFile:(NetI2pDataPrivateKeyFile *)pkf2;

- (NSString *)description;

- (jboolean)validateKeyPairs;

+ (jboolean)verifySignatureWithNetI2pDataDestination:(NetI2pDataDestination *)d;

- (void)write;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pDataPrivateKeyFile)

J2OBJC_FIELD_SETTER(NetI2pDataPrivateKeyFile, file_, JavaIoFile *)
J2OBJC_FIELD_SETTER(NetI2pDataPrivateKeyFile, dest_, NetI2pDataDestination *)
J2OBJC_FIELD_SETTER(NetI2pDataPrivateKeyFile, privKey_, NetI2pDataPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pDataPrivateKeyFile, signingPrivKey_, NetI2pDataSigningPrivateKey *)

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_mainWithNSStringArray_(IOSObjectArray *args);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithNSString_(NetI2pDataPrivateKeyFile *self, NSString *file);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithNSString_(NSString *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithNSString_(NSString *file);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PClient_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file, id<NetI2pClientI2PClient> client);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PClient_(JavaIoFile *file, id<NetI2pClientI2PClient> client) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PClient_(JavaIoFile *file, id<NetI2pClientI2PClient> client);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PSession_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file, id<NetI2pClientI2PSession> session);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PSession_(JavaIoFile *file, id<NetI2pClientI2PSession> session) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pClientI2PSession_(JavaIoFile *file, id<NetI2pClientI2PSession> session);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataDestination_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file, NetI2pDataDestination *dest, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataDestination_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(JavaIoFile *file, NetI2pDataDestination *dest, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataDestination_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(JavaIoFile *file, NetI2pDataDestination *dest, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_(JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_withByteArray_(NetI2pDataPrivateKeyFile *self, JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk, IOSByteArray *padding);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_withByteArray_(JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk, IOSByteArray *padding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoFile_withNetI2pDataPublicKey_withNetI2pDataSigningPublicKey_withNetI2pDataCertificate_withNetI2pDataPrivateKey_withNetI2pDataSigningPrivateKey_withByteArray_(JavaIoFile *file, NetI2pDataPublicKey *pubkey, NetI2pDataSigningPublicKey *spubkey, NetI2pDataCertificate *cert, NetI2pDataPrivateKey *pk, NetI2pDataSigningPrivateKey *spk, IOSByteArray *padding);

FOUNDATION_EXPORT void NetI2pDataPrivateKeyFile_initWithJavaIoInputStream_(NetI2pDataPrivateKeyFile *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *new_NetI2pDataPrivateKeyFile_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataPrivateKeyFile *create_NetI2pDataPrivateKeyFile_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT NSString *NetI2pDataPrivateKeyFile_estimateHashCashTimeWithInt_(jint hashEffort);

FOUNDATION_EXPORT jboolean NetI2pDataPrivateKeyFile_verifySignatureWithNetI2pDataDestination_(NetI2pDataDestination *d);

FOUNDATION_EXPORT jboolean NetI2pDataPrivateKeyFile_checkSignatureWithNetI2pDataSignature_withByteArray_withNetI2pDataSigningPublicKey_(NetI2pDataSignature *s, IOSByteArray *data, NetI2pDataSigningPublicKey *spk);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataPrivateKeyFile)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataPrivateKeyFile")
