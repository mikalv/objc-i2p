//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/KeyCertificate.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Certificate.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/KeyCertificate.h"
#include "net/i2p/data/SigningPublicKey.h"

static jint (*NetI2pDataKeyCertificate_ECDSA256Cert_super$_hashCode)(id, SEL);

static jint (*NetI2pDataKeyCertificate_Ed25519Cert_super$_hashCode)(id, SEL);

@interface NetI2pDataKeyCertificate_ECDSA256Cert : NetI2pDataKeyCertificate {
 @public
  jint _hashcode_;
}

- (instancetype)init;

- (void)setCertificateTypeWithInt:(jint)type;

- (void)setPayloadWithByteArray:(IOSByteArray *)payload;

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)writeBytesWithByteArray:(IOSByteArray *)target
                        withInt:(jint)offset;

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset;

- (jint)size;

- (NSUInteger)hash;

@end

J2OBJC_STATIC_INIT(NetI2pDataKeyCertificate_ECDSA256Cert)

inline IOSByteArray *NetI2pDataKeyCertificate_ECDSA256Cert_get_ECDSA256_DATA(void);
static IOSByteArray *NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataKeyCertificate_ECDSA256Cert, ECDSA256_DATA, IOSByteArray *)

inline jint NetI2pDataKeyCertificate_ECDSA256Cert_get_ECDSA256_LENGTH(void);
static jint NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataKeyCertificate_ECDSA256Cert, ECDSA256_LENGTH, jint)

__attribute__((unused)) static void NetI2pDataKeyCertificate_ECDSA256Cert_init(NetI2pDataKeyCertificate_ECDSA256Cert *self);

__attribute__((unused)) static NetI2pDataKeyCertificate_ECDSA256Cert *new_NetI2pDataKeyCertificate_ECDSA256Cert_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataKeyCertificate_ECDSA256Cert *create_NetI2pDataKeyCertificate_ECDSA256Cert_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataKeyCertificate_ECDSA256Cert)

@interface NetI2pDataKeyCertificate_Ed25519Cert : NetI2pDataKeyCertificate {
 @public
  jint _hashcode_;
}

- (instancetype)init;

- (void)setCertificateTypeWithInt:(jint)type;

- (void)setPayloadWithByteArray:(IOSByteArray *)payload;

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)writeBytesWithByteArray:(IOSByteArray *)target
                        withInt:(jint)offset;

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset;

- (jint)size;

- (NSUInteger)hash;

@end

J2OBJC_STATIC_INIT(NetI2pDataKeyCertificate_Ed25519Cert)

inline IOSByteArray *NetI2pDataKeyCertificate_Ed25519Cert_get_ED_DATA(void);
static IOSByteArray *NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pDataKeyCertificate_Ed25519Cert, ED_DATA, IOSByteArray *)

inline jint NetI2pDataKeyCertificate_Ed25519Cert_get_ED_LENGTH(void);
static jint NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(NetI2pDataKeyCertificate_Ed25519Cert, ED_LENGTH, jint)

__attribute__((unused)) static void NetI2pDataKeyCertificate_Ed25519Cert_init(NetI2pDataKeyCertificate_Ed25519Cert *self);

__attribute__((unused)) static NetI2pDataKeyCertificate_Ed25519Cert *new_NetI2pDataKeyCertificate_Ed25519Cert_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetI2pDataKeyCertificate_Ed25519Cert *create_NetI2pDataKeyCertificate_Ed25519Cert_init(void);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataKeyCertificate_Ed25519Cert)

J2OBJC_INITIALIZED_DEFN(NetI2pDataKeyCertificate)

IOSByteArray *NetI2pDataKeyCertificate_Ed25519_PAYLOAD;
IOSByteArray *NetI2pDataKeyCertificate_ECDSA256_PAYLOAD;
NetI2pDataKeyCertificate *NetI2pDataKeyCertificate_ELG_ECDSA256_CERT;
NetI2pDataKeyCertificate *NetI2pDataKeyCertificate_ELG_Ed25519_CERT;

@implementation NetI2pDataKeyCertificate

+ (jint)HEADER_LENGTH {
  return NetI2pDataKeyCertificate_HEADER_LENGTH;
}

+ (IOSByteArray *)Ed25519_PAYLOAD {
  return NetI2pDataKeyCertificate_Ed25519_PAYLOAD;
}

+ (IOSByteArray *)ECDSA256_PAYLOAD {
  return NetI2pDataKeyCertificate_ECDSA256_PAYLOAD;
}

+ (NetI2pDataKeyCertificate *)ELG_ECDSA256_CERT {
  return NetI2pDataKeyCertificate_ELG_ECDSA256_CERT;
}

+ (NetI2pDataKeyCertificate *)ELG_Ed25519_CERT {
  return NetI2pDataKeyCertificate_ELG_Ed25519_CERT;
}

- (instancetype)initWithByteArray:(IOSByteArray *)payload {
  NetI2pDataKeyCertificate_initWithByteArray_(self, payload);
  return self;
}

- (instancetype)initWithNetI2pDataSigningPublicKey:(NetI2pDataSigningPublicKey *)spk {
  NetI2pDataKeyCertificate_initWithNetI2pDataSigningPublicKey_(self, spk);
  return self;
}

- (instancetype)initWithNetI2pCryptoSigType:(NetI2pCryptoSigType *)type {
  NetI2pDataKeyCertificate_initWithNetI2pCryptoSigType_(self, type);
  return self;
}

- (instancetype)initWithNetI2pDataCertificate:(NetI2pDataCertificate *)cert {
  NetI2pDataKeyCertificate_initWithNetI2pDataCertificate_(self, cert);
  return self;
}

- (jint)getSigTypeCode {
  if (_payload_ == nil) return -1;
  return (JreLShift32((IOSByteArray_Get(_payload_, 0) & (jint) 0xff), 8)) | (IOSByteArray_Get(_payload_, 1) & (jint) 0xff);
}

- (jint)getCryptoTypeCode {
  if (_payload_ == nil) return -1;
  return (JreLShift32((IOSByteArray_Get(_payload_, 2) & (jint) 0xff), 8)) | (IOSByteArray_Get(_payload_, 3) & (jint) 0xff);
}

- (NetI2pCryptoSigType *)getSigType {
  return NetI2pCryptoSigType_getByCodeWithInt_([self getSigTypeCode]);
}

- (IOSByteArray *)getExtraKeyData {
  if (_payload_ == nil || _payload_->size_ <= NetI2pDataKeyCertificate_HEADER_LENGTH) return nil;
  IOSByteArray *rv = [IOSByteArray arrayWithLength:_payload_->size_ - NetI2pDataKeyCertificate_HEADER_LENGTH];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_payload_, NetI2pDataKeyCertificate_HEADER_LENGTH, rv, 0, rv->size_);
  return rv;
}

- (IOSByteArray *)getExtraSigningKeyData {
  if (_payload_ == nil || _payload_->size_ <= NetI2pDataKeyCertificate_HEADER_LENGTH) return nil;
  NetI2pCryptoSigType *type = [self getSigType];
  if (type == nil) @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"unknown sig type");
  jint extra = JavaLangMath_maxWithInt_withInt_(0, [type getPubkeyLen] - 128);
  if (((IOSByteArray *) nil_chk(_payload_))->size_ == NetI2pDataKeyCertificate_HEADER_LENGTH + extra) return [self getExtraKeyData];
  IOSByteArray *rv = [IOSByteArray arrayWithLength:extra];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_payload_, NetI2pDataKeyCertificate_HEADER_LENGTH, rv, 0, extra);
  return rv;
}

- (NetI2pDataKeyCertificate *)toKeyCertificate {
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(64);
  [buf appendWithNSString:@"[Certificate: type: Key certificate"];
  if (_payload_ == nil) {
    [buf appendWithNSString:@" null payload"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tCrypto type: "])) appendWithInt:[self getCryptoTypeCode]];
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tSig type: "])) appendWithInt:[self getSigTypeCode]])) appendWithNSString:@" ("])) appendWithId:[self getSigType]])) appendWithChar:')'];
    if (((IOSByteArray *) nil_chk(_payload_))->size_ > NetI2pDataKeyCertificate_HEADER_LENGTH) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"\n\tKey data: "])) appendWithInt:((IOSByteArray *) nil_chk(_payload_))->size_ - NetI2pDataKeyCertificate_HEADER_LENGTH])) appendWithNSString:@" bytes"];
  }
  [buf appendWithNSString:@"]"];
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pCryptoSigType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataKeyCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithNetI2pDataSigningPublicKey:);
  methods[2].selector = @selector(initWithNetI2pCryptoSigType:);
  methods[3].selector = @selector(initWithNetI2pDataCertificate:);
  methods[4].selector = @selector(getSigTypeCode);
  methods[5].selector = @selector(getCryptoTypeCode);
  methods[6].selector = @selector(getSigType);
  methods[7].selector = @selector(getExtraKeyData);
  methods[8].selector = @selector(getExtraSigningKeyData);
  methods[9].selector = @selector(toKeyCertificate);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER_LENGTH", "I", .constantValue.asInt = NetI2pDataKeyCertificate_HEADER_LENGTH, 0x19, -1, -1, -1, -1 },
    { "Ed25519_PAYLOAD", "[B", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
    { "ECDSA256_PAYLOAD", "[B", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
    { "ELG_ECDSA256_CERT", "LNetI2pDataKeyCertificate;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "ELG_Ed25519_CERT", "LNetI2pDataKeyCertificate;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LNetI2pDataDataFormatException;", "LNetI2pDataSigningPublicKey;", "LNetI2pCryptoSigType;", "LNetI2pDataCertificate;", "toString", &NetI2pDataKeyCertificate_Ed25519_PAYLOAD, &NetI2pDataKeyCertificate_ECDSA256_PAYLOAD, &NetI2pDataKeyCertificate_ELG_ECDSA256_CERT, &NetI2pDataKeyCertificate_ELG_Ed25519_CERT, "LNetI2pDataKeyCertificate_ECDSA256Cert;LNetI2pDataKeyCertificate_Ed25519Cert;" };
  static const J2ObjcClassInfo _NetI2pDataKeyCertificate = { "KeyCertificate", "net.i2p.data", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, 10, -1, -1, -1 };
  return &_NetI2pDataKeyCertificate;
}

+ (void)initialize {
  if (self == [NetI2pDataKeyCertificate class]) {
    JreStrongAssignAndConsume(&NetI2pDataKeyCertificate_Ed25519_PAYLOAD, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, (jbyte) ([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519))) getCode]), 0, 0 } count:4]);
    JreStrongAssignAndConsume(&NetI2pDataKeyCertificate_ECDSA256_PAYLOAD, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, (jbyte) ([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) getCode]), 0, 0 } count:4]);
    {
      NetI2pDataKeyCertificate *kc;
      @try {
        kc = create_NetI2pDataKeyCertificate_ECDSA256Cert_init();
      }
      @catch (NetI2pDataDataFormatException *dfe) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(dfe);
      }
      JreStrongAssign(&NetI2pDataKeyCertificate_ELG_ECDSA256_CERT, kc);
      @try {
        kc = create_NetI2pDataKeyCertificate_Ed25519Cert_init();
      }
      @catch (NetI2pDataDataFormatException *dfe) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(dfe);
      }
      JreStrongAssign(&NetI2pDataKeyCertificate_ELG_Ed25519_CERT, kc);
    }
    J2OBJC_SET_INITIALIZED(NetI2pDataKeyCertificate)
  }
}

@end

void NetI2pDataKeyCertificate_initWithByteArray_(NetI2pDataKeyCertificate *self, IOSByteArray *payload) {
  NetI2pDataCertificate_initWithInt_withByteArray_(self, NetI2pDataCertificate_CERTIFICATE_TYPE_KEY, payload);
  if (payload != nil && payload->size_ < NetI2pDataKeyCertificate_HEADER_LENGTH) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"data");
}

NetI2pDataKeyCertificate *new_NetI2pDataKeyCertificate_initWithByteArray_(IOSByteArray *payload) {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate, initWithByteArray_, payload)
}

NetI2pDataKeyCertificate *create_NetI2pDataKeyCertificate_initWithByteArray_(IOSByteArray *payload) {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate, initWithByteArray_, payload)
}

void NetI2pDataKeyCertificate_initWithNetI2pDataSigningPublicKey_(NetI2pDataKeyCertificate *self, NetI2pDataSigningPublicKey *spk) {
  NetI2pDataCertificate_initWithInt_withByteArray_(self, NetI2pDataCertificate_CERTIFICATE_TYPE_KEY, nil);
  if (spk == nil || [spk getData] == nil) @throw create_JavaLangIllegalArgumentException_init();
  NetI2pCryptoSigType *type = [spk getType];
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPubkeyLen];
  jint extra = JavaLangMath_maxWithInt_withInt_(0, len - 128);
  JreStrongAssignAndConsume(&self->_payload_, [IOSByteArray newArrayWithLength:NetI2pDataKeyCertificate_HEADER_LENGTH + extra]);
  jint code = [type getCode];
  *IOSByteArray_GetRef(nil_chk(self->_payload_), 0) = (jbyte) (JreRShift32(code, 8));
  *IOSByteArray_GetRef(self->_payload_, 1) = (jbyte) (code & (jint) 0xff);
  if (extra > 0) JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([spk getData], 128, self->_payload_, NetI2pDataKeyCertificate_HEADER_LENGTH, extra);
}

NetI2pDataKeyCertificate *new_NetI2pDataKeyCertificate_initWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *spk) {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate, initWithNetI2pDataSigningPublicKey_, spk)
}

NetI2pDataKeyCertificate *create_NetI2pDataKeyCertificate_initWithNetI2pDataSigningPublicKey_(NetI2pDataSigningPublicKey *spk) {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate, initWithNetI2pDataSigningPublicKey_, spk)
}

void NetI2pDataKeyCertificate_initWithNetI2pCryptoSigType_(NetI2pDataKeyCertificate *self, NetI2pCryptoSigType *type) {
  NetI2pDataCertificate_initWithInt_withByteArray_(self, NetI2pDataCertificate_CERTIFICATE_TYPE_KEY, nil);
  jint len = [((NetI2pCryptoSigType *) nil_chk(type)) getPubkeyLen];
  jint extra = JavaLangMath_maxWithInt_withInt_(0, len - 128);
  JreStrongAssignAndConsume(&self->_payload_, [IOSByteArray newArrayWithLength:NetI2pDataKeyCertificate_HEADER_LENGTH + extra]);
  jint code = [type getCode];
  *IOSByteArray_GetRef(nil_chk(self->_payload_), 0) = (jbyte) (JreRShift32(code, 8));
  *IOSByteArray_GetRef(self->_payload_, 1) = (jbyte) (code & (jint) 0xff);
}

NetI2pDataKeyCertificate *new_NetI2pDataKeyCertificate_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type) {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate, initWithNetI2pCryptoSigType_, type)
}

NetI2pDataKeyCertificate *create_NetI2pDataKeyCertificate_initWithNetI2pCryptoSigType_(NetI2pCryptoSigType *type) {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate, initWithNetI2pCryptoSigType_, type)
}

void NetI2pDataKeyCertificate_initWithNetI2pDataCertificate_(NetI2pDataKeyCertificate *self, NetI2pDataCertificate *cert) {
  NetI2pDataKeyCertificate_initWithByteArray_(self, [((NetI2pDataCertificate *) nil_chk(cert)) getPayload]);
  if ([cert getCertificateType] != NetI2pDataCertificate_CERTIFICATE_TYPE_KEY) @throw create_NetI2pDataDataFormatException_initWithNSString_(@"type");
}

NetI2pDataKeyCertificate *new_NetI2pDataKeyCertificate_initWithNetI2pDataCertificate_(NetI2pDataCertificate *cert) {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate, initWithNetI2pDataCertificate_, cert)
}

NetI2pDataKeyCertificate *create_NetI2pDataKeyCertificate_initWithNetI2pDataCertificate_(NetI2pDataCertificate *cert) {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate, initWithNetI2pDataCertificate_, cert)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataKeyCertificate)

J2OBJC_INITIALIZED_DEFN(NetI2pDataKeyCertificate_ECDSA256Cert)

@implementation NetI2pDataKeyCertificate_ECDSA256Cert

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataKeyCertificate_ECDSA256Cert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setCertificateTypeWithInt:(jint)type {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)setPayloadWithByteArray:(IOSByteArray *)payload {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA];
}

- (jint)writeBytesWithByteArray:(IOSByteArray *)target
                        withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA, 0, target, offset, NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH);
  return NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH;
}

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (jint)size {
  return NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH;
}

- (NSUInteger)hash {
  return _hashcode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 11, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setCertificateTypeWithInt:);
  methods[2].selector = @selector(setPayloadWithByteArray:);
  methods[3].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[4].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[5].selector = @selector(writeBytesWithByteArray:withInt:);
  methods[6].selector = @selector(readBytesWithByteArray:withInt:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ECDSA256_DATA", "[B", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "ECDSA256_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "_hashcode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDataFormatException;", "setCertificateType", "I", "setPayload", "[B", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "LJavaIoIOException;", "[BI", "hashCode", &NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA, &NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH, "LNetI2pDataKeyCertificate;" };
  static const J2ObjcClassInfo _NetI2pDataKeyCertificate_ECDSA256Cert = { "ECDSA256Cert", "net.i2p.data", ptrTable, methods, fields, 7, 0x1a, 9, 3, 15, -1, -1, -1, -1 };
  return &_NetI2pDataKeyCertificate_ECDSA256Cert;
}

+ (void)initialize {
  if (self == [NetI2pDataKeyCertificate_ECDSA256Cert class]) {
    NetI2pDataKeyCertificate_ECDSA256Cert_super$_hashCode = (jint (*)(id, SEL))[NetI2pDataKeyCertificate instanceMethodForSelector:@selector(hash)];
    JreStrongAssignAndConsume(&NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA, [IOSByteArray newArrayWithBytes:(jbyte[]){ NetI2pDataCertificate_CERTIFICATE_TYPE_KEY, 0, NetI2pDataKeyCertificate_HEADER_LENGTH, 0, (jbyte) ([((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, ECDSA_SHA256_P256))) getCode]), 0, 0 } count:7]);
    NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_LENGTH = NetI2pDataKeyCertificate_ECDSA256Cert_ECDSA256_DATA->size_;
    J2OBJC_SET_INITIALIZED(NetI2pDataKeyCertificate_ECDSA256Cert)
  }
}

@end

void NetI2pDataKeyCertificate_ECDSA256Cert_init(NetI2pDataKeyCertificate_ECDSA256Cert *self) {
  NetI2pDataKeyCertificate_initWithByteArray_(self, JreLoadStatic(NetI2pDataKeyCertificate, ECDSA256_PAYLOAD));
  self->_hashcode_ = NetI2pDataKeyCertificate_ECDSA256Cert_super$_hashCode(self, @selector(hash));
}

NetI2pDataKeyCertificate_ECDSA256Cert *new_NetI2pDataKeyCertificate_ECDSA256Cert_init() {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate_ECDSA256Cert, init)
}

NetI2pDataKeyCertificate_ECDSA256Cert *create_NetI2pDataKeyCertificate_ECDSA256Cert_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate_ECDSA256Cert, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataKeyCertificate_ECDSA256Cert)

J2OBJC_INITIALIZED_DEFN(NetI2pDataKeyCertificate_Ed25519Cert)

@implementation NetI2pDataKeyCertificate_Ed25519Cert

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pDataKeyCertificate_Ed25519Cert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setCertificateTypeWithInt:(jint)type {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)setPayloadWithByteArray:(IOSByteArray *)payload {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (void)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA];
}

- (jint)writeBytesWithByteArray:(IOSByteArray *)target
                        withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA, 0, target, offset, NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH);
  return NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH;
}

- (jint)readBytesWithByteArray:(IOSByteArray *)source
                       withInt:(jint)offset {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Data already set");
}

- (jint)size {
  return NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH;
}

- (NSUInteger)hash {
  return _hashcode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 11, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setCertificateTypeWithInt:);
  methods[2].selector = @selector(setPayloadWithByteArray:);
  methods[3].selector = @selector(readBytesWithJavaIoInputStream:);
  methods[4].selector = @selector(writeBytesWithJavaIoOutputStream:);
  methods[5].selector = @selector(writeBytesWithByteArray:withInt:);
  methods[6].selector = @selector(readBytesWithByteArray:withInt:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ED_DATA", "[B", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "ED_LENGTH", "I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "_hashcode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pDataDataFormatException;", "setCertificateType", "I", "setPayload", "[B", "readBytes", "LJavaIoInputStream;", "LNetI2pDataDataFormatException;LJavaIoIOException;", "writeBytes", "LJavaIoOutputStream;", "LJavaIoIOException;", "[BI", "hashCode", &NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA, &NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH, "LNetI2pDataKeyCertificate;" };
  static const J2ObjcClassInfo _NetI2pDataKeyCertificate_Ed25519Cert = { "Ed25519Cert", "net.i2p.data", ptrTable, methods, fields, 7, 0x1a, 9, 3, 15, -1, -1, -1, -1 };
  return &_NetI2pDataKeyCertificate_Ed25519Cert;
}

+ (void)initialize {
  if (self == [NetI2pDataKeyCertificate_Ed25519Cert class]) {
    NetI2pDataKeyCertificate_Ed25519Cert_super$_hashCode = (jint (*)(id, SEL))[NetI2pDataKeyCertificate instanceMethodForSelector:@selector(hash)];
    JreStrongAssignAndConsume(&NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA, [IOSByteArray newArrayWithBytes:(jbyte[]){ NetI2pDataCertificate_CERTIFICATE_TYPE_KEY, 0, NetI2pDataKeyCertificate_HEADER_LENGTH, 0, (jbyte) [((NetI2pCryptoSigType *) nil_chk(JreLoadEnum(NetI2pCryptoSigType, EdDSA_SHA512_Ed25519))) getCode], 0, 0 } count:7]);
    NetI2pDataKeyCertificate_Ed25519Cert_ED_LENGTH = NetI2pDataKeyCertificate_Ed25519Cert_ED_DATA->size_;
    J2OBJC_SET_INITIALIZED(NetI2pDataKeyCertificate_Ed25519Cert)
  }
}

@end

void NetI2pDataKeyCertificate_Ed25519Cert_init(NetI2pDataKeyCertificate_Ed25519Cert *self) {
  NetI2pDataKeyCertificate_initWithByteArray_(self, JreLoadStatic(NetI2pDataKeyCertificate, Ed25519_PAYLOAD));
  self->_hashcode_ = NetI2pDataKeyCertificate_Ed25519Cert_super$_hashCode(self, @selector(hash));
}

NetI2pDataKeyCertificate_Ed25519Cert *new_NetI2pDataKeyCertificate_Ed25519Cert_init() {
  J2OBJC_NEW_IMPL(NetI2pDataKeyCertificate_Ed25519Cert, init)
}

NetI2pDataKeyCertificate_Ed25519Cert *create_NetI2pDataKeyCertificate_Ed25519Cert_init() {
  J2OBJC_CREATE_IMPL(NetI2pDataKeyCertificate_Ed25519Cert, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pDataKeyCertificate_Ed25519Cert)
