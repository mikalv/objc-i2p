//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/data/DataHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pDataDataHelper")
#ifdef RESTRICT_NetI2pDataDataHelper
#define INCLUDE_ALL_NetI2pDataDataHelper 0
#else
#define INCLUDE_ALL_NetI2pDataDataHelper 1
#endif
#undef RESTRICT_NetI2pDataDataHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pDataDataHelper_) && (INCLUDE_ALL_NetI2pDataDataHelper || defined(INCLUDE_NetI2pDataDataHelper))
#define NetI2pDataDataHelper_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangStringBuffer;
@class JavaLangStringBuilder;
@class JavaSecurityMessageDigest;
@class JavaUtilDate;
@class JavaUtilProperties;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface NetI2pDataDataHelper : NSObject
@property (readonly, class) jint DATE_LENGTH NS_SWIFT_NAME(DATE_LENGTH);
@property (readonly, class) jint MAX_UNCOMPRESSED NS_SWIFT_NAME(MAX_UNCOMPRESSED);
@property (readonly, class) jint MAX_COMPRESSION NS_SWIFT_NAME(MAX_COMPRESSION);
@property (readonly, class) jint NO_COMPRESSION NS_SWIFT_NAME(NO_COMPRESSION);

+ (jint)DATE_LENGTH;

+ (jint)MAX_UNCOMPRESSED;

+ (jint)MAX_COMPRESSION;

+ (jint)NO_COMPRESSION;

#pragma mark Public

- (instancetype __nonnull)init;

+ (jint)compareToWithByteArray:(IOSByteArray *)lhs
                 withByteArray:(IOSByteArray *)rhs;

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig;

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig
                                withInt:(jint)offset
                                withInt:(jint)size;

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)orig
                                withInt:(jint)offset
                                withInt:(jint)size
                                withInt:(jint)level;

+ (void)copy__WithJavaIoInputStream:(JavaIoInputStream *)inArg
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)orig;

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)orig
                                  withInt:(jint)offset
                                  withInt:(jint)length;

+ (jboolean)eqWithByte:(jbyte)lhs
              withByte:(jbyte)rhs;

+ (jboolean)eqWithByteArray:(IOSByteArray *)lhs
              withByteArray:(IOSByteArray *)rhs;

+ (jboolean)eqWithByteArray:(IOSByteArray *)lhs
                    withInt:(jint)offsetLeft
              withByteArray:(IOSByteArray *)rhs
                    withInt:(jint)offsetRight
                    withInt:(jint)length;

+ (jboolean)eqWithJavaUtilCollection:(id<JavaUtilCollection>)lhs
              withJavaUtilCollection:(id<JavaUtilCollection>)rhs;

+ (jboolean)eqWithInt:(jint)lhs
              withInt:(jint)rhs;

+ (jboolean)eqWithLong:(jlong)lhs
              withLong:(jlong)rhs;

+ (jboolean)eqWithId:(id)lhs
              withId:(id)rhs;

+ (jboolean)eqCTWithByteArray:(IOSByteArray *)lhs
                      withInt:(jint)offsetLeft
                withByteArray:(IOSByteArray *)rhs
                      withInt:(jint)offsetRight
                      withInt:(jint)length;

+ (NSString *)escapeHTMLWithNSString:(NSString *)unescaped;

+ (NSString *)formatDurationWithLong:(jlong)ms;

+ (NSString *)formatDuration2WithDouble:(jdouble)ms;

+ (NSString *)formatDuration2WithLong:(jlong)ms;

+ (NSString *)formatSizeWithLong:(jlong)bytes;

+ (NSString *)formatSize2WithLong:(jlong)bytes;

+ (NSString *)formatSize2WithLong:(jlong)bytes
                      withBoolean:(jboolean)nonBreaking;

+ (NSString *)formatSize2DecimalWithLong:(jlong)bytes;

+ (NSString *)formatSize2DecimalWithLong:(jlong)bytes
                             withBoolean:(jboolean)nonBreaking;

+ (JavaUtilDate *)fromDateWithByteArray:(IOSByteArray *)src
                                withInt:(jint)offset;

+ (IOSByteArray *)fromHexStringWithNSString:(NSString *)val;

+ (jlong)fromLongWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset
                       withInt:(jint)numBytes;

+ (jlong)fromLongLEWithByteArray:(IOSByteArray *)src
                         withInt:(jint)offset
                         withInt:(jint)numBytes;

+ (jint)fromPropertiesWithByteArray:(IOSByteArray *)source
                            withInt:(jint)offset
             withJavaUtilProperties:(JavaUtilProperties *)target;

+ (IOSByteArray *)getASCIIWithNSString:(NSString *)orig;

+ (NSString *)getUTF8WithByteArray:(IOSByteArray *)orig;

+ (NSString *)getUTF8WithByteArray:(IOSByteArray *)orig
                           withInt:(jint)offset
                           withInt:(jint)len;

+ (IOSByteArray *)getUTF8WithNSString:(NSString *)orig;

+ (IOSByteArray *)getUTF8WithJavaLangStringBuffer:(JavaLangStringBuffer *)orig;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)b;

+ (jint)hashCodeWithJavaUtilCollection:(id<JavaUtilCollection>)col;

+ (jint)hashCodeWithJavaUtilDate:(JavaUtilDate *)obj;

+ (jint)hashCodeWithId:(id)obj;

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file;

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                         withJavaIoFile:(JavaIoFile *)file
                            withBoolean:(jboolean)forceLowerCase;

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                  withJavaIoInputStream:(JavaIoInputStream *)inStr;

+ (void)loadPropsWithJavaUtilProperties:(JavaUtilProperties *)props
                  withJavaIoInputStream:(JavaIoInputStream *)inStr
                            withBoolean:(jboolean)forceLowerCase;

+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withByteArray:(IOSByteArray *)target;

+ (jint)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withByteArray:(IOSByteArray *)target
                          withInt:(jint)offset
                          withInt:(jint)length;

+ (JavaUtilDate *)readDateWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (NSString *)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
              withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_;

+ (jboolean)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
                withJavaLangStringBuilder:(JavaLangStringBuilder *)buf;

+ (jboolean)readLineWithJavaIoInputStream:(JavaIoInputStream *)inArg
                withJavaLangStringBuilder:(JavaLangStringBuilder *)buf
            withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_;

+ (jlong)readLongWithJavaIoInputStream:(JavaIoInputStream *)rawStream
                               withInt:(jint)numBytes;

+ (JavaUtilProperties *)readPropertiesWithJavaIoInputStream:(JavaIoInputStream *)rawStream;

+ (JavaUtilProperties *)readPropertiesWithJavaIoInputStream:(JavaIoInputStream *)rawStream
                                     withJavaUtilProperties:(JavaUtilProperties *)props;

+ (NSString *)readStringWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (void)replaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                            withNSString:(NSString *)from
                            withNSString:(NSString *)to;

+ (void)skipWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withLong:(jlong)n;

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)c;

+ (void)sortWithNSObjectArray:(IOSObjectArray *)a
       withJavaUtilComparator:(id<JavaUtilComparator>)c;

+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                         withNSString:(NSString *)regex;

+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                         withNSString:(NSString *)regex
                              withInt:(jint)limit;

+ (void)storePropsWithJavaUtilProperties:(JavaUtilProperties *)props
                          withJavaIoFile:(JavaIoFile *)file;

+ (NSString *)stripHTMLWithNSString:(NSString *)orig;

+ (void)toDateWithByteArray:(IOSByteArray *)target
                    withInt:(jint)offset
                   withLong:(jlong)when;

+ (IOSByteArray *)toDateWithJavaUtilDate:(JavaUtilDate *)date;

+ (NSString *)toDecimalStringWithByteArray:(IOSByteArray *)buf
                                   withInt:(jint)len;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data;

+ (void)toLongWithByteArray:(IOSByteArray *)target
                    withInt:(jint)offset
                    withInt:(jint)numBytes
                   withLong:(jlong)value;

+ (IOSByteArray *)toLongWithInt:(jint)numBytes
                       withLong:(jlong)value;

+ (void)toLongLEWithByteArray:(IOSByteArray *)target
                      withInt:(jint)offset
                      withInt:(jint)numBytes
                     withLong:(jlong)value;

+ (jint)toPropertiesWithByteArray:(IOSByteArray *)target
                          withInt:(jint)offset
           withJavaUtilProperties:(JavaUtilProperties *)props;

+ (IOSByteArray *)toPropertiesWithJavaUtilProperties:(JavaUtilProperties *)opts;

+ (NSString *)toStringWithByteArray:(IOSByteArray *)buf;

+ (NSString *)toStringWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)len;

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)col;

+ (NSString *)toStringWithJavaUtilMap:(id<JavaUtilMap>)options;

+ (NSString *)toStringWithJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                      withByteArray:(IOSByteArray *)data
      withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)hash_;

+ (void)writeDateWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                       withJavaUtilDate:(JavaUtilDate *)date;

+ (void)writeLongWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                                withInt:(jint)numBytes
                               withLong:(jlong)value;

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props;

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props
                                  withBoolean:(jboolean)utf8;

+ (void)writePropertiesWithJavaIoOutputStream:(JavaIoOutputStream *)rawStream
                       withJavaUtilProperties:(JavaUtilProperties *)props
                                  withBoolean:(jboolean)utf8
                                  withBoolean:(jboolean)sort;

+ (void)writeStringWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withNSString:(NSString *)string;

+ (void)writeStringUTF8WithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                 withNSString:(NSString *)string;

+ (IOSByteArray *)xor__WithByteArray:(IOSByteArray *)lhs
                       withByteArray:(IOSByteArray *)rhs;

+ (void)xor__WithByteArray:(IOSByteArray *)lhs
                   withInt:(jint)startLeft
             withByteArray:(IOSByteArray *)rhs
                   withInt:(jint)startRight
             withByteArray:(IOSByteArray *)outArg
                   withInt:(jint)startOut
                   withInt:(jint)len;

@end

J2OBJC_STATIC_INIT(NetI2pDataDataHelper)

inline jint NetI2pDataDataHelper_get_DATE_LENGTH(void);
#define NetI2pDataDataHelper_DATE_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDataHelper, DATE_LENGTH, jint)

inline jint NetI2pDataDataHelper_get_MAX_UNCOMPRESSED(void);
#define NetI2pDataDataHelper_MAX_UNCOMPRESSED 40960
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDataHelper, MAX_UNCOMPRESSED, jint)

inline jint NetI2pDataDataHelper_get_MAX_COMPRESSION(void);
#define NetI2pDataDataHelper_MAX_COMPRESSION 9
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDataHelper, MAX_COMPRESSION, jint)

inline jint NetI2pDataDataHelper_get_NO_COMPRESSION(void);
#define NetI2pDataDataHelper_NO_COMPRESSION 0
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pDataDataHelper, NO_COMPRESSION, jint)

FOUNDATION_EXPORT void NetI2pDataDataHelper_init(NetI2pDataDataHelper *self);

FOUNDATION_EXPORT NetI2pDataDataHelper *new_NetI2pDataDataHelper_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pDataDataHelper *create_NetI2pDataDataHelper_init(void);

FOUNDATION_EXPORT JavaUtilProperties *NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_(JavaIoInputStream *rawStream);

FOUNDATION_EXPORT JavaUtilProperties *NetI2pDataDataHelper_readPropertiesWithJavaIoInputStream_withJavaUtilProperties_(JavaIoInputStream *rawStream, JavaUtilProperties *props);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_(JavaIoOutputStream *rawStream, JavaUtilProperties *props);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_(JavaIoOutputStream *rawStream, JavaUtilProperties *props, jboolean utf8);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writePropertiesWithJavaIoOutputStream_withJavaUtilProperties_withBoolean_withBoolean_(JavaIoOutputStream *rawStream, JavaUtilProperties *props, jboolean utf8, jboolean sort);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_toPropertiesWithByteArray_withInt_withJavaUtilProperties_(IOSByteArray *target, jint offset, JavaUtilProperties *props);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_fromPropertiesWithByteArray_withInt_withJavaUtilProperties_(IOSByteArray *source, jint offset, JavaUtilProperties *target);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_toPropertiesWithJavaUtilProperties_(JavaUtilProperties *opts);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toStringWithJavaUtilProperties_(JavaUtilProperties *options);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toStringWithJavaUtilMap_(id<JavaUtilMap> options);

FOUNDATION_EXPORT void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_(JavaUtilProperties *props, JavaIoFile *file);

FOUNDATION_EXPORT void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoFile_withBoolean_(JavaUtilProperties *props, JavaIoFile *file, jboolean forceLowerCase);

FOUNDATION_EXPORT void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_(JavaUtilProperties *props, JavaIoInputStream *inStr);

FOUNDATION_EXPORT void NetI2pDataDataHelper_loadPropsWithJavaUtilProperties_withJavaIoInputStream_withBoolean_(JavaUtilProperties *props, JavaIoInputStream *inStr, jboolean forceLowerCase);

FOUNDATION_EXPORT void NetI2pDataDataHelper_storePropsWithJavaUtilProperties_withJavaIoFile_(JavaUtilProperties *props, JavaIoFile *file);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toStringWithJavaUtilCollection_(id<JavaUtilCollection> col);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toStringWithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toStringWithByteArray_withInt_(IOSByteArray *buf, jint len);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toDecimalStringWithByteArray_withInt_(IOSByteArray *buf, jint len);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_toHexStringWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_fromHexStringWithNSString_(NSString *val);

FOUNDATION_EXPORT jlong NetI2pDataDataHelper_readLongWithJavaIoInputStream_withInt_(JavaIoInputStream *rawStream, jint numBytes);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writeLongWithJavaIoOutputStream_withInt_withLong_(JavaIoOutputStream *rawStream, jint numBytes, jlong value);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_toLongWithInt_withLong_(jint numBytes, jlong value);

FOUNDATION_EXPORT void NetI2pDataDataHelper_toLongWithByteArray_withInt_withInt_withLong_(IOSByteArray *target, jint offset, jint numBytes, jlong value);

FOUNDATION_EXPORT void NetI2pDataDataHelper_toLongLEWithByteArray_withInt_withInt_withLong_(IOSByteArray *target, jint offset, jint numBytes, jlong value);

FOUNDATION_EXPORT jlong NetI2pDataDataHelper_fromLongWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint numBytes);

FOUNDATION_EXPORT jlong NetI2pDataDataHelper_fromLongLEWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint numBytes);

FOUNDATION_EXPORT JavaUtilDate *NetI2pDataDataHelper_readDateWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writeDateWithJavaIoOutputStream_withJavaUtilDate_(JavaIoOutputStream *outArg, JavaUtilDate *date);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_toDateWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT void NetI2pDataDataHelper_toDateWithByteArray_withInt_withLong_(IOSByteArray *target, jint offset, jlong when);

FOUNDATION_EXPORT JavaUtilDate *NetI2pDataDataHelper_fromDateWithByteArray_withInt_(IOSByteArray *src, jint offset);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_readStringWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writeStringWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *string);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writeStringUTF8WithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *string);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithId_withId_(id lhs, id rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> lhs, id<JavaUtilCollection> rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithInt_withInt_(jint lhs, jint rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithLong_withLong_(jlong lhs, jlong rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithByte_withByte_(jbyte lhs, jbyte rhs);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint offsetLeft, IOSByteArray *rhs, jint offsetRight, jint length);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_eqCTWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint offsetLeft, IOSByteArray *rhs, jint offsetRight, jint length);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_compareToWithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_xor__WithByteArray_withByteArray_(IOSByteArray *lhs, IOSByteArray *rhs);

FOUNDATION_EXPORT void NetI2pDataDataHelper_xor__WithByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *lhs, jint startLeft, IOSByteArray *rhs, jint startRight, IOSByteArray *outArg, jint startOut, jint len);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_hashCodeWithId_(id obj);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_hashCodeWithJavaUtilDate_(JavaUtilDate *obj);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_hashCodeWithByteArray_(IOSByteArray *b);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_hashCodeWithJavaUtilCollection_(id<JavaUtilCollection> col);

FOUNDATION_EXPORT void NetI2pDataDataHelper_skipWithJavaIoInputStream_withLong_(JavaIoInputStream *inArg, jlong n);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inArg, IOSByteArray *target);

FOUNDATION_EXPORT jint NetI2pDataDataHelper_readWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inArg, IOSByteArray *target, jint offset, jint length);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_readLineWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaSecurityMessageDigest_(JavaIoInputStream *inArg, JavaSecurityMessageDigest *hash_);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_(JavaIoInputStream *inArg, JavaLangStringBuilder *buf);

FOUNDATION_EXPORT jboolean NetI2pDataDataHelper_readLineWithJavaIoInputStream_withJavaLangStringBuilder_withJavaSecurityMessageDigest_(JavaIoInputStream *inArg, JavaLangStringBuilder *buf, JavaSecurityMessageDigest *hash_);

FOUNDATION_EXPORT void NetI2pDataDataHelper_writeWithJavaIoOutputStream_withByteArray_withJavaSecurityMessageDigest_(JavaIoOutputStream *outArg, IOSByteArray *data, JavaSecurityMessageDigest *hash_);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatDurationWithLong_(jlong ms);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatDuration2WithLong_(jlong ms);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatDuration2WithDouble_(jdouble ms);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatSizeWithLong_(jlong bytes);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatSize2WithLong_(jlong bytes);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatSize2WithLong_withBoolean_(jlong bytes, jboolean nonBreaking);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatSize2DecimalWithLong_(jlong bytes);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_formatSize2DecimalWithLong_withBoolean_(jlong bytes, jboolean nonBreaking);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_stripHTMLWithNSString_(NSString *orig);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_escapeHTMLWithNSString_(NSString *unescaped);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_(IOSByteArray *orig);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint size);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_compressWithByteArray_withInt_withInt_withInt_(IOSByteArray *orig, jint offset, jint size, jint level);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_decompressWithByteArray_(IOSByteArray *orig);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_decompressWithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint length);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_getUTF8WithNSString_(NSString *orig);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_getUTF8WithJavaLangStringBuffer_(JavaLangStringBuffer *orig);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_getUTF8WithByteArray_(IOSByteArray *orig);

FOUNDATION_EXPORT NSString *NetI2pDataDataHelper_getUTF8WithByteArray_withInt_withInt_(IOSByteArray *orig, jint offset, jint len);

FOUNDATION_EXPORT IOSByteArray *NetI2pDataDataHelper_getASCIIWithNSString_(NSString *orig);

FOUNDATION_EXPORT IOSObjectArray *NetI2pDataDataHelper_splitWithNSString_withNSString_(NSString *s, NSString *regex);

FOUNDATION_EXPORT IOSObjectArray *NetI2pDataDataHelper_splitWithNSString_withNSString_withInt_(NSString *s, NSString *regex, jint limit);

FOUNDATION_EXPORT void NetI2pDataDataHelper_copy__WithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void NetI2pDataDataHelper_sortWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> list, id<JavaUtilComparator> c);

FOUNDATION_EXPORT void NetI2pDataDataHelper_sortWithNSObjectArray_withJavaUtilComparator_(IOSObjectArray *a, id<JavaUtilComparator> c);

FOUNDATION_EXPORT void NetI2pDataDataHelper_replaceWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *buf, NSString *from, NSString *to);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pDataDataHelper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pDataDataHelper")
