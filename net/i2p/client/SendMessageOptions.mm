//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/SendMessageOptions.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/client/SendMessageOptions.h"
#include "net/i2p/data/DateAndFlags.h"

@interface NetI2pClientSendMessageOptions () {
 @public
  NetI2pClientSendMessageOptions_GzipOption *_gzip_;
}

+ (jint)valToCodeWithInt:(jint)val
            withIntArray:(IOSIntArray *)codes;

+ (jint)codeToValWithInt:(jint)code
            withIntArray:(IOSIntArray *)codes;

@end

J2OBJC_FIELD_SETTER(NetI2pClientSendMessageOptions, _gzip_, NetI2pClientSendMessageOptions_GzipOption *)

inline jint NetI2pClientSendMessageOptions_get_LS_MASK(void);
#define NetI2pClientSendMessageOptions_LS_MASK 256
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, LS_MASK, jint)

inline jint NetI2pClientSendMessageOptions_get_TAGS_SEND_MASK(void);
#define NetI2pClientSendMessageOptions_TAGS_SEND_MASK 15
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, TAGS_SEND_MASK, jint)

inline IOSIntArray *NetI2pClientSendMessageOptions_get_TAGS_SEND(void);
static IOSIntArray *NetI2pClientSendMessageOptions_TAGS_SEND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientSendMessageOptions, TAGS_SEND, IOSIntArray *)

inline jint NetI2pClientSendMessageOptions_get_TAGS_REQD_MASK(void);
#define NetI2pClientSendMessageOptions_TAGS_REQD_MASK 240
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, TAGS_REQD_MASK, jint)

inline IOSIntArray *NetI2pClientSendMessageOptions_get_TAGS_REQD(void);
static IOSIntArray *NetI2pClientSendMessageOptions_TAGS_REQD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientSendMessageOptions, TAGS_REQD, IOSIntArray *)

inline jint NetI2pClientSendMessageOptions_get_BEST_EFFORT_MASK(void);
#define NetI2pClientSendMessageOptions_BEST_EFFORT_MASK 512
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, BEST_EFFORT_MASK, jint)

inline jint NetI2pClientSendMessageOptions_get_GUARANTEED_MASK(void);
#define NetI2pClientSendMessageOptions_GUARANTEED_MASK 1024
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, GUARANTEED_MASK, jint)

inline jint NetI2pClientSendMessageOptions_get_RELIABILITY_MASK(void);
#define NetI2pClientSendMessageOptions_RELIABILITY_MASK 1536
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientSendMessageOptions, RELIABILITY_MASK, jint)

__attribute__((unused)) static jint NetI2pClientSendMessageOptions_valToCodeWithInt_withIntArray_(jint val, IOSIntArray *codes);

__attribute__((unused)) static jint NetI2pClientSendMessageOptions_codeToValWithInt_withIntArray_(jint code, IOSIntArray *codes);

__attribute__((unused)) static void NetI2pClientSendMessageOptions_Reliability_initWithNSString_withInt_(NetI2pClientSendMessageOptions_Reliability *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void NetI2pClientSendMessageOptions_GzipOption_initWithNSString_withInt_(NetI2pClientSendMessageOptions_GzipOption *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(NetI2pClientSendMessageOptions)

@implementation NetI2pClientSendMessageOptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pClientSendMessageOptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSendLeaseSetWithBoolean:(jboolean)yes {
  if (yes) _flags_ &= ~NetI2pClientSendMessageOptions_LS_MASK;
  else _flags_ |= NetI2pClientSendMessageOptions_LS_MASK;
}

- (jboolean)getSendLeaseSet {
  return NetI2pClientSendMessageOptions_getSendLeaseSetWithInt_(_flags_);
}

+ (jboolean)getSendLeaseSetWithInt:(jint)flags {
  return NetI2pClientSendMessageOptions_getSendLeaseSetWithInt_(flags);
}

- (void)setTagsToSendWithInt:(jint)tags {
  if (tags < 0) @throw create_JavaLangIllegalArgumentException_init();
  _flags_ &= ~NetI2pClientSendMessageOptions_TAGS_SEND_MASK;
  _flags_ |= NetI2pClientSendMessageOptions_valToCodeWithInt_withIntArray_(tags, NetI2pClientSendMessageOptions_TAGS_SEND);
}

- (jint)getTagsToSend {
  return NetI2pClientSendMessageOptions_getTagsToSendWithInt_(_flags_);
}

+ (jint)getTagsToSendWithInt:(jint)flags {
  return NetI2pClientSendMessageOptions_getTagsToSendWithInt_(flags);
}

- (void)setTagThresholdWithInt:(jint)tags {
  if (tags < 0) @throw create_JavaLangIllegalArgumentException_init();
  _flags_ &= ~NetI2pClientSendMessageOptions_TAGS_REQD_MASK;
  _flags_ |= JreLShift32(NetI2pClientSendMessageOptions_valToCodeWithInt_withIntArray_(tags, NetI2pClientSendMessageOptions_TAGS_REQD), 4);
}

- (jint)getTagThreshold {
  return NetI2pClientSendMessageOptions_getTagThresholdWithInt_(_flags_);
}

+ (jint)getTagThresholdWithInt:(jint)flags {
  return NetI2pClientSendMessageOptions_getTagThresholdWithInt_(flags);
}

+ (jint)valToCodeWithInt:(jint)val
            withIntArray:(IOSIntArray *)codes {
  return NetI2pClientSendMessageOptions_valToCodeWithInt_withIntArray_(val, codes);
}

+ (jint)codeToValWithInt:(jint)code
            withIntArray:(IOSIntArray *)codes {
  return NetI2pClientSendMessageOptions_codeToValWithInt_withIntArray_(code, codes);
}

- (void)setReliabilityWithNetI2pClientSendMessageOptions_Reliability:(NetI2pClientSendMessageOptions_Reliability *)r {
  _flags_ &= ~NetI2pClientSendMessageOptions_RELIABILITY_MASK;
  switch ([r ordinal]) {
    case NetI2pClientSendMessageOptions_Reliability_Enum_BEST_EFFORT:
    _flags_ |= NetI2pClientSendMessageOptions_BEST_EFFORT_MASK;
    break;
    case NetI2pClientSendMessageOptions_Reliability_Enum_GUARANTEED:
    _flags_ |= NetI2pClientSendMessageOptions_GUARANTEED_MASK;
    break;
    case NetI2pClientSendMessageOptions_Reliability_Enum_UNDEFINED:
    _flags_ |= NetI2pClientSendMessageOptions_RELIABILITY_MASK;
    break;
    case NetI2pClientSendMessageOptions_Reliability_Enum_DEFAULT:
    default:
    break;
  }
}

- (NetI2pClientSendMessageOptions_Reliability *)getReliability {
  return NetI2pClientSendMessageOptions_getReliabilityWithInt_(_flags_);
}

+ (NetI2pClientSendMessageOptions_Reliability *)getReliabilityWithInt:(jint)flags {
  return NetI2pClientSendMessageOptions_getReliabilityWithInt_(flags);
}

- (NetI2pClientSendMessageOptions_GzipOption *)getGzip {
  return _gzip_;
}

- (void)setGzipWithBoolean:(jboolean)yes {
  JreStrongAssign(&_gzip_, yes ? JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_ON) : JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_OFF));
}

- (void)dealloc {
  RELEASE_(_gzip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientSendMessageOptions_Reliability;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientSendMessageOptions_Reliability;", 0x9, 13, 3, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientSendMessageOptions_GzipOption;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSendLeaseSetWithBoolean:);
  methods[2].selector = @selector(getSendLeaseSet);
  methods[3].selector = @selector(getSendLeaseSetWithInt:);
  methods[4].selector = @selector(setTagsToSendWithInt:);
  methods[5].selector = @selector(getTagsToSend);
  methods[6].selector = @selector(getTagsToSendWithInt:);
  methods[7].selector = @selector(setTagThresholdWithInt:);
  methods[8].selector = @selector(getTagThreshold);
  methods[9].selector = @selector(getTagThresholdWithInt:);
  methods[10].selector = @selector(valToCodeWithInt:withIntArray:);
  methods[11].selector = @selector(codeToValWithInt:withIntArray:);
  methods[12].selector = @selector(setReliabilityWithNetI2pClientSendMessageOptions_Reliability:);
  methods[13].selector = @selector(getReliability);
  methods[14].selector = @selector(getReliabilityWithInt:);
  methods[15].selector = @selector(getGzip);
  methods[16].selector = @selector(setGzipWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_gzip_", "LNetI2pClientSendMessageOptions_GzipOption;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LS_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_LS_MASK, 0x1a, -1, -1, -1, -1 },
    { "TAGS_SEND_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_TAGS_SEND_MASK, 0x1a, -1, -1, -1, -1 },
    { "TAGS_SEND", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "TAGS_REQD_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_TAGS_REQD_MASK, 0x1a, -1, -1, -1, -1 },
    { "TAGS_REQD", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "BEST_EFFORT_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_BEST_EFFORT_MASK, 0x1a, -1, -1, -1, -1 },
    { "GUARANTEED_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_GUARANTEED_MASK, 0x1a, -1, -1, -1, -1 },
    { "RELIABILITY_MASK", "I", .constantValue.asInt = NetI2pClientSendMessageOptions_RELIABILITY_MASK, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSendLeaseSet", "Z", "getSendLeaseSet", "I", "setTagsToSend", "getTagsToSend", "setTagThreshold", "getTagThreshold", "valToCode", "I[I", "codeToVal", "setReliability", "LNetI2pClientSendMessageOptions_Reliability;", "getReliability", "setGzip", &NetI2pClientSendMessageOptions_TAGS_SEND, &NetI2pClientSendMessageOptions_TAGS_REQD, "LNetI2pClientSendMessageOptions_Reliability;LNetI2pClientSendMessageOptions_GzipOption;" };
  static const J2ObjcClassInfo _NetI2pClientSendMessageOptions = { "SendMessageOptions", "net.i2p.client", ptrTable, methods, fields, 7, 0x1, 17, 9, -1, 17, -1, -1, -1 };
  return &_NetI2pClientSendMessageOptions;
}

+ (void)initialize {
  if (self == [NetI2pClientSendMessageOptions class]) {
    JreStrongAssignAndConsume(&NetI2pClientSendMessageOptions_TAGS_SEND, [IOSIntArray newArrayWithInts:(jint[]){ 0, 2, 4, 6, 8, 12, 16, 24, 32, 40, 51, 64, 80, 100, 125, 160 } count:16]);
    JreStrongAssignAndConsume(&NetI2pClientSendMessageOptions_TAGS_REQD, [IOSIntArray newArrayWithInts:(jint[]){ 0, 2, 3, 6, 9, 14, 20, 27, 35, 45, 57, 72, 92, 117, 147, 192 } count:16]);
    J2OBJC_SET_INITIALIZED(NetI2pClientSendMessageOptions)
  }
}

@end

void NetI2pClientSendMessageOptions_init(NetI2pClientSendMessageOptions *self) {
  NetI2pDataDateAndFlags_init(self);
  JreStrongAssign(&self->_gzip_, JreLoadEnum(NetI2pClientSendMessageOptions_GzipOption, DEFAULT));
}

NetI2pClientSendMessageOptions *new_NetI2pClientSendMessageOptions_init() {
  J2OBJC_NEW_IMPL(NetI2pClientSendMessageOptions, init)
}

NetI2pClientSendMessageOptions *create_NetI2pClientSendMessageOptions_init() {
  J2OBJC_CREATE_IMPL(NetI2pClientSendMessageOptions, init)
}

jboolean NetI2pClientSendMessageOptions_getSendLeaseSetWithInt_(jint flags) {
  NetI2pClientSendMessageOptions_initialize();
  return (flags & NetI2pClientSendMessageOptions_LS_MASK) == 0;
}

jint NetI2pClientSendMessageOptions_getTagsToSendWithInt_(jint flags) {
  NetI2pClientSendMessageOptions_initialize();
  jint exp = (flags & NetI2pClientSendMessageOptions_TAGS_SEND_MASK);
  return NetI2pClientSendMessageOptions_codeToValWithInt_withIntArray_(exp, NetI2pClientSendMessageOptions_TAGS_SEND);
}

jint NetI2pClientSendMessageOptions_getTagThresholdWithInt_(jint flags) {
  NetI2pClientSendMessageOptions_initialize();
  jint exp = JreRShift32((flags & NetI2pClientSendMessageOptions_TAGS_REQD_MASK), 4);
  return NetI2pClientSendMessageOptions_codeToValWithInt_withIntArray_(exp, NetI2pClientSendMessageOptions_TAGS_REQD);
}

jint NetI2pClientSendMessageOptions_valToCodeWithInt_withIntArray_(jint val, IOSIntArray *codes) {
  NetI2pClientSendMessageOptions_initialize();
  if (val > 0 && val <= IOSIntArray_Get(nil_chk(codes), 1)) return 1;
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(codes))->size_; i++) {
    if (val < IOSIntArray_Get(codes, i)) return i - 1;
  }
  return codes->size_ - 1;
}

jint NetI2pClientSendMessageOptions_codeToValWithInt_withIntArray_(jint code, IOSIntArray *codes) {
  NetI2pClientSendMessageOptions_initialize();
  return IOSIntArray_Get(nil_chk(codes), code);
}

NetI2pClientSendMessageOptions_Reliability *NetI2pClientSendMessageOptions_getReliabilityWithInt_(jint flags) {
  NetI2pClientSendMessageOptions_initialize();
  switch (flags & NetI2pClientSendMessageOptions_RELIABILITY_MASK) {
    case NetI2pClientSendMessageOptions_BEST_EFFORT_MASK:
    return JreLoadEnum(NetI2pClientSendMessageOptions_Reliability, BEST_EFFORT);
    case NetI2pClientSendMessageOptions_GUARANTEED_MASK:
    return JreLoadEnum(NetI2pClientSendMessageOptions_Reliability, GUARANTEED);
    default:
    case NetI2pClientSendMessageOptions_RELIABILITY_MASK:
    return JreLoadEnum(NetI2pClientSendMessageOptions_Reliability, UNDEFINED);
    case 0:
    return JreLoadEnum(NetI2pClientSendMessageOptions_Reliability, DEFAULT);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientSendMessageOptions)

J2OBJC_INITIALIZED_DEFN(NetI2pClientSendMessageOptions_Reliability)

NetI2pClientSendMessageOptions_Reliability *NetI2pClientSendMessageOptions_Reliability_values_[4];

@implementation NetI2pClientSendMessageOptions_Reliability

+ (NetI2pClientSendMessageOptions_Reliability *)DEFAULT {
  return JreEnum(NetI2pClientSendMessageOptions_Reliability, DEFAULT);
}

+ (NetI2pClientSendMessageOptions_Reliability *)BEST_EFFORT {
  return JreEnum(NetI2pClientSendMessageOptions_Reliability, BEST_EFFORT);
}

+ (NetI2pClientSendMessageOptions_Reliability *)GUARANTEED {
  return JreEnum(NetI2pClientSendMessageOptions_Reliability, GUARANTEED);
}

+ (NetI2pClientSendMessageOptions_Reliability *)UNDEFINED {
  return JreEnum(NetI2pClientSendMessageOptions_Reliability, UNDEFINED);
}

+ (IOSObjectArray *)values {
  return NetI2pClientSendMessageOptions_Reliability_values();
}

+ (NetI2pClientSendMessageOptions_Reliability *)valueOfWithNSString:(NSString *)name {
  return NetI2pClientSendMessageOptions_Reliability_valueOfWithNSString_(name);
}

- (NetI2pClientSendMessageOptions_Reliability_Enum)toNSEnum {
  return (NetI2pClientSendMessageOptions_Reliability_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pClientSendMessageOptions_Reliability;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientSendMessageOptions_Reliability;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LNetI2pClientSendMessageOptions_Reliability;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BEST_EFFORT", "LNetI2pClientSendMessageOptions_Reliability;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "GUARANTEED", "LNetI2pClientSendMessageOptions_Reliability;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "UNDEFINED", "LNetI2pClientSendMessageOptions_Reliability;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pClientSendMessageOptions_Reliability, DEFAULT), &JreEnum(NetI2pClientSendMessageOptions_Reliability, BEST_EFFORT), &JreEnum(NetI2pClientSendMessageOptions_Reliability, GUARANTEED), &JreEnum(NetI2pClientSendMessageOptions_Reliability, UNDEFINED), "LNetI2pClientSendMessageOptions;", "Ljava/lang/Enum<Lnet/i2p/client/SendMessageOptions$Reliability;>;" };
  static const J2ObjcClassInfo _NetI2pClientSendMessageOptions_Reliability = { "Reliability", "net.i2p.client", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_NetI2pClientSendMessageOptions_Reliability;
}

+ (void)initialize {
  if (self == [NetI2pClientSendMessageOptions_Reliability class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(NetI2pClientSendMessageOptions_Reliability_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pClientSendMessageOptions_Reliability_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pClientSendMessageOptions_Reliability_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pClientSendMessageOptions_Reliability)
  }
}

@end

void NetI2pClientSendMessageOptions_Reliability_initWithNSString_withInt_(NetI2pClientSendMessageOptions_Reliability *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pClientSendMessageOptions_Reliability_values() {
  NetI2pClientSendMessageOptions_Reliability_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pClientSendMessageOptions_Reliability_values_ count:4 type:NetI2pClientSendMessageOptions_Reliability_class_()];
}

NetI2pClientSendMessageOptions_Reliability *NetI2pClientSendMessageOptions_Reliability_valueOfWithNSString_(NSString *name) {
  NetI2pClientSendMessageOptions_Reliability_initialize();
  for (int i = 0; i < 4; i++) {
    NetI2pClientSendMessageOptions_Reliability *e = NetI2pClientSendMessageOptions_Reliability_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pClientSendMessageOptions_Reliability *NetI2pClientSendMessageOptions_Reliability_fromOrdinal(NSUInteger ordinal) {
  NetI2pClientSendMessageOptions_Reliability_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return NetI2pClientSendMessageOptions_Reliability_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientSendMessageOptions_Reliability)

J2OBJC_INITIALIZED_DEFN(NetI2pClientSendMessageOptions_GzipOption)

NetI2pClientSendMessageOptions_GzipOption *NetI2pClientSendMessageOptions_GzipOption_values_[3];

@implementation NetI2pClientSendMessageOptions_GzipOption

+ (NetI2pClientSendMessageOptions_GzipOption *)DEFAULT {
  return JreEnum(NetI2pClientSendMessageOptions_GzipOption, DEFAULT);
}

+ (NetI2pClientSendMessageOptions_GzipOption *)GZIP_OFF {
  return JreEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_OFF);
}

+ (NetI2pClientSendMessageOptions_GzipOption *)GZIP_ON {
  return JreEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_ON);
}

+ (IOSObjectArray *)values {
  return NetI2pClientSendMessageOptions_GzipOption_values();
}

+ (NetI2pClientSendMessageOptions_GzipOption *)valueOfWithNSString:(NSString *)name {
  return NetI2pClientSendMessageOptions_GzipOption_valueOfWithNSString_(name);
}

- (NetI2pClientSendMessageOptions_GzipOption_Enum)toNSEnum {
  return (NetI2pClientSendMessageOptions_GzipOption_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pClientSendMessageOptions_GzipOption;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientSendMessageOptions_GzipOption;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LNetI2pClientSendMessageOptions_GzipOption;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "GZIP_OFF", "LNetI2pClientSendMessageOptions_GzipOption;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "GZIP_ON", "LNetI2pClientSendMessageOptions_GzipOption;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pClientSendMessageOptions_GzipOption, DEFAULT), &JreEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_OFF), &JreEnum(NetI2pClientSendMessageOptions_GzipOption, GZIP_ON), "LNetI2pClientSendMessageOptions;", "Ljava/lang/Enum<Lnet/i2p/client/SendMessageOptions$GzipOption;>;" };
  static const J2ObjcClassInfo _NetI2pClientSendMessageOptions_GzipOption = { "GzipOption", "net.i2p.client", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_NetI2pClientSendMessageOptions_GzipOption;
}

+ (void)initialize {
  if (self == [NetI2pClientSendMessageOptions_GzipOption class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(NetI2pClientSendMessageOptions_GzipOption_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pClientSendMessageOptions_GzipOption_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pClientSendMessageOptions_GzipOption_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pClientSendMessageOptions_GzipOption)
  }
}

@end

void NetI2pClientSendMessageOptions_GzipOption_initWithNSString_withInt_(NetI2pClientSendMessageOptions_GzipOption *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pClientSendMessageOptions_GzipOption_values() {
  NetI2pClientSendMessageOptions_GzipOption_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pClientSendMessageOptions_GzipOption_values_ count:3 type:NetI2pClientSendMessageOptions_GzipOption_class_()];
}

NetI2pClientSendMessageOptions_GzipOption *NetI2pClientSendMessageOptions_GzipOption_valueOfWithNSString_(NSString *name) {
  NetI2pClientSendMessageOptions_GzipOption_initialize();
  for (int i = 0; i < 3; i++) {
    NetI2pClientSendMessageOptions_GzipOption *e = NetI2pClientSendMessageOptions_GzipOption_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pClientSendMessageOptions_GzipOption *NetI2pClientSendMessageOptions_GzipOption_fromOrdinal(NSUInteger ordinal) {
  NetI2pClientSendMessageOptions_GzipOption_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return NetI2pClientSendMessageOptions_GzipOption_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientSendMessageOptions_GzipOption)
