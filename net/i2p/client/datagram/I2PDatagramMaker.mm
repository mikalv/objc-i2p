//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/datagram/I2PDatagramMaker.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/datagram/I2PDatagramMaker.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SHA256Generator.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"
#include "net/i2p/util/SimpleByteCache.h"

@interface NetI2pClientDatagramI2PDatagramMaker () {
 @public
  NetI2pCryptoSHA256Generator *hashGen_;
  NetI2pCryptoDSAEngine *dsaEng_;
  NetI2pDataSigningPrivateKey *sxPrivKey_;
  IOSByteArray *sxDestBytes_;
  JavaIoByteArrayOutputStream *sxDGram_;
}

@end

J2OBJC_FIELD_SETTER(NetI2pClientDatagramI2PDatagramMaker, hashGen_, NetI2pCryptoSHA256Generator *)
J2OBJC_FIELD_SETTER(NetI2pClientDatagramI2PDatagramMaker, dsaEng_, NetI2pCryptoDSAEngine *)
J2OBJC_FIELD_SETTER(NetI2pClientDatagramI2PDatagramMaker, sxPrivKey_, NetI2pDataSigningPrivateKey *)
J2OBJC_FIELD_SETTER(NetI2pClientDatagramI2PDatagramMaker, sxDestBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(NetI2pClientDatagramI2PDatagramMaker, sxDGram_, JavaIoByteArrayOutputStream *)

inline jint NetI2pClientDatagramI2PDatagramMaker_get_DGRAM_BUFSIZE(void);
#define NetI2pClientDatagramI2PDatagramMaker_DGRAM_BUFSIZE 32768
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientDatagramI2PDatagramMaker, DGRAM_BUFSIZE, jint)

@implementation NetI2pClientDatagramI2PDatagramMaker

- (instancetype)initWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session {
  NetI2pClientDatagramI2PDatagramMaker_initWithNetI2pClientI2PSession_(self, session);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetI2pClientDatagramI2PDatagramMaker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setI2PDatagramMakerWithNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session {
  JreStrongAssign(&sxPrivKey_, [((id<NetI2pClientI2PSession>) nil_chk(session)) getPrivateKey]);
  JreStrongAssign(&sxDestBytes_, [((NetI2pDataDestination *) nil_chk([session getMyDestination])) toByteArray]);
}

- (IOSByteArray *)makeI2PDatagramWithByteArray:(IOSByteArray *)payload {
  [((JavaIoByteArrayOutputStream *) nil_chk(sxDGram_)) reset];
  @try {
    [sxDGram_ writeWithByteArray:sxDestBytes_];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPrivateKey *) nil_chk(sxPrivKey_)) getType];
    if (type == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Unsupported sig type");
    NetI2pDataSignature *sig;
    if (type == JreLoadEnum(NetI2pCryptoSigType, DSA_SHA1)) {
      IOSByteArray *hash_ = NetI2pUtilSimpleByteCache_acquireWithInt_(NetI2pDataHash_HASH_LENGTH);
      [((NetI2pCryptoSHA256Generator *) nil_chk(hashGen_)) calculateHashWithByteArray:payload withInt:0 withInt:((IOSByteArray *) nil_chk(payload))->size_ withByteArray:hash_ withInt:0];
      sig = [((NetI2pCryptoDSAEngine *) nil_chk(dsaEng_)) signWithByteArray:hash_ withNetI2pDataSigningPrivateKey:sxPrivKey_];
      NetI2pUtilSimpleByteCache_release__WithByteArray_(hash_);
    }
    else {
      sig = [((NetI2pCryptoDSAEngine *) nil_chk(dsaEng_)) signWithByteArray:payload withNetI2pDataSigningPrivateKey:sxPrivKey_];
    }
    [((NetI2pDataSignature *) nil_chk(sig)) writeBytesWithJavaIoOutputStream:sxDGram_];
    [sxDGram_ writeWithByteArray:payload];
    if ([sxDGram_ size] > NetI2pClientDatagramI2PDatagramMaker_DGRAM_BUFSIZE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Too big");
    return [sxDGram_ toByteArray];
  }
  @catch (JavaIoIOException *e) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pClientDatagramI2PDatagramMaker_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Caught IOException" withJavaLangThrowable:e];
    return nil;
  }
  @catch (NetI2pDataDataFormatException *e) {
    NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(NetI2pI2PAppContext_getGlobalContext())) logManager])) getLogWithIOSClass:NetI2pClientDatagramI2PDatagramMaker_class_()];
    [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:@"Caught DataFormatException" withJavaLangThrowable:e];
    return nil;
  }
}

- (void)dealloc {
  RELEASE_(hashGen_);
  RELEASE_(dsaEng_);
  RELEASE_(sxPrivKey_);
  RELEASE_(sxDestBytes_);
  RELEASE_(sxDGram_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pClientI2PSession:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setI2PDatagramMakerWithNetI2pClientI2PSession:);
  methods[3].selector = @selector(makeI2PDatagramWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DGRAM_BUFSIZE", "I", .constantValue.asInt = NetI2pClientDatagramI2PDatagramMaker_DGRAM_BUFSIZE, 0x1a, -1, -1, -1, -1 },
    { "hashGen_", "LNetI2pCryptoSHA256Generator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dsaEng_", "LNetI2pCryptoDSAEngine;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sxPrivKey_", "LNetI2pDataSigningPrivateKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sxDestBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sxDGram_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pClientI2PSession;", "setI2PDatagramMaker", "makeI2PDatagram", "[B" };
  static const J2ObjcClassInfo _NetI2pClientDatagramI2PDatagramMaker = { "I2PDatagramMaker", "net.i2p.client.datagram", ptrTable, methods, fields, 7, 0x11, 4, 6, -1, -1, -1, -1, -1 };
  return &_NetI2pClientDatagramI2PDatagramMaker;
}

@end

void NetI2pClientDatagramI2PDatagramMaker_initWithNetI2pClientI2PSession_(NetI2pClientDatagramI2PDatagramMaker *self, id<NetI2pClientI2PSession> session) {
  NSObject_init(self);
  JreStrongAssign(&self->hashGen_, NetI2pCryptoSHA256Generator_getInstance());
  JreStrongAssign(&self->dsaEng_, NetI2pCryptoDSAEngine_getInstance());
  JreStrongAssignAndConsume(&self->sxDGram_, new_JavaIoByteArrayOutputStream_initWithInt_(NetI2pClientDatagramI2PDatagramMaker_DGRAM_BUFSIZE));
  [self setI2PDatagramMakerWithNetI2pClientI2PSession:session];
}

NetI2pClientDatagramI2PDatagramMaker *new_NetI2pClientDatagramI2PDatagramMaker_initWithNetI2pClientI2PSession_(id<NetI2pClientI2PSession> session) {
  J2OBJC_NEW_IMPL(NetI2pClientDatagramI2PDatagramMaker, initWithNetI2pClientI2PSession_, session)
}

NetI2pClientDatagramI2PDatagramMaker *create_NetI2pClientDatagramI2PDatagramMaker_initWithNetI2pClientI2PSession_(id<NetI2pClientI2PSession> session) {
  J2OBJC_CREATE_IMPL(NetI2pClientDatagramI2PDatagramMaker, initWithNetI2pClientI2PSession_, session)
}

void NetI2pClientDatagramI2PDatagramMaker_init(NetI2pClientDatagramI2PDatagramMaker *self) {
  NSObject_init(self);
  JreStrongAssign(&self->hashGen_, NetI2pCryptoSHA256Generator_getInstance());
  JreStrongAssign(&self->dsaEng_, NetI2pCryptoDSAEngine_getInstance());
  JreStrongAssignAndConsume(&self->sxDGram_, new_JavaIoByteArrayOutputStream_initWithInt_(NetI2pClientDatagramI2PDatagramMaker_DGRAM_BUFSIZE));
}

NetI2pClientDatagramI2PDatagramMaker *new_NetI2pClientDatagramI2PDatagramMaker_init() {
  J2OBJC_NEW_IMPL(NetI2pClientDatagramI2PDatagramMaker, init)
}

NetI2pClientDatagramI2PDatagramMaker *create_NetI2pClientDatagramI2PDatagramMaker_init() {
  J2OBJC_CREATE_IMPL(NetI2pClientDatagramI2PDatagramMaker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientDatagramI2PDatagramMaker)
