//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/LookupDest.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Properties.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PClient.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/I2PSimpleClient.h"
#include "net/i2p/client/naming/LookupDest.h"
#include "net/i2p/data/Base32.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"

inline jlong NetI2pClientNamingLookupDest_get_DEFAULT_TIMEOUT(void);
#define NetI2pClientNamingLookupDest_DEFAULT_TIMEOUT 15000LL
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientNamingLookupDest, DEFAULT_TIMEOUT, jlong)

inline NSString *NetI2pClientNamingLookupDest_get_PROP_ENABLE_SSL(void);
static NSString *NetI2pClientNamingLookupDest_PROP_ENABLE_SSL = @"i2cp.SSL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingLookupDest, PROP_ENABLE_SSL, NSString *)

inline NSString *NetI2pClientNamingLookupDest_get_PROP_USER(void);
static NSString *NetI2pClientNamingLookupDest_PROP_USER = @"i2cp.username";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingLookupDest, PROP_USER, NSString *)

inline NSString *NetI2pClientNamingLookupDest_get_PROP_PW(void);
static NSString *NetI2pClientNamingLookupDest_PROP_PW = @"i2cp.password";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingLookupDest, PROP_PW, NSString *)

@implementation NetI2pClientNamingLookupDest

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientNamingLookupDest_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

+ (NetI2pDataDestination *)lookupBase32HashWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                                      withNSString:(NSString *)key {
  return NetI2pClientNamingLookupDest_lookupBase32HashWithNetI2pI2PAppContext_withNSString_(ctx, key);
}

+ (NetI2pDataDestination *)lookupHashWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                               withByteArray:(IOSByteArray *)h {
  return NetI2pClientNamingLookupDest_lookupHashWithNetI2pI2PAppContext_withByteArray_(ctx, h);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  NetI2pClientNamingLookupDest_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x8, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x8, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(lookupBase32HashWithNetI2pI2PAppContext:withNSString:);
  methods[2].selector = @selector(lookupHashWithNetI2pI2PAppContext:withByteArray:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TIMEOUT", "J", .constantValue.asLong = NetI2pClientNamingLookupDest_DEFAULT_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "PROP_ENABLE_SSL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "PROP_USER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "PROP_PW", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "lookupBase32Hash", "LNetI2pI2PAppContext;LNSString;", "LNetI2pClientI2PSessionException;", "lookupHash", "LNetI2pI2PAppContext;[B", "main", "[LNSString;", &NetI2pClientNamingLookupDest_PROP_ENABLE_SSL, &NetI2pClientNamingLookupDest_PROP_USER, &NetI2pClientNamingLookupDest_PROP_PW };
  static const J2ObjcClassInfo _NetI2pClientNamingLookupDest = { "LookupDest", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x0, 4, 4, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingLookupDest;
}

@end

void NetI2pClientNamingLookupDest_initWithNetI2pI2PAppContext_(NetI2pClientNamingLookupDest *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
}

NetI2pClientNamingLookupDest *new_NetI2pClientNamingLookupDest_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingLookupDest, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientNamingLookupDest *create_NetI2pClientNamingLookupDest_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingLookupDest, initWithNetI2pI2PAppContext_, context)
}

NetI2pDataDestination *NetI2pClientNamingLookupDest_lookupBase32HashWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext *ctx, NSString *key) {
  NetI2pClientNamingLookupDest_initialize();
  IOSByteArray *h = NetI2pDataBase32_decodeWithNSString_(key);
  if (h == nil) return nil;
  return NetI2pClientNamingLookupDest_lookupHashWithNetI2pI2PAppContext_withByteArray_(ctx, h);
}

NetI2pDataDestination *NetI2pClientNamingLookupDest_lookupHashWithNetI2pI2PAppContext_withByteArray_(NetI2pI2PAppContext *ctx, IOSByteArray *h) {
  NetI2pClientNamingLookupDest_initialize();
  NetI2pDataHash *key = NetI2pDataHash_createWithByteArray_(h);
  NetI2pDataDestination *rv = nil;
  id<NetI2pClientI2PClient> client = create_NetI2pClientI2PSimpleClient_init();
  JavaUtilProperties *opts = create_JavaUtilProperties_init();
  if (![((NetI2pI2PAppContext *) nil_chk(ctx)) isRouterContext]) {
    NSString *s = [ctx getPropertyWithNSString:NetI2pClientI2PClient_PROP_TCP_HOST];
    if (s != nil) [opts putWithId:NetI2pClientI2PClient_PROP_TCP_HOST withId:s];
    s = [ctx getPropertyWithNSString:NetI2pClientI2PClient_PROP_TCP_PORT];
    if (s != nil) [opts putWithId:NetI2pClientI2PClient_PROP_TCP_PORT withId:s];
    s = [ctx getPropertyWithNSString:NetI2pClientNamingLookupDest_PROP_ENABLE_SSL];
    if (s != nil) [opts putWithId:NetI2pClientNamingLookupDest_PROP_ENABLE_SSL withId:s];
    s = [ctx getPropertyWithNSString:NetI2pClientNamingLookupDest_PROP_USER];
    if (s != nil) [opts putWithId:NetI2pClientNamingLookupDest_PROP_USER withId:s];
    s = [ctx getPropertyWithNSString:NetI2pClientNamingLookupDest_PROP_PW];
    if (s != nil) [opts putWithId:NetI2pClientNamingLookupDest_PROP_PW withId:s];
  }
  id<NetI2pClientI2PSession> session = nil;
  @try {
    session = [client createSessionWithJavaIoInputStream:nil withJavaUtilProperties:opts];
    [((id<NetI2pClientI2PSession>) nil_chk(session)) connect];
    rv = [session lookupDestWithNetI2pDataHash:key withLong:NetI2pClientNamingLookupDest_DEFAULT_TIMEOUT];
  }
  @finally {
    if (session != nil) [session destroySession];
  }
  return rv;
}

void NetI2pClientNamingLookupDest_mainWithNSStringArray_(IOSObjectArray *args) {
  NetI2pClientNamingLookupDest_initialize();
  NetI2pDataDestination *dest = NetI2pClientNamingLookupDest_lookupBase32HashWithNetI2pI2PAppContext_withNSString_(NetI2pI2PAppContext_getGlobalContext(), IOSObjectArray_Get(nil_chk(args), 0));
  if (dest == nil) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Destination not found!"];
  else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[dest toBase64]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingLookupDest)
