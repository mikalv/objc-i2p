//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/MetaNamingService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/naming/DummyNamingService.h"
#include "net/i2p/client/naming/MetaNamingService.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/client/naming/NamingServiceListener.h"
#include "net/i2p/data/Destination.h"

inline NSString *NetI2pClientNamingMetaNamingService_get_PROP_NAME_SERVICES(void);
static NSString *NetI2pClientNamingMetaNamingService_PROP_NAME_SERVICES = @"i2p.nameservicelist";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingMetaNamingService, PROP_NAME_SERVICES, NSString *)

inline NSString *NetI2pClientNamingMetaNamingService_get_DEFAULT_NAME_SERVICES(void);
static NSString *NetI2pClientNamingMetaNamingService_DEFAULT_NAME_SERVICES = @"net.i2p.client.naming.HostsTxtNamingService";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingMetaNamingService, DEFAULT_NAME_SERVICES, NSString *)

@implementation NetI2pClientNamingMetaNamingService

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                           withJavaUtilList:(id<JavaUtilList>)services {
  NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(self, context, services);
  return self;
}

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns
                                                    withBoolean:(jboolean)head {
  if (head) [((id<JavaUtilList>) nil_chk(_services_)) addWithInt:0 withId:ns];
  else [((id<JavaUtilList>) nil_chk(_services_)) addWithId:ns];
  return true;
}

- (id<JavaUtilList>)getNamingServices {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(_services_);
}

- (jboolean)removeNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns {
  return [((id<JavaUtilList>) nil_chk(_services_)) removeWithId:ns];
}

- (void)registerListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl {
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [((NetI2pClientNamingNamingService *) nil_chk(ns)) registerListenerWithNetI2pClientNamingNamingServiceListener:nsl];
  }
}

- (void)unregisterListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl {
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [((NetI2pClientNamingNamingService *) nil_chk(ns)) unregisterListenerWithNetI2pClientNamingNamingServiceListener:nsl];
  }
}

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions {
  NetI2pDataDestination *d = [super lookupWithNSString:hostname withJavaUtilProperties:nil withJavaUtilProperties:nil];
  if (d != nil) return d;
  if ([((NSString *) nil_chk(hostname)) java_length] == NetI2pClientNamingDummyNamingService_BASE32_HASH_LENGTH + 8 && [((NSString *) nil_chk([hostname java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasSuffix:@".b32.i2p"]) return nil;
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    d = [((NetI2pClientNamingNamingService *) nil_chk(ns)) lookupWithNSString:hostname withJavaUtilProperties:lookupOptions withJavaUtilProperties:storedOptions];
    if (d != nil) {
      NetI2pClientNamingDummyNamingService_putCacheWithNSString_withNetI2pDataDestination_(hostname, d);
      return d;
    }
  }
  return nil;
}

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                              withJavaUtilProperties:(JavaUtilProperties *)options {
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    NSString *host = [((NetI2pClientNamingNamingService *) nil_chk(ns)) reverseLookupWithNetI2pDataDestination:dest withJavaUtilProperties:options];
    if (host != nil) {
      return host;
    }
  }
  return nil;
}

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d
     withJavaUtilProperties:(JavaUtilProperties *)options {
  if ([((id<JavaUtilList>) nil_chk(_services_)) isEmpty]) return false;
  jboolean rv = [((NetI2pClientNamingNamingService *) nil_chk([_services_ getWithInt:[_services_ size] - 1])) putWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:options];
  if (rv) NetI2pClientNamingDummyNamingService_putCacheWithNSString_withNetI2pDataDestination_(hostname, d);
  return rv;
}

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d
             withJavaUtilProperties:(JavaUtilProperties *)options {
  if ([((id<JavaUtilList>) nil_chk(_services_)) isEmpty]) return false;
  jboolean rv = [((NetI2pClientNamingNamingService *) nil_chk([_services_ getWithInt:[_services_ size] - 1])) putIfAbsentWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:options];
  if (rv) NetI2pClientNamingDummyNamingService_putCacheWithNSString_withNetI2pDataDestination_(hostname, d);
  return rv;
}

- (jboolean)removeWithNSString:(NSString *)hostname
        withJavaUtilProperties:(JavaUtilProperties *)options {
  jboolean rv = false;
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    if ([((NetI2pClientNamingNamingService *) nil_chk(ns)) removeWithNSString:hostname withJavaUtilProperties:options]) rv = true;
  }
  if (rv) NetI2pClientNamingDummyNamingService_removeCacheWithNSString_(hostname);
  return rv;
}

- (id<JavaUtilMap>)getEntriesWithJavaUtilProperties:(JavaUtilProperties *)options {
  id<JavaUtilMap> rv = create_JavaUtilHashMap_init();
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [rv putAllWithJavaUtilMap:[((NetI2pClientNamingNamingService *) nil_chk(ns)) getEntriesWithJavaUtilProperties:options]];
  }
  return rv;
}

- (id<JavaUtilMap>)getBase64EntriesWithJavaUtilProperties:(JavaUtilProperties *)options {
  id<JavaUtilMap> rv = create_JavaUtilHashMap_init();
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [rv putAllWithJavaUtilMap:[((NetI2pClientNamingNamingService *) nil_chk(ns)) getBase64EntriesWithJavaUtilProperties:options]];
  }
  return rv;
}

- (id<JavaUtilSet>)getNamesWithJavaUtilProperties:(JavaUtilProperties *)options {
  id<JavaUtilSet> rv = create_JavaUtilHashSet_init();
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [rv addAllWithJavaUtilCollection:[((NetI2pClientNamingNamingService *) nil_chk(ns)) getNamesWithJavaUtilProperties:options]];
  }
  return rv;
}

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg
          withJavaUtilProperties:(JavaUtilProperties *)options {
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [((NetI2pClientNamingNamingService *) nil_chk(ns)) export__WithJavaIoWriter:outArg withJavaUtilProperties:options];
  }
}

- (jint)sizeWithJavaUtilProperties:(JavaUtilProperties *)options {
  jint rv = 0;
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    jint s = [((NetI2pClientNamingNamingService *) nil_chk(ns)) sizeWithJavaUtilProperties:options];
    if (s > 0) rv += s;
  }
  return rv;
}

- (void)shutdown {
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    [((NetI2pClientNamingNamingService *) nil_chk(ns)) shutdown];
  }
}

- (void)dealloc {
  RELEASE_(_services_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 23, 21, -1, 24, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 25, 21, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "I", 0x1, 30, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withJavaUtilList:);
  methods[2].selector = @selector(addNamingServiceWithNetI2pClientNamingNamingService:withBoolean:);
  methods[3].selector = @selector(getNamingServices);
  methods[4].selector = @selector(removeNamingServiceWithNetI2pClientNamingNamingService:);
  methods[5].selector = @selector(registerListenerWithNetI2pClientNamingNamingServiceListener:);
  methods[6].selector = @selector(unregisterListenerWithNetI2pClientNamingNamingServiceListener:);
  methods[7].selector = @selector(lookupWithNSString:withJavaUtilProperties:withJavaUtilProperties:);
  methods[8].selector = @selector(reverseLookupWithNetI2pDataDestination:withJavaUtilProperties:);
  methods[9].selector = @selector(putWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[10].selector = @selector(putIfAbsentWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[11].selector = @selector(removeWithNSString:withJavaUtilProperties:);
  methods[12].selector = @selector(getEntriesWithJavaUtilProperties:);
  methods[13].selector = @selector(getBase64EntriesWithJavaUtilProperties:);
  methods[14].selector = @selector(getNamesWithJavaUtilProperties:);
  methods[15].selector = @selector(export__WithJavaIoWriter:withJavaUtilProperties:);
  methods[16].selector = @selector(sizeWithJavaUtilProperties:);
  methods[17].selector = @selector(shutdown);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_NAME_SERVICES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "DEFAULT_NAME_SERVICES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "_services_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 33, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "LNetI2pI2PAppContext;LJavaUtilList;", "(Lnet/i2p/I2PAppContext;Ljava/util/List<Lnet/i2p/client/naming/NamingService;>;)V", "addNamingService", "LNetI2pClientNamingNamingService;Z", "()Ljava/util/List<Lnet/i2p/client/naming/NamingService;>;", "removeNamingService", "LNetI2pClientNamingNamingService;", "registerListener", "LNetI2pClientNamingNamingServiceListener;", "unregisterListener", "lookup", "LNSString;LJavaUtilProperties;LJavaUtilProperties;", "reverseLookup", "LNetI2pDataDestination;LJavaUtilProperties;", "put", "LNSString;LNetI2pDataDestination;LJavaUtilProperties;", "putIfAbsent", "remove", "LNSString;LJavaUtilProperties;", "getEntries", "LJavaUtilProperties;", "(Ljava/util/Properties;)Ljava/util/Map<Ljava/lang/String;Lnet/i2p/data/Destination;>;", "getBase64Entries", "(Ljava/util/Properties;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "getNames", "(Ljava/util/Properties;)Ljava/util/Set<Ljava/lang/String;>;", "export", "LJavaIoWriter;LJavaUtilProperties;", "LJavaIoIOException;", "size", &NetI2pClientNamingMetaNamingService_PROP_NAME_SERVICES, &NetI2pClientNamingMetaNamingService_DEFAULT_NAME_SERVICES, "Ljava/util/List<Lnet/i2p/client/naming/NamingService;>;" };
  static const J2ObjcClassInfo _NetI2pClientNamingMetaNamingService = { "MetaNamingService", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x1, 18, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingMetaNamingService;
}

@end

void NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingMetaNamingService *self, NetI2pI2PAppContext *context) {
  NetI2pClientNamingDummyNamingService_initWithNetI2pI2PAppContext_(self, context);
  NSString *list = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pClientNamingMetaNamingService_PROP_NAME_SERVICES withNSString:NetI2pClientNamingMetaNamingService_DEFAULT_NAME_SERVICES];
  JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(list, @",");
  JreStrongAssignAndConsume(&self->_services_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  while ([tok hasMoreTokens]) {
    @try {
      IOSClass *cls = IOSClass_forName_([tok nextToken]);
      JavaLangReflectConstructor *con = [((IOSClass *) nil_chk(cls)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pI2PAppContext_class_() } count:1 type:IOSClass_class_()]];
      [self addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *) cast_chk([((JavaLangReflectConstructor *) nil_chk(con)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NetI2pClientNamingNamingService class]) withBoolean:false];
    }
    @catch (JavaLangException *ex) {
    }
  }
}

NetI2pClientNamingMetaNamingService *new_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingMetaNamingService, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientNamingMetaNamingService *create_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingMetaNamingService, initWithNetI2pI2PAppContext_, context)
}

void NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pClientNamingMetaNamingService *self, NetI2pI2PAppContext *context, id<JavaUtilList> services) {
  NetI2pClientNamingDummyNamingService_initWithNetI2pI2PAppContext_(self, context);
  JreStrongAssignAndConsume(&self->_services_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  if (services != nil) {
    for (NetI2pClientNamingNamingService * __strong ns in services) {
      [self addNamingServiceWithNetI2pClientNamingNamingService:ns withBoolean:false];
    }
  }
}

NetI2pClientNamingMetaNamingService *new_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *context, id<JavaUtilList> services) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingMetaNamingService, initWithNetI2pI2PAppContext_withJavaUtilList_, context, services)
}

NetI2pClientNamingMetaNamingService *create_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *context, id<JavaUtilList> services) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingMetaNamingService, initWithNetI2pI2PAppContext_withJavaUtilList_, context, services)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingMetaNamingService)
