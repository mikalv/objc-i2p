//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/NamingService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/naming/DummyNamingService.h"
#include "net/i2p/client/naming/HostsTxtNamingService.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/client/naming/NamingServiceListener.h"
#include "net/i2p/client/naming/NamingServiceUpdater.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Hash.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

inline NSString *NetI2pClientNamingNamingService_get_DEFAULT_IMPL(void);
static NSString *NetI2pClientNamingNamingService_DEFAULT_IMPL = @"net.i2p.router.naming.BlockfileNamingService";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingNamingService, DEFAULT_IMPL, NSString *)

inline NSString *NetI2pClientNamingNamingService_get_OLD_DEFAULT_IMPL(void);
static NSString *NetI2pClientNamingNamingService_OLD_DEFAULT_IMPL = @"net.i2p.client.naming.BlockfileNamingService";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingNamingService, OLD_DEFAULT_IMPL, NSString *)

inline NSString *NetI2pClientNamingNamingService_get_BACKUP_IMPL(void);
static NSString *NetI2pClientNamingNamingService_BACKUP_IMPL = @"net.i2p.client.naming.HostsTxtNamingService";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingNamingService, BACKUP_IMPL, NSString *)

NSString *NetI2pClientNamingNamingService_PROP_IMPL = @"i2p.naming.impl";

@implementation NetI2pClientNamingNamingService

+ (NSString *)PROP_IMPL {
  return NetI2pClientNamingNamingService_PROP_IMPL;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientNamingNamingService_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname {
  return [self lookupWithNSString:hostname withJavaUtilProperties:nil withJavaUtilProperties:nil];
}

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return [self reverseLookupWithNetI2pDataDestination:dest withJavaUtilProperties:nil];
}

- (NSString *)reverseLookupWithNetI2pDataHash:(NetI2pDataHash *)h {
  return nil;
}

- (NetI2pDataDestination *)lookupBase64WithNSString:(NSString *)hostname {
  @try {
    NetI2pDataDestination *result = create_NetI2pDataDestination_init();
    [result fromBase64WithNSString:hostname];
    return result;
  }
  @catch (NetI2pDataDataFormatException *dfe) {
    if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$C", @"Bad B64 dest [", hostname, ']') withJavaLangThrowable:dfe];
    return nil;
  }
}

- (NSString *)description {
  return [[self java_getClass] getSimpleName];
}

- (NSString *)getName {
  return [[self java_getClass] getSimpleName];
}

- (JavaUtilProperties *)getConfiguration {
  return nil;
}

- (jboolean)setConfigurationWithJavaUtilProperties:(JavaUtilProperties *)p {
  return true;
}

- (id<JavaUtilList>)getNamingServices {
  return nil;
}

- (NetI2pClientNamingNamingService *)getParent {
  return nil;
}

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns {
  return [self addNamingServiceWithNetI2pClientNamingNamingService:ns withBoolean:false];
}

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns
                                                    withBoolean:(jboolean)head {
  return false;
}

- (jboolean)removeNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns {
  return false;
}

- (jint)size {
  return [self sizeWithJavaUtilProperties:nil];
}

- (jint)sizeWithJavaUtilProperties:(JavaUtilProperties *)options {
  return -1;
}

- (id<JavaUtilMap>)getEntries {
  return [self getEntriesWithJavaUtilProperties:nil];
}

- (id<JavaUtilMap>)getEntriesWithJavaUtilProperties:(JavaUtilProperties *)options {
  return JavaUtilCollections_emptyMap();
}

- (id<JavaUtilMap>)getBase64EntriesWithJavaUtilProperties:(JavaUtilProperties *)options {
  id<JavaUtilMap> entries = [self getEntriesWithJavaUtilProperties:options];
  if ([((id<JavaUtilMap>) nil_chk(entries)) size] <= 0) return JavaUtilCollections_emptyMap();
  id<JavaUtilMap> rv = create_JavaUtilTreeMap_init();
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([entries entrySet])) {
    [rv putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[((NetI2pDataDestination *) nil_chk([e getValue])) toBase64]];
  }
  return rv;
}

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg {
  [self export__WithJavaIoWriter:outArg withJavaUtilProperties:nil];
}

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg
          withJavaUtilProperties:(JavaUtilProperties *)options {
  id<JavaUtilMap> entries = [self getBase64EntriesWithJavaUtilProperties:options];
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"# Address book: "];
  [outArg writeWithNSString:[self getName]];
  if (options != nil) {
    NSString *list = [options getPropertyWithNSString:@"list"];
    if (list != nil) [outArg writeWithNSString:JreStrcat("$$C", @" (", list, ')')];
  }
  NSString *nl = JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n");
  [outArg writeWithNSString:nl];
  jint sz = [((id<JavaUtilMap>) nil_chk(entries)) size];
  if (sz <= 0) {
    [outArg writeWithNSString:@"# No entries"];
    [outArg writeWithNSString:nl];
    return;
  }
  [outArg writeWithNSString:@"# Exported: "];
  [outArg writeWithNSString:[(create_JavaUtilDate_init()) description]];
  [outArg writeWithNSString:nl];
  if (sz > 1) {
    [outArg writeWithNSString:JreStrcat("$I$", @"# ", sz, @" entries")];
    [outArg writeWithNSString:nl];
  }
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([entries entrySet])) {
    [outArg writeWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
    [outArg writeWithInt:'='];
    [outArg writeWithNSString:[e getValue]];
    [outArg writeWithNSString:nl];
  }
}

- (id<JavaUtilSet>)getNames {
  return [self getNamesWithJavaUtilProperties:nil];
}

- (id<JavaUtilSet>)getNamesWithJavaUtilProperties:(JavaUtilProperties *)options {
  return JavaUtilCollections_emptySet();
}

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d {
  return [self putWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:nil];
}

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d
     withJavaUtilProperties:(JavaUtilProperties *)options {
  return false;
}

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d {
  return [self putIfAbsentWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:nil];
}

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d
             withJavaUtilProperties:(JavaUtilProperties *)options {
  return false;
}

- (jboolean)putAllWithJavaUtilMap:(id<JavaUtilMap>)entries
           withJavaUtilProperties:(JavaUtilProperties *)options {
  jboolean rv = true;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(entries)) entrySet])) {
    if (![self putWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withNetI2pDataDestination:[entry_ getValue] withJavaUtilProperties:options]) rv = false;
  }
  return rv;
}

- (jboolean)updateWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d
        withJavaUtilProperties:(JavaUtilProperties *)options {
  return false;
}

- (jboolean)removeWithNSString:(NSString *)hostname {
  return [self removeWithNSString:hostname withJavaUtilProperties:nil];
}

- (jboolean)removeWithNSString:(NSString *)hostname
        withJavaUtilProperties:(JavaUtilProperties *)options {
  return false;
}

- (void)requestUpdateWithJavaUtilProperties:(JavaUtilProperties *)options {
  for (id<NetI2pClientNamingNamingServiceUpdater> __strong nsu in nil_chk(_updaters_)) {
    [((id<NetI2pClientNamingNamingServiceUpdater>) nil_chk(nsu)) updateWithJavaUtilProperties:options];
  }
}

- (void)registerListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl {
  [((id<JavaUtilSet>) nil_chk(_listeners_)) addWithId:nsl];
}

- (void)unregisterListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl {
  [((id<JavaUtilSet>) nil_chk(_listeners_)) removeWithId:nsl];
}

- (void)registerUpdaterWithNetI2pClientNamingNamingServiceUpdater:(id<NetI2pClientNamingNamingServiceUpdater>)nsu {
  [((id<JavaUtilSet>) nil_chk(_updaters_)) addWithId:nsu];
}

- (void)unregisterUpdaterWithNetI2pClientNamingNamingServiceUpdater:(id<NetI2pClientNamingNamingServiceUpdater>)nsu {
  [((id<JavaUtilSet>) nil_chk(_updaters_)) removeWithId:nsu];
}

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)d
                              withJavaUtilProperties:(JavaUtilProperties *)options {
  return nil;
}

- (NetI2pDataDestination *)lookupBase32WithNSString:(NSString *)hostname
                                            withInt:(jint)timeout {
  return nil;
}

- (NetI2pDataDestination *)lookupWithNetI2pDataHash:(NetI2pDataHash *)hash_
                                            withInt:(jint)timeout {
  return nil;
}

- (void)start {
}

- (void)shutdown {
}

- (id<JavaUtilList>)lookupAllWithNSString:(NSString *)hostname {
  return [self lookupAllWithNSString:hostname withJavaUtilProperties:nil withJavaUtilList:nil];
}

- (id<JavaUtilList>)lookupAllWithNSString:(NSString *)hostname
                   withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                         withJavaUtilList:(id<JavaUtilList>)storedOptions {
  JavaUtilProperties *props = storedOptions != nil ? create_JavaUtilProperties_init() : nil;
  NetI2pDataDestination *d = [self lookupWithNSString:hostname withJavaUtilProperties:lookupOptions withJavaUtilProperties:props];
  id<JavaUtilList> rv;
  if (d != nil) {
    rv = JavaUtilCollections_singletonListWithId_(d);
    if (storedOptions != nil) [storedOptions addWithId:[props isEmpty] ? nil : props];
  }
  else {
    rv = nil;
  }
  return rv;
}

- (jboolean)addDestinationWithNSString:(NSString *)hostname
             withNetI2pDataDestination:(NetI2pDataDestination *)d {
  return [self addDestinationWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:nil];
}

- (jboolean)addDestinationWithNSString:(NSString *)hostname
             withNetI2pDataDestination:(NetI2pDataDestination *)d
                withJavaUtilProperties:(JavaUtilProperties *)options {
  return [self putIfAbsentWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:options];
}

- (jboolean)removeWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d {
  return [self removeWithNSString:hostname withNetI2pDataDestination:d withJavaUtilProperties:nil];
}

- (jboolean)removeWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d
        withJavaUtilProperties:(JavaUtilProperties *)options {
  NetI2pDataDestination *old = [self lookupWithNSString:hostname withJavaUtilProperties:options withJavaUtilProperties:nil];
  if (![((NetI2pDataDestination *) nil_chk(d)) isEqual:old]) return false;
  return [self removeWithNSString:hostname withJavaUtilProperties:options];
}

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataHash:(NetI2pDataHash *)h {
  NSString *s = [self reverseLookupWithNetI2pDataHash:h];
  return (s != nil) ? JavaUtilCollections_singletonListWithId_(s) : nil;
}

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataDestination:(NetI2pDataDestination *)dest {
  return [self reverseLookupAllWithNetI2pDataDestination:dest withJavaUtilProperties:nil];
}

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataDestination:(NetI2pDataDestination *)d
                                       withJavaUtilProperties:(JavaUtilProperties *)options {
  NSString *s = [self reverseLookupWithNetI2pDataDestination:d withJavaUtilProperties:options];
  return (s != nil) ? JavaUtilCollections_singletonListWithId_(s) : nil;
}

+ (NetI2pClientNamingNamingService *)createInstanceWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  return NetI2pClientNamingNamingService_createInstanceWithNetI2pI2PAppContext_(context);
}

- (void)dealloc {
  RELEASE_(_log_);
  RELEASE_(_context_);
  RELEASE_(_listeners_);
  RELEASE_(_updaters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x4, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNetI2pClientNamingNamingService;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 17, 9, -1, 18, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 19, 9, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 24, 23, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 26, 9, -1, 27, -1, -1 },
    { NULL, "Z", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "Z", 0x1, 35, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 43, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x401, 1, 45, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 46, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 1, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 50, 2, -1, 51, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 50, 52, -1, 53, -1, -1 },
    { NULL, "Z", 0x1, 54, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 54, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 30, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 55, 5, -1, 56, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 55, 4, -1, 57, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 55, 46, -1, 58, -1, -1 },
    { NULL, "LNetI2pClientNamingNamingService;", 0x39, 59, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(lookupWithNSString:);
  methods[2].selector = @selector(reverseLookupWithNetI2pDataDestination:);
  methods[3].selector = @selector(reverseLookupWithNetI2pDataHash:);
  methods[4].selector = @selector(lookupBase64WithNSString:);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(getName);
  methods[7].selector = @selector(getConfiguration);
  methods[8].selector = @selector(setConfigurationWithJavaUtilProperties:);
  methods[9].selector = @selector(getNamingServices);
  methods[10].selector = @selector(getParent);
  methods[11].selector = @selector(addNamingServiceWithNetI2pClientNamingNamingService:);
  methods[12].selector = @selector(addNamingServiceWithNetI2pClientNamingNamingService:withBoolean:);
  methods[13].selector = @selector(removeNamingServiceWithNetI2pClientNamingNamingService:);
  methods[14].selector = @selector(size);
  methods[15].selector = @selector(sizeWithJavaUtilProperties:);
  methods[16].selector = @selector(getEntries);
  methods[17].selector = @selector(getEntriesWithJavaUtilProperties:);
  methods[18].selector = @selector(getBase64EntriesWithJavaUtilProperties:);
  methods[19].selector = @selector(export__WithJavaIoWriter:);
  methods[20].selector = @selector(export__WithJavaIoWriter:withJavaUtilProperties:);
  methods[21].selector = @selector(getNames);
  methods[22].selector = @selector(getNamesWithJavaUtilProperties:);
  methods[23].selector = @selector(putWithNSString:withNetI2pDataDestination:);
  methods[24].selector = @selector(putWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[25].selector = @selector(putIfAbsentWithNSString:withNetI2pDataDestination:);
  methods[26].selector = @selector(putIfAbsentWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[27].selector = @selector(putAllWithJavaUtilMap:withJavaUtilProperties:);
  methods[28].selector = @selector(updateWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[29].selector = @selector(removeWithNSString:);
  methods[30].selector = @selector(removeWithNSString:withJavaUtilProperties:);
  methods[31].selector = @selector(requestUpdateWithJavaUtilProperties:);
  methods[32].selector = @selector(registerListenerWithNetI2pClientNamingNamingServiceListener:);
  methods[33].selector = @selector(unregisterListenerWithNetI2pClientNamingNamingServiceListener:);
  methods[34].selector = @selector(registerUpdaterWithNetI2pClientNamingNamingServiceUpdater:);
  methods[35].selector = @selector(unregisterUpdaterWithNetI2pClientNamingNamingServiceUpdater:);
  methods[36].selector = @selector(lookupWithNSString:withJavaUtilProperties:withJavaUtilProperties:);
  methods[37].selector = @selector(reverseLookupWithNetI2pDataDestination:withJavaUtilProperties:);
  methods[38].selector = @selector(lookupBase32WithNSString:withInt:);
  methods[39].selector = @selector(lookupWithNetI2pDataHash:withInt:);
  methods[40].selector = @selector(start);
  methods[41].selector = @selector(shutdown);
  methods[42].selector = @selector(lookupAllWithNSString:);
  methods[43].selector = @selector(lookupAllWithNSString:withJavaUtilProperties:withJavaUtilList:);
  methods[44].selector = @selector(addDestinationWithNSString:withNetI2pDataDestination:);
  methods[45].selector = @selector(addDestinationWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[46].selector = @selector(removeWithNSString:withNetI2pDataDestination:);
  methods[47].selector = @selector(removeWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[48].selector = @selector(reverseLookupAllWithNetI2pDataHash:);
  methods[49].selector = @selector(reverseLookupAllWithNetI2pDataDestination:);
  methods[50].selector = @selector(reverseLookupAllWithNetI2pDataDestination:withJavaUtilProperties:);
  methods[51].selector = @selector(createInstanceWithNetI2pI2PAppContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x14, -1, -1, 60, -1 },
    { "_updaters_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x14, -1, -1, 61, -1 },
    { "PROP_IMPL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "DEFAULT_IMPL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "OLD_DEFAULT_IMPL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "BACKUP_IMPL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "lookup", "LNSString;", "reverseLookup", "LNetI2pDataDestination;", "LNetI2pDataHash;", "lookupBase64", "toString", "setConfiguration", "LJavaUtilProperties;", "()Ljava/util/List<Lnet/i2p/client/naming/NamingService;>;", "addNamingService", "LNetI2pClientNamingNamingService;", "LNetI2pClientNamingNamingService;Z", "removeNamingService", "size", "()Ljava/util/Map<Ljava/lang/String;Lnet/i2p/data/Destination;>;", "getEntries", "(Ljava/util/Properties;)Ljava/util/Map<Ljava/lang/String;Lnet/i2p/data/Destination;>;", "getBase64Entries", "(Ljava/util/Properties;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "export", "LJavaIoWriter;", "LJavaIoIOException;", "LJavaIoWriter;LJavaUtilProperties;", "()Ljava/util/Set<Ljava/lang/String;>;", "getNames", "(Ljava/util/Properties;)Ljava/util/Set<Ljava/lang/String;>;", "put", "LNSString;LNetI2pDataDestination;", "LNSString;LNetI2pDataDestination;LJavaUtilProperties;", "putIfAbsent", "putAll", "LJavaUtilMap;LJavaUtilProperties;", "(Ljava/util/Map<Ljava/lang/String;Lnet/i2p/data/Destination;>;Ljava/util/Properties;)Z", "update", "remove", "LNSString;LJavaUtilProperties;", "requestUpdate", "registerListener", "LNetI2pClientNamingNamingServiceListener;", "unregisterListener", "registerUpdater", "LNetI2pClientNamingNamingServiceUpdater;", "unregisterUpdater", "LNSString;LJavaUtilProperties;LJavaUtilProperties;", "LNetI2pDataDestination;LJavaUtilProperties;", "lookupBase32", "LNSString;I", "LNetI2pDataHash;I", "lookupAll", "(Ljava/lang/String;)Ljava/util/List<Lnet/i2p/data/Destination;>;", "LNSString;LJavaUtilProperties;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/Properties;Ljava/util/List<Ljava/util/Properties;>;)Ljava/util/List<Lnet/i2p/data/Destination;>;", "addDestination", "reverseLookupAll", "(Lnet/i2p/data/Hash;)Ljava/util/List<Ljava/lang/String;>;", "(Lnet/i2p/data/Destination;)Ljava/util/List<Ljava/lang/String;>;", "(Lnet/i2p/data/Destination;Ljava/util/Properties;)Ljava/util/List<Ljava/lang/String;>;", "createInstance", "Ljava/util/Set<Lnet/i2p/client/naming/NamingServiceListener;>;", "Ljava/util/Set<Lnet/i2p/client/naming/NamingServiceUpdater;>;", &NetI2pClientNamingNamingService_PROP_IMPL, &NetI2pClientNamingNamingService_DEFAULT_IMPL, &NetI2pClientNamingNamingService_OLD_DEFAULT_IMPL, &NetI2pClientNamingNamingService_BACKUP_IMPL };
  static const J2ObjcClassInfo _NetI2pClientNamingNamingService = { "NamingService", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x401, 52, 8, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingNamingService;
}

@end

void NetI2pClientNamingNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingNamingService *self, NetI2pI2PAppContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->_context_, context);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(context)) logManager])) getLogWithIOSClass:[self java_getClass]]);
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
  JreStrongAssignAndConsume(&self->_updaters_, new_JavaUtilConcurrentCopyOnWriteArraySet_init());
}

NetI2pClientNamingNamingService *NetI2pClientNamingNamingService_createInstanceWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  NetI2pClientNamingNamingService_initialize();
  @synchronized(NetI2pClientNamingNamingService_class_()) {
    NetI2pClientNamingNamingService *instance = nil;
    NSString *dflt = [((NetI2pI2PAppContext *) nil_chk(context)) isRouterContext] ? NetI2pClientNamingNamingService_DEFAULT_IMPL : NetI2pClientNamingNamingService_BACKUP_IMPL;
    NSString *impl = [context getPropertyWithNSString:NetI2pClientNamingNamingService_PROP_IMPL withNSString:NetI2pClientNamingNamingService_DEFAULT_IMPL];
    if ([((NSString *) nil_chk(impl)) isEqual:NetI2pClientNamingNamingService_OLD_DEFAULT_IMPL]) impl = dflt;
    @try {
      IOSClass *cls = IOSClass_forName_(impl);
      JavaLangReflectConstructor *con = [((IOSClass *) nil_chk(cls)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ NetI2pI2PAppContext_class_() } count:1 type:IOSClass_class_()]];
      instance = (NetI2pClientNamingNamingService *) cast_chk([((JavaLangReflectConstructor *) nil_chk(con)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ context } count:1 type:NSObject_class_()]], [NetI2pClientNamingNamingService class]);
    }
    @catch (JavaLangException *ex) {
      NetI2pUtilLog *log = [((NetI2pUtilLogManager *) nil_chk([context logManager])) getLogWithIOSClass:NetI2pClientNamingNamingService_class_()];
      if (![impl isEqual:NetI2pClientNamingNamingService_BACKUP_IMPL]) {
        [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:JreStrcat("$$$", @"Cannot load naming service ", impl, @", using HostsTxtNamingService") withJavaLangThrowable:ex];
        instance = create_NetI2pClientNamingHostsTxtNamingService_initWithNetI2pI2PAppContext_(context);
      }
      else {
        [((NetI2pUtilLog *) nil_chk(log)) errorWithNSString:JreStrcat("$$$", @"Cannot load naming service ", impl, @", only .b32.i2p lookups will succeed") withJavaLangThrowable:ex];
        instance = create_NetI2pClientNamingDummyNamingService_initWithNetI2pI2PAppContext_(context);
      }
    }
    return JreRetainedLocalValue(instance);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingNamingService)
