//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/NamingService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pClientNamingNamingService")
#ifdef RESTRICT_NetI2pClientNamingNamingService
#define INCLUDE_ALL_NetI2pClientNamingNamingService 0
#else
#define INCLUDE_ALL_NetI2pClientNamingNamingService 1
#endif
#undef RESTRICT_NetI2pClientNamingNamingService

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pClientNamingNamingService_) && (INCLUDE_ALL_NetI2pClientNamingNamingService || defined(INCLUDE_NetI2pClientNamingNamingService))
#define NetI2pClientNamingNamingService_

@class JavaIoWriter;
@class JavaUtilProperties;
@class NetI2pDataDestination;
@class NetI2pDataHash;
@class NetI2pI2PAppContext;
@class NetI2pUtilLog;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol NetI2pClientNamingNamingServiceListener;
@protocol NetI2pClientNamingNamingServiceUpdater;

@interface NetI2pClientNamingNamingService : NSObject {
 @public
  NetI2pUtilLog *_log_;
  NetI2pI2PAppContext *_context_;
  id<JavaUtilSet> _listeners_;
  id<JavaUtilSet> _updaters_;
}
@property (readonly, copy, class) NSString *PROP_IMPL NS_SWIFT_NAME(PROP_IMPL);

+ (NSString *)PROP_IMPL;

#pragma mark Public

- (jboolean)addDestinationWithNSString:(NSString *)hostname
             withNetI2pDataDestination:(NetI2pDataDestination *)d;

- (jboolean)addDestinationWithNSString:(NSString *)hostname
             withNetI2pDataDestination:(NetI2pDataDestination *)d
                withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns;

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns
                                                    withBoolean:(jboolean)head;

+ (NetI2pClientNamingNamingService *)createInstanceWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg;

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg
          withJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilMap>)getBase64EntriesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (JavaUtilProperties *)getConfiguration;

- (id<JavaUtilMap>)getEntries;

- (id<JavaUtilMap>)getEntriesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (NSString *)getName;

- (id<JavaUtilSet>)getNames;

- (id<JavaUtilSet>)getNamesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilList>)getNamingServices;

- (NetI2pClientNamingNamingService *)getParent;

- (NetI2pDataDestination *)lookupWithNetI2pDataHash:(NetI2pDataHash *)hash_
                                            withInt:(jint)timeout;

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname;

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions;

- (id<JavaUtilList>)lookupAllWithNSString:(NSString *)hostname;

- (id<JavaUtilList>)lookupAllWithNSString:(NSString *)hostname
                   withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                         withJavaUtilList:(id<JavaUtilList>)storedOptions;

- (NetI2pDataDestination *)lookupBase32WithNSString:(NSString *)hostname
                                            withInt:(jint)timeout;

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d;

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d
     withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)putAllWithJavaUtilMap:(id<JavaUtilMap>)entries
           withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d;

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d
             withJavaUtilProperties:(JavaUtilProperties *)options;

- (void)registerListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl;

- (void)registerUpdaterWithNetI2pClientNamingNamingServiceUpdater:(id<NetI2pClientNamingNamingServiceUpdater>)nsu;

- (jboolean)removeWithNSString:(NSString *)hostname;

- (jboolean)removeWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d;

- (jboolean)removeWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d
        withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)removeWithNSString:(NSString *)hostname
        withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)removeNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns;

- (void)requestUpdateWithJavaUtilProperties:(JavaUtilProperties *)options;

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)d
                              withJavaUtilProperties:(JavaUtilProperties *)options;

- (NSString *)reverseLookupWithNetI2pDataHash:(NetI2pDataHash *)h;

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataDestination:(NetI2pDataDestination *)dest;

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataDestination:(NetI2pDataDestination *)d
                                       withJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilList>)reverseLookupAllWithNetI2pDataHash:(NetI2pDataHash *)h;

- (jboolean)setConfigurationWithJavaUtilProperties:(JavaUtilProperties *)p;

- (void)shutdown;

- (jint)size;

- (jint)sizeWithJavaUtilProperties:(JavaUtilProperties *)options;

- (void)start;

- (NSString *)description;

- (void)unregisterListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl;

- (void)unregisterUpdaterWithNetI2pClientNamingNamingServiceUpdater:(id<NetI2pClientNamingNamingServiceUpdater>)nsu;

- (jboolean)updateWithNSString:(NSString *)hostname
     withNetI2pDataDestination:(NetI2pDataDestination *)d
        withJavaUtilProperties:(JavaUtilProperties *)options;

#pragma mark Protected

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (NetI2pDataDestination *)lookupBase64WithNSString:(NSString *)hostname;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientNamingNamingService)

J2OBJC_FIELD_SETTER(NetI2pClientNamingNamingService, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pClientNamingNamingService, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pClientNamingNamingService, _listeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(NetI2pClientNamingNamingService, _updaters_, id<JavaUtilSet>)

inline NSString *NetI2pClientNamingNamingService_get_PROP_IMPL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetI2pClientNamingNamingService_PROP_IMPL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingNamingService, PROP_IMPL, NSString *)

FOUNDATION_EXPORT void NetI2pClientNamingNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingNamingService *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pClientNamingNamingService *NetI2pClientNamingNamingService_createInstanceWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientNamingNamingService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pClientNamingNamingService")
