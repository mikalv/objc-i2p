//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/HostTxtEntry.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "net/i2p/client/naming/HostTxtEntry.h"
#include "net/i2p/crypto/DSAEngine.h"
#include "net/i2p/crypto/SigType.h"
#include "net/i2p/data/Base64.h"
#include "net/i2p/data/DataFormatException.h"
#include "net/i2p/data/DataHelper.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/data/Signature.h"
#include "net/i2p/data/SigningPrivateKey.h"
#include "net/i2p/data/SigningPublicKey.h"
#include "net/i2p/util/OrderedProperties.h"

@interface NetI2pClientNamingHostTxtEntry () {
 @public
  NSString *name_;
  NSString *dest_;
  NetI2pUtilOrderedProperties *props_;
  jboolean isValidated_;
  jboolean isValid_;
}

+ (NetI2pUtilOrderedProperties *)parsePropsWithNSString:(NSString *)line;

- (void)writePropsWithJavaIoWriter:(JavaIoWriter *)outArg
                       withBoolean:(jboolean)omitSig
                       withBoolean:(jboolean)omitOldSig;

- (void)signItWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk
                                 withNSString:(NSString *)sigprop;

@end

J2OBJC_FIELD_SETTER(NetI2pClientNamingHostTxtEntry, name_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pClientNamingHostTxtEntry, dest_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pClientNamingHostTxtEntry, props_, NetI2pUtilOrderedProperties *)

__attribute__((unused)) static NetI2pUtilOrderedProperties *NetI2pClientNamingHostTxtEntry_parsePropsWithNSString_(NSString *line);

__attribute__((unused)) static void NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(NetI2pClientNamingHostTxtEntry *self, JavaIoWriter *outArg, jboolean omitSig, jboolean omitOldSig);

__attribute__((unused)) static void NetI2pClientNamingHostTxtEntry_signItWithNetI2pDataSigningPrivateKey_withNSString_(NetI2pClientNamingHostTxtEntry *self, NetI2pDataSigningPrivateKey *spk, NSString *sigprop);

NSString *NetI2pClientNamingHostTxtEntry_PROPS_SEPARATOR = @"#!";
NSString *NetI2pClientNamingHostTxtEntry_PROP_ACTION = @"action";
NSString *NetI2pClientNamingHostTxtEntry_PROP_DATE = @"date";
NSString *NetI2pClientNamingHostTxtEntry_PROP_DEST = @"dest";
NSString *NetI2pClientNamingHostTxtEntry_PROP_EXPIRES = @"expires";
NSString *NetI2pClientNamingHostTxtEntry_PROP_NAME = @"name";
NSString *NetI2pClientNamingHostTxtEntry_PROP_OLDDEST = @"olddest";
NSString *NetI2pClientNamingHostTxtEntry_PROP_OLDNAME = @"oldname";
NSString *NetI2pClientNamingHostTxtEntry_PROP_OLDSIG = @"oldsig";
NSString *NetI2pClientNamingHostTxtEntry_PROP_SIG = @"sig";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_ADDDEST = @"adddest";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_ADDNAME = @"addname";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_ADDSUBDOMAIN = @"addsubdomain";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_CHANGEDEST = @"changedest";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_CHANGENAME = @"changename";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_REMOVE = @"remove";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_REMOVEALL = @"removeall";
NSString *NetI2pClientNamingHostTxtEntry_ACTION_UPDATE = @"update";

@implementation NetI2pClientNamingHostTxtEntry

+ (jchar)KV_SEPARATOR {
  return NetI2pClientNamingHostTxtEntry_KV_SEPARATOR;
}

+ (NSString *)PROPS_SEPARATOR {
  return NetI2pClientNamingHostTxtEntry_PROPS_SEPARATOR;
}

+ (jchar)PROP_SEPARATOR {
  return NetI2pClientNamingHostTxtEntry_PROP_SEPARATOR;
}

+ (NSString *)PROP_ACTION {
  return NetI2pClientNamingHostTxtEntry_PROP_ACTION;
}

+ (NSString *)PROP_DATE {
  return NetI2pClientNamingHostTxtEntry_PROP_DATE;
}

+ (NSString *)PROP_DEST {
  return NetI2pClientNamingHostTxtEntry_PROP_DEST;
}

+ (NSString *)PROP_EXPIRES {
  return NetI2pClientNamingHostTxtEntry_PROP_EXPIRES;
}

+ (NSString *)PROP_NAME {
  return NetI2pClientNamingHostTxtEntry_PROP_NAME;
}

+ (NSString *)PROP_OLDDEST {
  return NetI2pClientNamingHostTxtEntry_PROP_OLDDEST;
}

+ (NSString *)PROP_OLDNAME {
  return NetI2pClientNamingHostTxtEntry_PROP_OLDNAME;
}

+ (NSString *)PROP_OLDSIG {
  return NetI2pClientNamingHostTxtEntry_PROP_OLDSIG;
}

+ (NSString *)PROP_SIG {
  return NetI2pClientNamingHostTxtEntry_PROP_SIG;
}

+ (NSString *)ACTION_ADDDEST {
  return NetI2pClientNamingHostTxtEntry_ACTION_ADDDEST;
}

+ (NSString *)ACTION_ADDNAME {
  return NetI2pClientNamingHostTxtEntry_ACTION_ADDNAME;
}

+ (NSString *)ACTION_ADDSUBDOMAIN {
  return NetI2pClientNamingHostTxtEntry_ACTION_ADDSUBDOMAIN;
}

+ (NSString *)ACTION_CHANGEDEST {
  return NetI2pClientNamingHostTxtEntry_ACTION_CHANGEDEST;
}

+ (NSString *)ACTION_CHANGENAME {
  return NetI2pClientNamingHostTxtEntry_ACTION_CHANGENAME;
}

+ (NSString *)ACTION_REMOVE {
  return NetI2pClientNamingHostTxtEntry_ACTION_REMOVE;
}

+ (NSString *)ACTION_REMOVEALL {
  return NetI2pClientNamingHostTxtEntry_ACTION_REMOVEALL;
}

+ (NSString *)ACTION_UPDATE {
  return NetI2pClientNamingHostTxtEntry_ACTION_UPDATE;
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)dest {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_(self, name, dest);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)dest
                    withNSString:(NSString *)sprops {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNSString_(self, name, dest, sprops);
  return self;
}

- (instancetype)initWithNSString:(NSString *)sprops {
  NetI2pClientNamingHostTxtEntry_initWithNSString_(self, sprops);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)dest
 withNetI2pUtilOrderedProperties:(NetI2pUtilOrderedProperties *)props {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(self, name, dest, props);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getDest {
  return dest_;
}

- (NetI2pUtilOrderedProperties *)getProps {
  return props_;
}

+ (NetI2pUtilOrderedProperties *)parsePropsWithNSString:(NSString *)line {
  return NetI2pClientNamingHostTxtEntry_parsePropsWithNSString_(line);
}

- (void)writeWithJavaIoBufferedWriter:(JavaIoBufferedWriter *)outArg {
  [self writeWithJavaIoWriter:outArg];
  [((JavaIoBufferedWriter *) nil_chk(outArg)) newLine];
}

- (void)writeWithJavaIoWriter:(JavaIoWriter *)outArg {
  if (name_ != nil && dest_ != nil) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:name_];
    [outArg writeWithInt:NetI2pClientNamingHostTxtEntry_KV_SEPARATOR];
    [outArg writeWithNSString:dest_];
  }
  [self writePropsWithJavaIoWriter:outArg];
}

- (void)writeRemoveLineWithJavaIoBufferedWriter:(JavaIoBufferedWriter *)outArg {
  [self writeRemoveWithJavaIoWriter:outArg];
  [((JavaIoBufferedWriter *) nil_chk(outArg)) newLine];
}

- (void)writeRemoveWithJavaIoWriter:(JavaIoWriter *)outArg {
  if (props_ == nil) @throw create_JavaLangIllegalStateException_init();
  if (name_ != nil && dest_ != nil) {
    [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_NAME withNSString:name_];
    [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_DEST withNSString:dest_];
  }
  [self writePropsWithJavaIoWriter:outArg];
  if (name_ != nil && dest_ != nil) {
    [props_ removeWithId:NetI2pClientNamingHostTxtEntry_PROP_NAME];
    [props_ removeWithId:NetI2pClientNamingHostTxtEntry_PROP_DEST];
  }
}

- (void)writePropsWithJavaIoWriter:(JavaIoWriter *)outArg {
  NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(self, outArg, false, false);
}

- (void)writePropsWithJavaIoWriter:(JavaIoWriter *)outArg
                       withBoolean:(jboolean)omitSig
                       withBoolean:(jboolean)omitOldSig {
  NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(self, outArg, omitSig, omitOldSig);
}

- (jboolean)hasValidSig {
  if (props_ == nil || name_ == nil || dest_ == nil) return false;
  if (!isValidated_) {
    isValidated_ = true;
    JavaIoStringWriter *buf = create_JavaIoStringWriter_initWithInt_(1024);
    NSString *sig = [props_ getPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_SIG];
    if (sig == nil) return false;
    [buf appendWithJavaLangCharSequence:name_];
    [buf appendWithChar:NetI2pClientNamingHostTxtEntry_KV_SEPARATOR];
    [buf appendWithJavaLangCharSequence:dest_];
    @try {
      NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(self, buf, true, false);
    }
    @catch (JavaIoIOException *ioe) {
      return false;
    }
    IOSByteArray *sdata = NetI2pDataBase64_decodeWithNSString_(sig);
    if (sdata == nil) return false;
    NetI2pDataDestination *d;
    @try {
      d = create_NetI2pDataDestination_initWithNSString_(dest_);
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      return false;
    }
    NetI2pDataSigningPublicKey *spk = [((NetI2pDataDestination *) nil_chk(d)) getSigningPublicKey];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(spk)) getType];
    if (type == nil) return false;
    NetI2pDataSignature *s;
    @try {
      s = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, sdata);
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      return false;
    }
    isValid_ = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) verifySignatureWithNetI2pDataSignature:s withByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description]) withNetI2pDataSigningPublicKey:spk];
  }
  return isValid_;
}

- (jboolean)hasValidInnerSig {
  if (props_ == nil || name_ == nil || dest_ == nil) return false;
  jboolean rv = false;
  {
    JavaIoStringWriter *buf = create_JavaIoStringWriter_initWithInt_(1024);
    NSString *sig = [props_ getPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_OLDSIG];
    NSString *olddest = [props_ getPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_OLDDEST];
    if (sig == nil || olddest == nil) return false;
    [buf appendWithJavaLangCharSequence:name_];
    [buf appendWithChar:NetI2pClientNamingHostTxtEntry_KV_SEPARATOR];
    [buf appendWithJavaLangCharSequence:dest_];
    @try {
      NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(self, buf, true, true);
    }
    @catch (JavaIoIOException *ioe) {
      return false;
    }
    IOSByteArray *sdata = NetI2pDataBase64_decodeWithNSString_(sig);
    if (sdata == nil) return false;
    NetI2pDataDestination *d;
    @try {
      d = create_NetI2pDataDestination_initWithNSString_(olddest);
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      return false;
    }
    NetI2pDataSigningPublicKey *spk = [((NetI2pDataDestination *) nil_chk(d)) getSigningPublicKey];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(spk)) getType];
    if (type == nil) return false;
    NetI2pDataSignature *s;
    @try {
      s = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, sdata);
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      return false;
    }
    rv = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) verifySignatureWithNetI2pDataSignature:s withByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description]) withNetI2pDataSigningPublicKey:spk];
  }
  return rv;
}

- (jboolean)hasValidRemoveSig {
  if (props_ == nil) return false;
  jboolean rv = false;
  {
    JavaIoStringWriter *buf = create_JavaIoStringWriter_initWithInt_(1024);
    NSString *sig = [props_ getPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_SIG];
    NSString *olddest = [props_ getPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_DEST];
    if (sig == nil || olddest == nil) return false;
    @try {
      NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(self, buf, true, true);
    }
    @catch (JavaIoIOException *ioe) {
      return false;
    }
    IOSByteArray *sdata = NetI2pDataBase64_decodeWithNSString_(sig);
    if (sdata == nil) return false;
    NetI2pDataDestination *d;
    @try {
      d = create_NetI2pDataDestination_initWithNSString_(olddest);
    }
    @catch (NetI2pDataDataFormatException *dfe) {
      return false;
    }
    NetI2pDataSigningPublicKey *spk = [((NetI2pDataDestination *) nil_chk(d)) getSigningPublicKey];
    NetI2pCryptoSigType *type = [((NetI2pDataSigningPublicKey *) nil_chk(spk)) getType];
    if (type == nil) return false;
    NetI2pDataSignature *s;
    @try {
      s = create_NetI2pDataSignature_initWithNetI2pCryptoSigType_withByteArray_(type, sdata);
    }
    @catch (JavaLangIllegalArgumentException *iae) {
      return false;
    }
    rv = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) verifySignatureWithNetI2pDataSignature:s withByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description]) withNetI2pDataSigningPublicKey:spk];
  }
  return rv;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(dest_)) hash]);
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (!([o isKindOfClass:[NetI2pClientNamingHostTxtEntry class]])) return false;
  NetI2pClientNamingHostTxtEntry *he = (NetI2pClientNamingHostTxtEntry *) cast_chk(o, [NetI2pClientNamingHostTxtEntry class]);
  return [((NSString *) nil_chk(dest_)) isEqual:[((NetI2pClientNamingHostTxtEntry *) nil_chk(he)) getDest]];
}

- (void)signWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk {
  NetI2pClientNamingHostTxtEntry_signItWithNetI2pDataSigningPrivateKey_withNSString_(self, spk, NetI2pClientNamingHostTxtEntry_PROP_SIG);
}

- (void)signInnerWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk {
  NetI2pClientNamingHostTxtEntry_signItWithNetI2pDataSigningPrivateKey_withNSString_(self, spk, NetI2pClientNamingHostTxtEntry_PROP_OLDSIG);
}

- (void)signRemoveWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk {
  if (props_ == nil) @throw create_JavaLangIllegalStateException_init();
  if ([props_ containsKeyWithId:NetI2pClientNamingHostTxtEntry_PROP_SIG]) @throw create_JavaLangIllegalStateException_init();
  [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_NAME withNSString:name_];
  [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_DEST withNSString:dest_];
  if (![props_ containsKeyWithId:NetI2pClientNamingHostTxtEntry_PROP_DATE]) [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_DATE withNSString:JavaLangLong_toStringWithLong_(JavaLangSystem_currentTimeMillis() / 1000)];
  JavaIoStringWriter *buf = create_JavaIoStringWriter_initWithInt_(1024);
  @try {
    [self writePropsWithJavaIoWriter:buf];
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(ioe);
  }
  [props_ removeWithId:NetI2pClientNamingHostTxtEntry_PROP_NAME];
  [props_ removeWithId:NetI2pClientNamingHostTxtEntry_PROP_DEST];
  NetI2pDataSignature *s = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) signWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description]) withNetI2pDataSigningPrivateKey:spk];
  if (s == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sig failed");
  [props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_SIG withNSString:[s toBase64]];
}

- (void)signItWithNetI2pDataSigningPrivateKey:(NetI2pDataSigningPrivateKey *)spk
                                 withNSString:(NSString *)sigprop {
  NetI2pClientNamingHostTxtEntry_signItWithNetI2pDataSigningPrivateKey_withNSString_(self, spk, sigprop);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(dest_);
  RELEASE_(props_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilOrderedProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pUtilOrderedProperties;", 0xa, 5, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:withNSString:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:withNetI2pUtilOrderedProperties:);
  methods[4].selector = @selector(getName);
  methods[5].selector = @selector(getDest);
  methods[6].selector = @selector(getProps);
  methods[7].selector = @selector(parsePropsWithNSString:);
  methods[8].selector = @selector(writeWithJavaIoBufferedWriter:);
  methods[9].selector = @selector(writeWithJavaIoWriter:);
  methods[10].selector = @selector(writeRemoveLineWithJavaIoBufferedWriter:);
  methods[11].selector = @selector(writeRemoveWithJavaIoWriter:);
  methods[12].selector = @selector(writePropsWithJavaIoWriter:);
  methods[13].selector = @selector(writePropsWithJavaIoWriter:withBoolean:withBoolean:);
  methods[14].selector = @selector(hasValidSig);
  methods[15].selector = @selector(hasValidInnerSig);
  methods[16].selector = @selector(hasValidRemoveSig);
  methods[17].selector = @selector(hash);
  methods[18].selector = @selector(isEqual:);
  methods[19].selector = @selector(signWithNetI2pDataSigningPrivateKey:);
  methods[20].selector = @selector(signInnerWithNetI2pDataSigningPrivateKey:);
  methods[21].selector = @selector(signRemoveWithNetI2pDataSigningPrivateKey:);
  methods[22].selector = @selector(signItWithNetI2pDataSigningPrivateKey:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dest_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "props_", "LNetI2pUtilOrderedProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isValidated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isValid_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KV_SEPARATOR", "C", .constantValue.asUnichar = NetI2pClientNamingHostTxtEntry_KV_SEPARATOR, 0x19, -1, -1, -1, -1 },
    { "PROPS_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "PROP_SEPARATOR", "C", .constantValue.asUnichar = NetI2pClientNamingHostTxtEntry_PROP_SEPARATOR, 0x19, -1, -1, -1, -1 },
    { "PROP_ACTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "PROP_DATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "PROP_DEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "PROP_EXPIRES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "PROP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "PROP_OLDDEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "PROP_OLDNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "PROP_OLDSIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "PROP_SIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "ACTION_ADDDEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "ACTION_ADDNAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "ACTION_ADDSUBDOMAIN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "ACTION_CHANGEDEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "ACTION_CHANGENAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "ACTION_REMOVE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "ACTION_REMOVEALL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "ACTION_UPDATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LNSString;LNSString;LNSString;", "LJavaLangIllegalArgumentException;", "LNSString;", "LNSString;LNSString;LNetI2pUtilOrderedProperties;", "parseProps", "write", "LJavaIoBufferedWriter;", "LJavaIoIOException;", "LJavaIoWriter;", "writeRemoveLine", "writeRemove", "writeProps", "LJavaIoWriter;ZZ", "hashCode", "equals", "LNSObject;", "sign", "LNetI2pDataSigningPrivateKey;", "signInner", "signRemove", "signIt", "LNetI2pDataSigningPrivateKey;LNSString;", &NetI2pClientNamingHostTxtEntry_PROPS_SEPARATOR, &NetI2pClientNamingHostTxtEntry_PROP_ACTION, &NetI2pClientNamingHostTxtEntry_PROP_DATE, &NetI2pClientNamingHostTxtEntry_PROP_DEST, &NetI2pClientNamingHostTxtEntry_PROP_EXPIRES, &NetI2pClientNamingHostTxtEntry_PROP_NAME, &NetI2pClientNamingHostTxtEntry_PROP_OLDDEST, &NetI2pClientNamingHostTxtEntry_PROP_OLDNAME, &NetI2pClientNamingHostTxtEntry_PROP_OLDSIG, &NetI2pClientNamingHostTxtEntry_PROP_SIG, &NetI2pClientNamingHostTxtEntry_ACTION_ADDDEST, &NetI2pClientNamingHostTxtEntry_ACTION_ADDNAME, &NetI2pClientNamingHostTxtEntry_ACTION_ADDSUBDOMAIN, &NetI2pClientNamingHostTxtEntry_ACTION_CHANGEDEST, &NetI2pClientNamingHostTxtEntry_ACTION_CHANGENAME, &NetI2pClientNamingHostTxtEntry_ACTION_REMOVE, &NetI2pClientNamingHostTxtEntry_ACTION_REMOVEALL, &NetI2pClientNamingHostTxtEntry_ACTION_UPDATE };
  static const J2ObjcClassInfo _NetI2pClientNamingHostTxtEntry = { "HostTxtEntry", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x1, 23, 25, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingHostTxtEntry;
}

@end

void NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_(NetI2pClientNamingHostTxtEntry *self, NSString *name, NSString *dest) {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(self, name, dest, nil);
}

NetI2pClientNamingHostTxtEntry *new_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_(NSString *name, NSString *dest) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_, name, dest)
}

NetI2pClientNamingHostTxtEntry *create_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_(NSString *name, NSString *dest) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_, name, dest)
}

void NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNSString_(NetI2pClientNamingHostTxtEntry *self, NSString *name, NSString *dest, NSString *sprops) {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(self, name, dest, NetI2pClientNamingHostTxtEntry_parsePropsWithNSString_(sprops));
}

NetI2pClientNamingHostTxtEntry *new_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNSString_(NSString *name, NSString *dest, NSString *sprops) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_withNSString_, name, dest, sprops)
}

NetI2pClientNamingHostTxtEntry *create_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNSString_(NSString *name, NSString *dest, NSString *sprops) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_withNSString_, name, dest, sprops)
}

void NetI2pClientNamingHostTxtEntry_initWithNSString_(NetI2pClientNamingHostTxtEntry *self, NSString *sprops) {
  NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(self, nil, nil, NetI2pClientNamingHostTxtEntry_parsePropsWithNSString_(sprops));
}

NetI2pClientNamingHostTxtEntry *new_NetI2pClientNamingHostTxtEntry_initWithNSString_(NSString *sprops) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_, sprops)
}

NetI2pClientNamingHostTxtEntry *create_NetI2pClientNamingHostTxtEntry_initWithNSString_(NSString *sprops) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_, sprops)
}

void NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(NetI2pClientNamingHostTxtEntry *self, NSString *name, NSString *dest, NetI2pUtilOrderedProperties *props) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->dest_, dest);
  JreStrongAssign(&self->props_, props);
}

NetI2pClientNamingHostTxtEntry *new_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(NSString *name, NSString *dest, NetI2pUtilOrderedProperties *props) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_withNetI2pUtilOrderedProperties_, name, dest, props)
}

NetI2pClientNamingHostTxtEntry *create_NetI2pClientNamingHostTxtEntry_initWithNSString_withNSString_withNetI2pUtilOrderedProperties_(NSString *name, NSString *dest, NetI2pUtilOrderedProperties *props) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingHostTxtEntry, initWithNSString_withNSString_withNetI2pUtilOrderedProperties_, name, dest, props)
}

NetI2pUtilOrderedProperties *NetI2pClientNamingHostTxtEntry_parsePropsWithNSString_(NSString *line) {
  NetI2pClientNamingHostTxtEntry_initialize();
  line = [((NSString *) nil_chk(line)) java_trim];
  NetI2pUtilOrderedProperties *rv = create_NetI2pUtilOrderedProperties_init();
  IOSObjectArray *entries = NetI2pDataDataHelper_splitWithNSString_withNSString_(line, @"#");
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(entries))->size_; i++) {
    NSString *kv = IOSObjectArray_Get(entries, i);
    jint eq = [((NSString *) nil_chk(kv)) java_indexOf:'='];
    if (eq <= 0 || eq == [kv java_length] - 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"No value: \"", kv, '"'));
    NSString *k = [kv java_substring:0 endIndex:eq];
    NSString *v = [kv java_substring:eq + 1];
    id old = [rv setPropertyWithNSString:k withNSString:v];
    if (old != nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Dup key: ", k));
  }
  return rv;
}

void NetI2pClientNamingHostTxtEntry_writePropsWithJavaIoWriter_withBoolean_withBoolean_(NetI2pClientNamingHostTxtEntry *self, JavaIoWriter *outArg, jboolean omitSig, jboolean omitOldSig) {
  if (self->props_ == nil) return;
  jboolean started = false;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([self->props_ entrySet])) {
    NSString *k = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    if (omitSig && [((NSString *) nil_chk(k)) isEqual:NetI2pClientNamingHostTxtEntry_PROP_SIG]) continue;
    if (omitOldSig && [((NSString *) nil_chk(k)) isEqual:NetI2pClientNamingHostTxtEntry_PROP_OLDSIG]) continue;
    if (started) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:NetI2pClientNamingHostTxtEntry_PROP_SEPARATOR];
    }
    else {
      started = true;
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:NetI2pClientNamingHostTxtEntry_PROPS_SEPARATOR];
    }
    NSString *v = (NSString *) cast_chk([e getValue], [NSString class]);
    [outArg writeWithNSString:k];
    [outArg writeWithInt:NetI2pClientNamingHostTxtEntry_KV_SEPARATOR];
    [outArg writeWithNSString:v];
  }
}

void NetI2pClientNamingHostTxtEntry_signItWithNetI2pDataSigningPrivateKey_withNSString_(NetI2pClientNamingHostTxtEntry *self, NetI2pDataSigningPrivateKey *spk, NSString *sigprop) {
  if (self->props_ == nil) @throw create_JavaLangIllegalStateException_init();
  if ([self->props_ containsKeyWithId:sigprop]) @throw create_JavaLangIllegalStateException_init();
  if (![self->props_ containsKeyWithId:NetI2pClientNamingHostTxtEntry_PROP_DATE]) [self->props_ setPropertyWithNSString:NetI2pClientNamingHostTxtEntry_PROP_DATE withNSString:JavaLangLong_toStringWithLong_(JavaLangSystem_currentTimeMillis() / 1000)];
  JavaIoStringWriter *buf = create_JavaIoStringWriter_initWithInt_(1024);
  [buf appendWithJavaLangCharSequence:self->name_];
  [buf appendWithChar:NetI2pClientNamingHostTxtEntry_KV_SEPARATOR];
  [buf appendWithJavaLangCharSequence:self->dest_];
  @try {
    [self writePropsWithJavaIoWriter:buf];
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangIllegalStateException_initWithJavaLangThrowable_(ioe);
  }
  NetI2pDataSignature *s = [((NetI2pCryptoDSAEngine *) nil_chk(NetI2pCryptoDSAEngine_getInstance())) signWithByteArray:NetI2pDataDataHelper_getUTF8WithNSString_([buf description]) withNetI2pDataSigningPrivateKey:spk];
  if (s == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sig failed");
  [self->props_ setPropertyWithNSString:sigprop withNSString:[s toBase64]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingHostTxtEntry)
