//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/EepGetNamingService.java
//

#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/StringTokenizer.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/naming/DummyNamingService.h"
#include "net/i2p/client/naming/EepGetNamingService.h"
#include "net/i2p/data/Destination.h"
#include "net/i2p/util/EepGet.h"
#include "net/i2p/util/Log.h"

@interface NetI2pClientNamingEepGetNamingService ()

- (id<JavaUtilList>)getURLs;

- (NSString *)fetchAddrWithNSString:(NSString *)url
                       withNSString:(NSString *)hostname;

@end

inline NSString *NetI2pClientNamingEepGetNamingService_get_PROP_EEPGET_LIST(void);
static NSString *NetI2pClientNamingEepGetNamingService_PROP_EEPGET_LIST = @"i2p.naming.eepget.list";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingEepGetNamingService, PROP_EEPGET_LIST, NSString *)

inline NSString *NetI2pClientNamingEepGetNamingService_get_DEFAULT_EEPGET_LIST(void);
static NSString *NetI2pClientNamingEepGetNamingService_DEFAULT_EEPGET_LIST = @"http://i2host.i2p/cgi-bin/i2hostquery?";
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetI2pClientNamingEepGetNamingService, DEFAULT_EEPGET_LIST, NSString *)

inline jint NetI2pClientNamingEepGetNamingService_get_MAX_RESPONSE(void);
#define NetI2pClientNamingEepGetNamingService_MAX_RESPONSE 594
J2OBJC_STATIC_FIELD_CONSTANT(NetI2pClientNamingEepGetNamingService, MAX_RESPONSE, jint)

__attribute__((unused)) static id<JavaUtilList> NetI2pClientNamingEepGetNamingService_getURLs(NetI2pClientNamingEepGetNamingService *self);

__attribute__((unused)) static NSString *NetI2pClientNamingEepGetNamingService_fetchAddrWithNSString_withNSString_(NetI2pClientNamingEepGetNamingService *self, NSString *url, NSString *hostname);

@implementation NetI2pClientNamingEepGetNamingService

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientNamingEepGetNamingService_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (id<JavaUtilList>)getURLs {
  return NetI2pClientNamingEepGetNamingService_getURLs(self);
}

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions {
  NetI2pDataDestination *d = [super lookupWithNSString:hostname withJavaUtilProperties:nil withJavaUtilProperties:nil];
  if (d != nil) return d;
  hostname = [((NSString *) nil_chk(hostname)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(hostname)) java_length] == NetI2pClientNamingDummyNamingService_BASE32_HASH_LENGTH + 8 && [hostname java_hasSuffix:@".b32.i2p"]) return nil;
  id<JavaUtilList> URLs = NetI2pClientNamingEepGetNamingService_getURLs(self);
  if ([((id<JavaUtilList>) nil_chk(URLs)) isEmpty]) return nil;
  for (jint i = 0; i < [URLs size]; i++) {
    NSString *url = [URLs getWithInt:i];
    if ([((NSString *) nil_chk(url)) java_hasPrefix:JreStrcat("$$C", @"http://", hostname, '/')]) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$", @"Lookup loop: ", hostname)];
      return nil;
    }
  }
  for (jint i = 0; i < [URLs size]; i++) {
    NSString *url = [URLs getWithInt:i];
    NSString *key = NetI2pClientNamingEepGetNamingService_fetchAddrWithNSString_withNSString_(self, url, hostname);
    if (key != nil) {
      [((NetI2pUtilLog *) nil_chk(_log_)) errorWithNSString:JreStrcat("$$$", @"Success: ", url, hostname)];
      d = [self lookupBase64WithNSString:key];
      NetI2pClientNamingDummyNamingService_putCacheWithNSString_withNetI2pDataDestination_(hostname, d);
      return d;
    }
  }
  return nil;
}

- (NSString *)fetchAddrWithNSString:(NSString *)url
                       withNSString:(NSString *)hostname {
  return NetI2pClientNamingEepGetNamingService_fetchAddrWithNSString_withNSString_(self, url, hostname);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getURLs);
  methods[2].selector = @selector(lookupWithNSString:withJavaUtilProperties:withJavaUtilProperties:);
  methods[3].selector = @selector(fetchAddrWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_EEPGET_LIST", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "DEFAULT_EEPGET_LIST", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "MAX_RESPONSE", "I", .constantValue.asInt = NetI2pClientNamingEepGetNamingService_MAX_RESPONSE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "()Ljava/util/List<Ljava/lang/String;>;", "lookup", "LNSString;LJavaUtilProperties;LJavaUtilProperties;", "fetchAddr", "LNSString;LNSString;", &NetI2pClientNamingEepGetNamingService_PROP_EEPGET_LIST, &NetI2pClientNamingEepGetNamingService_DEFAULT_EEPGET_LIST };
  static const J2ObjcClassInfo _NetI2pClientNamingEepGetNamingService = { "EepGetNamingService", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingEepGetNamingService;
}

@end

void NetI2pClientNamingEepGetNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingEepGetNamingService *self, NetI2pI2PAppContext *context) {
  NetI2pClientNamingDummyNamingService_initWithNetI2pI2PAppContext_(self, context);
}

NetI2pClientNamingEepGetNamingService *new_NetI2pClientNamingEepGetNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingEepGetNamingService, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientNamingEepGetNamingService *create_NetI2pClientNamingEepGetNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingEepGetNamingService, initWithNetI2pI2PAppContext_, context)
}

id<JavaUtilList> NetI2pClientNamingEepGetNamingService_getURLs(NetI2pClientNamingEepGetNamingService *self) {
  NSString *list = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pClientNamingEepGetNamingService_PROP_EEPGET_LIST withNSString:NetI2pClientNamingEepGetNamingService_DEFAULT_EEPGET_LIST];
  JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(list, @",");
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([tok countTokens]);
  while ([tok hasMoreTokens]) [rv addWithId:[tok nextToken]];
  return rv;
}

NSString *NetI2pClientNamingEepGetNamingService_fetchAddrWithNSString_withNSString_(NetI2pClientNamingEepGetNamingService *self, NSString *url, NSString *hostname) {
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_(NetI2pClientNamingEepGetNamingService_MAX_RESPONSE);
  @try {
    NetI2pUtilEepGet *get = create_NetI2pUtilEepGet_initWithNetI2pI2PAppContext_withBoolean_withNSString_withInt_withInt_withLong_withLong_withNSString_withJavaIoOutputStream_withNSString_withBoolean_withNSString_withNSString_(self->_context_, true, @"localhost", 4444, 0, NetI2pClientNamingDummyNamingService_DEST_SIZE, NetI2pClientNamingEepGetNamingService_MAX_RESPONSE, nil, baos, JreStrcat("$$", url, hostname), false, nil, nil);
    if ([get fetchWithLong:10 * 1000l withLong:15 * 1000l withLong:-1l]) {
      if ([baos size] < NetI2pClientNamingDummyNamingService_DEST_SIZE) {
        [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$", @"Short response: ", url, hostname)];
        return nil;
      }
      NSString *key = [baos description];
      if ([((NSString *) nil_chk(key)) java_hasPrefix:JreStrcat("$C", hostname, '=')]) key = [key java_substring:[((NSString *) nil_chk(hostname)) java_length] + 1];
      key = [((NSString *) nil_chk(key)) java_substring:0 endIndex:NetI2pClientNamingDummyNamingService_DEST_SIZE];
      if (![((NSString *) nil_chk(key)) java_hasSuffix:@"AA"]) {
        [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$", @"Invalid key: ", url, hostname)];
        return nil;
      }
      if ([((NSString *) nil_chk([key java_replaceAll:@"[a-zA-Z0-9~-]" withReplacement:@""])) java_length] != 0) {
        [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$", @"Invalid chars: ", url, hostname)];
        return nil;
      }
      return key;
    }
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$", @"Fetch failed from: ", url, hostname)];
    return nil;
  }
  @catch (JavaLangThrowable *t) {
    [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:@"Error fetching the addr" withJavaLangThrowable:t];
  }
  [((NetI2pUtilLog *) nil_chk(self->_log_)) errorWithNSString:JreStrcat("$$$", @"Caught from: ", url, hostname)];
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingEepGetNamingService)
