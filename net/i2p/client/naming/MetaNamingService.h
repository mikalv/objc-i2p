//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/MetaNamingService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetI2pClientNamingMetaNamingService")
#ifdef RESTRICT_NetI2pClientNamingMetaNamingService
#define INCLUDE_ALL_NetI2pClientNamingMetaNamingService 0
#else
#define INCLUDE_ALL_NetI2pClientNamingMetaNamingService 1
#endif
#undef RESTRICT_NetI2pClientNamingMetaNamingService

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetI2pClientNamingMetaNamingService_) && (INCLUDE_ALL_NetI2pClientNamingMetaNamingService || defined(INCLUDE_NetI2pClientNamingMetaNamingService))
#define NetI2pClientNamingMetaNamingService_

#define RESTRICT_NetI2pClientNamingDummyNamingService 1
#define INCLUDE_NetI2pClientNamingDummyNamingService 1
#include "net/i2p/client/naming/DummyNamingService.h"

@class JavaIoWriter;
@class JavaUtilProperties;
@class NetI2pClientNamingNamingService;
@class NetI2pDataDestination;
@class NetI2pI2PAppContext;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol NetI2pClientNamingNamingServiceListener;

@interface NetI2pClientNamingMetaNamingService : NetI2pClientNamingDummyNamingService {
 @public
  id<JavaUtilList> _services_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context;

- (instancetype __nonnull)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context
                                     withJavaUtilList:(id<JavaUtilList>)services;

- (jboolean)addNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns
                                                    withBoolean:(jboolean)head;

- (void)export__WithJavaIoWriter:(JavaIoWriter *)outArg
          withJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilMap>)getBase64EntriesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilMap>)getEntriesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilSet>)getNamesWithJavaUtilProperties:(JavaUtilProperties *)options;

- (id<JavaUtilList>)getNamingServices;

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions;

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d
     withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d
             withJavaUtilProperties:(JavaUtilProperties *)options;

- (void)registerListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl;

- (jboolean)removeWithNSString:(NSString *)hostname
        withJavaUtilProperties:(JavaUtilProperties *)options;

- (jboolean)removeNamingServiceWithNetI2pClientNamingNamingService:(NetI2pClientNamingNamingService *)ns;

- (NSString *)reverseLookupWithNetI2pDataDestination:(NetI2pDataDestination *)dest
                              withJavaUtilProperties:(JavaUtilProperties *)options;

- (void)shutdown;

- (jint)sizeWithJavaUtilProperties:(JavaUtilProperties *)options;

- (void)unregisterListenerWithNetI2pClientNamingNamingServiceListener:(id<NetI2pClientNamingNamingServiceListener>)nsl;

@end

J2OBJC_EMPTY_STATIC_INIT(NetI2pClientNamingMetaNamingService)

J2OBJC_FIELD_SETTER(NetI2pClientNamingMetaNamingService, _services_, id<JavaUtilList>)

FOUNDATION_EXPORT void NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingMetaNamingService *self, NetI2pI2PAppContext *context);

FOUNDATION_EXPORT NetI2pClientNamingMetaNamingService *new_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pClientNamingMetaNamingService *create_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context);

FOUNDATION_EXPORT void NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pClientNamingMetaNamingService *self, NetI2pI2PAppContext *context, id<JavaUtilList> services);

FOUNDATION_EXPORT NetI2pClientNamingMetaNamingService *new_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *context, id<JavaUtilList> services) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetI2pClientNamingMetaNamingService *create_NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(NetI2pI2PAppContext *context, id<JavaUtilList> services);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientNamingMetaNamingService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetI2pClientNamingMetaNamingService")
