//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/naming/HostsTxtNamingService.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/naming/DummyNamingService.h"
#include "net/i2p/client/naming/HostsTxtNamingService.h"
#include "net/i2p/client/naming/MetaNamingService.h"
#include "net/i2p/client/naming/NamingService.h"
#include "net/i2p/client/naming/SingleFileNamingService.h"
#include "net/i2p/data/Destination.h"

@interface NetI2pClientNamingHostsTxtNamingService ()

- (id<JavaUtilList>)getFilenames;

@end

__attribute__((unused)) static id<JavaUtilList> NetI2pClientNamingHostsTxtNamingService_getFilenames(NetI2pClientNamingHostsTxtNamingService *self);

NSString *NetI2pClientNamingHostsTxtNamingService_PROP_HOSTS_FILE = @"i2p.hostsfilelist";
NSString *NetI2pClientNamingHostsTxtNamingService_DEFAULT_HOSTS_FILE = @"privatehosts.txt,userhosts.txt,hosts.txt";

@implementation NetI2pClientNamingHostsTxtNamingService

+ (NSString *)PROP_HOSTS_FILE {
  return NetI2pClientNamingHostsTxtNamingService_PROP_HOSTS_FILE;
}

+ (NSString *)DEFAULT_HOSTS_FILE {
  return NetI2pClientNamingHostsTxtNamingService_DEFAULT_HOSTS_FILE;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)context {
  NetI2pClientNamingHostsTxtNamingService_initWithNetI2pI2PAppContext_(self, context);
  return self;
}

- (id<JavaUtilList>)getFilenames {
  return NetI2pClientNamingHostsTxtNamingService_getFilenames(self);
}

- (NetI2pDataDestination *)lookupWithNSString:(NSString *)hostname
                       withJavaUtilProperties:(JavaUtilProperties *)lookupOptions
                       withJavaUtilProperties:(JavaUtilProperties *)storedOptions {
  if ([((NSString *) nil_chk(hostname)) java_length] >= NetI2pClientNamingDummyNamingService_DEST_SIZE) return [self lookupBase64WithNSString:hostname];
  return [super lookupWithNSString:[hostname java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)] withJavaUtilProperties:lookupOptions withJavaUtilProperties:storedOptions];
}

- (jboolean)putWithNSString:(NSString *)hostname
  withNetI2pDataDestination:(NetI2pDataDestination *)d
     withJavaUtilProperties:(JavaUtilProperties *)options {
  return [super putWithNSString:[((NSString *) nil_chk(hostname)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)] withNetI2pDataDestination:d withJavaUtilProperties:options];
}

- (jboolean)putIfAbsentWithNSString:(NSString *)hostname
          withNetI2pDataDestination:(NetI2pDataDestination *)d
             withJavaUtilProperties:(JavaUtilProperties *)options {
  return [super putIfAbsentWithNSString:[((NSString *) nil_chk(hostname)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)] withNetI2pDataDestination:d withJavaUtilProperties:options];
}

- (jboolean)removeWithNSString:(NSString *)hostname
        withJavaUtilProperties:(JavaUtilProperties *)options {
  return [super removeWithNSString:[((NSString *) nil_chk(hostname)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)] withJavaUtilProperties:options];
}

- (id<JavaUtilSet>)getNamesWithJavaUtilProperties:(JavaUtilProperties *)options {
  NSString *file = nil;
  if (options != nil) file = [options getPropertyWithNSString:@"file"];
  if (file == nil) return [super getNamesWithJavaUtilProperties:options];
  for (NetI2pClientNamingNamingService * __strong ns in nil_chk(_services_)) {
    NSString *name = [((NetI2pClientNamingNamingService *) nil_chk(ns)) getName];
    if ([((NSString *) nil_chk(name)) isEqual:file] || [name java_hasSuffix:JreStrcat("C$", '/', file)] || [name java_hasSuffix:JreStrcat("C$", '\\', file)]) return [ns getNamesWithJavaUtilProperties:options];
  }
  return create_JavaUtilHashSet_initWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNetI2pDataDestination;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:);
  methods[1].selector = @selector(getFilenames);
  methods[2].selector = @selector(lookupWithNSString:withJavaUtilProperties:withJavaUtilProperties:);
  methods[3].selector = @selector(putWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[4].selector = @selector(putIfAbsentWithNSString:withNetI2pDataDestination:withJavaUtilProperties:);
  methods[5].selector = @selector(removeWithNSString:withJavaUtilProperties:);
  methods[6].selector = @selector(getNamesWithJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROP_HOSTS_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "DEFAULT_HOSTS_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;", "()Ljava/util/List<Ljava/lang/String;>;", "lookup", "LNSString;LJavaUtilProperties;LJavaUtilProperties;", "put", "LNSString;LNetI2pDataDestination;LJavaUtilProperties;", "putIfAbsent", "remove", "LNSString;LJavaUtilProperties;", "getNames", "LJavaUtilProperties;", "(Ljava/util/Properties;)Ljava/util/Set<Ljava/lang/String;>;", &NetI2pClientNamingHostsTxtNamingService_PROP_HOSTS_FILE, &NetI2pClientNamingHostsTxtNamingService_DEFAULT_HOSTS_FILE };
  static const J2ObjcClassInfo _NetI2pClientNamingHostsTxtNamingService = { "HostsTxtNamingService", "net.i2p.client.naming", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_NetI2pClientNamingHostsTxtNamingService;
}

@end

void NetI2pClientNamingHostsTxtNamingService_initWithNetI2pI2PAppContext_(NetI2pClientNamingHostsTxtNamingService *self, NetI2pI2PAppContext *context) {
  NetI2pClientNamingMetaNamingService_initWithNetI2pI2PAppContext_withJavaUtilList_(self, context, nil);
  for (NSString * __strong name in nil_chk(NetI2pClientNamingHostsTxtNamingService_getFilenames(self))) {
    [self addNamingServiceWithNetI2pClientNamingNamingService:create_NetI2pClientNamingSingleFileNamingService_initWithNetI2pI2PAppContext_withNSString_(context, name) withBoolean:false];
  }
}

NetI2pClientNamingHostsTxtNamingService *new_NetI2pClientNamingHostsTxtNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_NEW_IMPL(NetI2pClientNamingHostsTxtNamingService, initWithNetI2pI2PAppContext_, context)
}

NetI2pClientNamingHostsTxtNamingService *create_NetI2pClientNamingHostsTxtNamingService_initWithNetI2pI2PAppContext_(NetI2pI2PAppContext *context) {
  J2OBJC_CREATE_IMPL(NetI2pClientNamingHostsTxtNamingService, initWithNetI2pI2PAppContext_, context)
}

id<JavaUtilList> NetI2pClientNamingHostsTxtNamingService_getFilenames(NetI2pClientNamingHostsTxtNamingService *self) {
  NSString *list = [((NetI2pI2PAppContext *) nil_chk(self->_context_)) getPropertyWithNSString:NetI2pClientNamingHostsTxtNamingService_PROP_HOSTS_FILE withNSString:NetI2pClientNamingHostsTxtNamingService_DEFAULT_HOSTS_FILE];
  JavaUtilStringTokenizer *tok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(list, @",");
  id<JavaUtilList> rv = create_JavaUtilArrayList_initWithInt_([tok countTokens]);
  while ([tok hasMoreTokens]) [rv addWithId:[tok nextToken]];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientNamingHostsTxtNamingService)
