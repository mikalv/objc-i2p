//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: core/java/src/net/i2p/client/impl/MessageState.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "net/i2p/I2PAppContext.h"
#include "net/i2p/client/I2PSession.h"
#include "net/i2p/client/SendMessageStatusListener.h"
#include "net/i2p/client/impl/MessageState.h"
#include "net/i2p/data/i2cp/MessageId.h"
#include "net/i2p/data/i2cp/MessageStatusMessage.h"
#include "net/i2p/util/Clock.h"
#include "net/i2p/util/Log.h"
#include "net/i2p/util/LogManager.h"

@class NetI2pClientImplMessageState_State;

@interface NetI2pClientImplMessageState () {
 @public
  NetI2pI2PAppContext *_context_;
  NetI2pUtilLog *_log_;
  jlong _nonce_;
  NSString *_prefix_;
  NetI2pDataI2cpMessageId *_id_;
  jlong _created_;
  jlong _expires_;
  id<NetI2pClientSendMessageStatusListener> _listener_;
  id<NetI2pClientI2PSession> _session_;
  NetI2pClientImplMessageState_State *_state_;
}

- (void)locked_updateWithInt:(jint)status;

@end

J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _context_, NetI2pI2PAppContext *)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _log_, NetI2pUtilLog *)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _prefix_, NSString *)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _id_, NetI2pDataI2cpMessageId *)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _listener_, id<NetI2pClientSendMessageStatusListener>)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _session_, id<NetI2pClientI2PSession>)
J2OBJC_FIELD_SETTER(NetI2pClientImplMessageState, _state_, NetI2pClientImplMessageState_State *)

__attribute__((unused)) static void NetI2pClientImplMessageState_locked_updateWithInt_(NetI2pClientImplMessageState *self, jint status);

typedef NS_ENUM(NSUInteger, NetI2pClientImplMessageState_State_Enum) {
  NetI2pClientImplMessageState_State_Enum_INIT = 0,
  NetI2pClientImplMessageState_State_Enum_ACCEPTED = 1,
  NetI2pClientImplMessageState_State_Enum_PROBABLE_FAIL = 2,
  NetI2pClientImplMessageState_State_Enum_FAIL = 3,
  NetI2pClientImplMessageState_State_Enum_SUCCESS = 4,
};

@interface NetI2pClientImplMessageState_State : JavaLangEnum

@property (readonly, class, nonnull) NetI2pClientImplMessageState_State *INIT NS_SWIFT_NAME(INIT);
@property (readonly, class, nonnull) NetI2pClientImplMessageState_State *ACCEPTED NS_SWIFT_NAME(ACCEPTED);
@property (readonly, class, nonnull) NetI2pClientImplMessageState_State *PROBABLE_FAIL NS_SWIFT_NAME(PROBABLE_FAIL);
@property (readonly, class, nonnull) NetI2pClientImplMessageState_State *FAIL NS_SWIFT_NAME(FAIL);
@property (readonly, class, nonnull) NetI2pClientImplMessageState_State *SUCCESS NS_SWIFT_NAME(SUCCESS);
+ (IOSObjectArray *)values;

+ (NetI2pClientImplMessageState_State *)valueOfWithNSString:(NSString *)name;

- (NetI2pClientImplMessageState_State_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(NetI2pClientImplMessageState_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_values_[];

inline NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_get_INIT(void);
J2OBJC_ENUM_CONSTANT(NetI2pClientImplMessageState_State, INIT)

inline NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_get_ACCEPTED(void);
J2OBJC_ENUM_CONSTANT(NetI2pClientImplMessageState_State, ACCEPTED)

inline NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_get_PROBABLE_FAIL(void);
J2OBJC_ENUM_CONSTANT(NetI2pClientImplMessageState_State, PROBABLE_FAIL)

inline NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_get_FAIL(void);
J2OBJC_ENUM_CONSTANT(NetI2pClientImplMessageState_State, FAIL)

inline NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_get_SUCCESS(void);
J2OBJC_ENUM_CONSTANT(NetI2pClientImplMessageState_State, SUCCESS)

__attribute__((unused)) static void NetI2pClientImplMessageState_State_initWithNSString_withInt_(NetI2pClientImplMessageState_State *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *NetI2pClientImplMessageState_State_values(void);

__attribute__((unused)) static NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(NetI2pClientImplMessageState_State)

@implementation NetI2pClientImplMessageState

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                   withLong:(jlong)nonce
                               withNSString:(NSString *)prefix {
  NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNSString_(self, ctx, nonce, prefix);
  return self;
}

- (instancetype)initWithNetI2pI2PAppContext:(NetI2pI2PAppContext *)ctx
                                   withLong:(jlong)nonce
                 withNetI2pClientI2PSession:(id<NetI2pClientI2PSession>)session
                                   withLong:(jlong)expires
  withNetI2pClientSendMessageStatusListener:(id<NetI2pClientSendMessageStatusListener>)listener {
  NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_(self, ctx, nonce, session, expires, listener);
  return self;
}

- (void)receiveWithInt:(jint)status {
  NetI2pClientImplMessageState_State *oldState;
  NetI2pClientImplMessageState_State *newState;
  @synchronized(self) {
    oldState = JreRetainedLocalValue(_state_);
    NetI2pClientImplMessageState_locked_updateWithInt_(self, status);
    newState = JreRetainedLocalValue(_state_);
    [self java_notifyAll];
  }
  if (_listener_ != nil) {
    if (oldState != newState && _expires_ > [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now]) [_listener_ messageStatusWithNetI2pClientI2PSession:_session_ withLong:_nonce_ withInt:status];
  }
}

- (void)setMessageIdWithNetI2pDataI2cpMessageId:(NetI2pDataI2cpMessageId *)id_ {
  JreStrongAssign(&_id_, id_);
}

- (NetI2pDataI2cpMessageId *)getMessageId {
  return _id_;
}

- (jlong)getElapsed {
  return [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now] - _created_;
}

- (jlong)getExpires {
  return _expires_;
}

- (void)waitForAcceptWithLong:(jlong)expiration {
  while (true) {
    jlong timeToWait = expiration - [((NetI2pUtilClock *) nil_chk([((NetI2pI2PAppContext *) nil_chk(_context_)) clock])) now];
    if (timeToWait <= 0) {
      if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_WARN]) [_log_ warnWithNSString:JreStrcat("$$", _prefix_, @"Expired waiting for the status")];
      return;
    }
    @synchronized(self) {
      if (_state_ != JreLoadEnum(NetI2pClientImplMessageState_State, INIT)) {
        if ([((NetI2pUtilLog *) nil_chk(_log_)) shouldLogWithInt:NetI2pUtilLog_DEBUG]) [_log_ debugWithNSString:JreStrcat("$$", _prefix_, @"Received a confirm (one way or the other)")];
        return;
      }
      if (timeToWait > 5000) timeToWait = 5000;
      [self java_waitWithLong:timeToWait];
    }
  }
}

- (void)locked_updateWithInt:(jint)status {
  NetI2pClientImplMessageState_locked_updateWithInt_(self, status);
}

- (jboolean)wasAccepted {
  @synchronized(self) {
    return _state_ != JreLoadEnum(NetI2pClientImplMessageState_State, INIT) && _state_ != JreLoadEnum(NetI2pClientImplMessageState_State, FAIL);
  }
}

- (jboolean)wasSuccessful {
  @synchronized(self) {
    return _state_ == JreLoadEnum(NetI2pClientImplMessageState_State, SUCCESS);
  }
}

- (void)cancel {
  [self receiveWithInt:NetI2pClientSendMessageStatusListener_STATUS_CANCELLED];
}

- (void)dealloc {
  RELEASE_(_context_);
  RELEASE_(_log_);
  RELEASE_(_prefix_);
  RELEASE_(_id_);
  RELEASE_(_listener_);
  RELEASE_(_session_);
  RELEASE_(_state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNetI2pDataI2cpMessageId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNetI2pI2PAppContext:withLong:withNSString:);
  methods[1].selector = @selector(initWithNetI2pI2PAppContext:withLong:withNetI2pClientI2PSession:withLong:withNetI2pClientSendMessageStatusListener:);
  methods[2].selector = @selector(receiveWithInt:);
  methods[3].selector = @selector(setMessageIdWithNetI2pDataI2cpMessageId:);
  methods[4].selector = @selector(getMessageId);
  methods[5].selector = @selector(getElapsed);
  methods[6].selector = @selector(getExpires);
  methods[7].selector = @selector(waitForAcceptWithLong:);
  methods[8].selector = @selector(locked_updateWithInt:);
  methods[9].selector = @selector(wasAccepted);
  methods[10].selector = @selector(wasSuccessful);
  methods[11].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_context_", "LNetI2pI2PAppContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_log_", "LNetI2pUtilLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_nonce_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_prefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_id_", "LNetI2pDataI2cpMessageId;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_created_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_expires_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_listener_", "LNetI2pClientSendMessageStatusListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_session_", "LNetI2pClientI2PSession;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_state_", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetI2pI2PAppContext;JLNSString;", "LNetI2pI2PAppContext;JLNetI2pClientI2PSession;JLNetI2pClientSendMessageStatusListener;", "receive", "I", "setMessageId", "LNetI2pDataI2cpMessageId;", "waitForAccept", "J", "LJavaLangInterruptedException;", "locked_update", "LNetI2pClientImplMessageState_State;" };
  static const J2ObjcClassInfo _NetI2pClientImplMessageState = { "MessageState", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x0, 12, 10, -1, 10, -1, -1, -1 };
  return &_NetI2pClientImplMessageState;
}

@end

void NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNSString_(NetI2pClientImplMessageState *self, NetI2pI2PAppContext *ctx, jlong nonce, NSString *prefix) {
  NSObject_init(self);
  JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, INIT));
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pClientImplMessageState_class_()]);
  self->_nonce_ = nonce;
  JreStrongAssign(&self->_prefix_, JreStrcat("$CJ$", prefix, '[', self->_nonce_, @"]: "));
  self->_created_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  self->_expires_ = self->_created_ + 60 * 1000LL;
  JreStrongAssign(&self->_listener_, nil);
  JreStrongAssign(&self->_session_, nil);
}

NetI2pClientImplMessageState *new_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNSString_(NetI2pI2PAppContext *ctx, jlong nonce, NSString *prefix) {
  J2OBJC_NEW_IMPL(NetI2pClientImplMessageState, initWithNetI2pI2PAppContext_withLong_withNSString_, ctx, nonce, prefix)
}

NetI2pClientImplMessageState *create_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNSString_(NetI2pI2PAppContext *ctx, jlong nonce, NSString *prefix) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplMessageState, initWithNetI2pI2PAppContext_withLong_withNSString_, ctx, nonce, prefix)
}

void NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_(NetI2pClientImplMessageState *self, NetI2pI2PAppContext *ctx, jlong nonce, id<NetI2pClientI2PSession> session, jlong expires, id<NetI2pClientSendMessageStatusListener> listener) {
  NSObject_init(self);
  JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, INIT));
  JreStrongAssign(&self->_context_, ctx);
  JreStrongAssign(&self->_log_, [((NetI2pUtilLogManager *) nil_chk([((NetI2pI2PAppContext *) nil_chk(ctx)) logManager])) getLogWithIOSClass:NetI2pClientImplMessageState_class_()]);
  self->_nonce_ = nonce;
  JreStrongAssign(&self->_prefix_, JreStrcat("$$J$", [((id<NetI2pClientI2PSession>) nil_chk(session)) description], @" [", self->_nonce_, @"]: "));
  self->_created_ = [((NetI2pUtilClock *) nil_chk([ctx clock])) now];
  self->_expires_ = expires;
  JreStrongAssign(&self->_listener_, listener);
  JreStrongAssign(&self->_session_, session);
}

NetI2pClientImplMessageState *new_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_(NetI2pI2PAppContext *ctx, jlong nonce, id<NetI2pClientI2PSession> session, jlong expires, id<NetI2pClientSendMessageStatusListener> listener) {
  J2OBJC_NEW_IMPL(NetI2pClientImplMessageState, initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_, ctx, nonce, session, expires, listener)
}

NetI2pClientImplMessageState *create_NetI2pClientImplMessageState_initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_(NetI2pI2PAppContext *ctx, jlong nonce, id<NetI2pClientI2PSession> session, jlong expires, id<NetI2pClientSendMessageStatusListener> listener) {
  J2OBJC_CREATE_IMPL(NetI2pClientImplMessageState, initWithNetI2pI2PAppContext_withLong_withNetI2pClientI2PSession_withLong_withNetI2pClientSendMessageStatusListener_, ctx, nonce, session, expires, listener)
}

void NetI2pClientImplMessageState_locked_updateWithInt_(NetI2pClientImplMessageState *self, jint status) {
  switch (status) {
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_ACCEPTED:
    if (self->_state_ == JreLoadEnum(NetI2pClientImplMessageState_State, INIT)) JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, ACCEPTED));
    break;
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_BEST_EFFORT_FAILURE:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_GUARANTEED_FAILURE:
    if (self->_state_ != JreLoadEnum(NetI2pClientImplMessageState_State, FAIL) && self->_state_ != JreLoadEnum(NetI2pClientImplMessageState_State, SUCCESS)) JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, PROBABLE_FAIL));
    break;
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_LOCAL:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_ROUTER:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NETWORK:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_SESSION:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_MESSAGE:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_OPTIONS:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_OVERFLOW:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_EXPIRED:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_LOCAL_LEASESET:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NO_TUNNELS:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_UNSUPPORTED_ENCRYPTION:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_DESTINATION:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_BAD_LEASESET:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_EXPIRED_LEASESET:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_FAILURE_NO_LEASESET:
    case NetI2pClientSendMessageStatusListener_STATUS_CANCELLED:
    if (self->_state_ != JreLoadEnum(NetI2pClientImplMessageState_State, SUCCESS)) JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, FAIL));
    break;
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_BEST_EFFORT_SUCCESS:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_GUARANTEED_SUCCESS:
    case NetI2pDataI2cpMessageStatusMessage_STATUS_SEND_SUCCESS_LOCAL:
    JreStrongAssign(&self->_state_, JreLoadEnum(NetI2pClientImplMessageState_State, SUCCESS));
    break;
    default:
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplMessageState)

J2OBJC_INITIALIZED_DEFN(NetI2pClientImplMessageState_State)

NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_values_[5];

@implementation NetI2pClientImplMessageState_State

+ (NetI2pClientImplMessageState_State *)INIT {
  return JreEnum(NetI2pClientImplMessageState_State, INIT);
}

+ (NetI2pClientImplMessageState_State *)ACCEPTED {
  return JreEnum(NetI2pClientImplMessageState_State, ACCEPTED);
}

+ (NetI2pClientImplMessageState_State *)PROBABLE_FAIL {
  return JreEnum(NetI2pClientImplMessageState_State, PROBABLE_FAIL);
}

+ (NetI2pClientImplMessageState_State *)FAIL {
  return JreEnum(NetI2pClientImplMessageState_State, FAIL);
}

+ (NetI2pClientImplMessageState_State *)SUCCESS {
  return JreEnum(NetI2pClientImplMessageState_State, SUCCESS);
}

+ (IOSObjectArray *)values {
  return NetI2pClientImplMessageState_State_values();
}

+ (NetI2pClientImplMessageState_State *)valueOfWithNSString:(NSString *)name {
  return NetI2pClientImplMessageState_State_valueOfWithNSString_(name);
}

- (NetI2pClientImplMessageState_State_Enum)toNSEnum {
  return (NetI2pClientImplMessageState_State_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNetI2pClientImplMessageState_State;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNetI2pClientImplMessageState_State;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INIT", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ACCEPTED", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "PROBABLE_FAIL", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "FAIL", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SUCCESS", "LNetI2pClientImplMessageState_State;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(NetI2pClientImplMessageState_State, INIT), &JreEnum(NetI2pClientImplMessageState_State, ACCEPTED), &JreEnum(NetI2pClientImplMessageState_State, PROBABLE_FAIL), &JreEnum(NetI2pClientImplMessageState_State, FAIL), &JreEnum(NetI2pClientImplMessageState_State, SUCCESS), "LNetI2pClientImplMessageState;", "Ljava/lang/Enum<Lnet/i2p/client/impl/MessageState$State;>;" };
  static const J2ObjcClassInfo _NetI2pClientImplMessageState_State = { "State", "net.i2p.client.impl", ptrTable, methods, fields, 7, 0x401a, 2, 5, 7, -1, -1, 8, -1 };
  return &_NetI2pClientImplMessageState_State;
}

+ (void)initialize {
  if (self == [NetI2pClientImplMessageState_State class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      ((void)(NetI2pClientImplMessageState_State_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      NetI2pClientImplMessageState_State_initWithNSString_withInt_(e, JreEnumConstantName(NetI2pClientImplMessageState_State_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(NetI2pClientImplMessageState_State)
  }
}

@end

void NetI2pClientImplMessageState_State_initWithNSString_withInt_(NetI2pClientImplMessageState_State *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *NetI2pClientImplMessageState_State_values() {
  NetI2pClientImplMessageState_State_initialize();
  return [IOSObjectArray arrayWithObjects:NetI2pClientImplMessageState_State_values_ count:5 type:NetI2pClientImplMessageState_State_class_()];
}

NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_valueOfWithNSString_(NSString *name) {
  NetI2pClientImplMessageState_State_initialize();
  for (int i = 0; i < 5; i++) {
    NetI2pClientImplMessageState_State *e = NetI2pClientImplMessageState_State_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

NetI2pClientImplMessageState_State *NetI2pClientImplMessageState_State_fromOrdinal(NSUInteger ordinal) {
  NetI2pClientImplMessageState_State_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return NetI2pClientImplMessageState_State_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetI2pClientImplMessageState_State)
